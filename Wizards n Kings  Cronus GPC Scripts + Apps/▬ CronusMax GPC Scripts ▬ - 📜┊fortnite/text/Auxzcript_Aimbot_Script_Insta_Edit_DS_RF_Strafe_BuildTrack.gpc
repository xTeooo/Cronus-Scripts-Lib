// GPC Online Library
// auxzifys_cronusmax_aimbot_script_leak.gpc

//Auxzify's Aimbot Script
//Version 1

//-----------------------------------------------------

int SensitiveAbuse = TRUE; // TAP "RIGHT" to Enable/Disable
 
//-----------------------------------------------------
// BUTTON LAYOUT: BUILDER PRO / COMBAT PRO

define FIRE_BTN = 4; //XB1_RT //PS4_R2
define FIRE = 4; //XB1_RT //PS4_R2
define ADS_BTN = 7; //XB1_LT //PS4_L2
define ADS = 7; //XB1_LT //PS4_L2
define RBUMP = 3; //XB1_RB //PS4_R1
define SPRINT_BTN = 8; //XB1_LS //PS4_L3
define R_X = 9; //XB1_RX //PS4_RX
define R_Y = 10; //XB1_RY //PS4_RY
define L_X = 11; //XB1_X //PS4_LX
define L_Y = 12; //XB1_LY //PS4_LY
define UP = 13; //XB1_UP //PS4_UP
define DOWN = 14; //XB1_DOWN //PS4_DOWN
define LEFT = 15; //XB1_LEFT //PS4_LEFT
define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT
define BUILD = 18; //PS4_CIRCLE
define CROUCH = 5; //PS4_R3
define RELOAD_BTN = 20; //PS4_SQUARE
define PICKAXE = 17; //PS4_TRIANGLE
//-----------------------------------------------------

//SILENT AIM ABUSE - MODE 1
int aa_p  = 22; 
int aa_n = -22; 
int aa_delay  = 20;
int release = 25; 

//AIMBOT - MODE 2
int aimabuse_hold;
int aimabuse_wait;

int EDIT_BUTTON = BUILD; //Your in game edit button                      
int EDIT_BUTTON_HOLD  = TRUE;  //If you dont have hold time make this "FALSE"  
int HOLD_TIME         = 150;   //Your in game edit hold time (0.200 = 200)     
int EDIT_RESET_BUTTON = CROUCH;//Your in game edit reset button                
		
int RapidFire = FALSE;     //Press  DPAD LEFT + R2 to turn on rapidfire
		
int RIGHTa = 200; //How long to go RIGHT= Strafe
int LEFTa = 200; //How long to go LEFT= Strafe
int Dropshot = FALSE;
int Strafe = FALSE

//-----------------------------------------------------
 
main {
 //L2 & SQUARE = ON/OFF   
if(get_val(ADS) && event_press(RELOAD_BTN)){// Change RELOAD_BTN for BUILD to use L2 & CIRCLE as ON/OFF 
Dropshot =! Dropshot;}
if(Dropshot){
if(get_val(ADS)&&get_val(FIRE)){combo_run(Dropshot);}
if (event_press(18)){ Dropshot = FALSE; }}     	     

if (a) {                                                                             
if (i < num) {                                                                     
if (!combo_running(master)) {                                                     
combo_run(master);                                                                
}                                                                            
} else if (i > num) {                                                           
a = FALSE; }}                                                                                                                                                                                                      																																																																																																																																													                                                                                                                                                                                                                                                                                                                                                                                  	                                                                                                                     
if(EDIT_BUTTON_HOLD)                                                                     
{                                                                            
if(get_val(EDIT_BUTTON) && get_ptime(EDIT_BUTTON) > HOLD_TIME)                     
{                                                                               
edit = TRUE;                                                                      
}                                                                                
}                                                                                  
else if(!EDIT_BUTTON_HOLD)                                                        
{                                                                                
if(get_val(EDIT_BUTTON))                                                         
{                                                                               
edit = TRUE;                                                                      
}                                                                               
}                                                                                  
if (edit == TRUE) {                                                                 
if (get_val(BUILD)) {                                                       
}                                                                                
if (event_release(FIRE) || get_val(EDIT_RESET_BUTTON) || get_val(PICKAXE)) {  
set_click(BUILD, 1, 0);                                                 
edit = FALSE;}}
		
//Strafe LEFT & R1 = ON/OFF
if(get_val(LEFT) && event_press(RBUMP)) { 
Strafe =! Strafe;}
		
if(Strafe){ 
if (get_val(ADS) && get_val(FIRE)) {                                   
combo_run(Strafe1);}   
if (event_press(18)){ Strafe = FALSE; }}		

// LEFT & R2 = ON/OFF
if(get_val(LEFT) && event_press(FIRE)) { 
RapidFire =! RapidFire;}                                                      
		                                               
if(RapidFire){                                                                             
if (get_val(ADS) && get_val(FIRE)) {                                   
combo_run(RapidFire);} 
if (event_press(18)){ RapidFire = FALSE; }}

//CHANGE "RIGHT" TO CHANGE YOUR TOGGLE (USE LAYOUT ABOVE) 
if (event_press(RIGHT)) {
if (event_press(RIGHT)) {
SensitiveAbuse  =!SensitiveAbuse ;
}
set_val(RIGHT, 0);
}
                                          
if (SensitiveAbuse) {
if (get_val(ADS_BTN) > 95) {
aimabuse_hold = 320; // HOW LONG IS L2 HELD FOR Change to = 180 Fast Value
aimabuse_wait = 30; // HOW LONG IS L2 NOT HELD FOR Change = 20  Fast Value
combo_run(AIM_ABUSE); //AIM ABUSE
}
else {
combo_stop(AIM_ABUSE);
}
}
    
if(get_val(7)  && !get_val(16)) combo_run(AA_XY);
else combo_stop(AA_XY);             

if (abs(get_val(XB1_LY)) < 0 && abs(get_val(XB1_LX)) < 0 ){ 
set_val(XB1_LY,0); 
set_val(XB1_LX,0); 
} 
if (abs(get_val(XB1_RY)) < 0 && abs(get_val(XB1_RX)) < 0 ){ 
set_val(XB1_RY,0); 
set_val(XB1_RX,0); 
}}

//-----------------------------------------------------

// COMBO BLOCKS 
 
 
combo AIM_ABUSE { // RAPID AIM
set_val(ADS_BTN, 100);
wait(aimabuse_hold);
set_val(ADS_BTN, 0);
wait(aimabuse_wait);
}

combo AA_XY {
set_val(10,xy_val(10,aa_p));
wait(aa_delay)
set_val(9,xy_val(9,aa_p));
set_val(11,xy_val(11,aa_p));
wait(aa_delay)
set_val(10,xy_val(10,aa_n));
wait(aa_delay)
set_val(9,xy_val(9,aa_n));
set_val(11,xy_val(11,aa_n));
wait(aa_delay)
}
combo Dropshot{
set_val(CROUCH,100);
wait(40);
wait(200);
set_val(CROUCH,100);}
		
combo Strafe1 {
set_val(11,100);
wait(RIGHTa);
set_val(11,-100);
wait(LEFTa);}
		
combo master {                                                                               
wait(WAIT);                                                                                  
set_val(button, 100);                                                                        
wait(28);                                                                                    
set_val(button, 0);                                                                          
wait(28);                                                                                    
i = i + 1;}           
			
function set_click(B, Num, Wait) {                                                           
WAIT = Wait;                                                                                 
i = 0;                                                                                       
button = B;                                                                                  
num = Num;                                                                                   
a = TRUE; }  
			
int edit = FALSE;                                                                        
int pressedIt[6];                                                                       
int WAIT;                                                                               
int num, i, a;                                                                           
int button;
			
combo RapidFire {                                                                            
set_val(FIRE, 100);                                                                     
wait(120);                                                                                   
set_val(FIRE, 0);                                                                       
wait(30);}

function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < release)
return f_val;
return get_val(f_axis); }