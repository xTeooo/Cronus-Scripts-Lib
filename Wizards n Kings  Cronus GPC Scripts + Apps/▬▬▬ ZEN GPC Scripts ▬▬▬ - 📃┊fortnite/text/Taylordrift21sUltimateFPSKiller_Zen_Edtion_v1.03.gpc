/*
								___________                 __                        ___         __   _____   __   ________   ____ /\        
								\__    ___/_____    ___.__.|  |    ____  _______   __| _/_______ |__|_/ ____\_/  |_ \_____  \ /_   |)/  ______
								  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ / __ | \_  __ \|  |\   __\ \   __\ /  ____/  |   |   /  ___/
								  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \// /_/ |  |  | \/|  | |  |    |  |  /       \  |   |   \___ \ 
								  |____|   (____  / / ____||____/ \____/  |__|   \____ |  |__|   |__| |__|    |__|  \_______ \ |___|  /____  >
								                \/  \/                                \/                                    \/             \/ 
														 ____ ___  __     __    __                    __            
														|    |   \|  |  _/  |_ |__|  _____  _____   _/  |_   ____   
														|    |   /|  |  \   __\|  | /     \ \__  \  \   __\_/ __ \  
														|    |  / |  |__ |  |  |  ||  Y Y  \ / __ \_ |  |  \  ___/  
														|______/  |____/ |__|  |__||__|_|  /(____  / |__|   \___  > 
														                                 \/      \/             \/ 
																	_____________________   _________ 
																	\_   _____/\______   \ /   _____/ 
																	 |    __)   |     ___/ \_____  \  
																	 |     \    |    |     /        \  First Person Shooter 
																	 \___  /    |____|    /_______  / 
																	     \/                       \/ 													                                 
																									
																 ____  __  __  __    __                    
																|    |/ _||__||  |  |  |    ____  _______  
																|      <  |  ||  |  |  |  _/ __ \ \_  __ \  v1.03
																|    |  \ |  ||  |__|  |__\  ___/  |  | \/ 
																|____|__ \|__||____/|____/ \___  > |__|    
																        \/                     \/          

TAYLORDRIFT21'S FPS KILLER FEATURES EVERYTHING YOU NEED FOR ANY FPS GAME... RUMBLE AR - PROGRESSIVE AR - AA V3 - AA V4 WITH NEW SHAPES - BATTS AA - DOGZ HEADSHOT AA - DONOTATME STEADY AIM - & LOADS MORE...

EVEN FEATURING PRO-AIM'S SNIPER MODE - FEATURES SCOTTISH TRY HARD HAND GUN MODE - FEATURES C14HER POLAR APOCALYPSE DYNAMIC RF AND MORE.... 

/************************************** S C R I P T  C R E D I T S  B E L O W *******************************************

___________                 __                   ________            __   _____   __   ________   ____ 
\__    ___/_____    ___ __ |  |    ____  _______ \______ \  _______ |__|_/ ____\_/  |_ \_____  \ /_   |
  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ |    |  \ \_  __ \|  |\   __\ \   __\ /  ____/  |   |
  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \/ |    `   \ |  | \/|  | |  |    |  |  /       \  |   |  S C R I P T  A U T H O R 
  |____|   (____  / / ____||____/ \____/  |__|   /_______  / |__|   |__| |__|    |__|  \_______ \ |___|
                \/  \/                                   \/                                    \/       
___________________    ________   ____  ___________                          
\__    ___/\______ \   \_____  \ /_   | \__    ___/  ____  _____     _____   
  |    |    |    |  \   /  ____/  |   |   |    |   _/ __ \ \__  \   /     \  
  |    |    |    `   \ /       \  |   |   |    |   \  ___/  / __ \_|  Y Y  \  CEORIN       CROW          ZKULTRA      BUDDAH     RUMOUR       SHADOWSFROMPR       MATTJK 
  |____|   /_______  / \_______ \ |___|   |____|    \___  >(____  /|__|_|  /        TSTOTSI    SANDYCHRIS       WAYNE0      MONO_5      BOOBA              XXKSCXX             
                   \/          \/                       \/      \/       \/                       
 ___   ____          _                   _________                            __                           
\   \ /   /_____   |  |   __ __   ____   \_   ___ \ _______   ____  _____   _/  |_   ____  _______   ______
 \   Y   / \__  \  |  |  |  |  \_/ __ \  /    \  \/ \_  __ \_/ __ \ \__  \  \   __\ /  _ \ \_  __ \ /  ___/
  \     /   / __ \_|  |__|  |  /\  ___/  \     \____ |  | \/\  ___/  / __ \_ |  |  (  <_> ) |  | \/ \___ \   THEPOPOP - WHATSPOPN - BOJAN EU - NAVI - RAIDEN - ROB ATHERTON - SOAR BLRY
   \___/   (____  /|____/|____/  \___  >  \______  / |__|    \___  >(____  / |__|   \____/  |__|   /____  >
                \/                   \/          \/              \/      \/                             \/ 

Credits - Noozbar - DoGzTheFiGhTeR - Batts - Excalibur - DoNotAtME - Swizzy - Fadexz - Cronus Community 

/*------------------------------- INSTRUCTIONS PLEASE READ ------------------------------------------
=====================================================================================================
Enter Mod Menu   							= HOLD ADS & OPTIONS  
-----------------------------------------------------------------------------------------------------
Exit Menu                                   = CIRCLE/B 
-----------------------------------------------------------------------------------------------------
Enter Edit Menu To Change Values            = CROSS/A 
-----------------------------------------------------------------------------------------------------
Exit Edit Menu To Mod Menu                  = CIRCLE/B
-----------------------------------------------------------------------------------------------------
Enable/Disable KillSwitch                   = HOLD ADS & SHARE
-----------------------------------------------------------------------------------------------------
Change Profiles In The Menu                 = TRIANGLE/Y
-----------------------------------------------------------------------------------------------------
Change Values In Edit Menu                  = HOLD ADS & LEFT OR RIGHT OR UP OR DOWN
-----------------------------------------------------------------------------------------------------
Turn Mods On/Off                            = PRESS UP / DOWN TO CYCLE TOGGLE OPTIONS IF APPLICABLE
-----------------------------------------------------------------------------------------------------
Navigate The Main Menu                      = PRESS UP / DOWN 
-----------------------------------------------------------------------------------------------------
Navigate Mod Menu & Edit Menu               = PRESS LEFT / RIGHT 
-----------------------------------------------------------------------------------------------------
Choosing Buttons For Profiles/QuickToggles  = HOLD ADS & PRESS LEFT OR RIGHT 
-----------------------------------------------------------------------------------------------------
====================================================================================================*/

const int8 PolarArray[] = { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8 LinearArray[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};

const string MainMenuId[] = {"AR + AA","Shot Mods","Misc Mods","Settings","Controller Config",""};
// Display Mods In the OLED Menu \\
const string ModNames[] = {"Choose AR","Progressive AR","Taylor AA","Batts StickyAim","Steady Aim","DoGz HeadShot AA ","Rapid Fire","Dynamic RF","Akimbo Rf","StrafeShot",
//                              0              1              2             3                4               5               6            7            8           9       
"Cancel Reload","RF Fire Type","Custom Sens","Cancel Slide","QuickScope","HoldBreath","BunnyHop","Prone Shot","JumpShot","Fast Melee","AutoRun","AutoAim","Vm Speed","Sniper/HGun Mode",
//    10              11             12            13            14           15          16          17          18         19           20        21        22            23                  
"Profile Btn","Resync Btns","Custom Profile","Rapid Fire","Sniper/HGun Mode","ProneShot","JumpShot","Ads Btn","Fire Btn","Tactical Btn","Lethal Btn","Crouch Btn","Jump Btn","Reload Btn",
//    24            25             26              27            28               29          30        31         32            33           34           35          36          37  
"Melee Btn","Swap Btn","Sprint Btn","Block Rumble","Hair Triggers","PS4 on XBOX",""}; 
//    38        39           40           41             42             43
// Display Editable Values In The OLED Menu \\
const string ValNames[]  = { "V Strength","H Strength","V Start","V Mid","V End","V Time","H Start","H Mid","H End","H Time","AA Type","Choose Shape","Speed","Radius","Boost On Fire","Boost Str","Boost Spd",          
//                                0             1          2        3       4       5         6         7      8       9        10           11          12      13           14            15         16                        
"Taylor Tracking","Tracking Size","Tracking Speed", "Sticky Size","Sticky Time","SteadyValue","ActivePoint","HeadShot Str","HeadShot Spd","Rounds/Sec","StrafeTime","Reload Time","General","Ads","Fire",
//    17                 18               19              20            21            22            23             24             25           26           27            28          29     30     31
"AdsFire","Slide Delay","QuickScopeDelay","AR VertStrength","Speed","Radius","General","Ads","Fire","AdsFire","Auto Rapid Fire","Auto Hold Breath",""}
//  32          33             34                   35         36       37       38      39    40      41            45                 46
// Display Misc Strings Used Throughout The Menu Including Combo's \\Yes
const string Misc[]     = {"On","Off","Primary","Secondary","Custom Profile","All Profiles","Controller","Prim/Sec","< Quick Toggles >","Taylordrift21","FPS Killer","Sniper/HGun Mode","Activated",
 //                          0    1       2          3              4              5              6           7              8                 9             10            11               12            
"KillSwitch","Deactivated","Disables Prim/Sec","Rapid Fire Only","Saved","Ultimate v1.03","Controller","Remap",""};
 //  13         14                 15                 16          17            

const string Profiles[]        = {"Primary","Secondary","Custom Profile",""}; 

const string ARToggle[]        = {"Choose AR","Legacy AR","Rumble AR",""} ;

const string AAToggle[]        = {"Choose AA","AA V3","AA V4","AA V5","V5 + Spd Boost",""}; 

const string RFToggle[]        = {"Fire Only","Ads + Bumper",""}; 

const string VMSpeed[]         = {"0","-2","-4","-6","-8","-9",""};

const string SlideType[]       = {"Off","Mw/Vanguard","ColdWar",""};

const string CurveType[]       = {"Polar","Linear",""};

const string CircularCurve[]   = {"Circular","Tall Oval","Wide Oval","Vortex Oval","Spiral","Helix",""};

const string SquareCurve[]     = {"Diamond","Tall Diamond","Wide Diamond","Spiral Prism","Spiral Diamond","Helix Diamond",""}; 

const string PressButtons[]    = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const string HoldButtons[]     = { "Select","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Dpad Down","Dpad Up","Dpad Left","Dpad Right", ""};

const int8   HoldBtns []       = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 ,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT}; 

const int8   PressBtns[]       = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

const string  ControllerBtnsIdx[] = { "Select","L2 / LT","R2 / RT","L1 / LB","R1 / RB","CIRCLE / B","CROSS / A","SQUARE / X","R3 / RS","TRIANGLE / Y","L3 / LS",""};

const int8  ControllerBtns[] = { -1 , PS4_L2 , PS4_R2 ,PS4_L1 , PS4_R1, PS4_CIRCLE,PS4_CROSS,PS4_SQUARE,PS4_R3,PS4_TRIANGLE,PS4_L3 }; 

const uint8  ModRange   [][]   = { 
{   0 ,  5 , 1}, // N/A     \\
{   6 , 11 , 1}, // Main  1 \\
{  12 , 23 , 1}, // Main  2 \\
{  24 , 30 , 1}, // Main  3 \\
{  31 , 43 , 1}  // Main  3 \\
};
const uint8 ModsNToggles[][] = {
// ModIdx - MinToggle - MaxToggle - ValRangeMin - ValRangeMax - Editable - Profile 
//    0         1           2            3             4            5         6    \\
{     0   ,     0     ,     2     ,      0      ,      1      ,     1    ,    1  },// Leg/Rum AR  \\
{     1   ,     0     ,     1     ,      2      ,      9      ,     1    ,    1  },// Progressive \\
{     2   ,     0     ,     4     ,     10      ,     19      ,     1    ,    0  },// TaylorAA    \\
{     3   ,     0     ,     1     ,     20      ,     21      ,     1    ,    0  },// BattsAA     \\
{     4   ,     0     ,     1     ,     22      ,     23      ,     1    ,    0  },// SteadyAim   \\
{     5   ,     0     ,     1     ,     24      ,     25      ,     1    ,    0  },// HeadShot    \\
{     6   ,     0     ,     1     ,     26      ,     26      ,     1    ,    1  },// RapidFire   \\
{     7   ,     0     ,     1     ,     26      ,     26      ,     1    ,    1  },// DynamicRf   \\
{     8   ,     0     ,     1     ,     26      ,     26      ,     1    ,    1  },// AkimboRf    \\
{     9   ,     0     ,     1     ,     27      ,     27      ,     1    ,    1  },// StrafeShot  \\
{    10   ,     0     ,     1     ,     28      ,     28      ,     1    ,    0  },// CancelReload\\
{    11   ,     0     ,     1     ,      0      ,      0      ,     0    ,    6  },// RFFireType  \\
{    12   ,     0     ,     1     ,     29      ,     32      ,     1    ,    0  },// Sensitivity \\
{    13   ,     0     ,     2     ,     33      ,     33      ,     1    ,    0  },// CancelSlide \\
{    14   ,     0     ,     1     ,     34      ,     34      ,     1    ,    1  },// QuickScope  \\
{    15   ,     0     ,     1     ,      0      ,      0      ,     0    ,    1  },// HoldBreath  \\
{    16   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// BunnyHop    \\
{    17   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// ProneShot   \\
{    18   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// JumpShot    \\
{    19   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// FastMelee   \\
{    20   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// AutoRun     \\
{    21   ,     0     ,     1     ,      0      ,      0      ,     0    ,    0  },// AutoAim     \\
{    22   ,     0     ,     5     ,      0      ,      0      ,     0    ,    0  },// VmSpeed     \\
{    23   ,     0     ,     1     ,     35      ,     43      ,     1    ,    1  },// SniperMode  \\
{    24   ,     0     ,     8     ,      0      ,      0      ,     0    ,    7  },// ProfileBtn  \\
{    25   ,     0     ,     0     ,      0      ,      0      ,     0    ,    7  },// ResyncBtns  \\
{    26   ,     0     ,     0     ,      0      ,      0      ,     0    ,    8  },// RapidFire   \\
{    27   ,     0     ,     0     ,      0      ,      0      ,     0    ,    9  },// StrafeShot  \\
{    28   ,     0     ,     0     ,      0      ,      0      ,     0    ,    9  },// ProneShot   \\
{    29   ,     0     ,     0     ,      0      ,      0      ,     0    ,    9  },// JumpShot    \\
{    30   ,     0     ,     0     ,      0      ,      0      ,     0    ,    9  },// JumpShot   \\
{    31   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// AdsBtn     \\
{    32   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// FireBtn    \\
{    33   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// TacBtn     \\
{    34   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// LethalBtn  \\
{    35   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// CrouchBtn  \\
{    36   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// JumpBtn    \\
{    37   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// ReloadBtn  \\
{    38   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// MeleeBtn   \\
{    39   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// SwapBtn    \\
{    40   ,     0     ,    10     ,      0      ,      0      ,     0    ,   10  },// SpringBtn  \\
{    41   ,     0     ,     1     ,      0      ,      0      ,     0    ,   10  },// BlockRum   \\
{    42   ,     0     ,     1     ,      0      ,      0      ,     0    ,   10  },// HTrigger   \\
{    43   ,     0     ,     1     ,      0      ,      0      ,     0    ,   11  } // Ps4OnXbox  \\
};
const int16 ValRangeMinMax [][] = {
// ValIdx - MinValue - MaxValue - IncrementMin - IncrementMax - Profile \\
//    0        1          2             3              4           5         \\    
{     0   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // Vert       \\
{     1   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // Horiz      \\
{     2   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertStart  \\
{     3   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertMid    \\
{     4   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertEnd    \\
{     5   ,    0     ,   99     ,       1      ,      10      ,    1      }, // VertTime   \\
{     6   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertStart  \\
{     7   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertMid    \\
{     8   ,  -99     ,   99     ,       1      ,      10      ,    1      }, // VertEnd    \\
{     9   ,    0     ,   99     ,       1      ,      10      ,    1      }, // VertTime   \\
{    10   ,    0     ,    1     ,       1      ,       1      ,    0      }, // AAType     \\
{    11   ,    0     ,    5     ,       1      ,       1      ,    0      }, // AAShape    \\
{    12   ,    0     ,   99     ,       1      ,      10      ,    0      }, // SpeedAA    \\
{    13   ,    0     ,   99     ,       1      ,      10      ,    0      }, // RadiusAA   \\
{    14   ,    0     ,    1     ,       1      ,       1      ,    0      }, // BoostFire  \\
{    15   ,    0     ,   40     ,       1      ,      10      ,    0      }, // Boost Str  \\
{    16   ,    0     ,   40     ,       1      ,      10      ,    0      }, // Boost Spd  \\
{    17   ,    0     ,    1     ,       1      ,       1      ,    0      }, // TrackTog   \\
{    18   ,    0     ,    8     ,       1      ,       1      ,    0      }, // TrackSize  \\
{    19   ,    0     ,    8     ,       1      ,       1      ,    0      }, // TrackSpeed \\
{    20   ,    0     ,   99     ,       1      ,      10      ,    0      }, // StickySize \\
{    21   ,    0     ,   99     ,       1      ,      10      ,    0      }, // StickyTime \\
{    22   ,    2     ,   90     ,       1      ,      10      ,    0      }, // SteadyValue\\
{    23   ,    0     ,   80     ,       1      ,      10      ,    0      }, // SteadyRel  \\
{    24   ,    0     ,   60     ,       1      ,      10      ,    0      }, // HeadShotStr\\
{    25   ,    0     ,   40     ,       1      ,      10      ,    0      }, // HeadShotSpd\\
{    26   ,    0     ,   25     ,       1      ,      10      ,    0      }, // RateOfFire \\
{    27   ,    0     ,  990     ,      10      ,     100      ,    0      }, // StrafeTime \\
{    28   ,    0     , 5000     ,      10      ,     100      ,    0      }, // ReleoadTime\\
{    29   ,    0     ,  327     ,       1      ,      10      ,    0      }, // GeneralSens\\
{    30   ,    0     ,  327     ,       1      ,      10      ,    0      }, // AdsSens    \\
{    31   ,    0     ,  327     ,       1      ,      10      ,    0      }, // FireSens   \\
{    32   ,    0     ,  327     ,       1      ,      10      ,    0      }, // AdsFireSens\\
{    33   ,    0     ,  200     ,       1      ,      10      ,    0      }, // SlideDelay \\
{    34   ,    0     ,  600     ,       1      ,      10      ,    0      }, // QuickSDelay\\
{    35   ,  -99     ,   99     ,       1      ,      10      ,   10      },  //VertHandGun\\
{    36   ,    0     ,   99     ,       1      ,      10      ,   10      },  //VertHandGun\\
{    37   ,    0     ,   99     ,       1      ,      10      ,   10      },  //VertHandGun\\
{    38   ,    0     ,  327     ,       1      ,      10      ,   10      }, // GeneralSnip\\
{    39   ,    0     ,  327     ,       1      ,      10      ,   10      }, // AdsSensSnip\\
{    40   ,    0     ,  327     ,       1      ,      10      ,   10      }, // FireSen    \\
{    41   ,    0     ,  327     ,       1      ,      10      ,   10      }, // AdsFireSens\\
{    42   ,    0     ,    1     ,       1      ,       1      ,   10      }, // AutoRF     \\
{    43   ,    0     ,    1     ,       1      ,       1      ,   10      }  // AutoHB     \\
}
int ModIdx;
int ValIdx;
int ModORVal                  [3]  ;
int ModOrEditMenu             [4]  ;
int DisplayMenu;
// Mod Menu Variables \\
int ToggleTaylorAR[3];
int ToggleProgressive[3];
int ToggleTaylorAA; 
int ToggleAAType; 
int TaylorShapes;
int TaylorTracking;
int ToggleBoostFire;
int ToggleBattsStickyAim;
int ToggleSteadyAim;
int HeadAssist;
int ToggleRapidFire[3];
int ToggleDynamicRf[3];
int ToggleAkimboRf[3];
int ToggleRapidFireType[3]; 
int ToggleStrafeShot[3];
int ToggleCancelReload;
int ToggleTaylorSens;
int ToggleCancelSlide;
int ToggleQuickScope[3];
int ToggleHoldBreath[3];
int ToggleBunnyHop;
int ToggleProneShot;
int ToggleJumpShot;
int ToggleFastMelee;
int ToggleAutoRun;
int ToggleAutoAim;
int ToggleVmSpeed; 
int ToggleSniperMode[3];
// Edit Menu Variables \\ 
int TaylorARVert[3]  ;
int TaylorARHoriz[3]  ; 
int VerticalStart[3]  ;
int VerticalMid[3]  ;
int VerticalEnd[3]  ;
int VerticalTime[3]  ;
int HorizontalStart[3]  ;
int HorizontalMid[3]  ; 
int HorizontalEnd[3]  ;
int HorizontalTime[3]  ;
int TaylorRadius;
int TaylorAngle;
int TrackingSize;
int TrackingSpeed;
int TaylorPBoostStr;
int TaylorABoostSpd; 
int AimAssistSize;
int AimAssistTime;
int SteadyValue; 
int ReleaseAim;
int HeadMax;
int HeadStep;
int RateOfFire[3];
int StrafeShotTime;
int ReloadTime; 
int GeneralSens,AdsSens,FireSens,AdsFireSens;
int SlideDelay; 
int QuickScopeDelay; 
int HandGunVertical;
int HandGunAASpeed;
int HandGunAASize;
int SniperGenSens;
int SniperAdsSens;
int SniperFireSens;
int SniperAdsFireSens;
int ToggleAutoRF,ToggleAutoHB;
int HoldTime,RestTime,LedOn,LedOff;
int DisplayQToggles;
int ProfileIdx; 
int KillSwitch,ScreenSaver,BlankScreen,HighLight,SelectedProfileIdx,CustomProfile;
int AdsBtnIdx,FireBtnIdx,TacticalBtnIdx,LethalBtnIdx,CrouchBtnIdx,JumpBtnIdx,ReloadBtnIdx,MeleeBtnIdx,SwapBtnIdx,SprintBtnIdx;
int Ads,Fire,Tactical,Lethal,Crouch,Jump,Reload,Melee,Swap,Sprint;
int ToggleBlockRumble;  
int PSonXBOX;         
int ToggleHairTriggers;
int DisplayTitle = TRUE;
define False     = FALSE;
define True      = TRUE; 
define Small  = 0;
define Medium = 1;
define Large  = 2;
define ActivateButtonCount = 7;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx;
int stringPosition,stringHeight; 
int SmartRumble,AntirecoilStrength;
int RX,RY,angle,CosAngle,SinAngle,ActualMagnitude,MaxMagnitude,GetAngle;
int PolarStrength,Angle,AngleBoost,SmartAAV1Rumble,SpiralPosition1,InnerSpiral,OuterSpiral,SpiralPosition2,Position,SpeedAngle;
int x,y,inc;
int i_val[2],i_pnt[2],VmCountV[2];
int VertTime;
int i_num;
int i_cnt;
int ar_y; 
int p;
int i_val_h[2],i_pnt_h[2],VmCountH[2];
int HorizTime;
int i_num_h;
int i_cnt_h;
int ar_x,ph;
int stringLength,FireRF;
int color; 
int vert = 4;
int Head;
int s_val; 
int FirstShotBeforeReload,ReloadInProgress,MaxReloadTime;
int TaylorFineTune  = 30;
int GenStr;
int Tracking,Tracker1,Tracker2,CAngle,SAngle,InSpiral,OutSpiral;
int HandGunVStrength,HandGunAASpd,HandGunAAStr,Str;
int CycleRefresh;
define TimeInterval = 4;
//========================================================== End Of Variables ======================================================\\
init { 
	SteadyValue = (360 / SteadyValue) / 2;
	Load();
//============ Load Variables For When The Script Is Loaded ===============\\
	InitializeShapeChange();
//=========================================================================\\
} 
main { 
//======== Enter The OLED Menu ==========\\
	ActivateAllButtons();
	
	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
		swap (PS4_TOUCH,PS4_SHARE);
	}
    if(get_ival(Ads))                                            
	{ 
		if(event_press(PS4_OPTIONS))                               
		{ 
		    MenuStatus(1,1,0,0,0,0);
		    ModORVal[0]  = 0; 
		    combo_run(RumbleOn);
		    
		    if(!ModOrEditMenu[0]){ 
		    	MenuStatus(0,0,0,0,0,1);
		    }    
	    }
	    if(event_press(PS4_SHARE)){ 
	    	KillSwitch =! KillSwitch;
	    	combo_run(ScriptOff);
	    } 
	    set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0);  
    } 
// ====================================\\

// ======== Start Of The Menu =========\\
    if(!DisplayTitle)                           
    { 
    	if(ModOrEditMenu[0]) 
        {
        	ModORVal[0]  = MenuNavigation(ModORVal[0],0,4); 
        	vm_tctrl(0);
        	
        	if(event_press(PS4_CIRCLE))
		    {
				MenuStatus(0,0,0,0,0,1);
				InitializeShapeChange();
				Save();
				combo_run(Saved);
			}	
        } 
   		if(ModOrEditMenu[1])       
     	{ 
           	ModORVal[1]   = MenuNavigation(ModORVal[1],ModRange[ModORVal[0]][0],ModRange[ModORVal[0]][1]); // Menu Navigation Function \\
           	
           	ModIdx = -1; 
			ToggleTaylorAR   [ProfileIdx]   = ToggleSwitch(ToggleTaylorAR    [ProfileIdx]);
			ToggleProgressive[ProfileIdx]   = ToggleSwitch(ToggleProgressive [ProfileIdx]);
			ToggleTaylorAA       			= ToggleSwitch(ToggleTaylorAA);
			ToggleBattsStickyAim 			= ToggleSwitch(ToggleBattsStickyAim);
			ToggleSteadyAim      			= ToggleSwitch(ToggleSteadyAim);
			HeadAssist           			= ToggleSwitch(HeadAssist);
			ToggleRapidFire  [ProfileIdx]   = ToggleSwitch(ToggleRapidFire   [ProfileIdx]);
			ToggleDynamicRf  [ProfileIdx]   = ToggleSwitch(ToggleDynamicRf   [ProfileIdx]);
			ToggleAkimboRf   [ProfileIdx]   = ToggleSwitch(ToggleAkimboRf    [ProfileIdx]);
			ToggleStrafeShot [ProfileIdx]   = ToggleSwitch(ToggleStrafeShot  [ProfileIdx]);
			ToggleCancelReload   			= ToggleSwitch(ToggleCancelReload);
			ToggleRapidFireType[ProfileIdx] = ToggleSwitch(ToggleRapidFireType[ProfileIdx]);
			ToggleTaylorSens     			= ToggleSwitch(ToggleTaylorSens);
			ToggleCancelSlide    			= ToggleSwitch(ToggleCancelSlide); 
			ToggleQuickScope [ProfileIdx]   = ToggleSwitch(ToggleQuickScope  [ProfileIdx]); 
			ToggleHoldBreath [ProfileIdx]   = ToggleSwitch(ToggleHoldBreath  [ProfileIdx]); 
			ToggleBunnyHop       			= ToggleSwitch(ToggleBunnyHop); 
			ToggleProneShot      			= ToggleSwitch(ToggleProneShot); 
			ToggleJumpShot       			= ToggleSwitch(ToggleJumpShot); 
			ToggleFastMelee      			= ToggleSwitch(ToggleFastMelee);
			ToggleAutoRun        			= ToggleSwitch(ToggleAutoRun);
			ToggleAutoAim        			= ToggleSwitch(ToggleAutoAim);  
			ToggleVmSpeed        			= ToggleSwitch(ToggleVmSpeed);  
			ToggleSniperMode [ProfileIdx]   = ToggleSwitch(ToggleSniperMode  [ProfileIdx]);  
			ActivateIndividualBtnIdx        = ToggleSwitch(ActivateIndividualBtnIdx);
			ButtonActivation(0)
			ButtonActivation(1)
			ButtonActivation(2)
			ButtonActivation(3)
			ButtonActivation(4)
			ButtonActivation(5)
			AdsBtnIdx        				= ToggleSwitch(AdsBtnIdx);
			FireBtnIdx        				= ToggleSwitch(FireBtnIdx);
			TacticalBtnIdx        			= ToggleSwitch(TacticalBtnIdx);
			LethalBtnIdx        			= ToggleSwitch(LethalBtnIdx);
			CrouchBtnIdx        			= ToggleSwitch(CrouchBtnIdx);
			JumpBtnIdx        				= ToggleSwitch(JumpBtnIdx);
			ReloadBtnIdx        			= ToggleSwitch(ReloadBtnIdx);
			MeleeBtnIdx        				= ToggleSwitch(MeleeBtnIdx);
			SwapBtnIdx        				= ToggleSwitch(SwapBtnIdx);
			SprintBtnIdx        			= ToggleSwitch(SprintBtnIdx);
			ToggleBlockRumble        	    = ToggleSwitch(ToggleBlockRumble);
			ToggleHairTriggers       		= ToggleSwitch(ToggleHairTriggers);
			PSonXBOX        				= ToggleSwitch(PSonXBOX);
			
			MenuScroll();
			vm_tctrl(0);
			
    	} 
    	if(ModOrEditMenu[2])  
	    { 
            ModORVal[2]   = MenuNavigation(ModORVal[2],ModsNToggles[ModORVal[1]][3],ModsNToggles[ModORVal[1]][4]); // Menu Navigation Function \\
            
            ValIdx = -1;
			TaylorARVert   [ProfileIdx]  = EditableValues(TaylorARVert[ProfileIdx]);
			TaylorARHoriz  [ProfileIdx]  = EditableValues(TaylorARHoriz[ProfileIdx]);
			VerticalStart  [ProfileIdx]  = EditableValues(VerticalStart[ProfileIdx]);
			VerticalMid    [ProfileIdx]  = EditableValues(VerticalMid[ProfileIdx]);
			VerticalEnd    [ProfileIdx]  = EditableValues(VerticalEnd[ProfileIdx]);
			VerticalTime   [ProfileIdx]  = EditableValues(VerticalTime[ProfileIdx]);
			HorizontalStart[ProfileIdx]  = EditableValues(HorizontalStart[ProfileIdx]);
			HorizontalMid  [ProfileIdx]  = EditableValues(HorizontalMid[ProfileIdx]);
			HorizontalEnd  [ProfileIdx]  = EditableValues(HorizontalEnd[ProfileIdx]);
			HorizontalTime [ProfileIdx]  = EditableValues(HorizontalTime[ProfileIdx]);
			ToggleAAType       			 = EditableSwitch(ToggleAAType);
			TaylorShapes      			 = EditableSwitch(TaylorShapes);
			TaylorAngle        			 = EditableValues(TaylorAngle);
			TaylorRadius       			 = EditableValues(TaylorRadius);
			ToggleBoostFire    			 = EditableSwitch(ToggleBoostFire);
			TaylorPBoostStr    			 = EditableValues(TaylorPBoostStr);
			TaylorABoostSpd   			 = EditableValues(TaylorABoostSpd);
			TaylorTracking     			 = EditableSwitch(TaylorTracking);
			TrackingSize       			 = EditableValues(TrackingSize);
			TrackingSpeed      			 = EditableValues(TrackingSpeed);
			AimAssistSize     			 = EditableValues(AimAssistSize);
			AimAssistTime      			 = EditableValues(AimAssistTime);
			SteadyValue       			 = EditableValues(SteadyValue);
			ReleaseAim        			 = EditableValues(ReleaseAim);
			HeadMax           			 = EditableValues(HeadMax); 
			HeadStep           			 = EditableValues(HeadStep);
			RateOfFire    [ProfileIdx]   = EditableValues(RateOfFire[ProfileIdx]);
			StrafeShotTime     			 = EditableValues(StrafeShotTime);
			MaxReloadTime         	     = EditableValues(MaxReloadTime);
			GeneralSens        			 = EditableValues(GeneralSens);
			AdsSens            		     = EditableValues(AdsSens);
			FireSens           			 = EditableValues(FireSens);
			AdsFireSens        			 = EditableValues(AdsFireSens);
			SlideDelay        		     = EditableValues(SlideDelay);
			QuickScopeDelay    			 = EditableValues(QuickScopeDelay);
			HandGunVertical              = EditableValues(HandGunVertical);
			HandGunAASpeed               = EditableValues(HandGunAASpeed);
			HandGunAASize                = EditableValues(HandGunAASize);
			SniperGenSens                = EditableValues(SniperGenSens);
        	SniperAdsSens                = EditableValues(SniperAdsSens);
            SniperFireSens               = EditableValues(SniperFireSens);
        	SniperAdsFireSens            = EditableValues(SniperAdsFireSens);
        	ToggleAutoRF     			 = EditableSwitch(ToggleAutoRF);
        	ToggleAutoHB     			 = EditableSwitch(ToggleAutoHB);
			MenuScroll();
			vm_tctrl(0);
        } 
    }
    if(DisplayMenu)  // Display Menu \\ 
    { 
    	rect_oled(2,3,127,50,1,0);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
		line_oled(0, 50,127 , 50, 1, 1); 
		led(ProfileIdx);
		
		if(ModOrEditMenu[1] || ModOrEditMenu[2]) {
			line_oled(0, 25,127 , 25, 1, 1); 	
		}
		if(ModOrEditMenu[2]) 
		{ 	
			String(ValNames[ModORVal[2]],Small,-24,0);   
			
			if(ValRangeMinMax [ModORVal[2]][5] == 1){ 
				String(Profiles[ProfileIdx],Small,-12,0); 
			}
			if(ValRangeMinMax [ModORVal[2]][5] == 0){ 
				String(Misc[5],Small,-12,0); 
			} 
			if(ValRangeMinMax [ModORVal[2]][5] == 10){ 
				String(Misc[11],Small,-12,0); 
			} 
		}
		else if(ModOrEditMenu[1])
		{
		    String(ModNames[ModORVal[1]],Small,-24,0);
		    
		    if(ModsNToggles[ModORVal[1]][6] == 1){
		    	String(Profiles[ProfileIdx],Small,-12,0); 
		    } 
		    if(ModsNToggles[ModORVal[1]][6] == 0){
		    	String(Misc[5],Small,-12,0); 
		    }
		    if(ModsNToggles[ModORVal[1]][6] == 7){
		    	String(Misc[7],Small,-12,0); 
		    } 
		    if(ModsNToggles[ModORVal[1]][6] == 8){
		    	String(Misc[15],Small,-12,0); 
		    } 
		    if(ModsNToggles[ModORVal[1]][6] == 9){
		    	String(Misc[8],Small,-12,0); 
		    }
		    if(ModsNToggles[ModORVal[1]][6] == 6){
		    	String(Misc[16],Small,-12,0); 
		    } 
		    if(ModsNToggles[ModORVal[1]][6] == 10){
		    	String(Misc[19],Small,-12,0); 
		    } 
		    if(ModsNToggles[ModORVal[1]][6] == 11){
		    	String(Misc[20],Small,-12,0); 
		    } 
		}
		else 
		{
			cls_oled(OLED_BLACK);
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	led(ProfileIdx);
        	
			for(i = 0;i < GetEntriesStrings(0); i++) 
			{
				if(i == ModORVal[0]) 
				{
					color = OLED_BLACK;
				}else{
		    		color = OLED_WHITE;
				}
			 	printf(64 - ((GetCharsStrings(i) * OLED_FONT_SMALL_WIDTH) / 2),vert,OLED_FONT_SMALL,color,MainMenuId[i])
				vert += 12
			}
			vert = 4;	
		}
		DisplayMenu = FALSE;
	} 
//================================== End Of Menu ======================================\\

//============================== Start Of Mod Section ==================================\\

    if(!ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2]) 
	{
	// Functions That Are Called When Not In Mod Menu / Edit Menu / Adjustable menu / Main Menu \\ 
	
    	DisplayTitleScreen();  // Line 1601
    	
    	if(!CustomProfile) 
		{
        	if(ActivateIndividualButton) 
        	{ 
        		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])) 
        		{
    				SelectedProfileIdx =! SelectedProfileIdx;
    				CustomProfile = FALSE;
    
    				if(ModOrEditMenu[1]) 
    					DisplayMenu = TRUE; 
        			else
            			DisplayTitle = TRUE;
            	}	
            	if(!CustomProfile) 
            	{
            		if(SelectedProfileIdx) 
            	   		ProfileIdx = 1;
            		else
            	   		ProfileIdx = 0; 
    			}
	    		if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
	    			set_val(ActivatePressButton[0], 0);
      		}
      	} 
        if(ActivateHoldButton[1]) 
        {
        	if(get_ival(ActivateHoldButton[1]))
            {
            	if(event_press(ActivatePressButton[1]))
            	{
	             	ProfileIdx = 2; 
		       	    CustomProfile =! CustomProfile;
		       	    
		       	    if(ModOrEditMenu[1]) 
	    				DisplayMenu = TRUE; 
	        		else
	            		DisplayTitle = TRUE;
	            		
	            	if(!CustomProfile) 
	            	{
	            		if(SelectedProfileIdx) 
	            	   		ProfileIdx = 1;
	            		else
	            	   		ProfileIdx = 0; 
	    			}
	    		} 
	       	}           
	       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1]))
	    		set_val(ActivatePressButton[1], 0);   
	   	}   	
    	
   // Everything Below Are Mods Only  & QuickToggles \\ 
   
    	if(ToggleHairTriggers && !ToggleDynamicRf[ProfileIdx] == 1) { 
    		deadzone(Ads,Fire,99,99);
    	} 
    	led(ProfileIdx);
    	
    	if(ToggleBlockRumble) 
		{
			block_rumble();
		}
    	if(KillSwitch) 
    	{
			combo_run(Blink);
			LedOn  = 150;
			LedOff = 300;	
    	} 
   		if(!KillSwitch)           
		{
			if(ToggleVmSpeed)
			{
				if(ToggleVmSpeed == 0) vm_tctrl( 0);	
			    if(ToggleVmSpeed == 1) vm_tctrl(-2);
			    if(ToggleVmSpeed == 2) vm_tctrl(-4);
			   	if(ToggleVmSpeed == 3) vm_tctrl(-6);
			   	if(ToggleVmSpeed == 4) vm_tctrl(-8);
			    if(ToggleVmSpeed == 5) vm_tctrl(-9);   	
			} 
			
			ToggleRapidFire[ProfileIdx]   = QuickToggleMods(ActivateHoldButton[2] , ActivatePressButton[2]  ,ToggleRapidFire [ProfileIdx], 6); 
			ToggleSniperMode[ProfileIdx]  = QuickToggleMods(ActivateHoldButton[3] , ActivatePressButton[3]  ,ToggleSniperMode[ProfileIdx],23); 
			ToggleProneShot               = QuickToggleMods(ActivateHoldButton[4] , ActivatePressButton[4]  ,ToggleProneShot             ,17); 
			ToggleJumpShot                = QuickToggleMods(ActivateHoldButton[5] , ActivatePressButton[5]  ,ToggleJumpShot              ,18); 
			
		    if(ToggleSniperMode[ProfileIdx] == 1) 
	        {
	        	LedBlink(1300,500);
	        	HandGunVStrength = HandGunVertical;
	        	HandGunAASpd     = HandGunAASpeed;
	        	HandGunAAStr     = HandGunAASize;
	        	
	        	InitializeShapeChange()
    		}
    		if(!ToggleSniperMode[ProfileIdx] == 1)
    		{
    			HandGunVStrength = TaylorARVert[ProfileIdx];
    			HandGunAASpd     = TaylorAngle;
    			HandGunAAStr     = TaylorRadius;	
       		} 
		    if(ToggleTaylorAR[ProfileIdx] == 1) 
    		{
       			if(get_ival(Ads) && get_ival(Fire) || ToggleAutoAim && get_ival(Fire))
        		{ 	
        			SmartSens(PS4_RY,HandGunVStrength);
					SmartSens(PS4_RX,TaylorARHoriz[ProfileIdx]);
        		}
	        }
			if(ToggleTaylorAR[ProfileIdx] == 2) 
		    { 
	        	if(get_ival(Ads) && get_ival(Fire) || ToggleAutoAim && get_ival(Fire))
	        	{
		    		GetRumble(SmartRumble,AntirecoilStrength,HandGunVStrength,2)
		    	
					if(SmartRumble < 10) 
					{
						SmartSens(PS4_RY,HandGunVStrength);
						SmartSens(PS4_RX,TaylorARHoriz[ProfileIdx]);
					}
					else
					{ 	
						SmartSens(PS4_RY,AntirecoilStrength);
						SmartSens(PS4_RX,TaylorARHoriz[ProfileIdx]);	
					}
				}
				AntirecoilStrength  = 0; 
	    	    SmartRumble = 0; 
		    } 
		    if(ToggleProgressive[ProfileIdx] == 1)  
			{
				if(VerticalStart[ProfileIdx] < VerticalMid[ProfileIdx])
					i_val[0] = 1;
				else
					i_val[0] = -1;
					
				i_pnt[0]     = abs(VerticalStart[ProfileIdx] - VerticalMid[ProfileIdx]);
				VmCountV[0]  = VertTime / i_pnt[0];
				
				if(VerticalMid[ProfileIdx] < VerticalEnd[ProfileIdx])
	        		i_val[1] = 1;
	    		else
	        		i_val[1] = -1;
    			
    			i_pnt[1]     = abs(VerticalMid[ProfileIdx] - VerticalEnd[ProfileIdx]); 
    			VmCountV[1]  = VertTime / i_pnt[1];
    			
    			VertTime     = (VerticalTime[ProfileIdx] * 10) / 2;
    			
    			
    			if(HorizontalStart[ProfileIdx] < HorizontalMid[ProfileIdx])
					i_val_h[0] = 1;
				else
					i_val_h[0] = -1;
					
				i_pnt_h[0]    = abs(HorizontalStart[ProfileIdx] -HorizontalMid[ProfileIdx]);
				VmCountH[0]   = HorizTime / i_pnt_h[0];
				
				if(HorizontalMid[ProfileIdx] < HorizontalEnd[ProfileIdx])
	        		i_val_h[1] = 1;
	    		else
	        		i_val_h[1] = -1;
    			
    			i_pnt_h[1]     = abs(HorizontalMid[ProfileIdx] - HorizontalEnd[ProfileIdx]); 
    			VmCountH[1]    = HorizTime / i_pnt_h[1];
    			
    			HorizTime      = (HorizontalTime[ProfileIdx] * 10) / 2;
    					
				if(!get_ival(Fire))  
				{
					p     = 0;
					i_cnt = 0;
					i_num = 0;
					ar_y = VerticalStart[ProfileIdx];
				
	   				ph = 0;
					i_cnt_h = 0;
					i_num_h = 0;
	        		ar_x = HorizontalStart[ProfileIdx];
				
				}
    			if(get_ival(Ads) && get_ival(Fire) || ToggleAutoAim && get_ival(Fire)) 
    			{		    
		   		    p = p_complete();
		        	if(p != -1)
		            	ar_y = p_val();
		        	else
		            	ar_y = VerticalEnd[ProfileIdx];
		          
	           		SmartSens(PS4_RY,ar_y); 
				    	
				    ph = p_complete_x();
       			 	if(ph != -1)
    	            	ar_x = p_val_x();
    	         	else
                    	ar_x = HorizontalEnd[ProfileIdx];
         
			    	SmartSens(PS4_RX,ar_x); 
    			}
	        }
			if(ToggleTaylorAA == 1) 
			{   
				RX = get_val(PS4_RX);                                
				RY = get_val(PS4_RY); 
				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
				MaxMagnitude = (ActualMagnitude < 100);                                  
				angle = angle % 360;
				Tracking = (Tracking + TrackingSpeed) % 360;
		
				AACurve();
	
			    angle += HandGunAASpd + GetAngle;
			    
				if(ToggleBoostFire) 
				{
					if(get_ival(Fire))
					{
						GetRumble(SmartAAV1Rumble,PolarStrength,TaylorPBoostStr,6)
						GetAngle = TaylorABoostSpd;
					
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	GetShapes(TaylorPBoostStr/2); 
	    			    }
	    			    else
	    			    {
							GetShapes(PolarStrength/2); 	
				    	} 
				    }
				    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}	
	    		if(get_val(Ads) || get_val(Fire) || ToggleAutoAim && get_ival(Fire))
	    		{
		        	if(ActualMagnitude < HandGunAAStr)           
		        	{
			   			SinAngle -= RX;                                                              
						CosAngle -= RY;
					}
					else
					{
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
					}
					if(!ToggleBoostFire || !get_rumble(RumbleToUse())){
						
						GetShapes(HandGunAAStr);	
					}
			    	PolarStrength = 0; 
			        SmartAAV1Rumble   = 0; 
		   		 } 
			}
			if(ToggleTaylorAA == 2) 
			{ 
				AACurve(); 
			    Tracking = (Tracking + TrackingSpeed) % 360;
			    Angle = (Angle + HandGunAASpd + AngleBoost) % 360;
			    	
				if(ToggleBoostFire) 
				{
					if(get_ival(Fire))
					{
						GetRumble(SmartAAV1Rumble,PolarStrength,TaylorPBoostStr,6)
						AngleBoost = TaylorABoostSpd;
					  
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	DoNotAtMePolar(POLAR_RS,Angle,TaylorPBoostStr/2)
	    			    }
	    			    else
	    			    {
			    			DoNotAtMePolar(POLAR_RS,Angle,PolarStrength/2)  
				    	} 
				    }
				    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}
				
				if(get_ival(Ads) || get_ival(Fire) || ToggleAutoAim && get_ival(Fire)){ 
					if(!ToggleBoostFire || !get_rumble(RumbleToUse())) {
					    DoNotAtMePolar(POLAR_RS,Angle,HandGunAAStr)  
					}
				} 
				SmartAAV1Rumble = 0;
				PolarStrength = 0; 
		    }
		    if(ToggleTaylorAA == 3 || ToggleTaylorAA == 4) 
			{
				RX = get_val(PS4_RX);                                
				RY = get_val(PS4_RY);
				Tracking = (Tracking + TrackingSpeed) % 360;
				CycleRefresh += get_rtime();
				angle += HandGunAASpd + GetAngle;
				
				if(TaylorTracking)
			    {
			       Tracker1 = (TrackingSize * sin(Tracking)/100);
			       Tracker2 = (TrackingSize * cos(Tracking)/100);
		        }
		        if(ToggleBoostFire) 
				{
					if(get_ival(Fire))
					{
						GetRumble(SmartAAV1Rumble,PolarStrength,TaylorPBoostStr,6)
						GetAngle = TaylorABoostSpd;
					
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	GetShapesV5(TaylorPBoostStr/2,angle); 
	    			    }
	    			    else
	    			    {
							GetShapesV5(PolarStrength/2,angle); 	
				    	} 
				    }
				    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}	
				if(get_ival(Ads) || get_ival(Fire))
				{  	
					if(ToggleTaylorAA == 4) 
					{ 
						angle += get_rtime();
						SpeedAngle = (SpeedAngle  + (angle / 100)) % 360;
						
						GetShapesV5(HandGunAAStr,SpeedAngle);	
					}
					else
					{
						GetShapesV5(HandGunAAStr,angle);	
					} 
				} 
				if(event_release(Ads)){
		        	angle = 0;
		        }
			}
		    if(ToggleBattsStickyAim){
				if(get_ival(Fire))
					combo_run(StickyAim);
			} 
			if(HeadAssist) {
	    
			    if (get_ival(Ads) && get_ival(Fire)) {
			    
			    	if (abs(get_ival(PS4_RY)) < HeadMax) { 
			    		
			    		Head += HeadStep;
			    		combo_run(HeadAssist);
			    	}	
			    }
			    if (!get_ival(Fire)) Head = 0;
			    	
			    if (Head >= HeadMax) combo_stop(HeadAssist);
			}
			if(ToggleSteadyAim) 
			{
				if(isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> ReleaseAim ) 
				{
					s_val = f_atan2(get_val(POLAR_RY)/256, get_val(POLAR_RX)/256);
		  
		            if ((get_val(POLAR_RY) > 0)) s_val = f_map(0, SteadyValue, 0, 180, (s_val * SteadyValue) / 180);
		            	else s_val = f_map(0, SteadyValue, 180, 360, (((s_val - 180) * SteadyValue) / 180));
		  
		            f_set_polar(POLAR_RS, s_val, isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))), FALSE);
					 	
				}
			}
			if(ToggleRapidFire[ProfileIdx] == 1 || ToggleSniperMode[ProfileIdx] == 1 && ToggleAutoRF)
			{
			 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
			    RestTime = HoldTime -get_rtime();
			 	if(RestTime < 0) RestTime = 0;
			    
			 	if(ToggleRapidFireType[ProfileIdx] == 0){ 
			 		if(get_ival(Fire))
			 			combo_run(RAPIDFIRE);
			 		else
			    		combo_stop(RAPIDFIRE);
			    } 
			    if(ToggleRapidFireType[ProfileIdx] == 1){ 
			    
			    	if(get_ival(Ads))
			    	{
			    		if(get_ival(Lethal))
			    		{
			    			FireRF = TRUE;
			    		}
			    	    set_val(Lethal,0);
			        } 
			        if(FireRF){ 
			    		set_val(Fire,100);
			    		combo_run(RAPIDFIRE);
			    	}
			    	if(event_release(Ads) || event_release(Lethal))
			    	{
			    		FireRF = FALSE;
			    	}
			    }
			    LedBlink(150,300);   
			}
			if(ToggleDynamicRf[ProfileIdx] == 1)
			{
				HoldTime = 250 / RateOfFire[ProfileIdx]; 
			    RestTime = HoldTime * 10 - (get_ival(Fire) * 3);
		     	if(RestTime < 0) RestTime = 0;
			    
			 	if(get_val(Fire))  
			 		combo_run(DynamicFire);
			 	else
			    	combo_stop(DynamicFire);
			    
			    LedBlink(300,500);   
		   	}
		   	if(ToggleAkimboRf[ProfileIdx]  == 1) 
		    { 	
		        if(get_val(Fire))
		            combo_run(AkimboRapidFire);
		        else 
		            combo_stop(AkimboRapidFire);
		        
		        LedBlink(150,300);  
		    }
		    if(ToggleStrafeShot[ProfileIdx] == 1) 
		    {
		   		if(get_val(Fire))
		        	combo_run(StrafeShot);
				else
		   			combo_stop(StrafeShot);
			}
			if(ToggleCancelReload)
			{
				if(event_press(Fire))
					FirstShotBeforeReload = TRUE; 
					
				if(event_press(Reload) && FirstShotBeforeReload)
				{
					ReloadInProgress = TRUE;
					FirstShotBeforeReload = FALSE;
				}
				if(get_val(Reload) && get_ptime(Reload) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(CancelReload);
				}
				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
				    ReloadTime = 0;

				if(ReloadTime > MaxReloadTime)
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime && event_press(Fire))
					combo_run(CancelReload);
			}
			if(ToggleTaylorSens)  
            {
            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
                        
                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                {
                	if(ToggleSniperMode[ProfileIdx] == 1) 
                		Str = SniperGenSens;
                	else
               			GenStr = GeneralSens;
                }
                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                	if(ToggleSniperMode[ProfileIdx] == 1) 
                		Str = SniperAdsSens;
                    else
                    	GenStr = AdsSens;
                }  
                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                	if(ToggleSniperMode[ProfileIdx] == 1) 
                		Str = SniperFireSens;
                    else
                    	GenStr = FireSens;   
                }
                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
                { 
                	if(ToggleSniperMode[ProfileIdx] == 1)
                		Str = SniperAdsFireSens;
                    else
                    	GenStr = AdsFireSens;
                }
                if(ToggleSniperMode[ProfileIdx] == 1){  
	                sensitivity(PS4_RY,NOT_USE,Str);
	                sensitivity(PS4_RX,NOT_USE,Str);
	            }else{
	            	sensitivity(PS4_RY,NOT_USE,GenStr);
	                sensitivity(PS4_RX,NOT_USE,GenStr);
	            }   	
            }
            if(ToggleCancelSlide == 1 || ToggleCancelSlide == 2)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(ToggleCancelSlide == 1 && event_release(Crouch))
						combo_run(CancelSlideMW)
					else if(ToggleCancelSlide == 2 && event_release(Crouch))
						combo_run(CancelSlideCW) 
						
					if(ToggleCancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
	                    
	                if(ToggleCancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(ToggleQuickScope[ProfileIdx] == 1)
			{
				if(event_press(Ads) && get_ptime(Ads) < 140)
				combo_run(Quick_Scope);
			}
			if(ToggleHoldBreath[ProfileIdx] == 1 || ToggleSniperMode[ProfileIdx] == 1  && ToggleAutoHB)
			{
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}
			if(ToggleBunnyHop)
			{
	            if(get_ival(Jump) && get_ptime(Jump) > 200) 
	                combo_run(Bunnyhop); 
	        }
	        if(ToggleJumpShot) 
			{
				if(get_val(Fire))
					combo_run(JumpShot);
			}
			if(ToggleProneShot) 
			{
				if(get_val(Fire))
					set_val(Crouch,100);
			}
			if(ToggleFastMelee) 
			{
				if(get_val(Melee))
				combo_run(FastMelee);

				if(get_val(Ads) && event_press(Melee) < 500)
				combo_stop(FastMelee);
			}
			if(ToggleAutoRun) 
            {    
                if(get_ival(PS4_LY) <-90 && !get_ival(Ads) && !get_ival(Fire) && !get_val(Crouch))
                	combo_run(TacSprint);
            }
            if(ToggleAutoAim)
            { 
            	if(get_ival(Fire))
            		set_val(Ads,100);
            }  
	    }		
     }
 }
function GetShapesV5(f_var,f_angle){ 

	if(TaylorShapes == 0) 
    {	
		RX += (f_var * sin(f_angle))/100 + Tracker1;
	    RY += (f_var * cos(f_angle))/100 + Tracker2;           
    }
    if(TaylorShapes == 1) // Tall Oval
    {
    	RX += ((f_var/2 * cos(f_angle))/100 + Tracker1);
    	RY += ((f_var * sin(f_angle))/100 + Tracker2);    
    }
    if(TaylorShapes == 2) // Wide Oval
    {
    	RX += ((f_var * cos(f_angle))/100 + Tracker1);
    	RY += ((f_var/2 * sin(f_angle))/100 + Tracker2); 
    }
    if(TaylorShapes == 3) // SpiralOval
	{
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InnerSpiral -= 1;
				if(InnerSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InnerSpiral += 1;
				if(InnerSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OuterSpiral -= 1;
				if(OuterSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OuterSpiral += 1;
				if(OuterSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
	    RX += ((InnerSpiral * cos(f_angle))/100 + Tracker1);
	    RY += ((OuterSpiral * sin(f_angle))/100 + Tracker2);		
    } 
    if(TaylorShapes == 4) // Spiral
	{
		
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InSpiral -= 1;
				if(InSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InSpiral += 1;
				if(InSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OutSpiral -= 1;
				if(OutSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OutSpiral += 1;
				if(OutSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
    	RX += ((InSpiral * cos(f_angle))/100 + Tracker1);
    	RY += ((OutSpiral * sin(f_angle))/100 + Tracker2); 
    }
    if(TaylorShapes == 5) // Helix
	{
   		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }
	    RX += ((f_var * x)/100 + Tracker1);
	    RY += ((f_var * y)/100 + Tracker2);
         
    }
	set_val(PS4_RX, clamp(RX, -100, 100));
	set_val(PS4_RY, clamp(RY, -100, 100));	 
}
combo TacSprint {
wait(20);
set_val(Sprint,100);
wait(40);
set_val(Sprint,0);
wait(40);
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo Bunnyhop{
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
}
combo JumpShot {
set_val(Jump,100);
wait(100);
}
combo Quick_Scope {
set_val(Ads,100);
wait(QuickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}         
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(SlideDelay);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(SlideDelay);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo CancelReload {
set_val(Swap,100);
wait(20);
wait(20)
set_val(Swap,100);
wait(20);
ReloadInProgress = FALSE; }
combo StrafeShot{ 
SmartSens(PS4_LX, 100);
wait(StrafeShotTime);
wait(50);
SmartSens(PS4_LX, -100);
wait(StrafeShotTime);
wait(20);
}
combo AkimboRapidFire {
set_val(Fire,100);
set_val(Ads,100);
wait(40);
set_val(Fire,0);
set_val(Ads,0);
wait(RateOfFire[ProfileIdx]);
}
combo DynamicFire {
set_val(Fire,100);
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}
combo StickyAim {
SmartSens(PS4_RY,AimAssistSize);
wait(AimAssistTime);
SmartSens(PS4_RX,AimAssistSize);
SmartSens(PS4_LX,AimAssistSize);
wait(AimAssistTime);
SmartSens(PS4_RY,AimAssistSize * -1);
wait(AimAssistTime);
SmartSens(PS4_RX,AimAssistSize * -1);
SmartSens(PS4_LX,AimAssistSize * -1);
wait(AimAssistTime);
}
combo Saved { 
cls_oled(0); 
String(Misc[17],Medium,0,0);
wait(2000);
DisplayTitle = TRUE; 
} 
function AACurve(){ 
	if(ToggleTaylorAA == 1 || ToggleTaylorAA == 2) { 
		if(TaylorTracking){ 
			Tracker1 = (TrackingSize * SAngle/100);
		    Tracker2 = (TrackingSize * CAngle/100);
		} 
		if(ToggleAAType == 0){
			if(ToggleTaylorAA != 2){
				CosAngle = PolarArray[(angle + 270) % 360];  
				SinAngle = PolarArray[angle % 360];
			}
			CAngle = PolarArray[(Tracking + 270) % 360];  
			SAngle = PolarArray[Tracking % 360];
		}
		if(ToggleAAType == 1){
			if(ToggleTaylorAA != 2){ 
		    	CosAngle = LinearArray[(angle + 270) % 360];  
				SinAngle = LinearArray[angle % 360];
			}
			CAngle = LinearArray[(Tracking + 270) % 360];  
			SAngle = LinearArray[Tracking % 360];
		}
	} 
}
function GetRumble(f_rumble,f_strength,f_val,f_divide){ 

	f_rumble = get_rumble(RumbleToUse());

	if(f_rumble > 10 && f_rumble < 90) 
	{
		f_strength = f_val + f_rumble / f_divide;
	} 	
} 
function GetShapes(f_var){ 

	if(TaylorShapes == 0) 
    {
    	SmartSens(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
    	SmartSens(PS4_RX ,(f_var * CosAngle)/100 + Tracker2);
        	
    }
    if(TaylorShapes == 1) // Tall Oval
    {
		SmartSens(PS4_RY,(f_var * SinAngle)/100 + Tracker1);
		SmartSens(PS4_RX,(f_var/2 * CosAngle)/ 100 + Tracker2); 
    }
    if(TaylorShapes == 2) // Wide Oval
    {
    	SmartSens(PS4_RX,(f_var * CosAngle)/ 100 + Tracker1);
   		SmartSens(PS4_RY,(f_var/2 * SinAngle) /100 + Tracker2);   
    }
    if(TaylorShapes == 3) // SpiralOval
    {
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InnerSpiral -= 1;
				if(InnerSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InnerSpiral += 1;
				if(InnerSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OuterSpiral -= 1;
				if(OuterSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OuterSpiral += 1;
				if(OuterSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
        SmartSens(PS4_RX,(OuterSpiral * CosAngle)/ 100 + Tracker1);
        SmartSens(PS4_RY,(InnerSpiral * SinAngle)/100 + Tracker2);   
    } 
    if(TaylorShapes == 4) // Spiral
	{
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InSpiral -= 1;
				if(InSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InSpiral += 1;
				if(InSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OutSpiral -= 1;
				if(OutSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OutSpiral += 1;
				if(OutSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
    	SmartSens(PS4_RX,(OutSpiral * CosAngle)/ 100 + Tracker1);
    	SmartSens(PS4_RY,(InSpiral * SinAngle)/100 + Tracker2);
    }
    if(TaylorShapes == 5) // Helix
	{
		
		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	 	SmartSens(PS4_RX,(f_var * x)/100 + Tracker1);
        SmartSens(PS4_RY,(f_var * y)/100 + Tracker2);
    }
}
function DoNotAtMePolar(stick, angle, rad) {
	if(TaylorShapes == 0){  
	 	SmartSens(stick + 8, (rad * cos(angle))/ 100 + Tracker1);
	 	SmartSens(stick + 7, (rad * sin(angle))/ 100 + Tracker2);	
 	}
 	if(TaylorShapes == 1){
 		
  		SmartSens(stick + 8, (rad * cos(angle)) / 100 + Tracker1);
  		SmartSens(stick + 7, (rad/2 * sin(angle)) / 100 + Tracker2);
  	}
  	if(TaylorShapes == 2){
  	    SmartSens(stick + 8, (rad/2 * cos(angle)) / 100 + Tracker1);
  		SmartSens(stick + 7, (rad * sin(angle)) / 100 + Tracker2); 
  	}
  	if(TaylorShapes == 3){
  	
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InnerSpiral -= 1;
				if(InnerSpiral < rad/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InnerSpiral += 1;
				if(InnerSpiral > rad)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OuterSpiral -= 1;
				if(OuterSpiral < rad/2)
					SpiralPosition2 = True;
			}
			else
			{
				OuterSpiral += 1;
				if(OuterSpiral >  rad)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
  		SmartSens(stick + 8, (InnerSpiral * cos(angle)) / 100 + Tracker1);
  		SmartSens(stick + 7, (OuterSpiral * sin(angle)) / 100 + Tracker2);	 
  	}
  	if(TaylorShapes == 4){
  	
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InSpiral -= 1;
				if(InSpiral < rad/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InSpiral += 1;
				if(InSpiral > rad)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OutSpiral -= 1;
				if(OutSpiral < rad/2)
					SpiralPosition2 = True;
			}
			else
			{
				OutSpiral += 1;
				if(OutSpiral >  rad)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
  		SmartSens(stick + 8, (InSpiral * cos(angle)) / 100 + Tracker1);
  		SmartSens(stick + 7, (OutSpiral * sin(angle)) / 100 + Tracker2); 
  	}
  	if(TaylorShapes == 5)
  	{ 
  		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;
	   	} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc; 
	    }
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc; 
	    }
	    else if(Position == 3) {  
	    	x = -100 + inc; y = inc; 
	    }
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	    SmartSens(stick + 8, (rad * x)/100 + Tracker1);
	 	SmartSens(stick + 7, (rad * y)/100 + Tracker2);
	}
 }
function MenuNavigation(f_index,f_min,f_max) {
	if(!get_val(Ads))
	{
		if(ModOrEditMenu[0]) 
	    {
		    if(event_press(PS4_UP))  
		    {
		    	f_index = cycle(f_index - 1, f_min , f_max);
		    	DisplayMenu = TRUE;	
		    }
		    if(event_press(PS4_DOWN)) 
		    {
		        f_index = cycle(f_index + 1, f_min , f_max);
		        DisplayMenu = TRUE;	
		    } 
		}
		if(!ModOrEditMenu[0])
		{
			if(event_press(PS4_RIGHT))
			{  
				f_index = cycle(f_index + 1,f_min,f_max); 
				DisplayMenu = TRUE;
			}
			if(event_press(PS4_LEFT)) 
			{  
		        f_index = cycle(f_index - 1,f_min,f_max);
		        DisplayMenu = TRUE;
			}  
	    } 
	    BlockButtons(); 
	}
    if(event_release(PS4_CROSS))
	{
		if(ModOrEditMenu[0]) 
		{
    		if(ModRange[ModORVal[0]][2] != 0)  
			{
				MenuStatus(1,0,1,0,0,0);
				ModORVal[1] = ModRange[ ModORVal[0] ][ 0 ]; 
			} 
	    }
	}
	if(event_press(PS4_CROSS))
	{
		if(ModOrEditMenu[1]) 
		{
			if(ModsNToggles[ModORVal[1]][5] == 1) 
			{
				MenuStatus(1,0,0,1,0,0);
				ModORVal[2] = ModsNToggles[ ModORVal[1] ][ 3 ];
				InitializeShapeChange();
				cls_oled(0);	
			}
		}
    }
    if(event_release(PS4_CIRCLE) && !ModOrEditMenu[0])
    {
    	if(ModOrEditMenu[1]) 
    	{
    		MenuStatus(1,1,0,0,0,0);
    		InitializeShapeChange();
		}
		else if(ModOrEditMenu[2]) 
		{
			MenuStatus(1,0,1,0,0,0);
			InitializeShapeChange();
		}
	}
	if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 2);
        DisplayMenu = TRUE;   	
    }
    BlockButtons();
return f_index; 
}
function EditableValues(ValueIndex) {

    if(ModORVal[2] == ValRangeMinMax[ValIdx++][0]) 
    { 
        if(get_ival(Ads))  
        {    
            if(event_press(PS4_RIGHT)) 
            {
               ValueIndex = cycle(ValueIndex + ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]);
               DisplayMenu = TRUE;  
            }
            if(event_press(PS4_LEFT))  
            {	
                ValueIndex = cycle(ValueIndex - ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]); 
                DisplayMenu = TRUE;
            }
            if(event_press(PS4_UP)) 
            {
               ValueIndex = cycle(ValueIndex + ValRangeMinMax[ModORVal[2]][4],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]);
               DisplayMenu = TRUE;  
            }
            if(event_press(PS4_DOWN))  
            {	
                ValueIndex = cycle(ValueIndex - ValRangeMinMax[ModORVal[2]][4],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]); 
                DisplayMenu = TRUE;
            }
            BlockButtons();
        }
        if(ValRangeMinMax[ValIdx][0] == 5 || ValRangeMinMax[ValIdx][0] == 9) 
        	 number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100));
        else
        	number_to_string(ValueIndex,find_digits(ValueIndex));  
    }
    return ValueIndex;                
 }
function EditableSwitch(f_val) { 
	  
	if(ModORVal[2] == ValRangeMinMax[ValIdx++][0]){
	
		if(event_press(PS4_UP))
		{	
		    f_val = cycle(f_val + ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]);
		    DisplayMenu = TRUE;
		    if(!f_val)
	        	combo_run(RumbleOff);
	        else
	        	combo_run(RumbleOn);    
	    }
		if(event_press(PS4_DOWN))
		{
	    	f_val = cycle(f_val - ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][1],ValRangeMinMax[ModORVal[2]][2]);
	    	DisplayMenu = TRUE;
	    	if(!f_val)
	        	combo_run(RumbleOff);
	    	else
	        	combo_run(RumbleOn);    
	    }
	    if(ValRangeMinMax[ValIdx][0] == 10){
	    	String(CurveType[ToggleAAType],Small,6,0);
	    } 
	    else if(ValRangeMinMax[ValIdx][0] == 11){
	    	if(ToggleAAType == 0)
	    		String(CircularCurve[TaylorShapes],Small,6,0);
	    	else
	    		String(SquareCurve[TaylorShapes],Small,6,0);
	    }
	    else
	    {
			if(f_val == 1)
				String(Misc[0],Small,6,0);   
			else 
			    String(Misc[1],Small,6,0);  
	    } 
	}      	
    return f_val;
}
function ToggleSwitch(f_val) { 
	  
	if(ModORVal[1] == ModsNToggles[ModIdx++][0]){
		if(event_press(PS4_UP))
		{	
		    f_val = cycle(f_val + 1,ModsNToggles[ModORVal[1]][1],ModsNToggles[ModORVal[1]][2]);
		    DisplayMenu = TRUE;
		    if(!f_val)
	        	combo_run(RumbleOff);
	        else
	        	combo_run(RumbleOn);    
	    }
		if(event_press(PS4_DOWN))
		{
	    	f_val = cycle(f_val - 1,ModsNToggles[ModORVal[1]][1],ModsNToggles[ModORVal[1]][2]);
	    	DisplayMenu = TRUE;
	    	if(!f_val)
	        	combo_run(RumbleOff);
	    	else
	        	combo_run(RumbleOn);    
	    }
	    if(ModsNToggles[ModIdx][0] == 0) { 
	    	String(ARToggle[ToggleTaylorAR[ProfileIdx]],Small,6,0);
	    }
	    else if(ModsNToggles[ModIdx][0] == 2){
	    	String(AAToggle[ToggleTaylorAA],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 13){
	    	String(SlideType[ToggleCancelSlide],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 22){
	    	String(VMSpeed[ToggleVmSpeed],Medium,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 11){
	    	String(RFToggle[ToggleRapidFireType[ProfileIdx]],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 24){
	    	String(PressButtons[ActivateIndividualBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 31){
	    	String(ControllerBtnsIdx[AdsBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 32){
	    	String(ControllerBtnsIdx[FireBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 33){
	    	String(ControllerBtnsIdx[TacticalBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 34){
	    	String(ControllerBtnsIdx[LethalBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 35){
	    	String(ControllerBtnsIdx[CrouchBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 36){
	    	String(ControllerBtnsIdx[JumpBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 37){
	    	String(ControllerBtnsIdx[ReloadBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 38){
	    	String(ControllerBtnsIdx[MeleeBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 39){
	    	String(ControllerBtnsIdx[SwapBtnIdx],Small,6,0);
	    } 
	    else if(ModsNToggles[ModIdx][0] == 40){
	    	String(ControllerBtnsIdx[SprintBtnIdx],Small,6,0);
	    } 
	    else
	    {
		    if(f_val == 1)
				String(Misc[0],Small,6,0);   
			else 
		    	String(Misc[1],Small,6,0);  
		}   
	}  	
    return f_val;
}
function QuickToggleMods(f_hold, f_press,f_val,f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;

	if(get_ival(f_hold))
	{
		if(event_press(f_press)) 
		{
			    ModORVal[1] = f_idx;
				f_val = cycle(f_val ++,ModsNToggles[ModORVal[1]][1],ModsNToggles[ModORVal[1]][2]);
				DisplayQToggles = TRUE;
		     
		        if(!f_val)
		            combo_run(RumbleOff);
		        else
		            combo_run(RumbleOn);	
		    
	    }
	    set_val(f_press, 0) 
	} 
	if(DisplayQToggles) 
	{
		combo_run(QuickToggles);
		ScreenSaver = FALSE;
		cls_oled(OLED_BLACK);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
		String(ModNames[ModORVal[1]],Small,-22,0);
		String(Profiles[ProfileIdx],Small,-5,0);
		
		
		if(f_val == 1) 
			String(Misc[0],Small,20,0);
	    else 
	        String(Misc[1],Small,20,0); 
	    
	 
	    DisplayQToggles = FALSE; 
	} 
    return f_val;
} 
function ButtonActivation(i){

	if(ModORVal[1] == ModsNToggles[ModIdx++][0])
 	{ 
 		if(event_press(PS4_DOWN))
     	{
			HighLight = cycle(HighLight + 1,0,1);
			DisplayMenu = TRUE;
		}
		if(event_press(PS4_UP))
		{
			HighLight = cycle(HighLight - 1,0,1);
			DisplayMenu = TRUE;
		}
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(HighLight == 0) 
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 10 );
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             	
             		DisplayMenu = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(HighLight == 0)
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 10 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
             		DisplayMenu = TRUE;
            }
        }
        if(HighLight == 0)
        {
       		rect_oled(115,28, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,28, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(HighLight == 1)
		{
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		} 
        String(HoldButtons[ActivateHoldBtnIdx[i]],Small,1,0);
       	String(PressButtons[ActivatePressBtnIdx[i]],Small,12,0);
     }  
 }
function DisplayTitleScreen(){ 

	if(DisplayTitle)                                            
    { 	
   		cls_oled(OLED_BLACK);
   	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	String(Misc[9],Small,-22,0);
    	String(Misc[18],Small,-8,0);
    	String(Misc[10],Medium,8,0);
    	String(Profiles[ProfileIdx],Small,25,0);
    	DisplayTitle = FALSE;
        ScreenSaver  = TRUE; 
	}
	// Display a Blank Screen after 10 seconds ( Prevents Screen Burn on The OLED Screen ) 
	if(ScreenSaver) 
	{
    	BlankScreen += get_rtime();
    	
		if(BlankScreen >= 10000)
		{
			cls_oled(OLED_BLACK);
			BlankScreen = 0;
			ScreenSaver = FALSE; 
    	} 
    }
}
combo QuickToggles{ 
wait(1500) 
DisplayTitle  = TRUE; 
reset_leds(); 
InitializeShapeChange();
} 
combo HeadAssist{

	set_val(PS4_RY,inv(Head) + get_val(PS4_RY));
}
function InitializeShapeChange() { 
	if(TaylorShapes == 3) { 
		InnerSpiral = TaylorRadius/2;	
		OuterSpiral = TaylorRadius;
	}
}
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
        Ads                            = ControllerBtns[clamp(AdsBtnIdx, 0, sizeof(ControllerBtns))]; 
        Fire                           = ControllerBtns[clamp(FireBtnIdx, 0, sizeof(ControllerBtns))]; 
        Tactical                       = ControllerBtns[clamp(TacticalBtnIdx, 0, sizeof(ControllerBtns))]; 
        Lethal                         = ControllerBtns[clamp(LethalBtnIdx, 0, sizeof(ControllerBtns))]; 
        Crouch                         = ControllerBtns[clamp(CrouchBtnIdx, 0, sizeof(ControllerBtns))]; 
        Jump                           = ControllerBtns[clamp(JumpBtnIdx, 0, sizeof(ControllerBtns))]; 
        Reload                         = ControllerBtns[clamp(ReloadBtnIdx, 0, sizeof(ControllerBtns))]; 
        Melee                          = ControllerBtns[clamp(MeleeBtnIdx, 0, sizeof(ControllerBtns))]; 
        Swap                           = ControllerBtns[clamp(SwapBtnIdx, 0, sizeof(ControllerBtns))]; 
        Sprint                         = ControllerBtns[clamp(SprintBtnIdx, 0, sizeof(ControllerBtns))]; 
        
    }
    return;
    
} 
function correctAngle(angle){
  if(angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
int SmartSens;
function SmartSens(f_axis,f_val) { 

    SmartSens = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 

    set_val(f_axis, clamp(get_val(f_axis) + SmartSens, -100, 100));
}
function sin(angle){
	if(ToggleAAType == 0) return PolarArray[correctAngle(angle)];
  	return LinearArray[correctAngle(angle)]; 
}
function cos(angle){
	if(ToggleAAType == 0) return PolarArray[(correctAngle(angle) + 90) % 360];
    return LinearArray[(correctAngle(angle) + 90) % 360];
}
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
wait(LedOn);
led(7);
wait(LedOff);
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();

}
combo ScriptOff { 
cls_oled(0);
if(KillSwitch){
	String(Misc[13],Medium,-15,0);
	String(Misc[12],Medium,10,0);
}else{
	String(Misc[13],Medium,-15,0);
	String(Misc[14],Medium,10,0);
}
wait(1500);
DisplayTitle = TRUE;
}
function LedBlink(f_on,f_off) {
	LedOn  = f_on;
	LedOff = f_off;
	combo_run(BLINK);
}
function MenuStatus(f_display,f_mainmenu,f_modmenu,f_editmenu,f_adjustables,f_displaytitle) { 

    DisplayMenu      = f_display;
	ModOrEditMenu[0] = f_mainmenu;
	ModOrEditMenu[1] = f_modmenu;
	ModOrEditMenu[2] = f_editmenu;
	ModOrEditMenu[3] = f_adjustables;
	DisplayTitle     = f_displaytitle;
	
} 
function String (stringLabel,fontSize,offsetY,offsetX) {
    
    if (fontSize == Small) {
        stringPosition = (127 - get_string_length(stringLabel) * 7) / 2;
        stringHeight = (64 - 10) / 2;
    } 
    
    else if (fontSize == Medium) {
        stringPosition = (127 - get_string_length(stringLabel) * 10) / 2;
        stringHeight = (64 - 16) / 2;
    }
    
    else if (fontSize == Large) {
        stringPosition = (127 - get_string_length(stringLabel) * 15) / 2;
        stringHeight = (64 - 21) / 2;
    }
    Print(stringPosition,stringHeight,stringLabel,fontSize,offsetY,offsetX);
}
function get_string_length(offset) { 
    stringLength = 0;
    while (duint8(offset++)) { stringLength++; }
    return stringLength + 1;
}
function Print (positionString,heightString,captionString,sizeFont,offSetY,offSetX) {
    
        printf(positionString + offSetX,heightString + offSetY,sizeFont,1,captionString);
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function GetEntriesStrings(x) {
  	do{ 
		if(MainMenuId[x++] == -1) 
          break; 
	}while (1);
  	return x;
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > VertTime) {
    	if(!p) {
    		i_cnt = 0;
    		return 1;
    	}
    	else{
    	//--avoid stack overflow
        i_cnt = VertTime;
        //--progression complete
        	return -1;
        }
    }
    //--progression not complete
    return p ;
}
function p_val() {
    i_num++;
    if(i_num == VmCountV[p]) {
        //--reset counter
    	i_num = 0;
    	
    	ar_y += i_val[p];
 
   } 
    return ar_y;
}
function p_complete_x() { 
    i_cnt_h++;
    if(i_cnt_h > HorizTime) {
    	if(!ph) {
    		i_cnt_h = 0;
    		return 1;
    	}
    	else{
    	//--avoid stack overflow
        i_cnt_h = HorizTime;
        //--progression complete
        	return -1;
        }
    }
    //--progression not complete
    return p ;
}
function p_val_x() {
    i_num_h++;
    if(i_num_h == VmCountH[ph]) {
        //--reset counter
    	i_num_h = 0;
    	
    	ar_x += i_val_h[ph];
 
   } 
    return ar_x;
}
function GetCharsStrings(x){
	if (MainMenuId[x + 1] != -1) return MainMenuId[x + 1] - MainMenuId[x] - 1;
 	return sizeof(MainMenuId) - MainMenuId[x];
}
int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
//------------------------------------------------------------------------------
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = PolarArray[angle];
  cos_angle = PolarArray[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );

function BlockButtons() { 
set_val(PS4_L1,0);      set_val(PS4_R3,0);    set_val(PS4_CROSS,0); set_val(PS4_R1,0);   set_val(PS4_SQUARE,0);   set_val(PS4_UP,0);    
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
}
int mask;
int ret;
int pval_data;

function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}
function Load(){ 

 pval_data = get_pvar(SPVAR_1, -32767, 32767, 0);
 TaylorARVert[0]       = unpack_int16_to_int8(pval_data, 0);
 TaylorARVert[1]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_2, -32767, 32767, 0);
 TaylorARVert[2]       = unpack_int16_to_int8(pval_data, 0);
 TaylorARHoriz[0]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_3, -32767, 32767, 0);
 TaylorARHoriz[1]      = unpack_int16_to_int8(pval_data, 0);
 TaylorARHoriz[2]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_4, -32767, 32767, 0);
 VerticalStart   [0]       = unpack_int16_to_int8(pval_data, 0);
 VerticalStart   [1]       = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_5, -32767, 32767, 0);
 VerticalMid     [0]      = unpack_int16_to_int8(pval_data, 0);
 VerticalMid     [1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_6, -32767, 32767, 0);
 VerticalEnd     [0]       = unpack_int16_to_int8(pval_data, 0);
 VerticalEnd     [1]       = unpack_int16_to_int8(pval_data, 1);
 	
 pval_data = get_pvar(SPVAR_7, 1, 32767, 0);
 VerticalTime    [0]       = unpack_int16_to_int8(pval_data, 0);
 VerticalTime    [1]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_8, -32767, 32767, 0);
 HorizontalStart [0]      = unpack_int16_to_int8(pval_data, 0);
 HorizontalStart [1]      = unpack_int16_to_int8(pval_data, 1);	
 
 pval_data = get_pvar(SPVAR_9, -32767, 32767, 0);
 HorizontalMid [0]      = unpack_int16_to_int8(pval_data, 0);
 HorizontalMid [1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_10, -32767, 32767, 0);
 HorizontalEnd [0]      = unpack_int16_to_int8(pval_data, 0);
 HorizontalEnd [1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_11, 1, 32767, 0);
 HorizontalTime [0]      = unpack_int16_to_int8(pval_data, 0);
 HorizontalTime [1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_12, -32767, 32767, 0);
 VerticalStart[2]  = unpack_int16_to_int8(pval_data, 0);
 VerticalMid[2]    = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_13, -32767, 32767, 0);
 VerticalEnd     [2]       = unpack_int16_to_int8(pval_data, 0);
 HorizontalStart [2]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_14, -32767, 32767, 0);
 HorizontalMid    [2]       = unpack_int16_to_int8(pval_data, 0);
 HorizontalEnd    [2]       = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_15, 1, 32767, pack_int8_to_int16(0, 0));
 VerticalTime     [2]       = unpack_int16_to_int8(pval_data, 0);
 HorizontalTime   [2]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_16, 1, 32767, pack_int8_to_int16(0,0));
 ToggleTaylorAA             = unpack_int16_to_int8(pval_data, 0);
 TaylorShapes               = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_17, 1, 32767, pack_int8_to_int16(15,15));
 TaylorRadius               = unpack_int16_to_int8(pval_data, 0);
 TaylorAngle                = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_18, 1, 32767, pack_int8_to_int16(2,2));
 TrackingSize     = unpack_int16_to_int8(pval_data,0);
 TrackingSpeed    = unpack_int16_to_int8(pval_data,1);

 pval_data = get_pvar(SPVAR_19, 1, 32767, pack_int8_to_int16(10,5));
 TaylorPBoostStr     = unpack_int16_to_int8(pval_data, 0);
 TaylorABoostSpd     = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_20, 1, 32767, pack_int8_to_int16(15,10));
 AimAssistSize          = unpack_int16_to_int8(pval_data, 0);
 AimAssistTime          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_21, 1, 32767, pack_int8_to_int16(12,25));
 SteadyValue            = unpack_int16_to_int8(pval_data, 0);
 ReleaseAim             = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_22, 1, 32767, pack_int8_to_int16(12,25));
 HeadMax                 = unpack_int16_to_int8(pval_data, 0);
 HeadStep                = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_23, 1, 32767, pack_int8_to_int16(1,1));
 RateOfFire[0]         = unpack_int16_to_int8(pval_data, 0);
 RateOfFire[1]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_24, 1, 32767, pack_int8_to_int16(1,0));
 RateOfFire[2]         = unpack_int16_to_int8(pval_data, 0);
 ToggleTaylorAR[0]     = unpack_int16_to_int8(pval_data, 1); 
 
 pval_data = get_pvar(SPVAR_25, 1, 32767, pack_int8_to_int16(0,0));
 ToggleTaylorAR[1]     = unpack_int16_to_int8(pval_data, 0);
 ToggleTaylorAR[2]     = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_26, 1, 32767, 0);
 ToggleProgressive[0]= unpack_usigned(pval_data, 0, 1);
 ToggleProgressive[1]= unpack_usigned(pval_data, 1, 1);
 ToggleProgressive[2]= unpack_usigned(pval_data, 2, 1);
 ToggleAAType        = unpack_usigned(pval_data, 3, 1);
 TaylorTracking      = unpack_usigned(pval_data, 4, 1);
 ToggleBoostFire     = unpack_usigned(pval_data, 5, 1);
 ToggleBattsStickyAim = unpack_usigned(pval_data,6, 1);
 ToggleSteadyAim    = unpack_usigned(pval_data, 7, 1);
 HeadAssist    	    = unpack_usigned(pval_data, 8, 1);
 ToggleBlockRumble  = unpack_usigned(pval_data, 9, 1);
 ToggleHairTriggers = unpack_usigned(pval_data,10, 1);
 PSonXBOX   	    = unpack_usigned(pval_data,11, 1);
 
 
 pval_data = get_pvar(SPVAR_27, 1, 32767, 0);
 ToggleRapidFire[0]	= unpack_usigned(pval_data, 0, 1);
 ToggleRapidFire[1]	= unpack_usigned(pval_data, 1, 1);
 ToggleRapidFire[2]	= unpack_usigned(pval_data, 2, 1);
 ToggleDynamicRf[0]	= unpack_usigned(pval_data, 3, 1);
 ToggleDynamicRf[1]	= unpack_usigned(pval_data, 4, 1);
 ToggleDynamicRf[2]	= unpack_usigned(pval_data, 5, 1);
 ToggleAkimboRf[0]	= unpack_usigned(pval_data, 6, 1);
 ToggleAkimboRf[1]	= unpack_usigned(pval_data, 7, 1);
 ToggleAkimboRf[2]	= unpack_usigned(pval_data, 8, 1);
 ToggleRapidFireType[0]	= unpack_usigned(pval_data, 9, 1);
 ToggleRapidFireType[1]	= unpack_usigned(pval_data,10, 1);
 ToggleRapidFireType[2]	= unpack_usigned(pval_data,11, 1);
 
 pval_data = get_pvar(SPVAR_28, 1, 32767, 0);
 ToggleStrafeShot[0]= unpack_usigned(pval_data, 0, 1);
 ToggleStrafeShot[1]= unpack_usigned(pval_data, 1, 1);
 ToggleStrafeShot[2]= unpack_usigned(pval_data, 2, 1);
 ToggleCancelReload = unpack_usigned(pval_data, 3, 1);
 ToggleTaylorSens   = unpack_usigned(pval_data, 4, 1);
 ToggleQuickScope[0] = unpack_usigned(pval_data,5, 1);
 ToggleQuickScope[1] = unpack_usigned(pval_data,6, 1);
 ToggleQuickScope[2] = unpack_usigned(pval_data,7, 1);
 ToggleHoldBreath[0] = unpack_usigned(pval_data,8, 1);
 ToggleHoldBreath[1] = unpack_usigned(pval_data,9, 1);
 ToggleHoldBreath[2] = unpack_usigned(pval_data,10, 1);
 
 pval_data = get_pvar(SPVAR_29, 1, 32767, 0);
 ToggleBunnyHop  	= unpack_usigned(pval_data,0, 1);
 ToggleProneShot  	= unpack_usigned(pval_data,1, 1);
 ToggleJumpShot  	= unpack_usigned(pval_data,2, 1);
 ToggleFastMelee  	= unpack_usigned(pval_data,3, 1);
 ToggleAutoRun      = unpack_usigned(pval_data,4, 1);
 ToggleSniperMode[0]= unpack_usigned(pval_data,5, 1);
 ToggleSniperMode[1]= unpack_usigned(pval_data,6, 1);
 ToggleSniperMode[2]= unpack_usigned(pval_data,7, 1); 
 ToggleAutoRF       = unpack_usigned(pval_data,8, 1);
 ToggleAutoHB       = unpack_usigned(pval_data,9, 1);
 ToggleAutoAim      = unpack_usigned(pval_data,10, 1);
 
 
 GeneralSens        = get_pvar(SPVAR_30,   1, 327,  100); 
 AdsSens            = get_pvar(SPVAR_31,   1, 327,  100); 
 FireSens           = get_pvar(SPVAR_32,   1, 327,  100);
 AdsFireSens        = get_pvar(SPVAR_33,   1, 327,  100); 
 MaxReloadTime      = get_pvar(SPVAR_34,   1,9000, 2000);
 SlideDelay         = get_pvar(SPVAR_35,   1,200,120);
 StrafeShotTime     = get_pvar(SPVAR_36,   1, 999, 500);
 QuickScopeDelay    = get_pvar(SPVAR_37,   1, 600, 350);
 
 pval_data = get_pvar(SPVAR_38, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateIndividualBtnIdx = unpack_int16_to_int8(pval_data, 0);
 ToggleCancelSlide        = unpack_int16_to_int8(pval_data, 1);
 
pval_data = get_pvar(SPVAR_39, 1, 32767, pack_int8_to_int16(0, 0));
ActivateHoldBtnIdx [0]      = unpack_int16_to_int8(pval_data, 0);
ActivatePressBtnIdx[0]      = unpack_int16_to_int8(pval_data, 1);

pval_data = get_pvar(SPVAR_40, 1, 32767, pack_int8_to_int16(0, 0));
ActivateHoldBtnIdx [1]      = unpack_int16_to_int8(pval_data, 0);
ActivatePressBtnIdx[1]      = unpack_int16_to_int8(pval_data, 1);

pval_data = get_pvar(SPVAR_41, 1, 32767, pack_int8_to_int16(0, 0));
ActivateHoldBtnIdx [2]      = unpack_int16_to_int8(pval_data, 0);
ActivatePressBtnIdx[2]      = unpack_int16_to_int8(pval_data, 1);

pval_data = get_pvar(SPVAR_42, 1, 32767, pack_int8_to_int16(0, 0));
ActivateHoldBtnIdx [3]      = unpack_int16_to_int8(pval_data, 0);
ActivatePressBtnIdx[3]      = unpack_int16_to_int8(pval_data, 1);

pval_data = get_pvar(SPVAR_43, 1, 32767, pack_int8_to_int16(0, 0));
ActivateHoldBtnIdx [4]      = unpack_int16_to_int8(pval_data, 0);
ActivatePressBtnIdx[4]      = unpack_int16_to_int8(pval_data, 1);

 SniperGenSens      = get_pvar(SPVAR_44,   1, 327,  100); 
 SniperAdsSens      = get_pvar(SPVAR_45,   1, 327,  100); 
 SniperFireSens     = get_pvar(SPVAR_46,   1, 327,  100);
 SniperAdsFireSens  = get_pvar(SPVAR_47,   1, 327,  100);
 
 pval_data = get_pvar(SPVAR_48, 1, 32767, pack_int8_to_int16(5,5));
 HandGunAASpeed             = unpack_int16_to_int8(pval_data, 0);
 HandGunAASize              = unpack_int16_to_int8(pval_data, 1);

 HandGunVertical      = get_pvar(SPVAR_49,   -99, 99,  5);     
 ToggleVmSpeed        = get_pvar(SPVAR_50,   0, 5,  0); 
 
 pval_data = get_pvar(SPVAR_51, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [5]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[5]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_52, 1, 32767, pack_int8_to_int16(1, 0));
 AdsBtnIdx      			= unpack_int16_to_int8(pval_data, 0);
 FireBtnIdx      			= unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_53, 1, 32767, pack_int8_to_int16(0, 0));
 TacticalBtnIdx      	    = unpack_int16_to_int8(pval_data, 0);
 LethalBtnIdx      			= unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_54, 1, 32767, pack_int8_to_int16(0, 0));
 CrouchBtnIdx      			= unpack_int16_to_int8(pval_data, 0);
 JumpBtnIdx      			= unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_55, 1, 32767, pack_int8_to_int16(0, 0));
 ReloadBtnIdx      			= unpack_int16_to_int8(pval_data, 0);
 MeleeBtnIdx      			= unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_56, 1, 32767, pack_int8_to_int16(0, 0));
 SwapBtnIdx      			= unpack_int16_to_int8(pval_data, 0);
 SprintBtnIdx      			= unpack_int16_to_int8(pval_data, 1);
 
 
 
 

}
function Save(){ 

 pval_data = pack_int8_to_int16(TaylorARVert[0],TaylorARVert[1]);    
 set_pvar(SPVAR_1,pval_data); 
 pval_data = pack_int8_to_int16(TaylorARVert[2],TaylorARHoriz[0]);    
 set_pvar(SPVAR_2,pval_data);
 pval_data = pack_int8_to_int16(TaylorARHoriz[1],TaylorARHoriz[2]);    
 set_pvar(SPVAR_3,pval_data);
 pval_data = pack_int8_to_int16(VerticalStart[0],VerticalStart[1]);     
 set_pvar(SPVAR_4,pval_data);
 pval_data = pack_int8_to_int16(VerticalMid[0],VerticalMid[1]); 
 set_pvar(SPVAR_5,pval_data); 
 pval_data = pack_int8_to_int16(VerticalEnd[0],VerticalEnd[1]);     
 set_pvar(SPVAR_6,pval_data); 
 pval_data = pack_int8_to_int16(VerticalTime[0],VerticalTime[1]); 
 set_pvar(SPVAR_7,pval_data);
 pval_data = pack_int8_to_int16(HorizontalStart[0],HorizontalStart[1]);     
 set_pvar(SPVAR_8,pval_data);
 pval_data = pack_int8_to_int16(HorizontalMid[0],HorizontalMid[1]);     
 set_pvar(SPVAR_9,pval_data);
 pval_data = pack_int8_to_int16(HorizontalEnd[0],HorizontalEnd[1]);     
 set_pvar(SPVAR_10,pval_data);
 pval_data = pack_int8_to_int16(HorizontalTime[0],HorizontalTime[1]);     
 set_pvar(SPVAR_11,pval_data);
 pval_data = pack_int8_to_int16(VerticalStart[2],VerticalMid[2]);    
 set_pvar(SPVAR_12,pval_data);
 pval_data = pack_int8_to_int16(VerticalEnd[2],HorizontalStart[2]);     
 set_pvar(SPVAR_13,pval_data);
 pval_data = pack_int8_to_int16(HorizontalMid[2],HorizontalEnd[2]);     
 set_pvar(SPVAR_14,pval_data);
 pval_data = pack_int8_to_int16(VerticalTime[2],HorizontalTime[2]);     
 set_pvar(SPVAR_15,pval_data);
 pval_data = pack_int8_to_int16(ToggleTaylorAA,TaylorShapes);    
 set_pvar(SPVAR_16,pval_data); 
 pval_data = pack_int8_to_int16(TaylorRadius,TaylorAngle);    
 set_pvar(SPVAR_17,pval_data); 
 pval_data = pack_int8_to_int16(TrackingSize,TrackingSpeed);    
 set_pvar(SPVAR_18,pval_data);
 pval_data = pack_int8_to_int16(TaylorPBoostStr,TaylorABoostSpd);    
 set_pvar(SPVAR_19,pval_data); 
 pval_data = pack_int8_to_int16(AimAssistSize,AimAssistTime);    
 set_pvar(SPVAR_20,pval_data); 
 pval_data = pack_int8_to_int16(SteadyValue,ReleaseAim);     
 set_pvar(SPVAR_21,pval_data);
 pval_data = pack_int8_to_int16(HeadMax,HeadStep);     
 set_pvar(SPVAR_22,pval_data);
 pval_data = pack_int8_to_int16(RateOfFire[0],RateOfFire[1]);    
 set_pvar(SPVAR_23,pval_data);
 pval_data = pack_int8_to_int16(RateOfFire[2],ToggleTaylorAR[0]);    
 set_pvar(SPVAR_24,pval_data);
 pval_data = pack_int8_to_int16(ToggleTaylorAR[1],ToggleTaylorAR[2]);    
 set_pvar(SPVAR_25,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleProgressive[0] ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleProgressive[1] ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleProgressive[2] ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleAAType         ,3, 1);
 pval_data = pack_usigned(pval_data, TaylorTracking       ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleBoostFire      ,5, 1);
 pval_data = pack_usigned(pval_data, ToggleBattsStickyAim ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleSteadyAim      ,7, 1);
 pval_data = pack_usigned(pval_data, HeadAssist          , 8, 1);
 pval_data = pack_usigned(pval_data, ToggleBlockRumble   , 9, 1);
 pval_data = pack_usigned(pval_data, ToggleHairTriggers  ,10, 1);
 pval_data = pack_usigned(pval_data, PSonXBOX            ,11, 1);
 set_pvar(SPVAR_26,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleRapidFire[0]    ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[1]    ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[2]    ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleDynamicRf[0]    ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleDynamicRf[1]    ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleDynamicRf[2]    ,5, 1);
 pval_data = pack_usigned(pval_data, ToggleAkimboRf[0]    ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleAkimboRf[1]    ,7, 1);
 pval_data = pack_usigned(pval_data, ToggleAkimboRf[2]    ,8, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFireType[0],9, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFireType[1],10, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFireType[2],11, 1);
 set_pvar(SPVAR_27,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleStrafeShot[0], 0, 1);
 pval_data = pack_usigned(pval_data, ToggleStrafeShot[1], 1, 1);
 pval_data = pack_usigned(pval_data, ToggleStrafeShot[2], 2, 1);
 pval_data = pack_usigned(pval_data, ToggleCancelReload , 3, 1);
 pval_data = pack_usigned(pval_data, ToggleTaylorSens    ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleQuickScope[0], 5, 1);
 pval_data = pack_usigned(pval_data, ToggleQuickScope[1], 6, 1);
 pval_data = pack_usigned(pval_data, ToggleQuickScope[2], 7, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[0], 8, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[1], 9, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[2],10, 1);
 set_pvar(SPVAR_28,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleBunnyHop    ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleProneShot   ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleJumpShot    ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleFastMelee   ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleAutoRun     ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleSniperMode[0],5, 1);
 pval_data = pack_usigned(pval_data, ToggleSniperMode[1],6, 1);
 pval_data = pack_usigned(pval_data, ToggleSniperMode[2],7, 1);
 pval_data = pack_usigned(pval_data, ToggleAutoRF       ,8, 1);
 pval_data = pack_usigned(pval_data, ToggleAutoHB       ,9, 1);
 pval_data = pack_usigned(pval_data, ToggleAutoAim     ,10, 1);
 set_pvar(SPVAR_29,pval_data);
 
 set_pvar(SPVAR_30,GeneralSens       ); 
 set_pvar(SPVAR_31,AdsSens           ); 
 set_pvar(SPVAR_32,FireSens          ); 
 set_pvar(SPVAR_33,AdsFireSens       ); 
 set_pvar(SPVAR_34,MaxReloadTime     ); 
 set_pvar(SPVAR_35,SlideDelay        ); 
 set_pvar(SPVAR_36,StrafeShotTime    ); 
 set_pvar(SPVAR_37,QuickScopeDelay   ); 
 
 pval_data = pack_int8_to_int16(ActivateIndividualBtnIdx,ToggleCancelSlide);    
 set_pvar(SPVAR_38,pval_data);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[0],ActivatePressBtnIdx [0]);     
 set_pvar(SPVAR_39,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[1],ActivatePressBtnIdx [1]);     
 set_pvar(SPVAR_40,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[2],ActivatePressBtnIdx [2]);     
 set_pvar(SPVAR_41,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[3],ActivatePressBtnIdx [3]);     
 set_pvar(SPVAR_42,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[4],ActivatePressBtnIdx [4]);     
 set_pvar(SPVAR_43,pval_data);
 
 set_pvar(SPVAR_44,SniperGenSens     );
 set_pvar(SPVAR_45,SniperAdsSens     ); 
 set_pvar(SPVAR_46,SniperFireSens    );
 set_pvar(SPVAR_47,SniperAdsFireSens ); 
 
 pval_data = pack_int8_to_int16(HandGunAASpeed,HandGunAASize);     
 set_pvar(SPVAR_48,pval_data);
 
 set_pvar(SPVAR_49,HandGunVertical);
 set_pvar(SPVAR_50,ToggleVmSpeed);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[5],ActivatePressBtnIdx [5]);     
 set_pvar(SPVAR_51,pval_data);
 
 pval_data = pack_int8_to_int16(AdsBtnIdx,FireBtnIdx);     
 set_pvar(SPVAR_52,pval_data);
 pval_data = pack_int8_to_int16(TacticalBtnIdx,LethalBtnIdx);     
 set_pvar(SPVAR_53,pval_data);
 pval_data = pack_int8_to_int16(CrouchBtnIdx,JumpBtnIdx);     
 set_pvar(SPVAR_54,pval_data);
 pval_data = pack_int8_to_int16(ReloadBtnIdx,MeleeBtnIdx);     
 set_pvar(SPVAR_55,pval_data);
 pval_data = pack_int8_to_int16(SwapBtnIdx,SprintBtnIdx);     
 set_pvar(SPVAR_56,pval_data);
 
 }
int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function MenuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 30;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 18; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(MENU_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 53,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 18;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
const uint8 MENU_SCROLL_TEXT[] = {
//    1			2		   3		4	     5		     6		   7		  8		     9         10	       11	   12		  13	  14		 15		  16		17        18
     _space, _left,	   _space,   _right,	_space,    _N,	      _e,         _x,       _t,        _space,    _M,      _o,       _d,     _slash,    _V,      _a,       _l,       _space,        
     _space,   _o,	     _r,     _space,    _up,	  _space,	  _down,	 _space,	_F,        _o,		  _r,	   _space,   _T,     _o, 	     _g,	  _g,		_l,	      _e,
     _space, _X,       _slash,       _A,       _space,     _F,	  _o,	      _r,		_space,	   _E,	      _d,	   _i,		  _t,		 _space,	 _M,	  _e,		_n,      _u,
     _space, _space,  _O,        _slash,   _B, _space,     _T,       _o,       _space,     _E,       _x,         _i,       _t,      _space,    _M,     _e,        _n,     _u,
     _space, _Y,_triangle, _space, _C,_h,_a,_n,_g,_e, _space, _P,_r,_o,_f,_i,_l,_e,
     _space,   _H,	  _o,	    _l,		_d,	      _space,	 _L,	    _2, 	    _slash,    _L,	  _T,    _space,		_left,       _space, _O, _r, _space,_right,
     _space,   _T,	   _o,    _space,   _A,	    _d, _j,	      _u,	 _s,	_t,     _space,		   _V,	  _a,		 _l, 	     _u,	  _e,		_s,	     _space,
     _space, _O,	   _r,     _space,    _B,   _u,		_t,	      _t,		 _o,		_n,	        _space,		   _C,		  _h,		 _o,	 _i,	  _c,		_e,      _s
};    


define  _0 = 48,   _A = 65,   _K = 75,   _U =  85,   _e = 101,   _o = 111,   _y       = 121,    _plus      = 43, _slash     = 47 , _dot     =  46;
define  _1 = 49,   _B = 66,   _L = 76,   _V =  86,   _f = 102,   _p = 112,   _z       = 122;
define  _2 = 50,   _C = 67,   _M = 77,   _W =  87,   _g = 103,   _q = 113,   _space   =  32;
define  _3 = 51,   _D = 68,   _N = 78,   _X =  88,   _h = 104,   _r = 114,   _bang    =  33;
define  _4 = 52,   _E = 69,   _O = 79,   _Y =  89,   _i = 105,   _s = 115,   _quote   =  34;
define  _5 = 53,   _F = 70,   _P = 80,   _Z =  90,   _j = 106,   _t = 116,   _hash    =  35;
define  _6 = 54,   _G = 71,   _Q = 81,   _a =  97,   _k = 107,   _u = 117,   _dollar  =  36;
define  _7 = 55,   _H = 72,   _R = 82,   _b =  98,   _l = 108,   _v = 118,   _percent =  37;
define  _8 = 56,   _I = 73,   _S = 83,   _c =  99,   _m = 109,   _w = 119,   _and     =  38;
define  _9 = 57,   _J = 74,   _T = 84,   _d = 100,   _n = 110,   _x = 120,   _tick    =  39;
define _left     = 133,   _right = 134,_up       = 131,_down     = 132,_cross    = 127, _circle   = 128, _triangle = 130;


