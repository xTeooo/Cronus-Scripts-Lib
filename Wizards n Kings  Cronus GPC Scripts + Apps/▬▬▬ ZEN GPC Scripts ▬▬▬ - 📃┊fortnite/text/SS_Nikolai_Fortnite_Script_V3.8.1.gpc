																																																																																			/*
                         _____    _____            _   _   _   _              _           _    _
                        / ____|  / ____|          | \ | | (_) | |            | |         (_)  ( )
                       | (___   | (___            |  \| |  _  | | __   ___   | |   __ _   _   |/   ___
                        \___ \   \___ \           | . ` | | | | |/ /  / _ \  | |  / _` | | |      / __|
                        ____) |  ____) |          | |\  | | | |   <  | (_) | | | | (_| | | |      \__ \
                       |_____/  |_____/           |_| \_| |_| |_|\_\  \___/  |_|  \__,_| |_|      |___/
                                          ______
                                         |______|
                              ______                  _             _   _
                             |  ____|                | |           (_) | |
                             | |__      ___    _ __  | |_   _ __    _  | |_    ___
                             |  __|    / _ \  | '__| | __| | '_ \  | | | __|  / _ \
                             | |      | (_) | | |    | |_  | | | | | | | |_  |  __/
                             |_|       \___/  |_|     \__| |_| |_| |_|  \__|  \___|
                               _____                 _           _
                              / ____|               (_)         | |
                             | (___     ___   _ __   _   _ __   | |_
                              \___ \   / __| | '__| | | | '_ \  | __|
                              ____) | | (__  | |    | | | |_) | | |_
                             |_____/   \___| |_|    |_| | .__/   \__|
                                                        | |
                                                        |_|
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Note From CHI CHI / ErickCHIN :
					- UP & DOWN to Select the value to edit.
					- LEFT & RIGHT to increase or decrease Selected value
					- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 					Credits To The Following People Below :
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Chi Chi for Mod Menu
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Sweet_Evil for his Save & Load Values Propely Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- ItzSnack for Rapid Fire, Drop shot
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DjangoKill for Chicken Mod idea
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Crescens For Aim Sensitivity Corrections
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DoGzTheFiGhTeRz Polar Aim Assist With Radius and Angle Boost Option
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DoNotAtMe For His Zen Eye Colour Pulsing & Polar Aim Assist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- TaylorDrift For Customizing DNAM Polar With Shapes & Helping me with so much
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Me, SS_Nikolai for putting all this together & Coding some of the build mods
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																																																																			*/

//--Combat Mode -- Match These To Your In-Game Buttons
	define Fire_BTN				= PS4_R2;       // Fire In Game
	define Ads_BTN				= PS4_L2;       // Ads In Game
	define PickAxe_BTN			= PS4_TRIANGLE; // Pickaxe In Game
	define NextWeapon_BTN		= PS4_R1;       // Next Weapon In Game
	define PreviousWeapon_BTN	= PS4_L1;       // Previous Weapon In Game
	define Reload_BTN			= PS4_SQUARE;   // Reload In Game
	define Jump_BTN				= PS4_CROSS;    // Jump In Game
	define Crouch_BTN			= PS4_R3;       // Crouch In Game
	define Ping_BTN				= PS4_RIGHT;    // Ping In Game

//--Build Mode
	define Build_BTN			= PS4_CIRCLE;	// Build In Game {Switch/Edit or Switch}
	define Switch_BTN			= PS4_LEFT;		// Switch In Game {Switch Only}
	define Wall_BTN				= PS4_R2;		// Wall In Game
	define Floor_BTN			= PS4_R1;		// Floor In Game
	define Ramp_BTN				= PS4_L2;		// Ramp In Game
	define Trap_BTN				= PS4_SQUARE;	// Trap In Game
	define Roof_BTN				= PS4_L1;		// Roof In Game

//--Edit Mode
	define Edit_BTN				= PS4_CIRCLE;	// Edit In Game (Use This Button If Using HoldTime In Game Or NOT Edit Assist Without Hold Time)
	define Select_BTN			= PS4_R2;		// Edit Select Piece In Game
	define Confirm_BTN			= PS4_CIRCLE;	// Edit Confirm In Game	
	define Reset_BTN			= PS4_R3;		// Edit Reset In Game

//--Movement & Aim Sticks
	int    InvertedPlayer		=      1;		// Make 2 If you play Inverted
	define AimY					= PS4_RY;		// Vertical Aim Axis In Game
	define AimX					= PS4_RX;		// Horizontal Aim Axis In Game
	define Strafe				= PS4_LX;		// Horizontal Walk Axis In Game
	define Walk					= PS4_LY;		// Vertical Walk Axis In Game

//--If Enabled Hold Ads_BTN + NextWeapon_BTN To Perform 1 Shot With Perfect Accuracy
	define PerfectAccuracy		= TRUE;

//--Stick Drift Removal
	define StickDriftRemoval	= TRUE; // Crescens Polar WILL NOT WORK With This Enabled Unfortunately
	define DeadZoneValue		=    8; // Anything Below This Value Is Registered As 0, Good For Old Controllers With Stick Drift

//--Polar Radius and Angle Booster
	int RadiusBoost				=  TRUE;
	int AngleBoost				=  TRUE;

//--Edit_BTN BUTTON IN GAME CANNOT HAVE HOLD TIME (USED AS Edit_BTN ASSIST BUTTON)
	define EditAssist_BUTTON	= PS4_L3;
	define EditDelay			=	   20; //DELAY BEFORE Edit_BTN ASSIST BUTTON TRIGGERS HOLDING OF Fire_BTN

//--Safe Quick Box Button
	define SafetyBox_BUTTON		= PS4_RIGHT;

//--Ramp Floor Wall Button
	define RampFloorWall_BUTTON	= PS4_SQUARE;

//--Fast Reset Button
	define FastReset_BUTTON		= PS4_TOUCH;

//--Window Edit Shot Button
	define WindowEditShot_BUTTON = PS4_RIGHT;

//--Quick Toggle Button Combos
	define QuickToggles			 =        TRUE;	// If You Want To Enable RapidFire or DropShot Without Entering The Menu Keep This TRUE. Otherwise Make It FALSE
	define QuickToggleHoldButton =      PS4_L2;	// Hold This Button & Tap One Of The Buttons Below To Activate A Quick Mod
	define RapidFireQT			 =    PS4_LEFT; // QuickToggleHoldButton + This Button To Activate Rapid Fire
	define DropShotQT			 =    PS4_DOWN; // QuickToggleHoldButton + This Button To Activate Drop Shot
																																																																																														/*
						 _   _           _   _               _     _______
						| \ | |         | \ | |             | |   |__   __|
						|  \| | ___     |  \| | ___  ___  __| |      | | ___
						| . ` |/ _ \    | . ` |/ _ \/ _ \/ _` |      | |/ _ \
						| |\  | (_) |   | |\  |  __/  __/ (_| |      | | (_) |
						|_| \_|\___/    |_| \_|\___|\___|\__,_|      |_|\___/
				  _ _           _                                ______          _   _
		 /\      | (_)         | |         /\                   |  ____|        | | | |
	    /  \   __| |_ _   _ ___| |_       /  \   _ __  _   _    | |__ _   _ _ __| |_| |__   ___ _ __
       / /\ \ / _` | | | | / __| __|     / /\ \ | '_ \| | | |   |  __| | | | '__| __| '_ \ / _ \ '__|
	  / ____ \ (_| | | |_| \__ \ |_     / ____ \| | | | |_| |   | |  | |_| | |  | |_| | | |  __/ |
	 /_/    \_\__,_| |\__,_|___/\__|   /_/    \_\_| |_|\__, |   |_|   \__,_|_|   \__|_| |_|\___|_|
                  _/ |                                  __/ |
                 |__/                                  |___/                                            																																																													*/
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | I | N | I | T | I | L | I | Z | A | T | I | O | N | | | | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
init {
	if(get_pvar(SPVAR_64, 0, 10, 5) != 9) 
	{
		set_pvar(SPVAR_64, 9):
			ResetScriptVARS();
			SavePVARS();
	}

	LoadPVARS();

	if(InvertedPlayer == 2)
		Inverted = -1;
	else
		Inverted = 1;

	combo_run(NikO);

	if(TaylorShapes == 4)
	{
		InnerSpiral = TaylorRadius / 2;
		OuterSpiral = TaylorRadius;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
 	if(get_console() == PIO_PS4)
    {
        if(get_controller() != PIO_PS4) // If not PS4 controller:
        {
            if(get_ival(PS4_SHARE)) // View
            {
                if(get_ival(PS4_R3)) // RS + View =  ScreenShot
                {
                    set_val(PS4_SHARE, 100);
                    set_val(PS4_TOUCH,   0);
                    set_val(PS4_R3   ,   0);
                }
                else // View only = PS4_TOUCH
                {
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE,   0);
                }
            }
        }
    }
    else if(get_console() == PIO_XB360) // If XBOX console
    {
        if(get_controller() == PIO_PS4) // If PS4 controller:
            swap(PS4_TOUCH, PS4_SHARE);
    }

	// STICK DRIFT REMOVAL - START
	if(StickDriftRemoval)
	{
		if(isqrt(pow(get_ival(AimY), 2) + pow(get_ival(AimX), 2)) <= DeadZoneValue)
		{
			set_val(AimY, 0);
			set_val(AimX, 0);
		}

		if(isqrt(pow(get_ival(Strafe), 2) + pow(get_ival(Walk), 2)) <= DeadZoneValue)
		{
			set_val(Strafe, 0);
			set_val(Walk  , 0);
		}
	}
	// STICK DRIFT REMOVAL - END

	// BLOCK RUMBLE - START
	if(RumbleBlock)
		block_rumble();
	// BLOCK RUMBLE - END

	if(ZenScreen == MenuClose)
	{

		//QUICK TOGGLE - START
		if(QuickToggles)
		{
			if(get_ival(QuickToggleHoldButton))
			{
				if(event_press(RapidFireQT))
				{
					RapidFire = !RapidFire;
					combo_run(cVibrate);
					LEDBlink(RapidFire);
				}

				if(event_press(DropShotQT))
				{
					StandardDropShot = !StandardDropShot;
					combo_run(cVibrate);
					LEDBlink(StandardDropShot);
				}
					set_val(RapidFireQT, 0);
					set_val(DropShotQT , 0);
			}
		}
		//QUICK TOGGLE - END

		//Ramp_BTN Floor_BTN Wall_BTN - START	
		if(RampFloorWall)
		{
			if(get_ival(RampFloorWall_BUTTON))
			{
				set_val(RampFloorWall_BUTTON, 0);
				combo_run(RAMPFLOORWALL);
			}
		}
	    //Ramp_BTN Floor_BTN Wall_BTN - END

		//SAFETY BOX - START
		if(QuickBox)
		{	
			if(get_ival(SafetyBox_BUTTON))
			{
				set_val(SafetyBox_BUTTON, 0);
				combo_run(TUNNELBOX);
			}
		}
		//SAFETY - END 

		//FAST Reset_BTN - START
		if(FastReset && !get_ival(Ads_BTN) && event_press(FastReset_BUTTON))
		{ 
			set_val(FastReset_BUTTON, 0);
			combo_run(cFastReset);
		}
		//FAST Reset_BTN - END

		// WINDOW Edit_BTN SHOT - START
		if(WindoWEditShot)
		{
			if(event_press(WindowEditShot_BUTTON))
			{
				set_val(WindowEditShot_BUTTON, 0);
				combo_run(WindowEditShot);
			}
		}
		// WINDOW Edit_BTN SHOT - END

	    //PUMP Wall_BTN - START
		if(PumpWall)
		{
			if(get_ival(Fire_BTN) && event_press(NextWeapon_BTN))
			{
				set_val(NextWeapon_BTN, 0);
				combo_run(PumpWall);
			}
		}
	    //PUMP Wall_BTN - END

		//Edit_BTN ASSIST - START
		if(EditAssist)
		{
			if(get_ival(EditAssist_BUTTON))
			{
				EditAssist();
				Edit1 = TRUE;
			}

			if(event_release(EditAssist_BUTTON))
			{	
				EditT = 0;	
				Edit1 = FALSE;
			}
		}

		if(Edit1)
		{
			if(event_press(Reset_BTN))
			{
				combo_run(InstantReset);
				Edit1	   = FALSE;
				BuildTrack = FALSE;
			}

			if(event_press(PickAxe_BTN) || event_press(Ads_BTN))
			{
				Edit1	   = FALSE;
				BuildTrack = FALSE;
			}
		}
		//Edit_BTN ASSIST - END

	//Build_BTN MODE - START
	if(BuildTracker) 
	{
		if(event_press(Build_BTN))
		{
            BuildTrack = !BuildTrack;
        	set_rgb(255, 0, 0);
        }
			if(BuildTrack)
			{
				BuildCount += get_rtime();

			if(event_press(PickAxe_BTN) || BuildCount == 3000)
			{
				BuildTrack = FALSE;
                BuildCount = 0;
            }

			if(get_ival(PreviousWeapon_BTN) || get_ival(NextWeapon_BTN) || get_ival(Ramp_BTN) || get_ival(Wall_BTN) || get_ival(Trap_BTN)) 
				BuildCount = 0;
			}
	}

    if (!BuildTrack)
	{
		set_rgb(0, 255, 0);

	    //RAPIDFIRE - START
		if(RapidFire)
		{
			if(get_ival(Fire_BTN))
				combo_run(cRapidFire);
			if(event_release(Fire_BTN))
				combo_stop(cRapidFire);
		}
		//RAPIDFIRE - END
			
		//PERFECT ACCURACY - START
		if(PerfectAccuracy) 
		{
			if(get_ival(NextWeapon_BTN) && get_ptime(NextWeapon_BTN) <= get_ptime(Ads_BTN) && get_ival(Ads_BTN))
				OneShot = TRUE;

				if(OneShot)
				{
					if(get_ival(NextWeapon_BTN))
						combo_run(cPerfectionAccuracy);
						block(NextWeapon_BTN, get_ptime(NextWeapon_BTN) + 50);
				}

				if(OneShot && event_release(NextWeapon_BTN))
					OneShot = FALSE;
		}
		//PERFECT ACCURACY - END

		//DROPSHOT - START
		if(StandardDropShot)
		{
			if(get_ival(Fire_BTN))
			{
				combo_run(cDropShot);
			}
		}

		if(NikolaiDropShot)
		{
			if(!BuildTrack)
			{
				if(get_val(Fire_BTN) && event_press(Crouch_BTN))
				{
					Droppy_Shotty = TRUE;
				}
			}

			if(!BuildTrack)
			{
				if(Droppy_Shotty)
				{
					if(get_ival(Fire_BTN))
					{
						combo_run(cDropShot);
					}
				}
			}

			if(event_release(Fire_BTN))
			{
				Droppy_Shotty = FALSE;
			}
		}
		//DROPSHOT - END

		//PUMP SMG - START
		if(PumpSMG)
		{
			if(R2Block)
			{
				set_val(Fire_BTN, 0);
			}

			if(event_press(Fire_BTN))
			{
				if (!Tap)
				{
					Tap = TRUE;
					combo_run(PumpSmg);
					set_val(Fire_BTN, 0);
				}
			}

			if(event_press(NextWeapon_BTN))
			{
				Tap = FALSE;
			}

			if(event_press(PreviousWeapon_BTN))
			{
				Tap = TRUE;
			}
		}
		//PUMP SMG - END

		//Strafe - START
		if(StrafeShot)
		{
			if(get_ival(Fire_BTN))
				combo_run(StrafeShot);
			if(event_release(Fire_BTN))
				combo_stop(StrafeShot);
		}
		//Strafe - END

		//SLIDE SHOT - START
		if(SlideShot)
		{
            if (!get_ival(Ads_BTN) && event_press(Fire_BTN))
			{
                combo_run(SlideShot);
            }

            if(event_release(Fire_BTN))
			{
            	combo_run(SlideShot);
        	}

        	if(combo_running(SlideShot))
			{
        		set_val(Fire_BTN, 0);
        	}
        }
		//SLIDE SHOT - END

		// STICKY AIM - START
		if(StickyAimAssist)
		{
			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
				combo_run(cStickyAA);
			else
				combo_stop(cStickyAA);
		}
		// STICKY AIM - END

		//ANTI BLOOM REDUCER - START
		if(BloomReducer)
		{
			if(get_val(Ads_BTN) && (get_val(Fire_BTN)))
			{
				combo_run(cAntiBloom);
				combo_run(cRapidBloom);
			}
				if(abs(get_val(Strafe)) > 60 || abs(get_val(Walk)) > 60)
				{
					combo_stop(cAntiBloom);
					combo_stop(cRapidBloom);
				}
		}
		//ANTI BLOOM REDUCER - END

	    //DoGz V7 Polar - START
		Axis = isqrt(abs(get_ival(AimX)) * abs(get_ival(AimX)) + abs(get_ival(AimY)) * abs(get_ival(AimY)));

		if(DoGzV7Polar)
		{
			if(get_ival(Fire_BTN))
			{
				if(RadiusBoost)
				{
					Radius = PolarRadius + PolarRBoost;
				}

				if(AngleBoost)
				{
					Angle = PolarAngle + PolarABoost;
				} 
			}
			else
			{
				Radius = PolarRadius;
				Angle  = PolarAngle;
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				if(Axis <= 15)
				{
					Random = random(326, 328);
					set_polar(POLAR_RS, Speed = (Speed + Angle) % 360, (Radius * Random) + get_polar(POLAR_RS, 0));
				}
				else
				{
					combo_run(cPolar);
				}
			}
		}
		//DoGz V7 Polar - END

		//DNAM Polar With Taylor Shapes - START
		if(TaylorShapes)
		{
			CycleRefresh   += get_rtime();
			polarAngle		= get_polar(POLAR_RS, POLAR_ANGLE);
			Angle			= (Angle + TaylorAngle) % 360;

			if(ShapeDirection)
			{
				ShapeDirection = (get_val(AimX) > 0);
			}

			if(TaylorTracking)
			{
				Tracking = (Tracking	 + TrackingSpeed) % 360;
				Tracker1 = (TrackingSize * sin(Tracking) / 100);
				Tracker2 = (TrackingSize * cos(Tracking) / 100);
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				TaylorShapes(POLAR_RS, Angle, TaylorRadius);
			}
		}
		//DNAM Polar With Taylor Shapes - END

	    //CHICKEN MODE - START
		if(ChickenMode)
		{
			if(get_ival(Fire_BTN))
				combo_run(StrafeShot);
				combo_run(cDropShot);

			if(event_release(Fire_BTN))
				combo_stop(StrafeShot);
				combo_stop(cDropShot); 
		}
	  	//CHICKEN MODE - END	
	  	
	  	//AUTO AIM - START
	if(AimAbuse)
	{
		if(get_ival(Ads_BTN) > 95)
			combo_run(Aim_Abuse); 
		if(event_release(Ads_BTN))
			combo_stop(Aim_Abuse); 
	}
		//AUTO AIM - END

		//--HEADSHOT ASSIST - START
		if(HeadShotAssist)
		{
			RY = inv(HeadShotStrength);

			if(get_ival(Fire_BTN) && get_ptime(Fire_BTN) < HeadShotHoldTime)
			{
				Set_Val(AimY, RY);	
			}
		}
		//--HEADSHOT ASSIST - END

		//AIM CORRECTION - START
		if(AimSensCorrections)
		{
			ADS_Grenade_Sens = 100 - (InGame_Menu_Sens);
			ADS_Fire_Sens    = 96  - (InGame_Menu_Sens);
			Actual_Sens      = 100;

			if (!get_ival(Ads_BTN) && !get_ival(Fire_BTN) && !get_ival(NextWeapon_BTN) && !get_ival(PreviousWeapon_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}
			else if (!get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = ADS_Fire_Sens;
			}
			else if(get_ival(PreviousWeapon_BTN) || get_ival(NextWeapon_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}

			if(Sens > 100)
				Sens = 100;
				sensitivity(AimX, NOT_USE, Sens);
				sensitivity(AimY, NOT_USE, Sens);
		}
		//AIM CORRECTION - END

		//ANTIRECOIL - START
		switch(AntiRecoilType)
		{
			case 1:
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cBoostRecoil);
				}
			break;
			}

			case 2:
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					Set_Val(AimY, VerticalValue * Inverted);
					Set_Val(AimX, HorizontalValue);
				}
			break;
			}

			case 3 :
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					TimeValue += get_rtime();

					if(TimeValue > 30)
					{
						AxisLY = get_lval(AimY);
						AxisCY = get_ival(AimY);
					}

					if(abs(AxisCY) != abs(AxisLY))
						BoostAR = ((AxisCY - AxisLY) * 4);

					if((BoostAR != 0) && (TimeValue > 40))
					{
						BoostAR   = 0;
						TimeValue = 0;
					}

					if(get_rumble(RUMBLE_A))
					{
						RumValue = get_rumble(RUMBLE_A) / 3;
					}
					else
					{
						RumValue = 0;
					}
						OutPut = (VerticalValue + RumValue + BoostAR);
						Set_Val(AimY, OutPut * Inverted);
						Set_Val(AimX, HorizontalValue);
				}

					if (!get_ival(Fire_BTN))
					{
						RecoilTimer = 0;
						TimeValue   = 0;
						BoostAR     = 0;
					}
			break;
			}

			case 4 :
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					TimeValue += get_rtime();

					if(TimeValue > 30)
					{
						AxisLY = get_lval(AimY);
						AxisCY = get_ival(AimY);
					}

					if(abs(AxisCY) != abs(AxisLY))
						BoostAR = ((AxisCY - AxisLY) * 4);

					if((BoostAR != 0) && (TimeValue > 40))
					{
						BoostAR   = 0;
						TimeValue = 0;
					}

					RecoilTimer += get_rtime();

					if(RecoilTimer > 70)
					{
						RumValue    = 15;
						RecoilTimer =  0;
					}
					else
					{
						RumValue = 0;
					}
						OutPut = (VerticalValue + RumValue + BoostAR);
						Set_Val(AimY, OutPut* Inverted);
						Set_Val(AimX, HorizontalValue);
				}

					if (!get_ival(Fire_BTN))
					{
						RecoilTimer = 0;
						TimeValue   = 0;
						BoostAR     = 0;
					}
			break;
			}
		}
		//ANTIRECOIL - END

		//BUILDMODE - START
	}
		//Build_BTN MODE - END
		
		if(get_ival(Ads_BTN) && event_press(PS4_OPTIONS))
		{
			ZenScreen	= MainMods;
			Display 	= TRUE;
		}
	}

	NikO_Check();

	if(ZenScreen == MainMods)
	{
		block_all_inputs();
		BlockAllOutPuts();

		if(RumbleBlock)
			block_rumble();

		DoGzV7Polar			= ToggleSwitch(1,  DoGzV7Polar			, 0,  1);
		TaylorShapes		= ToggleSwitch(2,  TaylorShapes			, 0, 17);
		TaylorTracking		= ToggleSwitch(3,  TaylorTracking		, 0,  1);
		StickyAimAssist		= ToggleSwitch(4,  StickyAimAssist		, 0,  1);
		AimAbuse			= ToggleSwitch(5,  AimAbuse				, 0,  1);
		AimSensCorrections	= ToggleSwitch(6,  AimSensCorrections	, 0,  1);
		AntiRecoilType		= ToggleSwitch(7,  AntiRecoilType		, 0,  4);
		RapidFire			= ToggleSwitch(8,  RapidFire			, 0,  1);
		StandardDropShot	= ToggleSwitch(9,  StandardDropShot		, 0,  1);
		NikolaiDropShot		= ToggleSwitch(10, NikolaiDropShot		, 0,  1);
		PumpSMG				= ToggleSwitch(11, PumpSMG				, 0,  1);
		PumpWall			= ToggleSwitch(12, PumpWall				, 0,  1);
		ChickenMode			= ToggleSwitch(13, ChickenMode			, 0,  1);
		FastReset			= ToggleSwitch(14, FastReset			, 0,  1);
		EditAssist			= ToggleSwitch(15, EditAssist			, 0,  1);
		RampFloorWall		= ToggleSwitch(16, RampFloorWall		, 0,  1);
		QuickBox			= ToggleSwitch(17, QuickBox				, 0,  1);
		WindoWEditShot		= ToggleSwitch(18, WindoWEditShot		, 0,  1);
		BloomReducer		= ToggleSwitch(19, BloomReducer			, 0,  1);
		SlideShot			= ToggleSwitch(20, SlideShot			, 0,  1);
		StrafeShot			= ToggleSwitch(21, StrafeShot			, 0,  1);
		HeadShotAssist		= ToggleSwitch(22, HeadShotAssist		, 0,  1);
		BuildTracker		= ToggleSwitch(23, BuildTracker			, 0,  1);
		RumbleBlock			= ToggleSwitch(24, RumbleBlock			, 0,  1);

		if(Mod == 2)
		{
			if(event_press(PS4_RIGHT))
			{
				ToggleAAType	= Cycle(ToggleAAType + 1, 0, 1);
				Display			= TRUE;
			}

			if(event_press(PS4_LEFT))
			{
				ToggleAAType	= Cycle(ToggleAAType - 1, 0, 1);
				Display			= TRUE;
            }
	    }

		if(event_press(PS4_SQUARE))
		{
			if(EditableMods[Mod] == 1)
			{
				ZenScreen	= EditMods;
				Display 	= TRUE;
			}
		}

		if(event_press(PS4_UP))
		{
			Mod		= Cycle(Mod - 1, 1, NumOfMods);
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Mod		= Cycle(Mod + 1, 1, NumOfMods);
			Display = TRUE;
		}

		if(event_press(PS4_CIRCLE))
		{
			ZenScreen = MenuClose;
			SavePVARS();
			Frame = -1;
			combo_restart(NikO);
			Display = TRUE;
		}
	}
	
	if(ZenScreen == EditMods)
	{
		block_all_inputs();
		BlockAllOutPuts();

		if(RumbleBlock)
			block_rumble();

		if(event_press(PS4_CIRCLE) && (Mod == 22 || Mod == 20 || Mod == 10 || Mod == 9 || Mod == 7 || Mod == 6 || Mod == 4 || Mod == 3 || Mod == 2 || Mod == 1))
		{
			SavePVARS();
			ZenScreen	= MainMods;
			Display		= TRUE;
		}

		if(event_press(PS4_UP))
		{
			Scroll	= Cycle(Scroll + 1, 0, 2);
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Scroll	= Cycle(Scroll - 1, 0, 2);
			Display = TRUE;
		}

		if(Mod == 1)
		{
			if(Scroll < 0)
				Scroll = 0;
			if(Scroll > 1)
				Scroll = 1;

			if(Tab == 0)
			{
				if(event_press(PS4_R1))
				{
					Tab += 1;
					Display = TRUE;
				}
					PolarRadius = EditValues(1, PolarRadius, 1, 0, 50);
					PolarAngle  = EditValues(0, PolarAngle , 1, 0, 50);
			}
			if(Tab == 1)
			{
				if(event_press(PS4_L1))
				{
					Tab -= 1;
					Display = TRUE;
				}
					PolarRBoost = EditValues(1, PolarRBoost, 1, 0, 50);
					PolarABoost = EditValues(0, PolarABoost, 1, 0, 50);
			}
		}

		if(Mod == 2)
		{
			if(Scroll < 0)
				Scroll = 0;
			if(Scroll > 1)
				Scroll = 1;

			TaylorRadius = EditValues(1, TaylorRadius, 1, 0,  50);
			TaylorAngle  = EditValues(0, TaylorAngle , 1, 0, 100);
		}

		if(Mod == 3)
		{
			if(Scroll < 0)
				Scroll = 0;
			if(Scroll > 1)
				Scroll = 1;

			TrackingSize  = EditValues(1, TrackingSize , 1, 0, 10);
			TrackingSpeed = EditValues(0, TrackingSpeed, 1, 0, 10);
		}

		if(Mod == 4)
		{
			Scroll = 1;

			if(Tab == 0)
			{
				if(event_press(PS4_R1))
				{
					Tab += 1;
					Display = TRUE;
				}
					StickyAimSize = EditValues(1, StickyAimSize, 1, 0, 50);
			}

			if(Tab == 1)
			{
				if(event_press(PS4_L1))
				{
					Tab -= 1;
					Display = TRUE;
				}
					StickyAimTime = EditValues(1, StickyAimTime, 10, 0, 100);
			}
		}

		if(Mod == 6)
		{
			Scroll = 1;

			InGame_Menu_Sens = EditValues(1, InGame_Menu_Sens, 1, 0, 20);
		}

		if(Mod == 7)
		{
			if(Scroll < 0)
				Scroll = 0;
			if(Scroll > 1)
				Scroll = 1;

			VerticalValue	= EditValues(1, VerticalValue  , 1,    0, 100);
			HorizontalValue = EditValues(1, HorizontalValue, 1, -100, 100);
		}

		if(Mod == 9 || Mod == 10)
		{
			Scroll = 1;

			DropShotSpeed = EditValues(1, DropShotSpeed, 10, 30, 200);
		}

		if(Mod == 20)
		{
			Scroll = 1;

			SlideShotWait = EditValues(1, SlideShotWait, 10, 30, 300);
		}

		if(Mod == 22)
		{
			if(Scroll < 0)
				Scroll = 0;
			if(Scroll > 1)
				Scroll = 1;

			HeadShotStrength = EditValues(1, HeadShotStrength,   1, 0,   99);
			HeadShotHoldTime = EditValues(0, HeadShotHoldTime, 100, 0, 4000);
		}
	}

	if(SS)
	{	
		if(ZenScreen == MenuClose)
			TexT1();
		if(ZenScreen == MainMods)
			TexT2();

		rect_oled(0, 0, 128, 64, 0, 1);
    	CountDown += get_rtime();
		ScreenSaver();
   
		if(CountDown >= 9000)
		{
      		cls_oled(0);
      		CountDown = 0;
      		SS = FALSE;
    	}
	}
	
	if(Display)
	{
		cls_oled(0);
		CountDown = 0;

		if(ZenScreen == MenuClose)
		{
			print (CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 18, 0, 1, ModsString[0]);
		}
		
		if(ZenScreen == MainMods)
		{
			print (CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), CenterY(OLED_FONT_SMALL_HEIGHT), 0, 1, ModsString[Mod]);

			if(Mod == 2)
			{
				print(CenterX(AimAssistType_Chars(ToggleAAType), OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, AimTypes[ToggleAAType]);

				switch(ToggleAAType)
				{
					case 0 :
					{
						print(CenterX(AimAssistShapeP_Chars(TaylorShapes), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsPC[TaylorShapes]);
					break;
					}

					case 1 :
					{
						print(CenterX(AimAssistShapeL_Chars(TaylorShapes), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsLC[TaylorShapes]);
					break;
					}
				}
			}

			if(Mod == 7)
			{
				switch(AntiRecoilType)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF)			- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(BOOSTRECOIL)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BOOSTRECOIL[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(LEGACYAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, LEGACYAR[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(RUMBLEAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, RUMBLEAR[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(TIMEDAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TIMEDAR[0]);
					break;
					}
				}
			}
		}

		if(ZenScreen == EditMods)
		{
			print (CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), 3, 0, 1, ModsString[Mod]);

			if(Mod == 1)
			{
				if(Tab == 0)
				{
					RegularNumberToString(PolarRadius, FindDigits (PolarRadius), 23);
					RegularNumberToString(PolarAngle , FindDigits (PolarAngle) , 41);
				}

				if(Tab == 1)
				{
					RegularNumberToString(PolarRBoost, FindDigits (PolarRBoost), 23);
					RegularNumberToString(PolarABoost, FindDigits (PolarABoost), 41);
				}
			}

			if(Mod == 2)
			{
				RegularNumberToString(TaylorRadius, FindDigits (TaylorRadius), 23);
				RegularNumberToString(TaylorAngle , FindDigits (TaylorAngle) , 41);
			}

			if(Mod == 3)
			{
				RegularNumberToString(TrackingSize , FindDigits (TrackingSize) , 21);
				RegularNumberToString(TrackingSpeed, FindDigits (TrackingSpeed), 41);
			}

			if(Mod == 4)
			{
				if(Tab == 0)
				{
					RegularNumberToString(StickyAimSize, FindDigits (StickyAimSize), 25);
				}

				if(Tab == 1)
				{
					RegularNumberToString(StickyAimTime, FindDigits (StickyAimTime), 25);
				}
			}

			if(Mod == 6)
			{
				RegularNumberToString(InGame_Menu_Sens, FindDigits (InGame_Menu_Sens), 25);
			}

			if(Mod == 7)
			{
				RegularNumberToString(VerticalValue  , FindDigits (VerticalValue)  , 23);
				RegularNumberToString(HorizontalValue, FindDigits (HorizontalValue), 41);
			}

			if(Mod == 9 || Mod == 10)
			{
				RegularNumberToString(DropShotSpeed, FindDigits (DropShotSpeed), 25);
			}

			if(Mod == 20)
			{
				RegularNumberToString(SlideShotWait, FindDigits (SlideShotWait), 25);
			}

			if(Mod == 22)
			{
				RegularNumberToString(HeadShotStrength, FindDigits (HeadShotStrength), 23);
				SmallNumberToString(HeadShotHoldTime  , FindDigits (HeadShotHoldTime), 41);
			}

			if(Scroll == 2)
				line_oled(30, 20, 40, 20, 3, 1);
			if(Scroll == 1)
				line_oled(30, 33, 40, 33, 3, 1);
			if(Scroll == 0)
				line_oled(30, 46, 40, 46, 3, 1);
		}
			rect_oled(0, 0, 128, 64, 0, 1);
			SS		= TRUE;
			Display = FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | | | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
combo cVibrate {
	set_rumble(RUMBLE_A, 90);
	wait(230);
	reset_rumble();
}

combo FlashGreen {
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo FlashRed {
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo cStickyAA {
	Set_Val(AimY, StickyAimSize);
	wait(StickyAimTime);
	Set_Val(AimX, StickyAimSize);
	wait(StickyAimTime);
	Set_Val(AimY, inv(StickyAimSize));
	wait(StickyAimTime);
	Set_Val(AimX, inv(StickyAimSize));
	wait(StickyAimTime);
}

combo cPolar {
	Set_Ival(AimX,	Radius);
	wait(20);
	Set_Ival(AimY,	Radius);
	wait(20);
	Set_Ival(AimX,	inv(Radius));
	wait(20);
	Set_Ival(AimY,	inv(Radius));
	wait(20);
}

combo cHelixDelay {
	wait(20);
	Position = 0;
	wait(1);
}

combo cBoostRecoil {
	Boost++;

	Recoil = get_val(AimY) + VerticalValue + Boost;

	if(Boost == 10)
	{
		Boost = 0;
	}

	if(Recoil > 100)
	{
		Recoil = 100;
	}

	Set_Val(AimY, Recoil * Inverted);

	Recoil = get_val(AimX) + HorizontalValue;

	if(Recoil > 100)
	{
		Recoil = 100;
	}

	set_val(AimX, Recoil);
}

combo StrafeShot {
    Set_Val(Strafe, inv(100));
    wait(160);
	wait(10);
    Set_Val(Strafe, 100);
    wait(160);
	wait(10);
}

combo PumpWall {
    set_val(Fire_BTN, 100);
    wait(50);
 	set_val(Build_BTN, 100);
    wait(50);
    set_val(Wall_BTN, 100);
    wait(50);
    set_val(Build_BTN, 100);
    wait(50);
    wait(30);
}

combo WindowEditShot {
	set_val(Wall_BTN, 100);	
	wait(90);
	set_val(Wall_BTN, 0);
	wait(90);
	set_val(Build_BTN, 100);
	wait(50);
	set_val(Build_BTN, 0);
	wait(50);
	set_val(Wall_BTN, 100);
	wait(50);
	set_val(Wall_BTN, 0);
	wait(50);
	set_val(Build_BTN, 100);
	wait(125);
	set_val(Build_BTN, 0);
	wait(125);
	set_val(Wall_BTN, 100);
	wait(100);
	wait(200);
	set_val(Build_BTN, 100);
	wait(100);
	set_val(Build_BTN, 0);
	wait(100);
}

combo cConfirm {
    set_val(Confirm_BTN, 100);
    wait(20);
    set_val(Confirm_BTN, 0);
    wait(20);
}

combo cFastReset {
	set_val(EditAssist_BUTTON, 100);
	wait(20);
	set_val(Reset_BTN, 100);
	wait(20);

	combo_run(cConfirm);
}

combo PumpSmg {
    R2Block = TRUE;
    set_val(Fire_BTN, 100);
    wait(30);
    wait(10);
    set_val(Ads_BTN, 100);
    set_val(PreviousWeapon_BTN, 100);
    wait(30);
    R2Block = FALSE;
}

combo InstantReset {
    wait(20)
    combo_run(Confirm);
}

combo Confirm {
    set_val(Confirm_BTN, 100);
    wait(50);
    set_val(Confirm_BTN, 0);
    wait(100);
}

combo RAMPFLOORWALL {
	set_val(Ramp_BTN, 100);
	wait(60);
	wait(30);
	set_val(Floor_BTN, 100);
	wait(60);
	wait(30);
	set_val(Wall_BTN, 100);
	wait(60);
	wait(40);
}

combo TUNNELBOX {
	wait(20);
	set_val(Build_BTN, 100);
	wait(30);
	set_val(AimY, 100);
	wait(30);
	set_val(Wall_BTN, 100);
	set_val(AimX, 100);
	wait(430);
	set_val(AimY, -60);
	wait(50);
	set_val(AimY, -100);
	wait(120);
	set_val(NextWeapon_BTN, 100);
	wait(40);
	set_val(AimY, 100);
	wait(120);
	set_val(Build_BTN, 100);
	wait(30);
}

combo Aim_Abuse {
	set_val(Ads_BTN, 100);
	wait(random(440, 750)); // Hold Time Between 440ms and 730ms
	set_val(Ads_BTN, 0);
	wait(random(50, 95));  //  Release Time Between 50ms and 95ms 
}

combo cPerfectionAccuracy {
		set_val(Fire_BTN, 100);
		wait(50);
		wait(360);
}

combo cAntiBloom {
	Set_Val(Strafe, -100);
	wait(50);
	Set_Val(Walk, -100);
	wait(20);
	Set_Val(Strafe, 100);
	wait(50);
	Set_Val(Walk, 100);
	wait(20);
}

combo cRapidBloom {
	set_val(Fire_BTN, 100);
    wait(40);
    set_val(Fire_BTN, 0);
    wait(20);
}

combo cRapidFire {
    set_val(Fire_BTN, 100);
    wait(60);
    set_val(Fire_BTN, 0);
    wait(30);
}

combo cDropShot {
    set_val(Crouch_BTN, 100); 
    wait(60);
    set_val(Crouch_BTN, 0);
    wait(30);
    wait(DropShotSpeed);
}

combo SlideShot {	
	set_val(Crouch_BTN, 100);
	wait(SlideShotWait);
	wait(20);
}

combo NikO {
	wait(20);
	image_oled(0, 10, 1, FALSE, Frames[Frame]);
	Frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
function SavePVARS() {
	set_pvar(SPVAR_1,  DoGzV7Polar);
	set_pvar(SPVAR_2,  TaylorShapes);
	set_pvar(SPVAR_3,  TaylorTracking);
	set_pvar(SPVAR_4,  StickyAimAssist);
	set_pvar(SPVAR_5,  AimAbuse);
	set_pvar(SPVAR_6,  AimSensCorrections);
	set_pvar(SPVAR_7,  AntiRecoilType);
	set_pvar(SPVAR_8,  RapidFire);
	set_pvar(SPVAR_9,  StandardDropShot);
	set_pvar(SPVAR_10, NikolaiDropShot);
	set_pvar(SPVAR_11, PumpSMG);
	set_pvar(SPVAR_12, PumpWall);
	set_pvar(SPVAR_13, ChickenMode);
	set_pvar(SPVAR_14, FastReset);
	set_pvar(SPVAR_15, EditAssist);
	set_pvar(SPVAR_16, RampFloorWall);
	set_pvar(SPVAR_17, QuickBox);
	set_pvar(SPVAR_18, WindoWEditShot);
	set_pvar(SPVAR_19, BloomReducer);
	set_pvar(SPVAR_20, SlideShot);
	set_pvar(SPVAR_21, StrafeShot);
	set_pvar(SPVAR_22, HeadShotAssist);
	set_pvar(SPVAR_23, BuildTracker);
	set_pvar(SPVAR_24, RumbleBlock);

	set_pvar(SPVAR_25, PolarRadius);
	set_pvar(SPVAR_26, PolarAngle);
	set_pvar(SPVAR_27, PolarRBoost);
	set_pvar(SPVAR_28, PolarABoost);
	set_pvar(SPVAR_29, TaylorRadius);
	set_pvar(SPVAR_30, TaylorAngle);
	set_pvar(SPVAR_31, TrackingSize);
	set_pvar(SPVAR_32, TrackingSpeed);
	set_pvar(SPVAR_33, StickyAimSize);
	set_pvar(SPVAR_34, StickyAimTime);
	set_pvar(SPVAR_35, DropShotSpeed);
	set_pvar(SPVAR_36, InGame_Menu_Sens);
	set_pvar(SPVAR_37, VerticalValue);
	set_pvar(SPVAR_38, HorizontalValue);
	set_pvar(SPVAR_39, SlideShotWait);
	set_pvar(SPVAR_40, HeadShotStrength);
	set_pvar(SPVAR_41, HeadShotHoldTime);
}

function LoadPVARS() {
	DoGzV7Polar			= get_pvar(SPVAR_1,		0,	 1,		0);
	TaylorShapes		= get_pvar(SPVAR_2,		0,	17,		0);
	TaylorTracking		= get_pvar(SPVAR_3,		0,	 1,		0);
	StickyAimAssist		= get_pvar(SPVAR_4,		0,	 1,		0);
	AimAbuse			= get_pvar(SPVAR_5,		0,	 1,		0);
	AimSensCorrections	= get_pvar(SPVAR_6,		0,	 1,		0);
	AntiRecoilType		= get_pvar(SPVAR_7,		0,	 4,		0);
	RapidFire			= get_pvar(SPVAR_8,		0,	 1,		0);
	StandardDropShot	= get_pvar(SPVAR_9,		0,	 1,		0);
	NikolaiDropShot		= get_pvar(SPVAR_10,	0,	 1,		0);
	PumpSMG				= get_pvar(SPVAR_11,	0,	 1,		0);
	PumpWall			= get_pvar(SPVAR_12,	0,	 1,		0);
	ChickenMode			= get_pvar(SPVAR_13,	0,	 1,		0);
	FastReset			= get_pvar(SPVAR_14,	0,	 1,		0);
	EditAssist			= get_pvar(SPVAR_15,	0,	 1,		0);
	RampFloorWall		= get_pvar(SPVAR_16,	0,	 1,		0);
	QuickBox			= get_pvar(SPVAR_17,	0,	 1,		0);
	WindoWEditShot		= get_pvar(SPVAR_18,	0,	 1,		0);
	BloomReducer		= get_pvar(SPVAR_19,	0,	 1,		0);
	SlideShot			= get_pvar(SPVAR_20,	0,	 1,		0);
	StrafeShot			= get_pvar(SPVAR_21,	0,	 1,		0);
	HeadShotAssist		= get_pvar(SPVAR_22,	0,	 1,		0);
	BuildTracker		= get_pvar(SPVAR_23,	0,	 1,		0);
	RumbleBlock			= get_pvar(SPVAR_24,	0,	 1,		0);

	PolarRadius			= get_pvar(SPVAR_25,	0,	  60,	  15);
	PolarAngle			= get_pvar(SPVAR_26,	0,	  60,	  15);
	PolarRBoost			= get_pvar(SPVAR_27,	0,	  60,	   4);
	PolarABoost			= get_pvar(SPVAR_28,	0,	  60,	   6);
	TaylorRadius		= get_pvar(SPVAR_29,	0,	  60,	  15);
	TaylorAngle			= get_pvar(SPVAR_30,	0,	 100,	  15);
	TrackingSize		= get_pvar(SPVAR_31,	0,	  10,	   2);
	TrackingSpeed		= get_pvar(SPVAR_32,	0,	  10,	   2);
	StickyAimSize		= get_pvar(SPVAR_33,	0,	  60,	  11);
	StickyAimTime		= get_pvar(SPVAR_34,	0,	 100,	  30);
	DropShotSpeed		= get_pvar(SPVAR_35,	0,	 200,	  80);
	InGame_Menu_Sens	= get_pvar(SPVAR_36,	0,	  20,	  10);
	VerticalValue		= get_pvar(SPVAR_37,	0,	 100,	  20);
	HorizontalValue		= get_pvar(SPVAR_38, -100,	 100,	   0);
	SlideShotWait		= get_pvar(SPVAR_39,   30,	 300,	 150);
	HeadShotStrength	= get_pvar(SPVAR_40,	0,	  99,	  20);
	HeadShotHoldTime	= get_pvar(SPVAR_41,	0,	4000,	1500);
}

function ResetScriptVARS() {
	DoGzV7Polar			=		0;
	TaylorShapes		=		0;
 	AimAbuse			=		0;
	AimSensCorrections	=		0;
    AntiRecoilType		=		0;
    RapidFire			=		0;
    StandardDropShot	=		0;
	NikolaiDropShot		=		0;
    PumpSMG				=		0;
    PumpWall			=		0;
    ChickenMode			=		0;
    FastReset			=		0;
	EditAssist			=		0;
	RampFloorWall		=		0;
	QuickBox			=		0;
	WindoWEditShot		=		0;
	BloomReducer		=		0;
	SlideShot			=		0;
	StrafeShot			=		0;
	HeadShotAssist		=		0;
	BuildTracker		=		0;
	RumbleBlock			=		0;

	PolarRadius			=	   15;
	PolarAngle			=	   15;
	PolarRBoost			=	    4;
	PolarABoost			=	    6;
	TaylorRadius		=	   15;
	TaylorAngle			=	   15;
	TrackingSize		=	    2;
	TrackingSpeed		=	    2;
	StickyAimSize		=	   10;
	StickyAimTime		=	   30;
	DropShotSpeed		=	   80;
	InGame_Menu_Sens	=	   10;
	VerticalValue		=	   20;
	HorizontalValue		=		0;
	SlideShotWait		=	  150;
	HeadShotStrength	=	   20;
	HeadShotHoldTime	=	 1500;
}

function NikO_Check() {
	if(!combo_running(NikO) && Frame <= 15)
		combo_restart(NikO);
}

function EditAssist() {
    EditT += get_rtime();

	if(get_ival(EditAssist_BUTTON))
	{
		if(EditT >= EditDelay)
			EditPress(EditAssist_BUTTON);
	}
}

function EditPress(Button) {
    if(get_ival(Button))
        return;
	set_val(Button, 100);
}

function LEDBlink(Toggle) {
    if(Toggle)
        combo_run(FlashGreen);
    else
        combo_run(FlashRed);
}

function TaylorShapes(Stick, Angle, Rad) {
	if(TaylorShapes == 1)
	{  
	 	if(ShapeDirection)
		{
	  		Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + Tracker1);
	 		Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker2);
	 	}
		else
		{
	 		Set_Val(Stick + 8, (Rad * cos(Angle)) / 100 + Tracker2);
	 		Set_Val(Stick + 7, (Rad * sin(Angle)) / 100 + Tracker1);
	 	}
 	}

 	if(TaylorShapes == 2)
	{ 		
  		if(ShapeDirection)
		{
  		    Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + Tracker1);
  			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + Tracker2);
  		}
		else
		{
  			Set_Val(Stick + 8, (Rad     * cos(Angle))  / 100 + Tracker2);
  			Set_Val(Stick + 7, (Rad / 2 * sin(Angle))  / 100 + Tracker1);
  		}
  	}

  	if(TaylorShapes == 3)
	{
  	    if(ShapeDirection)
		{
  		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle))  / 100 + Tracker1);
  			Set_Val(Stick + 7, (Rad     * cos(Angle))  / 100 + Tracker2);
  	    }
		else
		{ 
  	    	Set_Val(Stick + 8, (Rad / 2 * cos(Angle))  / 100 + Tracker2);
  			Set_Val(Stick + 7, (Rad     * sin(Angle))  / 100 + Tracker1);
  		} 
  	}

  	if(TaylorShapes == 4)
	{
		Spiral(Rad);

			if(ShapeDirection)
			{
				Set_Val(Stick + 8, (InnerSpiral * sin(Angle))  / 100 + Tracker1);
				Set_Val(Stick + 7, (OuterSpiral * cos(Angle))  / 100 + Tracker2);
			}
			else
			{
				Set_Val(Stick + 8, (InnerSpiral * cos(Angle))  / 100 + Tracker2);
				Set_Val(Stick + 7, (OuterSpiral * sin(Angle))  / 100 + Tracker1);
  		} 
  	}

  	if(TaylorShapes == 5)
	{
		Spiral(Rad);

			if(ShapeDirection)
			{ 
				Set_Val(Stick + 8, (InnerSpiral * sin(Angle)) / 100 + Tracker1);
				Set_Val(Stick + 7, (OuterSpiral * cos(Angle)) / 100 + Tracker2);
			}
			else
			{
				Set_Val(Stick + 8, (InnerSpiral * cos(Angle)) / 100 + Tracker2);
				Set_Val(Stick + 7, (OuterSpiral * sin(Angle)) / 100 + Tracker1);
			}
  	}

	if(TaylorShapes == 6)
	{
		combo_run(cHelixDelay);
		Helix();

		Set_Val(Stick + 8, (Rad * X)  / 100 + Tracker1);
		Set_Val(Stick + 7, (Rad * Y)  / 100 + Tracker2);
	}

	if(TaylorShapes == 7) 
	{ 
		Set_Val(Stick + 8, (Rad * cos(Angle)) / 100 + Tracker2);
	} 

	if(TaylorShapes == 8) 
	{ 
		Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker2);
	}

	if(TaylorShapes == 9)
	{ 
		if(Position == 0)
		{
			Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + Tracker2);
		    Set_Val(Stick + 8, (Rad * sin(45  + Angle)) / 100 + Tracker1);
		} 

		if(Position == 1)
		{
			Set_Val(Stick + 7, (Rad * cos(45  + Angle)) / 100 + Tracker2);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker1);
	    }  

		Position ++;

		if(Position == 2)
		{
		  	Position = 0;
		}
    }

    if(TaylorShapes == 10)
	{ 
    	Set_Val(Stick + 7, (Rad * cos(315 + Angle))  / 100 + Tracker2);
  		Set_Val(Stick + 8, (Rad * sin(180 + Angle))  / 100 + Tracker1);
  	}

  	if(TaylorShapes == 11)
	{
  		Set_Val(Stick + 7, (Rad * cos(135 + Angle))  / 100 + Tracker2);
  		Set_Val(Stick + 8, (Rad * sin(45  + Angle))  / 100 + Tracker1);
    } 

    if(TaylorShapes == 12)
	{
    	Set_Val(Stick + 7, (Rad * cos(45  + Angle))  / 100 + Tracker2);
  		Set_Val(Stick + 8, (Rad * sin(135 + Angle))  / 100 + Tracker1);
  	}

	if(TaylorShapes == 13)
	{
    	Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker2);
  		Set_Val(Stick + 8, (Rad * sin(315 + Angle)) / 100 + Tracker1);
  	}

	if(TaylorShapes == 14)
	{ 
		if(polarAngle < 45)
		{
			Set_Val(Stick + 7, (Rad * cos(45 + Angle))  / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		} 
		else if(polarAngle <  90)
		{ 
		    Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + Tracker1 + Tracker2);
		} 
		else if(polarAngle < 135)
		{
			Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(45 + Angle))  / 100 + Tracker2);
		}  
		else if(polarAngle < 180)
		{
		    Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker1 + Tracker2);
		}
		else if(polarAngle < 225)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(45 + Angle))  / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}  
		else if(polarAngle < 270)
		{ 
		    Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + Tracker1 + Tracker2);
		}
		else if(polarAngle < 315)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(45 + Angle))  / 100 + Tracker2);
		}
		else
		{ 
		  	Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker1 + Tracker2);
		} 
	}

	if(TaylorShapes == 15)
	{
		if(anglePositionV1 == 0)
		{
			Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker1 + Tracker2); 
		}

		if(anglePositionV1 == 1)
		{
		    Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(45  + Angle)) / 100 + Tracker2); 
		}

		if(anglePositionV1 == 2)
		{
		    Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + Tracker1 + Tracker2);
		}

		if(anglePositionV1 == 3)
		{
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}

		if(anglePositionV1 == 4)
		{
		    Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + Tracker1 + Tracker2); 
		}

		if(anglePositionV1 == 5)
		{
		    Set_Val(Stick + 7, (Rad * cos(45  + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}

		if(anglePositionV1 == 6)
		{ 
		   Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + Tracker1 + Tracker2);
		}

		if(anglePositionV1 == 7)
		{ 
			Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(45  + Angle)) / 100 + Tracker2);
	    } 

	    TimerV1++;

		if(TimerV1 >= TaylorAngle)
		{
			anglePositionV1 ++;
			TimerV1 = 0;
		}

		if(anglePositionV1 == 8) 
			anglePositionV1 = 0;
	}

	if(TaylorShapes == 16)
	{
		if(polarAngle < 45)
		{
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + Tracker2); 
		} 
		else if(polarAngle <  90)
		{ 
			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad   	* sin(Angle)) / 100 + Tracker2);
		} 
		else if(polarAngle < 135)
		{ 
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}  
		else if(polarAngle < 180)
		{
		    Set_Val(Stick + 7, (Rad		* cos(Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + Tracker2); 
		}
		else if(polarAngle < 225)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + Tracker2); 
		}  
		else if(polarAngle < 270)
		{ 
		    Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad 	* sin(Angle)) / 100 + Tracker2); 
		}
		else if(polarAngle < 315)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}
		else
		{ 
		  	Set_Val(Stick + 7, (Rad 	*   cos(Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle))   / 100 + Tracker2); 
		}
	}

	if(TaylorShapes == 17)
	{
		if(anglePosition == 0)
		{ 
			Set_Val(Stick + 7, (Rad     * cos(Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + Tracker2);
		} 

		if(anglePosition == 1)
		{  
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + Tracker2); 
		} 

		if(anglePosition == 2)
		{  
			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + Tracker2);
		}  

		if(anglePosition == 3)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2); 
		}

		if(anglePosition == 4)
		{  
		    Set_Val(Stick + 7, (Rad     * cos(Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + Tracker2);
		}  

		if(anglePosition == 5)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + Tracker2); 
		}

		if(anglePosition == 6)
		{ 
		   Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + Tracker1); 
		   Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + Tracker2);
		}

		if(anglePosition == 7)
		{ 
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + Tracker1);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + Tracker2);
	    } 

	    Timer++;

		if(Timer >= TaylorAngle)
		{
			anglePosition ++;
			Timer = 0;
		}

		if(anglePosition == 8) 
			anglePosition = 0;
	}
}

function correctAngle(angle) {
	if(angle < 0)
		angle = 360    + (angle % 360);
		angle = (angle + 90)    % 360;
	return angle;
}

function sin(angle) {
	if(ToggleAAType == 0)
		return PolarArray[correctAngle(angle)];
	return LinearArray[correctAngle(angle)];
}

function cos(angle) {
	if(ToggleAAType == 0)
		return PolarArray[(correctAngle(angle) + 90) % 360];
	return LinearArray[(correctAngle(angle)    + 90) % 360];
}

function Helix() {
	Inc = (I % 100);

	switch(Position)
	{
		case 0 :
		{
			X = Inc;
			Y = 100 - Inc;
		break;
		}

		case 1 :
		{
			X = 100 - Inc;
			Y = - Inc;
		break;
		}

		case 2 :
		{
			X = -Inc;
			Y = -100 + Inc;
		break;
		}

		case 3 :
		{
			X			= -100 + Inc;
			Y			= Inc;
			Position	= 0;
		break;
		}
	}
		Position ++;
}

function Spiral(x_Var) {
	if(!(CycleRefresh++ % 4))
	{
		if(!SpiralPosition1)
		{
			InnerSpiral -= 1;

			if(InnerSpiral < x_Var / 2)
				SpiralPosition1 = TRUE;
		}
		else
		{
		    InnerSpiral += 1;

			if(InnerSpiral > x_Var)
				SpiralPosition1 = FALSE;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;

			if(OuterSpiral < x_Var / 2)
				SpiralPosition2 = TRUE;
		}
		else
		{
			OuterSpiral += 1;

			if(OuterSpiral >  x_Var)
				SpiralPosition2 = FALSE;
		}
			CycleRefresh = 0;
	}
}

function Set_Val(Input, OutPut) {
	set_val(Input, clamp(OutPut * (100 - abs(get_val(Input))) / 100 + get_val(Input), -100, 100));
		return;
}

function Set_Ival(Input, Output) {
	set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
		return;
}

function Cycle(Value, Min, Max) {
	if(Value > Max)
		return Min;
	if(Value < Min)
		return Max;
	return Value;
}

function RegularNumberToString(f_Value, f_Digits, f_Idx) {
	I 			  =     1;
	digitindex_1  = 10000;

	if(f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

	for (charindex_1  = 5; charindex_1 >= 1; charindex_1--)
	{
		if(f_Digits >= charindex_1)
		{
			putc_oled(I, (f_Value / digitindex_1) + 48);
			f_Value %= digitindex_1;
			I++;
			if(charindex_1 == 4)
			{
				putc_oled(I, 44);
				I++;
			}
		}
		digitindex_1 /= 0xA;
	}
		puts_oled(CenterX(I - 1, OLED_FONT_MEDIUM_WIDTH), f_Idx, OLED_FONT_MEDIUM, I - 1, OLED_WHITE);
}

function SmallNumberToString(f_Value, f_Digits, f_Idx2) {
	I 			  =     1;
	digitindex_1  = 10000;

	if(f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
	{
		if(f_Digits >= charindex_1)
		{
			putc_oled(I, (f_Value / digitindex_1) + 48);
			f_Value %= digitindex_1;
			I++;
			if(charindex_1 == 4)
			{
				putc_oled(I, 44);
				I++;
			}
		}
		digitindex_1 /= 0xA;
	}
		puts_oled(CenterX(I - 1, OLED_FONT_SMALL_WIDTH), f_Idx2, OLED_FONT_SMALL, I - 1, OLED_WHITE);
}

function FindDigits(Number) {
    logVal = 0;

    do
    {
        Number /= 10;
        logVal++;
    }
        while (Number);
    return logVal;
}

function BlockAllOutPuts() {
	set_val(PS4_L2      , 0);
	set_val(PS4_R2      , 0);
	set_val(PS4_L1      , 0);
	set_val(PS4_R1      , 0);
	set_val(PS4_L3      , 0);
	set_val(PS4_R3      , 0);
	set_val(PS4_UP      , 0);
	set_val(PS4_DOWN    , 0);
	set_val(PS4_LEFT    , 0);
	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS   , 0);
	set_val(PS4_SQUARE  , 0);
	set_val(PS4_CIRCLE  , 0);
	set_val(PS4_TRIANGLE, 0);
}

function CenterX(f_Chars, f_Font) {
      return (OLED_WIDTH / 2) - ((f_Chars * f_Font) / 2);
}

function CenterY(f_Size) {
    return (OLED_HEIGHT  / 2) - (f_Size / 2);
} 

function GetChars(f_Idx) {
	if(ModsString[f_Idx + 1] != -1)
		return ModsString[f_Idx + 1] - ModsString[f_Idx] - 1;
	return sizeof(ModsString) - ModsString[f_Idx];
}

function AimAssistType_Chars(f_Idx) {
	if(AimTypes[f_Idx + 1] != -1)
		return AimTypes[f_Idx + 1] - AimTypes[f_Idx] - 1;
	return sizeof(AimTypes) - AimTypes[f_Idx];
}

function AimAssistShapeP_Chars(f_Idx) {
	if(AimPatternsPC[f_Idx + 1] != -1)
		return AimPatternsPC[f_Idx + 1] - AimPatternsPC[f_Idx] - 1;
	return sizeof(AimPatternsPC) - AimPatternsPC[f_Idx];
}

function AimAssistShapeL_Chars(f_Idx) {
	if(AimPatternsLC[f_Idx + 1] != -1)
		return AimPatternsLC[f_Idx + 1] - AimPatternsLC[f_Idx] - 1;
	return sizeof(AimPatternsLC) - AimPatternsLC[f_Idx];
}

function EditValues(ValIdx, ValueIndex, ValIncrement, Min, Max) {
	if(Scroll == ValIdx)
	{ 
		if(event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 395))
		{
			ValueIndex = Cycle(ValueIndex + ValIncrement, Min, Max); 
			Display    = TRUE;
		}

		if(event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 395))
		{
			ValueIndex = Cycle(ValueIndex - ValIncrement, Min, Max);
			Display	   = TRUE;
		}
	}
		return ValueIndex;
}

function ToggleSwitch(ModIdx, ModVar, Min, Max) {
	if(Mod == ModIdx)
	{
		if(event_press(PS4_CROSS))
		{ 
			ModVar  = Cycle(ModVar + 1, Min, Max);
			Display = TRUE;
		}

			if(ModVar)
				set_rgb(0, 255, 0);
			else
				set_rgb(255, 0, 0);
	}
		return ModVar;
}


const int8 PolarArray	[]	= { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8 LinearArray	[]	= { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};
const image Frames		[]	= {
							  { 23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 128, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 128, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 128, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 128, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 128, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 100, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 128, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 128, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 128, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 128, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 128, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 128, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 128}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 128, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 128, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 128, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 128}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
const uint8 EditableMods[]  = {
	1, // -  0
	1, // -  1
	1, // -  2
	1, // -  3
	1, // -  4
	0, // -  5
	1, // -  6
	1, // -  7
	0, // -  8
	1, // -  9
	1, // - 10
	0, // - 11
	0, // - 12
	0, // - 13
	0, // - 14
	0, // - 15
	0, // - 16
	0, // - 17
	0, // - 18
	0, // - 19
	1, // - 20
	0, // - 21
	1, // - 22
	0, // - 23
	0, // - 24
	0
};

//--Variables ( Leave Alone )
	int VerticalValue;
	int HorizontalValue;
	int PolarRadius;
	int PolarAngle;
	int PolarRBoost;
	int PolarABoost;
	int DropShotSpeed
	int TaylorRadius;
	int TaylorAngle;
	int StickyAimSize;
	int StickyAimTime;
	int InGame_Menu_Sens;
	int SlideShotWait;
	int HeadShotStrength;
	int HeadShotHoldTime;
	int TrackingSpeed;
	int TrackingSize;

//--Variable Just Leave Alone
	int RY;
	int Tap; 
	int Edit1;
	int EditT;
	int Frame;
	int Random;
	int logVal;
	int R2Block;
	int OneShot;
	int Inverted;
	int polarAngle;
	int CycleRefresh;
	int Recoil, Boost;
	int Droppy_Shotty;
	int Axis, Radius, Speed;
	int Angle, I, Inc, X, Y;
	int anglePosition, Timer;
	int BuildTrack, BuildCount;
	int TimerV1, anglePositionV1;
	int charindex_1, digitindex_1;
	int Tracking, Tracker1, Tracker2;
	int ADS_Grenade_Sens, ADS_Fire_Sens, Sens, Actual_Sens;
	int BoostAR, AxisCY, AxisLY, TimeValue, OutPut, RumValue, RecoilTimer;
	int SpiralPosition1, InnerSpiral, OuterSpiral, SpiralPosition2, Position;
	int X1 = 60, X2 = 68, X3 = 76, X4 = 84, X5 = 92, X6 = 100, X7 = 108, X8 = 116, X9 = 124, X10 = 132, X11 = 140, X12 = 148, X13 = 156, X14 = 164, X15 = 172, X16 = 180, X17 = 188, X18 = 196, X19 = 204, X20 = 212, X21 = 220, X22 = 228, X23 = 236, X24 = 244, X25 = 252, X26 = 260, X27 = 268, X28 = 276;
	int ShapeDirection	= TRUE;
	define MenuClose	=	 0;
	define MainMods		=	 1;
	define EditMods		=	 2;

//--Menu Stuff ( Leave Alone )	
	define NumOfMods =   24;
	int Scroll 		 =    1;
	int Tab 		 =    0;
	int Mod 		 =    1;
	int Display 	 = TRUE;
	int SS 		 	 = TRUE;
	int ZenScreen;
	int CountDown;

//--Toggles
int DoGzV7Polar;
int TaylorShapes; // Shapes
int ToggleAAType; // Curve
int TaylorTracking;
int StickyAimAssist;
int AimAbuse;
int AimSensCorrections;
int AntiRecoilType;
int RapidFire;
int StandardDropShot;
int NikolaiDropShot;
int PumpSMG;
int PumpWall;
int ChickenMode;
int FastReset;
int EditAssist;
int RampFloorWall;
int QuickBox;
int WindoWEditShot;
int BloomReducer;
int SlideShot;
int StrafeShot;
int HeadShotAssist;
int BuildTracker;
int RumbleBlock;

const string ModsString[] = {
	"Hold L2 + OPTIONS",	//  0
	"DoGz Polar",			//  1 -
	"Taylor Polar",			//  2
	"Taylor Tracking",		//  3
	"Sticky Aim",			//  4
	"Aim Abuse",			//  5
	"Aim Corrections",		//  6
	"Anti Recoil",			//  7
	"Rapid Fire",			//  8
	"Standard Dropshot",	//  9
	"Niko's Dropshot",		// 10
	"Pump SMG",				// 11
	"Pump Wall",			// 12
	"Chicken Mode",			// 13
	"Fast Reset",			// 14
	"Edit Assist",			// 15
	"Ramp Floor Wall",		// 16
	"Safety Box",			// 17
	"Window Edit Shot",		// 18
	"Anti Bloom Reducer",	// 19
	"Slide Shot",			// 20
	"Strafe Mod",			// 21
	"Head Shot Assist",		// 22
	"Build Tracker",		// 23
	"Block Rumble",			// 24 -
	""
};

//--Taylor Shapes & Types
const string AimTypes[]			= { "< Polar Curve >","< Linear Curve >", "" }; 
const string AimPatternsPC[]	= { "< Select Shape >","Circle", "Tall Oval", "Wide Oval", "Vortex Oval", "Spiral", "Helix", "KITT", "Horizontal Flare", "Tartan Army", "Jupiter", "Bishop", "Blade", "Oscilirate", "Asterisk", "Asterisk V2", "Atomic", "Rose", "" };
const string AimPatternsLC[]	= { "< Select Shape >","Diamond", "Tall Diamond", "Wide Diamond", "Spiral Prism", "Spiral Diamond", "Helix Diamond", "KITT", "Horizontal Flare ", "Tartan Army", "Jupiter", "Bishop", "Blade", "Oscilirate", "Asterisk", "Asterisk V2", "Atomic", "Rose", "" };

//--Anti Recoil Types
const string OFF 	    	 	= "Choose Type";
const string BOOSTRECOIL		= "Boost Recoil";
const string LEGACYAR			= "Legacy Recoil";
const string RUMBLEAR			= "Rumble Recoil";
const string TIMEDAR			= "Timed Recoil";

function TexT1() {
	putc_oled(1, ASCII_UPPER_F);
	puts_oled(X1, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X3, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_B);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_Y);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_UNDERSCORE);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X17, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_K);
	puts_oled(X18, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X19, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_L);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_A);
	puts_oled(X21, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X22, 2, 0, 1, 1);
	
	FaLL();
}

function TexT2() {
	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X1, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X3, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_X);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_G);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_G);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_L);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X17, 2, 0, 1, 1);

	putc_oled(1, ASCII_SPACE);
	puts_oled(X18, 2, 0, 1, 1);
	
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X21, 2, 0, 1, 1);
	
	putc_oled(1, ASCII_SPACE);
	puts_oled(X22, 2, 0, 1, 1);
	
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X23, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_D);
	puts_oled(X24, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X25, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X26, 2, 0, 1, 1);

	rect_oled(X19 - 4, 2,  9, 9, 0, 1);
	rect_oled(X19 - 3, 2 + 1, 7, 7, 0, 0);
	rect_oled(X19 + 5, 2,  1, 9, 1, 0);

	FaLL();
}

function FaLL() {
	X1--;X2--;X3--;X4--;X5--;X6--;X7--;X8--;X9--;X10--;
	X11--;X12--;X13--;X14--;X15--;X16--;X17--;X18--;X19--;X20--;
	X21--;X22--;X23--;X24--;X25--;X26--;X27--;X28--;
}

function ScreenSaver() {
	line_oled(0, 13, 127, 13, 1, 1);
	rect_oled(0,  0,  15, 14, 1, 0);
	rect_oled(0,  0,  15, 14, 0, 1);

	if(CountDown < 1000)
	{
    	putc_oled(1, ASCII_DIGIT9);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 1000)
	{
    	putc_oled(1, ASCII_DIGIT8);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 2000)
	{
    	putc_oled(1, ASCII_DIGIT7);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 3000)
	{
    	putc_oled(1, ASCII_DIGIT6);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 4000)
	{
    	putc_oled(1, ASCII_DIGIT5);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 5000)
	{
    	putc_oled(1, ASCII_DIGIT4);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 6000)
	{
    	putc_oled(1, ASCII_DIGIT3);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 7000)
	{
    	putc_oled(1, ASCII_DIGIT2);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown >= 8000)
	{
    	putc_oled(1, ASCII_DIGIT1);
		puts_oled(4, 3, 0, 1, 1);
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | | S | S | _ | N | i | k | o | l | a | i | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/