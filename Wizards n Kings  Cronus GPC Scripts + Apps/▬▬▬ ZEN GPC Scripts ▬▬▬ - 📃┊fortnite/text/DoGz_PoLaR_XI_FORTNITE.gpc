/*██████╗  ██████╗  ██████╗ ███████╗    ██████╗  ██████╗ ██╗      █████╗ ██████╗      █████╗ ███████╗███████╗██╗███████╗████████╗  
  ██╔══██╗██╔═══██╗██╔════╝ ╚══███╔╝    ██╔══██╗██╔═══██╗██║     ██╔══██╗██╔══██╗    ██╔══██╗██╔════╝██╔════╝██║██╔════╝╚══██╔══╝  
  ██║  ██║██║   ██║██║  ███╗  ███╔╝     ██████╔╝██║   ██║██║     ███████║██████╔╝    ███████║███████╗███████╗██║███████╗   ██║     
  ██║  ██║██║   ██║██║   ██║ ███╔╝      ██╔═══╝ ██║   ██║██║     ██╔══██║██╔══██╗    ██╔══██║╚════██║╚════██║██║╚════██║   ██║     
  ██████╔╝╚██████╔╝╚██████╔╝███████╗    ██║     ╚██████╔╝███████╗██║  ██║██║  ██║    ██║  ██║███████║███████║██║███████║   ██║     
  ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝    ╚═╝      ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝╚══════╝   ╚═╝    
                           ██╗   ██╗███████╗██████╗ ███████╗██╗ ██████╗ ███╗   ██╗    ██╗  ██╗██╗
                           ██║   ██║██╔════╝██╔══██╗██╔════╝██║██╔═══██╗████╗  ██║    ╚██╗██╔╝██║
                           ██║   ██║█████╗  ██████╔╝███████╗██║██║   ██║██╔██╗ ██║     ╚███╔╝ ██║
                           ╚██╗ ██╔╝██╔══╝  ██╔══██╗╚════██║██║██║   ██║██║╚██╗██║     ██╔██╗ ██║
                            ╚████╔╝ ███████╗██║  ██║███████║██║╚██████╔╝██║ ╚████║    ██╔╝ ██╗██║
                             ╚═══╝  ╚══════╝╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝                                                                                                                                                          
                               ███████╗ ██████╗ ██████╗ ████████╗███╗   ██╗██╗████████╗███████╗
                               ██╔════╝██╔═══██╗██╔══██╗╚══██╔══╝████╗  ██║██║╚══██╔══╝██╔════╝
                               █████╗  ██║   ██║██████╔╝   ██║   ██╔██╗ ██║██║   ██║   █████╗  
                               ██╔══╝  ██║   ██║██╔══██╗   ██║   ██║╚██╗██║██║   ██║   ██╔══╝  
                               ██║     ╚██████╔╝██║  ██║   ██║   ██║ ╚████║██║   ██║   ███████╗
                               ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═══╝╚═╝   ╚═╝   ╚══════╝
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

******    MASSIVE SHOUTOUT TO TAYLORDRIFT n CEORIN n C14H3R TEAM For All Their Help Recently LEGENDS !!!!!!!!!!!!  ******** 
******    MASSIVE SHOUTOUT TO ALL THE STAFF IN THE NEW DISCORD Wizard's n King's Scripts + Apps !!!!!!!!!!!!!!!!!  ********

   ¦¦¦¦¦ AIM ASSIST  ¦¦¦¦¦

¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ 
¦¦¦								---->> Aim Assist Boost ON FIRE Options <<----                                     				   ¦¦¦
¦¦¦		OPTION 1.. Power Will Equal = ( Power + BoostPower ).. Speed Will Equal = ( Speed + BoostSpeed )	                       ¦¦¦
¦¦¦                                                                                                                                ¦¦¦
¦¦¦		OPTION 2.. Power Will Equal = ( Power - BoostPower ).. Speed Will Equal = ( Speed - BoostSpeed )                           ¦¦¦
¦¦¦                                                                                                                                ¦¦¦
¦¦¦		OPTION 3.. Power + Speed Will Go Into Progression Mode ( OPTION 4 + 5 Methods Will Be Applied )                            ¦¦¦
¦¦¦	 	   			                                 																			   ¦¦¦
¦¦¦		OPTION 4.. Power Will Increase By 1 Until Value Equals = ( Power + Boost ) -->                                             ¦¦¦
¦¦¦		OPTION 4.. Power Will Then Decrease By 1 Until Value Equals = ( Power - Boost ) <--                                        ¦¦¦
¦¦¦					( Speed Boost Will Be Applied But Remain Static ( Speed + BoostSpeed ))                                        ¦¦¦
¦¦¦                                                                                                                                ¦¦¦
¦¦¦		OPTION 5.. Speed Will Increase By 1 Until Value Equals = ( Speed + BoostSpeed ) -->                                        ¦¦¦
¦¦¦		OPTION 5.. Power Will Then Decrease By 1 Until Value Equals = ( Speed - BoostSpeed ) <--                                   ¦¦¦
¦¦¦					( Power Boost Will Be Applied But Remain Static( Power + BoostPower ))                                         ¦¦¦
¦¦¦                                                                                                                                ¦¦¦
¦¦¦		OPTION 6.. Power Will Remain At Base Power + Speed.. Power Will Equal = ( Power ).. Speed Will Equal = ( Speed )	       ¦¦¦
¦¦¦                                                                                                                                ¦¦¦
¦¦¦		OPTION 7.. All Assist Methods OFF                                                                                          ¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

	¦¦¦¦ MOD MENU SYSTEM ¦¦¦¦

* Enter Menu   = L2/LT + OPTIONS/MENU
* Switch Menu  = CROSS/A
* Exit Menu    = TRIANGLE/Y

* Next Mod     = RIGHT
* Previous Mod = LEFT

* Adjust +     = UP
* Adjust -     = DOWN
* Toggle ON    = UP
* Toggle OFF   = DOWN
  
  	¦¦¦¦ SHOW CURRENT SLOT IN USE ¦¦¦¦
  
* Show Slot    = R3/RS + LEFT

	¦¦¦¦ KILL SWITCH TOGGLES ¦¦¦¦

* Kill Switch  = L2/LT + SHARE

	¦¦¦¦ SHOOTING/FIRE MOD TOGGLES ¦¦¦¦

* Rapid Fire   = L2/LT + UP   
* Drop Shot    = L2/LT + LEFT
* Jump Shot    = L2/LT + DOWN

  ¦¦¦¦ MOD TRIGGERS ¦¦¦¦
  
	Combat Mods
* Rapid Fire   = Hold Fire
* Crouch Shot  = Hold ADS + Fire
* Jump Shot    = Tap Fire  ( L2/LT BLOCKS MOD )
* Pump Wall    = Hold L2/LT + Tap R1/RB

	Build Mods ( If Build Tracker Off ( These Mods Will Be Always Active ))
* Ramp Rush = When Ramping Double Tap [Ramp] L2/LT To Place A Roof [Use Edit Assist Button To Fly Through It]
* Floor n Roof = Double Tap [Floor] R1/RB To Place Both Pieces (Continue To Hold To Rapidly Place Both)
* Ramp Floor Wall = Tap Your Chosen Button [RIGHT D-PAD] By Default (This Is Not Blocked So It Must Be Unused In Build Mode)

* Instant Pickaxe = Tap Pickaxe (TRIANGLE/Y) When You Release Fire You Will Swap To Your Weapon

  ¦¦¦¦ Edit Setup + Guide  ¦¦¦¦

**** EDIT ON RELEASE MUST BE ON IN GAME SETTINGS FOR ALL EDIT METHODS TO FUNCTION CORRECTLY !!!!!!!!!!!!! ****

* Edit Assist = (EditAssist Button )Hold To Auto Hold Select And Release To Confirm The Edit ( This Button In Game Must Not Have Hold Time )

* Fast Reset = Tap Your Chosen Button ([L2/LT] ADS BLOCKS MOD) 
		(NOTE*** EditAssist Must Be Set To Edit Only In Game For This To Function Correct Even When Not Using Edit Assist)

* Instant Edit + Reset = Match Your In Game Setup 
	(Example)
	
	* You Use Circle/B In Game To Edit And Enter/Exit Build Mode
	* Set = EditHold = On;
	* Set = EditHoldTime = Your In Game Time (100-250)
	
**** Ensure Your Edit Button is Set In The Buttons Section To Match I use All These Methods At The Same Time So Its set This Way
	_______________________________________________________________________________________________________________________________
	define Edit = PS4_CIRCLE; (Edit + Build With Hold Time)
	define EditAssist = PS4_L3; (I use Edit Assist With L3/LS And Its Also Used For Fast Reset)
	define FastReset = PS4_TOUCH;( This Is One Button Reset (Closest To Scroll Wheel Reset)(Any Button Your Like)(ADS BLOCKS MOD)
	
	define Select = PS4_R2; (Match Your In Game Button)
	define Confirm = PS4_CIRCLE; (Match Your In Game Button)
	define Reset = PS4_R3; (Match Your In Game Button)
	
	int EditHoldTime = 130; (This Is my In Game Hold To Edit Time)
	define EditHold = On; (This Is If You Use Edit/Build On One Button (Default Circle) (Switch Off For Normal Edit Without Hold)
    --------------------------------------------------------------------------------------------------------------------------------
        
    ¦¦¦¦ Build Tracking Mode ¦¦¦¦
    
* Ensure Your Build/Pickaxe/Wall/Ramp/Floor/Roof Buttons Match In game And In The Script
* Enter Build Mode All Conflicting Mods Will Be Disabled!
* Exit Build Mode To Re-Enable Mods
* Build Sync Time Will Auto De-Isolate Build Mode After Time Set In The Script (4 Seconds By Default, If A Build Piece Has Not Been Pressed It Resets)
* Manual Resync = Pickaxe (TRIANGLE/Y)

* PS On Xbox -- PLAYSTATION CONTROLLER WILL SWAP TOUCHPAD AND SHARE WHEN ON PC Or XBOX
* Block Rumble -- Block The Controller Vibrating From In Game Signals
* LED Rainbow -- Zen Eyes Will Cycle Through All Colours

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const uint8 FontSize [][]  = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits []  = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","DoGz PoLaR Ver XI","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Boost","Aim Assist"};
const string ModToggle []  = {"","DoGz PoLaR AA XI","  Drop Shot Mod","  Jump Shot Mod"," Rapid Fire Mod","PumpShot Wall Mod"," Instant Pickaxe","Instant EditReset","Quick Edit Assist","Instant FastReset","BuildMode Monitor","Ramp n Roof Rush","InstaRoof n Floor","Ramp Floor n Roof","LED Rainbow Flow","PS[DS4]On PC/XBOX"};
const string ModValue []   = {"","PolarRadius/Power","BoostRadius/Power","Polar Angle/Speed","Boost Angle/Speed","Deadzone / Switch","Crouch Shot Wait"," Jump Shot Delay"," Rapid Fire Time","  Pump Wall Wait","InstaPickaxe Hold"," Edit Hold Time","Edit Assist Delay","BuildTrackSynTime","LED FlowBrightness"};
const string ModAimAssist [] = {""," Incline"," Decline","Prog Both","Prog Power","Prog Speed","Methods Off","   Off"};
const int16 ModDigitMin [] = { 0 , 1  , 1  , 1  , 1  , 1  , 30  , 20  , 30  , 30  , 20  , 100 , 20  , 1500  , 1 };
const int16 ModDigitMax [] = { 0 , 40 , 40 , 60 , 60 , 30 , 500 , 200 , 100 , 200 , 100 , 250 , 100 , 20000 , 50};                     
const int16 ModIncrement[] = { 0 , 1  , 1  , 1  , 1  , 1  , 10  , 10  , 10  , 10  , 10  , 1   , 10  , 100   , 1 };
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const string DropShotL   = "Drop Shot Mod";                                
const string RapidFireL  = "Rapid Fire Mod";                        
const string JumpShotL   = "Jump Shot Mod";
const string KillSwitchL = "KillSwitch Mod";
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_TRIANGLE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_R3;
define Edit     = PS4_CIRCLE;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;
define Build    = PS4_CIRCLE;
define Switch   = PS4_LEFT;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Roof     = PS4_L1;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define PY       = POLAR_RY;
define PX       = POLAR_RX;
define PS       = POLAR_RS;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Buttons                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define EditAssist = PS4_L3;     // EDIT ASSIST + FAST EDIT BUTTON
define FastReset  = PS4_TOUCH;  // FAST RESET BUTTON
define EditHold   = On;         // USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP )
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define PumpWallHold  = PS4_L2;  // PUMP WALL HOLD
define PumpWallPress = PS4_R1;  // PUMP WALL PRESS

define RampFloorWallPress = PS4_RIGHT;  // Ramp Floor Wall Press ( Not Blocked )
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RapidFireHold   = PS4_L2;	 // RAPID FIRE HOLD TOGGLE
define RapidFirePress  = PS4_UP;	 // RAPID FIRE PRESS TOGGLE

define DropShotHold    = PS4_L2;     // DROP SHOT HOLD TOGGLE
define DropShotPress   = PS4_LEFT;   // DROP SHOT PRESS TOGGLE

define JumpShotHold    = PS4_L2;     // JUMP SHOT HOLD TOGGLE
define JumpShotPress   = PS4_DOWN;   // JUMP SHOT PRESS TOGGLE

define KillSwitchHold  = PS4_L2;     // KILL SWITCH HOLD TOGGLE
define KillSwitchPress = PS4_SHARE;  // KILL SWITCH PRESS TOGGLE
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;

define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 15;
define IndexMinValues   = 1;
define IndexMaxValues   = 14;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

define BoostIncline   = 1;
define BoostDecline   = 2;
define BoostProgBoth  = 3;
define BoostProgPower = 4;
define BoostProgSpeed = 5;
define AAWithBoostOff = 6;

int Saver,Ms,Sec,Min,ScreenTime,TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2;
int ToggleT,ToggleTime,ToggleName,Modled,LedDec,Rgb,LedInc,Colour[3];
int Step,Output,AxisXY,Angle,Radius,sBoost,rBoost,DirectionP,DirectionS,VibA,VibB;
int Edit1,Edit2,EditT,BuildTrack,BuildCount,Axe,KillSwitch,RoofnFloor;
define ScreenSaver = On; // Screen Saver (Pipeflow) On/Off (Screen Will Be Blank (Black) If Off
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int Power          = 10;    // ADS Base Power ( And Also Fire If All Boost Methods = Off )
int BoostPower     =  5;    // Fire Boost Power ( Added To Base Power )
int Speed          =  9; 	// ADS Base Speed ( And Also Fire If All Boost Methods = Off )  ( Value 18 = 20 Steps In Rotation )
int BoostSpeed     =  9;	// Fire Boost Speed ( Added To Base Speed )                     ( Value 9  = 40 Steps In Rotation )
int Deadzone       =  8;	// Value Which Aim Assist Changes States From Zen Polar To DoGz Polar
int CrouchShotWait = 110;   // Crouch Shot Wait Time Before Next Jump Ms
int JumpShotWait   = 20;    // Jump Shot Dleay Time Ms (Before You Jump After Firing)
int RapidFireTime  = 30;    // Rapid Fire Hold + Wait Time Ms
int PumpWallHTime  = 50;	// Pump Wall Press Button Time (Combo)
int PickaxeHold    = 30;	// Instant Pickaxe Press Time
int EditHoldTime   = 130;	// Time When Use Hold to Edit In game Setting To Be Matched
int EditDelay      = 30;    // Edit Assist Hold Delay On Select
int BuildSyncTime  = 5000;	// Build Sync Time (The Time Before Build Sync Auto Resets (TURNS OFF WHEN A BUILD PIECE NOT PRESSED))
int LedBrightness  = 10;	// Brightness Of The Zen Eye


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
///////////////// (On or Off)  \\\\\\\\\\\\\\\\\\\\
int ModSwitch;
int BoostStyle = BoostIncline;//( [1]BoostIncline or [2]BoostDecline or [3]BoostProgBoth or [4]BoostProgPower or [5]BoostProgSpeed [6]AAWithBoostOff)
int DropShot        =  On;  // Crouch Shot
int JumpShot        =  On;  // Jump Shot	       
int RapidFire       =  On;  // Rapid Fire      
int PumpWall        =  On;  // Pump Wall 
int InstantPickaxe  =  On;  // Instant Pickaxe
int InstaEditReset  =  On;  // Normal Instant Edit/Reset
int QuickEditAssist =  On;  // Edit Assist
int InstaFastReset  =  On;  // Fast Reset
int BuildTracker    =  On;  // Build Tracking Mode
int RampRoofRush    =  On;  // Ramp Roof Rush       ( Active When In Build Mode )
int InstaRoofnFloor =  On;  // Instant Roof Floor   ( Active When In Build Mode )
int RampFloorWall   =  On;  // Ramp Floor Wall Rush ( Active When In Build Mode )
int LEDRainbowFlow  =  On;  // Led Rainbow (ZEN Eyes)
int PSonXBOX        =  On;  // PS Controller On PC/XBOX

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Default State                   ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//-- ADJUST HERE IF YOU WANT THE MOD ACTIVE WHEN THE SLOT FIRST LOADS ( On or Off ) (MASTER TOGGLE ABOVE MUST BE ON)
int RapidFireMod =  Off; // Rapid Fire 
int DropShotMod  =  Off; // Crouch Shot     
int JumpShotMod  =  Off; // Jump Shot
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {

	//LoadSettings();    
    combo_run(Boot);
    LedInc = 1
    Colour = 150;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        
        swap(PS4_TOUCH,PS4_SHARE);
    }	
	
	if (QuickEditAssist) {
	 	
	 	if (!get_ival(Ads) && get_ival(EditAssist)) {
			
			EditAssist();
			Edit1 = On;
		}

		if (event_release(EditAssist)) {
				
			EditT = Off;
			Edit1 = Off;
		}
	}

    if (InstaFastReset) {
    	
    	if (!get_ival(Ads) && event_press(FastReset)) { 
       
    		Shunt = FastReset;
    		combo_run(FastReset);
    	}
    }

    if (InstaEditReset) {
        
        if (EditHold) {
        	
        	if (get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
            	Edit1 = On;
            	Edit2 = On;
        	}
        }
        	
        else if (event_press(Edit)) {
        			
        		Edit1 = On;
            	Edit2 = On;
        }
		
		if (Edit2) {
            
            if (event_release(Select)) {  
                
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
            }
		}
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
            
            combo_run(InstantReset);
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
        }

        if (event_press(Pickaxe) || event_press(Ads)) {
            
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
        }
    }
	
	if (!MainMenu) {
	
		if (get_ival(KillSwitchHold) && event_press(KillSwitchPress)) {
        	
        	Shunt = KillSwitchPress;
        	KillSwitch = !KillSwitch;
        	ToggleName = On;
        	Toggle(KillSwitch,KillSwitchL[0]);
    	}
	}
	
	if (!KillSwitch) {
	
	    if (BuildTracker && !MainMenu) {
        
        	if (event_press(Build)) {
            	
            	BuildTrack = !BuildTrack;
        	}
    
        	if (BuildTrack) {
            	
            	BuildCount += get_rtime();
            
            	if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                	
                	BuildTrack = Off;
                	BuildCount = Off;
            	}
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(RampFloorWallPress)) { 
                    
                    BuildCount = Off;
        		}
        	}
    	}
    
		if (!MainMenu) {
	
			if (RapidFire) {
		   		
		   		if (get_ival(RapidFireHold) && event_press(RapidFirePress)) {
		       		
		       		Shunt = RapidFirePress;
		       		RapidFireMod = !RapidFireMod;
		       		ToggleName = On;						
		       		Toggle(RapidFireMod,RapidFireL[0]);     
		   		}                                           
			}
			
			if (DropShot) {
			
				if (get_ival(DropShotHold) && event_press(DropShotPress)) {
		       		
		       		Shunt = DropShotPress;
		       		DropShotMod = !DropShotMod;
		       		ToggleName = On;
		       		Toggle(DropShotMod,DropShotL[0]);
				}
			}
			
		   	if (JumpShot) {
		   	
		   		if (get_ival(JumpShotHold) && event_press(JumpShotPress)) {
	        
	        		Shunt = JumpShotPress;
	        		JumpShotMod = !JumpShotMod;
	        		ToggleName = On;
	        		Toggle(JumpShotMod,JumpShotL[0]);
	   			}
	   		}
	   	}
	
	    if (!BuildTrack && !Edit1 && !Edit2) {	
        	
	        if (BoostStyle <= 6) {
	        
	            if (get_ival(Ads) || get_ival(Fire)) {		
	            	
	            	AxisXY = isqrt(abs(get_ival(AimX)) * abs(get_ival(AimX)) + abs(get_ival(AimY)) * abs(get_ival(AimY)));
	            	
	            	Radius = (Power + rBoost);
	            	Angle = Step;
	                Step = (Step + Speed + sBoost);
	                
	                if (get_ival(Fire) && BoostStyle != 6) {
	                
	                	if (BoostStyle == BoostIncline) {
	                		
	                		rBoost = BoostPower;
	                		sBoost = BoostSpeed;
	                	}
	                		
	                	else if (BoostStyle == BoostDecline) {
	                		
	                		if (BoostSpeed == Speed) {	
	                			
	                			BoostSpeed = Speed / 2;
	                		}
	                		
	                		if (BoostPower == Power) {	
	                			
	                			BoostPower = Power / 2;
	                		}
	                		
	                		rBoost = inv(BoostPower);
	                		sBoost = inv(BoostSpeed);
	                		
	                	}	        		
	                	
	                	else if (BoostStyle >= 3) {
	                		
	                		if (event_press(Fire)) {
	                		
	                			rBoost = BoostPower;
	                			sBoost = BoostSpeed;
	                			DirectionP = On;
	                			DirectionS = On;
	                		}
	                			
	                		if (BoostStyle == 3 || BoostStyle == 4) {
	                			
	                			if (DirectionP) {
	                			    
	                			    if (rBoost < (Power + BoostPower)) {
	                			    	
	                			    	rBoost++;
	                			    }
	                			    
	                			    if (rBoost >= (Power + BoostPower)) {
	                			    
	                			        DirectionP = Off;
	                			    }
	                			}
	                			
	                			if (!DirectionP) {
	                			
	                			    if (rBoost > (Power - BoostPower)) {
	                			    	
	                			    	rBoost--;
	                			    }	
	                			    
	                			    if (rBoost <= (Power - BoostPower)) {
	                			    
	                			        DirectionP = On;
	                			    }
	                			}
	                		}
	                		
	                		if (BoostStyle == 3 || BoostStyle == 5) {
	                		
	                			if (DirectionS) {
	                			    
	                			    if (sBoost < (Speed + BoostSpeed)) {
	                			    	
	                			    	sBoost++;
	                			    }
	                			    
	                			    if (sBoost >= (Speed + BoostSpeed)) {
	                			    
	                			        DirectionS = Off;
	                			    }
	                			}
	                		
	                			if (!DirectionS) {
	                			
	                				if (sBoost > (Speed - BoostSpeed)) {
	                				
	                					sBoost--;
	                				}	
	                			
	                				if (sBoost <= (Speed - BoostSpeed)) {
	                			
	                			    	DirectionS = On;
	                				}
	                			}
	                		}
	                	}
	                }
	                	else {
	                
	                		rBoost = Off;
	                		sBoost = Off;
	                	}
	                	
	                if (Step < 0) Step += 360;
	                	
	                	Step = Step % 360;
	                	
	                if (AxisXY < Deadzone) {
            	    	
            	    	set_polar(PS,Step,(Radius + AxisXY) * 327);
	        	    }
   	        	    
   	        	    if (AxisXY >= Deadzone) {
   	        	    
	                	DoGzPolar(Angle,Radius);
	        	    }
	        	}
	        }
	    	
            if (InstantPickaxe && !MainMenu) {
                
                if (event_press(Pickaxe)) {
                    
                    Axe = On;
            	}
            	
                if (Axe) {
                    
                    if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                        
                        Axe = Off;
                    }
                    
                    if (event_release(Fire)) {
                        
                        combo_run(Pickaxe);
                	}
                }
            }
	    
	        if (DropShot && DropShotMod) {
	        
	        	if (get_ival(Ads) && get_ival(Fire)) {
                    
                    combo_run(DropShot);
                }    
                    else {
                        
                        combo_stop(DropShot);
                    }
            }
            
            if (JumpShot && JumpShotMod) {
            
            	if (!get_ival(Ads) && event_press(Fire)) {
                    
                    combo_run(JumpShot);
                }    
            }
            
	    	if (RapidFire && RapidFireMod) {
                    
                if (get_ival(Fire)) {
                
                    combo_run(RapidFire);
                } 
                	else {
                	
                		combo_stop(RapidFire);
                	}
	    	}
                
	    	if (PumpWall) {
	    	
	    		if (get_ival(PumpWallHold) && event_press(PumpWallPress)) {
                
                	Shunt = PumpWallPress;
                	combo_run(PumpWall);
            	}
	        }
	    }								
	}                                   
										
	if (BuildTrack || !BuildTracker) {
            
    	if (RampRoofRush) {
    
    		if (event_press(Ramp) && get_brtime(Ramp) < 300) {
    			
    			combo_run(Roof);
        	}
        }
        
        if (InstaRoofnFloor) {
        
        	if (event_press(Floor) && get_brtime(Floor) < 200) {
        	
        		combo_run(Roof);
        		RoofnFloor = On;
        	}	
        	
        	if (RoofnFloor) {
        	
        		if (get_ival(Floor)) {
        		
        			combo_run(RoofnFloor);
        		}
        			else if (event_release(Floor)) {
        		
        				combo_stop(RoofnFloor);
        				RoofnFloor = Off;
        			}
        	}
        }
        
        if (RampFloorWall) {
			
			if (event_press(RampFloorWallPress)) {	
				
				combo_run(RampFloorWall);
			}
		}
	}	
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		Shunt = MenuEnterPress;
		MenuToggle(On,On,On,On,Off);
		VibB = On;
		combo_run(Rumble);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
				VibB = On;
				combo_run(Rumble);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModIncrement[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch && ModIndex > 1) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
		
		else if (MenuSwitch && ModIndex == 1){
			
				ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],1,7,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}		
				
			BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        
        ScreenTime (); 
     	Saver (); 
	} 

    if (!MainMenu && LEDRainbowFlow) { 
        
        LedFlow();
    } 

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        
        Shunt = FindSlotPress;
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime) {
        
        TimeToggle();
    }
	
	if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        }
            else {
                
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(CrouchShotWait);
}

combo JumpShot {
	
	wait(JumpShotWait);
    set_val(Jump,100);
    wait(50);
    set_val(Jump,0);
    wait(20);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireTime);
    set_val(Fire,0);
    wait(RapidFireTime);
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold);
    Axe = Off;
}

combo PumpWall {

    set_val(Fire,100);
    wait(PumpWallHTime);
 	set_val(Build,100);
    wait(PumpWallHTime);
    set_val(Wall,100);
    wait(PumpWallHTime);
    set_val(Build,100);
    wait(50);
    wait(30);
}

combo Roof {    
    
    set_val(Roof,100);
    wait(30);
    wait(20);
    set_val(Roof,100);
    wait(30);
    wait(20);
}

combo RoofnFloor {    
    
	wait(20);
	set_val(Roof,100);
	wait(50);
	set_val(Floor,0);
}

combo RampFloorWall {																													
	
	set_val(Ramp,100);
	wait(60);
	wait(30);
	set_val(Floor,100);
	wait(60);
	wait(30);
	set_val(Wall,100);
	wait(60);
	wait(40);
}

combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
        else if (VibB)
            
            set_rumble(RUMBLE_B,15);
    
    	wait(250);
    	VibA = Off;
    	VibB = Off;
    	reset_rumble();
}

combo Boot {
        
        wait(Slot);
    
    if (Slot == 20000)    
        
        cls_oled(0);
        
        if (Slot) {
            
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    }    
        else {
            
            set_rgb(255,0,0);
            set_rumble(RUMBLE_B,15);
        }
     	
     	wait(150);
    	set_rgb(0,0,0);
    	wait(150);
    	reset_rumble();    
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
            set_rgb(255,0,0);
	
		wait(150);
		reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function EditAssist () {

    EditT += get_rtime();
        
        if (get_ival(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
                  Press(Select);
        }
}

function Press (Button) {

    if (get_ival(Button))
        
        return;
            
            set_val(Button,100);
}

function DoGzGetPolar (Current,Received) { 		
	
	Output = Current / 10 + Received / 10;
	
		if(Output <= -3276) return -32768; 
		if(Output >=  3276) return  32767; 

	return Current + Received; 
} 

function DoGzPolar (Rotation,Radial) {   	
  	
  	set_polar(PS,Rotation,Radial * 327);
  	set_val(PX,DoGzGetPolar(get_val(PX),get_ival(PX)));
	set_val(PY,DoGzGetPolar(get_val(PY),get_ival(PY)));	
} 

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
    
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
	    combo_run(VibrateBlink);
    
    if (ToggleName) {
    	
    	Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(15,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        }
            else {
                
                printf(36,38,0,1,MiscString[7]);
            }
                ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
        if (!MainMenu && ToggleT >= 5000) {
            cls_oled(0);
            ToggleTime = Off;
            ToggleT = 0;
    }
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch && ModIndex > 1) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			}
				
			else if (MenuSwitch && ModIndex == 1) {
				
			if (ModVal <=6)	{
			
				printf(59,24,0,1,MiscString[9]);
			}
				else {
				
				printf(45,24,0,1,MiscString[10]);
				
				}
				
				printf(45,34,0,1,ModAimAssist[ModVal]); 
			}
			
			Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;
		    
            if (ModVal >= ModValMax){ 
                return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;
				
				if (ModVal <= ModValMin){
					return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 

function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };
   