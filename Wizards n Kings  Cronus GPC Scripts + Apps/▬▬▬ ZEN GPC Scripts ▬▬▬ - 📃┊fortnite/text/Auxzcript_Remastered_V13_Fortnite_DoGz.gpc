/*
     __    __  __  _  _  ____  ___  ____  ____  ____  ____    ____  ____  __  __    __    ___  ____  ____  ____  ____  ____  
    /__\  (  )(  )( \/ )(_   )/ __)(  _ \(_  _)(  _ \(_  _)  (  _ \( ___)(  \/  )  /__\  / __)(_  _)( ___)(  _ \( ___)(  _ \ 
   /(__)\  )(__)(  )  (  / /_( (__  )   / _)(_  )___/  )(     )   / )__)  )    (  /(__)\ \__ \  )(   )__)  )   / )__)  )(_) )
  (__)(__)(______)(_/\_)(____)\___)(_)\_)(____)(__)   (__)   (_)\_)(____)(_/\/\_)(__)(__)(___/ (__) (____)(_)\_)(____)(____/ 
  
  
‚ñõ‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù‚ñù ‚ñú
‚ñù You are currently using [VERSION 13] of Auxzcript Remastered. 
‚ñô ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ñü*/

//-- ùêíùêûùêúùê≠ùê¢ùê®ùêß ùüè - ùêàùêçùêàùêìùêàùêÄùêãùêàùêíùêÄùêìùêàùêéùêçùêí
define On  = TRUE;
define Off = FALSE;
//Aim Assist V3 (Linear + Exponential) //Set Look Stick Deadzone to 15
int AimAssistX = 14;
int AimAssistXNeg = -14;
int AimAssist_SnapStickV104 = 20; 
int NegativeAimAssist_SnapStickV104 = -20;
int AimAssist_Hipfire = 18; 
int NegativeAimAssist_Hipfire = -18;
int Delay = 17; 
int Release = 21; // -> This should always be +1 more than Aim Assist value: AimAssist_SnapStickV104 and NegativeAimAssist_SnapStickV104

//Anti Recoil V2
int Anti_Recoil;
define ADSPos = On;
define AntiRecoil = 9;

//Ghost Peek V2
int GhostPeek = Off;
int GPCooldown = 25;

define GhostPeekToggleHold  = PS4_L2;	// Ghost Peek HOLD TOGGLE     	** L2/LT + LEFT ** <---- TOGGLE ON Or OFF 
define GhostPeekTogglePress = PS4_LEFT; // Ghost Peek PRESS TOGGLE

define GhostPeekHold  = PS4_L2;         // Ghost Peek Hold Activator	** L2/LT + DOWN ** <---- RUN MOD 
define GhostPeekPress = PS4_DOWN;		// Ghost Peek Press Activator

//Dropshot V2
int Dropshot = Off;
int Dropshot_Crouching = 95;
int Dropshot_Standing = 45;
define DropShotHold  = PS4_L2;          // DROP SHOT HOLD TOGGLE		** L2/LT + RIGHT ** <---- TOGGLE ON Or OFF 
define DropShotPress = PS4_RIGHT;       // DROP SHOT PRESS TOGGLE
								        
//PumpWall                              
int PumpWall = On;                      // Pump Wall 
define PumpWallHold  = PS4_L2;          // PUMP WALL HOLD				** L2/LT + R1 ** <---- RUN MOD
define PumpWallPress = PS4_R1;          // PUMP WALL PRESS
int PumpWallHTime = 50;	                // Pump Wall Press Button Time (Combo)

//Pump Hand Cannon
int PumpHandCannon = On;

define PumpCannonToggleHold = PS4_L2;	// Pump Hand Cannon HOLD TOGGLE		** L2/LT + UP ** <---- TOGGLE ON Or OFF
define PumpCannonTogglePress = PS4_UP;  // Pump Hand Cannon PRESS TOGGLE

define PumpCannonHold = PS4_L2;         // Pump Hand Cannon Hold Activator	** L2/LT + L1 ** <---- RUN MOD
define PumpCannonPress = PS4_L1;		// Pump Hand Cannon Press Activator

//Instant Pickaxe                       
int InstantPickaxe = On;   		        // Instant Pickaxe
int PickaxeHold = 30;			        // Instant Pickaxe Press Time
								        
//Instant Edit + Reset                  
int InstaEditReset = On;   		        // Normal Instant Edit/Reset
define EditHold = On;         	        // USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP )
int EditHoldTime = 130;	    	        // Time When Use Hold to Edit In game Setting To Be Matched
								        
//Quick Edit Assist + Reset             
int QuickEditAssist = On;   	        // Edit Assist
define EditAssist = PS4_L3;             // EDIT ASSIST + FAST RESET BUTTON
int EditDelay = 30;         	        // Edit Assist Hold Delay On Select
								        
//Fast Reset                            
int InstaFastReset =  On;   	        // Fast Reset
define FastReset = PS4_TOUCH;  	        // FAST RESET BUTTON
								        
//Playstation Controller On PC/XBOX     
int PSonXBOX = Off;                     // PS Controller On PC/XBOX

//LED/Vars
int a; int b;
int Edit1,Edit2,EditT,Fast,FastE,Shunt,Axe;

//Layout
define Fire     = PS4_R2;	//XB1_RB //PS4_R2
define Ads      = PS4_L2;	//XB1_LB //ADS_BTN
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Crouch   = PS4_R3;  	//XB1_RS //PS4_R3
define Pickaxe  = PS4_TRIANGLE;
define Build    = PS4_CIRCLE;
define Wall     = PS4_R2;

define Edit     = PS4_CIRCLE;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;

// ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ \\

//-- ùêíùêûùêúùê≠ùê¢ùê®ùêß ùüê - ùêåùêÄùêàùêç ùêÅùêãùêéùêÇùêä

main{


	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        
        swap(PS4_TOUCH,PS4_SHARE);
    }	

	if (QuickEditAssist) {
	 	
	 	if (!get_ival(Ads) && get_val(EditAssist)) {
			
			EditAssist();
			Edit1 = On;
		}

		if (event_release(EditAssist)) {
				
			EditT = Off;
			Edit1 = Off;
		}
	}

    if (InstaFastReset && !Fast) {
    	
    	if (!get_ival(Ads) && event_press(FastReset)) { 
       
    		Shunt = FastReset;
    		Fast = On;
    		combo_run(FastReset);
    	}
    	
    	else if (!get_ival(Ads) && get_ival(FastReset) && get_ptime(FastReset) >= 200) { 
       
    		Shunt = FastReset;
    		FastE = On;
    		combo_run(FastReset);
    	}
    	
    	if (FastE) {
    	
    		if (event_release(FastReset)) {
    			
    			combo_run(PickaxeE);
    		}
    	}
    }

    if (InstaEditReset) {
        
        if (EditHold) {
        	
        	if (get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
            	Edit1 = On;
            	Edit2 = On;
            }
        }
        	
        else if (event_press(Edit)) {
        			
        		Edit1 = On;
            	Edit2 = On;
        }
		
		if (Edit2) {
            
            if (event_release(Select)) {  
                
                Edit1 = Off;
                Edit2 = Off;
            }
		}
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
            
            combo_run(InstantReset);
            Edit1 = Off;
            Edit2 = Off;
        }

        if (event_press(Pickaxe) || event_press(Ads)) {
            
            Edit1 = Off;
            Edit2 = Off;
        }
    }
    
    if (InstantPickaxe) {
         
         if (event_press(Pickaxe)) {
             
             Axe = On;
     	}
     	
         if (Axe) {
             
             if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                 
                 Axe = Off;
             }
             
             if (event_release(Fire)) {
                 
                 combo_run(Pickaxe);
         	}
        }
    }	


//Aim Assist V3
if(get_val(Ads)) combo_run(AS);
if(get_val(Fire)) combo_run(AS2);

//Pump Hand Cannon
if(get_val(PumpCannonToggleHold) && event_press(PumpCannonTogglePress)){
Shunt = PumpCannonTogglePress;
PumpHandCannon = !PumpHandCannon;
if(PumpHandCannon == TRUE){combo_run(Notify);a=0;b=2;} 
if(PumpHandCannon == FALSE){combo_run(Notify);a=2;b=0;}}
if(PumpHandCannon){
if (get_val(PumpCannonHold) && get_val(PumpCannonPress)) {
Shunt = PumpCannonPress;
combo_run(PumpHandCannon);
}
}
//Ghost Peek V2
if(get_val(GhostPeekToggleHold) && event_press(GhostPeekTogglePress)){
Shunt = GhostPeekTogglePress;
GhostPeek = !GhostPeek;
if(GhostPeek == TRUE){combo_run(Notify);a=0;b=2;} 
if(GhostPeek == FALSE){combo_run(Notify);a=2;b=0;}}
if(GhostPeek){
if (get_val(GhostPeekHold) && get_val(GhostPeekPress)) {
Shunt = GhostPeekPress;
combo_run(GhostPeek);
}
}
//Dropshot V2
if(get_val(DropShotHold) && event_press(DropShotPress)){
Dropshot = !Dropshot;
Shunt = DropShotPress;
if(Dropshot == TRUE){combo_run(Notify);a=0;b=2;} 
if(Dropshot == FALSE){combo_run(Notify);a=2;b=0;}}
if(Dropshot){
if(get_val(Ads)&&get_val(Fire)){combo_run(Dropshot);}
if (event_press(Build)){ Dropshot = FALSE; }}
	    	
	if (PumpWall) {
	    	
	    if (get_ival(PumpWallHold) && event_press(PumpWallPress)) {
                
        	Shunt = PumpWallPress;
            combo_run(PumpWall);
        }
	}
	
//Anti-Recoil
if(!ADSPos || get_val(Ads)) {
combo_run(AntiRecoil);
}

//Deadzone Correction
if (abs(get_val(XB1_LY)) < 0 && abs(get_val(XB1_LX)) < 0 ){ 
set_val(XB1_LY,0); 
set_val(XB1_LX,0); 
} 
if (abs(get_val(XB1_RY)) < 0 && abs(get_val(XB1_RX)) < 0 ){ 
set_val(XB1_RY,0); 
set_val(XB1_RX,0); 
}

combo_run(AX);// ALWAYS RUNNING AIM ASSIST COMBO -->   AX   !!!!!!!!!!!!!!

	if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        }
            else {
                
                set_val (Shunt,Off);
            }
    }

}

// ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ‚ññ \\

//-- ùêíùêûùêúùê≠ùê¢ùê®ùêß ùüë - ùêÇùêéùêåùêÅùêéùêí

combo AS { 
set_val(10,a_f(10,AimAssist_SnapStickV104));
wait(Delay)
set_val(9,a_f(9,AimAssist_SnapStickV104));
wait(Delay)
set_val(10,a_f(10,NegativeAimAssist_SnapStickV104));
wait(Delay)
set_val(9,a_f(9,NegativeAimAssist_SnapStickV104));
wait(Delay)}

combo AS2 { 
set_val(10,a_f(10,AimAssist_Hipfire));
wait(Delay)
set_val(9,a_f(9,AimAssist_Hipfire));
wait(Delay)
set_val(10,a_f(10,NegativeAimAssist_Hipfire));
wait(Delay)
set_val(9,a_f(9,NegativeAimAssist_Hipfire));
wait(Delay)}

combo AX { 
set_val(10,a_f(10,AimAssistX));
wait(Delay)
set_val(9,a_f(9,AimAssistX));
wait(Delay)
set_val(10,a_f(10,AimAssistXNeg));
wait(Delay)
set_val(9,a_f(9,AimAssistXNeg));
wait(Delay)}

combo PumpHandCannon {
    set_val(Ads,100);
	set_val(Fire,100);
	wait(50);
	set_val(N_Weapon,100);
	wait(100);
	wait(500);
	set_val(Ads,100);
	set_val(Fire,100);
	wait(50);
	set_val(P_Weapon,100);
	wait(100);
	wait(610);
}

combo GhostPeek {
set_val(Crouch,100);
wait(30);
wait(30);
set_val(Fire,100);
wait(30);
set_val(Crouch,100);
wait(GPCooldown);
wait(200);}

combo Dropshot {
set_val(5,100);
wait(Dropshot_Crouching);
wait(Dropshot_Standing);
set_val(5,100);}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold);
    Axe = Off;
}

combo PickaxeE {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold + 10);
    set_val(Pickaxe,0);
    wait(20);
    set_val(Pickaxe,100);
    wait(PickaxeHold + 10);
    FastE = On;
}

combo PumpWall {

    set_val(Fire,100);
    wait(PumpWallHTime);
 	set_val(Build,100);
    wait(PumpWallHTime);
    set_val(Wall,100);
    wait(PumpWallHTime);
    set_val(Build,100);
    wait(50);
    wait(30);
}

combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
    Fast = Off;
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo AntiRecoil { 
if(get_val(Fire)) {
Anti_Recoil = get_val(10) + AntiRecoil;
if(Anti_Recoil > 100) Anti_Recoil = 100;
set_val(10, Anti_Recoil);
}}

combo Notify {
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
set_rumble(RUMBLE_B,15);
wait(250);
reset_leds();
reset_rumble();
}

function EditAssist () {

    EditT += get_rtime();
        
        if (get_val(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
                  Press(Select);
        }
}

function Press (Button) {

    if (get_ival(Button))
        
        return;
            
            set_val(Button,100);
}

function a_f(p,m) {
if(abs(get_val(p)) < Release)
return m;
return get_val(p);}