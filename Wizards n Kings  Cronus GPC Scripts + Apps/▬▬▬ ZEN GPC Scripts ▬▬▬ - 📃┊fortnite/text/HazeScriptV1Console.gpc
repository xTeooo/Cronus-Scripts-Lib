// HAZE SCRIPT V1 FOR PC
define Fire   = XB1_RT;   define Pickaxe = XB1_VIEW;      define N_Weapon = XB1_RB;  
define Ads    = XB1_LT;   define Reload  = XB1_X;      define P_Weapon = XB1_LB;
                               
define Jump   = XB1_RS;    define Edit    = XB1_LS;  define Select   = XB1_RT;
define Crouch = XB1_A;   define Ping    = XB1_XBOX;   define Confirm  = XB1_LS;

define Reset  = XB1_RB;    define Wall    = XB1_RT;     define Ramp     = XB1_LT;  
define Build  = XB1_Y;    define Floor   = XB1_LB;     define Roof     = XB1_RB;

define Up     = PS4_UP;   define Left    = PS4_LEFT;   define RX       = PS4_RX;
define Down   = PS4_DOWN; define Right   = PS4_RIGHT;  define RY       = PS4_RY;

define aimY   = PS4_RY;   define LX      = PS4_LX;     define On       = TRUE;
define aimX   = PS4_RX;   define LY      = PS4_LY;     define Off      = FALSE;






unmap XB1_VIEW;
remap PS4_TOUCH -> XB1_VIEW;
unmap PS4_TOUCH;


/*==============================================================================================================================================================
		                                                       DEAD ZONE
==============================================================================================================================================================*/

                                                    int deadZone   = 10; // Deazone in game       


/*==============================================================================================================================================================
		                                                AIM ASSIST [LINEAR] OPTIONS
==============================================================================================================================================================*/
                                                   
                                                    int AimAssist_LINEAR  = TRUE; 
                                                    
                                                    // Power/Strength of Aim Assist
                                                    int Strength  = 18;
                                                   
    // Must be able to increment 3 times at least within strength value ( Increment * 4 = 20 [5 * 4] = OK) <== Default Example as ( 7 * 3 = 21 )
                                                    int Increment = 5; 
                             

/*==============================================================================================================================================================
		                                               AIM ASSIST [EXPONENTIAL] OPTIONS
==============================================================================================================================================================*/
                                                   
                                                    int AimAssist_EXPO  = FALSE;
                                                   
                                                    // Power/Strength of Aim Assist
                                                    int AimAssist_Strength  = 29; 



                                                  


/*==============================================================================================================================================================
		                                                      ANTI RECOIL
==============================================================================================================================================================*/

                                                   int LegacyARecoil =  TRUE;
                                                    
                                                   int ArLegacyRY    = 14;




                                                 

/*==============================================================================================================================================================
		                                                       BUILD TRACK
==============================================================================================================================================================*/ 

                                                   int BuildTracker  =  TRUE;

                                                   int BuildSyncTime = 1000;
          

int PSonXBOX           = On; // PS Controller On PC/XBOX



/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times etc..              ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ define LegacyRumble = Off;
   define LegacyInvert = Off;
   define LegacyARHip  = Off;

int Edit1,Edit2,EditT,Shunt,BuildTrack,BuildCount;
int power,Ypower,Xpower,Power,CountPower,AxisXY;
int display_title = TRUE;
int display_black;      
int count_black;  

// ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖ \\

//-- 𝐒𝐞𝐜𝐭𝐢𝐨𝐧 𝟐 - 𝐌𝐀𝐈𝐍 𝐁𝐋𝐎𝐂𝐊

main {

    if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        
        swap(PS4_TOUCH,PS4_SHARE);
}

   


    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
                    BuildCount = Off;
      }
}

    if (!BuildTrack) {       
        
        if (AimAssist_EXPO) {   
         
           if (get_val(Ads)> 95){ 
               combo_run(AimExpo);
           }
        
               if (abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
                   combo_stop(AimExpo);
      }
}
        
     if (AimAssist_LINEAR) {
	 
	    if (event_press(Ads)) { 
	    	
	    	Power = On;
}
	    
	    else if (!get_ival(Ads) && event_press(Fire)) {
	    	
	    	Power = On;
}
	    
	    if (get_ival(Ads) || get_ival(Fire)) {
	    	
	    	AxisXY = isqrt(abs(get_ival(aimX)) * abs(get_ival(aimX)) + abs(get_ival(aimY)) * abs(get_ival(aimY)));
	    	
	    	if (AssistProfile == 1)
	    		
	    		AimAssist(Strength,Increment);
	    		
         } else {
	    	
	    	CountPower = 0;
	    	power = Off;
        }
}
 
    if (!BuildTrack) {  
       
      
            
            
            
    

            if (LegacyARecoil){        
                    AR_Value = ArLegacyRY;  

                if ((((!LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire))) || 
                     ((!LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire))) {

                    LegacyAR();
                }
                    else if ((((LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire)) && get_rumble(RUMBLE_A)) || 
                              ((LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire) && get_rumble(RUMBLE_A))) {

                            LegacyAR();
                    }
            }
       
       
     if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
            set_val (Shunt,Off);
         }
      }
  
     
       }
     }
   
 


// ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖ \\

//-- 𝐒𝐞𝐜𝐭𝐢𝐨𝐧 𝟑 - 𝐂𝐎𝐌𝐁𝐎𝐒



combo Confirm {
      
      set_val(Confirm,100);
      wait(20);
      set_val(Confirm,0);
      wait(100);
}



combo AimExpo{          
     
     set_val(10, (AimAssist_Strength)); wait(10)
     set_val(9, (AimAssist_Strength)); wait(10)
     set_val(10, AimAssist_Strength * -1); wait(10)
     set_val(9, AimAssist_Strength * -1); wait(10)
}

// ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖ \\

//-- 𝐒𝐞𝐜𝐭𝐢𝐨𝐧 𝟑 - FUCTIONS

int AR_Value;
function LegacyAR () {
    
    if(LegacyInvert) {
        set_Val(RY,AR_Value * -1);
    }
        else {    
            set_Val(RY,AR_Value);
        }
}



int AssistProfile = 1; 
function AimAssist (Strength,Step) {

	if (Power) {
		
		Ypower = Strength;
		Xpower = Strength * -1;
		Increment = Step;
		Power = Off;
	}
	
	if (!power) {
	
		Xpower += Increment;
		Ypower -= Increment;
	
	} else {
		
		Xpower -= Increment;
		Ypower += Increment;
	}
	
	CountPower ++;
	
	if (CountPower >= (Strength / Increment)) {
		
		power = !power;
		CountPower = 0;
	}	
	
	
		}
	


function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}

function set_Val(Input,Output) {

	set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
    return; 
}



              
           
        
