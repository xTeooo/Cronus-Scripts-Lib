/*

Credits - Noozbar, TaylorDrift21, DoNotAtMe, Batts, Sweet_Evil, DoGzTheFiGhTeR
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________

  / @@@@@@@@
  |	@@  | @@							    /@@@@@@  /@@
  |	@@  | @@							   /@@__  @@| @@              
  |	@@@@@@@@							  | @@  \__/| @@            /@@    @@
  |	@@_____//@@@@@@	   /@@@@@@  /@@@@@@  | @@@@|    | @@  /@@@@@@   \ @@  @@ 
  |	@@	   |____  @@| /@@__  @@|____  @@|| @@_/     | @@ |____  @@|  \  @@  
  |	@@      /@@@@@@@|| @@  \__/ /@@@@@@@|| @@       | @@  /@@@@@@@|   | @@  
  |	@@     /@@__  @@|| @@      /@@__  @@|| @@       | @@ /@@__  @@|  / @@ @@
  |__/     \ @@@@@@@|| @@      \ @@@@@@@|| @@       | @@|\ @@@@@@@| / @@ _ @@
		    \______/  |__/	    \______/|__/        __/   \______/  \__/ \__/ 	   The Fartnite
		   																			 Parasite
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                          INSTRUCTIONS ON HOW TO ACTIVATE MODS                                            
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Open modMenu                                           ===== 		Hold L2/LT and tap OPTIONS/MENU                 	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To edit the mods in the modMenu                        ===== 			Press CROSS/A to EDIT                           ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Navigate between all mods                              ===== 		Tap LEFT or RIGHT on the D-PAD                  	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Enable or Disable the diplayed mod                     ===== 		Tap UP for ON == Tap DOWN for OFF               	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Switch Profile In Mod Menu                             ===== 				Tap Triangle/Y                              ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Switch Profile In Game                                 =====	 	USER DEFINED BUTTONS (Chosen Below)             	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Edit availble Mods                                     ===== 		Press CROSS/A OR Press CIRCLE/B to Exit Mod     	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Edit Values In available Mods                          ===== 	Hold L2/LT & Tap RIGHT to increase + 1          		===
====                                                        =====              Tap LEFT to decrease  - 1          			===
====                                                        =====              Tap UP   to increase  + 10         			===
====                                                        =====              Tap DOWN to decrease  - 10         			===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
==== Navigate between values available in the editable mods ===== 			Tap LEFT Or RIGHT                               ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To SAVE all mods that have been edited & enabled       ===== 		Press XBOX/PS Button == "SAVED"   			  		===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To exit Mod Menu once you have saved it                ===== 		Hold L2/LT and Tap OPTIONS/MENU                 	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Kill Switch (Disable Everything)                       ===== 		Hold LT/L2 & Double Tap SHARE/VIEW              	===
====																														===	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 	   										
            
===============================================================================================================================                                          
                               PLEASE READ BELOW  HOW TO CHANGE YOUR BUTTONS FOR SWITCHING PROFILE  
 
                  TO ENABLE PROFILE BUTTONS CHANGE TO TRUE //// TO DISABLE PROFILE BUTTONS CHANGE TO FALSE
                  
    TO CHANGE THE BUTTONS, REPLACE THEM WITH WHAT YOU WOULD LIKE FOR EXAMPLE = PS4_CIRCLE; << REMEMBER TO PUT A SEMICOLON
                     
|==============================================================================================================================   
| Enable Or Disable If you want to use only 1 button to switch profile 1 or 2 |*/  define one_button_press = TRUE;          /*|  <--- 1 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Enable or Disable If you want to use 2 buttons to switch profiles 1 or 2    |*/  define two_button_press = FALSE;        /* |  <--- 2 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Choose your button for 1 button to switch profiles             	  |*/ define profile_switch_button1 = PS4_TRIANGLE;    /* |  <--- ONLY 1 BUTTON, CHOOSE YOUR BUTTON
===============================================================================================================================
| Choose your buttons for 2 buttons to switch profiles                |*/  define profile_switch_button2 = PS4_L2;         /* |  <--- 2 BUTTONS TO SWITCH PROFILES & CHOOSE YOUR BUTTONS
=======================================================================
|                                                                     |*/define profile_switch_button3 = PS4_DOWN;         /* |  <--- CHOOSE YOUR BUTTONS 
                                                                      =========================================================
| Extra Profile is an additional profile (profile 3) below you can choose the buttons to switch without interfering with game |
===============================================================================================================================
| HOLD USER DEFINED BUTTONS to get in Extra profile                    |*/ define profile3_switch_button  = PS4_R3;        /* |  <--- PROFILE 3 IS A SEPERATE PROFILE BUTTON CAN NOT BE THE SAME
| HOLD USER DEFINED BUTTONS to get back out of Extra profile           |*/define profile3_switch_button1 = PS4_TRIANGLE;   /* |  <--- CHOOSE YOUR 2 BUTTONS TO ACTIVATE 

/*=============================================================================================================================

/*=============================================================================================================================                                          
|                      					ADJUSTABLES ADJUSTABLES ADJUSTABLES                 					      		  |                 
|==============================================================================================================================  
===============================================================================================================================
| Choose your Strafe Delay	(Delay before Strafe begins)              |*/ int strafedelay =	400;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Strafe Time   (Time Strafe is held in Direction)        |*/ int strafetime = 400;   						   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Jump Delay    (Delay before Jump begins)         	  	  |*/ int jumpdelay = 300;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Jump Time     (Time between Jumps)         	 	      |*/ int jumptime = 500;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Crouch Time   (Time Crouch is held) [Toggle Crouch]     |*/ int crouchdelay = 400;   						   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ping Time    (Time before another Ping)         	  	  |*/ int pingtime = 1500;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Abuse Hold     (Time Abuse Held)  	       	 	      |*/ int aimabusehold = 115;   					    /*| <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Abuse Rest	(Time Abuse Rests)               		  |*/ int aimabuserest = 10;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Quick Edit	(Time until Edit closes)               	  |*/ int quickeditTime = 1700;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose If Hair Triggers TRUE or FALSE			              		  |*/ int Hairtriggers = TRUE;				           /* | 
===============================================================================================================================
====	STRAFE		- Strafe when Firing weapon			  ===			*/define HipFireStrafeONLY = FALSE;/*				=== <--- CHOOSE TRUE IF YOU DO NOT WANT TO STRAFE WHEN AIMING AND FIRING 
====	CROUCH		- Crouch when Firing weapon			  ===			*/define HipFireCrouchONLY = FALSE;/*				=== <--- CHOOSE TRUE IF YOU DO NOT WANT TO CROUCH WHEN AIMING AND FIRING 
====	JUMP		- Jump when Firing weapon			  ===			*/define HipFireJumpONLY = TRUE;/*					=== <--- CHOOSE FALSE IF YOU DO WANT TO JUMP WHEN AIMING AND FIRING 
===============================================================================================================================
____________________________________________________________________________________________________________________________________________________________			*/
/*	
	Mods -
		
			3 Profiles can be used and can be switched on the fly.
	
		###########################################################################################
			
			Anti-Recoil with LEGACY and POLAR options with editable values and toggle for each profile
					
		###########################################################################################			
					
			Rapid Fire with editable values and toggle for each profile
			
			Smart Fire with editable values and toggle 
			
			Dynamic Fire with editable values and toggle *Turn Hair Triggers OFF for best results*
			
		###########################################################################################		
			
			Polar Aim with editable values and toggle for each profile
			
			Stick Aim with editable values and toggle for each profile
			
			Sweet Evil Aim Assist with editable values and toggle for each profile
		
		###########################################################################################
		
		Fartnite Mods -
		
			Strafe Shot - Strafe Left and Right in Random looking Pattern
			
			Jump Shot - Or Hold Jump to Dolphin Dive/Bunnyhop when Jump Shot on. 
			
			Crouch Shot - Or Hold to Rapid Crouch
			
			Shoot Swap L1/LB - Swap Left on Release then back to Previous Weapon on release of Fire
			
			Shoot Swap R1/RB - Swap Right on Release then back to Previous Weapon on release of Fire
			
			Border Hop - Create a Ramp. To hop over borders. And stuff
			
			Trump Wall - Create a Wall. But quicker.
			
			Safe Space - Create a Safe Space from the dangers of the world.
			
			CropDustRFW - Ramp Floor Wall
			
			Auto Reload - Reload on release of Fire
			
			Aim Abuse - ADS In & Out to Abuse Aim Assist
			
			Auto Ping - Ping on Fire
			
			Easy Aim - Aim when Fire - IF HOLD R3 CANCEL TEMPORARILY
			
			ADS Fire - Fire when pressing Aim - IF HOLD R3 CANCEL TEMPORARILY
			
			Crouch Aim - Crouch when Aiming.
			
			Fast Reset - Reset Object
			
			Edit Assist - Edit object quickly and close.
			
			Peek-a-boo  - Window Shot
		
		
		Quick Toggles -

			Trump Wall - Hold L1/LB + CIRCLE/B to start building continuously 
			
			Border Hop - Hold R1/RB + CIRCLE/B to start building continuously
			
			SafeSpace Fort - Press DOWN and CIRCLE/B to start build. 
			
			Crop Dust "RFW" - Hold SQUARE/X to keep building
			
			Dolphin Dive - Hold Cross/A to Dive&Jump. //Toggle DOWN+CROSS/A
			
			Exp Afk BP - Go into Creative Hub and click play. - Once in-game Press DOWN+R1/RB to activate

		###########################################################################################	
		
			Swap Trigger/bumper with one toggle for the entier script 
		
	   ###########################################################################################
	
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________
						
						SMART ANTI-RECOIL & QUICK EDIT INSTRUCTIONS [BETA] Work-In-Progress

//Quick Edit Anti-Recoil (Smart Only) ... Write FALSE if planning to not use Quick Edit in-game                         
// !!!!! RUMBLE MUST BE ON FOR SMART AR !!!!! 

LEFT/RIGHT DPAD IS FOR 1 VALUE.. LEFT = NEGATIVE and RIGHT = POSTITIVE - YOU WILL FEEL VIBRATE
UP/DOWN DPAD IS FOR 10 VALUE.. DOWN = NEGATIVE and UP = POSTITIVE	   - YOU WILL FEEL VIBRATE

HORIZONTAL IS ONLY +1 OR -1 VALUES...
																														*/
define QuickEdit = TRUE; 			//Write FALSE if you want Quick Edit OFF
int smart_recoil_vertical  = 25;	//Base Vertical Value - Quick Edit must be ON to adjust
int smart_recoil_str = 120; 		//Base Strength Value - Quick Edit must be ON to adjust
int smart_recoil_horizontal  = 0;	//Base Horizontal Value - Quick Edit must be ON to adjust
int SmartAR = FALSE;				//Write TRUE if you want Smart AR enabled by Default
									// Quick Toggle DOWN + TRIANGLE/Y to ENABLE/DISABLE
																														/*
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________	
	
____________________________________________________________________________________________________________________________________________________*/
/*	
*/	define UNBOUND_BUTTON = PS4_RIGHT;	//This button NEEDS to be UNBOUND in-game for Safespace to work!		
																																					/*
IMPORTANT - IF using different keybinds or button layouts, change the values below. 
			Does not matter if you are using Xbox buttons - PS4_CROSS and XB1_A are the same button, if you jump with R3 type PS4_R3. 				*/

	define JUMP_BTN      = PS4_CROSS;     define SWAP1_BTN  = PS4_L1;   
	define BUILD_BTN     = PS4_CIRCLE;    define SWAP2_BTN  = PS4_R1; 
	define RELOAD_BTN    = PS4_SQUARE;    define AIM_BTN    = PS4_L2;
	define SWITCH_BTN    = PS4_TRIANGLE;  define FIRE_BTN   = PS4_R2;
	define SPRINT_BTN    = PS4_L3;		  define CROUCH_BTN = PS4_R3;
	define PING_BTN		 = PS4_LEFT;	  define EDIT_BTN = PS4_L3;
	define RESET_BTN 	 = PS4_R3;
	
  //FALSE on Default - In-Game use Quick Toggle to turn ON. If TRUE these AutoMods will be enabled immediately.
	
	int AutoMod_Jump  = FALSE; // Quick toggle Dolphin Dive		DOWN and Cross/A to toggle ON/OFF
	int AutoMod_Afk   = FALSE; // Quick toggle Exp Afk 			DOWN and Options/Menu to toggle ON/OFF

//Place Wall by Holding L1/LB + CIRCLE/B to continue quick building.
//Place Ramp by Holding R1/RB + CIRCLE/B to continue quick building.
//Place Fort by Holding UNBOUND BUTTON CHOSEN BY USER to start the building. 
//Place and Jump Holding R1/RB + CROSS/A to continue quick building.
//Place RampFloorWall "CropDustRFW" in Build mode by Holding SQUARE/X to continue quick building.
//Double Tap Build Button looking at a wall to make Window Shot. (Careful not to do it too fast or it will close and swing axe/shoot weapon)
//Hold Edit Button (Default L3) and Hold Build Button to Fast Reset.
//Hold Build Button looking at an object for Quick Edit.


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜



const string TITLE = "FartNiteGuy"; const string Off = "OFF"; const string On = "ON"; const string SAVE= "SAVED"; const string PROFILE_1 = " Profile 1 "; const string PROFILE_2 = " Profile 2 "; const string PROFILE_3 = " Profile 3 "; const string ALL = " All Profiles "; const string MUTE = "Script OFF"; const string HOLD = "Hold CIRCLE/B"; const string ACTIVE = "to turn ON" const string STANDARD = "Legacy"; const string PROGRESS = "Progressive"; const string ANTIRECOIL_VERTICAL = "AR Vertical"; const string PRESS_A_TO_CONTINUE = "Press Cross/A " const string FLIPPED = "Flipped"; const string SmartFIRE = "Smart Fire"; const string DynamicFIRE = "DynamicFire"; const string Rapid_Fire = "Rapid Fire"; const string ANTIRECOIL = "A-R Type"; const string RAPIDFIRE = "Fire Type"; const string POLARAIM = "Polar Aim"; const string STICKYAIM = "Sticky Aim"; const string SWEETEVIL = "Sweet Evil"; const string QUICKSCOPE = "QuickScope" const string BUILD_MODS = "Build Mods"; const string SHOT_MODS = "Shot Mods"; const string GLOBAL_MODS = "Global Mods"; const string EASY_MODS = "Easy Mods"; const string SWAP_MODS = "Swap Mods"; const string EDIT_MODS = "Edit Mods"; const string SWAP = "Flipped/Tr"; int modName_idx; define LAST_MODNAME_STRING = 12; define LAST_EDITABLE_STRING = 11; const string ANTIRECOIL_START = "AR Start"; const string ANTIRECOIL_END = "AR End"; const string ANTIRECOIL_TIME = "AR Time"; const string ANTIRECOIL_HORIZONTAL = "AR Horiz"; const string RATE_OF_FIRE = "Rounds/sec"; const string SmartTIME = "Smart Time"; const string DynamicTIME = "DynamicTime"; const string DynamicMIN = "DynamicWait"; const string POLAR_RADIUS = "Radius"; const string POLAR_STEPS = "Steps"; const string STEADYAIMING = "SteadyAim"; const string STICKYAIM_SIZE = "Sticky Size"; const string STICKYAIM_TIME = "Sticky Time"; const string AIMBOOST = "Aim Boost"; const string AIMCORRECTION = "Aim Correct"; const string QUICKSCOPESPEED = "QScopeDelay"; const string TRUMPWALL = "Trump Wall"; const string BORDERHOP = "Border Hop"; const string SAFESPACE = "Safe Space"; const string TRUMPTOWER = "CropDustRFW"; const string SWAPSHOT1 = "L1/LB Swap"; const string SWAPSHOT2 = "R1/RB Swap"; const string ALLSWAP = "ALL SWAP"; const string PINGONFIRE = "PingOnFire"; const string AUTO_RELOAD = "Auto Reload"; const string AIMABUSE = "Aim Abuse"; const string CROUCHSHOT = "Crouch Shot"; const string STRAFESHOT = "Strafe Shot"; const string JUMPSHOT = "Jump Shot"; const string EASYAIM = "Easy Aim"; const string ADSFIRE = "ADSAutoFire"; const string CROUCHAIM = "Crouch Aim"; const string QUICKEDIT = "Quick Edit"; const string PEEKABOO = "Peek-a-Boo"; const string FASTRESET = "Fast Reset"; const string JUMPSTRAFE = "JumpStrafe"; const string DROPSTRAFE = "DropStrafe"; const string PINGRELOAD = "Ping Reload"; const string PINGABUSE = "AbusivePing"; const string RELOADABUSE = "ReloadAbuse"; const string ALLGLOBALON= "AllGlobalON"; const string DROPAIMFIRE = "DropAimFire"; const string EDITRESET = "Edit Reset"; const string PEEKRESET = "Peeky Reset"; const string EDITPEEK = "Edit Peek"; const string ALLEDITON = "AllEditON"; int antirecoil_start[3]; int antirecoil_end[3]; int antirecoil_time[3]; int antirecoil_horizontal[3]; int rate_of_fire[3]; int valName_idx; define AMOUNT_OF_VALNAME_IDX = 19; int profile_idx; int AMOUNT_OF_VAL_IN_ARRAY = 5 int toggle_antirecoil[3]; int toggle_rapidfire[3]; int toggle_polaraim[3]; int toggle_stickyaim[3]; int toggle_sweetevil[3]; int toggle_quickscope[3]; define AMOUNT_OF_PROFILES = 3; define AMOUNT_OF_MULTI_TOGGLE = 6; int quickscopedelay; int trumpwall; int borderhop; int safespace; int swap_on; int aimabuse_hold; int aimabuse_rest; int holdTime; int trumptower; int edit_mods; int shot_mods; int global_mods; int swap_mods; int easy_mods; define SSA1 = 80; define SSA2 = 65; define SSA3 = 82; define SSA4 = 65; define SSA5 = 70; define SSA6 = 76; define SSA7 = 65; define SSA8 = 88; define SAVER = 7000; define SAVER1 = 10; int SSMU1 = 1; int SSMU2 = 8; int SSMU3 = 15; int SSMU4 = 22; int SSMU5 = 29; int SSMU6 = 36; int SSMU7 = 43; int SSMU8 = 50; int Aim_Boost = 15; int Aim_Correction = 20; define Sampling_Time = 10; define Aim_Perfection_Limit = 30; define POS_Aim_Limit = 70; define NEG_Aim_Limit = -70; define POS_Micro_MVT_Limit = 25; define NEG_Micro_MVT_Limit = -25; int X_Last_Value = 0; int Y_Last_Value = 0; int X_Current_Value = 0; int Y_Current_Value = 0; int Sampling_Done = FALSE; int spiroide_pulse = 0; int fine_pulse = 0; int Joystick_calibration = FALSE; int RX_Axis_Joystick_calibrate = 0; int RY_Axis_Joystick_calibrate = 0; define RY = PS4_RY; define RX = PS4_RX; define Ads = PS4_L2; define Fire = PS4_R2; int Strength,VibroA,VibroB,VibroT; int smart_vertical,smart_horizontal,smart_add; define Horiz = TRUE; define Vert = TRUE; define Str = TRUE; int SmartTime; int DYNATIME; int DYNAMIN; define RB_LB_PRESS_TIME = 200; int rb_lb_swap; define ROOF = PS4_L1; define STAIRS = PS4_L2; define FLOOR = PS4_R1; define WALL = PS4_R2; define EDIT_BUTTON = PS4_CIRCLE; define FAST_RESET_EDIT = PS4_L3; define EDIT_ASSIST_BUTTON = PS4_L3; define FAST_RESET_BUTTON = PS4_TOUCH; define RESET = PS4_R3; define SELECT = PS4_R2; define CONFIRM = PS4_CIRCLE; define PICKAXE = PS4_TRIANGLE; define AIM_X = PS4_RX; define AIM_Y = PS4_RY; define NEXT = PS4_R1; define BUNNYRAMP = 800; define EXPO = 11000; define LINEAR = 18000; define ON = TRUE; define OFF = FALSE; define RS = POLAR_RS; define VIB_A = RUMBLE_A; const uint8 ASCII_NUM[] = {48,49,50,51,52,53,54,55,56,57}; int i; int c,c_val; data( 1,0,0,0, 0,0,0,1, 1,0,1,0, 0,0,1,0, 0,1,1,0, 1,1,1,0, 0,1,0,0, 0,0,0,0 ); int SCREENSAVER; int display_title = TRUE; int display_new = TRUE; int display_black; int profile_3; int profile_1or2; int ModMenu; int ModEdit; int KillSwitch; int i_val; int i_pnt; int i_num; int i_cnt; int v,ar_y; int x_ref; int hold_time; int rest_time; int led_on; int led_off; int count_black; int double_tap; int stickyaim_size; int stickyaim_time; define X = XB1_RX; define Y = XB1_RY; define ACTIVE_WHEN_ADS = TRUE; define ACTIVE_WHEN_FIRING = TRUE; int RADIUS; int STEPS; int STEADY_AIM; define STEP_INTERVAL = 1; define VM_INTERVAL = -2; int time; int angle, cos_angle, sin_angle; int actual_X, actual_Y, actual_Magnitude, max_Magnitude,angle_Out; int STEADY_VALUE; const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58, -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; const int8 data1[]={-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91, -90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16, -14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49, 51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92, 92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99, 99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71, 70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14, 13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40, -42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77, -78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97, -98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100}; int q; int double__tap[30]; init { while(q < 30) {double__tap[q] = -1; q++;}} int profile_width; int profile_font; int profile_y; init{ STEADY_AIM = (360 / STEADY_AIM) / 2; toggle_antirecoil[0] = get_pvar(SPVAR_1, 0, 2, 0 ); antirecoil_start[0] = get_pvar(SPVAR_6, -99, 99, 0 ); toggle_rapidfire[0] = get_pvar(SPVAR_2, 0, 1, 0 ); antirecoil_end[0] = get_pvar(SPVAR_7, -99, 99, 0 ); toggle_sweetevil[0] = get_pvar(SPVAR_57, 0, 2, 0 ); antirecoil_time[0] = get_pvar(SPVAR_8, -99, 99, 0 ); toggle_polaraim[0] = get_pvar(SPVAR_3, 0, 3, 0 ); antirecoil_horizontal[0] = get_pvar(SPVAR_9, -99, 99, 0 ); toggle_quickscope[0] = get_pvar(SPVAR_4, 0, 1, 0 ); rate_of_fire[0] = get_pvar(SPVAR_10, 1, 25, 1 ); toggle_stickyaim[0] = get_pvar(SPVAR_5, 0, 2, 0 ); toggle_antirecoil[1] = get_pvar(SPVAR_11, 0, 2, 0 ); antirecoil_start[1] = get_pvar(SPVAR_16, -99, 99, 0 ); toggle_rapidfire[1] = get_pvar(SPVAR_12, 0, 1, 0 ); antirecoil_end[1] = get_pvar(SPVAR_17, -99, 99, 0 ); toggle_sweetevil[1] = get_pvar(SPVAR_58, 0, 2, 0 ); antirecoil_time[1] = get_pvar(SPVAR_18, -99, 99, 0 ); toggle_stickyaim[1] = get_pvar(SPVAR_13, 0, 2, 0 ); antirecoil_horizontal[1] = get_pvar(SPVAR_19, -99, 99, 0 ); toggle_quickscope[1] = get_pvar(SPVAR_14, 0, 1, 0 ); rate_of_fire[1] = get_pvar(SPVAR_20, 1, 25, 1 ); toggle_polaraim[1] = get_pvar(SPVAR_15, 0, 3, 0 ); toggle_antirecoil[2] = get_pvar(SPVAR_21, 0, 2, 0 ); antirecoil_start[2] = get_pvar(SPVAR_26, -99, 99, 0 ); toggle_rapidfire[2] = get_pvar(SPVAR_22, 0, 1, 0 ); antirecoil_end[2] = get_pvar(SPVAR_27, -99, 99, 0 ); toggle_sweetevil[2] = get_pvar(SPVAR_59, 0, 2, 0 ); antirecoil_time[2] = get_pvar(SPVAR_28, -99, 99, 0 ); toggle_stickyaim[2] = get_pvar(SPVAR_23, 0, 2, 0 ); antirecoil_horizontal[2] = get_pvar(SPVAR_29, -99, 99, 0 ); toggle_quickscope[2] = get_pvar(SPVAR_24, 0, 1, 0 ); rate_of_fire[2] = get_pvar(SPVAR_30, 1, 25, 1 ); toggle_polaraim[2] = get_pvar(SPVAR_25, 0, 3, 0 ); stickyaim_size = get_pvar(SPVAR_31, 1, 50, 20 ); stickyaim_time = get_pvar(SPVAR_32, 1, 99, 40 ); RADIUS = get_pvar(SPVAR_33, 1, 99, 20 ); STEPS = get_pvar(SPVAR_34, 1, 99, 25 ); STEADY_AIM = get_pvar(SPVAR_35, 1, 90, 30 ); quickscopedelay = get_pvar(SPVAR_36, 50, 1200,900); Aim_Boost = get_pvar(SPVAR_37, 1, 30, 15 ); Aim_Correction = get_pvar(SPVAR_38, 1, 30, 20 ); swap_on = get_pvar(SPVAR_39, 0, 1, 0); trumpwall = get_pvar(SPVAR_45, 0, 1, 0 ); easy_mods = get_pvar(SPVAR_40, 0, 4, 0); borderhop = get_pvar(SPVAR_46, 0, 1, 0 ); global_mods = get_pvar(SPVAR_41, 0, 7, 0); safespace = get_pvar(SPVAR_47, 0, 1, 0 ); swap_mods = get_pvar(SPVAR_42, 0, 3, 0); trumptower = get_pvar(SPVAR_51, 0, 1, 0 ); shot_mods = get_pvar(SPVAR_43, 0, 5, 0); SmartTime = get_pvar(SPVAR_48, 1, 800, 150 ); edit_mods = get_pvar(SPVAR_44, 0, 7, 0); DYNATIME = get_pvar(SPVAR_49, 1, 800, 250 ); DYNAMIN = get_pvar(SPVAR_50, 1, 200, 50 ); } main { set_val(TRACE_1, profile_idx); set_val(TRACE_2, toggle_rapidfire[profile_idx]); set_val(TRACE_3, ModMenu); EDIT_MODS(); SHOT_MODS(); GLOBAL_MODS(); EASY_MODS(); SWAP_MODS(); if(double_tap) double_tap -= get_rtime(); if(get_controller() != PIO_PS4) { if(get_console() == PIO_PS4) { swap(PS4_SHARE,PS4_TOUCH); if(get_val(PS4_R3) && event_press(PS4_TOUCH)) { set_val(PS4_SHARE,100); set_val(PS4_TOUCH,0); set_val(PS4_R3,0); } } } if(!ModMenu && !ModEdit) { if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || !get_ival(PS4_L2) && event_press(PS4_PS) ) { KillSwitch = !KillSwitch; if(KillSwitch) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); display_title = TRUE; } if(KillSwitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) { KillSwitch = FALSE; combo_run(RUMBLE_ON); display_title = TRUE; } } if(get_val(PS4_L2)) { if(event_release(PS4_SHARE)) { KillSwitch = !KillSwitch; if(KillSwitch) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); display_title = TRUE; } if(event_release(PS4_OPTIONS) && !KillSwitch) { ModMenu = !ModMenu; if(!ModMenu) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_title = TRUE; } if(ModMenu) { modName_idx = 0; combo_run(RUMBLE_ON); display_new = TRUE; } } set_val(PS4_SHARE, 0); set_val(PS4_OPTIONS, 0); } if(!KillSwitch) { if(ModMenu) { if(modName_idx <= LAST_EDITABLE_STRING) { if(event_press(PS4_CROSS) && !ModEdit) { valName_idx = AMOUNT_OF_VALNAME_IDX + 1; ModEdit = TRUE; combo_run(RUMBLE_ON); display_new = TRUE; } if(event_press(PS4_CIRCLE) && ModEdit) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_new = TRUE; } } if(ModEdit) { if(get_ival(PS4_L2)) { antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_end[profile_idx] = edit_val( 1 , antirecoil_end[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_time[profile_idx] = edit_val( 2 , antirecoil_time[profile_idx] , 0 , 99 , 1 , 10 ); antirecoil_horizontal[profile_idx] = edit_val( 3 , antirecoil_horizontal[profile_idx], 99 , 99 , 1 , 10 ); rate_of_fire[profile_idx] = edit_val( 4 , rate_of_fire[profile_idx] , 1 , 25 , 1 , 10 ); SmartTime = edit_val( 5 , SmartTime , 0 , 800 , 1 , 10 ); DYNATIME = edit_val( 6 , DYNATIME , 0 , 800, 1 , 10 ); DYNAMIN = edit_val( 7 , DYNAMIN , 0 , 200 , 1 , 10 ); RADIUS = edit_val( 8 , RADIUS , 0 , 99 , 1 , 10 ); STEPS = edit_val( 9 , STEPS , 0 , 99 , 1 , 10 ); STEADY_AIM = edit_val( 10 , STEADY_AIM , 0 , 90 , 1 , 10 ); stickyaim_size = edit_val( 11 , stickyaim_size , 0 , 50 , 1 , 10 ); stickyaim_time = edit_val( 12 , stickyaim_time , 0 , 990, 1 , 10 ); Aim_Boost = edit_val( 13 , Aim_Boost , 1 , 30 , 1 , 10 ); Aim_Correction = edit_val( 14 , Aim_Correction , 1 , 30 , 1 , 10 ); quickscopedelay = edit_val( 15 , quickscopedelay , 0 , 1200, 1 , 10 ); } else { if(event_press(PS4_RIGHT)) { valName_idx += 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 3; if(valName_idx > 3) valName_idx = 1; } display_new = TRUE; } if(event_press(PS4_LEFT)) { valName_idx -= 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 1; if(valName_idx < 1) valName_idx = 3; } display_new = TRUE; } trumpwall = toggle(valName_idx, 16, trumpwall ); borderhop = toggle(valName_idx, 17, borderhop ); safespace = toggle(valName_idx, 18, safespace ); trumptower = toggle(valName_idx, 19, trumptower ); if(modName_idx == 0) { if(toggle_antirecoil[profile_idx] == 2) vals_available( 1 , 3 ); else vals_available( 0 , 3 ); } if(modName_idx == 1) { if(toggle_rapidfire[profile_idx] == 1) vals_available( 4 , 4 ); else if(toggle_rapidfire[profile_idx] == 2) vals_available( 5 , 5 ); else if(toggle_rapidfire[profile_idx] == 3) vals_available( 6 , 7 ); } if(modName_idx == 2) vals_available( 8 , 10 ); if(modName_idx == 3) vals_available( 11 , 12 ); if(modName_idx == 4) vals_available( 13, 14 ); if(modName_idx == 5) vals_available( 15, 15 ); if(modName_idx == 6) vals_available( 16, 19 ); } } else { if(event_press(PS4_RIGHT)) { modName_idx += 1; display_new = TRUE; } if(event_press(PS4_LEFT)) { modName_idx -= 1; display_new = TRUE; } if(event_release(PS4_TRIANGLE)) { display_new = TRUE; } if(modName_idx > LAST_MODNAME_STRING) modName_idx = 0; if(modName_idx < 0) modName_idx = LAST_MODNAME_STRING; toggle_antirecoil[profile_idx] = toggle(modName_idx, 0, toggle_antirecoil[profile_idx] ); toggle_rapidfire[profile_idx] = toggle(modName_idx, 1, toggle_rapidfire[profile_idx] ); toggle_polaraim[profile_idx] = toggle(modName_idx, 2, toggle_polaraim[profile_idx] ); toggle_stickyaim[profile_idx] = toggle(modName_idx, 3, toggle_stickyaim[profile_idx] ); toggle_sweetevil[profile_idx] = toggle(modName_idx, 4, toggle_sweetevil[profile_idx] ); toggle_quickscope[profile_idx] = toggle(modName_idx, 5, toggle_quickscope[profile_idx] ); shot_mods[profile_idx] = toggle(modName_idx, 7, shot_mods[profile_idx] ); global_mods[profile_idx] = toggle(modName_idx, 8, global_mods[profile_idx] ); easy_mods[profile_idx] = toggle(modName_idx, 9, easy_mods[profile_idx] ); swap_mods[profile_idx] = toggle(modName_idx, 10, swap_mods[profile_idx] ); edit_mods[profile_idx] = toggle(modName_idx, 11, edit_mods[profile_idx] ); swap_on = toggle(modName_idx, 12, swap_on ); } } if(ModMenu) { if(!get_val(PS4_L2) && event_press(PS4_PS)) save(); block_btn(); if(event_press(PS4_TRIANGLE) && !ModEdit) { profile_idx += 1; display_new = TRUE; } if(profile_idx > (AMOUNT_OF_PROFILES - 1)) profile_idx = 0; } if(toggle_polaraim) { actual_X = get_val(X); actual_Y = get_val(Y); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if (!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Array[angle % 360]; cos_angle = Polar_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN)))) { vm_tctrl(VM_INTERVAL); if (actual_Magnitude <= RADIUS) { sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(X, calculate(actual_X + cos_angle, -100, 100)); set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); } else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) { vm_tctrl(0); } if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) { STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256); if (get_val(POLAR_RY) > 0) STEADY_VALUE = map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180); else STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180)); Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE); } } if(toggle_stickyaim) { if(get_val(AIM_BTN) || get_val(FIRE_BTN)) combo_run(STICKY_AIM); else combo_stop(STICKY_AIM); } if(toggle_sweetevil[profile_idx] == 1){ if(get_val(AIM_BTN)){ if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit){ if(abs(X_Last_Value - X_Current_Value) < 15){ combo_stop(Aim_Assist_Perfection); Sampling_Done = FALSE; if(get_val(FIRE_BTN) > 95){ combo_stop(Fine_Tune_Aim); fine_pulse = 0; combo_run(spiroide_Aim_Assit); } else{ combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; combo_run(Fine_Tune_Aim); } } } else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit){ combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; fine_pulse = 0; combo_run(Aim_Assist_Perfection); } } else { combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); combo_stop(Aim_Assist_Perfection); spiroide_pulse = 0; fine_pulse = 0; Sampling_Done = FALSE; } } if(!ModMenu) { if(swap_on) { swap(PS4_R1, PS4_R2); swap(PS4_L1, PS4_L2); } if(Hairtriggers == TRUE) { deadzone(PS4_L2,PS4_R2,99,99); } if(get_val(profile3_switch_button) && event_release(profile3_switch_button1)) { profile_idx = 2; profile_3 = !profile_3; display_title = TRUE; display_new = TRUE; } toggle_rapidfire[profile_idx] = speed_toggle( AIM_BTN, PS4_UP, toggle_rapidfire[profile_idx] , 1 ); toggle_quickscope[profile_idx] = speed_toggle( AIM_BTN, PS4_DOWN, toggle_quickscope[profile_idx], 5); if(toggle_quickscope[profile_idx] == 1) { if(event_press(AIM_BTN) && get_ptime(AIM_BTN) < 140) combo_run(Quick_Scope); } if(AutoMod_Jump == FALSE) { if(get_val(PS4_DOWN) && event_press(JUMP_BTN)) AutoMod_Jump = !AutoMod_Jump; } else if(AutoMod_Jump == TRUE) { if(get_val(PS4_DOWN) && event_press(JUMP_BTN)) AutoMod_Jump = !AutoMod_Jump; if(get_val(JUMP_BTN)) combo_run(JUMPY) } if(trumpwall) { if(get_val(BUILD_BTN) && (PS4_L1)) combo_run (TRUMP); if(event_release(BUILD_BTN)) combo_run(Buildreset); } if(borderhop) { if(get_val(BUILD_BTN) && (PS4_R1)) combo_run (BUNNYRAMP); if(event_release(BUILD_BTN)) combo_run(Buildreset); } if(safespace) { if(get_val(UNBOUND_BUTTON) && get_ptime(UNBOUND_BUTTON) > 500) combo_run (SAFE); if(event_release(UNBOUND_BUTTON)) combo_run (Buildreset); } if(AutoMod_Afk == FALSE) { if(get_val(PS4_DOWN) && event_press(PS4_OPTIONS)) AutoMod_Afk = !AutoMod_Afk; } else if(AutoMod_Afk == TRUE) { if(get_val(PS4_DOWN) && event_press(PS4_OPTIONS)) AutoMod_Afk = !AutoMod_Afk; if(AutoMod_Afk) combo_run(AFK); } if(trumptower) { if(get_val(PS4_SQUARE) && get_ptime(PS4_SQUARE) > 400) combo_run(RAMPFLOORWALL); if(event_release(PS4_SQUARE)) combo_run (Buildreset); } if(one_button_press) { if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(two_button_press) { if(get_ival(profile_switch_button2) && (event_press(profile_switch_button3))) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(!profile_3) { if(profile_1or2) profile_idx = 1; else profile_idx = 0; } } if(toggle_antirecoil[profile_idx]) { if(toggle_antirecoil[profile_idx] == 2) antirecoil_start = antirecoil_end; if(antirecoil_start < antirecoil_end) i_val = 1; else i_val = -1; i_pnt = (antirecoil_time * 10) / (abs(antirecoil_start - antirecoil_end)); if(!get_val(FIRE_BTN)) { ar_y = antirecoil_start; i_cnt = 0; i_num = 0; } if(get_val(FIRE_BTN)) { if(!p_complete()) ar_y = p_val(); else ar_y = antirecoil_end; if(y_val() < 100) set_val(PS4_RY,y_val()); combo_run(X_VAL); } if(abs(get_val(PS4_RX)) > abs(antirecoil_horizontal) + 5) combo_stop(X_VAL); } if(SmartAR == FALSE) { if(get_val(PS4_DOWN) && event_press(PS4_TRIANGLE)) SmartAR = !SmartAR; { set_rgb(0,255, 0) } } else if(SmartAR == TRUE) { if(get_val(PS4_DOWN) && event_press(PS4_TRIANGLE)) SmartAR = !SmartAR; if (get_ival(Ads) && get_ival(Fire)) VibroT += get_rtime(); smart_vertical = smart_recoil_vertical * -1; smart_horizontal = smart_recoil_horizontal; smart_add = smart_recoil_str - 100; if (get_rumble(RUMBLE_A) || get_rumble(RUMBLE_B)) { VibroA = (get_rumble(RUMBLE_A) * 255 / 100); VibroB = (get_rumble(RUMBLE_B) * 255 / 100); if (VibroA >= VibroB) Strength = (VibroA / 10); else Strength = (VibroB / 10); if (Strength > 10 && Strength < 90) { if(abs(get_val(PS4_RY)) < (Strength + smart_add + smart_vertical) && abs(get_val(PS4_RX)) < (Strength + smart_add + smart_horizontal)) { set_val(PS4_RY, (Strength + smart_add + smart_vertical)); } if (VibroT >= 20) { Strength = 0; VibroT = 0; } AntiRecoil(RY,smart_recoil_vertical + Strength); AntiRecoil(RX,smart_recoil_horizontal); } } { set_rgb(0,0,255) } } if(!SmartAR) { reset_script_var(); } if(QuickEdit == TRUE) { if(Horiz == TRUE && get_val(PS4_R2) && !get_val(PS4_L2)&& (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_horizontal = smart_recoil_horizontal + 1; combo_run(VIBRATE);} if(Horiz == TRUE && get_val(PS4_R2) && !get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_horizontal = smart_recoil_horizontal - 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smart_recoil_vertical = smart_recoil_vertical + 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_vertical = smart_recoil_vertical + 10; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smart_recoil_vertical = smart_recoil_vertical - 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_vertical = smart_recoil_vertical - 10; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smart_recoil_str = smart_recoil_str + 1; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_str = smart_recoil_str + 10; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smart_recoil_str = smart_recoil_str - 1; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_str = smart_recoil_str - 10; combo_run(VIBRATE);} } if(toggle_rapidfire[profile_idx] == 1) { hold_time = 500 / rate_of_fire; rest_time = hold_time - 20; if(rest_time < 0) rest_time = 0; if(get_val(FIRE_BTN)) combo_run(RAPIDFIRE); else combo_stop(RAPIDFIRE); led_on = 150; led_off = 300; combo_run(BLINK); } if(toggle_rapidfire[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(SMART_FIRE); } if(toggle_rapidfire[profile_idx] == 3 && get_val(FIRE_BTN)) { holdTime = DYNATIME - (get_val(FIRE_BTN) * 3); combo_run(DYNAMIC_FIRE); } if(display_new) { SCREENSAVER = FALSE; cls_oled(0); rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; if(ModEdit) { display_edit( 0 , center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0] , antirecoil_start[profile_idx] ); if(toggle_antirecoil[profile_idx] == 2) display_edit( 1 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_VERTICAL[0] , antirecoil_end[profile_idx] ); else display_edit( 1 , center_x(sizeof(ANTIRECOIL_END) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_END[0] , antirecoil_end[profile_idx] ); display_edit( 2 , center_x(sizeof(ANTIRECOIL_TIME) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_TIME[0] , antirecoil_time[profile_idx] ); display_edit( 3 , center_x(sizeof(ANTIRECOIL_HORIZONTAL)- 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx]); display_edit( 4 , center_x(sizeof(RATE_OF_FIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RATE_OF_FIRE[0] , rate_of_fire[profile_idx] ); display_edit( 5 , center_x(sizeof(SmartTIME) - 1, OLED_FONT_MEDIUM_WIDTH) , SmartTIME[0] , SmartTime ); display_edit( 6 , center_x(sizeof(DynamicTIME) - 1, OLED_FONT_MEDIUM_WIDTH) , DynamicTIME[0] , DYNATIME ); display_edit( 7 , center_x(sizeof(DynamicMIN) - 1, OLED_FONT_MEDIUM_WIDTH) , DynamicMIN[0] , DYNAMIN ); display_edit( 8 , center_x(sizeof(POLAR_RADIUS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_RADIUS[0] , RADIUS ); display_edit( 9 , center_x(sizeof(POLAR_STEPS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_STEPS[0] , STEPS ); display_edit( 10 , center_x(sizeof(STEADYAIMING) - 1, OLED_FONT_MEDIUM_WIDTH) , STEADYAIMING[0] , STEADY_AIM ); display_edit( 13 , center_x(sizeof(AIMBOOST) - 1,OLED_FONT_MEDIUM_WIDTH) , AIMBOOST[0] , Aim_Boost ); display_edit( 14 , center_x(sizeof(AIMCORRECTION) - 1,OLED_FONT_MEDIUM_WIDTH) , AIMCORRECTION[0] , Aim_Correction ); display_edit( 11 , center_x(sizeof(STICKYAIM_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_SIZE[0] , stickyaim_size ); display_edit( 12 , center_x(sizeof(STICKYAIM_TIME) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_TIME[0] , stickyaim_time ); display_edit( 15, center_x(sizeof(QUICKSCOPESPEED) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPESPEED[0] , quickscopedelay ); display_mod1( 16 , center_x(sizeof(TRUMPWALL) - 1, OLED_FONT_MEDIUM_WIDTH) , TRUMPWALL[0] , trumpwall ); display_mod1( 17 , center_x(sizeof(BORDERHOP) - 1, OLED_FONT_MEDIUM_WIDTH) , BORDERHOP[0] , borderhop ); display_mod1( 18 , center_x(sizeof(SAFESPACE) - 1, OLED_FONT_MEDIUM_WIDTH) , SAFESPACE[0] , safespace ); display_mod1( 19 , center_x(sizeof(TRUMPTOWER) - 1, OLED_FONT_MEDIUM_WIDTH) , TRUMPTOWER[0] , trumptower ); if(valName_idx < AMOUNT_OF_VAL_IN_ARRAY) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } else { display_mod ( 0 , center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]); display_mod ( 1 , center_x(sizeof(RAPIDFIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RAPIDFIRE[0] , toggle_rapidfire[profile_idx] ); display_mod ( 2 , center_x(sizeof(POLARAIM) - 1, OLED_FONT_MEDIUM_WIDTH) , POLARAIM[0] , toggle_polaraim[profile_idx] ); display_mod ( 3 , center_x(sizeof(STICKYAIM) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM[0] , toggle_stickyaim[profile_idx] ); display_mod ( 4 , center_x(sizeof(SWEETEVIL) - 1, OLED_FONT_MEDIUM_WIDTH) , SWEETEVIL[0] , toggle_sweetevil[profile_idx]); display_mod ( 5 , center_x(sizeof(QUICKSCOPE) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPE[0] , toggle_quickscope[profile_idx]); display_mod2( 6 , center_x(sizeof(BUILD_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , BUILD_MODS[0] ); display_mod ( 7 , center_x(sizeof(SHOT_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , SHOT_MODS[0] , shot_mods [profile_idx]); display_mod ( 8 , center_x(sizeof(GLOBAL_MODS)- 1, OLED_FONT_MEDIUM_WIDTH) , GLOBAL_MODS[0] , global_mods[profile_idx]); display_mod ( 9 , center_x(sizeof(EASY_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , EASY_MODS[0] , easy_mods [profile_idx]); display_mod ( 10 , center_x(sizeof(SWAP_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , SWAP_MODS[0] , swap_mods [profile_idx]); display_mod ( 11 , center_x(sizeof(EDIT_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , EDIT_MODS[0] , edit_mods [profile_idx]); display_mod ( 12 , center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH) , SWAP[0] , swap_on ); if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } display_black = TRUE; display_new = FALSE; } } if(display_title) { cls_oled(0); SCREENSAVER = FALSE; rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; if(KillSwitch) { printf(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8 ,OLED_FONT_MEDIUM,OLED_WHITE,MUTE [0]); printf(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH) ,38,OLED_FONT_SMALL ,OLED_WHITE,HOLD [0]); printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH) ,50,OLED_FONT_SMALL ,OLED_WHITE,ACTIVE[0]); } else { printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]); if(profile_3) { printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); } else display_profile (); display_black = TRUE; } display_title = FALSE; } if(display_black && !ModMenu && !KillSwitch) { count_black += get_rtime(); if(count_black >= 7000) { cls_oled(0); count_black = 0; display_black = FALSE; SCREENSAVER = TRUE; } } if (SCREENSAVER) { DGT += get_rtime(); if (DGT >= 100) { SD1 += 2; TP1 += 1; TP2 -= 1; DGT = 0; } DGR += get_rtime(); if (DGR >= 30) { Y_1 += 1; Y_2 += 2; Y_3 += 3; Y_4 += 4; Y_5 += 5; Y_6 += 6; Y_7 += 7; Y_8 += 8; DGR = 0; } NAME(); MSC += get_rtime(); if(MSC >= 1000) { MSC = 0; RT += 1; } if(RT == 90) { SCREENSAVER = 0; RT = 0; cls_oled(0); } } if(KillSwitch) led(7); else led(profile_idx); } combo STICKY_AIM { set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size)); wait(stickyaim_time); set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size)); set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size)); wait(stickyaim_time); set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1)); wait(stickyaim_time); set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1)); set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1)); wait(stickyaim_time); } combo RUMBLE_ON { set_ledx(2, 2); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); wait(100); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); } combo RUMBLE_OFF { set_ledx(1, 1); set_rumble(RUMBLE_A, 50); wait(300); reset_rumble(); wait(400); } combo RACE { X_1 = random(0,127); wait(SAVER1); X_2 = random(0,127); wait(SAVER1); X_3 = random(0,127); wait(SAVER1); X_4 = random(0,127); wait(SAVER1); X_5 = random(0,127); wait(SAVER1); X_6 = random(0,127); wait(SAVER1); X_7 = random(0,127); wait(SAVER1); X_8 = random(0,127); wait(SAVER1); } combo RN { RN1 = random(65,90); RN2 = random(60,90); RN3 = random(65,90); RN4 = random(65,90); RN5 = random(65,90); RN6 = random(65,90); RN7 = random(65,90); RN8 = random(65,90); wait(SAVER); } combo SAVE { cls_oled(0); printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); wait(10) call(RUMBLE_ON); wait(150); call(RUMBLE_ON); wait(1000); display_new = TRUE; } combo BLINK { led(profile_idx); wait(led_on); led(7); wait(led_off); } combo RAPIDFIRE { wait(hold_time); set_val(FIRE_BTN, 0); wait(rest_time); } combo X_VAL { x_ref = get_val(PS4_RX) + antirecoil_horizontal; if(x_ref > 100) x_ref = 100; set_val(PS4_RX, x_ref); } combo Quick_Scope { set_val(AIM_BTN,100); wait(quickscopedelay); set_val(AIM_BTN,100); set_val(FIRE_BTN,100); wait(200); set_val(AIM_BTN,100); wait(200); } combo SMART_FIRE { set_val(FIRE_BTN,100); wait(100); set_val(FIRE_BTN, 0); wait(SmartTime); set_val(FIRE_BTN,100); } combo DYNAMIC_FIRE { set_val(FIRE_BTN,100); wait(holdTime); set_val(FIRE_BTN,0); wait(DYNAMIN); } combo auto_ping { set_val(PING_BTN,100); wait(50); set_val(PING_BTN,0); wait(10); set_val(PING_BTN,100); wait(50); set_val(PING_BTN,0); wait(pingtime); } combo SWAP1 { wait(50); set_val(SWAP1_BTN, 100); wait(50); set_val(SWAP1_BTN, 0); } combo SWAP2 { wait(50); set_val(SWAP2_BTN, 100); wait(50); set_val(SWAP2_BTN, 0); } combo crouch_shot { wait(crouchdelay); set_val(CROUCH_BTN,100); wait(50); set_val(CROUCH_BTN,0); } combo strafe_shot { wait(strafedelay); set_val(PS4_LX, 100); wait(strafetime); set_val(PS4_LX, -100); wait(strafetime); } combo AUTORELOAD { wait(300); set_val(RELOAD_BTN,100); wait(50); set_val(RELOAD_BTN,0); } combo jump_shot { wait(jumpdelay); set_val(JUMP_BTN, 100); wait(50); set_val(JUMP_BTN, 0); wait(jumptime); } combo JUMPY{ wait(jumpdelay); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); } combo ABUSE { set_val(AIM_BTN, 100); wait(aimabuse_hold); set_val(AIM_BTN, 0); wait(aimabuse_rest); } combo TRUMP { wait(200); set_val(FIRE_BTN, 100); wait(40); set_val(FIRE_BTN, 0); wait(50); } combo SAFE { wait(20); set_val(BUILD_BTN, 100); wait(30); set_val(AIM_Y, 100); wait(30); set_val(FIRE_BTN, 100); set_val(AIM_X, 100); wait(430); set_val(AIM_Y, -60); wait(50); set_val(AIM_Y, -100); wait(120); set_val(NEXT, 100); wait(40); set_val(AIM_Y, 100); wait(120); set_val(BUILD_BTN, 100); wait(30); } combo AFK { set_val(PS4_TRIANGLE, 100); wait(90); set_val(PS4_TRIANGLE, 0); wait(400); set_val(PS4_L2, 100); wait(90); set_val(PS4_L2, 0); wait(400); set_val(PS4_CROSS, 100); wait(100); set_val(PS4_CROSS, 0); wait(400); set_val(PS4_CIRCLE, 100); wait(100); set_val(PS4_CIRCLE, 0); wait(410); set_val(PS4_TRIANGLE, 100); wait(90); set_val(PS4_TRIANGLE, 0); wait(400); set_val(PS4_L2, 100); wait(90); set_val(PS4_L2, 0); wait(400); set_val(PS4_CROSS, 100); wait(1200); set_val(PS4_CROSS, 0); wait(400); set_val(PS4_CIRCLE, 100); wait(100); set_val(PS4_CIRCLE, 0); wait(15000); set_val(PS4_CIRCLE, 100); wait(1000); } combo VIBRATE { set_rumble(RUMBLE_A,40); wait(150); reset_rumble (); } combo Buildreset { wait(200); set_val(BUILD_BTN, 100); wait(50); set_val(BUILD_BTN, 0); } combo CONFIRM { set_val(BUILD_BTN,100); wait(50); set_val(BUILD_BTN,0); wait(100); } combo RESET { wait(320); set_val(BUILD_BTN, 100); wait(50); set_val(BUILD_BTN, 0); wait(300); set_val(RESET_BTN,100); wait(12) set_val(RESET_BTN,0); wait(12); } combo EDIT { wait(100); set_val(BUILD_BTN, 0); wait(quickeditTime); combo_run(CONFIRM); } combo EDIT_SHOT { set_val(BUILD_BTN, 100); wait(300); set_val(BUILD_BTN, 0); wait(100); set_val(FIRE_BTN,100); wait(100); set_val(FIRE_BTN,0); wait(200); combo_run(CONFIRM); } combo RAMPFLOORWALL { set_val(STAIRS, 100); wait(700); set_val(FLOOR, 100); wait(250); set_val(WALL, 100); wait(110); } combo BUNNYRAMP { set_val(JUMP_BTN,100); wait(50); set_val(FLOOR,100); wait(50); set_val(STAIRS,100); wait(50); } combo Aim_Assist_Perfection{ X_Last_Value = X_Current_Value Y_Last_Value = Y_Current_Value wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate; Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate; if (Sampling_Done == TRUE ){ Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 );} X_Last_Value = X_Current_Value; Y_Last_Value = Y_Current_Value; wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate; Y_Current_Value = get_lval(PS4_RY)- RX_Axis_Joystick_calibrate; if (Sampling_Done == TRUE ){ Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 );} Sampling_Done = TRUE; wait(Sampling_Time); } combo Fine_Tune_Aim { set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_LX,(-15 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(10 - fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time) wait(Sampling_Time) set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_LX,(15 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(-10 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); fine_pulse = fine_pulse + 2; if ( fine_pulse >10){ fine_pulse = 0;} } combo spiroide_Aim_Assit { set_val(PS4_RX,(4 + spiroide_pulse)); set_val(PS4_LX,(-15+ spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-4 - spiroide_pulse)); set_val(PS4_LX,15 - spiroide_pulse ); wait(Sampling_Time); wait(Sampling_Time) set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); spiroide_pulse = spiroide_pulse + 2; if ( spiroide_pulse >10){ spiroide_pulse = 0;} } function xy_val(f_axis,f_val) { if(abs(get_val(f_axis)) < stickyaim_size + 1) return f_val; return get_val(f_axis); } int sin_angle1,cos_angle1; function Set_polar1(stick,angle,radius,offset) { if (angle < 0) angle = 360 + (angle % 360); angle = (angle + 90) % 360; sin_angle1 = data1[angle]; cos_angle1 = data1[(angle + 90) % 360]; if (offset) { offset1(7 + stick, (cos_angle1 * radius) / 100); offset1(8 + stick, (sin_angle1 * radius) / 100); } else { set_val(7 + stick, (cos_angle1 * radius) / 100); set_val(8 + stick, (sin_angle1 * radius) / 100); } return; } function atan2(y, x) { if (x >= 0 && y > 0) angle_Out = -90; else if (x < 0 && y >= 0) angle_Out = 90; else if (x <= 0 && y < 0) angle_Out = -270; else angle_Out = 270; x = abs(x); y = abs(y); if (x < y) angle_Out += (x * 45 / y); else if (x > y) angle_Out += 90 - (y * 45 / x); else angle_Out += 45; angle_Out = abs(angle_Out % 360); return (angle_Out); } function offset1(axis,offset_val) { set_val(axis,clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100)); return; } function map (inMin,inMax,outMin,outMax,x) { return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin; } function calculate(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) { if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit){ if(Last_Value < Current_Value){ if (Boost){ if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Boost));} else if(Correction){ if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Correction));}} else{ if (Boost){ if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Boost));} else if(Correction){ if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Correction));}}} } function p_complete() { i_cnt++; if(i_cnt > antirecoil_time * 10) { i_cnt = antirecoil_time * 10; return 1; } return 0; } function p_val() { i_num++; if(i_num == i_pnt) { i_num = 0; ar_y += i_val; } return ar_y; } function y_val() { v = get_val(PS4_RY); if(abs(v) < 10) v = 0; if(abs(v) > abs(ar_y + 5)) return v; return v + ar_y; } function vals_available(f_min, f_max) { if(valName_idx < f_min) valName_idx = f_max; if(valName_idx > f_max) valName_idx = f_min; } int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8; function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) { if(valName_idx == f_idx) { f_val = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); f_val = value_change( f_val ,PS4_RIGHT, f_inc1 , f_min, f_max ); f_val = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); f_val = value_change( f_val ,PS4_UP , f_inc2 , f_min, f_max ); } return f_val; } function toggle(f_var, f_idx, f_val) { if(event_press(PS4_UP)) { if(f_var == f_idx) { if(modName_idx == 0 || modName_idx == 2) { f_val += 1; if(f_val > 2) f_val = 0; if(f_val < 0) f_val = 2; } else if(modName_idx == 1) { f_val += 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 7) { f_val += 1; if(f_val > 5) f_val = 0; if(f_val < 0) f_val = 5; } else if(modName_idx == 8) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 9) { f_val += 1; if(f_val > 4) f_val = 0; if(f_val < 0) f_val = 4; } else if(modName_idx == 10) { f_val += 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 11) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else f_val = 1; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } if(event_press(PS4_DOWN)) { if(f_var == f_idx) { if(modName_idx == 0 || modName_idx == 2) { f_val -= 1; if(f_val > 2) f_val = 0; if(f_val < 0) f_val = 2; } else if(modName_idx == 1) { f_val -= 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 7) { f_val -= 1; if(f_val > 5) f_val = 0; if(f_val < 0) f_val = 5; } else if(modName_idx == 8) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 9) { f_val -= 1; if(f_val > 4) f_val = 0; if(f_val < 0) f_val = 4; } else if(modName_idx == 10) { f_val -= 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 11) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else f_val = 0; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } return f_val; } function speed_toggle(f_hold, f_press, f_val, f_string) { if(get_val(f_hold)) { if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 50)) { modName_idx = f_string; if(f_val == 0) { f_val = 1; combo_run(RUMBLE_ON); } else { f_val = 0; combo_run(RUMBLE_OFF); } display_new = TRUE; } set_val(f_press, 0) } return f_val; } function display_profile() { if(display_title) { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 34; } if(display_new) { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 23; } if(profile_idx == 0) printf(center_x(sizeof(PROFILE_1) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_1[0]); else if(profile_idx == 1) printf(center_x(sizeof(PROFILE_2) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_2[0]); else if(profile_idx == 2) printf(center_x(sizeof(PROFILE_3) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_3[0]); } function AntiRecoil(Input,Power) { set_val(Input,(Power * (100 - abs(get_ival(Input)))) / 100 + get_ival(Input)); } function display_edit(f_idx, f_string, f_print, f_val) { if(valName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); number_to_string(f_val, find_digits(f_val)); } } function NAME(){ cls_oled(0); combo_run(RACE); combo_run(RN); if (Y_1 > 64) Y_1 = 0; if (Y_2 > 64) Y_2 = 0; if (Y_3 > 64) Y_3 = 0; if (Y_4 > 64) Y_4 = 0; if (Y_5 > 64) Y_5 = 0; if (Y_6 > 64) Y_6 = 0; if (Y_7 > 64) Y_7 = 0; if (Y_8 > 64) Y_8 = 0; if (SD1 > 105) SD1 = -50; if (TP1 > 45) TP1 = 0; if (TP2 < 0) TP2 = 55; putc_oled(1,RN1); puts_oled(X_1,Y_1,0,1,1); putc_oled(1,RN2); puts_oled(X_2,Y_2,0,1,1); putc_oled(1,RN3); puts_oled(X_3,Y_3,0,1,1); putc_oled(1,RN4); puts_oled(X_4,Y_4,0,1,1); putc_oled(1,RN5); puts_oled(X_5,Y_5,0,1,1); putc_oled(1,RN6); puts_oled(X_6,Y_6,0,1,1); putc_oled(1,RN7); puts_oled(X_7,Y_7,0,1,1); putc_oled(1,RN8); puts_oled(X_8,Y_8,0,1,1); putc_oled(1,SSA1); puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1); putc_oled(1,SSA2); puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1); putc_oled(1,SSA3); puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1); putc_oled(1,SSA4); puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1); putc_oled(1,SSA5); puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1); putc_oled(1,SSA6); puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1); putc_oled(1,SSA7); puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1); putc_oled(1,SSA8); puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1); } function display_mod(f_idx, f_string, f_print, f_toggle) { if(modName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_idx == 0) { if(f_toggle == 1) printf(center_x(sizeof(PROGRESS) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PROGRESS[0]); else if(f_toggle == 2) printf(center_x(sizeof(STANDARD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STANDARD[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 1) { if(f_toggle == 1) printf(center_x(sizeof(Rapid_Fire) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Rapid_Fire[0]); else if(f_toggle == 2) printf(center_x(sizeof(SmartFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SmartFIRE[0]); else if(f_toggle == 3) printf(center_x(sizeof(DynamicFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DynamicFIRE[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 7) { if(f_toggle == 1) printf(center_x(sizeof(STRAFESHOT) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STRAFESHOT[0]); else if(f_toggle == 2) printf(center_x(sizeof(CROUCHSHOT) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,CROUCHSHOT[0]); else if(f_toggle == 3) printf(center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,JUMPSHOT[0]); else if(f_toggle == 4) printf(center_x(sizeof(JUMPSTRAFE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,JUMPSTRAFE[0]); else if(f_toggle == 5) printf(center_x(sizeof(DROPSTRAFE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DROPSTRAFE[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 8) { if(f_toggle == 1) printf(center_x(sizeof(PINGONFIRE) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PINGONFIRE[0]); else if(f_toggle == 2) printf(center_x(sizeof(AUTO_RELOAD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AUTO_RELOAD[0]); else if(f_toggle == 3) printf(center_x(sizeof(AIMABUSE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AIMABUSE[0]); else if(f_toggle == 4) printf(center_x(sizeof(PINGRELOAD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PINGRELOAD[0]); else if(f_toggle == 5) printf(center_x(sizeof(PINGABUSE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PINGABUSE[0]); else if(f_toggle == 6) printf(center_x(sizeof(RELOADABUSE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,RELOADABUSE[0]); else if(f_toggle == 7) printf(center_x(sizeof(ALLGLOBALON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLGLOBALON[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 9) { if(f_toggle == 1) printf(center_x(sizeof(EASYAIM) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EASYAIM[0]); else if(f_toggle == 2) printf(center_x(sizeof(ADSFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ADSFIRE[0]); else if(f_toggle == 3) printf(center_x(sizeof(CROUCHAIM) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,CROUCHAIM[0]); else if(f_toggle == 4) printf(center_x(sizeof(DROPAIMFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DROPAIMFIRE[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 10) { if(f_toggle == 1) printf(center_x(sizeof(SWAPSHOT1) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SWAPSHOT1[0]); else if(f_toggle == 2) printf(center_x(sizeof(SWAPSHOT2) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SWAPSHOT2[0]); else if(f_toggle == 3) printf(center_x(sizeof(ALLSWAP) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLSWAP[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else if(f_idx == 11) { if(f_toggle == 1) printf(center_x(sizeof(QUICKEDIT) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,QUICKEDIT[0]); else if(f_toggle == 2) printf(center_x(sizeof(PEEKABOO) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PEEKABOO[0]); else if(f_toggle == 3) printf(center_x(sizeof(FASTRESET) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,FASTRESET[0]); else if(f_toggle == 4) printf(center_x(sizeof(EDITRESET) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EDITRESET[0]); else if(f_toggle == 5) printf(center_x(sizeof(PEEKRESET) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PEEKRESET[0]); else if(f_toggle == 6) printf(center_x(sizeof(EDITPEEK) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EDITPEEK[0]); else if(f_toggle == 7) printf(center_x(sizeof(ALLEDITON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLEDITON[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } else { if(f_toggle == 1) printf(center_x(sizeof(On) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,On[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } } } int RT,MSC,SD1,DGT,DGR,TP1,TP2; function display_mod1(f_idx, f_string, f_print, f_toggle) { if(valName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_toggle == 1) printf(center_x(sizeof(On) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,On[0]); else printf(center_x(sizeof(Off) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,Off[0]); } } function display_mod2(f_idx, f_string, f_print) { if(modName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]); } } function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { if(press_hold(f_btn)) { f_val += f_inc; if(valName_idx >= AMOUNT_OF_VAL_IN_ARRAY) { if(f_val < inv(f_rng_min)) f_val = inv(f_rng_min); if(f_val > f_rng_max) f_val = f_rng_max; } if(valName_idx <= AMOUNT_OF_VAL_IN_ARRAY) { if(f_val < inv(f_rng_min)) f_val = inv(f_rng_min); if(f_val > f_rng_max) f_val = f_rng_max; } display_new = TRUE; } return f_val; } function double_click(button) { if (double__tap[button] >= 0) { double__tap[button] += get_rtime(); if (double__tap[button] > 450) double__tap[button] = -1; } if (event_release(button) && get_ptime(button) <= 200) { if (double__tap[button] < 0) { double__tap[button] = 0; } else { double__tap[button] = -1; return 1; } } return 0; } function number_to_string(f_val,f_digits) { i = 1; c_val = 10000; if(f_val < 0) { putc_oled(i,45); i += 1; f_val = abs(f_val); } for(c = 5; c >= 1; c--) { if(f_digits >= c) { putc_oled(i,ASCII_NUM[f_val / c_val]); f_val = f_val % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } if(display_title) puts_oled(120, 34, OLED_FONT_SMALL, i - 1, OLED_WHITE); else puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); } function find_digits(f_num) { f_num = abs(f_num); if(f_num / 10000 > 0) return 5; if(f_num / 1000 > 0) return 4; if(f_num / 100 > 0) return 3; if(f_num / 10 > 0) return 2; return 1; } function center_x(f_chars,f_font) { return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); } function center_y(f_size) { return (OLED_HEIGHT / 2) - (f_size / 2); } function press_hold(f_btn) { return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 && get_ptime(f_btn) % (get_rtime() * 8) == 0; } function led(f_color) { for(i = 0; i <= 3; i++) { set_led(i,duint8((f_color * 4) + i)); } } int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; function save () { combo_run(SAVE); set_pvar(SPVAR_1,toggle_antirecoil[0] ); set_pvar(SPVAR_5 ,antirecoil_start[0] ); set_pvar(SPVAR_2,toggle_rapidfire[0] ); set_pvar(SPVAR_6 ,antirecoil_end[0] ); set_pvar(SPVAR_45,toggle_stickyaim[0] ); set_pvar(SPVAR_7,antirecoil_time[0] ); set_pvar(SPVAR_3,toggle_polaraim[0] ); set_pvar(SPVAR_8,antirecoil_horizontal[0]); set_pvar(SPVAR_4,toggle_quickscope[0] ); set_pvar(SPVAR_9,rate_of_fire[0] ); set_pvar(SPVAR_10,toggle_antirecoil[1]); set_pvar(SPVAR_14,antirecoil_start[1] ); set_pvar(SPVAR_11,toggle_rapidfire[1] ); set_pvar(SPVAR_15,antirecoil_end[1] ); set_pvar(SPVAR_46,toggle_stickyaim[1] ); set_pvar(SPVAR_16,antirecoil_time[1] ); set_pvar(SPVAR_12,toggle_polaraim[1] ); set_pvar(SPVAR_17,antirecoil_horizontal[1]); set_pvar(SPVAR_13,toggle_quickscope[1]); set_pvar(SPVAR_18,rate_of_fire[1] ); set_pvar(SPVAR_19,toggle_antirecoil[2]); set_pvar(SPVAR_23,antirecoil_start[2] ); set_pvar(SPVAR_20,toggle_rapidfire[2] ); set_pvar(SPVAR_24,antirecoil_end[2] ); set_pvar(SPVAR_47,toggle_stickyaim[2] ); set_pvar(SPVAR_25,antirecoil_time[2] ); set_pvar(SPVAR_21,toggle_polaraim[2] ); set_pvar(SPVAR_26,antirecoil_horizontal[2]); set_pvar(SPVAR_22,toggle_quickscope[2]); set_pvar(SPVAR_27,rate_of_fire[2] ); set_pvar(SPVAR_28,stickyaim_size ); set_pvar(SPVAR_29,stickyaim_time ); set_pvar(SPVAR_30,RADIUS ); set_pvar(SPVAR_31,STEPS ); set_pvar(SPVAR_32,STEADY_AIM ); set_pvar(SPVAR_33,quickscopedelay); set_pvar(SPVAR_34, Aim_Boost ); set_pvar(SPVAR_35, Aim_Correction ); set_pvar(SPVAR_41,SmartTime ); set_pvar(SPVAR_42,DYNATIME ); set_pvar(SPVAR_43,DYNAMIN ); set_pvar(SPVAR_36,easy_mods ); set_pvar(SPVAR_37,global_mods ); set_pvar(SPVAR_38,swap_mods ); set_pvar(SPVAR_39,edit_mods ); set_pvar(SPVAR_40,global_mods ); } function block_btn() { set_val(PS4_UP , 0 ); set_val(PS4_DOWN , 0 ); set_val(PS4_LEFT , 0 ); set_val(PS4_RIGHT , 0); set_val(PS4_CROSS , 0 ); set_val(PS4_CIRCLE, 0 ); set_val(PS4_SQUARE, 0 ); set_val(PS4_TRIANGLE, 0); set_val(PS4_L1 , 0 ); set_val(PS4_R1 , 0 ); set_val(PS4_L3 , 0 ); set_val(PS4_R3 , 0); set_val(PS4_OPTIONS, 0 ); set_val(PS4_SHARE , 0 ); set_val(PS4_TOUCH , 0 ); set_val(PS4_PS , 0); set_val(XB1_PL1 , 0 ); set_val(XB1_PL2 , 0 ); set_val(XB1_PR1 , 0 ); set_val(XB1_PR2 , 0); } function SHOT_MODS() { if((shot_mods == 1 && HipFireStrafeONLY == FALSE) ||(shot_mods == 4 && HipFireStrafeONLY == FALSE) ||(shot_mods == 5 && HipFireStrafeONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (strafe_shot); } if((shot_mods == 1 && HipFireStrafeONLY == TRUE) ||(shot_mods == 4 && HipFireStrafeONLY == TRUE) ||(shot_mods == 5 && HipFireStrafeONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (strafe_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (strafe_shot); } if((shot_mods == 2 && HipFireCrouchONLY == FALSE) ||(shot_mods == 5 && HipFireCrouchONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (crouch_shot); } if((shot_mods == 2 && HipFireCrouchONLY == TRUE) ||(shot_mods == 5 && HipFireCrouchONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (crouch_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (crouch_shot); } if((shot_mods == 3 && HipFireJumpONLY == FALSE) ||(shot_mods == 4 && HipFireJumpONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (jump_shot); } if((shot_mods == 3 && HipFireJumpONLY == TRUE) ||(shot_mods == 4 && HipFireJumpONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (jump_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (jump_shot); } } function GLOBAL_MODS() { if((global_mods == 1) ||(global_mods == 4) ||(global_mods == 5) ||(global_mods == 7)) { if(get_val(FIRE_BTN) && (AIM_BTN)) combo_run(auto_ping); } if((global_mods == 2) ||(global_mods == 4) ||(global_mods == 6) ||(global_mods == 7)) { if(event_release(FIRE_BTN)) combo_run(AUTORELOAD); } if((global_mods == 3) ||(global_mods == 5) ||(global_mods == 6) ||(global_mods == 7)) { if (get_val(AIM_BTN)>95) { aimabuse_hold = aimabusehold; aimabuse_rest = aimabuserest; combo_run(ABUSE); } else if (combo_running(ABUSE)) { combo_stop(ABUSE); } } } function EASY_MODS() { if((global_mods == 1) ||(global_mods == 4)) { if(get_val(FIRE_BTN) && get_ptime(FIRE_BTN) > 200) set_val(AIM_BTN, 100); if(event_release(FIRE_BTN)) set_val(AIM_BTN, 0); } if(global_mods == 2) { if(get_val(AIM_BTN) && get_ptime(AIM_BTN) > 200) set_val(FIRE_BTN, 100); if(event_release(AIM_BTN)) set_val(FIRE_BTN, 0); } if((global_mods == 3) ||(global_mods == 4)) { if(event_press(AIM_BTN) && get_ptime(AIM_BTN) > 200) combo_run(crouch_shot); if(event_release(AIM_BTN)) combo_run(crouch_shot); } } function SWAP_MODS() { if((global_mods == 1) ||(global_mods == 3)) if(event_release(FIRE_BTN)) { rb_lb_swap = !rb_lb_swap if(!rb_lb_swap){ combo_run(SWAP1); } else{ combo_run(SWAP2); } } if((global_mods == 2) ||(global_mods == 3)) if(event_release(FIRE_BTN)) { rb_lb_swap = !rb_lb_swap if(!rb_lb_swap){ combo_run(SWAP2); } else{ combo_run(SWAP1); } } } function EDIT_MODS() { if((edit_mods == 1) ||(edit_mods == 4) ||(edit_mods == 6) ||(edit_mods == 7)) { if(get_val(BUILD_BTN) && get_ptime(BUILD_BTN) > 400) combo_run (EDIT); } if((edit_mods == 2) ||(edit_mods == 5) ||(edit_mods == 6) ||(edit_mods == 7)) { if(double_click(BUILD_BTN)) combo_run (EDIT_SHOT); } if((edit_mods == 3) ||(edit_mods == 4) ||(edit_mods == 5) ||(edit_mods == 7)) { if(get_val(EDIT_BTN) && get_val(BUILD_BTN)) combo_run (RESET); if(event_release(EDIT_BTN) && (BUILD_BTN)) combo_run (Buildreset); } } function reset_script_var() { smart_recoil_vertical = 25; smart_recoil_str = 120; smart_recoil_horizontal = 0; }