																																																																																			/*
   _____    _____            _   _   _   _              _           _       ______                  _             _   _                 _____                 _           _   
  / ____|  / ____|          | \ | | (_) | |            | |         (_)     |  ____|                | |           (_) | |               / ____|               (_)         | |  
 | (___   | (___            |  \| |  _  | | __   ___   | |   __ _   _      | |__      ___    _ __  | |_   _ __    _  | |_    ___      | (___     ___   _ __   _   _ __   | |_ 
  \___ \   \___ \           | . ` | | | | |/ /  / _ \  | |  / _` | | |     |  __|    / _ \  | '__| | __| | '_ \  | | | __|  / _ \      \___ \   / __| | '__| | | | '_ \  | __|
  ____) |  ____) |          | |\  | | | |   <  | (_) | | | | (_| | | |     | |      | (_) | | |    | |_  | | | | | | | |_  |  __/      ____) | | (__  | |    | | | |_) | | |_ 
 |_____/  |_____/           |_| \_| |_| |_|\_\  \___/  |_|  \__,_| |_|     |_|       \___/  |_|     \__| |_| |_| |_|  \__|  \___|     |_____/   \___| |_|    |_| | .__/   \__|
                    ______                                                                                                                                       | |          
                   |______|                                                                                                                                      |_|          
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   Note From CHI CHI / ErickCHIN
	- UP & DOWN to select the value to edit.
	- LEFT & RIGHT to increase or decrease selected value
	- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			Credits To The Following People Below :
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Chi Chi for Mod Menu
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Sweet_Evil for his Save & Load Values Propely Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - ItzSnack for Rapid Fire, Drop shot & Anti Recoil
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - DjangoKill for Chicken Mod idea
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Crescens For Aim Sensitivity Corrections
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - DoGzTheFiGhTeRz Polar Aim Assist With Radius and Angle Boost Option
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - DoNotAtMe For His Zen Eye Colour Pulsing & Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - TaylorDrift For Customizing DNAM Polar With Shapes
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Me, SS_Nikolai for putting all this together & Coding some of the build mods
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																																																																			*/

//--BUTTONS ( Customize To Your Layout )
    define FIRE      		  = PS4_R2;
    define ADS       		  = PS4_L2;
    define PREVIOUS  		  = PS4_L1;
    define NEXT      		  = PS4_R1;
    define SPRINT    		  = PS4_L3;
    define CROUCH    		  = PS4_R3;
	define PICKAXE   		  = PS4_TRIANGLE;
    define BUILD     		  = PS4_CIRCLE;
    define JUMP      		  = PS4_CROSS;
    define RELOAD    		  = PS4_SQUARE;
	define AIM_X	 		  = PS4_RX;
	define AIM_Y	 		  = PS4_RY;
	define STRAFE 	 		  = PS4_LX;
	define WALK 	 		  = PS4_LY;
//--Polar Radius and Angle Booster
	int RadiusBoost    		  =  TRUE;
	int AngleBoost     		  =  TRUE;

//--Button Pressed Once To Instantly Reset A Build ( Make Sure Button Is UNBOUND In-Game )
	define UNBOUND_BUTTON  	  = PS4_RIGHT;

//--Ramp Floor Wall Button
	define RFW_Button 		  = PS4_SQUARE;

//--EDIT BUTTON IN GAME CANNOT HAVE HOLD TIME (USED AS EDIT ASSIST BUTTON)
	define EDIT_ASSIST_BUTTON = PS4_L3;
	define EditDelay       	  =     30; //DELAY BEFORE EDIT ASSIST BUTTON TRIGGERS HOLDING OF FIRE

//--Quick Toggle Button Combos
	define RAPID_FIRE_BUTTON  =    PS4_LEFT;	// ADS + This Button To Activate Rapid Fire
	define DROP_SHOT_BUTTON   =    PS4_DOWN;	// ADS + This Button To Activate Drop Shot
	define MENU_OPEN_BUTTON   = PS4_OPTIONS;	// ADS + This Button To Open Menu

//--This sets the color for your PS4 Light Bar - Minimum = 0 - Maximum = 255 - Google RGB Color Picker for your own color
	define PS4_Light_Bar	  = FALSE; // <---- Enable ONLY if you using a PS4 controller
	define Blue    			  =   150;
	define Red     			  =   175;
	define Green   			  =    20;

//--Variables ( Leave Alone )
	int ANTI_RECOIL;
	int PolarRadius;
	int PolarAngle;
	int PolarRBoost;
	int PolarABoost;
	int DropShotSpeed
	int Polar_Radius;
	int Polar_Angle;
	int Radius_Min;
	int in_game_menu_sens;
	int rapid_fire_speed;

	int wait_time_correction;
	int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;
	int anti_recoil;
	int ptime;
	int Edit1;
	int EditT;
	int Radius, Angle, Speed;
	int SHUNT;
	int tap; 
	int R2_block;
	int frame;
	int bufferindex_1;
	int Stick_Drift_Removal;
	int charindex_1, digitindex_1;
	int RX, RY, angleee, CosAngle, SinAngle, SpiralPosition1, SpiralPosition2, InnerSpiral, OuterSpiral, ActualMagnitude, MaxMagnitude;
	int Position;
	int BuildMode 		 = FALSE;
	int INC 			 = 0x1, DEC, COLOUR[0x3];
	int color 			 = 0x1; 
	define MAX_DRIFT 	 = 0xC;

//--Menu Stuff ( Leave Alone )	
	int ZS;
	int c_b;
	int display 	 = TRUE;
	int ss 		 	 = TRUE;
	int sel 		 = 0x1;
	int tab 		 = 0x0;
	int mod 		 = 0x1;
	define NumofMods = 0xF;

//--Toggles
int Polar_Aim_Assist;
int DoNotAtME_Polar;
int Aim__Abuse;
int AimSensCorrections;
int Anti_Recoil;
int Rapid_Fire;
int DropShot;
int PUMP_SMG;
int PUMPWALL;
int ChickenMode;
int FAST_RESET;
int EDIT_ASSIST;
int PerfectAccuracy = TRUE;
int Ramp_Floor_Wall;
int QuickBox;
int WindoWEditShot;

const string OFF 	    = "Choose Type";
const string CIRCLE     = "Circular";
const string TALLOVAL   = "Tall Oval";
const string WIDEOVAL   = "Wide Oval";
const string SPIRAL     = "Spiral";
const string HELIX      = "Helix";
const string T_TexT[]   = {
"Hold L2 + OPTIONS",  // 0
"DoGz Polar",	  	  // 1 -
"DoNotAtME Polar",    // 2
"Aim Abuse",	   	  // 3
"Aim Corrections", 	  // 4
"Anti Recoil",		  // 5
"Rapid Fire",		  // 6
"Drop Shot",		  // 7
"Pump SMG", 		  // 8
"Pump Wall",	      // 9
"Chicken Mode",		  // 10
"Fast Reset",	  	  // 11
"Edit Assist",		  // 12 
"Ramp Floor Wall",	  // 13 
"Safety Box",         // 14
"Window Edit Shot",	  // 15 -
"OFF",				  // 16
"ON",				  // 17
"Width",			  // 18 --
"Height",			  // 19 --
"Vertical",			  // 20 --
"Horizontal",		  // 21 --
"RPS"				  // 22 --
};
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | I | N | I | T | I | L | I | Z | A | T | I | O | N | | | | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
init {
	if(get_pvar(SPVAR_64, 0x0, 0x270F, -9999) != 0xCC) {
		set_pvar(SPVAR_64, 0xCC):
		reset_script_var();
		save();		
	}

	load_pvar();

	if(rapid_fire_speed > 0x1)
		wait_time_correction = -10;

	COLOUR = 0xFF; 

	combo_run(NikO); 
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
 vm_tctrl(-2);
   if(PS4_Light_Bar) {
       set_ps4_lbar(Blue, Red, Green);
       }	
	if(ZS == 0) {
	  	//RAMP FLOOR WALL - START	
		if(Ramp_Floor_Wall) {
		if(get_ival(RFW_Button))
				combo_run(RAMPFLOORWALL);
		}
	    //RAMP FLOOR WALL - END

		//STICK DRIFT REMOVAL - START
  if(Stick_Drift_Removal) {
	if(abs(get_val(STRAFE)) <= 10) 
		set_val(STRAFE, 0); 
	if(abs(get_val(WALK)) <= 10) 
		set_val(WALK, 0);
    if(abs(get_val(AIM_X)) <= 10) 
		set_val(AIM_X, 0); 
	if(abs(get_val(AIM_Y)) <= 10) 
		set_val(AIM_Y, 0);
	}
	if(Polar_Aim_Assist == TRUE) {
		Stick_Drift_Removal = FALSE;
		} 
			else 
		{
		Stick_Drift_Removal = TRUE
	}
		//STICK DRIFT REMOVAL - END

		//SAFETY BOX - START
		if(QuickBox) {	
		if(get_ival(UNBOUND_BUTTON))
			combo_run(TUNNELBOX);
		}
		//SAFETY - END 

		//FAST RESET - START
	if (FAST_RESET) {
	if (event_press(UNBOUND_BUTTON)) { 
		set_val(UNBOUND_BUTTON, 0)	
			combo_run(RESET); }
	}
		//FAST RESET - END

		// WINDOW EDIT SHOT - START
   if(WindoWEditShot) {
	if(event_press(UNBOUND_BUTTON))
		combo_run(WindowEditShot);
	}
		// WINDOW EDIT SHOT - END

	    //PUMP WALL - START
	if (PUMPWALL) {
	if(get_ival(FIRE) && event_press(NEXT)) {
		SHUNT = NEXT;
		combo_run(PUMPWALL);
	}
	if (SHUNT) {
		if (event_release(SHUNT)) {
			SHUNT = FALSE;
	} else {
      set_val (SHUNT,FALSE); }
		}
	}
	    //PUMP WALL - END

		//EDIT ASSIST - START
	if (EDIT_ASSIST) {
	 	if (!get_ival(ADS) && get_ival(EDIT_ASSIST_BUTTON)) {
			EDIT_ASSIST();
			Edit1 = TRUE;
		}
			if (event_release(EDIT_ASSIST_BUTTON)) {
				combo_run(Confirm);
				EditT = FALSE;
				Edit1 = FALSE;
			}
	}
    if (Edit1) {
        if (event_press(PICKAXE) || event_press(BUILD) || event_press(ADS)) {
            Edit1 = FALSE;
		}
    }
		//EDIT ASSIST - END

	//BUILD MODE - START
if(event_press(BUILD)) {
	BuildMode = !BuildMode;
	}

	if(event_press(PICKAXE)) {
	BuildMode = FALSE;
	}
	
	if(event_press(CROUCH)) {
	BuildMode = FALSE;
	}

	if(!BuildMode) {

	    //RAPIDFIRE - START
	    if(get_ival(PS4_L2) && event_press(RAPID_FIRE_BUTTON)) {
	    	combo_run (vibrate);
	        combo_restart(BLIINK);
			Rapid_Fire = !Rapid_Fire;
		}
		if(Rapid_Fire) {
		if(get_ival(FIRE)) {
			combo_run(Rapid__Fire);	}
			if(event_release(FIRE)) {
			combo_stop(Rapid__Fire);
			}
		}
		//RAPIDFIRE - END
			
		//PERFECT ACCURACY - START
		if (get_ival(ADS) && get_ival(NEXT)) {
	PerfectAccuracy = !PerfectAccuracy;
	combo_run(PerfectionAccuracy);
		set_val(NEXT, 0);
		} else {
	combo_stop(PerfectionAccuracy);
	}
		//PERFECT ACCURACY - END

		//DROPSHOT - START
		if(get_ival(PS4_L2) && event_press(DROP_SHOT_BUTTON)) {
	        combo_run (vibrate);
	        combo_restart(BLIIINK);
			DropShot=!DropShot;
		}
		if (DropShot) {
	    	if(get_ival(FIRE))combo_run(DroppShott); 
		}
		//DROPSHOT - END
	
	//PUMP SMG - START
	if (PUMP_SMG) {
	if (R2_block) {
		set_val(ADS, 0);
		set_val(FIRE, 0);}
	if (get_ival(ADS) && event_press(FIRE)) {
	if (!tap) { 
		tap = TRUE;
			combo_run(Double_Tact_R1);
		set_val(FIRE, 0);}
	}
	if (event_press(ADS)) {
		tap = FALSE;}
	}
	//PUMP SMG - END

	    //CRESCENS POLAR - START		
	if(Polar_Aim_Assist) {
		if(get_ival(ADS) && abs(get_ival(AIM_X)) <= 20 && abs(get_ival(AIM_Y)) <= 20) {
			if(RadiusBoost && get_ival(FIRE)) {
				Radius = PolarRadius + PolarRBoost;
		} else {
				Radius = PolarRadius;
		}
	if(AngleBoost && get_ival(FIRE)) {
				Angle = PolarAngle + PolarABoost;
		} else {
				Angle = PolarAngle;
		}
				set_polar(POLAR_RS, Speed = (Speed + Angle) % 360, (abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 4 + Radius * 328);
		}
	}
		//CRESCENS POLAR - END

	    //LEGITDOGZ POLAR - START
      if (DoNotAtME_Polar) {
		RX = get_val(AIM_X);
		RY = get_val(AIM_Y);

		ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
		MaxMagnitude    = (ActualMagnitude < 100);

		angleee += Polar_Angle;
		angleee  = angleee % 360;
		CosAngle = DNAMPolarArray[(angleee + 270) % 360];
		SinAngle = DNAMPolarArray[angleee % 360];

	if(get_ival(ADS) || get_ival(FIRE)) {
		if(ActualMagnitude < Polar_Radius)
		{
			SinAngle -= RY;
			CosAngle -= RX;
		}
		else
		{
			SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;
			CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;
		}
			GetShapes(Polar_Radius);
			}
		}
		//LEGITDOGZ POLAR - END

	    //CHICKEN MODE - START
		if (ChickenMode) {
		if(get_ival(FIRE)) {
			combo_run(ChickenStrafe);
			combo_run(ChickenDrop); }
		if(event_release(FIRE)) {
			combo_stop(ChickenStrafe);
			combo_stop(ChickenDrop); }	  	
	  	    }
	  	//CHICKEN MODE - END	
	  	
	  	//AUTO AIM - START
	if(Aim__Abuse) {
   if(get_ival(ADS) > 95) {
      combo_run(Aim_Abuse); }
   if(event_release(ADS)) { 
	  combo_stop(Aim_Abuse); }
	}
		//AUTO AIM - END

		//AIM CORRECTION - START
  if (AimSensCorrections) {
    ads_grenade_sens = 0x64 - (in_game_menu_sens);
    ads_fire_sens    = 0x60  - (in_game_menu_sens);
    actual_sens      = 0x64;
    if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(PREVIOUS) && !get_ival(NEXT)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && !get_ival(FIRE)) {
      Sens = ads_grenade_sens;
    } else if (!get_ival(ADS) && get_ival(FIRE)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && get_ival(FIRE)) {
      Sens = ads_fire_sens;
    } else if (get_ival(NEXT) || get_ival(PREVIOUS)) {
      Sens = ads_grenade_sens;
    }
    if (isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) > PolarRadius) {
      if (Sens > 100) Sens = 100;
      sensitivity(AIM_X, NOT_USE, Sens);
      sensitivity(AIM_Y, NOT_USE, Sens);
		}
	}
		//AIM CORRECTION - END
			
		//ANTIRECOIL - START
	if(Anti_Recoil) {
	if (get_ival(ADS) && get_ival(FIRE)) {
         combo_run(AntiRecoil); } 
		}
		//ANTIRECOIL - END

		//BUILDMODE - START
	}
		//BUILD MODE - END
		
		if(get_ival(ADS) && event_press(MENU_OPEN_BUTTON)) {
			ZS = 1;
			combo_stop(RGB);
			display = TRUE;
		}
		combo_run(RGB);
	}
	NikO_Check();
	if(ZS == 1) {
		block_all_inputs();
		block_all_outputs();

		if(mod == 2) {
		   if(event_press(PS4_CROSS)) {    

		      DoNotAtME_Polar ++;

		      if(DoNotAtME_Polar  > 0x5) DoNotAtME_Polar = 0x0;
		      display = TRUE; 
		   }
	    }

		if(event_press(PS4_CROSS) && (mod == 1))Polar_Aim_Assist = !Polar_Aim_Assist
		if(event_press(PS4_CROSS) && (mod == 3))Aim__Abuse = !Aim__Abuse
		if(event_press(PS4_CROSS) && (mod == 4))AimSensCorrections = !AimSensCorrections
		if(event_press(PS4_CROSS) && (mod == 5))Anti_Recoil = !Anti_Recoil
		if(event_press(PS4_CROSS) && (mod == 6))Rapid_Fire = !Rapid_Fire
		if(event_press(PS4_CROSS) && (mod == 7))DropShot = !DropShot
		if(event_press(PS4_CROSS) && (mod == 8))PUMP_SMG = !PUMP_SMG
		if(event_press(PS4_CROSS) && (mod == 9))PUMPWALL = !PUMPWALL
		if(event_press(PS4_CROSS) && (mod == 10))ChickenMode = !ChickenMode
		if(event_press(PS4_CROSS) && (mod == 11))FAST_RESET = !FAST_RESET
		if(event_press(PS4_CROSS) && (mod == 12))EDIT_ASSIST = !EDIT_ASSIST
		if(event_press(PS4_CROSS) && (mod == 13))Ramp_Floor_Wall = !Ramp_Floor_Wall
		if(event_press(PS4_CROSS) && (mod == 14))QuickBox = !QuickBox
		if(event_press(PS4_CROSS) && (mod == 15))WindoWEditShot = !WindoWEditShot

		if(event_press(PS4_SQUARE) && mod == 1) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 2) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 4) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 5) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 6) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 7) {
			ZS = 2;
			display = TRUE;
		}
		if(mod == 1) {
			if(Polar_Aim_Assist) { set_rgb(0x0, 0xFF, 0x0) }
			else { set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 2) {
			if(DoNotAtME_Polar) { set_rgb(0x0, 0xFF, 0x0) }
			else { set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 3) {
			if(Aim__Abuse) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 4) {
			if(AimSensCorrections) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 5) {
			if(Anti_Recoil) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}		
		if(mod == 6) {
			if(Rapid_Fire) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 7) {
			if(DropShot) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 8) {
			if(PUMP_SMG) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 9) {
			if(PUMPWALL) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 10) {
			if(ChickenMode) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 11) {
			if(FAST_RESET) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 12) {
			if(EDIT_ASSIST) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 13) {
			if(Ramp_Floor_Wall) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 14) {
			if(QuickBox) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(mod == 15) {
			if(WindoWEditShot) {set_rgb(0x0, 0xFF, 0x0) }
			else{set_rgb(0xFF, 0x0, 0x0) }
		}
		if(event_press(PS4_UP)) {
			mod --;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			mod ++;
			display = TRUE;
		}
		if(mod > NumofMods) mod = 1
		if(mod < 1) mod = NumofMods
		
		if(event_press(PS4_CIRCLE)) {
			ZS = 0;
			save();
			frame = -1;
			combo_restart(NikO);
			display = TRUE;
		}
	}
	
	if(ZS == 2) {
		block_all_inputs();
		block_all_outputs();

		if(ptime != 100)
			ptime += get_rtime();

	if(event_press(PS4_CIRCLE) && (mod == 7 || 6 || 5 || 4 || 2 || 1)) {
			save();
			ZS = 1;
			display = TRUE;
		}
		if(event_press(PS4_UP)) {
			sel ++ ;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			sel -- ;
			display = TRUE;
		}
		if(sel < 0) sel = 0
		if(sel > 2) sel = 2

		if(mod == 1 && tab == 1) {
            if(sel < 0) sel = 0
            if(sel > 1) sel = 1
        }

		if(mod == 1) {
			if(tab == 0) {
				if(event_press(PS4_R1)) {
					tab += 1
					display = TRUE;
				}
				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarRadius < 50)) {
					PolarRadius = PolarRadius + 0x1;
					display       = TRUE;
				}
				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarRadius > 0)) {
					PolarRadius = PolarRadius - 0x1;
					display 	  = TRUE;
				}
				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarAngle < 50)) {
					PolarAngle = PolarAngle + 0x1;
					display 	 = TRUE;
				}
				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarAngle > 0)) {
					PolarAngle = PolarAngle - 0x1;
					display		 = TRUE;
				}
			}
			if(tab == 1) {
				if(event_press(PS4_L1)) {
					tab -= 1
					display = TRUE;
				}
				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarRBoost < 50)) {
					PolarRBoost = PolarRBoost + 0x1;
					display 			= TRUE;
				}
				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarRBoost > 0)) {
					PolarRBoost = PolarRBoost - 0x1;
					display 			= TRUE;
				}
				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarABoost < 50)) {
					PolarABoost = PolarABoost + 0x1;
					display 		   = TRUE;
				}
				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarABoost > 0)) {
					PolarABoost = PolarABoost - 0x1;
					display 		   = TRUE;
				}
			}
		}
		if(mod == 2) {
			if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Polar_Radius < 50)) {
					Polar_Radius  = Polar_Radius + 0x1;
					display = TRUE;
					ptime 	= 0;
			}
			if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Polar_Radius > 0)) {
					Polar_Radius  = Polar_Radius - 0x1;
					display = TRUE;
					ptime 	= 0;
			}
			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Polar_Angle < 50)) {
					Polar_Angle = Polar_Angle + 0x1;
					display  = TRUE;
					ptime 	 = 0;
			}
			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Polar_Angle > 0)) {
					Polar_Angle = Polar_Angle - 0x1;
					display  = TRUE;
					ptime 	 = 0;
			}
			if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Radius_Min < 50)) {
					Radius_Min = Radius_Min + 0x1;
					display    = TRUE;
					ptime 	   = 0;
			}
			if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Radius_Min > 0)) {
					Radius_Min = Radius_Min - 0x1;
					display    = TRUE;
					ptime 	   = 0;
			}
		}
		if(mod == 4) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && in_game_menu_sens < 20)) {
				in_game_menu_sens = in_game_menu_sens + 0x1;
				display 		  = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && in_game_menu_sens > 0)) {
				in_game_menu_sens = in_game_menu_sens - 0x1;
				display 		  = TRUE;
			}
		}
		if(mod == 5) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ANTI_RECOIL < 100)) {
				ANTI_RECOIL = ANTI_RECOIL + 0x1;
				display	 	= TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ANTI_RECOIL > 0)) {
				ANTI_RECOIL = ANTI_RECOIL - 0x1;
				display 	= TRUE;
			}
		}		
		if(mod == 6) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && rapid_fire_speed < 20)) {
				rapid_fire_speed = rapid_fire_speed + 0x1;
				display 		 = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && rapid_fire_speed > 0)) {
				rapid_fire_speed = rapid_fire_speed - 0x1;
				display 		 = TRUE;
			}
		}
		if(mod == 7) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && DropShotSpeed < 100)) {
				DropShotSpeed = DropShotSpeed + 0x1;
				display 	  = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && DropShotSpeed > 0)) {
				DropShotSpeed = DropShotSpeed - 0x1;
				display 	  = TRUE;
			}
		}
	}
	if(ss) {	
		if(ZS == 0) TexT1()
		if(ZS == 1) TexT2()
		rect_oled(0, 0, 128, 64, 0, 1);
    	c_b += get_rtime();
		ScreenSaver()
    	if(c_b >= 9000) {
      		cls_oled(0);
      		c_b = 0;
      		ss = FALSE;
    	}
	}
	
	if(display) {
		cls_oled(0);
		c_b = 0;
		if(ZS == 0) {
			printf (CenterX(GetChars(0),OLED_FONT_SMALL_WIDTH),18,0,1,T_TexT[0]);
		}
		
		if(ZS == 1) {
			printf (CenterX(GetChars(mod),OLED_FONT_SMALL_WIDTH),CenterY(OLED_FONT_SMALL_HEIGHT), 0, 1, T_TexT[mod]);

		if(mod == 2) {
		     if (DoNotAtME_Polar == 0)
		         printf(CenterX(sizeof(OFF)       - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
			 else if (DoNotAtME_Polar == 1)
				 printf(CenterX(sizeof(CIRCLE)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, CIRCLE[0]);
			 else if (DoNotAtME_Polar == 2)
				 printf(CenterX(sizeof(TALLOVAL)  - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, TALLOVAL[0]);
			 else if (DoNotAtME_Polar == 3)
				 printf(CenterX(sizeof(WIDEOVAL)  - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, WIDEOVAL[0]);
			 else if (DoNotAtME_Polar == 4)
				 printf(CenterX(sizeof(SPIRAL)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, SPIRAL[0]);
			 else if (DoNotAtME_Polar == 5)
				 printf(CenterX(sizeof(HELIX)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, HELIX[0]);
			}
		}
		
		if(ZS == 2) {
			printf (CenterX(GetChars(mod),OLED_FONT_SMALL_WIDTH), 3, 0, 1, T_TexT[mod]);
			if(mod == 1) {
				if(tab == 0) {
				NumberToString(PolarRadius,FindDigits(PolarRadius), 0x17);
				NumberToString(PolarAngle,FindDigits(PolarAngle), 0x29);
				}
				if(tab == 1) {
				NumberToString(PolarRBoost,FindDigits(PolarRBoost), 0x17);
				NumberToString(PolarABoost,FindDigits(PolarABoost), 0x29);
				}
			}
			if(mod == 2) {
				NumberToString(Polar_Radius,FindDigits(Polar_Radius), 0x14);
				NumberToString(Polar_Angle,FindDigits(Polar_Angle), 0x21);
				NumberToString(Radius_Min,FindDigits(Radius_Min), 0x2E);
			}
			if(mod == 4) {
				NumberToString(in_game_menu_sens,FindDigits(in_game_menu_sens), 0x19);
			}
			if(mod == 5) {
				NumberToString(ANTI_RECOIL,FindDigits(ANTI_RECOIL), 0x19);
			}
			if(mod == 6) {
				NumberToString(rapid_fire_speed,FindDigits(rapid_fire_speed), 0x19);
			}
			if(mod == 7) {
				NumberToString(DropShotSpeed,FindDigits(DropShotSpeed), 0x19);
			}
			if(sel == 2)line_oled(30, 20, 40, 20, 3, 1)
			if(sel == 1)line_oled(30, 33, 40, 33, 3, 1)
			if(sel == 0)line_oled(30, 46, 40, 46, 3, 1)
		}
		rect_oled(0, 0, 128, 64, 0, 1);
		ss = TRUE;
		display = FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | | | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/ 
combo RGB {
	wait(0xA);
	set_rgb(COLOUR, COLOUR[0x1], COLOUR[0x2]);
	COLOUR[DEC] -= 0x1; 
	COLOUR[INC] += 0x1;
	if(!COLOUR[DEC]) { 
	INC = (INC + 0x1) % 0x3; 
	DEC = (DEC + 0x1) % 0x3; 
	}
}
combo PUMPWALL {
	set_val(FIRE, 100);
	wait(52);
 	set_val(BUILD, 100);
    wait(52);
    set_val(FIRE, 100);
    wait(52);
    set_val(BUILD, 100);
	wait(50);
	wait(30);
}
combo ChickenStrafe {
	set_val(STRAFE, 100);
	wait(420);
	set_val(STRAFE, -100);
	wait(420);
}
combo ChickenDrop {
	set_val(CROUCH, 100);
	wait(random(30, 100));
	wait(random(60, 250));
	set_val(SPRINT, 100);
}
combo WindowEditShot {
	set_val(FIRE, 100);	
	wait(90);
	set_val(FIRE, 0);
	wait(90);
	set_val(BUILD, 100);
	wait(50);
	set_val(BUILD, 0);
	wait(50);
	set_val(FIRE, 100);
	wait(50);
	set_val(FIRE, 0);
	wait(50);
	set_val(BUILD, 100);
	wait(125);
	set_val(BUILD, 0);
	wait(125);
	set_val(FIRE, 100);
	wait(100);
	wait(200);
	set_val(BUILD, 100);
	wait(100);
	set_val(BUILD, 0);
	wait(100);
}
combo RESET {
	set_val(BUILD, 100);
	wait(125)
	set_val(BUILD, 0);		
	wait(30);
	set_val(CROUCH, 100);
	wait(100);
	set_val(CROUCH, 0);
	wait(30);
	set_val(BUILD, 100);
	wait(100)
	set_val(BUILD, 0);		
	wait(30);
}
combo Double_Tact_R1 { 
	R2_block = TRUE;
	set_val(FIRE, 100);
	wait(10);
	wait(10);
	set_val(ADS, 100);
	set_val(SPRINT, 100);
	set_val(NEXT, 100);
	wait(15);
	R2_block = FALSE;
}
combo Confirm {
    set_val(BUILD, 100);
    wait(50);
    set_val(BUILD, 0);
    wait(100);
}
combo RAMPFLOORWALL {
	set_val(ADS, 100);
	wait(100);
	set_val(NEXT, 100);
	wait(110);
	set_val(FIRE, 100);
	wait(110);
}
combo TUNNELBOX {
	wait(20);
	set_val(BUILD, 100);
	wait(30);
	set_val(AIM_Y, 100);
	wait(30);
	set_val(FIRE, 100);
	set_val(AIM_X, 100);
	wait(430);
	set_val(AIM_Y, -60);
	wait(50);
	set_val(AIM_Y, -100);
	wait(120);
	set_val(NEXT, 100);
	wait(40);
	set_val(AIM_Y, 100);
	wait(120);
	set_val(BUILD, 100);
	wait(30);
}
combo Aim_Abuse {
	set_val(ADS, 100);
	wait(random(440, 730)); // Hold Time Between 440ms and 730ms
	set_val(ADS, 0);
	wait(random(55, 95));  //  Release Time Between 55ms and 95ms 
}
combo vibrate {     
	set_rumble(RUMBLE_A, 75);      
	wait(225);                         
	reset_rumble();                    
}
combo BLIINK {                                       
	if(Rapid_Fire) set_rgb (0,255,0); 
	else  set_rgb (255,0,0);
	wait(1000);
	set_rgb (0,0,0); 
}
combo BLIIINK {                                       
	if(DropShot) set_rgb (0,255,0); 
	else  set_rgb (255,0,0);
	wait(1000);
	set_rgb (0,0,0); 
}
combo PerfectionAccuracy {
	set_val(FIRE,100);
	wait(100);
	wait(252);
	set_val(FIRE,100);
}
combo Rapid__Fire {
	set_val(FIRE, 100);
	wait(20 * rapid_fire_speed);
	set_val(FIRE, 0);
	wait(10 * rapid_fire_speed - wait_time_correction);
	set_val(FIRE, 0); 
}
combo DroppShott {
	set_val(CROUCH, 100);
	wait(90);
	wait(DropShotSpeed);
	set_val(CROUCH, 100);
}
combo AntiRecoil {
	anti_recoil = get_ival(PS4_RY) + ANTI_RECOIL;
	if (anti_recoil > 100) anti_recoil = 100;
	set_val(PS4_RY, anti_recoil);
}
combo NikO {
	wait(0x14);
	image_oled(0x0, 0xA, color, FALSE, Frames[frame]);
	frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
function save() {
	set_pvar(SPVAR_1,  Polar_Aim_Assist);
	set_pvar(SPVAR_2,  DoNotAtME_Polar);
	set_pvar(SPVAR_3,  Aim__Abuse);
	set_pvar(SPVAR_4,  AimSensCorrections);
	set_pvar(SPVAR_5,  Anti_Recoil);
	set_pvar(SPVAR_6,  Rapid_Fire);
	set_pvar(SPVAR_7,  DropShot);
	set_pvar(SPVAR_8,  PUMP_SMG);
	set_pvar(SPVAR_9,  PUMPWALL);
	set_pvar(SPVAR_10, ChickenMode);
	set_pvar(SPVAR_11, FAST_RESET);
	set_pvar(SPVAR_12, EDIT_ASSIST);
	set_pvar(SPVAR_13, Ramp_Floor_Wall);
	set_pvar(SPVAR_14, QuickBox);
	set_pvar(SPVAR_15, WindoWEditShot);

	set_pvar(SPVAR_16, PolarRadius);
	set_pvar(SPVAR_17, PolarAngle);
	set_pvar(SPVAR_18, PolarRBoost);
	set_pvar(SPVAR_19, PolarABoost);
	set_pvar(SPVAR_20, Polar_Radius);
	set_pvar(SPVAR_21, Polar_Angle);
	set_pvar(SPVAR_22, Radius_Min);
	set_pvar(SPVAR_23, rapid_fire_speed);
	set_pvar(SPVAR_24, DropShotSpeed);
	set_pvar(SPVAR_25, in_game_menu_sens);
	set_pvar(SPVAR_26, ANTI_RECOIL);
}
function load_pvar() {
	Polar_Aim_Assist	 = get_pvar(SPVAR_1,  0,   1,  0);
	DoNotAtME_Polar		 = get_pvar(SPVAR_2,  0,   4,  0);
	Aim__Abuse 			 = get_pvar(SPVAR_3,  0,   1,  0);
	AimSensCorrections	 = get_pvar(SPVAR_4,  0,   1,  0);
	Anti_Recoil 	   	 = get_pvar(SPVAR_5,  0,   1,  0);
	Rapid_Fire 			 = get_pvar(SPVAR_6,  0,   1,  0);
	DropShot 			 = get_pvar(SPVAR_7,  0,   1,  0);
	PUMP_SMG 			 = get_pvar(SPVAR_8,  0,   1,  0);
	PUMPWALL 			 = get_pvar(SPVAR_9,  0,   1,  0);
	ChickenMode 		 = get_pvar(SPVAR_10, 0,   1,  0);
	FAST_RESET	 		 = get_pvar(SPVAR_11, 0,   1,  0);
	EDIT_ASSIST	 		 = get_pvar(SPVAR_12, 0,   1,  0);
	Ramp_Floor_Wall 	 = get_pvar(SPVAR_13, 0,   1,  0);
	QuickBox			 = get_pvar(SPVAR_14, 0,   1,  0);
	WindoWEditShot		 = get_pvar(SPVAR_15, 0,   1,  0);

	PolarRadius 		 = get_pvar(SPVAR_16, 0,  50, 15); 
	PolarAngle 		  	 = get_pvar(SPVAR_17, 0,  50, 15);
	PolarRBoost 		 = get_pvar(SPVAR_18, 0,  50,  4); 
	PolarABoost 		 = get_pvar(SPVAR_19, 0,  50,  4);
	Polar_Radius		 = get_pvar(SPVAR_20, 0,  50, 20); 
	Polar_Angle			 = get_pvar(SPVAR_21, 0,  50, 15);
	Radius_Min	     	 = get_pvar(SPVAR_22, 0,  50,  3);
	rapid_fire_speed	 = get_pvar(SPVAR_23, 0,  20,  5);
	DropShotSpeed     	 = get_pvar(SPVAR_24, 0, 100, 45);
	in_game_menu_sens 	 = get_pvar(SPVAR_25, 0,  20, 10);
	ANTI_RECOIL	 		 = get_pvar(SPVAR_26, 0,  50, 10);
}
function reset_script_var() {
	Polar_Aim_Assist     = 0;
	DoNotAtME_Polar		 = 0;
    Aim__Abuse           = 0;
    AimSensCorrections   = 0;
    Anti_Recoil          = 0;
    Rapid_Fire           = 0;
    DropShot             = 0;
    PUMP_SMG             = 0;
    PUMPWALL             = 0;
    ChickenMode          = 0;
    FAST_RESET 		     = 0;
	EDIT_ASSIST		     = 0;
	Ramp_Floor_Wall      = 0;
	QuickBox		     = 0;
	WindoWEditShot       = 0;

	PolarRadius 	  	 = 15;
	PolarAngle  	  	 = 15;
	PolarRBoost    		 =  4;
	PolarABoost    		 =  4;
	Polar_Radius	 	 = 20;
	Polar_Angle			 = 15;
	Radius_Min			 =  3;
	rapid_fire_speed     =  5;
	DropShotSpeed     	 = 45;
	in_game_menu_sens 	 = 10;
	ANTI_RECOIL 	  	 = 10;
}
function NikO_Check() {
	if(!combo_running(NikO) && frame <= 15)
		combo_restart(NikO);
}
function EDIT_ASSIST () {
    EditT += get_rtime();
        if (get_ival(EDIT_ASSIST_BUTTON)) {
            if (EditT >= EditDelay)
                  Press(FIRE);
          }
}
function Press (Button) {
    if (get_ival(Button))
        return;
            set_val(Button, 100);
}
function GetShapes(f_Var) {
    if(!SpiralPosition1)
	{
		InnerSpiral -= 1;
		if(InnerSpiral < Radius_Min)
			SpiralPosition1 = TRUE;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_Var)
			SpiralPosition1 = FALSE;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < Radius_Min)
			SpiralPosition2 = TRUE;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_Var)
			SpiralPosition2 = FALSE;
	}
	if(DoNotAtME_Polar == 1)
	{
        RY = (get_val(AIM_Y))  + ( (SinAngle * f_Var) ) / 100;
        RX = (get_val(AIM_X))  + ( (CosAngle * f_Var) ) / 100;
	}
	if(DoNotAtME_Polar == 2)
	{
        RY = (get_val(AIM_Y))  + ( (SinAngle * f_Var) ) / 100;
        RX = (get_val(AIM_X))  + ( (CosAngle * Radius_Min) ) / 100;
	}
	if(DoNotAtME_Polar == 3)
	{
        RX = (get_val(AIM_X))  + ( (CosAngle * f_Var) ) / 100;
        RY = (get_val(AIM_Y))  + ( (SinAngle * Radius_Min) ) / 100;
	}
	if(DoNotAtME_Polar == 4)
	{
        RY = (get_val(AIM_Y))  + ( (SinAngle * InnerSpiral) ) / 100;
        RX = (get_val(AIM_X))  + ( (CosAngle * OuterSpiral) ) / 100;
	}
    if(DoNotAtME_Polar == 5)
	{
		if(Position == 0 || Position == 1)
    	{
		    RX = (get_val(AIM_X))  + ( (CosAngle * f_Var) ) / 100;
		}
	    if(Position == 2 || Position == 3)
		{
		    RY = (get_val(AIM_Y))  + ( (SinAngle * f_Var) ) / 100;
		}
			Position++;

		if(Position == 4)
		{
			Position = 0;
		}
    }
    set_val(AIM_X, RX);
	set_val(AIM_Y, RY);
}
function NumberToString(f_val, f_digits, x) {
	bufferindex_1 = 1;
	digitindex_1 = 0x2710;
	if (f_val < 0) {                     //--neg numbers
		putc_oled(bufferindex_1, 45);    //--add leading "-"
		bufferindex_1 += 1;
		f_val = abs(f_val);
	}
	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--) {
		if (f_digits >= charindex_1) {
			putc_oled(bufferindex_1, (f_val / digitindex_1) + 48);
			f_val %= digitindex_1;
			bufferindex_1++;
			if (charindex_1 == 4) {
				putc_oled(bufferindex_1, 44);   //--add ","
				bufferindex_1++;
			}
		}
		digitindex_1 /= 0xA;
	}
	if(mod == 2) puts_oled(CenterX(bufferindex_1 - 1, OLED_FONT_SMALL_WIDTH), x, OLED_FONT_SMALL, bufferindex_1 - 1, OLED_WHITE);
	else puts_oled(CenterX(bufferindex_1 - 1, OLED_FONT_MEDIUM_WIDTH), x, OLED_FONT_MEDIUM, bufferindex_1 - 1, OLED_WHITE);
}
function FindDigits(f_number) {
	f_number = abs(f_number);
	if (f_number / 0x2710 > 0)
		return 5;
	if (f_number / 0x3E8 > 0)
		return 4;
	if (f_number / 0x64 > 0)
		return 3;
	if (f_number / 0xA > 0)
		return 2;
	return 1;
}
function block_all_outputs() {
	set_val(PS4_UP     , 0);  set_val(PS4_DOWN   , 0);  set_val(PS4_LEFT   , 0);  set_val(PS4_RIGHT , 0);
	set_val(PS4_CROSS  , 0);  set_val(PS4_CIRCLE , 0);  set_val(PS4_SQUARE , 0);
}
function CenterX(f_chars, f_font) {
      return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function CenterY(f_size) {
    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
function GetChars(x) {
      if (T_TexT[x + 1] != -1) return T_TexT[x + 1] - T_TexT[x] - 1;
      return sizeof(T_TexT) - T_TexT[x];
}
const int8 DNAMPolarArray[] = { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58, -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
const image Frames[] 	    = { 
							  { 23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 0x80, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 0x80, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 0x80, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x80, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 0x80, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 100, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x80, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x80, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0x80, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 0x80, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 0x80, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 0x80, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 0x80}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 0x80, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 0x80, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x80, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 0x80}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
int x1 = 60,x2 = 68,x3 = 76,x4 = 84,x5 = 92,x6 = 100,x7 = 108,x8 = 116,x9 = 124,x10 = 132,x11 = 140,x12 = 148,x13 = 156,x14 = 164,x15 = 172,x16 = 180,x17 = 188,x18 = 196,x19 = 204,x20 = 212,x21 = 220,x22 = 228,x23 = 236,x24 = 244,x25 = 252,x26 = 260,x27 = 268,x28 = 276;
define yy  = 2;
function TexT1() {
	putc_oled(1,ASCII_UPPER_F);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_B);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_Y);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_UNDERSCORE);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x17,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_K);
	puts_oled(x18,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x19,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_A);
	puts_oled(x21,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x22,yy,0,1,1);
	
	FaLL();
}

function TexT2() {
	putc_oled(1,ASCII_UPPER_P);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_X);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x17,yy,0,1,1);

	putc_oled(1,ASCII_SPACE);
	puts_oled(x18,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x21,yy,0,1,1);
	
	putc_oled(1,ASCII_SPACE);
	puts_oled(x22,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x23,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_D);
	puts_oled(x24,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x25,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x26,yy,0,1,1);

	rect_oled(x19 - 4,yy,9,9,0,1)
	rect_oled(x19 - 3,yy + 1,7,7,0,0)
	rect_oled(x19 + 5,yy,1,9,1,0)
	FaLL();
}
function FaLL() {
	x1--;x2--;x3--;x4--;x5--;x6--;x7--;x8--;x9--;x10--;
	x11--;x12--;x13--;x14--;x15--;x16--;x17--;x18--;x19--;x20--;
	x21--;x22--;x23--;x24--;x25--;x26--;x27--;x28--;
}
function ScreenSaver() {
	line_oled(0x0, 0xD, 0x7F, 0xD, 0x1, 0x1)
	rect_oled(0x0, 0x0,  0xF, 0xE, 0x1, 0x0)
	rect_oled(0x0, 0x0,  0xF, 0xE, 0x0, 0x1)
	if(c_b < 0x3E8) {
    	putc_oled(0x1, ASCII_DIGIT9);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0x3E8) {
    	putc_oled(0x1, ASCII_DIGIT8);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0x7D0) {
    	putc_oled(0x1, ASCII_DIGIT7);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0xBB8) {
    	putc_oled(0x1, ASCII_DIGIT6);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0xFA0) {
    	putc_oled(0x1, ASCII_DIGIT5);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0x1388) {
    	putc_oled(0x1, ASCII_DIGIT4);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0x1770) {
    	putc_oled(0x1, ASCII_DIGIT3);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b > 0x1B58) {
    	putc_oled(0x1, ASCII_DIGIT2);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
	if(c_b >= 0x1F40) {
    	putc_oled(0x1, ASCII_DIGIT1);
		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);
	}
}

/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | |S | S | _ | N | i | k | o | l | a | i| |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/