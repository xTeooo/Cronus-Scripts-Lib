																																																																																																																																		/*
   /*
	
 █████╗ ██╗███╗   ███╗██╗      ██████╗  ██████╗██╗  ██╗    ██╗   ██╗██████╗ ██╗  ██╗
██╔══██╗██║████╗ ████║██║     ██╔═══██╗██╔════╝██║ ██╔╝    ██║   ██║╚════██╗██║  ██║
███████║██║██╔████╔██║██║     ██║   ██║██║     █████╔╝     ██║   ██║ █████╔╝███████║
██╔══██║██║██║╚██╔╝██║██║     ██║   ██║██║     ██╔═██╗     ╚██╗ ██╔╝██╔═══╝ ╚════██║
██║  ██║██║██║ ╚═╝ ██║███████╗╚██████╔╝╚██████╗██║  ██╗     ╚████╔╝ ███████╗     ██║
╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝      ╚═══╝  ╚══════╝     ╚═╝

████████████████████████████████████████████████████████████████████████████████████████
                                           
██████╗ ██╗   ██╗    ██████╗ ██████╗ ██╗██╗   ██╗ █████╗ ████████╗███████╗         ██╗ █████╗ ███╗   ███╗███████╗███████╗
██╔══██╗╚██╗ ██╔╝    ██╔══██╗██╔══██╗██║██║   ██║██╔══██╗╚══██╔══╝██╔════╝         ██║██╔══██╗████╗ ████║██╔════╝██╔════╝
██████╔╝ ╚████╔╝     ██████╔╝██████╔╝██║██║   ██║███████║   ██║   █████╗           ██║███████║██╔████╔██║█████╗  ███████╗
██╔══██╗  ╚██╔╝      ██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══██║   ██║   ██╔══╝      ██   ██║██╔══██║██║╚██╔╝██║██╔══╝  ╚════██║
██████╔╝   ██║       ██║     ██║  ██║██║ ╚████╔╝ ██║  ██║   ██║   ███████╗    ╚█████╔╝██║  ██║██║ ╚═╝ ██║███████╗███████║
╚═════╝    ╚═╝       ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚═╝  ╚═╝   ╚═╝   ╚══════╝     ╚════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████             
      






 ██████╗██████╗ ███████╗██████╗ ██╗████████╗███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗██║╚══██╔══╝██╔════╝
██║     ██████╔╝█████╗  ██║  ██║██║   ██║   ███████╗
██║     ██╔══██╗██╔══╝  ██║  ██║██║   ██║   ╚════██║
╚██████╗██║  ██║███████╗██████╔╝██║   ██║   ███████║
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝   ╚═╝   ╚══════╝
████████████████████████████████████████████████████



███╗   ███╗ █████╗ ███████╗███████╗██╗██╗   ██╗███████╗    ████████╗██╗  ██╗ █████╗ ███╗   ██╗██╗  ██╗    ██╗   ██╗ ██████╗ ██╗   ██╗    ████████╗ ██████╗      ██████╗██╗  ██╗██╗     ██████╗██╗  ██╗██╗    
████╗ ████║██╔══██╗██╔════╝██╔════╝██║██║   ██║██╔════╝    ╚══██╔══╝██║  ██║██╔══██╗████╗  ██║██║ ██╔╝    ╚██╗ ██╔╝██╔═══██╗██║   ██║    ╚══██╔══╝██╔═══██╗    ██╔════╝██║  ██║██║    ██╔════╝██║  ██║██║    
██╔████╔██║███████║███████╗███████╗██║██║   ██║█████╗         ██║   ███████║███████║██╔██╗ ██║█████╔╝      ╚████╔╝ ██║   ██║██║   ██║       ██║   ██║   ██║    ██║     ███████║██║    ██║     ███████║██║    
██║╚██╔╝██║██╔══██║╚════██║╚════██║██║╚██╗ ██╔╝██╔══╝         ██║   ██╔══██║██╔══██║██║╚██╗██║██╔═██╗       ╚██╔╝  ██║   ██║██║   ██║       ██║   ██║   ██║    ██║     ██╔══██║██║    ██║     ██╔══██║██║    
██║ ╚═╝ ██║██║  ██║███████║███████║██║ ╚████╔╝ ███████╗       ██║   ██║  ██║██║  ██║██║ ╚████║██║  ██╗       ██║   ╚██████╔╝╚██████╔╝       ██║   ╚██████╔╝    ╚██████╗██║  ██║██║    ╚██████╗██║  ██║██║    
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝       ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝       ╚═╝    ╚═════╝  ╚═════╝        ╚═╝    ╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝     ╚═════╝╚═╝  ╚═╝╚═╝    
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████



███████╗ ██████╗ ██████╗     ██╗  ██╗███████╗██╗     ██████╗     ██╗    ██╗██╗████████╗██╗  ██╗     ██████╗ ██╗     ███████╗██████╗     ██████╗ ██╗███████╗██████╗ ██╗      █████╗ ██╗   ██╗
██╔════╝██╔═══██╗██╔══██╗    ██║  ██║██╔════╝██║     ██╔══██╗    ██║    ██║██║╚══██╔══╝██║  ██║    ██╔═══██╗██║     ██╔════╝██╔══██╗    ██╔══██╗██║██╔════╝██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝
█████╗  ██║   ██║██████╔╝    ███████║█████╗  ██║     ██████╔╝    ██║ █╗ ██║██║   ██║   ███████║    ██║   ██║██║     █████╗  ██║  ██║    ██║  ██║██║███████╗██████╔╝██║     ███████║ ╚████╔╝ 
██╔══╝  ██║   ██║██╔══██╗    ██╔══██║██╔══╝  ██║     ██╔═══╝     ██║███╗██║██║   ██║   ██╔══██║    ██║   ██║██║     ██╔══╝  ██║  ██║    ██║  ██║██║╚════██║██╔═══╝ ██║     ██╔══██║  ╚██╔╝  
██║     ╚██████╔╝██║  ██║    ██║  ██║███████╗███████╗██║         ╚███╔███╔╝██║   ██║   ██║  ██║    ╚██████╔╝███████╗███████╗██████╔╝    ██████╔╝██║███████║██║     ███████╗██║  ██║   ██║   
╚═╝      ╚═════╝ ╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝          ╚══╝╚══╝ ╚═╝   ╚═╝   ╚═╝  ╚═╝     ╚═════╝ ╚══════╝╚══════╝╚═════╝     ╚═════╝ ╚═╝╚══════╝╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   
███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████


 █████╗ ███╗   ██╗██████╗ 
██╔══██╗████╗  ██║██╔══██╗
███████║██╔██╗ ██║██║  ██║
██╔══██║██║╚██╗██║██║  ██║
██║  ██║██║ ╚████║██████╔╝
╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ 
█████████████████████████


███████╗███████╗    ███╗   ██╗██╗██╗  ██╗ ██████╗ ██╗      █████╗ ██╗
██╔════╝██╔════╝    ████╗  ██║██║██║ ██╔╝██╔═══██╗██║     ██╔══██╗██║
███████╗███████╗    ██╔██╗ ██║██║█████╔╝ ██║   ██║██║     ███████║██║
╚════██║╚════██║    ██║╚██╗██║██║██╔═██╗ ██║   ██║██║     ██╔══██║██║
███████║███████║    ██║ ╚████║██║██║  ██╗╚██████╔╝███████╗██║  ██║██║
╚══════╝╚══════╝    ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝
█████████████████████████████████████████████████████████████████████

██████╗  █████╗ ████████╗████████╗███████╗
██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██╔════╝
██████╔╝███████║   ██║      ██║   ███████╗
██╔══██╗██╔══██║   ██║      ██║   ╚════██║
██████╔╝██║  ██║   ██║      ██║   ███████║
╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝
██████████████████████████████████████████

██████╗  ██████╗  ██████╗ ███████╗
██╔══██╗██╔═══██╗██╔════╝ ╚══███╔╝
██║  ██║██║   ██║██║  ███╗  ███╔╝ 
██║  ██║██║   ██║██║   ██║ ███╔╝  
██████╔╝╚██████╔╝╚██████╔╝███████╗
╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝
██████████████████████████████████



███████╗██╗    ██╗███████╗███████╗████████╗    ███████╗██╗   ██╗██╗██╗     
██╔════╝██║    ██║██╔════╝██╔════╝╚══██╔══╝    ██╔════╝██║   ██║██║██║     
███████╗██║ █╗ ██║█████╗  █████╗     ██║       █████╗  ██║   ██║██║██║     
╚════██║██║███╗██║██╔══╝  ██╔══╝     ██║       ██╔══╝  ╚██╗ ██╔╝██║██║     
███████║╚███╔███╔╝███████╗███████╗   ██║       ███████╗ ╚████╔╝ ██║███████╗
╚══════╝ ╚══╝╚══╝ ╚══════╝╚══════╝   ╚═╝       ╚══════╝  ╚═══╝  ╚═╝╚══════╝
███████████████████████████████████████████████████████████████████████████



███████╗ █████╗ ██████╗ ██╗     ██╗   ██╗     █████╗  ██████╗ ██████╗███████╗███████╗███████╗    ████████╗███████╗ █████╗ ███╗   ███╗
██╔════╝██╔══██╗██╔══██╗██║     ╚██╗ ██╔╝    ██╔══██╗██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║
█████╗  ███████║██████╔╝██║      ╚████╔╝     ███████║██║     ██║     █████╗  ███████╗███████╗       ██║   █████╗  ███████║██╔████╔██║
██╔══╝  ██╔══██║██╔══██╗██║       ╚██╔╝      ██╔══██║██║     ██║     ██╔══╝  ╚════██║╚════██║       ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║
███████╗██║  ██║██║  ██║███████╗   ██║       ██║  ██║╚██████╗╚██████╗███████╗███████║███████║       ██║   ███████╗██║  ██║██║ ╚═╝ ██║
╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝  ╚═╝ ╚═════╝ ╚═════╝╚══════╝╚══════╝╚══════╝       ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████



███████╗███████╗███╗   ██╗    ███████╗ ██████╗ ██████╗ ██╗   ██╗███╗   ███╗
╚══███╔╝██╔════╝████╗  ██║    ██╔════╝██╔═══██╗██╔══██╗██║   ██║████╗ ████║
  ███╔╝ █████╗  ██╔██╗ ██║    █████╗  ██║   ██║██████╔╝██║   ██║██╔████╔██║
 ███╔╝  ██╔══╝  ██║╚██╗██║    ██╔══╝  ██║   ██║██╔══██╗██║   ██║██║╚██╔╝██║
███████╗███████╗██║ ╚████║    ██║     ╚██████╔╝██║  ██║╚██████╔╝██║ ╚═╝ ██║
╚══════╝╚══════╝╚═╝  ╚═══╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝
███████████████████████████████████████████████████████████████████████████






 █████╗ ██████╗ ██████╗ ██████╗ ███████╗ ██████╗██╗ █████╗ ████████╗███████╗    ███╗   ███╗██╗   ██╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗
██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝██║██╔══██╗╚══██╔══╝██╔════╝    ████╗ ████║╚██╗ ██╔╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝
███████║██████╔╝██████╔╝██████╔╝█████╗  ██║     ██║███████║   ██║   █████╗      ██╔████╔██║ ╚████╔╝     ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ 
██╔══██║██╔═══╝ ██╔═══╝ ██╔══██╗██╔══╝  ██║     ██║██╔══██║   ██║   ██╔══╝      ██║╚██╔╝██║  ╚██╔╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ 
██║  ██║██║     ██║     ██║  ██║███████╗╚██████╗██║██║  ██║   ██║   ███████╗    ██║ ╚═╝ ██║   ██║       ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗
╚═╝  ╚═╝╚═╝     ╚═╝     ╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚═╝     ╚═╝   ╚═╝        ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
  

██████╗  ██████╗ ███╗   ██╗ █████╗ ████████╗███████╗    ████████╗ ██████╗ 
██╔══██╗██╔═══██╗████╗  ██║██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝██╔═══██╗
██║  ██║██║   ██║██╔██╗ ██║███████║   ██║   █████╗         ██║   ██║   ██║
██║  ██║██║   ██║██║╚██╗██║██╔══██║   ██║   ██╔══╝         ██║   ██║   ██║
██████╔╝╚██████╔╝██║ ╚████║██║  ██║   ██║   ███████╗       ██║   ╚██████╔╝
╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝    ╚═════╝ 

     ██╗ █████╗ ███╗   ███╗███████╗███████╗██████╗ ██╗████████╗██╗  ██╗███████╗██████╗ ███████╗ ██╗ ██████╗  ██╗ ██████╗ ██╗     ██╗██╗   ██╗███████╗    ██████╗ ██████╗    ██╗   ██╗██╗  ██╗   
     ██║██╔══██╗████╗ ████║██╔════╝██╔════╝██╔══██╗██║╚══██╔══╝██║  ██║██╔════╝██╔══██╗██╔════╝███║██╔═████╗███║██╔═══██╗██║     ██║██║   ██║██╔════╝   ██╔════╝██╔═══██╗   ██║   ██║██║ ██╔╝
     ██║███████║██╔████╔██║█████╗  ███████╗██████╔╝██║   ██║   ███████║█████╗  ██████╔╝███████╗╚██║██║██╔██║╚██║██║██╗██║██║     ██║██║   ██║█████╗     ██║     ██║   ██║   ██║   ██║█████╔╝ 
██   ██║██╔══██║██║╚██╔╝██║██╔══╝  ╚════██║██╔═══╝ ██║   ██║   ██╔══██║██╔══╝  ██╔══██╗╚════██║ ██║████╔╝██║ ██║██║██║██║██║     ██║╚██╗ ██╔╝██╔══╝     ██║     ██║   ██║   ██║   ██║██╔═██╗ 
╚█████╔╝██║  ██║██║ ╚═╝ ██║███████╗███████║██║     ██║   ██║   ██║  ██║███████╗██║  ██║███████║ ██║╚██████╔╝ ██║╚█║████╔╝███████╗██║ ╚████╔╝ ███████╗██╗╚██████╗╚██████╔╝██╗╚██████╔╝██║  ██╗
 ╚════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝ ╚═╝ ╚═════╝  ╚═╝ ╚╝╚═══╝ ╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═╝  ╚═╝ 
 
 ██████╗ ██████╗     ███████╗██╗   ██╗██████╗ ███████╗ ██████╗██████╗ ██╗██████╗ ███████╗    ████████╗ ██████╗     ██████╗ ██████╗ ██╗██╗   ██╗ █████╗ ████████╗███████╗     ██╗ █████╗ ███╗   ███╗███████╗███████╗     ██████╗ ███╗   ██╗    ██╗   ██╗████████╗
██╔═══██╗██╔══██╗    ██╔════╝██║   ██║██╔══██╗██╔════╝██╔════╝██╔══██╗██║██╔══██╗██╔════╝    ╚══██╔══╝██╔═══██╗    ██╔══██╗██╔══██╗██║██║   ██║██╔══██╗╚══██╔══╝██╔════╝     ██║██╔══██╗████╗ ████║██╔════╝██╔════╝    ██╔═══██╗████╗  ██║    ╚██╗ ██╔╝╚══██╔══╝
██║   ██║██████╔╝    ███████╗██║   ██║██████╔╝███████╗██║     ██████╔╝██║██████╔╝█████╗         ██║   ██║   ██║    ██████╔╝██████╔╝██║██║   ██║███████║   ██║   █████╗       ██║███████║██╔████╔██║█████╗  ███████╗    ██║   ██║██╔██╗ ██║     ╚████╔╝    ██║   
██║   ██║██╔══██╗    ╚════██║██║   ██║██╔══██╗╚════██║██║     ██╔══██╗██║██╔══██╗██╔══╝         ██║   ██║   ██║    ██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══██║   ██║   ██╔══╝  ██   ██║██╔══██║██║╚██╔╝██║██╔══╝  ╚════██║    ██║   ██║██║╚██╗██║      ╚██╔╝     ██║   
╚██████╔╝██║  ██║    ███████║╚██████╔╝██████╔╝███████║╚██████╗██║  ██║██║██████╔╝███████╗       ██║   ╚██████╔╝    ██║     ██║  ██║██║ ╚████╔╝ ██║  ██║   ██║   ███████╗╚█████╔╝██║  ██║██║ ╚═╝ ██║███████╗███████║    ╚██████╔╝██║ ╚████║       ██║      ██║   
 ╚═════╝ ╚═╝  ╚═╝    ╚══════╝ ╚═════╝ ╚═════╝ ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═════╝ ╚══════╝       ╚═╝    ╚═════╝     ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚═╝  ╚═╝   ╚═╝   ╚══════╝ ╚════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚═╝  ╚═══╝       ╚═╝      ╚═╝   






████████╗██╗  ██╗ █████╗ ███╗   ██╗██╗  ██╗███████╗    ████████╗ ██████╗     ██╗     ███████╗████████╗██╗  ██╗ █████╗ ██╗         ██████╗  █████╗ ███╗   ██╗██████╗  █████╗     
╚══██╔══╝██║  ██║██╔══██╗████╗  ██║██║ ██╔╝██╔════╝    ╚══██╔══╝██╔═══██╗    ██║     ██╔════╝╚══██╔══╝██║  ██║██╔══██╗██║         ██╔══██╗██╔══██╗████╗  ██║██╔══██╗██╔══██╗    
   ██║   ███████║███████║██╔██╗ ██║█████╔╝ ███████╗       ██║   ██║   ██║    ██║     █████╗     ██║   ███████║███████║██║         ██████╔╝███████║██╔██╗ ██║██║  ██║███████║    
   ██║   ██╔══██║██╔══██║██║╚██╗██║██╔═██╗ ╚════██║       ██║   ██║   ██║    ██║     ██╔══╝     ██║   ██╔══██║██╔══██║██║         ██╔═══╝ ██╔══██║██║╚██╗██║██║  ██║██╔══██║    
   ██║   ██║  ██║██║  ██║██║ ╚████║██║  ██╗███████║       ██║   ╚██████╔╝    ███████╗███████╗   ██║   ██║  ██║██║  ██║███████╗    ██║     ██║  ██║██║ ╚████║██████╔╝██║  ██║    
   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝       ╚═╝    ╚═════╝     ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝    ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝    

 █████╗ ███╗   ██╗██████╗     ██████╗  ██╗     ██████╗ ██████╗ ███████╗███╗   ███╗██╗ ██████╗    ███████╗ ██████╗ ██████╗     ████████╗███████╗███████╗████████╗██╗███╗   ██╗ ██████╗ 
██╔══██╗████╗  ██║██╔══██╗    ╚════██╗███║    ██╔════╝██╔═══██╗██╔════╝████╗ ████║██║██╔════╝    ██╔════╝██╔═══██╗██╔══██╗    ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██║████╗  ██║██╔════╝ 
███████║██╔██╗ ██║██║  ██║     █████╔╝╚██║    ██║     ██║   ██║███████╗██╔████╔██║██║██║         █████╗  ██║   ██║██████╔╝       ██║   █████╗  ███████╗   ██║   ██║██╔██╗ ██║██║  ███╗
██╔══██║██║╚██╗██║██║  ██║    ██╔═══╝  ██║    ██║     ██║   ██║╚════██║██║╚██╔╝██║██║██║         ██╔══╝  ██║   ██║██╔══██╗       ██║   ██╔══╝  ╚════██║   ██║   ██║██║╚██╗██║██║   ██║
██║  ██║██║ ╚████║██████╔╝    ███████╗ ██║    ╚██████╗╚██████╔╝███████║██║ ╚═╝ ██║██║╚██████╗    ██║     ╚██████╔╝██║  ██║       ██║   ███████╗███████║   ██║   ██║██║ ╚████║╚██████╔╝
╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝     ╚══════╝ ╚═╝     ╚═════╝ ╚═════╝ ╚══════╝╚═╝     ╚═╝╚═╝ ╚═════╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝       ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝ 

Check out there helpful Youtube Videos

LethalPanda = https://www.youtube.com/channel/UCJUDNNrZ-lZ-xcF5to2xfoA

21cosmic = https://www.youtube.com/channel/UCT0lpcoWck_H7KsC_PUP3jA

Private James = https://www.youtube.com/channel/UC4PM7rvsgGE8tEWFqJbHeBw

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

How AntiRecoil Work

Rumble AR = Decreasing Strength = More AR (Down Motion)
Smart AR = Increasing Stength = More AR (Dowm Motion)

=====================================
How Aim Assist works

Pro Aim V1
Top Value - Radius
Bottom Value - Speed
/\/\/\/\/\/\/\/\/\/\/\/\/\

Cresents 
Top Value - Radius
Bottom Value - Angle
/\/\/\/\/\/\/\/\/\/\/\/\/\

Sticky Aim (CREDIT SS_NIKOLAI AND BATTS)

Top Value - ADS Radius
Middle Value ADS+Fire Radius
Bottom Value - Hip Radius
/\/\/\/\/\/\/\/\/\/\/\/\/\
																																																						*/
//Slide Cancel

//Rumble - Bases of controller vibrations
//Standard will get up once pressing Sprint

//=====================================	

/*

My Values (I play on 7,7 sens)

I use Cresent's polar

Top Value 16
Bottom Value 20
====================
Smart AR

Value = -16
====================
Slide = MW Rumble (delay 40)
====================
Enhance Scanning 

Top Value 12
Bottom Value 8

================
*/	

// Step 1

//--BUTTON LAYOUT -
//                   -Customize To Your Layout--
	int INVERTED     			 =      1; // Make 2 If you play inverted
	define LayOut				 =	    0; // Choose The Number From Below That Corresponds To Your Layout
	define AIM_X	 			 = PS4_RX; // Horizontal Look Stick
	define AIM_Y	 			 = PS4_RY; // Vertical   Look Stick
	define STRAFE 	 			 = PS4_LX; // Horizontal Moving Stick
	define WALK 	 			 = PS4_LY; // Vertical   Moving Stick
	define MENU_OPEN_BUTTON =  PS4_OPTIONS;// ADS + This Button To Open Menu
        define EditHold = On;       // LEAVE AS OFF UNLESS YOU USE HOLD EDIT TIME IN FORTNITE SETTINGS; CHANGE TO 100-150 DEPENDING ON WHAT YOU USE IN-GAME
        define FastReset = PS4_TOUCH;
																																																																																																		/*
	0  = Default
	1  = Tactical
	2  = Lefty
	3  = N0M4D/CHARLIE
	4  = N0M4D/CHARLIE TACTICAL
	5  = N0M4D/CHARLIE LEFTY
	6  = Bumper Jumper
	7  = Bumper Jumper Tactical
	8  = One-Hand Gunslinger
	9  = Stick & Move
	10 = Brawler
	11 = Beasty
	12 = Bumper Ping
	13 = Bumper Ping Tactical
	14 = Default Swapped
	15 = Tactical Swapped
	16 = Bumper Jumper Swapped
	17 = Bumper Jumper Tactical Swapped
	18 = Stick & Move Swapped
	19 = Beasty Swapped
	20 = Bumper Ping
	21 = Bumper Ping Tactical

Step 2
/*--Kill Switch Toggle. If set to TRUE, Kill Switch will be active by holding KILL_SWITCH_BUTTON and double tapping KILL_SWITCH_BUTTON_1
	FALSE will ignore your double press to activate Kill Switch																																																																																			*/
	define Kill_Switch_Toggle 	 = FALSE;
	define KILL_SWITCH_BUTTON 	 = PS4_L2;	// Hold This This Button To Activate & Deactivate Kill Switch
	define KILL_SWITCH_BUTTON_1	 = PS4_RIGHT;	// Double Tap This Button While Holding KILL_SWITCH_BUTTON_1 To Activate & Deactivate Kill Switch

//--Hair Triggers ( IF L2/LT OR R2/RT IS HELD MORE THEN 10% IT'LL REGISTER AS 100% IN THE GAME )
	int Hair_Triggers 			 = TRUE;
	
//--Set to TRUE if you want to block all controller vibrations (IN-GAME VIBRATIONS MUST STILL BE ENABLED THOUGH)
	define Rumble_Block 		 = TRUE;
	
//--Make TRUE if you are using **IN GAME* auto sprint	
	define AUTO_SPRINT  		 = FALSE;	
	
//--Slide Cancel Delay Time ~ 
	define Slide_Cancel_Delay 	 = 40; //Best Value Betwwn 40-75 In Warzone
	define THRESHOLD          	 = 75; //Threshold value needed for Slide Cancel to activate

//--Easy Prone Button


//--Quick Toggle Button Combos

	define QUICK_TOGGLES	  	 = 	  	  FALSE; 	// Make TRUE If You Want The Ability To Turn On Mods Without Entering Menu
	define DROPSHOT_TOGGLE       =   	 PS4_R2;	// When Drop Shot is enabled this is the button that triggers the activation of Drop Shot
	define RAPID_FIRE_BUTTON  	 =     PS4_LEFT;	// ADS + This Button To Activate Rapid Fire
	define DROP_SHOT_BUTTON   	 =     PS4_DOWN;	// ADS + This Button To Activate Drop Shot
	define B_HOP_BUTTON      	 =    PS4_RIGHT;	// ADS + This Button To Activate Akimbo Rapid Fire
	define JUMP_SHOT_BUTTON   	 =       PS4_UP;	// ADS + This Button To Activate Prone Rise
    define Easy_Prone_Button 	 =       PS4_R3;
    
    
//--This sets the color for your PS4 Light Bar - Minimum = 0 - Maximum = 255 - Google RGB Color Picker for your own color
	define PS4_Light_Bar		 = TRUE; 		// <---- Enable ONLY if you're using a PS4 controller
	define Blue    				 =   255;
	define Red     				 =   255;
	define Green   				 =   255;

  	int GetUpDelay;      int STRAFE_DELAY;  	int Time_Blow;  	int Auto_Ping_Press_Value;  	int MIN_RADIUS;  	int MAX_RADIUS;  	int MIN_ANGLE;  	int MAX_ANGLE;  	int ENHANCED_SCANNING_STRENGTH;  	int ENHANCED_SCANNING_SPEED;  	int AR_Strength;  	int Rapid_Fire_Speed;  	int in_game_menu_sens;  	int Polar_Radius;  	int Polar_Angle;  	int Radius_Min;  	int ADS_Size;  	int ADS_FIRE_Size;  	int HIPFIRE_Size;  	int ADS_Wait_Value;  	int ADS_FIRE_Wait_Value;  	int HIPFIRE_Wait_Value;  	int DropShotSpeed;  	int PolarRadius;  	int PolarAngle;  	int PolarRBoost;  	int PolarABoost;  	int QS_Delay;  	int FastReloadDelay;  	int AutoRunDelay;      define RadiusBoost    		 =  TRUE;  	define AngleBoost     		 =  TRUE;  	int ADS, FIRE, LETHAL, TACTICAL, JUMP, CROUCH, MELEE, SPRINT, RELOAD, SWAP, PING;  	int Wait_Time_Correction;  	int Jump_Shot;  	int Aim_Val, Wait_Val;  	int frame;  	int a;  	int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;  	int RX, RY, angleee, CosAngle, SinAngle, SpiralPosition1, SpiralPosition2, InnerSpiral, OuterSpiral, ActualMagnitude, MaxMagnitude;  	int Position;  	int ptime;  	int Strafe;  	int trigger_toggle;  	int update_timer;  	int C_RX;  	int C_RY;  	int L_RX;  	int L_RY;  	int AR_RY;  	int angle;  	int _ret;  	int mvt_direction;  	int Ar_Strength;  	int enhanced_scanning_angle;  	int inverted;  	int cooktime;  	int SPRINTING;  	int q;  	int Radius, Angle, Speed;  	int bufferindex_1;  	int _strafe;  	int _strafe_index;  	int _strafe_rand_1;  	int _strafe_rand_2;  	int charindex_1, digitindex_1;  	int double__tap[0x1E];  	int slide_enable 				= FALSE;  	int REFRESH_RATE 				= TIME_BASE * 10;   	int INC 						= 0x1, DEC, COLOUR[0x3];  	int color 						= 0x1;  	define MAGNITUDE 				= 0x1F4;  	define TIME_BASE 				= 0x8;  	define smartgrenade_safedelay   = 0xC80;  	define smartgrenade_throwdelay  = 1028;  	int smartrecoil_base;int smartrecoil_add,smartrecoil_y;  	int smartrecoil_rumble;  	int invert2;      int AR_Type;  int Pro_Aim_V1;  int Polar_Aim_Assist;  int DNAM_Polar;  int Triple_Sticky;  int ENHANCED_SCANNING;  int Aim__Abuse;  int AimSensCorrections;  int Rapid_Fire_Toggle;  int Slide_Cancel_Mode;  int JumpShot;  int ScopeShot;  int QuickScope;  int Strafe_Toggle;  int DropShot;  int holdbreath;  int AutoPing;  int Prone_Rise;  int Chicken_Mode;  int Strafe_Jump;  int Smart_Grenade;  int B_Hop;  int Auto_Blow;  int toggle_easyprone;  int Fast_Reload;  int EZ_AUTORUN;  int Fast_Melee;        	define NumofMods = 0x1B;  	int sel 		 =  0x1;  	int mod 		 =  0x2;  	int tab 		 =  0x0;  	int ss  		 = TRUE;  	int display 	 = TRUE;  	int ZS;  	int KS;  	int c_b;    const string OFF 	    = "Choose Type";  const string RUMBLE     = "Rumble AR";  const string SMART      = "Smart AR";   const string MWSTANDARD = "MW Standard";  const string MWRUMBLE   = "MW Rumble";  const string CWSTANDARD = "CW Standard";  const string CWRUMBLE   = "CW Rumble";  const string CIRCLE     = "Circular";  const string TALLOVAL   = "Tall Oval";  const string WIDEOVAL   = "Wide Oval";  const string SPIRAL     = "Spiral";  const string HELIX      = "Helix";  const string ADS_       = "ADS Only";  const string FIRE_      = "Fire Only";   const string ADS_FIRE   = "ADS + Fire";  const string ADS_TAC    = "ADS + Tac";  const string AIM__FIRE  = "Release ADS";  const string DBL__TAP   = "Double Tap";  const string RAPIDFIRE  = "Adjustable Rapid";  const string AKIMRAPID  = "Akimbo Rapid";  const string T_TexT[]   = {  	"Hold L2 + OPTIONS",    	"AntiRecoil", 	        	"Pro Aim V1",		    	"Cresents Polar",	    	"DoNotAtME Polar",      	"Batts Sticky",	        	"Enhanced Tracking",    	"Aim Abuse",		    	"Aim Corrections",	    	"Rapid Fire", 		   	"Slide Cancel",		    	"Jump Shot",	   	    	"Scope Shot",		   	"Quick Scope",		   	"Strafe",			    	"Dropshot", 		   	"Snipers Breath",	    	"Auto Ping",	 	   	"Drop & Jump",	  	    	"Crazy Dance",		   	"Strafe Jump",		    	"Smart Grenade",	    	"Bunny Hop",		    	"Smart C4",			    	"Easy Prone",		    	"Fast Reload",		    	"Auto Run",			    	"Turbo Melee",		    	"OFF",				    	"ON",				   	"Width",			  	"Height",			   	"Vertical",			    	"Horizontal",		    	"RPS",				    	"Kill Switch"		   };    init {  	mvt_direction = 1;        update_timer  = REFRESH_RATE;    	if(INVERTED == 2)  		inverted = -1;  	else  		inverted = 1;    	AR_Strength = (AR_Strength / 2) + AR_Strength;    	angle 					= 90 * inverted;  	enhanced_scanning_angle = 90 * inverted;    	if(get_pvar(SPVAR_63, 0x0, 0x270F, -9999) != 0x4D2) {  		set_pvar(SPVAR_63, 0x4D2):  			Reset_Script_Vars();  			Save();  	}    	Load_PVARs();	    	COLOUR = 0xFF;     	combo_run(Aimlock);     	if(Rapid_Fire_Speed > 0x1)  	Wait_Time_Correction = -10;    	while(q < 0x1E) {  	double__tap[q] = -1;         	q++; }  }    main {    Buttons(LayOut);    	if(get_console() == PIO_XB360 && get_controller() == PIO_PS4)	  		swap(PS4_TOUCH, PS4_SHARE);    	if(PS4_Light_Bar) {  		set_ps4_lbar(Blue, Red, Green);  	}      if(Kill_Switch_Toggle && get_ival(KILL_SWITCH_BUTTON) && double_click(KILL_SWITCH_BUTTON_1)) {  		KS = !KS  		frame = -1;  		combo_restart(Aimlock);  		display = TRUE;  	}    	if(!KS) {  	if(ZS == 0) {    	      		if(QUICK_TOGGLES) {  	    if(get_ival(ADS) && event_press(RAPID_FIRE_BUTTON)) {  	    	combo_run (Vibrate);  	        combo_restart(BLINK);  			Rapid_Fire_Toggle = !Rapid_Fire_Toggle;  			}  		}  	if(Rapid_Fire_Toggle) {  		if(get_ival(FIRE)) {  			combo_run(Rapid_Fire);	  			}  		if(event_release(FIRE)) {  			combo_stop(Rapid_Fire);  			}  			else if(Rapid_Fire_Toggle == 2) {  				if(get_ival(FIRE)) {  				combo_run(AkimboRapid);  				}  		if(event_release(FIRE)) {  			combo_stop(AkimboRapid);  				}  			}  		}  		    	  		C_RX = get_ival(AIM_X);  		C_RY = get_ival(AIM_Y);  			  		if(get_val(ADS) || get_val(FIRE))  			{									  				if(update_timer >= REFRESH_RATE)  				{					  					block(AIM_X, REFRESH_RATE);  					block(AIM_Y, REFRESH_RATE);  					  					_ret = get_mvt_direction(C_RX, L_RX);  										  					if(_ret != 0)  						mvt_direction = _ret;  					  					update_timer = 0;	  					  					L_RX = C_RX;  					L_RY = C_RY;  				}	  				  				if((AR_Type) && ((get_val(ADS)) && (get_val(FIRE))) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))  				{  					if(AR_Type == 1)  					{  						AR_RY = get_rumble_evil_ar();  					}  					else  					{  						AR_RY = get_smart_recoil();  				}  				  smartrecoil_base = 0;  		          invert2 = 1;  		          smartrecoil_y = invert2 * -1;  		          smartrecoil_add = AR_Strength ;	    					if(inverted == -1)  						C_RY += inv(AR_RY);  					else  						C_RY += AR_RY;  				}  						  				if(Pro_Aim_V1)  				{		  					if(ENHANCED_SCANNING)  					{  						if(mvt_direction == 1)  						{  							C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, sin(enhanced_scanning_angle));  							C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, cos(enhanced_scanning_angle));  						}  						else  						{  							C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, cos(enhanced_scanning_angle));  							C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, sin(enhanced_scanning_angle));  						}  										  						enhanced_scanning_angle = ((enhanced_scanning_angle + ENHANCED_SCANNING_SPEED)%360);  					}  					  					if(mvt_direction == 1)  					{  						C_RX += get_polar_coordinate(random(MIN_RADIUS, MAX_RADIUS), sin(angle));  						C_RY += get_polar_coordinate(random(MIN_RADIUS, MAX_RADIUS), cos(angle));  					}  					else  					{  						C_RX += get_polar_coordinate(random(MIN_RADIUS, MAX_RADIUS), cos(angle));  						C_RY += get_polar_coordinate(random(MIN_RADIUS, MAX_RADIUS), sin(angle));  					}  					  					angle = ((angle + random(MIN_ANGLE,MAX_ANGLE))%360);  				}  				  				set_val(AIM_X, clamp(C_RX, -100, 100));  				set_val(AIM_Y, clamp(C_RY, -100, 100));  				  				update_timer += get_rtime();  			}  			else  			{  				update_timer = 0;  				update_timer = REFRESH_RATE;  				  				angle = 90 * inverted;  				enhanced_scanning_angle = 90 * inverted;  				  				set_val(AIM_X, C_RX);  				set_val(AIM_Y, C_RY);  			}  		    		  	if(Hair_Triggers) {  		if(get_ival(PS4_R2) > 0xA)   			set_val(PS4_R2, 0x64);  	  		if(get_ival(PS4_L2) > 0xA)  			set_val(PS4_L2, 0x64);  	}  		    	      	if(Polar_Aim_Assist) {  		if(get_ival(ADS) && abs(get_ival(AIM_X)) <= 0x14 && abs(get_ival(AIM_Y)) <= 0x14) {  			if(RadiusBoost && get_ival(FIRE)) {  				Radius = PolarRadius + PolarRBoost;  		}   		else   		{  				Radius = PolarRadius;  		}  	if(AngleBoost && get_ival(FIRE)) {  				Angle = PolarAngle + PolarABoost;  		}  		else   		{  				Angle = PolarAngle;  		}  				set_polar(POLAR_RS, Speed = (Speed + Angle) % 0x168, (abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 0x4 + Radius * 0x148);  		}  	}  		    	if(Aim__Abuse == TRUE) {  	  Hair_Triggers = FALSE;  	if(get_ival(ADS) > 0x5F) {        combo_run(Aim_Abuse);   	  }     if(event_release(ADS)) {   	  combo_stop(Aim_Abuse);   		}  	}  	else   	{  		Hair_Triggers = TRUE;  	}  		  		  		  		if(QUICK_TOGGLES) {  		if(get_ival(ADS) && event_press(DROP_SHOT_BUTTON)) {  	        combo_run (Vibrate);  	        combo_restart(BLIINK);  			DropShot = !DropShot;  			}  		}  		if (DropShot) {  	    	if(get_ival(DROPSHOT_TOGGLE))combo_run(DroppShott);   		}  		    	  	if(Triple_Sticky) {  		if(get_ival(ADS) && !get_ival(FIRE)) {  	combo_run(Sticky_AA);  		Aim_Val  = ADS_Size;  		Wait_Val = ADS_Wait_Value;  	}   	else if(get_ival(ADS) && get_ival(FIRE)) {  	combo_run(Sticky_AA);  		Aim_Val  = ADS_FIRE_Size;  		Wait_Val = ADS_FIRE_Wait_Value;  	}   	else if(!get_ival(ADS) && get_ival(FIRE)) {  	combo_run(Sticky_AA);  		Aim_Val  = HIPFIRE_Size;  		Wait_Val = HIPFIRE_Wait_Value;  	}   	else   	{  		combo_stop(Sticky_AA);  			}  		}  	    		  	if(DNAM_Polar) {    		RX = get_val(AIM_X);  		RY = get_val(AIM_Y);  		  		ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));  		MaxMagnitude    = (ActualMagnitude < 100);    		angleee += Polar_Angle;  		angleee = angleee % 360;  		CosAngle = DNAMPolarArray[(angleee + 270) % 360];  		SinAngle = DNAMPolarArray[angleee % 360];    	if(get_ival(ADS) || get_ival(FIRE)) {  		if(ActualMagnitude < Polar_Radius)  			{  				SinAngle -= RY;  				CosAngle -= RX;  			}  			else  			{  				SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  				CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  			}  		GetShapes(Polar_Radius);  		}  	}  	    		  	if(Fast_Melee) {  		if(!get_val(ADS) && get_val(MELEE)) {  			combo_run(Turbo_Melee);  	}  	else  	{  		if(combo_running(Turbo_Melee))  			combo_stop(Turbo_Melee);  		}  	}  		    	  	if(Smart_Grenade) {  		if(combo_running(Cook_And_Release_Grenade) && (cooktime == smartgrenade_throwdelay) && (main_button_pressed(LETHAL) || double_click(LETHAL))) {  			combo_stop(Cook_And_Release_Grenade);  		}  		if(get_ival(LETHAL) && get_ptime(LETHAL) < 0xC8)  		{  			cooktime = smartgrenade_throwdelay;  			combo_run(Cook_And_Release_Grenade);  		}  		if(get_ival(LETHAL) && get_ptime(LETHAL) > 0xC8)  		{  			cooktime = smartgrenade_safedelay;  			combo_run(Cook_And_Release_Grenade);  		}  	}  		    		     if(Strafe_Toggle) {  		if(get_ival(FIRE)) {  				combo_run(strafe);  			}  			else   			{  				combo_stop(strafe);  			}  		}  		    	  		if(QUICK_TOGGLES) {  		if(get_ival(ADS) && event_press(B_HOP_BUTTON)) {  	        combo_run (Vibrate);  	        combo_restart(BLIIINK);  			B_Hop = !B_Hop;  			}  		}  		if(B_Hop) {  		if (get_ival(JUMP) && get_ptime(JUMP) > 0xC8) {  			combo_run(BUNNYHOP);  		}   		else   		{  			if(combo_running(BUNNYHOP))  				combo_stop(BUNNYHOP);   			}  		}  	  		  		  	if(QuickScope) {  	  if(QuickScope == 1) {  		if(trigger_toggle == TRUE && get_ival(RELOAD) || trigger_toggle == TRUE && get_ival(LETHAL)) {  	set_val(RELOAD, 0x0); set_val(LETHAL, 0x0);  		} else if(event_release(RELOAD) || event_release(LETHAL)) {   		trigger_toggle = FALSE; }   	if(event_press(ADS)) {   		trigger_toggle = TRUE;   		} else if(get_ival(ADS) && get_ptime(ADS) > 0x8C) {   	set_val(SPRINT, 0x64);   		} else if(trigger_toggle == TRUE && event_release(ADS)) {   			combo_run(QuickScopee); }   	if(event_press(SPRINT)) {  		combo_run(Hold_Breath); }  		} else if(QuickScope == 2) {          if(event_release(ADS) && get_ptime(ADS) <= 0xFA) {              combo_run(QuickScopee); }  		}  	}  		  	if(Fast_Reload && double_click(RELOAD)) {  			combo_run(FastReload);  		}  	     if(ScopeShot) {        if(get_ival(FIRE) && !get_ival(ADS)) {            set_val(ADS, 0x64);   		  }  		}  		  		  		if (get_val(SPRINT) && get_val(WALK) < -THRESHOLD)  		{  			SPRINTING = TRUE;  		}  		  		if(SPRINTING)  		{  			if(get_ival(WALK) > -THRESHOLD)  			{  				SPRINTING = FALSE;  			}  		}  		  		if (AUTO_SPRINT)  		{  			SPRINTING = TRUE  		}  		if (EZ_AUTORUN)  		{  			if (!get_val(ADS) && get_val(WALK) < -THRESHOLD)   			{  				combo_run(EASY_RUN);  			}  		}  		  		if(Prone_Rise) {              if (get_ival(FIRE))                  combo_run(ProneRise);  			}  	     	if(Strafe_Jump) {  			Jump_Shot = TRUE;  			Strafe    = TRUE;  		}   		else   		{  			Jump_Shot = FALSE;  			Strafe    = FALSE;  		}  	if(Jump_Shot) {    	if(get_ival(FIRE)) combo_run(JumpyShot);  	}     if(Strafe) {  		if(get_ival(FIRE)) {  			combo_run(strafe);  			}  			else combo_stop(strafe);  			}  		  	if (Chicken_Mode) {  		if(get_ival(FIRE)) {  			combo_run(strafe);  				combo_run(Dropping_Shot); }			  			}   			else   			{  			combo_stop(strafe);  				combo_stop(Dropping_Shot);   			}  	  	      if(holdbreath) {  		if(get_ival(ADS))  		   	set_val(SPRINT, 100);    	if(get_ival(WALK) < -90 && get_ival(ADS) && get_ptime(ADS) > 200)  		combo_stop(CH);           	if(event_press(ADS))   		combo_run(CH);    	if(get_ival(ADS) && get_lval(SPRINT))   		set_val(SPRINT, 0);    	}  		  		if(Slide_Cancel_Mode) {  	        if((get_ival(WALK) < -THRESHOLD) || (get_ival(WALK) > THRESHOLD) || (get_ival(STRAFE) < -THRESHOLD) || (get_ival(STRAFE) > THRESHOLD)) {  	            slide_enable = 0;  	        if(event_release(CROUCH)) {  	                if (Slide_Cancel_Mode == 1) {  	                    slide_enable = 1;  	                }  	                else if (Slide_Cancel_Mode == 2)   	                {  	                    if(((get_rumble(RUMBLE_A) == 0x57 || get_rumble(RUMBLE_A) == 0x1A))) {  	                        slide_enable = 1;  	                    }  	                }  	                else if (Slide_Cancel_Mode == 3)   	                {  	                    slide_enable = 2;  	                }  	                else if (Slide_Cancel_Mode == 4)   	                {  	                    if(((get_rumble(RUMBLE_A) == 0x64 || get_rumble(RUMBLE_A) == 0x24))) {  	                        slide_enable = 2;  	                    }  	                }  	            }  	            if(slide_enable) {  	                if(slide_enable == 1)  	                    combo_run(CANCEL_SLIDE_MW);  	                else if(slide_enable == 2)  	                    combo_run(CANCEL_SLIDE_CW);          	            }  	        }                  	    }  		  		if(AutoPing) {  			if (AutoPing == 1) {  				if(event_press(ADS))  					combo_run(AutoPingC);  		}  		else  			if(AutoPing == 2) {  				if(event_press(FIRE))  					combo_run(AutoPingC);  		}  		else  			if(AutoPing == 3) {  				if(get_ival(ADS) && event_press(FIRE))  					combo_run(AutoPingC);  		}  		else  			if(AutoPing == 4) {  				if(get_ival(ADS) && event_press(TACTICAL))  					combo_run(AutoPingC);  			}  		}  		    if (AimSensCorrections) {      ads_grenade_sens = 0x64 - (in_game_menu_sens);      ads_fire_sens    = 0x60 - (in_game_menu_sens);      actual_sens      = 0x64;      if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(LETHAL) && !get_ival(TACTICAL)) {        Sens = actual_sens;      } else if (get_ival(ADS) && !get_ival(FIRE)) {        Sens = ads_grenade_sens;      } else if (!get_ival(ADS) && get_ival(FIRE)) {        Sens = actual_sens;      } else if (get_ival(ADS) && get_ival(FIRE)) {        Sens = ads_fire_sens;      } else if (get_ival(TACTICAL) || get_ival(LETHAL)) {        Sens = ads_grenade_sens;      }      if(isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) > 25) {        if (Sens > 0x64) Sens = 0x64;        sensitivity(AIM_X, NOT_USE, Sens);        sensitivity(AIM_Y, NOT_USE, Sens);  		}  	}  	  	if(Auto_Blow) {  		if(event_release(LETHAL))  			combo_run(BOOM);  	}  		      if(toggle_easyprone) {          if(get_ival(FIRE) && event_press(Easy_Prone_Button)) {              combo_run(Easy_Prone);          }          if(get_ival(Easy_Prone_Button) && event_press(FIRE)) {              combo_run(Easy_Prone);          }          if(get_ival(Easy_Prone_Button)&& event_release(FIRE)) {              combo_run(Get_Up);          }          if(get_ival(FIRE)&& event_release(Easy_Prone_Button)) {              combo_run(Get_Up);          }      }  		   		if(QUICK_TOGGLES) {  	    if(get_ival(ADS) && event_press(JUMP_SHOT_BUTTON)) {  	    	combo_run (Vibrate);  	        combo_restart(BLINK1);  			JumpShot = !JumpShot;  			}  		}  	    if(JumpShot) {    			if(get_ival(FIRE)) combo_run(JumpyShot);  		}  		  		if(Rumble_Block) {  			block_rumble();  		}  		    		if(ptime != 0x67)  			ptime += get_rtime();    		if(get_ival(ADS) && event_press(MENU_OPEN_BUTTON)) {  			ZS = 1;  			combo_stop(RGB);  			display = TRUE;  			}  		combo_run(RGB);   	}  	NikO_ChecK();  	if(ZS == 1) {  		block_all_inputs();  		block_all_outputs();    		if(mod == 1) {  		   if(event_press(PS4_CROSS)) {        		      AR_Type ++;    		      if(AR_Type  > 0x2) AR_Type = 0x0;  		      display = TRUE;   		   }  	    }  		if(mod == 4) {  		   if(event_press(PS4_CROSS)) {        		      DNAM_Polar ++;    		      if(DNAM_Polar  > 0x5) DNAM_Polar = 0x0;  		      display = TRUE;   		   }  	    }  		if(mod == 9) {   		if(event_press(PS4_CROSS)) {        		      Rapid_Fire_Toggle ++;    		      if(Rapid_Fire_Toggle  > 0x2) Rapid_Fire_Toggle = 0x0;  		      display = TRUE;   		   }  	    }  		if(mod == 10) {   		if(event_press(PS4_CROSS)) {        		      Slide_Cancel_Mode ++;    		      if(Slide_Cancel_Mode  > 0x4) Slide_Cancel_Mode = 0x0;  		      display = TRUE;   		   }  		}  		if(mod == 13) {   		if(event_press(PS4_CROSS)) {        		      QuickScope ++;    		      if(QuickScope  > 0x2) QuickScope = 0x0;  		      display = TRUE;   		   }  	    }  		if(mod == 17) {   		if(event_press(PS4_CROSS)) {        		      AutoPing ++;    		      if(AutoPing  > 0x4) AutoPing = 0x0;  		      display = TRUE;   		   }  	    }  		if(event_press(PS4_CROSS) && (mod == 2))Pro_Aim_V1 = !Pro_Aim_V1  		if(event_press(PS4_CROSS) && (mod == 3))Polar_Aim_Assist = !Polar_Aim_Assist  		if(event_press(PS4_CROSS) && (mod == 5))Triple_Sticky = !Triple_Sticky  		if(event_press(PS4_CROSS) && (mod == 6))ENHANCED_SCANNING = !ENHANCED_SCANNING  		if(event_press(PS4_CROSS) && (mod == 7))Aim__Abuse = !Aim__Abuse  		if(event_press(PS4_CROSS) && (mod == 8))AimSensCorrections = !AimSensCorrections  		if(event_press(PS4_CROSS) && (mod == 11))JumpShot = !JumpShot  		if(event_press(PS4_CROSS) && (mod == 12))ScopeShot = !ScopeShot  		if(event_press(PS4_CROSS) && (mod == 14))Strafe_Toggle = !Strafe_Toggle  		if(event_press(PS4_CROSS) && (mod == 15))DropShot = !DropShot  		if(event_press(PS4_CROSS) && (mod == 16))holdbreath = !holdbreath  		if(event_press(PS4_CROSS) && (mod == 18))Prone_Rise = !Prone_Rise  		if(event_press(PS4_CROSS) && (mod == 19))Chicken_Mode = !Chicken_Mode  		if(event_press(PS4_CROSS) && (mod == 20))Strafe_Jump = !Strafe_Jump  		if(event_press(PS4_CROSS) && (mod == 21))Smart_Grenade = !Smart_Grenade  		if(event_press(PS4_CROSS) && (mod == 22))B_Hop = !B_Hop  		if(event_press(PS4_CROSS) && (mod == 23))Auto_Blow = !Auto_Blow  		if(event_press(PS4_CROSS) && (mod == 24))toggle_easyprone = !toggle_easyprone  		if(event_press(PS4_CROSS) && (mod == 25))Fast_Reload = !Fast_Reload  		if(event_press(PS4_CROSS) && (mod == 26))EZ_AUTORUN = !EZ_AUTORUN  		if(event_press(PS4_CROSS) && (mod == 27))Fast_Melee = !Fast_Melee    		if(event_press(PS4_SQUARE) && mod == 25) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 24) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 23) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 17) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 15) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 14) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 13) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 9) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 8) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 6) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 5) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 4) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 3) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 2) {  			ZS = 2;  			display = TRUE;  		}  		if(event_press(PS4_SQUARE) && mod == 1) {  			ZS = 2;  			display = TRUE;  		}    		if(mod == 1) {  			if(AR_Type) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 2) {  			if(Pro_Aim_V1) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 3) {  			if(Polar_Aim_Assist) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 4) {  			if(DNAM_Polar) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 5) {  			if(Triple_Sticky) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 6) {  			if(ENHANCED_SCANNING) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 7) {  			if(Aim__Abuse) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 8) {  			if(AimSensCorrections) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 9) {  			if(Rapid_Fire_Toggle) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 10) {  			if(Slide_Cancel_Mode) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 11) {  			if(JumpShot) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 12) {  			if(ScopeShot) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 13) {  			if(QuickScope) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 14) {  			if(Strafe_Toggle) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 15) {  			if(DropShot) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 16) {  			if(holdbreath) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  	    if(mod == 17) {  			if(AutoPing) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 18) {  			if(Prone_Rise) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 19) {  			if(Chicken_Mode) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 20) {  			if(Strafe_Jump) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 21) {  			if(Smart_Grenade) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 22) {  			if(B_Hop) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 23) {  			if(Auto_Blow) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 24) {  			if(toggle_easyprone) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 25) {  			if(Fast_Reload) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 26) {  			if(EZ_AUTORUN) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(mod == 27) {  			if(Fast_Melee) { set_rgb(0x0, 0xFF, 0x0) }  			else { set_rgb(0xFF, 0x0, 0x0) }  		}  		if(event_press(PS4_UP)) {  			mod --;  			display = TRUE;  		}  		if(event_press(PS4_DOWN)) {  			mod ++;  			display = TRUE;  		}  		if(mod > NumofMods) mod = 1  		if(mod < 1) mod = NumofMods  		  		if(event_press(PS4_CIRCLE)) {  			ZS = 0;  			Save();  			frame = -1;  			combo_restart(Aimlock);  			display = TRUE;  		}  	}  	if(ZS == 2) {  		block_all_inputs();  		block_all_outputs();    		if(event_press(PS4_CIRCLE) && (mod == 25 || 24 || 23 || 17 || 15 || 14 || 9 || 8 || 6 || 5 || 4 || 3 || 2 || 1)) {  			ZS = 1;  			display = TRUE;  		}  		if(event_press(PS4_UP)) {  			sel ++ ;  			display = TRUE;  		}  		if(event_press(PS4_DOWN)) {  			sel -- ;  			display = TRUE;  		}  		if(sel < 0) sel = 0  		if(sel > 2) sel = 2    		if(mod == 2 || 3 || 4 && tab == 1) {              if(sel < 0) sel = 0              if(sel > 2) sel = 2          }    		if(mod == 1) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && AR_Strength != 0x64)) {  					AR_Strength = AR_Strength + 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && AR_Strength != -100)) {  					AR_Strength = AR_Strength - 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  		}  		if(mod == 2) {  			if(tab == 0) {  				if(event_press(PS4_R1)) {  					tab += 1  					display = TRUE;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && MAX_RADIUS < 50)) {  					MAX_RADIUS = MAX_RADIUS + 0x1;  					display       = TRUE;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && MAX_RADIUS > 0)) {  					MAX_RADIUS = MAX_RADIUS - 0x1;  					display 	  = TRUE;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && MIN_RADIUS < 50)) {  					MIN_RADIUS = MIN_RADIUS + 0x1;  					display 	 = TRUE;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && MIN_RADIUS > 0)) {  					MIN_RADIUS = MIN_RADIUS - 0x1;  					display		 = TRUE;  				}  			}  			if(tab == 1) {  				if(event_press(PS4_L1)) {  					tab -= 1  					display = TRUE;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && MAX_ANGLE < 50)) {  					MAX_ANGLE = MAX_ANGLE + 0x1;  					display 			= TRUE;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && MAX_ANGLE > 0)) {  					MAX_ANGLE = MAX_ANGLE - 0x1;  					display 			= TRUE;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && MIN_ANGLE < 50)) {  					MIN_ANGLE = MIN_ANGLE + 0x1;  					display 		   = TRUE;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && MIN_ANGLE > 0)) {  					MIN_ANGLE = MIN_ANGLE - 0x1;  					display 		   = TRUE;  				}  			}  		}  		if(mod == 3) {  			if(tab == 0) {  				if(event_press(PS4_R1)) {  					tab += 1  					display = TRUE;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarRadius < 50)) {  					PolarRadius = PolarRadius + 0x1;  					display       = TRUE;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarRadius > 0)) {  					PolarRadius = PolarRadius - 0x1;  					display 	  = TRUE;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarAngle < 50)) {  					PolarAngle = PolarAngle + 0x1;  					display 	 = TRUE;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarAngle > 0)) {  					PolarAngle = PolarAngle - 0x1;  					display		 = TRUE;  				}  			}  			if(tab == 1) {  				if(event_press(PS4_L1)) {  					tab -= 1  					display = TRUE;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarRBoost < 50)) {  					PolarRBoost = PolarRBoost + 0x1;  					display 			= TRUE;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarRBoost > 0)) {  					PolarRBoost = PolarRBoost - 0x1;  					display 			= TRUE;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && PolarABoost < 50)) {  					PolarABoost = PolarABoost + 0x1;  					display 		   = TRUE;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && PolarABoost > 0)) {  					PolarABoost = PolarABoost - 0x1;  					display 		   = TRUE;  				}  			}  		}  		if(mod == 4) {  			if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Polar_Radius < 50)) {  					Polar_Radius  = Polar_Radius + 0x1;  					display = TRUE;  					ptime 	= 0;  			}  			if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Polar_Radius > 0)) {  					Polar_Radius  = Polar_Radius - 0x1;  					display = TRUE;  					ptime 	= 0;  			}  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Polar_Angle < 50)) {  					Polar_Angle = Polar_Angle + 0x1;  					display  = TRUE;  					ptime 	 = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Polar_Angle > 0)) {  					Polar_Angle = Polar_Angle - 0x1;  					display  = TRUE;  					ptime 	 = 0;  			}  			if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Radius_Min < 50)) {  					Radius_Min = Radius_Min + 0x1;  					display    = TRUE;  					ptime 	   = 0;  			}  			if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Radius_Min > 0)) {  					Radius_Min = Radius_Min - 0x1;  					display    = TRUE;  					ptime 	   = 0;  			}  		}  		if(mod == 5) {  			if(tab == 0) {  				if(event_press(PS4_R1)) {  					tab += 1  					display = TRUE;  				}  				if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ADS_Size < 50)) {  					ADS_Size = ADS_Size + 0x1;  					display  = TRUE;  					ptime 	 = 0;  				}  				if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ADS_Size > 0)) {  					ADS_Size = ADS_Size - 0x1;  					display  = TRUE;  					ptime 	 = 0;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ADS_FIRE_Size < 50)) {  					ADS_FIRE_Size = ADS_FIRE_Size + 0x1;  					display       = TRUE;  					ptime 		  = 0;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ADS_FIRE_Size > 0)) {  					ADS_FIRE_Size = ADS_FIRE_Size - 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && HIPFIRE_Size < 50)) {  					HIPFIRE_Size = HIPFIRE_Size + 0x1;  					display 	 = TRUE;  					ptime 		 = 0;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && HIPFIRE_Size > 0)) {  					HIPFIRE_Size = HIPFIRE_Size - 0x1;  					display		 = TRUE;  					ptime 		 = 0;  				}  			}  			if(tab == 1) {  				if(event_press(PS4_L1)) {  					tab -= 1  					display = TRUE;  				}  				if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ADS_Wait_Value < 0x64)) {  					ADS_Wait_Value = ADS_Wait_Value + 0x1;  					display        = TRUE;  					ptime 		   = 0;  				}  				if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ADS_Wait_Value > 0)) {  					ADS_Wait_Value = ADS_Wait_Value - 0x1;  					display        = TRUE;  					ptime 		   = 0;  				}  				if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ADS_FIRE_Wait_Value < 0x64)) {  					ADS_FIRE_Wait_Value = ADS_FIRE_Wait_Value + 0x1;  					display 			= TRUE;  					ptime 				= 0;  				}  				if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ADS_FIRE_Wait_Value > 0)) {  					ADS_FIRE_Wait_Value = ADS_FIRE_Wait_Value - 0x1;  					display 			= TRUE;  					ptime 				= 0;  				}  				if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && HIPFIRE_Wait_Value < 0x64)) {  					HIPFIRE_Wait_Value = HIPFIRE_Wait_Value + 0x1;  					display 		   = TRUE;  					ptime 		  	   = 0;  				}  				if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && HIPFIRE_Wait_Value > 0)) {  					HIPFIRE_Wait_Value = HIPFIRE_Wait_Value - 0x1;  					display 		   = TRUE;  					ptime 			   = 0;  				}  			}  		}  		if(mod == 6) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ENHANCED_SCANNING_STRENGTH < 50)) {  					ENHANCED_SCANNING_STRENGTH = ENHANCED_SCANNING_STRENGTH + 0x1;  					display    = TRUE;  					ptime 	   = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ENHANCED_SCANNING_STRENGTH > 0)) {  					ENHANCED_SCANNING_STRENGTH = ENHANCED_SCANNING_STRENGTH - 0x1;  					display    = TRUE;  					ptime 	   = 0;  			}  			if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && ENHANCED_SCANNING_SPEED < 50)) {  					ENHANCED_SCANNING_SPEED = ENHANCED_SCANNING_SPEED + 0x1;  					display   = TRUE;  					ptime 	  = 0;  			}  			if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && ENHANCED_SCANNING_SPEED > 0)) {  					ENHANCED_SCANNING_SPEED = ENHANCED_SCANNING_SPEED - 0x1;  					display   = TRUE;  					ptime 	  = 0;  			}  		}  		if(mod == 8) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && in_game_menu_sens < 20)) {  					in_game_menu_sens = in_game_menu_sens + 0x1;  					display 		  = TRUE;  					ptime 			  = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && in_game_menu_sens > 0)) {  					in_game_menu_sens = in_game_menu_sens - 0x1;  					display 		  = TRUE;  					ptime 			  = 0;  			}  		}  		if(mod == 9) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Rapid_Fire_Speed < 15)) {  					Rapid_Fire_Speed = Rapid_Fire_Speed + 0x1;  					display 		 = TRUE;  					ptime 			 = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Rapid_Fire_Speed > 0)) {  					Rapid_Fire_Speed = Rapid_Fire_Speed - 0x1;  					display 		 = TRUE;  					ptime 			 = 0;  			}  		}  		if(mod == 13) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && QS_Delay < 0x3E8)) {  					QS_Delay 	= QS_Delay + 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && QS_Delay > 0)) {  					QS_Delay	= QS_Delay - 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  		}  		if(mod == 14) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && STRAFE_DELAY < 9999)) {  					STRAFE_DELAY = STRAFE_DELAY + 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && STRAFE_DELAY > 0)) {  					STRAFE_DELAY	= STRAFE_DELAY - 0x1;  					display 	= TRUE;  					ptime 		= 0;  			}  		}  		if(mod == 15) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && DropShotSpeed < 0x64)) {  					DropShotSpeed = DropShotSpeed + 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && DropShotSpeed > 0)) {  					DropShotSpeed = DropShotSpeed - 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  				}  			}  		if(mod == 17) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Auto_Ping_Press_Value < 0x64)) {  					Auto_Ping_Press_Value = Auto_Ping_Press_Value + 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Auto_Ping_Press_Value > 0)) {  					Auto_Ping_Press_Value = Auto_Ping_Press_Value - 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  				}  			}  		if(mod == 23) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Time_Blow < 9999)) {  					Time_Blow 	  = Time_Blow + 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Time_Blow > 0)) {  					Time_Blow 	  = Time_Blow - 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  				}  			}  		if(mod == 24) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && Auto_Ping_Press_Value < 0x64)) {  					GetUpDelay    = GetUpDelay + 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && Auto_Ping_Press_Value > 0)) {  					GetUpDelay 	  = GetUpDelay - 0x1;  					display 	  = TRUE;  					ptime 		  = 0;  				}  			}  		if(mod == 25) {  			if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 512) && FastReloadDelay < 9999)) {  					FastReloadDelay = FastReloadDelay + 0x1;  					display     = TRUE;  					ptime 		= 0;  			}  			if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 524) && FastReloadDelay > 0)) {  					FastReloadDelay = FastReloadDelay - 0x1;  					display     = TRUE;  					ptime 	    = 0;  				}  			}  		}  	}  	if(ss) {  		if(ZS == 0) TexT1()  		if(ZS == 1) TexT2()  		rect_oled(0x0, 0x0, 0x80, 0x40, 0x0, 0x1);      	c_b += get_rtime();  		ScreenSaver()      	if(c_b >= 0x2328) {        		cls_oled(0);        		c_b = 0;        		ss  = FALSE;      	}  	}  	if(display) {  		cls_oled(0);  		c_b = 0;  		if(!KS){ 
	

     if (InstaFastReset) {
    	
    	if (event_press(FastReset)) { 
       	
    		combo_run(FastReset);
     } }	 		if(ZS == 0) {  			printf (CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 0x12, 0x0, 0x1, T_TexT[0]);  		}  		  		if(ZS == 1) {  			printf (CenterX(GetChars(mod), OLED_FONT_SMALL_WIDTH),CenterY(OLED_FONT_SMALL_HEIGHT), 0x0, 0x1, T_TexT[mod]);    		if(mod == 1) {  		     if (AR_Type == 0)  		         printf(CenterX(sizeof(OFF)        - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (AR_Type == 1)  				 printf(CenterX(sizeof(RUMBLE)     - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, RUMBLE[0]);  			else if (AR_Type == 2)  				 printf(CenterX(sizeof(SMART)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, SMART[0]);  			}  		if(mod == 4) {  		     if (DNAM_Polar == 0)  		         printf(CenterX(sizeof(OFF)        - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (DNAM_Polar == 1)  				 printf(CenterX(sizeof(CIRCLE)     - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, CIRCLE[0]);  			 else if (DNAM_Polar == 2)  				 printf(CenterX(sizeof(TALLOVAL)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, TALLOVAL[0]);  			 else if (DNAM_Polar == 3)  				 printf(CenterX(sizeof(WIDEOVAL)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, WIDEOVAL[0]);  			 else if (DNAM_Polar == 4)  				 printf(CenterX(sizeof(SPIRAL)     - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, SPIRAL[0]);  			 else if (DNAM_Polar == 5)  				 printf(CenterX(sizeof(HELIX)     - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, HELIX[0]);  			}  		if(mod == 9) {  		     if (Rapid_Fire_Toggle == 0)  		         printf(CenterX(sizeof(OFF)        - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (Rapid_Fire_Toggle == 1)  				 printf(CenterX(sizeof(RAPIDFIRE)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, RAPIDFIRE[0]);  			else if (Rapid_Fire_Toggle == 2)  				 printf(CenterX(sizeof(AKIMRAPID)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, AKIMRAPID[0]);  			}  		if(mod == 10) {  		     if (Slide_Cancel_Mode == 0)  		         printf(CenterX(sizeof(OFF) 	   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (Slide_Cancel_Mode == 1)  				 printf(CenterX(sizeof(MWSTANDARD) - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, MWSTANDARD[0]);  			 else if (Slide_Cancel_Mode == 2)  				 printf(CenterX(sizeof(MWRUMBLE)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, MWRUMBLE[0]);  			 else if (Slide_Cancel_Mode == 3)  				 printf(CenterX(sizeof(CWSTANDARD) - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, CWSTANDARD[0]);  			 else if (Slide_Cancel_Mode == 4)  				 printf(CenterX(sizeof(CWRUMBLE)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, CWRUMBLE[0]);  			}  		if(mod == 13) {  		     if (QuickScope == 0)  		         printf(CenterX(sizeof(OFF)        - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (QuickScope == 1)  				 printf(CenterX(sizeof(AIM__FIRE)  - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, AIM__FIRE[0]);  			else if (QuickScope == 2)  				 printf(CenterX(sizeof(DBL__TAP)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, DBL__TAP[0]);  			}  			if(mod == 17) {  		     if (AutoPing == 0)  		         printf(CenterX(sizeof(OFF) 	   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	  			 else if (AutoPing == 1)  				 printf(CenterX(sizeof(ADS_)       - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, ADS_[0]);  			 else if (AutoPing == 2)  				 printf(CenterX(sizeof(FIRE_)      - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, FIRE_[0]);  			 else if (AutoPing == 3)  				 printf(CenterX(sizeof(ADS_FIRE)   - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, ADS_FIRE[0]);  			 else if (AutoPing == 4)  				 printf(CenterX(sizeof(ADS_TAC)    - 0x1, OLED_FONT_SMALL_WIDTH), 0x2A, OLED_FONT_SMALL, OLED_WHITE, ADS_TAC[0]);  			}  		}  		if(ZS == 2) {  			printf(CenterX(GetChars(mod), OLED_FONT_SMALL_WIDTH), 0x3, 0x0, 0x1, T_TexT[mod]);    			if(mod == 25) {  				NumberToString2(FastReloadDelay, FindDigits (FastReloadDelay), 0x19);  			}  			if(mod == 24) {  				NumberToString(GetUpDelay, FindDigits (GetUpDelay), 0x19);  			}			  			if(mod == 23) {  				NumberToString2(Time_Blow, FindDigits (Time_Blow), 0x19);  			}			  			if(mod == 17) {  				NumberToString(Auto_Ping_Press_Value, FindDigits (Auto_Ping_Press_Value), 0x19);  			}  			if(mod == 15) {  				NumberToString(DropShotSpeed, FindDigits (DropShotSpeed), 0x19);  			}  			if(mod == 14) {  				NumberToString(STRAFE_DELAY, FindDigits (STRAFE_DELAY), 0x19);  			}  			if(mod == 13) {  				NumberToString(QS_Delay, FindDigits (QS_Delay), 0x19);  			}  			if(mod == 9) {  				NumberToString(Rapid_Fire_Speed, FindDigits (Rapid_Fire_Speed), 0x19);  			}  			if(mod == 8) {  				NumberToString(in_game_menu_sens, FindDigits (in_game_menu_sens), 0x19);  			}  			if(mod == 6) {  				NumberToString(ENHANCED_SCANNING_STRENGTH, FindDigits (ENHANCED_SCANNING_STRENGTH), 0x17);  				NumberToString(ENHANCED_SCANNING_SPEED, FindDigits (ENHANCED_SCANNING_SPEED), 0x29);  			}  			if(mod == 5) {  				if(tab == 0) {  				NumberToString2(ADS_Size, FindDigits (ADS_Size), 0x14);  				NumberToString2(ADS_FIRE_Size, FindDigits (ADS_FIRE_Size), 0x21);  				NumberToString2(HIPFIRE_Size, FindDigits (HIPFIRE_Size), 0x2E);  				}  				if(tab == 1) {  				NumberToString2(ADS_Wait_Value, FindDigits (ADS_Wait_Value), 0x14);  				NumberToString2(ADS_FIRE_Wait_Value, FindDigits (ADS_FIRE_Wait_Value), 0x21);  				NumberToString2(HIPFIRE_Wait_Value, FindDigits (HIPFIRE_Wait_Value), 0x2E);  				}  			}  			if(mod == 4) {  				NumberToString2(Polar_Radius, FindDigits (Polar_Radius), 0x14);  				NumberToString2(Polar_Angle, FindDigits (Polar_Angle), 0x21);  				NumberToString2(Radius_Min, FindDigits (Radius_Min), 0x2E);  			}  			if(mod == 3) {  				if(tab == 0) {  				NumberToString(PolarRadius, FindDigits (PolarRadius), 0x17);  				NumberToString(PolarAngle, FindDigits (PolarAngle), 0x29);  				}  				if(tab == 1) {  				NumberToString(PolarRBoost, FindDigits (PolarRBoost), 0x17);  				NumberToString(PolarABoost, FindDigits (PolarABoost), 0x29);  				}  			}  			if(mod == 2) {  				if(tab == 0) {  				NumberToString(MAX_RADIUS, FindDigits (MAX_RADIUS), 0x17);  				NumberToString(MIN_RADIUS, FindDigits (MIN_RADIUS), 0x29);  				}  				if(tab == 1) {  				NumberToString(MAX_ANGLE, FindDigits (MAX_ANGLE), 0x17);  				NumberToString(MIN_ANGLE, FindDigits (MIN_ANGLE), 0x29);  				}  			}  			if(mod == 1) {  				NumberToString(AR_Strength, FindDigits (AR_Strength), 0x19);  			}  			if(sel == 2)line_oled(0x1E, 0x14, 0x28, 0x14, 0x3, 0x1)  			if(sel == 1)line_oled(0x1E, 0x21, 0x28, 0x21, 0x3, 0x1)  			if(sel == 0)line_oled(0x1E, 0x2E, 0x28, 0x2E, 0x3, 0x1)  			}  		}  		else   		{  		rect_oled(0x0, 0x0, 0x80, 0x40, 0x0, 0x1);  		printf (CenterX(GetChars(12), OLED_FONT_SMALL_WIDTH), 0x22, 0x0, 0x1, T_TexT[35]);  		}  		rect_oled(0x0, 0x0, 0x80, 0x40, 0x0, 0x1);  		ss 		= TRUE;  		display = FALSE;  	}  }    combo RGB {  	wait(0xA);  	set_rgb(COLOUR, COLOUR[0x1], COLOUR[0x2]);  	COLOUR[DEC] -= 0x1;   	COLOUR[INC] += 0x1;  	if(!COLOUR[DEC]) {   	INC = (INC + 0x1) % 0x3;   	DEC = (DEC + 0x1) % 0x3;   	}  }  combo Vibrate {  	set_rumble(RUMBLE_A, 85);  	wait(0xE1);  	reset_rumble();  }  combo Cook_And_Release_Grenade() {  	if(cooktime == smartgrenade_throwdelay)   	set_val(LETHAL, 0x64);  	wait(cooktime);  	set_val(LETHAL, 0x0);  	wait(0x64);  }  combo AutoPingC {  	set_val(PING, 0x64);  	wait(Auto_Ping_Press_Value);  	set_val(PING, 0x0);  	wait(Auto_Ping_Press_Value);  	set_val(PING, 0x64);  	wait(Auto_Ping_Press_Value);  	set_val(PING, 0x0);  	wait(Auto_Ping_Press_Value);  }  combo Turbo_Melee {  	set_val(MELEE, 100);  	wait(56);  	set_val(MELEE, 0);  	wait(48);  }  combo EASY_RUN {  	SPRINTING = TRUE;  	set_val(SPRINT, 100);  	wait(40);  	wait(128);  }  combo Easy_Prone {      set_val(CROUCH, 0x64);      wait(0x15E);  }  combo Get_Up {      set_val(JUMP, 0x64);      wait(GetUpDelay);  }  combo Aim_Abuse {  	set_val(ADS, 0x64);  	wait(random(225, 420));  	set_val(ADS, 0x0);  	wait(random(95, 225));    }  combo FastReload {      wait(FastReloadDelay);      set_val(SWAP, 0x64);      wait(0x32);      set_val(SWAP, 0x0);      wait(0x28);      set_val(SWAP, 0x64);      wait(0x28);      set_val(SWAP, 0x0);  }  combo Sticky_AA {  	a = random(Strafe_Min, Strafe_Max)  	set_val(AIM_Y,  XY_Val (AIM_Y,  Aim_Val));  	wait(Wait_Val);  	set_val(AIM_X,  XY_Val (AIM_X,  Aim_Val));  	set_val(STRAFE, XY_Val (STRAFE, a));  	wait(Wait_Val);  	set_val(AIM_Y,  XY_Val (AIM_Y,  Aim_Val  * -1));  	wait(Wait_Val);  	set_val(AIM_X,  XY_Val (AIM_X,  Aim_Val  * -1));  	set_val(STRAFE, XY_Val (STRAFE, a		 * -1));  	wait(Wait_Val);  }  combo BUNNYHOP {      set_val(JUMP, 0x64);      wait(56);      set_val(JUMP, 0x0);      wait(56);      set_val(JUMP, 0x64);      wait(56);      set_val(JUMP, 0x0);      wait(56);  }  combo Rapid_Fire {  	set_val(FIRE, 0x64);  	wait(0x14 * Rapid_Fire_Speed);  	set_val(FIRE, 0x0);  	wait(0xA * Rapid_Fire_Speed - Wait_Time_Correction);  	set_val(FIRE, 0x0);   }  combo BOOM   {      wait(Time_Blow);  	set_val(RELOAD, 0x64);  	wait(0x3C);   	set_val(RELOAD, 0x0);  	wait(0x3C);  	set_val(RELOAD, 0x64);  	wait(0x3C);  	set_val(RELOAD, 0x0)  }  combo AkimboRapid {      set_val(FIRE, 0x64);      set_val(ADS, 0x64);      wait(0x28);      set_val(FIRE, 0x0);      set_val(ADS, 0x0);  	wait(0x28);  }  combo BLINK1 {  	if(Prone_Rise)   	set_rgb(0x0, 0xFF, 0x0);  	else    	set_rgb (255, 0x0, 0x0);  	wait(0x7D0);  	set_rgb (0x0, 0x0, 0x0);  }  combo ProneRise {  	set_val(CROUCH, 0x64);  	wait(0x230);  	set_val(CROUCH, 0x0);  	wait(0x96);  	set_val(JUMP, 0x64);  	wait(0x230);  	set_val(JUMP, 0x0);  	wait(0x96);  }  combo BLINK {                                         	if(Rapid_Fire_Toggle)   	set_rgb(0x0, 0xFF, 0x0);   	else    	set_rgb(0xFF, 0x0, 0x0);  	wait(0x7D0);  	set_rgb (0x0, 0x0, 0x0);   }  combo BLIINK {  	if(DropShot)   	set_rgb(0x0, 0xFF, 0x0);   	else    	set_rgb(0xFF, 0x0, 0x0);  	wait(0x7D0);  	set_rgb (0x0, 0x0, 0x0);   } combo FastReset { set_val(EditAssist,100);    wait(ButtonTime)    set_val(Reset,100);            wait(ButtonTime);    combo_run(Confirm);
} combo Dropping_Shot {  	set_val(CROUCH, 0x64);  	wait(random(0x2D, 0x6E));  	wait(random(0x41, 0x104));  	set_val(CROUCH, 0x64);  }  combo JumpyShot {  	set_val(JUMP, 0x64);  	wait(0x64);  	set_val(JUMP, 0x0);  	wait(0x64);  }  combo QuickScopee {   	set_val(FIRE, 0x0);   	set_val(SPRINT, 0x64);  	set_val(ADS, 0x64);   	wait(QS_Delay);   	set_val(SPRINT, 0x64);  	set_val(ADS, 0x64);   	set_val(FIRE, 0x64);   	wait(0x32);   }  combo Hold_Breath {   	set_val(SPRINT, 0x0);  	wait(0x50);  	set_val(SPRINT, 0x64);   	wait(0x64);   	set_val(SPRINT, 0x0);   	wait(0x50);   }  combo BLIIINK {                                         	if(B_Hop)   	set_rgb(0x0, 0xFF, 0x0);   	else    	set_rgb(0xFF, 0x0, 0x0);  	wait(0x7D0);  	set_rgb (0x0, 0x0, 0x0);   }  combo CH {  	set_val(SPRINT, 0x0);  	wait(0x3C);  	set_val(SPRINT, 0x64);  	wait(0x6E);  	set_val(SPRINT, 0x0);  	wait(0x6E);  }  combo DroppShott {  	set_val(CROUCH, 0x64);  	wait(0x7D);  	wait(DropShotSpeed);  	set_val(CROUCH, 0x64);  }  combo CANCEL_SLIDE_CW {  	set_val(CROUCH, 100);      wait(Slide_Cancel_Delay);  	set_val(CROUCH, 0);  	wait(20);  	set_val(SPRINT, 0);  	set_val(ADS, 100);  	wait(10);  	set_val(ADS, 0);  	set_val(CROUCH, 100);  	set_val(SPRINT, 100);  	wait(20);  	set_val(CROUCH, 0);  	set_val(SPRINT, 0);  	wait(20);  }  combo CANCEL_SLIDE_MW {  	set_val(CROUCH, 0x64);  	wait(Slide_Cancel_Delay);  	set_val(CROUCH, 0x0);  	wait(0x3C);  	set_val(CROUCH, 0x64);  	wait(0x32);  	set_val(CROUCH, 0x64);  	set_val(JUMP, 0x64);  	wait(0x3C);  	set_val(CROUCH, 0x0);  	set_val(JUMP, 0x64);  	wait(0xA);  	set_val(JUMP, 0x0);  }  combo strafe {  	if(_strafe_index == 0) {  		_strafe_rand_1 = 110;  		_strafe_rand_2 = 210;  	}  		else  	{  		_strafe_rand_1 = 210;  		_strafe_rand_2 = 110;  	}  	set_val(STRAFE, XY_Val (STRAFE, 0x64));  	_strafe = random((STRAFE_DELAY - _strafe_rand_1), (STRAFE_DELAY + _strafe_rand_1));  	wait(_strafe);   	set_val(WALK, XY_Val (WALK, 0x64));  	wait(58);   	set_val(STRAFE, XY_Val (STRAFE, -100));  	_strafe = random((STRAFE_DELAY - _strafe_rand_2), (STRAFE_DELAY + _strafe_rand_2));  	wait(_strafe);   	set_val(WALK, XY_Val (WALK, -100));  	wait(58);  		_strafe_index++;  	if(_strafe_index == 2)  		_strafe_index = 0;     }  combo Aimlock {  	wait(0x14);  	image_oled(0x0, 0xA, color, FALSE, Frames[frame]);  	frame ++;  }    function Save() {  	set_pvar(SPVAR_1,  AR_Type);  	set_pvar(SPVAR_2,  Pro_Aim_V1);  	set_pvar(SPVAR_3,  Polar_Aim_Assist);  	set_pvar(SPVAR_4,  DNAM_Polar);  	set_pvar(SPVAR_5,  Triple_Sticky);  	set_pvar(SPVAR_6,  ENHANCED_SCANNING);  	set_pvar(SPVAR_7,  Aim__Abuse);  	set_pvar(SPVAR_8,  AimSensCorrections);  	set_pvar(SPVAR_9,  Rapid_Fire_Toggle);  	set_pvar(SPVAR_10, Slide_Cancel_Mode);  	set_pvar(SPVAR_11, JumpShot);  	set_pvar(SPVAR_12, ScopeShot);  	set_pvar(SPVAR_13, QuickScope);  	set_pvar(SPVAR_14, Strafe);  	set_pvar(SPVAR_15, DropShot);  	set_pvar(SPVAR_16, holdbreath);  	set_pvar(SPVAR_17, AutoPing);  	set_pvar(SPVAR_18, Prone_Rise);  	set_pvar(SPVAR_19, Chicken_Mode);  	set_pvar(SPVAR_20, Strafe_Jump);  	set_pvar(SPVAR_21, Smart_Grenade);  	set_pvar(SPVAR_22, B_Hop);  	set_pvar(SPVAR_23, Auto_Blow);  	set_pvar(SPVAR_24, toggle_easyprone);  	set_pvar(SPVAR_25, Fast_Reload);  	set_pvar(SPVAR_26, EZ_AUTORUN);  	set_pvar(SPVAR_27, Fast_Melee);    	set_pvar(SPVAR_28, MIN_RADIUS);  	set_pvar(SPVAR_29, MAX_RADIUS);  	set_pvar(SPVAR_30, MIN_ANGLE);  	set_pvar(SPVAR_31, MAX_ANGLE);  	set_pvar(SPVAR_32, ENHANCED_SCANNING_STRENGTH);  	set_pvar(SPVAR_33, ENHANCED_SCANNING_SPEED);  	set_pvar(SPVAR_34, PolarRadius);  	set_pvar(SPVAR_35, PolarAngle);  	set_pvar(SPVAR_36, PolarRBoost);  	set_pvar(SPVAR_37, PolarABoost);  	set_pvar(SPVAR_38, Polar_Radius);  	set_pvar(SPVAR_39, Polar_Angle);  	set_pvar(SPVAR_40, Radius_Min);  	set_pvar(SPVAR_41, AR_Strength);  	set_pvar(SPVAR_42, DropShotSpeed);  	set_pvar(SPVAR_43, ADS_Size);  	set_pvar(SPVAR_44, ADS_FIRE_Size);  	set_pvar(SPVAR_45, HIPFIRE_Size);  	set_pvar(SPVAR_46, ADS_Wait_Value);  	set_pvar(SPVAR_47, ADS_FIRE_Wait_Value);  	set_pvar(SPVAR_48, HIPFIRE_Wait_Value);  	set_pvar(SPVAR_49, in_game_menu_sens);  	set_pvar(SPVAR_50, Rapid_Fire_Speed);  	set_pvar(SPVAR_51, QS_Delay);  	set_pvar(SPVAR_52, FastReloadDelay);  	set_pvar(SPVAR_53, GetUpDelay);  	set_pvar(SPVAR_54, STRAFE_DELAY);  	set_pvar(SPVAR_55, Time_Blow);  	set_pvar(SPVAR_56, Auto_Ping_Press_Value);  	set_pvar(SPVAR_57, AutoRunDelay);    }  function Load_PVARs() {  	AR_Type	 					= get_pvar(SPVAR_1,  	0,     2, 	 0);  	Pro_Aim_V1		        	= get_pvar(SPVAR_2,  	0,     1, 	 0);  	Polar_Aim_Assist			= get_pvar(SPVAR_3,  	0,     1, 	 0);  	DNAM_Polar					= get_pvar(SPVAR_4,  	0,     4, 	 0);  	Triple_Sticky				= get_pvar(SPVAR_5,  	0,     1, 	 0);  	ENHANCED_SCANNING			= get_pvar(SPVAR_6,  	0,     1, 	 0);  	Aim__Abuse		 			= get_pvar(SPVAR_7,  	0,     1, 	 0);  	AimSensCorrections    		= get_pvar(SPVAR_8,  	0,     1, 	 0);  	Rapid_Fire_Toggle 			= get_pvar(SPVAR_9,  	0,     2, 	 0);  	Slide_Cancel_Mode 			= get_pvar(SPVAR_10,  	0,     4, 	 0);  	JumpShot 					= get_pvar(SPVAR_11, 	0,     1, 	 0);  	ScopeShot 					= get_pvar(SPVAR_12, 	0,     1, 	 0);  	QuickScope 	        		= get_pvar(SPVAR_13, 	0,     2, 	 0);  	Strafe 						= get_pvar(SPVAR_14, 	0,     1, 	 0);  	DropShot	 				= get_pvar(SPVAR_15, 	0,     1, 	 0);  	holdbreath 					= get_pvar(SPVAR_16, 	0,     1, 	 0);  	AutoPing 					= get_pvar(SPVAR_17, 	0,     4, 	 0);  	Prone_Rise 					= get_pvar(SPVAR_18, 	0,     1, 	 0);  	Chicken_Mode 				= get_pvar(SPVAR_19, 	0,     1, 	 0);  	Strafe_Jump					= get_pvar(SPVAR_20, 	0,     1, 	 0);  	Smart_Grenade				= get_pvar(SPVAR_21, 	0,     1, 	 0);  	B_Hop						= get_pvar(SPVAR_22, 	0,     1, 	 0);  	Auto_Blow   				= get_pvar(SPVAR_23, 	0, 	   1, 	 0);  	toggle_easyprone   			= get_pvar(SPVAR_24, 	0, 	   1, 	 0);  	Fast_Reload		   			= get_pvar(SPVAR_25, 	0, 	   1, 	 0);  	EZ_AUTORUN			   		= get_pvar(SPVAR_26, 	0, 	   1, 	 0);  	Fast_Melee			   		= get_pvar(SPVAR_27, 	0, 	   1, 	 0);    	MIN_RADIUS 			    	= get_pvar(SPVAR_28,    0,    50,    14);  	MAX_RADIUS 			    	= get_pvar(SPVAR_29,    0,    50,    38);  	MIN_ANGLE			    	= get_pvar(SPVAR_30,    0,    50,     0);  	MAX_ANGLE 			    	= get_pvar(SPVAR_31,    0,    50,    14);  	ENHANCED_SCANNING_STRENGTH  = get_pvar(SPVAR_32, 	0,    50,    10);   	ENHANCED_SCANNING_SPEED 	= get_pvar(SPVAR_33,    0,    50,     5);   	PolarRadius 				= get_pvar(SPVAR_34,    0,    50,    16);   	PolarAngle 					= get_pvar(SPVAR_35,    0,    50,    20);  	PolarRBoost 				= get_pvar(SPVAR_36,    0,    50,     6);   	PolarABoost 				= get_pvar(SPVAR_37,    0,    50,    10);  	Polar_Radius 				= get_pvar(SPVAR_38,    0,    50,    20);   	Polar_Angle 				= get_pvar(SPVAR_39,    0,    50,    15);  	Radius_Min 			    	= get_pvar(SPVAR_40,    0,    50,     6);  	AR_Strength 				= get_pvar(SPVAR_41, -100,   100,    40);  	DropShotSpeed 				= get_pvar(SPVAR_42,    0,   100,    40);  	ADS_Size    				= get_pvar(SPVAR_43,    0,    50,    12);  	ADS_FIRE_Size 				= get_pvar(SPVAR_44,    0,    50,    26);  	HIPFIRE_Size 				= get_pvar(SPVAR_45,    0,    50,    26);  	ADS_Wait_Value    			= get_pvar(SPVAR_46,    0,   100,    60);  	ADS_FIRE_Wait_Value 		= get_pvar(SPVAR_47,    0,   100,    60);  	HIPFIRE_Wait_Value 			= get_pvar(SPVAR_48,    0,   100,    30);  	in_game_menu_sens 			= get_pvar(SPVAR_49,    0,    20,     8);  	Rapid_Fire_Speed 			= get_pvar(SPVAR_50,    0,    15,     5);  	QS_Delay		 			= get_pvar(SPVAR_51,    0,  1000,   285);  	FastReloadDelay				= get_pvar(SPVAR_52,    0,  9999,  1860);  	GetUpDelay		 			= get_pvar(SPVAR_53,    0,   100,    80);  	STRAFE_DELAY		 		= get_pvar(SPVAR_54,    0,  9999,   400);  	Time_Blow		 			= get_pvar(SPVAR_55,    0,  9999,   825);  	Auto_Ping_Press_Value		= get_pvar(SPVAR_56,    0,   100,    48);  	AutoRunDelay				= get_pvar(SPVAR_57,    0,  9999,  1890);  }  function Reset_Script_Vars() {  	AR_Type     				=    0;  	Pro_Aim_V1			        =    0;  	Polar_Aim_Assist  			=    0;  	DNAM_Polar    				=    0;  	Triple_Sticky  				=    0;  	ENHANCED_SCANNING			=    0;  	Aim__Abuse					=    0;  	AimSensCorrections  		=    0;  	Rapid_Fire_Toggle   		=    0;  	Slide_Cancel_Mode 	    	=    0;  	JumpShot 	        		=    0;  	ScopeShot           		=    0;  	QuickScope          		=    0;  	Strafe       				=    0;  	DropShot            		=    0;  	holdbreath 		    		=    0;  	AutoPing 		    		=    0;  	Prone_Rise          		=    0;  	Chicken_Mode	    		=    0;  	Strafe_Jump 	    		=    0;  	Smart_Grenade 	    		=    0;  	B_Hop 	    				=    0;  	Auto_Blow 					=    0;  	toggle_easyprone 			=    0;  	EZ_AUTORUN 					= 	 0;  	Fast_Melee 					= 	 0;    	MIN_RADIUS            		=    4;  	MAX_RADIUS          		=   16;  	MIN_ANGLE            		=    8;  	MAX_ANGLE	          		=   12;  	ENHANCED_SCANNING_STRENGTH  =   10;  	ENHANCED_SCANNING_SPEED 	=    5;  	PolarRadius     			=   16;  	PolarAngle      			=   20;  	PolarRBoost    		 		=    6;  	PolarABoost    		 		=   10;  	Polar_Radius            	=   20;  	Polar_Angle            		=   15;  	Radius_Min          		=    6;  	AR_Strength      			=   20;  	DropShotSpeed       		=   40;  	ADS_Size            		=   16;  	ADS_FIRE_Size       		=   22;  	HIPFIRE_Size        		=   26;  	ADS_Wait_Value          	=   60;  	ADS_FIRE_Wait_Value     	=   60;  	HIPFIRE_Wait_Value      	=   30;  	in_game_menu_sens   		=    8;  	Rapid_Fire_Speed 			=    5;  	QS_Delay 					=  285;  	FastReloadDelay				= 1860;  	GetUpDelay					=   80;  	STRAFE_DELAY				=  400;  	Time_Blow					=  825;  	Auto_Ping_Press_Value		= 	48;  	AutoRunDelay				= 1890;  }  function block_all_outputs() {  	set_val(PS4_UP     , 0);  set_val(PS4_DOWN   , 0);  set_val(PS4_LEFT   , 0);  set_val(PS4_RIGHT , 0);  	set_val(PS4_CROSS  , 0);  set_val(PS4_CIRCLE , 0);  set_val(PS4_SQUARE , 0);  }  function XY_Val(f_Axis, f_Val) {      if(abs(get_val(f_Axis)) < 25)  		return f_Val;  			return get_ival(f_Axis);  }  function NikO_ChecK() {  	if(!combo_running(Aimlock) && frame <= 15)  		combo_restart(Aimlock);  }  function main_button_pressed(except) {  	if(except != -1 && event_press(except))  		return FALSE;  	if (event_press(LETHAL))  		return TRUE;  	return FALSE;  }  function get_rumble_evil_ar() {	  	_ret = max (get_rumble(RUMBLE_A), get_rumble(RUMBLE_B) );    	if (_ret > 0xA && _ret < 0x5A)  	{  		return (_ret - AR_Strength);  	}    	return 0x0;  }  function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval) {  	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2) ) <= _mag)  	{  		return TRUE;  	}    	return FALSE;  }  function get_mvt_direction( _val, _lval) {  	if (abs(_val - _lval) <= 2)  		return 0;    	if (_val < _lval)   		return -1;    	if (_val > _lval)  		return 1;    	return 0;  }  function sin(angle) {         if(angle <= 90)      {                       _ret = (Lookup_Table[angle]);      }      else if (angle <= 180)      {                _ret = (Lookup_Table[180 - angle]);      }      else if (angle <= 270)      {          _ret = inv(Lookup_Table[angle - 180]);           }      else       {         	_ret = inv(Lookup_Table[360 - angle]);            }            return _ret;  }  function cos(angle) {         if(angle <= 90)      {                       _ret = (Lookup_Table[90 - angle]);      }      else if (angle <= 180)      {                _ret = inv(Lookup_Table[angle - 90]);      }      else if (angle <= 270)      {          _ret = inv(Lookup_Table[270 - angle]);             }      else       {          _ret = (Lookup_Table[angle - 270]);             }            return _ret;  }  function get_polar_coordinate(radius, coef) {  	if(radius > 32)  	{  		radius = 32;  	}  		  	return((radius * coef) / 1000);		  }  function GetShapes(f_var) {      if(!SpiralPosition1)  	{  		InnerSpiral -= 1;  		if(InnerSpiral < Radius_Min)  			SpiralPosition1 = TRUE;  	}  	else  	{  	    InnerSpiral += 1;  		if(InnerSpiral > f_var)  			SpiralPosition1 = FALSE;  	}  	if(!SpiralPosition2)  	{  		OuterSpiral -= 1;  		if(OuterSpiral < Radius_Min)  			SpiralPosition2 = TRUE;  	}  	else  	{  		OuterSpiral += 1;  		if(OuterSpiral >  f_var)  			SpiralPosition2 = FALSE;  	}  	if(DNAM_Polar == 1)  	{          RY = (get_val(AIM_Y))  + ( (SinAngle * f_var) ) / 100;          RX = (get_val(AIM_X))  + ( (CosAngle * f_var) ) / 100;  	}  	if(DNAM_Polar == 2)  	{          RY = (get_val(AIM_Y))  + ( (SinAngle * f_var) ) / 100;          RX = (get_val(AIM_X))  + ( (CosAngle * Radius_Min) ) / 100;  	}  	if(DNAM_Polar == 3)  	{          RX = (get_val(AIM_X))  + ( (CosAngle * f_var) ) / 100;          RY = (get_val(AIM_Y))  + ( (SinAngle * Radius_Min) ) / 100;  	}  	if(DNAM_Polar == 4)  	{          RY = (get_val(AIM_Y))  + ( (SinAngle * InnerSpiral) ) / 100;          RX = (get_val(AIM_X))  + ( (CosAngle * OuterSpiral) ) / 100;  	}      if(DNAM_Polar == 5)  	{  		if(Position == 0 || Position == 1)      	{  		    RX = (get_val(AIM_X))  + ( (CosAngle * f_var) ) / 100;  		}  	    if(Position == 2 || Position == 3)  		{  		    RY = (get_val(AIM_Y))  + ( (SinAngle * f_var) ) / 100;  		}  			Position++;    		if(Position == 4)  		{  			Position = 0;  		}      }      set_val(AIM_X, RX);  	set_val(AIM_Y, RY);  }  function double_click(button) {      if (double__tap[button] >= 0) {          double__tap[button] += get_rtime();          if (double__tap[button] > 450)              double__tap[button] = -1;      }      if (event_release(button) && get_ptime(button) <= 200) {          if (double__tap[button] < 0) {              double__tap[button] = 0;          }   		else   		{              double__tap[button] = -1;              return 1;          }      }      return 0;  }  function NumberToString(f_Val, f_Digits, x) {  	bufferindex_1 = 0x1;  	digitindex_1  = 0x2710;  	if (f_Val < 0) {  		putc_oled(bufferindex_1, 45);  		bufferindex_1 += 1;  		f_Val = abs(f_Val);  	}  	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--) {  		if (f_Digits >= charindex_1) {  			putc_oled(bufferindex_1, (f_Val / digitindex_1) + 48);  			f_Val %= digitindex_1;  			bufferindex_1++;  			if (charindex_1 == 4) {  				putc_oled(bufferindex_1, 44);  				bufferindex_1++;  			}  		}  		digitindex_1 /= 0xA;  	}  	puts_oled(CenterX(bufferindex_1 - 1, OLED_FONT_MEDIUM_WIDTH), x, OLED_FONT_MEDIUM, bufferindex_1 - 1, OLED_WHITE);  }  function NumberToString2(f_Val, f_Digits, x2) {  	bufferindex_1 = 0x1;  	digitindex_1  = 0x2710;  	if (f_Val < 0) {  		putc_oled(bufferindex_1, 45);  		bufferindex_1 += 1;  		f_Val = abs(f_Val);  	}  	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--) {  		if (f_Digits >= charindex_1) {  			putc_oled(bufferindex_1, (f_Val / digitindex_1) + 48);  			f_Val %= digitindex_1;  			bufferindex_1++;  			if (charindex_1 == 4) {  				putc_oled(bufferindex_1, 44);  				bufferindex_1++;  			}  		}  		digitindex_1 /= 0xA;  	}  	puts_oled(CenterX(bufferindex_1 - 1, OLED_FONT_SMALL_WIDTH), x2, OLED_FONT_SMALL, bufferindex_1 - 1, OLED_WHITE);  }  function FindDigits(f_Number) {  	f_Number = abs(f_Number);  	if (f_Number / 0x2710 > 0x0)  		return 0x5;  	if (f_Number / 0x3E8 > 0x0)  		return 0x4;  	if (f_Number / 0x64 > 0x0)  		return 0x3;  	if (f_Number / 0xA > 0x0)  		return 0x2;  	return 0x1;  }  function CenterX(f_Chars, f_Font) {        return (OLED_WIDTH / 0x2) - ((f_Chars * f_Font) / 0x2);  }  function CenterY(f_Size) {      return (OLED_HEIGHT / 0x2) - (f_Size / 0x2);  }   function GetChars(x) {        if (T_TexT[x + 0x1] != -1) return T_TexT[x + 0x1] - T_TexT[x] - 0x01;  		return sizeof(T_TexT) - T_TexT[x];  		  }      function RumbleVALToUse()  {      if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B))  	{          return RUMBLE_A;      }  	      if(get_rumble(RUMBLE_A) == 100)  	{      	return RUMBLE_B;  	}  	  	if(get_rumble(RUMBLE_B) == 100)  	{      	return RUMBLE_A;  	}  	      if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B))  	{          return RUMBLE_A;      }  	      if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B))  	{          return RUMBLE_B;      }  	      return 0;  }    function get_smart_recoil()  {	  	if(get_rumble(RumbleVALToUse()))   	{  	    smartrecoil_rumble = get_rumble(RumbleVALToUse());  		  	    if (smartrecoil_rumble > 10 && smartrecoil_rumble < 90)  	    {  		    if(abs(get_val(PS4_RY)) < (smartrecoil_rumble + smartrecoil_add + smartrecoil_y) &&   		       abs(get_val(PS4_RX)) < (smartrecoil_rumble + smartrecoil_add))   			{  		      				return (smartrecoil_rumble + smartrecoil_add + smartrecoil_y);  	        }			      	}      }  	  	return 0;  }    function Buttons(Type) {  	FIRE     = Layouts[Type][0];  	ADS      = Layouts[Type][1];  	LETHAL   = Layouts[Type][2];  	TACTICAL = Layouts[Type][3];  	JUMP     = Layouts[Type][4];  	CROUCH   = Layouts[Type][5];  	MELEE    = Layouts[Type][6];  	SPRINT   = Layouts[Type][7];  	RELOAD   = Layouts[Type][8];  	SWAP     = Layouts[Type][9];  	PING     = Layouts[Type][10];  }  const image Frames[] 	    = {  							  {122, 36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFD, 0xFE, 0x7F, 0xC3, 0xC3, 0x07, 0xFF, 0xFE, 0x03, 0xE1, 0x83, 0xC0, 0xFF, 0xF3, 0xD0, 0x73, 0xB1, 0xCE, 0xF0, 0x60, 0xC1, 0x99, 0xF1, 0x80, 0x70, 0x60, 0x78, 0x7B, 0x1D, 0x1C, 0x0C, 0x64, 0x31, 0x0C, 0x10, 0x30, 0xC6, 0x2C, 0x20, 0x18, 0x18, 0x1E, 0x3C, 0x41, 0xC1, 0x03, 0x19, 0x0C, 0x43, 0x08, 0x1E, 0x01, 0x83, 0x00, 0x06, 0x0F, 0x05, 0x8B, 0x11, 0x38, 0x00, 0xCE, 0x67, 0x10, 0xC6, 0x05, 0xC0, 0x60, 0xC8, 0x01, 0x82, 0xE1, 0x62, 0xC6, 0x47, 0x80, 0x3F, 0x1F, 0x84, 0x19, 0x82, 0x30, 0x18, 0x3E, 0x00, 0x61, 0x18, 0x4C, 0xB1, 0xF0, 0xF8, 0x0C, 0x06, 0xC1, 0x06, 0x40, 0xFC, 0x06, 0x0C, 0x80, 0x18, 0x7F, 0x13, 0x4C, 0x64, 0x07, 0x03, 0x01, 0x18, 0x40, 0xE0, 0x7F, 0x81, 0x83, 0x04, 0x06, 0x3F, 0xC4, 0xF3, 0x11, 0x20, 0xC0, 0xC0, 0x43, 0x10, 0x38, 0x10, 0x30, 0x60, 0xC1, 0x19, 0x88, 0x19, 0x38, 0xC4, 0x0C, 0x30, 0x70, 0x38, 0xEE, 0x0E, 0x0C, 0x1C, 0x38, 0x7F, 0xC7, 0xC6, 0x0E, 0x66, 0x3B, 0xFF, 0xF8, 0x3E, 0x1F, 0x3F, 0xC1, 0x07, 0x8F, 0x9F, 0x1F, 0xF0, 0xF3, 0xC7, 0xFC, 0x1F, 0xFF, 0xBC} }    const int16 Lookup_Table[]  = { 0, 17, 34, 52, 69, 87, 104, 121, 139, 156, 173, 190, 207, 224, 241, 258, 275, 292, 309, 325, 342, 358, 374, 390, 406, 422, 438, 453, 469, 484, 500, 515, 529, 544, 559, 573, 587, 601, 615, 629, 642, 656, 669, 682, 694, 707, 719, 731, 743, 754, 766, 777, 788, 798, 809, 819, 829, 838, 848, 857, 866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 939, 945, 951, 956, 961, 965, 970, 974, 978, 981, 984, 987, 990, 992, 994, 996, 997, 998, 999, 999, 0x3E8};  const int8 DNAMPolarArray[] = { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58, -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};  const uint8 Layouts[][] 	= {                { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_L2, PS4_R2, PS4_L1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_L2, PS4_L1, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_L1, PS4_L2, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },      { PS4_R2, PS4_L2, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_L1 },       { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_L1 },       { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_UP },       { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_L2 },       { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE, PS4_L2 }       };  int x1 = 60, x2 = 68, x3 = 76, x4 = 84, x5 = 92, x6 = 0x64, x7 = 108, x8 = 116, x9 = 124, x10 = 132, x11 = 140, x12 = 148, x13 = 156, x14 = 164, x15 = 172, x16 = 180, x17 = 188, x18 = 196, x19 = 204, x20 = 212, x21 = 220, x22 = 228, x23 = 236, x24 = 244, x25 = 252, x26 = 260, x27 = 268, x28 = 276;  define Strafe_Max =  20;  define Strafe_Min = -20;  define yy 		  =   2;  function TexT1() {  	putc_oled(0x1, ASCII_UPPER_A);  	puts_oled(x1, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_I);  	puts_oled(x2, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_M);  	puts_oled(x3, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_L);  	puts_oled(x4, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_O);  	puts_oled(x5, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_C);  	puts_oled(x6, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_K);  	puts_oled(x7, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x8, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_V);  	puts_oled(x9, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_DIGIT2);  	puts_oled(x10, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_DIGIT4);  	puts_oled(x11, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x12, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_B);  	puts_oled(x13, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_Y);  	puts_oled(x14, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x15, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_P);  	puts_oled(x16, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_R);  	puts_oled(x17, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_I);  	puts_oled(x18, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_V);  	puts_oled(x19, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_A);  	puts_oled(x20, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_T);  	puts_oled(x21, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_E);  	puts_oled(x22, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_J);  	puts_oled(x23, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_A);  	puts_oled(x24, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_M);  	puts_oled(x25, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_E);  	puts_oled(x26, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_S);  	puts_oled(x27, yy, 0x0, 0x1, 0x1);    	FaLL();  }  function TexT2() {  	putc_oled(0x1, ASCII_UPPER_P);  	puts_oled(x1, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_R);  	puts_oled(x2, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_E);  	puts_oled(x3, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_S);  	puts_oled(x4, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_S);  	puts_oled(x5, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x6, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_X);  	puts_oled(x7, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x8, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_T);  	puts_oled(x9, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_O);  	puts_oled(x10, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x11, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_T);  	puts_oled(x12, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_O);  	puts_oled(x13, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_G);  	puts_oled(x14, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_G);  	puts_oled(x15, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_L);  	puts_oled(x16, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_E);  	puts_oled(x17, yy, 0x0, 0x1, 0x1);    	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x18, yy, 0x0, 0x1, 0x1);    	putc_oled(0x1, ASCII_UPPER_T);  	puts_oled(x20, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_O);  	puts_oled(x21, yy, 0x0, 0x1, 0x1);    	putc_oled(0x1, ASCII_SPACE);  	puts_oled(x22, yy, 0x0, 0x1, 0x1);    	putc_oled(0x1, ASCII_UPPER_E);  	puts_oled(x23, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_D);  	puts_oled(x24, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_I);  	puts_oled(x25, yy, 0x0, 0x1, 0x1);  	putc_oled(0x1, ASCII_UPPER_T);  	puts_oled(x26, yy, 0x0, 0x1, 0x1);    	rect_oled(x19 - 0x4, yy,  0x9, 0x9, 0x0, 0x1)  	rect_oled(x19 - 0x3, yy + 0x1, 0x7, 0x7, 0x0, 0x0)  	rect_oled(x19 + 0x5, yy,  0x1, 0x9, 0x1, 0x0)  	FaLL();  }  function FaLL() {  	x1--;x2--;x3--;x4--;x5--;x6--;x7--;x8--;x9--;x10--;  	x11--;x12--;x13--;x14--;x15--;x16--;x17--;x18--;x19--;x20--;  	x21--;x22--;x23--;x24--;x25--;x26--;x27--;x28--;  }  function ScreenSaver() {  	line_oled(0x0, 0xD, 0x7F, 0xD, 0x1, 0x1)  	rect_oled(0x0, 0x0,  0xF, 0xE, 0x1, 0x0)  	rect_oled(0x0, 0x0,  0xF, 0xE, 0x0, 0x1)  	if(c_b < 0x3E8) {      	putc_oled(0x1, ASCII_DIGIT9);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0x3E8) {      	putc_oled(0x1, ASCII_DIGIT8);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0x7D0) {      	putc_oled(0x1, ASCII_DIGIT7);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0xBB8) {      	putc_oled(0x1, ASCII_DIGIT6);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0xFA0) {      	putc_oled(0x1, ASCII_DIGIT5);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0x1388) {      	putc_oled(0x1, ASCII_DIGIT4);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0x1770) {      	putc_oled(0x1, ASCII_DIGIT3);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b > 0x1B58) {      	putc_oled(0x1, ASCII_DIGIT2);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  	if(c_b >= 0x1F40) {      	putc_oled(0x1, ASCII_DIGIT1);  		puts_oled(0x4, 0x3, 0x0, 0x1, 0x1);  	}  }  