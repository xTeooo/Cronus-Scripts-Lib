
 
           ██▓ ██▓     ██▓     █    ██  ███▄ ▄███▓ ██▓ ███▄    █  ▄▄▄      ▄▄▄█████▓ ██▓
           ▓██▒▓██▒    ▓██▒     ██  ▓██▒▓██▒▀█▀ ██▒▓██▒ ██ ▀█   █ ▒████▄    ▓  ██▒ ▓▒▓██▒
           ▒██▒▒██░    ▒██░    ▓██  ▒██░▓██    ▓██░▒██▒▓██  ▀█ ██▒▒██  ▀█▄  ▒ ▓██░ ▒░▒██▒
           ░██░▒██░    ▒██░    ▓▓█  ░██░▒██    ▒██ ░██░▓██▒  ▐▌██▒░██▄▄▄▄██ ░ ▓██▓ ░ ░██░
           ░██░░██████▒░██████▒▒▒█████▓ ▒██▒   ░██▒░██░▒██░   ▓██░ ▓█   ▓██▒  ▒██▒ ░ ░██░
           ░▓  ░ ▒░▓  ░░ ▒░▓  ░░▒▓▒ ▒ ▒ ░ ▒░   ░  ░░▓  ░ ▒░   ▒ ▒  ▒▒   ▓▒█░  ▒ ░░   ░▓  
            ▒ ░░ ░ ▒  ░░ ░ ▒  ░░░▒░ ░ ░ ░  ░      ░ ▒ ░░ ░░   ░ ▒░  ▒   ▒▒ ░    ░     ▒ ░
            ▒ ░  ░ ░     ░ ░    ░░░ ░ ░ ░      ░    ▒ ░   ░   ░ ░   ░   ▒     ░       ▒ ░
            ░      ░  ░    ░  ░   ░            ░    ░           ░       ░  ░          ░  
                       .                                                     .                      
                      &                           %                           @                     
                     @(                       .%@@@@@#                        %@                    
                    %@&                         %@#@,                         @@#                   
                    @@@,                                                     /@@&                   
                    @@@@,          ,@.      /           /      *%           #@@@&                   
                    %@@@@@          /@@(  .@&     %     *@   @@*          .@@@@@%                   
                    .@@@@@@@.      ,@@@@@.@@@@   @@@   (@@@ @@@@        *@@@@@@@                    
                     .@@@@@@@@@* &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@( (@@@@@@@@@                     
                      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      
                        &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(                       
                 .        @@@@@@@@@@@@@% *@ ,%@@(   @@@ ,*@ .&@@@@@@@@@@@@&        .                
                 #.        &@@@@@@@@     *@ *&@@.   *@@ , @     .@@@@@@@@*        #/                
                  @@@@/   .@@@@@@@        %%  .@@@@@@%   &,        @@@@@@@   .(@@@@                 
                   @@@@@@@@@@@@@@@@@#       #*   //.   %/       &@@@@@@@@@@@@@@@@@                  
                    #@@@@@@@@@@@@@@@@@@@*                   /@@@@@@@@@@@@@@@@@@@/                   
                       .#%@@@@@@@@@@@@@@@@@@@#,       *&@@@@@@@@@@@@@@@@@@&%#                       
                     @@@@@ ,@@@@.#@@@@@@          (          @@@@@@.*@@@@ .@@@@*                    
                   @@@@@@@%  #@@( #@@@@,         ,@.         #@@@@* #@@*  @@@@@@@#                  
                *@@@@@@/        %  .@@@@         @@&         @@@@   /        %@@@@@@                
              #@@@@@,                .@@@       #@@@.      .@@&                 (@@@@@.             
            @@@@@.                      .%&     @@@@@     @#                       *@@@@/           
         .@@@&                                 *@@@@@                                 ,@@@%         
       *@@#                                    ,@@@@@                                     @@@       
     %@/                                       .@@@@@                                        &@.    
   @.                                           @@@@@                                           #(  
..                                              @@@@@                                              ,
                                                &@@@(                                               
                                                %@@@,                                               
                                                *@@@                                                
                                                .@@@                                                
                                                 @@@                                                
                                                 @@#                                                
                                                 &@*                                                
                                                 ,@.                                                
                                                  @                                                 
                                                  %                                                 

 // credit to dogz for his
 // match your binds
 ****************************************************************************                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             */
// || COMBAT BINDS || \\
define Fire            = PS4_R2;       
define Ads             = PS4_L2;      
define N_Weapon        = PS4_R1;       
define P_Weapon        = PS4_L1;      
define Jump            = PS4_CROSS;   
define Crouch          = PS4_R3;      
define Build           = PS4_CIRCLE;  
define Pickaxe         = PS4_TRIANGLE; 
define PickUp          = PS4_DOWN;         
define Map             = PS4_SHARE;   

// SCROLL WHEEL PICK UP \\
define ToggleSWPickUp = PS4_DOWN;
define SWPickUpHold   = PS4_R1;      
define SWPickUpPress  = PS4_OPTIONS;

// RAPID FIRE \\               
define ToggleRapidFire = PS4_R2;
define RapidFireHold   = PS4_L1;      
define RapidFirePress  = PS4_OPTIONS; 
define FastReset       = PS4_LEFT;
define EditAssist      = PS4_L3; 

// NO NEED TO TOUCH ANY MORE \\
// *********************************************************************************************** \\
//************************************************************************************************\\
// MOD MENU OPTIONS \\
define MenuEnterHold  = PS4_L2;
define MenuEnterPress = PS4_OPTIONS;
define MenuExitPress  = PS4_TRIANGLE;
// Next/Previous Menu Page
define NextMenuPress  = PS4_CROSS;
define PrevMenuPress  = PS4_CIRCLE;

// Navigation/Adjusment Buttons
define Up    = PS4_UP;
define Down  = PS4_DOWN;
define Left  = PS4_LEFT;
define Right = PS4_RIGHT;































/*                                                                                                                                                                                                                                                                                                                  
  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______ 
 |______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______|
    _  _  _____    ____    _   _   ____  _______   _______  ____   _    _   _____  _    _   ____   ______  _   _  ______         _______  _    _  _  _   
   | || ||  __ \  / __ \  | \ | | / __ \|__   __| |__   __|/ __ \ | |  | | / ____|| |  | | |  _ \ |  ____|| \ | ||  ____|    /\ |__   __|| |  | || || |  
   | || || |  | || |  | | |  \| || |  | |  | |       | |  | |  | || |  | || |     | |__| | | |_) || |__   |  \| || |__      /  \   | |   | |__| || || |  
   | || || |  | || |  | | | . ` || |  | |  | |       | |  | |  | || |  | || |     |  __  | |  _ < |  __|  | . ` ||  __|    / /\ \  | |   |  __  || || |  
   |_||_|| |__| || |__| | | |\  || |__| |  | |       | |  | |__| || |__| || |____ | |  | | | |_) || |____ | |\  || |____  / ____ \ | |   | |  | ||_||_|  
   (_)(_)|_____/  \____/  |_| \_| \____/   |_|       |_|   \____/  \____/  \_____||_|  |_| |____/ |______||_| \_||______|/_/    \_\|_|   |_|  |_|(_)(_)  
  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______  ______ 
 |______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______||______|

*/ 
int RapidFire = Off; 
int CrouchShot = Off;	
int CrouchShotWait = 80; 
int JumpShot = Off; 
int StrafeShot = Off; 
int StrafeWait = 200; 
int SlideCancel = On;       
int SlideCancelActive = Off;  
int PSonXBOX = On;      
int LedIdentify = On;   
int SYSTEMV     = 7;  
int DelayD = -5; 
int HTime = 45;  
int InstantPickaxe   = Off;  
int SWPickUp         = Off;
int AimAssist        = Off;
int HipFire          = Off; 
int Power            = 1;  
int AimAssist2       = Off; 
int AA2HipFire       = Off;
int AA2Boost         = Off; 
int Radius           = 14;
int RadiusBoost      = 8; 
int AngleBoost       = 9;  
int AntiRecoil = Off; 
int Vertical = 30;                                                                                                                                                                                
int AAT,Axis,DamAngle,DamCos,DamSin,DamX,DamY,ActualMagnitude,MaxMagnitude,RadiusDam,AngleDam;
int ToggleT,ToggleTime;
int Modled,Shunt,Pindex,IndY,Index[6],Depth,ActiveInMenu;
int Edit1,Edit2,EditT;
int Axe;
int BuildTrack,BuildCount;
int MaxLength;

  
const string MiscString [] = {"Enabled","Disabled","Mod Toggle On/Off"};
const string ModString  [] = {" Crouch Shot Mod","  Rapid Fire Mod"," Scroll Wheel Mod","  Pump Ramp Mod","100% Accuracy Mod"," Anti Recoil Mod"};

define Menu0Length   = 4;
define Menu00Length  = 6;
define Menu000Length = 3;
define Menu001Length = 6;
define Menu002Length = 2;
define Menu003Length = 2;
define Menu004Length = 1;
define Menu005Length = 1;
define Menu01Length  = 4;
define Menu02Length  = 3;
define Menu03Length  = 2;
define Menu010Length = 1;
define Menu011Length = 1;
define Menu012Length = 1;
define Menu013Length = 1;
define Menu020Length = 1;
define Menu021Length = 1;
define Menu022Length = 1;
define Menu030Length = 1;
define Menu031Length = 1;

const string ToggleString1[] = {"OFF","ON"};
const string SaveString[] = {"SETTINGS SAVED","TO ZEN"};
const string Menu0[]   = {"COMBAT MODS","MOVEMENT MODS","EXTRA MODS"};
const string Menu00[]  = {"AIM ASSIST V1","AIM ASSIST V2","ANTI RECOIL","CW REPLACE","INSTANT PICKAXE","RAPID FIRE"};
const string Menu000[] = {"AIM ASSIST1","HIPFIRE","POWER"};
const string Menu001[] = {"AIM ASSIST2","AA2 HIPFIRE","AA2 BOOST","RADIUS","RADIUSBOOST","ANGLEBOOST"};
const string Menu002[] = {"ANTI RECOIL","VERTICAL"};
const string Menu003[] = {"CW REPLACE","HTIME"};
const string Menu004[] = {"INSTANT PICK"};
const string Menu005[] = {"RAPID FIRE"};
const string Menu01[]  = {"CROUCH SHOT","JUMP SHOT","STRAFE SHOT","SLIDE CANCEL"};
const string Menu010[] = {"CROUCH SHOT"};
const string Menu011[] = {"JUMP SHOT"};
const string Menu012[] = {"STRAFE SHOT"};
const string Menu013[] = {"SLIDE CANCEL"};
const string Menu031[] = {"SW PICK UP"};


define Small = 0,Medium = 1,Large = 2;
define Black = 0,White = 1;
int    AimT             = Off;     
define AimATime         = 0; 
define Angle            = 120; 
define AimX          = PS4_RX;
define AimY          = PS4_RY;
define Strafe        = PS4_LX;
define Walk          = PS4_LY;
define On            = TRUE;
define Off           = FALSE;
                                                                                                                                                                                                                                                                                                                                                                                                                                                   
init {
   Index[0] = 0;
   Index[1] = 0;
   Index[2] = 0;
   Index[3] = 0;
   Index[4] = 0;
   Depth = 0;
   ActiveInMenu = Off;
   cls_oled(0);
   
   AimAssist = get_pvar(SPVAR_1,0,1,0);
   HipFire = get_pvar(SPVAR_2,0,1,0);
   Power = get_pvar(SPVAR_3,1,3,1);
   AimAssist2 = get_pvar(SPVAR_4,0,1,0);
   AA2HipFire = get_pvar(SPVAR_5,0,1,0);
   AA2Boost = get_pvar(SPVAR_6,0,1,0);
   Radius = get_pvar(SPVAR_7,1,50,10);
   RadiusBoost = get_pvar(SPVAR_8,1,50,8);
   AngleBoost = get_pvar(SPVAR_9,1,180,5);
   AntiRecoil = get_pvar(SPVAR_10,0,1,0);
   Vertical = get_pvar(SPVAR_11,1,50,10);
   HTime = get_pvar(SPVAR_13,1,100,45);
   InstantPickaxe = get_pvar(SPVAR_14,0,1,0);
   RapidFire = get_pvar(SPVAR_15,0,1,0);
   CrouchShot = get_pvar(SPVAR_16,0,1,0);
   JumpShot = get_pvar(SPVAR_17,0,1,0);
   StrafeShot = get_pvar(SPVAR_18,0,1,0);
   SlideCancel = get_pvar(SPVAR_19,0,1,0);
   SWPickUp = get_pvar(SPVAR_24,0,1,0);
   
    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    
main {
 vm_tctrl(DelayD);
	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        
        swap(PS4_TOUCH,PS4_SHARE);
    }
    if (event_press(Crouch) && SlideCancel) {
       SlideCancelActive = On;
    }
    if (SlideCancelActive == On) {
        if (!combo_running(SlideCancel)) {
           combo_run(SlideCancel);
        }
    }
    if (event_release(Crouch) && SlideCancel){
        SlideCancelActive = Off;
        combo_stop(SlideCancel);
    }
            if(ToggleSWPickUp)
			{
	            if(SWPickUp && get_ival(PickUp) && get_ptime(PickUp) > 200) 
	                combo_run(SWPickUp); 
	        }
	       
    if(ToggleRapidFire)
				    {
				      
				       if(RapidFire && get_ival(Fire) && get_ptime(Fire) > 100)
				                combo_run(RAPIDFIRE);
				    }				  
    if (AimAssist) {
	    	
		if (AimT) {
	    	
	    		if (get_ival(Ads) && get_ptime(Ads) <= AimATime || HipFire && get_ival(Fire) && get_ptime(Fire) <= AimATime) {
	        	
	        		AimAssist();
	        	}
	        	
	        } else if (get_ival(Ads)|| HipFire && get_ival(Fire)) {
	        	
	        		AimAssist();
	        }
	        
	        if (!get_ival(Ads) && !get_ival(Fire)) {
	        
	        	AAT = 0;
	        	Axis = 0;
	        }
	    }
	    		if (AimAssist2) {
            
            if (get_ival(Ads) || (AA2HipFire && get_ival(Fire))) {
            
                DamX = get_ival(AimX);   
                DamY = get_ival(AimY);           
                ActualMagnitude = isqrt(pow(DamX,2) + pow(DamY,2));  
                MaxMagnitude = (ActualMagnitude < 100);                      
            
                if (AA2Boost && get_ival(Fire)) {
                        
                    RadiusDam = Radius + RadiusBoost;
                    AngleDam = AngleBoost;
                    
                } else {
                        
                    RadiusDam = Radius;
                    AngleDam = 0;
                }
                
                DamAngle += Angle + AngleDam;                                                 
                DamAngle = DamAngle % 360;                                            
                DamSin = DamPolar[DamAngle % 360];                           
                DamCos = DamPolar[(DamAngle + 270) % 360];                  
                DamCos = (DamCos * RadiusDam) / 100;                         
                DamSin = (DamSin * RadiusDam) / 100;                          
            
                if (ActualMagnitude <= 10) {                                                      
                    
                    DamSin -= DamY;                                                              
                    DamCos -= DamX;                                                                 
                
                } else {                                                                                       
                        
                    DamSin = (DamSin * (200 - ((abs(DamY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                    DamCos = (DamCos * (200 - ((abs(DamX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                }                                                  
                
                set_val(AimX,clamp(DamX + DamCos, -100,100));
                set_val(AimY,clamp(DamY + DamSin, -100,100)); 
            	
            }
        }
	    
	    if (InstantPickaxe) {
                    
        	if (event_press(Pickaxe)) {
                        
            	Axe = On;
            }
                	
            if (Axe) {
                        
            	if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                            
                 	Axe = Off;
                }
                        
                if (event_release(Fire)) {
                            
                	combo_run(Pickaxe);
                }
            }
        }
        
	    if (CrouchShot) {
        
	    	if (get_ival(Ads) && get_ival(Fire)) {
                
                combo_run(CrouchShot);
            
            } else {
                    
                combo_stop(CrouchShot);
            }
        }

        if (StrafeShot) {
        
            if (get_ival(Ads) && get_ival(Fire)) {
            
                if (abs(get_ival(Strafe)) <= 35 && abs(get_ival(Walk)) <= 35) {    
                
                    combo_run(StrafeShot);
            
                } else {
                    
                    combo_stop(StrafeShot);
                }
            }
        }
        
        if (JumpShot) {
        
            if (!get_ival(Ads) && event_release(Fire)) {
                
                combo_run(JumpShot);
            
            } else {
                    
                combo_stop(JumpShot);
            }
        }

	    
	    if (AntiRecoil) {        
	    
            if (get_ival(Ads) && get_ival(Fire)) { 
                
            	set_Val(AimY,Vertical);
            }
			
        }
        
        if (CrouchShot && StrafeShot) {
        
        	if (get_ival(Ads) && get_ival(Fire)) {
        	
        		if (get_ival(Fire) < 97) {
        			
        			combo_run(LongRangeTap);
        		
        		} else {
        		
        			combo_stop(LongRangeTap);
        		}
        	}
        }
    }
    

    if (get_ival(SWPickUpHold) && event_press(SWPickUpPress)) {

        Shunt = SWPickUpPress;
        SWPickUp = !SWPickUp;
        ToggleName = On;
        Toggle(SWPickUp,ModString[2]);
    }
       
    

    if (get_ival(RapidFireHold) && event_press(RapidFirePress)) {

        Shunt = RapidFirePress;
        RapidFire = !RapidFire;
        ToggleName = On;
        Toggle(RapidFire,ModString[1]);
    }
    
    if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        
        } else {
            
            set_val(Shunt,Off);
        }
    }
    
    if (ToggleTime) {
        
        TimeToggle();
    ]
    
combo CrouchShot {

    set_val(Crouch,100);
    wait(40);
    wait(CrouchShotWait);
}
combo Save {

    cls_oled(0);
    print(15,20,Small,White,SaveString[0]);
    print(37,40,Small,White,SaveString[1]);
    ActiveInMenu = Off;
	wait(10);
	wait(2000);
	cls_oled(0);
	Index[0] = 0;
	Index[1] = 0;
	Index[2] = 0;
	Index[3] = 0;
	Index[4] = 0;
	Depth    = 0;
}

combo StrafeShot {

    set_val(Strafe,-100);
    wait(StrafeWait);
    set_val(Strafe,100);
    wait(StrafeWait);
}
combo RAPIDFIRE {
set_val(Fire, 100);
wait(10);
set_val(Fire, 0);
wait(10);
set_val(Fire, 100);
wait(10);
set_val(Fire, 0);
}
combo JumpShot {

    set_val(Jump,100);
    wait(50);
}
    combo SlideCancel {
set_val(Crouch,100);
wait(120);
set_val(Crouch,0);
wait(425)
set_val(Crouch,100);
wait(10);
set_val(Crouch,0);
wait(120);
} 
combo SWPickUp {
set_val(PickUp,100);
wait(1);
set_val(PickUp,0);
wait(1);
}
combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(SYSTEMV);
    Axe = Off;
}
combo LongRangeTap {
	
	set_val(Fire,100);
	wait(50);
	set_val(Fire,0);	
	wait(300);
}
combo Confirm {

    set_val(Confirm,100);
    wait(7);
    set_val(Confirm,0);
    wait(7);
}

combo InstantReset {

   wait(20)
   combo_run(Confirm);
}
combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    
    } else {
        
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,15);
    }
    
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
        set_rgb(255,0,0);

    reset_rumble();
    reset_leds();
}

function Press (Button) {

    if (get_ival(Button))
        
   		return;
            
            set_val(Button,100);
}


function AimAssist() {

	AAT += get_rtime();
	
	if (!Axis) 
		
		set_Val(AimY,AAT * Power / 10);
		
	if (Axis == 1)  
		
		set_Val(AimX,AAT * Power / 10);
	
	if (Axis == 2)  
		
		set_Val(AimY,inv(AAT * Power / 10));

	if (Axis == 3) {
		
		set_Val(AimX,inv(AAT * Power / 10));
	
		if (AAT > 50) {
		
			AAT = 0;
			Axis = 0;
		}
	
	} else if (AAT > 50) {
		
		AAT = 0;
		Axis += 1;
	}
}

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_val(Input),-100,100));
        
    return; 
}
function DrawEditScreen(Name,Value) {
 cls_oled(0);
 print(10,10,Small,White,Name);
 print(10,30,Small,White,Value);
 }
 function DrawEditScreenInt(Name,Value) {
 cls_oled(0);
 print(10,10,Small,White,Name);
 NumberToString(Value,1);
 print(10,20,Small,White,Value);
 }
 
 
 
function Indicator(Change) {
 if ((Change == 1) || (Change == -1)) {
   IndY = GetIndY(Index[Depth] - Change);
   putc_oled(1,ASCII_SPACE);
   puts_oled(0,IndY,Small,1,White);
 }
 
   
 

		IndY = GetIndY(Index[Depth]);
		
	
	   	 	

	    	putc_oled(1,134);
        	puts_oled(0,IndY,Small,1,White);

}
function GetIndY(Index) {
  return Index * 10;
 }
 function DrawMenu() {
   cls_oled(0);
   MaxLength = GetMaxMenuLength();
   
   if (Depth == 0) {
     // Draw Menu0
     for(Pindex = 0; Pindex < MaxLength; Pindex++) {
       print(10,(Pindex * 10) + 1,Small,White,Menu0[Pindex]);    
     }
      Indicator(0);
   } else if (Depth == 1) {
     if (Index[0] == 0) {
       // Draw Menu00
       for(Pindex = 0; Pindex < MaxLength; Pindex++) {
         print(10,(Pindex * 10) + 1,Small,White,Menu00[Pindex]);  
       } 
     } else if (Index[0] == 1) {
       // Draw Menu01
       for(Pindex = 0; Pindex < MaxLength; Pindex++) {
         print(10,(Pindex * 10) + 1,Small,White,Menu01[Pindex]);  
       } 
     } else if (Index[0] == 2) {
       // Draw Menu02
       for(Pindex = 0; Pindex < MaxLength; Pindex++) {
         print(10,(Pindex * 10) + 1,Small,White,Menu02[Pindex]);  
       } 
     } else if (Index[0] == 3) {
       // Draw Menu03
       for(Pindex = 0; Pindex < MaxLength; Pindex++) {
         print(10,(Pindex * 10) + 1,Small,White,Menu03[Pindex]);  
       } 
     }
      Indicator(0);
   } else if (Depth == 2) {
     if (Index[0] == 0) {
       if (Index[1] == 0) {
         // Draw Menu000
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu000[Pindex]);  
         } 
       } else if (Index[1] == 1) {
         // Draw Menu001
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu001[Pindex]);  
         } 
       } else if (Index[1] == 2) {
         // Draw Menu002
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu002[Pindex]);  
         } 
       } else if (Index[1] == 3) {
         // Draw Menu003
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu003[Pindex]);  
         } 
       } else if (Index[1] == 4) {
         // Draw Menu004
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu004[Pindex]);  
        } 
       } else if (Index[1] == 5) {
         // Draw Menu005
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu005[Pindex]);  
         } 
       }
     } else if (Index[0] == 1) {
       if (Index[1] == 0) {
         // Draw Menu010
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu010[Pindex]);  
         } 
       } else if (Index[1] == 1) {
         // Draw Menu011
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu011[Pindex]);  
         } 
       } else if (Index[1] == 2) {
         // Draw Menu012
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu012[Pindex]);  
         } 
       } else if (Index[1] == 3) {
         // Draw Menu013
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu013[Pindex]);  
         } 
       }
     } else if (Index[0] == 2) {
       if (Index[1] == 0) {
         // Draw Menu020
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu020[Pindex]);  
         } 
       } else if (Index[1] == 1) {
         // Draw Menu021
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu021[Pindex]);  
         } 
       } else if (Index[1] == 2) {
         // Draw Menu022
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu022[Pindex]);  
         } 
       } 
     } else if (Index[0] == 3) {
       if (Index[1] == 0) {
         // Draw Menu030
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu030[Pindex]);  
         } 
       } else if (Index[1] == 1) {
         // Draw Menu031
         for(Pindex = 0; Pindex < MaxLength; Pindex++) {
           print(10,(Pindex * 10) + 1,Small,White,Menu031[Pindex]);  
         } 
       } 
     }
      Indicator(0);
     
   } else if (Depth == 3) {
     if (Index[0] == 0) {
       if (Index[1] == 0) {
         // Select from Menu000
         if (Index[2] == 0) {
           DrawEditScreen(Menu000[0],ToggleString1[AimAssist]);
         } else if (Index[2] == 1) {
           DrawEditScreen(Menu000[1],ToggleString1[HipFire]);
         } else if (Index[2] == 2) {
           DrawEditScreenInt(Menu000[2],Power);
         }
       } else if (Index[1] == 1){
         // Select from Menu001
         if (Index[2] == 0) {
           DrawEditScreen(Menu001[0],ToggleString1[AimAssist2]);
         } else if (Index[2] == 1) {
           DrawEditScreen(Menu001[1],ToggleString1[AA2HipFire]);
         } else if (Index[2] == 2) {
           DrawEditScreen(Menu001[2],ToggleString1[AA2Boost]);
         } else if (Index[2] == 3) {
           DrawEditScreenInt(Menu001[3],Radius);
         } else if (Index[2] == 4) {
           DrawEditScreenInt(Menu001[4],RadiusBoost);
         } else if (Index[2] == 5) {
           DrawEditScreenInt(Menu001[5],AngleBoost);
         }
       } else if (Index[1] == 2) {
         // Select from Menu002
         if (Index[2] == 0) {
           DrawEditScreen(Menu002[0],ToggleString1[AntiRecoil]);
         } else if (Index[2] == 1) {
           DrawEditScreenInt(Menu002[1],Vertical);
         }
       } else if (Index[1] == 3) {
         // Select from Menu003
         if (Index[2] == 0) {
           DrawEditScreen(Menu003[0],ToggleString1[ConeWallReplace]);
         } else if (Index[2] == 1) {
           DrawEditScreenInt(Menu003[1],HTime);
         }
       } else if (Index[1] == 4) {
         // Select from Menu004
         if (Index[2] == 0) {
           DrawEditScreen(Menu004[0],ToggleString1[InstantPickaxe]);
         }
       } else if (Index[1] == 5) {
         // Select from Menu005
         if (Index[2] == 0) {
           DrawEditScreen(Menu005[0],ToggleString1[RapidFire]);
         }
       }
     } else if (Index[0] == 1) {
       if (Index[1] == 0) {
         if (Index[2] == 0) {
         // Select from Menu010
           DrawEditScreen(Menu010[0],ToggleString1[CrouchShot]); 
         }
      } else if (Index[1] == 1) {  
          if (Index[2] == 0) {
         // Select from Menu011
           DrawEditScreen(Menu011[0],ToggleString1[JumpShot]); 
         } 
       } else if (Index[1] == 2) {
          if (Index[2] == 0) {
         // Select from Menu012
           DrawEditScreen(Menu012[0],ToggleString1[StrafeShot]); 
         } 
       } else if (Index[1] == 3) {
          if (Index[2] == 0) {
         // Select from Menu013
           DrawEditScreen(Menu013[0],ToggleString1[SlideCancel]); 
         }
       }
       } else if (Index[0] == 2) {
       if (Index[1] == 0) {
         if (Index[2] == 0) {
         // Select from Menu020
           DrawEditScreen(Menu020[0],ToggleString1[InstaEditReset]); 
         }
      } else if (Index[1] == 1) {  
          if (Index[2] == 0) {
         // Select from Menu021
           DrawEditScreen(Menu021[0],ToggleString1[InstaFastReset]); 
         } 
       } else if (Index[1] == 2) {
          if (Index[2] == 0) {
         // Select from Menu022
           DrawEditScreen(Menu022[0],ToggleString1[QuickEditAssist]); 
         } 
       }
       } else if (Index[0] == 3) {
       if (Index[1] == 0) {
         if (Index[2] == 0) {
         // Select from Menu030
           DrawEditScreen(Menu030[0],ToggleString1[BuildTracker]); 
         }
      } else if (Index[1] == 1) {  
          if (Index[2] == 0) {
         // Select from Menu031
           DrawEditScreen(Menu031[0],ToggleString1[SWPickUp]); 
         } 
        }
       }
    
       }
}

 function HandleValueChange(Increase) {
  if (Depth == 3) {
  	if (Index[0] == 0) {
      if (Index[1] == 0) {
        // Menu000
        if (Index[2] == 0) {
          AimAssist = !AimAssist;
          DrawEditScreen(Menu000[0],ToggleString1[AimAssist]);
          set_pvar(SPVAR_1,AimAssist);
        } else if (Index[2] == 1) {
          HipFire = !HipFire;
          DrawEditScreen(Menu000[1],ToggleString1[HipFire]);
          set_pvar(SPVAR_2,HipFire);
        } else if (Index[2] == 2) {
          if (Increase){
            if (Power < 3) {
              Power ++;
            }
          } else { 
            if (Power > 1){
              Power --;
            }
          }
          DrawEditScreenInt(Menu000[2],Power);
          set_pvar(SPVAR_3,Power);
        }
      } else if (Index[1] == 1) {
        // Menu001
        if (Index[2] == 0) {
          AimAssist2 = !AimAssist2;
          DrawEditScreen(Menu001[0],ToggleString1[AimAssist2]);
          set_pvar(SPVAR_4,AimAssist2);
        } else if (Index[2] == 1) {
          AA2HipFire = !AA2HipFire;
          DrawEditScreen(Menu001[1],ToggleString1[AA2HipFire]);
          set_pvar(SPVAR_5,AA2HipFire);
        } else if (Index[2] == 2) {
          AA2Boost = !AA2Boost;
          DrawEditScreen(Menu001[2],ToggleString1[AA2Boost]);
          set_pvar(SPVAR_6,AA2Boost);
        } else if (Index[2] == 3) {
          if (Increase) {
            if (Radius < 50) {
              Radius ++;
            }
          } else {
            if (Radius > 1) {
              Radius --;
            }
          }
          DrawEditScreenInt(Menu001[3],Radius);
          set_pvar(SPVAR_7,Radius);
        } else if (Index[2] == 4) {
          if (Increase) {
            if (RadiusBoost < 50) {
              RadiusBoost ++;
            }
         } else { 
            if (RadiusBoost > 1) {
              RadiusBoost --; 
            }
          }
         DrawEditScreenInt(Menu001[4],RadiusBoost);
         set_pvar(SPVAR_8,RadiusBoost);
        } else if (Index[2] == 5) {
          if (Increase) {
            if (AngleBoost < 180) {
              AngleBoost ++;
            }
          } else { 
           if (AngleBoost > 1){
              AngleBoost --;
            }
          }
        DrawEditScreenInt(Menu001[5],AngleBoost);
        set_pvar(SPVAR_9,AngleBoost);
        }
      } else if (Index[1] == 2){
        // Menu002
        if (Index[2] == 0) {
          AntiRecoil = !AntiRecoil;
          DrawEditScreen(Menu002[0],ToggleString1[AntiRecoil]);
          set_pvar(SPVAR_10,AntiRecoil);
        } else if (Index[2] == 1) {
         if (Increase){
            if (Vertical < 50) {
            Vertical ++;
            }
          } else {
            if (Vertical > 1) {
              Vertical --;
            }
          }
        DrawEditScreenInt(Menu002[1],Vertical);
        set_pvar(SPVAR_11,Vertical);
        }
      } else if (Index[1] == 3){
        // Menu011
          JumpShot = !JumpShot;
          DrawEditScreen(Menu011[0],ToggleString1[JumpShot]);
          set_pvar(SPVAR_17,JumpShot);
        }
      } else if (Index[1] == 2) {
          if (Index[2] == 0) {
        // Menu012
          StrafeShot = !StrafeShot;
          DrawEditScreen(Menu012[0],ToggleString1[StrafeShot]);
          set_pvar(SPVAR_18,StrafeShot);
        } 
      } else if (Index[1] == 3) {
        if (Index[2] == 0) {
        // Menu013
          SlideCancel = !SlideCancel;
          DrawEditScreen(Menu013[0],ToggleString1[SlideCancel]);
          set_pvar(SPVAR_19,SlideCancel);
        } 
      }
     } else if (Index[1] == 1) {
        if (Index[2] == 0) {
        // Menu031
          SWPickUp = !SWPickUp;
          DrawEditScreen(Menu031[0],ToggleString1[SWPickUp]);
          set_pvar(SPVAR_24,SWPickUp);
        }
      }
    }
  }
}
 function GetMaxMenuLength() {
   if (Depth == 0) {
     return Menu0Length;
   } else if (Depth == 1) {
     if (Index[0] == 0) {
       return Menu00Length; 
     } else if (Index[0] == 1) {
       return Menu01Length; 
     } else if (Index[0] == 2) {
       return Menu02Length; 
     } else if (Index[0] == 3) {
       return Menu03Length; 
     }
  } else if (Depth == 2) {
     if (Index[0] == 0) {
       if (Index[1] == 0) {
         return Menu000Length; 
      } else if (Index[1] == 1) {
        return Menu001Length; 
      } else if (Index[1] == 2) {
        return Menu002Length; 
      } else if (Index[1] == 3) {
        return Menu003Length; 
      } else if (Index[1] == 4) {
        return Menu004Length; 
       }  else if (Index[1] == 5) {
        return Menu005Length; 
       }
     } else if (Index[0] == 1) {
       if (Index[1] == 0) {
         return Menu010Length;
       } else if (Index[1] == 1) {
         return Menu011Length;
       } else if (Index[1] == 2) {
         return Menu012Length;
       } else if (Index[1] == 3) {
         return Menu013Length;
       }
     } else if (Index[0] == 2) {
       if (Index[1] == 0) {
         return Menu020Length;
       } else if (Index[1] == 1) {
         return Menu021Length;
       } else if (Index[1] == 2) {
         return Menu022Length;
       }
     } else if (Index[0] == 3) {
       if (Index[1] == 0) {
         return Menu030Length;
       } else if (Index[1] == 1) {
         return Menu031Length;
       }
     }
   }
   return 0;
 }

function Toggle(ModT,ModP) {
    
	Modled = ModT;
    ToggleT = 0;
    ToggleTime = On;
    combo_run(VibrateBlink);
    
    if (ToggleName) {
        
        cls_oled(0);
        print(5,2,0,1,MiscString[3]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        print(5,17,0,1,ModP);

        if (ModT) {
            
            print(41,38,0,1,MiscString[0]);    
        
        } else {
                
            print(36,38,0,1,MiscString[1]);
        }
        
        ToggleName = Off;
    }
}
function NumberToString(Digit,Digits) {
    if (Digit >= 0 && Digit < 10){
    putc_oled(1,32);
    putc_oled(2,(Digit) + 48);
    puts_oled(1,30,Small,2,White); 
    } else if (Digit >= 10 && Digit < 100){
    putc_oled(1,32);
    putc_oled(2,(Digit / 10) + 48);
    putc_oled(3,(Digit % 10) + 48);
    puts_oled(1,30,Small,3,White); 
    } else if (Digit >= 100 && Digit < 1000){
    putc_oled(1,32);
    putc_oled(2,(Digit / 100) + 48);
    putc_oled(3,((Digit - (Digit / 100)* 100) / 10) + 48);
    putc_oled(4,(Digit % 10) + 48);
    puts_oled(1,30,Small,4,White); 
    } 
    
}
function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 

function TimeToggle() {
        
    ToggleT += get_rtime();
    
    if (ToggleT >= 5000) {
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}
const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100
}; ���������������� ����������������