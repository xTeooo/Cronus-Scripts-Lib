// DoGz The Triple V1.0 [Zen Polar]
define RX         = PS4_RX;  
define RY         = PS4_RY;  
define UP         = PS4_UP;  
define DOWN       = PS4_DOWN;  
define LEFT       = PS4_LEFT;  
define RIGHT      = PS4_RIGHT; 
define CROSS      = PS4_CROSS;  
define CIRCLE     = PS4_CIRCLE;  
define SQUARE     = PS4_SQUARE;  
define TRIANGLE   = PS4_TRIANGLE;  
define TOUCH      = PS4_TOUCH;
define PRX		  = POLAR_RX;
define PRY		  = POLAR_RY;
define RS         = POLAR_RS;
define VIB_A      = RUMBLE_A;
define X          = RX;                                    
define Y          = RY;
define ON         = TRUE;
define OFF        = FALSE;

// PUT YOUR BUTTONS HERE BELOW IF DIFFERENT
define AIM        = PS4_L2;// XB1_LT 
define FIRE       = PS4_R2;// XB1_RT  

// AIM ASSIST TOGGLES ON/OFF														(PS4)          (XBOX)
define PROGRESSION_HOLD_TOGGLE  = SQUARE, PROGRESSION_PRESS_TOGGLE  = LEFT; // ( SQUARE/LEFT   OR  X/LEFT )
define DoGz_ASSIST_HOLD_TOGGLE  = SQUARE, DoGz_ASSIST_PRESS_TOGGLE  = RIGHT;// ( SQUARE/RIGHT  OR  X/RIGHT )
define POLAR_ASSIST_HOLD_TOGGLE = SQUARE, POLAR_PRESS_TOGGLE        = UP;   // ( SQUARE/UP     OR  X/UP )

//AIM ASSIST MODS ON/OFF BY DEFAULT ( TOGGLE ON/OFF IN GAME )( CAN ALL RUN TOGETHER TO CREATE MORE AIM ASSISTS )( EXPERIMENT )
int DoGz_ASSIST        = ON;// DoGz AIM ASSTIST
int PROGRESSION_ASSIST = ON;// PROGRESSION AIM ASSIST
int POLAR_ASSIST       = ON;// DON'T AT ME POLAR AIM ASSIST

//PROGRESSION ASSIST SETTINGS
define PROGRESSION_RELEASE = 15; 
define AAMIN  = -6;// MINIMUM VALUE  
define AAMAX  =  6;// MAXIMUM VALUE  
define AAVAL  =  6;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS

// DON'T TOUCH THESE BELOW
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;

//POLAR ASSIST SETTINGS
int RADIUS        =    8;// RADIUS/STRENGTH/VALUE 
int ANGLE         =   20;// STEP/SPEED
int POLAR_BOOST   =    5;// BOOST VALUE 
int POLAR_SHAKE   =   20;// SHAKE VALUE 
int A_B_S         =    2;// INPUT DIVIDER VALUE 
int POLAR_RELEASE =   15;// RELEASE VALUE
int POLAR_RADIUS,POLAR_ANGLE,SHUNT,SPEED;
//DoGz ASSIST VALUES
define DoGz_ASSIST_RELEASE = 50;
int D_AS:
define VMCR   =  0;// DEFAULT VM SPEED
int VMC       =  0;// VM SPEED WHILE DoGz ASSIST ACTIVE(ZEN CAN RUN AT -9 VM SPEED)
int D__AS     =  0;// STARTING VALUE/RETURN VALUE
int D__AS1    =  4;// INVERT DIRECTION VALUE
int D___AS    =  5;// ( HIGHEST VALUE )( WILL BE DOUBLED WHEN FIRING )
int D_AS1     = -5;// ( LOWEST VALUE ) ( WILL BE DOUBLED WHEN FIRING )

//POLAR CONDITIONS
define ACTIVE_WHEN_ADS    =  ON;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  ON;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   =  ON;// BOOST POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )
define POLAR_SHAKE_FIRE   =  ON;// SHAKE POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )
int VM                    =  ON;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )

main {
	
	POLAR_RADIUS = RADIUS;
	POLAR_ANGLE  = ANGLE; 

/////////////////////////////POLAR AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    
    if (get_ival(POLAR_ASSIST_HOLD_TOGGLE) && event_press(POLAR_PRESS_TOGGLE)) {
    	
    	SHUNT = POLAR_PRESS_TOGGLE;
    	POLAR_ASSIST = !POLAR_ASSIST;
    }
    
    if (POLAR_ASSIST) {
        
        if ((get_ival(AIM) || get_ival(FIRE)) && abs(get_ival(RX)) <= POLAR_RELEASE && abs(get_ival(RY)) <= POLAR_RELEASE) {
        
            if (POLAR_BOOST_FIRE && get_ival(FIRE)) {
            	
            	POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
            
            } else {
            	
            	POLAR_RADIUS = POLAR_RADIUS;
            }
            
            if (POLAR_SHAKE_FIRE && get_ival(FIRE)) {
            	
            	POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
            
            } else {
            	
            	POLAR_ANGLE = POLAR_ANGLE;
            }    
            
            set_polar(RS,SPEED = (SPEED + POLAR_ANGLE) % 360,abs(get_ival(PRX)) / A_B_S + POLAR_RADIUS * 328);
		}
	}

/////////////////////////////PROGRESSION AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	if (get_ival(PROGRESSION_HOLD_TOGGLE) && event_press(PROGRESSION_PRESS_TOGGLE)) {
		
		SHUNT = PROGRESSION_PRESS_TOGGLE;
		PROGRESSION_ASSIST = !PROGRESSION_ASSIST;
	}
	
	if (PROGRESSION_ASSIST && get_ival(AIM) >= 80) {
	
		if (!combo_running(AAS)) {
			
			AS = PROGRESSION(AS,AAMIN,AAMAX,AAVAL,AAS,1);
    		AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
    		combo_run(AAS);
    	}
		
		if (abs(get_ival(RY))> PROGRESSION_RELEASE || abs(get_ival(RX)) > PROGRESSION_RELEASE) {
			
			combo_stop(AAS);
		}
	}

/////////////////////////////DoGz AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	if (get_ival(DoGz_ASSIST_HOLD_TOGGLE) && event_press(DoGz_ASSIST_PRESS_TOGGLE)) {
		
		SHUNT = DoGz_ASSIST_PRESS_TOGGLE;
		DoGz_ASSIST = !DoGz_ASSIST;
	}
	
	if (DoGz_ASSIST && abs(get_ival(RX)) < DoGz_ASSIST_RELEASE && abs(get_ival(RY)) < DoGz_ASSIST_RELEASE) {
		
		if (get_ival(AIM) > 80) {

			D_AS = ON;
			AIM();
		}
		
		if (event_release(AIM) || event_release(FIRE)){
			
			D_AS = OFF;
			vm_tctrl(VMCR); 
		}
	}

	if (SHUNT) {
		
		if (event_release(SHUNT)) {
			
			SHUNT = OFF;
		
		} else {
			
			set_val(SHUNT,OFF);
		}
	}
}

combo AAS {
	
	set_val(RY,1 * - AS);
	wait(AW);
	set_val(RX,1 * - AS);
	wait(AW);
	set_val(RY,AS);
	wait(AW);
	set_val(RX,AS);
	wait(AW);
}

function AIM() {
	
	if (D_AS) {
		
		if (D_AS && VM) {
			
			vm_tctrl(VMC);
		}
		
		D__AS++;
		
		if (D__AS >= D___AS)  
		
			D__AS = D__AS1;
		
		D__AS1--;
		
		if (D__AS1 <= D_AS1)  
			
			D__AS1 = D__AS;
		
		D__AS++;
		
		if (get_ival(AIM)) {	
			
			set_val(RX,get_val(RX) + D__AS);
			set_val(RY,get_val(RY) + D__AS);
		}
		if (get_ival(FIRE)) {	
		
			set_val(RX,get_val(RX) + D__AS);
			set_val(RY,get_val(RY) + D__AS);
		}
	}
}

function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {

	if (FLOW) {
    	
    	VALUE += INCREMENT;
		
		if (VALUE <= MAX)  
    		
    		return VALUE;
		
		if (VALUE > MAX) {
        	
        	PROG[ID] = 0;
    		return VALUE - INCREMENT;
    	}
	} else {
		
    	VALUE -= INCREMENT;    
			
		if (VALUE >= MIN)  
    			
    		return VALUE;
			
		if (VALUE < MIN) {
   				
   			PROG[ID] = 1;
    		return VALUE + INCREMENT;
    	}
	} 
		
	return OFF;    
} 