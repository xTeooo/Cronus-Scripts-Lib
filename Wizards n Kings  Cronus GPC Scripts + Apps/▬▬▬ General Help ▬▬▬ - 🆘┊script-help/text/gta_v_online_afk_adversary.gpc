const string MiscString[] = {"GTA V","AFK ADVERSARY",""};


define TimeoutLimit = 30000; // Milliseconds (1000 = 1 second)
define Repeat_Mins = 25;  // Minutes to wait x2

int afk;
int repeat = repeat_mins;

int remote = 1; // Change this variable to 0 if at PC to start script. Change to a 0 if you are remote in and use device monitor to toggle slot so script auto starts.

int Saver = TRUE;

int Timer,Snow_x,Snow_y,Snow_t,Snow_c = 1;

int inc = 1,dec,color[3];

int stringLength;


init {


	cls_oled(OLED_BLACK);

	color = 255;


}


main {


    if (remote || event_press(XB1_RS))
    	combo_run(RESTART_GAME);

    if (event_press(XB1_Y))
    	afk = !afk;

	if (afk) {
		if(repeat <= 0) {
	    	cls_oled(OLED_BLACK); // Clear OLED screen
			combo_run(RESTART_GAME);
		}
		else {
			combo_run(AFK);
			combo_run(COUNT_DOWN);
		}
	}
	else repeat = Repeat_Mins;


	if (Saver) {
	    if(event_press(PS4_CROSS)) { // A Command which will re-trigger the screen saver
		    cls_oled(OLED_BLACK);
		    Saver = TRUE;
	    }
	}
	else {
        Timer += get_rtime();
        Saver();
    }

	if (Timer >= TimeoutLimit) {
    	Saver = TRUE;
    	Timer = 0;
    	cls_oled(OLED_BLACK);
    }


    if(Saver)
        if (Snow_c) {
            Snow_x = random(1,128);
            Snow_x = random(1,128);
            Snow_y = random(1,64);
            Snow_y = random(1,64);
        }
        else {
            Snow_x = random(1,128);
            Snow_x = random(1,128);
            Snow_x = random(1,128);
            Snow_y = random(1,64);
            Snow_y = random(1,64);
            Snow_y = random(1,64);
        }


	combo_run(rgb);


	set_val(TRACE_1,repeat);


}


combo AFK {
	set_val(XB1_LY,-100);  // Move forward
	set_val(XB1_RX,-25); // Look Left
	wait(500);
	set_val(XB1_LY,-100);  // Move forward
	wait(30000);
	wait(1000);
	set_val(XB1_X,100); // Press X for better stability on restarts after match finishes
	wait(100);
	wait(10000);
}

combo COUNT_DOWN {
	wait(60000);
	repeat --;
}

combo RESTART_GAME {
	cls_oled(OLED_BLACK); // Clear OLED screen
	set_val(TRACE_2,60);
	set_val(XB1_X,100); // Select "RESTART"
	wait(100);
	wait(1000);
	wait(30000);
	set_val(TRACE_2,30);
	wait(30000); // Wait 1 minute for loading screen
	set_val(TRACE_2,100);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_LX,100); // Move stick right
	wait(100);
	wait(300);
	set_val(XB1_LX,100); // Move stick right
	wait(100);
	wait(300);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_LY,100); // Move stick down
	wait(100);
	wait(300);
	set_val(XB1_A,100); // Select "CONFIRM SETTINGS"
	wait(100);
	wait(1000);
	set_val(XB1_LY,-100); // Move stick up
	wait(100);
	wait(300);
	set_val(XB1_A,100); // Select "PLAY"
	wait(100);
	wait(5000);
	wait(60000); // Wait 1 minute don't select "READY"

	repeat = repeatt; // Reset match timer
	combo_run(ADS_ALOT);
	combo_run(COUNT_DOWN);
	set_val(TRACE_2,0);
	afk = TRUE;
	remote = 0;
}

combo rgb {
	wait(1);
	set_rgb(color, color[1], color[2]);
	color[dec] -= 1; color[inc] += 1;
	if(!color[dec]) { inc = (inc + 1) % 3; dec = (dec + 1) % 3; }
}


function Saver () {
    if (Saver) {
        pixel_oled(Snow_x,Snow_y,Snow_c);
        pixel_oled(Snow_x,Snow_y,Snow_c);
        Snow_t += get_rtime();
        if (Snow_c && Snow_t >= 5000) {
            print(centerPosition(getStringLength(MiscString[0]),OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_BLACK,MiscString[0])
            print(centerPosition(getStringLength(MiscString[1]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_BLACK,MiscString[1])
            Snow_t = 0;
            Snow_c = 0;
        }
        else if (!Snow_c && Snow_t >= 5000) {
            print(centerPosition(getStringLength(MiscString[0]),OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,MiscString[0])
            print(centerPosition(getStringLength(MiscString[1]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,MiscString[1])
            Snow_t = 0;
            Snow_c = 1;
        }
    }
}

function getStringLength(offset) {
    stringLength = 0;
    do {
        offset++;
        stringLength++;
    } while (duint8(offset));
    return stringLength;
 }

function centerPosition(f_chars,f_font) {
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
