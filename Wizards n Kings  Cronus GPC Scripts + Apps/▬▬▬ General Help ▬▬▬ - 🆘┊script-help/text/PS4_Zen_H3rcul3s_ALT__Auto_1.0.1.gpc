                                                                                                                                                                                                                                                                                             /*
 
                                                                                                   
__/\\\________/\\\_____/\\\\\\\\\\_____/\\\\\\\\\____________/\\\\\\\\\__/\\\________/\\\__/\\\_________________/\\\\\\\\\\______/\\\\\\\\\\\___        
 _\/\\\_______\/\\\___/\\\///////\\\__/\\\///////\\\_______/\\\////////__\/\\\_______\/\\\_\/\\\_______________/\\\///////\\\___/\\\/////////\\\_       
  _\/\\\_______\/\\\__\///______/\\\__\/\\\_____\/\\\_____/\\\/___________\/\\\_______\/\\\_\/\\\______________\///______/\\\___\//\\\______\///__      
   _\/\\\\\\\\\\\\\\\_________/\\\//___\/\\\\\\\\\\\/_____/\\\_____________\/\\\_______\/\\\_\/\\\_____________________/\\\//_____\////\\\_________     
    _\/\\\/////////\\\________\////\\\__\/\\\//////\\\____\/\\\_____________\/\\\_______\/\\\_\/\\\____________________\////\\\_______\////\\\______    
     _\/\\\_______\/\\\___________\//\\\_\/\\\____\//\\\___\//\\\____________\/\\\_______\/\\\_\/\\\_______________________\//\\\_________\////\\\___   
      _\/\\\_______\/\\\__/\\\______/\\\__\/\\\_____\//\\\___\///\\\__________\//\\\______/\\\__\/\\\______________/\\\______/\\\___/\\\______\//\\\__  
       _\/\\\_______\/\\\_\///\\\\\\\\\/___\/\\\______\//\\\____\////\\\\\\\\\__\///\\\\\\\\\/___\/\\\\\\\\\\\\\\\_\///\\\\\\\\\/___\///\\\\\\\\\\\/___ 
        _\///________\///____\/////////_____\///________\///________\/////////_____\/////////_____\///////////////____\/////////_______\///////////_____
_____/\\\\\\\\\\\\__/\\\\\\\\\\\\\__________/\\\\\\\\\____________/\\\_______/\\\__/\\\\\\\\\\\\\_________/\\\\\_______/\\\_______/\\\_                 
 ___/\\\//////////__\/\\\/////////\\\_____/\\\////////____________\///\\\___/\\\/__\/\\\/////////\\\_____/\\\///\\\____\///\\\___/\\\/__                
  __/\\\_____________\/\\\_______\/\\\___/\\\/_______________________\///\\\\\\/____\/\\\_______\/\\\___/\\\/__\///\\\____\///\\\\\\/____               
   _\/\\\____/\\\\\\\_\/\\\\\\\\\\\\\/___/\\\___________________________\//\\\\______\/\\\\\\\\\\\\\\___/\\\______\//\\\_____\//\\\\______              
    _\/\\\___\/////\\\_\/\\\/////////____\/\\\____________________________\/\\\\______\/\\\/////////\\\_\/\\\_______\/\\\______\/\\\\______             
     _\/\\\_______\/\\\_\/\\\_____________\//\\\___________________________/\\\\\\_____\/\\\_______\/\\\_\//\\\______/\\\_______/\\\\\\_____            
      _\/\\\_______\/\\\_\/\\\______________\///\\\_______________________/\\\////\\\___\/\\\_______\/\\\__\///\\\__/\\\_______/\\\////\\\___           
       _\//\\\\\\\\\\\\/__\/\\\________________\////\\\\\\\\\____________/\\\/___\///\\\_\/\\\\\\\\\\\\\/_____\///\\\\\/______/\\\/___\///\\\_          
        __\////////////____\///____________________\/////////____________\///_______\///__\/////////////_________\/////_______\///_______\///__ 
        
---------------------------------------------------------------------------------------------------------------------------------------------------------------

IMPORTANT: FOR ACTIVATE AND HOW TO USE READ SEPERATE READ.ME DATA!

		   WHEN YOU USE CATALOUGE OR MENUE THE SCRIOPT WILL BE INACTIVE (RED)!
		   AFTER LEAVE JUST PRESS (O) FOR 2 SECONDS AND SCRIPT IS ACTIVE AGAIN
		   INCLUSIVE ALL ACTIVATED MODS BEFORE!


 +-+-+-+-+-+-+-+ +-+-+ +-+-+-+-+ +-+-+-+-+-+-+-+-+
 |c|r|e|a|t|e|d| |b|y| |T|e|a|m| |H|3|R|C|U|L|3|S|
 +-+-+-+-+-+-+-+ +-+-+ +-+-+-+-+ +-+-+-+-+-+-+-+-+
 +-+-+-+-+ +-+-+-+-+-+-+ +-+-+-+
 |X|b|o|x| |S|c|r|i|p|t| |R|D|O| 1.0.1
 +-+-+-+-+ +-+-+-+-+-+-+ +-+-+-+

                                                                                                                                                                                                                                                                                             */



define Green   = 0;
define White   = 1;
define Red     = 2;
define Off     = 3;
define Yellow  = 4;
define Pink    = 5;
define SkyBlue = 6;

int BATTERY;


data(

0,0,2,0, // 
2,2,2,2, // 
0,2,0,0, // 
0,0,0,0, // 
0,2,2,0, // 
0,0,0,2, // 
2,0,2,0  // 

);



int H3R_RP, H3R_SR; 
int H3R_AA1;
int H3R_AHR;
int H3R_MSR;
int H3R_AAR;
int H3R_SR2;
int H3R_MR;
int H3R_LR;
int H3RCUL3S14;
int H3RCUL3S15;
int H3RCUL3S16;
int H3R_HS1;
int H3R_SM1;
int HTO_RX;
int HTO_RY;
int HTO;
int HVR;
int RX;
int RY;
int L2_PRESS;
int R1_PRESS;
int WAIT;
int autospin_right_onoff = FALSE;
int autospin_left_onoff = FALSE;

define autospin_right_button = PS4_L3;
define autospin_left_button = PS4_L3;


main 

{

///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+

    if(!H3R_MSR&&!H3R_AAR&&!H3R_AHR&&get_lval(PS4_L2))
    {
    	H3R_SR2=TRUE;
    	if(event_press(PS4_R2)) H3RCUL3S14=!H3RCUL3S14;
    	RX=get_lval(PS4_RX);
    	RY=get_lval(PS4_RY);
    }   
    if(H3R_SR2&&event_release(PS4_L2))
    {
    	H3R_SR2=FALSE;
    	if(!H3RCUL3S14)
    	{
    		if((RX*RX+RY*RY)>=150)
    		{ 
    			RY=-1*RY;   
    			if(((100*RY)-(41*RX))>0) { H3R_RP=TRUE;  H3R_SR=FALSE; } 
    			else
    			{
    				if((((100*RY)-(241*RX))>0)||(((100*RY)+(241*RX))>0)) { H3R_RP=FALSE; H3R_SR=FALSE; }
    				else {   H3R_RP=FALSE; H3R_SR=TRUE;  }
    			}    
    		}
    	}
    	H3RCUL3S14=FALSE;
    	RX=0;
    	RY=0;
    }    
    if(get_lval(PS4_FINGER1Y)<-20||get_lval(PS4_FINGER1X)<=-66)    
    	set_val(PS4_TOUCH,0);   	
    	if(get_lval(PS4_TOUCH))
    	{
    		if(get_lval(PS4_FINGER1Y)<-20)
    		{
    			if(get_lval(PS4_FINGER1X)<=-66) { HTO_RX = -100; HTO_RY = -100; HTO=100; }
    			if(get_lval(PS4_FINGER1X)>-66&&get_lval(PS4_FINGER1X)<66)  { HTO_RX = 0; HTO_RY = -100; HTO=100; }
    			if(get_lval(PS4_FINGER1X)>=66)  { HTO_RX = 100;  HTO_RY = -100; HTO=100; }
    		}
    		else if(get_lval(PS4_FINGER1X)<=-66) { HTO_RX = -100; HTO_RY = 100; HTO=0; }
    		combo_run(HTO);
    	}
    	
    if(get_battery()<=1) combo_run(H3RLOB);    
    if(!BATTERY)
    {   
    	if(H3R_MSR)set_ds4_led(Red);
    	else
    	if(!H3R_SR&&!H3R_RP) set_ds4_led(White);
    	
    	if(H3R_SR)
    	{
    		if(!H3R_SM1)set_ds4_led(White);
    		else
    		{
    			if(test_bit(H3R_SM1,0))set_ds4_led(SkyBlue);
    			else set_ds4_led(Red);
    		}
    	}    	
    	if(H3R_RP)
    	{
    		if(!H3R_HS1)set_ds4_led(White);
    		else
    		{
    			if(test_bit(H3R_HS1,0))set_ds4_led(Yellow);
    			else set_ds4_led(Green);
    		}
    	}
    }    
    deadzone(PS4_L2,PS4_R2,99,99);     
///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+    

///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+        
   
   if(H3R_MSR)
    {
    	if(event_press(PS4_CROSS)) H3RCUL3S16 = H3RCUL3S16 + 1;  
    	if(event_press(PS4_CIRCLE))H3RCUL3S16 = H3RCUL3S16 - 1; 
    	if((H3RCUL3S16<0)||(get_lval(PS4_CIRCLE)&&get_ptime(PS4_CIRCLE)>800)){ H3R_SR=TRUE; H3RCUL3S16=0; H3R_MSR=FALSE;  } 
    }
    else
    if(get_lval(PS4_CROSS)&&get_ptime(PS4_CROSS)>2000)combo_run(H3R_PON); 
    
///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+   

///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+   
    if(H3R_SR&&!H3R_SR2)
    {
    	if(get_lval(PS4_L1))
    	{
    		set_val(PS4_L2,0);
    		H3R_AAR=TRUE;    		
    		if(event_release(PS4_RIGHT)) H3R_SM1 = H3R_SM1 + 1;
    		if(get_lval(PS4_RIGHT)&&get_ptime(PS4_RIGHT)>500) H3R_SM1 = 0;    		
    		if(!L2_PRESS&&get_lval(PS4_L2)){ L2_PRESS=TRUE; H3R_AA1=!H3R_AA1; vibrate(H3R_AA1); }     		
    		if(H3R_AA1)combo_run(H3R_OPAA);    		
    		if(H3R_SM1)
    		{
    			if(test_bit(H3R_SM1,0)&&!R1_PRESS&&get_lval(PS4_R1)) { R1_PRESS=TRUE; combo_run(H3R_P3N1S); }
    			if(!test_bit(H3R_SM1,0)&&get_lval(PS4_R1)&&get_ptime(PS4_R1)>100){ set_val(PS4_R1,0); combo_run(H3R_PONRC); }
    		}
    	}    	
    	if(event_release(PS4_L1))H3R_AAR=FALSE;   	
    	if(H3R_SM1)
    	{
    		if(!H3R_SR2)
    		{
    			if(test_bit(H3R_SM1,0)||!get_lval(PS4_L1))set_val(PS4_R1,0);
    			if(!get_lval(PS4_L1)&&get_lval(PS4_R1)) combo_run(H3R_FUCK); 
    		}    		
    		if((get_lval(PS4_LEFT)&&get_ptime(PS4_LEFT)>800)||(get_lval(PS4_RIGHT)&&get_ptime(PS4_RIGHT)>800)||event_press(PS4_OPTIONS))
    		{
    			H3R_MSR=TRUE; 
    			H3R_SR=FALSE;
    		}
    	}
    }    
    if(R1_PRESS&&!get_lval(PS4_R1)) R1_PRESS=FALSE; 
    if(L2_PRESS&&!get_lval(PS4_L2)) L2_PRESS=FALSE;
///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+
    
    //ON/OFF AUTO SPIN RIGHT
    if((get_val(autospin_right_button))) {
        if(event_press(PS4_RIGHT)) {
        autospin_right_onoff = !autospin_right_onoff; //toggle ON/OFF
        }
        
     //AUTO SPIN RIGHT
    if(autospin_right_onoff) {
        if((get_val(autospin_right_button)) && (get_ptime(PS4_L3)) > 250 && !(get_val(PS4_L1)) && !(get_val(PS4_R1))) {
        combo_run(autospin_right);}
    } else if(combo_running(autospin_right))
        combo_stop(autospin_right);
    if(autospin_right_onoff) {
    autospin_left_onoff = FALSE;
        }
    }
     
      //ON/OFF AUTO SPIN LEFT
    if((get_val(autospin_left_button))) {
        if(event_press(PS4_UP)) {
        autospin_left_onoff = !autospin_left_onoff; //toggle ON/OFF
        }
            
    //AUTO SPIN LEFT       
    if(autospin_left_onoff) {
        if((get_val(autospin_left_button)) && (get_ptime(PS4_L3)) > 250 && !(get_val(PS4_L1)) && !(get_val(PS4_R1))) {
        combo_run(autospin_left);}
    } else if(combo_running(autospin_left))
        combo_stop(autospin_left);
    if(autospin_left_onoff) {
    autospin_right_onoff = FALSE;
        }
    }
///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+
    if(H3R_RP&&!H3R_SR2)
    {
    	if(get_lval(PS4_L1))
    	{
    		if(event_release(PS4_RIGHT)) H3R_HS1 = H3R_HS1 + 1;
    		if(get_lval(PS4_RIGHT)&&get_ptime(PS4_RIGHT)>500) H3R_HS1 = 0;    		
    		H3R_AHR=TRUE;    		
    		set_val(PS4_L2,0);    		
    		if(!H3R_HS1)
    		{
    			if(event_press(PS4_R3))H3RCUL3S15 = !H3RCUL3S15;
    			if(!H3R_LR&&get_lval(PS4_L2)){ WAIT=100; combo_run(H3R_XXL); if(!H3RCUL3S15) combo_run(H3R_H3); }    			
    			if(H3R_LR)
    			{
    				if(!H3R_MR&&get_lval(PS4_L2))combo_run(H3R_COOLDOWN);
    				else H3R_MR=TRUE; 
    			}
    		}    		
    		if(H3R_HS1&&!H3R_LR&&!H3R_MR)
    		{
    			if(!H3R_LR&&test_bit(H3R_HS1,0))   {  WAIT=245; combo_run(H3R_XXL);   }  
    			if(!H3R_MR&&!test_bit(H3R_HS1,0)){  WAIT=245; combo_run(H3R_MYWAY); }
    			combo_run(H3R_H3); 
    		}    		
    	}   	
    	if(event_release(PS4_L1)){ combo_stop(H3R_H3); combo_stop(H3R_XXL); 
    	combo_stop(H3R_COOLDOWN); combo_stop(H3R_MYWAY); H3R_MR=FALSE; 
    	H3R_LR=FALSE; H3RCUL3S15=FALSE; H3R_AHR=FALSE; }    	
    	if(get_lval(PS4_R1)&&get_ptime(PS4_R1)>125)combo_run(R1_PRESS);
    }
///////////////////////////////////////////////////////////////////// +-+-+-|T|e|a|m| |H|3|R|C|U|L|3|S|-+-+-+     



}





combo H3R_PON
{
	set_val(PS4_CROSS,0);
	wait(50);
	wait(100);
}

combo R1_PRESS
{
	set_val(PS4_R1,0);
	wait(50);
	wait(50);
}

combo H3R_PONRC
{
	set_val(PS4_R1,100);
	set_val(PS4_TOUCH,100);
	wait(50);
	wait(100);
}

combo H3R_H3
{
	wait(WAIT); 
	set_val(PS4_R3,100);
	wait(100);
	wait(110);
}

combo H3R_XXL
{
	wait(WAIT);
	set_val(PS4_RY, -100);
	set_val(PS4_RX, -20);
	wait(125);
	H3R_LR=TRUE;
}

combo H3R_COOLDOWN
{
	set_val(PS4_RY, -100);
	set_val(PS4_RX, -10);
	wait(25); 
	H3R_MR=TRUE;
}

combo H3R_FUCK
{
	set_val(PS4_L1,100);
	wait(20);
	set_val(PS4_L1,100);
	set_val(PS4_R1,100);
	wait(40);
	wait(400);
	set_val(PS4_L1,100);
	wait(70);
	wait(100);
}

combo HTO
{
	set_val(PS4_L2,100);
	set_val(PS4_R2,100);
	wait(60); 
	set_val(PS4_RX, HTO_RX);
	set_val(PS4_RY, HTO_RY);
	set_val(PS4_SQUARE,HTO);
	wait(80); 
	wait(100);
}

combo H3R_P3N1S
{
	set_val(PS4_R1,100);
	set_val(PS4_CROSS,100);
	wait(40);
	wait(180);
	set_val(PS4_R1,100);
	set_val(PS4_CROSS,100);
	wait(40);
	wait(50);
}

combo H3R_MYWAY
{
	call(H3R_XXL);
	call(H3R_COOLDOWN);
}

combo H3R_OPAA
{
	set_val(PS4_RX, XY(PS4_RX, 23)); 
	wait(40); 
	wait(40);
	set_val(PS4_RX, XY(PS4_RX, -23)); 
	wait(40);
	wait(40);
	set_val(PS4_RY, XY(PS4_RY, 23)); 
	wait(40); 
	wait(40);
	set_val(PS4_RY, XY(PS4_RY, -23)); 
	wait(40); 
	wait(40);
}
combo basespin
{
    set_val(PS4_L1, 100);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, -100);
    set_val(PS4_CROSS, 100);
    wait(50); 
    set_val(PS4_L1, 100);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, -100);
    set_val(PS4_CROSS, 100);
    wait(10); 
    set_val(PS4_L1, 100);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, -100);
    set_val(PS4_CROSS, 0);
    wait(10);
    set_val(PS4_L1, 0);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 0);
    wait(50);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(30);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(20);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(10); 
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(10);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(20);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(10);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, 100);
    wait(20);
    set_val(PS4_LX, 0);
    set_val(PS4_LY, 100);
    wait(50);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 100);
    wait(20);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 100);
    set_val(PS4_CROSS, 100);
    wait(10);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 100);
    set_val(PS4_CROSS, 100);
    wait(20);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 100);
    set_val(PS4_CROSS, 100);
    wait(30);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 100);
    set_val(PS4_CROSS, 100);
    wait(30);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, 0);
    set_val(PS4_CROSS, 100);
    wait(50);
    set_val(PS4_LX, -100);
    set_val(PS4_CROSS, 0);
    wait(50);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, -100);
    wait(20);
    set_val(PS4_LX, -100);
    set_val(PS4_LY, -100);
    wait(10);
}

combo autospin_right
{
    set_val(PS4_L1, 100);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, -100);
    wait(50);
    call(basespin);
}

combo autospin_left 
{
    set_val(PS4_L1, 100);
    set_val(PS4_LX, 100);
    set_val(PS4_LY, -100);
    wait(80)
    set_val(PS4_LEFT, 100);
    wait(50); 
    call(basespin);
}
combo vibrate
{
	set_rumble(HVR,100);
	wait(200);
	reset_rumble();
}

function XY(BUTTON, VALUE)
{
	if(abs(get_lval(BUTTON))<25)
	return VALUE;
	return get_lval(BUTTON);
}

function set_ds4_led(colour) 
{
	set_led(LED_1, dbyte(colour * 4));
	set_led(LED_2, dbyte((colour * 4) + 1));
	set_led(LED_3, dbyte((colour * 4) + 2));
	set_led(LED_4, dbyte((colour * 4) + 3)); 
}

function vibrate(BOOL)
{
	if(BOOL) HVR = RUMBLE_A; 
	if(!BOOL)HVR = RUMBLE_B;
	combo_run(vibrate);
}

combo H3RLOB{
BATTERY=TRUE;
set_ds4_led(Off);
wait(500);
BATTERY=FALSE;
wait(1500);
}