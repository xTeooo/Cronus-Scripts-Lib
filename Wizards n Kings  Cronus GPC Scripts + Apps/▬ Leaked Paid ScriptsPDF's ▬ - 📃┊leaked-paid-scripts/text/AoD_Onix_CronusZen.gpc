 /*
 +-++-++-+ +-++-++-++-++-++-++-+ +-++-++-++-++-++-+ +-++-++-++-++-++-+
 |A||o||D| |W||a||r||z||o||n||e| |V8| O|N|I|X|   |Z|E|N| |E|D|I|T|I|O|N|
 +-++-++-+ +-++-++-++-++-++-++-+ +-++-++-++-++-++-+ +-++-++-++-++-++-+
/*
                     ,---.           ,---.
                    / /"`.\.--"""--./,'"\ \
                    \ \    _       _    / /
                     `./  / __   __ \  \,'
                      /    /_O)_(_O\    \
                      |  .-'  ___  `-.  |
                   .--|       \_/       |--.
                 ,'    \   \   |   /   /    `.
                /       `.  `--^--'  ,'       \
             .-"""""-.    `--.___.--'     .-"""""-.
.-----------/         \------------------/         \--------------.
| .---------\         /----------------- \         /------------. |
| |          `-`--`--'                    `--'--'-'             | |
| |                                                             | |
							| | | | 
							| | | | 
							| | | | 
							| | | | 	
							| | | | 
							| | 1| | 
							| | | | 
							| | | | 
							| | | | 
							| | | | 
							| | | | 
							| | | | 				    
							| | | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
							| |  | |
| |_____________________________________________________________| |
|_________________________________________________________________|
                   )__________|__|__________(
                  |            ||            |
                  |____________||____________|
                    ),-----.(      ),-----.(
                  ,'   ==.   \    /  .==    `.
                 /            )  (            \
                 `==========='    `===========' 


*/

	const string TITLE = "AoD V8"; 
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE= "SAVED";
	const string PROFILE_1 = "Primary": 
	const string PROFILE_2 = "Secondary":



	const string HYDRORECOILA = "AntiRecoil*";		 
	const string AOD3245 = "RapidFire*";           
	const string AOD324 = "AutoPing'";           
	const string Aod82282 = "AIM Assist'"         		
	const string SlidCanc = "SlidCanc'";        
	
	const string DROPSHOT = "DROPSHOT";
	const string SWAP = "Swap Tr/Bu";
	const string INVERTED = "Inverted Y";   			


	int AOD8;
	int AOD82;
	int AOD822;


	define AOD8221 = 7;


	define AOD82215 = 4;
define FIRE_BTN = PS4_R2
define PRONE_BTN = PS4_CIRCLE 
define JUMP_BUTTON=PS4_CROSS
define slide_delay 					= 120;
	


	const string ANTIRECOIL_VERTICAL = "Vertical"; 		
	const string ANTIRECOIL_HORIZONTAL = "Horizontal";		

	const string RATE_OF_FIRE = "RapidSpeed";				

	const string AUTOPING_TIME = "AutoPSpeed";				


	const string AIMASSIST_SIZE = "Strength";				
	const string AIMASSIST_TIME = "Time";				


	

	int AOD822152;
	
	define AOD8221525 = 7;





	const uint8 VALUES[][] = { 		
	{    10,                    0,                  1       },	
{    11,                    0,                  1       }, 	
 {    12,                    0,                  1       }};	



	int AOD82215253[3]; 
	int AOD822152534[3];
	int AOD8221525534[3];
	int AOD82215255234;


	int AOD822152552341; 
	

	int AOD8223152552341;


	define AOD82231525523541 = 2;
		



	int AOD82231523441[3]; 
	int AOD822315234413[3];  
	int AOD8223152344134[3];
	int AOD82231523344134[3];
	int AOD282231523344134[3]; 
	int AOD2822315232344134[3];
	

	define AOD28223152323444134 = 3;  
	

	define AOD282231523234544134 = 6;
		

	define CROUCH_BUTTON = PS4_RIGHT;



    int AOD2822234;

    int AOD28222342;
    int AOD282223421;
    int AOD2822234321;

    


    int AOD28222343213;
    int AOD282223432133;
    int AOD2382223432133;
    int AOD23822234321332;
    int AOD238222343121332;
    int AOD2338222343121332;

    



	const uint8 ASCII_NUM[] = 

  	{48,49,50,51,52,53,54,55,56,57};
	

	int i;
	int c,c_val;



data(

    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,

    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
     

	int display_title = TRUE;
	int AOD23382222343121332; 
	int AOD233822222343121332;
    

	int AOD2338222122343121332;	
	int AOD23382232122343121332;
	int AOD233822321232343121332;
	



	int AOD2338223231232343121332; 
	int AOD23382233231232343121332;
	int AOD233822332321232343121332;
	int AOD233221;
	int AOD2233221;
	int AOD22332213;
	int AOD223322133;
	

	int AOD2233221332;                                                    
	int AOD22332321332;
	int AOD223323211332;
	int AOD2233232311332;
	

	int AOD22233232311332; 

	

	int AOD222334232311332;
	

	int AOD2223342332311332; 
	int AOD22233423352311332;  


	

 
init{


	AOD82231523441[0] = get_pvar(SPVAR_1, 0, 1, 0 );         AOD82215253[0]   = get_pvar(SPVAR_6, -99, 99, 0);         
	AOD822315234413[0]  = get_pvar(SPVAR_2, 0, 1, 0 );         AOD822152534[0] = get_pvar(SPVAR_9, -99, 99, 0);
	AOD8223152344134[0]  = get_pvar(SPVAR_3, 0, 1, 0 );         AOD8221525534[0]          = get_pvar(SPVAR_10,  0, 25, 0);
	AOD82231523344134[0]  = get_pvar(SPVAR_4, 0, 1, 0 );         
	AOD282231523344134[0] = get_pvar(SPVAR_5, 0, 1, 0 ); 
	AOD2822315232344134[0]  = get_pvar(SPVAR_31, 0, 1, 0);


	AOD82231523441[1] = get_pvar(SPVAR_11, 0, 1, 0 );        AOD82215253[1]   = get_pvar(SPVAR_16, -99, 99, 0);         
	AOD822315234413[1]  = get_pvar(SPVAR_12, 0, 1, 0 );        AOD822152534[1] = get_pvar(SPVAR_19, -99, 99, 0);
	AOD8223152344134[1]  = get_pvar(SPVAR_13, 0, 1, 0 );        AOD8221525534[1]          = get_pvar(SPVAR_20,   0, 25, 0);
	AOD82231523344134[1]  = get_pvar(SPVAR_14, 0, 1, 0 );        
	AOD282231523344134[1] = get_pvar(SPVAR_15, 0, 1, 0 );
	 AOD2822315232344134[1]   = get_pvar(SPVAR_31, 0, 1, 0);




   																AOD2822234321    = get_pvar(SPVAR_34, 1, 1,1); 
    AOD28222343213      = get_pvar(SPVAR_32, 0, 1, 0);				
    AOD282223432133  = get_pvar(SPVAR_33, 0, 1, 0);					AOD28222342    = get_pvar(SPVAR_36, 1, 50 , 20 ); 
    															AOD282223421    = get_pvar(SPVAR_37, 1, 999, 40 ); 

}


main {

	set_val(TRACE_1, AOD8); 
	set_val(TRACE_2, AOD822152); 
	set_val(TRACE_3, AOD822152552341);
	set_val(TRACE_4, AOD22233232311332);
	


    if(get_controller() != PIO_PS4) 
    {
        if(get_console() == PIO_PS4) 
        {
            swap(PS4_SHARE,PS4_TOUCH); 
        
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) 
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
        }
	}



    if(display_title)
    {
    	cls_oled(0);	
    	AOD22233232311332 = 0;
    	
    	if(AOD233822321232343121332)
    	{
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);

		}
    	else
    	{
    		printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),13,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]);	
    	

    		if(AOD822152552341 == 0)
    			printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_MEDIUM_WIDTH),45,OLED_FONT_MEDIUM,OLED_WHITE,PROFILE_1[0]); 
    		if(AOD822152552341 == 1)
    			printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_MEDIUM_WIDTH),45,OLED_FONT_MEDIUM,OLED_WHITE,PROFILE_2[0]);
    	
    		AOD233822222343121332 = TRUE;	
    		display_title = FALSE;
    	}
    }


    if(AOD233822222343121332 && !AOD2338222122343121332 && !AOD233822321232343121332)
    {
    	AOD22233232311332 += get_rtime();
    	if(AOD22233232311332 >= 5000)
    	{
    		cls_oled(0);
    		AOD22233232311332 = 0;
    		AOD233822222343121332 = FALSE;
    	}
    }


	if(get_val(PS4_L2))
	{

		if(event_release(PS4_SHARE))
		{
			AOD233822321232343121332 = !AOD233822321232343121332;
			
			if(AOD233822321232343121332)        
				combo_run(RUMBLE_OFF);	
			else
				combo_run(RUMBLE_ON);	
			

			display_title = TRUE;
		}



		if(event_release(PS4_OPTIONS) && !AOD233822321232343121332)
		{
			AOD2338222122343121332 = !AOD2338222122343121332;
			
			if(!AOD2338222122343121332)
			{
				AOD23382232122343121332 = FALSE; 		


				combo_run(RUMBLE_OFF);  
				display_title = TRUE;   
			}
			
			if(AOD2338222122343121332)
			{
				AOD8 = 0;        
				combo_run(RUMBLE_ON);	
				AOD23382222343121332 = TRUE;		
			}
		}
		set_val(PS4_SHARE, 0);		   
		set_val(PS4_OPTIONS, 0);		
	} 


if(!AOD233822321232343121332)
{


	if(AOD2338222122343121332)
	{
           

		if(AOD8 <= AOD82215)	 
		{
			if(event_press(PS4_CROSS) && !AOD23382232122343121332) 
			{
				AOD822152 = AOD8221525 + 1; 
				AOD23382232122343121332 = TRUE;
				combo_run(RUMBLE_ON);
				AOD23382222343121332 = TRUE;
			}
			
			if(event_press(PS4_CIRCLE) && AOD23382232122343121332) 
			{
				AOD23382232122343121332 = FALSE;
				combo_run(RUMBLE_OFF);
				AOD23382222343121332 = TRUE;
			}
		}

       
		if(AOD23382232122343121332)
		{
			if(get_val(PS4_L2)) 
			{

			

				AOD82215253[AOD822152552341]   = edit_val( 0 , AOD82215253[AOD822152552341]  ,  0 , 99 , 1 , 10   ); 
				AOD822152534[AOD822152552341] = edit_val( 1 , AOD822152534[AOD822152552341],  99, 99 , 1 , 10   );
				AOD8221525534[AOD822152552341]          = edit_val( 2 , AOD8221525534[AOD822152552341]         ,  0 , 25 , 1 , 10   ); 
				

			

				AOD2822234321    = edit_val( 3 , AOD2822234321    , 0 , 150  , 1 , 100  );

				AOD28222342    = edit_val( 5 , AOD28222342    , 0 , 50   , 1  , 10   );
				AOD282223421    = edit_val( 6 , AOD282223421    , 0 , 990  , 1  , 10   ); 

			}

    
			else 
			{

				if(event_press(PS4_RIGHT))
				{
					AOD822152 += 1;
					AOD23382222343121332 = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
					AOD822152 -= 1;
					AOD23382222343121332 = TRUE;
				}
				


				if(AOD8 == 0) vals_available( 0 , 1  );		
				if(AOD8 == 1) vals_available( 2 , 2  );            				
				if(AOD8 == 2) vals_available( 3 , 4  );			
				if(AOD8 == 3) vals_available( 5 , 6  );				
				if(AOD8 == 4) vals_available( 7 , 7  );	
			} 
		} 


		else 
		{

			if(event_press(PS4_RIGHT))
			{
				AOD8 += 1;
				AOD23382222343121332 = TRUE;
			}
			if(event_press(PS4_LEFT))
			{
				AOD8 -= 1;
				AOD23382222343121332 = TRUE;
			}
			

			if(AOD8 > AOD8221)  
				AOD8 = 0;
			if(AOD8 < 0)
				AOD8 = AOD8221;
				

		if (get_val(PS4_L3) && event_press(PS4_TRIANGLE))	
			{
				AOD822152552341 += 1;
				AOD23382222343121332 = TRUE;
			}

			if(AOD822152552341 > (AOD28223152323444134 - 1))
				AOD822152552341 = 0;
			
	

			AOD82231523441[AOD822152552341] = toggle( 0, AOD82231523441[AOD822152552341] );
			AOD822315234413[AOD822152552341]  = toggle( 1, AOD822315234413[AOD822152552341]  );
			AOD8223152344134[AOD822152552341]  = toggle( 2, AOD8223152344134[AOD822152552341]  );
			AOD82231523344134[AOD822152552341]  = toggle( 3, AOD82231523344134[AOD822152552341]  );
			AOD282231523344134[AOD822152552341] = toggle( 4, AOD282231523344134[AOD822152552341] );
			AOD2822315232344134[AOD822152552341] = toggle( 5, AOD2822315232344134[AOD822152552341]  );
		

    		


			AOD28222343213     = toggle( 6 , AOD28222343213     );
			AOD282223432133 = toggle( 7 , AOD282223432133 );
		} 


		if(event_press(PS4_PS))
			save ();
			

		block_all_inputs();
		
	} 


							 
	if(!AOD2338222122343121332)
	{
	
		if(AOD28222343213) 
		{
			swap(PS4_R1, PS4_R2);
			swap(PS4_L1, PS4_L2);
		}
       
	

		AOD822315234413[AOD822152552341]  = speed_toggle( PS4_L2, PS4_RIGHT   , AOD822315234413[AOD822152552341] , 1 );
		AOD8223152344134[AOD822152552341]  = speed_toggle( PS4_L2, PS4_DOWN , AOD8223152344134[AOD822152552341] , 2 );
		AOD82231523344134[AOD822152552341]  = speed_toggle( PS4_SQUARE, PS4_RIGHT, AOD82231523344134[AOD822152552341] , 3 );
		AOD282231523344134[AOD822152552341] = speed_toggle( PS4_L2, PS4_LEFT , AOD282231523344134[AOD822152552341], 4 );
		AOD2822315232344134[AOD822152552341] = speed_toggle( PS4_L2, PS4_CIRCLE, AOD2822315232344134[AOD822152552341], 5  );




    	if(AOD222334232311332) 
        	AOD222334232311332 -= get_rtime();


   	 	deadzone(PS4_L2,PS4_R2,99,99);
    	


		if(AOD82231523344134[AOD822152552341] == 1)
		{
			if(get_val(PS4_L2)  && !get_val(PS4_R2)) 
				combo_run(AOD32455);
			else 
				combo_stop(AOD32455); 
		}

  

		if(AOD282231523344134[AOD822152552341] == 1)
		if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) {
 

		if(AOD282231523344134) {
if(event_release (PS4_CIRCLE)){ combo_run(AOD3245522) }
}
  }



		if(AOD2822315232344134 [AOD822152552341] == 1) 
if /*(AOD2822315232344134 && */(get_val(FIRE_BTN)) {
	set_val(PRONE_BTN,100);
	}
	else if (AOD2822315232344134 && event_release(FIRE_BTN)) {	
	combo_run(AOD324552);
		}

		if(AOD282223432133) 
			AOD233822332321232343121332 = -1;
		else
			AOD233822332321232343121332 = 1;
	



    	if/*(event_press(PS4_TRIANGLE) ||*/(get_val(PS4_OPTIONS) && event_press(PS4_TRIANGLE))
    	{
    	    AOD2223342332311332=!AOD2223342332311332; 
    	    AOD22233423352311332 = FALSE;
        
    	    if(AOD222334232311332) 
    	    { 
    	     	AOD22233423352311332 = FALSE ; 
    	    	AOD2223342332311332 = !AOD2223342332311332;
    	    }
			else
            	AOD222334232311332 = 200;
    
    		if(AOD2338222122343121332)
				AOD23382222343121332 = TRUE;
			else
				display_title = TRUE;
    	}
		if(get_val(PS4_L3))
			set_val(PS4_TRIANGLE, 0);
		

    	if(AOD22233423352311332)
    		AOD822152552341 = 2;
    	
    	else
    	{    

    		if(AOD2223342332311332)
    			AOD822152552341 = 1;
    		

    		else	
    			AOD822152552341 = 0;
		}

	} 


	if(AOD82231523441[AOD822152552341] == 1)
	{
		if/*if(AOD82231523441[AOD822152552341] != 1 &&*/ (get_val(PS4_L2) && get_val(PS4_R2) || AOD82231523441[AOD822152552341] == 1 && get_val(PS4_R2) && get_ptime(PS4_R2) <= AOD2233221332)
			combo_run(HYDRORECOILA);
		else
			combo_stop(HYDRORECOILA);
	}



	if(AOD822315234413[AOD822152552341] == 1)
	{

    	AOD2233221332 = 500 / (VALUES[AOD822152552341][4] + AOD8221525534[AOD822152552341]); 
   		AOD22332321332 = AOD2233221332 - 20;
    	if(AOD22332321332 < 0) AOD22332321332 = 0;
    

    	if(get_val(PS4_R2))
    		combo_run(AOD3245);
    	else
    		combo_stop(AOD3245);
    		
    	AOD223323211332 = 150;
    	AOD2233232311332 = 300;
    	combo_run(BLINK);
	}


	if(AOD8223152344134[AOD822152552341] == 1)
	{

		AOD2233221332 = AOD2822234321;
		//AOD22332321332 = AOD2822234;
			

    	if(get_val(PS4_L2) && get_val(PS4_R2)){
    		combo_run(AOD324);
}
		AOD223323211332 = 200;
    	AOD2233232311332 = 1000;
    	combo_run(BLINK);
	}  
		
	
	if(AOD23382222343121332) 
	{

		cls_oled(0);
    	AOD22233232311332 = 0;
		
		if(AOD23382232122343121332)
		{
	
    		

			display_edit( 0 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH)   , ANTIRECOIL_VERTICAL[0]   , AOD82215253[AOD822152552341]   );
			display_edit( 1 , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , AOD822152534[AOD822152552341] );
			display_edit( 2 , center_x(sizeof(RATE_OF_FIRE) - 1 , OLED_FONT_MEDIUM_WIDTH)         , RATE_OF_FIRE[0]          , AOD8221525534[AOD822152552341]          );
			

			display_edit( 3 , center_x(sizeof(AUTOPING_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)    , AUTOPING_TIME[0]    , AOD2822234321    );
		    display_edit( 4 , center_x(sizeof(AUTOPING_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)    , AUTOPING_TIME[0]    , AOD2822234321    );
			//display_edit( 4 , center_x(sizeof(BURSTFIRE_RELEASE) - 1, OLED_FONT_MEDIUM_WIDTH) , BURSTFIRE_RELEASE[0] , AOD2822234 );
			display_edit( 5 , center_x(sizeof(AIMASSIST_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH)    , AIMASSIST_SIZE[0]    , AOD28222342    );
			display_edit( 6 , center_x(sizeof(AIMASSIST_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)    , AIMASSIST_TIME[0]    , AOD282223421    );
			//display_edit( 7 , center_x(sizeof(STRAFESHOT_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)   , STRAFESHOT_TIME[0]   , strafeShot_time   );
		}
		else
		{
	  
    		

			display_mod( 0 ,  center_x(sizeof(HYDRORECOILA) - 1, OLED_FONT_MEDIUM_WIDTH) , HYDRORECOILA[0] , AOD82231523441[AOD822152552341]);
			display_mod( 1 ,  center_x(sizeof(AOD3245) - 1, OLED_FONT_MEDIUM_WIDTH)  , AOD3245[0]  , AOD822315234413[AOD822152552341]);
			display_mod( 2 ,  center_x(sizeof(AOD324) - 1, OLED_FONT_MEDIUM_WIDTH)  , AOD324[0]  , AOD8223152344134[AOD822152552341]);
			display_mod( 3 ,  center_x(sizeof(Aod82282) - 1, OLED_FONT_MEDIUM_WIDTH)  , Aod82282[0]  , AOD82231523344134[AOD822152552341]);
			display_mod( 4 ,  center_x(sizeof(SlidCanc) - 1, OLED_FONT_MEDIUM_WIDTH), SlidCanc[0], AOD282231523344134[AOD822152552341]);
			display_mod( 4 ,  center_x(sizeof(SlidCanc) - 1, OLED_FONT_MEDIUM_WIDTH), SlidCanc[0], AOD282231523344134[AOD822152552341]);
			display_mod( 5 ,  center_x(sizeof(DROPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH), DROPSHOT[0], AOD2822315232344134[AOD822152552341]);
			

			display_mod( 6 ,  center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH)    , SWAP[0]    , AOD28222343213);
			display_mod( 7 ,  center_x(sizeof(INVERTED) - 1, OLED_FONT_MEDIUM_WIDTH), INVERTED[0], AOD282223432133);
		}
		

		if(AOD8 < AOD282231523234544134)  
		{
			if(AOD822152552341 == 0) 

    			line_oled(0, 26, 39, 26, 5, 1); 
    		else if(AOD822152552341 == 1)

    			line_oled(44, 26, 83, 26, 5, 1); 
    		else if(AOD822152552341 == 2)

    			line_oled(88, 26, 127, 26, 5, 1); 
		}
		else 
    	{
    		line_oled(0, 26, 39, 26, 5, 1);
    		line_oled(44, 26, 83, 26, 5, 1);
    		line_oled(88, 26, 127, 26, 5, 1);
    	}
    	
		AOD233822222343121332 = TRUE;
        AOD23382222343121332 = FALSE;
    } 
    

} 

	led(AOD822152552341);

} 
 

combo RUMBLE_ON {						
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}



combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}



combo SAVE { 
	cls_oled(0);						
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]);
	wait(10)
	call(RUMBLE_ON);											
	wait(150);
	call(RUMBLE_ON);				
	wait(1000);
	AOD23382222343121332 = TRUE;				
}



combo AOD32 { 
	cls_oled(0);
	wait(10);
	drawBattery(batteryLevel);
	call(RUMBLE_OFF);							
	wait(10);
	call(RUMBLE_OFF);
	wait(10);
	call(RUMBLE_OFF);	
	wait(10);
	cls_oled(0);
}


 
combo HYDRORECOILA {

    AOD2338223231232343121332 = get_val(PS4_RY) + (VALUES[AOD822152552341][0] + AOD82215253[AOD822152552341]);  
    if(AOD2338223231232343121332 > 100) AOD2338223231232343121332 = 100;
    if(abs(get_val(PS4_RY)) < abs(VALUES[AOD822152552341][0] + AOD82215253[AOD822152552341]) + 5)
    set_val(PS4_RY, (AOD2338223231232343121332 * AOD233822332321232343121332));

    AOD23382233231232343121332 = get_val(PS4_RX) + (VALUES[AOD822152552341][1] + AOD822152534[AOD822152552341]);
    if(AOD23382233231232343121332 > 100) AOD23382233231232343121332 = 100;
    if(abs(get_val(PS4_RX)) < abs(VALUES[AOD822152552341][1] + AOD822152534[AOD822152552341]) + 5)
    set_val(PS4_RX, AOD23382233231232343121332);
}
 


combo AOD324 { 
  set_val(XB1_UP,100);
	wait(AOD2822234321);
	set_val(XB1_UP,0);
	wait(AOD2822234321);
	}



combo AOD3245 { 
    wait(AOD2233221332);
    set_val(PS4_R2, 0);
    wait(AOD22332321332);
    }



combo AOD32455 {
    set_val(PS4_RY,aa(PS4_RY, AOD28222342));
    wait(AOD282223421);
    set_val(PS4_RX,aa(PS4_RX, AOD28222342));
    set_val(PS4_LX,aa(PS4_LX, AOD28222342));
    wait(AOD282223421);
    set_val(PS4_RY,aa(PS4_RY,inv(AOD28222342))); 
    wait(AOD282223421);
    set_val(PS4_RX,aa(PS4_RX,inv(AOD28222342)));
    set_val(PS4_LX,aa(PS4_LX,inv(AOD28222342)));
    wait(AOD282223421);
}

	combo AOD324552 {
    wait(50);
	set_val(PRONE_BTN, 100);
	
	}
	


combo AOD3245522 { 
set_val(PRONE_BTN, 100);

	wait(slide_delay);

	set_val(PRONE_BTN, 0);

	wait(60);

	set_val(PRONE_BTN, 100);

	wait(50);

	set_val(PRONE_BTN, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);

	set_val(PRONE_BTN, 0);
	set_val(JUMP_BUTTON, 100);

	wait(10);

	set_val(JUMP_BUTTON, 0);


}
combo BLINK {
	led(AOD822152552341);
    wait(AOD223323211332);
    led(7);
    wait(AOD2233232311332);
    }

 




function vals_available(f_min, f_max) { 

	if(AOD822152 < f_min)
		AOD822152 = f_max;
	if(AOD822152 > f_max)
		AOD822152 = f_min;
		

	AOD8223152552341 = AOD822152;	
}



function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  

	if(AOD822152 == f_idx)
	{

    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); 
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); 

   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); 
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); 


	}

	if(AOD8221525534[AOD822152552341] < 0)
		AOD8221525534[AOD822152552341] = 0;



	return f_val;
}



function speed_toggle(f_hold, f_press, f_val, f_string) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == 300) 
		{
			AOD8 = f_string;
			
			if(f_val == 0)
			{
				if(f_string == 1) 
					AOD8223152344134[AOD822152552341] = 0; 
				else if(f_string == 2) 
					AOD822315234413[AOD822152552341] = 0;
					
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else
			{
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			AOD23382222343121332 = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}



function toggle(f_idx, f_val) { 
	
	if(event_press(PS4_UP))
	{
		if(AOD8 == f_idx)
		{
			if(f_idx == 1) 
				AOD8223152344134[AOD822152552341] = 0;
			else if(f_idx == 2)  
				AOD822315234413[AOD822152552341] = 0; 
				
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		
		AOD23382222343121332 = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(AOD8 == f_idx)
		{
			f_val = 0;
			combo_run(RUMBLE_OFF);
		}		
		AOD23382222343121332 = TRUE;
	}
	return f_val;
}



function display_edit(f_idx, f_string, f_print, f_val) { 
    	if(AOD822152 == f_idx)
    	{

    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    	

    		if(f_idx <= AOD82231525523541) 
    			number_to_string(VALUES[AOD822152552341][AOD8223152552341] + f_val, find_digits(VALUES[AOD822152552341][AOD8223152552341] + f_val));
    	

    		else 
    			number_to_string(f_val, find_digits(f_val));
    	}
}



function display_mod(f_idx, f_string, f_print, f_toggle) { 
    	if(AOD8 == f_idx)
    	{

    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        	

    		if(f_toggle == 1)
    			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
    		else
    			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
    	}
}



function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
        

		if(AOD822152 > AOD82231525523541)
		{

        	if(f_val < inv(f_rng_min)) 
        		f_val = inv(f_rng_min); 

       		if(f_val > f_rng_max) 
        		f_val = f_rng_max;
		}
		

		else
		{

        if((f_val + VALUES[AOD822152552341][AOD8223152552341]) < inv(f_rng_min)) 
        	f_val = inv(f_rng_min + VALUES[AOD822152552341][AOD8223152552341]); 

        if((f_val + VALUES[AOD822152552341][AOD8223152552341]) > f_rng_max) 
        	f_val = f_rng_max - VALUES[AOD822152552341][AOD8223152552341]; 
        }
        AOD23382222343121332 = TRUE;
    }
    return f_val; 
} 



function aa(f_axis,f_val) { 

    if(abs(get_val(f_axis)) < AOD28222342 + 1) 
        return f_val;
        
    return get_val(f_axis); 
}



function number_to_string(f_val,f_digits) {

    i = 1;  c_val = 10000;
    
	if(f_val < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44); 
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  



function find_digits(f_num) {


    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     



function center_x(f_chars,f_font) {


    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 



function center_y(f_size) {



    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 



function press_hold(f_btn) { 


	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}



function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}







function save () {
	combo_run(SAVE);

	set_pvar(SPVAR_1,AOD82231523441[0]);         set_pvar(SPVAR_6 ,AOD82215253[0]     );         
	set_pvar(SPVAR_2,AOD822315234413[0] );         set_pvar(SPVAR_9 ,AOD822152534[0]);
	set_pvar(SPVAR_3,AOD8223152344134[0] );         set_pvar(SPVAR_10,AOD8221525534[0]         );
	set_pvar(SPVAR_4,AOD82231523344134[0] );         
	set_pvar(SPVAR_5,AOD282231523344134[0]); 
	set_pvar(SPVAR_41,AOD2822315232344134[0]);


	set_pvar(SPVAR_11,AOD82231523441[1]);         set_pvar(SPVAR_16,AOD82215253[1]     );       
	set_pvar(SPVAR_12,AOD822315234413[1] );         set_pvar(SPVAR_19,AOD822152534[1]);     
	set_pvar(SPVAR_13,AOD8223152344134[1] );         set_pvar(SPVAR_20,AOD8221525534[1]         );     
	set_pvar(SPVAR_14,AOD82231523344134[1] );         
	set_pvar(SPVAR_15,AOD282231523344134[1]);
	set_pvar(SPVAR_39,AOD2822315232344134[1]);


													set_pvar(SPVAR_34, AOD2822234321    );
    set_pvar(SPVAR_32, AOD28222343213     );				
    set_pvar(SPVAR_33, AOD282223432133 );				 set_pvar(SPVAR_36, AOD28222342    );
    												 set_pvar(SPVAR_37, AOD282223421    );
    											
	
}

