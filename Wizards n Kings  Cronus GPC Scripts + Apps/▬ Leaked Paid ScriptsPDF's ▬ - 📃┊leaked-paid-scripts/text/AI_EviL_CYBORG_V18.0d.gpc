//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                                                                               #
//#################################################################################################
//################### © 2021, Sami ABADA - Sweet EviL, All Rights Reserved ########################
//################################################################################################# 
/*
	
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
					© 2021, Sami ABADA - Sweet EviL, All Rights Reserved


//#################################################################################################
*/
								 	
const int16 Lookup_Table[] 		= {
									0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156, 
									173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
									342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
									500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
									642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
									766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
									866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
									939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
									984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
									1000
									};	
									
//################################################################################################# 
 
data(1,// begin of data segment--------              
      1,0,0,0, //1. Light_Blue                           
      0,1,0,0, //2. Light_Red                            
      0,0,1,0, //3. Light_Green                          
      0,0,0,1, //4. Light_Pink                           
      1,0,1,0, //5. Light_SkyBlue                        
      0,1,1,0, //6. Light_Yellow                         
      1,1,1,1, //7. Light_White                          
      2,0,0,0, //1. Blue                                 
      0,2,0,0, //2. Red                                  
      0,0,2,0, //3. Green                                
      0,0,0,2, //4. Pink                                 
      2,0,2,0, //5. SkyBlue                              
      0,2,2,0, //6. Yellow                               
      2,2,2,2, //7. White                                
      3,0,0,0, //1. Dim_Blue                             
      0,3,0,0, //2. Dim_Red                              
      0,0,3,0, //3. Dim_Green                            
      0,0,0,3, //4. Dim_Pink                             
      3,0,3,0, //5. Dim_SkyBlue                          
      0,3,3,0, //6. Dim_Yellow                           
      3,3,3,3  //7. Dim_White                            
); // end of data segment--------------

define LED_OFF       				= -2;                           
define Light_Blue   		 		=  1;                           
define Light_Red     				=  2;                           
define Light_Green   				=  3;                           
define Light_Pink    				=  4;                           
define Light_SkyBlue 				=  5;                           
define Light_Yellow  				=  6;                           
define Light_White   				=  7;                           
define Blue          				=  8;                           
define Red           				=  9;                           
define Green         				= 10;                           
define Pink          				= 11;                           
define SkyBlue       				= 12;                           
define Yellow        				= 13;                           
define White         				= 14;                           
define Dim_Blue      				= 15;                           
define Dim_Red       				= 16;                           
define Dim_Green     				= 17;                           
define Dim_Pink      				= 18;                           
define Dim_SkyBlue   				= 19;                           
define Dim_Yellow    				= 20;                           
define Dim_White     				= 21;  

//################################################################################################# 									

define TIME_BASE					= 4;	// don't change	

define MAX_DRIFT					= 12;	// don't change	if calculated drift is greater than 12, the controller is dead

//################################################################################################# 								 	

/*
	•	To activate the kill switch (drive mode, script is off) press ADS BUTTON + OPTION. The led flashes red. To reactivate the script, do the same operation and the led turns blue
*/

define ADS_BUTTON					= PS4_L2;
define FIRE_BUTTON					= PS4_R2;
define CROUCH_BUTTON 				= PS4_CIRCLE;  
define JUMP_BUTTON  				= PS4_R3;
define SWAP_BUTTON					= PS4_TRIANGLE;
define MELEE_BUTTON					= PS4_CROSS;
define SPRINT_BUTTON				= PS4_L3;
define PING_BUTTON					= PS4_UP; 

int INVERTED						= 0; 	// 1 if you play inveted 



int	USE_RUMBLE 						= TRUE;
int USE_HAIR_TRIGGER				= TRUE;
int USE_EASY_PLATE					= FALSE;
int USE_TURBO_MELEE					= FALSE;
int USE_BUNNY_HOP					= TRUE;
int USE_HOLD_BREATH					= TRUE;
int USE_AUTO_PING					= FALSE;
int USE_AUTO_RUN    				= FALSE;

int USE_SLIDE_CANCEL				= 1; // 0 disable, 1 MW, 3 CW

define CW_Slide_Delay    			=  80;	
define MW_Slide_Delay 				=  80;

int USE_QUICK_SCOPE					= FALSE;
int quickscope_press_time  			= 320;
define quickscopedelay				= 360;

/*
•	New Strafe/drive Zigzag mode based on random algorithm to bring more natural movement and feeling also unpredictable  
	  * To get into strafe zigzag double tap left Dpad.
	  * To disable it double tap again 
	  * You can change this button using the compiler
	  * works when you hold fire button
*/

define	STRAFE_DOUBLE_TAP_BUTTON	= PS4_LEFT;	
int STRAFE_DELAY					= 400;

//################################################################################################# 

// Rapid fire section

int RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON 		= FALSE;

define MOD_TOGGLE_BUTTON 			= PS4_LEFT;
define RAPID_FIRE_BUTTON 			= PS4_CROSS;
define AKIMBO_RAPID_FIRE_BUTTON 	= PS4_SQUARE;
define JITTERS_BUTTON 				= PS4_CIRCLE;

/*
•	To toggle MODS, hold MOD_TOGGLE_BUTTON + toggle button defined in the compiler
		o	MOD_TOGGLE_BUTTON + RAPID_FIRE_BUTTON: it will enable classical rapid fire led will flash green (work with fire button)
		o	MOD_TOGGLE_BUTTON + AKIMBO_RAPID_FIRE_BUTTON: enable Akimbo rapid fire led flash purple (work with ads or fire or both buttons)
		o	MOD_TOGGLE_BUTTON + JITTERS_BUTTON: enable jitters mode Led flash blue sky (work with ads or fire or both buttons)
		o	If you toggle again it will go to normal mode also when you swap weapon
		o	Important for akimbo or classical rapid fire: you can adjust the rate of fire using the menu under mods menu section
		
•	To toggle rapid fire hold on the LEFT DPAD and press
	    o	X/A - For Standard Rapid Fire
	    o	Square/X - Akimbo Rapid Fire
	    o	O/B - For JITTER
•	Using the compiler:
	    o	if RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = FALSE --> rapid fire is active for just 1 weapon!! when you press swap button rapid fire will be disabled
	    o	if RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = TRUE --> rapid fire is active for primary and secondary weapon!
	
	•	 New feature:
	when RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = FALSE :
	  o	when you switch your weapon rapid fire is off
	   o	you switch back again your weapon : rapid fire is on
	  o	using pltate doesn't affect this if by accident rapid fire is switched on or off for indiscreet weapon double tap O/B and the issue is fixed	
	•	ALL the button mapping can be changed using the compiler	    
*/

define BASIC       					= 0x00; 
define DYNAMIC						= 0x01;
define STEP_MODE 					= 0x02; 
define FAST_TRIG     				= 0x03;  
define SLOW_TRIG	 				= 0x04; 
define RANDOM	 					= 0x05; 

int RMode							= FAST_TRIG;

int RPressTime						= 24; // 8 16 24 32 ...
int RPauseTime						= 24; // 8 16 24 32 ...

int RPressure						= 40;
int RStep							= 8; // 8 16 24 32 ...
int RDyn 							= 40; // \FIXME

int min_random						= 2;
int max_random						= 6;


//################################################################################################# 

define DISABLED						= 0;
define USE_RUMBLE_EVIL_AR			= 1;
define USE_DYNAMIC_EVIL_AR			= 2;

int EVIL_AR							= USE_RUMBLE_EVIL_AR;  // 
int AR_STRENGTH						= 20;  		// can be negative if you want more ar and use : USE_RUMBLE_EVIL_AR

//################################################################################################# 

int USE_EVIL_BOT					= TRUE;

//################################################################################################# 

// EVIL BOT TYPE: dont't change

define CIRCULAR						= 1;
define OVAL							= 2;

//################################################################################################# 

// EviL Spiral dont't change

define DISABLE_SPIRAL				= 0;
define LOW_SPIRAL					= 2;
define MID_SPIRAL					= 3;
define HIGH_SPIRAL					= 4;


//################################################################################################# 

// EviL Scan dont't change

define DISABLE_SCAN					= 0;
define LOW_SCAN						= 1;
define MID_SCAN						= 2;
define HIGH_SCAN					= 3;


//################################################################################################# 

// EviL Steady Aim dont't change

define DISABLE_SREADY_AIM			= 0;
define LOW_SREADY_AIM				= 4;
define MID_SREADY_AIM				= 6;
define HIGH_SREADY_AIM				= 8;
	
//################################################################################################# 

int USE_SWEET_EVIL_AI					= TRUE; //ONLY ADVANCED USER!

int SWEET_EVIL_AI_THRESHOLD				= 30;

//Sensitivity settings
int ADS_SENS							= 100;
int ADS_FIRE_SENS						= 100;
int HIP_FIRE_SENS						= 100;
int CAMERA_SENS							= 100;

//ADS ONLY
int FRONTAL_ADS_EVIL_SLOPE				= 6;
int FRONTAL_ADS_EVIL_ASSIST				= 20;
int FRONTAL_ADS_EVIL_BOT_TYPE			= OVAL;
int FRONTAL_ADS_EVIL_SPIRAL				= MID_SPIRAL;
int FRONTAL_ADS_EVIL_SCAN				= HIGH_SCAN;
int FRONTAL_ADS_EVIL_STEADY_AIM			= DISABLE_SREADY_AIM;
   // range 25 to 300 less than 100 reduce sensitivity like negative boost

int DRIFT_ADS_EVIL_SLOPE				= 6;
int DRIFT_ADS_EVIL_ASSIST				= 22;
int DRIFT_ADS_EVIL_BOT_TYPE				= OVAL;
int DRIFT_ADS_EVIL_SPIRAL				= MID_SPIRAL;
int DRIFT_ADS_EVIL_SCAN					= HIGH_SCAN;
int DRIFT_ADS_EVIL_STEADY_AIM			= DISABLE_SREADY_AIM;

//ADS + FIRE
int FRONTAL_ADS_FIRE_EVIL_SLOPE			= 6;
int FRONTAL_ADS_FIRE_EVIL_ASSIST		= 24;
int FRONTAL_ADS_FIRE_EVIL_BOT_TYPE		= OVAL;
int FRONTAL_ADS_FIRE_EVIL_SPIRAL		= MID_SPIRAL; 
int FRONTAL_ADS_FIRE_EVIL_SCAN			= HIGH_SCAN;
int FRONTAL_ADS_FIRE_EVIL_STEADY_AIM	= MID_SREADY_AIM;

int DRIFT_ADS_FIRE_EVIL_SLOPE			= 6;
int DRIFT_ADS_FIRE_EVIL_ASSIST			= 26;
int DRIFT_ADS_FIRE_EVIL_BOT_TYPE		= OVAL;
int DRIFT_ADS_FIRE_EVIL_SPIRAL			= MID_SPIRAL;
int DRIFT_ADS_FIRE_EVIL_SCAN			= HIGH_SCAN;
int DRIFT_ADS_FIRE_EVIL_STEADY_AIM		= MID_SREADY_AIM;


//HIP FIRE
int FRONTAL_HIP_FIRE_EVIL_SLOPE			= 10;
int FRONTAL_HIP_FIRE_EVIL_ASSIST		= 28;
int FRONTAL_HIP_FIRE_EVIL_BOT_TYPE		= OVAL;
int FRONTAL_HIP_FIRE_EVIL_SPIRAL		= MID_SPIRAL;
int FRONTAL_HIP_FIRE_EVIL_SCAN			= HIGH_SCAN;
int FRONTAL_HIP_FIRE_EVIL_STEADY_AIM	= HIGH_SREADY_AIM;


int DRIFT_HIP_FIRE_EVIL_SLOPE			= 10;
int DRIFT_HIP_FIRE_EVIL_ASSIST			= 30;
int DRIFT_HIP_FIRE_EVIL_BOT_TYPE		= OVAL;
int DRIFT_HIP_FIRE_EVIL_SPIRAL			= MID_SPIRAL;
int DRIFT_HIP_FIRE_EVIL_SCAN			= HIGH_SCAN;
int DRIFT_HIP_FIRE_EVIL_STEADY_AIM		= HIGH_SREADY_AIM;


//################################################################################################# 

int	EVIL_SLOPE;
int	EVIL_ASSIST;
int EVIL_BOT_TYPE;
int EVIL_SPIRAL;
int EVIL_SCAN;
int EVIL_STEADY_AIM;
int EVIL_SENS;

//################################################################################################# 

define MAGNITUDE					= 100;			   // don't change tweak this when you have ar drift issue
int REFRESH_RATE					= TIME_BASE * 10;  // don't change

//################################################################################################# 			

int update_timer;
int C_RX;
int C_RY;
int C_LX;
int C_LY;
int L_RX;
int L_RY;
//int T_RX;
int T_RY;
int Inc_Dec_State_1;
int Inc_Dec_State_2;
int Aim_Assit_1;
int Aim_Assit_2;
int angle;
int _ret;
//int _temp;
int mvt_direction;
//int magnitude_ok;
int min_aim_assit;
int cw_angle;
int inverted;
int rx_drift;
int ry_drift;
int lx_drift;
int ly_drift;
int drift_calib;

int _var;
int _scan_1;
int _scan_2;
int _EVIL_ASSIST_1;
int _EVIL_ASSIST_2;
int _EVIL_ASSIST_3;

int slide_enable;
define WALK   						 = 0;
define SPRINT 						 = 1;
int state;
int toggle_rapid_fire;
int rapid_fire_on;
int Click ;
define  timelimit 					= 304;
int	Click_strafe;
int strafe_mode 					= 0;
int KillSwitch;

//#################################################################################################

init
{
	mvt_direction = 1;
	
	Inc_Dec_State_1 = TRUE;
	Inc_Dec_State_2 = FALSE;
	
    update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	cw_angle = 90 * inverted;
			
	drift_calib = 100;
	
	combo_run(start);
}


main {

	vm_tctrl(-6);

	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_ival(PS4_RX))+ 2);
		ry_drift = max(ry_drift, abs(get_ival(PS4_RY))+ 2);

		lx_drift = max(lx_drift, abs(get_ival(PS4_LX))+ 2);
		ly_drift = max(ly_drift, abs(get_ival(PS4_LY))+ 2);

		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);

		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);

		drift_calib--;

		rx_drift = max(rx_drift, ry_drift);
		lx_drift = max(lx_drift, ly_drift);
	}
	else
	{
		if(USE_RUMBLE == FALSE)
		{
			block_rumble();
		}

		if(USE_HAIR_TRIGGER)
		{
			if(get_ival(PS4_R2) > 10)
			set_val(PS4_R2, 100);

			if(get_ival(PS4_L2)> 10)
			set_val(PS4_L2, 100);
		}

		if(Click_strafe > 0) Click_strafe = Click_strafe - get_rtime();
		if(event_press(STRAFE_DOUBLE_TAP_BUTTON) && Click_strafe <= 0)
		{
			Click_strafe = timelimit;
		}
		else if(event_press(STRAFE_DOUBLE_TAP_BUTTON) && Click_strafe > 0)
		{
			strafe_mode = !strafe_mode;
		}

		if(rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
		{
			if(Click > 0) Click = Click - get_rtime();
			if(event_press(PS4_CIRCLE) && Click <= 0)
			{
				Click = timelimit;
			}
			else if(event_press(PS4_CIRCLE) && Click > 0)
			{
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);

				if(!toggle_rapid_fire)
				{
					toggle_rapid_fire = rapid_fire_on;
				}
				else
				{
					toggle_rapid_fire = 0;
					colourled(Blue);
				}
			}
		}

		if(event_release(SWAP_BUTTON) && get_ptime(SWAP_BUTTON) <= 496 && rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
		{
			set_led(0,0);
			set_led(1,0);
			set_led(2,0);

			if(!toggle_rapid_fire)
			{
				toggle_rapid_fire = rapid_fire_on;
			}
			else
			{
				toggle_rapid_fire = 0;
				colourled(Blue);
			}
		}

		if(get_ival(MOD_TOGGLE_BUTTON) )
		{
			if(event_press(RAPID_FIRE_BUTTON) )
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);

				if(!toggle_rapid_fire || toggle_rapid_fire != 1)
				{
					toggle_rapid_fire = 1;
					rapid_fire_on = 1;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}
			else if (event_press(AKIMBO_RAPID_FIRE_BUTTON) )
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);

				if(!toggle_rapid_fire || toggle_rapid_fire != 2)
				{
					toggle_rapid_fire = 2;
					rapid_fire_on = 2;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}
			else if (event_press(JITTERS_BUTTON))
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);

				if(!toggle_rapid_fire || toggle_rapid_fire != 3)
				{
					toggle_rapid_fire = 3;
					rapid_fire_on = 3;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}
		}

		//set_val(TRACE_2, toggle_rapid_fire);

		if ((toggle_rapid_fire == 1 && get_ival(FIRE_BUTTON) > 10) || (toggle_rapid_fire == 2 && (get_ival(FIRE_BUTTON) > 10 || get_ival(ADS_BUTTON) > 10) ))
		{
			/*
			 if (RMode == SLOW_TRIG && get_ival(FIRE_BUTTON)>=RPressure) 
			 combo_run(cRapidFire);
			 else if (RMode == FAST_TRIG && get_ival(FIRE_BUTTON)< RPressure) 
			 combo_run(cRapidFire);
			 else 
			 */
			combo_run(cRapidFire);
		}

		if ((toggle_rapid_fire == 3 && (get_ival(FIRE_BUTTON) > 10 || get_ival(ADS_BUTTON) > 10) ))
		{
			combo_run(cJitters);
		}

		if (combo_running(cRapidFire))
		{
			if(
					(toggle_rapid_fire == 1 && event_release(FIRE_BUTTON)) ||
					(toggle_rapid_fire == 2 && get_ival(FIRE_BUTTON) < 10 && get_ival(ADS_BUTTON) < 10)
			)
			combo_stop(cRapidFire);

		}

		if (combo_running(cJitters))
		{
			if(
					(toggle_rapid_fire == 3 && get_ival(FIRE_BUTTON) < 10 && get_ival(ADS_BUTTON) < 10)
			)
			combo_stop(cJitters);

		}

		if((get_ival(ADS_BUTTON) > 50 && event_release(PS4_OPTIONS)))
		{
			set_val(PS4_OPTIONS, 0);
			combo_run(EXIT);
			combo_run(cvibrate);

			KillSwitch = !KillSwitch;

			if(!KillSwitch)
			{
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
				colourled(Blue);
			}
			else
			{
				//KillSwitchLed = 32000;
				toggle_rapid_fire = 0;
				rapid_fire_on = 0;
				combo_stop(rapid_fire_Led);
				combo_stop(sprint);
				combo_stop(cRapidFire);
				combo_stop(cJitters);
				combo_stop(Quick_Scope);
				combo_stop(HOLD_BREATH);
				combo_stop(BUNNYHOP);
				combo_stop(TURBO_MELEE);
				combo_stop(easy_plate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
			}
		}

		C_RX = get_ival(PS4_RX);
		C_RY = get_ival(PS4_RY);

		C_LX = get_ival(PS4_LX);
		C_LY = get_ival(PS4_LY);

		if(isqrt(pow(C_RX, 2) + pow(C_RY, 2)) <= rx_drift)
		{
			C_RX = 0;
			C_RY = 0;
		}

		if(isqrt(pow(C_LX, 2) + pow(C_LY, 2)) <= lx_drift)
		{
			C_LX = 0;
			C_LY = 0;
		}

		set_val(PS4_LX, C_LX);
		set_val(PS4_LY, C_LY);

		if((get_val(ADS_BUTTON) > 50 || get_val(FIRE_BUTTON) > 50 || combo_running(cRapidFire) || combo_running(cJitters)) && KillSwitch == 0)
		{
			if(USE_AUTO_PING && (get_val(FIRE_BUTTON)> 50))
			combo_run(auto_ping)

			if(USE_SWEET_EVIL_AI == TRUE)
			{
				_ret = isqrt(pow(C_RX, 2) + pow(C_RY, 2));

				if(get_ival(ADS_BUTTON) && !get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_ADS_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_ADS_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_ADS_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_ADS_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_ADS_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_ADS_EVIL_STEADY_AIM;
					EVIL_SENS = ADS_SENS;
				}
				else if(get_ival(ADS_BUTTON) && !get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_ADS_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_ADS_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_ADS_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_ADS_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_ADS_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_ADS_EVIL_STEADY_AIM;
					EVIL_SENS = ADS_SENS;
				}
				else if(get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_ADS_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_ADS_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_ADS_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_ADS_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_ADS_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_ADS_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = ADS_FIRE_SENS;
				}
				else if(get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_ADS_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_ADS_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_ADS_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_ADS_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_ADS_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_ADS_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = ADS_FIRE_SENS;
				}
				else if(!get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_HIP_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_HIP_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_HIP_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_HIP_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_HIP_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_HIP_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = HIP_FIRE_SENS;
				}
				else if(!get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_HIP_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_HIP_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_HIP_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_HIP_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_HIP_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_HIP_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = HIP_FIRE_SENS;
				}

				sensitivity(PS4_RX, NOT_USE, EVIL_SENS);
				sensitivity(PS4_RY, NOT_USE, EVIL_SENS);

				if(EVIL_SPIRAL)
				{
					min_aim_assit = EVIL_ASSIST/EVIL_SPIRAL;

					if(min_aim_assit == 0 && Aim_Assit_2 == 0)
					{
						Aim_Assit_1 = min_aim_assit;
						Aim_Assit_2 = EVIL_ASSIST;
					}
				}
			}

			if(update_timer >= REFRESH_RATE)
			{
				block(PS4_RX, REFRESH_RATE);
				block(PS4_RY, REFRESH_RATE);

				_ret = get_mvt_direction(C_RX, L_RX);

				if(_ret != 0)
				mvt_direction = _ret;

				//set_val(TRACE_1, mvt_direction);

				if(USE_EVIL_BOT == TRUE)
				{
					if(Inc_Dec_State_1 == FALSE)
					{
						Aim_Assit_1 -= 1;

						if(Aim_Assit_1 < min_aim_assit)
						Inc_Dec_State_1 = TRUE;
					}
					else
					{
						Aim_Assit_1 += 1; // \FIXME

						if(Aim_Assit_1 > EVIL_ASSIST)
						Inc_Dec_State_1 = FALSE;
					}

					if(Inc_Dec_State_2 == FALSE)
					{
						Aim_Assit_2 -= 1;

						if(Aim_Assit_2 < min_aim_assit)
						Inc_Dec_State_2 = TRUE;
					}
					else
					{
						Aim_Assit_2 += 1;

						if(Aim_Assit_2 > EVIL_ASSIST)
						Inc_Dec_State_2 = FALSE;
					}
				}

				update_timer = 0;

				L_RX = C_RX;
				L_RY = C_RY;
			}

			if((EVIL_AR) && (((get_val(ADS_BUTTON) > 50) && (get_val(FIRE_BUTTON)> 50)) || combo_running(cRapidFire) || combo_running(cJitters)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
			{
				if(EVIL_AR == USE_RUMBLE_EVIL_AR)
				{
					T_RY = get_rumble_evil_ar();
				}
				else
				{
					T_RY = get_dynamic_evil_ar(C_RX, C_RY, AR_STRENGTH);
				}

				if(inverted == -1)
				{
					C_RY += inv(T_RY);
				}
				else
				{
					C_RY += T_RY;
				}
			}

			if(USE_EVIL_BOT == TRUE)
			{

				if(EVIL_BOT_TYPE == CIRCULAR)
				{

					if(EVIL_SPIRAL)
					{
						_EVIL_ASSIST_1 = Aim_Assit_1;
						_EVIL_ASSIST_2 = Aim_Assit_2;
					}
					else
					{
						_EVIL_ASSIST_1 = EVIL_ASSIST;
						_EVIL_ASSIST_2 = EVIL_ASSIST;
					}

					if(EVIL_SCAN == TRUE)
					{
						_scan_1 = get_polar_coordinate(_EVIL_ASSIST_1/2, sin(cw_angle));
						_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, cos(cw_angle));
					}
					else
					{
						_scan_1 = 0;
						_scan_2 = 0;
					}

					if(mvt_direction == 1)
					{

						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_2;
					}
					else
					{
						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_2;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
					}

				}
				else if(EVIL_BOT_TYPE == OVAL)
				{
					if(EVIL_SPIRAL)
					{
						_EVIL_ASSIST_1 = Aim_Assit_1;
						_EVIL_ASSIST_2 = Aim_Assit_2;
						_EVIL_ASSIST_3 = Aim_Assit_2;
					}
					else
					{
						_EVIL_ASSIST_1 = EVIL_ASSIST;
						_EVIL_ASSIST_2 = EVIL_ASSIST;
						_EVIL_ASSIST_3 = EVIL_ASSIST/2;
					}

					if(mvt_direction == 1)
					{

						if(EVIL_SCAN == TRUE)
						{
							_scan_1 = get_polar_coordinate(_EVIL_ASSIST_2/2, sin(cw_angle));
							_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, cos(cw_angle));
						}
						else
						{
							_scan_1 = 0;
							_scan_2 = 0;
						}

						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_3, cos(angle)) + _scan_2;
					}
					else
					{
						if(EVIL_SCAN == TRUE)
						{
							_scan_1 = get_polar_coordinate(_EVIL_ASSIST_2/2, cos(cw_angle));
							_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, sin(cw_angle));
						}
						else
						{
							_scan_1 = 0;
							_scan_2 = 0;
						}

						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_3, sin(angle)) + _scan_2;
					}
				}
			}

			angle += EVIL_SLOPE;
			angle = angle % 360;

			cw_angle = (cw_angle + EVIL_SCAN) % 360;

			if(EVIL_STEADY_AIM)
			{
				C_RX = get_steady_aim(C_RX, EVIL_STEADY_AIM);
				C_RY = get_steady_aim(C_RY, EVIL_STEADY_AIM);
			}

			set_val(PS4_RX, clamp(C_RX, -100, 100));
			set_val(PS4_RY, clamp(C_RY, -100, 100));

			update_timer += get_rtime();
		}
		else
		{
			update_timer = 0;
			update_timer = REFRESH_RATE;

			angle = 90 * inverted;
			cw_angle = 90 * inverted;

			Aim_Assit_1 = min_aim_assit; // \XXX: init val 
			Aim_Assit_2 = EVIL_ASSIST;

			sensitivity(PS4_RX, NOT_USE, CAMERA_SENS);
			sensitivity(PS4_RY, NOT_USE, CAMERA_SENS);

			set_val(PS4_RX, C_RX);
			set_val(PS4_RY, C_RY);
		}

		if(KillSwitch == 0)
		{
			if(USE_SLIDE_CANCEL)
			{
				if(
						(get_ival(PS4_LY) < -85) || (get_ival(PS4_LY) > 85) ||
						(get_ival(PS4_LX) < -85) || (get_ival(PS4_LX) > 85)
				)
				{
					slide_enable = 0;

					if(event_release(CROUCH_BUTTON))
					{
						if (USE_SLIDE_CANCEL == 1)
						{
							slide_enable = 1;
						}
						else if (USE_SLIDE_CANCEL == 2)
						{
							if(
									((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))
							)
							{
								slide_enable = 1;
							}
						}
						else if (USE_SLIDE_CANCEL == 3)
						{
							slide_enable = 2;
						}
						else if (USE_SLIDE_CANCEL == 4)
						{
							if(
									((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))
							)
							{
								slide_enable = 2;
							}
						}
					}

					if(slide_enable)
					{
						combo_stop(sprint);
						state = WALK;

						if(slide_enable == 1)
						combo_run(CANCEL_SLIDE_MW);
						else if(slide_enable == 2)
						combo_run(CANCEL_SLIDE_CW);
					}
				}
			}

			if(USE_EASY_PLATE)
			{
				if(get_val(SWAP_BUTTON)&& get_ptime(SWAP_BUTTON)>350)
				combo_run(easy_plate);

				if(combo_running(easy_plate) && (get_ival(ADS_BUTTON)>10 || get_ival(FIRE_BUTTON)>10 || get_val(PS4_SQUARE)))
				{
					combo_stop(easy_plate);
					set_val(MELEE_BUTTON, 100);
				}
			}

			if(USE_TURBO_MELEE)
			{
				if(get_val(MELEE_BUTTON))
				{
					combo_run(TURBO_MELEE);
				}
				else
				{
					if(combo_running(TURBO_MELEE))
					combo_stop(TURBO_MELEE);
				}
			}

			if(USE_BUNNY_HOP)
			{
				if (get_ival(JUMP_BUTTON) && get_ptime(JUMP_BUTTON) > 200)
				{
					combo_run(BUNNYHOP);
				}
				else
				{
					if(combo_running(BUNNYHOP))
					combo_stop(BUNNYHOP);
				}
			}

			if(USE_QUICK_SCOPE)
			{
				if(event_release(ADS_BUTTON) && get_ptime(ADS_BUTTON) < quickscope_press_time)
				combo_run(Quick_Scope);
			}

			if(USE_AUTO_RUN && (!combo_running(CANCEL_SLIDE_MW) || combo_running(CANCEL_SLIDE_CW)) )
			{
				if(state == WALK)
				{
					if(get_ival(PS4_LY)< -80 && get_ival(PS4_R2) < 10 && get_ival(PS4_L2) < 10)
					{
						combo_run(sprint);
						state = SPRINT;
					}
				}
				else if( state == SPRINT)
				{
					if(get_ival(PS4_R2) >= 10 || get_ival(PS4_L2) >= 10 || (get_ival(PS4_LY) >= -80 ))
					{
						state = WALK;
						combo_stop(sprint);//Gilvz
					}
				}
			}
			
			if(USE_HOLD_BREATH)
			{
				if(get_val(ADS_BUTTON))
					set_val(SPRINT_BUTTON,100);
		
				if(get_val(PS4_LY) <-90 && get_val(ADS_BUTTON) && get_ptime(ADS_BUTTON) > 200 && combo_running(HOLD_BREATH))
					combo_stop(HOLD_BREATH);
		
				if(event_press(ADS_BUTTON))
					combo_run(HOLD_BREATH);
		
				if(get_val(ADS_BUTTON) && get_lval(SPRINT_BUTTON))
					set_val(SPRINT_BUTTON,0);
			}

			if(strafe_mode && ( (get_val(FIRE_BUTTON)> 50) || combo_running(cRapidFire) || combo_running(cJitters) ))
				combo_run(strafe);
				
			if(toggle_rapid_fire)
			{
				combo_run(rapid_fire_Led);
			}
		}
	}
}

//#################################################################################################
    
    int Col_ind	;
    function colourled(Colour) 
    {                         
        Col_ind=(Colour*4)- 3;                              
        set_led(LED_1,duint8(Col_ind  ));                    
        set_led(LED_2,duint8(Col_ind+ 1));                   
        set_led(LED_3,duint8(Col_ind+ 2));                   
        set_led(LED_4,duint8(Col_ind+ 3));                   
    }  

//#################################################################################################

function get_rumble_evil_ar()
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH);
	}

	return 0;
}

//#################################################################################################

function get_dynamic_evil_ar(_C_RX, _C_RY, _AR_STRENGTH)
{	
	_ret = (get_ptime(FIRE_BUTTON)/ (160));
	_var = 	(AR_STRENGTH/2) + AR_STRENGTH;				
	
	if(_ret > _var)
		_ret = _var;
						
	_ret = _ret +  _AR_STRENGTH - ((abs(_C_RX * _C_RX) + abs(_C_RY * _C_RY))/1000) ;

	return _ret;
}
						
//#################################################################################################

function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}

//#################################################################################################

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val(TRACE_3,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

//################################################################################################# 

function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}

//################################################################################################# 

function sin(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    
    return _ret;
}

//################################################################################################# 

function cos(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    
    return _ret;
}

//################################################################################################# 

function get_polar_coordinate(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}


//################################################################################################# 

combo auto_ping { 
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(24)
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(2000)
}

//#################################################################################################

combo CANCEL_SLIDE_CW {
	set_val(CROUCH_BUTTON, 100);
    wait(CW_Slide_Delay);
	set_val(CROUCH_BUTTON, 0);
	wait(20);
	set_val(SPRINT_BUTTON, 0);
	set_val(ADS_BUTTON, 100);
	wait(10);
	set_val(ADS_BUTTON, 0);
	set_val(CROUCH_BUTTON, 100);
	set_val(SPRINT_BUTTON, 100);
	wait(20);
	set_val(CROUCH_BUTTON, 0);
	set_val(SPRINT_BUTTON, 0);
	wait(20);
}

//#################################################################################################

combo CANCEL_SLIDE_MW {
	set_val(CROUCH_BUTTON, 100);
	wait(MW_Slide_Delay); 
	set_val(CROUCH_BUTTON, 0);
	wait(60);
	set_val(CROUCH_BUTTON, 100);
	wait(50);
	set_val(CROUCH_BUTTON, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);
	set_val(CROUCH_BUTTON, 0);
	set_val(JUMP_BUTTON, 100);
	wait(10);
	set_val(JUMP_BUTTON, 0);
}
//################################################################################################# 

combo easy_plate
{
	set_val(SWAP_BUTTON,100);
	wait(6000); //time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating
}

//#################################################################################################

combo TURBO_MELEE
{
	set_val(MELEE_BUTTON, 100);
	wait(40);
	set_val(MELEE_BUTTON, 0);
	wait(32);
}

//#################################################################################################

combo BUNNYHOP
{
	set_val(JUMP_BUTTON, 100);
	wait(32);
	set_val(JUMP_BUTTON, 0);
	wait(32);
	set_val(JUMP_BUTTON, 100);
	wait(32);
	set_val(JUMP_BUTTON, 0);
	wait(32);
}

//#################################################################################################

combo HOLD_BREATH
{
	set_val(SPRINT_BUTTON,0);
	wait(64);
	set_val(SPRINT_BUTTON,100);
	wait(112);
	set_val(SPRINT_BUTTON,0);
	wait(112);
}

//#################################################################################################

combo Quick_Scope
{
	set_val(ADS_BUTTON,100);
	wait(quickscopedelay);
	set_val(ADS_BUTTON,100);
	set_val(FIRE_BUTTON,100);
	wait(40);
	set_val(ADS_BUTTON,100);
	wait(40);
}

//################################################################################################# 

combo sprint
{
	set_val(PS4_L3, 100);
	wait(128);
	set_val(PS4_L3, 0);
	wait(128);
	set_val(PS4_L3, 100);
	wait(128);
	set_val(PS4_L3, 0);
	wait(128);
}

//################################################################################################# 

 int cled;
 combo rapid_fire_Led
 {
	if(toggle_rapid_fire == 2)
		cled = 3;
	else 
		cled = 2;

	set_led(cled,2);
	
	if(toggle_rapid_fire == 3)
		set_led(0,2);
	
 	wait(496);
 	
 	if(toggle_rapid_fire == 3)
 		set_led(0,0);
 		
	set_led(1,0);
	set_led(2,0);
	set_led(3,0);
 	
 	wait(496);
 }
 
//#################################################################################################

combo cJitters 
{
   	set_val(ADS_BUTTON,100);
   	set_val(FIRE_BUTTON,0);
    wait(8);
    set_val(ADS_BUTTON,100);
    set_val(FIRE_BUTTON,100);
    wait(8);
    set_val(ADS_BUTTON,0);
    set_val(FIRE_BUTTON,100);
    wait(8);
    wait(8);
 }
 
 //#################################################################################################
 
int wtime;
combo cRapidFire 
{ 
	  set_val(FIRE_BUTTON,100);
	     
	  if(toggle_rapid_fire == 2)
	  	set_val(ADS_BUTTON,100);
	   
	  if(RMode == RANDOM)
	 	 wtime = random(min_random,max_random);
	  else 
	  	wtime = RPressTime;
	  
	  wait(wtime);
	  
	  set_val(FIRE_BUTTON,0);
	  
	   if(toggle_rapid_fire == 2)
	  	set_val(ADS_BUTTON,0);
	  
	  if(RMode == RANDOM)
	 	 wtime = (TIME_BASE * random(min_random,max_random));
	  else 
	  	wtime = RPauseTime;
	  
	  wait(wtime);
	
	  set_val(FIRE_BUTTON,0);
	  
	   if(toggle_rapid_fire == 2)
	  	set_val(ADS_BUTTON,0);
	  	
	  wtime = 0;
  
	 if (RMode == STEP_MODE) 
	 { // add slow pause time on low pressure on two speed mode
		if (get_ival(FIRE_BUTTON) < RPressure) 
		{	
			wtime = RStep ;
		}
	 }
	 else if (RMode == DYNAMIC) 
	 { 	
		wtime = (get_ival(FIRE_BUTTON) * RDyn)/100 ;
	 }
	 
	 wait(wtime);
}

//#################################################################################################

combo cvibrate  
    {
         set_val(MOD_TOGGLE_BUTTON, 0);
         set_val(RAPID_FIRE_BUTTON, 0);
         set_val(AKIMBO_RAPID_FIRE_BUTTON, 0);
         set_val(JITTERS_BUTTON, 0);
         set_rumble(RUMBLE_A, 100);
         wait(300);
         reset_rumble();
     }

//#################################################################################################

 combo start 
    {
        colourled(Blue);
        wait(200);    
        colourled(Green);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(SkyBlue);
        wait(200);
        colourled(Blue);
        wait(200);    
        colourled(SkyBlue);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(Blue);
    }
    
//#################################################################################################

int _strafe;
int _strafe_index;
int _strafe_rand_1;
int _strafe_rand_2;

   combo strafe 
   {
	   if(_strafe_index == 0)
	   {
	   		_strafe_rand_1 = 80;
	   		_strafe_rand_2 = 160;
	   }
	   else
	   {
	   		_strafe_rand_1 = 160;
	   		_strafe_rand_2 = 80;
	   }
	   
	   
	   set_val(PS4_LX, 100); 
	   _strafe = random((STRAFE_DELAY - _strafe_rand_1), (STRAFE_DELAY + _strafe_rand_1));
	   wait(_strafe); 
	   wait(56); 
	   set_val(PS4_LX, -100);
	   _strafe = random((STRAFE_DELAY - _strafe_rand_2), (STRAFE_DELAY + _strafe_rand_2));
	   wait(_strafe); 
	   wait(56);
	   
	   _strafe_index++;
	   if(_strafe_index == 2)
	   	_strafe_index = 0;   
   } 
   
//#################################################################################################
   
   combo EXIT 
    {
    wait(150);
    set_val(PS4_OPTIONS, 100);
    wait(150);
    set_val(PS4_OPTIONS, 0);
    }

//#################################################################################################

/*
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
						© 2021, Sami ABADA - Sweet EviL, All Rights Reserved
*/

//#################################################################################################