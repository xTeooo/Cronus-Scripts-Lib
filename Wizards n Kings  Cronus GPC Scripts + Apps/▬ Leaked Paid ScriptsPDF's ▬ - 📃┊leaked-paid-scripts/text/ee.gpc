	                        // Ingame Binds
	                        define Fire     = PS4_R2;                               
                            define Ads      = PS4_L2;                                  
                            define Pickaxe  = PS4_TRIANGLE;                            
                            define Crouch   = PS4_R3;
                            define N_Weapon = PS4_R1;                                 
                            define P_Weapon = PS4_L1;                                
                            define Reload   = PS4_SQUARE;                              
                            define Jump     = PS4_CROSS;
                            define Build    = PS4_CIRCLE;	
                            define Wall     = PS4_R2;		
                            define Floor    = PS4_R1;		
                            define Ramp     = PS4_L2;		
                            define Roof     = PS4_L1;   
                            define Edit     = PS4_L2;   
                            define Select   = PS4_R1;     
                            define Confirm  = PS4_R2; 	
                            define Reset    = PS4_R3;
                            define RY       = PS4_RY;
                            define RX       = PS4_RX;
                            define LY       = PS4_LY;
                            define LX       = PS4_LX;
                            define Up    = PS4_UP;
                            define Down  = PS4_DOWN;
                            define Left  = PS4_LEFT;
                            define Right = PS4_RIGHT;

define RecoilHoldOnFly = PS4_L1;
define RecoilUpPress   = PS4_UP;
define RecoilDownPress = PS4_DOWN;

//Menu (BETA)
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;
define FastReset    = PS4_RIGHT; 
define EditAssist   = PS4_L3; 

//MODS
int ModSwitch;
int AimAssistPolar    =  On;
int AimV2Exploit      =  On;
int LegacyARecoil     =  On;
int DropShot          =  Off;
int RapidFire         =  Off;
int InstantPickaxe    =  Off;
int InstaEditReset    =  Off;
int QuickEditAssist   =  Off;
int InstaFastReset    =  On;
int BuildTracker      =  On;
int HeadAssist        =  On;  
int BlockRumble       =  On;
int PlayStationOnXbox =  On;
int Reducer           =  On; 

int ModDigit;    


int StrengthPolar  = 14;
int IncrementPolar = 4;


int ExploitPower   = 90;
int ExploitWait    = 25;


int ArLegacyRY     = 25;


int DropShotWait   = 50;


int RapidFireHold  = 30;
int RapidFireWait  = 30;

int PickaxeHold    = 20;


int EditHoldTime   = 130;

int EditDelay      = 20;

int BuildSyncTime  = 2000;

int HeadStep       = 3;   
int HeadMax        = 35;        

int ButtonTime     = 20;

int deadZone       = 9; 

define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 12;
define IndexMinValues   = 1;
define IndexMaxValues   = 14;
int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;
int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;
int Edit1,Edit2,EditT;
int BuildTrack,BuildCount;
int Axe,AR_Value,Head;
int Power,power,Ypower,Xpower,CountPower,AxisXY,Increment;
int AssistProfile = 1;
define vm_internal  = -6;
define On           = TRUE;
define Off          = FALSE;

define EditHold       = Off;
define LegacyRumble   = Off;
define LegacyInvert   = Off;
define LegacyARHip    = Off;
define RapidFireHip   = Off;
define HeadHipAssist  = On;

//MAIN
int inc = 1, dec, color[3];

init{ color = 255; }

main { combo_run(rgb); }

combo rgb {
  wait(1);
  set_rgb(color, color[1], color[2]);
  color[dec] -= 1; color[inc] += 1;
  if(!color[dec]) { inc = (inc + 1) % 3; dec = (dec + 1) % 3; }
}

init {
    combo_run(Boot);
}
main {

vm_tctrl(vm_internal);
    

    if (PlayStationOnXbox && get_console() == PIO_XB360 && get_controller() == PIO_PS4) { 
	
		swap(PS4_TOUCH,PS4_SHARE);
    }  

    if (BlockRumble) {
        block_rumble();
    }
	
	if (QuickEditAssist) {
	 	if (!get_ival(Ads) && get_ival(EditAssist)) {
			EditAssist();
			Edit1 = On;
		}

			if (event_release(EditAssist)) {
				combo_run(Confirm);
				EditT = Off;
				Edit1 = Off;
			}
	}
    
    if (InstaFastReset && !get_ival(Ads) && event_press(FastReset)) { 
        Shunt = FastReset;
        combo_run(FastReset);
    }
   
    if (InstaEditReset) {
        if (EditHold && get_ival(Edit) && get_ptime(Edit) > EditHoldTime || !EditHold && event_press(Edit)) {
                Edit1 = On;
                Edit2 = On;
        }

        if (Edit2) {
            if (event_release(Select)) {  
                combo_run (Confirm);
    			       Edit1 = Off;
                Edit2 = Off;
               }
           }
       }

        if (Edit1 || Edit2) {

            if (event_press(Reset)) {  
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off; 
            }

                if (event_press(Pickaxe) || event_press(Build) || event_press(Ads)) {
                    Edit1 = Off;
                    Edit2 = Off;
        }
    }
   
    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
                    BuildCount = Off;
        }
    }

    if (!BuildTrack) { 
           
        if (InstantPickaxe) {
            if (event_press(Pickaxe)) 
                Axe = On;
        
            if (Axe) {
                if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) 
                    Axe = Off;
                    
                    if (event_release(Fire))
                        combo_run(Pickaxe);
         }
     }
    
    if (AimAssistPolar) {
	
	    if (event_press(Ads)) { 
	    	
	    	Power = On;
	    }
	    
	    else if (!get_ival(Ads) && event_press(Fire)) {
	    	
	    	Power = On;
	    }
	    
	    if (get_ival(Ads) || get_ival(Fire)) {
	    	
	    	AxisXY = isqrt(abs(get_ival(RX)) * abs(get_ival(RX)) + abs(get_ival(RY)) * abs(get_ival(RY)));
	    	
	    	if (AssistProfile == 1)
	    		
	    		AimAssist(StrengthPolar,IncrementPolar);
	    		
	    } else {
	    	
	    	CountPower = 0;
	    	power = Off;
        }
	}

        if (AimV2Exploit){        
        
            if (get_ival(Ads)) {
            
                 combo_run(AimExploitV2);
         }
    }
      
       if (DropShot && get_ival(Fire)) {
            combo_run(DropShot);
        }    
            else {
                combo_stop(DropShot);
     }
    
       if ((RapidFire && RapidFireHip && get_ival(Ads) && get_ival(Fire)) || (RapidFire && !RapidFireHip && get_ival(Fire))) {
            combo_run(RapidFire);
        }    
            else {
                combo_stop(RapidFire);
     }

    if (HeadAssist) {
	        
	        if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire)) {
	        
	        	if (abs(get_ival(RY)) < HeadMax) { 
	        		
	        		Head += HeadStep;
	        		combo_run(HeadAssist);
	        	}	
	        }
	        
	        if (!get_ival(Fire)) Head = 0;
	        	
	        if (Head >= HeadMax) combo_stop(HeadAssist);
	 }

        if (LegacyARecoil){        
                
               AR_Value = ArLegacyRY;  

            if ((((!LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire))) || 
                ((!LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire))) {

                 LegacyAR();
              }
                    
                else if ((((LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire)) && get_rumble(RUMBLE_A)) || 
                  
                 ((LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire) && get_rumble(RUMBLE_A))) {

                     LegacyAR();
                  }
         }

           if ((get_ival(RecoilHoldOnFly)) && ((LegacyARecoil))) { 

                if (event_press(RecoilDownPress)) {
                            if (LegacyARecoil)
                                AR_Value += 1;

                    combo_run(Rumble);
                }

                if (event_press(RecoilUpPress)) {
                            if (LegacyARecoil)
                                AR_Value -= 1;

                    combo_run(Rumble);
                            }

                if ((LegacyARecoil) && (AR_Value < 1 || AR_Value > 99)) {
                     AR_Value = ArLegacyRY;
                }

                set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
         }
     }

	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
     }


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],1,IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Slot = On;
        combo_run(Boot);
    }

    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
            
                set_val (Shunt,Off);
            }
      }
}

combo AimExploitV2 {
   
	set_Val(LX,inv(ExploitPower));
    wait(ExploitWait);
    set_Val(LX,ExploitPower);
    wait(ExploitWait);
}

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(DropShotWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold);
    Axe = Off;
}

combo HeadAssist{

	set_val(RY,inv(Head) + get_val(RY));
}

combo Confirm {

    set_val(Confirm,100);
    wait(ButtonTime);
    set_val(Confirm,0);
    wait(ButtonTime);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(ButtonTime)
    set_val(Reset,100);        
    wait(ButtonTime);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo Rumble {
    
    if (event_press(RecoilUpPress))
        set_rumble(RUMBLE_A,35);
        
        else if (event_press(RecoilDownPress))
            set_rumble(RUMBLE_B,70);
    
    wait(250);
    reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
}

function AimAssist (Strength,Step) {

	if (Power) {
		
		Ypower = Strength;
		Xpower = Strength * -1;
		Increment = Step;
		Power = Off;
	}
	
	if (!power) {
	
		Xpower += Increment;
		Ypower -= Increment;
	
	} else {
		
		Xpower -= Increment;
		Ypower += Increment;
	}
	
	CountPower ++;
	
	if (CountPower >= (Strength / Increment)) {
		
		power = !power;
		CountPower = 0;
	}	
	
	if (AxisXY > deadZone) {
	
		if (Reducer) {
		
			set_Val(RY,(Ypower - Strength / 2));
			set_Val(RX,(Xpower - Strength / 2 * -1));
		
		} else {
		
			set_val(RY,(Ypower - Strength / 2) + get_ival(RY));
			set_val(RX,(Xpower - Strength / 2 * -1) + get_ival(RX));	
		}
		
	} else {
		
		if (Reducer) {
				
			set_Val(RY,(Ypower - Strength / 2));
			set_Val(RX,(Xpower - Strength / 2 * -1));
			
		} else {
			
			set_val(RY,(Ypower - Strength / 2));
			set_val(RX,(Xpower - Strength / 2 * -1));
		}
	}
}

function EditAssist () {

    EditT += get_rtime();
        if (get_ival(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}

function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}

function LegacyAR () {
    
    if(LegacyInvert) {
        set_Val(RY,AR_Value * -1);
    }
        else {    
            set_Val(RY,AR_Value);
        }
}

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
    return; 
}

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;

            if (ModVal >= ModValMax){ 
                ModMonitor(ModValLbl);
                    return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;

				if (ModVal <= ModValMin){
					ModMonitor(ModValLbl);
						return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
 
function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
        AimV2Exploit    = Off;
    }
    if (Mon == ModToggle[4]) { 
        AimAssistPolar  = Off;
    }
    if (Mon == ModToggle[5]) {
    }
    if (Mon == ModToggle[7]) {
    }
} 
   
function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","LEXICON","VERSION V.1","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {"" , "POLAR AIM ASSIST"  , " AIM EXPLOIT V2"  , "   ANTI RECOIL" , "RAPID CROUCH SHOT" , "   RAPID FIRE"  , " INSTANT PICKAXE"  , "INSTANT EDIT RESET"  , "   EDIT ASSIST"  , "    FAST RESET"  , "   BUILD TRACK"  , "HEAD SHOT ASSIST" , "   BLOCK RUMBLE" };
const string ModValue [] = {""   , "  Strength Polar"  , " Increment Polar"  , "Aim Exploit Power"  , "Aim Exploit Wait"  , "LegacyAR RY Power"  , "  Drop Shot Wait"  , " Rapid Fire Hold"  , " Rapid Fire Wait"  , "InstaPickaxe Hold"  , " Edit Hold Time"  , "Edit Assist Delay" , "BuildTrackSynTime" ,"    Head Step", "    Head Max" };
const int16 ModDigitMin [] = {  0  , 1  , 5  , 1  , 1  , 1  , 1  , 1  , 10  , 1  , 1  , 5  , 30  , 1 , 1 };
const int16 ModDigitMax [] = {  0  , 30  , 30  , 150  , 100  , 100  , 150  , 100  , 100  , 100  , 200  , 100 , 5000  , 30  , 70 };


define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

const uint8 Scroll[] = {

    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };
