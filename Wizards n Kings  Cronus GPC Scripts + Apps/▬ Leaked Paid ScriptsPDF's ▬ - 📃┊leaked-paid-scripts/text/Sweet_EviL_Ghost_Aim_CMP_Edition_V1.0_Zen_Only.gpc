//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                                                                               #
//#################################################################################################
//################### © 2021, Sami ABADA - Sweet EviL, All Rights Reserved ########################
//################################################################################################# 
//#################################################################################################
*/
								 	
const int Lookup_Table[] 		= {
									0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156, 
									173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
									342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
									500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
									642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
									766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
									866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
									939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
									984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
									1000
									};	 

//################################################################################################# 	

define TIME_BASE					= 4;	// don't change	

define MAX_DRIFT					= 15;	// don't change	if calculated drift is greater than 12, the controller is dead

//################################################################################################# 								 	
								 	
define ADS_BUTTON					= PS4_L2;
define FIRE_BUTTON					= PS4_R2;
define CROUCH_BUTTON 				= PS4_CIRCLE;  
define JUMP_BUTTON  				= PS4_CROSS;
define SWAP_BUTTON					= PS4_TRIANGLE;
define MELEE_BUTTON					= PS4_R3;
define SPRINT_BUTTON				= PS4_L3;
define PING_BUTTON					= PS4_UP; 

int INVERTED						= 0; 	// 1 if you play inveted 

int USE_SLIDE_CANCEL				= 1; // 0 disable, 1 MW, 3 CW
define CW_Slide_Delay    			=  80;	
define MW_Slide_Delay 				=  80;

int	USE_RUMBLE 						= FALSE;
int USE_HAIR_TRIGGER				= TRUE;
int USE_HOLD_BREATH					= TRUE;
int USE_AUTO_PING					= TRUE;

int USE_QUICK_SCOPE					= TRUE;
int quickscope_press_time  			= 320;
define quickscopedelay				= 360;

//################################################################################################# 

// Rapid fire section

int RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON 		= FALSE;

define MOD_TOGGLE_BUTTON 			= PS4_LEFT;
define RAPID_FIRE_BUTTON 			= PS4_CROSS;
define AKIMBO_RAPID_FIRE_BUTTON 	= PS4_SQUARE;

/*
•	To toggle MODS, hold MOD_TOGGLE_BUTTON + toggle button defined in the compiler
		o	MOD_TOGGLE_BUTTON + RAPID_FIRE_BUTTON: it will enable classical rapid fire 
		o	MOD_TOGGLE_BUTTON + AKIMBO_RAPID_FIRE_BUTTON: enable Akimbo rapid fire 
		o	If you toggle again it will go to normal mode also when you swap weapon
		o	Important for akimbo or classical rapid fire: you can adjust the rate of fire using the menu under mods menu section
		
•	To toggle rapid fire hold on the LEFT DPAD and press
	    o	X/A - For Standard Rapid Fire
	    o	Square/X - Akimbo Rapid Fire
•	Using the compiler:
	    o	if RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = FALSE --> rapid fire is active for just 1 weapon!! when you press swap button rapid fire will be disabled
	    o	if RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = TRUE --> rapid fire is active for primary and secondary weapon!
	
	•	 New feature:
	when RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON = FALSE :
	  o	when you switch your weapon rapid fire is off
	   o	you switch back again your weapon : rapid fire is on
	  o	using pltate doesn't affect this if by accident rapid fire is switched on or off for indiscreet weapon double tap O/B and the issue is fixed	
	•	ALL the button mapping can be changed using the compiler	    
*/

int RPressTime						= 16; // 4 8 12 16 18 24 28 32 ...
int RPauseTime						= 16; // 4 8 12 16 18 24 28 32 ...


//################################################################################################# 

define DISABLED						= 0;
define USE_RUMBLE_EVIL_AR			= 1;
define USE_DYNAMIC_EVIL_AR			= 2;

int EVIL_AR							= USE_DYNAMIC_EVIL_AR;  // 
int AR_STRENGTH						= 20;  		// can be negative if you want more ar and use : USE_RUMBLE_EVIL_AR

//################################################################################################# 

int USE_EVIL_BOT					= TRUE;

int	AIM_SLOPE						= 6;
int	AIM_ASSIST 						= 20;

//################################################################################################# 

int USE_EVIL_STEADY_AIM				= FALSE;
define RESOLUTION					= 6;

//################################################################################################# 

define MAGNITUDE					= 80;			   // don't change tweak this when you have ar drift issue
int REFRESH_RATE					= TIME_BASE * 10;  // don't change

//################################################################################################# 			

int update_timer;
int C_RX;
int C_RY;
int C_LX;
int C_LY;
int L_RX;
int L_RY;
//int T_RX;
int T_RY;
int Inc_Dec_State_1;
int Inc_Dec_State_2;
int Aim_Assit_1;
int Aim_Assit_2;
int angle;
int _ret;
//int _temp;
int mvt_direction;
//int magnitude_ok;
int min_aim_assit;
int cw_angle;
int inverted;
int rx_drift;
int ry_drift;
int lx_drift;
int ly_drift;
int drift_calib;

int _var;
int slide_enable;
int toggle_rapid_fire;
int rapid_fire_on;
int Click ;
define  timelimit 					= 304;

init
{
	mvt_direction = 1;
	min_aim_assit = AIM_ASSIST/2;
	Aim_Assit_1 = min_aim_assit;	
	Aim_Assit_2 = AIM_ASSIST;
	Inc_Dec_State_1 = TRUE;
	Inc_Dec_State_2 = FALSE;
	
    update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	cw_angle = 90 * inverted;
			
	drift_calib = 100;
}

main {

	vm_tctrl(-6);

	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_val(PS4_RX))+ 2);
		ry_drift = max(ry_drift, abs(get_val(PS4_RY))+ 2);

		lx_drift = max(lx_drift, abs(get_val(PS4_LX))+ 2);
		ly_drift = max(ly_drift, abs(get_val(PS4_LY))+ 2);

		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);

		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);

		drift_calib--;
	}
	else
	{

		if(rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
		{
			if(Click > 0) Click = Click - get_rtime();
			if(event_press(PS4_CIRCLE) && Click <= 0)
			{
				Click = timelimit;
			}
			else if(event_press(PS4_CIRCLE) && Click > 0)
			{
				combo_run(cvibrate);

				if(!toggle_rapid_fire)
				{
					toggle_rapid_fire = rapid_fire_on;
				}
				else
				{
					toggle_rapid_fire = 0;
				}
			}
		}

		if(event_release(SWAP_BUTTON) && get_ptime(SWAP_BUTTON) <= 496 && rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
		{
			combo_run(cvibrate);

			if(!toggle_rapid_fire)
			{
				toggle_rapid_fire = rapid_fire_on;
			}
			else
			{
				toggle_rapid_fire = 0;
			}
		}

		if(get_val(MOD_TOGGLE_BUTTON) )
		{
			if(event_press(RAPID_FIRE_BUTTON) )
			{
				combo_run(cvibrate);

				if(!toggle_rapid_fire || toggle_rapid_fire != 1)
				{
					toggle_rapid_fire = 1;
					rapid_fire_on = 1;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
				}
			}
			else if (event_press(AKIMBO_RAPID_FIRE_BUTTON) )
			{
				combo_run(cvibrate);

				if(!toggle_rapid_fire || toggle_rapid_fire != 2)
				{
					toggle_rapid_fire = 2;
					rapid_fire_on = 2;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
				}
			}
		}

		if ((toggle_rapid_fire == 1 && get_val(FIRE_BUTTON) > 10) || (toggle_rapid_fire == 2 && (get_val(FIRE_BUTTON) > 10 || get_val(ADS_BUTTON) > 10) ))
		{
			combo_run(cRapidFire);
		}

		if (combo_running(cRapidFire))
		{
			if(
					(toggle_rapid_fire == 1 && event_release(FIRE_BUTTON)) ||
					(toggle_rapid_fire == 2 && get_val(FIRE_BUTTON) < 10 && get_val(ADS_BUTTON) < 10)
			)
			combo_stop(cRapidFire);

		}

		if(USE_RUMBLE == FALSE)
		{
			block_rumble();
		}

		if(USE_HAIR_TRIGGER)
		{
			if(get_val(PS4_R2) > 10)
			set_val(PS4_R2, 100);

			if(get_val(PS4_L2)> 10)
			set_val(PS4_L2, 100);
		}

		C_RX = get_val(PS4_RX);
		C_RY = get_val(PS4_RY);

		C_LX = get_val(PS4_LX);
		C_LY = get_val(PS4_LY);

		if(isqrt(pow(C_RX, 2) + pow(C_RY, 2)) <= rx_drift)
		{
			C_RX = 0;
			C_RY = 0;
		}

		if(isqrt(pow(C_LX, 2) + pow(C_LY, 2)) <= lx_drift)
		{
			C_LX = 0;
			C_LY = 0;
		}

		if(get_val(ADS_BUTTON) > 50 || get_val(FIRE_BUTTON) > 50 || combo_running(cRapidFire))
		{
			if(USE_AUTO_PING && (get_val(FIRE_BUTTON)> 50))
			combo_run(auto_ping)

			if(update_timer >= REFRESH_RATE)
			{
				block(PS4_RX, REFRESH_RATE);
				block(PS4_RY, REFRESH_RATE);

				_ret = get_mvt_direction(C_RX, L_RX);

				if(_ret != 0)
				mvt_direction = _ret;

				//set_val(TRACE_1, mvt_direction);

				if(USE_EVIL_BOT == TRUE)
				{
					if(Inc_Dec_State_1 == FALSE)
					{
						Aim_Assit_1 -= 1;

						if(Aim_Assit_1 < min_aim_assit)
						Inc_Dec_State_1 = TRUE;
					}
					else
					{
						Aim_Assit_1 += 1;

						if(Aim_Assit_1 > AIM_ASSIST)
						Inc_Dec_State_1 = FALSE;
					}

					if(Inc_Dec_State_2 == FALSE)
					{
						Aim_Assit_2 -= 1;

						if(Aim_Assit_2 < min_aim_assit)
						Inc_Dec_State_2 = TRUE;
					}
					else
					{
						Aim_Assit_2 += 1;

						if(Aim_Assit_2 > AIM_ASSIST)
						Inc_Dec_State_2 = FALSE;
					}
				}

				update_timer = 0;

				L_RX = C_RX;
				L_RY = C_RY;
			}

			if((EVIL_AR) && (((get_val(ADS_BUTTON) > 50) && (get_val(FIRE_BUTTON)> 50)) || combo_running(cRapidFire)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
			{
				if(EVIL_AR == USE_RUMBLE_EVIL_AR)
				{
					T_RY = get_rumble_evil_ar();
				}
				else
				{
					T_RY = get_dynamic_evil_ar(C_RX, C_RY, AR_STRENGTH);
				}

				if(inverted == -1)
				{
					C_RY += inv(T_RY);
				}
				else
				{
					C_RY += T_RY;
				}
			}

			if(USE_EVIL_BOT == TRUE)
			{
				if(mvt_direction == 1)
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, sin(angle)) + get_polar_coordinate(Aim_Assit_2/2, sin(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, cos(angle)) + get_polar_coordinate(Aim_Assit_1/2, cos(cw_angle)));
				}
				else
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, cos(angle))+ get_polar_coordinate(Aim_Assit_2/2, cos(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, sin(angle))+ get_polar_coordinate(Aim_Assit_1/2, sin(cw_angle)));
				}

				angle += AIM_SLOPE;
				angle = angle % 360;

				cw_angle = (cw_angle + 1) % 360;
			}

			if(USE_EVIL_STEADY_AIM == TRUE)
			{
				C_RX = get_steady_aim(C_RX, RESOLUTION);
				C_RY = get_steady_aim(C_RY, RESOLUTION);
			}

			set_val(PS4_RX, clamp(C_RX, -100, 100));
			set_val(PS4_RY, clamp(C_RY, -100, 100));

			update_timer += get_rtime();
		}
		else
		{
			update_timer = 0;
			update_timer = REFRESH_RATE;

			angle = 90 * inverted;
			cw_angle = 90 * inverted;

			Aim_Assit_1 = min_aim_assit;
			Aim_Assit_2 = AIM_ASSIST;

		}

		if(USE_SLIDE_CANCEL)
		{
			if(
					(get_val(PS4_LY) < -85) || (get_val(PS4_LY) > 85) ||
					(get_val(PS4_LX) < -85) || (get_val(PS4_LX) > 85)
			)
			{
				slide_enable = 0;

				if(event_release(CROUCH_BUTTON))
				{
					if (USE_SLIDE_CANCEL == 1)
					{
						slide_enable = 1;
					}
					else if (USE_SLIDE_CANCEL == 2)
					{
						if(
								((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))
						)
						{
							slide_enable = 1;
						}
					}
					else if (USE_SLIDE_CANCEL == 3)
					{
						slide_enable = 2;
					}
					else if (USE_SLIDE_CANCEL == 4)
					{
						if(
								((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))
						)
						{
							slide_enable = 2;
						}
					}
				}

				if(slide_enable)
				{
					if(slide_enable == 1)
					combo_run(CANCEL_SLIDE_MW);
					else if(slide_enable == 2)
					combo_run(CANCEL_SLIDE_CW);
				}
			}
		}

		if(USE_HOLD_BREATH)
		{
			if(get_val(ADS_BUTTON))
			set_val(SPRINT_BUTTON,100);

			if(get_val(PS4_LY) <-90 && get_val(ADS_BUTTON) && get_ptime(ADS_BUTTON) > 200 && combo_running(HOLD_BREATH))
			combo_stop(HOLD_BREATH);

			if(event_press(ADS_BUTTON))
			combo_run(HOLD_BREATH);

			if(get_val(ADS_BUTTON) && get_lval(SPRINT_BUTTON))
			set_val(SPRINT_BUTTON,0);
		}

		if(USE_QUICK_SCOPE)
		{
			if(event_release(ADS_BUTTON) && get_ptime(ADS_BUTTON) < quickscope_press_time)
			combo_run(Quick_Scope);
		}
	}
}

//#################################################################################################

function get_rumble_evil_ar()
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH);
	}

	return 0;
}

//#################################################################################################

function get_dynamic_evil_ar(_C_RX, _C_RY, _AR_STRENGTH)
{	
	_ret = (get_ptime(FIRE_BUTTON)/ (160));
	_var = 	(AR_STRENGTH/2) + AR_STRENGTH;				
	
	if(_ret > _var)
		_ret = _var;
						
	_ret = _ret +  _AR_STRENGTH - ((abs(_C_RX * _C_RX) + abs(_C_RY * _C_RY))/1000) ;

	return _ret;
}
						
//#################################################################################################

function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}

//#################################################################################################

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val(TRACE_3,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

//################################################################################################# 

function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}

//################################################################################################# 

function sin(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    
    return _ret;
}

//################################################################################################# 

function cos(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    
    return _ret;
}

//################################################################################################# 

function get_polar_coordinate(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}

//#################################################################################################

combo CANCEL_SLIDE_CW {
	set_val(CROUCH_BUTTON, 100);
    wait(CW_Slide_Delay);
	set_val(CROUCH_BUTTON, 0);
	wait(20);
	set_val(SPRINT_BUTTON, 0);
	set_val(ADS_BUTTON, 100);
	wait(10);
	set_val(ADS_BUTTON, 0);
	set_val(CROUCH_BUTTON, 100);
	set_val(SPRINT_BUTTON, 100);
	wait(20);
	set_val(CROUCH_BUTTON, 0);
	set_val(SPRINT_BUTTON, 0);
	wait(20);
}

//#################################################################################################

combo CANCEL_SLIDE_MW {
	set_val(CROUCH_BUTTON, 100);
	wait(MW_Slide_Delay); 
	set_val(CROUCH_BUTTON, 0);
	wait(60);
	set_val(CROUCH_BUTTON, 100);
	wait(50);
	set_val(CROUCH_BUTTON, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);
	set_val(CROUCH_BUTTON, 0);
	set_val(JUMP_BUTTON, 100);
	wait(10);
	set_val(JUMP_BUTTON, 0);
}
//################################################################################################# 

combo auto_ping { 
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(24)
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(2000)
}


//#################################################################################################

combo HOLD_BREATH
{
	set_val(SPRINT_BUTTON,0);
	wait(64);
	set_val(SPRINT_BUTTON,100);
	wait(112);
	set_val(SPRINT_BUTTON,0);
	wait(112);
}

 //#################################################################################################
 
combo cRapidFire 
{ 
	  set_val(FIRE_BUTTON,100);
	     
	  if(toggle_rapid_fire == 2)
	  	set_val(ADS_BUTTON,100);
	  
	  wait(RPressTime);
	  
	  set_val(FIRE_BUTTON,0);
	  
	   if(toggle_rapid_fire == 2)
	  	set_val(ADS_BUTTON,0);
	  
	  wait(RPauseTime);
}

//#################################################################################################

combo Quick_Scope
{
	set_val(ADS_BUTTON,100);
	wait(quickscopedelay);
	set_val(ADS_BUTTON,100);
	set_val(FIRE_BUTTON,100);
	wait(40);
	set_val(ADS_BUTTON,100);
	wait(40);
}
    
 //#################################################################################################

combo cvibrate  
    {
         set_val(MOD_TOGGLE_BUTTON, 0);
         set_val(RAPID_FIRE_BUTTON, 0);
         set_val(AKIMBO_RAPID_FIRE_BUTTON, 0);
         set_rumble(RUMBLE_A, 100);
         wait(300);
         reset_rumble();
     }  