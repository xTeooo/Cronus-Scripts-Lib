/*
███████  ██████  ██████  ████████ ███    ██ ██ ████████ ███████                                                               
██      ██    ██ ██   ██    ██    ████   ██ ██    ██    ██                
█████   ██    ██ ██████     ██    ██ ██  ██ ██    ██    █████            
██      ██    ██ ██   ██    ██    ██  ██ ██ ██    ██    ██             
██       ██████  ██   ██    ██    ██   ████ ██    ██    ███████  
   _____  _____  ____  _  _______  ______________   __ 
  / __/ |/_/ _ \/ __ \/ |/ / __/ |/ / ___/  _/ _ | / / 
 / _/_>  </ ___/ /_/ /    / _//    / /___/ // __ |/ /__
/___/_/|_/_/   \____/_/|_/___/_/|_/\___/___/_/ |_/____/
                                                            
                                                                      
  .g8"""bgd                          mm                `7MM      *MM                     `7MM"""YMM  `YMM'   `MP' `7MM"""Mq.`7MMF'        .g8""8q. `7MMF'MMP""MM""YMM     `YMM'   `MM'MMP""MM""YMM 
.dP'     `M                          MM                  MM       MM                       MM    `7    VMb.  ,P     MM   `MM. MM        .dP'    `YM. MM  P'   MM   `7       VMA   ,V  P'   MM   `7 
dM'       ``7Mb,od8 .gP"Ya   ,6"Yb.mmMMmm .gP"Ya    ,M""bMM       MM,dMMb.`7M'   `MF'      MM   d       `MM.M'      MM   ,M9  MM        dM'      `MM MM       MM             VMA ,V        MM      
MM           MM' "',M'   Yb 8)   MM  MM  ,M'   Yb ,AP    MM       MM    `Mb VA   ,V        MMmmMM         MMb       MMmmdM9   MM        MM        MM MM       MM              VMMP         MM      
MM.          MM    8M""""""  ,pm9MM  MM  8M"""""" 8MI    MM       MM     M8  VA ,V         MM   Y  ,    ,M'`Mb.     MM        MM      , MM.      ,MP MM       MM               MM          MM      
`Mb.     ,'  MM    YM.    , 8M   MM  MM  YM.    , `Mb    MM       MM.   ,M9   VVV          MM     ,M   ,P   `MM.    MM        MM     ,M `Mb.    ,dP' MM       MM               MM          MM      
  `"bmmmd' .JMML.   `Mbmmd' `Moo9^Yo.`Mbmo`Mbmmd'  `Wbmd"MML.     P^YbmdP'    ,V         .JMMmmmmMMM .MM:.  .:MMa..JMML.    .JMMmmmmMMM   `"bmmd"' .JMML.   .JMML.           .JMML.      .JMML.    
                                                                             ,V                                                                                                                    
                                                                          OOb"                                                                                                                     

*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Build    = PS4_CIRCLE;
define Pickaxe  = PS4_TRIANGLE;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;


int AimAssist     = TRUE;
int LegacyAARX    = 17;
int LegacyAARY    = 17;
int LegacyAASWait = 10;
int LegacyBattRel = 20;


int FireAssist      = TRUE;
int RadiusBoost     = TRUE;
int AngleBoost      = TRUE;
int PolarRadius     = 7;
int PolarAngle      = 7;
int PolarRBoost     = 6;
int PolarABoost     = 10;
int PolarRelease    = 20;

int DoGzPolarRecoil = TRUE;
int ArPolarRY       = 15;

int BuildTracker    = TRUE;
int BuildSyncTime = 4000;

int BlockRumble     = TRUE;


define StandardAHip = On;
define DoGzARInvert = Off;
define DoGzARHip    = On;

int BuildTrack,BuildCount;
int AxisX,AxisY,ModDigit;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle;

main {
swap(PS4_TOUCH,PS4_SHARE);
if (BlockRumble) {
        block_rumble();
    }

    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(PS4_L1) || get_ival(PS4_R1) || get_ival(PS4_L2) || get_ival(PS4_L2)) 
                    BuildCount = Off;
        }
    }

    if (!BuildTrack) { 

       
       if (FireAssist) {

        if (get_ival(Fire) && abs(get_ival(RX)) <= PolarRelease && abs(get_ival(RY)) <= PolarRelease) {
            actual_X = get_ival(RX);
            actual_Y = get_ival(RY);
            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
            max_Magnitude = (actual_Magnitude < 100);

            if (RadiusBoost && get_ival(Fire)) {
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_ival(Fire)) {
                        Angle = PolarABoost;
                    }
                        else {
                            Angle = 0;
                        }
                                 
                angle += PolarAngle + Angle;
                 angle = angle % 360;
                sin_angle = DamPolar[angle % 360];
                cos_angle = DamPolar[(angle + 270) % 360];
                cos_angle = (cos_angle * Radius) / 100;
                sin_angle = (sin_angle * Radius) / 100;

            if (actual_Magnitude <= Radius) { 
                sin_angle -= actual_Y; 
                cos_angle -= actual_X; 
            }
                else { 
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                } 

            set_val(RX,clamp(actual_X + cos_angle, -100,100));
            set_val(RY,clamp(actual_Y + sin_angle, -100,100)); 
        }
    }
       
       if (AimAssist){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= LegacyBattRel && abs(get_ival(RY)) <= LegacyBattRel) {
                
                    combo_run(Legacy);
                }
            }
                    else {
                        combo_stop(Legacy);
                    }
        }

            if (DoGzPolarRecoil){
                if (!DoGzARInvert)
                    AxisY = 90;

                    else
                        AxisY = 270;

                    AxisX = abs(get_ival(RX));

                if (((!DoGzARHip && get_ival(Ads) && get_ival(Fire)) || (DoGzARHip && get_ival(Fire)))  && (abs(get_ival(RY)) < ArPolarRY && abs(get_ival(RX)) < ArPolarRY && get_rumble(RUMBLE_A))) {
                    if (get_ival(RY) >= 0) {
                        set_polar(POLAR_RS,AxisY,ArPolarRY * 327 + isqrt((abs(get_ival(RX)))* (abs(get_ival(RX))) + (abs(get_ival(RY))) * (abs(get_ival(RY)))) * 327 + (AxisX * 327));
                    }

                        else if (get_ival(RY) < 0) {
                            set_polar(POLAR_RS,AxisY,ArPolarRY * 327 + isqrt((abs(get_ival(RY))) * (abs(get_ival(RY)))  + (abs(get_ival(RX))) * (abs(get_ival(RX)))) * 327 - (-AxisX * 327));
                       }
                 }
          }
     } 
}
   
combo Legacy {
    
    set_val(RY,LegacyAARY * -1);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX);
    wait(LegacyAASWait);
    set_val(RY,LegacyAARY);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX * -1);
    wait(LegacyAASWait);
}

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
