/*
 ──▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───                                                  //////////////////////////////////// !
───█▒▒░░░░░░░░░▒▒█───                                                / Dev: Lxuiee&+Cronus+                  !
────█░░█░░░░░█░░█────                                                ///////////////////////               /
─▄▄──█░░░▀█▀░░░█──▄▄─                                                / INSTA KILL V3.4                     /    !
█░░█─▀▄░░░░░░░▄▀─█░░█                                                //Update Code:{S827_5557_NLMS}                                                                                                                                                         
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█                                               / Working Season 8                    /          !
█░░╦─╦╔╗╦─╔╗╔╗╔╦╗╔╗░░█                                               / /////////////////////////////////// /   !
█░░║║║╠─║─║─║║║║║╠─░░█
█░░╚╩╝╚╝╚╝╚╝╚╝╩─╩╚╝░░█                                               ///////////////////////////////////////////////////////////
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


///   |------*/ int In_Game_Sens   = 6;     /*#######|------------------- SENSITIVITY OPTIMIZING! -------------------|                                                                                      ///

///  SETUP                                                                                 ///
///--------------------------------------------------------------------------------------------------------------------
///   /////CONTROLS/////				/////BEST SCRIPT /////											                                               
///===================================================================================== 
///AIM ABUSE LT+LEFT U CAN SWITCH BTWEEN LONG AND SHORT      
///=========================================================================================
///OP AIM ASSIST LT+ UP SWITCH BEWTWEEN SHORT AND LONG 
///============================================================================================
///Aim ASSIST Always On                                                                                                                                                          
///============================================================================================
///RAPID FIRE: ADS + RIGHT                           
///============================================================================================
///HAIR TRIGGER: always On, This also allows super fast building.                                                                                                  
///============================================================================================
///PERFECT ACCURACY: L2+R1
///============================================================================================
///DROPSHOT: L2+SQUARE
///============================================================================================
///Aim Correction Always On  U Can Change in setting below to the ads sens u use 
///============================================================================================
///AntiRecoil  Always On But Can Change To False For Scoped Only   
///============================================================================================
///
///============================================================================================
///
///============================================================================================
///_______________________________________________________________________________________ ///_
*/

//----------------------------------------
// BUTTON LAYOUT: BUILDER PRO
 define FIRE_BTN = 4; //XB1_RT //PS4_R2
 define ADS_BTN = 7; //XB1_LT //PS4_L2
 define CROUCH_BTN = 5; //XB1_RS //PS4_R3
 define SPRINT_BTN = 8; //XB1_LS //PS4_L3
 define JUMP_BTN = 19; //XB1_A  //PS4_CROSS
 define NEXT_PIECE = 3; //XB1_RT //PS4_R1
 define LEFT_BUMP = 6; //XB1_LB //PS4_L1
 define RIGHT_BUMP = 3; // XB1_RB //PS4_R1
 define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLE
 define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE
 define WALL_BTN = 4; //XB1_RB //PS4_R2
 define STAIRS_BTN = 7; //XB1_LB //PS4_L2
 define FLOOR_BTN = 3; //XB1_RT //PS4_R1
 define ROOF_BTN = 6; //XB1_LT //PS4_L1
 define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
 define R_X = 9; //XB1_RX //PS4_RX
 define R_Y = 10; //XB1_RY //PS4_RY
 define L_X = 11; //XB1_LX //PS4_LX
 define L_Y = 12; //XB1_LY //PS4_LY
 define UP = 13; //XB1_UP //PS4_UP
 define DOWN = 14; //XB1_DOWN //PS4_DOWN
 define LEFT = 15; //XB1_LEFT //PS4_LEFT
 define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT
 define MENU		= XB1_MENU;
 define VIEW_SHARE = PS4_SHARE;    
 define MENU_OPTIONS = PS4_OPTIONS;    
 define Blue = 1;    
 define Red = 2;    
 define Green = 3;    
 define Pink = 4;    
 define SkyBlue = 5;    
 define Yellow = 6;    
 define White = 7;

//Aim Assist -- Always on
int AimAssist = TRUE;

//AIM ASSIST4  VALUES
int aav  = 19;// AIM ASSIST VALUES
int aav2 = -19;//AIM ASSIST VALUES

//AIM ASSIST KILLZONE
int value  = 19;
int value2 =-19;
int delay  = 20;

//AIM ASSIST                                                                      
int OpAimAssist1 = TRUE;     
int OpAimAssist2 = FALSE;                 
int OpAimAssist1_V = 13;     
int OpAimAssist2_V = 24;      
int OpAimAssist1_SPEED =65; 
int OpAimAssist2_SPEED =57;                     


//Aim Abuse
int LONG_Release = 18;
int SHORT_Release = 23;
int LONG_Hold = 307;   
int SHORT_Hold = 183;
int Long_abuse = FALSE; 
int Short_abuse = TRUE;               

//Dropshot
 int DropShot = FALSE;                                                                   
 int dsdown   = 30;     // Time you are down                                              
 int dsup     = 13    // Time you are up     

//ANTI RECOIL SETTINGS
 int ANTI_RECOIL; // For AntiRecoil combo
 int anti_recoil; // For AntiRecoil combo
 define AR_Release = 70;
 define ONLY_WITH_SCOPE = FALSE; //u can toggle false and true for example true is for scoped only false is always on :)

//RUMBLE
int rumble_type = RUMBLE_A;

//100% Accuracy - L2/LT & R1/RB
int PerfectAccuracy  = TRUE;

//--Rapidfire - LT/L2 + Right
int RapidFire      = FALSE;

int HairTrigger    = TRUE 

//Aim Correction Aim Assist Booster
int   AIM__CORRECT=TRUE;                                                                                        
int ADS_SENS, GEN_SENS=87, HIP_SENS=86, ADS_FIRE_SENS, Use_sens, midpoint=50;            
int adss = 60; //PUT WHAT YOU WOULD NORMALLY USE IN GAME FOR ADS AKA CONTROLLER TARGETING 


//LED
int a; int b;



int wasActive;
int doubleClick = FALSE;
data ( 1,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,2,2);    
int LED;    
int RMBLE = RUMBLE_A;   
int Notify = TRUE
int edit = FALSE;                                                                        
int pressedIt[6];                                                                       
int WAIT;                                                                               
int num, i
int tap;
int button;



//--------------------------------------------------------------------------------------------------------MAIN SECTION----------------------------------------------------------------------------------------------------//
main {

//HAIR TRIGGER
if(HairTrigger){                                                                         
     if(get_val(FIRE_BTN)){set_val(FIRE_BTN,100);}                                     
     }


//AIMASSIST
 if (AimAssist) {
 if (get_val(ADS_BTN)) {
 combo_run(AimAssist);}}
 if (get_val(R_X)<value2||get_val(R_X)>value||get_val(R_Y)<value2||get_val(R_Y)>value||get_val(R_X)<value2||get_val(R_X)>value||get_val(R_Y)<value2||get_val(R_Y)>value){
    combo_stop(AimAssist);}
         
//100% ACCURACY
if (get_val(ADS_BTN) && get_val(RIGHT_BUMP)) {
  PerfectAccuracy = !PerfectAccuracy
   combo_run(Notify);a=0;b=2;
  combo_run(PerfectAccuracy);
set_val(RIGHT_BUMP, 0);
      } else {
  combo_stop(PerfectAccuracy);
}

 // ANTI RECOIL
     if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
         ANTI_RECOIL = 7;
         combo_run(AntiRecoil);
     }
     
 //--Rapidfire
if(get_val(ADS_BTN) && event_press(RIGHT)){
   rumble_A_if_true(RapidFire);
   RapidFire =! RapidFire;
   if(RapidFire == TRUE){combo_run(Notify);a=0;b=2;} 
   if(RapidFire == FALSE){combo_run(Notify);a=2;b=0;}
   }
   if(RapidFire){
     if(get_val(FIRE_BTN)){
        combo_run(Rapidfire);                                          
       } 
     }
     
     //Dropshot
if(get_val(ADS_BTN) && event_press(RELOAD_BTN)){
   DropShot =! DropShot;   
   if(DropShot == TRUE){combo_run(Notify);a=0;b=2;}
   if(DropShot == FALSE){combo_run(Notify);a=2;b=0;}
   rumble_A_if_true(DropShot);}
   if(DropShot){
      if(get_val(ADS_BTN)&&get_val(FIRE_BTN)){combo_run(DropShot);}
     if (event_press(18)){ DropShot = FALSE; }
     }     
        
if (get_val(XB1_LT)){ if (event_press(UP)) {
OpAimAssist1 = !OpAimAssist1;
OpAimAssist2 = !OpAimAssist2;
RMBLE_A(OpAimAssist1); }set_val(3, 0); }

if (OpAimAssist2) {
if (get_val(7) > 95) { combo_run(OpAimAssist2_combo);}}
if (get_val(9)<-19||get_val(9)>19||get_val(10)<-19||get_val(10)>19||get_val(9)<-19||get_val(9)>19||get_val(10)<-19||get_val(10)>19){ 
combo_stop(OpAimAssist2_combo);}

if (OpAimAssist1) {
if (get_val(7) > 95) { combo_run(AAs_COMBO);}}
if (abs(get_val(9)) > 15 || abs(get_val(10)) > 15) {
combo_stop(AAs_COMBO);} 

if (Long_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Long_abuse_combo); 
} else { combo_stop(Long_abuse_combo); }
}
if (Short_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Short_abuse_combo);
} else { combo_stop(Short_abuse_combo); }}

if (get_val(XB1_LT) && event_press(LEFT)) {
Short_abuse = !Short_abuse;
Long_abuse = !Long_abuse;
RMBLE_A(Short_abuse); }


//Aim Correction Thanks To Legit Cloud 
if(AIM__CORRECT){ 
Aim__Correction (Use_sens);
}
if(get_val(XB1_RX)<50||get_val(XB1_RY)<50){
	midpoint = 35;
} else {
	midpoint = 50;
}
ADS_SENS = ((adss / 2) + 45);
ADS_FIRE_SENS = (((adss / 2) + 50) - 16);
vm_tctrl(-2);} 

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------COMBO SECTION-----------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//

combo PerfectAccuracy {
set_val(FIRE_BTN,100);
wait(96);
wait(376);
set_val(FIRE_BTN,100);
}
combo Rapidfire {
set_val(FIRE_BTN, 100); 
wait(120);
set_val(FIRE_BTN, 0); 
wait(30);
}


combo AimAssist {
set_val(R_Y, (aav));
wait(delay)
set_val(R_X, (aav));
wait(delay)
set_val(R_Y, (aav2));
wait(delay)
set_val(R_X, (aav2));
wait(delay)
set_val(R_Y, (aav));
wait(delay)
set_val(R_X, (aav));
wait(delay)
set_val(R_Y, (aav2));
wait(delay)
set_val(R_X, (aav2));
wait(delay)

}

combo AAs_COMBO {
set_val(9, (OpAimAssist1_V)); wait(OpAimAssist1_SPEED);
set_val(9, OpAimAssist1_V * -1); wait(OpAimAssist1_SPEED); }

combo OpAimAssist2_combo {
set_val(10, (OpAimAssist2_V)); wait(OpAimAssist2_SPEED)
set_val(9, (OpAimAssist2_V)); wait(OpAimAssist2_SPEED)
set_val(10, OpAimAssist2_V * -1); wait(OpAimAssist2_SPEED)
set_val(9, OpAimAssist2_V * -1); wait(OpAimAssist2_SPEED)}

combo Short_abuse_combo {
set_val(7, 100); wait(SHORT_Hold);
set_val(7, 0);   wait(SHORT_Release); }

combo Long_abuse_combo {
set_val(7, 100); wait(LONG_Hold);
set_val(7, 0);   wait(LONG_Release); }

combo RUMBLE {
set_rumble(RMBLE, 100); wait(300);
reset_rumble(); }

combo DropShot{
set_val(5,100);
wait(dsdown);
wait(dsup);
set_val(5,100);
}


combo RumbleTwice {
    set_rumble(RUMBLE_A, 100);
    wait(250);
    set_rumble(RUMBLE_A, 0);
    wait(250);
    set_rumble(RUMBLE_A, 100);
    wait(250);
    reset_rumble();}
    
combo RumbleOnce {
    set_rumble(RUMBLE_A, 100);
    wait(250);
    reset_rumble();}




combo Notify {
if(Notify){set_rumble(RUMBLE_B,65);}
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}
combo VIBRATE {
    set_rumble(rumble_type, 100);
    wait(300);
    reset_rumble();
}
combo AntiRecoil {
     anti_recoil = get_val(R_Y) + ANTI_RECOIL;
     if (anti_recoil > 100) anti_recoil = 100;
     set_val(R_Y, anti_recoil);
 }

function rumble_A_if_true(var) {
    if (var) rumble_type = RUMBLE_A;
    else rumble_type = RUMBLE_B;
    combo_run(VIBRATE);
}

function RMBLE_A(var) {
if (var) RMBLE = RUMBLE_A;
else RMBLE = RUMBLE_B;
combo_run(RUMBLE); }

function resetPress(P0,P1,P2,P3,T) {

	if(!P0){pressedIt[0] = FALSE;}	else if(P0) {pressedIt[0] = TRUE;}
	if(!P1){pressedIt[1] = FALSE;}	else if(P1) {pressedIt[1] = TRUE;}	
	if(!P2){pressedIt[2] = FALSE;}	else if(P2) {pressedIt[2] = TRUE;}	
	if(!P3){pressedIt[3] = FALSE;}	else if(P3) {pressedIt[3] = TRUE;}
	if(!T){tap = FALSE;}	 else if (T){tap = TRUE;}
}


function LEDC(Colour) { LED = (Colour * 4) - 3;
set_led(LED_1, dbyte(LED));     set_led(LED_2, dbyte(LED + 1));
set_led(LED_3, dbyte(LED + 2)); set_led(LED_4, dbyte(LED + 3)); }

function get_double(B1,B2) 
	{
    if(get_val(B1) && event_press(B2) && !doubleClick) combo_run(TAP);
    if(get_val(B1) && event_press(B2) &&  doubleClick) return TRUE;
    return FALSE;
	}
function Aim__Correction (Use_sens){  
  if(get_val(FIRE_BTN) && get_val(ADS_BTN)) { 
	Use_sens = ADS_FIRE_SENS;
  }
  if(get_val(FIRE_BTN) && !get_val(ADS_BTN)) { 
	Use_sens = HIP_SENS;
  }
  if(!get_val(FIRE_BTN) && !get_val(ADS_BTN)) {
	Use_sens = GEN_SENS;
  }
  if(!get_val(FIRE_BTN) && get_val(ADS_BTN)) {
	Use_sens = ADS_SENS;
  } 
	sensitivity(9, midpoint ,Use_sens);
	sensitivity(10, midpoint ,Use_sens);
	}

	
//#################################################################################################################################
 ///---DEV---//====================================================================================================================
//-+CRONUS+-//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
//-NLMS-//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
//########################################################################################################################################
///---Testers---//########################################################################################################################
// Thanks For The Testers That Tested For This, So Thankful :) //#########################################################################
//#############################################################################################################################
//#################################################################################################################################
//#################S827###################################5557#######################################NLMS#######################
//################################################################################################################################
