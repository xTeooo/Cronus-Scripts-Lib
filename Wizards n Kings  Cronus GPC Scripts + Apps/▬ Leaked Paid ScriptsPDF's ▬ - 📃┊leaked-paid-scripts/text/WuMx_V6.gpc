/* *
* GPC SCRIPT
*
* GPC is a scripting language with C-like syntax.
* To learn more access GPC Language Reference on Help menu.
* *********************************************************** */

main {

    //
    // The main procedure is called before every report is sent to
    // console. You can think of this procedure as a loop which only
    // ends when the script is unloaded.
    //
    // TODO: handle/change values of buttons, analog stick and/or sensors
    //

}


main {

}
/*
                             TOGGLE MENU DESCRIPTION
=========================================================================================================================================================================================================================================
                      |------*/ int In_Game_Sens = 5; /*#######|------------------- SENSITIVITY OPTIMIZING! -------------------|
                                                       *\------------------------------------/*
// |------*/ //Aimbot = /*#######|------- HOLD "Scope_BTN" all the way down { for scope weapons don't hold it all the way down } ------|
 // |------*/ //AimAssist = /*#######|--------------------- NO toggle available! --------------------|
 // |------*/ //DropShot = /*#######|------- HOLD "Scope_BTN" and press "Reload_BTN" for toggle -------|
 // |------*/ //RapidFire = /*#######|------- HOLD "Scope_BTN" and press "RIGHT" for toggle -------|
 // |------*/ //GhostPeeking = /*#######|------- HOLD "Scope_BTN" and press "L1" for toggle -------|
  // |------*/ //100% Accuracy = /*#######|------- Don't HOLD "Scope_BIN" all the way down -------|
 // |------*/ //Pump&WallOrStairs = /*#######|------- HOLD "Scope_BTN" and press "UP" for toggle hold scope_bin and shoot_bin for stairs / press scope_bin and shoot_bin for wall -------|
 // |------*/ //RampRush = /*#######|------- HOLD "Down" as mush as you want -------|
 // |------*/ //Pump&HandCannon = /*#######|------- HOLD "Left" and press "Reload_BTN" for toggle -------|
 // |------*/ //Pump&Jump = /*#######|------- HOLD "Scope_BTN" and press "Jump_BTN" for toggle -------|
 // |------*/ //Pump&SMG = /*#######|------- HOLD "Left" and press "Jump_BTN" for toggle -------|
//========================================================================================================================================================================================================================================*/
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|
//----------------------------------------------------------------------------------|                                                                        
int WuMx1 = TRUE;
int WuMxPW = FALSE;
int WuMxPH = FALSE;
int button1;
int PH = FALSE;
int A_R1 = 1;
int SPH = FALSE;
int SMG = FALSE;
int BPH = FALSE;
int button2;
int WuMxPJ = FALSE;
int blockmod;
int WuMx5 = FALSE;
int DefenseMode=FALSE;
int AttackMode=TRUE
int WuMx4_NOABUSE
int WuMx2 = TRUE;
int aav = 12;
int aav2 = -12;
int value = 20;
int value2 =-20;
int delay = 19;
int rumble_type = RUMBLE_A;
int Notify = TRUE
int WuMx3 = FALSE;
int WuMxs =5;
int WuMxs2 =5;
int a; int b;
int R2_block;
define WuMx12 = 4;
define WuMx345s = 7;
define WuMx108sa = 5;
define WuMx093 = 20;
define WuMx153 = 8;
define WuMx5743 = 19;
define WuMxSa = 3;
define WuMx09 = 3;
define WuMx007 = 6;
define WuMx57 = 17;
define WuMxBbv = 18;
define WuMx0871 = 9;
define WuMxL = 10;
define WuMxkltqa = 11;
define WuMxjlwr = 12;
define WuMx0812 = 13;
define WuMx891 = 14;
define WuMxlkaq = 15;
define WuMx9713 = 16;
///////////////////////////////////////////////////////
 main {
//WuMxPA
if (get_val(15) && event_press(20)) {
button1 = 15;
button2 = 20;
combo_run(BlockButton);
PH = !PH;
A_R1 = 1;
SMG = FALSE;
SPH = FALSE;
BPH = FALSE;
rumble_A_if_true(PH);
}
if (get_val(15) && event_press(19)) {
button1 = 15;
button2 = 19;
combo_run(BlockButton);
PH = !PH;
A_R1 = 1;
SMG = TRUE;
SPH = FALSE;
BPH = FALSE;
rumble_A_if_true(PH);
}
if (PH) { 
if(event_press(18)){
BPH =! BPH;
}
if(event_press(17)){
SPH =! SPH;
}
if (SPH) { 
if (event_press(3) || event_press(6)) {
SPH =! SPH;
BPH = FALSE;
}
}
if (!BPH) { 
if (get_val(7) <= 0 && event_press(16)) {
BPH = TRUE;
}
}
if (BPH == FALSE && SPH == FALSE) {
if (A_R1 == 0) { 
if (event_press(6)) {
PH = FALSE;
}
if (event_press(3)) {
A_R1 = 1;
}
} else if (A_R1 == 1) { 
if (event_press(6)) {
A_R1 = 0;
}
if (event_press(3)) {
A_R1 = 2;
}
}else if (A_R1 == 2){ 
if (event_press(6)) {
A_R1 = 1;
}
if (event_press(3)) {
PH = FALSE;
}
}
}
if (event_press(4) && BPH == FALSE && SPH == FALSE) { 
if (A_R1 == 1) { 
combo_run(R1);
}else if (A_R1 == 2){ 
if (!SMG) { 
combo_run(L1);
}
}
set_val(4, 0);
}
}
//WuMx2
 if (WuMx2) {
   if (get_val(WuMx345s)) {
   combo_run(WuMx2);}}
   if (get_val(WuMx0871)<value2||get_val(WuMx0871)>value||get_val(WuMxL)<value2||get_val(WuMxL)>value||get_val(WuMx0871)<value2||get_val(WuMx0871)>value||get_val(WuMxL)<value2||get_val(WuMxL)>value){
         combo_stop(WuMx2);}
                  

//WuMx3
 if(get_val(WuMx345s) && event_press(WuMx9713 )){
   WuMx3 = ! WuMx3;
   if(WuMx3 == TRUE){combo_run(Notify);a=0;b=2;}
   if(WuMx3 == FALSE){combo_run(Notify);a=2;b=0;}

   }
   if(WuMx3){
    if((get_val(WuMx345s )) && (get_val(WuMx12 ))) {
        combo_run(WuMx3); 
       }
    }    
 //WuMx1
if(WuMx1){
   if(get_val(WuMx345s)> 80){
      combo_run(WuMx1);}
   if(event_release(WuMx345s)){ combo_stop(WuMx1);
}
}
//WuMx4
if (get_val(WuMx345s)) {
         if (event_press(WuMx007)) {
                combo_run( WuMx4);
                combo_run(Notify);a=0;b=2;
       }
         set_val(WuMx007, 0);
         }
 //WuMx5
if(get_val(WuMx345s) && event_press(WuMx093)){
   WuMx5 =! WuMx5;
   if(WuMx5 == TRUE){combo_run(Notify);a=0;b=2;}
   if(WuMx5 == FALSE){combo_run(Notify);a=2;b=0;}
   }
   if(WuMx5){
      if(DefenseMode){if(get_val(WuMx12)==0&&get_rumble(RUMBLE_A)||get_rumble(RUMBLE_B)){combo_run(WuMx5);}}
      if(AttackMode){if(get_val(WuMx345s)&&get_val(WuMx12)){combo_run(WuMx5);}}
      } 
// WuMxq
if (get_val(4) && get_val(4) < 65 && get_ptime (4) > 200) {
combo_run(WuMxq);
button1 = 4;
combo_run(BlockButton);
}
// WuMxRR
 if (get_val(WuMx891 ) && get_ptime (WuMx891 ) > 300) {
combo_run(WuMxRR);
set_val(WuMx891 , 0);
}else {
combo_stop(WuMxRR);
}
// WuMxPW
if(get_val(7) && event_press(13))
{
WuMxPW =! WuMxPW;
 rumble_A_if_true(WuMxPW);
button1 = 7;
button2 = 13;
combo_run(BlockButton);
}
if (event_press(3) || event_press(6) || event_press(17) || event_press(18))
{
WuMxPW = FALSE;
}
if(WuMxPW)
{ 
if ((get_val(7) && get_val(4)) || (get_val(4) &&
get_val(7)))
{
combo_run(WuMxPWC);                                         
}
}  
//WuMxPJ
if(get_val(WuMx345s ) && event_press(WuMx5743 )){
button1 = WuMx345s;
button2 = WuMx5743 ;
combo_run(BlockButton);
WuMxPJ =! WuMxPJ;
rumble_A_if_true(WuMxPJ);
}
if (event_press(WuMxSa ) || event_press(WuMx007 ) || event_press(WuMx57 ) || event_press(WuMxBbv )) 
{
WuMxPJ = FALSE;
}
if(WuMxPJ)
{
if (get_val(WuMx12 )) 
{
combo_run(WuMxPJ);
}else {
combo_stop(WuMxPJ);
}
}
//WuMxDZ
if (abs(get_val(12)) < 5 ){        
set_val(12,0);                                                
}      
if ( abs(get_val(11)) < 5 ){        
set_val(11,0);                                                
}                                                                           
if (abs(get_val(10)) < 5 ){         
set_val(10,0);                                                 
}       
if (abs(get_val(9)) < 5 ){         
set_val(9,0);                                                
}
}

combo Notify {
if(Notify){set_rumble(RUMBLE_B,65);}
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}combo BlockButton{
set_val(button1,0);
set_val(button2,0);
wait(650);
}combo WuMxPJ{
set_val(WuMx5743 ,100);
wait(25);
wait(25);
set_val(WuMx5743 ,0);
}combo R1 { 
R2_block = TRUE;
set_val(4, 100);
wait(15);
set_val(3, 100);
wait(15);
R2_block = FALSE;
A_R1 = 2; 
}combo L1 { 
R2_block = TRUE;    
set_val(4, 100);
wait(15);
set_val(6, 100);
wait(15);
R2_block = FALSE;
A_R1 = 1;
}combo WuMxPWC {
set_val(4, 100);
wait(100);
set_val(4, 0);
wait(70);
set_val(18, 100);
wait(100);
set_val(18, 0);
wait(100);
set_val(4, 100);
wait(100);
set_val(4, 100);
wait(70);
set_val(18, 100);
wait(100);
set_val(18, 0);
wait(250);
}combo WuMxRR {
set_val(7, 100);
wait(50);
wait(50);
set_val(7, 100);
wait(50);
set_val(10, 100);
wait(20);
set_val(3, 100);
wait(50);
wait(50);
set_val(3, 100);
wait(50);
set_val(10, -100);
wait(20);
set_val(4, 100);
wait(50);
wait(50);
set_val(4, 100);
wait(80);
wait(80);
set_val(7, 100);
wait(50);
wait(50);
set_val(7, 100);
wait(240);
}combo WuMx5{
set_val(WuMx108sa,100);
wait(40);
wait(164);
set_val(WuMx108sa,100);
}combo WuMxq {
set_val(4,100);
wait(100);
wait(250);
set_val(4,100);
}combo WuMx2 {
set_val(WuMxL, (aav));
wait(delay)
set_val(WuMx0871, (aav));
wait(delay)
set_val(WuMxL, (aav2));
wait(delay)
set_val(WuMx0871, (aav2));
wait(delay)
set_val(WuMxL, (aav));
wait(delay)
set_val(WuMx0871, (aav));
wait(delay)
set_val(WuMxL, (aav2));
wait(delay)
set_val(WuMx0871, (aav2));
wait(delay)
}combo WuMx3{
      set_val(WuMx12 , 100);
      wait(WuMxs); 
      set_val(WuMx12 , 0);
      wait(WuMxs2);
}combo WuMx4 {
set_val(WuMx108sa, 100);
wait(15);
set_val(WuMx108sa, 0);
wait(15);
set_val(WuMx12, 100);
wait(15);
set_val(WuMx12, 0);
wait(180);
set_val(WuMx108sa, 100);
wait(15);
set_val(WuMx108sa, 0);
}combo WuMx1 {
set_val(7, 100);
wait(180);
set_val(7, 0);
wait(15);
}combo Vibrate {
set_rumble(rumble_type, 100);
wait(300);
reset_rumble();
}function rumble_A_if_true(var) {
if (var) rumble_type = RUMBLE_A;
else rumble_type = RUMBLE_B;
combo_run(Vibrate);
}
//END
//CREDITS         
             // WuMx - Main Dev           
             // My Youtube and instagram Name : WuMx 1