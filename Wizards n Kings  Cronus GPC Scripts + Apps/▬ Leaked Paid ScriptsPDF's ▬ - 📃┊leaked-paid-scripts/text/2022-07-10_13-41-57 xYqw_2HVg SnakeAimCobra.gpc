define Fire   = XB1_RT;  
define Pickaxe = XB1_Y;     
define N_Weapon = XB1_RB;  
define Ads    = XB1_LT;   
define Reload  = XB1_X;      
define P_Weapon = XB1_LB;
define Jump   = XB1_RS;    
define Edit    = XB1_B;  
define Select   = XB1_RT;
define Crouch = XB1_A;   
define Ping    = XB1_RIGHT;   
define Confirm  = XB1_LT;
define Reset  = XB1_LEFT;    
define Wall    = XB1_RT;     
define Ramp     = XB1_LT;  
define Build  = XB1_Y;    
define Floor   = XB1_RB;     
define Roof     = XB1_LB;
define RumA     = RUMBLE_A;
define RumB     = RUMBLE_B;
//oxi 
define Up     = PS4_UP;   define Left    = PS4_LEFT;   define RX       = PS4_RX;
define Down   = PS4_DOWN; define Right   = PS4_RIGHT;  define RY       = PS4_RY;

define aimY   = PS4_RY;   define LX      = PS4_LX;     define On       = TRUE;
define aimX   = PS4_RX;   define LY      = PS4_LY;     define Off      = FALSE;
int AA_Strength  		   = 8;
 int SwiftAimAssist  = On;// The best Aim assist 
int SwiftBoost      = On;
int deadZone   = 8;       
int KeyPress;
int Radius,Angle,Speed;
int Edit1,Edit2;
int EditT;
int BuildTrack,BuildCount;
int BuildPro;
int ButtonId,TapButtons[37];
int AxisX,AxisY;
int ProgDynaRadius,ProgDynaAngle,ProgRY,ProgRX;
define Prf = On;
define Paf = On;

int RadiusFlow = Prf;
int AngleFlow  = Paf;
int Pvid;
int RadFlow = On;
int AngFlow = On;
int PX_Out,PY_Out,PAngle_Out,PolAngle,PX[3],PY[3];
define EllipseInverTime = 2000;
int AngleInvert,EllipseInvert,EllipseAngle,TimeEP;

  int SwiftRadius   = 5;
int SwiftAngle    = 21;
int SwiftRBoost   = 29;
int FalloffAARX = 55;
int FalloffAARY = 55;
int FalloffAAWait = 10;
int RapidFireHold = 30;
int RapidFireWait = 30;
int AntiRecoil = 20;
int N_DiV   = 24;
int AuraAARX     = 10;
int AuraAARY     = 10;
int AuraAAWait   = 1;
int LegacyBattRel = 20;
int ArLegacyRY    = 42;
int AssistProfile = 36;
int Strength1  = 327;
int Increment1 = 12;
int MrCiiD1 = FALSE;
int MrCiiD2  = 300;
int MrCiiD3  = 300;
int MrCiiD4 = FALSE;
int MrCiiD4_a = 600;
int MrCiiD4_b = 70;
int MrCiiD5 = TRUE;
int MrCiiD6 = TRUE; 
int MrCiiD7 = TRUE; 
int R1L1_SWAP = FALSE; // SET TO TRUE TO SHOOT WITH R1 AND AIM WITH L1
int XR3_SWAP = FALSE; // SET TO TRUE TO JUMP WITH R3 AND CROUCH WITH X						
define FIRE 	= 4;
define ADS 	 	= 7;
define RBUMP 	= 3;
define LBUMP 	= 6;
define CROUCH 	= 5; 
define SPRINT 	= 8; 
define JUMP 	= 19;
define RELOAD 	= 20;
define PICKAXE  = 17;
define BUILD 	= 18;
define UP 		= 13;
define DOWN 	= 14;
define LEFT 	= 15;
define RIGHT 	= 16;
define OPTIONS = 2 ;
define TOUCHPAD = 27;
define R_X = 9;
define R_Y = 10;
define L_X = 11;
define L_Y = 12;
int LinearAssist = On;
int BaseSpeed = 21;
int ZoneSpeed = 21;
int FireSpeed = 21;
int BasePower = 5;
int ZonePower = 5;
int FirePower = 5;
int aav  = 8;
int delay  = 10;
int offset
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","Aura Sticky Aimv1","","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {""  , "Aura Sticky Aim"  , "Legacy AntiRecoil"  , "   Block Rumble" };
const string ModValue [] = {""   , " Aura RX Assist"  , " Aura RY Assist"  , "Aura Sticky Wait"  , "Legy+AuraRelease" , "LegacyAR RY Power" };
const int16 ModDigitMin [] = {  0  , 1  , 1  , 10  , 1  , 1 };
const int16 ModDigitMax [] = {  0  , 40  , 40  , 150  , 80  , 100 };


int AimAssist_Strength  = 50;
int Shunt
int AA1 = On;
int AA2 = On;
int ExpoAA = On;
define Scope_BTN   = 4; //XB1_LB //PS4_L2
define Shoot_BTN   = 4; //XB1_RB //PS4_R2

define Run_BTN     = 8; //XB1_LS //PS4_L3
define Jump_BTN    = 19; //XB1_A  //PS4_CROSS

define Reload_BTN  = 20; //XB1_X //PS4_SQAURE

define Crouch_BTN  = 5; //XB1_LS  //PS4_L3
define RightBumber = 3; //XB1_RT //PS4_R1
define LeftBumber  = 6; //XB1_LT //PS4_L1

define Melee_BTN   = 18; 
define Switch_BTN  = 17; 
define WALL_BTN = 4; 
define STAIRS_BTN = 7; //CRYPTOACE6761
define FLOOR_BTN = 3;
define ROOF_BTN = 6; 
int In_Game_Sens   = 49;     
int RapidFire      = FALSE;  


int AimAssist      = TRUE; 
int RumbleNotify   = FALSE;  
int HairTrigger    = TRUE; 
int ButtonSwap     = FALSE;
int Aimbot         = TRUE;
int InstaSwap      = FALSE;
//AimAssist:  
  int valueX               = 4; // make your deadzome
  int delayA;      
//AimAssist Settings
  int AimAssistTime = 43;  
int AimAssistSize = 2;
   //Aimbot:
  int AimSpeed             = 149;                               
int NOADSAA				   = TRUE;
int NOADSAA_Strength       = 8; 
  define Aimbot_BTN        = 4; 
int AimAssist_LINEAR  = TRUE; 
int Strength  = 327;
int Increment = 12; 


int ExploitAngle      = 21; 
int ExploitRadius     = 5; 
int ExploitRadiusMin  = 5;
int ExploitAngleBoost = 6;
int PolarBoost       =  29;
int ExploitAssist     = 29;
int ToggleRumbleBoost = On;

define Circular = 1;
define TallOval = 2;
define WideOval = 3;
define Spiral   = 29;
define Helix    = 5;

int BuildTracker  =  TRUE;
int BuildSyncTime = 1000;

int PSonXBOX           = Off; 



int InstantTriggers = On;
int cryptoace
define LegacyRumble = On;
define LegacyInvert = Off;
define LegacyARHip  = On;
int PolarRelease
int power,Ypower,Xpower,Power,CountPower,AxisXY;
int display_title = TRUE;
int display_black;      
int count_black;
int BlockRumble = On
int CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,PolarStrength,PositionT;
int Axe,RXT,RYT,angle;
int Reducer;
int YewLessInputDelay = -9;
int AuraStickyAA   =  On;
define StandardAHip =  On;
main {
  
vm_tctrl(YewLessInputDelay)

    if(cryptoace){
        if(get_ival(4))
            combo_run(StickyAim);
    }

if(Aimbot){
   if(get_val(Aimbot_BTN)&&get_ptime(Aimbot_BTN)>= 240){
      combo_run(Aimbot1);}
   if(event_release(Aimbot_BTN)){ combo_stop(Aimbot1);}
   } 
           if(AimAssist){
   if(get_val(Scope_BTN)){
      combo_run(AssX); 
      }
      if((get_val(RX)) > valueX || (get_val(RX)) < valueX*(-1)){
          combo_stop(AssX);
          }
      \}   if (InstantTriggers) {
	
		deadzone(PS4_L2,PS4_R2,100,100);

		if(AA1){   
		
		
if(get_val(9)> 1){ combo_run(Auto_Aim);} 
if(abs(get_val(9)) > 8 || abs(get_val(10)) > 9) 
combo_stop(Auto_Aim);}
if(NOADSAA){   
if(get_val(9)> 1){ combo_run(Auto_Aim2);}
if(abs(get_val(9)) > 8 || abs(get_val(10)) > 9) 
combo_stop(Auto_Aim2);}  
    if (SwiftAimAssist) {

        if (get_ival(Ads) && abs(get_ival(RX)) <= PolarRelease && abs(get_ival(RY)) <= PolarRelease) {
            
            if (SwiftBoost && get_ival(Fire)) {
                Radius = SwiftRadius + SwiftBoost;
            }
                else {
                    Radius = SwiftRadius;
                }
            
                    if (ExploitAngleBoost && get_ival(Fire)) {
                        Angle = SwiftAngle + PolarBoost;
                    }
                        else {
                            Angle = SwiftAngle;
                        }
                set_polar(POLAR_RS,Speed = (Speed + Angle) % 360,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 4 + Radius * 328);
            }
        }
	}	if (LinearAssist) {
	
		if ((get_ival(Ads) || get_ival(Fire)) && abs(get_ival(RX)) <= deadZone && abs(get_ival(RY)) <= deadZone) {
			
			Speed += Angle;
		
		if (Speed >= 360) Speed = 0;

			if (get_ival(Fire)) {
                
                Radius = FirePower;
            	Angle  = FireSpeed;
            }
                
                else {
                    
                    Radius = BasePower;
                	Angle  = BaseSpeed;
                }
																			/* â•‘

*/
if (ExploitAssist) {     
RXT = get_val(RX);                                
RYT = get_val(RY); 
ActualMagnitude = isqrt(pow(RXT,3) + pow(RYT,3));   
MaxMagnitude = (ActualMagnitude < 100);             
angle += ExploitAngle + Angle;                                    
angle = angle % 360;  
CosAngle = DamPolar[(angle + 270) % 360];  
SinAngle = DamPolar[angle % 360];
if (ToggleRumbleBoost) {
if (get_ival(Fire)) {
SmartRumble = get_rumble(RumbleToUse());
Angle = ExploitAngleBoost;
if (SmartRumble > 10 && SmartRumble < 90) {
PolarStrength = (ExploitRadius + PolarBoost + ExploitAngleBoost + SmartRumble / 4); 
SmartRumble   = Off;
}
} 
}
if (get_ival(Ads) || get_ival(Fire)) {
if (ActualMagnitude < ExploitRadius) {
SinAngle -= RYT;                                                              
CosAngle -= RXT;
}
else {     
SinAngle = (SinAngle * (200 - ((abs(RYT) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
CosAngle = (CosAngle * (200 - ((abs(RXT) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
}                                                  
if (!get_rumble(RumbleToUse()))
GetShapes(ExploitRadius); 
else 
GetShapes(PolarStrength); 
}
PolarStrength = On; 
SmartRumble   = On;  //oxi
 }
       if (AuraStickyAA){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(PS4_R2)) <= LegacyBattRel && abs(get_ival(PS4_L2)) <= LegacyBattRel) {
                
                    combo_run(Sticky);
                }
            }
                    else {
                        combo_stop(Sticky);
                    }
        }  
     if (AimAssist_LINEAR) {
	 
	    if (event_press(Ads)) { 
	    	
	    	Power = On;
}
	    
	    else if (!get_ival(Ads) && event_press(Fire)) {
	    	
	    	Power = On;
}
	    
	    if (get_ival(Ads) || get_ival(Fire)) {
	    	
	    	AxisXY = isqrt(abs(get_ival(aimX)) * abs(get_ival(aimX)) + abs(get_ival(aimY)) * abs(get_ival(aimY)));
	    	
	    	if (AssistProfile == 1)
	    		
	    		AimAssist(Strength,Increment);
 			    		
         } else {
	    	
	    	CountPower = 0;
	    	power = Off;
        }
}
 
    if (!BuildTrack) {  
       
       
       
     if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
            set_val (Shunt,Off);
         }
      }
  
     
       }
       
                   if(ExpoAA) {   
if(get_val(Ads)> 95){ combo_run(EXPOAAS );}
if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
combo_stop(EXPOAAS);
}
        
		
		   if (AA2) 
        {
			if (get_val(Ads)> 4/1<1000)
			{ 
				combo_run(AimAssist2);
			}
			if (abs(get_val(RX)) > 19 || abs(get_val(RY)) > 19)
			{ 
				combo_stop(AimAssist2);
			}
		}
     }
   
  



if(R1L1_SWAP){swap(3,4);swap(6,7);}if(XR3_SWAP){swap(19,5);}if(MrCiiD1){if(get_val(ADS)>95){combo_run(MrCiiD1);}}            /* â•‘ 
â•‘*/if(abs(get_val(R_X))>19||abs(get_val(R_Y))>19){combo_stop(MrCiiD1);} 														/* â•‘                                                        
â•‘*/if(MrCiiD4){																													/* â•‘
â•‘*/if(get_val(ADS)>95){																											/* â•‘
â•‘*/combo_run(MrCiiD4);}																											/* â•‘
â•‘*/if(event_release(ADS)){combo_stop(MrCiiD4);}}}	
}function GetShapes(f_var) {
if (!SpiralPosition1) {
InnerSpiral -= 1;
if (InnerSpiral < ExploitRadiusMin)
SpiralPosition1 = On;
}
else {
InnerSpiral += 1;
if (InnerSpiral > f_var)
SpiralPosition1 = Off;
}
if (!SpiralPosition2) {
OuterSpiral -= 1;
if (OuterSpiral < ExploitRadiusMin)
SpiralPosition2 = On;
}
else {
OuterSpiral += 1;
if (OuterSpiral > f_var)
SpiralPosition2 = Off;
}
if (ExploitAssist == Circular) {  
RYT = (get_val(RY)) + ((SinAngle * f_var))/100;       
RXT = (get_val(RX)) + ((CosAngle * f_var))/100;  
}
if (ExploitAssist == TallOval) {
RYT = (get_val(RY)) + ((SinAngle * f_var))/100;
RXT = (get_val(RX)) + ((CosAngle * ExploitRadiusMin))/100; 
}
if (ExploitAssist == WideOval) { 
RXT = (get_val(RX)) + ((CosAngle * f_var))/100;  
RYT = (get_val(RY)) + ((SinAngle * ExploitRadiusMin))/100;
}
if (ExploitAssist == Spiral) {
RYT = (get_val(RY)) + ((SinAngle * InnerSpiral))/100;
RXT = (get_val(RX)) + ((CosAngle * OuterSpiral))/100;  
}
if (ExploitAssist == Helix) {
if (PositionT <= 1) {  
RXT = (get_val(RX)) + ((CosAngle * f_var))/100;
}
if (PositionT > 1) {  
RYT = (get_val(RY)) + ((SinAngle * f_var))/100;
}
PositionT++;        
if (PositionT == 4) 
PositionT = Off;
} 
set_val(RX,RXT);
set_val(RY,RYT);
}

function RumbleToUse() {
if (get_rumble(RumA) >= get_rumble(RumB)) 
return RumA;
if (get_rumble(RumA) < get_rumble(RumB)) 
return RumB;
return Off;
}
function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
        Pfb += Pv;
    
    if(Pfb <= Pfv)  
        return Pfb;
        
        if(Pfb > Pfv) {
            Pvid[Pid] = Off;
            
            return Pfb - Pv;
        }
    }

    else {
        Pfb -= Pv;    
        
        if(Pfb >= Psv)  
            return Pfb;

            if(Pfb < Psv) {
                Pvid[Pid] = On; 
        
                return Pfb + Pv;
            }
    } 
           return Off;    
}

function SetPolarVal(Axis,Offset_Val) { 
		
	return clamp(Offset_Val * (100 - abs(get_ival(Axis))) / 100 + get_ival(Axis),-100,100); 
}

function Sin(AngleO) { 
		
	return (Cos(AngleO - 90)); 
}

function Cos(AngleO) {
  	
  	if (AngleO < 0) 
  		AngleO = (AngleO % 360) + 360;
  		
  		AngleO = (AngleO % 360);
		PX_Out = 100;
  		PY_Out = 100;
  		PAngle_Out = AngleO % 45;
	
		if (AngleO < 45) { 
  			PY_Out = (100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 90)  { 
  			PX_Out = (100 * (45 - PAngle_Out)) / 45; 
  		}
  		else if (AngleO < 135) { 
  			PX_Out = (-100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 180) { 
  			PY_Out = (100 * (45 - PAngle_Out)) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 225) {
  			PY_Out = (100 * PAngle_Out) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 270) { 
  			PX_Out = (-100 * (45 - PAngle_Out)) / 45; PY_Out = -100; 
  		}
  		else if (AngleO < 315) { 
  			PX_Out = (100 * PAngle_Out) / 45; PY_Out = -100; 
  		}
  			else { 
  				PY_Out = ( 100 * (45 - PAngle_Out)) / 45; 
  			}
		
			PAngle_Out = abs(PY_Out);
	
			if (abs(PX_Out) > PAngle_Out) PAngle_Out = abs(PX_Out);
				return (PX_Out * PAngle_Out / isqrt((pow(PX_Out, 2) + pow(PY_Out, 2))));
}

function SetPolarValue (Stick,AngleO,RadiusO) {
  		
  	set_val(7 + Stick,(Cos(AngleO) * RadiusO) / 100);
  	set_val(8 + Stick,(Sin(AngleO) * RadiusO) / 100);
 		return;
}
function offset(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
  return;}
function SetPolar (Stick,AngleO,Width,Height) {
  		
  	SetPolarValue(Stick,AngleO,Width);
  	PX[Stick/4] = get_val(Stick + 7);
  	SetPolarValue(Stick, AngleO,Height);
  	PY[Stick/4] = get_val(Stick + 8);
  	set_val(Stick + 7,SetPolarVal(Stick + 7,PX[Stick/4]));
  	set_val(Stick + 8,SetPolarVal(Stick + 8,PY[Stick/4]));
}
function AimAssist (Strength,Step) {

	if (Power) {
		
		Ypower = Strength;
		Xpower = Strength * -1;
		Increment = Step;
		Power = Off;
	}
	
	if (!power) {
	
		Xpower += Increment;
		Ypower -= Increment;
	
	} else {
		
		Xpower -= Increment;
		Ypower += Increment;
	}
	
	CountPower ++;
	
	if (CountPower >= (Strength / Increment)) {
		
		power = !power;
		CountPower = 0;
	}	
	
	if (AxisXY > deadZone) {
	
		if (Reducer) {
		
			set_val(RY,(Ypower - Strength / 2));
			set_val(RX,(Xpower - Strength / 2 * -1));
		
		} else {
		
			set_val(RY,(Ypower - Strength / 2) + get_ival(RY));
			set_val(RX,(Xpower - Strength / 2 * -1) + get_ival(RX));	
		}
		
	} else {
		
		if (Reducer) {
				
			set_val(RY,(Ypower - Strength / 2));
			set_val(RX,(Xpower - Strength / 2 * -1));
			
		} else {
			
			set_val(RY,(Ypower - Strength / 2));
			set_val(RX,(Xpower - Strength / 2 * -1));
		}
	}
}

combo EXPOAAS
{
	set_val(10, (AimAssist_Strength)); wait(10)
	set_val(9, (AimAssist_Strength)); wait(10)
	set_val(10, AimAssist_Strength * -1); wait(10)
	set_val(9, AimAssist_Strength * -1); wait(10);
}
combo Sticky {
    
    set_val(RY,AuraAARY);
    wait(AuraAAWait);
    set_val(RX,AuraAARX);
    
    if (abs(get_ival(LX)) < 20)
        set_val(LX,AuraAARX);
        wait(AuraAAWait);
        set_val(RY,AuraAARY * -1);
        wait(AuraAAWait);
        set_val(RX,AuraAARX * -1);
        
        if (abs(get_ival(LX)) < 20)
            set_val(LX,AuraAARX * -1);
            wait(AuraAAWait);
}
combo AimAssist2  {
set_val(RY, (aav)); wait(delay)
set_val(RX, (aav)); wait(delay)
set_val(RY, aav * -1); wait(delay)
set_val(RX, aav * -1); wait(delay)}
â•‘ combo AA_XY{																																																								
â•‘	set_val(10,xy_val(10,aa__shake));																							/* â•‘
â•‘*/wait(aa_MrCiiD3);																											/* â•‘			
â•‘*/	set_val(9,xy_val(9,aa__shake));																								/* â•‘
â•‘*/set_val(11,xy_val(11,aa__shake));																							/* â•‘
â•‘*/wait(aa_MrCiiD3);																											/* â•‘
â•‘*/set_val(10,xy_val(10,aa__shake*-1));																							/* â•‘
â•‘*/	wait(aa_MrCiiD3);																											/* â•‘
â•‘*/	set_val(9,xy_val(9,aa__shake*-1));																							/* â•‘
â•‘*/	set_val(11,xy_val(11,aa__shake*-1));																						/* â•‘
â•‘*/	wait(aa_MrCiiD3);}																											/* â•‘
â•‘*/combo MrCiiD1{																												/* â•‘
â•‘*/set_val(R_Y,(MrCiiD2));wait(MrCiiD3)																							/* â•‘
â•‘*/set_val(R_X,(MrCiiD2));wait(MrCiiD3)																							/* â•‘
â•‘*/set_val(R_Y,MrCiiD2*-1);wait(MrCiiD3)																						/* â•‘
â•‘*/set_val(R_X,MrCiiD2*-1);wait(MrCiiD3)}																						/* â•‘
â•‘*/combo MrCiiD4{																												/* â•‘
â•‘*/set_val(ADS,100);																											/* â•‘
â•‘*/wait(MrCiiD4_a);																												/* â•‘
â•‘*/set_val(ADS,0);																												/* â•‘
â•‘*/wait(MrCiiD4_b);}	
combo Rumble {
if (VibA) set_rumble(RUMBLE_A,15);
else if (VibB) set_rumble(RUMBLE_B,15);
wait(250);
VibA = Off;
VibB = Off
; reset_rumble();
}
combo Aimbot1{
set_val(Scope_BTN,100); 
wait(AimSpeed); 
set_val(Scope_BTN,0);
wait(delay);    
}
combo AssX { 
set_val(RX, valueX);
wait(delayA);
wait(4);
set_val(RX, valueX*(-1));
wait(delayA);
} 
     combo Auto_Aim {          
set_val(10, (AA_Strength)); wait(1)
set_val(9, (AA_Strength)); wait(1)
set_val(10, AA_Strength * -1); wait(1)
set_val(9, AA_Strength * -1); wait(1)}
combo Auto_Aim2 {          
set_val(10, (NOADSAA_Strength)); wait(1)
set_val(9, (NOADSAA_Strength)); wait(1)
set_val(10, NOADSAA_Strength * -1); wait(1)
set_val(9, NOADSAA_Strength * -1); wait(1)}       
combo StickyAim {
offset(PS4_RY,AimAssistSize);
wait(AimAssistTime);
offset(PS4_RX,AimAssistSize);
offset(PS4_LX,AimAssistSize);
wait(AimAssistTime);
offset(PS4_RY,inv(AimAssistSize));
wait(AimAssistTime);
offset(PS4_RX,inv(AimAssistSize));
offset(PS4_LX,inv(AimAssistSize));
wait(AimAssistTime);}
const int8 DamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
    80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
    6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
    -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
    -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
    -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
    -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
    9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
    82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
    
 /* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*Â¦Â¦       Â¦Â¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*Â¦Â¦   !   Â¦Â¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*Â¦Â¦   "   Â¦Â¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*Â¦Â¦   #   Â¦Â¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*Â¦Â¦   $   Â¦Â¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*Â¦Â¦   %   Â¦Â¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*Â¦Â¦   &   Â¦Â¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*Â¦Â¦       Â¦Â¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*Â¦Â¦   (   Â¦Â¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*Â¦Â¦   )   Â¦Â¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*Â¦Â¦   *   Â¦Â¦*/ 
define PLUS        =  43; /*Â¦Â¦   +   Â¦Â¦*/ 
define COMMA       =  44; /*Â¦Â¦   ,   Â¦Â¦*/ 
define MINUS       =  45; /*Â¦Â¦   -   Â¦Â¦*/ 
define FULLSTOP    =  46; /*Â¦Â¦   .   Â¦Â¦*/ 
define F_SLASH     =  47; /*Â¦Â¦   /   Â¦Â¦*/ 
define COLON       =  58; /*Â¦Â¦   :   Â¦Â¦*/ 
define SEMICOLON   =  59; /*Â¦Â¦   ;   Â¦Â¦*/ 
define B_ARROW     =  60; /*Â¦Â¦   <   Â¦Â¦*/ 
define EQUAL       =  61; /*Â¦Â¦   =   Â¦Â¦*/ 
define F_ARROW     =  62; /*Â¦Â¦   >   Â¦Â¦*/ 
define QUESTION    =  63; /*Â¦Â¦   ?   Â¦Â¦*/ 
define AT          =  64; /*Â¦Â¦   @   Â¦Â¦*/ 
define O_SQUARE    =  91; /*Â¦Â¦   [   Â¦Â¦*/ 
define b_SLASH     =  92; /*Â¦Â¦   \   Â¦Â¦*/ 
define C_SQUARE    =  93; /*Â¦Â¦   ]   Â¦Â¦*/ 
define U_ARROW     =  94; /*Â¦Â¦   ^   Â¦Â¦*/ 
define UNDERSCORE  =  95; /*Â¦Â¦   _   Â¦Â¦*/ 
define TICK        =  96; /*Â¦Â¦   `   Â¦Â¦*/ 
define O_CURLY     = 123; /*Â¦Â¦   {   Â¦Â¦*/ 
define BAR         = 124; /*Â¦Â¦   |   Â¦Â¦*/ 
define C_CURLY     = 125; /*Â¦Â¦   }   Â¦Â¦*/ 
define WAVE        = 126; /*Â¦Â¦   ~   Â¦Â¦*/ 
define CROSS       = 127; /*Â¦Â¦   PS  Â¦Â¦*/ 
define CIRCLE      = 128; /*Â¦Â¦   PS  Â¦Â¦*/ 
define SQUARE      = 129; /*Â¦Â¦   PS  Â¦Â¦*/ 
define TRIANGLE    = 130; /*Â¦Â¦   PS  Â¦Â¦*/ 


define VIEW        = 135; /*Â¦Â¦   XB  Â¦Â¦*/ 
define MENU        = 136; /*Â¦Â¦   XB  Â¦Â¦*/ 


const uint8 Scroll[] = {/* 
 Â¦Â¦> 0 < Â¦Â¦  Â¦Â¦> 1 < Â¦Â¦  Â¦Â¦> 2 < Â¦Â¦  Â¦Â¦> 3 < Â¦Â¦  Â¦Â¦> 4 < Â¦Â¦  Â¦Â¦> 5 < Â¦Â¦  Â¦Â¦> 6 < Â¦Â¦  Â¦Â¦> 7 < Â¦Â¦  Â¦Â¦> 8 < Â¦Â¦  Â¦Â¦> 9 < Â¦Â¦ Â¦Â¦> 10 < Â¦Â¦ Â¦Â¦> 11 < Â¦Â¦ Â¦Â¦> 12 < Â¦Â¦ Â¦Â¦> 13 < Â¦Â¦ Â¦Â¦> 14 < Â¦Â¦ Â¦Â¦> 15 < Â¦Â¦ Â¦Â¦> 16 < Â¦Â¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };


//oxi
              
           
        
 ????????????????