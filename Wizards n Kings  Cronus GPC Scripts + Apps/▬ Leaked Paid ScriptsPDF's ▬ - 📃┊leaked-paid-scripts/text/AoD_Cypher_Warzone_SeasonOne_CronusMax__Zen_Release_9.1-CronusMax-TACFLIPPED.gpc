
                                                        /*  AoD Cypher 9.0 WARZONE SEASONONE /  
                                                        Join my discord ---> https://discord.gg/5BnV4e9HVf
//~~ Important Notice: Please go through  the script below and change anything that needs changing such as button layout and recoil settings -~~//       
*/
//Build V9.2
//~~int script -- Instruction Manual for Mods//
//--Rapid Fire (LT/L2 + LEFT)
//--CrouchShot- GhostPeaking (L2 + RIGHT)
//-- Slide Cancel LT/L2+DOWN
//--Anti Recoil (LT/L2 + OPTIONS) Edit on line 37  (on by default)
//~~int - end of instructions 
///--------------------------------------------------------STEP 1-
//~~~~~~~~~~~~~~Script Start Button Layout...
    define SHOOT_BUTTON    = PS4_R1;  //Change To R1 For Flipped Bumpers                  
    define AIM_BUTTON      = PS4_L1;  //Change To L1 For Flipped Bumpers                     
    define SPRINT_BUTTON   = PS4_L3;           
    define PRONE_BUTTON    = PS4_R3;  //CHANGE CIRCLE TO R3 FOR TACTICAL                         
    define JUMP_BUTTON     = PS4_CROSS;
    define TACTICAL_BUTTON = PS4_L1;  //Change To L2 For Flipped Bumpers                  
    define LETHAL_BUTTON   = PS4_R1;  //Change To R2 For Flipped Bumpers                   

    ///-------------------------------------------------------- -
//~~~~~~~~~~End Of Button Layout...

///--------------------------------------------------------STEP 2
//~~~ Starting Sensitivity settings~~~///

int Sensitivity_Settings = 8;  // Change the number 8  to your in game sensitivity but add an extra 4 - Example if you play with 5 change this number to 9
define Sensitivity_Correction = 2;//do not touch
///-------------------------------------------------------- /
//~~~ End of Settings~~~//
///--------------------------------------------------------STEP 3
//~~ Starting Recoil Settings ~~//

define AodSmoothRecoil        = TRUE;
define AODINVERTED   =     1;  //( IF INVERTED SET TO  -1  INSTEAD OF  1 )
	
int SMOOTH_RECOIL_VERTICAL      =    19;  //read below how to adjust
int SMOOTH_RECOIL_HORIZONTAL    =    -12; // read below how to adjust 
    
    // Please change The verical number and Horizontal number -
    //If you shoot too high - increase the vertical number -- ** Tip- Always High by 2 then test
    //If you shoot too low then decrease the vertical number -- **Tip - Always low by 2 then test
    //TIP ** once you change recoil instead of saving it to device keep everything connected to the console and pc and click  complier build and run
    //you can test the recoil this way as its faster and then finally save onto device once done.
    // Horizontal values can be postive or negative  a negative with a - (minus) by the number.
    //You may not need a minus number but you will need to test this
    //I recommend going up 2 numbers then test (save back onto device) 
    // Then go down 2 numbers if going high didnt succeed once you go to 0 you then go to -1 if you need to lower the horizontal
    /// Please join my discord(Link Above) and check the tab "Youtube"  Subscribe and post your name and I will give you exclusive link to get the best recoil//

//~~ Starting Slide Cancel Mod~~
///~~ Slide Cancel Feature ~~
int Slide_Cancel 	= FALSE; // off by default change to TRUE to turn on by default // Can be turned on and off in game read above ^ 
define slide_delay 	= 120;//LEAVE




////DO NOT EDIT ANYTHING BELOW THIS LINE -- THIS IS PURE CODE BY AOD/////
///Known Scammers:  Muscle - Notorious -//
//Don't trust these  "free script discords"  they want you to donate and say script selling is bad idea!!  but donating is the same!//
// I code my scripts myself - Haters will hate because they cannot code and they steal my work //
// I also sell recoil values to people if you struggle doing it yourself just pm me//

int AODRF = FALSE; 
int AODDS = FALSE; 
int AODDSS = 30; 
int slide_enable; 

define AODHT = TRUE; 
define AODES = FALSE; 
define AODHB = FALSE; 
define AODSAA = TRUE; 
define AODV = 23; 
define AODSAM = 10; 
define AODB9 = 7; 
define AOD2 = 5; 
define AOD2A = 30; 
define AOD2AD = 70; 
define AOD2AD3 = -70; 
define AOD2AD32 = 25; 
define AOD2AD321 = -25; 

int AOD2AD32134     = 0; 
int AOD2AD3213     = 0; 
int AOD2AD321344  = 0; 
int AOD2AD32134455  = 0; 
int AOD2AD3213445 = FALSE; 
int AOD2AD321344555 = 0; 
int AOD2AD32134452552 = 0; 
int AOD2AD3213445552 = FALSE; 
int AOD2AD132134452552 = 0;  
int AOD2AD1321344452552 = 0; 
int AOD2AD13231344452552, AOD2AD132341344452552, AOD2AD32132341344452552; 
int AOD2A2D322132341344452552,AOD2A2D32132341344452552,AOD2A2D3322132341344452552; 

main { 

if (AOD2AD3213445552 == FALSE){ AOD2AD132134452552 
= get_val(PS4_RX);  AOD2AD1321344452552 
= get_val(PS4_RY); AOD2AD3213445552 = TRUE;} AOD2AD32134 = AOD2AD321344;AOD2AD3213 = AOD2AD32134455; AOD2AD321344 
= get_lval(PS4_RX)- AOD2AD132134452552; AOD2AD32134455 
= get_lval(PS4_RY)- AOD2AD1321344452552; 

if(get_val(AIM_BUTTON)){  
if(abs(AOD2AD321344) <= AOD2AD32 && abs(AOD2AD32134455) <= AOD2AD32){  

if(abs(AOD2AD32134 - AOD2AD321344) < 15){ combo_stop(AODAAP); AOD2AD3213445 = FALSE; 
if(get_val(SHOOT_BUTTON) > 95){  combo_stop(AODFTA); AOD2AD32134452552 = 0; combo_run(AODSAAAS);} 
else{ combo_stop(AODSAAAS); AOD2AD321344555 = 0; combo_run(AODFTA);}}} 
else if(abs(AOD2AD321344) <= AOD2AD && abs(AOD2AD32134455) <= AOD2AD){  combo_stop(AODFTA); combo_stop(AODSAAAS); AOD2AD321344555 = 0; AOD2AD32134452552 = 0; combo_run(AODAAP);}}  
else { combo_stop(AODFTA); combo_stop(AODSAAAS); combo_stop(AODAAP); AOD2AD321344555 = 0; AOD2AD32134452552 = 0; AOD2AD3213445 = FALSE;} 

if (AODSAA) { 
if(get_val(AIM_BUTTON)) combo_run(AOADD); 
else combo_stop(AOADD);} 

if(AODHB) { 
if( get_val(AIM_BUTTON) ) combo_run(AOADDA); } 
if(AODHT) { deadzone(AIM_BUTTON,SHOOT_BUTTON,100,100); } 
if(AODES && get_val(PRONE_BUTTON))combo_run(AOADDAW); 
if(get_val(AIM_BUTTON) && event_press(PS4_LEFT)) { combo_run (AAODDROW); AODRF=!AODRF;} 

if (AODRF) { 
if(get_val(SHOOT_BUTTON)) { combo_run (AODRRP);}} 
if(Sensitivity_Correction) { AOD2AD13231344452552=100-(Sensitivity_Settings); AOD2AD132341344452552=96-(Sensitivity_Settings);  
if (get_val (AIM_BUTTON)) { 

if(get_val(SHOOT_BUTTON) && get_val(AIM_BUTTON)) { AOD2AD32132341344452552 = AOD2AD132341344452552; } 

if(!get_val(SHOOT_BUTTON) && !get_val(AIM_BUTTON) || get_val (SHOOT_BUTTON) &&!get_val(AIM_BUTTON)) { AOD2AD32132341344452552 = 100; }   
if(!get_val(SHOOT_BUTTON) && get_val(AIM_BUTTON) || get_val (LETHAL_BUTTON) && !get_val (AIM_BUTTON) || get_val (TACTICAL_BUTTON) && !get_val (AIM_BUTTON)) { AOD2AD32132341344452552 = AOD2AD13231344452552; } 

if(AOD2AD32132341344452552 > 100) AOD2AD32132341344452552 = 100;  sensitivity(PS4_RX, NOT_USE, AOD2AD32132341344452552); sensitivity(PS4_RY, NOT_USE, AOD2AD32132341344452552); } } 
if(get_val(AIM_BUTTON) && event_press(PS4_RIGHT)) { combo_run (AAODDROW); AODDS=!AODDS;} 

if (AODDS) { 
if(get_val(SHOOT_BUTTON)) { combo_run (AAODDRO);}} 

if(get_val(AIM_BUTTON) && event_press(PS4_OPTIONS)) { combo_run (AAODDROW); AOD2A2D3322132341344452552=!AOD2A2D3322132341344452552;} 
if (AodSmoothRecoil) { 
if (get_val(AIM_BUTTON) && get_val(SHOOT_BUTTON)) { combo_run(AOD2A2D322132341344452552); }  

if (abs(get_val(PS4_RY)) > SMOOTH_RECOIL_VERTICAL + 2 || abs(get_val(PS4_RX)) > SMOOTH_RECOIL_VERTICAL + 2) { combo_stop(AOD2A2D322132341344452552); }  } 
if(abs(get_val(PS4_LY)) < 10 && abs(get_val(PS4_LX)) < 10 ){ set_val(PS4_LY,0); set_val(PS4_LX,0); } 
if(abs(get_val(PS4_RY)) < 10 && abs(get_val(PS4_RX)) < 10 ){ set_val(PS4_RY,0); set_val(PS4_RX,0); } 

if (get_val(PS4_L2) && event_press(PS4_DOWN)){
Slide_Cancel=!Slide_Cancel;} 

if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) { 
if(get_rumble(RUMBLE_A) > 87) { slide_enable = TRUE } 
if(get_rumble(RUMBLE_A) > -2) { slide_enable = FALSE } 
if(Slide_Cancel) { 
if(event_release (PRONE_BUTTON)){ combo_run(ASC) } }
  } }
  
combo AODAAP{ AOD2AD32134 = AOD2AD321344 AOD2AD3213 = AOD2AD32134455 
wait(AODSAM); AOD2AD321344 
= get_lval(PS4_RX)- AOD2AD132134452552; AOD2AD32134455 
= get_lval(PS4_RY)- AOD2AD1321344452552;  

if (AOD2AD3213445 == TRUE ){ AODAAPS(AOD2AD32134, AOD2AD321344, 
1, 0, 1, 0 );  AODAAPS(AOD2AD3213, AOD2AD32134455, 
1, 0, 0, 1 );}  AOD2AD32134 = AOD2AD321344; AOD2AD3213 = AOD2AD32134455;

wait(AODSAM); AOD2AD321344 
= get_lval(PS4_RX)- AOD2AD132134452552; AOD2AD32134455 
= get_lval(PS4_RY)- AOD2AD132134452552;  

if (AOD2AD3213445 == TRUE ){ AODAAPS(AOD2AD32134, AOD2AD321344, 
0, 1, 1, 0 ); AODAAPS(AOD2AD3213, AOD2AD32134455, 
0, 1, 0, 1 );} AOD2AD3213445 = TRUE; 
wait(AODSAM);
}

combo AODFTA { 
set_val(PS4_RX,(15 - AOD2AD32134452552)); 
set_val(PS4_LX,(-15 + AOD2AD32134452552)); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RX,(15 - AOD2AD32134452552)); 
set_val(PS4_RY,(10 - AOD2AD32134452552)); 
set_val(PS4_LX,(-5 + AOD2AD32134452552)); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM);  
set_val(PS4_RY,(10 - AOD2AD32134452552)); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RX,(-15 + AOD2AD32134452552)); 
set_val(PS4_RY,(10 - AOD2AD32134452552)); 
set_val(PS4_LX,(5 - AOD2AD32134452552)) 
wait(AODSAM); 
wait(AODSAM) 
wait(AODSAM) 
set_val(PS4_RX,(-15 + AOD2AD32134452552)); 
set_val(PS4_LX,(15 - AOD2AD32134452552)) 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RX,(-15 + AOD2AD32134452552)); 
set_val(PS4_RY,(-10 + AOD2AD32134452552)); 
set_val(PS4_LX,(5 - AOD2AD32134452552)) 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RY,(-10 + AOD2AD32134452552));  
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RX,(15 - AOD2AD32134452552));
set_val(PS4_RY,(-10 + AOD2AD32134452552)); 
set_val(PS4_LX,(-5 + AOD2AD32134452552)) 
wait(AODSAM); 
wait(AODSAM); AOD2AD32134452552 = AOD2AD32134452552 + 2; 

if ( AOD2AD32134452552 >10){ AOD2AD32134452552 = 0;}   } 

combo AODSAAAS { 
set_val(PS4_RX,(4 + AOD2AD321344555)); 
set_val(PS4_LX,(-15+ AOD2AD321344555)); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RY,(5 + AOD2AD321344555)); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
set_val(PS4_RX,(-4 - AOD2AD321344555)); set_val(PS4_LX,15 - AOD2AD321344555 ); 
wait(AODSAM); 
wait(AODSAM) 
set_val(PS4_RY,(5 + AOD2AD321344555)); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); 
wait(AODSAM); AOD2AD321344555 = AOD2AD321344555 + 2; 

if ( AOD2AD321344555 >10){ AOD2AD321344555 = 0;}}   
combo AOADDA {  
set_val(SPRINT_BUTTON, 100);  
wait(100);  
}

combo AOADDAW{ 
set_val(PRONE_BUTTON,100); 
wait(800);  } 
combo AODRRP { 
set_val(SHOOT_BUTTON, 100);  
wait(40);	
set_val(SHOOT_BUTTON, 0);  
wait(30); } 
combo AAODDRO { 
set_val(PRONE_BUTTON,100); 
wait(40); 
wait(AODDSS); 
set_val(PRONE_BUTTON,100);
} 

combo AOADD { 
set_val(PS4_RY,xy_val(PS4_RY, AODV)); 
wait(20); 
set_val(PS4_RX,xy_val(PS4_RX, AODV)); 
set_val(PS4_LX,xy_val(PS4_LX, AODV));
wait(20); 
set_val(PS4_RY,xy_val(PS4_RY, AODV * -1)); 
wait(20); 
set_val(PS4_RX,xy_val(PS4_RX, AODV * -1)); 
set_val(PS4_LX,xy_val(PS4_LX, AODV * -1)); 
wait(20); }

combo AOD2A2D322132341344452552 { AOD2A2D32132341344452552++; AOD2A2D322132341344452552 
= get_val(PS4_RY) + SMOOTH_RECOIL_VERTICAL + AOD2A2D32132341344452552; 

if(AOD2A2D32132341344452552 == 10) { AOD2A2D32132341344452552 = 0; } 

if(AOD2A2D322132341344452552 > 100) { AOD2A2D322132341344452552 = 100; } 
set_val(PS4_RY,AOD2A2D322132341344452552 * AODINVERTED); AOD2A2D322132341344452552 
= get_val(PS4_RX) + SMOOTH_RECOIL_HORIZONTAL; 

if(AOD2A2D322132341344452552 > 100){ AOD2A2D322132341344452552 = 100; } set_val(PS4_RX,AOD2A2D322132341344452552); }

combo AAODDROW {     
set_rumble(RUMBLE_A, 85);     
wait(225);    
reset_rumble();      } 

combo ASC {   
set_val(PRONE_BUTTON, 100); 
wait(slide_delay); 
set_val(PRONE_BUTTON, 0); 
wait(60); 
set_val(PRONE_BUTTON, 100); 
wait(50); 
set_val(PRONE_BUTTON, 100); 
set_val(JUMP_BUTTON, 100); 
wait(60); 
set_val(PRONE_BUTTON, 0); 
set_val(JUMP_BUTTON, 100); 
wait(10); 
set_val(JUMP_BUTTON, 0);} 

function xy_val(f_axis,f_val) { 

if(abs(get_val(f_axis)) < (AODV + 1))   
return f_val;  
return get_val(f_axis);}

function AODAAPS(AODLV, AODCV, AODBV, AODCV, AODXX, AODYY ) {
if(abs(AODLV - AODCV) < AOD2A){ 
if(AODLV < AODCV){
if (AODBV){

if (AODXX)
set_val(PS4_RX, (AODCV + AODB9));  
if (AODYY) 
set_val(PS4_RY, (AODCV + AODB9));} 
else if(AODCV){ 
if (AODXX) 
set_val(PS4_RX, (AODCV - AOD2));  
if (AODYY) 
set_val(PS4_RY, (AODCV - AOD2));}}             
else{ 
if (AODBV){ 
if (AODXX) 
set_val(PS4_RX, (AODCV - AODB9));  
if (AODYY) 
set_val(PS4_RY, (AODCV - AODB9));} 
else if(AODCV){                          
if (AODXX) 
set_val(PS4_RX, (AODCV + AOD2));  
if (AODYY) 
set_val(PS4_RY, (AODCV + AOD2));}}}

} 
