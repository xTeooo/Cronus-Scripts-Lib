// 																			APEX Exodus by OmegaLabz <10.21.21> <V1.00>

/*



                                                                                                
                                                                                                
               AAA               PPPPPPPPPPPPPPPPP   EEEEEEEEEEEEEEEEEEEEEEXXXXXXX       XXXXXXX
              A:::A              P::::::::::::::::P  E::::::::::::::::::::EX:::::X       X:::::X
             A:::::A             P::::::PPPPPP:::::P E::::::::::::::::::::EX:::::X       X:::::X
            A:::::::A            PP:::::P     P:::::PEE::::::EEEEEEEEE::::EX::::::X     X::::::X
           A:::::::::A             P::::P     P:::::P  E:::::E       EEEEEEXXX:::::X   X:::::XXX
          A:::::A:::::A            P::::P     P:::::P  E:::::E                X:::::X X:::::X   
         A:::::A A:::::A           P::::PPPPPP:::::P   E::::::EEEEEEEEEE       X:::::X:::::X    
        A:::::A   A:::::A          P:::::::::::::PP    E:::::::::::::::E        X:::::::::X     
       A:::::A     A:::::A         P::::PPPPPPPPP      E:::::::::::::::E        X:::::::::X     
      A:::::AAAAAAAAA:::::A        P::::P              E::::::EEEEEEEEEE       X:::::X:::::X    
     A:::::::::::::::::::::A       P::::P              E:::::E                X:::::X X:::::X   
    A:::::AAAAAAAAAAAAA:::::A      P::::P              E:::::E       EEEEEEXXX:::::X   X:::::XXX
   A:::::A             A:::::A   PP::::::PP          EE::::::EEEEEEEE:::::EX::::::X     X::::::X
  A:::::A               A:::::A  P::::::::P          E::::::::::::::::::::EX:::::X       X:::::X
 A:::::A                 A:::::A P::::::::P          E::::::::::::::::::::EX:::::X       X:::::X
AAAAAAA                   AAAAAAAPPPPPPPPPP          EEEEEEEEEEEEEEEEEEEEEEXXXXXXX       XXXXXXX
                                                                                                
                                                                                                
                                                                                                                          
                                                                                                                          
EEEEEEEEEEEEEEEEEEEEEEXXXXXXX       XXXXXXX     OOOOOOOOO     DDDDDDDDDDDDD       UUUUUUUU     UUUUUUUU   SSSSSSSSSSSSSSS 
E::::::::::::::::::::EX:::::X       X:::::X   OO:::::::::OO   D::::::::::::DDD    U::::::U     U::::::U SS:::::::::::::::S
E::::::::::::::::::::EX:::::X       X:::::X OO:::::::::::::OO D:::::::::::::::DD  U::::::U     U::::::US:::::SSSSSS::::::S
EE::::::EEEEEEEEE::::EX::::::X     X::::::XO:::::::OOO:::::::ODDD:::::DDDDD:::::D UU:::::U     U:::::UUS:::::S     SSSSSSS
  E:::::E       EEEEEEXXX:::::X   X:::::XXXO::::::O   O::::::O  D:::::D    D:::::D U:::::U     U:::::U S:::::S            
  E:::::E                X:::::X X:::::X   O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U S:::::S            
  E::::::EEEEEEEEEE       X:::::X:::::X    O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U  S::::SSSS         
  E:::::::::::::::E        X:::::::::X     O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U   SS::::::SSSSS    
  E:::::::::::::::E        X:::::::::X     O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U     SSS::::::::SS  
  E::::::EEEEEEEEEE       X:::::X:::::X    O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U        SSSSSS::::S 
  E:::::E                X:::::X X:::::X   O:::::O     O:::::O  D:::::D     D:::::DU:::::D     D:::::U             S:::::S
  E:::::E       EEEEEEXXX:::::X   X:::::XXXO::::::O   O::::::O  D:::::D    D:::::D U::::::U   U::::::U             S:::::S
EE::::::EEEEEEEE:::::EX::::::X     X::::::XO:::::::OOO:::::::ODDD:::::DDDDD:::::D  U:::::::UUU:::::::U SSSSSSS     S:::::S
E::::::::::::::::::::EX:::::X       X:::::X OO:::::::::::::OO D:::::::::::::::DD    UU:::::::::::::UU  S::::::SSSSSS:::::S
E::::::::::::::::::::EX:::::X       X:::::X   OO:::::::::OO   D::::::::::::DDD        UU:::::::::UU    S:::::::::::::::SS 
EEEEEEEEEEEEEEEEEEEEEEXXXXXXX       XXXXXXX     OOOOOOOOO     DDDDDDDDDDDDD             UUUUUUUUU       SSSSSSSSSSSSSSS   
                                                                                                                          


 .----------------.  .----------------. 
| .--------------. || .--------------. |
| |   ______     | || |  ____  ____  | |
| |  |_   _ \    | || | |_  _||_  _| | |
| |    | |_) |   | || |   \ \  / /   | |
| |    |  __'.   | || |    \ \/ /    | |
| |   _| |__) |  | || |    _|  |_    | |
| |  |_______/   | || |   |______|   | |
| |              | || |              | |
| '--------------' || '--------------' |
 '----------------'  '----------------' 




 ▄▀▀▀▀▄   ▄▀▀▄ ▄▀▄  ▄▀▀█▄▄▄▄  ▄▀▀▀▀▄    ▄▀▀█▄   ▄▀▀▀▀▄      ▄▀▀█▄   ▄▀▀█▄▄   ▄▀▀▀▀▄   
█      █ █  █ ▀  █ ▐  ▄▀   ▐ █         ▐ ▄▀ ▀▄ █    █      ▐ ▄▀ ▀▄ ▐ ▄▀   █ █     ▄▀  
█      █ ▐  █    █   █▄▄▄▄▄  █    ▀▄▄    █▄▄▄█ ▐    █        █▄▄▄█   █▄▄▄▀  ▐ ▄▄▀▀    
▀▄    ▄▀   █    █    █    ▌  █     █ █  ▄▀   █     █        ▄▀   █   █   █    █       
  ▀▀▀▀   ▄▀   ▄▀    ▄▀▄▄▄▄   ▐▀▄▄▄▄▀ ▐ █   ▄▀    ▄▀▄▄▄▄▄▄▀ █   ▄▀   ▄▀▄▄▄▀     ▀▄▄▄▄▀ 
         █    █     █    ▐   ▐         ▐   ▐     █         ▐   ▐   █    ▐          ▐  
         ▐    ▐     ▐                            ▐                 ▐                  



*/




//Prof Setup
    define ExoSwapProf_toggle_btn_redundant_  = PS4_TRIANGLE;// press
    define ExoSwapProf_toggle_btn          = FALSE; //1 Button press for prof. swap
    define ExoSwapProf_toggle_btn_redundant_copy_  = PS4_L2;  //  hold
    define profile_switch_button3  = PS4_LEFT;//  press
    define ExoSwapProf_toggle_btn_ind_def_main_x_2 = TRUE; //2 button presses for prof. swap
    int ExoInfMelee_enabled = FALSE	;
    define Exo_Dropshot_btn    = PS4_CIRCLE;
    int USE_SLIDE_CANCEL 	        = TRUE;
    define slide_CANCEL_delay 		= 60;
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________    
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
define FIRE                     = PS4_R2;
define SWAP_WEAPON              = PS4_TRIANGLE;
define LETHAL                   = PS4_R1;
define RELOAD                   = PS4_SQUARE;
define JUMP                     = PS4_CROSS;
define TAC_GRENADE              = PS4_L1;
define LX                       = PS4_LX;
define LY                       = PS4_LY;
define UP                       = PS4_UP;
define DOWN                     = PS4_DOWN;
define LEFT                     = PS4_LEFT;
define RIGHT                    = PS4_RIGHT;
define TOUCHPAD                 = PS4_TOUCH;    
define ADS                      = PS4_L2;
define MELEE                    = PS4_R3;
define RUN                      = PS4_L3;
define CROUCH                   = PS4_CIRCLE;
define PS                       = PS4_PS; 
define SHARE                    = PS4_SHARE; 
define OPTIONS                  = PS4_OPTIONS; 
define RX                       = PS4_RX;
define RY                       = PS4_RY;


//________________________________________________________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  
//________________________________________________________________________________________________________________________________________________________  




define LA_sens_add = 2;define RA_deadzone = 0; define RA_sens_add = 0;   
const string TITLE = "EXODUS"; const string OMEGALABZ = "V1";
const string V1_X_MAIN = " APEX ";
const string OFF = "OFF"; const string ON  = "ON"; 
const string Exo_Saveusrmenu_vals= "CONFIG SAVED";
const string PROFILE_1 = "  MAIN   "; 
const string PROFILE_2 = "  SIDE   "; 
const string Exo_AR_engaged_main_switch   = "ExoBaseAR";	
const string ExodusAR     = "Exodus AR";    
const string ExodusRF    = "RF";           
const string ExodusAAMain       = "ExoAA";          
const string ExodusAAMainv5     = "EXOV5";             
const string ExodusAABasic     = "ExoBaseAim";       
const string ExodusAAPolar     = "ExoPolar";      
const string ExodusAAusrbase    = "ExoGLUE"        
const string ExodusSensRAGE    = "SENS NITRO";         
const string DSHOT     = "Dropshot";          
const string FazeScope   = "FaZe Scope"        
const string AutoSteadyAimEXODUS  = "SteadyAim";      
const string EXODUSEP   = "EXOEP";       
const string ExodusInstaPing    = "TMHelper";     
const string AutoStrafeEXODUS      = "AutoStrafe";       
const string ExodusFlipped         = "FLIPPED";      
const string ExoInvert     = "INVERTED"; 
const string ExoSlideCancel  = "ExoSC" ;define LA_deadzone = 1;int ExoDefind_xx_1;define Exolastmodiddef = 17;define Exofinaleditstringdef = 10;const string ANTIRECOIL_VERTICAL      = "ExoAR V"; 		  const string ANTIRECOIL_HORIZONTAL    = "ExoAR H";	      
const string ANTIRECOIL_START         = "Begin";        const string ANTIRECOIL_END           = "Stop";       const string ANTIRECOIL_TIME          = "Time";      const string HORIZONTAL_START         = "H begin"; const string HORIZONTAL_END           = "H stop";   const string HORIZONTAL_TIME          = "H Time";   const string EXO_RF_RPM_xX             = "RPM";  const string EXO_AI_REC_TIME             = "AI Samp";   const string EXO_AI_AIM_RAGE_X                 = "AI boost";      const string EXO_AI_AIM_COR_Y               = "AI perf";    const string EXO_AI_AIM_COR_Z               = "% Cor" ;  const string AIMBOOST1                = "AI boost2";     const string EXO_AI_AIM_COR_y              = "AI perf2";     const string EXO_AI_AIM_COR_X              = "Str";   const string INGAMESENS               = "Sens";    const string EXO_POLAR_SIZE             = "Magnitude";        const string EXO_POLAR_VECTOR              = "Vector";        const string EXO_GLUE_STR           = "GLUEstr";     const string EXO_GLUE_TIME           = "Time";     const string GENSENS                  = "Base Sens";  const string ADSSENS                  = "ADS Sens";    const string FIRESENS                 = "Fire Sens";  const string ADSFIRESENS              = "ADSplusSen"; const string GRENADESENS              = "LethalSens";   const string DROPSHOTSPEED            = "Time"; const string QUICKSCOPESPEED          = "Delay";
int ExovaldefIND_x_2;define valindexdefnum = 27;const uint8 VALUES[][] = { 		
    {    24, 0,24, 26,24,0,0,0,1,1},	
    {    11, 0,11, 21,25,0,0,0,1,1}
    }; 	                                                            int exoarv[2]; int exoarh[2];int exoarstart[2];int exoarstop[2];int exoarstime[2];int exoarHtimestart[2];int exoarHtimestop[2];int exoarHtime[2];
int exorfrpm[2];int slide_cancel; int exoprofiddef; int exovaldefindx;define eoldefmain = 9;int ExoAR_switch[2];   int ExoAR_switchv2[2] int ExoRF_switch[2];  int ExoAKRF_switch[2];   int ExoAutoSteadyAim_switch[17]; int ExoFaze_scope_switch_[2];define AMOUNT_OF_PROFILES = 2;  define AMOUNT_OF_MULTI_TOGGLE = 6;
define RAPID_FIRE_TOGGLE_BUTTON 	= PS4_RIGHT;
define ExoRabbitHopTog_main             = PS4_DOWN;    
int ExoGLUE_aim;int ExoGlueAimSize;int ExoGlueAimTime;int ExoAim_enabled;int ExoAirecordthreshold;int ExoRAGEAIMx;int ExoAIaimengaged;int ExoAimlimind;define ExoAimPOSlthreshold = 70;define ExoAimNEGlthreshold = -70;define POS_Micro_MVT_Limit = 50;define NEG_Micro_MVT_Limit = -50;int X_Last_Value     = 0;int Y_Last_Value     = 0;int X_Current_Value  = 0;int Y_Current_Value  = 0;int Exo_AI_rec_finished = FALSE;int Exo_sPYRO_BURST = 0;int Exo_AI_micro_adj_burst = 0;
int Joystick_calibration = FALSE;int RX_Axis_Joystick_calibrate = FALSE; int RY_Axis_Joystick_calibrate = FALSE;
int Current_State          = 0;int Aim_Abuse_State      = 2;define Get_Last_Value     = 0;define Get_Current_Value = 1;int mvt = 0;int Aim_Boost_Val = 0; int Aim_Correction_Val = 0;int ExoAimV6on; int ExoFaZescopeDelay; int ExoPOLARMAXSPEED = 32;int ExoPOLARMAXCOORD = 34;		  						  int PolarBooster = TRUE;									 int PR_Boost = 6; 									   int stick_input;int ExoBaseAimyz;int ingamesens;int ads_grenade_sens;int ads_fire_sens;int Sens;int ExoPolar_remix;int angle;int RS_gr;int toptroutfoxtrot=326, topsalmonfoxhop=328; define RS=POLAR_RS; int Radius;int rnd;int Exosensxx;int ExoGeneralSensInd;int ExoAimdownsightsendind;int Exofiresensind;int Exoadsfiresensind;int Exolethalsensind;int USE_SENS;			int drop_shot;int ExoDSspeed;int ExoRabbitHopTog_secondary;            int USE_Bunny_Hop
int ExoTeamHelper_on;int ExoEP_on;int ExoAutostrafe_enabled;int Exoflipped_enabled;int Exoinvert_enabled;
const uint8 numConvMethodOL[] = 
	{48,49,50,51,52,53,54,55,56,57};
int i;int c,c_val;data(      1,0,0,0,  1,0,1,0,  0,0,0,1,  0,0,1,0,      0,1,0,0,  1,1,1,0,  0,1,1,0,  0,0,0,0 );     int Exo_display_t = TRUE;int Exo_display_mm; 
int display_black;int ExoMainMenu;	int ExoEditValsMenu;int ExoMODKILLSWITCH;                                            int AntirecoilVertical; int TaylorARorizontal;
int invert; int i_val;                                                        int i_pnt;                                                        int i_num;                                                        int i_cnt;                                                        int v,ar_y;
int i_val_h;int i_pnt_h;int i_num_h;int i_cnt_h;int v_x,ar_x;int hold_time;                                                    int rest_time;int led_on;
int led_off; int q;											int double__tap[30];int ExoMidnightRunx; int Exoprofidentifier_main; 
init{

	while(q < 30) 
	{
		double__tap[q] = -1;       
		q++;
	}

    	ExoAR_switch[0]  = get_pvar(SPVAR_1, 0, 1, 0 );        exoarv[0]   = get_pvar(SPVAR_7 , -99, 99, 24);         ExoAR_switchv2[0]    = get_pvar(SPVAR_2, 0, 1, 0 );        exoarh[0] = get_pvar(SPVAR_8 , -99, 99, -3);ExoRF_switch[0]  = get_pvar(SPVAR_3, 0, 1, 0 );        exoarstart[0]      = get_pvar(SPVAR_9 , -99, 99, 0);ExoAKRF_switch[0]    = get_pvar(SPVAR_4, 0, 1, 0 );        exoarstop[0]        = get_pvar(SPVAR_10, -99, 99, 0); ExoAutoSteadyAim_switch[0]  = get_pvar(SPVAR_5, 0, 1, 0 );        exoarstime[0]       = get_pvar(SPVAR_11, -99, 99, 0);                                                           ExoFaze_scope_switch_[0]  = get_pvar(SPVAR_6, 0, 1, 0 );        exoarHtimestart[0]      = get_pvar(SPVAR_12, -99, 99, 0); exoarHtimestop[0]        = get_pvar(SPVAR_13, -99, 99, 0);exoarHtime[0]       = get_pvar(SPVAR_14, -99, 99, 0);exorfrpm[0]          = get_pvar(SPVAR_15,  25, 25, 25);USE_SLIDE_CANCEL         = get_pvar(SPVAR_16,   0,  1, 50);  ExoAR_switch[1]  = get_pvar(SPVAR_17, 0, 1, 0 );       exoarv[1]   = get_pvar(SPVAR_23, -99, 99, 11);         ExoAR_switchv2[1]    = get_pvar(SPVAR_18, 0, 1, 0 );       exoarh[1] = get_pvar(SPVAR_24, -99, 99, -1);ExoRF_switch[1]  = get_pvar(SPVAR_19, 0, 1, 0 );       exoarstart[1]      = get_pvar(SPVAR_25, -99, 99, 0);ExoAKRF_switch[1]    = get_pvar(SPVAR_20, 0, 1, 0 );       exoarstop[1]        = get_pvar(SPVAR_26, -99, 99, 0); ExoAutoSteadyAim_switch[1]  = get_pvar(SPVAR_21, 0, 1, 0 );       exoarstime[1]       = get_pvar(SPVAR_27, -99, 99, 0);                                                           ExoFaze_scope_switch_[1]  = get_pvar(SPVAR_22, 0, 1, 0 );       exoarHtimestart[1]      = get_pvar(SPVAR_28, -99, 99, 0); exoarHtimestop[1]        = get_pvar(SPVAR_29, -99, 99, 0);exoarHtime[1]       = get_pvar(SPVAR_30, -99, 99, 0);exorfrpm[1]          = get_pvar(SPVAR_31,   25, 25,25);ExoAim_enabled             = get_pvar(SPVAR_33, 0, 1, 0);ExoAimV6on            = get_pvar(SPVAR_34, 0, 1, 0);ExoAirecordthreshold            = get_pvar(SPVAR_45,  1, 10, 9);         ExoBaseAimyz          = get_pvar(SPVAR_35, 0, 1, 0);ExoRAGEAIMx                = get_pvar(SPVAR_46,  1, 15, 10);       ExoPolar_remix             = get_pvar(SPVAR_36, 0, 1, 0);ExoAIaimengaged           = get_pvar(SPVAR_47,  1, 15, 7);ExoGLUE_aim            = get_pvar(SPVAR_37, 0, 1, 0);ExoAimlimind     = get_pvar(SPVAR_48,  1, 60, 30);drop_shot             = get_pvar(SPVAR_38, 0, 1, 0);ingamesens               = get_pvar(SPVAR_49,  1, 20, 10);Exosensxx                = get_pvar(SPVAR_39, 0, 1, 0);ExoPOLARMAXCOORD   = get_pvar(SPVAR_50,  1, 99, 15);ExoTeamHelper_on            = get_pvar(SPVAR_40, 0, 1, 0);ExoPOLARMAXSPEED = get_pvar(SPVAR_51,  1, 99, 15);ExoEP_on            = get_pvar(SPVAR_41, 0, 1, 0);ExoGlueAimSize           = get_pvar(SPVAR_52,  1, 50, 20);ExoAutostrafe_enabled            = get_pvar(SPVAR_42, 0, 1, 0);			ExoGlueAimTime           = get_pvar(SPVAR_53,  1, 99, 11); Exoflipped_enabled               = get_pvar(SPVAR_43, 0, 1, 0);			ExoDSspeed               = get_pvar(SPVAR_54,  1, 250, 60); 	 Exoinvert_enabled           = get_pvar(SPVAR_44, 0, 1, 0);	        ExoGeneralSensInd                 = get_pvar(SPVAR_55,  1, 327,100);ExoAimdownsightsendind                 = get_pvar(SPVAR_56,  1, 327,100);Exofiresensind                = get_pvar(SPVAR_57,  1, 327,100);Exoadsfiresensind            = get_pvar(SPVAR_58,  1, 327,100);Exolethalsensind             = get_pvar(SPVAR_59,  1, 327,100);ExoFaZescopeDelay          = get_pvar(SPVAR_60,  50,600,350); ExoRAGEAIMx                = get_pvar(SPVAR_61,  1, 15, 12 );ExoAIaimengaged           = get_pvar(SPVAR_62,  1, 15, 7 );ExoAimlimind     = get_pvar(SPVAR_63,  1, 60, 30); 
    }

main {
    
	set_val(TRACE_1, ExoDefind_xx_1); set_val(TRACE_2, ExovaldefIND_x_2); set_val(TRACE_3, exoprofiddef);set_val(TRACE_4, ExoMidnightRunx);set_val(TRACE_5, ExoPOLARMAXCOORD);set_val(TRACE_6, ExoMainMenu);
	if(get_controller() != PIO_PS4) 
	{
	    if(get_console() == PIO_PS4) 
	    {
	        swap(PS4_SHARE,PS4_TOUCH); 
	
	            if(get_val(PS4_R3) && event_press(PS4_TOUCH)) 
	            {
	                set_val(PS4_SHARE,100);
	                set_val(PS4_TOUCH,0);
	                set_val(PS4_R3,0);
	            }
	    }
	}
	if(Exo_display_t)
	{
		cls_oled(0);	
		ExoMidnightRunx = 0;
	
		if(ExoMODKILLSWITCH)
		{
			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	
			                                     
		}
		else
		{
		   printf(28, 0, 1, 1, TITLE[0]);printf(52, 33, 1, 1, OMEGALABZ[0]);printf(26, 22, 1, 1, V1_X_MAIN[0]);

			if(exoprofiddef == 0)
			   printf(37, 55, 0, 0, PROFILE_1[0]);
			if(exoprofiddef == 1)
			   printf(33, 55, 0, 0, PROFILE_2[0]);
	
	
			display_black = TRUE;	
			Exo_display_t = FALSE;
		}
	}
	if( abs(get_val(LX)) < LA_deadzone) set_val(LX,0);                         
	if( abs(get_val(LY)) < LA_deadzone) set_val(LY,0);                         
                                                                             
	if (get_val(LX) > LA_deadzone) {set_val(LX, (get_val(LX)+ LA_sens_add ));}     
	if (get_val(LX) >100) {set_val(LX, 100);}                                  
	if (get_val(LX) < inv(LA_deadzone)) {set_val(LX, (get_val(LX)- LA_sens_add));} 
	if (get_val(LX) <-100) {set_val(LX, -100);}                                
                                                                             
	if (get_val(LY) > LA_deadzone) {set_val(LY, (get_val(LY)+ LA_sens_add));}      
	if (get_val(LY) >100) {set_val(LY, 100);}                                  
	if (get_val(LY) < inv(LA_deadzone)) {set_val(LY, (get_val(LY)- LA_sens_add));} 
	if (get_val(LY) <-100) {set_val(LY, -100);}                                
                                                                             
	                                                        
	if( abs(get_val(RX)) < RA_deadzone) set_val(LX,0);                         
	if( abs(get_val(RY)) < RA_deadzone) set_val(LY,0);                                                                                                  if (get_val(LX) > RA_deadzone) {set_val(LX, (get_val(LX)+ RA_sens_add ));}     if (get_val(LX) >100) {set_val(LX, 100);}                                  
	if (get_val(LX) < inv(RA_deadzone)) {set_val(LX, (get_val(LX)- RA_sens_add));} 
	if (get_val(LX) <-100) {set_val(LX, -100);}                                
                                                                             
	if (get_val(LY) > RA_deadzone) {set_val(LY, (get_val(LY)+ RA_sens_add));}     
	if (get_val(LY) >100) {set_val(LY, 100);}                                  
	if (get_val(LY) < inv(RA_deadzone)) {set_val(LY, (get_val(LY)- RA_sens_add));} 
	if (get_val(LY) <-100) {set_val(LY, -100);}                               
	if(ExoInfMelee_enabled)
		{
			if(get_val(MELEE))
			{
				combo_run(ExoInfMelee1);
			}
			else
			{
				if(combo_running(ExoInfMelee1))
				combo_stop(ExoInfMelee1);
			}
		
		
		}
		if ( get_ptime(PS4_RIGHT) <= 75)
		if(get_ival(ADS) && event_release(PS4_RIGHT)){
		
	
			ExoRF_switch = !ExoRF_switch;
			combo_run(RUMBLE_OFF);
		
			if(!ExoRF_switch)
			{		
				combo_stop(BLINK);
				set_ledx(2, 1);
				set_led(0, 3);
			}
			else if(get_val(PS4_R2))
        combo_run(ExodusRF);
      
			{
				set_led(3,0);
			}
    }                                                   
    if( get_ptime(ExoRabbitHopTog_main) <= 100)
    if(get_ival(ADS) && event_release(ExoRabbitHopTog_main))
	{
            ExoRabbitHopTog_secondary = !ExoRabbitHopTog_secondary;
			combo_run(ExoRabbitHopTogx___);
		    combo_run(RUMBLE_ON)
			if(!ExoRabbitHopTog_secondary)
			{		
				combo_stop(ExoRabbitLED);
				
			}   
			
			if (ExoRabbitHopTog_secondary && get_ival(FIRE) > 10)
			{
			  combo_run(ExoRabbitLED);
			}   
         }
      if(ExoRabbitHopTog_secondary && get_ival(FIRE) > 25)
	     {
		combo_run(ExoRabbitLED);
		combo_run(ExoRabbitHopTogx___);
		led_on = 150;
	        	led_off = 300;
	        	combo_run(ExoRabbitLED);
	}
	

	
	if(display_black && !ExoMainMenu && !ExoMODKILLSWITCH)
	{
		ExoMidnightRunx += get_rtime();
		if(ExoMidnightRunx >= 5000)
		{
			cls_oled(0);
			ExoMidnightRunx = 0;
			display_black = FALSE;
		}
	}
	 
	if(get_val(PS4_L2))
	{
		
		if(event_release(PS4_SHARE))
		{
			ExoMODKILLSWITCH = !ExoMODKILLSWITCH;
	
			if(ExoMODKILLSWITCH)        
				combo_run(RUMBLE_OFF);	
			else
				combo_run(RUMBLE_ON);	
	
			
			Exo_display_t = TRUE;
		}
	
		if(event_release(PS4_OPTIONS) && !ExoMODKILLSWITCH)
		{
			ExoMainMenu = !ExoMainMenu;
	
			if(!ExoMainMenu)
			{
				ExoEditValsMenu = FALSE; 	
				
				combo_run(RUMBLE_OFF);  
				Exo_display_t = TRUE;   
			}
	
			if(ExoMainMenu)
			{
				ExoDefind_xx_1 = 0;        
				combo_run(RUMBLE_ON);	
				Exo_display_mm = TRUE;		
			}
		}
		set_val(PS4_SHARE, 0);		    
		set_val(PS4_OPTIONS, 0);		
	} 
     
    
    if(!ExoMODKILLSWITCH)
    {

    	if(ExoMainMenu)
    	{   	
    		if(ExoDefind_xx_1 <= Exofinaleditstringdef)	
    		{
    			if(event_press(PS4_CROSS) && !ExoEditValsMenu) 
    			{
    				ExovaldefIND_x_2 = valindexdefnum + 1; 
    				ExoEditValsMenu = TRUE;
    				combo_run(RUMBLE_ON);
    				Exo_display_mm = TRUE;
    			}
     
    			if(event_press(PS4_CIRCLE) && ExoEditValsMenu) 
    			{
    				ExoEditValsMenu = FALSE;
    				combo_run(RUMBLE_OFF);
    				Exo_display_mm = TRUE;
    			}
    		}     
    		if(ExoEditValsMenu)
    		{
    			if(get_val(PS4_L2)) 
    			{   		 	
    				exoarv[exoprofiddef]   = edit_val( 0 , exoarv[exoprofiddef]  , 0  ,   99 , 1 , 10   ); exoarh[exoprofiddef] = edit_val( 1 , exoarh[exoprofiddef],-99 ,   99 , 1 , 10   );exoarstart[exoprofiddef]      = edit_val( 2 , exoarstart[exoprofiddef]     , 0  ,   99 , 1 , 10   );exoarstop[exoprofiddef]        = edit_val( 3 , exoarstop[exoprofiddef]       , 0  ,   99 , 1 , 10   ); 
                    exoarstime[exoprofiddef]       = edit_val( 4 , exoarstime[exoprofiddef]      , 0  ,   99 , 1 , 10   );
                    exoarHtimestart[exoprofiddef]      = edit_val( 5 , exoarHtimestart[exoprofiddef]     ,-99 ,   99 , 1 , 10   );
                    exoarHtimestop[exoprofiddef]        = edit_val( 6 , exoarHtimestop[exoprofiddef]       ,-99 ,   99 , 1 , 10   );
                    exoarHtime[exoprofiddef]       = edit_val( 7 , exoarHtime[exoprofiddef]      ,-99 ,   99 , 1 , 10   );exorfrpm[exoprofiddef]          = edit_val( 8 , exorfrpm[exoprofiddef]         ,  0 ,   25 , 1 , 10   );			
    			    ExoAirecordthreshold                      = edit_val( 9  , ExoAirecordthreshold         , 0 , 10   , 1  , 10   );ExoRAGEAIMx                          = edit_val( 10 , ExoRAGEAIMx             , 0 , 10   , 1  , 10   );
                    ExoAIaimengaged                     = edit_val( 11 , ExoAIaimengaged        , 0 , 10   , 1  , 10   );
                    ExoAimlimind               = edit_val( 12 , ExoAimlimind  , 0 , 60   , 1  , 10   );ExoRAGEAIMx                          = edit_val( 13 , ExoRAGEAIMx             , 0 , 10   , 1  , 10   );
                    ExoAIaimengaged                     = edit_val( 14 , ExoAIaimengaged        , 0 , 10   , 1  , 10   );ExoAimlimind               = edit_val( 15 , ExoAimlimind  , 0 , 60   , 1  , 10   );
                    ingamesens                         = edit_val( 16 , ingamesens            , 0 , 20   , 1  , 10   );
                    ExoPOLARMAXCOORD             = edit_val( 17 , ExoPOLARMAXCOORD, 0 , 99   , 1  , 10   );ExoPOLARMAXSPEED         = edit_val( 18 , ExoPOLARMAXSPEED,0, 99 , 1  , 10   );ExoGlueAimSize                     = edit_val( 19 , ExoGlueAimSize        , 0 , 50   , 1  , 10   );ExoGlueAimTime                     = edit_val( 20 , ExoGlueAimTime        , 0 , 990  , 1  , 10   );ExoGeneralSensInd                           = edit_val( 21 , ExoGeneralSensInd              , 0 , 327  , 1  , 10   );ExoAimdownsightsendind                           = edit_val( 22 , ExoAimdownsightsendind              , 0 , 327  , 1  , 10   ); Exofiresensind                          = edit_val( 23 , Exofiresensind             , 0 , 327  , 1  , 10   ); Exoadsfiresensind                      = edit_val( 24 , Exoadsfiresensind         , 0 , 327  , 1  , 10   );Exolethalsensind                       = edit_val( 25 , Exolethalsensind          , 0 , 327  , 1  , 10   );ExoDSspeed                         = edit_val( 26 , ExoDSspeed            , 0 , 9990 , 10 , 100  );ExoFaZescopeDelay                    = edit_val( 27 , ExoFaZescopeDelay       , 0 , 600  , 1  , 10   );
     
    			}
                
    			else 
    			{
    			
    				if(event_press(PS4_RIGHT))
    				{
    					ExovaldefIND_x_2 += 1;
    					Exo_display_mm = TRUE; 
    				}
    				if(event_press(PS4_LEFT))
    				{
    					ExovaldefIND_x_2 -= 1;
    					Exo_display_mm = TRUE;
    				}
    				if(ExoDefind_xx_1 == 0) Exo_ret_val_available( 0 , 1  );  	if(ExoDefind_xx_1 == 1) Exo_ret_val_available( 2 , 7  );    				if(ExoDefind_xx_1 == 2) Exo_ret_val_available( 8 , 8  );if(ExoDefind_xx_1 == 3) Exo_ret_val_available( 9 , 12 );if(ExoDefind_xx_1 == 4) Exo_ret_val_available( 13 , 15 );if(ExoDefind_xx_1 == 5) Exo_ret_val_available( 16 , 16 );if(ExoDefind_xx_1 == 6) Exo_ret_val_available( 17 , 18 );if(ExoDefind_xx_1 == 7) Exo_ret_val_available( 19 , 20 );if(ExoDefind_xx_1 == 8) Exo_ret_val_available( 21 , 25 );if(ExoDefind_xx_1 == 9) Exo_ret_val_available( 26 , 26 );if(ExoDefind_xx_1 == 10) Exo_ret_val_available( 27 , 27 );if(ExoDefind_xx_1 == 11) Exo_ret_val_available( 28 , 28 );	
    			} 
    		} 
    		else 
    		{
    		
    			if(event_press(PS4_RIGHT))
    			{
    				ExoDefind_xx_1 += 1;
    				Exo_display_mm = TRUE;
    			}
    			if(event_press(PS4_LEFT))
    			{
    				ExoDefind_xx_1 -= 1;
    				Exo_display_mm = TRUE;
    			}
     
    		
    			if(ExoDefind_xx_1 > Exolastmodiddef) 
    				ExoDefind_xx_1 = 0;
    			if(ExoDefind_xx_1 < 0)
    				ExoDefind_xx_1 = Exolastmodiddef;
     
    			
    			if(event_press(PS4_TRIANGLE))
    			{
    				exoprofiddef += 1;
    				Exo_display_mm = TRUE;
    			}
    			
    			if(exoprofiddef > (AMOUNT_OF_PROFILES - 1))
    				exoprofiddef = 0;
    			ExoAR_switch[exoprofiddef] = toggle( 0, ExoAR_switch[exoprofiddef]);ExoAR_switchv2[exoprofiddef]   = toggle( 1, ExoAR_switchv2[exoprofiddef]  ); ExoRF_switch[exoprofiddef] = toggle( 2, ExoRF_switch[exoprofiddef]);ExoAim_enabled                      = toggle( 3, ExoAim_enabled                     );ExoAimV6on                     = toggle( 4, ExoAimV6on                    ); ExoBaseAimyz                   = toggle( 5, ExoBaseAimyz                  );ExoPolar_remix                      = toggle( 6, ExoPolar_remix                     );ExoGLUE_aim                     = toggle( 7, ExoGLUE_aim                    );Exosensxx                         = toggle( 8, Exosensxx                        );drop_shot                      = toggle( 9, drop_shot                     );ExoFaze_scope_switch_[exoprofiddef] = toggle( 10, ExoFaze_scope_switch_[exoprofiddef]);ExoAutoSteadyAim_switch[exoprofiddef] = toggle( 11, ExoAutoSteadyAim_switch[exoprofiddef]);ExoEP_on                     = toggle( 12, ExoEP_on                    );ExoTeamHelper_on                     = toggle( 13, ExoTeamHelper_on                    ); ExoAutostrafe_enabled                     = toggle( 14 , ExoAutostrafe_enabled                   );Exoflipped_enabled                        = toggle( 15 , Exoflipped_enabled                      );Exoinvert_enabled                    = toggle( 16 , Exoinvert_enabled                  );USE_SLIDE_CANCEL               = toggle( 17 , USE_SLIDE_CANCEL             ); 
    		} 
    		if(event_press(PS4_PS))
    			Exo_valSAVE_oo_x ();
    		block_all_inputs();
    	} 
    	if(!ExoMainMenu)
    	{
     
			if(Exoflipped_enabled) 
			{
				swap(PS4_R1, PS4_R2);
				swap(PS4_L1, PS4_L2);
			}
	   	 	deadzone(PS4_L2,PS4_R2,100,100);
	 		if (ExoAim_enabled) 
	         {
	              if (Joystick_calibration == FALSE)
	                {
	                    RX_Axis_Joystick_calibrate = get_val(PS4_RX); 
	                    RY_Axis_Joystick_calibrate = get_val(PS4_RY); 
	                    Joystick_calibration = TRUE;     
	                }
	            X_Last_Value = X_Current_Value;
	            Y_Last_Value = Y_Current_Value;
	            X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
	            Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate;
	                
	            if(get_val(PS4_L2)) 
	                {
	                  
	                    if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit) 
	                    {
	                                 
	                            if(abs(X_Last_Value - X_Current_Value) < 15) 
	                                {
	                                    combo_stop(Gen_AI_aim_perf);
	                                    Exo_AI_rec_finished = FALSE;
	     
	                                   
	                                    if(get_val(PS4_R2) > 95) 
	                                        {
	                                            combo_stop(Exo_AI_incrementaladjustments);
	                                            Exo_AI_micro_adj_burst = 0;
	                                            combo_run(Exo_sPYRO_aSSIST);
	                                        }
	                                    else
	                                        {
	                                            combo_stop(Exo_sPYRO_aSSIST);
	                                            Exo_sPYRO_BURST = 0;
	                                            combo_run(Exo_AI_incrementaladjustments);
	                                        }    
	                                }
	                        
	                    }
	                               
	                    else if(abs(X_Current_Value) <= ExoAimPOSlthreshold && abs(Y_Current_Value) <= ExoAimPOSlthreshold) 
	                        {
	                            combo_stop(Exo_AI_incrementaladjustments);
	                            combo_stop(Exo_sPYRO_aSSIST);
	                            Exo_sPYRO_BURST = 0;
	                            Exo_AI_micro_adj_burst = 0;
	                            combo_run(Gen_AI_aim_perf);
	                        }
	            }
	            else 
	                {
	                    combo_stop(Exo_AI_incrementaladjustments);
	                    combo_stop(Exo_sPYRO_aSSIST);
	                    combo_stop(Gen_AI_aim_perf);
	                    Exo_sPYRO_BURST = 0;
	                    Exo_AI_micro_adj_burst = 0;
	                    Exo_AI_rec_finished = FALSE;    
	                }
	
	     	}
			if(ExoAimV6on)
	     	{
	        if(get_val(PS4_L2)) 
	            {        
	                if (Current_State == Get_Last_Value)
	                {
	                    X_Last_Value = get_lval(PS4_RX);
	                    Y_Last_Value = get_lval(PS4_RY);
	     
	                    Current_State = Get_Current_Value;
	     
	                }
	                else if (Current_State == Get_Current_Value)
	                {
	                    X_Current_Value = get_val(PS4_RX);
	                    Y_Current_Value = get_val(PS4_RY);
	     
	                    if(Aim_Abuse_State == ExoAIaimengaged)
	                    {    
	                        Current_State = ExoRAGEAIMx;
	                    }
	                    else
	                    {
	                        Current_State = ExoAIaimengaged;
	                    }    
	                }
	                if (Current_State == ExoRAGEAIMx)
	                {
	                    
	                    Exo_aim_ai_edit_inrealtime(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
	                    Exo_aim_ai_edit_inrealtime(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
	     
	                    Current_State = Get_Last_Value;
	                    Aim_Abuse_State = ExoRAGEAIMx;  
	                }
	                else if (Current_State == ExoAIaimengaged)
	                {
	                    
	                    Exo_aim_ai_edit_inrealtime(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
	                    Exo_aim_ai_edit_inrealtime(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
	     
	                    Current_State = Get_Last_Value;
	                    Aim_Abuse_State = ExoAIaimengaged; 
	                } 
	            }
	            else 
	            {
	                Current_State = Get_Last_Value;
	                Aim_Abuse_State = ExoAIaimengaged; 
	            }  
	     
	     
	    }
			if(ExoBaseAimyz)	
			{
	          ads_grenade_sens=100-(ingamesens); ads_fire_sens=96-(ingamesens); 
	          if (get_val (PS4_L2))
	                        {
	                         if(get_val(PS4_R2) && get_val(PS4_L2))                              
	                                                  	{ 
	                                                  	Sens = ads_fire_sens;                                              
	                                                 	}
	                                         		  	if(!get_val(PS4_R2) && !get_val(PS4_L2) || get_val (PS4_R2) &&!get_val(PS4_L2)) 
	                                                    {
	                                                	Sens = 100; 
	                                                  	}   
	                                         			 if(!get_val(PS4_R2) && get_val(PS4_L2))
	                                                 	{
	                                                	Sens = ads_grenade_sens;
	                                                  	}
	                                                  	if (stick_input > Radius)
												      	{
											            if(Sens > 100) Sens = 100;  
											            sensitivity(PS4_RX, NOT_USE, Sens);
											            sensitivity(PS4_RY, NOT_USE, Sens);
											        	}
	        		}  
	       }
stick_input = (isqrt(pow(get_ival(PS4_RX),2) + pow(get_ival(PS4_RY),2)));	       
if(ExoPolar_remix)
			{
	      	if (PolarBooster && get_ival(FIRE)) 
						 				{
						                Radius = ExoPOLARMAXCOORD + PR_Boost;
						            	}
						                else 
						                {
						                Radius = ExoPOLARMAXCOORD;
						                }
								      	if (get_ival(ADS) || (get_ival(FIRE)))
								      			{
	        									if (stick_input <= Radius)
	        													{ 
	        													  rnd = random(toptroutfoxtrot, topsalmonfoxhop);
	        													  RS_gr = (RS_gr + ExoPOLARMAXSPEED) % 360;
														          set_polar(RS, RS_gr, (Radius * rnd));
	        													}
	        									
								      			} 
			 }
	      	
	        if(ExoGLUE_aim)
			{
		        if(get_val(PS4_L2)  && !get_val(PS4_R2)) 
		        combo_run(Exo_GLUE_AA_xz);
		        else 
		        combo_stop(Exo_GLUE_AA_xz); 
			} 
	      	
			if(ExoAutoSteadyAim_switch[exoprofiddef] == 1)
			{
				if(get_val(PS4_L2)) set_val(PS4_L3,100);
			}
			if(ExoAutoSteadyAim_switch[exoprofiddef] == 1)
			{
				if(get_val(PS4_LY) <-90 && get_val(PS4_L2) && get_ptime(PS4_L2) > 200) combo_stop(Exo_AUTOSA_X);
			}
			if(ExoAutoSteadyAim_switch[exoprofiddef] == 1) 
			{
				if(event_press(PS4_L2)) combo_run(Exo_AUTOSA_X);
			}
			if(ExoAutoSteadyAim_switch[exoprofiddef] == 1)
			{
				if(get_val(PS4_L2) && get_lval(PS4_L3)) set_val(PS4_L3,0); 
			}
	     
			if(drop_shot)
			{
			if(get_val(PS4_R2)) combo_run(Exo_Dropshot_def_main_e);
			}
	     
			if(ExoTeamHelper_on)
			{
				if(get_val(PS4_L2)&& double_click(PS4_UP)||event_press(PS4_R2))
			    	combo_run(Exo_TM_HELPR);
				if(!get_val(PS4_L2))
					combo_stop(Exo_TM_HELPR);
			}
		
			if(ExoEP_on)
			{
			if(get_val(PS4_TRIANGLE)&&get_ptime(PS4_TRIANGLE)>350) 
			combo_run(ExoEP_on);
			if(get_val(PS4_L2)>10)
			combo_stop(ExoEP_on);
			if(get_val(PS4_R2)>10)
			combo_stop(ExoEP_on);
			if(get_val(PS4_SQUARE))
			combo_stop(ExoEP_on);
			}
	     
	    	if(ExoFaze_scope_switch_[exoprofiddef] == 1)
	    	{
	    	if(event_release(PS4_L2) && get_ptime(PS4_L2) < 140)
	        combo_run(Exo_FaZeScOpe_r);
	    	}	
	     
	        if(Exosensxx){
		        if(!get_val(PS4_L2) && !get_val(PS4_R2)) { 
		        USE_SENS=ExoGeneralSensInd;}
		        else if(get_val(PS4_L2) && !get_val(PS4_R2)) { 
		        USE_SENS=ExoAimdownsightsendind;}    
		        else if(!get_val(PS4_L2) && get_val(PS4_R2)) { 
		        USE_SENS=Exofiresensind;}
		        else if(get_val(PS4_L2) && get_val(PS4_R2)) { 
		        USE_SENS=Exoadsfiresensind;}
		        else if(get_val(PS4_R1)) { 
		        USE_SENS=Exolethalsensind;}
		        sensitivity(PS4_RY,NOT_USE,USE_SENS);
		        sensitivity(PS4_RX,NOT_USE,USE_SENS);		
			}
	    	
			if(ExoAutostrafe_enabled) 
			{
				if(get_val(PS4_R2) > 50)
				{
			    	set_val(PS4_LX, -40);
			    	set_val(PS4_LX, 40);
				}
			}
			if(Exoinvert_enabled) 
				invert = -1;
			else
				invert =  1;
			if(ExoSwapProf_toggle_btn)
			{
				if(event_release(ExoSwapProf_toggle_btn_redundant_) && get_ptime(ExoSwapProf_toggle_btn_redundant_) <= 360)
	    		{
	    	    	Exoprofidentifier_main=!Exoprofidentifier_main;
	 
	    			if(ExoMainMenu)
						Exo_display_mm = TRUE;
					else
						Exo_display_t = TRUE;
				}
	    	}
	     
		 	if(ExoSwapProf_toggle_btn_ind_def_main_x_2)
	       	{
	       		if(get_lval(ExoSwapProf_toggle_btn_redundant_copy_) && (event_press(profile_switch_button3)))
	    		{
	    	    	Exoprofidentifier_main=!Exoprofidentifier_main;
	    	    
	    			if(ExoMainMenu)
						Exo_display_mm = TRUE;
					else
						Exo_display_t = TRUE;
				}
	    	}
			if(get_val(PS4_L3))
				set_val(PS4_TRIANGLE, 0);
	     
	        
	    	if(Exoprofidentifier_main)
	    		exoprofiddef = 1;        
	    	else	
	    		exoprofiddef = 0;
			if(USE_SLIDE_CANCEL)
			{
				if( abs(get_val(PS4_LY)) > 60 || abs(get_val(PS4_LX)) > 60 )
				{
					if(event_release(Exo_Dropshot_btn))
					{
						combo_run(COMBO_SLIDE_CANCEL);
					} 
				}
			}
    } 
	    	if(ExoAR_switch[exoprofiddef] == 1)
	    	{
	    		if(get_val(PS4_R2))
	    			combo_run(Exo_AR_engaged_main_switch);
				else
	    			combo_stop(Exo_AR_engaged_main_switch);
	    	}
			if(ExoAR_switchv2[exoprofiddef] == 1)
	    	{
	    	
	        	if((VALUES[exoprofiddef][2] + exoarstart[exoprofiddef]) < (VALUES[exoprofiddef][3] + exoarstop[exoprofiddef]))
	        	    i_val = 1; 
	        	else
	        	    i_val = -1;
	     
	        	i_pnt = ((VALUES[exoprofiddef][4] + exoarstime[exoprofiddef]) * 10) / (abs((VALUES[exoprofiddef][2] + exoarstart[exoprofiddef]) - (VALUES[exoprofiddef][3] + exoarstop[exoprofiddef]))); 
	     
	        			
	        	if((VALUES[exoprofiddef][5] + exoarHtimestart[exoprofiddef]) < (VALUES[exoprofiddef][6] + exoarHtimestop[exoprofiddef]))
	        	    i_val_h = 1; 
	        	else
	        	    i_val_h = -1;
	     
	        	i_pnt_h = ((VALUES[exoprofiddef][7] + exoarHtime[exoprofiddef]) * 10) / (abs((VALUES[exoprofiddef][5] + exoarHtimestart[exoprofiddef]) - (VALUES[exoprofiddef][6] + exoarHtimestop[exoprofiddef]))); 
	     
	        	if(!get_val(PS4_R2)) 
	       		{
	       			
	       			ar_y = VALUES[exoprofiddef][2] + exoarstart[exoprofiddef];
	       			i_cnt = 0;
	       			i_num = 0;
	     
	       			
	       			ar_x = VALUES[exoprofiddef][5] + exoarHtimestart[exoprofiddef];
	       			i_cnt_h = 0;
	       			i_num_h = 0;
	       		}   
	     
	        	   if(get_val(PS4_R2))
	        	   {
	       		    
	       		    if(!Exo_main_func_comp())  
	       		        ar_y = p_val();
	       		    else
	       		        ar_y = VALUES[exoprofiddef][3] + exoarstop[exoprofiddef];
	     
	    			if(y_val() < 80)
	        	   		set_val(PS4_RY,y_val()); 
	     
	        	   		
	       		    if(!Exo_main_func_comp_redundant())  
	       		        ar_x = Main_press_val_1x();
	       		    else
	       		        ar_x = VALUES[exoprofiddef][6] + exoarHtimestop[exoprofiddef];
	     
	    			if(x_val() < 80)
	        	   		set_val(PS4_RX,x_val()); 
	       		}		
	     
	    }
			if(ExoRF_switch[exoprofiddef] == 1){
	    	
	    	
	        	hold_time = 500 / (VALUES[exoprofiddef][8] + exorfrpm[exoprofiddef]); 
	       		rest_time = hold_time - 20;
	        	if(rest_time < 0) rest_time = 0;
	     
	        
	        	if(get_val(PS4_R2))
	        		combo_run(ExodusRF);
	        
	        	led_on = 150;
	        	led_off = 300;
	        	combo_run(BLINK);
	    	}
	    	if(Exo_display_mm) 
	    	{
	    		
	    		cls_oled(0);
	        	ExoMidnightRunx = 0;
	     
	    		if(ExoEditValsMenu)
	    		{
	    	    
	     
	    		  
	    			Exo_main_disp_edit( 0  , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH)   , ANTIRECOIL_VERTICAL[0]   , exoarv[exoprofiddef]   );Exo_main_disp_edit( 1  , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , exoarh[exoprofiddef] );Exo_main_disp_edit( 2  , center_x(sizeof(ANTIRECOIL_START)  - 1, OLED_FONT_MEDIUM_WIDTH)  , ANTIRECOIL_START[0]  , exoarstart[exoprofiddef] );Exo_main_disp_edit( 3  , center_x(sizeof(ANTIRECOIL_END)    - 1, OLED_FONT_MEDIUM_WIDTH)  , ANTIRECOIL_END[0]    , exoarstop[exoprofiddef]   );Exo_main_disp_edit( 4  , center_x(sizeof(ANTIRECOIL_TIME)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ANTIRECOIL_TIME[0]   , exoarstime[exoprofiddef]  );Exo_main_disp_edit( 5  , center_x(sizeof(HORIZONTAL_START)  - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_START[0]  , exoarHtimestart[exoprofiddef] );Exo_main_disp_edit( 6  , center_x(sizeof(HORIZONTAL_END)    - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_END[0]    , exoarHtimestop[exoprofiddef]   );Exo_main_disp_edit( 7  , center_x(sizeof(HORIZONTAL_TIME)   - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_TIME[0]   , exoarHtime[exoprofiddef]  );Exo_main_disp_edit( 8  , center_x(sizeof(EXO_RF_RPM_xX)      - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_RF_RPM_xX[0]      , exorfrpm[exoprofiddef]     );Exo_main_disp_edit( 9  , center_x(sizeof(EXO_AI_REC_TIME)      - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_REC_TIME[0]      , ExoAirecordthreshold                 );Exo_main_disp_edit( 10 , center_x(sizeof(EXO_AI_AIM_RAGE_X)          - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_AIM_RAGE_X[0]          , ExoRAGEAIMx                     );Exo_main_disp_edit( 11 , center_x(sizeof(EXO_AI_AIM_COR_Y)        - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_AIM_COR_Y[0]        , ExoAIaimengaged                );Exo_main_disp_edit( 12 , center_x(sizeof(EXO_AI_AIM_COR_Z)        - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_AIM_COR_Z[0]        , ExoAimlimind          );Exo_main_disp_edit( 13 , center_x(sizeof(AIMBOOST1)         - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMBOOST1[0]         , ExoRAGEAIMx                     );Exo_main_disp_edit( 14 , center_x(sizeof(EXO_AI_AIM_COR_y)       - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_AIM_COR_y[0]       , ExoAIaimengaged                );Exo_main_disp_edit( 15 , center_x(sizeof(EXO_AI_AIM_COR_X)       - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_AI_AIM_COR_X[0]       , ExoAimlimind          );Exo_main_disp_edit( 16 , center_x(sizeof(INGAMESENS)        - 1, OLED_FONT_MEDIUM_WIDTH)  , INGAMESENS[0]        , ingamesens                    );Exo_main_disp_edit( 17 , center_x(sizeof(EXO_POLAR_SIZE)      - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_POLAR_SIZE[0]      , ExoPOLARMAXCOORD        );Exo_main_disp_edit( 18 , center_x(sizeof(EXO_POLAR_VECTOR)       - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_POLAR_VECTOR[0]       , ExoPOLARMAXSPEED    );Exo_main_disp_edit( 19 , center_x(sizeof(EXO_GLUE_STR)    - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_GLUE_STR[0]    , ExoGlueAimSize                );Exo_main_disp_edit( 20 , center_x(sizeof(EXO_GLUE_TIME)    - 1, OLED_FONT_MEDIUM_WIDTH)  , EXO_GLUE_TIME[0]    , ExoGlueAimTime                );Exo_main_disp_edit( 21 , center_x(sizeof(GENSENS)           - 1, OLED_FONT_MEDIUM_WIDTH)  , GENSENS[0]           , ExoGeneralSensInd                      ); Exo_main_disp_edit( 22 , center_x(sizeof(ADSSENS)           - 1, OLED_FONT_MEDIUM_WIDTH)  , ADSSENS[0]           , ExoAimdownsightsendind                      ); Exo_main_disp_edit( 23 , center_x(sizeof(FIRESENS)          - 1, OLED_FONT_MEDIUM_WIDTH)  , FIRESENS[0]          , Exofiresensind                     ); Exo_main_disp_edit( 24 , center_x(sizeof(ADSFIRESENS)       - 1, OLED_FONT_MEDIUM_WIDTH)  , ADSFIRESENS[0]       , Exoadsfiresensind                 ); Exo_main_disp_edit( 25 , center_x(sizeof(GRENADESENS)       - 1, OLED_FONT_MEDIUM_WIDTH)  , GRENADESENS[0]       , Exolethalsensind                  );Exo_main_disp_edit( 26 , center_x(sizeof(DROPSHOTSPEED)     - 1, OLED_FONT_MEDIUM_WIDTH)  , DROPSHOTSPEED[0]     , ExoDSspeed                    );Exo_main_disp_edit( 27 , center_x(sizeof(QUICKSCOPESPEED)   - 1, OLED_FONT_MEDIUM_WIDTH)  , QUICKSCOPESPEED[0]   , ExoFaZescopeDelay               );
	     
	    		}
	    		else
	    		{
	    	    
	     
	    		 
	    			Exo_MOD_screendisplay_x( 0 ,  center_x(sizeof(Exo_AR_engaged_main_switch)  - 1, OLED_FONT_MEDIUM_WIDTH)  , Exo_AR_engaged_main_switch[0]  , ExoAR_switch[exoprofiddef]);Exo_MOD_screendisplay_x( 1 ,  center_x(sizeof(ExodusAR)    - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAR[0]    , ExoAR_switchv2[exoprofiddef]  );Exo_MOD_screendisplay_x( 2 ,  center_x(sizeof(ExodusRF)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusRF[0]   , ExoRF_switch[exoprofiddef] );Exo_MOD_screendisplay_x( 3 ,  center_x(sizeof(ExodusAAMain)      - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAAMain[0]      , ExoAim_enabled    );Exo_MOD_screendisplay_x( 4 ,  center_x(sizeof(ExodusAAMainv5)    - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAAMainv5[0]    , ExoAimV6on   );Exo_MOD_screendisplay_x( 5 ,  center_x(sizeof(ExodusAABasic)    - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAABasic[0]    , ExoBaseAimyz );Exo_MOD_screendisplay_x( 6 ,  center_x(sizeof(ExodusAAPolar)    - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAAPolar[0]    , ExoPolar_remix    );Exo_MOD_screendisplay_x( 7 ,  center_x(sizeof(ExodusAAusrbase)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusAAusrbase[0]   , ExoGLUE_aim   );Exo_MOD_screendisplay_x( 8 ,  center_x(sizeof(ExodusSensRAGE)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusSensRAGE[0]   , Exosensxx       );Exo_MOD_screendisplay_x( 9 , center_x(sizeof(DSHOT)     - 1, OLED_FONT_MEDIUM_WIDTH)  , DSHOT[0]    , drop_shot    );Exo_MOD_screendisplay_x( 10 , center_x(sizeof(FazeScope)  - 1, OLED_FONT_MEDIUM_WIDTH)  , FazeScope[0]  ,ExoFaze_scope_switch_[exoprofiddef] );Exo_MOD_screendisplay_x( 11 , center_x(sizeof(AutoSteadyAimEXODUS) - 1, OLED_FONT_MEDIUM_WIDTH)  , AutoSteadyAimEXODUS[0] , ExoAutoSteadyAim_switch[exoprofiddef]);Exo_MOD_screendisplay_x( 12 , center_x(sizeof(EXODUSEP)  - 1, OLED_FONT_MEDIUM_WIDTH)  , EXODUSEP[0]  , ExoEP_on      );Exo_MOD_screendisplay_x( 13 , center_x(sizeof(ExodusInstaPing)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusInstaPing[0]   , ExoTeamHelper_on      ); Exo_MOD_screendisplay_x( 14 ,  center_x(sizeof(AutoStrafeEXODUS)    - 1, OLED_FONT_MEDIUM_WIDTH)  , AutoStrafeEXODUS[0]     , ExoAutostrafe_enabled      );Exo_MOD_screendisplay_x( 15 ,  center_x(sizeof(ExodusFlipped)       - 1, OLED_FONT_MEDIUM_WIDTH)  , ExodusFlipped[0]        , Exoflipped_enabled         );Exo_MOD_screendisplay_x( 16 ,  center_x(sizeof(ExoInvert)   - 1, OLED_FONT_MEDIUM_WIDTH)  , ExoInvert[0]    , Exoinvert_enabled     );Exo_MOD_screendisplay_x( 17 ,  center_x(sizeof(ExoSlideCancel)- 1, OLED_FONT_MEDIUM_WIDTH)  , ExoSlideCancel[0] , USE_SLIDE_CANCEL );
	    		}
	     
	    	
	    		if(ExoDefind_xx_1 < AMOUNT_OF_MULTI_TOGGLE)  
	    		{
	    			if(exoprofiddef == 0) 
	        			
	        			line_oled(0, 26, 39, 26, 5, 1); 
	        		else if(exoprofiddef == 1)
	        			
	        			line_oled(44, 26, 83, 26, 5, 1); 
	     
	    		}
	    		else 
	        	{
	        		line_oled(0, 26, 39, 26, 5, 1);
	        		line_oled(44, 26, 83, 26, 5, 1);
	        		line_oled(88, 26, 127, 26, 5, 1);
	        	}
	     
	    		display_black = TRUE;
	            Exo_display_mm   = FALSE;
	        } 
		}
	led(exoprofiddef);
     
     
}
combo Gen_AI_aim_perf 
           {
         
            X_Last_Value = X_Current_Value
            Y_Last_Value = Y_Current_Value
     
             
            wait(ExoAirecordthreshold);
     
            
            X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
            Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate; 
     
         if (Exo_AI_rec_finished == TRUE )
            {
                 
                Exo_AI_aim_alteration(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
                Exo_AI_aim_alteration(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
            }
     
            X_Last_Value = X_Current_Value;
            Y_Last_Value = Y_Current_Value;
     
            
            wait(ExoAirecordthreshold);
     
            
            X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
            Y_Current_Value = get_lval(PS4_RY)- RX_Axis_Joystick_calibrate; 
     
       if (Exo_AI_rec_finished == TRUE )
            {
                
                
                Exo_AI_aim_alteration(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
                Exo_AI_aim_alteration(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
            }
     
            Exo_AI_rec_finished = TRUE; 
            wait(ExoAirecordthreshold);
        }
     
combo Exo_AI_incrementaladjustments {
 
    set_val(PS4_RX,(15 - Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(-15 + Exo_AI_micro_adj_burst));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RX,(15 - Exo_AI_micro_adj_burst));
    set_val(PS4_RY,(10 - Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(-5 + Exo_AI_micro_adj_burst));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
 
    set_val(PS4_RY,(10 - Exo_AI_micro_adj_burst));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RX,(-15 + Exo_AI_micro_adj_burst));
    set_val(PS4_RY,(10 - Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(5 - Exo_AI_micro_adj_burst))
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold)
    wait(ExoAirecordthreshold)
 
    set_val(PS4_RX,(-15 + Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(15 - Exo_AI_micro_adj_burst))
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RX,(-15 + Exo_AI_micro_adj_burst)); 
    set_val(PS4_RY,(-10 + Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(5 - Exo_AI_micro_adj_burst))
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RY,(-10 + Exo_AI_micro_adj_burst)); 
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RX,(15 - Exo_AI_micro_adj_burst));
    set_val(PS4_RY,(-10 + Exo_AI_micro_adj_burst));
    set_val(PS4_LX,(-5 + Exo_AI_micro_adj_burst))
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
 
    Exo_AI_micro_adj_burst = Exo_AI_micro_adj_burst + 2;
 
 
    if ( Exo_AI_micro_adj_burst >10)
       {
            Exo_AI_micro_adj_burst = 0;   
        }
   }
 
combo Exo_sPYRO_aSSIST {
 
    set_val(PS4_RX,(4 + Exo_sPYRO_BURST));
    set_val(PS4_LX,(-15+ Exo_sPYRO_BURST));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
 
 
    set_val(PS4_RY,(5 + Exo_sPYRO_BURST));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
    set_val(PS4_RX,(-4 - Exo_sPYRO_BURST));
    set_val(PS4_LX,15 - Exo_sPYRO_BURST );
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold)
 
    set_val(PS4_RY,(5 + Exo_sPYRO_BURST));
    wait(ExoAirecordthreshold);
 
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
    wait(ExoAirecordthreshold);
 
 
    Exo_sPYRO_BURST = Exo_sPYRO_BURST + 2;
 
 
    if ( Exo_sPYRO_BURST >10)
       {
            Exo_sPYRO_BURST = 0;   
        }
   } 
 
combo Exo_AUTOSA_X {
	set_val(PS4_L3,0);
	wait(60);
	set_val(PS4_L3,100);
	wait(110);
	set_val(PS4_L3,0);
	wait(110);
}

combo Exo_TM_HELPR {
    set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
}
combo ExoEP_on{
    set_val(PS4_TRIANGLE,100);
	wait(500)
} 
 
 
combo Exo_Dropshot_def_main_e {
    set_val(Exo_Dropshot_btn,100);
    wait(40);
    set_val(Exo_Dropshot_btn,0);
    wait(ExoDSspeed);} 
 
 
combo Exo_GLUE_AA_xz {
    set_val(PS4_RY,xy_val(PS4_RY, ExoGlueAimSize));
    wait(ExoGlueAimTime);
    set_val(PS4_RX,xy_val(PS4_RX, ExoGlueAimSize));
    set_val(PS4_LX,xy_val(PS4_LX, ExoGlueAimSize));
    wait(ExoGlueAimTime);
    set_val(PS4_RY,xy_val(PS4_RY, ExoGlueAimSize * -1));
    wait(ExoGlueAimTime);
    set_val(PS4_RX,xy_val(PS4_RX, ExoGlueAimSize * -1));
    set_val(PS4_LX,xy_val(PS4_LX, ExoGlueAimSize * -1));
    wait(ExoGlueAimTime);
    }
 
 

 
 combo Exo_FaZeScOpe_r {
 set_val(PS4_L2,100);
 wait(ExoFaZescopeDelay); 
 set_val(PS4_L2,100);
 set_val(PS4_R2,100);
 wait(40);
 set_val(PS4_L2,100);
 wait(40);
 }    
 
 
 
combo RUMBLE_ON {						
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
} 
 
combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}
 
 
 
combo Exo_Saveusrmenu_vals { 
	cls_oled(0);						
	printf(center_x(sizeof(Exo_Saveusrmenu_vals) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,Exo_Saveusrmenu_vals[0]); 	
	wait(10)
	call(RUMBLE_ON);												
	wait(150);
	call(RUMBLE_ON);					
	wait(1000);
	Exo_display_mm = TRUE;				   
}
 
combo Exo_AR_engaged_main_switch {

     AntirecoilVertical = get_val(PS4_RY) + (VALUES[exoprofiddef][0] + exoarv[exoprofiddef]);      
    if( AntirecoilVertical > 100)  AntirecoilVertical = 100;      
    set_val(PS4_RY,  AntirecoilVertical);                     
    
    TaylorARorizontal = get_val(PS4_RX) + (VALUES[exoprofiddef][1] + exoarh[exoprofiddef]);
    if(TaylorARorizontal > 100) TaylorARorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(VALUES[exoprofiddef][1] + exoarh[exoprofiddef]) + 5)
    set_val(PS4_RX, TaylorARorizontal);
}


combo ExoRabbitHopTogx___{
    set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
}

combo vibrate { 
         set_val(RAPID_FIRE_TOGGLE_BUTTON, 0);
         set_rumble(RUMBLE_A, 100);
         wait(385);
         reset_rumble();
} 

combo ExodusRF { 
    set_val(FIRE, 100);
	wait(1);
	set_val(FIRE, 0);
	wait(1);
    wait(ExoRF_switch);
}

combo BLINK {
	led(exoprofiddef);
    wait(led_on);
    led(6);
    wait(led_off);
}

    combo ExoRabbitLED {
	led(exoprofiddef);
    wait(led_on);
    led(6);
    wait(led_off);
}

combo ExoInfMelee1{

	set_val(MELEE, 100);
	wait(40);
	set_val (MELEE, 0);
	wait(32);
} 

combo AutoSteadyAimEXODUS{
   
set_val(ADS,0);
wait(1);
set_val(PS4_LX,100);
wait(750);
set_val(ADS,0);
wait(1);
set_val (PS4_LX,100);
wait(600);
set_val (ADS,0);
wait(1);
combo_restart (AutoSteadyAimEXODUS);
wait(1);
   }
     
 combo COMBO_SLIDE_CANCEL{

	set_val(Exo_Dropshot_btn, 100);

	wait(slide_CANCEL_delay);

	set_val(Exo_Dropshot_btn, 0);

	wait(60);

	set_val(Exo_Dropshot_btn, 100);

	wait(50);

	set_val(Exo_Dropshot_btn, 100);
	set_val(JUMP, 100);
	wait(60);

	set_val(Exo_Dropshot_btn, 0);
	set_val(JUMP, 100);

	wait(10);

	set_val(JUMP, 0);
	}

     
      
function Exo_AI_aim_alteration(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) 
        { 
     
     
           if(abs(Last_Value - Current_Value) < ExoAimlimind) 
                {
                    
                    if(Last_Value < Current_Value)
                        {           
                            if (Boost)
                                { 
                                    if (X_AXIS)
                                        set_val(PS4_RX, (Current_Value + ExoRAGEAIMx)); 
     
                                    if (Y_AXIS)
                                            set_val(PS4_RY, (Current_Value + ExoRAGEAIMx));
                                }
     
     
                            else if(Correction)
                                {
                                    if (X_AXIS)
                                        set_val(PS4_RX, (Current_Value - ExoAIaimengaged)); 
     
                                    if (Y_AXIS)
                                    set_val(PS4_RY, (Current_Value - ExoAIaimengaged));            
                                }
                        }
                    else 
                        {
     
                            if (Boost)
                                { 
                                    if (X_AXIS)
                                        set_val(PS4_RX, (Current_Value - ExoRAGEAIMx)); 
     
                                    if (Y_AXIS)
                                            set_val(PS4_RY, (Current_Value - ExoRAGEAIMx));
                                }
     
     
                            else if(Correction)
                                {
                                    if (X_AXIS)
                                        set_val(PS4_RX, (Current_Value + ExoAIaimengaged)); 
     
                                    if (Y_AXIS)
                                    set_val(PS4_RY, (Current_Value + ExoAIaimengaged));            
                                }
                        }
                }
        } 
     
     
function Exo_aim_ai_edit_inrealtime(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) 
        { 
           mvt = abs(Last_Value) + abs(Current_Value);
           Aim_Boost_Val = ( mvt + 1 )/2; 
           Aim_Correction_Val = Aim_Boost_Val + 4;
     
           if(Aim_Boost_Val >= 10)
           {
               Aim_Boost_Val = 10;
               Aim_Correction_Val = 14;
           }
           else if(Aim_Boost_Val == 0)
           {
                Aim_Boost_Val = 2
                Aim_Correction_Val = 4;
           }
     
     
           if(mvt < ExoAimlimind) 
           {
                
                if(Last_Value < Current_Value)
                {           
                    if (Boost)
                    { 
                        if (X_AXIS)
                            set_val(PS4_RX, (Current_Value + Aim_Boost_Val)); 
     
                        if (Y_AXIS)
                            set_val(PS4_RY, (Current_Value + Aim_Boost_Val));
                    }
                    else if(Correction)
                    {
                        if (X_AXIS)
                            set_val(PS4_RX, (Current_Value - Aim_Correction_Val)); 
     
                        if (Y_AXIS)
                            set_val(PS4_RY, (Current_Value - Aim_Correction_Val));            
                    }
                }
                else 
                {
                    if (Boost)
                    { 
                        if (X_AXIS)
                            set_val(PS4_RX, (Current_Value - Aim_Boost_Val)); 
     
                        if (Y_AXIS)
                            set_val(PS4_RY, (Current_Value - Aim_Boost_Val));
                    }
                    else if(Correction)
                    {
                        if (X_AXIS)
                            set_val(PS4_RX, (Current_Value + Aim_Correction_Val)); 
     
                        if (Y_AXIS)
                            set_val(PS4_RY, (Current_Value + Aim_Correction_Val));            
                    }
                }
            }
        } 
function mod(var,val1,val2){
	var += val1;
	var %= val2;
	return var;
} 
     
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
 
function xy_val(f_axis,Exo_pressvald) {
    if(abs(get_val(f_axis)) < ExoGlueAimSize + 1) 
        return Exo_pressvald;
    return get_val(f_axis); 
}
 
function Exo_main_func_comp() { 
 
    i_cnt++;
    if(i_cnt > (VALUES[exoprofiddef][4] + exoarstime[exoprofiddef]) * 10) 
    {
        i_cnt = (VALUES[exoprofiddef][4] + exoarstime[exoprofiddef]) * 10;
        return 1;
    }    
    return 0;
}   
function p_val() { 
 
    i_num++;
    if(i_num == i_pnt) {
 
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  
     
function y_val() { 
 
    v = get_val(10);
 
    if(abs(v) < 10)
        v = 0;
 
    if(abs(v) > ar_y + 5)
        return v;
 
    return v + (ar_y * invert);           
}
     
     
function Exo_main_func_comp_redundant() { 
    i_cnt_h++;
    if (i_cnt_h > (VALUES[exoprofiddef][7] + exoarHtime[exoprofiddef]) * 10) {                                                               
    	
        i_cnt_h = (VALUES[exoprofiddef][7] + exoarHtime[exoprofiddef]) * 10;                                                                                         
        
        return 1;
       }
       return 0;
}     
    
 
function Main_press_val_1x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) {
        
    	i_num_h = 0;
    	 
    	ar_x += i_val_h;
    }
    return ar_x;
} 
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}
     
function Exo_ret_val_available(f_min, f_max) { 
 
 
	if(ExovaldefIND_x_2 < f_min)
		ExovaldefIND_x_2 = f_max;
	if(ExovaldefIND_x_2 > f_max)
		ExovaldefIND_x_2 = f_min;
 

	exovaldefindx = ExovaldefIND_x_2;	
}
     
function edit_val(f_idx, Exo_pressvald, f_min, f_max, f_inc1, f_inc2) {  
     
    	if(ExovaldefIND_x_2 == f_idx)
    	{                                        
		    print_number(f_min ,find_digits(f_min) ,2 , 35 , OLED_FONT_SMALL);                                    
		    print_number(f_max ,find_digits(f_max) ,97 , 35 , OLED_FONT_SMALL);
		    set_val(TRACE_1,f_min);
        	Exo_pressvald    = Exo_MOD_val_edit_main_t( Exo_pressvald ,PS4_LEFT , inv(f_inc1), f_min, f_max ); 
        	Exo_pressvald    = Exo_MOD_val_edit_main_t( Exo_pressvald ,PS4_RIGHT, f_inc1     , f_min, f_max ); 
       	 
       	   	Exo_pressvald    = Exo_MOD_val_edit_main_t( Exo_pressvald ,PS4_DOWN , inv(f_inc2), f_min, f_max ); 
           	Exo_pressvald    = Exo_MOD_val_edit_main_t( Exo_pressvald ,PS4_UP   , f_inc2     , f_min, f_max ); 
    	}
    	
    	if(exorfrpm[exoprofiddef] < 0)
    		exorfrpm[exoprofiddef] = 0;
     
     
    
     
     
    	return Exo_pressvald;
}
    
int n_str_;                  
int horiz_X_center_sufix;    
                             
function print_number(Exo_pressvald,Exo_pressdigitd ,Exo_print_SX , Exo_print_SZN , Exo_font_selection_motherfucker) {                                              
    n_str_ = 1;  c_val = 10000;                                                                    
    if(Exo_pressvald < 0)                      
    {                                                 
         putc_oled(n_str_,45);
         n_str_ += 1;                                 
         Exo_pressvald = abs(Exo_pressvald);                                                                        
    }                                                                                            
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(Exo_pressdigitd >= c)                             
        {                                              
            putc_oled(n_str_,numConvMethodOL[Exo_pressvald / c_val]);
            Exo_pressvald = Exo_pressvald % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(Exo_print_SX,Exo_print_SZN,Exo_font_selection_motherfucker,n_str_ - 1,OLED_BLACK);
}                                
function toggle(f_idx, Exo_pressvald) { 
     
    	if(event_press(PS4_UP))
    	{
    		if(ExoDefind_xx_1 == f_idx)
    		{
    			if(f_idx == 1)  
    				ExoRF_switch[exoprofiddef] = 0; 
    
    			Exo_pressvald = 1;
    		
    		}
     
    		Exo_display_mm = TRUE;
    	}
     
    	if(event_press(PS4_DOWN))
    	{
    		if(ExoDefind_xx_1 == f_idx)
    		{
    			Exo_pressvald = 0;
    			combo_run(RUMBLE_OFF);
    		}		
    		Exo_display_mm = TRUE;
    	}
    	return Exo_pressvald;
}    
function Exo_main_disp_edit(f_idx, f_string, f_print, Exo_pressvald) { 
     
     
        	if(ExovaldefIND_x_2 == f_idx)
        	{

        		rect_oled(0, 0,OLED_WIDTH,OLED_HEIGHT,FALSE,1); 

    			line_oled(0,24,127,24,2,1);
    			line_oled(0,32,127,32,2,1);
    			
        		printf(f_string, 3,OLED_FONT_MEDIUM, OLED_WHITE, f_print);
     
        	
        		if(f_idx == 4 || f_idx == 7) 
        			Exo_num_8_string((VALUES[exoprofiddef][exovaldefindx] + Exo_pressvald) * 100, find_digits((VALUES[exoprofiddef][exovaldefindx] + Exo_pressvald) * 100));
     
        	
        		else if(f_idx <= eoldefmain) 
        			Exo_num_8_string(VALUES[exoprofiddef][exovaldefindx] + Exo_pressvald, find_digits(VALUES[exoprofiddef][exovaldefindx] + Exo_pressvald));
     
        	
        		else 
        			Exo_num_8_string(Exo_pressvald, find_digits(Exo_pressvald));
        	}
}
function Exo_num4string(Exo_pressvald,Exo_pressdigitd ,Exo_print_SX , Exo_print_SZN , Exo_font_selection_motherfucker) {                  

    n_str_ = 1;  c_val = 10000;                            
                                                      
    if(Exo_pressvald < 0)                     
    {                                                 
         putc_oled(n_str_,45);    
         n_str_ += 1;                                      
         Exo_pressvald = abs(Exo_pressvald);  
         
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(Exo_pressdigitd >= c)                             
        {                                             
            putc_oled(n_str_,numConvMethodOL[Exo_pressvald / c_val]);    
            Exo_pressvald = Exo_pressvald % c_val;                    
            n_str_ +=  1;                                  
                                             
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(Exo_print_SX,Exo_print_SZN,Exo_font_selection_motherfucker,n_str_ - 1,OLED_WHITE); 
}      

function Exo_MOD_screendisplay_x(f_idx, f_string, f_print, f_toggle) { 
        	if(ExoDefind_xx_1 == f_idx)
        	{

        		rect_oled(0, 0,OLED_WIDTH,OLED_HEIGHT,FALSE,1);
        		line_oled(1,1,127,1,1,1);
        		line_oled(0,23,127,23,1,1);
    			line_oled(0,24,127,24,1,1);
    			line_oled(0,32,127,32,1,1);
    			rect_oled(34,32,64,40,1,1); 
    			Exo_num4string(ExoDefind_xx_1 + 1,find_digits(ExoDefind_xx_1 + 1 ) ,16 , 45 , OLED_FONT_SMALL); 
    			if(ExoDefind_xx_1 > 0){
					putc_oled(1,133);
					puts_oled(2,45,OLED_FONT_SMALL,1,OLED_WHITE);
				}
				if(ExoDefind_xx_1 < 17){
					putc_oled(1,134);
					puts_oled(119,45,OLED_FONT_SMALL,1,OLED_WHITE);
    			}
        		printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
     
        	
        		if(f_toggle == 1)
        			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),36,OLED_FONT_LARGE,OLED_BLACK,ON[0]);
        		else
        			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),36,OLED_FONT_LARGE,OLED_BLACK,OFF[0]);
        	}
}     
function Exo_MOD_val_edit_main_t(Exo_pressvald,Exo_Fur_btn,f_inc, f_rng_min, f_rng_max) { 
     
     
        if(press_hold(Exo_Fur_btn)) 
        {
            Exo_pressvald += f_inc;
    		if(ExovaldefIND_x_2 > eoldefmain)
    		{
            	if(Exo_pressvald < f_rng_min) 
            		Exo_pressvald = f_rng_min; 
       		 
           		if(Exo_pressvald > f_rng_max) 
            		Exo_pressvald = f_rng_max;
    		}
    		else
    		{
          
            if((Exo_pressvald + VALUES[exoprofiddef][exovaldefindx]) < f_rng_min) 
            	Exo_pressvald = f_rng_min + VALUES[exoprofiddef][exovaldefindx]; 
        
            if((Exo_pressvald + VALUES[exoprofiddef][exovaldefindx]) > f_rng_max) 
            	Exo_pressvald = f_rng_max - VALUES[exoprofiddef][exovaldefindx]; 
            }
            Exo_display_mm = TRUE;
        }
        return Exo_pressvald; 
}      
function Exo_num_8_string(Exo_pressvald,Exo_pressdigitd) {

        i = 1;  c_val = 10000;
     
    	if(Exo_pressvald < 0) //
    	{          
             putc_oled(i,45);    
             i += 1;
             Exo_pressvald = abs(Exo_pressvald);
    	} 
     
    	for(c = 5; c >= 1; c--) 
    	{
    	    if(Exo_pressdigitd >= c) 
    	    {
                putc_oled(i,numConvMethodOL[Exo_pressvald / c_val]);
                Exo_pressvald = Exo_pressvald % c_val;
                i +=  1; 
                if(c == 4) 
                {
                    putc_oled(i,44);  
                    i += 1;
                }
            }
            c_val /= 10;
        }   
        puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}      
function find_digits(f_num) {     
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}          
function center_x(f_chars,Exo_font_selection_motherfucker) {
    
     
     
        return (OLED_WIDTH / 2) - ((f_chars * Exo_font_selection_motherfucker) / 2);
} 
     
function center_y(f_size) {

 
 
    return (OLED_HEIGHT  / 2) - (f_size / 2);
}      
     
function press_hold(Exo_Fur_btn) { 
    
     
     
    	return event_press(Exo_Fur_btn) || get_val(Exo_Fur_btn) && get_ptime(Exo_Fur_btn) > 250 
    	       && get_ptime(Exo_Fur_btn) % (get_rtime() * 8) == 0;
}     
function led(f_color) {
       for(i = 0; i <= 3; i++) 
       {
         set_led(i,duint8((f_color * 2) + i));
       }
}
     
function Exo_valSAVE_oo_x () {
    	combo_run(Exo_Saveusrmenu_vals);
     
    
    	                                      
    	set_pvar(SPVAR_1,ExoAR_switch[0]);set_pvar(SPVAR_7,exoarv[22]);
    	set_pvar(SPVAR_2,ExoAR_switchv2[0]);set_pvar(SPVAR_8,exoarh[0]);
    	set_pvar(SPVAR_3,ExoRF_switch[0]);set_pvar(SPVAR_9,exoarstart[0]):
    	set_pvar(SPVAR_4,ExoAKRF_switch[0]);set_pvar(SPVAR_10,exoarstop[0]);
    	set_pvar(SPVAR_5,ExoAutoSteadyAim_switch[0]);set_pvar(SPVAR_11,exoarstime[0]);
    	set_pvar(SPVAR_6,ExoFaze_scope_switch_[0]);set_pvar(SPVAR_12,exoarHtimestart[0]);set_pvar(SPVAR_13,exoarHtimestop[0]);set_pvar(SPVAR_14,exoarHtime[0]);set_pvar(SPVAR_15,exorfrpm[0]);set_pvar(SPVAR_16,USE_SLIDE_CANCEL);
    
      
      set_pvar(SPVAR_17,ExoAR_switch[1]);set_pvar(SPVAR_23,exoarv[1]);set_pvar(SPVAR_18,ExoAR_switchv2[1]);set_pvar(SPVAR_24,exoarh[1]);set_pvar(SPVAR_19,ExoRF_switch[1]);set_pvar(SPVAR_25,exoarstart[1]):set_pvar(SPVAR_20,ExoAKRF_switch[1]);set_pvar(SPVAR_26,exoarstop[1]);set_pvar(SPVAR_21,ExoAutoSteadyAim_switch[1]);set_pvar(SPVAR_27,exoarstime[1]);set_pvar(SPVAR_22,ExoFaze_scope_switch_[1]);set_pvar(SPVAR_28,exoarHtimestart[1]);set_pvar(SPVAR_29,exoarHtimestop[1]);set_pvar(SPVAR_30,exoarHtime[1]);set_pvar(SPVAR_31,exorfrpm[1]);
    	                                                 
     
     
    
        
      set_pvar(SPVAR_33,ExoAim_enabled);
      set_pvar(SPVAR_34,ExoAimV6on);                     set_pvar(SPVAR_45,ExoAirecordthreshold); 
      set_pvar(SPVAR_35,ExoBaseAimyz);                   set_pvar(SPVAR_46,ExoRAGEAIMx);
      set_pvar(SPVAR_36,ExoPolar_remix);                      set_pvar(SPVAR_47,ExoAIaimengaged);      
      set_pvar(SPVAR_37,ExoGLUE_aim);                     set_pvar(SPVAR_48,ExoAimlimind);
      set_pvar(SPVAR_38,drop_shot);                      set_pvar(SPVAR_49,ingamesens);  
      set_pvar(SPVAR_39,Exosensxx);                         set_pvar(SPVAR_50,ExoPOLARMAXCOORD);
      set_pvar(SPVAR_40,ExoTeamHelper_on);                     set_pvar(SPVAR_51,ExoPOLARMAXSPEED);
      set_pvar(SPVAR_41,ExoEP_on);                     set_pvar(SPVAR_52,ExoGlueAimSize);
      set_pvar(SPVAR_42,ExoAutostrafe_enabled);                     set_pvar(SPVAR_53,ExoGlueAimTime); 
      set_pvar(SPVAR_43,Exoflipped_enabled);                        set_pvar(SPVAR_54,ExoDSspeed);
      set_pvar(SPVAR_44,Exoinvert_enabled);                    set_pvar(SPVAR_55,ExoGeneralSensInd);
                                                         set_pvar(SPVAR_56,ExoAimdownsightsendind);
                                                         set_pvar(SPVAR_57,Exofiresensind);
                                                         set_pvar(SPVAR_58,Exoadsfiresensind);
                                                         set_pvar(SPVAR_59,Exolethalsensind);
                                                         set_pvar(SPVAR_60,ExoFaZescopeDelay);
                                                         set_pvar(SPVAR_61,ExoRAGEAIMx);
                                                         set_pvar(SPVAR_62,ExoAIaimengaged);
                                                         set_pvar(SPVAR_63,ExoAimlimind);
     
     
}