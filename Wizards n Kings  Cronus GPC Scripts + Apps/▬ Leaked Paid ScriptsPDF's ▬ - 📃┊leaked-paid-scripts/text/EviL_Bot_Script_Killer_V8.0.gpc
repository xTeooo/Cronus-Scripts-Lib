//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                                                                               #
//#################################################################################################
//################### © 2021, Sami ABADA - Sweet EviL, All Rights Reserved ########################
//################################################################################################# 
/*
	
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
					© 2021, Sami ABADA - Sweet EviL, All Rights Reserved


//#################################################################################################

Step 1:
	•	change your sensitivity in the game to 3  (for cod 3 3 and use multiplier 1.0 with standard curve and standard aim assis)

step 2:
	•	be sure that :
			USE_AIM_ASSIST			   = FALSE;
			AR_TYPE					   = DISABLED;
			USE_STEADY_AIM			   = FALSE;
	
	How to test:

	- Set ballistic coef to 5 
	
	- Game sensitivity to 2/2 (low sensitivity for example 10% for fortnite)
	
	- test hip and ads sensitivity , just move your right stick normaly (camera)
	
	- If you notice you re getting your usual sensitivity or little higher 
	Just ads move slowly your crosshairs and adjust the BALLISTIC_COEF range 0 to 5 
	
	- Second case if you feel movement is slow Rise your game sensitivity 
	
	-Do the same test as describe before
	
	- Repeat this until you find your good settings
	
	Higher is your game sensitivity, less is tracking and stickiness
	
step 2:
	•	be sure that :	
			AR_TYPE					   = USE_RUMBLE_EVIL_AR or USE_DYNAMIC_EVIL_AR
		
		Anti-Recoil AR
	•	Go into a custom match or plunder match to find your Anti Recoil settings adjust AR_STRENGTH range -25 to 50 
	•	choose between Dynamic AR or Rumble AR 
	•	If you use dynamic AR 
		o	If your weapon pulls down decrease strength 
		o	If you want more AR assistance increase strength 
	•	If you use rumble AR enable vibration in the game
		o	If your weapon pulls down increase AR strength 
		o	If your weapon goes up and you need assistance decrease strength
		
step 3:
	•	be sure that
			USE_AIM_ASSIST					= TRUE
			
	•	test all 
			AIM_MODULATION 					= DISABLED or STEADY or DYNAMIC
											
	•	Once you find the best AIM_MODULATION that sweet your game play, you can tweak:
		 o	first: AIM_SLOPE range [4 to 20]
		 o	second : AIM_ASSIST range [12 to 32], important AIM_ASSIST shold be even bumber!!!!!!!! 
		 
		 
	•	To get the best Aim Assist and the best Slope settings, go within Compiler and Warzone Plunder or a private match and do the following:
	
	•	Enable Aim Assist (Set to TRUE) use Aim Modulation = Disabled and Slope = 10 
	
	•	For AIM ASSIST test the following numbers: 16 20 24 28 32. When you start having screen stuttering when you ADS (aim down sight) 
	or a loss of precision, stop the test and select the value you feel most comfortable with. If you want more fine-tuning, take your 
	best value you have found and add or take away 2. Then test again. (For example, 20 is the best value you have found for Aim Assist, 
	to keep fine-tuning take away 2 to bring it to 18, or add 2 to bring it 22 and test it.)
	
	•	SLOPE gives you the drawing speed and this can be crucial to get a more sticky aim. Do the same test as used for Aim Assist as seen above 
	but for this SLOPE test use the following numbers: 4 8 12 16 20.  Keep your favourite Aim Assist number in place for this test.
	(For example, 8 is the best value you have found for SLOPE, to keep fine-tuning take away 2 to bring it to 6, or add 2 to bring it 10 and test it.)
	
	If you want some fine-tuning and you think that your best slope is between 4 and 8 you can test 6 This should be done with MODULATION disabled!! 
	
	•	Aim Modulation Disabled gives good results for all ranges but also depends on your Aim Assist. A higher value is good in Aim Assist for close 
	and mid-range but not so much for long-range.
	
	•	 To test Dynamic and Steady use the best slope value found above. Take -2 away from your Aim Assist before testing Dynamic and Steady. 
	For example, you find that 20 is the best value when Modulation is disabled, try using 18 and keep the same Slope. STEADY will give you a good result 
	for long and close fights. Dynamic is overpowered for close/mid range
		
step 4:
	•	be sure that
			USE_STEADY_AIM					= TRUE			
	•	adjust your RESOLUTION test 4 6 8
	
	Steady Aim should be tested once all other values are optimised.
*/

/*
const int16  Ballistic_Curve_LT[] = { 
										 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101,
									102, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106,
									107, 107, 108, 108, 109, 110, 110, 111, 112, 112, 113, 114, 114,
									115, 116, 117, 118, 118, 119, 120, 121, 122, 123, 124, 125, 126,
									127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141,
									142, 144, 145, 146, 148, 149, 150, 152, 153, 155, 156, 158, 159,
									161, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 181,
									183, 185, 186, 188, 190, 192, 194, 196, 198, 200, 200, 200
							 	};
*/		

const int16  Ballistic_Curve_LT[] = 
									{ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 10, 11,
									12, 14, 16, 18, 20, 23, 25, 28, 30, 32, 34, 36, 38, 39, 41, 42, 44,
									45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65,
									66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81,
									82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 89, 90, 91, 91, 92, 93,
									93, 94, 95, 95, 96, 96, 97, 98, 98, 99, 99, 100,100,100,100,
									101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106,
									107, 108, 109, 110, 111, 112, 114,116, 118, 120, 123, 125};

								 	
const int16 Lookup_Table[] 		= {
									0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156, 
									173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
									342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
									500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
									642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
									766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
									866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
									939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
									984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
									1000
									};								 	

define TIME_BASE			= 4;	// don't change	

//################################################################################################# 								 	
								 	
define ADS_BUTTON			= PS4_L2;
define FIRE_BUTTON			= PS4_R2;
define CROUCH_BUTTON 		= PS4_CIRCLE;  
define JUMP_BUTTON  		= PS4_CROSS;
define SWAP_BUTTON			= PS4_TRIANGLE;
define MELEE_BUTTON			= PS4_R3;
define SPRINT_BUTTON		= PS4_L3;

int INVERTED				= 0;

define STICK_DRIFT			= 6; // DON'T CHANGE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

int USE_SLIDE_CANCEL		= 1; // 0 disable, 1 MW, 3 CW

define CW_Slide_Delay    	=  80;	
define MW_Slide_Delay 		=  80;

int USE_HAIR_TRIGGER		= TRUE;

int USE_HOLD_BREATH			= TRUE;

int	USE_RUMBLE 				= FALSE;

//#################################################################################################

// Range 0 to 5 , icrease this value will increase your sensitivity

int BALLISTIC_COEF			= 5; // range 0 to 5

//################################################################################################# 

define DISABLED						= 0;
define USE_RUMBLE_EVIL_AR			= 1;
define USE_DYNAMIC_EVIL_AR			= 2;

int AR_TYPE							= DISABLED;  // 
int AR_STRENGTH						= 20;  		// can be negative if you want more ar and use : USE_RUMBLE_EVIL_AR

//################################################################################################# 

int USE_AIM_ASSIST					= FALSE;
//don't change
//define DISABLED					= 0;		// like in test 17
define STEADY						= 1;		// like in test 18
define DYNAMIC						= 2;		// line in test 19

//select modulation type
int AIM_MODULATION					= DISABLED;  // you can always select disabled, i just changed the line 

int	AIM_SLOPE						= 10;
int	AIM_ASSIST 						= 20;

//################################################################################################# 

int USE_STEADY_AIM					= FALSE;
define RESOLUTION					= 6;

//################################################################################################# 

define MAGNITUDE					= 50;			   // don't change
int REFRESH_RATE					= TIME_BASE * 10;  // don't change

//################################################################################################# 			

define DYNAMIC_EVIL_AR_UPDATE_CYCLE			= TIME_BASE * 10;
define DYNAMIC_EVIL_AR_MIN_RECOIL_PERSENT	= 50;
define DYNAMIC_EVIL_AR_ARRAY_LENGTH			= 64;//value authorised 32, 64, 128
define DYNAMIC_EVIL_AR_INDEX_MASK 			= DYNAMIC_EVIL_AR_ARRAY_LENGTH - 1; 

int update_timer;
int C_RX;
int C_RY;
int L_RX;
int L_RY;
//int T_RX;
int T_RY;
int Inc_Dec_State_1;
int Inc_Dec_State_2;
int Aim_Assit_1;
int Aim_Assit_2;
int slide_enable;
int angle;
int _ret;
int _temp;
int mvt_direction;
//int magnitude_ok;
int min_aim_assit;
int cw_angle;
int ar_strength;
int inverted;
int b_coef;

init
{
	mvt_direction = 1;
	min_aim_assit = AIM_ASSIST/2;
	Aim_Assit_1 = min_aim_assit;	
	Aim_Assit_2 = AIM_ASSIST;
	Inc_Dec_State_1 = TRUE;
	Inc_Dec_State_2 = FALSE;
	
    update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	cw_angle = 90 * inverted;
		
	ar_strength = (AR_STRENGTH/2) + AR_STRENGTH;
	
	b_coef = BALLISTIC_COEF * 5 ;
	
	if(b_coef > 25)
		b_coef = 25;	
}


main {

	vm_tctrl(-6);
	
	if(USE_RUMBLE == FALSE)
	{
		block_rumble();
	}
	
	if(USE_HAIR_TRIGGER)
	{
		if(get_ival(PS4_R2) > 10)
			set_val(PS4_R2, 100);

		if(get_ival(PS4_L2)> 10)
			set_val(PS4_L2, 100);
	}
	
	if(get_val(ADS_BUTTON) > 50 || get_val(FIRE_BUTTON) > 50)
	{						
		C_RX = get_ival(PS4_RX);
		C_RY = get_ival(PS4_RY);
		
		if(!get_mvt_direction(C_RX, L_RX))
		{	
			if(abs(C_RX) < STICK_DRIFT)
				C_RX = 0;	
		}
		
		if(!get_mvt_direction(C_RY, L_RY))
		{	
			if(abs(C_RY) < STICK_DRIFT)
				C_RY = 0;		
		}
	
		C_RX = process_ballistic_curve(C_RX, b_coef);
		C_RY = process_ballistic_curve(C_RY, b_coef);
		
		/*_temp =  Ballistic_Curve_LT[abs(C_RX) + b_coef];
		set_val(TRACE_3, _temp );
		set_val(TRACE_1, C_RX);	
		*/
		if(update_timer >= REFRESH_RATE)
		{			
		
			block(PS4_RX, REFRESH_RATE);
			block(PS4_RY, REFRESH_RATE);
			
			_ret = get_mvt_direction(C_RX, L_RX);
								
			if(_ret != 0)
				mvt_direction = _ret;
				
			//set_val(TRACE_1, mvt_direction);
				
			if(USE_AIM_ASSIST == TRUE)
			{
				if(Inc_Dec_State_1 == FALSE)
				{
					Aim_Assit_1 -= 1;
			
					if(Aim_Assit_1 < min_aim_assit)
						Inc_Dec_State_1 = TRUE;
				}
				else
				{
					Aim_Assit_1 += 1;
			
					if(Aim_Assit_1 > AIM_ASSIST)
						Inc_Dec_State_1 = FALSE;
				}
				
				if(Inc_Dec_State_2 == FALSE)
				{
					Aim_Assit_2 -= 1;
			
					if(Aim_Assit_2 < min_aim_assit)
						Inc_Dec_State_2 = TRUE;
				}
				else
				{
					Aim_Assit_2 += 1;
			
					if(Aim_Assit_2 > AIM_ASSIST)
						Inc_Dec_State_2 = FALSE;
				}			
			}
			
			update_timer = 0;	
			
			L_RX = C_RX;
			L_RY = C_RY;
		}	
		
		if((AR_TYPE) && ((get_val(ADS_BUTTON) > 50) && (get_val(FIRE_BUTTON)> 50)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
		{
			if(AR_TYPE == USE_RUMBLE_EVIL_AR)
			{
				T_RY = get_rumble_evil_ar();
			}
			else
			{
				T_RY = (get_ptime(FIRE_BUTTON)/ (160));
				//set_val(TRACE_2, T_RY);
				
				if(T_RY > ar_strength)
					T_RY = ar_strength ;
				
				T_RY = T_RY +  AR_STRENGTH - ((abs(C_RX * C_RX) + abs(C_RY * C_RY))/1000) ;
				//set_val(TRACE_1, T_RY);
			}
		
			if(inverted == -1)
				C_RY += inv(T_RY);
			else
				C_RY += T_RY;
		}
		
		if(USE_AIM_ASSIST)
		{
			if(AIM_MODULATION == DISABLED)
			{
				if(mvt_direction == 1)
				{
					C_RX += get_polar_coordinate(Aim_Assit_1, sin(angle));
					C_RY += get_polar_coordinate(Aim_Assit_2, cos(angle));
				}
				else
				{
					C_RX += get_polar_coordinate(Aim_Assit_1, cos(angle));
					C_RY += get_polar_coordinate(Aim_Assit_2, sin(angle));
				}
			}
			else if (AIM_MODULATION == STEADY)
			{
				if(mvt_direction == 1)
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, sin(angle)) + get_polar_coordinate(min_aim_assit, sin(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, cos(angle)) + get_polar_coordinate(min_aim_assit, cos(cw_angle)));
				}
				else
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, cos(angle))+ get_polar_coordinate(min_aim_assit, cos(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, sin(angle))+ get_polar_coordinate(min_aim_assit, sin(cw_angle)));
				}
			}
			if(AIM_MODULATION == DYNAMIC)
			{
				if(mvt_direction == 1)
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, sin(angle)) + get_polar_coordinate(Aim_Assit_2/2, sin(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, cos(angle)) + get_polar_coordinate(Aim_Assit_1/2, cos(cw_angle)));
				}
				else
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, cos(angle))+ get_polar_coordinate(Aim_Assit_2/2, cos(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, sin(angle))+ get_polar_coordinate(Aim_Assit_1/2, sin(cw_angle)));
				}
			}
		
			angle += AIM_SLOPE;
			angle = angle % 360;
		
			cw_angle = (cw_angle + 1) % 360;
		}

		if(USE_STEADY_AIM == TRUE)
		{
			C_RX = get_steady_aim(C_RX, RESOLUTION);
			C_RY = get_steady_aim(C_RY, RESOLUTION);	
		}
	
		set_val(PS4_RX, clamp(C_RX, -100, 100));
		set_val(PS4_RY, clamp(C_RY, -100, 100));
		
		update_timer += get_rtime();
	}
	else
	{
		update_timer = 0;
		update_timer = REFRESH_RATE;
		
		
		angle = 90 * inverted;
		cw_angle = 90 * inverted;
		
		Aim_Assit_1 = min_aim_assit;	
		Aim_Assit_2 = AIM_ASSIST;
		
		C_RX = 0;
		C_RY = 0;
		L_RX = 0;
		L_RY = 0;
		
		set_val(PS4_RX, process_ballistic_curve(get_ival(PS4_RX), b_coef));
		set_val(PS4_RY, process_ballistic_curve(get_ival(PS4_RY), b_coef));
	}
	
	set_val(PS4_LX, process_ballistic_curve(get_ival(PS4_LX), b_coef));
	set_val(PS4_LY, process_ballistic_curve(get_ival(PS4_LY), b_coef));
	
	if(USE_SLIDE_CANCEL) 
	{
	    if(
	        (get_val(PS4_LY) < -85) || (get_val(PS4_LY) > 85) || 
	        (get_val(PS4_LX) < -85) || (get_val(PS4_LX) > 85)
	        ) 
	    {
	        slide_enable = 0;
	        
	        if(event_release(CROUCH_BUTTON))
	        {
	            if (USE_SLIDE_CANCEL == 1) 
	            {
	                slide_enable = 1;
	            }
	            else if (USE_SLIDE_CANCEL == 2) 
	            {
	                if(
	                ((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))
	                )
	                {
	                    slide_enable = 1;
	                }
	            }
	            else if (USE_SLIDE_CANCEL == 3) 
	            {
	                slide_enable = 2;
	            }
	            else if (USE_SLIDE_CANCEL == 4) 
	            {
	                if(
	                ((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))
	                )
	                {
	                    slide_enable = 2;
	                }
	            }
	        }
	        
	        if(slide_enable == 1)
	           combo_run(CANCEL_SLIDE_MW);
	        else if(slide_enable == 2)
	           combo_run(CANCEL_SLIDE_CW); 
	    } 
	    
	    if(USE_HOLD_BREATH)
		{
			if(get_val(ADS_BUTTON))
				set_val(SPRINT_BUTTON,100);
	
			if(get_val(PS4_LY) <-90 && get_val(ADS_BUTTON) && get_ptime(ADS_BUTTON) > 200 && combo_running(HOLD_BREATH))
				combo_stop(HOLD_BREATH);
	
			if(event_press(ADS_BUTTON))
				combo_run(HOLD_BREATH);
	
			if(get_val(ADS_BUTTON) && get_lval(SPRINT_BUTTON))
				set_val(SPRINT_BUTTON,0);
		}
	}				
}

//#################################################################################################

function get_rumble_evil_ar()
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH);
	}

	return 0;
}

//#################################################################################################

function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}

//#################################################################################################

function process_ballistic_curve(stick_val, ballistic_coef)
{		
	_temp = 1;
	
	if(stick_val < 0)
		_temp = -1;
	
	_ret = abs(stick_val) + ballistic_coef;

	if(_ret > 125)
		_ret = 125;
	
	_ret = (Ballistic_Curve_LT[_ret] - Ballistic_Curve_LT[ballistic_coef]) * _temp;
	
	return _ret;
}

//#################################################################################################

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val(TRACE_3,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

//################################################################################################# 

function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}

//################################################################################################# 

function sin(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    
    return _ret;
}

//################################################################################################# 

function cos(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    
    return _ret;
}

//################################################################################################# 

function get_polar_coordinate(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}

//################################################################################################# 
/*
function get_polar_val( _val)
{
	if (_val > 100)
		_val = 100;

	if (_val < -100)
		_val = -100;

	if (_val >= 0)
		_ret = (_val * 327) + ((_val * 67) / 100);
	else
		_ret = (_val * 327) + ((_val * 68) / 100);

	return _ret;
}
*/
//#################################################################################################

combo CANCEL_SLIDE_CW {
	set_val(CROUCH_BUTTON, 100);
    wait(CW_Slide_Delay);
	set_val(CROUCH_BUTTON, 0);
	wait(20);
	set_val(SPRINT_BUTTON, 0);
	set_val(ADS_BUTTON, 100);
	wait(10);
	set_val(ADS_BUTTON, 0);
	set_val(CROUCH_BUTTON, 100);
	set_val(SPRINT_BUTTON, 100);
	wait(20);
	set_val(CROUCH_BUTTON, 0);
	set_val(SPRINT_BUTTON, 0);
	wait(20);
}

//#################################################################################################

combo CANCEL_SLIDE_MW {
	set_val(CROUCH_BUTTON, 100);
	wait(MW_Slide_Delay); 
	set_val(CROUCH_BUTTON, 0);
	wait(60);
	set_val(CROUCH_BUTTON, 100);
	wait(50);
	set_val(CROUCH_BUTTON, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);
	set_val(CROUCH_BUTTON, 0);
	set_val(JUMP_BUTTON, 100);
	wait(10);
	set_val(JUMP_BUTTON, 0);
}

//#################################################################################################

combo HOLD_BREATH
{
	set_val(SPRINT_BUTTON,0);
	wait(64);
	set_val(SPRINT_BUTTON,100);
	wait(112);
	set_val(SPRINT_BUTTON,0);
	wait(112);
}

/*
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
						© 2021, Sami ABADA - Sweet EviL, All Rights Reserved
*/