define LTrigger = XB1_LT;
define RTrigger = XB1_RT; 
define Fire = XB1_RT;
define Pickaxe = XB1_Y;
define ADS = XB1_LT;
define Jump = XB1_A;
define Edit = XB1_LS; 
define Switch = XB1_A;
define Build = XB1_B;           
define Wall = XB1_RT;
define Floor = XB1_RB;
define Ramp = XB1_LT
define Cone = XB1_LB;
define Trap = XB1_X;
define Confirm = XB1_LT;
define Reset = XB1_RIGHT;

define InstantResetB = XB1_DOWN; 
define EditAssist = XB1_LS; 

define Up = XB1_UP; 
define Down = XB1_DOWN; 
define Left = XB1_LEFT; 
define Right = XB1_RIGHT;
define RX = PS4_RX;   
define RY = PS4_RY;   
define LX = PS4_LX;   
define LY = PS4_LY;  

define On = TRUE;
define Off = FALSE; 


int PolarAA = On;
int PolarPower = 3.25; 

int LessInputDelay = Off;
define InputDelay = 5;

int InstantTriggers = Off;

int InstantReset = Off;
int InstantResetDelay = 20;

int AntiRecoil = On;
define AntiRecoilStrength = 25;  
define AntiRecoilDisplacement =  0;


int BuildTracker = On;
int BuildSyncTime = 0;

int BuilderPro = Off;
int TouchPad = Off;

main { if(TouchPad) { swap(PS4_SHARE, PS4_TOUCH) }block_rumble(); if(LessInputDelay) { VM(InputDelay); } if (BuilderPro) { if (get_ival(Switch)) { BuildPro = On; if (BuildTracker) BuildTrack = On; } if (BuildPro && event_release(Switch)) { combo_run(BuildPro); BuildPro = Off; if (BuildTracker) BuildTrack = Off; } } if (BuildTracker) { if (event_press(Build)) { BuildTrack = !BuildTrack; } if (BuildTrack && !BuildPro) { BuildCount += get_rtime(); if (event_press(Pickaxe) || BuildCount == BuildSyncTime) { BuildTrack = Off; BuildCount = 0; } if (get_ival(Cone) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap) || get_ival(Edit)) BuildCount = 0; } } 
if (InstantReset) { if (event_press(InstantResetB)) { combo_run(FastReset); } } if (!BuildTrack) { if (PolarAA) { if (get_ival(ADS)|| get_ival(Fire)) { AimAssist(); } if (!get_ival(ADS) 
&& !get_ival(Fire)) { AAT = 0; Axis = 0; } } if(AntiRecoil) { if(get_ival(ADS) && get_ival(Fire)) { combo_run(AntiRecoilS); } } if (InstantTriggers) { deadzone(RTrigger,LTrigger,100,100) } } } combo BuildPro { set_val(Build,0); wait(50); set_val(Build,100); wait(50); } combo FastReset { set_val(EditAssist,100); wait(InstantResetDelay) set_val(Reset,100); wait(InstantResetDelay); combo_run(Confirm); }  combo Confirm { set_val(Confirm,100); wait(InstantResetDelay); set_val(Confirm,0); wait(InstantResetDelay); } function VM (f_speed) { if(f_speed == 0) vm_tctrl(-0); else if(f_speed == 1) vm_tctrl(-2); else if(f_speed == 2) vm_tctrl(-4); else if(f_speed == 3) vm_tctrl(-6); else if(f_speed == 4) vm_tctrl(-8); else if(f_speed == 5) vm_tctrl(-9); } function AimAssist() { AAT += get_rtime(); if (!Axis) set_Val(RY,AAT * PolarPower / 10); if (Axis == 1) 
set_Val(RX,AAT * PolarPower / 10); if (Axis == 2) set_Val(RY,inv(AAT * PolarPower / 10)); if (Axis == 3) { set_Val(RX,inv(AAT * PolarPower / 10)); if (AAT > 50) { AAT = 0; Axis = 0; } } else if (AAT > 50) { AAT = 0; Axis += 1; } } function set_Val(Input,Output) { set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100)); return; } 
combo AntiRecoilS { AntiRecoilVert = get_val(RY) + AntiRecoilStrength; if(AntiRecoilVert > 100) AntiRecoilVert = 100; if(abs(get_val(RY)) < abs(AntiRecoilStrength) + 5) set_val(RY, (AntiRecoilVert)); AntiRecoilHoriz = get_val(RX) + AntiRecoilDisplacement; if(AntiRecoilHoriz > 100) AntiRecoilHoriz = 100; if(abs(get_val(RX)) < abs(AntiRecoilDisplacement) + 5) set_val(RX, AntiRecoilHoriz); } function Set_Val(Input,Output) { set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100)); return; } int BuildTrack, BuildCount, AAT, Axis, TimeValue, AxisLY, AxisCY, ARValue, AROutPut, BoostAR, RecoilTimer, Head,BuildPro, AntiRecoilVert, AntiRecoilHoriz;