/*

 ──▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───                                                                               
───█▒▒░░░░░░░░░▒▒█───                             
────█░░█░░░░░█░░█────
─▄▄──█░░░▀█▀░░░█──▄▄─
█░░█─▀▄░░░░░░░▄▀─█░░█
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█/////////////////////////////####### Best Updated Scripts  #########///////////////////////////
█░░╦─╦╔╗╦─╔╗╔╗╔╦╗╔╗░░█
█░░║║║╠─║─║─║║║║║╠─░░█
█░░╚╩╝╚╝╚╝╚╝╚╝╩─╩╚╝░░█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
 
  ____________________________InstalKill _V1____ Fortnite Update 7.30 Working __________________________________________
///   |------*/ int In_Game_Sens   = 5;     /*#######|------------------- SENSITIVITY OPTIMIZING! -------------------|                                                                                     
///  SETUP                                                                                 ///
///----------------------CONTROLS---------------------------------------------------------------------------------------
///
///  4 Layer Ramp Rush  HOLD "LT and Y TURN OFF SAME BUTTON When in build Mode just press RT Ur Good To Go															                                              
///- -===================================================================================== ======================
/// AUTO RUN: alway on, moving the left stick upwards will automatically run              ///
///=========================================================================================
///AIM ABUSE: LT+LEFT                                                                                                                                                                                 
///=========================================================================================
///DROPSHOT: ADS + Down, the player lowers and rises quickly as he shoots      
///=========================================================================================
/// ADVANCED Anti Recoil         ///                      
///=========================================================================================
///  RAPID FIRE: ADS + RIGHT(On-Off)   but now on by defualt                                                                ///                                    
///=========================================================================================
/// HAIR TRIGGER: always On, This also allows super fast building.  
///=========================================================================================
/// Pump+Cannon	it dose DropShot as Well as on same button but it dont really affect .				   ///                  
///=========================================================================================
///Ghost Peek LT+LB best to crouch 
///============================================================================================
///AIM ASSIST  HOLD "ADS_BTN" and TAP "UP
///============================================================================================
///INSTA EDIT////
-------------------------------------------------------------------------------------------------------------------------
*/

//INSTA EDIT & INSTA RESET//////////////////////////////////////////////////
int EDIT_BUTTON       = BUILD_BTN;                         				////
int EDIT_BUTTON_HOLD  = TRUE;          									////
int HOLD_TIME         = 200;      										//// 
int EDIT_RESET_BUTTON = CROUCH_BTN  

//RAPID FIRE///////////
int RapidFire = FALSE; //
  
// Pump+Cannon////
int PumpCannon = FALSE; //
 

//Advanced AIM ABUSE
 int Advanced_AA = TRUE;
 int BoostAbuse = FALSE;
 
//Advanced AIM ASSIST 
int AimAssist = TRUE; 

  
//GHOST PEEK////
int GhostPeek = FALSE; // 
 
//AIM ASSIST//
int shake = 23//
 
//RAMP RUSH//
int RampRush = FALSE; //
                                                            
//Drop Shot//
int Dropshot       = FALSE;	                                            ////             
int DefenseMode=FALSE;                                                  ////
int AttackMode=TRUE                                                     ////
int DropshotDown   = 140             //Dropshot down values             ////
int DropshotUp     = 70

//Tracker//
int TRACKER    = TRUE;
int P_D        = 21;         //
int N_D     = -21;         //
int N_DiV    = -21;
int delay    = 21;
//----------------------------------------
 define FIRE_BTN = 4; //XB1_RB //PS4_R2
 define ADS_BTN = 7; //XB1_LB //PS4_L2
 define CROUCH_BTN = 5; //XB1_RS //PS4_R3
 define SPRINT_BTN = 8; //XB1_LS //PS4_L3
 define JUMP_BTN = 19; //XB1_A  //PS4_CROSS
 define NEXT_PIECE = 3; //XB1_RT //PS4_R1
 define LEFT_BUMP = 6; //XB1_LT //PS4_L1
 define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLE
 define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE
 define WALL_BTN = 4; //XB1_RB //PS4_R2
 define STAIRS_BTN = 7; //XB1_LB //PS4_L2
 define FLOOR_BTN = 3; //XB1_RT //PS4_R1
 define ROOF_BTN = 6; //XB1_LT //PS4_L1
 define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
 define R_X = 9; //XB1_RX //PS4_RX
 define R_Y = 10; //XB1_RY //PS4_RY
 define L_X = 11; //XB1_LX //PS4_LX
 define L_Y = 12; //XB1_LY //PS4_LY
 define UP = 13; //XB1_UP //PS4_UP
 define DOWN = 14; //XB1_DOWN //PS4_DOWN
 define LEFT = 15; //XB1_LEFT //PS4_LEFT
 define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT
 define MENU  = XB1_MENU;
 define AX_RX	= XB1_RX;
//-------------------------------------------------------------------------------------------
 //Color List/////            
 define Blue = 1;
 define Red = 2;
 define Green = 3;
 define Pink = 4;
 define SkyBlue = 5;
 define Yellow = 6;
 define White = 7;
 data(1,
     2, 0, 0, 0, //1. Blue                                 
     0, 2, 0, 0, //2. Red                                  
     0, 0, 2, 0, //3. Green                                
     0, 0, 0, 2, //4. Pink                                 
     2, 0, 2, 0, //5. SkyBlue                              
     0, 2, 2, 0, //6. Yellow                               
     2, 2, 2, 2 //7. White 
 );
 int Col_ind;
 //END
//LED
int a; int b;







 //Build Speed
 define build_speed = 50;
 define speed = 50;
 //END






 //UNMAPPING CONTROLS
 unmap 14; //DOWN
 //END
 //-----------------------------------------------------
 // VARIABLES


//ANTI RECOIL SETTINGS
 int ANTI_RECOIL; // 
 int anti_recoil; // 
 define AR_Release = 25;
 define ONLY_WITH_SCOPE = TRUE; // 
 //END


//RUMBLE
 int rumble_type = RUMBLE_A;
 //END


//JItter
 int tap; //ADVANCED JITTER
 int R2_block; //ADVANCED JITTER
 //END


 //AIM Abuse HOLD & WAIT
 int aimabuse_hold;
 int aimabuse_rest;
 //END

main 
{ //--------------------------------- 
     /////////////////////////////////////////////////////////////////////////////////
     // ON-OFF SETTINGS:


     if (get_val(ADS_BTN)) {
         if (event_press(LEFT_BUMP)) {
             GhostPeek = !GhostPeek;
             RapidFire = FALSE;
             PumpCannon = FALSE;
             RampRush = FALSE;
             
             rumble_A_if_true(GhostPeek);
       
        
         }if (event_press(NEXT_PIECE)) {
             PumpCannon = !PumpCannon;
             RapidFire = FALSE;
             Dropshot = FALSE;
             RampRush = FALSE;
             GhostPeek = FALSE;
             rumble_A_if_true(PumpCannon);
         
         }if (event_press(DOWN)) {
             TRACKER = !TRACKER;
             RapidFire = FALSE;
             PumpCannon = FALSE;
             RampRush = FALSE;
             GhostPeek = FALSE;
             Dropshot = FALSE;
             rumble_A_if_true(TRACKER);
         
         }
         if (event_press(RIGHT)) {
             RapidFire = !RapidFire;
             GhostPeek = FALSE;
             PumpCannon = FALSE;
             RampRush = FALSE;
             rumble_A_if_true(RapidFire);
         }
         if (event_press(SWAP_BTN)) {
             RampRush = !RampRush;
             RapidFire = FALSE;
             GhostPeek = FALSE;
             PumpCannon = FALSE;
             rumble_A_if_true(RampRush);
         }
          if (event_press(RELOAD_BTN)) {
             Dropshot = !Dropshot;
             GhostPeek = FALSE;
             PumpCannon = FALSE;
             RapidFire = FALSE;
             RampRush  = FALSE;
             TRACKER = FALSE;
             rumble_A_if_true(Dropshot);
         }
         set_val(DOWN, 0); 
         set_val(RIGHT, 0);
         set_val(SWAP_BTN, 0);
         set_val(CROUCH_BTN, 0);
     }
    
     // HOLD L2(LT) and PRESS LEFT
     if (get_val(ADS_BTN) && event_press(LEFT)) {
         BoostAbuse = !BoostAbuse;
        Advanced_AA = !Advanced_AA;
         rumble_A_if_true(BoostAbuse);
     }
     // HOLD L2(LT) and PRESS UP
     if (get_val(ADS_BTN)) {
         if (event_press(UP)) {
             AimAssist = !AimAssist;
             rumble_A_if_true(AimAssist);
         }
         set_val(UP, 0);
     }
     /////////////////////////////////////////////////////////////////////////////////
     //  Color Identification
     if ((!PumpCannon) && !RapidFire && !GhostPeek && !RampRush) colourled(Red); //EVERYTHING IS OFF
     if (PumpCannon && !tap) colourled(SkyBlue);
     if (PumpCannon && tap) colourled(Blue);
     if (RampRush) colourled(Green);
     
     if (GhostPeek) colourled(Yellow); //IF YELLOW Ghost Peeking IS ON


     /////////////////////////////////////////////////////////////////////////////////
     //Rapid Fire
     if (RapidFire) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) { // HOLD L2 AND R2 FOR RAPID (DONE LIKE THIS TO BE ABLE TO EDIT OBJECTS)
             combo_run(RAPID_FIRE);
             ANTI_RECOIL = 11;
         }
     }
     /////////////////////////////////////////////////////////////////////////////////
     // ANTI RECOIL
     if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
         ANTI_RECOIL = 7;
         combo_run(AntiRecoil);
     }
     /////////////////////////////////////////////////////////////////////////////////
     // ASSAULT RIFLES AIM ABUSE                                            
     if (Advanced_AA) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
             aimabuse_hold = 260; // HOW LONG IS L2 HELD FOR
             aimabuse_rest = 19; // HOW LONG IS L2 NOT HELD FOR
             combo_run(AIM_ABUSE); //AIM ABUSE
         } else {
             combo_stop(AIM_ABUSE);
         }
     } //-----------------------------------------------

     /////////////////////////////////////////////////////////////////////////////////
     
      //InstaEdit & InstaReset
if (a) 
{                                                                           
 if (i < num) 
 {                                                                     
  if (!combo_running(master)) 
  {                                                      
   combo_run(master);                                                                 
  }  
 
  } 
  else if (i > num) 
  {                                                            
       a = FALSE;                                                                   
  }                                                                                
    }                                                                                    
 
    if(EDIT_BUTTON_HOLD)                                                                     
    {                                                                            
      if(get_val(EDIT_BUTTON) && get_ptime(EDIT_BUTTON) > HOLD_TIME)                     
      {                                                                                
          edit = TRUE;                                                                       
      }   
    }                                                                                  
      else if(!EDIT_BUTTON_HOLD)                                                         
      {                                                                                
        if(get_val(EDIT_BUTTON))                                                           
        {                                                                                
        edit = TRUE;                                                                       
        }                                                                                
        }  
   if (edit == TRUE) 
    {                                                                  
     resetPress(0,1,0,0,0,0);                                                         
   if (get_val(BUILD_BTN)) 
    {                                                        
     AimAssist = TRUE;                                                                
     Advanced_AA  = TRUE;                                                                
    }   
 
     if (event_release(FIRE_BTN) || get_val(EDIT_RESET_BUTTON) || get_val(SWAP_BTN)) 
     {   
      set_click(BUILD_BTN, 1, 0);                                                  
      edit = FALSE;                                                                
      }                                                                                
       }
     
// BOOST ABUSE                                           
     if (BoostAbuse) {
         if (get_val(ADS_BTN) > 95) {
             aimabuse_hold = 260; // HOW LONG IS L2 HELD FOR
             aimabuse_rest = 19; // HOW LONG IS L2 NOT HELD FOR
             combo_run(AIM_ABUSE); //AIM ABUSE
         } else {
             combo_stop(AIM_ABUSE);
         }
     }


     /////////////////////////////////////////////////////////////////////////////////
     //PUMP SMG


     if (PumpCannon) {
         if (R2_block) {
             set_val(FIRE_BTN, 0);
             set_val(ADS_BTN, 0);
         }
         //------------------------------------------------
         if (get_val(ADS_BTN) && event_press(FIRE_BTN)) {
             if (!tap) {
                 tap = TRUE; //LED COLOR BLUE
                 combo_run(Double_Tact_R1); //TAP R1
                 
             }
             set_val(FIRE_BTN, 0);
         }
         if (event_press(LEFT_BUMP)) {
             tap = FALSE;
         }
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
             if (tap) {
                 combo_run(Double_Tact_R1);
             } else {
                 combo_stop(Double_Tact_R1);
             }
         }
     }
     
     
     /////////////////////////////////////////////////////////////////////////////////
     //RampRush
     if (RampRush) {
         if (!get_val(ADS_BTN) && get_val(FIRE_BTN)) {
             combo_run(RampRush);
         }
         if (!get_val(ADS_BTN)) {
             set_val(FIRE_BTN, 0);
         }
     }

     /////////////////////////////////////////////////////////////////////////////////
     //AUTO RUN
     if (!get_val(ADS_BTN) && get_val(L_Y) < -90) {
         set_val(SPRINT_BTN, 100);
     }
     /////////////////////////////////////////////////////////////////////////////////
     
     if (GhostPeek) {
         if (get_val(ADS_BTN)) {
             if (event_press(FIRE_BTN)) {
                 combo_run(GhostPeek);
             }
             set_val(FIRE_BTN, 0);
         }
 
     /////////////////////////////////////////////////////////////////////////////////
      //HAIR TRIGGER
     if (get_val(FIRE_BTN)) { //
    
         set_val(FIRE_BTN, 100);
     }
     
     //////////////////////////////////////////////////////////////////////////////////
     //Tracker
     {if(TRACKER) { //
	if(get_val(ADS_BTN)){   /////////
   	combo_run(TRACKER);}   //
    if(get_val(AX_RX)<-19  //
    ||get_val(AX_RX)>19){  //
    combo_stop(TRACKER);}}}
     
     
     
     ///////////////////////////////////////////////////////////////////////////////// 
     //Aim Assist
     if (AimAssist) {
         if (get_val(ADS_BTN) > 95) {
             combo_run(Auto_Aimm);
         } else {
             combo_stop(Auto_Aimm);
         }
         if (get_val(ADS_BTN)) {
             if (abs(get_val(9)) > 15 || abs(get_val(10)) > 15) {
                 combo_stop(Auto_Aimm);
             }
         }
     }

}}
 //----------------------------------------- 


// COMBO BLOCKS 
combo Auto_Aimm { //AIM ASSIST v2
     set_val(R_Y, shake * -1); //1  
     wait(19) ;
     set_val(R_X, shake); //1  
     wait(19) ;
     set_val(R_Y, shake); //1  
     wait(19) ;
     set_val(R_X, shake * -1); //1  
     wait(19) ;
 } //end

		 	//
combo TRACKER {		 	//
	set_val(R_Y, N_DiV);	//
	wait(delay);		   	//
	set_val(R_Y, P_D);   	//
	wait(delay);		   	//
	set_val(R_X, P_D);   	//
	wait(delay);		 	//
	set_val(R_X, N_D); 	//
	wait(delay);		 	//
	set_val(R_Y, P_D); 	//
	wait(delay);			//
	set_val(R_Y, N_D); 	//
	wait(delay);		 	//
	set_val(R_X, N_D); 	//
	wait(delay);		 	//
	set_val(R_X, P_D); 	//
	wait(delay);}

 combo RampRush {
     set_val(STAIRS_BTN, 100); //Pull out STAIRS
     wait(build_speed);
     wait(build_speed);
     set_val(STAIRS_BTN, 100); //Place STAIRS
     wait(50);
     set_val(R_Y, 100);
     wait(20);
     set_val(FLOOR_BTN, 100); //Pull out FLOOR
     wait(build_speed);
     wait(build_speed);
     set_val(FLOOR_BTN, 100); //Place FLOOR
     wait(50);
     set_val(R_Y, -100);
     wait(20);
     set_val(WALL_BTN, 100); //Pull out WALLS
     wait(build_speed);
     wait(build_speed);
     set_val(WALL_BTN, 100); //Place WALLS
     wait(80);
     set_val(JUMP_BTN, 100);
     wait(80);
     set_val(STAIRS_BTN, 100); //Pull out STAIRS
     wait(build_speed);
     wait(build_speed);
     set_val(STAIRS_BTN, 100); //Place STAIRS
     wait(150);
 }

combo GhostPeek {
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(15);
     set_val(FIRE_BTN, 100);
     wait(15);
     wait(10); //INCREASE THIS IF YOU SHOOT THE STAIRS
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(5);
 } // END


 combo AUTO_SNEAK_PEAK {
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(15);
     set_val(FIRE_BTN, 100);
     wait(15);
     wait(10); //INCREASE THIS IF YOU SHOOT THE STAIRS
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(95);
 } // END


 combo AIM_ABUSE { // RAPID AIM
     set_val(ADS_BTN, 100);
     wait(aimabuse_hold);
     set_val(ADS_BTN, 0);
     wait(aimabuse_rest);
 } //end 


 combo RAPID_FIRE {
     set_val(FIRE_BTN, 100);
     wait(10);
     set_val(FIRE_BTN, 0);
     wait(10);
 } //end


combo master {                                                                           
wait(WAIT);                                                                             
set_val(button, 100);                                                                   
wait(28);                                                                               
set_val(button, 0);                                                                     
wait(28);                                                                               
i = i + 1;                                                                              
}

combo Dropshot{
set_val(CROUCH_BTN,100);
wait(DropshotDown);                                                                     
wait(DropshotUp); 
set_val(CROUCH_BTN,100);
}


 combo Double_Tact_R1 { //ADVANCED JITTER
     R2_block = TRUE;
     set_val(FIRE_BTN, 100);
     wait(15);
     wait(5);
     set_val(NEXT_PIECE, 100);
     wait(speed);
     R2_block = FALSE;
 } //end

 combo VIBRATE {
     set_rumble(rumble_type, 100);
     wait(300);
     reset_rumble();
 } //end

 combo AntiRecoil {
     anti_recoil = get_val(R_Y) + ANTI_RECOIL;
     if (anti_recoil > 100) anti_recoil = 100;
     set_val(R_Y, anti_recoil);
 }


 function rumble_A_if_true(var) {
     if (var) rumble_type = RUMBLE_A;
     else rumble_type = RUMBLE_B;
     combo_run(VIBRATE);
 }
 // COLOR LED function                                
 //--------------------------------------------------------------
 function colourled(Colour) {
     Col_ind = (Colour * 4) - 3;
     set_led(LED_1, dbyte(Col_ind));
     set_led(LED_2, dbyte(Col_ind + 1));
     set_led(LED_3, dbyte(Col_ind + 2));
     set_led(LED_4, dbyte(Col_ind + 3));
}
function set_click(B, Num, Wait) {                                                      
    WAIT = Wait;                                                                            
    i = 0;                                                                                   
button = B;                                                                              
num = Num;                                                                               
a = TRUE;
}
int edit = FALSE;                                                                       
int pressedIt[6];                                                                       
int WAIT;                                                                                
int num, i;                                                                           
int button;
function resetPress(P0,P1,P2,P3,T,S) {                                              
if(!P0){pressedIt[0] = FALSE;}    else if(P0) {pressedIt[0] = TRUE;}                     
if(!P1){pressedIt[1] = FALSE;}    else if(P1) {pressedIt[1] = TRUE;}                        
if(!P2){pressedIt[2] = FALSE;}    else if(P2) {pressedIt[2] = TRUE;}                        
if(!P3){pressedIt[3] = FALSE;}    else if(P3) {pressedIt[3] = TRUE;}
}
