//  Script was generated with | ZEN Scripter tool # Author: Excalibur | ver. 8.5.4.1| Date :03/12/22| Time: 8:40:41 PM
//  ========================================================================================
//  Special thanks to Batts, noozbar, DoNotAtMe and all community staff 
//  ========================================================================================
//  Very Special thanks to TAYLORDRIFT who helped me a lot with all new staff in this app.
//  ========================================================================================
//  Credits to noozbar for his basic script : Template script with OLED menu - toggle - editable values - save for 3 profiles 
//  Credits to Batts for all example script for Cronus ZEN device.        
//  ========================================================================================
                                              
//===============================================================
//    BUTTON LAYOUT                                              
//===============================================================
define FIRE_BTN             = PS4_R2;
define ADS_BTN              = PS4_L2;
define SPRINT_BTN           = PS4_L3;
define PRONE_BTN            = PS4_R3;
define JUMP_BTN             = PS4_L3;
define SWITCHWEAPON_BTN     = PS4_PS;
define RELOAD_BTN           = PS4_SQUARE;
define MELEE_BTN            = PS4_PS;
define TACTICAL_BTN         = PS4_L1;
define GRANADE_BTN          = PS4_R1;
define UP                   = PS4_UP;
define RIGHT                = PS4_RIGHT;
define DOWN                 = PS4_DOWN;
define LEFT                 = PS4_LEFT;
define RX                   = PS4_RX;
define RY                   = PS4_RY;
define LX                   = PS4_LX;
define LY                   = PS4_LY;
//===============================================================
//    ADJUSTABLE VARIABLES                                       
//===============================================================
// Index to find Value Name string - switchable in game with left/right in ModEdit
    int valName_idx;                  
int HeadStep;
int HeadMax;
int polar_aasist_radius;
int polar_aasist_steps;
//---Adjustable Variables Count                          
define AMOUNT_OF_VALNAME_IDX = 3; 
    //const string TITLE = "My Game"; // 18 char max 
    const string TITLE = "Fortnite_V1"; // 11 char max 
    const string OFF   = "OFF";    
    const string ON    = "ON";   
    const string SCRIPT_ONOFF  = "SCRIPT WAS";   
// modName # of the last Mod Name string - Used for cycle modName_idx        
   define MAX_MODS_COUNT = 5;                          
// Mod Name      -   Text to Display
  const string MOD67_2_VARIABLES    = "Head Assist" ; 
  const string VMSPEED              = "VM Speed" ; 
  const string POLARAIMASSIST_TD    = "Polar AA" ; 
  const string JOYSTICKCALIBRATION  = "J Calibrate" ; 
  const string RUMBLESONOFF         = "Rumbles" ; 
  const string HAIRTRIGGERS         = "Hair Trigg" ; 
// Index to find Mod Name string - switchable in game with left/right in ModMenu
int modName_idx;  
//   Toggles 
  int Head_Assist_onoff = 1 ; 
  int VM_Speed = 5 ; 
  int polar_aim_assist_onoff = 4 ; 
  int j_calibration_onoff = 0 ; 
  int rumble_onoff = 0 ; 
  int USE_HAIR_TRIGGER = 0 ; 
// Mod VALUES      -   Text to Display
const string EDITVAR_1_MOD67      = "Head Step";
const string EDITVAR_2_MOD67      = "Head Max" ;
const string POLAR_ASSIST_RADIUS = "PA Radius" ;
const string POLAR_ASSIST_STEPS     = "PA Steps" ;
// Constant bytes - Convert numbers array - ASCII_NUM[column number] 
    const int8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
      {48,49,50,51,52,53,54,55,56,57};                
                                                   
const string NO_EDIT_VAR1  = "No Edit Variables";//  17 
const string NO_EDIT_VAR2  = "for this MOD";// 12       
const uint8 Options [] = {
  67 , // MOD67_2_VARIABLES # 1
  50 , // VMSPEED # 2
  30 , // POLARAIMASSIST_TD # 3
  1 , // JOYSTICKCALIBRATION # 4
  1 , // RUMBLESONOFF # 5
  1 // HAIRTRIGGERS # 6
};
const uint8 EditVal [] = {
  1 , // MOD67_2_VARIABLES # 1
  0 , // VMSPEED # 2
  5 , // POLARAIMASSIST_TD # 3
  0 , // JOYSTICKCALIBRATION # 4
  0 , // RUMBLESONOFF # 5
  0 // HAIRTRIGGERS # 6
};
const uint8 OptRange [][] = {
  { 0 , 1 }, // MOD67_2_VARIABLES # 1
  { 0 , 0 }, // VMSPEED # 2
  { 2 , 3 }, // POLARAIMASSIST_TD # 3
  { 0 , 0 }, // JOYSTICKCALIBRATION # 4
  { 0 , 0 }, // RUMBLESONOFF # 5
  { 0 , 0 }  // HAIRTRIGGERS # 6
};
const uint8 Min_Max_Options [][]={ 
  { 0 , 2 }, // MOD67_2_VARIABLES # 1
  { 0 , 5 }, // VMSPEED # 2
  { 0 , 5 }, // POLARAIMASSIST_TD # 3
  { 0 , 1 }, // JOYSTICKCALIBRATION # 4
  { 0 , 1 }, // RUMBLESONOFF # 5
  { 0 , 1 }  // HAIRTRIGGERS # 6
}; 
/////////////////////////////////////////////////////////////////////////////  
///   INITIALIZATION BLOCK                                                      
/////////////////////////////////////////////////////////////////////////////   
init {  
Head_Assist_onoff      = get_pvar(SPVAR_1,1,2,1); 
VM_Speed               = get_pvar(SPVAR_2,1,5,5); 
polar_aim_assist_onoff = get_pvar(SPVAR_3,1,5,4); 
j_calibration_onoff    = get_pvar(SPVAR_4,0,1,0); 
rumble_onoff           = get_pvar(SPVAR_5,0,1,0); 
USE_HAIR_TRIGGER       = get_pvar(SPVAR_6,0,1,0); 
HeadStep           = get_pvar(SPVAR_7, 1,100,2 );
HeadMax            = get_pvar(SPVAR_8, 1,100,30);
polar_aasist_radius  = get_pvar(SPVAR_9, 1,30, 15);
polar_aasist_steps  = get_pvar(SPVAR_10,1,30, 15);
  STICK_X_j_cal = 9;  STICK_X_j_cal[1] = 11; 
  STICK_Y_j_cal = 10; STICK_Y_j_cal[1] = 12; 
  StickDZ = dk_max(abs(get_val(9)), abs(get_val(10))) + 5;
  StickDZ[1]  = dk_max(abs(get_val(11)), abs(get_val(12))) + 5;

}// end of init block
///////////////////////////////////////////////////////////////////////////// 
///   MAIN BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
main {//---------------------------------
                                  
   /////////////////////////////////////////
 if(get_ival(ADS_BTN)){
     if(event_press(PS4_SHARE)){
         EntireScript_OnOff    = !EntireScript_OnOff;
         blinck(EntireScript_OnOff);
         cls_oled(0);
         draw_rectangle();
         //display_mod(f_idx, f_string, mod_name, f_toggle, f_option)
         display_mod( center_x(sizeof(SCRIPT_ONOFF)- 1, OLED_FONT_MEDIUM_WIDTH) ,SCRIPT_ONOFF [0],EntireScript_OnOff ,1);
         show_mesage_time = 2000;
 //--- Set Virtual Machine Speed to Default if script is OFF    
 if(!EntireScript_OnOff) set_Virtual_Machine_Speed(VM_Default); 
     }
 }
                          
 if(show_mesage_time){
     show_mesage_time -= get_rtime();
     if(show_mesage_time <= 0) {
         cls_oled(0);    
     }
 }
                               
//============================================================
// KILL SWITCH FOR ENTIRE SCRIPT
//============================================================
 if(EntireScript_OnOff){
  //--- Set Virtual Machine Speed to Default for MENU                     
	if(ModEdit || ModMenu) set_Virtual_Machine_Speed(VM_Default);
    if(display_EDIT){                
    	  // Clear OLED screen         
        cls_oled(0);                        
       // display_edit(f_idx, f_string, f_print, f_val) 
		if(EditVal[ modName_idx ] == 0 ){  
			  //--- print label                
		    line_oled(1,45,127,45,1,0);    
		    printf( center_x( 17, OLED_FONT_SMALL_WIDTH ), 20, OLED_FONT_SMALL, 1, NO_EDIT_VAR1[0] ); 
		    printf( center_x( 12, OLED_FONT_SMALL_WIDTH ), 33, OLED_FONT_SMALL, 1, NO_EDIT_VAR2[0] ); 
		}                                                                                            
		else {//----  ELSE BEGIN --------------  
             /////////////////////////////////////////////
             if(valName_idx == 0){ 
                  display_edit(center_x(sizeof(EDITVAR_1_MOD67)- 1,OLED_FONT_MEDIUM_WIDTH),EDITVAR_1_MOD67[0],HeadStep);
                  HeadStep = edit_val(HeadStep,1,10);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 1){ 
                  display_edit(center_x(sizeof(EDITVAR_2_MOD67)- 1,OLED_FONT_MEDIUM_WIDTH),EDITVAR_2_MOD67[0],HeadMax);
                  HeadMax = edit_val(HeadMax ,1,100 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 2){ 
                  display_edit(center_x(sizeof(POLAR_ASSIST_RADIUS  )- 1,OLED_FONT_MEDIUM_WIDTH),POLAR_ASSIST_RADIUS  [0],polar_aasist_radius);
                  polar_aasist_radius = edit_val(polar_aasist_radius, 0,30 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 3){ 
                  display_edit(center_x(sizeof(POLAR_ASSIST_STEPS )- 1,OLED_FONT_MEDIUM_WIDTH),POLAR_ASSIST_STEPS [0],polar_aasist_steps);
                  polar_aasist_steps = edit_val(polar_aasist_steps,1,30 );
             }         
		 }//--- ELSE END   ----------- 
   }//  end of display edit  
    if(refresh_OLED)
    { 
        // Clear OLED screen 
        cls_oled(0);       
                           
        // Draw Rectangle 
        draw_rectangle(); 
        // Display Mod Name and togle status  : ON/OFF   
        if(modName_idx == 0)display_mod( center_x(sizeof(MOD67_2_VARIABLES)- 1, OLED_FONT_MEDIUM_WIDTH) ,MOD67_2_VARIABLES[0],Head_Assist_onoff,Options[ modName_idx ]);
        if(modName_idx == 1)display_mod( center_x(sizeof(VMSPEED)- 1, OLED_FONT_MEDIUM_WIDTH) ,VMSPEED[0],VM_Speed,Options[ modName_idx ]);
        if(modName_idx == 2)display_mod( center_x(sizeof(POLARAIMASSIST_TD)- 1, OLED_FONT_MEDIUM_WIDTH) ,POLARAIMASSIST_TD[0],polar_aim_assist_onoff,Options[ modName_idx ]);
        if(modName_idx == 3)display_mod( center_x(sizeof(JOYSTICKCALIBRATION)- 1, OLED_FONT_MEDIUM_WIDTH) ,JOYSTICKCALIBRATION[0],j_calibration_onoff,Options[ modName_idx ]);
        if(modName_idx == 4)display_mod( center_x(sizeof(RUMBLESONOFF)- 1, OLED_FONT_MEDIUM_WIDTH) ,RUMBLESONOFF[0],rumble_onoff,Options[ modName_idx ]);
        if(modName_idx == 5)display_mod( center_x(sizeof(HAIRTRIGGERS)- 1, OLED_FONT_MEDIUM_WIDTH) ,HAIRTRIGGERS[0],USE_HAIR_TRIGGER,Options[ modName_idx ]);
              
         refresh_OLED = FALSE; 
    } 
    if(display_title){           
          // clear OLED screen    
    	     cls_oled(0);            
    	     printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),13,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]);
	         //printf(center_x(sizeof(TITLE) - 1, OLED_FONT_SMALL_WIDTH),13,OLED_FONT_SMALL,OLED_WHITE,TITLE[0]);
           // screen saver          
	         ModMenu = FALSE;   
           display_title = FALSE;  
           display_black = TRUE;
                                   
    }                            
      
    //-----------------------------
    // Screen saver (OLED off)   
    if(display_black )         
    {                            
        count_black += get_rtime();
        if(count_black >= 5000)   
        {                        
            cls_oled(0);         
            count_black = 0;      
            display_black = FALSE; 
        }                         
    }                           
                                
   /////////////////////////////////////////////////////////
   // MENU EDIT VALUES             
   if(ModEdit){ 
        block_all_inputs(); 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        } 
       //--- Exit from EDIT MENU  
       if(event_release(PS4_CIRCLE)){
             ModEdit      = FALSE;           
             display_EDIT = FALSE;           
             ModMenu      = TRUE;            
             refresh_OLED = TRUE;   // display MODS 
       }                    
        ////////////////////////////////////////////////////////////////////////////////  
        //  GO FORWARD                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_DOWN)){            
                                          
        	   valName_idx ++;                 
        	   if(valName_idx > OptRange[ modName_idx ][ 1 ])  valName_idx = OptRange[ modName_idx ][ 1 ]; 
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }          
        ///////////////////////////////////////////////////////////////////////////////  
        //  GO BACK                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	   valName_idx --;                                      
        	   if(valName_idx < OptRange[ modName_idx ][ 0 ]) valName_idx = OptRange[ modName_idx ][ 0 ];
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }                                                           
            /////////////////////////////////////////////////////// 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        }
   }// end of EDIT MENU    
   /////////////////////////////////////////////////////////
   // EDIT MENU ON/OFF            
   if(get_val(ADS_BTN) && event_press(PS4_OPTIONS)){  
        ModMenu = TRUE;  
        // toggle EditMenu ON/OFF                      
                 modName_idx  = 0;                   
                 refresh_OLED = TRUE;   // display Title    
                 display_EDIT = FALSE;        
                 MenuTimeOut  = menu_time_active;
   }      
   /////////////////////////////////////////////////////////
   // MENU SYSTEM              
   if(ModMenu){  
        block_all_inputs(); 
      //--- Exit from MENU  
      if(event_press(PS4_CIRCLE)){
          ModMenu = FALSE;                     
          ModEdit = FALSE;              
          combo_run(MESSAGE);             
      }                    
      //--- Enter in EDIT MENU 
      if(event_press(PS4_CROSS)){
          ModMenu     = FALSE;   
          valName_idx = OptRange[ modName_idx ][ 0 ]; 
          ModEdit     = TRUE;   
          display_EDIT= TRUE; 
      }                    
                                  
        //Display MOD NAME and togle status 
        // Switch MODs                     
        if( !get_ival(ADS_BTN) && event_press(PS4_DOWN)){ 
                                          
        	   modName_idx ++;                 
        	   if(modName_idx > 5) modName_idx = 0; 
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( Head_Assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 1 ) { 
        		  blinck( VM_Speed);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 2 ) { 
        		  blinck( polar_aim_assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 3 ) { 
        		  blinck( j_calibration_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 4 ) { 
        		  blinck( rumble_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 5 ) { 
        		  blinck( USE_HAIR_TRIGGER);   
        	}                                    
          /////////////////////////////////////
        }                          
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	  modName_idx --;                                      
        	  if(modName_idx < 0) modName_idx = 5;
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( Head_Assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 1 ) { 
        		  blinck( VM_Speed);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 2 ) { 
        		  blinck( polar_aim_assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 3 ) { 
        		  blinck( j_calibration_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 4 ) { 
        		  blinck( rumble_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 5 ) { 
        		  blinck( USE_HAIR_TRIGGER);   
        	}                                    
          /////////////////////////////////////
          }                        
        	//////////////////////////
                                  
                                  
        // screen saver           
        display_black = FALSE;    
        display_title = FALSE;    
        //////////////////////////////  
        // display mod name and Toggle ON/OFF | Scroll Options 
        if(!get_ival(ADS_BTN) ){    
             if(event_press(PS4_RIGHT)){ //   go back
                                                  
        	    if(modName_idx == 0 ) { 
                      Head_Assist_onoff = f_go_back( Head_Assist_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 1 ) { 
                      VM_Speed = f_go_back( VM_Speed ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 2 ) { 
                      polar_aim_assist_onoff = f_go_back( polar_aim_assist_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 3 ) { 
                      j_calibration_onoff = f_go_back( j_calibration_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 4 ) { 
                      rumble_onoff = f_go_back( rumble_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 5 ) { 
                      USE_HAIR_TRIGGER = f_go_back( USE_HAIR_TRIGGER ); 
        	    }                                 
                                            
             }// go back 
             if(event_press(PS4_LEFT)){//   go forward
                                                  
        	    if(modName_idx == 0 ) { 
                      Head_Assist_onoff = f_go_forward( Head_Assist_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 1 ) { 
                      VM_Speed = f_go_forward( VM_Speed);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 2 ) { 
                      polar_aim_assist_onoff = f_go_forward( polar_aim_assist_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 3 ) { 
                      j_calibration_onoff = f_go_forward( j_calibration_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 4 ) { 
                      rumble_onoff = f_go_forward( rumble_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 5 ) { 
                      USE_HAIR_TRIGGER = f_go_forward( USE_HAIR_TRIGGER);   
        	    }                                 
                                            
             }// go forward 
       } 
        refresh_OLED = TRUE;   
        set_val(PS4_RIGHT,0); 
        set_val(PS4_LEFT,0); 
        set_val(PS4_UP,0); 
        set_val(PS4_DOWN,0); 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        }
    } 
    /////////////////////////////////////////////////////////////
    ///    END OF MENU  /////////////////////////////////////////
    /////////////////////////////////////////////////////////////
//========================================================================================================== 
   if(!ModEdit && !ModMenu){//  code for MODS
             //--- LED COLOR INDICATION                                    
             combo_run(Blink_MOD_ON);          
             //---Virtual Machine Speed  
             set_Virtual_Machine_Speed (VM_Speed);
                                                   
    //===========================================
    //   CROSSOVER SUPPORT                      
    //===========================================
        if(get_controller() != PIO_PS4) // If XBOX controller:
        {
            if(get_console() == PIO_PS4) // If PS4 console:
            { 
                if(get_ival(PS4_SHARE))
                {
                    if(get_ival(PS4_R3)) // RS + View =  ScreenShot
                    {
                        set_val(PS4_SHARE,100);
                        set_val(PS4_TOUCH,0);
                        set_val(PS4_R3,0);
                    }
                    else // View only = PS4_TOUCH
                    {
                        set_val(PS4_TOUCH, 100);
                        set_val(PS4_SHARE, 0);
                    }
                }
            }
        }
			//---HEAD SHOT ASSIST 
			if(Head_Assist_onoff) {
			
				if (get_ival(ADS_BTN) && get_ival(FIRE_BTN) || (Head_Assist_onoff == HeadHipAssist && get_ival(FIRE_BTN))) {
					if (abs(get_ival(RY)) < HeadMax) { 
						Head += HeadStep;
						combo_run(HeadAssist_cmb);
					}	
				}             
				if (!get_ival(FIRE_BTN)) Head = 0;
				
				if (Head >= HeadMax) combo_stop(HeadAssist_cmb);
			}
            //===========================================
            //   IN GAME RUMBLE                          
            //===========================================
            if(!rumble_onoff)
                block_rumble();
                                
            //===========================================
            //   JOYSTICK CALIBRATION                         
            //===========================================
            if(!rumble_onoff)
                block_rumble();
                                
            //--- CLEAR OLED SCREEN after message                                       
            if(time_to_clear_screen){               
                time_to_clear_screen -= get_rtime();
                if(time_to_clear_screen <= 0 ){     
                    QT_MESSAGE_TIMEOUT();     
                }                              
            }            
                          
    //===========================================
    //   DoNotAtMe Polar Aim Assist with Taylordrift21 shapes 
    //===========================================
    if(polar_aim_assist_onoff){
                     
        actual_X = get_val(X);   
        actual_Y = get_val(Y); 
        
        actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
        max_Magnitude = (actual_Magnitude < 100);                      
                                                              
        if(!(time++ % STEP_INTERVAL)){                                  
         angle += polar_aasist_steps;                                                 
        }                                                               
        angle = angle % 360;                                            
        sin_angle_tdrift = Polar_Array[angle % 360];                           
        cos_angle_tdrift = Polar_Array[(angle + 270) % 360]; 
                        
        if(get_val(ADS_BTN) && get_val(FIRE_BTN)){ 
            if(actual_Magnitude <= polar_aasist_radius){                                                      
                sin_angle_tdrift -= actual_Y;                                                              
                cos_angle_tdrift -= actual_X;                                                                 
            }else {                                                                                       
                sin_angle_tdrift = (sin_angle_tdrift * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle_tdrift = (cos_angle_tdrift * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
            }                                                  
            GetShapes(polar_aasist_radius); 
        } 
    } 
    //===========================================
    //   HAIR TRIGGERS 
    //===========================================
    if(USE_HAIR_TRIGGER)
    {                                 
        deadzone(PS4_L2,PS4_R2,99,99);
    }                                 

	if(j_calibration_onoff){
		do { o_j_cal[i_j_cal] = get_val(9 + i_j_cal);
		} while (i_j_cal = (i_j_cal + 1) % 4);
	  
	    do {
	    ValInY_j_cal[i_j_cal] = get_oval(STICK_Y_j_cal[i_j_cal]);
	    ValInX_j_cal[i_j_cal] = get_oval(STICK_X_j_cal[i_j_cal]); 
	    if (isqrt(pow(get_val(STICK_X_j_cal[i_j_cal]), 2) + pow(get_val(STICK_Y_j_cal[i_j_cal]), 2)) <  StickDZ[i_j_cal]) {
	      if (ValInY_j_cal[i_j_cal] != ValPrevY_j_cal[i_j_cal] || ValInX_j_cal[i_j_cal] != ValPrevX_j_cal[i_j_cal]) {
	        ValPrevX_j_cal[i_j_cal] = ValInX_j_cal[i_j_cal];
	        ValPrevY_j_cal[i_j_cal] = ValInY_j_cal[i_j_cal];
	        XY_j_cal[i_j_cal]  = 100;
	      }
	      if (XY_j_cal[i_j_cal]) {
	        XY_j_cal[i_j_cal] -= get_rtime();
	        if (XY_j_cal[i_j_cal] <= 0) {
	          OffsetX_j_cal[i_j_cal] = inv(ValInX_j_cal[i_j_cal]);
	          OffsetY_j_cal[i_j_cal] = inv(ValInY_j_cal[i_j_cal]);
	          offset(STICK_X_j_cal[i_j_cal], OffsetX_j_cal[i_j_cal]);
	          offset(STICK_Y_j_cal[i_j_cal], OffsetY_j_cal[i_j_cal]);
	          ValOutX_j_cal[i_j_cal] = inv(get_val(STICK_X_j_cal[i_j_cal]));
	          ValOutY_j_cal[i_j_cal] = inv(get_val(STICK_Y_j_cal[i_j_cal]));
	        }
	      }
	    }
	    offset(STICK_X_j_cal[i_j_cal], OffsetX_j_cal[i_j_cal] + ValOutX_j_cal[i_j_cal]);
	    offset(STICK_Y_j_cal[i_j_cal], OffsetY_j_cal[i_j_cal] + ValOutY_j_cal[i_j_cal]);
	  } while(i_j_cal = (i_j_cal + 1) % 2);
	  
	    do {
	    temp_j_cal = (i_j_cal / 2) + XB1_RX;
	    i_val_j_cal = get_val(temp_j_cal);
	    
	     if(i_val_j_cal >= RX_dk_max[i_j_cal]) set_val(temp_j_cal, 100);
	     if(i_val_j_cal <= RX_dk_max[i_j_cal + 1]) set_val(temp_j_cal, -100);
     
      }while(i_j_cal = (i_j_cal + 2) % 8);
    }// JOYSTICK CAZLIBRATION

        } //  end of MODS CODE 
    } //  ENTIRE SCRIPT KILL SWITCH 
} //  end of main block 
///////////////////////////////////////////////////////////////////////////// 
///   COMBO BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
//-- VM Speed
define VM_Default = 0;
function set_Virtual_Machine_Speed (f_speed){
    if     (f_speed == 0) vm_tctrl(-0);//10 ms Default
    else if(f_speed == 1) vm_tctrl(-2);// 8 ms
    else if(f_speed == 2) vm_tctrl(-4);// 6 ms
    else if(f_speed == 3) vm_tctrl(-6);// 4 ms
    else if(f_speed == 4) vm_tctrl(-8);// 2 ms
    else if(f_speed == 5) vm_tctrl(-9);// 1 ms
}
           
// Joystick outer edge adjustment
int RX_dk_max=  100;
int RX_dk_min= -100;
int RY_dk_max=  100;
int RY_dk_min= -100;
int LX_dk_max=  100;
int LX_dk_min= -100;
int LY_dk_max=  100;
int LY_dk_min= -100;

int temp_j_cal, i_val_j_cal;

int StickDZ[2],
STICK_X_j_cal[2],
STICK_Y_j_cal[2],
OffsetX_j_cal[2],
OffsetY_j_cal[2],
ValOutX_j_cal[2], 
ValOutY_j_cal[2],
ValPrevX_j_cal[2],
ValPrevY_j_cal[2],
XY_j_cal[2],
ValInY_j_cal[2],
ValInX_j_cal[2],
o_j_cal[4],
i_j_cal;
function dk_min(a, b) { if(a<=b) return a; return b; }
function dk_max(a, b) { if(a>=b) return a; return b; }
function dk_clamp(v, lo, hi) { return dk_min(hi, dk_max(v, lo)); }
function get_oval(io) { return o_j_cal[io- 9]; }
function offset(axis, offset_val) { 
  set_val(axis, dk_clamp(offset_val * (100 - abs(get_oval(axis))) / 100 + get_oval(axis), -100, 100));
  if(abs(get_val(axis)) < 2) set_val(axis, 0); 
  return;
}
int primary_weapon = TRUE;
int message_timeout;
int time_to_clear_screen;
function QT_MESSAGE_TIMEOUT (){     
	// Clear OLED Screen              
	cls_oled(0); // will clear oled   
	display_title  = FALSE;           
}                                  
                                      
                       
int exit_wait = 1500;
combo EXIT {     
	wait(exit_wait);     
	cls_oled(0);    
	ModMenu = FALSE;  
	ModEdit = FALSE;    
	display_EDIT = FALSE; 
	display_title = FALSE; 
}                      
int LED_OnOff;       
int rumble_tipe = RUMBLE_A;
       
//=============================================== 
//            LED BLINK                           
//=============================================== 
combo LED_BLINK {                                 
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                            
	wait(100);                                      
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                             
	wait(100);                                      
}                                                 
//=============================================== 
//            PROFILE VIBRATE 1 , 2 ,3                           
//=============================================== 
int profile_numbr;                                
combo PROFILES_VIBRATE_NOTIFY {                    
    if(profile_numbr >= 1) set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                   
    wait(100);                                       
    if(profile_numbr > 1)set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                  
    wait(100);                                       
    if(profile_numbr > 2)set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                 
}
define PRIMARY_Profile   = 1;
define SECONDARY_Profile = 2;
function set_profile_notify(f_profile,rumbl_type){
    profile_numbr = f_profile;
    rumble_tipe   = rumbl_type;
    combo_run(PROFILES_VIBRATE_NOTIFY);
}

//=============================================== 
//                 VIBRATE SETUP                 
//=============================================== 
combo vibrate {                                   
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
	wait(100);                                       
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
}                                                 
//===============================================  
//                 RUMBLE_TIPE                     
//===============================================  
function set_rumble_tipe ( val) {                  
	if( val){ rumble_tipe = RUMBLE_A ; LED_OnOff = Green;}  
	else    { rumble_tipe = RUMBLE_B ; LED_OnOff = Red  ;} 
	combo_run(vibrate);                     
	combo_run(LED_BLINK);                   
}                                         
//===============================================  
//             DOUBLE CLICK 
//===============================================  
int b_dblclick;

function double_click (button) {                      
    if (b_dblclick) {                                 
        b_dblclick -=get_rtime();                                      
    }                                                 
    if (event_press(button) ) {
        if(b_dblclick){
            b_dblclick = 0;
            return TRUE;
        }else{
            b_dblclick = 300;
            return FALSE;
        }
    }                                                 
    return FALSE;                                        
}           

define ColorOFF  = 0;
define Blue      = 1;
define Red       = 2;
define Green     = 3;
define Pink      = 4;
define SkyBlue   = 5;
define Yellow    = 6;
define White     = 7;
                      
data(                 
  0,0,0, //0. ColorOFF
  2,0,0, //1. Blue     
  0,2,0, //2. Red      
  0,0,2, //3. Green    
  2,2,0, //4. Pink     
  2,0,2, //5. SkyBlue 
  0,2,2, //6. Yellow   
  2,2,2  //7. White    
); // end of data segment-------------- 
// COLOR LED function        
//-------------------------------------------------------------- 
                                       
int data_indx;
function colourled(color) {  
    for( data_indx = 0; data_indx < 3; data_indx++ ) {
        set_led(data_indx,duint8 ((color * 3) + data_indx));
    }
}

// Refresh OLED              
    int display_title = TRUE;
    int display_black;      
    int refresh_OLED;        
    int ModMenu;    
    int ModEdit;   
    int display_EDIT;   
    int EntireScript_OnOff = TRUE;// Kill Swith For Entire Script   
    int show_mesage_time; 
////////////////////////////////////// 
/////////////////////////////////////// 
int count_black;                      
int need_to_be_save;                 
int BlinckColor = 3;                 
int Col_ind;                         
//===============================================================
//   MODS COMBO SECTION
//===============================================================
define HeadAssist      = 1;                          
define HeadHipAssist   = 2;  
int Head;
combo HeadAssist_cmb{
	set_val(RY,inv(Head) + get_val(RY));
}

define X = RX;               
define Y = RY;                                    
define ACTIVE_WHEN_ADS    = TRUE;                     
define ACTIVE_WHEN_FIRING = TRUE;  
define STEP_INTERVAL =  1;                            

const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};                                    

// Variables \\
int Position,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral; 
int MinRadius = 1;  // Leave Alone , This can be left alone and not need adjusted. \\
int time;                                             
int angle, cos_angle_tdrift, sin_angle_tdrift;                      
int actual_X, actual_Y, actual_Magnitude, max_Magnitude; 
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
    {
        InnerSpiral -= 1;
        if(InnerSpiral < MinRadius)
            SpiralPosition1 = TRUE;
    }
    else
    {
        InnerSpiral += 1;
        if(InnerSpiral > f_var)
            SpiralPosition1 = FALSE;
    }
    if(!SpiralPosition2)
    {
        OuterSpiral -= 1;
        if(OuterSpiral < MinRadius)
            SpiralPosition2 = TRUE;
    }
    else
    {
        OuterSpiral += 1;
        if(OuterSpiral >  f_var)
            SpiralPosition2 = FALSE;
    } 
    if( polar_aim_assist_onoff == 1)                    
    { 
        sin_angle_tdrift = (sin_angle_tdrift * f_var) /100;
        cos_angle_tdrift = (cos_angle_tdrift * f_var) /100;  
    } 
    if( polar_aim_assist_onoff == 2)        
    { 
        sin_angle_tdrift = (sin_angle_tdrift * f_var)/100;
        cos_angle_tdrift = (cos_angle_tdrift * MinRadius)/100; 
    }
    if( polar_aim_assist_onoff == 3)                     
    { 
        cos_angle_tdrift = (cos_angle_tdrift * f_var) /100;  
        sin_angle_tdrift = (sin_angle_tdrift * MinRadius)/100;  
    } 
    if( polar_aim_assist_onoff == 4)                  
    {
        sin_angle_tdrift = (sin_angle_tdrift * InnerSpiral) /100;
        cos_angle_tdrift = (cos_angle_tdrift * OuterSpiral) /100;  
    }
    if( polar_aim_assist_onoff == 5)
    {
        if(Position == 0 || Position == 1)
        {  
            actual_X = (get_val(X)) + ((cos_angle_tdrift * f_var))/100;
        }
        if(Position == 2 || Position == 3)
        {  
            actual_Y = (get_val(Y)) + ((sin_angle_tdrift * f_var))/100;
        }
            Position++;        
            
        if(Position == 4)
        {
            Position = 0;
        }    
    }
    if(polar_aim_assist_onoff == 5 )
    {
           set_val(X, actual_X);
           set_val(Y, actual_Y); 
    } 
    else
    {
        set_val(X, calculate(actual_X + cos_angle_tdrift, -100, 100));
        set_val(Y, calculate(actual_Y + sin_angle_tdrift, -100, 100)); 
  
    }   
 }
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
define FONT_STATS_INDEX_WIDTH    = 0; 
define FONT_STATS_INDEX_HEIGHT   = 1; 
define FONT_STATS_INDEX_MAXCHARS = 2; 
                                      
                                      
//////////////////////////////////////////////////////////////// 
function horizontal_center_offset(number_characters, font_size) { 
    return (128 - number_characters * FONT_STATS[font_size][FONT_STATS_INDEX_WIDTH]) / 2;
}             
              
const string EXIT_TXT1 = "SETTINGS";  
const string EXIT_TXT2 = "WAS SAVED"; 
                                     
////////////////////////////////////////////////////////////////////////////// 
///  SAVE  
function save_toggles () {  
                    
     set_pvar(SPVAR_1,Head_Assist_onoff); 
     set_pvar(SPVAR_2,VM_Speed); 
     set_pvar(SPVAR_3,polar_aim_assist_onoff); 
     set_pvar(SPVAR_4,j_calibration_onoff); 
     set_pvar(SPVAR_5,rumble_onoff); 
     set_pvar(SPVAR_6,USE_HAIR_TRIGGER); 
     set_pvar(SPVAR_7,HeadStep); 
     set_pvar(SPVAR_8,HeadMax); 
     set_pvar(SPVAR_9,polar_aasist_radius); 
     set_pvar(SPVAR_10,polar_aasist_steps); 
    combo_run(EXIT);                  
      
}// end of save   
                      
combo MESSAGE {       
    wait(20);         
    save_toggles ();  
    cls_oled(0);      
    printf(horizontal_center_offset(sizeof(EXIT_TXT1), OLED_FONT_MEDIUM ), 2, OLED_FONT_MEDIUM, 1, EXIT_TXT1[0]); 
    printf(horizontal_center_offset(sizeof(EXIT_TXT2), OLED_FONT_MEDIUM ), 23, OLED_FONT_MEDIUM, 1, EXIT_TXT2[0]);
    exit_wait = 2000;     
}                        
function blinck ( var){  
	if(var){               
		BlinckColor = Green;
	}else{                 
		BlinckColor = Red;    
	}                       
	combo_run(BLINK_NOTIFY); 
}                           
                            
combo BLINK_NOTIFY {        
	colourled(BlinckColor);   
	wait(300);                 
	colourled(ColorOFF);        
	wait(100);                  
	colourled(BlinckColor);      
	wait(300);                   
	colourled(ColorOFF);          
}                                
int MOD_Color;
int blink_n ;
combo Blink_MOD_ON   {
    colourled(ColorOFF);   
    wait(500);                 
    colourled(ColorOFF);   
    wait(1000);
    blink_n +=1; 
    if( blink_n > 0)blink_n = 1; 
}                                
                                
                                
const uint8 FONT_STATS[][] = {  
    {  7, 10, 18 }, // Small    
    { 11, 18, 11 }, // Medium   
    { 16, 26,  7 }  // Large    
};                              
                                
function display_edit( f_string, f_print, f_val) {
    printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);  
    number_to_string(f_val, find_digits(f_val));     
}                                                  
function f_go_forward (f_variable) {
    f_variable       +=1;   
    if(f_variable  > Min_Max_Options[modName_idx][1] )f_variable  = Min_Max_Options[modName_idx][1]; // max option
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

function f_go_back (f_variable) {
    f_variable       -=1;   
    if(f_variable  < Min_Max_Options[modName_idx][0] )f_variable  = Min_Max_Options[modName_idx][0]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}
// Variables for function number_to_string()  
int ssss;                            
int c_c_c,c_val;   
function number_to_string(f_val,f_digits) {                  
//=======================================================
//  number_to_string(value to convert, # of digits in value) 
//                                                           
//  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767) 
//                                                      
//      Convert digits to ASCII                         
//      Add ASCII character to print buffer            
//      Print string centered X & Y on OLED             
//                                                       
//======================================================
    ssss = 1;  c_val = 10000;                            
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(ssss,45);    //--add leading "-"      
         ssss += 1;                                      
         f_val = abs(f_val);                          
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                             
            putc_oled(ssss,ASCII_NUM[f_val / c_val]);    
            f_val = f_val % c_val;                    
            ssss +=  1;                                  
            if(c_c_c == 4)                               
            {                                         
                putc_oled(ssss,44);   //--add ","        
                ssss += 1;                               
            }                                        
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(center_x(ssss - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,ssss - 1,OLED_WHITE); // adjustable value centered in X 
}                                                     
int n_str_;                  
int horiz_X_center_sufix;    
                             
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) { 
                                                      
    n_str_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(n_str_,45);    //--add leading "-" 
         n_str_ += 1;                                 
         f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                              
            putc_oled(n_str_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_WHITE); // adjustable value centered in X
}                                       
                                                      
                                                      
function edit_val( f_val, f_min, f_max ) {  // antirecoil = edit_val( 0 , antirecoil, 99  , 99  ) 
    line_oled(1,18,127,18,1,1);                                        
    // print the range values                                          
    // on the left: min value                                          
    print_number(f_min ,find_digits(f_min) ,4 , 22 , OLED_FONT_SMALL); 
    // on the right: max value                                         
    print_number(f_max ,find_digits(f_max) ,97 , 22 , OLED_FONT_SMALL);
                                          
    if(get_val(ADS_BTN)){                  
		if(press_hold(PS4_RIGHT)){            
			f_val ++;                           
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_LEFT)){             
			f_val --;                           
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
		if(press_hold(PS4_UP)){               
			f_val +=10;                         
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_DOWN)){             
			f_val -=10;                         
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
	}                                      
    return f_val;                        
}                                        
                                             
                                   
function press_hold(f_btn) {       
//  return TRUE - event_press()    
//- every 250ms when button is held 
	  return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}               
                
function find_digits(f_num) {                         
//  find_digits(value)                                
//        return Number of Digits in Value Passed     
                                                      
    f_num = abs(f_num);                               
    if(f_num / 10000 > 0) return 5;                   
    if(f_num /  1000 > 0) return 4;                   
    if(f_num /   100 > 0) return 3;                   
    if(f_num /    10 > 0) return 2;                   
                          return 1;                  
}                                                     
///////////////////////////////////////////////
//  FUNCTIONS                                 
                                              
function center_x(f_chars,f_font) {           
//  center_x(number of chars,font size);     
//        return X for Centering String Horizontally 
                                                      
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}                                                      
                                                       
function draw_rectangle()        
{
    line_oled(1,25,127,25,1,1); 
    rect_oled(0, 0,OLED_WIDTH,64,FALSE,1); 
}
const string ModOption_67_0 = "Disable"; 
const string ModOption_67_1 = "Head Assist"; 
const string ModOption_67_2 = "HHip Assist"; 
const string ModOption_50_0 = "Default"; 
const string ModOption_50_1 = "8 ms"; 
const string ModOption_50_2 = "6 ms"; 
const string ModOption_50_3 = "4 ms"; 
const string ModOption_50_4 = "2 ms"; 
const string ModOption_50_5 = "1 ms"; 
const string ModOption_30_0 = "Disable"; 
const string ModOption_30_1 = "Circular"; 
const string ModOption_30_2 = "Tall Oval"; 
const string ModOption_30_3 = "Wide Oval"; 
const string ModOption_30_4 = "Spiral"; 
const string ModOption_30_5 = "Helix"; 
define ShotModOptions = 31;
define FireModOptions =  9;
const string ModOption_31_0 = "Disable"; 
const string ModOption_31_1 = "Fire Only"; 
const string ModOption_31_2 = "ADS & Fire"; 
const string ModOption_31_3 = "ADS Only"; 
const string ModOption_31_4 = "On Fire"; 
function display_mod( f_string, mod_name, f_toggle, f_option) {   
        // Display MOD_NAME                                    
        printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, mod_name); 
        if(f_option == 1)                              
        {                                                     
        // Display Disable / Enable                                 
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);// Enable 
            else                                                                                               
                printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);// Disable 
        }            
        if(f_option == ShotModOptions)// 31    
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_31_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_3[0]);// ADS Only
                                                                                                                           
        }            
        if(f_option == FireModOptions)// 9 FireModOptions   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                 
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_31_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_4[0]);// On Fire
                                                                                                                 
        }         

        if(f_option == 67)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_67_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_67_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_1[0]);// Head Assist
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_67_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_2[0]);// HHip Assist
                                                                                                                           
        }            
        if(f_option == 50)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_50_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_0[0]);// Default
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_50_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_1[0]);// 8 ms
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_50_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_2[0]);// 6 ms
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_50_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_3[0]);// 4 ms
                                                                                                                           
            if(f_toggle == 4)                                                             
                printf(center_x(sizeof(ModOption_50_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_4[0]);// 2 ms
                                                                                                                           
            if(f_toggle == 5)                                                             
                printf(center_x(sizeof(ModOption_50_5)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_50_5[0]);// 1 ms
                                                                                                                           
        }            
        if(f_option == 30)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_30_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_30_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_1[0]);// Circular
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_30_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_2[0]);// Tall Oval
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_30_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_3[0]);// Wide Oval
                                                                                                                           
            if(f_toggle == 4)                                                             
                printf(center_x(sizeof(ModOption_30_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_4[0]);// Spiral
                                                                                                                           
            if(f_toggle == 5)                                                             
                printf(center_x(sizeof(ModOption_30_5)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_5[0]);// Helix
                                                                                                                           
        }            
}//display mod end           
const uint8 MenuButtons [] = {  
  PS4_RIGHT , //0. Up
  PS4_LEFT , //1. Down
  PS4_UP , //2. go back
  PS4_DOWN , //3. go forward
  PS4_CROSS , //4. enter in Edit Menu
  PS4_CIRCLE , //5. exit  Menu
  PS4_OPTIONS , //5. enter in  Menu
  PS4_L2     //6. hold ADS
};//--- End Menu Buttons  

int menu_btn_indx;
int MenuTimeOut;
define menu_time_active = 30000;
function CheckIfBtnIsPressed (){  
    for(menu_btn_indx = 0; menu_btn_indx < 7; menu_btn_indx++){
         if(event_press(MenuButtons[menu_btn_indx]) ){
             MenuTimeOut = menu_time_active;
         }
         if(MenuTimeOut){              
            MenuTimeOut -=1;
            if(MenuTimeOut <= 0 ){    
                ModMenu = FALSE;      
                ModEdit = FALSE;      
                display_EDIT  = FALSE; 
                display_black = TRUE; 
            }
        }
    }
}

function display_MOD_status(f_val,f_size,f_label){  
    if(!ModMenu && !ModEdit){                                           
        // Clear OLED Screen                          
        cls_oled(0); // will clear oled   
        printf(f_size, 3, OLED_FONT_MEDIUM ,OLED_WHITE, f_label);   
        if( f_val ){
            printf(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);//MOD is ON
        }
        else{
            printf(center_x(sizeof(OFF)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, OFF[0]);// MOD is OFF
        }    
        time_to_clear_screen = 1500; 
    } 
}
