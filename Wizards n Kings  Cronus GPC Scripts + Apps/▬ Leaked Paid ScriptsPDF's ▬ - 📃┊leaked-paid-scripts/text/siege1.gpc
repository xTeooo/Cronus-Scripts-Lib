// GPC Online Library
// rainbow_six_siege_-_all_operator.gpc

/*

	Version: 2.2 - Update for Y5S3.3
	Cronus: Zen only
	Platform: Multi
	Controller: Multi|
	Game: Rainbow Six Siege
	Author:Sloth DG
	
		╔════Rainbow Six Siege════╗
		║		Sensibility 	  ║	
		║   -Horizontal 	65 	  ║
		║	-Vertical 		75	  ║
		║	-ADS 			50	  ║
		╚═════════════════════════╝
		╔════════════Rainbow Six Siege══════════╗
		║  Antirecoil strength─┐	 ┌Rapid Fire║
		║					   ▼	 ▼			║		
		║	ConfigureActiveGun(30,99,0)			║
		║					 	   ▲			║
		║	Antirecoil angle ──────┘			║
		╠═══════════════════════════════════════╣
		║	-Antirecoil strength UP/DOWN		║
		║		Add less to move it UP			║
		║		Add more to move it DOWN		║
		║	-Antirecoil angle LEFT/RIGHT		║
		║		Add more to move it LEFT		║
		║		Add less to more it RIGHT		║
		╚═══════════════════════════════════════╝*/

//--BUTTONS    					  XBOX	 	| PlayStation
	define FireButton           = XB1_RT; 	//PS4_R2;
	define ADSButton            = XB1_LT;	//PS4_L2;
	define SprintButton         = XB1_LS;	//PS4_L3;
	define ProneButton          = XB1_B;	//PS4_CIRCLE;
	define BackButton			= XB1_B;	//PS4_CIRCLE;
	define JumpButton           = XB1_A;	//PS4_CROSS;
	define SelectButton         = XB1_A;	//PS4_CROSS;
	define SwitchWeaponButton   = XB1_Y;	//PS4_TRIANGLE;
	define ScanButton			= XB1_Y;	//PS4_TRIANGLE;
	define ReloadButton         = XB1_X;	//PS4_SQUARE;	
	define ConfigureButton      = XB1_X;	//PS4_SQUARE;	
	define MeleeButton   		= XB1_RS;	//PS4_R3;	
	define TacticalButton		= XB1_LB;	//PS4_L1;
	define GranadeButton  		= XB1_RB;	//PS4_R1;
	define AvilityButton		= XB1_RB;	//PS4_R1;
	define UpButton             = XB1_UP;	//PS4_UP;
	define RightButton          = XB1_RIGHT;//PS4_RIGHT;
	define NextButton			= XB1_RIGHT;//PS4_RIGHT;
	define DownButton           = XB1_DOWN;	//PS4_DOWN;
	define LeftButton           = XB1_LEFT; //PS4_LEFT;
	define PreviousButton       = XB1_LEFT;	//PS4_LEFT;
	define RXButton             = XB1_RX;	//PS4_RX;
	define RYButton             = XB1_RY;	//PS4_RY;
	define LXButton             = XB1_LX;	//PS4_LX;
	define LYButton             = XB1_LY;	//PS4_LY;
	define ViewButton 			= XB1_VIEW	//PS4_SHARE;
	define MenuButton 			= XB1_MENU	//PS4_OPTIONS;
	
	// DO NOT TOUCH HERE FOR REFERENCE ONLY
	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121;
	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122;
	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113;
	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114;
	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115;
	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116;
	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117;
	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118;
	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119;
	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120;
	// DO NOT TOUCH HERE FOR REFERENCE ONLY	
	define SPACE       =  32; //¦¦       ¦¦\\
	define EXCLAMATION =  33; //¦¦   !   ¦¦\\
	define QUOTE       =  34; //¦¦   "   ¦¦\\
	define HASH        =  35; //¦¦   #   ¦¦\\
	define DOLLAR      =  36; //¦¦   $   ¦¦\\
	define PERCENT     =  37; //¦¦   %   ¦¦\\
	define AND         =  38; //¦¦   &   ¦¦\\
	define APOSTROPHE  =  39; //¦¦   '   ¦¦\\
	define O_BRACKET   =  40; //¦¦   (   ¦¦\\
	define C_BRACKET   =  41; //¦¦   )   ¦¦\\
	define ASTERISK    =  42; //¦¦   *   ¦¦\\
	define PLUS        =  43; //¦¦   +   ¦¦\\
	define COMMA       =  44; //¦¦   ,   ¦¦\\
	define MINUS       =  45; //¦¦   -   ¦¦\\
	define FULLSTOP    =  46; //¦¦   .   ¦¦\\
	define F_SLASH     =  47; //¦¦   /   ¦¦\\
	define COLON       =  58; //¦¦   :   ¦¦\\
	define SEMICOLON   =  59; //¦¦   ;   ¦¦\\
	define B_ARROW     =  60; //¦¦   <   ¦¦\\
	define EQUAL       =  61; //¦¦   =   ¦¦\\
	define F_ARROW     =  62; //¦¦   >   ¦¦\\
	define QUESTION    =  63; //¦¦   ?   ¦¦\\
	define AT          =  64; //¦¦   @   ¦¦\\
	define O_SQUARE    =  91; //¦¦   [   ¦¦\\
	define b_SLASH     =  92; //¦¦   \   ¦¦\\
	define C_SQUARE    =  93; //¦¦   ]   ¦¦\\
	define U_ARROW     =  94; //¦¦   ^   ¦¦\\
	define UNDERSCORE  =  95; //¦¦   _   ¦¦\\
	define TICK        =  96; //¦¦   `   ¦¦\\
	define O_CURLY     = 123; //¦¦   {   ¦¦\\
	define BAR         = 124; //¦¦   |   ¦¦\\
	define C_CURLY     = 125; //¦¦   }   ¦¦\\
	define WAVE        = 126; //¦¦   ~   ¦¦\\
//--LED
	define Off       = 0;
	define Blue      = 1;
	define Red       = 2;
	define Green     = 3;
	define Pink      = 4;
	define SkyBlue   = 5;
	define Yellow    = 6;
	define White     = 7;
	 
	data(
		0,0,0,0, //0. Off
		2,0,0,0, //1. Blue
	  	0,2,0,0, //2. Red
	  	0,0,2,0, //3. Lime/Green
	  	0,0,0,2, //4. Fuchsia/Pink
	  	2,0,2,0, //5. SkyBlue
	  	0,2,2,0, //6. Yellow
	  	2,2,2,2  //7. White
		);
		
//--Logos
	int pictureX, pictureX2, pictureY, pictureY2, pictureBit, pictureOffset, pictureData;
	const int16 logo[] = {115, 33, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000,0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0600, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0060, 0x00C0, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 
	0x001C, 0x0018, 0x0000, 0x0000, 0x0006, 0x0000, 0x0000, 0x0001, 0x8007, 
	0x0000, 0x0000, 0x0000, 0xC000, 0x0000, 0x0000, 0x1800, 0xC000, 0x0000, 
	0x0000, 0x1C00, 0x0000, 0x0000, 0x0380, 0x1800, 0x0000, 0x0000, 0x0380, 
	0x0000, 0x0000, 0x0030, 0x0300, 0x0000, 0x0000, 0xE030, 0x0000, 0x0000, 
	0x0007, 0x0060, 0x0000, 0x0000, 0x0806, 0x0000, 0x0000, 0x0000, 0x600C, 
	0x0000, 0x0000, 0x0000, 0xF000, 0x0000, 0x0000, 0x0E01, 0x8038, 0x0000, 
	0x0000, 0x3FC0, 0xFF00, 0x1F00, 0x00E0, 0x603F, 0xC03F, 0xF00C, 0x3FF0, 
	0x3FFE, 0x0FF8, 0x000C, 0x0C07, 0x1C07, 0xFF01, 0x8770, 0x0E07, 0xC383, 
	0x0001, 0xC181, 0xC3C0, 0xF870, 0x3006, 0x0180, 0x7860, 0x0000, 0x1830, 
	0x7070, 0x1C06, 0x0600, 0xC030, 0x0E0C, 0x0000, 0x0386, 0x0C1C, 0x0380, 
	0x00C0, 0x180C, 0x00C1, 0x8000, 0x0030, 0xC18E, 0x0060, 0x0038, 0x0381, 
	0x8018, 0x1FF0, 0x0007, 0x303F, 0x830C, 0x0007, 0x0030, 0x3007, 0x01FF, 
	0x8000, 0x7E07, 0xC0E1, 0x8000, 0xC006, 0x0300, 0xC000, 0x3000, 0x0FC0, 
	0xF018, 0x3000, 0x1800, 0xC070, 0x3800, 0x0600, 0x00F8, 0x0E07, 0x0600, 
	0x0300, 0x1C07, 0xFF01, 0x00C0, 0x000F, 0x00C1, 0xC0C0, 0x0060, 0x0180, 
	0x7FC0, 0x3838, 0x0001, 0xC00F, 0xF018, 0x000C, 0x0030, 0x0078, 0x03FE, 
	0x0000, 0x1800, 0xFC03, 0x0001, 0x8006, 0x0003, 0x003F, 0x0000};
	
	const int16 logo2[] = {128, 28, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
	0x0000, 0x0000, 0x0000, 0x3FF8, 0x0F83, 0xDF87, 0xDFF8, 0x0F9F, 0x0F87, 
	0xC078, 0x20F8, 0x3FFC, 0x0F83, 0xDFC7, 0xDFFE, 0x3FDF, 0x0F87, 0xC038, 
	0x20F8, 0x3FFE, 0x0F83, 0xDFC7, 0xDFFE, 0x7FFF, 0x0F87, 0x8018, 0x3070, 
	0x3FFF, 0x0F83, 0xDFC7, 0xDFFF, 0xFFFF, 0x1F87, 0x8018, 0x3070, 0x3E3F, 
	0x0F83, 0xDFC7, 0xDE1F, 0xF1FF, 0x1F8F, 0x8E08, 0x3070, 0x3E1F, 0x0F83, 
	0xDFE7, 0xDE0F, 0xE0FF, 0x1F8F, 0x9F08, 0x3820, 0x3E1F, 0x1FC3, 0xDFE7, 
	0xDE0F, 0xE0FF, 0x1FCF, 0x9F88, 0x3800, 0x3E1F, 0x1FC3, 0xDFE7, 0xDE0F, 
	0xE0FF, 0x1FCF, 0x9FF8, 0x3800, 0x3E1F, 0x1FC3, 0xDFF7, 0xDE0F, 0xE0FF, 
	0x9FCF, 0x0FF8, 0x3C01, 0x3E1F, 0x3FE3, 0xDFF7, 0xDE0F, 0xE0FF, 0xBFCF, 
	0x07F8, 0x3C01, 0x3E1F, 0x3FE3, 0xDFF7, 0xDE1F, 0xE0FF, 0xBFCF, 0x03F8, 
	0x3E03, 0x3E3F, 0x3DE3, 0xDFFF, 0xDFFF, 0xE0FF, 0xBFDF, 0x01F8, 0x3E03, 
	0x3FFF, 0x7DF3, 0xDFFF, 0xDFFF, 0xE0FF, 0xBFDF, 0x00F8, 0x3E03, 0x3FFF, 
	0x78F3, 0xDF7F, 0xDFFF, 0xE0FF, 0xBFFF, 0x8078, 0x3E03, 0x3FFE, 0x78F3, 
	0xDF7F, 0xDFFF, 0xE0FF, 0xFDFF, 0xC038, 0x3E03, 0x3FFC, 0x7073, 0xDF7F, 
	0xDE1F, 0xE0FF, 0xF9FF, 0xE018, 0x3C01, 0x3EF8, 0x7073, 0xDF3F, 0xDE0F, 
	0xE0FF, 0xF9FF, 0xF008, 0x3C01, 0x3EFC, 0xF07B, 0xDF3F, 0xDE0F, 0xE0FF, 
	0xF9FF, 0xF808, 0x3C00, 0x3E7C, 0xFFFB, 0xDF3F, 0xDE0F, 0xE0FF, 0xF9FF, 
	0xFC08, 0x3800, 0x3E7E, 0xFFFB, 0xDF1F, 0xDE0F, 0xE0FF, 0xF9FE, 0x3E08, 
	0x3820, 0x3E3F, 0xFFFB, 0xDF1F, 0xDE0F, 0xE0FF, 0xF9FC, 0x3E08, 0x3870, 
	0x3E3F, 0xFFFF, 0xDF1F, 0xDE0F, 0xE0FB, 0xF0FC, 0x3E08, 0x3070, 0x3E1F, 
	0xF9FF, 0xDF1F, 0xDE1F, 0xF1FB, 0xF0FC, 0x1C08, 0x3070, 0x3E1F, 0xF9FF, 
	0xDF0F, 0xDFFF, 0xFFFB, 0xF0FC, 0x0018, 0x30F8, 0x3E0F, 0xF0FF, 0xDF0F, 
	0xDFFF, 0x7FF3, 0xF0FC, 0x0018, 0x20F8, 0x3E07, 0xF0FF, 0xDF0F, 0xDFFE, 
	0x3FE3, 0xF0FE, 0x0038, 0x20F8, 0x3E07, 0xE07F, 0xDF07, 0xDFF8, 0x1FC3, 
	0xF0FF, 0x0078, 0x01FC};

	int ScrollLine  = 53;
	int logoIndex 	= 1;
// Refresh OLED              
    int displayLogo = TRUE;
    int displayBlack;
    int countBlack;   
    int forIndex = 1;
/*
╔═══Rainbow Six Siege════╗
║		Menu Labels	 	 ║
╚════════════════════════╝
*/
	const string ClearLabel			= "                  ";

	const string attackers 			= " ATTACKERS ";
	const string defenders 			= " DEFENDERS";

	const string original 			= "Original";
	const string operators 			= "Operators";
	const string year	 			= "Year ";
	const string primaryMsg			= "Primary";
	const string secondaryMsg		= "Secondary";
/*
╔═══Rainbow Six Siege════╗
║		Gun Types	 	 ║
╚════════════════════════╝
*/	const string ASSAULTRIFLE		= "ASSAULT RIFLE";
	const string SHOTGUN			= "SHOTGUN";
	const string HANDGUN			= "HANDGUN";
	const string SUBMACHINEGUN		= "SUBMACHINE GUN";
	const string MACHINEPISTOL 		= "MACHINE PISTOL";
	const string MARKSMANRIFLE		= "MARKSMAN RIFLE";
	const string LIGHTMACHINEGUN	= "LIGHT MACHINE GUN";

/*
╔═══Rainbow Six Siege════╗
║		Gun Names	 	 ║
╚════════════════════════╝
*/
	const string L85A2			= "L85A2";
	const string M590A1			= "M590A1";
	const string P226MK25		= "P226 MK 25";
	const string SMG11			= "SMG-11";
	const string SPAS12			= "SPAS-12";
	const string MP5			= "MP5";
	const string BAILIFF410		= "BAILIFF 410";
	const string USP40			= "USP40";
	const string ARX200			= "ARX200";
	const string G36C			= "G36C";
	const string MK19MM			= "MK1 9MM";
	const string AUGA2			= "AUG A2";
	const string MP5K			= "MP5K";
	const string P12			= "P12";
	const string CSRX300		= "CSRX 300";
	const string C75AUTO		= "C75 AUTO";
	const string G8A1 			= "G8A1";
	const string SUPERNOVA 		= "SUPERNOVA";
	const string VECTOR45ACP	= "VECTOR .45";
	const string TCSG12			= "TCSG12";
	const string P229RC			= "P229 RC";
	const string FMG9			= "FMG-9";
	const string SIX12SD		= "SIX12 SD";
	const string a57USG			= "5.7 USG";
	const string D50			= "D-50";
	const string MPX			= "MPX";
	const string P10C			= "P-10C";
	const string SMG12			= "SMG-12";
	const string COMMANDO9		= "COMMANDO 9";
	const string P10RONI		= "P10 RONI";
	const string SUPERSHORTY	= "SUPER SHO..";
	const string SDP9MM			= "SDP 9MM";
	const string R4C			= "R4-C";
	const string M45MEUSOC		= "M45 MEUSOC";
	const string UMP45			= "UMP45";
	const string M1014			= "M1014";
	const string P90			= "P90";
	const string P9				= "P9";
	const string LFP586			= "LFP586";
	const string MP7			= "MP7";
	const string M870			= "M870";
	const string a416CCARBINE	= "416CCARBINE";
	const string a9X19VSN		= "9X19VSN";
	const string SASG12			= "SASG-12";
	const string PMM			= "PMM";
	const string GSH18			= "GSH-18";
	const string a556XI			= "556XI";
	const string AR33			= "AR33";
	const string F2				= "F2";
	const string a417			= "417";
	const string SGCQB			= "SGCQB";
	const string CAMRS			= "CAMRS";
	const string C8SFW			= "C8-SFW";
	const string M249			= "M249";
	const string PARA308		= "PARA-308";
	const string a9MMC1			= "9MM C1";
	const string SUPER90		= "SUPER90";
	const string PRB92			= "PRB92";
	const string a552COMMANDO	= "552COMMANDO";
	const string OTS03			= "OTS-03";
	const string AK12			= "AK-12";
	const string a6P41			= "6P41";
	const string SR25			= "SR-25";
	const string MK17CQB		= "MK17 CQB";
	const string TYPE89			= "TYPE-89";
	const string a44MAGSEMIAUTO = ".44MAG SEMI";
	const string AUGA3			= "AUG A3";
	const string C7E			= "C7E";
	const string ITA12S			= "ITA12S";
	const string ITA12L			= "ITA12L";
	const string PDW9			= "PDW9";
	const string T5SMG			= "T-5 SMG";
	const string Q929			= "Q-929";
	const string Q930			= "Q-930";
	const string T95LSW			= "T-95 LSW";
	const string M12			= "M12";
	const string SPAS15			= "SPAS15";
	const string LUISON			= "LUISON";
	const string BEARING9		= "BEARING 9";
	const string SIX12			= "SIX12";
	const string MP5SD			= "MP5SD";
	const string SCORPIONEVO3A1	= "SCORPION";
	const string FO12			= "FO-12";
	const string RG15			= "RG15";
	const string K1A			= "K1A";
	const string BOSG			= "BOSG.12.2";
	const string ALDA			= "ALDA 5.56";
	const string ACS12			= "ACS12";
	const string KERATOS		= "KERATOS.357";
	const string BAILIFF 		= "BAILIFF 410";
	const string MX4STORM		= "MX4 STORM";
	const string SPSMG9			= "SPSMG9";
	const string LMGE			= "LMG-E";
	const string M762			= "M762";
	const string MK14EBR		= "MK 14 EBR";
	const string V308			= "V308";
	const string SPEAR308		= "SPEAR .308";
	const string AR1550			= "AR-15.50";
	const string M4GS			= "M4 GS";
	const string a1911TACOPS	= "1911 TACOPS";
	const string AK74M			= "AK-74M";
	const string F90			= "F90";
	const string SC3000K		= "SC3000K";
/*
╔═══════Rainbow Six Siege═══════════╗
║		 Operators Names			║
╚═══════════════════════════════════╝
*/

	const string ASHName			= "ASH";
	const string THERMITEName		= "THERMITE";
	const string TWITCHName			= "TWITCH";
	const string MONTAGNEName		= "MONTAGNE";
	const string BLITZName			= "BLITZ";
	const string IQName				= "IQ";
	const string SLEDGEName			= "SLEDGE";
	const string THATCHERName		= "THATCHER";
	const string GLAZName			= "GLAZ";
	const string FUZEName			= "FUZE";
	const string BUCKName			= "BUCK";
	const string BLACKBEARDName 	= "BLACKBEARD";
	const string CAPITAOName		= "CAPITAO";
	const string HIBANAName 		= "HIBANA";
	const string JACKALName 		= "JACKAL";
	const string YINGName			= "YING";
	const string ZOFIAName			= "ZOFIA";
	const string DOKKAEBIName 		= "DOKKAEBI";
	const string LIONName			= "LION";
	const string FINKAName			= "FINKA";
	const string MAVERICKName 		= "MAVERICK";
	const string NOMADName			= "NOMAD";
	const string GRIDLOCKName 		= "GRIDLOCK";
	const string NOKKName 			= "NOKK";
	const string AMARUName 			= "AMARU";
	const string KALIName 			= "KALI";
	const string IANAName			= "IANA";
	const string ACEName 			= "ACE";
	const string PULSEName			= "PULSE";
	const string CASTLEName			= "CASTLE";
	const string DOCName			= "DOC";
	const string ROOKName			= "ROOK";
	const string BANDITName			= "BANDIT";
	const string JAGERName			= "JAGER";
	const string SMOKEName			= "SMOKE";
	const string MUTEName			= "MUTE";
	const string KAPKANName			= "KAPKAN";
	const string TACHANKAName		= "TACHANKA";
	const string FROSTName			= "FROST";
	const string VALKYRIEName		= "VALKYRIE";
	const string CAVEIRAName		= "CAVEIRA";
	const string ECHOName			= "ECHO";
	const string MIRAName			= "MIRA";
	const string LESIONName			= "LESION";
	const string ELAName 			= "ELA";
	const string VIGILName 			= "VIGIL";
	const string ALIBIName			= "ALIBI";
	const string MAESTROName		= "MAESTRO";
	const string CLASHName 			= "CLASH";
	const string KAIDName 			= "KAID";
	const string MOZZIEName			= "MOZZIE";
	const string WARDENName			= "WARDEN";
	const string GOYOName			= "GOYO";
	const string WAMAIName			= "WAMAI";
	const string ORYXName			= "ORYX";
	const string MELUSIName			= "MELUSI";
	const string ZEROName			= "ZERO";
/*
╔═══Rainbow Six Siege════╗
║    Abilities Names 	 ║
╚════════════════════════╝
*/
	const string TOURCH				= "TORCH";	
	const string EVILEYE			= "EVIL EYE";
	const string SHIELD				= "CCE SHIELD";
	const string SENSOR				= "SENSOR";
/*
╔═══════Rainbow Six Siege═══════════╗
║			Menu Vars				║
╚═══════════════════════════════════╝
*/
	int operatorYbYIndex			= 0;
	int primary						= TRUE;
	int primaryWeaponIndex			= 1;
	int secondaryWeaponIndex		= 1;
	int primaryWeaponCount;
	int secondaryWeaponCount;
	int displayLogoScroll 			= TRUE;
	int displayToSelectInfoScroll	= FALSE;
	int displayToSelectOpratorScroll= FALSE;
	int fontSize					= 0; //Font Size
	int operatorIndex				= 0;
	int operatorModeIndex			= 1;
	int attackerssCount				= 28; 
	int defendersCount				= 28; 
	const int16 attackersYearByYear[] = {0,10,14,18,22,26}
	const int16 defendersYearByYear[] = {29,39,43,47,51,56};
	const int16 WelcomeMsg[] 				= {39,W,e,l,c,o,m,e,FULLSTOP,FULLSTOP,FULLSTOP,SPACE,P,r,e,s,s,SPACE,L,T,SPACE,PLUS,SPACE,M,e,n,u,SPACE,t,o,SPACE,c,o,n,t,i,n,u,e,FULLSTOP};
	const int16 OperatorModeSelectionMsg[] 	= {73,
											P,r,e,s,s,SPACE,A,SPACE,t,o,SPACE,s,e,l,e,c,t,FULLSTOP,SPACE,
											P,r,e,s,s,SPACE,U,P,F_SLASH,D,O,W,N,SPACE,t,o,SPACE,m,o,v,e,SPACE,b,e,t,w,e,e,n,SPACE,A,t,t,a,c,k,e,r,s,SPACE,a,n,d,SPACE,D,e,f,e,n,d,e,r,s,FULLSTOP};
	const int OperatorSelectionMsg[] 		= {161,
											P,r,e,s,s,SPACE,A,SPACE,t,o,SPACE,s,e,l,e,c,t,FULLSTOP,SPACE,
											P,r,e,s,s,SPACE,L,E,F,T,F_SLASH,R,I,G,H,T,SPACE,t,o,SPACE,m,o,v,e,SPACE,b,e,t,w,e,e,n,SPACE,o,p,e,r,a,t,o,r,s,FULLSTOP,SPACE,
											P,r,e,s,s,SPACE,L,T,SPACE,PLUS,SPACE,L,E,F,T,F_SLASH,R,I,G,H,T,SPACE,t,o,SPACE,m,o,v,e,SPACE,b,e,t,w,e,e,n,SPACE,Y,e,a,r,s,SPACE,a,n,d,SPACE,S,e,s,s,o,n,s,FULLSTOP,SPACE,
											P,r,e,s,s,SPACE,L,T,SPACE,PLUS,SPACE,X,SPACE,t,o,SPACE,c,o,n,f,i,g,u,r,e,SPACE,g,u,n,SPACE,s,e,l,e,c,t,i,o,n,FULLSTOP};
int MessageColumCount = 127;
	int MessageArrayLine;
	int ReloadInfo=FALSE;
/*
╔═══════Rainbow Six Siege═══════════╗
║			Combo Vars				║
╚═══════════════════════════════════╝
*/				
	int rapidFireActive; 						// Depeding on the Character the primary wepon may no need RapidFireButton 	
	int polarX;				  					// Up - Dwon direction
	int polarY;  								// Left - Right direction
	define stick_noise  			= 10;      	// SET THIS TO YOUR RIGHT STICK NOISE
	define r_dz   					= 10;       // SET TO YOUR RIGHT STICK DEADZONE
	define FRAG_COOK_TIME 			= 3600; 
	define ScanButton_TIME 			= 0x500;
	int DSSpeed 					= 60; 		//Drop Shot
	int msgLine1 					= 5;		//Operator name line
	int msgLine2 					= 27; 		//Gun name line
	int msgLine3 					= 50;		//Gun type line
	int inConfig					= FALSE;
	int inMenuMode					= FALSE;
	int inOperatorMode				= FALSE;
	int inGameMode					= FALSE;
	int inGunChoosing				= FALSE;
	int avilityActivated			= FALSE;
	int avilityActiveOnDOWN			= FALSE;
	int avilityActiveOnRB			= FALSE;

/*
╔═══════Rainbow Six Siege═══════════╗
║		Main block					║
╚═══════════════════════════════════╝
*/	
main {		
    // Display initial logo 
	if(displayLogo){
    	ResetFlags();
        cls_oled(0);    // clear OLED screen
        countBlack 			= 0;	// reset screen saver counter	
        if(logoIndex == 1 ){
        	DrawLogo();
        	logoIndex = 2;
        }else{
        	DrawLogo2();
        	logoIndex = 1;
        }
 		LED(Yellow);
 		ScrollLine 			= 40;
 		fontSize			= 1;
 		displayLogoScroll 	= TRUE;
 		ResetScrollVars();
    }
    // Screen saver (OLED off)   
    if(displayBlack ){                            
        countBlack += get_rtime();
        if(countBlack >= 5000)   
        {                        
            cls_oled(0);         
            countBlack = 0;      
            displayBlack = FALSE;
        }                         
    }     
   	//-----------------------/Enter Operator Mode
	if(get_val(ADSButton) && get_val(MenuButton)){  
		ResetFlags();
		LED(Yellow);		
		inMenuMode = TRUE;
		displayToSelectInfoScroll = TRUE;
		set_val(MenuButton,0);
		ResetScrollVars();
		primary						= TRUE;
		primaryWeaponIndex			= 1;
		secondaryWeaponIndex		= 1;
		OperatorModeMenu();
   	}
   	if(displayBlack ){                            
        countBlack += get_rtime();
        if(countBlack >= 5000)   
        {                        
            cls_oled(0);         
            countBlack = 0;      
            displayBlack = FALSE;
        }                         
    } 
	if(displayLogoScroll) WelcomeInfo();
	if(displayToSelectInfoScroll) OperatorModeInfo();
	if(displayToSelectOpratorScroll) OperatorSelection();
	/*
	╔═══════Rainbow Six Siege═══════════╗
	║	   Configuration block			║
	╚═══════════════════════════════════╝
	*/	
   	if(inConfig){
   	  /*╔═══════Rainbow Six Siege═══════════╗
		║	**Antirecoil strength		    ║
		║		Add less to move it UP		║
		║		Add more to move it DOWN	║
		║	**Antirecoil angle	    		║
		║		Add more to move it LEFT	║
		║		Add less to more it RIGHT	║
		╚═══════════════════════════════════╝*/
   		if(get_val(ADSButton) && ButtonPress(UpButton)){
			polarX --;
		}
		if(get_val(ADSButton) && ButtonPress(DownButton)){
			polarX ++;
		}
		if(get_val(ADSButton) && ButtonPress(LeftButton)){
			polarY ++;
		}
		if(get_val(ADSButton) && ButtonPress(RightButton))		{
			polarY  --;
		}
		if(get_val(BackButton)){
			inConfig = FALSE
		}

	    Unset(ReloadButton);
	    Unset(SwitchWeaponButton);
	    Unset(UpButton);
		Unset(DownButton);
		Unset(BackButton);
	    Unset(SelectButton);
	    Unset(LeftButton);
	    Unset(RightButton);
	    Unset(ADSButton);
	}
	/*
	╔═══════Rainbow Six Siege═══════════╗
	║	Operator selection block		║
	╚═══════════════════════════════════╝
	*/	
   	if(inOperatorMode){    	 
	    //-----------------------/Go BackButton to initial title	    
	    if(ButtonPress(BackButton)) {   
	    	ResetFlags();
			LED(Yellow);
			OperatorModeMenu();
			inMenuMode 					= TRUE;
			displayToSelectInfoScroll 	= TRUE;
	    }	    	    
	    //-----------------------/Move Backwords on operator selection
	    if(ButtonPress(LeftButton)){
	    	operatorIndex --;
	    	if(operatorModeIndex == 1){
	    		if( operatorIndex < 0) operatorIndex = attackerssCount;
	    	}
	    	else {
	    		if( operatorIndex < defendersCount) operatorIndex = attackerssCount + defendersCount;
	    	}
			OperatorsMenu();
	    }
	    if(get_val(ADSButton) && ButtonPress(LeftButton)){
	    	operatorYbYIndex --;
	    	if(operatorYbYIndex < 0) operatorYbYIndex = 5;
	    	if(operatorModeIndex == 1){
	    		operatorIndex = attackersYearByYear[operatorYbYIndex];
	    	}
	    	else {
	    		operatorIndex = defendersYearByYear[operatorYbYIndex];
	    	}	 
	    	OperatorsYearByYearMenu();
	    }
	    //-----------------------/Move forward on operator selection
	    if(ButtonPress(RightButton)){
	    	operatorIndex ++;
	    	if(operatorModeIndex == 1){
	    		if( operatorIndex > attackerssCount) operatorIndex = 0;
	    	}
	    	else {
	    		if( operatorIndex > defendersCount + attackerssCount) operatorIndex = attackerssCount + 1;
	    	}
	    	OperatorsMenu();
	    }    
	    if(get_val(ADSButton) && ButtonPress(RightButton)){
	    	
	    	operatorYbYIndex ++;
	    	if(operatorYbYIndex > 5) operatorYbYIndex = 0;
	    	if(operatorModeIndex == 1){
	    		operatorIndex = attackersYearByYear[operatorYbYIndex];
	    	}
	    	else {
	    		operatorIndex = defendersYearByYear[operatorYbYIndex];
	    	}
	    	OperatorsYearByYearMenu();
	    }
		if(ButtonRelease(ADSButton)){
			OperatorsMenu();
		}
		if(get_val(ADSButton) && ButtonPress(ReloadButton)){
			inOperatorMode	= FALSE;
			inGunChoosing 	= TRUE;
			displayToSelectOpratorScroll = FALSE;
		}
		//-----------------------/Shows operator menu
	    if(ButtonPress(XB1_A)) { 
			ResetFlags();
			combo_run(Vibrate);
    		inGameMode = TRUE;			
    		primary = TRUE;
    		OperatorsMenu(); 
	    } 	
	    //Clear all values on config mode
	    Unset(ReloadButton);
	    Unset(SwitchWeaponButton);
	    Unset(UpButton);
		Unset(DownButton);
		Unset(BackButton);
	    Unset(SelectButton);
	    Unset(LeftButton);
	    Unset(RightButton);
	    Unset(ADSButton);	
    }
     /*
	╔═══════Rainbow Six Siege═══════════╗
	║	Attacker/Defender menu block	║
	╚═══════════════════════════════════╝
	*/	
    if(inMenuMode){
       	
	   	//-----------------------/Move between attackers and deffender mode
	   	if((ButtonPress(UpButton) || ButtonPress(DownButton))){
	   		ResetFlags();
	   		operatorModeIndex = !operatorModeIndex;
	   		OperatorModeMenu();
	   		inMenuMode = TRUE;
	   		displayToSelectInfoScroll = TRUE;
	    }		    
	    //-----------------------/Operator attackers or Deffender mods selected
	    if(get_val(SelectButton)) { 	  		
	  		ResetFlags();
	  		ResetScrollVars();
	  		if(operatorModeIndex == 1) operatorIndex = 0;
	  		else operatorIndex = attackerssCount + 1;
	  		inOperatorMode = TRUE;
	  		operatorYbYIndex = 0;
	  		OperatorsMenu();
	    } 	    
	    //-----------------------/Go BackButton to Operator Mode
	    if(ButtonPress(BackButton)) {   	   		
	   		ResetFlags();
	   		displayLogo = TRUE;
	    }
	   	//Clear all values on config mode
	    Unset(ReloadButton);
	    Unset(SwitchWeaponButton);
	    Unset(UpButton);
		Unset(DownButton);
		Unset(BackButton);
	    Unset(SelectButton);
	   	Unset(LeftButton);
	    Unset(RightButton);
	    Unset(ADSButton);
    }
    /*
	╔═══════Rainbow Six Siege═══════════╗
	║		In game mode block			║
	╚═══════════════════════════════════╝
	*/	
    if(inGameMode){
    	
		//Rapid fire
		if(!avilityActivated){
			if(get_val(FireButton) && rapidFireActive){
				combo_run(RapidFire);
			}else combo_stop(RapidFire);    	
    	}
    	
    	// We trigger the antirecoil
    	if(!avilityActivated){
    		if(get_val(ADSButton) && get_val(FireButton)){			
	    		if(isqrt(pow(ButtonIsHold(RXButton),2) + pow(ButtonIsHold(RYButton),2)) < r_dz){
		    		AntiRecoil();	    		
	    		}	    		
	    	}
    	} 	
    	
    	//Teabugging LOL
    	if(get_val(ADSButton) && ButtonIsHold(DownButton)){
    		combo_run(TeaBag);
    	}
    	
    	// Weapon switch 
    	if(ButtonPress(SwitchWeaponButton) && !avilityActivated){
    		primary=!primary;
			OperatorsMenu();
    	}
    	if(ButtonIsHold(ADSButton) && ButtonPress(UpButton) ){    		
    		primary=!primary;
			OperatorsMenu();
    	}
    	
    	
    	//This is necesary for Operators like Maestro/CLASS/MAVERICK
    	
    	if(avilityActivated){
    		if(operatorIndex  == attackerssCount + 1){ //PULSE
    			if(ButtonPress(AvilityButton) || ButtonPress(TacticalButton) || ButtonPress(DownButton)  ){    		
    				avilityActivated = FALSE;
    				avilityActiveOnRB = FALSE;
    				avilityActiveOnDOWN = FALSE;
    				ReloadInfo = TRUE;
    			}
    		}else if(operatorIndex  == attackerssCount + 19){ //MAESTRO
    			if(ButtonPress(BackButton) || ButtonPress(DownButton)){    		
    				avilityActivated = FALSE;
    				avilityActiveOnRB = FALSE;
    				avilityActiveOnDOWN = FALSE;
    				ReloadInfo = TRUE;
    			}
    		} else if(operatorIndex  == attackerssCount + 21){ //CLASS
    			if(ButtonPress(TacticalButton) || 
    				ButtonPress(DownButton)  || 
    				ButtonPress(SwitchWeaponButton) ||
    				ButtonPress(AvilityButton)){    		
    				avilityActivated = FALSE;
    				avilityActiveOnRB = FALSE;
    				avilityActiveOnDOWN = FALSE;
    				ReloadInfo = TRUE;
    			}
    		}else if(operatorIndex == 20){//MAVERICK
    			if(ButtonPress(AvilityButton) || 
    				ButtonPress(SwitchWeaponButton)){    		
    				avilityActivated = FALSE;
    				avilityActiveOnRB = FALSE;
    				avilityActiveOnDOWN = FALSE;
    				ReloadInfo = TRUE;
    			}
    		}
    	}
    	
    	if(avilityActiveOnDOWN && ButtonPress(DownButton)){
    		avilityActivated = TRUE;
    		OperatorsMenu();
    	}
    	
    	if(avilityActiveOnRB && ButtonPress(AvilityButton)){
    		avilityActivated = TRUE;
    		ReloadInfo = TRUE;
    	}
    	if(ReloadInfo){
    		ReloadInfo = FALSE;
    		OperatorsMenu();
    	}
    	
    	//------------------------------------------------
		
    }
	if(inGunChoosing){
		if(ButtonPress(LeftButton)){
			if(primary){
				primaryWeaponIndex --;
				if(primaryWeaponIndex < 1) primaryWeaponIndex = primaryWeaponCount;
			}else{
				secondaryWeaponIndex --;
				if(secondaryWeaponIndex < 1) secondaryWeaponIndex = secondaryWeaponCount;				
			}
		}
		if(ButtonPress(RightButton)){
			if(primary){
				primaryWeaponIndex ++;
				if(primaryWeaponIndex > primaryWeaponCount) primaryWeaponIndex = 1;
			}else{
				secondaryWeaponIndex --;
				if(secondaryWeaponIndex > secondaryWeaponCount) secondaryWeaponIndex = 1;
			}
		}		
		if(ButtonPress(UpButton)  || ButtonPress(DownButton)){
			primary = !primary;
		}
		if(ButtonPress(SelectButton)){
			ResetFlags();
			combo_run(Vibrate);
    		inGameMode = TRUE;			
    		inGunChoosing 	= FALSE;
    		primary = TRUE;
    		OperatorsMenu(); 
		}		
		//Clear all values on config mode
	    Unset(ReloadButton);
	    Unset(SwitchWeaponButton);
	    Unset(UpButton);
		Unset(DownButton);
		Unset(BackButton);
	    Unset(SelectButton);
	   	Unset(LeftButton);
	    Unset(RightButton);
	    Unset(ADSButton);
	    
		OperatorsMenu();
	}		
	
	set_val (TRACE_3, avilityActiveOnDOWN);
}
/*
╔═══════Rainbow Six Siege═══════════╗
║			Combos					║
╚═══════════════════════════════════╝
*/

	combo Vibrate {
	    set_rumble(RUMBLE_A, 50);
	    wait(300);
	    reset_rumble();
	}
	combo RapidFire {
	    Set(FireButton, 100);   
	    wait(30); 
	    Set(FireButton, 0);     
	    wait(20); 
	} 
	combo TeaBag(){ 
		Set(ProneButton, 100);
		wait(40);
		Unset(ProneButton);
		wait(DSSpeed);
	}
/*
╔═══════Rainbow Six Siege═══════════╗
║			Functions				║
╚═══════════════════════════════════╝
*/

	function OperatorsMenu(){
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		Unset(ViewButton);
		msgLine1 			= 5;
		if(inOperatorMode){
			//draw <<  >>
			putc_oled(1,60);
			puts_oled(7,53,0,1,1);
			putc_oled(1,60);
			puts_oled(17,53,0,1,1);
			putc_oled(1,62);
			puts_oled(105,53,0,1,1);
			putc_oled(1,62);
			puts_oled(115,53,0,1,1);
			displayToSelectOpratorScroll = TRUE;
			ScrollLine 			= 5;
			msgLine1 			= 30;
			avilityActivated	= FALSE;
		}
		countBlack 				= 0;
		primaryWeaponCount 		= 2;
		secondaryWeaponCount 	= 2;
		avilityActiveOnDOWN		= FALSE;
		avilityActiveOnRB	 	= FALSE;
		
			/*
		╔════Rainbow Six Siege════╗
		║		Sensibilidad	  ║	
		║   -Horizontal 	65 	  ║
		║	-Vertical 		75	  ║
		║	-ADS 			50	  ║
		╚═════════════════════════╝
		╔════════════Rainbow Six Siege══════════╗
		║  Antirecoil strength─┐	 ┌Rapid Fire║
		║					   ▼	 ▼			║		
		║	ConfigureActiveGun(30,99,0)			║
		║					 	   ▲			║
		║	Antirecoil angle ──────┘			║
		╠═══════════════════════════════════════╣		
		║	**Antirecoil X direction			║
		║		Add less to move it UP			║
		║		Add more to move it DOWN		║
		║	**Antirecoil Y direction   			║
		║		Add more to move it LEFT		║
		║		Add less to more it RIGHT		║
		╚═══════════════════════════════════════╝*/
		if(operatorIndex == 0)/*Ash -*/{ 
			
			PrintOperatorName(sizeof(ASHName), ASHName[0]);
			if(inOperatorMode) return;

			if(primary){
				if(primaryWeaponIndex == 1){					
					ConfigureActiveGun(30,97,0);
					PrintGunInfo(sizeof(R4C), R4C[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(33,99,0);
					PrintGunInfo(sizeof(G36C), G36C[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{				
				if(secondaryWeaponIndex == 1){					
					ConfigureActiveGun(22,87,1);
					PrintGunInfo(sizeof(a57USG), a57USG[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{					
					ConfigureActiveGun(27,89,1);
					PrintGunInfo(sizeof(M45MEUSOC), M45MEUSOC[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}		
		if(operatorIndex == 1)/*THERMITE - */{ 
			PrintOperatorName(sizeof(THERMITEName), THERMITEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(32,84,0);
					PrintGunInfo(sizeof(a556XI), a556XI[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(40,90,1);
					PrintGunInfo(sizeof(M1014), M1014[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(22,87,1);
					PrintGunInfo(sizeof(a57USG), a57USG[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(32,89,1);
					PrintGunInfo(sizeof(M45MEUSOC), M45MEUSOC[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex == 2)/*TWITCH  -*/{  
			PrintOperatorName(sizeof(TWITCHName), TWITCHName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				primaryWeaponCount = 3;
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(27,84,1);
					PrintGunInfo(sizeof(a417), a417[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else if(primaryWeaponIndex == 2){				
					ConfigureActiveGun(39,94,0);
					PrintGunInfo(sizeof(F2), F2[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 3){	
					ConfigureActiveGun(20,75,1);
					PrintGunInfo(sizeof(SGCQB), SGCQB[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(21,84,1);
					PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(39,87,1);
					PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}		
			return;
		}
		if(operatorIndex == 3)/*MONTAGNE -*/{  
			PrintOperatorName(sizeof(MONTAGNEName), MONTAGNEName[0]);
			if(inOperatorMode) return;		
			if(primaryWeaponIndex == 1){
				ConfigureActiveGun(21,84,1);
				PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
			}else if(primaryWeaponIndex == 2){	
				ConfigureActiveGun(39,87,1);
				PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
			}
			LED(Green);
			return;
		}
		if(operatorIndex == 4)/*BLITZ -*/{  
			PrintOperatorName(sizeof(BLITZName), BLITZName[0]);
			if(inOperatorMode) return;
			primaryWeaponCount = 1;
			ConfigureActiveGun(23,89,1);
			PrintGunInfo(sizeof(P12), P12[0], sizeof(HANDGUN), HANDGUN[0]);
			
			LED(Green);		
			return;
		}
		if(operatorIndex == 5)/*IQ -*/{   
			PrintOperatorName(sizeof(IQName), IQName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				primaryWeaponCount = 3;			
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(32,95,0);
					PrintGunInfo(sizeof(G8A1), G8A1[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);			
				}else if (primaryWeaponIndex == 2){	
					ConfigureActiveGun(33,90,0);
					PrintGunInfo(sizeof(AUGA2), AUGA2[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if (primaryWeaponIndex == 3){						
					ConfigureActiveGun(36,95,0);
					PrintGunInfo(sizeof(a552COMMANDO), a552COMMANDO[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(23,89,1);
				PrintGunInfo(sizeof(P12), P12[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
			
		}
		if(operatorIndex == 6)/*SLEDGE -*/{
			PrintOperatorName(sizeof(SLEDGEName), SLEDGEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(30,76,0);
					PrintGunInfo(sizeof(L85A2), L85A2[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(20,80,1);//
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(37,80,0);
					PrintGunInfo(sizeof(SMG11), SMG11[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{ 
					ConfigureActiveGun(23,85,1); //
					PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}		
			return;
		}
		if(operatorIndex == 7)/*THATCHER -*/{
			PrintOperatorName(sizeof(THATCHERName), THATCHERName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				primaryWeaponCount = 3;	
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(29,74,0);
					PrintGunInfo(sizeof(L85A2), L85A2[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 2){	
					ConfigureActiveGun(35,97,0); 
					PrintGunInfo(sizeof(AR33), AR33[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 3){	
					ConfigureActiveGun(20,80,1);
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(23,89,1);
				PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex == 8)/*GLAZ -*/{  
			PrintOperatorName(sizeof(GLAZName), GLAZName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				ConfigureActiveGun(44,90,1);
				PrintGunInfo(sizeof(OTS03), OTS03[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				LED(Green);
			}else{
				
				ConfigureActiveGun(21,87,1);
				PrintGunInfo(sizeof(GSH18), GSH18[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}		
			return;
		} 
		if(operatorIndex == 9)/*FUZE -*/{  
			PrintOperatorName(sizeof(FUZEName), FUZEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(34,96,0); 
					PrintGunInfo(sizeof(AK12), AK12[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);													
				}else{
					ConfigureActiveGun(35,72,0);
					PrintGunInfo(sizeof(a6P41), a6P41[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(21,87,1);
				PrintGunInfo(sizeof(GSH18), GSH18[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;			
		} 
		//══▶attackerss Year 1
		if(operatorIndex == 10)/*BUCK -*/{   
			PrintOperatorName(sizeof(BUCKName), BUCKName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(28,90,1);
					PrintGunInfo(sizeof(CAMRS), CAMRS[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else{
					ConfigureActiveGun(36,93,0);
					PrintGunInfo(sizeof(C8SFW), C8SFW[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(21,90,1);
				PrintGunInfo(sizeof(MK19MM), MK19MM[0], sizeof(HANDGUN), HANDGUN[0]);				
				LED(Blue);
			}	
			return;	
		}
		if(operatorIndex == 11)/*BLACKBEARD -*/{   
			PrintOperatorName(sizeof(BLACKBEARDName), BLACKBEARDName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(34,87,1);
					PrintGunInfo(sizeof(SR25), SR25[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else{
					ConfigureActiveGun(34,88,0); 
					PrintGunInfo(sizeof(MK17CQB), MK17CQB[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(34,90,1);
				PrintGunInfo(sizeof(D50), D50[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 12)/*CAPITÃO -*/{   
			PrintOperatorName(sizeof(CAPITAOName), CAPITAOName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(30,92,0);
					PrintGunInfo(sizeof(M249), M249[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(32,93,0);
					PrintGunInfo(sizeof(PARA308), PARA308[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(22,87,1);
				PrintGunInfo(sizeof(PRB92), PRB92[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}		
			return;		
		}
		if(operatorIndex == 13)/*HIBANA -*/{   
			PrintOperatorName(sizeof(HIBANAName), HIBANAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(34,99,0);
					PrintGunInfo(sizeof(TYPE89), TYPE89[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(20,85,1); 
					PrintGunInfo(sizeof(SUPERNOVA), SUPERNOVA[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(38,92,0);
					PrintGunInfo(sizeof(BEARING9), BEARING9[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(25,83,1); 
					PrintGunInfo(sizeof(P229RC), P229RC[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;	
		}
		//══▶attackerss Year 2
		if(operatorIndex == 14)/*JACKAL -*/{  
		PrintOperatorName(sizeof(JACKALName), JACKALName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(32,92,0);
					PrintGunInfo(sizeof(C7E), C7E[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 2){	
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(PDW9), PDW9[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}else if(primaryWeaponIndex == 3){	
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(ITA12L), ITA12L[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(23,86,1);
					PrintGunInfo(sizeof(USP40), USP40[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1); 
					PrintGunInfo(sizeof(ITA12S), ITA12S[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex == 15)/*YING -*/{ 
			PrintOperatorName(sizeof(YINGName), YINGName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){		
					ConfigureActiveGun(32,90,0);
					PrintGunInfo(sizeof(T95LSW), T95LSW[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(SIX12), SIX12[0], sizeof(SHOTGUN), SHOTGUN[0]);		
				}
				LED(Green);
			}else{
				
				ConfigureActiveGun(27,90,1);
				PrintGunInfo(sizeof(Q930), Q930[0], sizeof(HANDGUN), HANDGUN[0]);				
				LED(Blue);
			}		
			return;
		}
		if(operatorIndex == 16)/*ZOFIA -*/{   
			PrintOperatorName(sizeof(ZOFIAName), ZOFIAName[0]);
			if(inOperatorMode) return;
			avilityActiveOnRB = TRUE;
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(33,97,1);
					PrintGunInfo(sizeof(M762), M762[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);		
				}else{
					
					ConfigureActiveGun(35,99,0);
					PrintGunInfo(sizeof(LMGE), LMGE[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);
				}
				LED(Green);
			}else{
				ConfigureActiveGun(24,89,1);
				
				PrintGunInfo(sizeof(RG15), RG15[0], sizeof(HANDGUN), HANDGUN[0]);				
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 17)/*DOKKAEBI */{   
			PrintOperatorName(sizeof(DOKKAEBIName), DOKKAEBIName[0]);
			if(inOperatorMode) return;
			
			if(primary){
								
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(32,92,1);
					PrintGunInfo(sizeof(MK14EBR), MK14EBR[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(BOSG), BOSG[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(24,87,0);
					PrintGunInfo(sizeof(SMG12), SMG12[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(40,75,0);
					PrintGunInfo(sizeof(C75AUTO), C75AUTO[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}
				LED(Blue);
			}		
			return;
		}
		//══▶attackerss Year 3
		if(operatorIndex == 18)/*LION -*/{   
			PrintOperatorName(sizeof(LIONName), LIONName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(31,91,0);
					PrintGunInfo(sizeof(V308), V308[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 2){	
					ConfigureActiveGun(29,85,1);   
					PrintGunInfo(sizeof(a417), a417[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else if(primaryWeaponIndex == 3){	
					ConfigureActiveGun(23,70,1); 
					PrintGunInfo(sizeof(SGCQB), SGCQB[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(20,85,1);
					PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(39,87,1); 
					PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}		
			return;
		}
		if(operatorIndex == 19)/*FINKA*/{   
			PrintOperatorName(sizeof(FINKAName), FINKAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(32,92,0);
					PrintGunInfo(sizeof(SPEAR308), SPEAR308[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else if(primaryWeaponIndex == 2){	
					ConfigureActiveGun(35,72,0);  
					PrintGunInfo(sizeof(a6P41), a6P41[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);				
				
				}else if(primaryWeaponIndex == 3){	
					ConfigureActiveGun(35,72,0);//══▶TO DO 
					PrintGunInfo(sizeof(a6P41), a6P41[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(37,80,0);
					PrintGunInfo(sizeof(SMG11), SMG11[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(23,85,1); 
					PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 20)/*MAVERICK */{   
			PrintOperatorName(sizeof(MAVERICKName), MAVERICKName[0]);
			if(inOperatorMode) return;
			avilityActiveOnRB = TRUE;
			if(avilityActivated){			
				PrintAvilityInfo(sizeof(TOURCH), TOURCH[0]);
				return;
			}
			if(primary){
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(28,93,1);
					PrintGunInfo(sizeof(AR1550), AR1550[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(M4GS), M4GS[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}	
				LED(Green);
			}else{
				ConfigureActiveGun(27,89,1);
				PrintGunInfo(sizeof(a1911TACOPS), a1911TACOPS[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 21)/*NOMAD -*/{   
			PrintOperatorName(sizeof(NOMADName), NOMADName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(29,94,0);
					PrintGunInfo(sizeof(AK74M), AK74M[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(ARX200), ARX200[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(22,87,1);
				PrintGunInfo(sizeof(PRB92), PRB92[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				LED(Blue);
			}		
			return;
		}
		//══▶attackerss Year 4
		if(operatorIndex == 22)/*GRIDLOCK*/{   
			PrintOperatorName(sizeof(GRIDLOCKName), GRIDLOCKName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(32,92,0);
					PrintGunInfo(sizeof(F90), F90[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(M249), M249[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(24,87,1);
					PrintGunInfo(sizeof(SUPERSHORTY), SUPERSHORTY[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(SDP9MM), SDP9MM[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 23)/*NOKK*/{   
			PrintOperatorName(sizeof(NOKKName), NOKKName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(31,82,0);
					PrintGunInfo(sizeof(FMG9), FMG9[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(SIX12SD), SIX12SD[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(38,91,1);
					PrintGunInfo(sizeof(D50), D50[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(22,87,1); 
					PrintGunInfo(sizeof(a57USG), a57USG[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex == 24)/*Amaru */{   
			PrintOperatorName(sizeof(AMARUName), AMARUName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(34,93,0);
					PrintGunInfo(sizeof(G8A1), G8A1[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(20,85,1); 
					PrintGunInfo(sizeof(SUPERNOVA), SUPERNOVA[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(25,75,1); 
					PrintGunInfo(sizeof(ITA12S), ITA12S[0], sizeof(SHOTGUN), SHOTGUN[0]);					
				}else{
					ConfigureActiveGun(37,80,0);
					PrintGunInfo(sizeof(SMG11), SMG11[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex == 25)/*KALI -*/{   
			PrintOperatorName(sizeof(KALIName), KALIName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){	
					ConfigureActiveGun(15,101,1);
					PrintGunInfo(sizeof(CSRX300), CSRX300[0], sizeof(MARKSMANRIFLE), MARKSMANRIFLE[0]);
				}else{
					ConfigureActiveGun(20,80,1);
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){	
					ConfigureActiveGun(33,96,0);
				PrintGunInfo(sizeof(SPSMG9), SPSMG9[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(23,85,1); 
					PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		//══▶attackerss Year 5
		if(operatorIndex == 26)/*IANA*/{   
			PrintOperatorName(sizeof(IANAName), IANAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
				ConfigureActiveGun(32,94,1);
					PrintGunInfo(sizeof(ARX200), ARX200[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{ 
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(G36C), G36C[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(22,88,1);
				PrintGunInfo(sizeof(MK19MM), MK19MM[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex == 27)/*ACE -*/{   
			PrintOperatorName(sizeof(ACEName), ACEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,95,0);
					PrintGunInfo(sizeof(AK12), AK12[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(40,90,1); 
					PrintGunInfo(sizeof(M1014), M1014[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(21,85,1);
				PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}	
		if(operatorIndex == 28)/*ZERO -*/{   
			PrintOperatorName(sizeof(ZEROName), ZEROName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(32,95,0);
					PrintGunInfo(sizeof(SC3000K), SC3000K[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(32,86,0); 
					PrintGunInfo(sizeof(MP7), MP7[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(22,87,1);
				PrintGunInfo(sizeof(a57USG), a57USG[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}	
	  /*╔════Rainbow Six Siege════╗
		║		Sensibilidad	  ║	
		║   -Horizontal 	65 	  ║
		║	-Vertical 		75	  ║
		║	-ADS 			50	  ║
		╚═════════════════════════╝
	  	╔═══════Rainbow Six Siege═══════════╗
		║	**Antirecoil X direction		║
		║		Add less to move it UP		║
		║		Add more to move it DOWN	║
		║	**Antirecoil Y direction   		║
		║		Add more to move it LEFT	║
		║		Add less to more it RIGHT	║
		╚═══════════════════════════════════╝*/
		//══▶Original defenders
		if(operatorIndex  == attackerssCount + 1)/*PULSE -*/{ 
			PrintOperatorName(sizeof(PULSEName), PULSEName[0]);
			if(inOperatorMode) return;
			avilityActiveOnRB = TRUE;
			if(avilityActivated){			
				PrintAvilityInfo(sizeof(SENSOR), SENSOR[0]);
				return;
			}
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(26,93,0);
					PrintGunInfo(sizeof(UMP45), UMP45[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(40,90,1); 
					PrintGunInfo(sizeof(M1014), M1014[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(26,90,1); 
					PrintGunInfo(sizeof(M45MEUSOC), M45MEUSOC[0], sizeof(HANDGUN), HANDGUN[0]);
					
				}else{
					ConfigureActiveGun(22,87,1);
					PrintGunInfo(sizeof(a57USG), a57USG[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 2)/*CASTLE -*/{ 
			PrintOperatorName(sizeof(CASTLEName), CASTLEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(26,93,0);
					PrintGunInfo(sizeof(UMP45), UMP45[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(40,90,1); //
					PrintGunInfo(sizeof(M1014), M1014[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(20,85,1);
					PrintGunInfo(sizeof(SUPERSHORTY), SUPERSHORTY[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}else{
					ConfigureActiveGun(27,89,1); //
					PrintGunInfo(sizeof(M45MEUSOC), M45MEUSOC[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 3)/*DOC -*/{ 
		PrintOperatorName(sizeof(DOCName), DOCName[0]);
			if(inOperatorMode) return;
			
			if(primary){				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,89,0);
					PrintGunInfo(sizeof(P90), P90[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);					
				}else if(primaryWeaponIndex == 2){
					ConfigureActiveGun(32,95,0);
					PrintGunInfo(sizeof(MP5), MP5[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else  if(primaryWeaponIndex == 3){
					ConfigureActiveGun(23,70,1);  
					PrintGunInfo(sizeof(SGCQB), SGCQB[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(21,84,1);
					PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(39,87,1); 
					PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 4)/*ROOK OK*/{ 
		PrintOperatorName(sizeof(ROOKName),ROOKName[0]);
			if(inOperatorMode) return;
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,95,0);
					PrintGunInfo(sizeof(MP5), MP5[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else if(primaryWeaponIndex == 2){
					ConfigureActiveGun(37,90,0);
					PrintGunInfo(sizeof(P90), P90[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else  if(primaryWeaponIndex == 3){
					ConfigureActiveGun(23,70,1);  
					PrintGunInfo(sizeof(SGCQB), SGCQB[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(21,84,1);
					PrintGunInfo(sizeof(P9), P9[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(39,87,1); 
					PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 5)/*BANDIT -*/{ 
		PrintOperatorName(sizeof(BANDITName), BANDITName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(32,86,0);
					PrintGunInfo(sizeof(MP7), MP7[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{	
					ConfigureActiveGun(20,85,1);
					PrintGunInfo(sizeof(M870), M870[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{	
				ConfigureActiveGun(23,89,1);				
				PrintGunInfo(sizeof(P12), P12[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 6)/*JAGER -*/{ 
		PrintOperatorName(sizeof(JAGERName), JAGERName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(30,96,0);
					PrintGunInfo(sizeof(a416CCARBINE), a416CCARBINE[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{	
					ConfigureActiveGun(20,85,1);
					PrintGunInfo(sizeof(M870), M870[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{	
				ConfigureActiveGun(23,89,1);				
				PrintGunInfo(sizeof(P12), P12[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 7)/*SMOKE -*/{ 
		PrintOperatorName(sizeof(SMOKEName), SMOKEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,88,0);
					PrintGunInfo(sizeof(FMG9), FMG9[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{	
					ConfigureActiveGun(20,80,1); //To DO
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(33,82,0);						
					PrintGunInfo(sizeof(SMG11), SMG11[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{	
					ConfigureActiveGun(23,85,1); // To Do
					PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
				}LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 8)/*MUTE -*/{ 
		PrintOperatorName(sizeof(MUTEName), MUTEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,90,0);
					PrintGunInfo(sizeof(MP5K), MP5K[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{	
					ConfigureActiveGun(20,80,1);
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(23,86,1); 
					PrintGunInfo(sizeof(P226MK25), P226MK25[0], sizeof(HANDGUN), HANDGUN[0]);
					
				}else{	
					ConfigureActiveGun(37,80,0); 
					PrintGunInfo(sizeof(SMG11), SMG11[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}	LED(Blue);
			}		
			return;
		}
		if(operatorIndex  == attackerssCount + 9)/*KAPKAN -*/{ 
		PrintOperatorName(sizeof(KAPKANName), KAPKANName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(48,90,1);
					PrintGunInfo(sizeof(SASG12), SASG12[0], sizeof(SHOTGUN), SHOTGUN[0]);	
				}else{	
					ConfigureActiveGun(25,91,1); 
					PrintGunInfo(sizeof(a9X19VSN), a9X19VSN[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(27,90,1);
					PrintGunInfo(sizeof(PMM), PMM[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{	
					ConfigureActiveGun(21,88,1); 
					PrintGunInfo(sizeof(GSH18), GSH18[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 10)/*TACHANKA -*/{ 
		PrintOperatorName(sizeof(TACHANKAName), TACHANKAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(48,90,1);
					PrintGunInfo(sizeof(SASG12), SASG12[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}else{	
					ConfigureActiveGun(25,91,1); 
					PrintGunInfo(sizeof(a9X19VSN), a9X19VSN[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(27,90,1);
					PrintGunInfo(sizeof(PMM), PMM[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{	
					ConfigureActiveGun(21,88,1); 
					PrintGunInfo(sizeof(GSH18), GSH18[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		//══▶defenders Year 1
		if(operatorIndex  == attackerssCount + 11)/*FROST -*/{ 
		PrintOperatorName(sizeof(FROSTName), FROSTName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(26,85,0);
					PrintGunInfo(sizeof(a9MMC1), a9MMC1[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(40,86,1);
					PrintGunInfo(sizeof(SUPER90), SUPER90[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{	
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(22,85,1);
					PrintGunInfo(sizeof(MK19MM), MK19MM[0], sizeof(HANDGUN), HANDGUN[0]);				
				}else{
					ConfigureActiveGun(27,70,1); 
					PrintGunInfo(sizeof(ITA12S), ITA12S[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 12)/*VALKYRIE -*/{ 
		PrintOperatorName(sizeof(VALKYRIEName), VALKYRIEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,93,0);
					PrintGunInfo(sizeof(MPX), MPX[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(SPAS12), SPAS12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(34,90,1);
				PrintGunInfo(sizeof(D50), D50[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 13)/*CAVEIRA -*/{ 
			PrintOperatorName(sizeof(CAVEIRAName), CAVEIRAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(40,80,1);
					PrintGunInfo(sizeof(SPAS15), SPAS15[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}else{
					ConfigureActiveGun(29,92,0);
					PrintGunInfo(sizeof(M12), M12[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(32,79,1);	
				PrintGunInfo(sizeof(LUISON), LUISON[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 14)/*ECHO -*/{ 
			PrintOperatorName(sizeof(ECHOName), ECHOName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,95,0);
					PrintGunInfo(sizeof(MP5SD), MP5SD[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(20,85,1); 
					PrintGunInfo(sizeof(SUPERNOVA), SUPERNOVA[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(38,92,0);
					PrintGunInfo(sizeof(BEARING9), BEARING9[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(25,83,1); 
					PrintGunInfo(sizeof(P229RC), P229RC[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		//══▶defenders Year 2
		if(operatorIndex  == attackerssCount + 15)/*MIRA -*/{ 
			PrintOperatorName(sizeof(MIRAName), MIRAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,90,0);
					PrintGunInfo(sizeof(VECTOR45ACP), VECTOR45ACP[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(ITA12L), ITA12L[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(27,70,1); 
					PrintGunInfo(sizeof(ITA12S), ITA12S[0], sizeof(SHOTGUN), SHOTGUN[0]);
				}else{
					ConfigureActiveGun(24,80,1); 
					PrintGunInfo(sizeof(USP40), USP40[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 16)/*LESION -*/{ 
			PrintOperatorName(sizeof(LESIONName), LESIONName[0]);
			if(inOperatorMode) return;
			
			if(primary){				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,91,0);
					PrintGunInfo(sizeof(T5SMG), T5SMG[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(40,85,1); 
					PrintGunInfo(sizeof(SIX12SD), SIX12SD[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(27,91,1);	
				PrintGunInfo(sizeof(Q929), Q929[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 17)/*Ela -*/{ 
			PrintOperatorName(sizeof(ELAName), ELAName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(35,80,0); 
					PrintGunInfo(sizeof(SCORPIONEVO3A1), SCORPIONEVO3A1[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(55,90,1);
					PrintGunInfo(sizeof(FO12), FO12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(24,89,1); 
				PrintGunInfo(sizeof(RG15), RG15[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 18)/*VIGIL -*/{ 
			PrintOperatorName(sizeof(VIGILName), VIGILName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,93,0);
					PrintGunInfo(sizeof(K1A), K1A[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(BOSG), BOSG[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(36,89,0);
					PrintGunInfo(sizeof(C75AUTO), C75AUTO[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(24,87,0); 
					PrintGunInfo(sizeof(SMG12), SMG12[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
					
				}
				LED(Blue);
			}	
			return;
		}
		//══▶defenders Year 3
		if(operatorIndex  == attackerssCount + 19)/*MAESTRO -*/{ 
			PrintOperatorName(sizeof(MAESTROName), MAESTROName[0]);
			if(inOperatorMode) return;
			avilityActiveOnRB = TRUE;
			avilityActiveOnDOWN = TRUE;
			if(avilityActivated){			
				PrintAvilityInfo(sizeof(EVILEYE), EVILEYE[0]);
				return;
			}
			if(primary){		
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(31,92,0);
					PrintGunInfo(sizeof(ALDA), ALDA[0], sizeof(LIGHTMACHINEGUN), LIGHTMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(ACS12), ACS12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(40,90,1);
					PrintGunInfo(sizeof(BAILIFF), BAILIFF[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(32,87,1); 
					PrintGunInfo(sizeof(KERATOS), KERATOS[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 20)/*ALIBI -*/{ 
			PrintOperatorName(sizeof(ALIBIName), ALIBIName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,80,0);
					PrintGunInfo(sizeof(MX4STORM), MX4STORM[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(ACS12), ACS12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(32,87,1); 
					PrintGunInfo(sizeof(KERATOS), KERATOS[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(40,90,1);
					PrintGunInfo(sizeof(BAILIFF), BAILIFF[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 21)/*CLASH -*/{ 
			PrintOperatorName(sizeof(CLASHName), CLASHName[0]);
			if(inOperatorMode) return;
			avilityActiveOnRB = TRUE;
			if(avilityActivated){			
				PrintAvilityInfo(sizeof(SHIELD), SHIELD[0]);
				return;
			}
			if(secondaryWeaponIndex == 1){
				ConfigureActiveGun(23,91,1);
				PrintGunInfo(sizeof(P10C), P10C[0], sizeof(HANDGUN), HANDGUN[0]);
			}else{
				ConfigureActiveGun(27,70,1);//══▶TO DO 
				PrintGunInfo(sizeof(SPSMG9), SPSMG9[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
			}
			LED(Blue);
			
			return;
		}
		if(operatorIndex  == attackerssCount + 22)/*KAID -*/{ 
			PrintOperatorName(sizeof(KAIDName),KAIDName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(29,85,0);
					PrintGunInfo(sizeof(AUGA3), AUGA3[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(TCSG12), TCSG12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(39,90,1);
					PrintGunInfo(sizeof(LFP586), LFP586[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(a44MAGSEMIAUTO), a44MAGSEMIAUTO[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}		
			return;
		}
		//══▶defenders Year 4
		if(operatorIndex  == attackerssCount + 23)/*MOZZIE  -*/{
			PrintOperatorName(sizeof(MOZZIEName), MOZZIEName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(29,92,0);
					PrintGunInfo(sizeof(COMMANDO9), COMMANDO9[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(P10RONI), P10RONI[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(27,91,1); 	
				PrintGunInfo(sizeof(SDP9MM), SDP9MM[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}	
			return;
		}
		if(operatorIndex  == attackerssCount + 24)/*WARDEN -*/{ 
			PrintOperatorName(sizeof(WARDENName), WARDENName[0]);
			if(inOperatorMode) return;
			
			if(primary){				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(29,91,0);
					PrintGunInfo(sizeof(MPX), MPX[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(20,80,1);
					PrintGunInfo(sizeof(M590A1), M590A1[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(23,91,1);
					PrintGunInfo(sizeof(P10C), P10C[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(24,87,0); 
					PrintGunInfo(sizeof(SMG12), SMG12[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 25)/*GOYO -*/{ 
			PrintOperatorName(sizeof(GOYOName), GOYOName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(33,90,0); 
					PrintGunInfo(sizeof(VECTOR45ACP), VECTOR45ACP[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(TCSG12), TCSG12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(23,85,1);
				PrintGunInfo(sizeof(P229RC), P229RC[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 26)/*WAMAI -*/{ 
			PrintOperatorName(sizeof(WAMAIName), WAMAIName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(28,90,0); 
					PrintGunInfo(sizeof(AUGA2), AUGA2[0], sizeof(ASSAULTRIFLE), ASSAULTRIFLE[0]);
				}else{
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(MP5K), MP5K[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(32,87,1); 
					PrintGunInfo(sizeof(KERATOS), KERATOS[0], sizeof(HANDGUN), HANDGUN[0]);
				}else{
					ConfigureActiveGun(23,89,1); 
					PrintGunInfo(sizeof(P12), P12[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		//══▶defenders Year 5
		if(operatorIndex  == attackerssCount + 27)/*ORYX*/{ 
			PrintOperatorName(sizeof(ORYXName), ORYXName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(30,87,0);
					PrintGunInfo(sizeof(T5SMG), T5SMG[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(35,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(SPAS12), SPAS12[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				
				if(secondaryWeaponIndex == 1){
					ConfigureActiveGun(27,70,1);//══▶TO DO 
					PrintGunInfo(sizeof(BAILIFF410), BAILIFF410[0], sizeof(MACHINEPISTOL), MACHINEPISTOL[0]);
				}else{
					ConfigureActiveGun(24,80,1);
					PrintGunInfo(sizeof(USP40), USP40[0], sizeof(HANDGUN), HANDGUN[0]);
				}
				LED(Blue);
			}
			return;
		}
		if(operatorIndex  == attackerssCount + 28)/*Melusi -*/{ 
			PrintOperatorName(sizeof(MELUSIName), MELUSIName[0]);
			if(inOperatorMode) return;
			
			if(primary){
				
				if(primaryWeaponIndex == 1){
					ConfigureActiveGun(32,95,0);
					PrintGunInfo(sizeof(MP5), MP5[0], sizeof(SUBMACHINEGUN), SUBMACHINEGUN[0]);
				}else{
					ConfigureActiveGun(31,81,1);
					PrintGunInfo(sizeof(SUPER90), SUPER90[0], sizeof(SHOTGUN), SHOTGUN[0]);				
				}
				LED(Green);
			}else{
				ConfigureActiveGun(24,89,1); 	
				PrintGunInfo(sizeof(RG15), RG15[0], sizeof(HANDGUN), HANDGUN[0]);
				LED(Blue);
			}			
			return;
		}
	}
	function ResetFlags(){
		displayLogo 				= FALSE;
		inGameMode					= FALSE;
		inConfig					= FALSE;
		inMenuMode					= FALSE;
		inOperatorMode				= FALSE;
		displayLogoScroll 			= FALSE;
		displayToSelectInfoScroll	= FALSE;
		displayToSelectOpratorScroll= FALSE;
	}
	function ResetScrollVars(){		
		printf(5,ScrollLine,OLED_FONT_MEDIUM,OLED_WHITE,ClearLabel[0]);
 		
		for (forIndex = 0; forIndex < 127; forIndex++) {		 
			PrintCharacter(SPACE,forIndex);
		}
		MessageColumCount = 127;
	}
	function OperatorsYearByYearMenu(){
		displayToSelectInfoScroll = FALSE;
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		msgLine1 = 5;
		if(operatorModeIndex == 1){
			printf(center_x(sizeof(attackers) - 1, OLED_FONT_MEDIUM_WIDTH), msgLine1, OLED_FONT_MEDIUM,OLED_WHITE, attackers[0]);
		}else{
			printf(center_x(sizeof(defenders) - 1, OLED_FONT_MEDIUM_WIDTH), msgLine1, OLED_FONT_MEDIUM,OLED_WHITE, defenders[0]);
		}
		if(operatorYbYIndex == 0) {
			printf(center_x(sizeof(original) - 2, OLED_FONT_MEDIUM_WIDTH), msgLine2, OLED_FONT_MEDIUM, OLED_WHITE, original[0]);
			printf(center_x(sizeof(operators) - 2, OLED_FONT_MEDIUM_WIDTH), msgLine3 - 5, OLED_FONT_MEDIUM, OLED_WHITE, operators[0]);
		}else{
			printf(center_x(sizeof(year) - 2, OLED_FONT_MEDIUM_WIDTH), msgLine2, OLED_FONT_MEDIUM, OLED_WHITE, year[0]);
			putc_oled(1,operatorYbYIndex + 48);
			puts_oled(90,msgLine2,fontSize,1,1);
		}

	}
	function OperatorModeMenu(){
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
	 	printf(5,25,OLED_FONT_MEDIUM, !operatorModeIndex, attackers[0]);
		printf(5,45,OLED_FONT_MEDIUM, operatorModeIndex, defenders[0]);				
		ScrollLine 		= 4;		
	} 			
	function ConfigureActiveGun(_polarX, _polarY, rf){
		polarX = _polarX; 
		polarY = _polarY; 
		rapidFireActive = rf;
	}
	function PrintGunInfo(namecolumn, gunName, typecolumn, gunType){
		printf(center_x(namecolumn - 1, OLED_FONT_MEDIUM_WIDTH), msgLine2, OLED_FONT_MEDIUM, OLED_WHITE, gunName);

		
		if(inGunChoosing){
			//draw <<  >>
			putc_oled(1,60);
			puts_oled(7,53,0,1,1);
			putc_oled(1,60);
			puts_oled(17,53,0,1,1);
			putc_oled(1,62);
			puts_oled(105,53,0,1,1);
			putc_oled(1,62);
			puts_oled(115,53,0,1,1);
			if(primary){
				printf(center_x(sizeof(primaryMsg) - 1, OLED_FONT_SMALL_WIDTH), msgLine3, OLED_FONT_SMALL, OLED_WHITE, primaryMsg[0]);
			}else{
				printf(center_x(sizeof(secondaryMsg) - 1, OLED_FONT_SMALL_WIDTH), msgLine3, OLED_FONT_SMALL, OLED_WHITE, secondaryMsg[0]);
			}
		}else{
			printf(center_x(typecolumn - 1, OLED_FONT_SMALL_WIDTH), msgLine3, OLED_FONT_SMALL, OLED_WHITE, gunType);
		}

	}
	function PrintAvilityInfo(namecolumn, avilityName){
		printf(center_x(namecolumn - 1, OLED_FONT_MEDIUM_WIDTH), 35, OLED_FONT_MEDIUM, OLED_WHITE, avilityName);
	} 
	function PrintOperatorName(column, operator){
		printf(center_x(column - 1, OLED_FONT_MEDIUM_WIDTH), msgLine1, OLED_FONT_MEDIUM,OLED_WHITE,operator);
	}	
	function AntiRecoil(){
		set_polar(POLAR_RS, polarY ,(polarX * 328));
	}
	function ButtonPress(button){return event_press(button);} 
	function ButtonRelease(button){return event_release(button);}
	function ButtonIsHold(button){return get_val(button);} 	
	function Unset(id){set_val(id, 0);} 
	function Set(id,val){set_val(id, val);} 
	function center_x(f_chars,f_font) {                                                         
	    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
	}                                                      
	function LED(Colour) {
	    set_led(LED_1,duint8(Colour*4));
	    set_led(LED_2,duint8((Colour*4) + 1));
	    set_led(LED_3,duint8((Colour*4) + 2));
	    set_led(LED_4,duint8((Colour*4) + 3));
	}                     	
	function DrawLogo() {
		displayLogo = FALSE;
		pictureOffset = 2; // Reset the starting point
		pictureBit = 16; // Reset bit flag

		for (pictureY = 0; pictureY < logo[1]; pictureY++) { // Loop the Y axis
			for (pictureX = 0; pictureX < logo[0]; pictureX++) { // Loop the X axis
				pictureData = logo[pictureOffset]
				pictureX2 = pictureX;
				pictureY2 = pictureY;
				if (pictureX2 < 0 || pictureX2 >= 128) {
					pictureX2 -= 128;
				}
				if (pictureY2 < 0 || pictureY2 >= 64) {
					pictureY2 -= 64;
				}
				if (test_bit(pictureData, pictureBit - 1)) {
					pixel_oled(pictureX2, pictureY2, 1);
				}
				else {
					pixel_oled(pictureX2, pictureY2, 0);
				}
				pictureBit--; // Decrement the bit flag, we're moving to the next bit
				if (!pictureBit) { // Check if we've just handled the last bit
					pictureBit = 16; // Reset the bit flag
					pictureOffset++; // Move to the next value
				}
			}
		}
	}
	function DrawLogo2() {
		displayLogo = FALSE;
		pictureOffset = 2; // Reset the starting point
		pictureBit = 16; // Reset bit flag

		for (pictureY = 0; pictureY < logo2[1]; pictureY++) { // Loop the Y axis
			for (pictureX = 0; pictureX < logo2[0]; pictureX++) { // Loop the X axis
				pictureData = logo2[pictureOffset]
				pictureX2 = pictureX;
				pictureY2 = pictureY;
				if (pictureX2 < 0 || pictureX2 >= 128) {
					pictureX2 -= 128;
				}
				if (pictureY2 < 0 || pictureY2 >= 64) {
					pictureY2 -= 64;
				}
				if (test_bit(pictureData, pictureBit - 1)) {
					pixel_oled(pictureX2, pictureY2, 1);
				}
				else {
					pixel_oled(pictureX2, pictureY2, 0);
				}
				pictureBit--; // Decrement the bit flag, we're moving to the next bit
				if (!pictureBit) { // Check if we've just handled the last bit
					pictureBit = 16; // Reset the bit flag
					pictureOffset++; // Move to the next value
				}
			}
		}
	}	
	function PrintCharacter(character, column){
		if(column > 0 && column < 127){
			putc_oled(1,character);
			puts_oled(column,ScrollLine,fontSize,1,1);
		}
	}	
	function WelcomeInfo(){

		MessageColumCount --;
		MessageArrayLine = 0;
		for (MessageArrayLine = 0; MessageArrayLine < WelcomeMsg[0]; MessageArrayLine++){
			PrintCharacter(WelcomeMsg[MessageArrayLine + 1 ], MessageColumCount + (10 * MessageArrayLine ));
		}
		
		PrintCharacter(SPACE,1);
		
		if(MessageColumCount + (10 * MessageArrayLine ) < 0 ){
			MessageColumCount = 127;
			displayLogo = TRUE;
		}
		
	}	
	function OperatorSelection(){
		MessageColumCount --;
		MessageArrayLine = 0;
		for (MessageArrayLine = 0; MessageArrayLine < OperatorSelectionMsg[0]; MessageArrayLine++){
			PrintCharacter(OperatorSelectionMsg[MessageArrayLine + 1 ], MessageColumCount + (10 * MessageArrayLine ));
		}
		
		PrintCharacter(SPACE,1);
		
		if(MessageColumCount + (10 * MessageArrayLine ) < 0 ){
			MessageColumCount = 127;
		}
		line_oled(1, 1 , 1 , 22 , 1 , 1 );

	}
	function OperatorModeInfo(){
		MessageColumCount --;
		MessageArrayLine = 0;
		for (MessageArrayLine = 0; MessageArrayLine < OperatorModeSelectionMsg[0]; MessageArrayLine++){
			PrintCharacter(OperatorModeSelectionMsg[MessageArrayLine + 1 ], MessageColumCount + (10 * MessageArrayLine ));
		}
		
		PrintCharacter(SPACE,1);
		
		if(MessageColumCount + (10 * MessageArrayLine ) < 0 ){
			MessageColumCount = 127;
		}
		line_oled(1, 1 , 1 , 22 , 1 , 1 );	
	}	

