// Dam Polar Assist V2.0 DoGz Style {AKA[ME.]}
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               In Game Buttons/Sticks               )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define AimX     = PS4_RX;
define AimY     = PS4_RY;

define On       = TRUE;
define Off      = FALSE;

int DamAngle,DamCos,DamSin,DamX,DamY,ActualMagnitude,MaxMagnitude,RadiusDam,AngleDam;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define DAMRadius        = 15;
define DAMAngle         = 20;
define DAMRadiusBoost   = 6;
define DAMAngleBoost    = 10;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define DamPolarAssist = On;
define DamPolarBoost  = On;
define DAMPolarAAHip  = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
main {

    if (DamPolarAssist) {
    
        if (get_ival(Ads) || (DAMPolarAAHip && get_ival(Fire))) {
        
            DamX = get_ival(AimX);   
            DamY = get_ival(AimY);           
            ActualMagnitude = isqrt(pow(DamX,2) + pow(DamY,2));  
            MaxMagnitude = (ActualMagnitude < 100);                      
        
            if (DamPolarBoost && get_ival(Fire)) {
                    
                RadiusDam = DAMRadius + DAMRadiusBoost;
                AngleDam = DAMAngleBoost;
                
            } else {
                    
                RadiusDam = DAMRadius;
                AngleDam = 0;
            }
            
            DamAngle += DAMAngle + AngleDam;                                                 
            DamAngle = DamAngle % 360;                                            
            DamSin = DamPolar[DamAngle % 360];                           
            DamCos = DamPolar[(DamAngle + 270) % 360];                  
            DamCos = (DamCos * RadiusDam) / 100;                         
            DamSin = (DamSin * RadiusDam) / 100;                          
        
            if (ActualMagnitude <= 10) {                                                      
                
                DamSin -= DamY;                                                              
                DamCos -= DamX;                                                                 
            
            } else {                                                                                       
                    
                DamSin = (DamSin * (200 - ((abs(DamY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                DamCos = (DamCos * (200 - ((abs(DamX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
            }                                                  
            
            set_val(AimX,clamp(DamX + DamCos, -100,100));
            set_val(AimY,clamp(DamY + DamSin, -100,100)); 
        }
    }
}

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100
};