// GPC Online Library
// cod_bo_cold_war_&_mw_-_polar_the_sequel_.gpc

/* * 4.1 release notes: in this update some of my default settings have been changed (like slide cancel, auto run, rainbow led etc).
so to avoid that you are not aware of these changes, you should look closely at each of the config settings. 
Build for ZEN - only recommended for Advanced Users of GPC scripts. Check this URL: tinyurl.com/ads-menu-crescens 
Discord: https://discord.gg/QqPupAH69n (largest independent ZEN server, with loads and loads of scripts by the Alpha Team).


										  A  G P C  P O W E R  S C R I P T   
											    B Y  C R E S C E N S
							     ___        _  _         __   ___         _         
							    / __| __ _ | || |  ___  / _| |   \  _  _ | |_  _  _ 
							   | (__ / _` || || | / _ \|  _| | |) || || ||  _|| || |
							    \___|\__,_||_||_| \___/|_|   |___/  \_,_| \__| \_, |
							         ___  _            _      ___             _|__/ 
							        | _ )| | __ _  __ | |__  / _ \  _ __  ___(_)    
							        | _ \| |/ _` |/ _|| / / | (_) || '_ \(_-< _     
							        |___/|_|\__,_|\__||_\_\  \___/ | .__//__/(_)    
							   _____ ____  _      _____   __       | |       _____  
							  / ____/ __ \| |    |  __ \  \ \      |_/ /\   |  __ \ 
							 | |   | |  | | |    | |  | |  \ \  /\  / /  \  | |__) |
							 | |   | |  | | |    | |  | |   \ \/  \/ / /\ \ |  _  / 
							 | |___| |__| | |____| |__| |    \  /\  / ____ \| | \ \ 
							  \_____\____/|______|_____/      \/  \/_/    \_\_|  \_\                                                      
												       
										 	 ▄▄▄·      ▄▄▌   ▄▄▄· ▄▄▄  
											▐█ ▄█▪     ██•  ▐█ ▀█ ▀▄ █·
											 ██▀· ▄█▀▄ ██▪  ▄█▀▀█ ▐▀▀▄ 
											▐█▪·•▐█▌.▐▌▐█▌▐▌▐█ ▪▐▌▐█•█▌ 
											.▀    ▀█▄▀▪.▀▀▀  ▀  ▀ .▀  ▀
											   T H E  S E Q U E L :  
										   M E L T  Y O U R  E N E M Y !					 
							
												
						P O L A R  A I M  A S S I S T  W I T H  A I M  C O R R E C T I O N S 
						
						 		 A U T O  R A P I D  F I R E  D E T E C T I O N 
						 		 
								 A D V A N C E D  A N T I  R E C O I L  W I T H  
						    U L T R A  F A S T  &  E A S Y  S E T - U P:  S E T  U P 
												
							      How to lock onto your enemy with Polar Aim Assist:
						 				   https://youtu.be/nHeZr6avSaY
										     Press ADS until it locks. 
								     So, if you did not lock on the first time,
									     release ADS and press ADS again.
								 
								     			  Some quotes:
	"This has been hands down the best script I've ever used and is putting me in the big boy lobbies now dammit!"
													Coho_024

									"...your script by far is the best I’ve used."
													  Tats

								  "Also ich fange an, dein Script zu lieben!" 😉
													Newcomer

"I just tested your new easy recoil setup on Cold War and holy sheeeeesh dude. You can get almost a laser beam with it"
										   		  𝓢𝓢_𝓝𝓲𝓴𝓸𝓵𝓪𝓲
____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__ ____o__  ____o__  ____o__  ____o__ 
			
			This script has:
			- **** NEW **** AUTO RAPID FIRE DETECTION 
			- **** NEW **** SNIPER MODE NOW IS EQUIPED WITH SCOPE SHOT & AUTO CROUCH
			- my polar aim assist (you can tweak polar settings on the fly)
			- my advanced anti recoil with easy set up for 4 recoil profiles 
			- my aim corrections (the first to work with a Polar aim assist)
			- auto/easy sprint
			- my cancel reload: with the option to calibrate the reload times for your weapons of choice
			- my dynamic rapid fire for primary and secondary wpn, & akimbo rf for secondary wpn
			- my easy melee: I placed melee under my left thumbstick, allowing me to melee ultra fast if I bump into an enemy. 
			- new: my SEXY BUMPER (with a new version of Big Skub`s Big Man - Little Dance, my Pang Single Kill Shot and other cool mods.
			- sniper mode (advanced with my long shot sens automatically applied when using sniper riffle)
			- slide cancel for Cold War & Modern Warfare - originally created by DjangoKill and optimised by SS_Nikolai
			
			This script works on:
			- Call of Duty Black Ops Cold War
			- Call of Duty Modern Warfare (read instruction in USER CONFIG CAREFULLY TO MAKE THE SCRIPT MW COMPLIANT!!!)
			- your muma! 
			- ZEN
			____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__
			
	     I T  I S  S T R O N G E R,  F A S T E R,  S T I C K I E R  &  J U S T  B E T T E R: 
			 P O L A R  A I M  A S S I S T  W I T H   A I M  C O R R E C T I O N S  B Y 
			 
				 						╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗   
										║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗   
										╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝ 
		     
		   						 A C C O R D I N G  7 / 1 0  U S E R S : 
		    	T H E  B E S T  &  S T R O N G E S T   A I M  A S S I S T  O N  C O D ! 
		    
					 W A N T  P R O O F  O F  T H A T ?  L O O K  I N  D I S C O R D !
		  A N D  C A S T  Y O U R  V O T E  I N  T H E  P O L A R  A I M  A S S I S T  P O L L
		  
		 							  https://discord.gg/WzgPukUqkP
			    	
			____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__
										__ _             _                                       
									   / _| |__ ___ __ _| |___ ______							 
									  |  _| / _` \ V  V / / -_|_-<_-<                           
								      |_| |_\__,_|\_/\_/|_\___/__/__/                           
									     c o m p i l e s   w i t h                               
										  ( 0 )  w a r n i n g s       
			____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__
								
									D E S T R O Y  Y O U R  E N E M Y  ! ! 
									  # 1  S C R I P T  F O R  C O D 
			____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__
			
   								 _   _ ___ ___ ___     __  ___  ___ ___ ___ ___ _____     
						        | | | / __| __| _ \   / / / __|/ __| _ \_ _| _ \_   _|    
						        | |_| \__ \ _||   /  / /  \__ \ (__|   /| ||  _/ | |      
						     ___ \___/|___/___|_|_\_/_/_  |___/\___|_|_\___|_|_ _|_| _  _ 
						    / __/ _ \| \| | __|_ _/ __| | | | _ \  /_\_   _|_ _/ _ \| \| |
						   | (_| (_) | .` | _| | | (_ | |_| |   / / _ \| |  | | (_) | .` |
						    \___\___/|_|\_|_| |___\___|\___/|_|_\/_/ \_\_| |___\___/|_|\_|
   			╔════════════════════════════════════════════════════════════════════════════════════════╗ 
			║  			►►► BUTTON CONFIGURATION - FILL OUT THE CORRESPONDING NUMBERS ◄◄◄   	     ║ 
			║  		   																			     ║ 
			║*/								define /*B*/uttons = 1;								   /*║
			║  		   																			     ║
			║ 		DEFAULT= 0 || TACTICAL= 1 || LEFTY= 2 || NOM4D= 3 || CHARLIE= 4			   	   	 ║
			║   GUNSLINGER= 5|| BUMPER JUMPER= 6 || BUMPER JUMPER TACTICAL= 7 || STICK & MOVE= 8     ║
			║             			        		   					 						   	 ║
			║ 			 		# if you play with FLIPPED bumpers/triggers # 	 				     ║
			║  		   																			     ║
			║ 		 DEFAULT= 9 || TACTICAL= 10 || LEFTY= 11 || NOM4D= 12 || CHARLIE= 13		     ║ 
			║ GUNSLINGER= 14|| BUMPER JUMPER= 15 || BUMPER JUMPER TACTICAL= 16 || STICK & MOVE= 17   ║
			║  		   																			     ║
			║*/								define /*S*/ticks = 0;							       /*║
			║  		   																			   	 ║
			║          	 DEFAULT= 0 || SOUTHPAW= 1 || LEGACY= 2 || LEGACY SOUTHPAW= 3 			     ║
			║																						 ║
			║*/							define c_over_PS4_controller = FALSE;					   /*║
			║						PS4 to Microsoft crossover support (swap 1,27) 				     ║
			║																						 ║
			║*/							   define Kill_Switch_Used=TRUE;					  	   /*║
			║*/							   define KILL_SWITCH=XB1_SYNC;					       	   /*║
			║				 IF YOU WANT A KILL SWITCH TO TURN SCRIPT ON/OFF PUT "TRUE"              ║ 
			║ 				FILL OUT WHICH BUTTON WILL BE THE KILL SWITCH FOR THE SCRIPT             ║
			║		    To toggle the Kill Switch: double tap the button you selected above.	     ║
			║				       Button overview: https://ibb.co/ckyTQBs							 ║
			║				Note: the original function of the button you pick as your 				 ║
			║			 kill switch will have a little delay (so activate that function			 ║
			║				with a long press of the kill switch). The double tap will 				 ║
			║				NOT trigger the original function of the button you picked.				 ║ 
			║																						 ║
			║*/								int Fire_Rate_Timer = 111; 							   /*║
			║*/							   define _blockrumble = TRUE; 						   /*║																						 ║
			║					 If auto rapid fire is selected and one of your						 ║
			║				   automatic weapons seems to have a lower fire rate					 ║
			║				    increase this value to 121, or try other values.					 ║
			║				   Rumbles are needed from the game menu, but you						 ║
			║					can still switch rumbles off with the script.					     ║
			║				      _blockrumble = TRUE; to switch off rumbles					     ║
			║																						 ║
			║*/								int Oh_my_sexy_bumper = 2;							   /*║
			║  1=Big Skub`s CROUCH Dance || 2 = Crescens` Pang! Singel Kill Shot || 3 = Drop-shooter ║
			║  						4 = Strafe-shooter || 5 = Jump-shooter							 ║
			║																						 ║
			║*/							  int in_game_menu_sens=8;					   			   /*║
			║*/							define aim_sens_corrections=1;					   	       /*║
			║						 ADS CORRECTIONS - FOLLOW THSE STEPS							 ║
			║										(1) 											 ║
			║  IN THE GAME MENU HIGHER YOUR IN-GAME-STICK SENSIVITY. RECOMMENDED: 2, 3 OR 4 CLICKS.  ║ 
			║										(2) 											 ║ 
			║			ABOVE, FILL OUT THE IN-GAME STICK SENSITIVITY YOU JUST CONFIGURED			 ║ 
			║										(3)												 ║  
			║					THAT`S IT! YOU`RE ALL SET AND GOOD TO GO! 							 ║
			║						TO TWEAK ADS CORRECTIONS ON THE FLY:							 ║ 
			║					- HOLD D-PAD DOWN + TAP SHARE / VIEW (-1)							 ║
			║					- HOLD D-PAD DOWN + TAP MENU / OPTIONS (+1)						     ║
			║		 To switch thîs off (NOT RECOMMENDED) set: aim_sens_corrections = 0 ;			 ║
			║																						 ║
			║*/								int RS_quantum=28;				   			   		   /*║
			║*/								int RS_release=30;							   		   /*║
			║						 ADS ASSIST SETTINGS IN THE GAME MENU:							 ║								 
			║			Beginners: standard/legacy / Advanced Players: standard/precision			 ║
			║ POLAR VALUES ABOVE-> Release: 30 (min 25, max 35), Quantum: 30 (reduce if screen shake)║
			║                         tinyurl.com/ads-menu-crescens									 ║							 
			║											 											 ║
			║																						 ║
			║*/								define auto_run=TRUE;						   		   /*║
			║*/								define walk_tresh= -50;				   				   /*║
			║									  auto_run:											 ║
			║ 						  Don`t want auto_run? Set to = FALSE; 							 ║																 ║
			║ 									 walk_tresh: 										 ║
			║			-50 means if stick is pressed more than 50% than auto run is activated  	 ║
			║																						 ║
			║*/								define smart_LS_L3=TRUE;							   /*║
			║*/						  define smart_LS_L3_click=PS4_R3;				 		       /*║
			║           If you use auto run, you have the option to place another function   		 ║ 
			║ under your left thumbstick. As I play with tactical button layout in the game, I placed║ 
			║melee under my left thumbstick, allowing me to melee ultra fast if I bump into an enemy)║ 
			║ 						To switch this off, set smart_LS_L3=FALSE;						 ║ 
			║				Fill out the button you use for MELEE under smart_LS_L3_click.			 ║ 
			║		  If you wish to use LS/L3 but with another function, JUMP or PRONE for example  ║ 
			║             		 fill out the corresponding button under smart_LS_L3_click           ║
			║																						 ║
			║																						 ║
			║*/								   int cancel_slide=4;		   						   /*║
			║ 			 [3 = MW / 2= COLD WAR AIM SLIDE / 1 = COLD WAR LEGACY / 4 = OFF]			 ║
			║                            Release prone to cancel slide.   								 ║
			║*/							define slidecancel_slide_delay = 80;  					   /*║
	  		║*/							define slidecancel_aim_delay   = 300;  					   /*║
			║    If cancel slide 2 (aim slide ) is active you will cancel the slide with an aim	     ║
			║	  you need to find the correct values though for your slide dela and aim delay.      ║
			║                      Created by DjangoKill and optimised by SS_Nikolai				 ║
  			║																						 ║		
			║*/							    define easy_field_equip=FALSE;						   /*║
	  		║*/								define easy_field_btn=XB1_LB;						   /*║
			║		easy_field_equip: short tap of tactical activates field equipment, 				 ║
			║    							FALSE= OFF, TRUE = ON.									 ║
			║       You can also define your right bumper / lethal grenade or any other btn to 		 ║
			║        				activate your field equipment with one tap. 					 ║
			║																						 ║
			║*/							   define sniper_mode_btn=XB1_UP;						   /*║
			║*/									int auto_crouch=TRUE;							   /*║
			║                 Modern Warfare players: change this to PS4_OPTIONS; in case			 ║
			║                 you want to use ADS + UP for ping. To activate sniper mode			 ║
			║                         you will have to HOLD ADS + TAP PS4_OPTIONS;					 ║
			║					In sniper mode, scope shot is activated by default.					 ║
			║						   Scope shot: press FIRE to auto scope.						 ║
			║					  If you want to auto crouch after a scope shot						 ║
			║					  leave auto_crouch on TRUE else set it to FALSE.					 ║
			║ 																						 ║ 
			║*/								  int AR_on_rumbles=2;								   /*║
			║*/							       int AR_STRENGTH=20;								   /*║
			║						Auto AR (rumbles detected) 1= ON / 2 = OFF 						 ║
			║					  you can set the strenght to a lower value for a	 				 ║
			║								   stronger AR value 									 ║
			║																						 ║
			║*/									define enemy_ping=1;  							   /*║
			║                              AUTO PING [0 = OFF / 1 = ON]                              ║
			║*/									 int ping_type=2; 								   /*║
			║*/								  int BTN_PING = PS4_LEFT;							   /*║
			║				   0=ping on ADS, 1=ping on fire, 2=ping on ads&fire 					 ║
			║			     Button used for ping WARNING: PING NEEDS TO BE SWITCHED				 ║
			║			     OFF FOR MODERN WARFARE OR THIS BUTTON MUST BE CHANGED TO				 ║ 
			║								    D-PAD UP (PS4_UP).									 ║
			║																						 ║
			║*/									int dynamic_RF=2;								   /*║
		  	║					dynamic RF (fire rate increases with amount of pressure				 ║
		  	║	     on the trigger. 1=ON 2 =OFF (when off, fire rate always at it fastest)  		 ║ 
			║																						 ║
			║*/							define rapid_fire_led_sync_btn=XB1_X;				   	   /*║
			║								 see below for more info							     ║
			║																					     ║
			╚════════════════════════════════════════════════════════════════════════════════════════╝
								              LEDS / RAINBOW INDICATOR 
								              (optional configuration) 
			╔════════════════════════════════════════════════════════════════════════════════════════╗ 
			║									       LEDS										     ║
			║*/							        int RF_led = Red;						   	   	   /*║
			║*/							    int Sniper_led=Emerald;			   	   			       /*║
			║     Green, Lavender, White, Yellow, SkyBlue, Neon, Lilac, Pink, Pinkish, Orange. 		 ║  
			║  																						 ║  										
			║*/					      define rainbow_flash_indicator = FALSE;				   	   /*║
			║    This flashes the led whilst POLAR AIM ASSIST is running (so when you press ADS)	 ║ 
			║                        To switch that OFF, set to FALSE; 								 ║  
			╚════════════════════════════════════════════════════════════════════════════════════════╝
											  		RECOIL VALUES 
								              (optional configuration) 
			╔════════════════════════════════════════════════════════════════════════════════════════╗ 
			║								  DEFAULT RECOIL VALUES								     ║
			║*/					  define Y_1=21, eY_1=30, r_t_1=3170, X_1= 0;					   /*║
			║*/					  define Y_2=29, eY_2=30, r_t_2=3290, X_2= 0;				  	   /*║
			║*/					  define Y_3=31, eY_3=30, r_t_3=3040, X_3= 0; 			  	 	   /*║
			╚════════════════════════════════════════════════════════════════════════════════════════╝


Oh my sexy bumper:
All options below are activated with the right bumper. The idea is to have a competitive advantage 
over your opponent. Diffirent from other fire mods, the sexy bumper lets you use the fire mod when you
need it (and not everytime you pull the trigger). So to actiavte the sexy bumper, just use the lethal grenade trigger
whilst you are aiming. Flipped bumpers / triggers is supported, but probably not ideal. 

What sexy bumpers are available? 
The sexy bumper is a nifty mod from which you will benefit greatly; I am sure you will find out for yourself, 
just give it a try. The options are explained below. 
Core players probably benefit most from (option 1) Skub`s PRONE Dance. It makes you difficult to kill when being shot at.
The sexy bumper will spam PRONE whilst you are firing back at your enemy). 
Hardcore players will love the (option 2) Pang! Single Kill Shot. The accuracy is brutal -even over great distance: is your
enemy head-glitching? haha! he did not see YOU coming...100% satisfaction guranteed. Works with automatic weapons only! 
Other options (not tested yet) (option 3) drop-shooter: this will make you drop to the floor whilst firing your wpn. 
Option 4 = Strafe-shooter: makes you difficult to target, because you will be strafing left and right. And option 5 is
Jump-shooter. This also makes you difficult to target as you will be spamming the jump button whilst you shoot. 
PRO-TIP: you can change the sexy bumper on the fly, so that you can find your preferred sexy bumper: HOLD ADS + TAP HOME.

___    _____ _     ________ _     __
 | |\|(_  | |_)| |/   |  | / \|\|(_ 
_|_| |__) | | \|_|\__ | _|_\_/| |__)

 !!!!! STEP 1 WHEN YOU START USING THE SCRIPT: ACTIVATE RECOIL AND SET UP THE RECOIL PROFILES. !!!!!

LOADOUTS ->check this url for a visual overview: tinyurl.com/ads-menu-crescens 
HINT: if you switch between any of the LOADOUTS - the previous loadout will automatically switch OFF

Hold ADS + TAP RIGHT= Rapid Fire ON (LED = RED) & Anti Recoil OFF
Hold ADS + TAP LEFT = Secondary Rapid Fire ON (LED = RED, when secondary wpn is selected) 
Hold ADS + HOLD LEFT = Secondary Rapid Fire ON + Anti Recoil Primary WPN = ON (LED = RED, when secondary wpn is selected)
Hold ADS + TAP UP = Sniper Mode + Sniper Long Shot Sens ON + Anti Recoil OFF (note: do not use the sniper sens from the game menu!!) 
Hold ADS + HOLD UP = Sniper Mode + Sniper Long Shot Sens + Secondary Rapid Fire ON + Anti Recoil OFF 
Hold ADS + TAP DOWN = Anti Recoil ON (LED = RECOIL PROFILE COLOR)
Hold ADS + HOLD DOWN = Anti Recoil OFF + SNIPER OFF + RAPID FIRE OFF + AKIMBO OFF + AUTO RAPID FIRE OFF
Hold ADS + TAP PS4_SHARE / XB1_VIEW = Akimbo ON (can only be activated if secondary RF is swicthed on (Hold ADS + Press/Hold LEFT)
Hold RS click and TAP UP to toggle AUTO AIM ON & OFF (OFF by DEFAULT)

TO ACTIVATE AUTO RAPID FIRE: 

Hold ADS + HOLD RIGHT = Auto Rapid Fire ON.
To switch it off: choose any other load out. 
For example, Auto Rapid Fire will be switched off when you select normal Rapid Fire (ADS + TAP RIGHT) or SNIPER MODE. 

HINT 1: you can also activate Anti Recoil (Hold ADS + TAP D-PAD DOWN whilst playing with Auto RF. 

If you have switched on Recoil & Auto Rapid Fire: the script will either select Rapid Fire OR Anti Recoil depending
on the weapon you are using. 
HINT 3: for Auto Rapid Fire to function: switch on vibrations in your game menu. Without rumble inputs from the game,
Auto Rapid Fire will not work. 

tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens 
tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens 
tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens tinyurl.com/ads-menu-crescens 

TO SET RECOIL VALUES:

- SELECT RECOIL PROFILE -> HOLD D-PAD DOWN + ANY OF THE 4 COLOR BTNS (CIRCLE/B | TRAINGLE/Y | ETC.)
- PRO TIP: you can also cycle through the recoil profiles by HOLD ADS + DOUBLE TAP D-PAS DOWN. The led will blink the number of the profile. 
- OPEN EDIT MENU (THIS RESETS THE RECOIL TIME VALUE TO 0) -> DOUBLE TAP DOWN AND HOLD D-PAD DOWN ON THE SECOND TAP UNTIL THE LED SWITCHES OFF
- HOLD ADS & FIRE AT A WALL -> RELEASE FIRE WHEN YOU CLIP IS EMPTY -> WHILST FIRING CORRECT THE RECOIL 
  WITH YOUR THUMBSTICKS (LIKE YOU WOULD NORMALLY DO WHEN YOU PLAY WITHOUT A SCRIPT)
- AFTER SHOOTING 2, 3 CLIPS YOU SHOULD BE ALL SET. 
- READY? CLOSE EDIT MENU -> D-PAD UP. 

FOR THE PROFILES THAT HAVE BEEN SET, THE COLOR LED WILL BECOME A SOLID COLOR WHENEVER THE PROFILE IS SELECTED

A DARK BLUE LED MEANS THAT RECOIL, RAPID FIRE & SNIPER MODE IS SWITCHED OFF.
IF THE LED REMAINS DARK BLUE EVEN AFTER SWICTHING ON ANTI RECOIL THAT MEANS THAT THE RECOIL VALUES NEED TO BE SET FOR 
THE ACTIVATED RECOIL PROFILE. 

To tweak Aim Corrections:

	- hold D-pad Down and tap View/Share (-1) 
	- hold D-pad Down and tap Menu/Options (+1).
	- to reset value to default value press Menu/Options & View/Share at the same time

To Tweak Polar Aim Assist:

	Quantum (strenght / screen shake)
	
	- hold D-pad Down and tap L2/LT (-1)
	- hold D-pad Down and tap R2/RT (+1)

	
	Release (treshhold)
	- hold D-pad Down and tap L1/LB (-1)
	- hold D-pad Down and tap R1/RB (+1)


HINT: if your led blinks with every reload this means that you have no valid or calibrated reload
	  times for the cancel reload mod. Note: primary & secondary wpn each have their own value. 

To calibrate reload times (x2-> primary & secondary wpn have seperate reload times stored): 
	- hold D-Pad Down, reload, and whilst reloading hold the RELOAD button. 
	- release the reload button at the end of the reload animation. Now you can also release the d-pad down button.
________________________________________________________________________________________

If you are using Rapid Fire for your secondary:
- Tap reload shortly to reload.
- Tap switch weapon shortly to switch between primary without RF & secondary with RF

Leds are out of Sync? 
- PRESS & HOLD RELOAD  until it rumbles. This will reset the leds. Modern Warfare players:
If you want you can change the button for resetting below. Look for "rapid_fire_led_sync_btn"
________________________________________________________________________________________

To calibrate reload times (x2-> primary & secondary wpn have seperate reload times stored): 
- hold d-Pad down, reload whilst holding the RELOAD button. 
- release the reload button at the end of the reload animation. Now you can also release the d-pad down button.

To tweak Aim Corrections:
- hold D-pad Down and tap View/Share (-1) 
- hold D-pad Down and tap Menu/Options (+1).

Your aim correction settings as well as your reload time are auto saved. Before compiling the script, configure
the script in the compliler (in Zen Studio). Go through the instructions in the user config. 
THIS SCRIPT IS WITHOUT OLED MENU 

			╔════════════════════════════════════════════════════════════════════════════════════════╗    																			     ║
			║																						 ║
			║				 dP""b8 88""Yb 888888 .dP"Y8  dP""b8 888888 88b 88 .dP"Y8 				 ║
			║				dP   `" 88__dP 88__   `Ybo." dP   `" 88__   88Yb88 `Ybo."                ║
			║				Yb      88"Yb  88""   o.`Y8b Yb      88""   88 Y88 o.`Y8b                ║
 			║				 YboodP 88  Yb 888888 8bodP'  YboodP 888888 88  Y8 8bodP'                ║
 			║				 A  S i g n a t u r e  S c r i p t  B y  C r e s c e n s           	     ║
			║ 						 																 ║
			╚════════════════════════════════════════════════════════════════════════════════════════╝		

*/

define Off= 13, Blue= 0, Red= 1, Green= 2, Lavender= 3, White= 4, Yellow= 5, SkyBlue= 6, Neon= 7, Lilac= 8, Pink= 9, Pinkish= 10, Orange= 11, Emerald= 12; 
data( /* 0 1 2 3 4 5 6 Blue Red Green Lavender White Yellow SkyBlue*/ 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 1,1,1,0, 0,1,1,0, 1,0,1,0, /* 7 8 9 10 11 12 13 Neon Lilac Pink Pinkish Orange Emerald Off*/ 3,1,0,0, 2,3,0,0, 1,3,0,0, 1,3,1,0, 0,3,1,0, 1,1,2,0, 0,0,0,0); /*----- button & sticks array by Crescens: DO NOT CHANGE!!-----*/ 
const int8 B[][]={/*buttons*/ {4,7,8,6,3,18,19,5}, {4,7,8,6,3,5,19,18}, {7,4,5,3,6,18,19,8}, {4,6,8,6,7,18,19,5}, {4,3,8,6,7,18,19,5}, {6,7,8,3,4,18,19,5}, {4,7,8,19,3,18,6,5}, {4,7,8,19,3,5,6,18}, {4,7,8,6,3,18,5,19}, {3,6,8,7,4,18,19,5}, {3,6,8,7,4,5,19,18}, {6,3,5,4,7,18,19,8}, {3,7,8,7,6,18,19,5}, {3,4,8,7,6,18,19,5}, {7,6,8,4,3,18,19,5}, {3,6,8,19,4,18,7,5}, {3,6,8,19,4,5,7,18}, {3,6,8,7,4,18,5,19} }; 
const int8 S[][]={/*sticks*/ {12,11,9,10}, {10,9,11,12}, {12,9,11,10}, {10,11,9,12} }; 
define s_D=0, s_S=1, s_L=2, s_L_S=3; 
define b_D=0, b_T=1, b_L=2, b_N=3, b_C=4, b_O=5, b_B=6, b_B_J_T=7, b_S=8; 
define f_D=9, f_T=10, f_L=11, f_N=12, f_C=13, f_O=14, f_B=15, f_B_J_T=16, f_S=17; 
int WALK, STRAFE, AIM_X, AIM_Y, FIRE, ADS, SPRINT, TAC_G, LETHAL, PRONE, JUMP, MELEE; /*-----------------------------------------------------------------------------------*/ /*variables & definitions*/ 
int release; 
int auto_aim = FALSE; 
int dance_active=FALSE; 
int pang=FALSE; 
int drop=FALSE; 
int drop_time = 1200; 
int strafe=FALSE; 
int strafe_time=700; 
int jumper=FALSE; 
int jump_time=200; 
int notify, notifier; 
int game_sens; 
int pin = 880, code; 
int ads_grenade_sens, ads_fire_sens, Sens, long_shot_sens, actual_sens; 
int Crescens_Sticky_Polar_Aim_Cor=TRUE; 
int RS_gr, running_p, _release, _quantum; 
int mn=326, mx=328; 
define RS=POLAR_RS;
int rapid_fire = FALSE; /*toggle on Hold ADS + D-pad right */ 
int Rumble_Wait_Timer = FALSE; 
int rapid_fire_timer; 
int Rumble_Timer = 0; 
int Cur_Rumble; 
int Old_Rumble; 
int auto_rf = FALSE; 
int akimbo = FALSE;
int wtime; 
int sniper=FALSE; 
int record; 
int once = 1; 
int rld_time, rld_1, rld_2; 
int b_reload; 
int smart_reload = 1; 
int wpn_holster = FALSE; 
int secondary_wpn = FALSE; 
int flasher, b_f, b_f_wait, f_clr; 
int i; 
int hue; 
int script_on=TRUE; 
int ar_sY_[5], ar_eY_[5], ar_sX_[5], ar_tm_[5]; 
int Recoil_Pr=1; 
int interval, iteration_point; 
int i_, i_count; 
int AR_V; 
int RY, RX; 
int current_x, current_y; 
int edit = FALSE; 
int no_recoil=FALSE; 
int newt; 
int sY_eY_cor, sY_eY_cor2;
int sX_cor; 
int y_ambit = 10; 
int x_ambit = 10; 
int y_input[25]; 
int x_input[25]; 
int idX,rx_avg; 
int idx,ry_avg, idx2, ry_avg2; 
int newv, newv1, newv2; 
int no_recoil_pause=TRUE; 
int pr=FALSE; 
int corr; /*functions...don`t make any changes!*/ 
function s(id,fval){set_val(id,fval);} 
function p(id){return event_press(id);}
function r(id){return event_release(id);} 
function g(id){return get_ival(id);} 
function rd(min,max){return random(min,max);} 
function pv(id,min,max,fval){return get_pvar(id,min,max,fval);} 
function s_pv(id,fval){set_pvar(id,fval);} 
function displ(v0, v1, v2, v3, v4, v5) {s(TRACE_1, v0); s(TRACE_2, v1); s(TRACE_3, v2); s(TRACE_4, v3); s(TRACE_5, v4); s(TRACE_6, v5);}
function notify_bumper(Oh_my_sexy_bumper){notify=Oh_my_sexy_bumper;} 
function btn(f__btn){if (!g(f__btn))return;s(f__btn, 0);} 
function hrt(h__btn){if (!g(h__btn))return;s(h__btn, 100);} 
function load_sens() {game_sens = in_game_menu_sens; s_pv(SPVAR_41, game_sens); s_pv(SPVAR_42, code);} 
function load_polar() {_quantum = RS_quantum; _release = RS_release ;s_pv(SPVAR_43, _quantum);s_pv(SPVAR_44, _release);} 
function s_p(f_rs, f_gr, f_rls) {set_polar(f_rs, f_gr, f_rls);} 
function notify(pos){if (pos) notify = 1;else notify = 2;} 
function s_s(s_btn, s_2){sensitivity(s_btn, NOT_USE, s_2);} 
function Led(C) {for(i = 0; i <= 3; i++){set_led(i,duint8((C*4) + i));}} 
function p_count(){i_count++;if(i_count > (ar_tm_ / 10)){i_count = (ar_tm_ / 10);return 1;}return 0;} 
function c(){i_++;if(i_ == iteration_point){i_ = 0;AR_V += interval;}return AR_V;} 
function load_rld() {rld_1 = 1200; rld_2 = 800; code = 225; s_pv(SPVAR_21, rld_2); s_pv(SPVAR_22, rld_1); s_pv(SPVAR_42, code);} 
function load_rcl() {ar_tm_[1] = r_t_1; ar_tm_[2] = r_t_2; ar_tm_[3] = r_t_3; ar_sY_[1] = Y_1; ar_sY_[2] = Y_2; ar_sY_[3] = Y_3; ar_eY_[1] = eY_1; ar_eY_[2] = eY_2; ar_eY_[3] = eY_3; ar_sX_[1] = X_1; ar_sX_[2] = X_2; ar_sX_[3] = X_3; save__();} 

init { 
	b_f=Oh_my_sexy_bumper; code = pv(SPVAR_42, 1, 2000, 880);
	l();
	if (code == pin) { load_sens(); 
	load_polar(); 
	load_rld(); 
	load_rcl(); }
	else game_sens = pv(SPVAR_41, 3, 20, game_sens); 
	rld_1 = pv(SPVAR_22, 0, 4000, 1200); 
	rld_2 = pv(SPVAR_21, 0, 4000, 1200);
	_quantum = pv(SPVAR_43, 15, 40, _quantum);
	_release = pv(SPVAR_44, 15, 50, _release); } 

main { 
if (c_over_PS4_controller){swap (1,27);} 
if (Kill_Switch_Used) { 
if (!g(ADS) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);} 
if (!g(XB1_DOWN) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);} 
if (get_brtime(KILL_SWITCH) <= 200) { 
if (!g(ADS) && p(KILL_SWITCH)) { script_on=!script_on; notify(!script_on); } } } 
displ(ar_tm_,ar_sY_,ar_eY_, ar_sX_, _quantum, MELEE); 
WALK = S[ticks][0]; 
STRAFE = S[ticks][1]; 
AIM_X = S[ticks][2]; 
AIM_Y = S[ticks][3]; 
FIRE = B[uttons][0]; 
ADS = B[uttons][1]; 
SPRINT = B[uttons][2]; 
TAC_G = B[uttons][3]; 
LETHAL = B[uttons][4]; 
PRONE = B[uttons][5]; 
JUMP = B[uttons][6]; 
MELEE = B[uttons][7]; 
if (script_on) { 
if (g(ADS)) { 
if (p(XB1_XBOX)) { Oh_my_sexy_bumper ++; b_f=Oh_my_sexy_bumper; 
if (Oh_my_sexy_bumper == 6) { Oh_my_sexy_bumper = 1; b_f = 1; } 
if (Oh_my_sexy_bumper) { notify_bumper(Oh_my_sexy_bumper); } } btn (XB1_XBOX); } 
if (Oh_my_sexy_bumper >= 1) { 
if (g(LETHAL))release = get_ptime(LETHAL); } 
if (Oh_my_sexy_bumper == 1) { 
if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) { dance_active = TRUE; } 
if (dance_active) { 
if (g(LETHAL)) s(FIRE,100); combo_run(DANCE); block(LETHAL, release + 50); } 
if (dance_active && r(LETHAL)) { dance_active=FALSE; } } 
if (Oh_my_sexy_bumper == 2) { 
if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) { pang = TRUE; } 
if (pang) { 
if (g(LETHAL)) combo_run(BANGER); block(LETHAL, release + 50); } 
if (pang && r(LETHAL)) { pang=FALSE; } } 
if (Oh_my_sexy_bumper == 3) { 
if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) { drop = TRUE; } 
if (drop) { 
if (g(LETHAL)) s(FIRE,100); drop_time -= get_rtime(); block(LETHAL, release + 50);
if (drop_time >= 0) { s(PRONE,100); } } 
if (drop && r(LETHAL)) { drop=FALSE; drop_time = 1200; } } 
if (Oh_my_sexy_bumper == 4) { 
if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) { strafe = TRUE; } 
if (strafe) { 
if (g(LETHAL)) s(FIRE,100); combo_run (STRAFER) block(LETHAL, release + 50); } 
if (strafe && r(LETHAL)) { strafe=FALSE; } } 
if (Oh_my_sexy_bumper == 5) { 
if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) { jumper = TRUE; } 
if (jumper) { 
if (g(LETHAL)) s(FIRE,100); combo_run (JUMPER) block(LETHAL, release + 50); } 
if (jumper && r(LETHAL)) { jumper=FALSE; } } 
if (b_f >0 && b_f < 9) { flasher += get_rtime(); f_clr=Off; 
if (flasher >=0 && flasher <= (b_f*400)) { b_f_wait = 200; combo_run (FLASH); } 
else if(flasher>=(b_f*400)) { b_f=0; } } 
if (b_f==0 && combo_running (FLASH)) {combo_stop (FLASH); reset_leds(); flasher=0;} current_x = g(AIM_X); current_y = g(AIM_Y); hrt(ADS);hrt(FIRE); 
if(enemy_ping) { 
if(ping_type == 0) { 
if(p(ADS)) combo_run(AUTO_PING); } 
if(ping_type == 1) { 
if(p(FIRE)) combo_run(AUTO_PING); }
if(ping_type == 2) { 
if(g(ADS) && p(FIRE)) combo_run(AUTO_PING); } } 
if(g(XB1_DOWN) && !g(ADS) && !edit) {
if(r(XB1_X) && get_ptime (XB1_X)<500) {Recoil_Pr=1; l();} 
if(r(XB1_A)) {Recoil_Pr=2; l();} 
if(r(XB1_B)) {Recoil_Pr=3; l();} 
if(r(XB1_Y)) {Recoil_Pr=4; l();} btn(XB1_B);btn (XB1_A);btn (XB1_Y); btn (XB1_LB); btn (XB1_RB); btn (XB1_RS); } 
if (get_brtime(XB1_DOWN) <= 200 && p(XB1_DOWN)){pr=TRUE; notify (pr);} 
if (r(XB1_DOWN)&&pr){pr=FALSE;} 
if (!g (XB1_X) && !record){ 
if (g (PS4_DOWN)&&pr) { 
if (get_ptime (PS4_DOWN) > 2500 && once < 1 && !g (XB1_X)) {edit = 1; once--; newt =1; newv=1; ar_tm_[Recoil_Pr] = 0; notify (newt); b_f=4;} } } 
if (edit) { 
if (g (FIRE) && g(ADS) && newt) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + get_rtime(); } 
if (r (FIRE)&& newt) { save__(); b_f=2; newt =0; notify (!newt); newv=1; newv1 = ar_tm_[Recoil_Pr]/2; newv2 = ar_tm_[Recoil_Pr]/2; } 
if (g (XB1_UP)) { edit=0; newv=0; once=1; }
if (newv==1) { 
if (r(FIRE)) { save__(); b_f=2; { 
if (idx >0 || idx2 > 0 || idX > 0 ) { idx = 0; ry_avg = 0; idx2 = 0; ry_avg2 = 0; idX = 0; rx_avg = 0;} } } 
if (r (FIRE)&& newv) newv1=newv2; 
if(g(ADS) && g(FIRE)) { newv1 = newv1 - get_rtime(); 
if (newv1 > 0) { 
if(abs(current_y) >= y_ambit) { y_input[idx] = current_y; idx += 1; 
if(idx == 25) { 
for(idx = 0;idx <= 24;idx++) { ry_avg += y_input[idx]; } ry_avg /= 25; sY_eY_cor += ry_avg / 10; ry_avg = 0; idx = 0; } }/*--end: if (newv1 > 0)*/ } 
else if(abs(current_y) >= y_ambit) { y_input[idx2] = current_y; idx2 += 1; 
if(idx2 == 25) { 
for(idx2 = 0;idx2 <= 24;idx2++) { ry_avg2 += y_input[idx2]; } ry_avg2 /= 25; sY_eY_cor2 += ry_avg2 / 10; ry_avg2 = 0; idx2 = 0; } } 
if(abs(current_x) >= x_ambit) { x_input[idX] = current_x; idX += 1; 
if(idX == 25) { 
for(idX = 0;idX <= 24;idX++) { rx_avg += x_input[idX]; } rx_avg /= 25; sX_cor += rx_avg / 10; rx_avg = 0; idX = 0; } } ar_sX_[Recoil_Pr]= sX_cor; ar_sY_[Recoil_Pr] = sY_eY_cor; ar_eY_[Recoil_Pr] = sY_eY_cor2; } } if (g (XB1_DOWN)){ if(g(XB1_X)){ if (p(XB1_RB) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 1; save__(); b_f=1;} if (p(XB1_LB) && Recoil_Pr) {ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 1; save__(); b_f=1;} if (p(XB1_LT) && Recoil_Pr){ ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 10; save__(); b_f=2;} if (p(XB1_RT) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 10; save__(); b_f=2;} } if(g(XB1_A)){ if (p(XB1_RB) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 1; save__(); b_f=1;} if (p(XB1_LB) && Recoil_Pr) {ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 1; save__(); b_f=1;} if (p(XB1_LT) && Recoil_Pr){ ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 10; save__(); b_f=2;} if (p(XB1_RT) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 10; save__(); b_f=2;} } if(g(XB1_B)){ if (p(XB1_RB) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 1; save__(); b_f=1;} if (p(XB1_LB) && Recoil_Pr) {ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 1; save__(); b_f=1;} if (p(XB1_LT) && Recoil_Pr){ ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 10; save__(); b_f=2;} if (p(XB1_RT) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 10; save__(); b_f=2;} } if(g(XB1_Y)){ if (p(XB1_RB) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 100; save__(); b_f=1;} if (p(XB1_LB) && Recoil_Pr) {ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 100; save__(); b_f=1;} if (p(XB1_LT) && Recoil_Pr){ ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 1000; save__(); b_f=2;} if (p(XB1_RT) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 1000; save__(); b_f=2;} if (ar_tm_[Recoil_Pr] <=0) ar_tm_[Recoil_Pr] = 0; } btn (XB1_B); btn(XB1_Y); btn (XB1_XBOX); btn (XB1_X); btn (XB1_A);btn (XB1_RT);btn (XB1_RB); btn (XB1_LT);btn (XB1_LB); } } if(Recoil_Pr == 1) {ar_sY_[0] = ar_sY_[1]; ar_eY_[0] = ar_eY_[1]; ar_sX_[0] = ar_sX_[1]; ar_tm_[0] = ar_tm_[1]; f_clr = SkyBlue;} if(Recoil_Pr == 2) {ar_sY_[0] = ar_sY_[2]; ar_eY_[0] = ar_eY_[2]; ar_sX_[0] = ar_sX_[2]; ar_tm_[0] = ar_tm_[2]; f_clr = Orange;} if(Recoil_Pr == 3) {ar_sY_[0] = ar_sY_[3]; ar_eY_[0] = ar_eY_[3]; ar_sX_[0] = ar_sX_[3]; ar_tm_[0] = ar_tm_[3]; f_clr = Pink;} if(Recoil_Pr == 4) {ar_sY_[0] = ar_sY_[4]; ar_eY_[0] = ar_eY_[4]; ar_sX_[0] = ar_sX_[4]; ar_tm_[0] = ar_tm_[4]; f_clr = Yellow;} if (no_recoil && !secondary_wpn && !no_recoil_pause) { if(ar_sY_ < ar_eY_) interval = 1; else interval = -1; iteration_point = (ar_tm_ / 10) / (abs(ar_sY_ - ar_eY_)); if(!get_lval(FIRE)) { AR_V = ar_sY_; i_count = 0; i_ = 0; } 
if(g(FIRE)) {
if (AR_on_rumbles == 2){ AntiRecoil(AIM_X, ar_sX_); 
if(!p_count()) AR_V = c(); 
else AR_V = (ar_eY_); AntiRecoil(AIM_Y, AR_V) } 
else{ AR_V = get_rumble_evil_ar(); AntiRecoil(AIM_Y, AR_V) } } } 
if (smart_LS_L3) { 
if (g(XB1_LS)) { s(smart_LS_L3_click, 100); } } 
if ((easy_field_equip && !g(LETHAL) && !g(FIRE)) || (easy_field_equip && !g(TAC_G) && !g(FIRE))) { 
if (g(easy_field_btn)) block (easy_field_btn,150); 
if(r(easy_field_btn)) { 
if (get_ptime(easy_field_btn) <= 150) combo_run (FIELD); block (easy_field_btn,30);} } 
if (cancel_slide>0 && cancel_slide<4 ) { 
if ((g(PS4_LY) < -60) || (g(PS4_LY) > 60) || (g(PS4_LX) < -60) || (g(PS4_LX) > 60)) { 
if (r(PRONE)) {
if (cancel_slide == 1) { combo_run(CANCEL_SLIDE); } 
if (cancel_slide == 2) { combo_run(CANCEL_SLIDE_2); } 
if (cancel_slide == 3) { combo_run(CANCEL_SLIDE_MW); } } } 
else if (cancel_slide==4) 
if (g(ADS)) { combo_run(CANCEL_SLIDE_2); } } /*if (g(XB1_PL1) ^^ g(XB1_PL2)) {combo_run(DROP_SHOT); btn (XB1_PL1);}*/ /*aim corrections*/ 
if (aim_sens_corrections) { ads_grenade_sens = 100 - (game_sens); ads_fire_sens = 96 - (game_sens); long_shot_sens=90-(game_sens); actual_sens = 100; 
if (!g(ADS) && !g(FIRE) && !g(LETHAL) && !g(TAC_G)) { Sens = actual_sens; } 
else if(g(ADS) && !g(FIRE) ) { 
if (sniper && !secondary_wpn) Sens = long_shot_sens; 
else Sens=ads_grenade_sens; } 
else if (!g(ADS) && g(FIRE)) { Sens = actual_sens; } 
else if (g(ADS) && g(FIRE)) { Sens = ads_fire_sens; } 
else if (g(TAC_G) || g(LETHAL)) { Sens = ads_grenade_sens; } 
if (corr > _release)/*cut_off_polar*/ { 
if (Sens > 100) Sens = 100; s_s(AIM_X, Sens); s_s(AIM_Y, Sens); running_p=TRUE; } 
if (g(XB1_DOWN)) { 
if (p(XB1_VIEW)) { game_sens--; notify(1); s_pv(SPVAR_41, game_sens); } 
if (p(XB1_MENU)) { game_sens++; notify(1); s_pv(SPVAR_41, game_sens); } btn(XB1_VIEW); btn(XB1_MENU); } 
if (g(XB1_VIEW) && g(XB1_MENU)) { game_sens=in_game_menu_sens; notify(3); s_pv(SPVAR_41, game_sens); btn(XB1_VIEW); btn(XB1_MENU); } } corr = (isqrt(abs(g(AIM_X)) * abs(g(AIM_X)) + abs(g(AIM_Y)) * abs(g(AIM_Y)))) 
if (Crescens_Sticky_Polar_Aim_Cor) { 
if (g(ADS) || (g(FIRE))) { 
if (corr <= _release) { running_p = TRUE; RS_gr = (RS_gr + _quantum) % 360; s_p(RS, RS_gr, _release * rd(mn, mx)); } 
else running_p = FALSE; } }/*end Polar AA*/ 
if (g(XB1_DOWN)) { 
if (p(XB1_LT)) { _quantum --; notify(1); s_pv(SPVAR_43, _quantum); } 
if (p(XB1_RT)) { _quantum ++; notify(1); s_pv(SPVAR_43, _quantum); } 
if (p(XB1_LB)) { _release --; notify(1); s_pv(SPVAR_44, _release); } 
if (p(XB1_RB)) { _release ++; notify(1); s_pv(SPVAR_44, _release); } btn(XB1_LT); btn(XB1_LB); btn(XB1_RT); btn(XB1_RB); } /*auto run*/ 
if (auto_run) { 
if (!g(ADS) && g(WALK) < (walk_tresh)) { combo_run(EASY_RUN); } } 
if(sniper && !secondary_wpn) {/*credit:Legitclouds*/ 
if(g(ADS)) s(SPRINT,100); 
if(g(WALK) <-90 && g(ADS) && get_ptime(ADS) > 200) combo_stop(CH); 
if(p(ADS)) combo_run(CH); 
if(g(ADS) && get_lval(SPRINT)) s(SPRINT,0); 
if(g(FIRE) && !g(ADS))/*scope shot added by Crescens*/ { s(SPRINT,100); s(ADS,100); } 
if(auto_crouch) 
if (r(FIRE)) { combo_run(CROUCH); } }
else if (auto_aim){ 
if(g(FIRE) && !g(ADS)){s(ADS,100);}} 
if (once < 1 && r(XB1_LEFT)) { once = 1; } 
if (once < 1 && r (XB1_UP)) { once = 1; } /*menu ads*/ 
if (g(ADS)) { 
if (p(XB1_RIGHT)) { rapid_fire = TRUE; secondary_wpn = FALSE; wpn_holster = FALSE; akimbo = FALSE; sniper = FALSE; notify(rapid_fire); no_recoil_pause=TRUE; auto_rf = FALSE; } 
if (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) > 800 && once == 1) { rapid_fire = FALSE; auto_rf = TRUE; once = once - 1; notify(auto_rf); } 
if (p(PS4_LEFT)) { secondary_wpn = FALSE; akimbo = FALSE; rapid_fire = TRUE; wpn_holster = TRUE; sniper = FALSE; notify(wpn_holster); no_recoil_pause=FALSE;no_recoil=FALSE; no_recoil_pause=TRUE; auto_rf = FALSE; } 
if (g(PS4_LEFT)&& get_ptime(PS4_LEFT) > 800 && once == 1) { no_recoil=TRUE; no_recoil_pause=FALSE; once = once - 1; notify(no_recoil); } 
if ((wpn_holster || auto_rf) && g(PS4_SHARE)) { akimbo = TRUE; notify (akimbo); } 
if (p(PS4_DOWN)) { notify_bumper(Recoil_Pr); no_recoil=TRUE; no_recoil_pause=FALSE; secondary_wpn = FALSE; rapid_fire = FALSE; wpn_holster = FALSE; akimbo = FALSE; sniper = FALSE; b_f=Recoil_Pr; } 
if (get_brtime(XB1_DOWN) <= 500 && p(XB1_DOWN)) { Recoil_Pr = Recoil_Pr + 1; 
if (Recoil_Pr == 5) { Recoil_Pr = 1; } if (Recoil_Pr) { notify_bumper(Recoil_Pr); b_f=Recoil_Pr; } } 
if (g(PS4_DOWN) && get_ptime(PS4_DOWN) > 800 && once == 1) { no_recoil = FALSE; once = once - 1; auto_rf=FALSE; notify(no_recoil); no_recoil_pause=TRUE; } 
if (p(sniper_mode_btn)) { secondary_wpn = FALSE; rapid_fire = FALSE; wpn_holster = FALSE; akimbo = FALSE; sniper = TRUE; notify(sniper); no_recoil_pause=TRUE; auto_rf = FALSE; } 
if (g(sniper_mode_btn) && get_ptime(sniper_mode_btn) > 800 && once == 1) { rapid_fire = TRUE; wpn_holster = TRUE; once = once - 1; notify(wpn_holster); }
btn (XB1_LEFT); btn (XB1_RIGHT); btn (sniper_mode_btn); btn (XB1_DOWN); } 
if (!g(ADS) && g(XB1_DOWN)) { once = once - 1; } 
if (r(XB1_DOWN) && once < 1) { once = 1; } 
if (r(XB1_LEFT) && once < 1) { once = 1; } 
if (r(XB1_RIGHT) && once < 1) { once = 1; } 
if (r(XB1_UP) && once < 1) { once = 1; } 
if (g(XB1_RS) && p(XB1_UP)) { auto_aim = !auto_aim; notify (auto_aim); } /*record*/ 
if (g(XB1_DOWN) && g(XB1_X) && get_ptime(XB1_X) > 500 && !record) { record = TRUE; notify(record); } 
if (record) { 
if (secondary_wpn) { rld_2 = get_ptime(XB1_X); 
if (r(XB1_X)) { record = FALSE; s_pv(SPVAR_22, rld_2); notify(record); } } 
if (!secondary_wpn) rld_1 = get_ptime(XB1_X); 
if (r(XB1_X)) { record = FALSE; s_pv(SPVAR_21, rld_1); notify(record); } } /*secondary_wpn and RF*/ 
if (secondary_wpn) {rld_time = rld_2} 
else {rld_time = rld_1;} 
if (r(XB1_X) && get_ptime(XB1_X) < 300) b_reload = rld_time; 
if (smart_reload && b_reload) { b_reload -= get_rtime(); 
if (b_reload < 0) b_reload = 0; 
if (p(FIRE) || p(ADS)) combo_run(CANCEL_RLD); } 
if (r(XB1_Y) && get_ptime(XB1_Y) < 300 && wpn_holster) { secondary_wpn = ! secondary_wpn; notify(!secondary_wpn); 
if (secondary_wpn){no_recoil_pause=TRUE} 
else no_recoil_pause=FALSE; } 
if (!g(ADS) && g(rapid_fire_led_sync_btn) && get_ptime(rapid_fire_led_sync_btn) > 300 && once == 1 && wpn_holster) { secondary_wpn = ! secondary_wpn; notify(!secondary_wpn); once = once - 1; 
if (secondary_wpn){no_recoil_pause=TRUE} 
else no_recoil_pause=FALSE; } 
if (r(rapid_fire_led_sync_btn) && once < 1) once = 1; 
if (rapid_fire) { 
if (dynamic_RF==1) wtime = 125 - (g(FIRE)); 
else wtime = 25 ;{ 
if ( secondary_wpn && wpn_holster || ! secondary_wpn && !wpn_holster) {
if (get_val(FIRE) && rapid_fire) { 
if (akimbo) { combo_run(AKIMBO); } 
else { combo_run(RAPID_FIRE); } } } } } /*fix for Rapid fire whilst sprint (credits A64)*/ 
if ((combo_running(RAPID_FIRE) || combo_running (AKIMBO)) && ((g(WALK)) < -85)) { s(WALK, -85); s(STRAFE, 0); }
if (auto_rf) { 
if(get_val(FIRE)) {
if(get_rumble (RUMBLE_A) > 0 && !Rumble_Wait_Timer) { Rumble_Wait_Timer = TRUE; } 
if(Rumble_Wait_Timer) { Rumble_Timer += get_rtime(); 
if(get_rumble (RUMBLE_A) > 0) Cur_Rumble = get_rumble (RUMBLE_A)*255/100; 
if(Cur_Rumble > Old_Rumble) { Old_Rumble = Cur_Rumble; Rumble_Timer = 0; } 
else if(Cur_Rumble < Old_Rumble) Old_Rumble = Cur_Rumble; 
if(Rumble_Timer >= Fire_Rate_Timer) rapid_fire_timer = TRUE; } } 
if(event_release(FIRE)){ rapid_fire_timer=FALSE; combo_stop(RAPID_FIRE); Rumble_Timer = 0; Rumble_Wait_Timer = FALSE; Old_Rumble = 0; no_recoil_pause=FALSE; } 
if (rapid_fire_timer) { 
if (get_val(FIRE)) { 
if (akimbo) { combo_run(AKIMBO); } 
else { combo_run(RAPID_FIRE); } } 
if (dynamic_RF==1) wtime = 125 - (g(FIRE)); 
else wtime = 25 ; } } }/*script_on*/ 
if (!script_on || edit) Led (Off); 
else if (!no_recoil_pause && no_recoil && g(FIRE) && !rapid_fire_timer && ar_tm_ > 0){b_f=1;} 
else if (wpn_holster && secondary_wpn || !wpn_holster && rapid_fire && !secondary_wpn || rapid_fire_timer && g(FIRE)) Led(RF_led); 
else if (g(ADS) && rainbow_flash_indicator && running_p && !g(FIRE)) { hue++; 
if (hue == 360) hue = 0; set_hsb(hue, 100, 100) } 
else if (sniper && !secondary_wpn) Led (Sniper_led); 
else if (no_recoil_pause==FALSE && no_recoil && ar_tm_ > 0){Led (f_clr);} 
else Led(Blue); if(notify) { notifier += get_rtime(); 
if(notifier < 150) set_rumble(1,75); 
else if(notifier < 400) reset_rumble(); 
else { notify -= 1; notifier = 0; } } 
if(_blockrumble) {
if (g(RUMBLE_A)) s(RUMBLE_A, 0); 
if (g(RUMBLE_B)) s(RUMBLE_B, 0); 
if (g(RUMBLE_LT)) s(RUMBLE_LT, 0); 
if (g(RUMBLE_RT)) s(RUMBLE_RT, 0);} }/*end of main*/ 
combo DANCE { s(PRONE, 100); wait(30); wait(60); s(PRONE, 0); wait(30); wait(60); s(XB1_UP, 100); wait(30); wait(60); s(XB1_UP, 0); wait(30); wait(60); } 
combo BANGER { s(FIRE, 100); wait(40); s(FIRE, 0); wait(150); } 
combo STRAFER { set_val(STRAFE,-100); wait(strafe_time); set_val(STRAFE, 100); wait(strafe_time); } 
combo JUMPER { set_val(JUMP,100); wait(jump_time); set_val(JUMP, 0); wait(jump_time); } 
combo EASY_RUN { s(SPRINT, 100); wait(30); wait(100); } 
combo RAPID_FIRE { s(FIRE, 100); wait(wtime); s(FIRE, 0); wait(wtime); } 
combo AKIMBO { s(FIRE, 100); s(ADS, 100); wait(wtime); s(FIRE, 0); s(ADS, 0); wait(wtime); } 
combo FIELD { s(TAC_G, 100); s(LETHAL, 100); wait(150); } 
combo AUTO_PING { s(BTN_PING,100); wait(20); s(BTN_PING,0); wait(20); s(BTN_PING,100); wait(20); s(BTN_PING,0); } 
combo CANCEL_SLIDE_MW { s(PRONE, 100); wait(120); s(PRONE, 0); wait(60); s(PRONE, 100); wait(50); s(PRONE, 100); s(JUMP, 100); wait(60); s(PRONE, 0); s(JUMP, 100); wait(10); s(JUMP, 0); } 
combo CROUCH { s(PRONE,100); wait(150); } 
combo CANCEL_SLIDE { s(PRONE, 100); wait(slidecancel_slide_delay); s(PRONE, 0); wait(20); s(SPRINT, 0); s(ADS, 100); wait(10); s(ADS, 0); s(PRONE, 100); s(SPRINT, 100); wait(20); s(PRONE, 0); s(SPRINT, 0); wait(20); } 
combo CANCEL_SLIDE_2 { s(PRONE, 100); wait(slidecancel_slide_delay); s(PRONE, 0); wait(20); s(SPRINT, 0); s(ADS, 100); wait(10); s(ADS, 0); s(PRONE, 100); s(SPRINT, 100); wait(20); s(PRONE, 0); s(SPRINT, 0); wait(20); s(ADS, 100); wait(slidecancel_aim_delay); s(ADS, 0); wait(20); } combo CANCEL_RLD { s(XB1_Y, 100); wait(30); wait(20); s(XB1_Y, 100); wait(30); wait(20); b_reload = FALSE; } 
combo CH { s(SPRINT,0); wait(60); s(SPRINT,100); wait(110); s(SPRINT,0); wait(110); } 
combo FLASH{ Led (f_clr); wait (b_f_wait); Led (Off); wait (b_f_wait); } 
function l (){ ar_sY_[1] = pv(PVAR_1, 0,100, 20); ar_eY_[1] = pv(PVAR_2,-100,100, 0); ar_tm_[1] = pv(PVAR_3, -30000,30000,5000); ar_sX_[1] = pv(PVAR_4,-100,100, 0); ar_sY_[2] = pv(PVAR_5, 0,100, 20); ar_eY_[2] = pv(PVAR_6,-100,100, 0); ar_tm_[2] = pv(PVAR_7, -30000,30000,5000); ar_sX_[2] = pv(PVAR_8,-100,100, 0); ar_sY_[3] = pv(PVAR_9, 0,100, 20); ar_eY_[3] = pv(PVAR_10,-100,100, 0); ar_tm_[3] = pv(PVAR_11, -30000,30000,5000); ar_sX_[3] = pv(PVAR_12,-100,100, 0); ar_sY_[4] = pv(PVAR_13, 0,100, 20); ar_eY_[4] = pv(PVAR_14,-100,100, 0); ar_tm_[4] = pv(PVAR_15, -30000,30000,5000); ar_sX_[4] = pv(PVAR_16,-100,100, 0); 
notify_bumper(Recoil_Pr); b_f=(Recoil_Pr); } 
function save__ (){ 
s_pv(PVAR_1, ar_sY_[1]); 
s_pv(PVAR_2, ar_eY_[1]); 
s_pv(PVAR_3, ar_tm_[1]); 
s_pv(PVAR_4, ar_sX_[1]); 
s_pv(PVAR_5, ar_sY_[2]); 
s_pv(PVAR_6, ar_eY_[2]); 
s_pv(PVAR_7, ar_tm_[2]); 
s_pv(PVAR_8, ar_sX_[2]);
s_pv(PVAR_9, ar_sY_[3]);
s_pv(PVAR_10, ar_eY_[3]);
s_pv(PVAR_11, ar_tm_[3]);
s_pv(PVAR_12, ar_sX_[3]);
s_pv(PVAR_13, ar_sY_[4]); 
s_pv(PVAR_14, ar_eY_[4]); 
s_pv(PVAR_15, ar_tm_[4]); 
s_pv(PVAR_16, ar_sX_[4]); 
notify (1); } 
int _ret; 
function get_rumble_evil_ar() { _ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B)); if (_ret > 10 && _ret < 90) { return (_ret - AR_STRENGTH); } return 0; } 
function AntiRecoil (axis, recoil){ 
RY = AIM_Y; RX = AIM_X; 
if (g(FIRE) && (isqrt(RX*RX + RY*RY)) <= abs(recoil)) { 
if(abs(RY) <= abs(recoil)) { s(axis,(recoil * (100 - abs(g(axis)))) / 100 + g(axis)); } } }