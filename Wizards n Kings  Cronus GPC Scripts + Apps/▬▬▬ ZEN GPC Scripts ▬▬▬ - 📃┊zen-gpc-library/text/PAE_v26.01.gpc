/* 					
		  	
		  	   C O D  P A E  ©  C R E S C E N S  2 0 1 5 - 2 0 2 1
		  	    			 V E R S I O N  2 6 . 0 1                                                                                                                                                      
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝                                                               

				   _____      _ _          __   _____        _         
				  / ____|    | | |        / _| |  __ \      | |        
				 | |     __ _| | |   ___ | |_  | |  | |_   _| |_ _   _ 
				 | |    / _` | | |  / _ \|  _| | |  | | | | | __| | | |
				 | |___| (_| | | | | (_) | |   | |__| | |_| | |_| |_| |
				  \_____\__,_|_|_|  \___/|_|   |_____/ \__,_|\__|\__, |
				      |  _ \| |          | |     / __ \           __/ |
				      | |_) | | __ _  ___| | __ | |  | |_ __  ___|___/ 
				      |  _ <| |/ _` |/ __| |/ / | |  | | '_ \/ __|     
				      | |_) | | (_| | (__|   <  | |__| | |_) \__ \     
				      |____/|_|\__,_|\___|_|\_\  \____/| .__/|___/     
		 __   ___  __   ___  ___  __  ___              | |  ___  __    ___    __                 
		|__) |__  |__) |__  |__  /  `  |   /\  |  |\/| |_| |__  |  \ |  |  | /  \ |\ |       
	 	|    |___ |  \ |    |___ \__,  |  /~~\ |  |  |     |___ |__/ |  |  | \__/ | \|   
	                            
	 		A  M O D E R N  W A R F A R E  C R O S S  O V E R  S C R I P T  B Y   			
			  _______  ______ _______ _______ _______ _______ __   _ _______
			  |       |_____/ |______ |______ |       |______ | \  | |______
			  |_____  |    \_ |______ ______| |_____  |______ |  \_| ______|   
			 
	                   	                                                                     
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
								   
								   P O L A R   A I M 
								 O P T I M I S E D  B Y 
								╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗   
								║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗   
								╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝  
						   8 / 10  U S E R S  C O N F I R M  : 
		    *  B E S T  A I M  A S S I S T  O N  C O D  B O  C O L D  W A R  *
		 S O U R C E :  U S E R  P O L L  Z e n  -  S c r i p t s  &  T r i c k s  
	 	 T H E  # 1  I N D E P E N D E N T  Z E N  D I S C O R D  S E R V E R  B Y 
	 		 					T H E  A L P H A  T E A M  
	 		 					
	 		 					
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
							__ _             _                                       
						   / _| |__ ___ __ _| |___ ______							 
						  |  _| / _` \ V  V / / -_|_-<_-<                           
					      |_| |_\__,_|\_/\_/|_\___/__/__/                           
						     c o m p i l e s   w i t h                               
							  ( 0 )  w a r n i n g s       
				
   						
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
					
						   W H A T  M Y  U S E R S  S A Y : 
					 
					"....your code is clean and well written ....
					....not like the other copy paste kiddos like 
					   Taylordrift21 (or i can say nutorius)..."
					 				kekkerx
	
					"...your script by far is the best I’ve used."
									  Tats
	
				 "Also ich fange an, dein Script zu lieben!" :wink:
									Newcomer
	
				"I just tested your new easy recoil setup on Cold War 
			and holy sheeeeesh dude. You can get almost a laser beam with it"
								   𝓢𝓢_𝓝𝓲𝓴𝓸𝓵𝓪𝓲
	
			"You truly have the best script out there bro, I’ve been using 
				many scripts that are scams and yours is truly genuine."
									   jwff
	
			"Gotta say... that is one of the strongest Aim Assist ive seen 
						in a script (with default settings)"
									   Langy
	
			"Just donated another 20 bro. Only downloaded the script last 
					night, blown my mind since.. great work!"
									   hazzy
	
					    "Crescens your script is a lazer beam!"
									  TexasElite
									  
									    #1 
					    COD PAE was downloaded by over 5 million 
						   players around the globe since BO2. 
								  
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝

     _              ___
 ___| |_ ___ ___   |_  |
|_ -|  _| -_| . |   _| |_
|___|_| |___|  _|  |_____|
USER CONFIG |_| IN SCRIPT
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║  			►►► BUTTON CONFIGURATION - FILL OUT THE CORRESPONDING NUMBERS ◄◄◄   	     ║ 
║  		   																			     ║ 
║*/								define /*B*/uttons = 1;								   /*║
║  		   																			     ║
║ 		DEFAULT= 0 || TACTICAL= 1 || LEFTY= 2 || NOM4D= 3 || CHARLIE= 4			   	   	 ║
║   GUNSLINGER= 5|| BUMPER JUMPER= 6 || BUMPER JUMPER TACTICAL= 7 || STICK & MOVE= 8     ║
║             			        		   					 						   	 ║
║ 			 		# if you play with FLIPPED bumpers/triggers # 	 				     ║
║  		   																			     ║
║ 		 DEFAULT= 9 || TACTICAL= 10 || LEFTY= 11 || NOM4D= 12 || CHARLIE= 13		     ║ 
║ GUNSLINGER= 14|| BUMPER JUMPER= 15 || BUMPER JUMPER TACTICAL= 16 || STICK & MOVE= 17   ║
║  		   																			     ║
║*/								define /*S*/ticks = 0;							       /*║
║  		   																			   	 ║
║          	 DEFAULT= 0 || SOUTHPAW= 1 || LEGACY= 2 || LEGACY SOUTHPAW= 3 			     ║
║  		   																			   	 ║
║*/								   define invert= 1;							       /*║
║  		   If you play with inverted Y-axis, change this value to - 1				   	 ║
║  		   																			   	 ║
║*/						define c_over_PS4_controller = FALSE;						   /*║
║					PS4 to Microsoft crossover support (swap 1,27) 					     ║
║																						 ║
║*/							   define Kill_Switch_Used=FALSE;					  	   /*║
║*/							   define KILL_SWITCH=XB1_SYNC;					       	   /*║
║				 IF YOU WANT A KILL SWITCH TO TURN SCRIPT ON/OFF PUT "TRUE"              ║ 
║ 				FILL OUT WHICH BUTTON WILL BE THE KILL SWITCH FOR THE SCRIPT             ║
║		    To toggle the Kill Switch: double tap the button you selected above.	     ║
║				       Button overview: https://ibb.co/ckyTQBs							 ║
║				Note: the original function of the button you pick as your 				 ║
║			 kill WPN_1 will have a little delay (so activate that function			 	 ║
║				with a long press of the kill WPN_1). The double tap will 				 ║
║				NOT trigger the original function of the button you picked.				 ║
║																						 ║
║*/							int Oh_my_sexy_bumper = 6;								   /*║
║  1=Big Skub`s CROUCH Dance || 2 = Crescens` Pang! Singel Kill Shot || 3 = Drop-shooter ║
║  				4 = Strafe-shooter || 5 = Jump-shooter || 6 = Burst_shooter				 ║
║																						 ║
║*/								   int cancel_slide=2;		   						   /*║
║ 			 			[3 = MW / 1 = COLD WAR LEGACY / 2 = OFF]						 ║
║                            Release prone to cancel slide.   							 ║
║ 							*/define RF_led_sync_btn=XB1_X;							   /*║ 	
╚════════════════════════════════════════════════════════════════════════════════════════╝
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/								define auto_crouch=FALSE;								   /*║
║*/                            int quick_scope_time = 370;							   /*║
║					In sniper mode, scope shot is activated by default.					 ║
║						   Scope shot: press FIRE to auto scope.						 ║
║				If you want to auto crouch (after a normal ADS scope shot)				 ║
║					 set auto_crouch on TRUE or else leave it to FALSE.					 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/					 	 int sticky_tripple_or_polar_aa=3;							   /*║
║			3= MY POLAR ASSIST || 2 = TRIPPLE STICKY || 1 = STICKY CLASSIC               ║
║																						 ║
║*/								int RS_quantum=28;				   			   		   /*║
║*/								int RS_release=30;							   		   /*║
║ 							    POLAR VALUES ABOVE										 ║
║		Release: 30 (min 18, max 38), Quantum: 30 (reduce if screen shake)				 ║
║                      			tinyurl.com/ads-menu									 ║
║																						 ║
║*/								     int _v=22;								   		   /*║
║				STICKY AIM ASSIST ONLY: screen shake? lower this value.					 ║
║																						 ║
║								TRIPPLE STICKY VALUES:									 ║
║									 	 ADS											 ║
║*/								 int aim_val_1 = 22;								   /*║ 
║*/								 int wait_val_1 = 20; 								   /*║
║								     ADS & FIRE									   		 ║
║*/								 int wait_val_2 = 25; 								   /*║
║*/								 int aim_val_2 = 24; 								   /*║
║								        FIRE											 ║
║*/							     int wait_val_3 = 15;                                  /*║
║*/						         int aim_val_3 = 28; 								   /*║
╚════════════════════════════════════════════════════════════════════════════════════════╝
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/								  int AR_on_rumbles=2;								   /*║
║*/							       int AR_STRENGTH=54;								   /*║								  													     ║
║						Auto AR (rumbles detected) 1= ON / 2 = OFF 						 ║
║					If your weapon moves up set a lower value. If your					 ║ 
║							wpn moves down set a higher value. 							 ║
║					 The auto AR is an extract from Sweet_Evil`s script.				 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
╔════════════════════════════════════════════════════════════════════════════════════════╗ 											 ║
║																						 ║
║*/									int dynamic_RF=2;								   /*║
║					dynamic RF (fire rate increases with amount of pressure				 ║
║	     on the trigger. 1=ON 2 =OFF (when off, fire rate always at it fastest)  		 ║ 
║																						 ║
║*/								int Fire_Rate_Timer = 111; 							   /*║
║			 If auto SWAP (= auto rapid fire) is selected and one of your				 ║
║				   automatic weapons seems to have a lower fire rate					 ║
║				    increase this value to 121, or try other values.					 ║
║				   		  Rumbles are needed from the game menu.	     				 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║								  DEFAULT RECOIL VALUES								     ║
║ 							     (optional configuration) 								 ║
║*/					  define Y_1=21, eY_1=30, r_t_1=3170, X_1= 0;					   /*║
║*/					  define Y_2=29, eY_2=30, r_t_2=3290, X_2= 0;				  	   /*║
║*/					  define Y_3=31, eY_3=30, r_t_3=3040, X_3= 0; 			  	 	   /*║
║*/					  define Y_4=25, eY_4=30, r_t_4=3040, X_4= 0; 			  	 	   /*║
╚════════════════════════════════════════════════════════════════════════════════════════╝
     _              ___
 ___| |_ ___ ___   |_  |
|_ -|  _| -_| . |  |  _|
|___|_| |___|  _|  |___|
USER CONFIG |_| PART 2
*/
int in_game_menu_sens=14; //PLEASE READ "AIM CORRECTIONS" BELOW ABOUT THIS VALUE
//------------------ -- - --- -   ---- -- -- --    ----  --- -   ---- -- -- --     ---- 
int aim_sens_corrections=1; // [0 = OFF / 1 = ON] THE UTLITMATE AIM ASSIST AND SKILL BOOSTER FROM CRESCENS
//------------------ -- - --- -   ---- -- -- --     ----  --- -   ---- -- -- --     ---- 
int smart_reload=1;//[0 = OFF / 1 = ON] cancel reload with fire or ads - calibrate reload times to make it work (see below)
int enemy_ping=0; //[0 = OFF / 1 = ON]  on request I added DjangoKill`s auto ping. 
int ping_type=2; // 0=ping on ADS, 1=ping on fire, 2=ping on ads &fire 
int BTN_PING = PS4_LEFT;//button used for ping WARNING: PING NEEDS TO BE SWITCHED OFF FOR MW OR THIS BUTTON MUST BE CHANGED TO D-PAD UP.
int hairtriggers = 1; // [0 = OFF / 1 = ON] 
int default_pr_or_cur_state=1; // [0= when switching recoil profile, recoil is on. 1= when switching, current state = on]
//-----Current state: for example if you were plaving with secondary rapid fire and you would change recoil profile, then the script will
//-----WPN_1 to recoil on (and WPN_1 rapid fire off). If you fill out 1, instead of 0, the state will not change, only the recoil profile. 
//------------------ -- - --- -   ---- -- -- --     ----  -- - --- -   ---- -- -- --     ---- 
define easy_field_equip=FALSE; // easy_field_equip: short tap of tactical activates field equipment, FALSE= OFF, TRUE = ON.
define easy_field_btn=XB1_LB; // You can also define your right bumper / lethal grenade or any other btn to activate your field equipment with one tap.
int smart_thumb_stick=2;//[1= Easy Sprint ON / 2 = Easy Sprint ON & Easy Melee, Easy Jump or Easy Prone is ON / 3 = same as 2 without Easy Run / 4 = all off]
int l_stick_click = XB1_B; //[FILL OUT THE BUTTON THAT NEEDS TO BE PRESSED under left stick click]
int walk_tresh= -50;//Easy sprint stick treshhold (-75 = pressed more than 75%)
define rainbow_flash_indicator=FALSE;/*if set to TRUE, you will have the rainbow flash to indicate that POLAR is actually running)*/
/*
________________________________________________________________________________________________________

				SCRIPT STARTS HERE / MAKE NO CHANGES UNLESS INDICATED
_________________________________________________________________________________________________________*/

const string C_1 = "CRESCENS`";
const string C_2 = "PAE V26.01";
const string C_3 = "AutoSwap";
const string C_4 = "RF";
const string C_5 = "AR";
const string C_6 = "with AR";
//const string C_9 = "Sniper";
const string C_20 = "Sniper";
const string C_21 = "Sniper +";
const string C_22 = "Pistol";
const string C_11 = "Akimbo";
const string C_12 = "AutoAim";
const string C_13 = "ALL OFF";
const string C_14 = "Auto ON";
const string C_15 = "Primary AR";
const string C_16 = "Secondary RF";
const string C_19 = "Auto OFF";

const uint8 FONT_STATS[][] = {
{7,10},{11,18},{16,26}
};
define B_K = 0; define W = 1; define XS = 0; define M = 1; 
define L = 2; define F_W = 0; define F_H = 1;

define Off= 13, Blue= 0, Red= 1, Green= 2, Lavender= 3, White= 4, Yellow= 5, 
SkyBlue= 6, Neon= 7, Lilac= 8, Pink= 9, Pinkish= 10, Orange= 11, Emerald= 12;
data( 
/* 0		1		  2		  3		   4	    5		 6
 Blue      Red 	   Green   Lavender	 White	 Yellow   SkyBlue*/
1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 1,1,1,0, 0,1,1,0, 1,0,1,0,
/* 7		8		 9		 10  	   11      12       13       
 Neon 	  Lilac    Pink    Pinkish   Orange  Emerald    Off*/
3,1,0,0, 2,3,0,0, 1,3,0,0, 1,3,1,0, 0,3,1,0, 1,1,2,0, 0,0,0,0); 
		
/*button/sticks array by Crescens*/
const int8 B[][]={/*all button layouts supported*/
{4,7,8,6,3,18,19,5},
{4,7,8,6,3,5,19,18},
{7,4,5,3,6,18,19,8},
{4,6,8,6,7,18,19,5},
{4,3,8,6,7,18,19,5},
{6,7,8,3,4,18,19,5},
{4,7,8,19,3,18,6,5},
{4,7,8,19,3,5,6,18},
{4,7,8,6,3,18,5,19},
{3,6,8,7,4,18,19,5},
{3,6,8,7,4,5,19,18},
{6,3,5,4,7,18,19,8},
{3,7,8,7,6,18,19,5},
{3,4,8,7,6,18,19,5},
{7,6,8,4,3,18,19,5},
{3,6,8,19,4,18,7,5},
{3,6,8,19,4,5,7,18},
{3,6,8,7,4,18,5,19}
};
const int8 S[][]={/*sticks*/
{12,11,9,10},
{10,9,11,12},
{12,9,11,10},
{10,11,9,12}
};
define s_D=0, s_S=1, s_L=2, s_L_S=3;
define b_D=0, b_T=1, b_L=2, b_N=3, b_C=4, b_O=5, b_B=6, b_B_J_T=7, b_S=8;
define f_D=9, f_T=10, f_L=11, f_N=12, f_C=13, f_O=14, f_B=15, f_B_J_T=16, f_S=17;
/*--do not change! this will conflict with the button array.*/ 
int WALK, STRAFE, AIM_X, AIM_Y, FIRE, ADS, SPRINT, TAC_G, LETHAL, PRONE, JUMP, MELEE;
/*-----------------------------------------------------------------------------------*/
//int secondary_wpn = FALSE;
int ar_sY_[5], ar_eY_[5], ar_sX_[5], ar_tm_[5];
int Recoil_Pr=1;
int interval, iteration_point; int i_, i_count; int AR_V; int RY, RX;
int record;
int edit = FALSE; int no_recoil=TRUE; int WPN_1=TRUE;
int release, rnd;
int auto_aim = FALSE;
int dance_active=FALSE;
int pang=FALSE;
int drop=FALSE;
int burst_hold=150; /*value for burst fire*/
int burst_rest=150; /*value for burst fire*/
int burst=FALSE;
int drop_time = 1200;
int strafe=FALSE;
int strafe_time=700;
int jumper=FALSE;
int jump_time=200;
int notify, notifier;
int pin = 880, code;
int ads_grenade_sens, ads_fire_sens, Sens, long_shot_sens, actual_sens;
int RS_gr, running_p, _release, _quantum; int mn=326, mx=328; define RS=POLAR_RS;
int rapid_fire = FALSE; /*toggle on Hold ADS + D-pad right */
int Rumble_Wait_Timer = FALSE; 
int rapid_fire_timer;
int Rumble_Timer = 0; 
int Cur_Rumble;
int Old_Rumble;
int AutoSwap = FALSE;
int akimbo = FALSE;
int test_slot=2;
int auto_run=0;
int sY_eY_cor, sY_eY_cor2;
int sX_cor, stick_input;
int y_ambit = 8;
int x_ambit = 8;
int y_input[15];
int x_input[15];
int idX,rx_avg;
int idx,ry_avg, idx2, ry_avg2;
int newv1, newv2;
//int C_i;

int wpn_holster=FALSE;
int pr=FALSE;
int sniper = FALSE;
int rld_time, rld_1, rld_2;
int b_reload=FALSE;
int once=1;
int i;
int wtime;
int recoil_RF;
//int R_C, N_R_C, c_reload, c_rel=50;
int dflt_lo;
int game_sens, _w;
//int akimbo;
int flasher, b_f, b_f_wait, f_clr;
int script_on=1;
int hue;
int Pressed;
int AR_S;
//int no_recoil_pause=TRUE;

/*Crescens Sticky Polar Assist=*/
int Crescens_Sticky_Polar_Aim_Cor;

int current_x, current_y;



/*functions...don`t make any changes!*/
function s(id,fval){set_val(id,fval);}
function p(id){return event_press(id);}
function r(id){return event_release(id);}
function g(id){return get_ival(id);}
function rd(min,max){return random(min,max);}
function pv(id,min,max,fval){return get_pvar(id,min,max,fval);}
function s_pv(id,fval){set_pvar(id,fval);}
function displ(v0, v1, v2, v3, v4, v5) {s(TRACE_1, v0); s(TRACE_2, v1); s(TRACE_3, v2); s(TRACE_4, v3); s(TRACE_5, v4); s(TRACE_6, v5);}
function notify_bumper(Oh_my_sexy_bumper){notify=Oh_my_sexy_bumper;}
function btn(f__btn){if (!g(f__btn))return;s(f__btn, 0);}
function hrt(h__btn){if (!g(h__btn))return;s(h__btn, 100);}
function load_sens() {game_sens = in_game_menu_sens; s_pv(SPVAR_41, game_sens); s_pv(SPVAR_42, code);}
function load_polar() {_quantum = RS_quantum; _release = RS_release ;s_pv(SPVAR_43, _quantum);s_pv(SPVAR_44, _release);}
function s_p(f_rs, f_gr, f_rls) {set_polar(f_rs, f_gr, f_rls);}
function notify(pos){if (pos) notify = 1;else notify = 2;}
function s_s(s_btn, s_2){sensitivity(s_btn, NOT_USE, s_2);}
function Led(C) {for(i = 0; i <= 3; i++){set_led(i,duint8((C*4) + i));}}
function p_count(){i_count++;if(i_count > (ar_tm_ / 10)){i_count = (ar_tm_ / 10);return 1;}return 0;}
function c(){i_++;if(i_ == iteration_point){i_ = 0;AR_V += interval;}return AR_V;}
function load_rld() {rld_1 = 1200; rld_2 = 800; code = 225; s_pv(SPVAR_21, rld_2); s_pv(SPVAR_22, rld_1) s_pv(SPVAR_42, code);}
					 
function load_rcl() {ar_tm_[1] = r_t_1; ar_tm_[2] = r_t_2; ar_tm_[3] = r_t_3; ar_tm_[4] = r_t_4; ar_sY_[1] = Y_1; ar_sY_[2] = Y_2; ar_sY_[3] = Y_3; ar_sY_[4] = Y_4;
		 ar_eY_[1] = eY_1; ar_eY_[2] = eY_2; ar_eY_[3] = eY_3; ar_eY_[4] = eY_4; ar_sX_[1] = X_1; ar_sX_[2] = X_2; ar_sX_[3] = X_3; ar_sX_[4] = X_4; AR_S = AR_STRENGTH; save__();}


init {
 	combo_run(SCREEN_START); b_f=Oh_my_sexy_bumper; code = pv(SPVAR_42, 1, 2000, 880); l();
  	if (code == pin){load_sens(); load_polar(); load_rld(); load_rcl();}
    else game_sens = pv(SPVAR_41, 3, 20, game_sens); rld_1 = pv(SPVAR_21, 0, 4000, 1200); 
    rld_2 = pv(SPVAR_22, 0, 4000, 1200); _quantum = pv(SPVAR_43, 15, 40, _quantum); 
    _release = pv(SPVAR_44, 15, 50, _release); 
}
main
{
if (c_over_PS4_controller){swap (1,27);}

WALK = S[ticks][0]; STRAFE = S[ticks][1]; AIM_X = S[ticks][2]; AIM_Y = S[ticks][3]; 
FIRE = B[uttons][0]; ADS = B[uttons][1]; SPRINT = B[uttons][2]; TAC_G = B[uttons][3]; 
LETHAL = B[uttons][4]; PRONE = B[uttons][5]; JUMP = B[uttons][6]; MELEE = B[uttons][7]; 

if (Kill_Switch_Used)
					{
					if (!g(ADS) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);}
					if (!g(XB1_DOWN) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);}
      				if (get_brtime(KILL_SWITCH) <= 200)  { if (!g(ADS) && p(KILL_SWITCH))
      												{
      												script_on=!script_on;
      												notify(!script_on);
      												}
      												}
      				 }
if (script_on){
  


if (g (XB1_UP))
							{
							if (r (XB1_Y) && (XB1_B)){load_slot (test_slot);}
							btn (XB1_Y); btn (XB1_B);
							}
							

if (hairtriggers) 	{
					hrt(ADS);hrt(FIRE);
					}

if (get_brtime(ADS) <= 200 && p(ADS))
								    {
								      Pressed =1; notify (Pressed); 
								    }
    		else if (p(ADS))
    		{
								      Pressed =0;
								    }
			

if (g (FIRE)) 
	{ 
	  current_x = dz(AIM_X,0);
	  current_y = dz(AIM_Y,0);
	}
	
/*

                      ╦  ╔═╗╔═╗╔╦╗   ╔═╗╦ ╦╔╦╗  ╔╦╗╔═╗╔╗╔╦ ╦                  
    ──────────────────║  ║ ║╠═╣ ║║───║ ║║ ║ ║───║║║║╣ ║║║║ ║──────────────────
                      ╩═╝╚═╝╩ ╩═╩╝   ╚═╝╚═╝ ╩   ╩ ╩╚═╝╝╚╝╚═╝
                    M U L T I  A D S  L O A D  O U T  M E N U  
                    B Y  C R E C S E N S  ©  2 0 1 5 - 2 0 2 1 

*/
if (get_brtime(ADS) <= 200 && p(ADS))
								    {
								      Pressed =1; notify (Pressed); 
								    }
    		else if (p(ADS))
    		{
								      Pressed =0;
								    }
if(g(ADS) && !edit)
   					{

					if(Pressed && p(PS4_DOWN))
   											{
											   WPN_1=FALSE;
											   rapid_fire=FALSE;
											   notify (rapid_fire);
											   wpn_holster=FALSE;
											   no_recoil=FALSE;
											   sniper =FALSE;
											   dflt_lo=FALSE;
											   akimbo=FALSE;
											   AutoSwap=FALSE;
											   cls_oled(0); 
											   P_s(0, 41, 128, L, W, C_13[0], sizeof(C_13));
											   ol();
  											  }
 					if(!Pressed && p(PS4_DOWN))
											  {
											   WPN_1 = TRUE;
											   wpn_holster=FALSE;											   
											   rapid_fire=FALSE;
											   notify (sniper);
											   recoil_RF=FALSE;
											   no_recoil=FALSE;
											   sniper =TRUE;
											   dflt_lo=FALSE;
											   akimbo=FALSE;
											   cls_oled(0); 
											   P_s(0, 24, 128, L, W, C_20[0], sizeof(C_20));
											   ol();
											 }

					if(p(PS4_UP))
										   	{
												dflt_lo=TRUE;
												notify (dflt_lo);
												cls_oled(0); 
												P_s(0, 24, 128, L, W, C_5[0], sizeof(C_5));
												ol();
										   	}
   					if (get_brtime(PS4_UP) <= 200 && p(PS4_UP))
										    {
										      Pressed =1; notify (Pressed); 
										    }
    				else if (p(PS4_UP))
    										{
								      		Pressed =0;
								    		}
					if (p(XB1_UP) && Pressed)
											{
 											AR_on_rumbles ++;
 											notify (AR_on_rumbles);
 											if(AR_on_rumbles==3)
				 												{
				 												AR_on_rumbles=1;
				 												}
 											if (AR_on_rumbles==1)
				 												{ 												
						 										P_s(0, 0, 128, M, W, C_14[0], sizeof(C_14));
						 										ol();
						 										}
		 				    				if (AR_on_rumbles==2)
				 												{ 												 								
						 										P_s(0, 0, 128, M, W, C_19[0], sizeof(C_19));
						 										ol();
						 										}
						 					}

					if(p(PS4_RIGHT))
						   					{
											  WPN_1=FALSE
											  rapid_fire=TRUE;
											  notify (rapid_fire);
											  wpn_holster=FALSE;
											  no_recoil=FALSE;
											  sniper =FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 24, 128, L, W, C_4[0], sizeof(C_4));
											  ol();
											 }
					if (get_brtime(PS4_LEFT) <= 200 && p(PS4_LEFT))
										     {
										      Pressed =1; notify (Pressed); 
										     }
    				else if (p(PS4_LEFT))
    										 {
								      		 Pressed =0;
								    		 }

					if(p(PS4_LEFT)&& !Pressed)
											 {
											  WPN_1 = TRUE;
											  rapid_fire=TRUE;
											  wpn_holster=TRUE;
											  notify (wpn_holster);
											  no_recoil=FALSE;
											  sniper =FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 18, 128, M, W, C_16[0], sizeof(C_16));
											  ol();
											 }
					
					if (g (PS4_LEFT)&& get_ptime (PS4_LEFT) > 800 && once == 1)
											 {
											   no_recoil=TRUE;
											   notify (no_recoil);
											   once = once - 1;
											   P_s(0, 18, 128, M, W, C_16[0], sizeof(C_16));
											   P_s(0, 41, 128, M, W, C_15[0], sizeof(C_15));								
											   ol();
											 }

					if(p(PS4_LEFT)&& Pressed)
											{
											   rapid_fire = FALSE; AutoSwap = TRUE; 
											   WPN_1 = FALSE; wpn_holster = FALSE;
											   notify(AutoSwap); 			   			
											   P_s(0, 0, 128, M, W, C_3[0], sizeof(C_3));					
											   ol();
										    }

					if (g (PS4_DOWN)&& get_ptime (PS4_DOWN) > 800 && once == 1)
											{
											  WPN_1 = TRUE;
											  rapid_fire=TRUE;
											  wpn_holster=TRUE;
											  notify (wpn_holster);
											  no_recoil=FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  notify (wpn_holster);
											  once = once - 1;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 0, 128, M, W, C_21[0], sizeof(C_21));
											  P_s(0, 30, 128, L, W, C_22[0], sizeof(C_22));
											  ol();
											}
					if (g (PS4_RIGHT)&& get_ptime (PS4_RIGHT) > 800 && once == 1)
											{
											  no_recoil=TRUE;
											  WPN_1=TRUE;
											  recoil_RF=TRUE;
										      notify (no_recoil);
											  once = once - 1;
											  cls_oled(0); 											
											  P_s(0, 18, 128, M, W, C_4[0], sizeof(C_4));
											  P_s(0, 41, 128, L, W, C_6[0], sizeof(C_6));
											  ol();
											}
					if(r (WII_PLUS))
											{
											  enemy_ping = !enemy_ping; notify (enemy_ping); 
											}
					if(r (XB1_VIEW)&& wpn_holster)
											{
											  akimbo=TRUE;
											  notify (akimbo);
											  b_f=5;
											  cls_oled(0);  
											  P_s(0, 41, 128, L, W, C_11[0], sizeof(C_11));
											}
			btn (PS4_SHARE);btn (PS4_LEFT);
			btn (PS4_RIGHT);btn (PS4_UP);
			btn (PS4_DOWN);btn (WII_HOME);
			btn (WII_PLUS);btn (XB1_VIEW);
			}
if (dflt_lo)
			{
			WPN_1=TRUE;
		   	rapid_fire=FALSE;
		   	wpn_holster=FALSE;
		   	no_recoil=TRUE;
		   	sniper =FALSE;
		   	recoil_RF=FALSE;
		   	akimbo=FALSE;
		   	AutoSwap=FALSE;
		   	}

if (once < 1 && r (XB1_LEFT)) {once = 1;}
if (once < 1 && r (XB1_DOWN)) {once = 1;}
if (once < 1 && r (XB1_RIGHT)){once = 1;}

if (g(XB1_RS) && p(XB1_DOWN))
 							{
 							auto_aim = !auto_aim;
 							notify (auto_aim);
 							if (auto_aim)
 										{
 										cls_oled(0); 
 										P_s(0, 0, 128, M, B_K, C_1[0], sizeof(C_1));
 										P_s(0, 22, 128, XS, W, C_2[0], sizeof(C_2));
 										P_s(0, 41, 128, L, W, C_12[0], sizeof(C_12));
 										}
 							}
/*
   
                      ╔═╗╔═╗═╗ ╦╦ ╦   ╔╗ ╦ ╦╔╦╗╔═╗╔═╗╦═╗╔═╗               
    ──────────────────╚═╗║╣ ╔╩╦╝╚╦╝───╠╩╗║ ║║║║╠═╝║╣ ╠╦╝╚═╗───────────────
                      ╚═╝╚═╝╩ ╚═ ╩    ╚═╝╚═╝╩ ╩╩  ╚═╝╩╚═╚═╝               

*/
  if (g(ADS))
  			{
     		if (p(XB1_XBOX)) 
     						{      
           					 Oh_my_sexy_bumper ++;
           					 b_f=Oh_my_sexy_bumper;
            
            				if (Oh_my_sexy_bumper == 7) 
            										  {
            										  Oh_my_sexy_bumper = 1; 
            										  b_f = 1;
            										  }
            				if (Oh_my_sexy_bumper)
            									{ 
            									notify_bumper(Oh_my_sexy_bumper); 
            									}
                         	}
           btn (XB1_XBOX);            
 }
  
/*

╔═╗╔═╗═╗ ╦╦ ╦  ╔╗ ╦ ╦╔╦╗╔═╗╔═╗╦═╗╔═╗  
╚═╗║╣ ╔╩╦╝╚╦╝  ╠╩╗║ ║║║║╠═╝║╣ ╠╦╝╚═╗  
╚═╝╚═╝╩ ╚═ ╩   ╚═╝╚═╝╩ ╩╩  ╚═╝╩╚═╚═╝  
┌┐ ┬ ┬  ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗      
├┴┐└┬┘  ║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗      
└─┘ ┴   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝      

*/
			
  if (Oh_my_sexy_bumper >= 1)
  							{
  							if (g(LETHAL))release = get_ptime(LETHAL);
  							}
    if (Oh_my_sexy_bumper == 1) /*	╔╗ ┬┌─┐  ╔╦╗┌─┐┌┐┌┌─┐  ╦  ┬┌┬┐┌┬┐┬  ┌─┐  ╔╦╗┌─┐┌┐┌┌─┐┌─┐
									╠╩╗││ ┬  ║║║├─┤│││└─┐  ║  │ │  │ │  ├┤    ║║├─┤││││  ├┤ 
									╚═╝┴└─┘  ╩ ╩┴ ┴┘└┘└─┘  ╩═╝┴ ┴  ┴ ┴─┘└─┘  ═╩╝┴ ┴┘└┘└─┘└─┘
									┌┐ ┬ ┬  ╔╗ ┬┌─┐  ╔═╗┬┌─┬ ┬┌┐ ┌┐   ┌┬┐┌─┐┬  ┬┌─┐┬  ┌─┐┌─┐┌─┐┌─┐┌┬┐  ┌┐ ┬ ┬                         
									├┴┐└┬┘  ╠╩╗││ ┬  ╚═╗├┴┐│ │├┴┐├┴┐   ││├┤ └┐┌┘├┤ │  │ │├─┘├─┘├┤  ││  ├┴┐└┬┘                       
									└─┘ ┴   ╚═╝┴└─┘  ╚═╝┴ ┴└─┘└─┘└─┘  ─┴┘└─┘ └┘ └─┘┴─┘└─┘┴  ┴  └─┘─┴┘  └─┘ ┴  
									╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                 
									║  ├┬┘├┤ └─┐│  ├┤ │││└─┐                 
									╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘ */
								{
        						if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
        																							{
        																							dance_active = TRUE;
        																							}
        						if (dance_active)
        										{
										        if (g(LETHAL))
										        s(FIRE,100);
										        combo_run(DANCE);
										        block(LETHAL, release + 50);
										        }
        						if (dance_active && r(LETHAL))
        										{
        										dance_active=FALSE;
        										}
}
        
    if (Oh_my_sexy_bumper == 2) 
    							{ /*╔═╗╔═╗╔╗╔╔═╗  ┬  ╔═╗╦╔╗╔╔═╗╦  ╔═╗  ╦╔═╦╦  ╦    ╔═╗╦ ╦╔═╗╔╦╗
									╠═╝╠═╣║║║║ ╦  │  ╚═╗║║║║║ ╦║  ║╣   ╠╩╗║║  ║    ╚═╗╠═╣║ ║ ║ 
									╩  ╩ ╩╝╚╝╚═╝  o  ╚═╝╩╝╚╝╚═╝╩═╝╚═╝  ╩ ╩╩╩═╝╩═╝  ╚═╝╩ ╩╚═╝ ╩ 
									┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                           
									├┴┐└┬┘  ║  ├┬┘├┤ └─┐│  ├┤ │││└─┐                           
									└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘*/                          
								if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							pang = TRUE;        																				
      																								}
      							if (pang)
      									{
      									if (g(LETHAL))
  									    combo_run(BANGER);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (pang && r(LETHAL))
	        										{
	        										pang=FALSE;
	        										}
}
	
 if (Oh_my_sexy_bumper == 3) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							drop = TRUE;        																				
      																								}
      							if (drop)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									drop_time -= get_rtime();
      									block(LETHAL, release + 50);
      									if (drop_time >= 0) 
      													{
      													s(PRONE,100);
      													}
      									}
  								if (drop && r(LETHAL))
	        										{
	        										drop=FALSE;
	        										drop_time = 1200;
	        										}
        																							
    
    }
 
 if (Oh_my_sexy_bumper == 4) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							strafe = TRUE;        																				
      																								}
      							if (strafe)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									combo_run (STRAFER)
      									block(LETHAL, release + 50);
      									}
  								if (strafe && r(LETHAL))
	        										{
	        										strafe=FALSE;
	        										}
        																							
    
    }
    
 if (Oh_my_sexy_bumper == 5) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							jumper = TRUE;        																				
      																								}
      							if (jumper)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									combo_run (JUMPER)
      									block(LETHAL, release + 50);
      									}
  								if (jumper && r(LETHAL))
	        										{
	        										jumper=FALSE;
	        										}
        																							
    
    }
    if (Oh_my_sexy_bumper == 6) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							burst = TRUE;        																				
      																								}
      							if (burst)
      									{
      									if (g(LETHAL))
      									combo_run(BURSTER);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (burst && r(LETHAL))
	        										{
	        										burst=FALSE;
	        										}
}
/*

                     ╔╦╗╦╔╦╗╔═╗  ╔═╗╔═╗╦  ╦╔╗ ╦═╗╔═╗╔╦╗╦╔═╗╔╗╔                  
    ──────────────────║ ║║║║║╣───║  ╠═╣║  ║╠╩╗╠╦╝╠═╣ ║ ║║ ║║║║──────────────────
                      ╩ ╩╩ ╩╚═╝  ╚═╝╩ ╩╩═╝╩╚═╝╩╚═╩ ╩ ╩ ╩╚═╝╝╚╝                  

*/


/*	╔╦╗┬┌┬┐┌─┐  ╔═╗┌─┐┬  ┬┌┐ ┬─┐┌─┐┌┬┐┬┌─┐┌┐┌  
	 ║ ││││├┤   ║  ├─┤│  │├┴┐├┬┘├─┤ │ ││ ││││  
	 ╩ ┴┴ ┴└─┘  ╚═╝┴ ┴┴─┘┴└─┘┴└─┴ ┴ ┴ ┴└─┘┘└┘  
	┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌┐┌┌─┐              
	├┴┐└┬┘  ║  ├┬┘├┤ └─┐├┤ │││└─┐              
	└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘┘└┘└─┘ */             


if (g(XB1_DOWN) && g(XB1_X) && get_ptime(XB1_X) > 500 && !record) 
																{
														      	record = TRUE;
														      	notify(record);
										    					}
if (record) 
			{
      		if (!WPN_1) 
      						{
        					rld_2 = get_ptime(XB1_X);
        											if (r(XB1_X)) 
        														{
          														record = FALSE;
          														s_pv(SPVAR_22, rld_2);
          														notify(record);
        														}
      						}
      		if (WPN_1) 		
      						{
      						rld_1 = get_ptime(XB1_X);
      												if (r(XB1_X)) 
      															{
														        record = FALSE;
														        s_pv(SPVAR_21, rld_1);
														        notify(record);
      															}
      						}
    		} 
   				

/*

                      ╔═╗╔═╗╔╗╔╔═╗╔═╗╦   ╦═╗╔═╗╦  ╔═╗╔═╗╔╦╗                  
    ──────────────────║  ╠═╣║║║║  ║╣ ║───╠╦╝║╣ ║  ║ ║╠═╣ ║║──────────────────
                      ╚═╝╩ ╩╝╚╝╚═╝╚═╝╩═╝ ╩╚═╚═╝╩═╝╚═╝╩ ╩═╩╝                  

*/
   if (!WPN_1)
    				{
    				rld_time = rld_2;
    				} 
    			else 
    				{
    				rld_time = rld_1;
    				}
   if (r(XB1_X) && get_ptime(XB1_X) < 300) 
   										{
   										b_reload = rld_time;
   										}
    if (smart_reload && b_reload) /*╔═╗┬ ┬┌┬┐┌─┐  ╔═╗┌─┐┌┐┌┌─┐┌─┐┬    ╦═╗┌─┐┬  ┌─┐┌─┐┌┬┐
									╠═╣│ │ │ │ │  ║  ├─┤││││  ├┤ │    ╠╦╝├┤ │  │ │├─┤ ││
									╩ ╩└─┘ ┴ └─┘  ╚═╝┴ ┴┘└┘└─┘└─┘┴─┘  ╩╚═└─┘┴─┘└─┘┴ ┴─┴┘
									┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                       
									├┴┐└┬┘  ║  ├┬┘├┤ └─┐├┤ │││└─┐                       
									└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘┘└┘└─┘*/ 
								{
      							b_reload -= get_rtime();
      							if (b_reload < 0) 
      											{
      											b_reload = 0;
      											}
      							if (p(FIRE) || p(ADS))
      											{
      											combo_run(CANCEL_RLD);
      											}
    							}
 

if(!g (XB1_B) && r(XB1_Y) && get_ptime(XB1_Y) < 300 && wpn_holster)
														{
														 WPN_1 = !WPN_1; notify (!WPN_1);
														}

if(!g(ADS) && g(XB1_DOWN)) {once = once - 1;}
if (r(XB1_DOWN)) {once = 1;}

if (!g (ADS) && g (RF_led_sync_btn) && get_ptime(RF_led_sync_btn) > 300 && once == 1 && wpn_holster)
																						{ 
																						WPN_1 = !WPN_1; notify (!WPN_1); once = once - 1;																						
																						}
												
												if (r (RF_led_sync_btn) && once < 1 ) once = 1;

/*   

                      ╦═╗╔═╗╔═╗╦╔╦╗   ╔═╗╦╦═╗╔═╗  ─┼─┼─   ╔═╗╦ ╦╔╦╗╔═╗   ╦═╗╔═╗                 
    ──────────────────╠╦╝╠═╣╠═╝║ ║║───╠╣ ║╠╦╝║╣────┼─┼────╠═╣║ ║ ║ ║ ║───╠╦╝╠╣──────────────────
                      ╩╚═╩ ╩╩  ╩═╩╝   ╚  ╩╩╚═╚═╝          ╩ ╩╚═╝ ╩ ╚═╝   ╩╚═╚                   

*/
    if (dynamic_RF==1) /*dynamic rf by Crescens*/
    					{
    					wtime = 125	- (g(FIRE));
    					}
    					else
    					{
    					wtime = 25 ;
    					}
        
    if (get_val(FIRE)) 
    					{
            			if (akimbo && !WPN_1) 
            										{
              										combo_run(AKIMBO);              						
    												}
    					if (rapid_fire && !WPN_1 || recoil_RF && WPN_1)				{
              										combo_run(RAPID_FIRE);
              										}
            							
            			else if (wpn_holster && !WPN_1) 
            										{
              										combo_run(RAPID_FIRE);
				    								}
            			}    
/*fix for Rapid fire whilst sprint (credits A64)*/
if ((combo_running(RAPID_FIRE) || combo_running (AKIMBO)) && ((g(WALK)) < -85))
																		        {
																	        s(WALK, -85);
s(STRAFE, 0);
}																	        
/*
╔═╗╦ ╦╔╦╗╔═╗  ╔═╗╦ ╦╔═╗╔═╗  ┌┐ ┬ ┬
╠═╣║ ║ ║ ║ ║  ╚═╗║║║╠═╣╠═╝  ├┴┐└┬┘
╩ ╩╚═╝ ╩ ╚═╝  ╚═╝╚╩╝╩ ╩╩    └─┘ ┴ 
╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗          
║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗          
╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝ */
if (AutoSwap)
			{
     	if(get_val(FIRE))
    			{
        		if(get_rumble (RUMBLE_A) > 0 && !Rumble_Wait_Timer) 
									{
										Rumble_Wait_Timer = TRUE;
									}
        		if(Rumble_Wait_Timer) 
		        					{
		        					Rumble_Timer += get_rtime();
		        					
       								if(get_rumble (RUMBLE_A) > 0) 	
        							
        														Cur_Rumble = get_rumble (RUMBLE_A)*255/100;
        							
       								if(Cur_Rumble > Old_Rumble)
							       							  	{
							                					Old_Rumble = Cur_Rumble;
							                					Rumble_Timer = 0;
							            						}
        							else if(Cur_Rumble < Old_Rumble)
    								
    															Old_Rumble = Cur_Rumble;
    								
        							if(Rumble_Timer >= Fire_Rate_Timer) 
        							
        														rapid_fire_timer = TRUE;
        							}
 
    			}
    
 				if(event_release(FIRE))
 									{
							    	rapid_fire_timer=FALSE;
							        combo_stop(RAPID_FIRE); 
							        Rumble_Timer = 0;
							        Rumble_Wait_Timer = FALSE;
							        Old_Rumble = 0;
							       // no_recoil_pause=FALSE;
    								}
   				if (rapid_fire_timer)
   						{
     					if (get_val(FIRE)) 
            						{
            						if (akimbo) 
            									{
              									combo_run(AKIMBO);
              									} else 
            									{
              									combo_run(RAPID_FIRE);
            									}
            						}
    		   					
    					}
    		}/*end AutoSwap*/

/*

                      ╔═╗╔═╗╔╗╔╔═╗╔═╗╦   ╔═╗╦  ╦╔╦╗╔═╗                 
    ──────────────────║  ╠═╣║║║║  ║╣ ║───╚═╗║  ║ ║║║╣──────────────────
                      ╚═╝╩ ╩╝╚╝╚═╝╚═╝╩═╝ ╚═╝╩═╝╩═╩╝╚═╝                 

*/
    
if (cancel_slide == 1 || cancel_slide == 3 ) 
 						{/*credits: ╔═╗┬ ┬┌┬┐┌─┐  ╔═╗┌─┐┌┐┌┌─┐┌─┐┬    ╔═╗┬  ┬┌┬┐┌─┐
									╠═╣│ │ │ │ │  ║  ├─┤││││  ├┤ │    ╚═╗│  │ ││├┤ 
									╩ ╩└─┘ ┴ └─┘  ╚═╝┴ ┴┘└┘└─┘└─┘┴─┘  ╚═╝┴─┘┴─┴┘└─┘
									┌┐ ┬ ┬  ╔╦╗ ┬┌─┐┌┐┌┌─┐┌─┐╦╔═┬┬  ┬              
									├┴┐└┬┘   ║║ │├─┤││││ ┬│ │╠╩╗││  │              
									└─┘ ┴   ═╩╝└┘┴ ┴┘└┘└─┘└─┘╩ ╩┴┴─┘┴─┘*/
    					if ((g(PS4_LY) < -60) || (g(PS4_LY) > 60) || 
    					(g(PS4_LX) < -60) || (g(PS4_LX) > 60)) 
															{
															if (r(PRONE)) 												      
											      						{
      																	if (cancel_slide == 1) 
	          																	{
					            												combo_run(CANCEL_SLIDE);
																				}
				          												
																		if (cancel_slide == 3)
																		        {
																		         combo_run(CANCEL_SLIDE_MW);
																		        }
											        					}	
															
															}
																 
     				 									
																
    					}
/*
                      ╔═╗╔═╗╔═╗╦ ╦  ╔╦╗╔═╗╔═╗╦  ╔═╗╦ ╦               
    ──────────────────║╣ ╠═╣╚═╗╚╦╝───║║║╣ ╠═╝║  ║ ║╚╦╝───────────────
                      ╚═╝╩ ╩╚═╝ ╩   ═╩╝╚═╝╩  ╩═╝╚═╝ ╩  
                     	   B Y  C R E S C E N S 
*/

   if ((easy_field_equip && !g(LETHAL) && !g(FIRE)) || (easy_field_equip && !g(TAC_G) && !g(FIRE)))
					{
					
					if (g(easy_field_btn)) block (easy_field_btn,150);
					if(r(easy_field_btn))
								{
								if (get_ptime(easy_field_btn) <= 150)
								combo_run (FIELD);
								block (easy_field_btn,30);}
								}

/*

                      ╔═╗╦ ╦╔╦╗╔═╗   ╔═╗╦╔╗╔╔═╗                  
    ──────────────────╠═╣║ ║ ║ ║ ║───╠═╝║║║║║ ╦──────────────────
                      ╩ ╩╚═╝ ╩ ╚═╝   ╩  ╩╝╚╝╚═╝                  

*/				  
if(enemy_ping)
	{
		if(ping_type == 0)
		{
			if(p(ADS))
				combo_run(AUTO_PING); 
		}
      	if(ping_type == 1)
		{
			if(p(FIRE))
				combo_run(AUTO_PING); 
		}
		if(ping_type == 2)
		{
			if(g(ADS) && p(FIRE))
				combo_run(AUTO_PING); 
		}
	}
/*

                      ╔═╗╔═╗╦  ╔═╗╦═╗   ╔═╗╦╔╦╗   ╔═╗╔═╗╔═╗╦╔═╗╔╦╗  ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗                  
    ──────────────────╠═╝║ ║║  ╠═╣╠╦╝───╠═╣║║║║───╠═╣╚═╗╚═╗║╚═╗ ║───║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗──────────────────
                      ╩  ╚═╝╩═╝╩ ╩╩╚═   ╩ ╩╩╩ ╩   ╩ ╩╚═╝╚═╝╩╚═╝ ╩   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝                  

                        B E S T  A I M  A S S I S T  O N  C O D  -  B Y  C R E S C E N S 
*/
                        
/*start*/ stick_input = (isqrt(pow(g(AIM_X),2) + pow(g(AIM_Y),2)));
 
 if (Crescens_Sticky_Polar_Aim_Cor) 
 									{
								      if (g(ADS) || (g(FIRE)))
								      			{
	        									if (stick_input <= _release)
	        													{ 
	        													  rnd = rd(mn, mx);
	        													  running_p = TRUE;
														          RS_gr = (RS_gr + _quantum) % 360;
														          s_p(RS, RS_gr, (_release * rnd));
	        													}
	        									else running_p = FALSE;
								      			} 
									}/*end*/
		
		
					      if (g(XB1_DOWN))
					      				{
					      				
									        if (p(XB1_LT)) 
									        				{
													          _quantum --;
													          notify(1);
													          s_pv(SPVAR_43, _quantum);
					        								}
        									if (p(XB1_RT)) 
													        {
													          _quantum ++;
													          notify(1);
													          s_pv(SPVAR_43, _quantum);
													        }
												
      										
									        if (p(XB1_LB)) 
									        				{
													          _release --;
													          notify(1);
													          s_pv(SPVAR_44, _release);
					        								}
        									if (p(XB1_RB)) 
													        {
													          _release ++;
													          notify(1);
													          s_pv(SPVAR_44, _release);
													        }
													        
											btn(XB1_LT); btn(XB1_LB);
											btn(XB1_RT); btn(XB1_RB);
											}


 /*

                      ╔═╗╦╔╦╗   ╔═╗╔═╗╦═╗╦═╗╔═╗╔═╗╔╦╗╦╔═╗╔╗╔╔═╗   ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗                  
    ──────────────────╠═╣║║║║───║  ║ ║╠╦╝╠╦╝║╣ ║   ║ ║║ ║║║║╚═╗───║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗──────────────────
                      ╩ ╩╩╩ ╩   ╚═╝╚═╝╩╚═╩╚═╚═╝╚═╝ ╩ ╩╚═╝╝╚╝╚═╝   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝                  

*/
    if (aim_sens_corrections) 
							{
  							ads_grenade_sens = 100 - (game_sens); ads_fire_sens = 96 - (game_sens); long_shot_sens=90-(game_sens); actual_sens = 100;
      						if (!g(ADS) && !g(FIRE) && !g(LETHAL) && !g(TAC_G)) 
																					  {
																					  Sens = actual_sens;
																				      } 
																				      else if(g(ADS) && !g(FIRE) ) 
																					  {  
																				      if (sniper && !WPN_1) Sens = long_shot_sens; 
																				      else
																					  Sens=ads_grenade_sens;
																					  }
																				      else if (!g(ADS) && g(FIRE)) 
																				      {
																				        Sens = actual_sens;
																				      } 
																				      else if (g(ADS) && g(FIRE)) 
																				      {
																				        Sens = ads_fire_sens;
																				      } 
																				      else if (g(TAC_G) || g(LETHAL)) 
																				      {
																				        Sens = ads_grenade_sens;
																				      }
																				      if (stick_input > _release)/*cut_off_polar*/
																				      {
																				        if (Sens > 100) Sens = 100;
																				        s_s(AIM_X, Sens);
																				        s_s(AIM_Y, Sens);
																				        running_p=TRUE;
																			      }
					      if (g(XB1_DOWN)) 
					      					{
									        if (p(XB1_VIEW)) 
									        				{
													          game_sens--;
													          notify(1);
													          s_pv(SPVAR_41, game_sens);
					        								}
        									if (p(XB1_MENU)) 
													        {
													          game_sens++;
													          notify(1);
													          s_pv(SPVAR_41, game_sens);
													        }
												btn(XB1_VIEW);
												btn(XB1_MENU);
      										}
      					if (g(XB1_VIEW) && g(XB1_MENU))/*resets values to default from user config*/
      														{
      														game_sens=in_game_menu_sens;
      														notify(3);
      														s_pv(SPVAR_41, game_sens);
      														btn(XB1_VIEW);
															btn(XB1_MENU);
      														}
      														
   } 
    
/*

                      ╔═╗╔═╗╔═╗╦ ╦  ╔╦╗╦ ╦╦ ╦╔╦╗╔╗                
    ──────────────────║╣ ╠═╣╚═╗╚╦╝───║ ╠═╣║ ║║║║╠╩╗───────────────
                      ╚═╝╩ ╩╚═╝ ╩    ╩ ╩ ╩╚═╝╩ ╩╚═╝               

*/
if (smart_thumb_stick <=  2)
							{ 
							auto_run=1;
							} 
							else 
							{
							auto_run =0;
							}
							/*Easy Thumbs (& Easy Melee) by Crescens*/
if (smart_thumb_stick >=  2 && smart_thumb_stick  <= 3 && g(XB1_LS)&& !sniper)
							{
							  s(l_stick_click, 100);
							}

/*

                      ╔═╗╦ ╦╔╦╗╔═╗   ╦═╗╦ ╦╔╗╔                  
    ──────────────────╠═╣║ ║ ║ ║ ║───╠╦╝║ ║║║║──────────────────
                      ╩ ╩╚═╝ ╩ ╚═╝   ╩╚═╚═╝╝╚╝                  

*/
  if (auto_run) 
  				{
      			if (!g(ADS) && g(WALK) < (walk_tresh)) 
      												{
      												combo_run(EASY_RUN);			      			
													}
	} 
/*the classical aim assist by excalibur & dot22 */   
if (sticky_tripple_or_polar_aa==1)
								{ _w=20;
								if(g(ADS))
										{
										combo_run(STICKY_AIM);
										}
										else
										{
										combo_stop(STICKY_AIM);
}
}/* credits:┌─┐┬ ┬┬  ┌─┐┬ ┬┬   ┬       
			│  ├─┤│  │  ├─┤│  ┌┼─      
			└─┘┴ ┴┴  └─┘┴ ┴┴  └┘       
			╔═╗╔═╗    ╔╗╔┬┬┌─┌─┐┬  ┌─┐┬
			╚═╗╚═╗    ║║║│├┴┐│ ││  ├─┤│
			╚═╝╚═╝────╝╚╝┴┴ ┴└─┘┴─┘┴ ┴┴
			tripple sticky by 
			chi chi & 𝓢𝓢_𝓝𝓲𝓴𝓸𝓵𝓪𝓲*/
if (sticky_tripple_or_polar_aa==2)
								{
								if(g(ADS) && !g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v  = aim_val_1;
													_w = wait_val_1;
													}
								else if(g(ADS) && g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v  = aim_val_2;
													_w = wait_val_2;
													}
								else if(!g(ADS) && g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v = aim_val_3;
													_w = wait_val_3;
													}
}/*polar aa by
╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐
║  ├┬┘├┤ └─┐│  ├┤ │││└─┐
╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘*/
if (sticky_tripple_or_polar_aa ==3)
									{
									Crescens_Sticky_Polar_Aim_Cor=1;
									} 
else 
									{
									Crescens_Sticky_Polar_Aim_Cor=0;
									}


if(sniper && WPN_1 && !wpn_holster || WPN_1 && wpn_holster && sniper)
		{/*credit: ╦  ┌─┐┌─┐┬┌┬┐┌─┐┬  ┌─┐┬ ┬┌┬┐┌─┐
				   ║  ├┤ │ ┬│ │ │  │  │ ││ │ ││└─┐
				   ╩═╝└─┘└─┘┴ ┴ └─┘┴─┘└─┘└─┘─┴┘└─┘ */
	b_f = 10; 
        if(g(ADS))
            s(SPRINT,100);

        if(g(WALK) <-90 && g(ADS) && get_ptime(ADS) > 200)
            combo_stop(CH);

            if(p(ADS)) 
                combo_run(CH);

            if(g(ADS) && get_lval(SPRINT)) 
                s(SPRINT,0);
                
             if(p(FIRE) && !g(ADS))/*scope shot added by Crescens*/ 
             						{   
						          	combo_run (QUICK_S) 
						            }
			if(auto_crouch)
       						if (r(ADS))
       									{
       									combo_run(CROUCH);
       									}		
       								
       								
        }else if (auto_aim){ if(get_val(FIRE) && !g(ADS)){s(ADS,100);}}
        
/*

                      ╔═╗╦═╗   ╔═╗╔═╗╔═╗╦ ╦   ╔═╗╔═╗╔╦╗  ╦ ╦╔═╗                  
    ──────────────────╠═╣╠╦╝───║╣ ╠═╣╚═╗╚╦╝───╚═╗║╣  ║───║ ║╠═╝──────────────────
                      ╩ ╩╩╚═   ╚═╝╩ ╩╚═╝ ╩    ╚═╝╚═╝ ╩   ╚═╝╩                    

*/	
        
if(g(XB1_DOWN) && !g(ADS) && !edit) 
    { 
    if (default_pr_or_cur_state)
    {
     if(r(XB1_X) && get_ptime (XB1_X)<500)
            {Recoil_Pr=1; l();} 
        if(r(XB1_A))
            {Recoil_Pr=2; l();} 
        if(r(XB1_B))
            {Recoil_Pr=3; l();}
        if(r(XB1_Y))
            {Recoil_Pr=4; l();} 
            }
            else 
            {
        if(r(XB1_X) && get_ptime (XB1_X)<500)
            {Recoil_Pr=1; dflt_lo=TRUE; l();} 
        if(r(XB1_A))
            {Recoil_Pr=2; dflt_lo=TRUE; l();} 
        if(r(XB1_B))
            {Recoil_Pr=3; dflt_lo=TRUE; l();}
        if(r(XB1_Y))
            {Recoil_Pr=4; dflt_lo=TRUE; l();} 
            }
    btn(XB1_B);btn (XB1_A);btn (XB1_Y); btn (XB1_LB); btn (XB1_RB); btn (XB1_RS);
    } 

if (get_brtime(XB1_DOWN) <= 200 && p(XB1_DOWN))
												{
												pr=TRUE; notify (pr);
												} 
if (r(XB1_DOWN)&&pr)
					{
					pr=FALSE;
					}
if (!g (XB1_X) && !record)
					{
  					if (g (PS4_DOWN)&&pr)	
  										{
  										if (get_ptime (PS4_DOWN) > 2500 && !g (XB1_X))   
  												{
  												edit = 1; b_f=4; pr=FALSE;
  												newv1= ar_tm_[Recoil_Pr] / 2; newv2 =ar_tm_[Recoil_Pr] / 2;
  												}        					
                         				}
                         
                   	}
      displ(ar_tm_,ar_sY_,ar_eY_, ar_sX_, rnd, MELEE);
      
       if (edit)
       	{
 
      			
      if (g(XB1_UP)){edit=0;}
      
     
     					
       				
    												
    											   
    
    											
    												if (r(FIRE)) {save__(); b_f=2; newv1 = newv2;
    															{ if (idx >0 || idx2 > 0 || idX > 0 )
    															{ idx = 0; ry_avg = 0; idx2 = 0; ry_avg2 = 0; idX = 0; rx_avg = 0;}
    															}
    															}
  
   
    if(g(ADS) && g(FIRE)) {
    newv1 = newv1 - get_rtime();
        
      if (newv1 > 0){
        if(abs(current_y) >= y_ambit) {
            y_input[idx] =  current_y;
            idx += 1;
           
            if(idx == 15) {
               
                for(idx = 0;idx <= 14;idx++) {
	                ry_avg += y_input[idx]; 
		        }
		      
		        ry_avg /= 15;
		  
		        sY_eY_cor += ry_avg / 10;
		    
		        ry_avg = 0;
		        idx = 0;
	        }
	        }/*--end if (newv1 > 0)*/}else
	        if(abs(current_y) >= y_ambit) {
            y_input[idx2] =  current_y;
            idx2 += 1;
            
           
           
            if(idx2 == 15) {
               
                for(idx2 = 0;idx2 <= 14;idx2++) {
	                ry_avg2 += y_input[idx2]; 
		        }
		      
		        ry_avg2 /= 15;
		  
		        sY_eY_cor2 += ry_avg2 / 10;
		    
		        ry_avg2 = 0;
		        idx2 = 0;
	        }
	        }
	     if(abs(current_x) >= x_ambit) {
           		x_input[idX] =  current_x;
            	idX += 1;
	         if(idX == 15) {
               
                for(idX = 0;idX <= 14;idX++) {
	                rx_avg += x_input[idX]; 
	                
		        }
		      
		        rx_avg /= 15;
		  
		        sX_cor += rx_avg / 10;
		    
		        rx_avg = 0;
		        idX = 0;
	        }
	        }
	        ar_sX_[Recoil_Pr]= sX_cor;
	        
         	ar_sY_[Recoil_Pr] = sY_eY_cor; ar_eY_[Recoil_Pr] = sY_eY_cor2;
        }
        

    
    
    if (g (XB1_DOWN)){
    
        if(g(XB1_X)){	
        
        if (p(XB1_RB) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 1; save__(); b_f=1;}      
        if (p(XB1_LB) && Recoil_Pr) {ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 1; save__(); b_f=1;}     
        if (p(XB1_LT) && Recoil_Pr){ ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 10; save__(); b_f=2;}       
        if (p(XB1_RT) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 10; save__(); b_f=2;}
       
                           }
        if(g(XB1_A)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 1; save__(); b_f=1;}       
        if (p(XB1_LB) && Recoil_Pr) {ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 1; save__(); b_f=1;}    
        if (p(XB1_LT) && Recoil_Pr){ ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 10; save__(); b_f=2;}      
        if (p(XB1_RT) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 10; save__(); b_f=2;}
         
                           }
        if(g(XB1_B)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 1; save__(); b_f=1;}   
        if (p(XB1_LB) && Recoil_Pr) {ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 1; save__(); b_f=1;}    
        if (p(XB1_LT) && Recoil_Pr){ ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 10; save__(); b_f=2;}       
        if (p(XB1_RT) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 10; save__(); b_f=2;}
   
                           }
        if(g(XB1_Y)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 100; save__(); b_f=1;}     
        if (p(XB1_LB) && Recoil_Pr) {ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 100; save__(); b_f=1;}      
        if (p(XB1_LT) && Recoil_Pr){ ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 1000; save__(); b_f=2;}      
        if (p(XB1_RT) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 1000; save__(); b_f=2;}
        if (ar_tm_[Recoil_Pr] <=0) ar_tm_[Recoil_Pr] = 0; 
        
                           }
       btn (XB1_B); btn(XB1_Y); btn (XB1_XBOX); btn (XB1_X); btn (XB1_A);btn (XB1_RT);btn (XB1_RB); btn (XB1_LT);btn (XB1_LB);  
           }    
    
    }

    if(Recoil_Pr == 1) {ar_sY_[0] = ar_sY_[1]; ar_eY_[0] = ar_eY_[1]; ar_sX_[0] = ar_sX_[1]; ar_tm_[0] = ar_tm_[1];  f_clr = SkyBlue;}          
    if(Recoil_Pr == 2) {ar_sY_[0] = ar_sY_[2]; ar_eY_[0] = ar_eY_[2]; ar_sX_[0] = ar_sX_[2]; ar_tm_[0] = ar_tm_[2];  f_clr = Orange;}
    if(Recoil_Pr == 3) {ar_sY_[0] = ar_sY_[3]; ar_eY_[0] = ar_eY_[3]; ar_sX_[0] = ar_sX_[3]; ar_tm_[0] = ar_tm_[3];  f_clr = Pink;}
    if(Recoil_Pr == 4) {ar_sY_[0] = ar_sY_[4]; ar_eY_[0] = ar_eY_[4]; ar_sX_[0] = ar_sX_[4]; ar_tm_[0] = ar_tm_[4];  f_clr = Yellow;}

/*

                      ╔═╗╔╗╔╔╦╗╦   ╦═╗╔═╗╔═╗╔═╗╦╦               
    ──────────────────╠═╣║║║ ║ ║───╠╦╝║╣ ║  ║ ║║║───────────────
                      ╩ ╩╝╚╝ ╩ ╩   ╩╚═╚═╝╚═╝╚═╝╩╩═╝             

*/
if (no_recoil && WPN_1)

						 {
						  if(ar_sY_ < ar_eY_)
						  interval = 1;
						  else
						  interval = -1;
						  
						  iteration_point = (ar_tm_ / 10) / (abs(ar_sY_ - ar_eY_));
						  
						  if(!get_lval(FIRE))
  											{
										    AR_V = ar_sY_;
										    i_count = 0;
										    i_ = 0;
										  	}  
  						if(g(FIRE))
  									{if (AR_on_rumbles == 2){
								    AntiRecoil(AIM_X, ar_sX_);
								    if(!p_count())
								    AR_V = c();
								    else
								    AR_V = (ar_eY_);
								    AntiRecoil(AIM_Y, AR_V)
								    }
								    else{
								    AR_V = get_rumble_evil_ar();
								    AntiRecoil(AIM_Y, AR_V)
								    
										}
  									}
  if (AR_on_rumbles == 1)
  						{
  						 f_clr = Neon;
  						if (g(XB1_LS) && g(XB1_RS)) 
					      					{
									        if (p(XB1_LT)) 
									        				{
													          AR_S --;
													          notify(1);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 1;
					        								}
        									if (p(XB1_RT)) 
													        {
													          AR_S ++;
													          notify(1);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 1;
													        }
												
      										
									        if (p(XB1_LB)) 
									        				{
													          AR_S = AR_S - 10;
													          notify(2);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 2;
					        								}
        									if (p(XB1_RB)) 
													        {
													          AR_S = AR_S + 10;
													          notify(2);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 2;
													        }
											btn(XB1_LT); btn(XB1_LB); btn(XB1_LS);
											btn(XB1_RT); btn(XB1_RB); btn(XB1_RS); 
											}
  
  }
  }

  if (!script_on || edit) Led (Off);
 	else if (no_recoil && g(FIRE) && !rapid_fire_timer || g(FIRE) && no_recoil){b_f=1;}
 		else if (akimbo && !WPN_1) Led(White);
				else if (wpn_holster && !WPN_1 || rapid_fire && !WPN_1 || rapid_fire_timer && g(FIRE)) Led(Red);
  						else if (g(ADS) && rainbow_flash_indicator && running_p && !g(FIRE)) 
  																							{
																						    hue++;
																						    if (hue == 360) hue = 0;
																						    set_hsb(hue, 100, 100)
																						  	}
						else if (sniper && !!WPN_1) Led (Emerald);
				else if (no_recoil && ar_tm_ > 0){Led (f_clr);}
  		else Led(Blue);
  
  
  if(notify)
  {
  notifier += get_rtime();
  if(notifier < 150) set_rumble(1,75);
  else if(notifier < 400) reset_rumble();
  else
  {
  notify -= 1;
  notifier = 0;
  }
  }
 /*

                      ╔═╗╦  ╔═╗╔═╗╦ ╦╔═╗╦═╗                  
    ──────────────────╠╣ ║  ╠═╣╚═╗╠═╣║╣ ╠╦╝──────────────────
                      ╚  ╩═╝╩ ╩╚═╝╩ ╩╚═╝╩╚═                  

*/
  if (b_f >0 && b_f < 9)
					  {			
					  flasher += get_rtime();
					  if (flasher >=0 && flasher <= (b_f*400)) 
					  											{
					  											b_f_wait = 200; combo_run (FLASH);
					  											}
					  else if(flasher>=(b_f*400)) 
					  							{
					  							b_f=0;
					  							}
  
  }
 if (b_f==0 && combo_running (FLASH)) {combo_stop (FLASH); reset_leds(); flasher=0;}

  
 }
} 
combo STICKY_AIM {
  s(AIM_Y,xy_val(AIM_Y, _v));
  wait(_w);
  s(AIM_X,xy_val(AIM_X, _v));
  s(STRAFE,xy_val(STRAFE, _v));
  wait(_w);
  s(AIM_Y,xy_val(AIM_Y, _v * -1));
  wait(_w);
  s(AIM_X,xy_val(AIM_X, _v * -1));
  s(STRAFE,xy_val(STRAFE, _v * -1));
  wait(_w);
}

combo DANCE {
  s(PRONE, 100);
  wait(30);
  wait(60);
  s(PRONE, 0);
  wait(30);
  wait(60);
  s(XB1_UP, 100);
  wait(30);
  wait(60);
  s(XB1_UP, 0);
  wait(30);
  wait(60);
}
combo BANGER {
  s(FIRE, 100);
  wait(40);
  s(FIRE, 0);
  wait(150);
}
combo STRAFER { 
	set_val(STRAFE,-100); 
	wait(strafe_time);
	set_val(STRAFE, 100);  
	wait(strafe_time);
}   
combo JUMPER { 
	set_val(JUMP,100); 
	wait(jump_time);
	set_val(JUMP, 0);  
	wait(jump_time);
} 
combo BURSTER {
  s(FIRE, 100);
  wait(burst_hold);
  s(FIRE, 0);
  wait(burst_rest);
}
combo AKIMBO {
  s(FIRE, 100);
  s(ADS, 100);
  wait(wtime);
  s(FIRE, 0);
  s(ADS, 0);
  wait(wtime);
}

combo FLASH{
Led (f_clr);
wait (b_f_wait);
Led (Off);
wait (b_f_wait);
}
combo RAPID_FIRE {
  s(FIRE,100);
  wait(wtime);
  s(FIRE,  0);
  wait(wtime);
}

combo CANCEL_SLIDE_MW {
  s(PRONE, 100);
  wait(120);
  s(PRONE, 0);
  wait(60);
  s(PRONE, 100);
  wait(50);
  s(PRONE, 100);
  s(JUMP, 100);
  wait(60);
  s(PRONE, 0);
  s(JUMP, 100);
  wait(10);
  s(JUMP, 0);
}
    
combo CANCEL_SLIDE {
  s(PRONE, 100);
  wait(80);
  s(PRONE, 0);
  wait(20);
  s(SPRINT, 0);
  s(ADS, 100);
  wait(10);
  s(ADS, 0);
  s(PRONE, 100);
  s(SPRINT, 100);
  wait(20);
  s(PRONE, 0);
  s(SPRINT, 0);
  wait(20);
}
combo AUTO_PING {
	s(BTN_PING,100);
	wait(20);
	s(BTN_PING,0);
	wait(20);
	s(BTN_PING,100);
	wait(20);
	s(BTN_PING,0);
}
combo FIELD {
s(TAC_G, 100);
s(LETHAL, 100);
wait(150);
}

combo CROUCH {
	s(PRONE,100);            
	wait(150);                        
}  
combo CANCEL_RLD {
  s(XB1_Y, 100);
  wait(30);
  wait(20);
  s(XB1_Y, 100);
  wait(30);
  wait(20);
  b_reload=FALSE;
}
combo EASY_RUN{
  s(SPRINT,100);
  wait(30);
  wait(100);
}
combo OLED_CS{
wait(6000);
cls_oled(0);
}
combo QUICK_S {  
s(FIRE,0); 
s(ADS,100); 
wait(quick_scope_time);    
s(ADS,100); 
s(FIRE,100);
wait(50); 
}
combo SCREEN_START {
  cls_oled(0);
  P_s(0, 0, 128, M, B_K, C_1[0], sizeof(C_1));
  P_s(0, 22, 128, XS, W, C_2[0], sizeof(C_2));
  wait(1000); 
  cls_oled(0);
  }
function notify_pr(Recoil_Pr){
notify  = Recoil_Pr
}


function save__ (){
  s_pv(SPVAR_1, ar_sY_[1]);
  s_pv(SPVAR_2, ar_eY_[1]);
  s_pv(SPVAR_3, ar_tm_[1]);
  s_pv(SPVAR_4, ar_sX_[1]);
  s_pv(SPVAR_5, ar_sY_[2]);
  s_pv(SPVAR_6, ar_eY_[2]);
  s_pv(SPVAR_7, ar_tm_[2]);
  s_pv(SPVAR_8, ar_sX_[2]);
  s_pv(SPVAR_9, ar_sY_[3]);
  s_pv(SPVAR_10, ar_eY_[3]);
  s_pv(SPVAR_11, ar_tm_[3]);
  s_pv(SPVAR_12, ar_sX_[3]);
  s_pv(SPVAR_13, ar_sY_[4]);
  s_pv(SPVAR_14, ar_eY_[4]);
  s_pv(SPVAR_15, ar_tm_[4]);
  s_pv(SPVAR_16, ar_sX_[4]);
  notify (1);
}

function l (){
ar_sY_[1]	= pv(SPVAR_1, 0,100, 20);
ar_eY_[1]	= pv(SPVAR_2,-100,100, 0);
ar_tm_[1] 	= pv(SPVAR_3, -30000,30000,5000);
ar_sX_[1] 	= pv(SPVAR_4,-100,100, 0);
ar_sY_[2]	= pv(SPVAR_5, 0,100, 20);
ar_eY_[2]	= pv(SPVAR_6,-100,100, 0);
ar_tm_[2]	= pv(SPVAR_7, -30000,30000,5000);
ar_sX_[2]	= pv(SPVAR_8,-100,100, 0);
ar_sY_[3]	= pv(SPVAR_9, 0,100, 20);
ar_eY_[3]	= pv(SPVAR_10,-100,100, 0);
ar_tm_[3]	= pv(SPVAR_11, -30000,30000,5000);
ar_sX_[3]	= pv(SPVAR_12,-100,100, 0);
ar_sY_[4]	= pv(SPVAR_13, 0,100, 20);
ar_eY_[4]	= pv(SPVAR_14,-100,100, 0);
ar_tm_[4]	= pv(SPVAR_15, -30000,30000,5000);
ar_sX_[4]	= pv(SPVAR_16,-100,100, 0);
notify_pr(Recoil_Pr); b_f=(Recoil_Pr);
}


function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < 25)  
    return f_val;    
    return get_val(f_axis);     
} 

combo CH {
    s(SPRINT,0);
    wait(60);
    s(SPRINT,100);
    wait(110);
    s(SPRINT,0);
    wait(110);
}

function AntiRecoil (axis, recoil){
  
  RY = current_y;
  RX = current_x;
  
  if (g(FIRE) && (isqrt(RX*RX + RY*RY)) <= abs(recoil))
  {
  if(abs(RY) <= abs(recoil))
  {
  s(axis,(recoil * (100 - abs(g(axis)))) / 100 + g(axis));
  }
  }
}
function dz(f_axis,f_val) {
    f_val = get_val(f_axis);
    if(abs(f_val) < 8) {
        set_val(f_axis,f_val); 
        return f_val;
    }
    return f_val;
}
function P_s(x, y, width, font, colour, str, strSize) {
  if (width > 0 && strSize > 0) {
    width = (width - (strSize - 1) * FONT_STATS[font][F_W]) / 2;
    if (width > 0) x += width;
  }
  printf(x, y, font, colour, str);
}
int _ret;
function get_rumble_evil_ar()/*credits: sweet evil (extract)*/
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_S);
	}

	return 0;	
}
function ol(){
combo_run (OLED_CS);
}