/*..~MMMMZZ$$$$Z8MMO$$$$$$OMN$$$$$ON$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$Z$$$$$$D$$$ZMZ$$$$MM$$$$$ZMMZ$$$$$8MMM$$....,MMMM:........MMMMMM.........OMMMMMMM,....... ..................................
...,MMMMO$$$$:.. . ...I..IMD  ?ZZ..?7..$$$=.  .:ZZ ........$. .....7, .. .7$$$$$$$$O7..~ONZ$.  M?...$ZMM?...$$OMMMZ$....,MMMM:.......:MMMMMN.........DMMMMMMM........ ..................................
..,8MMMDZ$$$$I7Z? .+??$..,DI  ,Z$. $7 .$$...I7. .Z???. ,???$. :????$, .+= .,$$$$$$$Z....$M$$. .M?...:ZMM.  .$$OMMMZ$....,MMMM,......,.MMMMMD.........MMMMMMMN........ ..................................
..?MMMM$$$$$$ZMM7 .$$$$? .Z. ..M:..$7 .$$  .$ZZZZ$Z$$..:$$$$. =$$$ZZ,  $$$..=$$$$$$I..,.:NZ$. .M? ...$MZ.:  $$ZMMMZ$....~MMMM.....,..,MMMMM$.........MMMMMMMZ,....... ..................................
.,MMMMZZ$$$$ZMMN?..$$$ZM..7. ..7. ?$Z .7$$,. ..?Z$$ZZ  :$$$$ .....~$,  $$$. ,$$$$$$..+$ .OZ$.. MI .? ~M..I .Z$OMMMZ$....IMMMM....:...:MMMMM=........~MMMMMMM=........ ..................................
.DMMM7Z$$$$$MMMZ? .$$ZMM. ..,D....Z87..7Z$$$$7.. $$$$  :$$$$ .=$$$$Z,  $$$. ~$$$$$:. ::. .ZZ.. MI .$. 7 ~+. $$OMMMZ$....OMMMO..:.....?MMMMM,........OMMMMMMM,........ ..................................
=MMMM,$$$$ZDMMZ$?..$$DMZ?...OM.  ,O$7 .7$..:Z$=..$$$$ .:$$$$ .=$$$ZZ,  $7,  Z$$$$$... ..  IZ...MI..$I...Z=  $$8MMMZ$....MMMM=.,......OMMMMM.........MMMMMMMD......... ..................................
NMMMI.Z$$ZZMMN$$?  $ZMD$$.  MZ~  ?OZ7..$$$... . ?$$$$..:Z$$$. . . .7,.....~$$$$$$,..$$$$.  $.  M?. $$..?$= .$$NMMD$$...,MMMM:........MMMMMO........:MMMMMMMI........ .        ..        ..    ..  ..    
MMMM,.ZZ$$NMMZ$$$$$$MMZ$$$ZDNZ$$ZDZ$$$$$$$$$$$$$Z$$$$$$$$ZZ$$$$$Z$$$$$$$$$$$$$$$$$$$$$$$$D$Z$ZDM$$$$$NMO$Z$$$$MMMZZ$...IMMMD,.......,MMMMM=........$MMMMMMM:........ .        ..        ..    ..  ..    
MMM$.,Z$$ZMMMZ$$$$$ZMNZ$$$ZMO$$$ZO$$$$$$$$$$$$$$$$$$$$$$$$$Z$$Z$$$$$$$$$$$$$$$$$$$$$$$$$$NZ$$$MMZ$$$$MM$$$$$$$MMMZ$$:..NMMM?........+MMMMM,........NMMMMMMM...........  ....  ..  ....  ..  ....  ..  ..
MMN,:,$$$NMMO$$$$$$MMZ$$$$DM$$$$N$$$$$$$$$$$$$$$$$$$$$$$$$$$ZZ$$$$$$$$$$$$$$$$$$$$$$$$$$$D$$$$MO$$$$OMD$$$$$$8MMDZ$$..=NMMM,........DMMMMZ........~MMMMMMM+......... ...      ..        ..              
MMD:.,Z$$MMMZ$$$$$ZMMZ$$$$MNZZ$$NZ$$$$$$$$$Z$$$$$$$$$$$$$$ZZ$$ZZ$$$$$$$$$$$$$$$$$$$$$$$$8Z$$ZOM$$Z$$NMZ$$$$$ZMMMZZ$$..OMMMO........,MMMMM:........OMMMMMMM.........~........  ..  ....  ..  ....  ..  ..
MM+.,~Z$OMMM$$$$$$I7I+$$$Z$?++$+I7$$+=7$$++I$$$$+++++++?7++++I$$Z$I++$+++++++++Z?++$$$$?=~?$ZMD+++ZZMZ++$$$$OMMNZ$$$:.MMMM:........$MMMMN........,MMMMMMM$.........O........  ..  ....  ..  ....  ..  ..
MM.,.,Z$NMMD$$$$$$. ..$$$Z   .$ .~$I..=ZI .$$$$$ ..    ~? .  ..:$Z=. $   .  ...Z, .$$=.  ...+MZ  .?NM:. $$$$MMM$$$$Z,$MMMD,.......,MMMMM=........OMMMMMMM,........:D..  ..  ....  ..  ....  ..          
MN....ZZMMM8$$$$$$. ..=$$~....$:..$,  .$: .$$$$$..,$$$ZZ+ .$$7. ~$=..$$$$...$$$$,..$7 .I$$7..7$. . DD: .$$$OMM8$$Z$Z,MMMM:..,.....IMMMMD.........MMMMMMMO,........$D....      ..        ..    ..  ..    
M$....$$MMMZ$$$$$Z,.:..$Z..,..$Z..$. ..7 .=$$$$$..  ...$+ .$$$, .$=..Z$$$...$$$$,..$:. $$$Z..,$  : .7: .$$ZMMN$$Z$$Z8MMM$.........MMMMM:........8MMMMMMM,........,MD........  ..  ....  ..  ....  ..  ..
M+....ZZMMMZ$$$$$Z, ,I ~,.8,..$Z. :.,= : .$$$$$$...II?I$+ .$$$...$=. $Z$$...$$$$,. $:..Z$$D  ,$. =M..: .$ZMMM$ZZ$$ZOMMMM.......:.8MMMMO........~MMMMMMM?.........?MD.         ..        ..              
M,....ZZMMMZZZ$$$Z, .$.. .M...$Z=...IO. ..$$$$$$..,$$Z$$+ .$$7..~$=. $$$Z...$$$$,..Z7 .?$OO .I$. =Z7   .$DMMZZ$$$$ZMMMM=........~MMMMM,........NMMMMMMN..........NMD.         ..        ..              
M,....ZZMMMZ$$Z$$Z,..$?  7M...$$N. .Z8.  ~$$$$$$    ...=+.....,~$$=..$$$$...$$$$, .Z$+..   .=$$. :$$+...8MMO$$$$$$NMMMZ........,MMMMM=........?MMMMMMM=.........+MMD    ....  ..  ....  ..  ....  ..  ..
M.....ZZMMMO$$$$ZZ$$?ZZ++ZM7+?$$M?+?$Z7++$$$$$$Z+++++++II++++7Z$$$I++$$$$++?$$$$?++$$$Z$::?Z$ZN$??$$$?+IMMO$$$$$Z8MMMM.........OMMMMO........,MMMMMMM8..........MMMD.   ..  ....  ..  ....  ..          
M.....$ZMMM8$$$$$ZMMZ$$$$$NM$$$$ZM$Z$$D$$$$$$Z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ZZ$$$$$$ZON$$Z$$ZMMZ$$$$$$DMMZ$$$$$$OMMMM.........IMMMMN.,......,MMMMMMMN..........IMMMD          ..        ..    ..  ..    
M.....Z$MMMN$$$$$$MMO$$$$$OMZ$$$$M8$$$$N$$$Z$$$$7777$$$77$$$77$$$7777$$$$$7+7Z$$777$NO$ZZ7?$MNZ$7777ZNMMZ$$$$$ZZMMMM~........~MMMMM.. .,....ZMMMMMMM,.........,MMMMD          ..        ..    ..  ..    
M.....ZZMMMMZ$$$$$DMN$$$$$ZMN$$$$ZMZ$$$ZDZ$$$$$$..:,..Z..$$..$$$$..:,.,$?..~..7Z..=.,7$?..I..$$ .~:~MMN$Z$$$$$OMMMMO,.......:MMMMM:........=MMMMMMM?..........OMMMMD.   ....  ..  ....  ..  ....  ..  ..
M.....$$NMMMZ$$$$$OMM$$$$$$DMZ$$$$DM$$$$O8$Z$$$$..$Z .$Z .,.$$$$$..Z$..Z .Z$Z..Z..$Z  $..MN$$$$.~ZOMMD$$$$$$ZZMMMMO$.......:MMMMM~........,MMMMMMMO,.........=MMMMMD.         ..        ..              
M.....$ZOMMMO$$$$$ZMMZ$$$$$ZMNZZ$$ZMDZ$$ZODZ$$$$. ,. ,$$I..?$$$$$. ...~$. $$Z..Z..$$. 8 .Z,..~$ .,,~O$$$$$$ZZMMMMOZ$......:MMMMM+........,NMMMMMMN.,,........MMMMMMD    ....  ..  ....  ..  ....  ..  ..
M,.....$$MMMM$$$$$$NMMZZ$$$$8M8$$ZZZNNZ$$$ZM$$$$ .O$. 7$$. $$$$$$. $$..Z: ?Z~.+$..Z+.~D,.+$I ~O ~M8$ZZ$$$$$DMMMMZ$7......?MMMMM,.........MMMMMMMM:=,.,,.:~..DMMMMMMD.   ..  ....  ..  ....  ..          
M=......,NMMMZ$$$$$ZMMZ$$$$$ONMZ$$$$$MNZ$$$$D8$$... .7Z$$..$$$$$$....,$Z$?...7$$...,ZZ$$?...~ON.....$Z$$$ZNMMMN$I.,.....$MMMMM:........,NMMMMMMN=,........=$MMMMMMMD.   ..  ....  ..  ....  ..
Thanks to Sweet Evil for his awsome tracking,Thanks to SS_NICOLAI for his AimAssist,Thanks to Moderslife and Anus_Power,Thanks to Crescens for his Aim correctins,Thanks to TaylorDrift21 for his easy to use menu
Credits to all the Cronus Devs ;)
===========================================================
		  *** M e n u  N a v i g a t i o n ***
===========================================================
Enter Mod Menu             = Hold L2/LT & Press Options 
Exit Mod Menu              = Press Circle/B
Enter Edit Menu            = Press Cross/A
Exit Edit Menu             = Press Circle/B 
Enable/Disable Drive Mode  = Press ADS and Double Tap Right 
Change Profiles In ModMenu = Press TRIANGLE/Y 
Turn Mods ON/OFF           = Press UP/Down
Edit Mod Values            = Hold L2/LT & Press Left/Right
*///----KILL_SWITCH----\\ 
    define KILL_SWITCH_BUTTON = PS4_L3;    // Double Tap This Button To Activate & Deactivate Kill Switch
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
 const int16 Lookup_Table[] ={
    0,   17,  34,  52,  69,  87,  104, 121, 139, 156, 
    173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
    342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
    500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
    642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
    766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
    866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
    939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
    984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
    1000
}
init {
mvt_direction = 1;
    UPDATE_TIME = REFRESH_RATE;
	MAX_RADIUS = PolarRadius/PolarABoost;
    AA_RADIUS = MAX_RADIUS;
    RadialEffect = TRUE;
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	scan_angle = 90 * inverted;
Load(); 
 } 
	
main { 
        
       vm_tctrl(VmSpeed);
       ActivateAllButtons();
       Buttons(Buttons); 
       Menu();
       
aim_x = get_ival(PS4_RX);
aim_y = get_ival(PS4_RY);
aim_lx = get_ival(PS4_LX);
aim_ly = get_ival(PS4_LY);

if(!ModMenu && !EditMenu) 
		{
	    	if(ToggleBlockRumble) 
	        {
				block_rumble();
	        } 
	     	deadzone(ADS,FIRE,99,99);
	     	if (ProfileButton)
			{
			
			if(get_val(ADS) && event_press(PS4_TRIANGLE)){
			SelectedProfileIdx =!SelectedProfileIdx;
			if(SelectedProfileIdx)
			ProfileIdx = 1;
			else 
			ProfileIdx = 0;
			if(ModMenu) 
			DisplayMenu  = TRUE; 
	        else
	        DisplayTitle = TRUE;	
			}
			
			if(event_release(PS4_TRIANGLE) && get_ptime(PS4_TRIANGLE) <= 380)
			{
				SelectedProfileIdx =!SelectedProfileIdx;
				if(SelectedProfileIdx)
				ProfileIdx = 1;
				else 
				ProfileIdx = 0;
				if (ModMenu) 
	    		DisplayMenu  = TRUE; 
	        	else
	            DisplayTitle = TRUE;
				}
			}

if (event_press(SWAP )) bRumble_A_ValueFound = bRumble_B_ValueFound = maxRumbleA = maxRumbleB = 0;
		   else if (get_ptime(SWAP ) < MAX_TIME_TO_CHECK)
		{
			if (!bRumble_A_ValueFound)
			{
				if (maxRumbleA > get_rumble(RUMBLE_A)) bRumble_A_ValueFound = TRUE;
				maxRumbleA = max(maxRumbleA, get_rumble(RUMBLE_A));
				maxRumbleA = (maxRumbleA * 255) / 95;
			}

			if (!bRumble_B_ValueFound)
			{
				if (maxRumbleB > get_rumble(RUMBLE_B)) bRumble_B_ValueFound = TRUE;
				maxRumbleB = max(maxRumbleB, get_rumble(RUMBLE_B));
				maxRumbleB = (maxRumbleB * 255) / 95;
			}
		}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
if (Kill_Switch_Toggle) {
    if(double_click(KILL_SWITCH_BUTTON) && !ModMenu && !EditMenu) {
        KS = !KS
   //DriveMode
 if(KS  == 0){
 combo_run(KilllSwitch);
 combo_run(Blink);LedOn = 150;LedOff = 300;
 } 
 else if(KS  == 1){
 combo_run(Notify);c=2;b=0;
 combo_run(KilllSwitch);
 combo_run(RumbleOff);
    }
        }
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\    
    if(KS) {
if(PolarAimAssist [ProfileIdx] || PolarAssist [ProfileIdx])
{
if(get_val(FIRE) > 25 && AA_BOOSTER)
{
aim_lx += get_polar(POL_RADIUS, sin(POL_ANGLE));
aim_ly += get_polar(POL_RADIUS, cos(POL_ANGLE));
aim_lx *= 2;
aim_ly *= 2;
POL_ANGLE += POL_MAX;
POL_ANGLE = POL_ANGLE % 360;
}
else
{
POL_ANGLE = 0;
}
} 
if((get_val(ADS) > 50) || (get_val(FIRE) > 50)){
	if(UPDATE_TIME >= REFRESH_RATE)
			{					
				block(aim_x, REFRESH_RATE);
				block(aim_y, REFRESH_RATE);
				
				RUMBLE = get_mvt_direction(aim_x, C_RX);
				
				if(RUMBLE != 0)
				mvt_direction = RUMBLE;
				
				UPDATE_TIME = 0;	
				
                C_RX = aim_x;
                C_RY = aim_y;

     if(SCANNING)
{
if(TRACKING_BOT == track_00)
{
TRACKING_BOT = track_01;
}
else if(TRACKING_BOT == track_01)
{
aim_x += getTRACKING_STRENGTH(mvt_direction, 1);
TRACKING_BOT = track_02;
}
else if(TRACKING_BOT == track_02)
{
TRACKING_BOT = track_03;
}
else
{
aim_x += getTRACKING_STRENGTH(mvt_direction, 0);
TRACKING_BOT = track_00;
}
}
}
 if (ProgressionAA [ProfileIdx]) {        
// if (get_ival(ADS) && (get_val(FIRE))){
if (get_ival(FIRE)){
 RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin,ProgPowerMax,ProgPowerInc,RadFlow,1);
 AngleFlow = PolarFlow(AngleFlow,ProgWaitMin,ProgWaitMax,ProgWaitInc,AngFlow,2); }
if (get_ival(FIRE) && abs(get_ival(RX)) <= ProgRelease && abs(get_ival(RY)) <= ProgRelease) {
 combo_run(Progression);
  } else if (event_release(FIRE)){
 combo_stop(Progression);
  }
  }
  if (Modulation [ProfileIdx]  == TRUE){
		horizontal = get_polar(SCAN_STRENGTH/2, sin(scanAngle));
		vertical = get_polar(SCAN_STRENGTH/2, cos(scanAngle));
   if(mvt_direction == 1)
       {
		aim_x += get_polar(SCAN_STRENGTH, sin(scan_angle)) + horizontal;
		aim_y += get_polar(SCAN_STRENGTH, cos(scan_angle)) + vertical;
	   }
	else
	   {
		aim_x += get_polar(SCAN_STRENGTH, cos(scan_angle)) + vertical;
		aim_y += get_polar(SCAN_STRENGTH, sin(scan_angle)) + horizontal;
	   }
	  	    AngleBoost =  (angle2 + 16)/4;
		    scan_angle = (scan_angle + AngleBoost) % 360;
			ScanAngle += (scanAngle + 1) % 360;
	   } 
if(PolarAimAssist [ProfileIdx]) {	        

if(RadialEffect == FALSE)
{
AA_RADIUS -= 1;
if(AA_RADIUS < MAX_RADIUS)
RadialEffect = TRUE;
}
else
{
AA_RADIUS += 1;
RUMBLE = AA_RADIUS + 1;
if(RUMBLE >= PolarRadius)
RadialEffect = FALSE;
}
if (RadialEffect == TRUE)
{
if(mvt_direction == 1)
{
aim_x += get_polar(AA_RADIUS, sin(angle));
aim_y += get_polar(AA_RADIUS, cos(angle));
}
else
{
aim_x += get_polar(AA_RADIUS, cos(angle));
aim_y += get_polar(AA_RADIUS, sin(angle));
}
angle += angle_2;
}
else
{
RUMBLE = PolarRadius/2;
RUMBLE2 = PolarRadius/4;
if(mvt_direction == 1)
{
aim_x += get_polar(random(RUMBLE,PolarRadius), sin(angle));
aim_y += get_polar(random(RUMBLE,PolarRadius), cos(angle));
}
else
{
aim_x += get_polar(random(RUMBLE,PolarRadius), sin(angle));
aim_y += get_polar(random(RUMBLE,PolarRadius), cos(angle));
}
angle = ((angle + random((PolarAngle/2),PolarAngle))%360);
angle = angle % 360;
}}
if(_STEADY_AIM == TRUE)
{
aim_x = getSTEADYaim(aim_x, STEADY_RESOLUTION);
aim_y = getSTEADYaim(aim_y, STEADY_RESOLUTION);
} 
set_val(PS4_RX, clamp(aim_x, -100, 100));
set_val(PS4_RY, clamp(aim_y, -100, 100));
UPDATE_TIME += get_rtime();
}
else
{
UPDATE_TIME = 0;
UPDATE_TIME = REFRESH_RATE;
angle = 0;
scan_angle = 0;
AA_RADIUS = MAX_RADIUS;
TRACKING_BOT = track_00;
set_val(PS4_RX, aim_x);
set_val(PS4_RY, aim_y);
}
set_val(PS4_LX, clamp(aim_lx, -100, 100));
set_val(PS4_LY, clamp(aim_ly, -100, 100));

  if(PolarAssist [ProfileIdx])
{
				if(ToggleADirection == TRUE) { 
					AngleDirection = (get_val(PS4_RX) > 0);
				}
				T_RX = get_val(PS4_RX);                                
				T_RY = get_val(PS4_RY); 
				RightStick = isqrt(pow(ret,2) + pow(RY,2));
				ActualMagnitude = isqrt(pow(T_RX, 2) + pow(T_RY, 2));   
				MaxMagnitude = (ActualMagnitude < 100);                                  
				angle = angle % 360;
				Tracking = (Tracking + TrackingSpeed) % 360;
			    CosAngle = LinearArray[(angle + 270) % 360];  
				SinAngle = LinearArray[angle % 360];
				CAngle = LinearArray[(Tracking + 270) % 360];  
				SAngle = LinearArray[Tracking % 360];
				if(TaylorTracking){ 
				Tracker1 = (TrackingSize * SAngle/100);
        		Tracker2 = (TrackingSize * CAngle/100);
        		} 

	            if ((abs(get_val(PS4_RX)) < 10) * (abs(get_val(PS4_RY)) < 10)) 
			    	angle += AdsSpeed + GetAngle;
			    else 
			    	angle += PolarAngle + GetAngle;
			    
				if(FireBoost == TRUE) 
				{
					if(get_ival(FIRE))
					{
						TwistedRumble = get_rumble(RumbleToUse());
						GetAngle = PolarABoost;
					
	    		        if(TwistedRumble > 10 && TwistedRumble < 90) 
	    		        {
	    				    PolarStrength  = (PolarRBoost + TwistedRumble / 6); 
	    				    TwistedRumble = 0;
	    			    }
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	GetShapes(PolarRBoost/2); 
	    			    }
	    			    else
	    			    {
							GetShapes(PolarStrength/2); 	
				    	} 
				    }
				    if(event_release(FIRE)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}	
	    		if(get_val(ADS) || get_val(FIRE))
	    		{
		        	if(ActualMagnitude < PolarRadius)           
		        	{
			   			SinAngle -= T_RX;                                                              
						CosAngle -= T_RY;
					}
					else
					{
						SinAngle = (SinAngle * (200 - ((abs(T_RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(T_RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
					}
					if(!FireBoost == TRUE || !get_rumble(RumbleToUse())){
						if(RightStick > PolarRadius){
							GetShapes(PolarRadius);
						}else{
							GetShapes(AdsRadius);
						}
					}
			    	PolarStrength = 0; 
			        TwistedRumble   = 0; 
		   		 } 
			}
if (STICKY_HEADSHOT){
if (get_val(ADS) && get_val(FIRE)){
tval= abs(abs(HEADSHOT_IN_Y) - abs(get_ival(HEADSHOT_STICK)))
if( tval >= 15 ) {
HEADSHOT_TIME=0
} else {
POINT_DIR_UP_V= HEADSHOT_TIME / abs(POINT_DIR_UP_D)
}
if(POINT_DIR_UP_D <= 0) {
POINT_DIR_UP_V = inv(POINT_DIR_UP_V)
}
if(HEADSHOT_TIME >= 1) {
HEADSHOT_IN_Y = get_ival(PS4_RY)
tval=get_val(HEADSHOT_STICK)
tval=clamp1(tval + POINT_DIR_UP_V ,-100,100)
set_val(HEADSHOT_STICK,tval)
HEADSHOT_TIME=HEADSHOT_TIME - get_rtime()
if(HEADSHOT_STICK != RX && get_val(RX) <= 10) {
set_val(RX,0)
} else if(HEADSHOT_STICK != RY && get_val(RY) <= 10) {
set_val(RY,0)
}}}}
 //  if(AS){
 ///  if(get_val(FIRE)) combo_run(AS);}
if (AR){
   if(get_val(ADS) && get_val(FIRE)){
    combo_run(AR);
 if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2) {
combo_stop(AR);}}}
 //DYNAMIC RECOIL  
           if (DYNAMIC_RC [ProfileIdx]){
   if(get_val(ADS)) {
   if(get_val(FIRE) > 250) {
      
      set_val(RY,Ry = clamp(get_val(RY), -100, 100));
      set_val(RX,Rx = clamp(get_val(RX), -100, 100)); 
     
if (Ry < mg){
      modi_recoil =(recoil_Y*recoil_Y+recoil_X*recoil_X);
      set_val(LY,recoil_Y /modi_recoil*(modi_recoil+mg));
      set_val(LX,recoil_X /modi_recoil*(modi_recoil+mg));
        }
if (Rx >  mg) {
  set_val (RY,true_Ry = (true_radius-mg)/true_radius*RY);
  set_val (RX,true_Rx = (true_radius-mg)/true_radius*RX);
 
  set_val (LY,altrecoil_y = recoil_Y - recoil_Y*80/(100-mg)*true_radius);
  set_val (LX,altrecoil_x = recoil_X - recoil_X*80/(100-mg)*true_radius);
}}}
if(get_val(ADS) && get_val(FIRE)) {
   set_polar(POLAR_RS, polar_angle, antirecoilStrength + 3);       
        antirecoilStrength = antirecoilStrength - 3;
        if(antirecoilStrength < recoil_drop) antirecoilStrength = recoil_drop;
        else if(event_release(ADS))antirecoilStrength = antirecoilStrength;
       }
     if(!get_lval(FIRE)) {
       ar_y = Starting_Anti_Recoil_Value;
       i_cnt = 0;
       i_num = 0;
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\ 
    //--RT
    if(get_val(FIRE)) {
        if(!p_complete())  
            ar_y = p_val();
        else
            ar_y = Ending_Anti_Recoil_Value;
        //--set RY to anti recoil value
        set_val(RY,y_val());//30
    }}}
if  (ANTIRECOOIL) {
      if (get_val(ADS) && get_val(FIRE) && get_rumble(RUMBLE_A))
      {
      combo_run(RECOIL); } 
      if(abs(get_val(LY)) < 10 && abs(get_val(LX)) < 10 ){        
        set_val(LY,0);                                                
        set_val(LX,0); }                                           
      if(abs(get_val(RY)) < 10 && abs(get_val(RX)) < 10 ){         
        set_val(RY,0);                                                 
        set_val(RX,0);                                                
       }
       else
       {
      if(abs(get_val(RY)) > DEFAULT_VERTICAL + 2 || abs(get_val(RX)) > DEFAULT_VERTICAL + 2) {
        combo_stop(RECOIL); 
        }  }}  
if (Anti_Recoil_Mod) {
if (get_ival(ADS) && get_ival(FIRE)){
		anti_recoil = get_val(RY) + ANTI_RECOIL_Vertical;
		if (anti_recoil > 100) anti_recoil = 100;
		set_val(RY, anti_recoil);
		anti_recoil_H = get_val(RX) + ANTI_RECOIL_Horizontal;
		if (anti_recoil_H > 100) anti_recoil_H = 100;
		set_val(RX, anti_recoil_H);
	}
	}
if(BUNNY_HOP) {
if (get_ival(JUMP) && get_ptime(JUMP) > 350){
combo_run(BUNNYHOP);}
else{
if(combo_running(BUNNYHOP))
combo_stop(BUNNYHOP);
}}
if(CancelSlide == 1 || CancelSlide == 2)
    {
if((get_val(JUMP))||(get_val(PS4_LY) < -70) || (get_val(PS4_LY) > 70) || (get_val(PS4_LX) < -70) || (get_val(PS4_LX) > 70))
        {
	if(CancelSlide == 1 && event_release(CROUCH))
		combo_run(CancelSlideMW)
	else if(CancelSlide == 2 && event_release(CROUCH))
		combo_run(CancelSlideCW) 
							
	if(CancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(ADS) && event_release(CROUCH)))
		combo_stop(CancelSlideMW)
		                    
	if(CancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(ADS) && event_release(CROUCH)))
		combo_stop(CancelSlideCW)
		}
	} 
//--auto run                                                                                       
  /*
  if(auto_run &&!get_val(ADS) && !get_val(FIRE) && get_val(LY) < -95)       
    combo_run(SPRINT); 
    */
if(!get_val(ADS) && event_press(FIRE)){//|| get_val (FIRE)) {  
if (get_val(FIRE)){
lock = !lock;
if(lock) {
 combo_run(Aim_Assist_Perfection); 
 }}}
 if(Joystick_calibration == FALSE){
       RX_Axis_Joystick_calibrate = get_val(RX); 
       RY_Axis_Joystick_calibrate = get_val(RY); }
       Joystick_calibration = TRUE;    { 
       X_Last_Value = X_Current_Value;
       Y_Last_Value = Y_Current_Value;
       X_Current_Value = get_lval(RX) - RX_Axis_Joystick_calibrate;
       Y_Current_Value = get_lval(RY) - RY_Axis_Joystick_calibrate;
       }
if (FINE_AIM){
if (get_val(ADS)){ // || get_ival(FIRE)){ 
       if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit){    
       if(abs(X_Last_Value - X_Current_Value) < 15){
       combo_stop(Aim_Assist_Perfection);
       Sampling_Done = FALSE;
        if(get_val(PS4_LX) > 95){ 
        combo_stop(Fine_Tune_Aim);
        fine_pulse = 0;
        combo_run(spiroide_Aim_Assit);}
   else {
        combo_stop(spiroide_Aim_Assit);
        spiroide_pulse = 0;
        combo_run(Fine_Tune_Aim);}}}
   else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit){ 
        combo_stop(Fine_Tune_Aim);
        combo_stop(spiroide_Aim_Assit);
        spiroide_pulse = 0;
        fine_pulse = 0;
        combo_run(Aim_Assist_Perfection);}
   else {
        combo_stop(Fine_Tune_Aim);
        combo_stop(spiroide_Aim_Assit);
        combo_stop(Aim_Assist_Perfection);
        spiroide_pulse = 0;
        fine_pulse = 0;
        Sampling_Done = FALSE;}
        }}   
if (AA_BOOSTER) {
if     (get_ival(ADS) && 
     get_ival(FIRE)){
       combo_run(AA_BOOST);
    }
    else if (event_release(FIRE)){
    combo_stop(AA_BOOST);
    }}
if(Triple_Sticky [ProfileIdx]) {
        if(get_ival(ADS) && !get_ival(FIRE)) {
    combo_run(TRIPLE_STICKY);
        Aim_Val  = ADS_Size;
        Wait_Val = ADS_Wait_Value;
       // a = random(Ads_Strafe_Min, Ads_Strafe_Max);
    } else if(get_ival(ADS) && get_ival(FIRE)) {
    combo_run(TRIPLE_STICKY);
        Aim_Val  = ADS_FIRE_Size;
        Wait_Val = ADS_FIRE_Wait_Value;
        a = random(AdsFire_Strafe_Min, AdsFire_Strafe_Max);
    } else if(!get_ival(ADS) && get_ival(FIRE)) {
    combo_run(TRIPLE_STICKY);
        Aim_Val  = HIPFIRE_Size;
        Wait_Val = HIPFIRE_Wait_Value;
        a = random(Fire_Strafe_Min, Fire_Strafe_Max);
    } else if(!get_ival(ADS) && !get_ival(FIRE)){
    combo_stop(TRIPLE_STICKY);
}}
if (JUICY_STICKY){
if(get_ival(ADS)){
 combo_run(STICKY_AIM);}
 else combo_stop(STICKY_AIM);}  
if (sticky_aim) {
   if //(get_val(ADS) && 
   (get_val(FIRE)){ 
   combo_run(Sticky_AA);}
  else combo_stop(Sticky_AA);}      
 if(holdbreath[ProfileIdx] == 1) { 
    if(get_val(ADS)) set_val(SPRINT, 100);
    if(get_val(ADS) && get_ptime(ADS) > 200)
	combo_stop(HOLD_BREATH);
    if(event_press(ADS))
    combo_run(HOLD_BREATH); 
    if(get_val(ADS) && get_lval(SPRINT)) 
	set_val(SPRINT, 0); } 
 if(HairTriggers) {
      deadzone (ADS, FIRE, 100, 100); 
      }
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
    if(aim_sens_corrections) {
    ads_fire_sens = 100    - (in_game_menu_sens);
    hip_fire_sens = 97     - (in_game_menu_sens);
    ads_sens = 103         - (in_game_menu_sens);
    gen_sens = 100;
    if(!get_val(ADS) && !get_val(FIRE)) { 
    Sens=gen_sens;}
    else if(get_val(ADS) && !get_val(FIRE)) { 
    Sens=ads_sens;}    
    else if(!get_val(ADS) && get_val(FIRE)) { 
    Sens=hip_fire_sens;}
    else if(get_val(ADS) && get_val(FIRE)) { 
    Sens=ads_fire_sens;}
    
    if(Sens > 100) Sens = 100;
    sensitivity(RX, NOT_USE, Sens);
    sensitivity(RY, NOT_USE, Sens);
}   
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
 if(event_press(SWAP)){
        weapon = !weapon;
/*        if(Rapid_Fire) {
if(get_val(FIRE)) 
   combo_run (Rapiid_Fire);
   else 
   combo_stop (Rapiid_Fire);
    LedOn  = 150;
	LedOff = 300;
	combo_run(BLINK);
   }*/
    if(RapidFire[ProfileIdx]  == 1) 
	{
		HoldTime = 500 / RateOfFire[ProfileIdx]; 
	   	RestTime = HoldTime -get_rtime();
	    if(RestTime < 0) RestTime = 0;
		if(get_ival(FIRE))
		combo_run(RAPIDFIRE);
		else
		combo_stop(RAPIDFIRE);
		combo_run(BLINK);LedOn = 120;LedOff = 320;
	}
if(AimSens){
    if(!get_val(ADS) && !get_val(FIRE)) { 
    USE_SENS=GEN_SENS;}
    else if(get_val(ADS) && !get_val(FIRE)) { 
    USE_SENS=ADS_SENS;}    
    else if(!get_val(ADS) && get_val(FIRE)) { 
    USE_SENS=FIRE_SENS;}
    else if(get_val(ADS) && get_val(FIRE)) { 
    USE_SENS=ADS_FIRE_SENS;}
    else if(get_val(FIRE)) { 
    USE_SENS=GRENADE_SENS;}
    sensitivity(RY,NOT_USE,USE_SENS);
    sensitivity(RX,NOT_USE,USE_SENS);
    }
if(Steady_Aim == 1){
   set_val  (LY,modi_Ry = get_steady_aim + altrecoil_Ry - altrecoil_Ry/(100-mg)*abs(true_Ry));
   set_val  (LY,modi_Rx = get_steady_aim + altrecoil_Rx - altrecoil_Rx/(100-mg)*abs(true_Rx));
 
    modi_radius = (modi_Ry*modi_Ry + modi_Rx*modi_Rx);
 
   set_val(RY,final_Ry = modi_Ry / modi_radius * (modi_radius+mg));
   set_val(RX,final_Ry = modi_Rx / modi_radius * (modi_radius+mg));
 
   set_val(LY,clamp(final_Ry, -100, 100));
   set_val(LX,clamp(final_Rx, -100, 100));
   } 
 /*DEADZONE AND ANTIDEADZONE*/
if (DEADZONES){
//Apply Right Stick
    currRX = get_val(RX);
    currRY = get_val(RY);
    if(prevRX != currRX || prevRY != currRY){
        
    if(get_val(DefaultRXry)) {
           Stick(deadZone, antiCircleDeadZone, antiSquareDeadZone, outerDeadZoneIn, outerDeadZoneOut,  midPointX,  midPointY , Values);
        }
        
        prevRX = currRX;
        prevRY = currRY;
    }

    set_val(RX, stickRX);
    set_val(RY, stickRY);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\      
//Apply Left Stick
    currLX = get_val(LX);
    currLY = get_val(LY);
    if(prevLX != currLX || prevLY != currLY){

        if(get_val(DefaultLXly)){
            Stick(deadZoneL, antiCircleDeadZoneL, antiSquareDeadZoneL, outerDeadZoneInL, outerDeadZoneOutL, midPointXL , midPointYL, ValuesL);
        }
        prevLX = currLX;
        prevLY = currLY;
    }

    set_val(LX, stickLX);
    set_val(LY, stickLY);
}
//--DYNAMIC_FIRE   
if(DYNAMIC_FIRE == TRUE){   
if(get_val(FIRE)) {
HoldTime = MAX_TIME - (get_val(FIRE) * 3);
combo_run(DYNAMIC_FIRE);
}}
if(get_ival(ADS) && get_ival(FIRE)){
        combo_run(AIMBOT);
   }else{ 
        combo_stop(AIMBOT);}

if(ToggleFastMelee)
				{
					if(get_val(MELEE))
					combo_run(FastMelee);
					if(get_val(ADS) && event_press(MELEE) < 500)
					combo_stop(FastMelee);
				}
				/*if(EnemyPing) 
	        	{
	        		if(get_ival(FIRE) && get_ptime(FIRE) >= 1000)
		         		combo_run(EnemyPing); 
		     		else
		         		combo_stop(EnemyPing);		
	        	}*/
       if(use_cancel_plates)
    {
        if(get_ival(SWAP) && get_ptime(SWAP) >= 450)
           cancel_plates = TRUE;

        if(cancel_plates)
        {
            cancel_plates_timer += get_rtime();
            
            if(cancel_plates_timer >= 3000) 
            {
                cancel_plates_timer = 0;
                cancel_plates = FALSE;
            }
            if(event_press(ADS) || event_press(FIRE))
                combo_run(CANCEL_PLATES);
        }
      }
		        if(CancelReload)
				{
					if(event_press(FIRE))
						FirstShotBeforeReload = TRUE; 
						
					if(event_press(RELOAD) && FirstShotBeforeReload)
					{
						ReloadInProgress = TRUE;
						FirstShotBeforeReload = FALSE;
					}
					if(get_val(RELOAD) && get_ptime(RELOAD) >= 250)
					{
						ReloadInProgress = FALSE;
						combo_stop(CancelReload);
					}
					if(ReloadInProgress)
						ReloadTime += get_rtime();
					else 
					    ReloadTime = 0;
	
					if(ReloadTime > MaxReloadTime[ProfileIdx])
						ReloadInProgress = FALSE;
	
					if(ReloadTime > 0 && ReloadTime <= MaxReloadTime[ProfileIdx] && event_press(FIRE))
						combo_run(CancelReload);
				}

   	       }
   	      
       } 
  }
}
//}// End Of Script \\
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
int Position;   
/*
function Set_Val(Input,Output) { // DoGz Function \\ :) 

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
      return; 
}*/
function get_polar(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > Total_Anti_Recoil_Time[ProfileIdx] *10) {
    	//--avoid stack overflow
        i_cnt = Total_Anti_Recoil_Time[ProfileIdx] *10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
    	i_num = 0;
    	//--adjust ar_y 
    	ar_y += i_val;
    }
    return ar_y;
}

combo FastMelee {
set_val(MELEE, 100);
wait(35);
set_val(MELEE, 0);
wait(30);  
}
 combo CANCEL_PLATES { 
 set_val(MELEE,100);
 wait(20);
 cancel_plates = FALSE;
 cancel_plates_timer = 0; 
}
combo CancelReload {
set_val(SWAP,100);
wait(20);
wait(20)
set_val(SWAP,100);
wait(20);
ReloadInProgress = FALSE; }


combo RAPIDFIRE { 
wait(HoldTime);
set_val(FIRE, 0);
wait(RestTime);
}
/*combo Rapiid_Fire {
set_val (FIRE, 100); 
    wait(60);
    set_val(FIRE, 0); 
    wait(30);
    }*/
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(17);
wait(LedOff);
}
    combo CancelSlideMW {
	set_val(CROUCH, 100);
	wait(SlideDelay); //60
	set_val(CROUCH, 0);
	wait(60);
	set_val(CROUCH, 100);
	//set_val(ADS,64);
	wait(50);
	set_val(CROUCH, 100);
	set_val(JUMP, 100);
	//set_val(ADS,16);
	//set_val(ADS,32);
	wait(40);
	set_val(CROUCH, 0);
	set_val(JUMP, 100);
	//set_val(ADS,32);
	//set_val(ADS,64);
	wait(30);
	set_val(JUMP, 0);
    set_val(ADS,0);
}
combo CancelSlideCW {
set_val(CROUCH, 100);
wait(SlideDelay);
set_val(CROUCH, 0);
wait(20);
set_val(SPRINT, 0);
set_val(CROUCH, 100);
set_val(SPRINT, 100);
wait(20);
set_val(CROUCH, 0);
set_val(SPRINT, 0);
wait(20);
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
} 
function Menu (){
        if(get_ival(ADS)) 
        {
        	if(event_press(PS4_OPTIONS))
        	{
        		ModMenu     = TRUE;      
        		DisplayMenu = TRUE;       
        		EditMenu    = FALSE;
        
        		if(!ModMenu)             
        	    	DisplayTitle = TRUE; 
        	}
        	set_val(PS4_OPTIONS,0); set_val(PS4_RIGHT,0); 
        }
        if(!DisplayTitle)                
        { 
        	//  modname    
        	if(ModMenu) 
	        {  
	        	vm_tctrl(0);
	        	
	        	ModNameIdx                     = MenuNavigation(ModNameIdx,0,22);   //28
	        	
	        	Anti_Recoil_Mod [ProfileIdx]   = ToggleSwitch(ModNameIdx == 0,Anti_Recoil_Mod  [ProfileIdx],0,1); 
	        	DYNAMIC_RC      [ProfileIdx]   = ToggleSwitch(ModNameIdx == 1,DYNAMIC_RC       [ProfileIdx],0,1); 
	        	Triple_Sticky   [ProfileIdx]   = ToggleSwitch(ModNameIdx == 2,Triple_Sticky    [ProfileIdx],0,1); 
	        	PolarAssist     [ProfileIdx]   = ToggleSwitch(ModNameIdx == 3,PolarAssist      [ProfileIdx],0,1); 
	        	ProgressionAA   [ProfileIdx]   = ToggleSwitch(ModNameIdx == 4,ProgressionAA    [ProfileIdx],0,1); 
 				PolarAimAssist  [ProfileIdx]   = ToggleSwitch(ModNameIdx == 5,PolarAimAssist   [ProfileIdx],0,1);
 				Modulation      [ProfileIdx]   = ToggleSwitch(ModNameIdx == 6,Modulation       [ProfileIdx],0,1);

	        	AimSens                        = ToggleSwitch(ModNameIdx == 7,AimSens                      ,0,1);
	        	//TRACKING                     = ToggleSwitch(ModNameIdx == 8,TRACKING,0,1);
	        	CancelSlide                    = ToggleSwitch(ModNameIdx == 9,CancelSlide,0,2);
	        	aim_sens_corrections           = ToggleSwitch(ModNameIdx ==10,aim_sens_corrections,0,1);
	            holdbreath[ProfileIdx]         = ToggleSwitch(ModNameIdx ==11,holdbreath        [ProfileIdx],0,1);
	        	_STEADY_AIM                    = ToggleSwitch(ModNameIdx ==12,_STEADY_AIM                   ,0,1);
	        	BUNNY_HOP                      = ToggleSwitch(ModNameIdx ==13,BUNNY_HOP                     ,0,1); 
	        	AA_BOOSTER                     = ToggleSwitch(ModNameIdx ==14,AA_BOOSTER                    ,0,1);// CROUCH Shot                                     //
        		HairTriggers                   = ToggleSwitch(ModNameIdx ==15,HairTriggers                  ,0,1);// JUMP Shot 
        		ToggleFastMelee                = ToggleSwitch(ModNameIdx ==16,ToggleFastMelee               ,0,1);
	        	ToggleBlockRumble              = ToggleSwitch(ModNameIdx ==17,ToggleBlockRumble             ,0,1);
	        	
	        	Buttons                        = ToggleSwitch(ModNameIdx ==18,Buttons,0,21);
	            ProfileButton                  = ToggleSwitch(ModNameIdx ==19,ProfileButton ,0,1);
 				DEADZONES                      = ToggleSwitch(ModNameIdx ==20,DEADZONES                     ,0,1);
 				RapidFire       [ProfileIdx]   = ToggleSwitch(ModNameIdx ==21,RapidFire         [ProfileIdx],0,1);
	        	CancelReload    			   = ToggleSwitch(ModNameIdx ==22,CancelReload                  ,0,1);
	            use_cancel_plates    		   = ToggleSwitch(ModNameIdx ==22,use_cancel_plates             ,0,1);
 				
	        }
	        //madname  valname
	        if(EditMenu)   
	        {
	        	vm_tctrl(0);
	        	ValNameIdx        = MenuNavigation(ValNameIdx,0,53
	        	); 
	        	
	            DEFAULT_VERTICAL           [ProfileIdx]  = EditValues(ValNameIdx , 39,DEFAULT_VERTICAL          [ProfileIdx] ,-99, 99 , 1, 10);  
	            DEFAULT_HORIZONTAL         [ProfileIdx]  = EditValues(ValNameIdx , 40,DEFAULT_HORIZONTAL        [ProfileIdx] ,-99, 99 , 1, 10);
	            Anti_Recoil_Release        [ProfileIdx]  = EditValues(ValNameIdx , 41,Anti_Recoil_Release       [ProfileIdx] ,-90, 100, 1, 10);
	        		           
	            Starting_Anti_Recoil_Value [ProfileIdx]  = EditValues(ValNameIdx , 2,Starting_Anti_Recoil_Value [ProfileIdx] ,-99, 99 , 1, 10);
        		Ending_Anti_Recoil_Value   [ProfileIdx]  = EditValues(ValNameIdx , 3,Ending_Anti_Recoil_Value   [ProfileIdx] ,-99, 99 , 1, 10);
        		Total_Anti_Recoil_Time     [ProfileIdx]  = EditValues(ValNameIdx , 4,Total_Anti_Recoil_Time     [ProfileIdx] ,  0, 200, 1, 10);
	            recoil_drop                [ProfileIdx]  = EditValues(ValNameIdx , 5,recoil_drop                [ProfileIdx] ,-99, 99 , 1, 10); 
	            polar_angle                [ProfileIdx]  = EditValues(ValNameIdx , 6,polar_angle                [ProfileIdx] ,-99, 99 , 1, 10);
	            antirecoilStrength         [ProfileIdx]  = EditValues(ValNameIdx , 7,antirecoilStrength         [ProfileIdx] ,-99, 99,  1, 10);
	            //  \\Triple_Sticky
	          
	            ADS_Size             [ProfileIdx]  = EditValues(ValNameIdx , 8,ADS_Size              [ProfileIdx]    , 0, 99, 1, 10); 
	            ADS_Wait_Value       [ProfileIdx]  = EditValues(ValNameIdx , 9,ADS_Wait_Value        [ProfileIdx]    , 0, 99, 1, 10); 
	            ADS_FIRE_Size        [ProfileIdx]  = EditValues(ValNameIdx ,10,ADS_FIRE_Size         [ProfileIdx]    , 0, 99, 1, 10);
	            ADS_FIRE_Wait_Value  [ProfileIdx]  = EditValues(ValNameIdx ,11,ADS_FIRE_Wait_Value   [ProfileIdx]    , 0, 99, 1, 10); 
	            HIPFIRE_Size         [ProfileIdx]  = EditValues(ValNameIdx ,12,HIPFIRE_Size          [ProfileIdx]    , 0, 99, 1, 10); 
	            HIPFIRE_Wait_Value   [ProfileIdx]  = EditValues(ValNameIdx ,13,HIPFIRE_Wait_Value    [ProfileIdx]    , 0, 99, 1, 10); 
	            //  \\ PolarAssist
	  
	            PolarRadius          [ProfileIdx]  = EditValues(ValNameIdx ,14,PolarRadius           [ProfileIdx]    , 0, 35, 1, 10);  
	            PolarAngle           [ProfileIdx]  = EditValues(ValNameIdx ,15,PolarAngle            [ProfileIdx]    , 0, 25, 1, 10); 
	            PolarRBoost          [ProfileIdx]  = EditValues(ValNameIdx ,16,PolarRBoost           [ProfileIdx]    , 0, 40, 1, 10);
	            PolarABoost          [ProfileIdx]  = EditValues(ValNameIdx ,17,PolarABoost           [ProfileIdx]    , 0, 25, 1, 10); 
	            TwistedMinRad        [ProfileIdx]  = EditValues(ValNameIdx ,18,TwistedMinRad         [ProfileIdx]    , 0, 20, 1,  2);
	            ChooseShapes         [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 19,ChooseShapes     [ProfileIdx]            ,0,  4); 
	            STEADY_RESOLUTION    [ProfileIdx]  = EditValues(ValNameIdx ,20,STEADY_RESOLUTION     [ProfileIdx]    , 0,  20,1,  2);
	           // DeadZone         			  = EditValues(ValNameIdx ,21,DeadZone                         , 0, 20, 1, 10);
	           // FREE     [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 20,FREE  [ProfileIdx]    ,0,4);

	            //  \\  ProgressionAA
	            ProgPowerMin  [ProfileIdx]  = EditValues(ValNameIdx ,22,ProgPowerMin     [ProfileIdx]    ,-99,  20, 1, 10); 
	            ProgPowerMax  [ProfileIdx]  = EditValues(ValNameIdx ,23,ProgPowerMax     [ProfileIdx]    ,  0,  99, 1, 10); 
	            ProgPowerInc  [ProfileIdx]  = EditValues(ValNameIdx ,24,ProgPowerInc     [ProfileIdx]    ,  0,  25, 1, 10); 
	            ProgWaitMin   [ProfileIdx]  = EditValues(ValNameIdx ,25,ProgWaitMin      [ProfileIdx]    ,  0,  40, 1, 10);
	            ProgWaitMax   [ProfileIdx]  = EditValues(ValNameIdx ,26,ProgWaitMax      [ProfileIdx]    ,  0,1000, 1, 10); 
	            ProgWaitInc   [ProfileIdx]  = EditValues(ValNameIdx ,27,ProgWaitInc      [ProfileIdx]    ,  0, 250, 1, 10); 
	            ProgRelease   [ProfileIdx]  = EditValues(ValNameIdx ,28,ProgRelease      [ProfileIdx]    ,  0,  50, 1, 10); 
	           
	            
	            // RAPID FIRE \\ 
	            RateOfFire      [ProfileIdx]  = EditValues(ValNameIdx ,29,RateOfFire     [ProfileIdx]    ,  0, 25, 1, 5);
	            MaxReloadTime 	[ProfileIdx]  = EditValues(ValNameIdx ,30,MaxReloadTime  [ProfileIdx]    ,  0,9000,10,100);
	            // MISC \\
	            GEN_SENS                      = EditValues(ValNameIdx ,31,GEN_SENS                       ,  0,327, 1,10);
        	    ADS_SENS                      = EditValues(ValNameIdx ,32,ADS_SENS                       ,  0,327, 1,10);
                FIRE_SENS                     = EditValues(ValNameIdx ,33,FIRE_SENS                      ,  0,327, 1,10);
        	    ADS_FIRE_SENS                 = EditValues(ValNameIdx ,34,ADS_FIRE_SENS                  ,  0,327, 1,10);
        	    GRENADE_SENS                  = EditValues(ValNameIdx ,35,GRENADE_SENS                   ,  0,327, 1,10);
	            TRACKING_STRENGTH 	          = EditValues(ValNameIdx ,36,TRACKING_STRENGTH              ,  0, 16, 1, 4);
	            SlideDelay                    = EditValues(ValNameIdx ,37,SlideDelay                     , 10,200, 1,10); 
	            in_game_menu_sens             = EditValues(ValNameIdx ,38,in_game_menu_sens              ,-25, 25, 1,10); 
	            w                             = EditValues(ValNameIdx ,42,w                              ,  0,100, 1,10);       
	            deadZoneL                     = EditValues(ValNameIdx ,43,deadZoneL                      ,  5, 20, 1, 5); 
	            deadZone                      = EditValues(ValNameIdx ,44,deadZone                       ,  5, 20, 1, 5);
	            SCAN_STRENGTH                 = EditValues(ValNameIdx ,0,SCAN_STRENGTH                   ,  0, 16, 1, 5);
	            angle2                        = EditValues(ValNameIdx ,1,angle2                          ,  0,  8, 1, 2); 
	            
	            
	            if(ModNameIdx == 1) ValNameIdx = cycle(ValNameIdx,2,7);
	            if(ModNameIdx == 2) ValNameIdx = cycle(ValNameIdx,8,13); 
	       		if(ModNameIdx == 3) ValNameIdx = cycle(ValNameIdx,14,19); 
	       		if(ModNameIdx == 4) ValNameIdx = cycle(ValNameIdx,22,28);
	       		if(ModNameIdx == 5) ValNameIdx = cycle(ValNameIdx,14,15); 
	       		if(ModNameIdx == 6) ValNameIdx = cycle(ValNameIdx,0,1); 
	       		if(ModNameIdx == 7) ValNameIdx = cycle(ValNameIdx,31,35); 
	       		if(ModNameIdx == 8) ValNameIdx = cycle(ValNameIdx,36,36); 
	       		if(ModNameIdx == 9) ValNameIdx = cycle(ValNameIdx,37,37); 
	       		if(ModNameIdx ==10) ValNameIdx = cycle(ValNameIdx,38,38);
	       		if(ModNameIdx ==12) ValNameIdx = cycle(ValNameIdx,20,20);
	       		if(ModNameIdx == 0) ValNameIdx = cycle(ValNameIdx,39,41);
	       		if(ModNameIdx ==14) ValNameIdx = cycle(ValNameIdx,42,42);
	       	    if(ModNameIdx ==20) ValNameIdx = cycle(ValNameIdx,43,44);
	       	    
	       	    if(ModNameIdx ==21) ValNameIdx = cycle(ValNameIdx,29,29);
	       	    if(ModNameIdx ==22) ValNameIdx = cycle(ValNameIdx,30,30);
	          
	        }  
	    } 
        if(DisplayMenu) 
        {
        	cls_oled(OLED_BLACK);  
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);  
        	led(ProfileIdx);  
        	vm_tctrl(0);
        	
        	if(EditMenu)   
        	{
        		printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
        	} 
        	else if(ModMenu) //   Info  Misc
        	{
        		printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); 
        		
        		if(ModNameIdx >= 6 && ModNameIdx <= 10) 
        		{
        			printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                }
                if(ModNameIdx == 12) 
        		{
        			printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
        		}
        		if(ModNameIdx == 14) 
        		{
        			printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                }
                 if(ModNameIdx >= 20 && ModNameIdx <= 22) 
        		{
        			printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                } 
            	if(ModNameIdx < AmountOfModsPerProfiles || ModNameIdx == 11) 
            	{
            		if(ProfileIdx == 0) 
        				printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    	else if(ProfileIdx == 1) 
            			printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
            		else if(ProfileIdx == 2) 
            	    	printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[11]); 
            	}
            	if(ModNameIdx == 8)
				{
				printf(center_x(get_Info_chars(2), OLED_FONT_SMALL_WIDTH),33,OLED_FONT_SMALL,OLED_WHITE,Info[2]);
        	    printf(center_x(get_Info_chars(1), OLED_FONT_SMALL_WIDTH),46,OLED_FONT_SMALL,OLED_WHITE,Info[1]);
        	    } 
            	if(ModNameIdx == 10)
            	{
				printf(center_x(get_Info_chars(0), OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,Info[0]);
        	    } 
        	}
            DisplayMenu = FALSE; 
        } 
        if(!ModMenu && !EditMenu) 
        {
        //oleddisplay
			if(DisplayTitle) 
			{
				cls_oled(OLED_BLACK);  
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
				printf(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[3]);
				printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[4]);
				printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Misc[5]); 
			
				
				if(ProfileIdx == 0) 
        			printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    else if(ProfileIdx == 1) 
            		printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
				DisplayTitle = FALSE;
        		ScreenSaver  = TRUE; 
			}
			if(ScreenSaver)
    		{
       			BlankScreen += get_rtime();
        	
    			if(BlankScreen >= 10000)
    			{
    				cls_oled(OLED_BLACK);
    				BlankScreen = 0;
    				ScreenSaver = TRUE; 
    				
        		}	
    		}
    		if(get_ival(ADS))
    		{
    			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModMenu && !EditMenu)
	    	    {
			        DriveMode = TRUE;
			        KS = 0;
			        combo_run(DriveMode);
	    	    }
	    	} 
    		if(DriveMode) 
        	{
				combo_run(Blink);
				LedOn  = 150;
				LedOff = 300;
    			if(event_release(PS4_SQUARE))
    			{
    				DriveMode = FALSE;
    				KS= 1;
    				combo_run(DriveMode);
    				combo_run(RumbleOff); 
        		}  
        	} 
             
            led(ProfileIdx);
		}
   } 
const string Info[] = {"Match InGame","5-10~Warzone","0-5 ~ MP",""};
//                           0                1           2
const string Misc[] = { "F.P.S", "On", "Off","TWISTED AIM","Pacific Edition","by BODGE","DriveMode","Enabled","Disabled"," Profile 1 "," Profile 2 "," Profile 3 ","ModernWarfare","Cold War","Press Cross/A","Vert Str","KillSwitch"," " };
//                         0       1     2          3               4            5           6           7         8          9            10              11            12           13          14             15          16        17
const string ModNames[] = {"Classic AR","Dynamic AR","Sticky Aim","SS AIMASSIST","Progressive AA","SE AIMASSIST","Modulation","Senses","TRACKING BOT","CancelSlide","Aim Corrections","HoldBreath","Steady Aim","Bunny Hop","AA Booster","HairTrigger",
//                             0            1             2              3             4               5              6          7          8              9              10             11          12          13            14           15                       
"Fast MELEE","BlockRumble","Controller Layout","Profiles","Deadzones","Rapid FIRE","Cancel RELOAD","QT Rapid FIRE","QT Profiles","QT CROUCH Shot","QT JUMP Shot","RecoilOnTheFly","Shape Shifter",""};
//   16            17               18             19            20         21             22             23             24              25              26              27            28
const string ValNames[] = { "Strength","Speed","Start Value","End Value","Total Time","RecoilDrop","RecoilAngle","Strength","ADS Size","ADS Speed","AdsFireSize","AdsFirSpeed","Hip Size","Hip Speed","Radius",
//                               0        1           2            3          4           5            6          7           8            9            10            11        12         13          14         
 "Angle","RadiusBoost","AngleBoost","Min Radius","Shape","Steady Res","","Min Power","Max Power","Power Inc","Min Wait","Max Wait","Wait Inc","Release",
//  15        16            17           18        19          20            21          22         23           24         25         26         27        28         
"Rounds/Sec","RELOAD Time","Gen Sens","ADS Sens","FIRE Sens","ADS+FIRE","Gre/Tac","Strength","Slide Delay","InGame Sens","V Strength","H Strength","Release","Boost","Left DZ","Right DZ", ""}; 
//   29            30           31         32         33          34        35        36           37            38           39           40         41       42        43        44
const string ShapesToggle[] = {"Standard","Tall","Wide","Spiral","Spiral v2",""};

const int8   HoldBtns []         = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 , PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE }; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

const string ControllerLayouts[] = { "Default", "TACTICAL", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper PING","Bumper PING Tac", "Default Flipped","TACTICAL Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.PING Flipped","B.PING.Tac.Flipped",""}
//???????????????????????DONT TOUCH BELOW OR BRAKE SCRIPT????????????????????????????????\\
const int8 DnamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
const int8 LinearArray[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
define AmountOfValues = 53;
// Misc
int  SinAngle, CosAngle;
int rand;
int EnemyPing,Buttons,CancelReload,MaxReloadTime;
int VmSpeed = -9;  // 0 -2 -4 -6 -8 -9
define MAGNITUDE					= 600;  //         500 75
define TIME_BASE = 4;	            //4  don't change    1
int REFRESH_RATE = TIME_BASE *10;  // 10 don't change   20
int ProfileIdx; 
int RapidFire[2];
int RateOfFire[2];
define TotalNumberOfProfiles = 2;
define AmountOfModsPerProfiles = 6;
int DisplayTitle = TRUE; 
int ScreenSaver,BlankScreen,ModMenu,DisplayMenu,ModNameIdx,EditMenu,ValNameIdx,SelectedProfileIdx;
int DriveMode,LedOn,LedOff; 
define ActivateButtonCount = 8;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx;
int QuickToggleActive,ToggleWidth,ToggleWidth1,ToggleFont,ToggleFont1;
int ADS,FIRE,LETHAL,TACTICAL,JUMP,CROUCH,MELEE,SPRINT,RELOAD,SWAP,PING;
int angle,cos_angle,sin_angle,L_LX,L_LY,aim_x,aim_y,ActualMagnitude,MaxMagnitude,Radius;
int ModAngle = 3;
int Radial_Effect;
int GetTwistedShape,PolarRadius,PolarAngle,PolarRBoost,PolarABoost,PolarRelease;
int ProgRelease,ProgPowerMin,ProgPowerMax,ProgPowerInc,ProgWaitMin,ProgWaitMax,ProgWaitInc;
int maxRumbleA,bRumble_A_ValueFound,maxRumbleB,bRumble_B_ValueFound;
int SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,PolarStrength;
int randAngle, scan_angle, horizontal, vertical, S_RX, S_RY;
int in_game_menu_sens,Rapid_Fire,HairTriggers,AimSens;
int BUNNY_HOP,SlideDelay,RUMBLE,RUMBLE2,mvt_direction,inverted;
int TwistedMinRad;

int RightStick,AngleDirection;
int Tracking,Tracker1,Tracker2,CAngle,SAngle,GetAngle;
int ToggleADirection = TRUE;
int TaylorTracking = TRUE;
int TrackingSize = 8;
int TrackingSpeed = 2;
int AdsSpeed = 6;
int AdsRadius =18;
int ChooseShapes;

int	inc,AdsAngle,Training;
int RestTime;
int CancelSlide;
int ToggleFastMelee;
int ToggleBlockRumble = TRUE;
int FirstShotBeforeReload,ReloadInProgress,ReloadTime;
int STEADY_RESOLUTION;
int AA_RADIUS;
int MAX_RADIUS;
int POL_MAX = 35;
int POL_RADIUS= 25;
int POL_ANGLE;
int PolarMin;
int SCAN_STRENGTH = 8;
int angle2 = 2;
int FireBoost = TRUE;
int Kill_Switch_Toggle = TRUE;
int aim_sens_corrections  = TRUE;
int holdbreath[2];
int INVERTED    = 0;
//--Variable Shit Just Ignore
int _STEADY_AIM ;//    = TRUE;
int Steady_Aim      = TRUE; 
int get_steady_aim  = TRUE;
int JUICY_STICKY    = TRUE;
int Triple_Sticky[2];
int sticky_aim      = TRUE;
int lock = TRUE;
int PolarAssist[2];   
int AngleBoost      = TRUE;
int Angleboost      = TRUE;
int ProgressionAA[2];   
int RadiusBoost     = TRUE;   
int PolarAimAssist[2];
int RadFlow         = TRUE;
int AngFlow         = TRUE;
define Prf          = TRUE;
define Paf          = TRUE;
int i_val           = TRUE;
int i_pnt           = TRUE;
int i_num           = TRUE;
int i_cnt           = TRUE;
int v,ar_y          = TRUE;
int weapon          = TRUE;
int AS              = TRUE;
int AR              = TRUE;
define SMOOTHING				 	= 1;
int smoothing;
int ARS,AR_H;
int recoil_Y = 6;
int recoil_X = 2;
int true_radius = TRUE;
int modi_radius,modi_recoil;
int GEN_SENS,ADS_SENS,FIRE_SENS,ADS_FIRE_SENS,GRENADE_SENS;
//int PolarRBoost,PolarABoost;
//--Buttons --////////////////////////////////////////////////////////
    define Switch_Weapon = PS4_TRIANGLE;
    define HOME       = PS4_PS;
    define VIEW       = PS4_SHARE;
    define RX         = PS4_RX;
    define RY         = PS4_RY;
    define LX         = PS4_LX;
    define LY         = PS4_LY;
    define UP         = PS4_UP;                
    define DOWN       = PS4_DOWN;             
    define LEFT       = PS4_LEFT;             
    define RIGHT      = PS4_RIGHT;
    define AIM_V      = PS4_RY;
    define AIM_H      = PS4_RX;
    define STRAFE     = PS4_LX;
    define STICK_1_X  = LX;
    define STICK_1_Y  = LY;
    int aim_lx        = LX ;
    int aim_ly        = LY ;
    int true_Ry       = RY ;
    int true_Rx       = RX ;
    int altrecoil_Ry  = RY ;
    int altrecoil_Rx  = RX ;
    int modi_Ry       = RY ;
    int modi_Rx       = RX ;
    int final_Ry      = RY ;
    int altrecoil_y   = RY ;
    int altrecoil_x   = RX ;
    int RadiusFlow    = Prf;
    int AngleFlow     = Paf;
    int final_Rx      = RX ;
    int Ry            = RY ;
    int Rx            = RX ;
    int T_RX,T_RY,C_RX,C_RY,pX,pY;
    int PX[2],PY[2];
    int USE_SENS = TRUE;
    int Sens = TRUE;
    int gen_sens,ads_sens,ads_fire_sens,hip_fire_sens,ret;
    int TwistedRumble,RadialEffect; int scanAngle = 2;
	define MAX_TIME_TO_CHECK = 5000; // in ms. Max value is 32767.
//AA_BOOSTER
    int AA_BOOSTER;
    int LY_Min       = -25; //18
    int LY_Max       =  25; //18
    int LX_Min       = -25;
    int LX_Max       =  25;
    int w            =  70;
    int l, m, n, a, b;
    int rumble_type = RUMBLE_A; 
// TRIPLE STICKY---------------------
    int ADS_Size,ADS_Wait_Value;
    int ADS_FIRE_Size,ADS_FIRE_Wait_Value;
    int HIPFIRE_Size,HIPFIRE_Wait_Value;
    int Aim_Val,Wait_Val;
    define Ads_Strafe_Max =            10;
    define Ads_Strafe_Min =           -10;
    define AdsFire_Strafe_Max =        15;
    define AdsFire_Strafe_Min =       -15;
    define Fire_Strafe_Max =           15;
    define Fire_Strafe_Min =          -15;
    int DYNAMIC_FIRE = TRUE;
    define MAX_TIME  = 150;
    define MIN_TIME  = 50;
    //define VERTICLE  = 18; 
   // int aimAssist          = 30;
    define sticky_aim_assist = TRUE;
    define _v                   = 12;      // 28 ADS
    define _v_Hip               = 16;      // 28 HipFire
    int STICKY_AIM_TIME = 100;
    int SCANNING = TRUE;
    int Modulation [2];
    int UPDATE_TIME;
    //--TRACKING
    int ScanAngle;
    int TRACKING = TRUE;
    int TRACKING_STRENGTH,TRACKING_BOT;
    define track_00 = 0x00;
    define track_01 = 0x01;
    define track_02 = 0x02;
    define track_03 = 0x03;
//DYNAMIC/PROGRESSIVE RECOIL__________________________________________________________\\
    int Anti_Recoil_Mod  = TRUE;
    int anti_recoil, anti_recoil_H;
    int ANTI_RECOIL_Vertical  = 15;
    int ANTI_RECOIL_Horizontal = 0;
    int mg = 13;
    int Anti_Recoil_Release,DYNAMIC_RC [2];    
    int Starting_Anti_Recoil_Value,Ending_Anti_Recoil_Value,Total_Anti_Recoil_Time;
    int antirecoilStrength,polar_angle,recoil_drop;
    int ANTIRECOOIL           = TRUE;
    define INTVERTED_RECOIL   =    1;
    int DEFAULT_VERTICAL [2],DEFAULT_HORIZONTAL [2],RECOIL,BOOOST; // ANTIRECOOIL
    int tval;
int angle_2 = 8;
int ProfileButton;
//DEADZONES
//RIGHT STICK SETTINGS
int DEADZONES = FALSE;
int DefaultRXry = TRUE;
int  deadZone              = 5;     
int  antiCircleDeadZone    = 5;     
int  antiSquareDeadZone    = 5;      
int  outerDeadZoneIn       = 100;    
int  outerDeadZoneOut      = 100;  
int  midPointX             = 50;          
int  midPointY             = 50;           
int  Values                = TRUE;                      
//LEFT STICK SETTINGS
int DefaultLXly = TRUE;
int  deadZoneL              = 10;      
int  antiCircleDeadZoneL    = 10;     
int  antiSquareDeadZoneL    = 8;    
int  outerDeadZoneInL       = 100;   
int  outerDeadZoneOutL      = 100;    
int  midPointXL             = 50;    
int  midPointYL             = 50;     
int  ValuesL                = TRUE;        
int x, y, newX, newY, outputX, outputY;
int magnitude, outputMagnitude;
int normX, normY;
int currRX,currRY,prevRX,prevRY;
int currLX,currLY,prevLX,prevLY;
int stickRX,stickRY,stickLX,stickLY;
int smallValue,HoldTime;
//--HEAD SHOT    
int POINT_DIR_UP_D    =-10;
int STICKY_HEADSHOT = TRUE;
int POINT_DIR_UP_V = TRUE;      
int HEADSHOT_IN_Y  = TRUE;
int HEADSHOT_TIME;  //= 15;
int HEADSHOT_STICK= PS4_RY;
//int inv;
//-------AIM_CORRECTIONS-------\\
define Sampling_Time = 10;
define Aim_Boost = 10;
define Aim_Correction = 5;
define Aim_Perfection_Limit = 30;
define POS_Aim_Limit = 75;
define NEG_Aim_Limit = -75;
define POS_Micro_MVT_Limit = 85;
define NEG_Micro_MVT_Limit = -85;                                                                                                
int FINE_AIM = TRUE;
int X_Last_Value     = 0;
int Y_Last_Value     = 0;
int X_Current_Value  = 0;
int Y_Current_Value  = 0;
int Sampling_Done = TRUE;
int spiroide_pulse = 3;
int fine_pulse = 3;
int Joystick_calibration       = TRUE;
int RX_Axis_Joystick_calibrate = 5; 
int RY_Axis_Joystick_calibrate = 5;
int use_cancel_plates,cancel_plates,cancel_plates_timer;
    int KS = TRUE;
    int double__tap[30];
    int AR_I           = 1; 
    int Release        = 23;

function MenuNavigation(f_modorval,f_min,f_max) { 

	if(!get_val(ADS))
	{
		if(event_press(PS4_RIGHT))   
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayMenu = TRUE;   
   		}     
		if(event_press(PS4_LEFT))    
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayMenu = TRUE;
		} 
		 BlockButtons(); 
	}
	//ModName
if (ModNameIdx == 0
||  ModNameIdx == 1
||  ModNameIdx == 2
||  ModNameIdx == 3
||  ModNameIdx == 4
||  ModNameIdx == 5
||  ModNameIdx == 6
||  ModNameIdx == 7
||  ModNameIdx == 8
||  ModNameIdx == 9
||  ModNameIdx == 10
||  ModNameIdx == 12
||  ModNameIdx == 14
||  ModNameIdx == 20
||  ModNameIdx == 21
||  ModNameIdx == 22)

	{
		if(event_press(PS4_CROSS))
    	{ 
        	ValNameIdx  = AmountOfValues + 1;
        	EditMenu    = TRUE;
        	ModMenu     = FALSE;
        	DisplayMenu = TRUE;
    	}
    	set_val(PS4_CROSS,0); 
    }
    if(ModMenu)
    {
    	if(event_press(PS4_CIRCLE)) 
    	{    
        	DisplayTitle = TRUE;
        	ModMenu      = FALSE; 
        	DisplayMenu  = FALSE; 
        	combo_run(RumbleOff); 
        	Save(); 
    	} 
    	set_val(PS4_CIRCLE,0); 
    }
    if(EditMenu)
    {
    	if(event_press(PS4_CIRCLE))
    	{       
        	EditMenu     = FALSE; 
       		ModMenu      = TRUE;
        	DisplayMenu  = TRUE;   	
    	}
    	set_val(PS4_CIRCLE,0); 
    } 
    if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, TotalNumberOfProfiles);
        DisplayMenu = TRUE;   	
    }
    return f_modorval; 
} 
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn);  
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
    
		if(ModNameIdx == 0)
		{
		if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	    if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
		}
	    else if(ModNameIdx == 8) 
		{
		if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[1]);
	    else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);		}
		else if(ModNameIdx == 10) 
		{
		if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[1]);
	    else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
		}
		else if(ModNameIdx == 18)
	    {
	    	printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
	        printf(center_x(get_Info_chars(0), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Info[0]);
	    }
	    else if(ModNameIdx == 9 ) 
	    {
	    if(f_val == 0)
			printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	    else if(f_val == 1)
	    	printf(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);
	    else if(f_val == 2)
	    	printf(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
	    } 
		else
		{
			if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
	    } 
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}

function ToggleSwitch1(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
		if(ValNameIdx == 19) 
		{
			printf(center_x(get_aa_chars(ChooseShapes[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,ShapesToggle[ChooseShapes[ProfileIdx]]);
		}
		else
		{ 
			if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
		} 	
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}

function EditValues(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(ADS))
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex +  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex -  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            } 
            set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_UP,0); set_val(PS4_DOWN,0);
        }
        if(f_idx == 4)
        	number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100) );
        else
        	number_to_string(ValueIndex,find_digits(ValueIndex)); 
    }
    return ValueIndex;                
 }   
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
 
 combo TRIPLE_STICKY{
		//a = random(Strafe_Min, Strafe_Max)
	set_val(AIM_V,  XY_Val (AIM_V,  Aim_Val));
	wait(Wait_Val);
	set_val(AIM_H,  XY_Val (AIM_H,  Aim_Val));
	set_val(STRAFE, XY_Val (STRAFE, a));
	//wait(Wait_Val);
	wait (100);
    set_val(STRAFE, XY_Val (STRAFE, a		 * -1));
	set_val(AIM_H,  XY_Val (AIM_H,  Aim_Val  * -1));
	wait(Wait_Val);
	set_val(AIM_V,  XY_Val (AIM_V,  Aim_Val  * -1));
	wait(Wait_Val);
}
 combo STICKY_AIM {
    set_val(AIM_V,XY_Val(AIM_V, _v));
    wait(20);
    set_val(AIM_H,XY_Val(AIM_H, _v));
    wait(20);
    set_val(AIM_V,XY_Val(AIM_V, _v * -1));
    wait(20);
    set_val(AIM_H,XY_Val(AIM_H, _v * -1));
    wait(20);
    }   
combo Sticky_AA {
    set_val(AIM_V,XY_Val(AIM_V, _v_Hip));
    wait(20);
    set_val(AIM_H,XY_Val(AIM_H, _v_Hip)); 
    if(abs(get_val(STRAFE)) <= 15) {
    if(STICKY_AIM_TIME <= 500) {
    set_val(STRAFE,XY_Val(STRAFE,  -10));
    } else {
     set_val(STRAFE,XY_Val(STRAFE,  10));}}
    wait(20);
    set_val(AIM_V,XY_Val(AIM_V, _v_Hip * -1));
    wait(20);
    set_val(AIM_H,XY_Val(AIM_H, _v_Hip * -1));
    set_val(STRAFE,XY_Val(STRAFE, _v_Hip * -1));
    wait(32);
    }
combo RECOIL { BOOOST++;
RECOIL = get_val(RY) + DEFAULT_VERTICAL + BOOOST;
if(BOOOST == 10) {
BOOOST = 0; }
if(RECOIL > 100) {
RECOIL = 100; }
set_val(RY,RECOIL * INTVERTED_RECOIL);
RECOIL = get_val(RX) + DEFAULT_HORIZONTAL;
if(RECOIL > 100){
RECOIL = 100; }
set_val(RX,RECOIL);
}
function double_click(button) { 
 if (double__tap[button] >= 0) { double__tap[button] += get_rtime(); if (double__tap[button] > 450) double__tap[button] = -1; } 
 if (event_release(button) && get_ptime(button) <= 200) { 
 if (double__tap[button] < 0) { double__tap[button] = 0; } else { double__tap[button] = -1; return 1; } } return 0; }
 combo Notify {
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);set_led(LED_2, 0);set_led(LED_3, 0);set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(250);set_led(LED_1, 0);set_led(LED_2, 0);set_led(LED_3, 0);set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(250);
reset_leds();
}
 
function getSTEADYaim( axis, resolution)
{
if (axis >= 0)
{
RUMBLE = (axis % resolution);
if (RUMBLE >= (resolution / 2))
{
axis = axis + (resolution - RUMBLE);
}
else
{
axis -= RUMBLE;
}
}
else
{
RUMBLE = (axis % resolution);
if (abs(RUMBLE) >= (resolution / 2))
{
axis = axis - (resolution + RUMBLE);
}
else
{
axis += abs(RUMBLE);
}
}
return axis;
}
function offset( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}

function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TwistedMinRad)
			SpiralPosition1 = TRUE;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = FALSE;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TwistedMinRad)
			SpiralPosition2 = TRUE;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = FALSE;
	} 
    if(ChooseShapes == 0)                    
	{ 
		if(AngleDirection){
		    offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        }else{
            offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
            offset(PS4_RX ,(f_var * CosAngle)/100 + Tracker2);
        }
	} 
	if(ChooseShapes == 1)        
	{ 
		if(AngleDirection){
        	offset(PS4_RX,(TwistedMinRad * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        }else{
        	offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
        	offset(PS4_RX,(TwistedMinRad * CosAngle)/ 100 + Tracker2);
        } 
	}
	if(ChooseShapes == 2)                     
	{ 
		if(AngleDirection){
        	offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(TwistedMinRad * CosAngle) /100 + Tracker2);  
        }else{
        	offset(PS4_RX,(f_var * CosAngle)/ 100 + Tracker1);
       		offset(PS4_RY,(TwistedMinRad * SinAngle) /100 + Tracker2);  
        } 
	} 
	if(ChooseShapes == 3)                  
	{
		if(AngleDirection){
        	offset(PS4_RX,(OuterSpiral * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * CosAngle)/100 + Tracker2);	
        }else{
        	offset(PS4_RX,(OuterSpiral * CosAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * SinAngle)/100 + Tracker2);
        }  
	}
    if(ChooseShapes == 4)
	{
		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	 	offset(PS4_RX,(f_var * x)/100 + Tracker1);
        offset(PS4_RY,(f_var * y)/100 + Tracker2);
	}
}
combo AA_BOOST {
    l = random(LY_Min, LY_Max);
    m = (LX_Min); 
    n = (LX_Max);

    set_val(XB1_LY, get_ival(XB1_LY) + l);
    set_val(XB1_LX, get_ival(XB1_LX) + m);
    wait (100);
    set_val(XB1_LX, get_ival(XB1_LX) + n);
    wait(w);
}
combo BUNNYHOP {
	set_val(JUMP, 100);
	wait(40);
	set_val(JUMP, 0);
	wait(40);
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(32);
}
combo AIMBOT {
    wait(500);
    set_val(Ry,-55);
    wait(300);
    set_val(Rx,-15)
    wait(100);
    set_val(Ry,30)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(RX,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Rx,15)
    wait(100);
    set_val(Rx,-15)
    wait(100);
    set_val(Ry,15)
    wait(100);
    }
    combo Progression {
set_val(RY,RadiusFlow);
wait(AngleFlow);
set_val(RX,RadiusFlow);
wait(AngleFlow);
set_val(RY,RadiusFlow * -1);
wait(AngleFlow);
set_val(RX,RadiusFlow * -1);
wait(AngleFlow);
}
 combo AS { 
    set_val(RY,a_f(RY,22));
    wait(20)
    set_val(RX,a_f(RX,22));
    wait(20)
    set_val(RY,a_f(RY,-22));
    wait(20)
    set_val(RX,a_f(RX,-22));  
     wait(20)}
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\        
combo AR {
    ARS = get_val(RY) + AR;
    if(ARS > 100) ARS = 100;
    set_val(RY,ARS * AR_I);
    ARS = get_val(RX) + AR_H;
    if(ARS > 100) ARS = 100;
    set_val(RX,ARS);
    }
combo Aim_Assist_Perfection{ 
    X_Last_Value = X_Current_Value
    Y_Last_Value = Y_Current_Value
    wait(Sampling_Time);
    X_Current_Value = get_lval(RX)- RX_Axis_Joystick_calibrate;
    Y_Current_Value = get_lval(RY)- RY_Axis_Joystick_calibrate; 
    if (Sampling_Done == TRUE ){
    Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
    Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 );} 
    X_Last_Value = X_Current_Value;
    Y_Last_Value = Y_Current_Value;
    wait(Sampling_Time);
    X_Current_Value = get_lval(RX)- RX_Axis_Joystick_calibrate;
    Y_Current_Value = get_lval(RY)- RX_Axis_Joystick_calibrate; 
    if (Sampling_Done == TRUE ){
    Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
    Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 );}
    Sampling_Done = TRUE; 
    wait(Sampling_Time);
}        
combo Fine_Tune_Aim {
    set_val(RX,(15 - fine_pulse));
    set_val(LX,(-15 + fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(15 - fine_pulse));
    set_val(RY,(10 - fine_pulse));
    set_val(LX,(-5 + fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time); 
    set_val(RY,(10 - fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-15 + fine_pulse));
    set_val(RY,(10 - fine_pulse));
    set_val(LX,(5 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time)
    wait(Sampling_Time)
    set_val(RX,(-15 + fine_pulse));
    set_val(LX,(15 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-15 + fine_pulse));
    set_val(RY,(-10 + fine_pulse));
    set_val(LX,(5 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RY,(-10 + fine_pulse)); 
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(15 - fine_pulse));
    set_val(RY,(-10 + fine_pulse));
    set_val(LX,(-5 + fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time);
    fine_pulse = fine_pulse + 2;
    if ( fine_pulse >10){
    fine_pulse = 0;}   
}
combo spiroide_Aim_Assit {
    set_val(RX,(4 + spiroide_pulse));
    set_val(LX,(-15+ spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-4 - spiroide_pulse));
    set_val(LX,15 - spiroide_pulse );
    wait(Sampling_Time);
    wait(Sampling_Time)
    set_val(RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    spiroide_pulse = spiroide_pulse + 2;
    if ( spiroide_pulse >10){
    spiroide_pulse = 0;}
}  
combo DYNAMIC_FIRE {
    set_val(FIRE,100);
    wait(HoldTime);
    set_val(FIRE,0);
    wait(MIN_TIME);
}
combo HOLD_BREATH { 
	set_val(SPRINT,0);
	wait(50);
	set_val(SPRINT,64); 
	wait(64); 
	set_val(SPRINT,0); 
	wait(110);
	set_val(SPRINT,0);
	wait(64);
	combo_restart(HOLD_BREATH);
	set_val(SPRINT,0);
}
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
   
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo DriveMode { 
cls_oled(OLED_BLACK); 
if((DriveMode)|| (!KS)) {  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
combo_run(Blink);LedOn = 150;LedOff = 300;
DisplayTitle = FALSE; }
else if((!DriveMode)|| (KS)) {  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);}
wait(1500);
DisplayTitle = TRUE;
combo_stop(Blink);
} 
combo KilllSwitch { 
cls_oled(OLED_BLACK); 
if(KS == 0) {  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[16]);
printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
combo_run(Blink);LedOn = 150;LedOff = 300;
}
else if(KS == 1) {  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[16]);
printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);}
wait(12000);
combo_stop(Blink);
}

function BlockButtons() { 
set_val(JUMP,0);        set_val(CROUCH,0);    set_val(TACTICAL,0);  set_val(LETHAL,0);   set_val(RELOAD,0);       set_val(PING,0);      set_val(SWAP,0);  set_val(MELEE,0); set_val(SPRINT,0); 
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function get_Info_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Info[f_idx + 1] - Info[f_idx] - 1;
	return sizeof(Info) - Info[f_idx];
	}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_aa_chars(f_idx){
	if (ShapesToggle[f_idx + 1] != -1) 
		return ShapesToggle[f_idx + 1] - ShapesToggle[f_idx] - 1;
	return sizeof(ShapesToggle) - ShapesToggle[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
const uint8 Layouts[][] = {            
 	  //FIRE   ADS	  LETHAL TACTICAL  JUMP	 CROUCH	  MELEE	  SPRINT  RELOAD WSwap,  PING 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
const int16 SLayouts[][] = {            
	//Walk,     Strafe, AimY,    AimX    
	{ XB1_LY,     XB1_LX, XB1_RY, XB1_RX },    // DEFAULT
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW
	{ XB1_LY,     XB1_RX, XB1_RY, XB1_LX },    // LEGACY
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX },    // LEGACY SOUTHPAW
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW NO CLICK SWAP
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX }};   // LEGACY SOUTHPAW NO CLICK SWAP

//int aim_y,aim_x;
int walk,strafe;
function Buttons(Type) {
	
	FIRE     = Layouts[Type][0];
	ADS      = Layouts[Type][1];
	LETHAL   = Layouts[Type][2];
	TACTICAL = Layouts[Type][3];
	JUMP     = Layouts[Type][4];
	CROUCH   = Layouts[Type][5];
	MELEE    = Layouts[Type][6];
	SPRINT   = Layouts[Type][7];
	RELOAD   = Layouts[Type][8];
	SWAP     = Layouts[Type][9];
	PING     = Layouts[Type][10];
	
	walk     = SLayouts[Type][0];
	strafe   = SLayouts[Type][1];
	aim_y    = SLayouts[Type][2];
	aim_x    = SLayouts[Type][3];
	
}

function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
    data(1,   1,0,0,0, 0,1,0,0,   0,0,1,0,   0,0,0,1,   1,0,1,0,  0,1,1,0,   1,1,1,1,  2,0,0,0,0,2,0,0,   0,0,2,0,0,0,0,2,2,0,2,0,   0,2,2,0,   2,2,2,2, 3,0,0,0,0,3,0,0,  0,0,3,0,   0,0,0,3,  3,0,3,0,   0,3,3,0,3,3,3,3  );

 function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) {
    if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit){ 
    if(Last_Value < Current_Value){
    if (Boost){
    if (X_AXIS)
    set_val(RX, (Current_Value + Aim_Boost)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value + Aim_Boost));}
    else if(Correction){
    if (X_AXIS)
    set_val(RX, (Current_Value - Aim_Correction)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value - Aim_Correction));}}            
    else{
    if (Boost){
    if (X_AXIS)
    set_val(RX, (Current_Value - Aim_Boost)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value - Aim_Boost));}
    else if(Correction){                         
    if (X_AXIS)
    set_val(RX, (Current_Value + Aim_Correction)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value + Aim_Correction));}}}}     
 function y_val() {
    v = get_val(10);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ar_y;           
}
 function a_f(p,m) {
    if(abs(get_val(p)) < Release)
    return m;
    return get_val(p);
    }
function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
     Pfb += Pv;
    
    if(Pfb <= Pfv)  
     return Pfb;
        
    if(Pfb > Pfv) {
    Pid =  FALSE;
     return Pfb - Pv;}}

    else {
    Pfb -= Pv;    
        
    if(Pfb >= Psv)  
    return Pfb;

    if(Pfb < Psv) {
    Pid = TRUE; 
    return Pfb + Pv;
    }} 
    return  FALSE;
 }
function clamp1(v, lo, hi) 
{
    if(v < lo) return lo;
    if(v > hi) return hi;
    return v;
} 
function sin(angle)
{   
    if(angle <= 90)
    {             
       ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
          ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
           ret = inv(Lookup_Table[360 - angle]);      
    }
    
   return  ret
} 
function cos(angle)
{   
    if(angle <= 90)
    {             
        ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
       ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
       ret = (Lookup_Table[angle - 270]);       
    }
   return  ret
} 

function getTRACKING_STRENGTH(_a, _b)
{
if (_a == 1)
{
if (_b)
{
ret = TRACKING_STRENGTH;
}
else
{
ret = (- TRACKING_STRENGTH);
}
}
else
{
if (_b)
{
ret = (- TRACKING_STRENGTH);
}
else
{
ret =  TRACKING_STRENGTH;
}
}
return ret;
}

//=========================================================================================================================
function Stick(dead, antiCDead, antiSDead, outerDeadIn, outerDeadOut, midX, midY, stick){

    if(stick == 1){
        x = get_val(RX);
        y = get_val(RY);
    }
    else{
        x = get_val(LX);
        y = get_val(LY);
    
    
    magnitude = isqrt(x*x + y*y);
    
    smallValue = 0;

    //precision
    if(magnitude <= 10){
        smallValue = 1;

        x = x*10;
        y = y*10;
        magnitude = isqrt(x*x + y*y);
 }}   
//Increasing antiCircleDeadZone to counter shrinkage with antiSquareDeadzone scaling below
  if(smallValue == 0){ 
  
  
        antiCDead = (antiCDead*((antiCDead*(100 - antiSDead))/((antiCDead*(100 - (antiSDead*100)/outerDeadOut))/100)) )/100;

        normX = (x*100)/magnitude;
        normY = (y*100)/magnitude;

    
 if(Values == FALSE){
            if(magnitude > outerDeadIn){magnitude = outerDeadIn}
        }
    
        //DeadZone and antiCircleDeadZone scaling
        outputMagnitude = 0;
        if(magnitude > ADS){
            outputMagnitude = (((magnitude -outerDeadIn)*(100))/(outerDeadIn -  outerDeadOut));  //Converting to 0-100 range
            
            //Piece-wise curve customization
            if(outputMagnitude < midX ){
                outputMagnitude = (outputMagnitude*midY)/midX;
            }
            else{
                outputMagnitude = (((outputMagnitude - RX)*(100 - RY))/(100 - RX)) + RY;
            }
            
            //AntiDeadzone conversion
            outputMagnitude = (((outputMagnitude)*(outerDeadZoneOut - antiCDead))/(100)) + antiCDead;
      
       
           newX = (normX*outputMagnitude)/100;
           newY = (normY*outputMagnitude)/100;

            //antiSquareDeadZone scaling
            outputX = (abs(newX)*(100 - (antiSDead*100)/outerDeadOut))/100 + antiSDead;
            if(x < 0){outputX = outputX*(-1)}
            if(x == 0){outputX = 0;}
            
            outputY = (abs(newY)*(100 -(antiSDead*100)/outerDeadOut))/100 + antiSDead;
            if(y < 0){outputY = outputY*(-1)}
            if(y == 0){outputY = 0;}

            if(stick == 1){
                stickRX = outputX;
                stickRY = outputY;
            }
            else{
                stickLX = outputX;
                stickLY = outputY;
            }
            
        }
        else{
            if(stick == 1){
                stickRX = 0;
                stickRY = 0;
            }
            else{
                stickLX = 0;
                stickLY = 0;
            }
        }
    }
///////////////////PRECISION//////////////////////
    else{
    
        //Increasing antiCircleDeadZone to counter shrinkage with antiSquareDeadzone scaling below
        antiCDead = (antiCDead*((antiCDead*(100 - antiSDead))/((antiCDead*(100 - (antiSDead*100)/outerDeadOut))/100)) )/100;
    
        normX = (x*100)/magnitude;
        normY = (y*100)/magnitude;
 if(Values == FALSE){
        if(magnitude > outerDeadIn){magnitude = outerDeadIn}
        }

        //DeadZone and antiCircleDeadZone scaling
        outputMagnitude = 0;
        if(magnitude > dead*10){
            outputMagnitude = (((magnitude - dead*10)*(100))/(outerDeadIn - dead));  //Converting to 0-1000 range
        //Piece-wise curve customization
        if(outputMagnitude < RX*10 ){
            outputMagnitude = (outputMagnitude*RY)/RX;
        }
        else{
            outputMagnitude = (((outputMagnitude - RX*10)*(1000 - RY))/(1000 - LX*10)) + RY*10;
        }
        //AntiDeadzone conversion 0 - 1000
        outputMagnitude = (((outputMagnitude)*(outerDeadZoneOut - antiCDead))/(100)) + (antiCDead*10);
  //antiSquareDeadZone scaling
            outputX = (abs(newX)*(100 - (antiSDead*100)/outerDeadOut))/100 + antiSDead;
            if(x < 0){outputX = outputX*(-1)}
            if(x == 0){outputX = 0;}
            
            outputY = (abs(newY)*(100 -(antiSDead*100)/outerDeadOut))/100 + antiSDead;
            if(y < 0){outputY = outputY*(-1)}
            if(y == 0){outputY = 0;}


            if(stick == 1){
                stickRX = outputX;
                stickRY = outputY;
            }
            else{
                stickLX = outputX;
                stickLY = outputY;
            }
            
        }
        else{
            if(stick == 1){
                stickRX = 0;
                stickRY = 0;
            }
            else{
                stickLX = 0;
                stickLY = 0;
            }
        }
    }}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
	return 0;

	if (_val < _lval)
	return -1;

	if (_val > _lval)
	return 1;

	return 0;
}
function XY_Val(f_Axis, f_Val) {
    if(abs(get_val(f_Axis)) < 25)
        return f_Val;
            return get_ival(f_Axis);
}
function Load()
{
Anti_Recoil_Mod     [0] = get_pvar(SPVAR_1, 0, 100, -100);             DEFAULT_VERTICAL    [0] = get_pvar(SPVAR_2, 1, 100, 25);
DEFAULT_HORIZONTAL  [0] = get_pvar(SPVAR_3, 1, 300, 0);                Anti_Recoil_Release [0] = get_pvar(SPVAR_4, 1, 300, 80) ;
DYNAMIC_RC          [0] = get_pvar(SPVAR_5, 0, 100, -100);             Starting_Anti_Recoil_Value [0] = get_pvar(SPVAR_6, 1, 100, 25);
Ending_Anti_Recoil_Value   [0] = get_pvar(SPVAR_7, 1, 100, 35);        Total_Anti_Recoil_Time     [0] = get_pvar(SPVAR_8, 1, 100, 25);
recoil_drop                [0] = get_pvar(SPVAR_9,  1, 100, 20);       polar_angle                [0] = get_pvar(SPVAR_10, 1, 100, 95);
antirecoilStrength         [0] = get_pvar(SPVAR_11, 1, 100, 45);       Triple_Sticky       [0] = get_pvar(SPVAR_12, 0, 100, -100);
ADS_Size            [0] = get_pvar(SPVAR_13,1, 100, 16);               ADS_Wait_Value      [0] = get_pvar(SPVAR_14, 1, 100, 23 );
ADS_FIRE_Size       [0] = get_pvar(SPVAR_15, 1, 100, 20);              ADS_FIRE_Wait_Value [0] = get_pvar(SPVAR_16, 1, 100, 36);
HIPFIRE_Size        [0] = get_pvar(SPVAR_17, 1, 100, 20);              HIPFIRE_Wait_Value  [0] = get_pvar(SPVAR_18, 1, 100, 34);
PolarAssist   [0] = get_pvar(SPVAR_19, 0, 100, -100);                  PolarRadius   [0] = get_pvar(SPVAR_20, 1, 100, 22);
PolarAngle    [0] = get_pvar(SPVAR_21,  1, 100, 10);                   PolarRBoost   [0] = get_pvar(SPVAR_22,  1, 100,  8);
PolarABoost   [0] = get_pvar(SPVAR_23,  1, 100, 8);                    TwistedMinRad [0] = get_pvar(SPVAR_24, 1, 100,  8);
ChooseShapes  [0] = get_pvar(SPVAR_25, 1,   4,  0);                    ProgressionAA [0] = get_pvar(SPVAR_26, 0, 100, -100);
ProgPowerMin  [0] = get_pvar(SPVAR_27, 1, 100, -25);                   ProgPowerMax  [0] = get_pvar(SPVAR_28, 1, 100,   25);
ProgPowerInc  [0] = get_pvar(SPVAR_29, 1, 100,  3);                    ProgWaitMin   [0] = get_pvar(SPVAR_30, 1, 100,  1);
ProgWaitMax   [0] = get_pvar(SPVAR_31, 1, 100,   1);                   ProgWaitInc   [0] = get_pvar(SPVAR_32, 1, 100,   1);
ProgRelease   [0] = get_pvar(SPVAR_33, 1, 100,   20);                  RapidFire     [0] = get_pvar(SPVAR_34, 0, 100, -100);
RateOfFire    [0] = get_pvar(SPVAR_35, 1, 100,   0);                   MaxReloadTime [0] = get_pvar(SPVAR_36, 1, 100,  1000);
CancelReload = get_pvar(SPVAR_37, 0, 100, -100);                       AimSens = get_pvar(SPVAR_38, 0, 100, 100);
GEN_SENS = get_pvar(SPVAR_39, 1, 100,  100);                           ADS_SENS = get_pvar(SPVAR_40, 1, 100,  100);
FIRE_SENS = get_pvar(SPVAR_41, 1, 100, 100);                           ADS_FIRE_SENS = get_pvar(SPVAR_42, 1, 100, 100);
GRENADE_SENS = get_pvar(SPVAR_43, 1, 100, 100);                        //TRACKING = get_pvar(SPVAR_44, 1, 100, -100);
CancelSlide    [0] = get_pvar(SPVAR_45, 0, 100, -100);                 //aim_sens_corrections = get_pvar(SPVAR_46, 1, 100, -100);
in_game_menu_sens = get_pvar(SPVAR_47, 1, 100,  7);                    holdbreath    [0] = get_pvar(SPVAR_48, 0, 100, -100);
STEADY_RESOLUTION = get_pvar(SPVAR_49, 1, 100, 8);                     BUNNY_HOP     [0] = get_pvar(SPVAR_50, 0, 100, -100);
AA_BOOSTER = get_pvar(SPVAR_51, 0, 100, -100);                         HairTriggers = get_pvar(SPVAR_52, 0, 100, -100);
ToggleFastMelee = get_pvar(SPVAR_53, 0, 100, -100);                    //ToggleBlockRumble = get_pvar(SPVAR_54, 1, 100, -100);
Buttons = get_pvar(SPVAR_55, 0, 100, -100);                            ProfileButton = get_pvar(SPVAR_56, 0, 100, -100);
DEADZONES = get_pvar(SPVAR_57, 0, 100, -100);                          deadZoneL = get_pvar(SPVAR_58, 1, 100, 10);
deadZone = get_pvar(SPVAR_59, 1, 100,  15);                            TRACKING_STRENGTH = get_pvar(SPVAR_60, 1, 100, 10);
SlideDelay = get_pvar(SPVAR_61, 1, 100, 20);                           w = get_pvar(SPVAR_62, 1, 100, 70);

//FREE = get_pvar(SPVAR_63, 0, 100, -100);
//FREE = get_pvar(SPVAR_64, 0, 100, -100);
}
function Save()
{
set_pvar(SPVAR_1, Anti_Recoil_Mod      [0]);                           set_pvar(SPVAR_2, DEFAULT_VERTICAL     [0]);
set_pvar(SPVAR_3, DEFAULT_HORIZONTAL   [0]);                           set_pvar(SPVAR_4, Anti_Recoil_Release  [0]);
set_pvar(SPVAR_5, DYNAMIC_RC           [0]);                           set_pvar(SPVAR_6, Starting_Anti_Recoil_Value [0]);
set_pvar(SPVAR_7, Ending_Anti_Recoil_Value   [0]);                     set_pvar(SPVAR_8, Total_Anti_Recoil_Time     [0]);
set_pvar(SPVAR_9, recoil_drop                [0]);                     set_pvar(SPVAR_10, polar_angle               [0]);
set_pvar(SPVAR_11, antirecoilStrength        [0]);                     set_pvar(SPVAR_12, Triple_Sticky   [0]);
set_pvar(SPVAR_13, ADS_Size             [0]);                          set_pvar(SPVAR_14, ADS_Wait_Value       [0]);
set_pvar(SPVAR_15, ADS_FIRE_Size        [0]);                          set_pvar(SPVAR_16, ADS_FIRE_Wait_Value  [0]);
set_pvar(SPVAR_17, HIPFIRE_Size         [0]);                          set_pvar(SPVAR_18, HIPFIRE_Wait_Value   [0]);
set_pvar(SPVAR_19, PolarAssist     [0]);                               set_pvar(SPVAR_20, PolarRadius     [0]);
set_pvar(SPVAR_21, PolarAngle      [0]);                               set_pvar(SPVAR_22, PolarRBoost     [0]);
set_pvar(SPVAR_23, PolarABoost     [0]);                               set_pvar(SPVAR_24, TwistedMinRad   [0]);
set_pvar(SPVAR_25, ChooseShapes    [0]);                               set_pvar(SPVAR_26, ProgressionAA   [0]);
set_pvar(SPVAR_27, ProgPowerMin    [0]);                               set_pvar(SPVAR_28, ProgPowerMax    [0]);
set_pvar(SPVAR_29, ProgPowerInc    [0]);                               set_pvar(SPVAR_30, ProgWaitMin     [0]);
set_pvar(SPVAR_31, ProgWaitMax     [0]);                               set_pvar(SPVAR_32, ProgWaitInc     [0]);
set_pvar(SPVAR_33, ProgRelease     [0]);                               set_pvar(SPVAR_34, RapidFire       [0]);
set_pvar(SPVAR_35, RateOfFire      [0]);                               set_pvar(SPVAR_36, MaxReloadTime   [0]);
set_pvar(SPVAR_37, CancelReload);                                      set_pvar(SPVAR_38, AimSens);
set_pvar(SPVAR_39, GEN_SENS);                                          set_pvar(SPVAR_40, ADS_SENS);
set_pvar(SPVAR_41, FIRE_SENS);                                         set_pvar(SPVAR_42, ADS_FIRE_SENS);
set_pvar(SPVAR_43, GRENADE_SENS);                                      set_pvar(SPVAR_44, TRACKING);
set_pvar(SPVAR_45, CancelSlide    [0]);                                set_pvar(SPVAR_46, aim_sens_corrections);
set_pvar(SPVAR_47, in_game_menu_sens);                                 set_pvar(SPVAR_48, holdbreath     [0]);
set_pvar(SPVAR_49, STEADY_RESOLUTION);                                 set_pvar(SPVAR_50, BUNNY_HOP      [0]);
set_pvar(SPVAR_51, AA_BOOSTER);                                        set_pvar(SPVAR_52, HairTriggers);
set_pvar(SPVAR_53, ToggleFastMelee);                                   set_pvar(SPVAR_54, ToggleBlockRumble);
set_pvar(SPVAR_55, Buttons);                                           set_pvar(SPVAR_56, ProfileButton);
set_pvar(SPVAR_57, DEADZONES);                                         set_pvar(SPVAR_58, deadZoneL);
set_pvar(SPVAR_59, deadZone);                                          set_pvar(SPVAR_60, TRACKING_STRENGTH);
set_pvar(SPVAR_61, SlideDelay);                                        set_pvar(SPVAR_62, w );

//set_pvar(SPVAR_63, FREE);
//set_pvar(SPVAR_64, FREE);

}
