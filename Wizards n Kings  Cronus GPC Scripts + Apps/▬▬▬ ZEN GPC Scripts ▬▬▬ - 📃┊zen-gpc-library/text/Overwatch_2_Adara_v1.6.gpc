

																																																																							/*
=======================================================================================================

=======================================================================================================
                                   ..,:coodddddolc:;'..                                             
                               .,cdOKNWWWM MMMMWWWWWNX0ko:'.                                         
                            .;oONWWWWWWWWWWWWWWWWWWMMMWWWKxc'.    .'.                               
                           .dNWMMWWMMMWWNXXKKKXNWWMMMMWMMMWW0:.  'coc,.                             
                        .:c,;dXWMMWN0xoc;,''.'',:codkKWWMMNOc,:c,.'coo:.                            
                      .,xNW0o,;d0Ol,..              .':x0Oc,:kNWKl..:ooc.                           
                     .:0WMMMWKc...                     ...,xNMMMMNd'.;ooc.                          
                    .:KMMMMMW0:.         .,'.,.           'dNMMMMMWx'.;ooc;;;;,;,,,,,,,'.           
                    ;0MMMMMWk,.          ;k:.dd.           .lXMMMMMNo..:oooooooooooooooo;.          
                   .xWMMMMWO,           ,OX:.kXo.           .lXMMMMMK:.'lool:'.....,cooo;.          
                   ;KMMMMMX:.          'kWX:'kWXc.           .xWMMMMWx..:oo:. ....,;,;lo;.          
                  .lNMMMMMk'          .dNMXc'kMM0;..         .cXMMMMM0,.;ooc,':ll:'..,lo;.          
                  .dWMMMMWd.        .,xNMMXc'kMMW0xc.         ;KMMMMMK;.,looool:'...;loo;.          
                  .oWMMMMWx.      .,dXWMMMXc'kMMMMMNOc.       :KMMMMM0;.,lool:'...;loooo;.          
                  .lNMMMMMO'    .;xXMMMMMMX:'xWMMMMMMW0c..   .lNMMMMMO'.;oo:'. .';:::clo;.          
                   ,0MMMMMNl...;xXMMMMMMW0l..;xNMMMMMMMW0l'..,OMMMMMWo..:ol'    .  ...:o;.          
                   .oNMMMMMKc:kNMMMMMMW0l'.   .;xXWMMMMMMW0o:xWMMMMM0,.,lol:,,,,,,,,;:ll;.          
                    .kWMMMMMNNMMMMMMW0c..       .;cxXWMMMMMWNWMMMMMXc..clllllllllllllllc'           
                     'kWMMMMMMMMMMNOc.             .,dXWMMMMMMMMMMXl..:ll;..............            
                      'xNMMMMMMMMKl..                .;kNMMMMMMMW0c..:ll;.                          
                       .c0WMMMMMMNOo;..          ...,cxKWMMMMMMNx,.':lc,.                           
                         'oKWMMWMMMWNKOxolc::ccldkO0XWMMMMWMWNk:..,cl:'                             
                           'lONWWMWWWWWMMWWWWWWWWWWWWWWWWWWKx;....;c;.                              
                             .;okXNWMWWWWWWWWWWWWWWWWWWN0xc'.  .   .                                
                                .';lxO0XXNNWWNNNXK0Okoc,.                                           
                                     ...',;;;;;,'...                                             
=======================================================================================================
Thank You To Batts, DoGzTheFiGhTeR, DoNotAtMe, Highwater, Noozbar, SS_Nikolai, TaylorDrift21 And More!
=======================================================================================================
						     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
						    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
						    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
						    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
	           Version: 1.6 ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë Made By Avilio
						    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù 
=======================================================================================================
If You'd Like To Donate, Here's My Link! https://www.paypal.com/donate/?hosted_button_id=NMPGWU6FQX7WG
=======================================================================================================																																																																																																																					*//*
 				   _____  ______          _____      _____ _    _ _____ _____  ______ 
 		  		  |  __ \|  ____|   /\   |  __ \    / ____| |  | |_   _|  __ \|  ____|
 		  		  | |__) | |__     /  \  | |  | |  | |  __| |  | | | | | |  | | |__   
 		  		  |  _  /|  __|   / /\ \ | |  | |  | | |_ | |  | | | | | |  | |  __|  
 		  		  | | \ \| |____ / ____ \| |__| |  | |__| | |__| |_| |_| |__| | |____ 
 		  		  |_|  \_\______/_/    \_\_____/    \_____|\____/|_____|_____/|______|
 				
=======================================================================================================
ùó†ùóòùó°ùó®
=======================================================================================================
How To Enter The Menu 		- Hold L2/LT & Press OPTIONS/MENU

How To Exit The Menu 		- Hold L2/LT & Press CIRCLE/B

How To Enter A Mod 			- Press CROSS/A

How To Exit A Mod 			- Press CIRCLE/B

How To Cycle Through Heroes - Hold L2/LT & Press Either LEFT Or RIGHT

How To Toggle A Mod On/Off 	- Hold L2/LT & Press Either LEFT Or RIGHT

How To See Values 			- While A Mod Is On Press Either LEFT Or RIGHT To Cycle Through The Options

How To Edit A Value 		- Hold L2/LT & Press Either LEFT, RIGHT, UP Or DOWN

How To Cycle Through Binds  - Hold L2/LT & Press Either LEFT Or RIGHT

=======================================================================================================
ùó†ùó¢ùóóùó¶
=======================================================================================================
Binds				- Customize Script Binds (Make Sure Your In-Game And Script Binds Match!)

Hero Mods 			- Unique Hero Specific Mods

Aim Assist 			- Includes Legacy, Triple Sticky & DoGz Polar v6

Rotational AA		- Rotational Aim Assist (Separate To The Aim Assist Mod)

Steady Aim 			- DoNotAtMe's Steady Aim

Rapid Fire 			- Noozbar RPS Rapid Fire

Crouch Shot			- Spams Crouch While Holding Primary Fire Or Secondary Fire And Crouch

Ping On Fire		- Attempts To Ping Your Target When You Press Primary Fire

Bhop 				- Automatically Jumps While Holding Your Jump Bind

Hair Triggers 		- Faster Trigger Response

Stick Drift Removal - Tries To Eliminate Stick Drift

Custom Deadzone 	- Customize Your Deadzone (Overwatch Default Is 10)

Auto Reload			- Reloads On Primary_Fire Release

Custom Sensitivity	- Completely Customize Your Sensitivity

Vibrations			- Controller Vibration Toggle (IN-GAME VIBRATIONS MUST BE TURNED ON!)

=======================================================================================================
ùóõùóòùó•ùó¢ ùó†ùó¢ùóóùó¶
=======================================================================================================
Ashe			- Shotgun Jump (Look Down And Press Your Hero Mod Button)

Bastion			- Grenade Jump (Look Down And Press Your Hero Mod Button)

Echo			- Hold To Lift (Hold Ability_One To Automatically Fly Upwards)

Genji			- Shuriken Melee (Melee Is Replaced By Secondary_Fire Then Melee)

				- Dash Fan (Press And Hold Ability_One)

Hanzo			- Auto Storm Arrow (Hold Ability_One To Automatically Rapid Fire Arrows)

Junkrat			- Mine Jump (Look Down And Press Your Hero Mod Button)

				- Auto Detonate (Release Ability_One To Automatically Detonate A Mine)

Cassidy			- Better Roll (Press Your Hero Mod Button)

				- Ult Cancel (Hold Your Ultimate Button)
				
				- Anti Recoil (Activates On Secondary_Fire)

Mei				- Instant Wall (Press Your Hero Mod Button)

Pharah			- Rocket Jump (Look Down And Press Your Hero Mod Button)

Reaper			- Better Wraith Form (Release Ability_One When You Want To Exit Wraith Form)

Sojourn			- Slide Jump (Release Ability_One When You Want To Jump Out Of A Slide)

Soldier: 76		- Auto Sprint (Run Forward To Start Auto Sprinting)

				- Rocket Jump (Look Down And Press Your Hero Mod Button)
				
				- Anti Recoil (Activates On Primary_Fire)

Sombra			- Auto Hack (Press Secondary_Fire To Automatically Hack)

Symmetra		- Charged Orbs (Press Secondary_Fire To Fire A Fully Charged Orb)

				- Instant Wall (Hold Your Ultimate Bind To Select And Place Your Ultimate)
				
				- Instant TP (Hold Ability_Two To Select And Place Teleporter)

Torbjorn		- Auto Overload (Press And Hold Either Primary_Fire Or Secondary_Fire)

Tracer			- Blink Melee (Press Mod Button To Melee At The End Of A Blink)

Widowmaker		- Hook Jump (Release Ability_One To Jump Out Of A Hook)
				
				- Crouch Shot (Hold Secondary_Fire And Press Primary_Fire)

Ana				- Quickscope (Press Mod Button To Quickscope)

Baptiste		- Instant Matrix (Press Your Hero Mod Button)
				
				- Anti Recoil (Activates On Primary_Fire)

Brigitte		- Instant Bash (Press Your Hero Mod Button)

Kiriko			- Heal Shot (Press Your Hero Mod Button)

Lucio			- Swap & Amp (Hold Ability_One To Switch Song And Automatically Amp)

Mercy			- Better Super Jump (Release Ability_One To Super Jump)

				- GA Reset (Press Jump Or Crouch After Using Guardian Angel)

Moira			- Double Tap Orb (Double Press Primary_Fire Or Secondary_Fire To Fire An Orb)

				- Orb Fade (While Holding Primary_Fire Or Secondary_Fire Press Hero_Mod)

Zenyatta		- Auto Discord (Press Primary_Fire To Automatically Discord Someone)

D.Va			- Flying Ult (Press Mod Button To Send You Ultimate Out Flying)

Doomfist		- Slam Cancel (Release Ability_One To Cancel Slam)

Junker Queen	- Shoot Melee (Melee Is Replaced By Primary_Fire Then Melee)

Orisa			- Ultimate Release (Release Your Ultimate Button To Finish Your Ultimate)

Reinhardt		- Double Strike (Hold Ability_Two To Rapid Fire Strikes)

				- Charge Cancel Swing (Release Ability_One)

Roadhog			- Shoot Hook (Press Mod Button To Secondary_Fire Before Hooking)

Sigma			- Ult Levitate (Hold Your Ultimate Button To Use Your Ultimate And Start Levitating)

Winston			- Leap Melee (Release Ability_One To Melee)

Wrecking Ball	- Mine Piledriver (Press Mod Button To Use Ultimate And Piledrive)

Zarya			- Pulse Jump (Look Down And Press Your Hero Mod Button)

Ramattra		- Shield Confirm (Pressing Secondary_Fire Brings Up Blueprint, Press Again To Place)

======================================================================================================= 
ùó†ùóúùó¶ùóñ
=======================================================================================================																																																																																																																																																								
Rapid Melee 		   - Hold Melee To Spam Melee Attack

Battery Check		   - Press Your Controller Battery Check Bind To See Your Battery Percentage

On The Fly Hero Select - Hold The On The Fly Hero Select Bind And Press Either Left Or Right

Killswitch			   - Hold Your Killswitch Hold Bind And Press Your Killswitch Press Bind

======================================================================================================= 
ùó†ùóúùó¶ùóñ ùó¶ùóòùóßùóßùóúùó°ùóöùó¶
=======================================================================================================																																																																																																																																																								*/

define killswitchHold  	= PS4_L2;
define killswitchPress 	= PS4_SHARE;

int RapidMelee 			= TRUE; // TRUE  = On
								// FALSE = Off
																																																																																																																																																															/*
=======================================================================================================
Avilio#1394 - Feel Free To Message If You Need Further Help, Find A Bug Or Would Like Something Added
=======================================================================================================																																												
																																																																											
‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÑ‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ „ÄÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà „ÄÄ ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñà 
‚ñí‚ñà‚ñë ‚ñí‚ñà‚ñë‚ñÑ‚ñÑ ‚ñí‚ñà‚ñí‚ñà‚ñí‚ñà ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ „ÄÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñí‚ñà‚ñí‚ñà „ÄÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ ‚ñÄ 
‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñë‚ñÄ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ „ÄÄ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÄ‚ñÑ‚ñà „ÄÄ ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ ‚ñÑ

					 By Editing Something Below You Risk Breaking The Script!

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
																																																																																																																																				*/
































// Menu
int Menu;
int Mods;
int mainPage;
define MaxMods = 15;
define BindsTab 			= 1;
define HeroModTab 			= 2;
define AimAssistTab 		= 3;
define RotationalAATab 		= 4;
define SteadyAimTab 		= 5;
define RapidFireTab 		= 6;
define CrouchShotTab		= 7;
define PingTab 				= 8;
define BhopTab 				= 9;
define HairTriggersTab 		= 10;
define NoStickDriftTab 		= 11;
define CustomDeadzoneTab 	= 12;
define AutoReloadTab 		= 13;
define CustomSensitivityTab = 14;
define VibrationsTab	 	= 15;

//--------- Hero Mods ---------\\
int hmPage, hmSection;

int AsheMod1,BastionMod1,EchoMod1,GenjiMod1,GenjiMod2,HanzoMod1,CassidyMod1,CassidyMod2,CassidyMod3,MeiMod1,PharahMod1,ReaperMod1,SojournMod1,JunkratMod1,JunkratMod2,SoldierMod1,SoldierMod2,SoldierMod3,SombraMod1,SymmetraMod1,SymmetraMod2,SymmetraMod3,TorbjornMod1,TracerMod1,WidowmakerMod1,WidowmakerMod2,AnaMod1,BaptisteMod1,BaptisteMod2,BrigitteMod1,KirikoMod1,LucioMod1,MercyMod1,MercyMod2,MoiraMod1,MoiraMod2,ZenyattaMod1,DvaMod1,DoomfistMod1,JunkerQueenMod1,OrisaMod1,ReinhardtMod1,ReinhardtMod2,RoadhogMod1,SigmaMod1,WinstonMod1,WreckingBallMod1,ZaryaMod1,RamattraMod1;

int SoldierStrength;
int SoldierARV1,SoldierARV2;
int SoldierARV3 = 3;
int SoldierARV4 = 10;

int BaptisteARValue = 30;
int BaptisteARValue2 = 35;
int BaptisteARValue3 = 20;
int BaptisteStrength;

int CassidyARValue = 50;
int CassidyARStrength;

int GA_Active;
int RConfirming;

// Toggle/Type
int Hero; 		// 0 = None		// 6  = Junkrat // 12 = Soldier: 76	// 18 = Ana 	 // 24 = Moira			// 30 = Reinhardt
				// 1 = Ashe		// 7  = Cassidy // 13 = Sombra		// 19 = Baptiste // 25 = Zenyatta		// 31 = Roadhog
				// 2 = Bastion	// 8  = Mei		// 14 = Symmetra	// 20 = Brigitte // 26 = D.Va			// 32 = Sigma
				// 3 = Echo		// 9  = Pharah	// 15 = Torbjorn	// 21 = Kiriko 	 // 27 = Doomfist		// 33 = Winston
				// 4 = Genji	// 10 = Reaper	// 16 = Tracer		// 22 = Lucio 	 // 28 = Junker Queen	// 34 = Wrecking Ball
				// 5 = Hanzo	// 11 = Sojourn	// 17 = Widowmaker	// 23 = Mercy 	 // 29 = Orisa			// 35 = Zarya

//--------- Aim Assist ---------\\
int aaPage, aaSection;

// Toggle/Type
int AimAssist; 	// 0 = OFF
				// 1 = Legacy
				// 2 = Triple Sticky
				// 3 = DoGz Polar v6

// Legacy
int legacyAAV;
int legacyAAW;

// Triple Sticky
int ADS_Size;
int ADS_Wait_Value;
int HIPFIRE_Size;
int HIPFIRE_Wait_Value;
int ADS_FIRE_Size;
int ADS_FIRE_Wait_Value;
int Aim_Val, Wait_Val;
int a;

// DoGz Polar v6
int BasePower; // Real Polar (Zen) Under DeadZone on ADS
int BaseSpeed; // Real Polar (Zen) Under DeadZone on ADS
int FirePower; // Real Polar or DAM Polar Before Or After DeadZone or Fire
int FireSpeed; // Real Polar or DAM Polar Before Or After DeadZone On Fire
int ZonePower; // DAM Polar After DeadZone
int ZoneSpeed; // DAM Polar After DeadZone On ADS
int DeadZone;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,Speed;
const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};

//--------- Rotational Aim Assist ---------\\
int raPage, raSection;

// Rotational Aim Assist Toggle
int RotationalAA; // 0 = OFF
				  // 1 = ON

int RotationalAASize  = 1;
int RotationalAASpeed = 1;

//--------- Steady Aim ---------\\
int saPage, saSection;

// Steady Aim Toggle
int SteadyAim;	// 0 = OFF
				// 1 = ON

int ads_resolution	= 1; // Effects Ads Aiming Input
int look_resolution	= 1; // Effects Normal Aiming Input
int C_RX, C_RY;

//--------- Noozbar's RPS Rapid Fire ---------\\
int rfPage, rfSection;

// Rapid Fire Toggle
int RapidFire;	// 0 = OFF
				// 1 = ON
				
// Rapid Fire Quick Toggle
int RapidFireQT;

int rounds_per_second = 1; // Range: 1 to 25 RPS (Round/s)

int rapidfire_hold;
int rapidfire_release;

//--------- Bhop ---------\\
int bhPage;

int Bhop; // 0 = OFF
		  // 1 = ON

//--------- Ping On Fire ---------\\
int pofPage;

int PingOnFire; // 0 = OFF
		  	    // 1 = ON

//--------- Hair Triggers ---------\\
int htPage;

// Hair Trigger Toggle
int HairTriggers; // 0 = OFF
			  	  // 1 = ON

//--------- SS_Nikolai's Stick Drift Removal ---------\\
int sdrPage, sdrSection;

// Stick Drift Removal Toggle
int StickDriftRemoval; // 0 = OFF
			  	  	   // 1 = ON
			  	  	   
int DeadZoneValue;

//--------- Custom Deadzone ---------\\
int cdPage, cdSection;

// Custom Deadzone Toggle
int CustomDeadzone;	// 0 = OFF
					// 1 = ON

int CustomDZ;
const int8 Deadzones[] = {10,9,8,7,6,5,4,3,2,1};

//--------- Auto Reload ---------\\
int arPage, arSection;

// Auto Reload Toggle
int AutoReload;	// 0 = OFF
				// 1 = ON
				
//--------- Custom Sensitivity ---------\\
int csPage, csSection;

// Custom Sensitivity Toggle
int CustomSensitivity;	// 0 = OFF
						// 1 = ON

int lookSens 		= 100; // Look Sensitivity
int fireSens 		= 100; // Primary Fire Sensitivity
int adsSens 		= 100; // Secondary Fire Sensitivity
int adsfireSens 	= 100; // Primary Fire & Secondary Fire Sensitivity
int csSens;

//--------- Binds ---------\\
int bPage, bSection;

define aimY 	= PS4_RY;
define aimX 	= PS4_RX;
define moveY 	= PS4_LY;
define moveX 	= PS4_LX;

int Primary_Fire,Secondary_Fire,Ability_One,Ability_Two,Jump,Crouch,Reload,Melee,Ultimate,Ping,Hero_Mod,Switch_Weapon,BatteryCheck_Btn,OTFheroSelect;
int _Primary_Fire,_Secondary_Fire,_Ability_One,_Ability_Two,_Jump,_Crouch,_Reload,_Melee,_Ultimate,_Hero_Mod,_Ping,_Switch_Weapon,_BatteryCheck_Btn,_OTFheroSelect;

const int8 Key_Binds[] = {
	PS4_L2,PS4_L1,PS4_R2,PS4_R1,PS4_CROSS,PS4_SQUARE,PS4_TRIANGLE,PS4_CIRCLE,PS4_DOWN,PS4_LEFT,PS4_UP,PS4_RIGHT,PS4_L3,PS4_R3,PS4_SHARE,PS4_OPTIONS,PS4_PS
//  0      1      2	     3      4         5          6            7          8        9        10     11        12     13     14        15          16
}

//--------- Block Vibrations ---------\\
int bvPage, bvSection;

int BlockVibrations; // 0 = OFF
					 // 1 = ON
					 
//--------- Kill Switch ---------\\
int KillSwitch;

//--------- Crouch Shot ---------\\
int crsPage, crsSection;

int CrouchShot; // 0 = OFF
				// 1 = ON

//--------- Intro ---------\\
int Intro = TRUE;
int AnimationTime = 100;

// Init
init {
load();
cls_oled(OLED_BLACK);
Intro = get_slot();
set_rgb(255,255,255);
}

// Main
main {

		CustomBinds();
		
// Intro

	if(Intro){
		
		combo_run(IntroC);
		
		}

	if(get_ival(killswitchHold) && event_press(killswitchPress)){
	
		KillSwitch = !KillSwitch;
		
		}

	if(KillSwitch){
	
		combo_run(KillSwitchC);
		combo_stop(batteryCheck);
		
		}
		
	if(!KillSwitch){
	
// Menu Open/Close

	if(get_ival(PS4_L2) && event_press(PS4_OPTIONS)){
	
		Intro		= FALSE;
		combo_stop(IntroC);
		combo_stop(batteryCheck);
		combo_stop(saveC);
		
		Menu 		= TRUE;
		Mods		= 1;
		mainPage	= TRUE;
		
		}
	
	if(Menu){
	
	if(get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		MenuDefault();
		Save();
		ValueSave();
		combo_run(saveC);
		
		}
	}

// Menu

	if(Menu){
		
		vm_tctrl(30);
		set_rgb(255,255,255);
		menuDisplay();
		OLEDCross(FALSE);
		menuNavigation();
		blockInputs();
		
		}
		
// !Menu

	if(!Menu){
	
		cls_oled(OLED_BLACK);
		vm_tctrl(-6);
		set_rgb(255,255,255);

// Hero Mods

	if(Hero > 0 && get_ival(Hero_Mod)){
	
		set_val(Hero_Mod,0);
		
		}
	
	if(Hero == 1 && AsheMod1 && event_press(Hero_Mod)){
	
		combo_run(Ashe_SJ); // Ashe Shotgun Jump
		
		}
	
	if(Hero == 2 && BastionMod1 && event_press(Hero_Mod)){
	
		combo_run(Bastion_TGJ); // Bastion Tactical Grenade Jump
		
		}
		
	if(Hero == 3 && EchoMod1 && get_ival(Ability_One) && get_ptime(Ability_One) > 200){ // Echo Hold To Lift
	
		set_val(Jump,100);
		
		}
	
	if(Hero == 4 && GenjiMod1 && get_ival(Melee)){ // Genji Shuriken Melee
	
		set_val(Melee,0);
		
		}
		
	if(Hero == 4 && GenjiMod1 && event_press(Melee)){ // Genji Shuriken Melee
		
		combo_run(Genji_SM);
		
		}
	
	if(Hero == 4 && get_ival(Ability_One) && get_ptime(Ability_One) > 150){// Genji Dash Alt Fire
	
		combo_run(Genji_DA);
		
		}
	
	if(Hero == 5 && HanzoMod1 && get_ival(Ability_One) && get_ptime(Ability_One) > 150){
	
		combo_run(Hanzo_ASA); // Hanzo Auto Storm Arrow
		
		}
	
	if(Hero == 6 && JunkratMod1 && event_press(Hero_Mod)){
	
		combo_run(Junkrat_MJ); // Junkrat Mine Jump
		
		}
	
	if(Hero == 6 && JunkratMod2 && get_ptime(Ability_One) > 200 && event_release(Ability_One)){
	
		combo_run(Junkrat_AD); // Junkrat Auto Detonate
		
		}
	
	if(Hero == 7 && CassidyMod1 && event_press(Hero_Mod)){
	
		combo_run(Cassidy_BR); // Cassidy Better Roll
		
		}
	if(Hero == 7 && CassidyMod2 && CustomDeadzone){ // Cassidy Anti Recoil
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < CustomDZ){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(CustomDZ)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < CustomDZ){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(CustomDZ)){
		
		set_val(aimX,0);
		
		}
		
	if(event_press(Secondary_Fire)){
	
		combo_run(Cassidy_AR);
		
		}
	}
	
	if(Hero == 7 && CassidyMod2 && !CustomDeadzone){
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(10)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < 10){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(10)){
		
		set_val(aimX,0);
		
		}
	
	if(event_press(Secondary_Fire)){ // Cassidy Anti Recoil
	
		combo_run(Cassidy_AR);
		
		}
	}
	
	if(Hero == 7 && CassidyMod3 && get_ival(Ultimate) && get_ptime(Ultimate) > 200){ // Cassidy Ult Cancel

		combo_run(Cassidy_UC);
		
		}
	
	if(Hero == 8 && MeiMod1 && event_press(Hero_Mod)){
	
		combo_run(Mei_IW); // Mei Instant Wall
		
		}
	
	if(Hero == 9 && PharahMod1 && event_press(Hero_Mod)){
	
		combo_run(Pharah_RJ); // Pharah Rocket Jump
		
		}
	
	if(Hero == 10 && ReaperMod1 && event_release(Ability_One)){
	
		set_val(Primary_Fire,100); // Reaper Exit Wraith Form
		
		}
	
	if(Hero == 11 && SojournMod1 && get_ptime(Ability_One) > 200 && event_release(Ability_One)){
	
		set_val(Jump,100); // Sojourn Slide Jump
		
		}
	
	if(Hero == 12 && SoldierMod1 &&get_ival(moveY) < -90){ // Soldier: 76 Auto Sprint
	
		set_val(Ability_One,100);
		
		}
	
	if(Hero == 12 && SoldierMod2 && event_press(Hero_Mod)){
	
		combo_run(Soldier_RJ); // Soldier: 76 Rocket Jump
		
		}
		
	if(Hero == 12 && SoldierMod3 && CustomDeadzone){ // Soldier Anti Recoil
	
	if(get_ival(aimX) >= -20 && get_ival(aimX) <= 20){
	
		SoldierARV1 = SoldierARV3 + SoldierStrength;
		SoldierARV2 = SoldierARV4 + SoldierStrength;
		
		}
	
	if(get_ival(aimX) <= -20 || get_ival(aimX) >= 20){
	
		SoldierARV1 = SoldierARV3 + SoldierStrength / 2 + 2;
		SoldierARV2 = SoldierARV4 + SoldierStrength / 2 + 2;
		
		}
	
	if(get_ival(Primary_Fire)){
		combo_run(Soldier_ARC); // Soldier: 76 Anti Recoil
		} else {
		combo_stop(Soldier_ARC);
		}
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < CustomDZ){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(CustomDZ)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < CustomDZ){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(CustomDZ)){
		
		set_val(aimX,0);
		
		}
	
	
	}
	
	if(Hero == 12 && SoldierMod3 && !CustomDeadzone){
	
	if(get_ival(aimX) >= -20 && get_ival(aimX) <= 20){
	
		SoldierARV1 = SoldierARV3 + SoldierStrength;
		SoldierARV2 = SoldierARV4 + SoldierStrength;
		
		}
	
	if(get_ival(aimX) <= -20 || get_ival(aimX) >= 20){
	
		SoldierARV1 = SoldierARV3 + SoldierStrength / 2 + 2;
		SoldierARV2 = SoldierARV4 + SoldierStrength / 2 + 2;
		
		}
		
	if(get_ival(Primary_Fire)){
		combo_run(Soldier_ARC); // Soldier: 76 Anti Recoil
		} else {
		combo_stop(Soldier_ARC);
		}
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(10)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < 10){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(10)){
		
		set_val(aimX,0);
		
		}
	}
	
	if(Hero == 13 && SombraMod1 && event_press(Secondary_Fire)){
	
		combo_run(Sombra_AH); // Sombra Auto Hack
		
		}
	
	if(Hero == 14 && SymmetraMod1 && event_press(Secondary_Fire)){
	
		combo_run(Symmetra_FCO); // Symmetra Full Charged Orbs
		
		}
	
	if(Hero == 14 && SymmetraMod2 && get_ival(Ultimate) && get_ptime(Ultimate) > 150){
	
		set_val(Primary_Fire,100); // Symmetra Instant Wall
		
		}
	
	if(Hero == 14 && SymmetraMod3 && get_ival(Ability_Two) && get_ptime(Ability_Two) > 150){
	
		set_val(Primary_Fire,100); // Symmetra TP
		
		}
	
	if(Hero == 15 && TorbjornMod1 && get_ival(Primary_Fire) && get_ptime(Primary_Fire) > 150){
		
		set_val(Ability_Two,100); // Torbjorn Auto Overload
		
		}
		
	if(Hero == 15 && TorbjornMod1 && get_ival(Secondary_Fire) && get_ptime(Secondary_Fire) > 150){

		set_val(Ability_Two,100); // Torbjorn Auto Overload
		
		}
	
	if(Hero == 16 && TracerMod1 && event_press(Hero_Mod)){
	
		combo_run(Tracer_BM); // Tracer Blink Melee
		
		}
		
	if(Hero == 17 && WidowmakerMod1 && event_release(Ability_One)){
	
		set_val(Jump,100); // Widowmaker Hook Jump
		
		}
	
	if(Hero == 17 && WidowmakerMod2 && get_ival(Secondary_Fire) && event_press(Primary_Fire)){
	
		combo_run(Widowmaker_CS); // Widowmaker Crouch Shot
		
		}
	
	if(Hero == 18 && AnaMod1 && event_press(Hero_Mod)){
	
		combo_run(Ana_QS); // Ana Quick Scope
		
		}
		
	if(Hero == 19 && BaptisteMod1 && event_press(Hero_Mod)){
	
		combo_run(Baptiste_IM); // Baptiste Instant Matrix
		
		}
		
	if(Hero == 19 && BaptisteMod2 && !CustomDeadzone){ // Baptiste Anti Recoil
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(10)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < 10){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(10)){
		
		set_val(aimX,0);
		
		}
	
	if(event_press(Primary_Fire) || get_ival(Primary_Fire)){ // Baptiste Anti Recoil
	
	if(get_rumble(RUMBLE_A) >=50 && get_rumble(RUMBLE_B) >=29){
	
		combo_run(BaptisteARC);
		
			}
		}
	}
	
	if(Hero == 19 && BaptisteMod2 && CustomDeadzone){ // Baptiste Anti Recoil
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < CustomDZ){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(CustomDZ)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < CustomDZ){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(CustomDZ)){
		
		set_val(aimX,0);
		
		}
	
	if(event_press(Primary_Fire) || get_ival(Primary_Fire)){ // Baptiste Anti Recoil
	
	if(get_rumble(RUMBLE_A) >=50 && get_rumble(RUMBLE_B) >=29){
	
		combo_run(BaptisteARC);
		
			}
		}
	}
	
	if(Hero == 20 && BrigitteMod1 && event_press(Hero_Mod)){
	
		combo_run(Brigitte_BJ); // Brigitte Instant Bash
		
		}
	
	if(Hero == 21 && KirikoMod1 && event_press(Hero_Mod)){
	
		combo_run(Kiriko_SH); // Kiriko Heal Shot
		
		}
	
	if(Hero == 22 && LucioMod1 && get_ival(Ability_One) && get_ptime(Ability_One) > 600){
	
		combo_run(Lucio_SA); // Lucio Swap & Amp
		
		}
	
	if(Hero == 23 && MercyMod1 && get_ptime(Ability_One) > 150){ // Mercy Better Super Jump
	
	if(event_release(Ability_One))
	
		set_val(Crouch,100);
		
		}
	
	if(Hero == 23 && MercyMod2 && event_press(Ability_One)){ // Mercy GA Reset
	
		GA_Active = TRUE;
		
		}
	
	if(Hero == 23 && MercyMod2 && GA_Active){
	
	if(event_press(Jump) || event_press(Crouch)){
	
		combo_run(Mercy_GAR); // Mercy GA Reset
		
		}
	}
	
	if(Hero == 24 && MoiraMod1 && get_ival(Secondary_Fire) && get_brtime(Secondary_Fire) < 100){ // Moira Double Tap Orb

		combo_run(Moira_D_Orb);
		
		}
		
	if(Hero == 24 && MoiraMod1 && get_ival(Primary_Fire) && get_brtime(Primary_Fire) < 100){ // Moira Double Tap Orb

		combo_run(Moira_H_Orb);
		
		}
	
	if(Hero == 24 && MoiraMod2 && get_ival(Primary_Fire) && event_press(Hero_Mod)){ // Moira Healing Orb Fade
	
		combo_run(Moira_OF);
		
		}
	
	if(Hero == 24 && MoiraMod2 && get_ival(Secondary_Fire) && event_press(Hero_Mod)){ // Moira Damage Orb Fade
	
		combo_run(Moira_OF);
		
		}
	
	if(Hero == 25 && ZenyattaMod1 && event_press(Primary_Fire)){ // Zenyatta Auto Discord
	
		set_val(Ability_One,100);
		
		}
	
	if(Hero == 26 && DvaMod1 && event_press(Hero_Mod)){ // D.Va Flying Ultimate
	
		combo_run(Dva_FU);
		
		}
	
	if(Hero == 27 && DoomfistMod1 && event_press(Hero_Mod)){ // Doomfist Slam Cancel
	
		combo_run(Doomfist_SC);
		
		}
	
	if(Hero == 28 && JunkerQueenMod1 && get_ival(Melee)){
	
		set_val(Melee,0);
		
		}
		
	if(Hero == 28 && JunkerQueenMod1 && event_press(Melee)){ // Junker Queen Shoot Melee
	
		combo_run(JunkerQueen_SM);
		
		}
	
	if(Hero == 29 && OrisaMod1 && event_release(Ultimate)){ // Orisa Ultimate Release
	
		set_val(Primary_Fire,100);
		
		}
	
	if(Hero == 30){
	
	if(ReinhardtMod1 && get_ival(Ability_Two) && get_ptime(Ability_Two) > 200){ // Reinhardt Double Strike
	
		combo_run(Reinhardt_DS);
		
		}
	
	if(ReinhardtMod2){
		if(get_ptime(Ability_One) > 150){
			if(event_release(Ability_One)){
				combo_run(Reinhardt_CCS); // Reinhardt Charge Cancel Swing
				}
			}
		}
	}
	
	if(Hero == 31 && RoadhogMod1 && event_press(Hero_Mod)){ // Roadhog Shoot Hook
	
		combo_run(Roadhog_SH);
		
		}
	
	if(Hero == 32 && SigmaMod1 && get_ival(Ultimate) && get_ptime(Ultimate) > 150){ // Sigma Ult Levitate
	
		set_val(Jump,100);
		
		}
	
	if(Hero == 33 && WinstonMod1 && get_ptime(Ability_One) > 500 && event_release(Ability_One)){ // Winston Leap Melee
	
		set_val(Melee,100);
		
		}
	
	if(Hero == 34 && WreckingBallMod1 && event_press(Hero_Mod)){ // Wrecking Ball Mine Piledrive
	
		combo_run(WreckingBall_MP);
		
		}
	
	if(Hero == 35 && ZaryaMod1 && event_press(Hero_Mod)){ // Zarya Pulse Jump
	
		combo_run(Zarya_PJ);
		
		}
	
	if(Hero == 36 && RamattraMod1){ // Zarya Pulse Jump
	
		if(get_ival(Primary_Fire)){
			RConfirming = FALSE;
			combo_stop(Ramattra_SC);
			}
			if(event_press(Secondary_Fire)){
				RConfirming = !RConfirming;
				}
				if(RConfirming){ // Confirming
					set_val(Secondary_Fire,100);
						} // Confirming End
		
		}
 
 	if(AimAssist > 0 && AimAssist < 3 && !CustomDeadzone){
 	
 	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(10)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < 10){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(10)){
		
		set_val(aimX,0);
		
		}
	}
	
	if(AimAssist > 0 && AimAssist < 2 && CustomDeadzone){
 	
 	if(get_ival(aimY) > 0 && get_ival(aimY) < CustomDZ){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(CustomDZ)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < CustomDZ){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(CustomDZ)){
		
		set_val(aimX,0);
		
		}
	}
	// 3
	if(AimAssist == 3 && !CustomDeadzone){
 	
 	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(10)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) > 0 && get_ival(aimY) < 10){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(10)){
		
		set_val(aimX,0);
		
		}
	}
	
	if(AimAssist == 3 && CustomDeadzone){
 	
 	if(get_ival(aimY) > 0 && get_ival(aimY) < CustomDZ){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimY) < 0 && get_ival(aimY) > inv(CustomDZ)){
		
		set_val(aimY,0);
		
		}
	
	if(get_ival(aimX) > 0 && get_ival(aimX) < CustomDZ){
		
		set_val(aimX,0);
		
		}
	
	if(get_ival(aimX) < 0 && get_ival(aimX) > inv(CustomDZ)){
		
		set_val(aimX,0);
		
		}
	}
 
// Legacy Aim Assist
	
	if(AimAssist == 1){
	
	if(get_ival(Secondary_Fire) || get_ival(Primary_Fire)){
	
		combo_run(legacyAAC);
		
	} else {
	
		combo_stop(legacyAAC);
		
		}
	}
	
// Triple Sticky Aim Assist
	
	if(AimAssist == 2){
	
	if(get_ival(Secondary_Fire) && !get_ival(Primary_Fire)) {
	
		combo_run(Sticky_AA);
		Aim_Val  = ADS_Size;
		Wait_Val = ADS_Wait_Value;
	
	} else if(get_ival(Secondary_Fire) && get_ival(Primary_Fire)) {
	
		combo_run(Sticky_AA);
		Aim_Val  = ADS_FIRE_Size;
		Wait_Val = ADS_FIRE_Wait_Value;
	
	} else if(!get_ival(Secondary_Fire) && get_ival(Primary_Fire)) {
	
		combo_run(Sticky_AA);
		Aim_Val  = HIPFIRE_Size; // ùï•ùïôùïöùï§ ùï§ùïîùï£ùïöùï°ùï• ùï®ùïíùï§ ùïûùïíùïïùïñ ùïìùï™ ùî∏ùïßùïöùïùùïöùï†
		Wait_Val = HIPFIRE_Wait_Value;
	
	} else {
	
		combo_stop(Sticky_AA);
	
		}
	}
	
// DoGz Polar v6 Aim Assist
	
	if(AimAssist == 3){
	
	if((get_ival(Secondary_Fire) || get_ival(Primary_Fire)) && abs(get_ival(aimX)) <= DeadZone && abs(get_ival(aimY)) <= DeadZone){
			
		Speed += Angle;
		
	if(Speed >= 360)
	
		Speed = 0;

	if(get_ival(Primary_Fire)) {
                
		Radius = FirePower;
        Angle  = FireSpeed;
        
		} else {
                    
		Radius = BasePower;
		Angle  = BaseSpeed;

		}

		set_polar(POLAR_RS,Speed,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 3 + Radius * 327);
		
		}
	    
	if((get_ival(Secondary_Fire) || get_ival(Primary_Fire)) && (abs(get_ival(aimX)) > DeadZone || abs(get_ival(aimY)) > DeadZone)) {
            
        actual_X = get_ival(aimX);
        actual_Y = get_ival(aimY);
        actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
        max_Magnitude = (actual_Magnitude < 100);

    if(get_ival(Primary_Fire)) {
                
         Radius = FirePower;
         Angle  = FireSpeed;
         
		} else {
 
		Radius = ZonePower;
		Angle  = ZoneSpeed;
                	
		}
            
		angle += Angle;
		angle = angle % 360;
		sin_angle = DamPolar[angle % 360];
		cos_angle = DamPolar[(angle + 270) % 360];
		cos_angle = (cos_angle * Radius) / 100;
		sin_angle = (sin_angle * Radius) / 100;

	if (actual_Magnitude <= 20) { 
                
        sin_angle -= actual_Y; 
        cos_angle -= actual_X; 

		} else { 
                    
		sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
		cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;

		} 

        		Set_Val(aimX,cos_angle);
        		Set_Val(aimY,sin_angle);

		}
	} // ·¥õ ú…™Íú± Íú±·¥Ñ Ä…™·¥ò·¥õ ·¥°·¥ÄÍú± ·¥ç·¥Ä·¥Ö·¥á  ô è ·¥Ä·¥†…™ ü…™·¥è
	
	if(SteadyAim){ 
	
		C_RX = get_val(aimX);
    	C_RY = get_val(aimY);
	
	if(get_ival(Secondary_Fire)){

		C_RX = GetSteadyAim(C_RX,ads_resolution);
        C_RY = GetSteadyAim(C_RY,ads_resolution);    
    	
    	} else {
    	
    	C_RX = GetSteadyAim(C_RX,look_resolution);
        C_RY = GetSteadyAim(C_RY,look_resolution);    
    	
    	}
        
        set_val(aimX, clamp(C_RX, -100, 100));
        set_val(aimY, clamp(C_RY, -100, 100));
		
		}
	
// Rapid Fire
	
	if(RapidFire){
	
		rapidfire_hold = 500 / rounds_per_second;
		rapidfire_release = rapidfire_hold - 10;
		combo_run(RapidFireOnIndicator);
	
	if(rapidfire_hold < 0)
		
		rapidfire_hold = 0;
 
	if(get_val(Primary_Fire))
		
		combo_run(RAPIDFIRE);

		}
	
// Bhop
	
	if(Bhop){
	
	if(get_ival(Jump) && get_ptime(Jump) >= 200){
	
		combo_run(bhopC);
		
		}
	}

// Hair Triggers
	
	if(HairTriggers){
	
	if(get_ival(Secondary_Fire)){ // ·µó ∞‚Å±À¢ À¢·∂ú ≥‚Å±·µñ·µó  ∑·µÉÀ¢ ·µê·µÉ·µà·µâ ·µá ∏ ·¥¨·µõ‚Å±À°‚Å±·µí
	
		set_val(Secondary_Fire,100);
		
		}
	
	if(get_ival(Primary_Fire)){
	
		set_val(Primary_Fire,100);
		
		}
	}
	
// Stick Drift Removal
	
	if(StickDriftRemoval){

    if(isqrt(pow(get_ival(aimY), 2) + pow(get_ival(aimX), 2)) <= DeadZoneValue){
        
        set_val(aimY, 0);
        set_val(aimX, 0);
    	
    	}

    if(isqrt(pow(get_ival(moveX), 2) + pow(get_ival(moveY), 2)) <= DeadZoneValue){
        
        set_val(moveX, 0);
        set_val(moveY , 0);
    
    	}
    }

// Custom Deadzone

    if(CustomDeadzone){
	
		deadzone(aimX,aimY,DZ_CIRCLE,Deadzones[CustomDZ]);
		
			}

// Battery Check

	if(!Intro && event_press(BatteryCheck_Btn)){
	
		combo_run(batteryCheck);

		}

// On The Fly Hero Select
	
	if(get_ival(OTFheroSelect)){
	
	if(get_ival(PS4_RIGHT)){
	
		set_val(PS4_RIGHT,0);
		
		}
	
	if(get_ival(PS4_LEFT)){
	
		set_val(PS4_LEFT,0);
		
		}
	
	if(event_press(PS4_RIGHT)){
	
		Hero ++;
		Save();
		combo_stop(IntroC);
		combo_stop(heroSelectC);
		combo_run(heroSelectC);
		
		}
	
	if(event_press(PS4_LEFT)){
	
		Hero --;
		Save();
		combo_stop(IntroC);
		combo_stop(heroSelectC);
		combo_run(heroSelectC);	
		
		}
	
	if(Hero < 0){
	
		Hero = 36;
		
		}
		
	if(Hero > 36){
	
		Hero = 0;
		
			}
		}

// Rapid Melee

	if(RapidMelee){
	
	if(get_ival(Melee)){
	
		combo_run(MeleeC);
		
		}
	}
	
// Auto Reload

	if(AutoReload){
	
	if(event_release(Primary_Fire)){
	
		combo_run(AutoReloadC);
		
		}
	}
	
// Custom Sensitivity

	if(CustomSensitivity){ // Custom Sensitivity
	
	if(!get_ival(Secondary_Fire) && !get_ival(Primary_Fire)){
	
		csSens = lookSens;
	
	} else if(get_ival(Secondary_Fire) && !get_ival(Primary_Fire)){
	
		csSens = adsSens;

	} else if(!get_ival(Secondary_Fire) && get_ival(Primary_Fire)){
	
		csSens = fireSens;

	} else if(get_ival(Secondary_Fire) && get_ival(Primary_Fire)){
	
		csSens = adsfireSens;
	
		}

		sensitivity(aimY,NOT_USE,csSens);
		sensitivity(aimX,NOT_USE,csSens);
		
		}

// Block Vibrations

	if(!BlockVibrations){
	
		block_rumble();
		
		}

// Rotational AA

	if(RotationalAA){
	
	if(get_ival(Primary_Fire) || get_ival(Secondary_Fire)){
	
		combo_run(RotationalAAC);
		
		} else {
		
		combo_stop(RotationalAAC);
		
		}
	}

// Ping On Fire

	if(PingOnFire){
	
	if(event_press(Primary_Fire)){
	
		combo_run(PingC);
		
		}
	}

// Crouch Shot

	if(CrouchShot){
	
	if(get_ival(Primary_Fire) && get_ival(Crouch) || get_ival(Secondary_Fire) && get_ival(Crouch)){
	
		combo_run(CrouchShotC);
		
		}
	}
	
	} // !Menu End
	} // Killswitch End
	
	
}

// Combos
combo Ramattra_SC { // Ramattra Shield Confirm Combo
wait(25);
set_val(Secondary_Fire,0);
wait(25);
set_val(Secondary_Fire,100);
wait(25);
RConfirming = FALSE;
}
combo Reinhardt_CCS { // Reinhardt Charge Cancel Swing
wait(100);
set_val(Ability_One,100);
wait(50);
set_val(Ability_One,0);
wait(50);
set_val(Primary_Fire,100);
wait(500);
}
combo CrouchShotC { // Crouch Shot Combo
wait(10);
set_val(Crouch,0);
wait(10);
}
combo PingC { // Ping On Fire
set_val(Ping,100);
wait(50);
set_val(Ping,0);
wait(50);
set_val(Ping,100);
wait(50);
wait(1000);
}
combo RotationalAAC { // Rotational Aim Assist Combo
Set_Val(moveY,inv(RotationalAASize));
wait(RotationalAASpeed);
Set_Val(moveX,RotationalAASize);
wait(RotationalAASpeed);
Set_Val(moveY,RotationalAASize);
wait(RotationalAASpeed);
Set_Val(moveX,inv(RotationalAASize));
wait(RotationalAASpeed);
}
combo Mercy_GAR { // Mercy GA Reset
wait(150);
set_val(Ability_One,100);
wait(50);
GA_Active = FALSE;
}
combo Widowmaker_CS { // Widowmaker Crouch Shot
wait(75);
set_val(Crouch,100);
wait(50);
wait(20);
set_val(Crouch,100);
wait(50);
wait(20);
}
combo Moira_OF { // Moira Orb Fade Combo
set_val(Ability_Two, 100);
wait(100);
set_val(Ability_Two, 0);
wait(50);
set_val(Ability_One, 100);
wait(100);
set_val(Ability_One, 0);
}
combo Genji_DA { // Genji Dash Alt Fire
set_val(Secondary_Fire, 100);
wait(600);
}
combo AutoReloadC { // Auto Reload Combo
set_val(Reload,100);
wait(300);
}
combo MeleeC { // Rapid Melee Combo
wait(10);
set_val(Melee,100);
wait(10);
set_val(Melee,0);
wait(10);
}
combo Cassidy_UC { // Cassidy Ult Cancel
set_val(Ultimate,100);
wait(50);
set_val(Secondary_Fire,100);
wait(50);
wait(2000);
}
combo Cassidy_AR { // Cassidy Anti Recoil
Set_Val(aimY,CassidyARValue + CassidyARStrength);
wait(700);
}
combo BaptisteARC { // Baptiste Anti Recoil
Set_Val(aimY,BaptisteARValue + BaptisteStrength);
wait(100);
Set_Val(aimY,BaptisteARValue2 + BaptisteStrength);
wait(100);
Set_Val(aimY,BaptisteARValue3 + BaptisteStrength);
wait(200);
wait(100);
}
combo Soldier_ARC { // Soldier: 76 Anti Recoil
Set_Val(aimY,SoldierARV1);
wait(500);
Set_Val(aimY,SoldierARV2);
wait(3000);
}
combo Zarya_PJ { // Zarya Pulse Jump
set_val(Jump,100);
wait(50);
set_val(Secondary_Fire,100);
wait(50);
}
combo WreckingBall_MP { // Wrecking Ball Mine Piledrive
set_val(Ultimate, 100);
wait(250);
wait(50);
set_val(Crouch, 100);
wait(500);
}
combo Roadhog_SH { // Roadhog Shoot Hook
set_val(Secondary_Fire,100);
wait(50);
set_val(Ability_One,100);
wait(50);
}
combo Reinhardt_DS { // Reinhardt Double Strike
wait(10);
set_val(Ability_Two,0);
wait(10);
}
combo JunkerQueen_SM { // Junker Queen Shoot Melee
set_val(Primary_Fire,100);
wait(50);
set_val(Melee,100);
wait(20);
}
combo Doomfist_SC { // Doomfist Slam Cancel
set_val(Ability_One, 100);
wait(50);
set_val(Ability_Two, 100);
wait(50);
}
combo Dva_FU {
set_val(Ability_One, 100);
wait(20);
set_val(Ultimate, 100);
wait(50);
}
combo Moira_H_Orb { // Moira Double Tap Orb
set_val(Ability_Two,100);
wait(50);
set_val(Primary_Fire,100);
wait(50);
}
combo Moira_D_Orb { // Moira Double Tap Orb
set_val(Ability_Two,100);
wait(50);
set_val(Secondary_Fire,100);
wait(50);
}
combo Lucio_SA { // Lucio Swap & Amp
set_val(Ability_Two,100);
wait(50);
wait(1000);
}
combo Kiriko_SH { // Kiriko Heal Shot
set_val(Secondary_Fire, 100);
wait(100);
wait(50);
set_val(Primary_Fire, 100);
wait(100);
}
combo Brigitte_BJ { // Brigitte Instant Bash
set_val(Secondary_Fire,100);
set_val(Primary_Fire,100);
wait(20);
}
combo Baptiste_IM { // Baptiste Instant Matrix
set_val(Ultimate,100);
wait(30);
set_val(Primary_Fire,100);
wait(30);
}
combo Ana_QS { // Ana Quick Scope
set_val(Secondary_Fire, 100);
wait(200);
set_val(Primary_Fire, 100);
set_val(Secondary_Fire, 100);
wait(100);
}
combo Tracer_BM { // Tracer Blink Melee
set_val(Ability_One,100);
wait(10);
set_val(Melee,100);
wait(100);
}
combo Symmetra_FCO { // Symmetra Full Charged Orbs
set_val(Secondary_Fire,100);
wait(1000);
}
combo Junkrat_MJ { // Junkrat Mine Jump
set_val(Ability_One, 100);
wait(50);
set_val(Jump, 100);
wait(10);
set_val(Secondary_Fire, 100);
wait(50);
}
combo Junkrat_AD { // Junkrat Auto Detonate
set_val(Secondary_Fire, 100);
wait(50);
}
combo Mei_IW { // Mei Instant Wall
set_val(Ability_Two,100);
wait(30);
set_val(Primary_Fire,100);
wait(30);
}
combo Pharah_RJ { // Pharah Rocket Jump
set_val(Jump,100);
wait(10);
set_val(Primary_Fire,100);
set_val(Jump,100);
wait(50);
}
combo Soldier_RJ { // Soldier: 76 Rocket Jump
set_val(Jump,100);
wait(10);
set_val(Secondary_Fire,100);
wait(50);
}
combo Sombra_AH { // Sombra Auto Hack
set_val(Secondary_Fire,100);
wait(800);
}
combo Cassidy_BR { // Cassidy Better Roll
set_val(Jump, 100);
wait(10);
set_val(Ability_One, 100);
wait(50);
}
combo Hanzo_ASA { // Hanzo Auto Storm Arrow
wait(10);
set_val(Primary_Fire,100);
wait(10);
}
combo Genji_SM { // Genji Shuriken Melee
set_val(Secondary_Fire,100);
wait(50);
set_val(Melee,100);
wait(20);
}
combo Bastion_TGJ { // Bastion Tactical Grenade Jump
set_val(Secondary_Fire,100);
wait(50);
wait(450);
set_val(Jump,100);
wait(50);
}
combo Ashe_SJ { // Ashe Shotgun Jump
set_val(Ability_One, 100);
wait(50);
set_val(Jump, 100);
wait(50);
}
combo legacyAAC { // Legacy Aim Assist Combo
Set_Val(aimY,inv(legacyAAV));
wait(legacyAAW);
Set_Val(aimX,inv(legacyAAV));
wait(legacyAAW);
Set_Val(aimY,legacyAAV);
wait(legacyAAW);
Set_Val(aimX,legacyAAV);
wait(legacyAAW);
}
combo Sticky_AA { // Triple Sticky Combo
a = random(-15, 15)
Set_Val(aimY,Aim_Val);
wait(Wait_Val);
Set_Val(aimX,Aim_Val);
set_val(moveX,a);
wait(Wait_Val);
Set_Val(aimY, Aim_Val * -1);
wait(Wait_Val);
Set_Val(aimX,Aim_Val * -1);
set_val(moveX,a * -1);
wait(Wait_Val);
}
combo RAPIDFIRE { // Rapid Fire Combo
wait(rapidfire_hold);
set_val(Primary_Fire,0);
wait(rapidfire_release);
}
combo bhopC { // Bhop Combo
wait(10);
set_val(Jump,100);
wait(10);
set_val(Jump,0);
wait(10);
}
combo RapidFireOnIndicator {
set_rgb(255,255,255);
wait(200);
set_hsb(0,0,0); // Zen Eyes Off
wait(200);
}
combo saveC { // Save Combo
cls_oled(0);
printf(Center_X(7, OLED_FONT_SMALL_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,saveS[0]);
wait(1000);
}
combo KillSwitchC { // Kill Switch Combo
cls_oled(0);
wait(300);
printf(Center_X(7, OLED_FONT_SMALL_WIDTH),18,OLED_FONT_LARGE,OLED_WHITE,killswitchS[0]);
wait(300);
}
combo batteryCheck { // Battery Check
batteryDisplay();
wait(3000);
cls_oled(0);
}
combo IntroC { // Intro
vm_tctrl(30);
set_rgb(255,255,255);
image_oled(32,58, TRUE, TRUE, overwatchLogo[0]);
printf(Center_X(8, OLED_FONT_SMALL_WIDTH),46,OLED_FONT_MEDIUM,OLED_WHITE,introS[1]);
printf(Center_X(-7, OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,introS[2]);
line_oled(1, 44, 127, 44, 1, 1);
wait(2500);
vm_tctrl(30);
cls_oled(OLED_BLACK);
wait(10);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro1[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro2[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro3[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro4[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro5[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro6[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro7[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro8[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro9[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro10[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro11[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro12[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro13[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro14[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro15[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro16[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro17[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro18[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro19[0]);
wait(AnimationTime);
vm_tctrl(30);
set_hsb(330,100,100);
image_oled(0, 0, TRUE, TRUE, intro20[0]);
wait(AnimationTime);
vm_tctrl(30);
cls_oled(OLED_BLACK);
set_rgb(255,255,255);
wait(300);
Intro = FALSE;
}
combo heroSelectC {
cls_oled(0);
printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,heroselectedS[0]);
printf(Center_X(12, OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,heroS[Hero]);
wait(1000);
}

// Functions
function menuDisplay() {

// Mods

	if(mainPage && Mods == HeroModTab){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == AimAssistTab){
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == RotationalAATab){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == SteadyAimTab){
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == RapidFireTab){
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == CrouchShotTab){
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == PingTab){
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == BhopTab){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == HairTriggersTab){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == NoStickDriftTab){
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
		
	if(mainPage && Mods == CustomDeadzoneTab){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == AutoReloadTab){
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == CustomSensitivityTab){
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == VibrationsTab){
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}
	
	if(mainPage && Mods == BindsTab){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,modS[Mods]);
		
		}

// Hero Mods

	if(hmPage){
	
	if(Hero == 0){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[0]);
		
		}
		
	if(Hero == 1){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[1]);
		
		}
		
	if(Hero == 2){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[2]);
		
		}
		
	if(Hero == 3){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[3]);
		
		}
		
	if(Hero == 4){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[4]);
		
		}
		
	if(Hero == 5){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[5]);
		
		}
		
	if(Hero == 6){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[6]);
		
		}
		
	if(Hero == 7){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[7]);
		
		}
		
	if(Hero == 8){
	
		cls_oled(0);
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[8]);
		
		}
		
	if(Hero == 9){
	
		cls_oled(0);
		printf(Center_X(6, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[9]);
		
		}
	
	if(Hero == 10){
	
		cls_oled(0);
		printf(Center_X(6, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[10]);
		
		}
		
	if(Hero == 11){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[11]);
		
		}
		
	if(Hero == 12){
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[12]);
		
		}
		
	if(Hero == 13){
	
		cls_oled(0);
		printf(Center_X(6, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[13]);
		
		}
		
	if(Hero == 14){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[14]);
		
		}
		
	if(Hero == 15){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[15]);
		
		}
		
	if(Hero == 16){
	
		cls_oled(0);
		printf(Center_X(6, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[16]);
		
		}
		
	if(Hero == 17){
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[17]);
		
		}
		
	if(Hero == 18){
	
		cls_oled(0);
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[18]);
		
		}
		
	if(Hero == 19){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[19]);
		
		}
		
	if(Hero == 20){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[20]);
		
		}
		
	if(Hero == 21){
	
		cls_oled(0);
		printf(Center_X(6, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[21]);
		
		}
		
	if(Hero == 22){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[22]);
		
		}
		
	if(Hero == 23){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[23]);
		
		}
		
	if(Hero == 24){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[24]);
		
		}
		
	if(Hero == 25){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[25]);
		
		}
		
	if(Hero == 26){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[26]);
		
		}
		
	if( Hero == 27){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[27]);
		
		}
		
	if(Hero == 28){
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[28]);
		
		}
		
	if(Hero == 29){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[29]);
		
		}
		
	if(Hero == 30){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[30]);
		
		}
		
	if(Hero == 31){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[31]);
		
		}
		
	if(Hero == 32){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[32]);
		
		}
		
	if(Hero == 33){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[33]);
		
		}
		
	if(Hero == 34){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[34]);
		
		}
		
	if(Hero == 35){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[35]);
		
		}
	
	if(Hero == 36){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,heroS[36]);
		
		}
/////////		
	if(Hero == 1){
	
	if(hmSection == 1){ // Ashe Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,asheS[0]);
		
		}
	
	if(hmSection == 1 && !AsheMod1){ // Ashe Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && AsheMod1){ // Ashe Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////		
	if(Hero == 2){
	
	if(hmSection == 1){ // Bastion Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bastionS[0]);
		
		}
	
	if(hmSection == 1 && !BastionMod1){ // Bastion Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && BastionMod1){ // Bastion Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 3){
	
	if(hmSection == 1){ // Echo Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,echoS[0]);
		
		}
	
	if(hmSection == 1 && !EchoMod1){ // Echo Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && EchoMod1){ // Echo Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 4){
	
	if(hmSection == 1){ // Genji Mod 1
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,genjiS[0]);
		
		}
	
	if(hmSection == 2){ // Genji Mod 2
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,genjiS[1]);
		
		}
	
	if(hmSection == 1 && !GenjiMod1){ // Genji Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && GenjiMod1){ // Genji Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	
	if(hmSection == 2 && !GenjiMod2){ // Genji Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && GenjiMod2){ // Genji Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 5){
	
	if(hmSection == 1){ // Hanzo Mod 1
	
		cls_oled(0);
		printf(Center_X(16, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,hanzoS[0]);
		
		}
	
	if(hmSection == 1 && !HanzoMod1){ // Hanzo Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && HanzoMod1){ // Hanzo Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 6){
	
	if(hmSection == 1){ // Junkrat Mod 1
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,junkratS[0]);
		
		}
	
	if(hmSection == 1 && !JunkratMod1){ // Junkrat Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && JunkratMod1){ // Junkrat Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Junkrat Mod 2
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,junkratS[1]);
		
		}
	
	if(hmSection == 2 && !JunkratMod2){ // Junkrat Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && JunkratMod2){ // Junkrat Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 7){
	
	if(hmSection == 1){ // Cassidy Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,cassidyS[0]);
		
		}
	
	if(hmSection == 1 && !CassidyMod1){ // Cassidy Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && CassidyMod1){ // Cassidy Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Cassidy Mod 2
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,cassidyS[1]);
		
		}
	
	if(hmSection == 2 && !CassidyMod3){ // Cassidy Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && CassidyMod3){ // Cassidy Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 3){ // Cassidy Mod 3
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,cassidyS[2]);
		
		}
	
	if(hmSection == 3 && !CassidyMod2){ // Cassidy Mod 3
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 3 && CassidyMod2){ // Cassidy Mod 3
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 4){ // Cassidy Mod 3
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,cassidyS[3]);
		
		}
	}

/////////		
	if(Hero == 8){
	
	if(hmSection == 1){ // Mei Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,meiS[0]);
		
		}
	
	if(hmSection == 1 && !MeiMod1){ // Mei Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && MeiMod1){ // Mei Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 9){
	
	if(hmSection == 1){ // Pharah Mod 1
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,pharahS[0]);
		
		}
	
	if(hmSection == 1 && !PharahMod1){ // Pharah Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && PharahMod1){ // Pharah Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 10){
	
	if(hmSection == 1){ // Reaper Mod 1
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,reaperS[0]);
		
		}
	
	if(hmSection == 1 && !ReaperMod1){ // Reaper Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && ReaperMod1){ // Reaper Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 11){
	
	if(hmSection == 1){ // Sojourn Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,sojournS[0]);
		
		}
	
	if(hmSection == 1 && !SojournMod1){ // Sojourn Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && SojournMod1){ // Sojourn Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 12){
	
	if(hmSection == 1){ // Soldier: 76 Mod 1
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,soldierS[0]);
		
		}
	
	if(hmSection == 1 && !SoldierMod1){ // Soldier: 76 Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && SoldierMod1){ // Soldier: 76 Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Soldier: 76 Mod 2
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,soldierS[1]);
		
		}
	
	if(hmSection == 2 && !SoldierMod2){ // Soldier: 76 Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && SoldierMod2){ // Soldier: 76 Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 3){ // Soldier: 76 Mod 3
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,soldierS[2]);
		
		}
	
	if(hmSection == 3 && !SoldierMod3){ // Soldier: 76 Mod 3
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 3 && SoldierMod3){ // Soldier: 76 Mod 3
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 4){ // Soldier: 76 Anti Recoil Value
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,soldierS[3]);
		
		}
	}
/////////	
	if(Hero == 13){
	
	if(hmSection == 1){ // Sombra Mod 1
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,sombraS[0]);
		
		}
	
	if(hmSection == 1 && !SombraMod1){ // Sombra Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && SombraMod1){ // Sombra Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 14){
	
	if(hmSection == 1){ // Symmetra Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,symmetraS[0]);
		
		}
	
	if(hmSection == 1 && !SymmetraMod1){ // Symmetra Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && SymmetraMod1){ // Symmetra Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Symmetra Mod 2
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,symmetraS[1]);
		
		}
	
	if(hmSection == 2 && !SymmetraMod2){ // Symmetra Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && SymmetraMod2){ // Symmetra Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 3){ // Symmetra Mod 3
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,symmetraS[2]);
		
		}
	
	if(hmSection == 3 && !SymmetraMod3){ // Symmetra Mod 3
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 3 && SymmetraMod3){ // Symmetra Mod 3
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 15){
	
	if(hmSection == 1){ // Torbjorn Mod 1
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,torbjornS[0]);
		
		}
	
	if(hmSection == 1 && !TorbjornMod1){ // Torbjorn Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && TorbjornMod1){ // Torbjorn Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 16){
	
	if(hmSection == 1){ // Tracer Mod 1
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,tracerS[0]);
		
		}
	
	if(hmSection == 1 && !TracerMod1){ // Tracer Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && TracerMod1){ // Tracer Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 17){
	
	if(hmSection == 1){ // Widowmaker Mod 1
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,widowmakerS[0]);
		
		}
	
	if(hmSection == 1 && !WidowmakerMod1){ // Widowmaker Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && WidowmakerMod1){ // Widowmaker Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Widowmaker Mod 2
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,widowmakerS[1]);
		
		}
	
	if(hmSection == 2 && !WidowmakerMod2){ // Widowmaker Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && WidowmakerMod2){ // Widowmaker Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 18){
	
	if(hmSection == 1){ // Ana Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,anaS[0]);
		
		}
	
	if(hmSection == 1 && !AnaMod1){ // Ana Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && AnaMod1){ // Ana Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 19){
	
	if(hmSection == 1){ // Baptiste Mod 1
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,baptisteS[0]);
		
		}
	
	if(hmSection == 1 && !BaptisteMod1){ // Baptiste Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && BaptisteMod1){ // Baptiste Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////
if(hmSection == 2){ // Baptiste Mod 2
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,baptisteS[1]);
		
		}
	
	if(hmSection == 2 && !BaptisteMod2){ // Baptiste Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && BaptisteMod2){ // Baptiste Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 3){ // Baptiste Anti Recoil Value
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,baptisteS[2]);
		
		}
	}
/////////
	if(Hero == 20){
	
	if(hmSection == 1){ // Brigitte Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,brigitteS[0]);
		
		}
	
	if(hmSection == 1 && !BrigitteMod1){ // Brigitte Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && BrigitteMod1){ // Brigitte Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 21){
	
	if(hmSection == 1){ // Kiriko Mod 1
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,kirikoS[0]);
		
		}
	
	if(hmSection == 1 && !KirikoMod1){ // Kiriko Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && KirikoMod1){ // Kiriko Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 22){
	
	if(hmSection == 1){ // Lucio Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,lucioS[0]);
		
		}
	
	if(hmSection == 1 && !LucioMod1){ // Lucio Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && LucioMod1){ // Lucio Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 23){
	
	if(hmSection == 1){ // Mercy Mod 1
	
		cls_oled(0);
		printf(Center_X(17, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,mercyS[0]);
		
		}
	
	if(hmSection == 1 && !MercyMod1){ // Mercy Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && MercyMod1){ // Mercy Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
/////////	
	if(hmSection == 2){ // Mercy Mod 2
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,mercyS[1]);
		
		}
	
	if(hmSection == 2 && !MercyMod2){ // Mercy Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && MercyMod2){ // Mercy Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 24){
	
	if(hmSection == 1){ // Moira Mod 1
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,moiraS[0]);
		
		}
	
	if(hmSection == 2){ // Moira Mod 2
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,moiraS[1]);
		
		}
	
	if(hmSection == 1 && !MoiraMod1){ // Moira Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && MoiraMod1){ // Moira Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	
	if(hmSection == 2 && !MoiraMod2){ // Moira Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 2 && MoiraMod2){ // Moira Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 25){
	
	if(hmSection == 1){ // Zenyatta Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,zenyattaS[0]);
		
		}
	
	if(hmSection == 1 && !ZenyattaMod1){ // Zenyatta Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && ZenyattaMod1){ // Zenyatta Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 26){
	
	if(hmSection == 1){ // D.Va Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,dvaS[0]);
		
		}
	
	if(hmSection == 1 && !DvaMod1){ // D.Va Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && DvaMod1){ // D.Va Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 27){
	
	if(hmSection == 1){ // Doomfist Mod 1
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,doomfistS[0]);
		
		}
	
	if(hmSection == 1 && !DoomfistMod1){ // Doomfist Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && DoomfistMod1){ // Doomfist Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 28){
	
	if(hmSection == 1){ // Junker Queen Mod 1
	
		cls_oled(0);
		printf(Center_X(11, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,junkerqueenS[0]);
		
		}
	
	if(hmSection == 1 && !JunkerQueenMod1){ // Junker Queen Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && JunkerQueenMod1){ // Junker Queen Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 29){
	
	if(hmSection == 1){ // Orisa Mod 1
	
		cls_oled(0);
		printf(Center_X(16, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,orisaS[0]);
		
		}
	
	if(hmSection == 1 && !OrisaMod1){ // Orisa Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && OrisaMod1){ // Orisa Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 30){
	
	if(hmSection == 1){ // Reinhardt Mod 1
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,reinhardtS[0]);
	
	if(!ReinhardtMod1){ // Reinhardt Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(ReinhardtMod1){ // Reinhardt Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
			
			}
		}
	
	if(hmSection == 2){ // Reinhardt Mod 2
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,reinhardtS[1]);
	
	if(!ReinhardtMod2){ // Reinhardt Mod 2
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(ReinhardtMod2){ // Reinhardt Mod 2
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
			
			}
		}
	}
/////////	
	if(Hero == 31){
	
	if(hmSection == 1){ // Roadhog Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,roadhogS[0]);
		
		}
	
	if(hmSection == 1 && !RoadhogMod1){ // Roadhog Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && RoadhogMod1){ // Roadhog Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 32){
	
	if(hmSection == 1){ // Sigma Mod 1
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,sigmaS[0]);
		
		}
	
	if(hmSection == 1 && !SigmaMod1){ // Sigma Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && SigmaMod1){ // Sigma Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 33){
	
	if(hmSection == 1){ // Winston Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,winstonS[0]);
		
		}
	
	if(hmSection == 1 && !WinstonMod1){ // Winston Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && WinstonMod1){ // Winston Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 34){
	
	if(hmSection == 1){ // Wrecking Ball Mod 1
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,wreckingballS[0]);
		
		}
	
	if(hmSection == 1 && !WreckingBallMod1){ // Wrecking Ball Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && WreckingBallMod1){ // Wrecking Ball Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 35){
	
	if(hmSection == 1){ // Zarya Mod 1
	
		cls_oled(0);
		printf(Center_X(10, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,zaryaS[0]);
		
		}
	
	if(hmSection == 1 && !ZaryaMod1){ // Zarya Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && ZaryaMod1){ // Zarya Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
/////////	
	if(Hero == 36){
	
	if(hmSection == 1){ // Ramattra Mod 1
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,ramattraS[0]);
		
		}
	
	if(hmSection == 1 && !RamattraMod1){ // Ramattra Mod 1
	
		
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[0]);
		
		}
	
	if(hmSection == 1 && RamattraMod1){ // Ramattra Mod 1
	
		
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,offonS[1]);
		
		}
	}
		} // hmPage End
		
// Aim Assist

	if(aaPage){
	
	if(AimAssist == 0){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,aimassistS[0]);
		
		}
		
	if(AimAssist == 1){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,aimassistS[1]);
		
		}
		
	if(AimAssist == 2){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,aimassistS[2]);
		
		}
	
	if(AimAssist == 3){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,aimassistS[3]);
		
		}
		
	if(AimAssist == 1 && aaSection == 1){
	
		cls_oled(0);
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[4]);
		
		}
		
	if(AimAssist == 1 && aaSection == 2){
	
		cls_oled(0);
		printf(Center_X(4, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[5]);
		
		}
		
	if(AimAssist == 2 && aaSection == 1){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[6]);
		
		}
		
	if(AimAssist == 2 && aaSection == 2){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[7]);
		
		}
		
	if(AimAssist == 2 && aaSection == 3){
	
		cls_oled(0);
		printf(Center_X(12, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[8]);
		
		}
		
	if(AimAssist == 2 && aaSection == 4){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[9]);
		
		}
	
	if(AimAssist == 2 && aaSection == 5){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[10]);
		
		}
		
	if(AimAssist == 2 && aaSection == 6){
	
		cls_oled(0);
		printf(Center_X(16, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[11]);
		
		}
		
	if(AimAssist == 3 && aaSection == 1){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[12]);
		
		}
		
	if(AimAssist == 3 && aaSection == 2){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[13]);
		
		}
		
	if(AimAssist == 3 && aaSection == 3){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[14]);
		
		}
		
	if(AimAssist == 3 && aaSection == 4){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[15]);
		
		}
		
	if(AimAssist == 3 && aaSection == 5){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[16]);
		
		}
		
	if(AimAssist == 3 && aaSection == 6){
	
		cls_oled(0);
		printf(Center_X(9, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[17]);
		
		}
		
	if(AimAssist == 3 && aaSection == 7){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,aimassistS[18]);
		
		}
	}

// Steady Aim

	if(saPage){
	
	if(!SteadyAim){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,steadyaimS[0]);
		
		}
	
	if(SteadyAim){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,steadyaimS[1]);
		
		}
		
	if(SteadyAim && saSection == 1){
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,steadyaimS[2]);
		
		}
		
	if(SteadyAim && saSection == 2){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,steadyaimS[3]);
		
		}
	}

// Rapid Fire

	if(rfPage){
	
	if(!RapidFire){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,rapidfireS[0]);
		
		}
	
	if(RapidFire){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,rapidfireS[1]);
		
		}
	
	if(rfSection == 1 && RapidFire){
	
		cls_oled(0);
		printf(Center_X(17, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,rapidfireS[2]);
		
		}
	}

// Bhop

	if(bhPage){
	
	if(!Bhop){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,bhopS[0]);
		
		}
		
	if(Bhop){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,bhopS[1]);
		
		}
	}

// Hair Triggers

	if(htPage){
	
	if(!HairTriggers){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,hairtriggerS[0]);
		
		}
		
	if(HairTriggers){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,hairtriggerS[1]);
		
		}
	}

// Stick Drift Removal

	if(sdrPage){
	
	if(!StickDriftRemoval){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,stickdriftS[0]);
		
		}
		
	if(StickDriftRemoval){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,stickdriftS[1]);
		
		}
	
	if(sdrSection == 1 && StickDriftRemoval){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,stickdriftS[2]);
		
		}
	}

// Custom Deadzone

	if(cdPage){
	
	if(!CustomDeadzone){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,customdeadzoneS[0]);
		
		}
		
	if(CustomDeadzone){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,customdeadzoneS[1]);
		
		}
	
	if(cdSection == 1 && CustomDeadzone){
	
		cls_oled(0);
		printf(Center_X(7, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,customdeadzoneS[2]);
		
		}
	}

// Auto Reload

	if(arPage){
	
	if(!AutoReload){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,autoreloadS[0]);
		
		}
		
	if(AutoReload){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,autoreloadS[1]);
		
		}
	}

// Binds

	if(bPage){
	
	if(bSection == 0){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[0]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Primary_Fire]);
		
		}
	
	if(bSection == 1){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[1]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Secondary_Fire]);
		
		}
	//
	if(bSection == 2){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[2]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Ability_One]);
		
		}
	
	if(bSection == 3){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[3]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Ability_Two]);
		
		}
	////
	if(bSection == 4){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[4]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Jump]);
		
		}
	
	if(bSection == 5){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[5]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Crouch]);
		
		}
	//
	if(bSection == 6){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[6]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Reload]);
		
		}
	
	if(bSection == 7){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[7]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Melee]);
		
		}
	//
	if(bSection == 8){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[8]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Ultimate]);
		
		}
	
	if(bSection == 9){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[9]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Hero_Mod]);
		
		}
	
	if(bSection == 10){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[10]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Ping]);
		
		}

	if(bSection == 11){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[11]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_Switch_Weapon]);
		
		}
	
	if(bSection == 12){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[12]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_BatteryCheck_Btn]);
		
		}
	
	if(bSection == 13){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,bindsS[13]);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,controllerS[_OTFheroSelect]);
		
		}
	}

// Custom Sensitivity

	if(csPage){
	
	if(!CustomSensitivity && csSection == 0){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[0]);
		
		}
		
	if(CustomSensitivity){
	
	if(csSection == 0){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[1]);
		
		}
		
	if(csSection == 1){
	
		cls_oled(0);
		printf(Center_X(8, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[2]);
		
		}
	
	if(csSection == 2){
	
		cls_oled(0);
		printf(Center_X(14, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[3]);
		
		}

	if(csSection == 3){
	
		cls_oled(0);
		printf(Center_X(13, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[4]);
		
		}
	
	if(csSection == 4){
	
		cls_oled(0);
		printf(Center_X(15, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,customsensitivityS[5]);
		
			}
		}
	}

// Block Vibrations

	if(bvPage){
	
	if(!BlockVibrations && bvSection == 0){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,vibrationsS[0]);
		
		}
	
	if(BlockVibrations && bvSection == 0){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,vibrationsS[1]);
		
		}
	}

// Rotational Aim Assist

	if(raPage){
	
	if(!RotationalAA && raSection == 0){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,rotationalaaS[0]);
		
		}
	
	if(RotationalAA){
	
	if(raSection == 0){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,rotationalaaS[1]);
		
		}
	
	if(raSection == 1){
	
		cls_oled(0);
		printf(Center_X(3, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,rotationalaaS[2]);
		
		}
	
	if(raSection == 2){
	
		cls_oled(0);
		printf(Center_X(5, OLED_FONT_SMALL_WIDTH),12,OLED_FONT_SMALL,OLED_WHITE,rotationalaaS[3]);
			
			}
		}
	}

// Ping On Fire

	if(pofPage){
	
	if(!PingOnFire){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,pingonfireS[0]);
		
		}
	
	if(PingOnFire){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,pingonfireS[1]);
		
		}
	}

// Crouch Shot

	if(crsPage){
	
	if(!CrouchShot && crsSection == 0){
	
		cls_oled(0);
		printf(Center_X(2, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,crouchshotS[0]);
		
		}
	
	if(CrouchShot && crsSection == 0){
	
		cls_oled(0);
		printf(Center_X(1, OLED_FONT_SMALL_WIDTH),24,OLED_FONT_SMALL,OLED_WHITE,crouchshotS[1]);
		
		}
	}

}
function menuNavigation() {

// Menu

	if(mainPage){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		Mods += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		Mods -= 1;
		
		}
		
	if(Mods > MaxMods){
	
		Mods = 1;
		
		}
		
	if(Mods < 1){
	
		Mods = MaxMods;
		
		}
	}

// Hero Mods

	if(Mods == HeroModTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		hmPage 		= TRUE;
		hmSection	= 0;
		
		}
		
	if(hmPage){
	
	if(hmSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		Hero += 1;
		hmSection = 0;
		
		}
	
	if(hmSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		Hero -= 1;
		hmSection = 0;
		
		}
		
	if(hmSection == 0 && Hero > 36){
	
		Hero = 0;
		
		}
		
	if(hmSection == 0 && Hero < 0){
	
		Hero = 36;
		
		}
	
	// Ashe
	if(Hero == 1){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		AsheMod1 = !AsheMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		AsheMod1 = !AsheMod1;
		
		}
	}
		
	// Bastion
	if(Hero == 2){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		BastionMod1 = !BastionMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		BastionMod1 = !BastionMod1;
		
		}
	}
		
	// Echo
	if(Hero == 3){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		EchoMod1 = !EchoMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		EchoMod1 = !EchoMod1;
		
		}
	}
	
	// Genji
	if(Hero == 4){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		GenjiMod1 = !GenjiMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		GenjiMod1 = !GenjiMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		GenjiMod2 = !GenjiMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		GenjiMod2 = !GenjiMod2;
		
		}
	}
	
	// Hanzo
	if(Hero == 5){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		HanzoMod1 = !HanzoMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		HanzoMod1 = !HanzoMod1;
		
		}
	}
	
	// Junkrat
	if(Hero == 6){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		JunkratMod1 = !JunkratMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		JunkratMod1 = !JunkratMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		JunkratMod2 = !JunkratMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		JunkratMod2 = !JunkratMod2;
		
		}
	}
	
	// Cassidy
	if(Hero == 7){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 4){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 4;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		CassidyMod1 = !CassidyMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		CassidyMod1 = !CassidyMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		CassidyMod3 = !CassidyMod3;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		CassidyMod3 = !CassidyMod3;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		CassidyMod2 = !CassidyMod2;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		CassidyMod2 = !CassidyMod2;
		
		}
	
	if(hmSection == 4){
		
		CassidyARStrength = editValues(0,CassidyARStrength,1,10,-50,50);
		
		}
	}
		
	// Mei
	if(Hero == 8){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		MeiMod1 = !MeiMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		MeiMod1 = !MeiMod1;
		
		}
	}
	
	// Pharah
	if(Hero == 9){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		PharahMod1 = !PharahMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		PharahMod1 = !PharahMod1;
		
		}
	}
	
	// Reaper
	if(Hero == 10){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		ReaperMod1 = !ReaperMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		ReaperMod1 = !ReaperMod1;
		
		}
	}
	
	// Sojourn
	if(Hero == 11){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
		
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SojournMod1 = !SojournMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SojournMod1 = !SojournMod1;
		
		}
	}
		
	// Soldier: 76
	if(Hero == 12){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 4){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 4;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SoldierMod1 = !SoldierMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SoldierMod1 = !SoldierMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SoldierMod2 = !SoldierMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SoldierMod2 = !SoldierMod2;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SoldierMod3 = !SoldierMod3;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SoldierMod3 = !SoldierMod3;
		
		}
	
	if(hmSection == 4){
	
		SoldierStrength = editValues(0,SoldierStrength,1,10,-50,50);
		
		}
	}
	
	// Sombra
	if(Hero == 13){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SombraMod1 = !SombraMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SombraMod1 = !SombraMod1;
		
		}
	}
	
	// Symmetra
	if(Hero == 14){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 3){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 3;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SymmetraMod1 = !SymmetraMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SymmetraMod1 = !SymmetraMod1;
		
		}
	
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SymmetraMod2 = !SymmetraMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SymmetraMod2 = !SymmetraMod2;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SymmetraMod3 = !SymmetraMod3;
		
		}
	
	if(hmSection == 3 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SymmetraMod3 = !SymmetraMod3;
		
		}
	}
	
	// Torbjorn
	if(Hero == 15){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		TorbjornMod1 = !TorbjornMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		TorbjornMod1 = !TorbjornMod1;
		
		}
	}
		
	// Tracer
	if(Hero == 16){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		TracerMod1 = !TracerMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		TracerMod1 = !TracerMod1;
		
		}
	}
		
	// Widowmaker
	if(Hero == 17){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		WidowmakerMod1 = !WidowmakerMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		WidowmakerMod1 = !WidowmakerMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		WidowmakerMod2 = !WidowmakerMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		WidowmakerMod2 = !WidowmakerMod2;
		
		}
	}
		
	// Ana
	if(Hero == 18){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		AnaMod1 = !AnaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		AnaMod1 = !AnaMod1;
		
		}
	}
	
	// Baptiste
	if(Hero == 19){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 3){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 3;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		BaptisteMod1 = !BaptisteMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		BaptisteMod1 = !BaptisteMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		BaptisteMod2 = !BaptisteMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		BaptisteMod2 = !BaptisteMod2;
		
		}
	
	if(hmSection == 3){
	
		BaptisteStrength = editValues(0,BaptisteStrength,1,10,-50,50);
		
		}
	}
		
	// Brigitte
	if(Hero == 20){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		BrigitteMod1 = !BrigitteMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		BrigitteMod1 = !BrigitteMod1;
		
		}
	}
	
	// Kiriko
	if(Hero == 21){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		KirikoMod1 = !KirikoMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		KirikoMod1 = !KirikoMod1;
		
		}
	}
		
	// Lucio
	if(Hero == 22){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}	
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		LucioMod1 = !LucioMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		LucioMod1 = !LucioMod1;
		
		}
	}
	
	// Mercy
	if(Hero == 23){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		MercyMod1 = !MercyMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		MercyMod1 = !MercyMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		MercyMod2 = !MercyMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		MercyMod2 = !MercyMod2;
		
		}
	}
	
	// Moira
	if(Hero == 24){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		MoiraMod1 = !MoiraMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		MoiraMod1 = !MoiraMod1;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		MoiraMod2 = !MoiraMod2;
		
		}
	
	if(hmSection == 2 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		MoiraMod2 = !MoiraMod2;
		
		}
	}
		
	// Zenyatta
	if(Hero == 25){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}	
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		ZenyattaMod1 = !ZenyattaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		ZenyattaMod1 = !ZenyattaMod1;
		
		}
	}
		
	// D.Va
	if(Hero == 26){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		DvaMod1 = !DvaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		DvaMod1 = !DvaMod1;
		
		}
	}
		
	// Doomfist
	if(Hero == 27){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		DoomfistMod1 = !DoomfistMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		DoomfistMod1 = !DoomfistMod1;
		
		}
	}
		
	// Junker Queen
	if(Hero == 28){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		JunkerQueenMod1 = !JunkerQueenMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		JunkerQueenMod1 = !JunkerQueenMod1;
		
		}
	}
		
	// Orisa
	if(Hero == 29){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		OrisaMod1 = !OrisaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		OrisaMod1 = !OrisaMod1;
		
		}
	}
	
	// Reinhardt
	if(Hero == 30){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 2){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 2;
		
		}
	
	if(hmSection == 1){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		ReinhardtMod1 = !ReinhardtMod1;
		
		}
	
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		ReinhardtMod1 = !ReinhardtMod1;
			
			}
		}
	if(hmSection == 2){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		ReinhardtMod2 = !ReinhardtMod2;
		
		}
	
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		ReinhardtMod2 = !ReinhardtMod2;
			
			}
		}
	}
	
	// Roadhog
	if(Hero == 31){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		RoadhogMod1 = !RoadhogMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		RoadhogMod1 = !RoadhogMod1;
		
		}
	}
	
	// Sigma
	if(Hero == 32){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SigmaMod1 = !SigmaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SigmaMod1 = !SigmaMod1;
		
		}
	}
	
	// Winston
	if(Hero == 33){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		WinstonMod1 = !WinstonMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		WinstonMod1 = !WinstonMod1;
		
		}
	}
	
	// Wrecking Ball
	if(Hero == 34){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		WreckingBallMod1 = !WreckingBallMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		WreckingBallMod1 = !WreckingBallMod1;
		
		}
	}
	
	// Zarya
	if(Hero == 35){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		ZaryaMod1 = !ZaryaMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		ZaryaMod1 = !ZaryaMod1;
		
		}
	}
	// Ramattra
	if(Hero == 36){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		hmSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		hmSection -= 1;
		
		}
		
	if(hmSection > 1){
	
		hmSection = 0;
		
		}
		
	if(hmSection < 0){
	
		hmSection = 1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		RamattraMod1 = !RamattraMod1;
		
		}
	
	if(hmSection == 1 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		RamattraMod1 = !RamattraMod1;
		
		}
	}
	
	
	
	
	
		
		
		
		
		
		
		
	
	if(Mods == HeroModTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		hmPage 		= FALSE;
		
		}
	}

// Aim Assist

	if(Mods == AimAssistTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		aaPage 		= TRUE;
		aaSection	= 0;
		
		}
		
	if(aaPage){
	
	if(aaSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		AimAssist += 1;
		aaSection = 0;
		
		}
		
	if(aaSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		AimAssist -= 1;
		aaSection = 0;
		
		}
		
	if(aaSection == 0 && AimAssist > 3){
	
		AimAssist = 0;
		
		}
		
	if(aaSection == 0 && AimAssist < 0){
	
		AimAssist = 3;
		
		}
	
	if(AimAssist == 1 && !get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		aaSection += 1;
		
		}
		
	if(AimAssist == 1 && !get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		aaSection -= 1;
		
		}
		
	if(AimAssist == 1 && aaSection > 2){
	
		aaSection = 0;
		
		}
		
	if(AimAssist == 1 && aaSection < 0){
	
		aaSection = 2;
		
		}
		
	if(AimAssist == 1 && aaSection == 1){
	
		legacyAAV = editValues(0,legacyAAV,1,10,0,100);
		
		}
		
	if(AimAssist == 1 && aaSection == 2){
	
		legacyAAW = editValues(0,legacyAAW,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && !get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		aaSection += 1;
		
		}
		
	if(AimAssist == 2 && !get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		aaSection -= 1;
		
		}
		
	if(AimAssist == 2 && aaSection > 6){
	
		aaSection = 0;
		
		}
		
	if(AimAssist == 2 && aaSection < 0){
	
		aaSection = 6;
		
		}
		
	if(AimAssist == 2 && aaSection == 1){
	
		ADS_Size = editValues(0,ADS_Size,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && aaSection == 2){
	
		ADS_Wait_Value = editValues(0,ADS_Wait_Value,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && aaSection == 3){
	
		HIPFIRE_Size = editValues(0,HIPFIRE_Size,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && aaSection == 4){
	
		HIPFIRE_Wait_Value = editValues(0,HIPFIRE_Wait_Value,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && aaSection == 5){
	
		ADS_FIRE_Size = editValues(0,ADS_FIRE_Size,1,10,0,100);
		
		}
		
	if(AimAssist == 2 && aaSection == 6){
	
		ADS_FIRE_Wait_Value = editValues(0,ADS_FIRE_Wait_Value,1,10,0,100);
		
		}
	
	if(AimAssist == 3 && !get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		aaSection += 1;
		
		}
		
	if(AimAssist == 3 && !get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		aaSection -= 1;
		
		}
		
	if(AimAssist == 3 && aaSection > 7){
	
		aaSection = 0;
		
		}
		
	if(AimAssist == 3 && aaSection < 0){
	
		aaSection = 7;
		
		}
		
	if(AimAssist == 3 && aaSection == 1){
	
		BasePower = editValues(0,BasePower,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 2){
	
		BaseSpeed = editValues(0,BaseSpeed,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 3){
	
		ZonePower = editValues(0,ZonePower,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 4){
	
		ZoneSpeed = editValues(0,ZoneSpeed,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 5){
	
		FirePower = editValues(0,FirePower,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 6){
	
		FireSpeed = editValues(0,FireSpeed,1,10,0,100);
		
		}
		
	if(AimAssist == 3 && aaSection == 7){
	
		DeadZone = editValues(0,DeadZone,1,10,0,100);
		
		}
	
	if(Mods == AimAssistTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		aaPage 		= FALSE;
		
		}
	}

// Steady Aim

	if(Mods == SteadyAimTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		saPage 		= TRUE;
		saSection	= 0;
		// this script was made by Avilio
		}
		
	if(saPage){
	
	if(saSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		SteadyAim = !SteadyAim;
		
		}
		
	if(saSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		SteadyAim = !SteadyAim;
		
		}
	
	if(SteadyAim){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		saSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		saSection -= 1;
		
		}
		
	if(saSection > 2){
	
		saSection = 0;
		
		}
		
	if(saSection < 0){
	
		saSection = 2;
		
		}
	
	if(saSection == 1){
	
		ads_resolution = editValues(0,ads_resolution,1,10,0,100);
		
		}

	if(saSection == 2){
	
		look_resolution = editValues(0,look_resolution,1,10,0,100);
		
		}
	}
		
	if(Mods == SteadyAimTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		saPage 		= FALSE;
		
		}
	}
	
// Rapid Fire

	if(Mods == RapidFireTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		rfPage = TRUE;
		rfSection = 0;
		
		}
		
	if(rfPage){
	
	if(rfSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		RapidFire = !RapidFire;
		
		}
		
	if(rfSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		RapidFire = !RapidFire;
		
		}
	
	if(RapidFire){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		rfSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		rfSection -= 1;
		
		}
		
	if(rfSection > 1){
	
		rfSection = 0;
		
		}
		
	if(rfSection < 0){
	
		rfSection = 1;
		
		}
		
	if(rfSection == 1){
	
		rounds_per_second = editValues(0,rounds_per_second,1,10,1,25);
		
		}
	}
	
	if(Mods == RapidFireTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		rfPage 		= FALSE;
		
		}
	}

// Bhop

	if(Mods == BhopTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		bhPage = TRUE;
		
		}
		
	if(bhPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		Bhop = !Bhop;
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		Bhop = !Bhop;
		
		}
	
	if(Mods == BhopTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		bhPage 		= FALSE;
		
		}
	}

// Hair Triggers
	
	if(Mods == HairTriggersTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		htPage = TRUE;
		
		}

	if(htPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		HairTriggers = !HairTriggers;
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		HairTriggers = !HairTriggers;
		
		}
	
	if(Mods == HairTriggersTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		htPage 		= FALSE;
		
		}
	}

// Stick Drift Removal

	if(Mods == NoStickDriftTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		sdrPage 	= TRUE;
		sdrSection	= 0;
		
		}
		
	if(sdrPage){
	
	if(sdrSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		StickDriftRemoval = !StickDriftRemoval;
		
		}
		
	if(sdrSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){// this script was made by Avilio
	
		StickDriftRemoval = !StickDriftRemoval;
		
		}
	
	if(StickDriftRemoval){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		sdrSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		sdrSection -= 1;
		
		}
		
	if(sdrSection > 1){
	
		sdrSection = 0;
		
		}
		
	if(sdrSection < 0){
	
		sdrSection = 1;
		
		}
		
	if(sdrSection == 1){
	
		DeadZoneValue = editValues(0,DeadZoneValue,1,10,1,15);
		
		}
	}
	
	if(Mods == NoStickDriftTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		sdrPage 	= FALSE;
		
		}
	}

// Custom Deadzone

	if(Mods == CustomDeadzoneTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		cdPage 		= TRUE;
		cdSection	= 0;
		
		}
		
	if(cdPage){
	
	if(cdSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		CustomDeadzone = !CustomDeadzone;
		
		}
		
	if(cdSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){// this script was made by Avilio
	
		CustomDeadzone = !CustomDeadzone;
		
		}
	
	if(CustomDeadzone){
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		cdSection += 1;
		
		}
		
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		cdSection -= 1;
		
		}
		
	if(cdSection > 1){
	
		cdSection = 0;
		
		}
		
	if(cdSection < 0){
	
		cdSection = 1;
		
		}
		
	if(cdSection == 1){
	
		CustomDZ = editValues(0,CustomDZ,1,10,0,9);
		
		}
	}
	
	if(Mods == CustomDeadzoneTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		cdPage 		= FALSE;
		
		}
	}

// Auto Reload

	if(Mods == AutoReloadTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		arPage 		= TRUE;
		arSection	= 0;
		
		}

	if(Mods == AutoReloadTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		arPage = TRUE;
		
		}

	if(arPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		AutoReload = !AutoReload;
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		AutoReload = !AutoReload;
		
		}
	
	if(Mods == AutoReloadTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		arPage 		= FALSE;
		
		}
	}

// Binds

	if(Mods == BindsTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage 	= FALSE;
		bPage 		= TRUE;
		bSection	= 0;
		
		}

	if(bPage){
	
	if(bSection > 13){
	
		bSection = 0;
		
		}
		
	if(bSection < 0){
	
		bSection = 13;
		
		}
	
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		bSection ++;
		
		}
	
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		bSection --;
		
		}
	
	if(bSection == 0){
	
		_Primary_Fire = editValues2(0,_Primary_Fire,1,10,0,16);
		
		}
	
	if(bSection == 1){
	
		_Secondary_Fire = editValues2(0,_Secondary_Fire,1,10,0,16);
		
		}
	//
	if(bSection == 2){
	
		_Ability_One = editValues2(0,_Ability_One,1,10,0,16);
		
		}
	
	if(bSection == 3){
	
		_Ability_Two = editValues2(0,_Ability_Two,1,10,0,16);
		
		}
	//
	if(bSection == 4){
	
		_Jump = editValues2(0,_Jump,1,10,0,16);
		
		}
	
	if(bSection == 5){
	
		_Crouch = editValues2(0,_Crouch,1,10,0,16);
		
		}
	//
	if(bSection == 6){
	
		_Reload = editValues2(0,_Reload,1,10,0,16);
		
		}
	
	if(bSection == 7){
	
		_Melee = editValues2(0,_Melee,1,10,0,16);
		
		}
	//
	if(bSection == 8){
	
		_Ultimate = editValues2(0,_Ultimate,1,10,0,16);
		
		}
	
	if(bSection == 9){
	
		_Hero_Mod = editValues2(0,_Hero_Mod,1,10,0,16);
		
		}
	
	if(bSection == 10){
	
		_Ping = editValues2(0,_Ping,1,10,0,16);
		
		}
	
	if(bSection == 11){
	
		_Switch_Weapon = editValues2(0,_Switch_Weapon,1,10,0,16);
		
		}
	
	if(bSection == 12){
	
		_BatteryCheck_Btn = editValues2(0,_BatteryCheck_Btn,1,10,0,16);
		
		}
	
	if(bSection == 13){
	
		_OTFheroSelect = editValues2(0,_OTFheroSelect,1,10,0,16);
		
		}
	
	if(Mods == BindsTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		bPage 		= FALSE;
		
		}
	}
	
// Custom Sensitivity

	if(Mods == CustomSensitivityTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		csPage = TRUE;
		csSection = 0;
		
		}
	
	if(csPage){
	
	if(csSection > 4){
	
		csSection = 0;
		
		}
		
	if(csSection < 0){
	
		csSection = 4;
		
		}
	
	if(!get_ival(PS4_L2) && CustomSensitivity == 1 && event_press(PS4_RIGHT)){
	
		csSection ++;
		
		}
	
	if(!get_ival(PS4_L2) && CustomSensitivity == 1 && event_press(PS4_LEFT)){
	
		csSection --;
		
		}
		
	if(get_ival(PS4_L2) && csSection == 0 && event_press(PS4_RIGHT)){
	
		CustomSensitivity = !CustomSensitivity;
		
		}
		
	if(get_ival(PS4_L2) && csSection == 0 && event_press(PS4_LEFT)){
	
		CustomSensitivity = !CustomSensitivity;
		
		}
		// this script was made by Avilio
	
	if(CustomSensitivity){
	
	if(csSection == 1){
	
		lookSens = editValues(0,lookSens,1,10,0,100);
		
		}
	
	if(csSection == 2){
	
		fireSens = editValues(0,fireSens,1,10,0,100);
		
		}
	
	if(csSection == 3){
	
		adsSens = editValues(0,adsSens,1,10,0,100);
		
		}
	
	if(csSection == 4){
	
		adsfireSens = editValues(0,adsfireSens,1,10,0,100);
		
		}
	}

	if(Mods == CustomSensitivityTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		csPage 		= FALSE;
		
		}
	}

// Block Vibrations

	if(Mods == VibrationsTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		bvPage = TRUE;
		
		}
		
	if(bvPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		BlockVibrations = !BlockVibrations;
		reset_rumble();
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		BlockVibrations = !BlockVibrations;
		reset_rumble();
		
		}
		// this script was made by Avilio	
	if(Mods == VibrationsTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		bvPage 		= FALSE;
		
		}
	}

// Rotational Aim Assist

	if(Mods == RotationalAATab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		raPage = TRUE;
		raSection = 0;
		
		}
	
	if(raPage){
	
	if(raSection > 2){
	
		raSection = 0;
		
		}
		
	if(raSection < 0){
	
		raSection = 2;
		
		}
	
	
		
	if(raSection == 0 && get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		RotationalAA = !RotationalAA;
		
		}
		
	if(raSection == 0 && get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		RotationalAA = !RotationalAA;
		
		}
	
	if(RotationalAA){
	
	if(raSection == 1){
	
		RotationalAASize = editValues(0,RotationalAASize,1,10,0,100);
		
		}
	
	if(raSection == 2){
	
		RotationalAASpeed = editValues(0,RotationalAASpeed,1,10,0,100);
		
		}
	if(!get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		raSection ++;
		
		}
	
	if(!get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		raSection --;
		
		}
	}
	
	if(Mods == RotationalAATab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		raPage 		= FALSE;
		
		}
	}

// Ping On Fire
	
	if(Mods == PingTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		pofPage = TRUE;
		
		}

	if(pofPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		PingOnFire = !PingOnFire;
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		PingOnFire = !PingOnFire;
		
		}
	
	if(Mods == PingTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		pofPage 	= FALSE;
		
		}
	}

// Crouch Shot

	if(Mods == CrouchShotTab && !get_ival(PS4_L2) && event_press(PS4_CROSS)){
	
		mainPage = FALSE;
		crsPage = TRUE;
		
		}
		
	if(crsPage){
	
	if(get_ival(PS4_L2) && event_press(PS4_RIGHT)){
	
		CrouchShot = !CrouchShot;
		
		}
		
	if(get_ival(PS4_L2) && event_press(PS4_LEFT)){
	
		CrouchShot = !CrouchShot;
		
		}
	
	if(Mods == CrouchShotTab && !get_ival(PS4_L2) && event_press(PS4_CIRCLE)){
	
		mainPage 	= TRUE;
		crsPage 	= FALSE;
		
		}
	}


}
// Exit & Save
function CustomBinds() {

		Primary_Fire 		= Key_Binds[_Primary_Fire];
		Secondary_Fire 		= Key_Binds[_Secondary_Fire];
		Ability_One 		= Key_Binds[_Ability_One];
		Ability_Two 		= Key_Binds[_Ability_Two];
		Jump 				= Key_Binds[_Jump];
		Crouch 				= Key_Binds[_Crouch];
		Reload			 	= Key_Binds[_Reload];
		Melee 				= Key_Binds[_Melee];
		Ultimate 			= Key_Binds[_Ultimate];
		Hero_Mod 			= Key_Binds[_Hero_Mod];
		Ping	 			= Key_Binds[_Ping];
		Switch_Weapon		= Key_Binds[_Switch_Weapon];
		BatteryCheck_Btn 	= Key_Binds[_BatteryCheck_Btn];
		OTFheroSelect		= Key_Binds[_OTFheroSelect];

}


function Set_Val(Stick, Value) {
    set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
        return;
}
function Polar(Value) {
return Value * 32767 / 100;
}
int _RET;
function GetSteadyAim(Axis, _Resolution) { // Steady Aim Function
    if (Axis >= 0)
    {
        _RET = (Axis % _Resolution);
        if (_RET >= (_Resolution / 2))
            Axis = Axis + (_Resolution - _RET);
        else
            Axis -= _RET;
    }
    else
    {
        _RET = (Axis % _Resolution);
        if (abs(_RET) >= (_Resolution / 2))
            Axis = Axis - (_Resolution + _RET);
        else
            Axis += abs(_RET);
    }
        return Axis;
}
//-- Values On OLED --\\
int valNameIdx,updateDisplay;
function editValues(fIdx,fVar,fIncDecMin,fIncDecMax,fVarMin,fVarMax){ 
    if(valNameIdx == fIdx) { 
        if(get_ival(PS4_L2)){ 
            if(event_press(PS4_RIGHT)){ 
                fVar += fIncDecMin;
                updateDisplay = TRUE;
                //cls_oled(0);
            }
            if(event_press(PS4_LEFT)){ 
                fVar -= fIncDecMin;
                updateDisplay = TRUE;
               // cls_oled(0);
            }
            if(event_press(PS4_UP)){ 
                fVar += fIncDecMax;
                updateDisplay = TRUE;
                //cls_oled(0);
            }
            if(event_press(PS4_DOWN)){ 
                fVar -= fIncDecMax;
                updateDisplay = TRUE;
                //cls_oled(0);
            }
        }
        fVar = clamp(fVar,fVarMin,fVarMax);
        NumberToString(fVar,FindDigits(fVar),32);              
    }
    return fVar;
}
// For Binds
int valNameIdx2,updateDisplay2;
function editValues2(fIdx,fVar,fIncDecMin,fIncDecMax,fVarMin,fVarMax){ 
    if(valNameIdx2 == fIdx) { 
        if(get_ival(PS4_L2)){ 
            if(event_press(PS4_RIGHT)){ 
                fVar += fIncDecMin;
                updateDisplay2 = TRUE;
                //cls_oled(0);
            }
            if(event_press(PS4_LEFT)){ 
                fVar -= fIncDecMin;
                updateDisplay2 = TRUE;
               // cls_oled(0);
            }
            if(event_press(PS4_UP)){ 
                fVar += fIncDecMax;
                updateDisplay2 = TRUE;
                //cls_oled(0);
            }
            if(event_press(PS4_DOWN)){ 
                fVar -= fIncDecMax;
                updateDisplay2 = TRUE;
                //cls_oled(0);
            }
        }
        fVar = clamp(fVar,fVarMin,fVarMax);
        //NumberToString(fVar,FindDigits(fVar),32);              
    }
    return fVar;
}
int Count;
int displayNew = TRUE;
int logVal;

const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  {48,49,50,51,52,53,54,55,56,57};
function Cycle(Value, Min, Max) {
	if(Value > Max)
		return Min;
	if(Value < Min)
		return Max;
	return Value;
}

function FindDigits(Number) {
    logVal = 0;

    do
    {
        Number /= 10;
        logVal++;
    }
        while (Number);
    return logVal;
}
int i, c_Val,c;
function NumberToString(Value, f_Digits, X) {
    i     =     1;
    c_Val = 10000;

    if(Value < 0) //--neg numbers
    {          
        putc_oled(i, 45);    //--add leading "-"
        i += 1;
        Value = abs(Value);
    } 

    for(c = 5; c >= 1; c--) 
    {
        if(f_Digits >= c) 
        {
            putc_oled(i,ASCII_NUM[Value / c_Val]);
            Value = Value % c_Val;
            i +=  1; 

            if(c == 4) 
            {
                putc_oled(i, 44);   //--add ","
                i += 1;
            }
        }
            c_Val /= 10;
    }
        puts_oled(Center_X(i - 2, OLED_FONT_LARGE_WIDTH), X, OLED_FONT_MEDIUM, i - 1, OLED_WHITE); // adjustable value centered in X and Y - medium size
}
function Center_X(f_chars,f_font){  //--  center_x(number of chars,font size);                                                 
return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); //-- return X for Centering String Horizontally
}
function OLEDCross(ToF) {

	if(ToF == TRUE){
	
		line_oled(64, 1, 64, 63, 1, 1);
		line_oled(1, 32, 127, 32, 1, 1);
		
		}
}
function blockInputs() { // Blocks Inputs
set_val(PS4_LX,0);
set_val(PS4_LY,0);
set_val(PS4_RX,0);
set_val(PS4_RY,0);
set_val(PS4_UP,0);
set_val(PS4_DOWN,0);
set_val(PS4_LEFT,0);
set_val(PS4_RIGHT,0);
set_val(PS4_L2,0);
set_val(PS4_L1,0);
set_val(PS4_R2,0);
set_val(PS4_R1,0);
set_val(PS4_CROSS,0);
set_val(PS4_CIRCLE,0);
set_val(PS4_SQUARE,0);
set_val(PS4_TRIANGLE,0);
set_val(PS4_SHARE,0);
set_val(PS4_PS,0);
set_val(PS4_OPTIONS,0);
set_val(PS4_TOUCH,0);
}
function MenuDefault() {
Menu 		= FALSE;
mainPage	= FALSE;
hmPage		= FALSE;
aaPage		= FALSE;
saPage		= FALSE;
rfPage		= FALSE;
bhPage		= FALSE;
htPage		= FALSE;
sdrPage		= FALSE;
cdPage		= FALSE;
arPage		= FALSE;
bPage		= FALSE;
csPage		= FALSE;
bvPage		= FALSE;
raPage		= FALSE;
pofPage		= FALSE;
crsPage		= FALSE;
hmSection	= 0;
aaSection	= 0;
saSection	= 0;
rfSection	= 0;
sdrSection	= 0;
cdSection	= 0;
arSection	= 0;
bSection	= 0;
csSection	= 0;
bvSection	= 0;
raSection	= 0;
crsSection	= 0;
}
function batteryDisplay() { // Battery %

	if(get_battery() == 0)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[0]);
	
	}
	
	if(get_battery() == 1)
	{
	// this script was made by Avilio
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[1]);
	
	}
	
	if(get_battery() == 2)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[2]);
	
	}
	
	if(get_battery() == 3)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[3]);
	
	}
	
	if(get_battery() == 4)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[4]);
	
	}
	
	if(get_battery() == 5)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[5]);
	
	}
	
	if(get_battery() == 6)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[6]);
	
	}
	
	if(get_battery() == 7)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[7]);
	
	}
	
	if(get_battery() == 8)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[8]);
	
	}
	
	if(get_battery() == 9)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[9]);
	
	}
	
	if(get_battery() == 10)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[10]);
	
	}
	
	if(get_battery() == 11)
	{
	
		cls_oled(0);
		printf(Center_X(18, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,batteryS[11]);
	
	}
}

// Strings
const string modS[] = { "" , "BINDS" , "HERO MODS" , "AIM ASSIST" , "ROTATIONAL AA" , "STEADY AIM" , "RAPID FIRE" , "CROUCH SHOT" , "PING ON FIRE" , "BHOP" , "HAIR TRIGGERS" , "NO STICK DRIFT" , "CUSTOM DEADZONE" , "AUTO RELOAD" , "CUSTOM SENSITIVITY" , "VIBRATIONS" , "" };
/*                       	  Mod 1     Mod 2         Mod 3          Mod 4             Mod 5          Mod 6          Mod 7           Mod 8            Mod 9    Mod 10            Mod 11             Mod 12              Mod 13          Mod 14                 Mod 15           */
// Heroes
const string heroS[] = { "NONE" , "ASHE" , "BASTION" , "ECHO" , "GENJI" , "HANZO" , "JUNKRAT" , "CASSIDY" , "MEI" , "PHARAH" , "REAPER" , "SOJOURN" , "SOLDIER: 76" , "SOMBRA" , "SYMMETRA" , "TORBJORN" , "TRACER" , "WIDOWMAKER" , "ANA" , "BAPTISTE" , "BRIGITTE" , "KIRIKO" , "LUCIO" , "MERCY" , "MOIRA" , "ZENYATTA" , "D.VA" , "DOOMFIST" , "JUNKER QUEEN" , "ORISA" , "REINHARDT" , "ROADHOG" , "SIGMA" , "WINSTON" , "WRECKING BALL" , "ZARYA" , "RAMATTRA" , "" };
// Aim Assist
const string aimassistS[] = { "OFF" , "LEGACY" , "TRIPLE STICKY" , "DOGZ POLAR V6" , "SIZE:" , "SPEED:" , "ADS SIZE:" , "ADS SPEED:" , "HIPFIRE SIZE:" , "HIPFIRE SPEED:" , "ADS & FIRE SIZE:" , "ADS & FIRE SPEED:" , "BASE POWER:" , "BASE SPEED:" , "ZONE POWER:" , "ZONE SPEED:" , "FIRE POWER:" , "FIRE SPEED:" , "DEADZONE:" , "" };
// Rotational Aim Assist
const string rotationalaaS[] = { "OFF" , "ON" , "SIZE:" , "SPEED:" , "" };
// Steady Aim
const string steadyaimS[] = { "OFF" , "ON" , "ADS RESOLUTION:" , "LOOK RESOLUTION:" , "" };
// Rapid Fire
const string rapidfireS[] = { "OFF" , "ON" , "ROUNDS PER SECOND:" , "" };
// Bunny Hop
const string bhopS[] = { "OFF" , "ON" , ""};
// Ping On Fire
const string pingonfireS[] = { "OFF" , "ON" , ""};
// Hair Triggers
const string hairtriggerS[] = { "OFF" , "ON" , "" };
// Stick Drift Removal
const string stickdriftS[] = {  "OFF" , "ON" , "DEADZONE:" , "" };
// Custom Deadzone
const string customdeadzoneS[] = {  "OFF" , "ON" , "DEADZONE:" , "" };
// Intro
const string introS[] = { "OVERWATCH 2" , "ADARA" , "V1.6" , "" };
// Save
const string saveS[] = { "SAVED" , "" };
// Auto Reload
const string autoreloadS[] = { "OFF" , "ON" , ""};
// Crouch Shot
const string crouchshotS[] = { "OFF" , "ON" , ""};
// Custom Sensitivity
const string customsensitivityS[] = { "OFF" , "ON" , "LOOK SENS:" , "PRIM FIRE SENS:" , "SEC FIRE SENS:" , "PRIM & SEC SENS:" , "" };
// Vibrations
const string vibrationsS[] = { "OFF" , "ON" , "" };
// Binds
const string bindsS[] = { "PRIMARY FIRE:" , "SECONDARY FIRE:" , "ABILITY ONE:" , "ABILITY TWO:" , "JUMP:" , "CROUCH:" , "RELOAD:" , "MELEE:" , "ULTIMATE:" , "HERO MOD:" , "PING:" , "SWITCH WEAPON:" , "BATTERY CHECK:" , "OTF HERO SELECT:" , "" };
const string controllerS[] = { "L2/LT" , "L1/LB" , "R2/RT " , "R1/RB" , "CROSS/A" , "SQUARE/X" , "TRIANGLE/Y" , "CIRCLE/B" , "DOWN" , "LEFT" , "UP" , "RIGHT" , "L3/LS" , "R3/RS" , "SHARE/VIEW" , "OPTIONS/MENU" , "PS/XBOX" , ""};
// Kill Switch
const string killswitchS[] = { "OFF" , "" };
// Controller Battery Percentage
const string batteryS[] = { "Charge Battery!" ,"Battery: 10%","Battery: 20%","Battery: 30%","Battery: 40%","Battery: 50%","Battery: 60%","Battery: 70%","Battery: 80%","Battery: 90%","Battery: 100%","Battery: Charging", "" };
// Hero Mods
/* Ashe 			*/const string asheS[] = { "SHOTGUN JUMP" , "" };
/* Bastion 			*/const string bastionS[] = { "GRENADE JUMP" , "" };
/* Echo 			*/const string echoS[] = { "HOLD TO LIFT" , "" };
/* Genji 			*/const string genjiS[] = { "SHURIKEN MELEE" , "DASH FAN" , "" };
/* Hanzo 			*/const string hanzoS[] = { "AUTO STORM ARROW" , "" };
/* Junkrat 			*/const string junkratS[] = { "MINE JUMP" , "AUTO DETONATE" , "" };
/* Cassidy 			*/const string cassidyS[] = { "BETTER ROLL" , "ULT CANCEL" , "ANTI RECOIL" , "ANTI RECOIL VALUE:" , "" };
/* Mei 				*/const string meiS[] = { "INSTANT WALL" , "" };
/* Pharah 			*/const string pharahS[] = { "ROCKET JUMP" , ""  };
/* Reaper 			*/const string reaperS[] = { "BETTER WRAITH FORM" , "" };
/* Sojourn 			*/const string sojournS[] = { "SLIDE JUMP" , "" };
/* Soldier: 76 		*/const string soldierS[] = { "AUTO SPRINT" , "ROCKET JUMP" , "ANTI RECOIL" , "ANTI RECOIL VALUE:" , "" };
/* Sombra 			*/const string sombraS[] = { "AUTO HACK" , "" };
/* Symmetra 		*/const string symmetraS[] = { "CHARGED ORBS" , "INSTANT WALL" , "AUTO TP" , "" };
/* Torbjorn 		*/const string torbjornS[] = { "AUTO OVERLOAD" , "" };
/* Tracer 			*/const string tracerS[] = { "BLINK MELEE" , "" };
/* Widowmaker 		*/const string widowmakerS[] = { "HOOK JUMP" , "CROUCH SHOT" , "" };
/* Ana 				*/const string anaS[] = { "QUICKSCOPE" , "" };
/* Baptiste 		*/const string baptisteS[] = { "INSTANT MATRIX" , "ANTI RECOIL" , "ANTI RECOIL VALUE:" , "" };
/* Brigitte 		*/const string brigitteS[] = { "INSTANT BASH" , "" };
/* Kiriko 			*/const string kirikoS[] = { "HEAL SHOT" , "" };
/* Lucio 			*/const string lucioS[] = { "SWAP & AMP" , "" };
/* Mercy 			*/const string mercyS[] = { "BETTER SUPER JUMP" , "GA RESET" , "" };
/* Moira 			*/const string moiraS[] = { "DOUBLE TAP ORB" , "ORB FADE" , "" };
/* Zenyatta 		*/const string zenyattaS[] = { "AUTO DISCORD" , "" };
/* D.Va 			*/const string dvaS[] = { "FLYING ULTIMATE" , "" };
/* Doomfist 		*/const string doomfistS[] = { "SLAM CANCEL" , "" };
/* Junker Queen 	*/const string junkerqueenS[] = { "SHOOT MELEE" , ""};
/* Orisa 			*/const string orisaS[] = { "ULTIMATE RELEASE" , "" };
/* Reinhardt 		*/const string reinhardtS[] = { "DOUBLE STRIKE" , "CHARGE C SWING" , "" };
/* Roadhog 			*/const string roadhogS[] = { "SHOOT HOOK" , "" };
/* Sigma 			*/const string sigmaS[] = { "ULT LEVITATE" , "" };
/* Winston 			*/const string winstonS[] = { "LEAP MELEE" , "" };
/* Wrecking Ball 	*/const string wreckingballS[] = { "MINE PILEDRIVER" , "" };
/* Zarya 			*/const string zaryaS[] = { "PULSE JUMP" , "" };
/* Ramattra			*/const string ramattraS[] = { "SHIELD CONFIRM" , "" };
// Off/On
const string offonS[] = { "OFF" , "ON" , "" };
// Hero Selected
const string heroselectedS[] = { "HERO SELECTED:" , "" };

// Images
const image Logo = {73, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x3F, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xE0, 0x03, 0xF9, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x79, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x00, 0x09, 0xF3, 0x80, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x01, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xFE, 0x70, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x0A, 0x00, 0x3F, 0x1F, 0xFF, 0x00, 0x00, 0x1F, 0xC0, 0x05, 0x00, 0x1F, 0xCF, 0xFF, 0xC0, 0x00, 0x0F, 0xC0, 0x06, 0xC0, 0x07, 0xE3, 0xFF, 0xE0, 0x00, 0x07, 0xE0, 0x03, 0x60, 0x03, 0xF9, 0xC0, 0x70, 0x00, 0x07, 0xF0, 0x03, 0xB8, 0x01, 0xFC, 0xE0, 0x18, 0x00, 0x03, 0xF0, 0x01, 0xDC, 0x00, 0x7E, 0x60, 0x44, 0x00, 0x01, 0xF8, 0x00, 0xEE, 0x00, 0x3F, 0x30, 0xC2, 0x00, 0x00, 0xFC, 0x00, 0xF7, 0x80, 0x1F, 0x8F, 0xC3, 0x00, 0x00, 0x7E, 0x00, 0x7B, 0xC0, 0x0F, 0xC7, 0xC3, 0x80, 0x00, 0x3F, 0x00, 0x7D, 0xF0, 0x07, 0xE3, 0xC3, 0xC0, 0x00, 0x1F, 0x80, 0xFE, 0xFE, 0x03, 0xF1, 0xC3, 0xE0, 0x00, 0x0F, 0xC0, 0xFF, 0x7F, 0x81, 0xF9, 0xC3, 0xF0, 0x00, 0x07, 0xE0, 0xFF, 0xBF, 0xE0, 0xFC, 0xC0, 0x08, 0x00, 0x03, 0xF8, 0xFF, 0x8F, 0xF8, 0xFE, 0x60, 0x04, 0x00, 0x00, 0xFC, 0xFF, 0x83, 0xFE, 0x7F, 0x30, 0x06, 0x00, 0x00, 0x7E, 0xFF, 0x80, 0xFF, 0xBF, 0x1F, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x3F, 0xFF, 0x9F, 0xFF, 0x80, 0x00, 0x0F, 0xFF, 0x80, 0x0F, 0xFF, 0x8F, 0xFF, 0x80, 0x00, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0xC6, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0xFF, 0xC6, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x3F, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x3F, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x7F, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC1, 0xFF, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xE1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00};
const image overwatchLogo = {63, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF1, 0xC0, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xC1, 0x80, 0x00, 0x00, 0x00, 0xE7, 0x00, 0x0F, 0x31, 0x80, 0x00, 0x00, 0x03, 0xE4, 0x00, 0x04, 0xF3, 0x80, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x03, 0xF3, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x07, 0xE7, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x50, 0x07, 0xE7, 0xFF, 0x00, 0x00, 0xFC, 0x01, 0xB0, 0x0F, 0xEF, 0xFF, 0x00, 0x01, 0xF0, 0x03, 0x60, 0x0F, 0xDC, 0x0E, 0x00, 0x03, 0xE0, 0x06, 0xC0, 0x1F, 0x98, 0x0C, 0x00, 0x07, 0xC0, 0x1D, 0xC0, 0x3F, 0x20, 0x98, 0x00, 0x0F, 0x00, 0x3B, 0x80, 0x3E, 0x66, 0x30, 0x00, 0x1E, 0x00, 0xF7, 0x80, 0x7C, 0xF8, 0x60, 0x00, 0x3C, 0x03, 0xEF, 0x80, 0xF9, 0xE1, 0xC0, 0x00, 0x78, 0x0F, 0xDF, 0x81, 0xF3, 0x87, 0x80, 0x00, 0xF0, 0x3F, 0xBF, 0x83, 0xE6, 0x1F, 0x00, 0x01, 0xF0, 0xFE, 0x7F, 0x8F, 0xC8, 0x02, 0x00, 0x03, 0xE3, 0xFC, 0x7F, 0x9F, 0x10, 0x04, 0x00, 0x07, 0xEF, 0xF0, 0x7F, 0xBE, 0x60, 0x18, 0x00, 0x07, 0xFF, 0xC0, 0x7F, 0xFC, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0x00, 0x7F, 0xF1, 0xFF, 0xC0, 0x00, 0x1F, 0xFC, 0x00, 0x7F, 0xE7, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x7F, 0x8C, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x7F, 0x30, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x03, 0xFC, 0x60, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x1F, 0xF1, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x00};
const image intro1 		= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFD, 0xBF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1F, 0x9F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0xE7, 0xFF, 0xFE, 0x3E, 0x36, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x0F, 0xFF, 0xFF, 0xF0, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x81, 0xFF, 0xFF, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x3F, 0xFF, 0xFC, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0xFF, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x2F, 0xFF, 0x60, 0x02, 0x70, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x0F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0xFF, 0xFF, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1D, 0xFF, 0xFF, 0xB8, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE7, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x9F, 0x1F, 0xFF, 0xF9, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xF7, 0xF9, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xBF, 0xFF, 0xFF, 0xFF, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xFF, 0xFF, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xEF, 0x7D, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro2 		= {91, 57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xBF, 0xFF, 0xFD, 0xF9, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC3, 0xFF, 0xFF, 0xE0, 0x33, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x3F, 0xFF, 0xFC, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x0F, 0xFF, 0xE0, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x01, 0xFF, 0xFC, 0x00, 0x33, 0x80, 0x00, 0x00, 0x00, 0x00, 0x72, 0x00, 0x3F, 0xFF, 0x80, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x07, 0xFF, 0xF8, 0x00, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x4F, 0xFE, 0x80, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x0F, 0xFF, 0xF0, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x01, 0xFF, 0xFF, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x3F, 0xFF, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x07, 0xFF, 0xFE, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x01, 0xFF, 0xFF, 0xC0, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0xFF, 0xFC, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x3F, 0xFF, 0xFF, 0xE1, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x7D, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFE, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xBF, 0xFF, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xDE, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00};
const image intro3 		= {90, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9E, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC8, 0x41, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x72, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xE8, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFE, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xDF, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 0xFF, 0xFE, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x37, 0xF5, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x13, 0xFF, 0xF0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x87, 0xFF, 0xFF, 0xC0, 0x3F};
const image intro4 		= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0xEF, 0xFF, 0xFC, 0xC8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x07, 0xFF, 0xFF, 0xC0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x1F, 0xFF, 0xFE, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFF, 0x80, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0xFF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0xFC, 0x40, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x7F, 0xFF, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x1F, 0xFF, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x07, 0xFF, 0xFF, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x03, 0xFF, 0xFF, 0x80, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x01, 0xFF, 0xFF, 0xE0, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0xFF, 0xFF, 0xFC, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x83, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x73, 0xFF, 0xFF, 0x3F, 0x9F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFF, 0xFF, 0xC7, 0xC7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0xDF, 0xE7, 0xFB, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xDF, 0xFF, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE7, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xEF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};
const image intro5 		= {92, 58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC3, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xE3, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xEF, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xFC, 0xFF, 0xFC, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE7, 0xEF, 0xFF, 0x80, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x3F, 0xFF, 0xFC, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x1F, 0xFF, 0xC0, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0xFF, 0xFF, 0xE0, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x07, 0xFF, 0xFE, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x3F, 0xFF, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x0F, 0xFF, 0xC0, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x07, 0xFF, 0xA0, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x06, 0x40, 0x00, 0x1F, 0xF8, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x3F, 0xFF, 0xFF, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x07, 0xFF, 0xFF, 0xF1, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x7F, 0xFF, 0xFF, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xCF, 0xDF, 0xFF, 0xFF, 0xF0, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFE, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xFE, 0x60, 0x00, 0x00};
const image intro6 		= {96, 53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x18, 0x7F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6F, 0xFF, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0xFC, 0xC0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0xF3, 0xFF, 0xFF, 0x03, 0x83, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xCB, 0xFF, 0xFF, 0x87, 0xFF, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x0F, 0xED, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x19, 0xFF, 0xFF, 0xFF, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x7F, 0xFE, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x09, 0x00, 0xEF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x1F, 0x01, 0x7F, 0xFE, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x3F, 0x03, 0xFF, 0xFE, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8D, 0xFF, 0xFF, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF2, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x03, 0xFF, 0xFF, 0xC0, 0x0F, 0xF0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC3, 0xFF, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFD, 0xFE, 0xF9, 0xFF, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xCF, 0xDF, 0xFF, 0xCF, 0xFF, 0xC0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFE, 0x0F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x1F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xBF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x7F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7F, 0xFF, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00};
const image intro7 		= {90, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCE, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0xF7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x3F, 0xFE, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x81, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x43, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x83, 0xC3, 0xFF, 0xF8, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7E, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFC, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xFF, 0xFE, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x1F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x06, 0xFF, 0xFF, 0xFD, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x03, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x03, 0xFF, 0xFF, 0xEF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x7B, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x0E, 0x05, 0xFE, 0x00, 0x7F};
const image intro8 		= {90, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x73, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x70, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x1F, 0xFE, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x0F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x9F, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF1, 0xEF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0xDF, 0xFF, 0xC0, 0x27, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x3F, 0xFF, 0xFF, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xC7, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7F, 0xFF, 0xF3, 0x17, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x1F, 0xFF, 0xFF, 0x86, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0F, 0xFF, 0xFB, 0xF1, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x0F, 0xFF, 0xFC, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x1E, 0x38, 0x00, 0x00, 0x7F};
const image intro9 		= {90, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0x6F, 0xFF, 0xFF, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF3, 0xF3, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFC, 0xFF, 0xFF, 0xE0, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x31, 0xBF, 0xFF, 0xFB, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0xFF, 0xFF, 0xC0, 0x07, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0xFF, 0xF0, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFC, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x01, 0xFF, 0xFF, 0xFE, 0x7D, 0x80, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x7F, 0xFF, 0xFF, 0x87, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x9F, 0xFF, 0xFF, 0xFF, 0x81, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x3F, 0xFF, 0xFF, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x07, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0xFF, 0xFF, 0xF0, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFE, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x0F, 0xFF, 0xFF, 0xF0, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1F, 0xFF, 0xFF, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xDF, 0xFF, 0xD8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF7, 0xFE, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0xFF, 0xFC, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF1, 0xF3, 0xFF, 0xFF, 0xBF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1E, 0xF9, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xE1, 0xBE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC4, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x7F, 0xFF, 0xFF, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00};
const image intro10 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x42, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x09, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x3F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x51, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro11 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0F, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x3F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro12 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x3F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro13 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x09, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro14		= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD0, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x09, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro15 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro16 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x32, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x3F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro17 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0x67, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x08, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x3F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro18 	= {90, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x7E, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xCF, 0xE7, 0xFF, 0xFE, 0x62, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x07, 0xFF, 0xFF, 0xE0, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0xFF, 0xFC, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xFF, 0xFE, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x0B, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x02, 0x7F, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x10, 0x00, 0x9F, 0xF9, 0x00, 0x09, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x2F, 0xFF, 0x60, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x1F, 0xFF, 0xF8, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x07, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFF, 0xFF, 0x80, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x3F, 0xFF, 0xFE, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0xFF, 0xFF, 0xC1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x19, 0xFF, 0xFF, 0x9F, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7F, 0xFF, 0xE3, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xBF, 0x9F, 0xFF, 0xF9, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF8, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9F, 0xFF, 0xFF, 0xFF, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFF, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBF, 0xFF, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEF, 0xFF, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xEF, 0x7D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xFB, 0xDF, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xF7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xBD, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00};
const image intro19 	= {90, 62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFE, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x0E, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xFF, 0xFF, 0xFC, 0x4F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x1F, 0xFF, 0xFC, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x1F, 0xFF, 0xFE, 0x06, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x3F, 0xDB, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x1F, 0xFF, 0xF0, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x0F, 0xFF, 0xFE, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x03, 0xFF, 0xFF, 0x80, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x7F, 0xFF, 0xE3, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x17, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1F, 0xF3, 0xDF, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0F, 0xFC, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF9, 0xF9, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFE, 0x7F, 0xFF, 0xE7, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xFF, 0xF2, 0x7F, 0xF9, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1F, 0xFC, 0x00, 0x00, 0x00};
const image intro20 	= {89, 41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x73, 0x00, 0x03, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xC0, 0x00};

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 
function reset_spvar() {
	SPVAR_Current_Slot	= SPVAR_1;
	SPVAR_Current_Bit	= 0;
	SPVAR_Current_Value = 0;
	
	SPVAR_Total_Bits	= 0;
}

int SPVAR_Total_Bits;

//function Get_Total_SPVARs() {
//	return (SPVAR_Total_Bits / 32) + (SPVAR_Total_Bits % 32 != 0) + 1;
//}

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 

int SPVAR_Current_Bit,
	SPVAR_Current_Slot,
	SPVAR_Current_Value,
	SPVAR_TMP,
	SPVAR_Bits;

// Function used to count the number of bits used by the given value
function Get_Bit_Count(Val) {
	SPVAR_TMP = 0;
	Val		  = abs(Val);

	while (Val)
	{
		SPVAR_TMP++;
		Val = Val >> 1;
	}
		return SPVAR_TMP;
}

function Get_Bit_Count2(Val1, Val2) {	
	SPVAR_TMP = max(Get_Bit_Count(Val1), Get_Bit_Count(Val2));

	if (Is_Signed2(Val1, Val2))
	{
		SPVAR_TMP++;
	}
		SPVAR_Total_Bits += SPVAR_TMP;
	return SPVAR_TMP;
}

function Is_Signed2(Val1, Val2) {
	return Val1 < 0 || Val2 < 0;
}

function Make_Sign(bits) {
	return 1 << clamp(bits - 1, 0, 31);
}

function Make_Full_Mask(bits) {	
	if (bits == 32)
	{
		return -1;
	}
		return 0x7FFFFFFF >> (31 - bits);
}

function Make_Sign_Mask(bits) {
	return Make_Full_Mask(bits - 1);
}

function Pack_I(Val, bits) {
	if (Val < 0)
	{
		return (abs(Val) & Make_Sign_Mask(bits)) | Make_Sign(bits);
	}
		return Val & Make_Sign_Mask(bits);
}

function Unpack_I(Val, bits) {
	if (Val & Make_Sign(bits))
	{
		return 0 - (Val & Make_Sign_Mask(bits));
	}
		return Val & Make_Sign_Mask(bits);
}

function Read_SPVAR_Slot(slot) {
	return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0);
}

function save_spvar(Val, min, max) {
	SPVAR_Bits = Get_Bit_Count2(min, max);
	Val		   = clamp(Val, min, max);
	
	if (Is_Signed2(min, max))
	{
		Val = Pack_I(Val, SPVAR_Bits);
	}

	Val = Val & Make_Full_Mask(SPVAR_Bits);
	
	if (SPVAR_Bits >= 32 - SPVAR_Current_Bit)
	{
		SPVAR_Current_Value	= SPVAR_Current_Value | (Val << SPVAR_Current_Bit);
		set_pvar(SPVAR_Current_Slot, SPVAR_Current_Value);
		SPVAR_Current_Slot++;
		SPVAR_Bits -= (32 - SPVAR_Current_Bit);
		Val = Val >> (32 - SPVAR_Current_Bit);
		SPVAR_Current_Bit = 0;
		SPVAR_Current_Value = 0;
	}

	SPVAR_Current_Value = SPVAR_Current_Value | (Val << SPVAR_Current_Bit);
	SPVAR_Current_Bit  += SPVAR_Bits;

	if (!SPVAR_Current_Bit)
	{
		SPVAR_Current_Value = 0;
	}
		set_pvar(SPVAR_Current_Slot, SPVAR_Current_Value);
}

function read_spvar(min, max, def) {
	SPVAR_Bits			= Get_Bit_Count2(min, max);
	SPVAR_Current_Value = (Read_SPVAR_Slot(SPVAR_Current_Slot) >> SPVAR_Current_Bit) & Make_Full_Mask(SPVAR_Bits);
	
	if (SPVAR_Bits >= 32 - SPVAR_Current_Bit)
	{
		SPVAR_Current_Value = (SPVAR_Current_Value & Make_Full_Mask(32 - SPVAR_Current_Bit)) | ((Read_SPVAR_Slot(SPVAR_Current_Slot + 1) & Make_Full_Mask(SPVAR_Bits - (32 - SPVAR_Current_Bit))) << (32 - SPVAR_Current_Bit));
	}	

	SPVAR_Current_Bit += SPVAR_Bits;
	SPVAR_Current_Value = SPVAR_Current_Value & Make_Full_Mask(SPVAR_Bits);

	if (SPVAR_Current_Bit >= 32)
	{
		SPVAR_Current_Slot++;
		SPVAR_Current_Bit -= 32;
	}
	
	if (Is_Signed2(min, max))
	{
		SPVAR_Current_Value = Unpack_I(SPVAR_Current_Value, SPVAR_Bits);
	}
	
	if (SPVAR_Current_Value < min || SPVAR_Current_Value > max)
	{
		return def;
	}
	
	return SPVAR_Current_Value;
}
function load(){ 
reset_spvar();  

AsheMod1 			= read_spvar(0,1,0);
BastionMod1 		= read_spvar(0,1,0);
EchoMod1 			= read_spvar(0,1,0);
GenjiMod1 			= read_spvar(0,1,0);
GenjiMod2 			= read_spvar(0,1,0);
HanzoMod1 			= read_spvar(0,1,0);
CassidyMod1 		= read_spvar(0,1,0);
MeiMod1 			= read_spvar(0,1,0);
PharahMod1 			= read_spvar(0,1,0);
ReaperMod1 			= read_spvar(0,1,0);
SojournMod1 		= read_spvar(0,1,0);
JunkratMod1 		= read_spvar(0,1,0);
SoldierMod1 		= read_spvar(0,1,0);
SoldierMod2 		= read_spvar(0,1,0);
SoldierMod3 		= read_spvar(0,1,0);
SombraMod1 			= read_spvar(0,1,0);
SymmetraMod1		= read_spvar(0,1,0);
SymmetraMod2		= read_spvar(0,1,0);
SymmetraMod3		= read_spvar(0,1,0);
TracerMod1 			= read_spvar(0,1,0);
WidowmakerMod1 		= read_spvar(0,1,0);
AnaMod1 			= read_spvar(0,1,0);
BaptisteMod1 		= read_spvar(0,1,0);
BaptisteMod2 		= read_spvar(0,1,0);
BrigitteMod1 		= read_spvar(0,1,0);
KirikoMod1 			= read_spvar(0,1,0);
LucioMod1 			= read_spvar(0,1,0);
MercyMod1 			= read_spvar(0,1,0);
MoiraMod1 			= read_spvar(0,1,0);
MoiraMod2 			= read_spvar(0,1,0);
ZenyattaMod1 		= read_spvar(0,1,0);
DvaMod1 			= read_spvar(0,1,0);
DoomfistMod1 		= read_spvar(0,1,0);
JunkerQueenMod1 	= read_spvar(0,1,0);
OrisaMod1 			= read_spvar(0,1,0);
ReinhardtMod1 		= read_spvar(0,1,0);
ReinhardtMod2		= read_spvar(0,1,0);
RoadhogMod1 		= read_spvar(0,1,0);
SigmaMod1 			= read_spvar(0,1,0);
WinstonMod1 		= read_spvar(0,1,0);
WreckingBallMod1	= read_spvar(0,1,0);
ZaryaMod1 			= read_spvar(0,1,0);
JunkratMod2 		= read_spvar(0,1,0);
CassidyMod2 		= read_spvar(0,1,0);
CassidyMod3 		= read_spvar(0,1,0);
WidowmakerMod2		= read_spvar(0,1,0);
MercyMod2			= read_spvar(0,1,0);
RamattraMod1		= read_spvar(0,1,0);
}
function Save() {
reset_spvar();

save_spvar(AsheMod1,0,1);
save_spvar(BastionMod1,0,1);
save_spvar(EchoMod1,0,1);
save_spvar(GenjiMod1,0,1);
save_spvar(GenjiMod2,0,1);
save_spvar(HanzoMod1,0,1);
save_spvar(CassidyMod1,0,1);
save_spvar(MeiMod1,0,1);
save_spvar(PharahMod1,0,1);
save_spvar(ReaperMod1,0,1);
save_spvar(SojournMod1,0,1);
save_spvar(JunkratMod1,0,1);
save_spvar(SoldierMod1,0,1);
save_spvar(SoldierMod2,0,1);
save_spvar(SoldierMod3,0,1);
save_spvar(SombraMod1,0,1);
save_spvar(SymmetraMod1,0,1);
save_spvar(TracerMod1,0,1);
save_spvar(WidowmakerMod1,0,1);
save_spvar(AnaMod1,0,1);
save_spvar(BaptisteMod1,0,1);
save_spvar(BaptisteMod2,0,1);
save_spvar(BrigitteMod1,0,1);
save_spvar(KirikoMod1,0,1);
save_spvar(LucioMod1,0,1);
save_spvar(MercyMod1,0,1);
save_spvar(MoiraMod1,0,1);
save_spvar(MoiraMod2,0,1);
save_spvar(ZenyattaMod1,0,1);
save_spvar(DvaMod1,0,1);
save_spvar(DoomfistMod1,0,1);
save_spvar(JunkerQueenMod1,0,1);
save_spvar(OrisaMod1,0,1);
save_spvar(ReinhardtMod1,0,1);
save_spvar(ReinhardtMod2,0,1);
save_spvar(RoadhogMod1,0,1);
save_spvar(SigmaMod1,0,1);
save_spvar(WinstonMod1,0,1);
save_spvar(WreckingBallMod1,0,1);
save_spvar(ZaryaMod1,0,1);
save_spvar(DeadZoneValue,1,15);
save_spvar(JunkratMod2,0,1);
save_spvar(CassidyMod2,0,1);
save_spvar(CassidyMod3,0,1);
save_spvar(WidowmakerMod2,0,1);
save_spvar(MercyMod2,0,1);
save_spvar(SymmetraMod2,0,1);
save_spvar(SymmetraMod3,0,1);
save_spvar(RamattraMod1,0,1);
}
init {

SoldierStrength		 = get_pvar(SPVAR_2,-50,50,0);
BaptisteStrength	 = get_pvar(SPVAR_3,-50,50,0);
AimAssist 			 = get_pvar(SPVAR_4,0,3,0);
legacyAAV 			 = get_pvar(SPVAR_5,0,100,0);
legacyAAW 			 = get_pvar(SPVAR_6,0,100,0);
ADS_Size 			 = get_pvar(SPVAR_7,0,100,0);
ADS_Wait_Value 		 = get_pvar(SPVAR_8,0,100,0);
HIPFIRE_Size 		 = get_pvar(SPVAR_9,0,100,00);
HIPFIRE_Wait_Value	 = get_pvar(SPVAR_10,0,100,0);
ADS_FIRE_Size 		 = get_pvar(SPVAR_11,0,100,0);
ADS_FIRE_Wait_Value  = get_pvar(SPVAR_12,0,100,0);
BasePower 			 = get_pvar(SPVAR_13,0,1,0);
BaseSpeed 			 = get_pvar(SPVAR_14,0,5,0);
FirePower 			 = get_pvar(SPVAR_15,0,100,0);
FireSpeed			 = get_pvar(SPVAR_16,0,100,0);
ZonePower			 = get_pvar(SPVAR_17,0,100,0);
ZoneSpeed			 = get_pvar(SPVAR_18,0,100,0);
DeadZone		 	 = get_pvar(SPVAR_19,0,15,0);
ads_resolution		 = get_pvar(SPVAR_20,1,100,0);
look_resolution		 = get_pvar(SPVAR_21,1,100,0);
rounds_per_second	 = get_pvar(SPVAR_22,1,25,0);
DeadZoneValue		 = get_pvar(SPVAR_23,1,15,0);
CustomDZ			 = get_pvar(SPVAR_24,0,9,0);
Hero				 = get_pvar(SPVAR_25,0,36,0);
CassidyARStrength	 = get_pvar(SPVAR_26,-50,50,0);
_Primary_Fire		 = get_pvar(SPVAR_27,0,16,0);
_Secondary_Fire		 = get_pvar(SPVAR_28,0,16,0);
_Ability_One		 = get_pvar(SPVAR_29,0,16,0);
_Ability_Two		 = get_pvar(SPVAR_30,0,16,0);
_Jump				 = get_pvar(SPVAR_31,0,16,0);
_Crouch				 = get_pvar(SPVAR_32,0,16,0);
_Reload				 = get_pvar(SPVAR_33,0,16,0);
_Melee				 = get_pvar(SPVAR_34,0,16,0);
_Ultimate			 = get_pvar(SPVAR_35,0,16,0);
_Hero_Mod			 = get_pvar(SPVAR_36,0,16,0);
_Ping				 = get_pvar(SPVAR_37,0,16,0);
_Switch_Weapon		 = get_pvar(SPVAR_38,0,16,0);
_BatteryCheck_Btn	 = get_pvar(SPVAR_39,0,16,0);
_OTFheroSelect		 = get_pvar(SPVAR_40,0,16,0);
lookSens			 = get_pvar(SPVAR_41,1,100,0);
adsSens			 	 = get_pvar(SPVAR_42,1,100,0);
fireSens			 = get_pvar(SPVAR_43,1,100,0);
adsfireSens			 = get_pvar(SPVAR_44,1,100,0);
RotationalAASize	 = get_pvar(SPVAR_45,1,100,0);
RotationalAASpeed	 = get_pvar(SPVAR_46,1,100,0);
CrouchShot	 		 = get_pvar(SPVAR_47,1,100,0);
CustomSensitivity	 = get_pvar(SPVAR_48,1,100,0);
PingOnFire			 = get_pvar(SPVAR_49,1,100,0);
RotationalAA		 = get_pvar(SPVAR_50,1,100,0);
BlockVibrations		 = get_pvar(SPVAR_51,1,100,0);
AutoReload			 = get_pvar(SPVAR_52,1,100,0);
CustomDeadzone		 = get_pvar(SPVAR_53,1,100,0);
StickDriftRemoval	 = get_pvar(SPVAR_54,1,100,0);
HairTriggers		 = get_pvar(SPVAR_55,1,100,0);
Bhop				 = get_pvar(SPVAR_56,1,100,0);
RapidFire			 = get_pvar(SPVAR_57,1,100,0);
SteadyAim			 = get_pvar(SPVAR_58,1,100,0);
}
function ValueSave() {
set_pvar(SPVAR_2,SoldierStrength);
set_pvar(SPVAR_3,BaptisteStrength);
set_pvar(SPVAR_4,AimAssist);
set_pvar(SPVAR_5,legacyAAV);
set_pvar(SPVAR_6,legacyAAW);
set_pvar(SPVAR_7,ADS_Size);
set_pvar(SPVAR_8,ADS_Wait_Value);
set_pvar(SPVAR_9,HIPFIRE_Size);
set_pvar(SPVAR_10,HIPFIRE_Wait_Value);
set_pvar(SPVAR_11,ADS_FIRE_Size);
set_pvar(SPVAR_12,ADS_FIRE_Wait_Value);
set_pvar(SPVAR_13,BasePower);
set_pvar(SPVAR_14,BaseSpeed);
set_pvar(SPVAR_15,FirePower);
set_pvar(SPVAR_16,FireSpeed);
set_pvar(SPVAR_17,ZonePower);
set_pvar(SPVAR_18,ZoneSpeed);
set_pvar(SPVAR_19,DeadZone);
set_pvar(SPVAR_20,ads_resolution);
set_pvar(SPVAR_21,look_resolution);
set_pvar(SPVAR_22,rounds_per_second);
set_pvar(SPVAR_23,DeadZoneValue);
set_pvar(SPVAR_24,CustomDZ);
set_pvar(SPVAR_25,Hero);
set_pvar(SPVAR_26,CassidyARStrength);
set_pvar(SPVAR_27,_Primary_Fire);
set_pvar(SPVAR_28,_Secondary_Fire);
set_pvar(SPVAR_29,_Ability_One);
set_pvar(SPVAR_30,_Ability_Two);
set_pvar(SPVAR_31,_Jump);
set_pvar(SPVAR_32,_Crouch);
set_pvar(SPVAR_33,_Reload);
set_pvar(SPVAR_34,_Melee);
set_pvar(SPVAR_35,_Ultimate);
set_pvar(SPVAR_36,_Hero_Mod);
set_pvar(SPVAR_37,_Ping);
set_pvar(SPVAR_38,_Switch_Weapon);
set_pvar(SPVAR_39,_BatteryCheck_Btn);
set_pvar(SPVAR_40,_OTFheroSelect);
set_pvar(SPVAR_41,lookSens);
set_pvar(SPVAR_42,adsSens);
set_pvar(SPVAR_43,fireSens);
set_pvar(SPVAR_44,adsfireSens);
set_pvar(SPVAR_45,RotationalAASize);
set_pvar(SPVAR_46,RotationalAASpeed);
set_pvar(SPVAR_47,CrouchShot);
set_pvar(SPVAR_48,CustomSensitivity);
set_pvar(SPVAR_49,PingOnFire);
set_pvar(SPVAR_50,RotationalAA);
set_pvar(SPVAR_51,BlockVibrations);
set_pvar(SPVAR_52,AutoReload);
set_pvar(SPVAR_53,CustomDeadzone);
set_pvar(SPVAR_54,StickDriftRemoval);
set_pvar(SPVAR_55,HairTriggers);
set_pvar(SPVAR_56,Bhop);
set_pvar(SPVAR_57,RapidFire);
set_pvar(SPVAR_58,SteadyAim);
} ˙∏ãæé∏â∫äªàªåπà∫