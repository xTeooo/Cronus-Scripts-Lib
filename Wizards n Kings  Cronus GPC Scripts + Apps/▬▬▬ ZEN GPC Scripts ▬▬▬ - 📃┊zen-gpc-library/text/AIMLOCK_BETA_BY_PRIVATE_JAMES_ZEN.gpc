/*
	
  
 █████╗ ██╗███╗   ███╗██╗      ██████╗  ██████╗██╗  ██╗    ██████╗ ███████╗████████╗ █████╗     
██╔══██╗██║████╗ ████║██║     ██╔═══██╗██╔════╝██║ ██╔╝    ██╔══██╗██╔════╝╚══██╔══╝██╔══██╗    
███████║██║██╔████╔██║██║     ██║   ██║██║     █████╔╝     ██████╔╝█████╗     ██║   ███████║    
██╔══██║██║██║╚██╔╝██║██║     ██║   ██║██║     ██╔═██╗     ██╔══██╗██╔══╝     ██║   ██╔══██║    
██║  ██║██║██║ ╚═╝ ██║███████╗╚██████╔╝╚██████╗██║  ██╗    ██████╔╝███████╗   ██║   ██║  ██║    
╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝    ╚═════╝ ╚══════╝   ╚═╝   ╚═╝  ╚═╝    
██████████████████████████████████████████████████████████████████████████████████████████████
                                           
██████╗ ██╗   ██╗    ██████╗ ██████╗ ██╗██╗   ██╗ █████╗ ████████╗███████╗         ██╗ █████╗ ███╗   ███╗███████╗███████╗
██╔══██╗╚██╗ ██╔╝    ██╔══██╗██╔══██╗██║██║   ██║██╔══██╗╚══██╔══╝██╔════╝         ██║██╔══██╗████╗ ████║██╔════╝██╔════╝
██████╔╝ ╚████╔╝     ██████╔╝██████╔╝██║██║   ██║███████║   ██║   █████╗           ██║███████║██╔████╔██║█████╗  ███████╗
██╔══██╗  ╚██╔╝      ██╔═══╝ ██╔══██╗██║╚██╗ ██╔╝██╔══██║   ██║   ██╔══╝      ██   ██║██╔══██║██║╚██╔╝██║██╔══╝  ╚════██║
██████╔╝   ██║       ██║     ██║  ██║██║ ╚████╔╝ ██║  ██║   ██║   ███████╗    ╚█████╔╝██║  ██║██║ ╚═╝ ██║███████╗███████║
╚═════╝    ╚═╝       ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝  ╚═╝  ╚═╝   ╚═╝   ╚══════╝     ╚════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████             
      






 ██████╗██████╗ ███████╗██████╗ ██╗████████╗███████╗
██╔════╝██╔══██╗██╔════╝██╔══██╗██║╚══██╔══╝██╔════╝
██║     ██████╔╝█████╗  ██║  ██║██║   ██║   ███████╗
██║     ██╔══██╗██╔══╝  ██║  ██║██║   ██║   ╚════██║
╚██████╗██║  ██║███████╗██████╔╝██║   ██║   ███████║
 ╚═════╝╚═╝  ╚═╝╚══════╝╚═════╝ ╚═╝   ╚═╝   ╚══════╝
████████████████████████████████████████████████████



███╗   ███╗ █████╗ ███████╗███████╗██╗██╗   ██╗███████╗    ████████╗██╗  ██╗ █████╗ ███╗   ██╗██╗  ██╗    ██╗   ██╗ ██████╗ ██╗   ██╗    ████████╗ ██████╗      ██████╗██╗  ██╗██╗     ██████╗██╗  ██╗██╗    
████╗ ████║██╔══██╗██╔════╝██╔════╝██║██║   ██║██╔════╝    ╚══██╔══╝██║  ██║██╔══██╗████╗  ██║██║ ██╔╝    ╚██╗ ██╔╝██╔═══██╗██║   ██║    ╚══██╔══╝██╔═══██╗    ██╔════╝██║  ██║██║    ██╔════╝██║  ██║██║    
██╔████╔██║███████║███████╗███████╗██║██║   ██║█████╗         ██║   ███████║███████║██╔██╗ ██║█████╔╝      ╚████╔╝ ██║   ██║██║   ██║       ██║   ██║   ██║    ██║     ███████║██║    ██║     ███████║██║    
██║╚██╔╝██║██╔══██║╚════██║╚════██║██║╚██╗ ██╔╝██╔══╝         ██║   ██╔══██║██╔══██║██║╚██╗██║██╔═██╗       ╚██╔╝  ██║   ██║██║   ██║       ██║   ██║   ██║    ██║     ██╔══██║██║    ██║     ██╔══██║██║    
██║ ╚═╝ ██║██║  ██║███████║███████║██║ ╚████╔╝ ███████╗       ██║   ██║  ██║██║  ██║██║ ╚████║██║  ██╗       ██║   ╚██████╔╝╚██████╔╝       ██║   ╚██████╔╝    ╚██████╗██║  ██║██║    ╚██████╗██║  ██║██║    
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═══╝  ╚══════╝       ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝       ╚═╝    ╚═════╝  ╚═════╝        ╚═╝    ╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝     ╚═════╝╚═╝  ╚═╝╚═╝    
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████



███████╗ ██████╗ ██████╗     ██╗  ██╗███████╗██╗     ██████╗     ██╗    ██╗██╗████████╗██╗  ██╗     ██████╗ ██╗     ███████╗██████╗     ██████╗ ██╗███████╗██████╗ ██╗      █████╗ ██╗   ██╗
██╔════╝██╔═══██╗██╔══██╗    ██║  ██║██╔════╝██║     ██╔══██╗    ██║    ██║██║╚══██╔══╝██║  ██║    ██╔═══██╗██║     ██╔════╝██╔══██╗    ██╔══██╗██║██╔════╝██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝
█████╗  ██║   ██║██████╔╝    ███████║█████╗  ██║     ██████╔╝    ██║ █╗ ██║██║   ██║   ███████║    ██║   ██║██║     █████╗  ██║  ██║    ██║  ██║██║███████╗██████╔╝██║     ███████║ ╚████╔╝ 
██╔══╝  ██║   ██║██╔══██╗    ██╔══██║██╔══╝  ██║     ██╔═══╝     ██║███╗██║██║   ██║   ██╔══██║    ██║   ██║██║     ██╔══╝  ██║  ██║    ██║  ██║██║╚════██║██╔═══╝ ██║     ██╔══██║  ╚██╔╝  
██║     ╚██████╔╝██║  ██║    ██║  ██║███████╗███████╗██║         ╚███╔███╔╝██║   ██║   ██║  ██║    ╚██████╔╝███████╗███████╗██████╔╝    ██████╔╝██║███████║██║     ███████╗██║  ██║   ██║   
╚═╝      ╚═════╝ ╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝          ╚══╝╚══╝ ╚═╝   ╚═╝   ╚═╝  ╚═╝     ╚═════╝ ╚══════╝╚══════╝╚═════╝     ╚═════╝ ╚═╝╚══════╝╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   
███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████


██████╗  █████╗ ████████╗████████╗███████╗
██╔══██╗██╔══██╗╚══██╔══╝╚══██╔══╝██╔════╝
██████╔╝███████║   ██║      ██║   ███████╗
██╔══██╗██╔══██║   ██║      ██║   ╚════██║
██████╔╝██║  ██║   ██║      ██║   ███████║
╚═════╝ ╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚══════╝
███████████████████████████████████████████




███████╗ █████╗ ██████╗ ██╗     ██╗   ██╗     █████╗  ██████╗ ██████╗███████╗███████╗███████╗    ████████╗███████╗ █████╗ ███╗   ███╗
██╔════╝██╔══██╗██╔══██╗██║     ╚██╗ ██╔╝    ██╔══██╗██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║
█████╗  ███████║██████╔╝██║      ╚████╔╝     ███████║██║     ██║     █████╗  ███████╗███████╗       ██║   █████╗  ███████║██╔████╔██║
██╔══╝  ██╔══██║██╔══██╗██║       ╚██╔╝      ██╔══██║██║     ██║     ██╔══╝  ╚════██║╚════██║       ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║
███████╗██║  ██║██║  ██║███████╗   ██║       ██║  ██║╚██████╗╚██████╗███████╗███████║███████║       ██║   ███████╗██║  ██║██║ ╚═╝ ██║
╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝  ╚═╝ ╚═════╝ ╚═════╝╚══════╝╚══════╝╚══════╝       ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████



 ██████╗██████╗ ███████╗███████╗███████╗███╗   ██╗████████╗███████╗
██╔════╝██╔══██╗██╔════╝██╔════╝██╔════╝████╗  ██║╚══██╔══╝██╔════╝
██║     ██████╔╝█████╗  ███████╗█████╗  ██╔██╗ ██║   ██║   ███████╗
██║     ██╔══██╗██╔══╝  ╚════██║██╔══╝  ██║╚██╗██║   ██║   ╚════██║
╚██████╗██║  ██║███████╗███████║███████╗██║ ╚████║   ██║   ███████║
 ╚═════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝
███████████████████████████████████████████████████████████████████



███████╗███████╗███╗   ██╗    ███████╗ ██████╗ ██████╗ ██╗   ██╗███╗   ███╗
╚══███╔╝██╔════╝████╗  ██║    ██╔════╝██╔═══██╗██╔══██╗██║   ██║████╗ ████║
  ███╔╝ █████╗  ██╔██╗ ██║    █████╗  ██║   ██║██████╔╝██║   ██║██╔████╔██║
 ███╔╝  ██╔══╝  ██║╚██╗██║    ██╔══╝  ██║   ██║██╔══██╗██║   ██║██║╚██╔╝██║
███████╗███████╗██║ ╚████║    ██║     ╚██████╔╝██║  ██║╚██████╔╝██║ ╚═╝ ██║
╚══════╝╚══════╝╚═╝  ╚═══╝    ╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝
███████████████████████████████████████████████████████████████████████████






██╗    ██╗ █████╗ ███╗   ██╗███╗   ██╗ █████╗          ██╗ ██████╗ ██╗███╗   ██╗    ███████╗ █████╗ ██████╗ ██╗     ██╗   ██╗     █████╗  ██████╗ ██████╗███████╗███████╗███████╗    ████████╗███████╗ █████╗ ███╗   ███╗██████╗ 
██║    ██║██╔══██╗████╗  ██║████╗  ██║██╔══██╗         ██║██╔═══██╗██║████╗  ██║    ██╔════╝██╔══██╗██╔══██╗██║     ╚██╗ ██╔╝    ██╔══██╗██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║╚════██╗
██║ █╗ ██║███████║██╔██╗ ██║██╔██╗ ██║███████║         ██║██║   ██║██║██╔██╗ ██║    █████╗  ███████║██████╔╝██║      ╚████╔╝     ███████║██║     ██║     █████╗  ███████╗███████╗       ██║   █████╗  ███████║██╔████╔██║  ▄███╔╝
██║███╗██║██╔══██║██║╚██╗██║██║╚██╗██║██╔══██║    ██   ██║██║   ██║██║██║╚██╗██║    ██╔══╝  ██╔══██║██╔══██╗██║       ╚██╔╝      ██╔══██║██║     ██║     ██╔══╝  ╚════██║╚════██║       ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║  ▀▀══╝ 
╚███╔███╔╝██║  ██║██║ ╚████║██║ ╚████║██║  ██║    ╚█████╔╝╚██████╔╝██║██║ ╚████║    ███████╗██║  ██║██║  ██║███████╗   ██║       ██║  ██║╚██████╗╚██████╗███████╗███████║███████║       ██║   ███████╗██║  ██║██║ ╚═╝ ██║  ██╗   
 ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═══╝╚═╝  ╚═╝     ╚════╝  ╚═════╝ ╚═╝╚═╝  ╚═══╝    ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝  ╚═╝ ╚═════╝ ╚═════╝╚══════╝╚══════╝╚══════╝       ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝   

██████╗  ██████╗ ███╗   ██╗ █████╗ ████████╗███████╗    ████████╗ ██████╗ 
██╔══██╗██╔═══██╗████╗  ██║██╔══██╗╚══██╔══╝██╔════╝    ╚══██╔══╝██╔═══██╗
██║  ██║██║   ██║██╔██╗ ██║███████║   ██║   █████╗         ██║   ██║   ██║
██║  ██║██║   ██║██║╚██╗██║██╔══██║   ██║   ██╔══╝         ██║   ██║   ██║
██████╔╝╚██████╔╝██║ ╚████║██║  ██║   ██║   ███████╗       ██║   ╚██████╔╝
╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝   ╚═╝   ╚══════╝       ╚═╝    ╚═════╝ 

     ██╗ █████╗ ███╗   ███╗███████╗███████╗██████╗ ██╗████████╗██╗  ██╗███████╗██████╗ ███████╗ ██╗ ██████╗  ██╗ ██████╗ ██╗     ██╗██╗   ██╗███████╗    ██████╗ ██████╗    ██╗   ██╗██╗  ██╗   
     ██║██╔══██╗████╗ ████║██╔════╝██╔════╝██╔══██╗██║╚══██╔══╝██║  ██║██╔════╝██╔══██╗██╔════╝███║██╔═████╗███║██╔═══██╗██║     ██║██║   ██║██╔════╝   ██╔════╝██╔═══██╗   ██║   ██║██║ ██╔╝
     ██║███████║██╔████╔██║█████╗  ███████╗██████╔╝██║   ██║   ███████║█████╗  ██████╔╝███████╗╚██║██║██╔██║╚██║██║██╗██║██║     ██║██║   ██║█████╗     ██║     ██║   ██║   ██║   ██║█████╔╝ 
██   ██║██╔══██║██║╚██╔╝██║██╔══╝  ╚════██║██╔═══╝ ██║   ██║   ██╔══██║██╔══╝  ██╔══██╗╚════██║ ██║████╔╝██║ ██║██║██║██║██║     ██║╚██╗ ██╔╝██╔══╝     ██║     ██║   ██║   ██║   ██║██╔═██╗ 
╚█████╔╝██║  ██║██║ ╚═╝ ██║███████╗███████║██║     ██║   ██║   ██║  ██║███████╗██║  ██║███████║ ██║╚██████╔╝ ██║╚█║████╔╝███████╗██║ ╚████╔╝ ███████╗██╗╚██████╗╚██████╔╝██╗╚██████╔╝██║  ██╗
 ╚════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝╚═╝     ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝ ╚═╝ ╚═════╝  ╚═╝ ╚╝╚═══╝ ╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝ ╚═════╝ ╚═╝  ╚═╝     







/*


###################### PLUG AND PLAY INGAME SETTINGS ######################################################

These are our recommended settings for when using on a console with a controller or mouse. If want Plug In and Play!

In-Game Option

Controller Setting
Horizontal Stick Sensitivity
8
Vertical Stick Sensitivity
8
ADS Stick Sensitivity (Low Zoom)
0.9
ADS Stick Sensitivity (High Zoom)
0.9
Aim Response Curve Type
Standard
Target Aim Assist Mode
Standard

#############################################################################################

Mouse Setting      
Horizontal Stick Sensitivity
14 (Insane)
Vertical Stick Sensitivity
14 (Insane)
ADS Stick Sensitivity (Low Zoom)
1
ADS Stick Sensitivity (High Zoom)
1
Aim Response Curve Type
Dynamic
Target Aim Assist Mode
Standard


RECOMMENDED FOV 80-90  


STEP 1 (CONFIGUATION)


*///--BUTTONS ( Customize To Your Layout )
	int INVERTED             =     1; // 2 = inverted
	define FLIPPED           = FALSE; // <--- Make TRUE if you play flipped
	define ADS_BUTTON        = PS4_L2;
	define FIRE_BUTTON       = PS4_R2;
    define TAC_GRENADE       = PS4_L1;
    define LETHAL            = PS4_R1;
    define SPRINT            = PS4_L3;
    define MELEE             = PS4_R3;
	define SWAP              = PS4_TRIANGLE;
    define PRONE             = PS4_CIRCLE;
    define JUMP              = PS4_CROSS;
    define RELOAD            = PS4_SQUARE;
	define AIM_X	         = PS4_RX;
	define AIM_Y	         = PS4_RY;
	define STRAFE 	         = PS4_LX;
	define WALK 	         = PS4_LY;

	//--Quick Toggle Button Combos
	
	//--ADS + BUTTON TO TOGGLE
	define QUICK_TOGGLES	  = 	  FALSE;    
	
	define KILL_SWITCH_BUTTON =    PS4_LEFT;	
	define RAPID_FIRE_BUTTON  =    PS4_RIGHT;	
	define DROP_SHOT_BUTTON   =    PS4_DOWN;	
	define AKIMBO_BUTTON      =    PS4_LEFT;	    
	define JUMP_SHOT_BUTTON   =    PS4_UP;
	define BMLD_BUTTON		  =    PS4_R1;	
	define MENU_OPEN_BUTTON   =    PS4_OPTIONS;	
	
	define Kill_Switch_Toggle =    TRUE;
    int    Hair_Triggers      =    TRUE;
    define Rumble_Block       =    FALSE;

//--Values
	define getupdelay 			 = 	 80;	 
    define Strafe_Wait 		     =	 500;	 
	define Time_Blow 			 =   825;   `
	define Auto_Ping_Press_Value =	 30;   
	define Slide_Cancel_Delay    =   40;
	define THRESHOLD             =   85;
    int Auto_Ping_Mode           =  ADSFIRE;
    int QuickScope_Mode          = AIM_FIRE;
	
  define ON = 1;
define OF = -1;
int Radius;
int PolarRadius = 15;
int PolarAngle = 20;
int RadiusBoost = OF;
int AngleBoost = OF;
int PolarRBoost = 6;
int PolarABoost = 10;
define VERTICAL_SMART_RECOIL2 = 55;
define SMART = 0, STANDARD = 1, TAP = 2, ADSFIRE = 3, AIM_FIRE = 4, DBL_TAP = 5;
int rapid_fire_speed;
int in_game_menu_sens;
int RESOLUTION;
int AIM_ASSIST;
int AIM_SLOPE;
int AR_STRENGTH;
int DropShotSpeed;
int Fire_Rate_Timer;
int QS_Delay;
int FastReloadDelay;
int invert2;
int smartrecoil_base;
int smartrecoil_add, smartrecoil_y;
int smartrecoil_rumble;
int ADS;
int FIRE;
int wait_time_correction;
int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;
int frame;
int update_timer;
int Rx2;
int Ry2;
int Lx2;
int Ly2;
int L_Rx2;
int L_Ry2;
int T_Ry2;
int Inc_Dec_State_1;
int Inc_Dec_State_2;
int Aim_Assit_1;
int Aim_Assit_2;
int angle;
int _ret;
int Tracking_AI;
int min_aim_assit;
int cw_angle;
int inverted;
int rx_drift;
int ry_drift;
int lx_drift;
int ly_drift;
int drift_calib;
int _var;
int ptime;
int trigger_toggle;
int INC = 1, DEC, COLOUR[3];
int color = 1;
int Rumble_Wait_Timer = FALSE;
int rapid_fire_timer;
int Rumble_Timer = 0;
int Cur_Rumble;
int Old_Rumble;
int logVal;
int wtime;
int cooktime;
int slide_enable = FALSE;
int q;
int double__tap[30];
int REFRESH_RATE = TIME_BASE * 50;
define MAX_DRIFT = 10;
define MAGNITUDE = 95;
define TIME_BASE = 50;
define smartgrenade_safedelay = 3200;
define smartgrenade_throwdelay = 2600;
int ANTI_RECOIL;
int Aim_Assist;
int Steady_Aim;
int AimSensCorrections;
int Rapid_Fire_Toggle;
int auto_rf;
int Akimbo_Rapid_Fire;
int Slide_Cancel_Mode;
int JumpShot;
int AutoRun;
int QuickScope;
int Fast_Melee;
int Strafe_Toggle;
int DropShot;
int holdbreath;
int AutoPing;
int Easy_Plate;
int Sticky_Aim;
int B_Hop;
int Smart_Grenade;
int CresentsPangShot;
int toggle_tracking;
int Bigg_Man_Little_Dance;
int Fast_Reload;
int ZS;
int KS;
int c_b;
int sel = 1;
int mod = 2;
int ss = TRUE;
int display = TRUE;
define NumofMods = 24;
int easy_plate define sticky_aim_assist = TRUE;
define _v = 22;
int TRACKER;
int PerfectAccuracy;
define N_DiV = 22;
int Sampling_Done = FALSE;
int spiroide_pulse = 0;
int fine_pulse = 0;
int pang = FALSE;
int release, rnd;
define LED_OFF = -2;
define Light_Blue = 1;
define Light_Red = 2;
define Light_Green = 3;
define Light_Pink = 4;
define Light_SkyBlue = 5;
define Light_Yellow = 6;
define Light_White = 7;
define Blue = 8;
define Red = 9;
define Green = 10;
define Pink = 11;
define SkyBlue = 12;
define Yellow = 13;
define White = 14;
define Dim_Blue = 15;
define Dim_Red = 16;
define Dim_Green = 17;
define Dim_Pink = 18;
define Dim_SkyBlue = 19;
define Dim_Yellow = 20;
define Dim_White = 21;
int Col_ind;
int Angle;
int Speed;
const string OFF = "Choose Type";
const string MWSTANDARD = "MW Multiplayer";
const string MWRUMBLE = "MW Warzone";
const string CWSTANDARD = "CW Multiplayer";
const string CWRUMBLE = "CW Fireteam";
const string RUMBLE = "SEviL RumbleAR";
const string SMARTAR = "SMART AR";
const string t_text[] = {
  "Hold L2 + OPTIONS",
  "AntiRecoil",
  "Aim Assist",
  "Steady Aim",
  "Aim Corrections",
  "Rapid Fire",
  "Auto RapidFire",
  "Akimbo RapidFire",
  "Slide Cancel",
  "Jump Shot",
  "Auto Run",
  "Quick Scope",
  "Turbo Melee",
  "Strafe Aim",
  "Drop Shot",
  "Hold Breath",
  "PingOnFire",
  "Easy Plate",
  "Batts StickyAim",
  "Bunny Hop",
  "Smart Grenade",
  "CresentPangShot",
  "Tracking_AI",
  "Big Man Lil Dance",
  "Fast Reload",
  "OFF",
  "ON",
  "Width",
  "Height",
  "Vertical",
  "Horizontal",
  "RPS",
  "Kill Switch"
};
init {
  Tracking_AI = 50;
  min_aim_assit = AIM_ASSIST / 2;
  Aim_Assit_1 = min_aim_assit;
  Aim_Assit_2 = AIM_ASSIST;
  Inc_Dec_State_1 = TRUE;
  Inc_Dec_State_2 = FALSE;
  update_timer = REFRESH_RATE;
  if (INVERTED == 2) inverted = -1;
  else inverted = 1;
  angle = 90 * inverted;
  cw_angle = 90 * inverted;
  drift_calib = 100;
  if (pv(SPVAR_64, 0, 9999, 0) != 1486) {
    s_pv(SPVAR_64, 1486): reset_script_var();
    save();
  }
  load_pvar();
  COLOUR = 255;
  combo_run(REFRESH_STATE);
  if (rapid_fire_speed > 1) wait_time_correction = -10;
  while (q < 30) {
    double__tap[q] = -1;
    q++;
  }
}
main {
  if (Aim_Assist == TRUE && g(ADS) || g(FIRE)) vm_tctrl(-6);
  else vm_tctrl(-2);
  if (FLIPPED) {
    ADS = PS4_L1;
    FIRE = PS4_R1;
  } else {
    ADS = PS4_L2;
    FIRE = PS4_R2;
  }
  if (get_controller() != PIO_PS4) {
    if (get_console() == PIO_PS4) {
      swap(PS4_SHARE, PS4_TOUCH);
      if (get_val(PS4_R3) && p(PS4_TOUCH)) {
        s(PS4_SHARE, 100);
        s(PS4_TOUCH, 0);
        s(PS4_R3, 0);
      }
    }
  }
  if (Kill_Switch_Toggle) {
    if (g(ADS) && p(KILL_SWITCH_BUTTON)) {
      KS = !KS frame = -1;
      combo_restart(REFRESH_STATE);
      display = TRUE;
    }
  }
  if (!KS) {
    if (ZS == 0) {
      if (QUICK_TOGGLES) {
        if (g(ADS) && p(RAPID_FIRE_BUTTON)) {
          combo_run(vibrate);
          combo_restart(BLINK);
          Rapid_Fire_Toggle = !Rapid_Fire_Toggle;
        }
      }
      if (Rapid_Fire_Toggle) {
        if (g(FIRE)) {
          combo_run(Rapid_Fire);
        }
        if (r(FIRE)) {
          combo_stop(Rapid_Fire);
        }
      }
      if (auto_rf) {
        if (get_val(FIRE)) {
          if (get_rumble(RUMBLE_A) > 0 && !Rumble_Wait_Timer) {
            Rumble_Wait_Timer = TRUE;
          }
          if (Rumble_Wait_Timer) {
            Rumble_Timer += get_rtime();
            if (get_rumble(RUMBLE_A) > 0) Cur_Rumble = get_rumble(RUMBLE_A) * 255 / 100;
            if (Cur_Rumble > Old_Rumble) {
              Old_Rumble = Cur_Rumble;
              Rumble_Timer = 0;
            } else if (Cur_Rumble < Old_Rumble) Old_Rumble = Cur_Rumble;
            if (Rumble_Timer >= Fire_Rate_Timer) rapid_fire_timer = TRUE;
          }
        }
        if (r(FIRE)) {
          rapid_fire_timer = FALSE;
          combo_stop(RAPID_FIRE);
          Rumble_Timer = 0;
          Rumble_Wait_Timer = FALSE;
          Old_Rumble = 0;
        }
        if (rapid_fire_timer) {
          if (g(FIRE)) {
            combo_run(RAPID_FIRE);
            wtime = 25 - g(FIRE);
          }
        }
      }
      if (drift_calib) {
        rx_drift = max(rx_drift, abs(g(AIM_X)) + 2);
        ry_drift = max(ry_drift, abs(g(AIM_Y)) + 2);
        lx_drift = max(lx_drift, abs(g(STRAFE)) + 2);
        ly_drift = max(ly_drift, abs(g(WALK)) + 2);
        rx_drift = min(rx_drift, MAX_DRIFT);
        ry_drift = min(ry_drift, MAX_DRIFT);
        lx_drift = min(lx_drift, MAX_DRIFT);
        ly_drift = min(ly_drift, MAX_DRIFT);
        drift_calib--;
      } else {
        if (Hair_Triggers) {
          if (g(PS4_R2) > 10) s(PS4_R2, 100);
          if (g(PS4_L2) > 10) s(PS4_L2, 100);
        }
        Rx2 = get_val(AIM_X);
        Ry2 = get_val(AIM_Y);
        Lx2 = get_val(STRAFE);
        Ly2 = get_val(WALK);
        if (isqrt(pow(Rx2, 2) + pow(Ry2, 2)) <= rx_drift) {
          Rx2 = 0;
          Ry2 = 0;
        }
        if (isqrt(pow(Lx2, 2) + pow(Ly2, 2)) <= lx_drift) {
          Lx2 = 0;
          Ly2 = 0;
        }
        if (get_val(ADS) > 50 || get_val(FIRE) > 50) {
          if (update_timer >= REFRESH_RATE) {
            block(AIM_X, REFRESH_RATE);
            block(AIM_Y, REFRESH_RATE);
            _ret = get_Tracking_AI(Rx2, L_Rx2);
            if (_ret != 0) Tracking_AI = _ret;
            if (Aim_Assist == TRUE) {
              if (Inc_Dec_State_1 == FALSE) {
                Aim_Assit_1 -= 1;
                if (Aim_Assit_1 < min_aim_assit) Inc_Dec_State_1 = TRUE;
              } else {
                Aim_Assit_1 += 1;
                if (Aim_Assit_1 > AIM_ASSIST) Inc_Dec_State_1 = FALSE;
              }
              if (Inc_Dec_State_2 == FALSE) {
                Aim_Assit_2 -= 1;
                if (Aim_Assit_2 < min_aim_assit) Inc_Dec_State_2 = TRUE;
              } else {
                Aim_Assit_2 += 1;
                if (Aim_Assit_2 > AIM_ASSIST) Inc_Dec_State_2 = FALSE;
              }
            }
            update_timer = 0;
            L_Rx2 = Rx2;
            L_Ry2 = Ry2;
          }
          if ((ANTI_RECOIL) && ((get_val(ADS) > 50) && (get_val(FIRE) > 50)) && check_magnitude(MAGNITUDE, Rx2, L_Rx2, Ry2, L_Ry2)) {
            if (ANTI_RECOIL == 1) {
              T_Ry2 = get_rumble_Anti_Recoil();
            } else {
              T_Ry2 = get_smart_recoil();
            }
            smartrecoil_base = 100;
            invert2 = 1;
            smartrecoil_y = VERTICAL_SMART_RECOIL2 * invert2 * -1;
            smartrecoil_add = AR_STRENGTH - smartrecoil_base;
            if (inverted == -1) {
              Ry2 += inv(T_Ry2);
            } else {
              Ry2 += T_Ry2;
            }
          }
          if (Aim_Assist == TRUE) {
            if (Tracking_AI == 50) {
              Rx2 += (get_polar_coordinate(Aim_Assit_1, sin(angle)) + get_polar_coordinate(Aim_Assit_2 / 2, sin(cw_angle)));
              Ry2 += (get_polar_coordinate(Aim_Assit_2, cos(angle)) + get_polar_coordinate(Aim_Assit_1 / 2, cos(cw_angle)));
            } else {
              Rx2 += (get_polar_coordinate(Aim_Assit_1, cos(angle)) + get_polar_coordinate(Aim_Assit_2 / 2, cos(cw_angle)));
              Ry2 += (get_polar_coordinate(Aim_Assit_2, sin(angle)) + get_polar_coordinate(Aim_Assit_1 / 2, sin(cw_angle)));
            }
            angle += AIM_SLOPE;
            angle = angle % 360;
            cw_angle = (cw_angle + 1) % 360;
          }
          if (RadiusBoost == ON && g(FIRE)) {
            Radius = PolarRadius + PolarRBoost;
          } else {
            Radius = PolarRadius;
          }
          if (AngleBoost == ON && g(FIRE)) {
            Angle = PolarAngle + PolarABoost;
          } else {
            Angle = PolarAngle;
          }
          if (g(ADS) && abs(get_ival(AIM_X)) <= Radius && abs(g(AIM_Y)) <= Radius) {
            set_polar(POLAR_RS, Speed = (Speed + Angle) % 360, (abs(g(POLAR_RX)) + abs(g(POLAR_RY))) / 4 + Radius * 328);
          }
          if (Steady_Aim == TRUE) {
            Rx2 = get_steady_aim(Rx2, RESOLUTION);
            Ry2 = get_steady_aim(Ry2, RESOLUTION);
          }
          s(AIM_X, clamp(Rx2, -100, 100));
          s(AIM_Y, clamp(Ry2, -100, 100));
          update_timer += get_rtime();
        } else {
          update_timer = 0;
          update_timer = REFRESH_RATE;
          angle = 90 * inverted;
          cw_angle = 90 * inverted;
          Aim_Assit_1 = min_aim_assit;
          Aim_Assit_2 = AIM_ASSIST;
        }
      }
      if (Bigg_Man_Little_Dance && g(ADS) && g(BMLD_BUTTON)) {
        s(FIRE, 100);
        combo_run(DANCE);
        block(LETHAL, 32767)
      }
      if (Strafe_Toggle) {
        if (g(FIRE)) combo_run(Strafe);
        else combo_stop(Strafe);
      }
      if (QUICK_TOGGLES) {
        if (g(ADS) && p(DROP_SHOT_BUTTON)) {
          combo_run(vibrate);
          combo_restart(drop);
          DropShot = !DropShot;
        }
      }
      if (DropShot) {
        if (g(FIRE)) combo_run(DroppShott);
      }
      if (Bigg_Man_Little_Dance && g(ADS) && g(LETHAL)) {
        s(FIRE, 100);
        combo_run(DANCE);
        block(LETHAL, 32767)
      }
      if (Smart_Grenade) {
        if (combo_running(Cook_And_Release_Grenade) && (cooktime == smartgrenade_throwdelay) && (main_button_pressed(LETHAL) || double_click(LETHAL))) {
          combo_stop(Cook_And_Release_Grenade);
        }
        if (g(LETHAL) && get_ptime(LETHAL) < 200) {
          cooktime = smartgrenade_throwdelay;
          combo_run(Cook_And_Release_Grenade);
        }
        if (g(LETHAL) && get_ptime(LETHAL) > 200) {
          cooktime = smartgrenade_safedelay;
          combo_run(Cook_And_Release_Grenade);
        }
      }
      if (Fast_Reload && double_click(RELOAD)) {
        combo_run(FastReload);
      }
      if (QUICK_TOGGLES) {
        if (g(ADS) && p(AKIMBO_BUTTON)) {
          combo_run(vibrate);
          combo_restart(FLASH_LIGHT);
          Akimbo_Rapid_Fire = !Akimbo_Rapid_Fire;
        }
      }
      if (Akimbo_Rapid_Fire) {
        if (g(FIRE)) combo_run(AkimboRapid);
      }
      if (Fast_Melee) {
        if (g(MELEE)) combo_run(Turbo_Melee);
      }
      if (QuickScope) {
        if (QuickScope_Mode == AIM_FIRE) {
          if (trigger_toggle == TRUE && g(RELOAD) || trigger_toggle == TRUE && g(LETHAL)) {
            s(RELOAD, 0);
            s(LETHAL, 0);
          } else if (r(RELOAD) || r(LETHAL)) {
            trigger_toggle = FALSE;
          }
          if (p(ADS)) {
            trigger_toggle = TRUE;
          } else if (g(ADS) && get_ptime(ADS) > 140) {
            s(SPRINT, 100);
          } else if (trigger_toggle == TRUE && r(ADS)) {
            combo_run(QuickScopee);
          }
          if (p(SPRINT)) {
            combo_run(Hold_Breath);
          }
        } else if (QuickScope_Mode == DBL_TAP) {
          if (r(ADS) && get_ptime(ADS) <= 250) {
            combo_run(QuickScopee);
          }
        }
      }
      if (AutoRun) {
        if (get_val(PS4_LY) <= -95) {
          set_val(SPRINT, 95);
        }
      }
      if (easy_plate) {
        if (get_val(SWAP) && get_ptime(SWAP) > 350) combo_run(easy_plate);
        if (combo_running(easy_plate) && (get_ival(ADS_BUTTON) > 10 || get_ival(FIRE_BUTTON) > 10 || get_val(RELOAD))) {
          combo_stop(easy_plate);
          set_val(MELEE, 100);
        }
      }
      if (sticky_aim_assist) {
        if (g(FIRE)) combo_run(STICKY_AIM);
      } else combo_stop(STICKY_AIM);
      if (B_Hop) {
        if (g(JUMP) && get_ptime(JUMP) > 200) {
          combo_run(BUNNYHOP);
        } else {
          if (combo_running(BUNNYHOP)) combo_stop(BUNNYHOP);
        }
      }
      if (holdbreath) {
        if (g(ADS)) s(SPRINT, 100);
        if (g(WALK) < -90 && g(ADS) && get_ptime(ADS) > 200) combo_stop(CH);
        if (p(ADS)) combo_run(CH);
        if (g(ADS) && get_lval(SPRINT)) s(SPRINT, 0);
      }
      if (Hair_Triggers) {
        if (g(PS4_R2) > 10) s(PS4_R2, 0x64);
        if (g(PS4_L2) > 10) s(PS4_L2, 0x64);
      }
      if (Slide_Cancel_Mode) {
        if ((g(WALK) < -THRESHOLD) || (g(WALK) > THRESHOLD) || (g(STRAFE) < -THRESHOLD) || (g(STRAFE) > THRESHOLD)) {
          slide_enable = 0;
          if (r(PRONE)) {
            if (Slide_Cancel_Mode == 1) {
              slide_enable = 1;
            } else if (Slide_Cancel_Mode == 2) {
              if (((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))) {
                slide_enable = 1;
              }
            } else if (Slide_Cancel_Mode == 3) {
              slide_enable = 2;
            } else if (Slide_Cancel_Mode == 4) {
              if (((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))) {
                slide_enable = 2;
              }
            }
          }
          if (slide_enable) {
            if (slide_enable == 1) combo_run(CANCEL_SLIDE_MW);
            else if (slide_enable == 2) combo_run(CANCEL_SLIDE_CW);
          }
        }
      }
      if (AutoPing) {
        if (Auto_Ping_Mode == TAP) {
          if (double_click(ADS)) combo_run(AutoPingC);
        } else if (Auto_Ping_Mode == ADSFIRE) {
          if (g(ADS) && p(FIRE)) combo_run(AutoPingC);
        }
      }
      if (AimSensCorrections) {
        ads_grenade_sens = 100 - (in_game_menu_sens);
        ads_fire_sens = 96 - (in_game_menu_sens);
        actual_sens = 100;
        if (!g(ADS) && !g(FIRE) && !g(LETHAL) && !g(TAC_GRENADE)) {
          Sens = actual_sens;
        } else if (g(ADS) && !g(FIRE)) {
          Sens = ads_grenade_sens;
        } else if (!g(ADS) && g(FIRE)) {
          Sens = actual_sens;
        } else if (g(ADS) && g(FIRE)) {
          Sens = ads_fire_sens;
        } else if (g(TAC_GRENADE) || g(LETHAL)) {
          Sens = ads_grenade_sens;
        }
        if (isqrt(abs(g(AIM_X)) * abs(g(AIM_X)) + abs(g(AIM_Y)) * abs(g(AIM_Y))) > 30) {
          if (Sens > 100) Sens = 100;
          sensitivity(AIM_X, NOT_USE, Sens);
          sensitivity(AIM_Y, NOT_USE, Sens);
        }
      }
      if (CresentsPangShot) {
        if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) {
          pang = TRUE;
        }
        if (pang) {
          if (g(LETHAL)) combo_run(BANGER);
          block(LETHAL, release + 50);
        }
        if (pang && r(LETHAL)) {
          pang = FALSE;
        }
      }
      if (TRACKER) {
        if (get_val(PS4_L2)) {
          combo_run(TRACKER);
        }
        if (get_val(PS4_RX) < -38 || get_val(PS4_RX) > 37) {
          combo_stop(TRACKER);
        }
      }
      if (get_val(PS4_L2) && get_val(PS4_R1)) {
        PerfectAccuracy = !PerfectAccuracy;
        combo_run(PerfectionAccuracy);
        set_val(PS4_R1, 0);
      } else {
        combo_stop(PerfectionAccuracy);
      }
      if (QUICK_TOGGLES) {
        if (g(ADS) && p(JUMP_SHOT_BUTTON)) {
          combo_run(vibrate);
          combo_restart(BLINK1);
          JumpShot = !JumpShot;
        }
      }
      if (JumpShot) {
        if (g(FIRE)) combo_run(JS);
      }
      if (Rumble_Block) {
        block_rumble();
      }
      if (get_val(ADS) && p(MENU_OPEN_BUTTON)) {
        ZS = 1;
        combo_stop(RGB);
        display = TRUE;
      }
      combo_run(RGB);
    }
    REFRESH_STATE_check();
    if (ZS == 1) {
      block_all_inputs();
      block_all_outputs();
      if (mod == 1) {
        if (p(PS4_CROSS)) {
          ANTI_RECOIL++;
          if (ANTI_RECOIL > 2) ANTI_RECOIL = 0;
          if (ANTI_RECOIL < 0) ANTI_RECOIL = 2;
          display = TRUE;
        }
      }
      if (mod == 8) {
        if (p(PS4_CROSS)) {
          Slide_Cancel_Mode++;
          if (Slide_Cancel_Mode > 4) Slide_Cancel_Mode = 0;
          if (Slide_Cancel_Mode < 0) Slide_Cancel_Mode = 4;
          display = TRUE;
        }
      }
      if (p(PS4_CROSS) && (mod == 2)) Aim_Assist = !Aim_Assist
      if (p(PS4_CROSS) && (mod == 3)) Steady_Aim = !Steady_Aim
      if (p(PS4_CROSS) && (mod == 4)) AimSensCorrections = !AimSensCorrections
      if (p(PS4_CROSS) && (mod == 5)) Rapid_Fire_Toggle = !Rapid_Fire_Toggle
      if (p(PS4_CROSS) && (mod == 6)) auto_rf = !auto_rf
      if (p(PS4_CROSS) && (mod == 7)) Akimbo_Rapid_Fire = !Akimbo_Rapid_Fire
      if (p(PS4_CROSS) && (mod == 9)) JumpShot = !JumpShot
      if (p(PS4_CROSS) && (mod == 10)) AutoRun = !AutoRun
      if (p(PS4_CROSS) && (mod == 11)) QuickScope = !QuickScope
      if (p(PS4_CROSS) && (mod == 12)) Fast_Melee = !Fast_Melee
      if (p(PS4_CROSS) && (mod == 13)) Strafe_Toggle = !Strafe_Toggle
      if (p(PS4_CROSS) && (mod == 14)) DropShot = !DropShot
      if (p(PS4_CROSS) && (mod == 15)) holdbreath = !holdbreath
      if (p(PS4_CROSS) && (mod == 16)) AutoPing = !AutoPing
      if (p(PS4_CROSS) && (mod == 17)) Easy_Plate = !Easy_Plate
      if (p(PS4_CROSS) && (mod == 18)) Sticky_Aim = !Sticky_Aim
      if (p(PS4_CROSS) && (mod == 19)) B_Hop = !B_Hop
      if (p(PS4_CROSS) && (mod == 20)) Smart_Grenade = !Smart_Grenade
      if (p(PS4_CROSS) && (mod == 21)) CresentsPangShot = !CresentsPangShot
      if (p(PS4_CROSS) && (mod == 22)) toggle_tracking = !toggle_tracking
      if (p(PS4_CROSS) && (mod == 23)) Bigg_Man_Little_Dance = !Bigg_Man_Little_Dance
      if (p(PS4_CROSS) && (mod == 24)) Fast_Reload = !Fast_Reload
      if (p(PS4_SQUARE) && mod == 24) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 14) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 11) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 6) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 5) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 4) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 3) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 2) {
        ZS = 2;
        display = TRUE;
      }
      if (p(PS4_SQUARE) && mod == 1) {
        ZS = 2;
        display = TRUE;
      }
      if (mod == 1) {
        if (ANTI_RECOIL) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 2) {
        if (Aim_Assist) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 3) {
        if (Steady_Aim) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 4) {
        if (AimSensCorrections) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 5) {
        if (Rapid_Fire_Toggle) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 6) {
        if (Akimbo_Rapid_Fire) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 7) {
        if (Akimbo_Rapid_Fire) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 8) {
        if (Slide_Cancel_Mode) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 9) {
        if (JumpShot) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 10) {
        if (AutoRun) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 11) {
        if (QuickScope) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 12) {
        if (Fast_Melee) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 13) {
        if (Strafe_Toggle) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 14) {
        if (DropShot) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 15) {
        if (holdbreath) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 16) {
        if (AutoPing) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 17) {
        if (Easy_Plate) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 18) {
        if (Sticky_Aim) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 19) {
        if (B_Hop) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 20) {
        if (Smart_Grenade) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 21) {
        if (CresentsPangShot) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 22) {
        if (toggle_tracking) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 23) {
        if (Bigg_Man_Little_Dance) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (mod == 24) {
        if (Fast_Reload) {
          set_rgb(0, 255, 0)
        } else {
          set_rgb(255, 0, 0)
        }
      }
      if (p(PS4_LEFT)) {
        mod--;
        display = TRUE;
      }
      if (p(PS4_RIGHT)) {
        mod++;
        display = TRUE;
      }
      if (mod > NumofMods) mod = 1
      if (mod < 1) mod = NumofMods
      if (p(PS4_CIRCLE)) {
        ZS = 0;
        save();
        frame = -1;
        combo_restart(REFRESH_STATE);
        display = TRUE;
      }
    }
    if (ZS == 2) {
      block_all_inputs();
      block_all_outputs();
      if (ptime != 100) ptime += get_rtime();
      if (p(PS4_CIRCLE) && (mod == 24 || 14 || 11 || 6 || 5 || 4 || 3 || 2 || 1)) {
        ZS = 1;
        display = TRUE;
      }
      if (p(PS4_UP)) {
        sel++;
        display = TRUE;
      }
      if (p(PS4_DOWN)) {
        sel--;
        display = TRUE;
      }
      if (sel < 0) sel = 0
      if (sel > 2) sel = 2
      if (AIM_ASSIST < 0) AIM_ASSIST = 0;
      if (AIM_ASSIST > 50) AIM_ASSIST = 50;
      if (AIM_SLOPE < 0) AIM_SLOPE = 0;
      if (AIM_SLOPE > 50) AIM_SLOPE = 50;
      if (RESOLUTION < 0) RESOLUTION = 0;
      if (RESOLUTION > 22) RESOLUTION = 22;
      if (AR_STRENGTH < -50) AR_STRENGTH = -50;
      if (AR_STRENGTH > 180) AR_STRENGTH = 180;
      if (DropShotSpeed < 1) DropShotSpeed = 1;
      if (DropShotSpeed > 100) DropShotSpeed = 100;
      if (in_game_menu_sens < 1) in_game_menu_sens = 1;
      if (in_game_menu_sens > 20) in_game_menu_sens = 20;
      if (rapid_fire_speed < 1) rapid_fire_speed = 1;
      if (rapid_fire_speed > 15) rapid_fire_speed = 15;
      if (QS_Delay < 1) QS_Delay = 1;
      if (QS_Delay > 1000) QS_Delay = 1000;
      if (Fire_Rate_Timer < 1) Fire_Rate_Timer = 1;
      if (Fire_Rate_Timer > 1000) Fire_Rate_Timer = 1000;
      if (FastReloadDelay < 1) FastReloadDelay = 1;
      if (FastReloadDelay > 9999) FastReloadDelay = 9999;
      if (mod == 1) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          AR_STRENGTH = AR_STRENGTH + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          AR_STRENGTH = AR_STRENGTH - 0x01;
          display = TRUE;
        }
      }
      if (mod == 2) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          AIM_ASSIST = AIM_ASSIST + 2;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          AIM_ASSIST = AIM_ASSIST - 2;
          display = TRUE;
        }
        if (sel == 0 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          AIM_SLOPE = AIM_SLOPE + 2;
          display = TRUE;
        }
        if (sel == 0 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          AIM_SLOPE = AIM_SLOPE - 2;
          display = TRUE;
        }
      }
      if (mod == 3) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          RESOLUTION = RESOLUTION + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          RESOLUTION = RESOLUTION - 0x01;
          display = TRUE;
        }
      }
      if (mod == 4) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          in_game_menu_sens = in_game_menu_sens + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          in_game_menu_sens = in_game_menu_sens - 0x01;
          display = TRUE;
        }
      }
      if (mod == 5) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          rapid_fire_speed = rapid_fire_speed + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          rapid_fire_speed = rapid_fire_speed - 0x01;
          display = TRUE;
        }
      }
      if (mod == 6) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          Fire_Rate_Timer = Fire_Rate_Timer + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          Fire_Rate_Timer = Fire_Rate_Timer - 0x01;
          display = TRUE;
        }
      }
      if (mod == 11) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          QS_Delay = QS_Delay + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          QS_Delay = QS_Delay - 0x01;
          display = TRUE;
        }
      }
      if (mod == 14) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          DropShotSpeed = DropShotSpeed + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          DropShotSpeed = DropShotSpeed - 0x01;
          display = TRUE;
        }
      }
      if (mod == 24) {
        if (sel == 1 && (p(PS4_RIGHT) || (g(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
          FastReloadDelay = FastReloadDelay + 0x01;
          display = TRUE;
        }
        if (sel == 1 && (p(PS4_LEFT) || (g(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
          FastReloadDelay = FastReloadDelay - 0x01;
          display = TRUE;
        }
      }
    }
  }
  if (ss) {
    if (!KS) {
      if (ZS == 0) text1() if (ZS == 1) text2() rect_oled(0, 0, 128, 64, 0, 1);
      c_b += get_rtime();
      ssaver() if (c_b >= 9000) {
        cls_oled(0);
        c_b = 0;
        ss = FALSE;
      }
    }
  }
  if (display) {
    cls_oled(0);
    c_b = 0;
    if (!KS) {
      if (ZS == 0) {
        printf(CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 18, 0, 1, t_text[0]);
      }
      if (ZS == 1) {
        printf(CenterX(GetChars(mod), OLED_FONT_SMALL_WIDTH), CenterY(OLED_FONT_SMALL_HEIGHT), 0, 1, t_text[mod]);
        if (mod == 1) {
          if (ANTI_RECOIL == 0) printf(CenterX(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
          else if (ANTI_RECOIL == 1) printf(CenterX(sizeof(RUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, RUMBLE[0]);
          else if (ANTI_RECOIL == 2) printf(CenterX(sizeof(SMARTAR) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, SMARTAR[0]);
        }
        if (mod == 8) {
          if (Slide_Cancel_Mode == 0) printf(CenterX(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
          else if (Slide_Cancel_Mode == 1) printf(CenterX(sizeof(MWSTANDARD) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWSTANDARD[0]);
          else if (Slide_Cancel_Mode == 2) printf(CenterX(sizeof(MWRUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWRUMBLE[0]);
          else if (Slide_Cancel_Mode == 3) printf(CenterX(sizeof(CWSTANDARD) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWSTANDARD[0]);
          else if (Slide_Cancel_Mode == 4) printf(CenterX(sizeof(CWRUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWRUMBLE[0]);
        }
      }
      if (ZS == 2) {
        printf(CenterX(GetChars(mod), OLED_FONT_SMALL_WIDTH), 3, 0, 1, t_text[mod]);
        if (mod == 24) {
          number_to_string2(FastReloadDelay, FindDigits(FastReloadDelay), 29);
        }
        if (mod == 14) {
          number_to_string(DropShotSpeed, FindDigits(DropShotSpeed), 25);
        }
        if (mod == 11) {
          number_to_string2(QS_Delay, FindDigits(QS_Delay), 29);
        }
        if (mod == 6) {
          number_to_string2(Fire_Rate_Timer, FindDigits(Fire_Rate_Timer), 29);
        }
        if (mod == 5) {
          number_to_string(rapid_fire_speed, FindDigits(rapid_fire_speed), 25);
        }
        if (mod == 4) {
          number_to_string(in_game_menu_sens, FindDigits(in_game_menu_sens), 25);
        }
        if (mod == 3) {
          number_to_string(RESOLUTION, FindDigits(RESOLUTION), 25);
        }
        if (mod == 2) {
          number_to_string(AIM_ASSIST, FindDigits(AIM_ASSIST), 23);
          number_to_string(AIM_SLOPE, FindDigits(AIM_SLOPE), 41);
        }
        if (mod == 1) {
          number_to_string(AR_STRENGTH, FindDigits(AR_STRENGTH), 25);
        }
        if (sel == 2) line_oled(30, 20, 40, 20, 3, 1) if (sel == 1) line_oled(30, 33, 40, 33, 3, 1) if (sel == 0) line_oled(30, 46, 40, 46, 3, 1)
      }
    } else {
      rect_oled(0, 0, 128, 64, 0, 1);
      printf(CenterX(GetChars(11), OLED_FONT_SMALL_WIDTH), 34, 0, 1, t_text[32]);
    }
    rect_oled(0, 0, 128, 64, 0, 1);
    ss = TRUE;
    display = FALSE;
  }
}
combo PerfectionAccuracy {
  set_val(PS4_R2, 100);
  wait(100);
  wait(250);
  set_val(PS4_R2, 100);
}
combo STICKY_AIM {
  set_val(PS4_RY, xy_val(PS4_RY, _v));
  wait(20);
  set_val(PS4_RX, xy_val(PS4_RX, _v));
  set_val(PS4_LX, xy_val(PS4_LX, _v));
  wait(20);
  set_val(PS4_RY, xy_val(PS4_RY, _v * -1));
  wait(20);
  set_val(PS4_RX, xy_val(PS4_RX, _v * -1));
  set_val(PS4_LX, xy_val(PS4_LX, _v * -1));
  wait(20);
}
combo RGB {
  wait(10);
  set_rgb(COLOUR, COLOUR[1], COLOUR[2]);
  COLOUR[DEC] -= 1;
  COLOUR[INC] += 1;
  if (!COLOUR[DEC]) {
    INC = (INC + 1) % 3;
    DEC = (DEC + 1) % 3;
  }
}
combo BUNNYHOP {
  s(JUMP, 100);
  wait(30);
  s(JUMP, 0);
  wait(30);
  s(JUMP, 100);
  wait(30);
  s(JUMP, 0);
  wait(30);
}
combo QuickScopee {
  s(FIRE, 0);
  s(SPRINT, 100);
  s(ADS, 100);
  wait(QS_Delay);
  s(SPRINT, 100);
  s(ADS, 100);
  s(FIRE, 100);
  wait(50);
}
combo Hold_Breath {
  s(SPRINT, 0);
  wait(80);
  s(SPRINT, 100);
  wait(100);
  s(SPRINT, 0);
  wait(80);
}
combo Cook_And_Release_Grenade() {
  if (cooktime == smartgrenade_throwdelay) s(LETHAL, 100);
  wait(cooktime);
  s(LETHAL, 0);
  wait(100);
}
combo AutoPingC {
  s(PS4_UP, 100);
  wait(Auto_Ping_Press_Value);
  s(PS4_UP, 0);
  wait(Auto_Ping_Press_Value);
  s(PS4_UP, 100);
  wait(Auto_Ping_Press_Value);
  s(PS4_UP, 0);
  wait(Auto_Ping_Press_Value);
}
combo Rapid_Fire {
  s(FIRE, 100);
  wait(20 * rapid_fire_speed);
  s(FIRE, 0);
  wait(10 * rapid_fire_speed - wait_time_correction);
  s(FIRE, 0);
}
combo RAPID_FIRE {
  s(FIRE, 100);
  wait(wtime);
  s(FIRE, 0);
  wait(wtime);
}
combo FastReload {
  wait(FastReloadDelay);
  s(SWAP, 100);
  wait(50);
  s(SWAP, 0);
  wait(40);
  s(SWAP, 100);
  wait(40);
  s(SWAP, 0);
}
combo DANCE {
  s(PRONE, 100);
  wait(30);
  wait(60);
  s(PRONE, 100);
  wait(30);
  wait(60);
}
combo BOOM {
  wait(Time_Blow);
  s(RELOAD, 100);
  wait(60);
  s(RELOAD, 0);
  wait(60);
  s(RELOAD, 100);
  wait(60);
  s(RELOAD, 0)
}
combo AkimboRapid {
  s(FIRE, 100);
  s(ADS, 100);
  wait(40);
  s(FIRE, 0);
  s(ADS, 0);
  wait(40);
}
combo vibrate {
  set_rumble(RUMBLE_A, 85);
  wait(225);
  reset_rumble();
}
combo BLINK1 {
  if (Easy_Plate) set_rgb(0, 255, 0);
  else set_rgb(255, 0, 0);
  wait(2000);
  set_rgb(0, 0, 0);
}
combo ProneRise {
  s(PRONE, 100);
  wait(560);
  s(PRONE, 0);
  wait(150);
  s(JUMP, 100);
  wait(560);
  s(JUMP, 0);
  wait(150);
}
combo BLINK {
  if (Rapid_Fire_Toggle) set_rgb(0, 255, 0);
  else set_rgb(255, 0, 0);
  wait(2000);
  set_rgb(0, 0, 0);
}
combo Strafe {
  s(STRAFE, XY_Val(STRAFE, 100));
  wait(Strafe_Wait);
  wait(50);
  s(STRAFE, XY_Val(STRAFE, 100 * -1));
  wait(Strafe_Wait);
  wait(50);
}
combo drop {
  if (DropShot) set_rgb(0, 255, 0);
  else set_rgb(255, 0, 0);
  wait(2000);
  set_rgb(0, 0, 0);
}
combo Strafe_Shot {
  s(STRAFE, 100);
  wait(300);
  wait(10);
  s(STRAFE, -100);
  wait(300);
  wait(10);
}
combo Dropping_Shot {
  s(PRONE, 100);
  wait(random(30, 100));
  wait(random(60, 250));
  s(PRONE, 100);
}
combo Turbo_Melee {
  s(MELEE, 100);
  wait(40);
  s(MELEE, 0);
  wait(30);
}
combo FLASH_LIGHT {
  if (Akimbo_Rapid_Fire) set_rgb(0, 255, 0);
  else set_rgb(255, 0, 0);
  wait(2000);
  set_rgb(0, 0, 0);
}
combo CH {
  s(SPRINT, 0);
  wait(60);
  s(SPRINT, 100);
  wait(110);
  s(SPRINT, 0);
  wait(110);
}
combo DroppShott {
  s(PRONE, 100);
  wait(110);
  wait(DropShotSpeed);
  s(PRONE, 100);
}
combo CANCEL_SLIDE_CW {
  s(PRONE, 100);
  wait(Slide_Cancel_Delay);
  s(PRONE, 0);
  wait(20);
  s(SPRINT, 0);
  s(ADS, 100);
  wait(10);
  s(ADS, 0);
  s(PRONE, 100);
  s(SPRINT, 100);
  wait(20);
  s(PRONE, 0);
  s(SPRINT, 0);
  wait(20);
}
combo CANCEL_SLIDE_MW {
  s(PRONE, 100);
  wait(Slide_Cancel_Delay);
  s(PRONE, 0);
  wait(60);
  s(PRONE, 100);
  wait(50);
  s(PRONE, 100);
  s(JUMP, 100);
  wait(60);
  s(PRONE, 0);
  s(JUMP, 100);
  wait(10);
  s(JUMP, 0);
}
combo easy_prone {
  s(PRONE, 100);
  wait(350);
}
combo get_up {
  s(JUMP, 100);
  wait(getupdelay)
}
combo JS {
  s(JUMP, 100);
  wait(100);
  s(JUMP, 0);
  wait(100);
}
combo REFRESH_STATE {
  wait(20);
  image_oled(0, 10, color, FALSE, frames[frame]);
  frame++;
}
combo easy_plate {
  set_val(SWAP, 100);
  wait(6000);
}
combo TRACKER {
  set_val(PS4_RY, N_DiV);
  wait(10);
  set_val(PS4_RY, -18);
  wait(10);
  set_val(PS4_RX, 18);
  wait(10);
  set_val(PS4_RX, -18);
  wait(10);
  set_val(PS4_RY, 18);
  wait(10);
  set_val(PS4_RY, -18);
  wait(10);
  set_val(PS4_RX, 18);
  wait(10);
  set_val(PS4_RX, -18);
  wait(10);
}
combo Fine_Tune_Aim {
  set_val(PS4_RX, (15 - fine_pulse));
  set_val(PS4_LX, (-15 + fine_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RX, (15 - fine_pulse));
  set_val(PS4_RY, (10 - fine_pulse));
  set_val(PS4_LX, (-5 + fine_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RY, (10 - fine_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RX, (-15 + fine_pulse));
  set_val(PS4_RY, (10 - fine_pulse));
  set_val(PS4_LX, (5 - fine_pulse)) wait(Sampling_Time);
  wait(Sampling_Time) wait(Sampling_Time) set_val(PS4_RX, (-15 + fine_pulse));
  set_val(PS4_LX, (15 - fine_pulse)) wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RX, (-15 + fine_pulse));
  set_val(PS4_RY, (-10 + fine_pulse));
  set_val(PS4_LX, (5 - fine_pulse)) wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RY, (-10 + fine_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RX, (15 - fine_pulse));
  set_val(PS4_RY, (-10 + fine_pulse));
  set_val(PS4_LX, (-5 + fine_pulse)) wait(Sampling_Time);
  wait(Sampling_Time);
  fine_pulse = fine_pulse + 2;
  if (fine_pulse > 10) {
    fine_pulse = 0;
  }
}
combo spiroide_Aim_Assit {
  set_val(PS4_RX, (4 + spiroide_pulse));
  set_val(PS4_LX, (-15 + spiroide_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RY, (5 + spiroide_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  set_val(PS4_RX, (-4 - spiroide_pulse));
  set_val(PS4_LX, 15 - spiroide_pulse);
  wait(Sampling_Time);
  wait(Sampling_Time) set_val(PS4_RY, (5 + spiroide_pulse));
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  wait(Sampling_Time);
  spiroide_pulse = spiroide_pulse + 2;
  if (spiroide_pulse > 10) {
    spiroide_pulse = 0;
  }
}
combo Aim_Assist_Perfection {
  X_Last_Value = X_Current_Value Y_Last_Value = Y_Current_Value wait(Sampling_Time);
  X_Current_Value = get_lval(PS4_RX) - RX_Axis_Joystick_calibrate;
  Y_Current_Value = get_lval(PS4_RY) - RY_Axis_Joystick_calibrate;
  if (Sampling_Done == TRUE) {
    Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0);
    Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1);
  }
  X_Last_Value = X_Current_Value;
  Y_Last_Value = Y_Current_Value;
  wait(Sampling_Time);
  X_Current_Value = get_lval(PS4_RX) - RX_Axis_Joystick_calibrate;
  Y_Current_Value = get_lval(PS4_RY) - RX_Axis_Joystick_calibrate;
  if (Sampling_Done == TRUE) {
    Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0);
    Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1);
  }
  Sampling_Done = TRUE;
  wait(Sampling_Time);
}
combo BANGER {
  s(FIRE, 100);
  wait(40);
  s(FIRE, 0);
  wait(150);
}
combo start {
  colourled(Blue);
  wait(175);
  colourled(Green);
  wait(175);
  colourled(Red);
  wait(175);
  colourled(Yellow);
  wait(175);
  colourled(White);
  wait(175);
  colourled(Pink);
  wait(175);
  colourled(Red);
  wait(175);
  colourled(Green);
  wait(175);
  colourled(SkyBlue);
  wait(175);
  colourled(Blue);
  wait(175);
  colourled(SkyBlue);
  wait(175);
  colourled(Red);
  wait(175);
  colourled(Pink);
  wait(175);
  colourled(Yellow);
  wait(175);
  colourled(White);
  wait(175);
  colourled(Pink);
  wait(175);
  colourled(Red);
  wait(175);
  colourled(Green);
  wait(175);
  colourled(Blue);
}

function xy_val(f_axis, f_val) {
  if (abs(get_val(f_axis)) < (_v + 1)) return f_val;
  return get_val(f_axis);
}

function save() {
  s_pv(SPVAR_1, ANTI_RECOIL);
  s_pv(SPVAR_2, Aim_Assist);
  s_pv(SPVAR_3, Steady_Aim);
  s_pv(SPVAR_4, AimSensCorrections);
  s_pv(SPVAR_5, Rapid_Fire_Toggle);
  s_pv(SPVAR_6, auto_rf);
  s_pv(SPVAR_7, Akimbo_Rapid_Fire);
  s_pv(SPVAR_8, Slide_Cancel_Mode);
  s_pv(SPVAR_9, JumpShot);
  s_pv(SPVAR_10, AutoRun);
  s_pv(SPVAR_11, QuickScope);
  s_pv(SPVAR_12, Fast_Melee);
  s_pv(SPVAR_13, Strafe_Toggle);
  s_pv(SPVAR_14, DropShot);
  s_pv(SPVAR_15, holdbreath);
  s_pv(SPVAR_16, AutoPing);
  s_pv(SPVAR_17, Easy_Plate);
  s_pv(SPVAR_18, Sticky_Aim);
  s_pv(SPVAR_19, B_Hop);
  s_pv(SPVAR_20, Smart_Grenade);
  s_pv(SPVAR_21, CresentsPangShot);
  s_pv(SPVAR_22, toggle_tracking);
  s_pv(SPVAR_23, Bigg_Man_Little_Dance);
  s_pv(SPVAR_24, Fast_Reload);
  s_pv(SPVAR_25, AIM_ASSIST);
  s_pv(SPVAR_26, AIM_SLOPE);
  s_pv(SPVAR_27, RESOLUTION);
  s_pv(SPVAR_28, AR_STRENGTH);
  s_pv(SPVAR_29, DropShotSpeed);
  s_pv(SPVAR_30, in_game_menu_sens);
  s_pv(SPVAR_31, rapid_fire_speed);
  s_pv(SPVAR_32, QS_Delay);
  s_pv(SPVAR_33, Fire_Rate_Timer);
  s_pv(SPVAR_34, FastReloadDelay);
}

function load_pvar() {
  ANTI_RECOIL = pv(SPVAR_1, 0, 2, 0);
  Aim_Assist = pv(SPVAR_2, 0, 1, 0);
  Steady_Aim = pv(SPVAR_3, 0, 1, 0);
  AimSensCorrections = pv(SPVAR_4, 0, 1, 0);
  Rapid_Fire_Toggle = pv(SPVAR_5, 0, 1, 0);
  auto_rf = pv(SPVAR_6, 0, 1, 0);
  Akimbo_Rapid_Fire = pv(SPVAR_7, 0, 1, 0);
  Slide_Cancel_Mode = pv(SPVAR_8, 0, 4, 0);
  JumpShot = pv(SPVAR_9, 0, 1, 0);
  AutoRun = pv(SPVAR_10, 0, 1, 0);
  QuickScope = pv(SPVAR_11, 0, 1, 0);
  Fast_Melee = pv(SPVAR_12, 0, 1, 0);
  Strafe_Toggle = pv(SPVAR_13, 0, 1, 0);
  DropShot = pv(SPVAR_14, 0, 1, 0);
  holdbreath = pv(SPVAR_15, 0, 1, 0);
  AutoPing = pv(SPVAR_16, 0, 1, 0);
  Easy_Plate = pv(SPVAR_17, 0, 1, 0);
  Sticky_Aim = pv(SPVAR_18, 0, 1, 0);
  B_Hop = pv(SPVAR_19, 0, 1, 0);
  Smart_Grenade = pv(SPVAR_20, 0, 1, 0);
  CresentsPangShot = pv(SPVAR_21, 0, 1, 0);
  toggle_tracking = pv(SPVAR_22, 0, 1, 0);
  Bigg_Man_Little_Dance = pv(SPVAR_23, 0, 1, 0);
  Fast_Reload = pv(SPVAR_24, 0, 1, 0);
  AIM_ASSIST = pv(SPVAR_25, 0, 1, 10);
  AIM_SLOPE = pv(SPVAR_26, 0, 1, 38);
  RESOLUTION = pv(SPVAR_27, 0, 22, 10);
  AR_STRENGTH = pv(SPVAR_28, -50, 180, 130);
  DropShotSpeed = pv(SPVAR_29, 0, 100, 40);
  in_game_menu_sens = pv(SPVAR_30, 0, 20, 10);
  rapid_fire_speed = pv(SPVAR_31, 0, 15, 30);
  QS_Delay = pv(SPVAR_32, 0, 1000, 285);
  Fire_Rate_Timer = pv(SPVAR_33, 0, 1000, 111);
  FastReloadDelay = pv(SPVAR_34, 0, 9999, 1860);
}

function reset_script_var() {
  ANTI_RECOIL = 0;
  Aim_Assist = 0;
  Steady_Aim = 0;
  AimSensCorrections = 0;
  Rapid_Fire_Toggle = 0;
  auto_rf = 0;
  Akimbo_Rapid_Fire = 0;
  Slide_Cancel_Mode = 0;
  JumpShot = 0;
  AutoRun = 0;
  QuickScope = 0;
  Fast_Melee = 0;
  Strafe_Toggle = 0;
  DropShot = 0;
  holdbreath = 0;
  AutoPing = 0;
  Easy_Plate = 0;
  Sticky_Aim = 0;
  B_Hop = 0;
  Smart_Grenade = 0;
  CresentsPangShot = 0;
  toggle_tracking = 0;
  Bigg_Man_Little_Dance = 0;
  Fast_Reload = 0;
  AIM_ASSIST = 38;
  AIM_SLOPE = 14;
  RESOLUTION = 8;
  AR_STRENGTH = 130;
  DropShotSpeed = 40;
  in_game_menu_sens = 10;
  rapid_fire_speed = 30;
  Fire_Rate_Timer = 111;
  QS_Delay = 285;
  FastReloadDelay = 1860;
}

function block_all_outputs() {
  s(PS4_UP, 0);
  s(PS4_DOWN, 0);
  s(PS4_LEFT, 0);
  s(PS4_RIGHT, 0);
  s(PS4_CROSS, 0);
  s(PS4_CIRCLE, 0);
  s(PS4_SQUARE, 0);
}

function main_button_pressed(except) {
  if (except != -1 && p(except)) return FALSE;
  if (p(LETHAL)) return TRUE;
  return FALSE;
}

function REFRESH_STATE_check() {
  if (!combo_running(REFRESH_STATE) && frame <= 15) combo_restart(REFRESH_STATE);
}

function double_click(button) {
  if (double__tap[button] >= 0) {
    double__tap[button] += get_rtime();
    if (double__tap[button] > 450) double__tap[button] = -1;
  }
  if (r(button) && get_ptime(button) <= 200) {
    if (double__tap[button] < 0) {
      double__tap[button] = 0;
    } else {
      double__tap[button] = -1;
      return 1;
    }
  }
  return 0;
}

function XY_Val(f_axis, f_val) {
  if (abs(get_val(f_axis)) < 25) return f_val;
  return get_val(f_axis);
}
int i;
int c, c_val;
const uint8 ASCII_NUM[] = {
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57
};

function get_rumble_ANTI_RECOIL() {
  _ret = max(get_rumble(RUMBLE_A), get_rumble(RUMBLE_B));
  if (_ret > 10 && _ret < 90) {
    return (_ret - AR_STRENGTH);
  }
  return 0;
}

function get_smart_recoil() {
  if (get_rumble(RumbleVALToUse())) {
    smartrecoil_rumble = get_rumble(RumbleVALToUse());
    if (smartrecoil_rumble > 10 && smartrecoil_rumble < 90) {
      if (abs(get_val(PS4_RY)) < (smartrecoil_rumble + smartrecoil_add + smartrecoil_y) && abs(get_val(PS4_RX)) < (smartrecoil_rumble + smartrecoil_add)) {
        return (smartrecoil_rumble + smartrecoil_add + smartrecoil_y);
      }
    }
  }
  return 0;
}

function RumbleVALToUse() {
  if (get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) {
    return RUMBLE_A;
  }
  if (get_rumble(RUMBLE_A) == 100) {
    return RUMBLE_B;
  }
  if (get_rumble(RUMBLE_B) == 100) {
    return RUMBLE_A;
  }
  if (get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) {
    return RUMBLE_A;
  }
  if (get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) {
    return RUMBLE_B;
  }
  return 0;
}

function get_steady_aim(_axis, _resolution) {
  if (_axis >= 0) {
    _ret = (_axis % _resolution);
    if (_ret >= (_resolution / 2)) {
      _axis = _axis + (_resolution - _ret);
    } else {
      _axis -= _ret;
    }
  } else {
    _ret = (_axis % _resolution);
    if (abs(_ret) >= (_resolution / 2)) {
      _axis = _axis - (_resolution + _ret);
    } else {
      _axis += abs(_ret);
    }
  }
  return _axis;
}

function check_magnitude(_mag, _x_val, _x_lval, _y_val, _y_lval) {
  if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag) {
    return TRUE;
  }
  return FALSE;
}

function get_Tracking_AI(_val, _lval) {
  if (abs(_val - _lval) <= 2) return 0;
  if (_val < _lval) return -1;
  if (_val > _lval) return 1;
  return 0;
}

function sin(angle) {
  if (angle <= 90) {
    _ret = (Lookup_Table[angle]);
  } else if (angle <= 180) {
    _ret = (Lookup_Table[180 - angle]);
  } else if (angle <= 270) {
    _ret = inv(Lookup_Table[angle - 180]);
  } else {
    _ret = inv(Lookup_Table[360 - angle]);
  }
  return _ret;
}

function cos(angle) {
  if (angle <= 90) {
    _ret = (Lookup_Table[90 - angle]);
  } else if (angle <= 180) {
    _ret = inv(Lookup_Table[angle - 90]);
  } else if (angle <= 270) {
    _ret = inv(Lookup_Table[270 - angle]);
  } else {
    _ret = (Lookup_Table[angle - 270]);
  }
  return _ret;
}

function get_polar_coordinate(radius, coef) {
  if (radius > 32) {
    radius = 32;
  }
  return ((radius * coef) / 1000);
}

function s(id, fval) {
  set_val(id, fval);
}

function r(id) {
  return event_release(id);
}

function g(id) {
  return get_ival(id);
}

function pv(id, min, max, fval) {
  return get_pvar(id, min, max, fval);
}

function s_pv(id, fval) {
  set_pvar(id, fval);
}

function p(id) {
  return event_press(id);
}

function number_to_string(f_val, f_digits, f_pos) {
  i = 1;
  c_val = 10000;
  if (f_val < 0) {
    putc_oled(i, 45);
    i += 1;
    f_val = abs(f_val);
  }
  for (c = 5; c >= 1; c--) {
    if (f_digits >= c) {
      putc_oled(i, ASCII_NUM[f_val / c_val]);
      f_val = f_val % c_val;
      i += 1;
      if (c == 4) {
        putc_oled(i, 44);
        i += 1;
      }
    }
    c_val /= 10;
  }
  puts_oled(CenterX(i - 1, OLED_FONT_MEDIUM_WIDTH), f_pos, OLED_FONT_MEDIUM, i - 1, OLED_WHITE);
}

function number_to_string2(f_val, f_digits, f_pos) {
  i = 1;
  c_val = 10000;
  if (f_val < 0) {
    putc_oled(i, 45);
    i += 1;
    f_val = abs(f_val);
  }
  for (c = 5; c >= 1; c--) {
    if (f_digits >= c) {
      putc_oled(i, ASCII_NUM[f_val / c_val]);
      f_val = f_val % c_val;
      i += 1;
      if (c == 4) {
        putc_oled(i, 44);
        i += 1;
      }
    }
    c_val /= 10;
  }
  puts_oled(CenterX(i - 1, OLED_FONT_SMALL_WIDTH), f_pos, OLED_FONT_SMALL, i - 1, OLED_WHITE);
}

function FindDigits(num) {
  logVal = 0;
  num = abs(num);
  while (num > 0) {
    num /= 10;
    logVal++;
  }
  return logVal;
}
const int16 Lookup_Table[] = {
  0,
  17,
  34,
  52,
  69,
  87,
  104,
  121,
  139,
  156,
  173,
  190,
  207,
  224,
  241,
  258,
  275,
  292,
  309,
  325,
  342,
  358,
  374,
  390,
  406,
  422,
  438,
  453,
  469,
  484,
  500,
  515,
  529,
  544,
  559,
  573,
  587,
  601,
  615,
  629,
  642,
  656,
  669,
  682,
  694,
  707,
  719,
  731,
  743,
  754,
  766,
  777,
  788,
  798,
  809,
  819,
  829,
  838,
  848,
  857,
  866,
  874,
  882,
  891,
  898,
  906,
  913,
  920,
  927,
  933,
  939,
  945,
  951,
  956,
  961,
  965,
  970,
  974,
  978,
  981,
  984,
  987,
  990,
  992,
  994,
  996,
  997,
  998,
  999,
  999,
  1000
};
const image frames[] = {
  {
    122,
    36,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x03,
    0xFD,
    0xFE,
    0x7F,
    0xC3,
    0xC3,
    0x07,
    0xFF,
    0xFE,
    0x03,
    0xE1,
    0x83,
    0xC0,
    0xFF,
    0xF3,
    0xD0,
    0x73,
    0xB1,
    0xCE,
    0xF0,
    0x60,
    0xC1,
    0x99,
    0xF1,
    0x80,
    0x70,
    0x60,
    0x78,
    0x7B,
    0x1D,
    0x1C,
    0x0C,
    0x64,
    0x31,
    0x0C,
    0x10,
    0x30,
    0xC6,
    0x2C,
    0x20,
    0x18,
    0x18,
    0x1E,
    0x3C,
    0x41,
    0xC1,
    0x03,
    0x19,
    0x0C,
    0x43,
    0x08,
    0x1E,
    0x01,
    0x83,
    0x00,
    0x06,
    0x0F,
    0x05,
    0x8B,
    0x11,
    0x38,
    0x00,
    0xCE,
    0x67,
    0x10,
    0xC6,
    0x05,
    0xC0,
    0x60,
    0xC8,
    0x01,
    0x82,
    0xE1,
    0x62,
    0xC6,
    0x47,
    0x80,
    0x3F,
    0x1F,
    0x84,
    0x19,
    0x82,
    0x30,
    0x18,
    0x3E,
    0x00,
    0x61,
    0x18,
    0x4C,
    0xB1,
    0xF0,
    0xF8,
    0x0C,
    0x06,
    0xC1,
    0x06,
    0x40,
    0xFC,
    0x06,
    0x0C,
    0x80,
    0x18,
    0x7F,
    0x13,
    0x4C,
    0x64,
    0x07,
    0x03,
    0x01,
    0x18,
    0x40,
    0xE0,
    0x7F,
    0x81,
    0x83,
    0x04,
    0x06,
    0x3F,
    0xC4,
    0xF3,
    0x11,
    0x20,
    0xC0,
    0xC0,
    0x43,
    0x10,
    0x38,
    0x10,
    0x30,
    0x60,
    0xC1,
    0x19,
    0x88,
    0x19,
    0x38,
    0xC4,
    0x0C,
    0x30,
    0x70,
    0x38,
    0xEE,
    0x0E,
    0x0C,
    0x1C,
    0x38,
    0x7F,
    0xC7,
    0xC6,
    0x0E,
    0x66,
    0x3B,
    0xFF,
    0xF8,
    0x3E,
    0x1F,
    0x3F,
    0xC1,
    0x07,
    0x8F,
    0x9F,
    0x1F,
    0xF0,
    0xF3,
    0xC7,
    0xFC,
    0x1F,
    0xFF,
    0xBC
  }
}
define yy = 2;
int x1 = 60, x2 = 68, x3 = 76, x4 = 84, x5 = 92, x6 = 100, x7 = 108, x8 = 116, x9 = 124, x10 = 132, x11 = 140, x12 = 148, x13 = 156, x14 = 164, x15 = 172, x16 = 180, x17 = 188, x18 = 196, x19 = 204, x20 = 212, x21 = 220, x22 = 228, x23 = 236, x24 = 244, x25 = 252, x26 = 260, x27 = 268, x28 = 276, x29 = 284, x30 = 292;

function text1() {
  putc_oled(1, ASCII_UPPER_A);
  puts_oled(x1, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_I);
  puts_oled(x2, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_M);
  puts_oled(x3, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_L);
  puts_oled(x4, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_O);
  puts_oled(x5, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_C);
  puts_oled(x6, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_K);
  puts_oled(x7, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x8, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_B);
  puts_oled(x9, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x10, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x11, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_A);
  puts_oled(x12, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x13, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x14, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x15, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_B);
  puts_oled(x16, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_Y);
  puts_oled(x17, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x18, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_P);
  puts_oled(x19, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_R);
  puts_oled(x20, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_I);
  puts_oled(x21, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_V);
  puts_oled(x22, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_A);
  puts_oled(x23, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x24, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x25, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_J);
  puts_oled(x26, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_A);
  puts_oled(x27, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_M);
  puts_oled(x28, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x29, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_S);
  puts_oled(x30, yy, 0, 1, 1);
  fall();
}

function text2() {
  putc_oled(1, ASCII_UPPER_P);
  puts_oled(x1, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_R);
  puts_oled(x2, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x3, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_S);
  puts_oled(x4, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_S);
  puts_oled(x5, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x6, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_X);
  puts_oled(x7, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x8, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x9, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_O);
  puts_oled(x10, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x11, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x12, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_O);
  puts_oled(x13, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_G);
  puts_oled(x14, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_G);
  puts_oled(x15, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_L);
  puts_oled(x16, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x17, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x18, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x20, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_O);
  puts_oled(x21, yy, 0, 1, 1);
  putc_oled(1, ASCII_SPACE);
  puts_oled(x22, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_E);
  puts_oled(x23, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_D);
  puts_oled(x24, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_I);
  puts_oled(x25, yy, 0, 1, 1);
  putc_oled(1, ASCII_UPPER_T);
  puts_oled(x26, yy, 0, 1, 1);
  rect_oled(x19 - 4, yy, 9, 9, 0, 1) rect_oled(x19 - 3, yy + 1, 7, 7, 0, 0) rect_oled(x19 + 5, yy, 1, 9, 1, 0) fall();
}

function fall() {
  x1--;
  x2--;
  x3--;
  x4--;
  x5--;
  x6--;
  x7--;
  x8--;
  x9--;
  x10--;
  x11--;
  x12--;
  x13--;
  x14--;
  x15--;
  x16--;
  x17--;
  x18--;
  x19--;
  x20--;
  x21--;
  x22--;
  x23--;
  x24--;
  x25--;
  x26--;
  x27--;
  x28--;
  x29--;
  x30--;
}

function CenterX(f_chars, f_font) {
  return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

function CenterY(f_size) {
  return (OLED_HEIGHT / 2) - (f_size / 2);
}

function GetChars(x) {
  if (t_text[x + 0x01] != -1) return t_text[x + 0x01] - t_text[x] - 0x01;
  return sizeof(t_text) - t_text[x];
}

function ssaver() {
  line_oled(0, 13, 127, 13, 1, 1) rect_oled(0, 0, 15, 14, 1, 0) rect_oled(0, 0, 15, 14, 0, 1) if (c_b < 1000) {
    putc_oled(1, ASCII_DIGIT9);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 1000) {
    putc_oled(1, ASCII_DIGIT8);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 2000) {
    putc_oled(1, ASCII_DIGIT7);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 3000) {
    putc_oled(1, ASCII_DIGIT6);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 4000) {
    putc_oled(1, ASCII_DIGIT5);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 5000) {
    putc_oled(1, ASCII_DIGIT4);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 6000) {
    putc_oled(1, ASCII_DIGIT3);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b > 7000) {
    putc_oled(1, ASCII_DIGIT2);
    puts_oled(4, 3, 0, 1, 1);
  }
  if (c_b >= 8000) {
    putc_oled(1, ASCII_DIGIT1);
    puts_oled(4, 3, 0, 1, 1);
  }
}

function get_rumble_Anti_Recoil() {
  _ret = max(get_rumble(RUMBLE_A), get_rumble(RUMBLE_B));
  if (_ret > 10 && _ret < 90) {
    return (_ret - AR_STRENGTH);
  }
  return 0;
}

function colourled(Colour) {
  Col_ind = (Colour * 4) - 3;
  set_led(LED_1, duint8(Col_ind));
  set_led(LED_2, duint8(Col_ind + 1));
  set_led(LED_3, duint8(Col_ind + 2));
  set_led(LED_4, duint8(Col_ind + 3));
}
/*
  _______   ______ _______    _____ ______   _________     ______   ____  ____     ______   _______    _____ ____   ____      __      _________ _________       _____      __      ____    ____ _________  _______ 
 /  ___  |./ ___  |_   __ \  |_   _|_   __ \|  _   _  |   |_   _ \ |_  _||_  _|   |_   __ \|_   __ \  |_   _|_  _| |_  _|    /  \    |  _   _  |_   ___  |     |_   _|    /  \    |_   \  /   _|_   ___  |/  ___  |
|  (__ \_| ./   \_| | |__) |   | |   | |__) |_/ | | \_|     | |_) |  \ \  / /       | |__) | | |__) |   | |   \ \   / /     / /\ \   |_/ | | \_| | |_  \_|       | |     / /\ \     |   \/   |   | |_  \_|  (__ \_|
 '.___\-.| |        |  __ /    | |   |  ___/    | |         |  __/.   \ \/ /        |  ___/  |  __ /    | |    \ \ / /     / ____ \      | |     |  _|  _     _  | |    / ____ \    | |\  /| |   |  _|  _ '.___\-. 
|\\____) | \.___.'\_| |  \ \_ _| |_ _| |_      _| |_       _| |__) |  _|  |_       _| |_    _| |  \ \_ _| |_    \ ' /    _/ /    \ \_   _| |_   _| |___/ |   | |_| |  _/ /    \ \_ _| |_\/_| |_ _| |___/ |\\____) |
|_______.'\._____.'____| |___|_____|_____|    |_____|     |_______/  |______|     |_____|  |____| |___|_____|    \_/    |____|  |____| |_____| |_________|   \.___.' |____|  |____|_____||_____|_________|_______.'

*/