// SYMBOL BOUNCER SCREEN SAVER

int Timer;
int A1T,A2T,B1T,B2T,X1T,X2T,Y1T,Y2T,U1T,U2T,D1T,D2T,L1T,L2T,R1T,R2T,M1T,M2T,Symbol;
int A1 = 4,A2 = 30,B1 = 60,B2 = 15,X1 = 36,X2 = 1,Y1 = 50,Y2 = 5,U1 = 40,U2 = 9:
int D1 = 49,D2 = 7,L1 = 33,L2 = 63,R1 = 18,R2 = 22,M1 = 45,M2 = 55:

int Saver = TRUE;
define TimeoutLimit = 20000; // Milliseconds (1000 = 1 second)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
	cls_oled(0);
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {

	/*
	ADD ADDITIONAL CODE HERE
	*/
	
	if (!Saver && event_press(PS4_CROSS)) { // A Command which will re-trigger the screen saver
		cls_oled(0);
		Saver = TRUE;
	}
	
	if (Saver) { 
        Timer += get_rtime();
        Saver ();
    } 
	
	if (Timer >= TimeoutLimit) {
    	Saver = FALSE;
    	Timer = 0;
    	cls_oled(0);
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

	/*
	ADD ADDITIONAL CODE HERE
	*/

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

	/*
	ADD ADDITIONAL CODE HERE
	*/

function Saver () {
    
    if (Saver) { 

        putc_oled(1,CROSS);
        puts_oled(5,A1,0,1,1);
        puts_oled(35,A2,0,1,1);
    
        putc_oled(1,CIRCLE);
        puts_oled(14,B1,0,1,1);
        puts_oled(44,B2,0,1,1);
    
        putc_oled(1,SQUARE);
        puts_oled(23,X1,0,1,1);    
        puts_oled(53,X2,0,1,1);
    
        putc_oled(1,TRIANGLE);
        puts_oled(37,Y1,0,1,1);
        puts_oled(61,Y2,0,1,1);
    
        putc_oled(1,UP);
        puts_oled(49,U1,0,1,1);
        puts_oled(95,U2,0,1,1);
    
        putc_oled(1,DOWN);
        puts_oled(30,D1,0,1,1);
        puts_oled(82,D2,0,1,1);
    
        putc_oled(1,LEFT);
        puts_oled(67,L1,0,1,1);
        puts_oled(101,L2,0,1,1);    
    
        putc_oled(1,RIGHT);
        puts_oled(76,R1,0,1,1);
        puts_oled(110,R2,0,1,1);
    
        putc_oled(1,MENU);
        puts_oled(85,M1,0,1,1);
        puts_oled(119,M2,0,1,1);
    
        if (Symbol[1] == 0) A1T = 1; if (A1T == 1) Symbol[1] +=2;
        if (Symbol[1] == 64) A1T = 0; if (A1T == 0) Symbol[1] --;
        if (Symbol[2] == 0) B1T = 1; if (B1T == 1) Symbol[2] ++;
        if (Symbol[2] == 64) B1T = 0; if (B1T == 0) Symbol[2] --;
        if (Symbol[3] == 0) X1T = 1; if (X1T == 1) Symbol[3] ++;
        if (Symbol[3] == 64) X1T = 0; if (X1T == 0) Symbol[3] -=2;
        if (Symbol[4] == 0) Y1T = 1; if (Y1T == 1) Symbol[4] ++;
        if (Symbol[4] == 64) Y1T = 0; if (Y1T == 0) Symbol[4] --;
        if (Symbol[5] == 0) A2T = 1; if (A2T == 1) Symbol[5] ++;
        if (Symbol[5] == 64) A2T = 0; if (A2T == 0) Symbol[5] --;
        if (Symbol[6] == 0) B2T = 1; if (B2T == 1) Symbol[6] ++;
        if (Symbol[6] == 64) B2T = 0; if (B2T == 0) Symbol[6] --;
        if (Symbol[7] == 0) X2T = 1; if (X2T == 1) Symbol[7] ++;
        if (Symbol[7] == 64) X2T = 0; if (X2T == 0) Symbol[7] --;
        if (Symbol[8] == 0) Y2T = 1; if (Y2T == 1) Symbol[8] ++;
        if (Symbol[8] == 64) Y2T = 0; if (Y2T == 0) Symbol[8] --;
        if (Symbol[9] == 0) U1T = 1; if (U1T == 1) Symbol[9] ++;
        if (Symbol[9] == 64) U1T = 0; if (U1T == 0) Symbol[9] --;
        if (Symbol[10] == 0) D1T = 1; if (D1T == 1) Symbol[10] ++;
        if (Symbol[10] == 64) D1T = 0; if (D1T == 0) Symbol[10] --;
        if (Symbol[11] == 0) U2T = 1; if (U2T == 1) Symbol[11] ++;
        if (Symbol[11] == 64) U2T = 0; if (U2T == 0) Symbol[11] --;
        if (Symbol[12] == 0) D2T = 1; if (D2T == 1) Symbol[12] ++;
        if (Symbol[12] == 64) D2T = 0; if (D2T == 0) Symbol[12] --;
        if (Symbol[13] == 0) L1T = 1; if (L1T == 1) Symbol[13] ++;
        if (Symbol[13] == 64) L1T = 0; if (L1T == 0) Symbol[13] --;
        if (Symbol[14] == 0) R1T = 1; if (R1T == 1) Symbol[14] ++;
        if (Symbol[14] == 64) R1T = 0; if (R1T == 0) Symbol[14] --;
        if (Symbol[15] == 0) M1T = 1; if (M1T == 1) Symbol[15] ++;
        if (Symbol[15] == 64) M1T = 0; if (M1T == 0) Symbol[15] -=2;
        if (Symbol[16] == 0) L2T = 1; if (L2T == 1) Symbol[16] ++;
        if (Symbol[16] == 64) L2T = 0; if (L2T == 0) Symbol[16] -=2;
        if (Symbol[17] == 0) R2T = 1; if (R2T == 1) Symbol[17] ++;    
        if (Symbol[17] == 64) R2T = 0; if (R2T == 0) Symbol[17] --;
        if (Symbol[18] == 0) M2T = 1; if (M2T == 1) Symbol[18] ++;
        if (Symbol[18] == 64) M2T = 0; if (M2T == 0) Symbol[18] --;
    }
}
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 