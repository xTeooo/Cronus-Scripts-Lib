/*
								  _________                  __     __    __          __     ___________                  ___ ___                       ___
								 /   _____/  ____    ____  _/  |_ _/  |_ |__|  ______|  |__  \__    ___/_______  ___.__. /   |   \ _____   _______   __| _/
								 \_____  \ _/ ___\  /  _ \ \   __\\   __\|  | /  ___/|  |  \   |    |   \_  __ \<   |  |/    ~    \\__  \  \_  __ \ / __ | 
								 /        \\  \___ (  <_> ) |  |   |  |  |  | \___ \ |   Y  \  |    |    |  | \/ \___  |\    Y    / / __ \_ |  | \// /_/ | 
								/_______  / \___  > \____/  |__|   |__|  |__|/____  >|___|  /  |____|    |__|    / ____| \___|_  / (____  / |__|   \____ |  v2.0
								        \/      \/                                \/      \/                     \/            \/       \/              \/ 
																				________      _______   
																				\_____  \     \   _  \  
																				 /  ____/     /  /_\  \ 
																				/       \     \  \_/   \
																				\_______ \ /\  \_____  /
																				        \/ \/        \/ 								        

																		       
   _____               .___                         __      __                   _____                              /\ _________          .__       .___  __      __                 
  /     \    ____    __| _/  ____  _______   ____  /  \    /  \_____   _______ _/ ____\_____   _______   ____      / / \_   ___ \   ____  |  |    __| _/ /  \    /  \_____   _______ 
 /  \ /  \  /  _ \  / __ | _/ __ \ \_  __ \ /    \ \   \/\/   /\__  \  \_  __ \\   __\ \__  \  \_  __ \_/ __ \    / /  /    \  \/  /  _ \ |  |   / __ |  \   \/\/   /\__  \  \_  __ \
/    Y    \(  <_> )/ /_/ | \  ___/  |  | \/|   |  \ \        /  / __ \_ |  | \/ |  |    / __ \_ |  | \/\  ___/   / /   \     \____(  <_> )|  |__/ /_/ |   \        /  / __ \_ |  | \/
\____|__  / \____/ \____ |  \___  > |__|   |___|  /  \__/\  /  (____  / |__|    |__|   (____  / |__|    \___  > / /     \______  / \____/ |____/\____ |    \__/\  /  (____  / |__|   
        \/              \/      \/              \/        \/        \/                      \/              \/  \/             \/                    \/         \/        \/         
 
 
/************************************** S C R I P T  C R E D I T S  B E L O W *******************************************

___________                 __                   ________            __   _____   __   ________   ____ 
\__    ___/_____    ___ __ |  |    ____  _______ \______ \  _______ |__|_/ ____\_/  |_ \_____  \ /_   |
  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ |    |  \ \_  __ \|  |\   __\ \   __\ /  ____/  |   |
  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \/ |    `   \ |  | \/|  | |  |    |  |  /       \  |   |  S C R I P T  A U T H O R 
  |____|   (____  / / ____||____/ \____/  |__|   /_______  / |__|   |__| |__|    |__|  \_______ \ |___|
                \/  \/                                   \/                                    \/       
_________   ____    _____    ___ ___  ________  __________  ___________                         
\_   ___ \ /_   |  /  |  |  /   |   \ \_____  \ \______   \ \__    ___/  ____  _____     _____  
/    \  \/  |   | /   |  |_/    ~    \  _(__  <  |       _/   |    |   _/ __ \ \__  \   /     \ 
\     \____ |   |/    ^   /\    Y    / /       \ |    |   \   |    |   \  ___/  / __ \_|  Y Y  \
 \______  / |___|\____   |  \___|_  / /______  / |____|_  /   |____|    \___  >(____  /|__|_|  /  C E O R I N  -  C R O W  -  Z K U L T R A  -  B U D D H A  -  R U M O U R -  T S O T S I  -  S A N D Y C H R I S 
        \/            |__|        \/         \/         \/                  \/      \/       \/   
        
__________           __            ___________                  __                           
\______   \  ____  _/  |_ _____    \__    ___/  ____    _______/  |_   ____  _______   ______
 |    |  _/_/ __ \ \   __\\__  \     |    |   _/ __ \  /  ___/\   __\_/ __ \ \_  __ \ /  ___/
 |    |   \\  ___/  |  |   / __ \_   |    |   \  ___/  \___ \  |  |  \  ___/  |  | \/ \___ \ 
 |______  / \___  > |__|  (____  /   |____|    \___  >/____  > |__|   \___  > |__|   /____  >     M O N O _ 5  -  B O O B A  -  X x K S C x X  -  S H A D O W S F R O M P R  
        \/      \/             \/                  \/      \/             \/              \/ 

Credits to the Cronus Community & Creators!! 
*/
const int8 PolarArray[] = { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8 LinearArray[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};

const string MainMenuId[] = {"Mod Menu","Adjustables","Settings","QuickToggles",""};
// Display Mods In the OLED Menu \\
const string ModNames[] = {"Choose AR","Prog Rumble","AA v3","AA v4","AA v5","Rapid Fire","Strafe Shot","Cancel Reload","Vm Speed","Hold Breath","Sensitivity","Cancel Slide", 
//                               0            1          2       3       4         5              6             7             8           9           10              11                                                          
"Enemy Ping","BunnyHop","Prone Shot","JumpShot","FastMelee","Layout","Block Rumble","Rsync Btns","Warzone Profile","Rapid Fire","ProneShot","JumpShot",""};
//   12          13          14          15         16         17          18            19             20              21          22          23                                        
// Display Editable Values In The OLED Menu \\
const string ValNames[]  = { "V Strength","H Strength","V Start","V End","V Time","Horiz Strength","AA Type","Shape Direction","V3/V4 Shapes","Ads Radius","Radius","Ads Speed","Stick Speed","Min Radius",              
//                                0             1          2        3        4            5            6            7                8              9         10        11            12           13  
"Taylor Tracking","Tracking Size","Tracking Speed","Boost On Fire","Boost Str","Boost Spd","DeadZone","AA Type","Shape Direction","V5 Shapes","Ads Speed","Speed","Radius",
//     14                 15             16               17            18          19         20        21             22            23           24        25      26                                           
"Taylor Tracking","Tracking Size","Tracking Speed","Speed Boost","Rounds/Sec","StrafeTime","Reload Time","General","Ads","Fire","AdsFire","Slide Delay",""}  
 //     27                 28             29              30           31            32           33          34     35     36      37          38

// Display Misc Strings Used Throughout The Menu Including Combo's \\Yes
const string Misc[]          = {"On","Off","Primary","Secondary","Warzone","All Profiles","Controller","Prim/Sec","< Quick Toggles >","MW/CW","ScottishTryHard","v2.0","Deactivated","Drive Mode","Saved","Disables Prim/Sec",""};
 //                               0    1       2          3          4           5               6          7                 
const string ARToggle[]      = {"Choose AR","Legacy AR","Rumble AR",""} ; 

const string CurveType[]     = {"Polar","Linear",""};

const string CircularCurve[] = {"Circular","Tall Oval","Wide Oval","Spiral","Helix",""};

const string SquareCurve[]   = {"Diamond","Tall Diamond","Wide Diamond","Spiral Diamond","Helix Diamond",""}; 

const string V5CircularCurve[] = {"Circular","Vortex Oval","Tall Oval","Wide Oval",""};

const string V5SquareCurve[]   = {"Diamond","Spiral Prism","Tall Diamond","Wide Diamond",""}; 

const string VMSpeed[]       = {"0","-2","-4","-6","-8","-9",""};

const string Profiles[]      = {"Primary","Secondary","Warzone",""}; 

const string SlideType[]     = {"Off","Modern Warfare","ColdWar",""};

// Display Choosable Buttons Via Menu \\ 
const string HoldButtons[]       = { "Select","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Dpad Down","Dpad Up","Dpad Left","Dpad Right", ""};

const string PressButtons[]      = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const int8   HoldBtns []         = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 ,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT}; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };
// Display All Different Controller Layouts Choosable Via The Menu \\
const string ControllerLayouts[] = { "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped",""}

// These Are Variables Used That Are Dependant On My Menu Structure \\
int ModORVal                  [3]  ;
int ModOrEditMenu             [4]  ;
int DisplayModsNToggles;
// Defined Values For Specific Features In The Script \\
define AmountOfValues        = 38  ;
define AmountOfMods          = 23  ;
define AmountOfEditableMods  = 11  ;
define AmountOfMainIdx       = 4; 
// All Toggles For Mods That Can Be Used Seperately On 3 Profiles \\
int ToggleTaylorAR            [3]  ;
int ToggleProgressive         [3]  ;
int ToggleAAV3                [3]  ; 
int ToggleAAV4                [3]  ; 
int ToggleAAV5                [3]  ; 
int ToggleAAType              [3]  ; 
int TaylorShapes              [3]  ;
int ToggleRapidFire           [3]  ;
int ToggleStrafeShot;
int ToggleVmSpeed;
int ToggleProneShot;
int ToggleJumpShot;
int ToggleFastMelee;
int RateOfFire                [3]  ;
int ToggleTaylorSens;
int ToggleCancelReload; 
// Available Values That Can Be Different On 3 Profiles \\
int TaylorARVert              [3]  ;
int TaylorARHoriz             [3]  ; 
int ToggleADirection          [3]  ;
int TaylorV5Shapes            [3]  ;
int SpeedBoost                [3]  ;
int AdsRadius                 [3]  ;
int TaylorRadius              [3]  ;
int AdsSpeed                  [3]  ; 
int TaylorAngle               [3]  ;
int TaylorRadiusMin           [3]  ;
int TaylorTracking            [3]  ;
int TrackingSize              [3]  ;
int TrackingSpeed             [3]  ;
int ToggleBoostFire           [3]  ;
int VerticalStart             [3]  ;
int VerticalEnd               [3]  ;
int VerticalTime              [3]  ;
int Horizontal                [3]  ;
int TaylorPBoostStr           [3]  ;
int TaylorABoostSpd           [3]  ; 
int ToggleHoldBreath          [3]  ;
int GeneralSens,AdsSens,FireSens,AdsFireSens;
int MaxReloadTime,SlideDelay,DeadZone,StrafeShotTime; 
int HoldTime,RestTime,LedOn,LedOff; 
int ToggleBlockRumble,ToggleCancelSlide,ToggleEnemyPing,GenStr; 
int DriveMode,ScreenSaver,BlankScreen,SelectedProfileIdx,ProfileIdx,WarzoneLootProfile;
int FirstShotBeforeReload,ReloadInProgress;
int ReloadTime;  
int DisplayTitle          = TRUE;
define False              = FALSE;
define True               = TRUE; 
define ActivateButtonCount = 5;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping,Buttons;
int TaylorFineTune  = 30  ;
define Small  = 0;
define Medium = 1;
define Large  = 2;
int stringPosition,stringHeight;
int HighLight;  
int SmartRumble,AntirecoilStrength,AntirecoilVertical,AntirecoilHorizontal;
int RX,RY,angle,CosAngle,SinAngle,ActualMagnitude,MaxMagnitude,GetAngle;
int PolarStrength,Angle,AngleBoost,SmartAAV1Rumble,SpiralPosition1,InnerSpiral,OuterSpiral,SpiralPosition2,Position,AngleDirection,RadiusMin;
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int ar_y; 
int x,y,inc;
int stringLength;
int ToggleBunnyHop,color; 
int vert = 4;
int Tracking,Tracker1,Tracker2,CAngle,SAngle;
int CycleRefresh;
define TimeInterval = 4;
int SpeedAngle;
init { 
	RadiusMin = TaylorRadius[ProfileIdx]/2
	if(TaylorV5Shapes[ProfileIdx] == 1) {
	InnerSpiral = RadiusMin;	
	OuterSpiral = TaylorRadius[ProfileIdx];
    } 
    
	Load();
} 
main { 
    /* =================== C A L L  F U N C T I O N S ==========================
    -------------------- Button Activations/Controller -----------------------*/
	ActivateAllButtons();
	Buttons(Buttons);
	/*==================== V I R T U A L  M A C H I N E ========================
	------------------------- Adjustable VM Speed ----------------------------*/
	vm_tctrl(ToggleVmSpeed);
	/* =================== I N T R O  S T A R T  U P ===========================
	-------------------------- Scroll Text & Logo ----------------------------*/
    if(get_ival(Ads))                                             // Enter Mod Menu OR Enable DriveMode (KillSwitch) OR Enter Test Mode (Configure Recoil/AimAssist On The Fly) === \\
	{ 
		if(event_press(PS4_OPTIONS))                                // Enter Mod Menu \\ 
		{ 
		    ModOrEditMenu[0]       =! ModOrEditMenu[0]; 
		    DisplayModsNToggles    = TRUE;
		    ModORVal[0]            = 0; 
		    DisplayTitle           = FALSE; 
		    combo_run(RumbleOn);
		    
		    if(!ModOrEditMenu[0]){ 
		    	DisplayTitle = TRUE; 
		    	ModOrEditMenu[1] = FALSE;
		    	ModOrEditMenu[2] = FALSE;
		    	ModOrEditMenu[3] = FALSE;	
		    }    
	    }
	    set_val(PS4_OPTIONS,0);  // Block These Button Presses When Entering The 3 x Menu's (Prevent's Interuption IN GAME )    
    }   // End of First Block ( Entering the different Menu's ) \\ 
    
    // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Mod Menu & Change Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\
    
    if(!DisplayTitle)                           // If NOT On Display Title \\
    { 
    	if(ModOrEditMenu[0] || ModOrEditMenu[1] || ModOrEditMenu[2] || ModOrEditMenu[3])
    	{
    		MenuScroll();
    		vm_tctrl(0);
    	} 
    	if(ModOrEditMenu[0]) // Main Menu 
        {
        	ModORVal[0]                       = ModORValNavi(ModORVal[0],0,4); // Min & Max OF Mods (Main Menu) 
        	
        	if(event_press(PS4_CIRCLE))
		    {
				DisplayTitle = TRUE; 
				ModOrEditMenu[0] = FALSE;
				DisplayModsNToggles = FALSE;
				RadiusMin = TaylorRadius[ProfileIdx]/2
				if(TaylorV5Shapes[ProfileIdx] == 1) { 
				InnerSpiral = RadiusMin;	
				OuterSpiral = TaylorRadius[ProfileIdx];
			    } 
				Save();
    	    	combo_run(Saved);
			}	
        } 
   		if(ModOrEditMenu[1])        // Enter Mod Menu - Menu Navigation - Toggle Activation \\
     	{ 
            ModORVal[1]                       = ModORValNavi(ModORVal[1],-1, 24); // Min & Max OF Mods (Mod Menu) 
           
            ToggleTaylorAR      [ProfileIdx]  = ToggleSwitch(ModORVal[1],0,ToggleTaylorAR      [ProfileIdx],0,2);  // RumbleAR                                       \\
            ToggleProgressive   [ProfileIdx]  = ToggleSwitch(ModORVal[1],1,ToggleProgressive   [ProfileIdx],0,1);  // Progressive                                    \\
            ToggleAAV3          [ProfileIdx]  = ToggleSwitch(ModORVal[1],2,ToggleAAV3          [ProfileIdx],0,1);  // Taylor Assist                                  \\
            ToggleAAV4          [ProfileIdx]  = ToggleSwitch(ModORVal[1],3,ToggleAAV4          [ProfileIdx],0,1);  // Taylor Assist                                  \\
            ToggleAAV5          [ProfileIdx]  = ToggleSwitch(ModORVal[1],4,ToggleAAV5          [ProfileIdx],0,1);  // Taylor Assist                                  \\
            ToggleRapidFire     [ProfileIdx]  = ToggleSwitch(ModORVal[1],5,ToggleRapidFire     [ProfileIdx],0,1);  // Rapid Fire                                     \\
            ToggleStrafeShot      		      = ToggleSwitch(ModORVal[1],6,ToggleStrafeShot    			   ,0,1);  
            ToggleCancelReload  		      = ToggleSwitch(ModORVal[1],7,ToggleCancelReload  		       ,0,1);  // Cancel Reload                                  \\
            ToggleVmSpeed                     = ToggleSwitch(ModORVal[1],8,ToggleVmSpeed                   ,0,5);  // VM Speed                                       \\
            ToggleHoldBreath[ProfileIdx]      = ToggleSwitch(ModORVal[1],9,ToggleHoldBreath[ProfileIdx]    ,0,1);  // HoldBreath                                     \\
            ToggleTaylorSens    		      = ToggleSwitch(ModORVal[1],10,ToggleTaylorSens    		   ,0,1);  // Taylor Sens                                    \\
            ToggleCancelSlide                 = ToggleSwitch(ModORVal[1],11,ToggleCancelSlide              ,0,2);  // Cancel Slide - Modern Warfare - Cold War       \\ 
            ToggleEnemyPing                   = ToggleSwitch(ModORVal[1],12,ToggleEnemyPing                ,0,1);  // Enemy Ping                                     \\
            ToggleBunnyHop                    = ToggleSwitch(ModORVal[1],13,ToggleBunnyHop                 ,0,1);  
            ToggleProneShot                   = ToggleSwitch(ModORVal[1],14,ToggleProneShot                ,0,1);  
            ToggleJumpShot                    = ToggleSwitch(ModORVal[1],15,ToggleJumpShot                 ,0,1);  
            ToggleFastMelee                   = ToggleSwitch(ModORVal[1],16,ToggleFastMelee                ,0,1); 
            Buttons                           = ToggleSwitch(ModORVal[1],17,Buttons                       ,0,21);  // Button Layout                                  \\
            ToggleBlockRumble                 = ToggleSwitch(ModORVal[1],18,ToggleBlockRumble             ,0, 1);  // Block Rumble Feedback                          \\
           
            ButtonActivation(0,ModORVal[1],19);                                                                    
            ButtonActivation(1,ModORVal[1],20);                                                                    
            ButtonActivation(2,ModORVal[1],21);                                                                    
            ButtonActivation(3,ModORVal[1],22); 
            ButtonActivation(4,ModORVal[1],23); 
            
           
            if(ModORVal[0] == 0) ModORVal[1] = cycle(ModORVal[1],0,23);
	       	if(ModORVal[0] == 2) ModORVal[1] = cycle(ModORVal[1],17,20);
	       	if(ModORVal[0] == 3) ModORVal[1] = cycle(ModORVal[1],21,23);
	  
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Menu To Make Changes ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\   
    	} 
    	if(ModOrEditMenu[2] || ModOrEditMenu[3])  // Enter Edit Menu - Value Change Activation - Navigate Different Types Of Values \\
	    { 
            ModORVal[2]                       = ModORValNavi(ModORVal[2],0  ,38);
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Values Via Menu & Enable/Disable Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\           
   
            TaylorARVert     [ProfileIdx]     = EditableVals(ModORVal[2]    , 0, 0,TaylorARVert     [ProfileIdx] ,-99, 99 , 1,  10); 
	        TaylorARHoriz    [ProfileIdx]     = EditableVals(ModORVal[2]    , 1, 1,TaylorARHoriz    [ProfileIdx] ,-99, 99 , 1,  10); 
            VerticalStart    [ProfileIdx]     = EditableVals(ModORVal[2]    , 2, 2,VerticalStart    [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalEnd      [ProfileIdx]     = EditableVals(ModORVal[2]    , 3, 3,VerticalEnd      [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalTime     [ProfileIdx]     = EditableVals(ModORVal[2]    , 4, 4,VerticalTime     [ProfileIdx] ,  0, 99 , 1 , 10);
            Horizontal       [ProfileIdx]     = EditableVals(ModORVal[2]    , 5, 5,Horizontal       [ProfileIdx] ,-99, 99 , 1 , 10);
            ToggleAAType     [ProfileIdx]     = ToggleSwitch(ModORVal[2]    , 6,   ToggleAAType     [ProfileIdx] ,  0, 1          ); // Toggle \\
            ToggleADirection [ProfileIdx]     = ToggleSwitch(ModORVal[2]    , 7,   ToggleADirection [ProfileIdx] ,  0, 1          ); // Toggle \\
            TaylorShapes     [ProfileIdx]     = ToggleSwitch(ModORVal[2]    , 8,   TaylorShapes     [ProfileIdx] ,  0, 4          ); // Toggle \\
            AdsRadius        [ProfileIdx]     = EditableVals(ModORVal[2]    , 9, 9,AdsRadius        [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadius     [ProfileIdx]     = EditableVals(ModORVal[2]    ,10,26,TaylorRadius     [ProfileIdx] ,  0, 99 , 1 , 10);
            AdsSpeed         [ProfileIdx]     = EditableVals(ModORVal[2]    ,11,24,AdsSpeed         [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorAngle      [ProfileIdx]     = EditableVals(ModORVal[2]    ,12,25,TaylorAngle      [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadiusMin  [ProfileIdx]     = EditableVals(ModORVal[2]    ,13,13,TaylorRadiusMin  [ProfileIdx] ,  1, 20 , 1 , 10);
            TaylorTracking   [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,14,   TaylorTracking   [ProfileIdx] ,  0, 1          ); // Toggle \\
            TrackingSize     [ProfileIdx]     = EditableVals(ModORVal[2]    ,15,28,TrackingSize     [ProfileIdx] ,  1, 6 , 1 ,   1); 
            TrackingSpeed    [ProfileIdx]     = EditableVals(ModORVal[2]    ,16,29,TrackingSpeed    [ProfileIdx] ,  1, 10, 1 ,  10);
            ToggleBoostFire  [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,17,   ToggleBoostFire  [ProfileIdx] ,  0, 1          );
            TaylorPBoostStr  [ProfileIdx]     = EditableVals(ModORVal[2]    ,18,18,TaylorPBoostStr  [ProfileIdx] ,  0, 40 , 1 , 10); 
	        TaylorABoostSpd  [ProfileIdx]     = EditableVals(ModORVal[2]    ,19,19,TaylorABoostSpd  [ProfileIdx] ,  0, 40 , 1 , 10); 
            DeadZone             			  = EditableVals(ModORVal[2]    ,20,20,DeadZone                      ,  0, 20 , 1 , 10); 
            ToggleAAType     [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,21,   ToggleAAType     [ProfileIdx] ,  0, 1          ); // Toggle \\
            ToggleADirection [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,22,   ToggleADirection [ProfileIdx] ,  0, 1          ); // Toggle \\
            TaylorV5Shapes   [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,23,   TaylorV5Shapes   [ProfileIdx] ,  0, 3          ); // Toggle \\
            TaylorTracking   [ProfileIdx]     = ToggleSwitch(ModORVal[2]    ,27,   TaylorTracking   [ProfileIdx] ,  0, 1          ); // Toggle \\
            SpeedBoost[ProfileIdx]     	      = ToggleSwitch(ModORVal[2]    ,30,   SpeedBoost[ProfileIdx]        ,  0, 1          ); // Toggle \\
            RateOfFire       [ProfileIdx]     = EditableVals(ModORVal[2]    ,31,31,RateOfFire       [ProfileIdx] ,  0, 25 , 1 , 10);
            StrafeShotTime                    = EditableVals(ModORVal[2]    ,32,32,StrafeShotTime                ,  0,990 ,10 ,100);
            MaxReloadTime    			      = EditableVals(ModORVal[2]    ,33,33,MaxReloadTime    			 , 0,9000 ,10 ,100);
            GeneralSens      			      = EditableVals(ModORVal[2]    ,34,34,GeneralSens      			 ,  0,327 , 1 , 10);
            AdsSens          				  = EditableVals(ModORVal[2]    ,35,35,AdsSens           			 ,  0,327 , 1 , 10);
            FireSens         			      = EditableVals(ModORVal[2]    ,36,36,FireSens         			 ,  0,327 , 1 , 10);
            AdsFireSens      			      = EditableVals(ModORVal[2]    ,37,37,AdsFireSens      			 ,  0,327 , 1 , 10);
            SlideDelay                    	  = EditableVals(ModORVal[2]    ,38,38,SlideDelay                    ,  0,200 , 1 , 10);  
           
       }     
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Value Limits For Mods With Adjustable Values ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\       
       if(ModOrEditMenu[2]) 
       { 
            if(ModORVal[1] ==   0) ModORVal[2] = cycle(ModORVal[2],0,1);
            if(ModORVal[1] ==   1) ModORVal[2] = cycle(ModORVal[2],2,5);
            if(ModORVal[1] ==   2) ModORVal[2] = cycle(ModORVal[2],6,19);
            if(ModORVal[1] ==   3) ModORVal[2] = cycle(ModORVal[2],6,20);
            if(ModORVal[1] ==   4) ModORVal[2] = cycle(ModORVal[2],21,30);
            if(ModORVal[1] ==   5) ModORVal[2] = cycle(ModORVal[2],31,31);
            if(ModORVal[1] ==   6) ModORVal[2] = cycle(ModORVal[2],32,32);
            if(ModORVal[1] ==   7) ModORVal[2] = cycle(ModORVal[2],33,33);
            if(ModORVal[1] ==  10) ModORVal[2] = cycle(ModORVal[2],34,37);
            if(ModORVal[1] ==  11) ModORVal[2] = cycle(ModORVal[2],38,38);
        }   
    }
    if(DisplayModsNToggles)    // Display Mods - Editable Values - Toggles - Display 3x Menu's \\
    { 
        rect_oled(2,3,127,50,1,0);
        rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
        line_oled(0, 50,127 , 50, 1, 1); 	
        led(ProfileIdx);
	   
	    if(ModOrEditMenu[1] || ModOrEditMenu[2] || ModOrEditMenu[3]) {
	   		line_oled(0, 25,127 , 25, 1, 1); 
	    }
   	    if(ModOrEditMenu[2] || ModOrEditMenu[3]) 
        { 	
        	String(ValNames[ModORVal[2]],Small,-24,0);
        	
            DisplayMods(2,0,19,Profiles[ProfileIdx],Small,-12); 
            DisplayMods(2,21,31,Profiles[ProfileIdx],Small,-12);
            DisplayMods(2,20,20,Misc[5],Small,-12); 
            DisplayMods(2,32,38,Misc[5],Small,-12); 
           
            DisplayToggleOptions(2,6 ,CurveType[ToggleAAType[ProfileIdx]]);
            DisplayToggleOptions(2,21,CurveType[ToggleAAType[ProfileIdx]]);
            DisplayToggle       (2,7,ToggleADirection[ProfileIdx]);
            DisplayToggle       (2,22,ToggleADirection[ProfileIdx]);
            DisplayToggle       (2,14,TaylorTracking[ProfileIdx]);
            DisplayToggle       (2,27,TaylorTracking[ProfileIdx]);
            DisplayToggle       (2,17,ToggleBoostFire[ProfileIdx]);
            DisplayToggle       (2,30,SpeedBoost[ProfileIdx]);
            
            if(ModORVal[2] == 8)
            {
	        	if(ToggleAAType[ProfileIdx] == 0)
	        		String(CircularCurve[TaylorShapes[ProfileIdx]],Small,6,0);
	        	else
	        		String(SquareCurve[TaylorShapes[ProfileIdx]],Small,6,0);
        	}
        	if(ModORVal[2] == 23)
            {
	        	if(ToggleAAType[ProfileIdx] == 0)
	        		String(V5CircularCurve[TaylorV5Shapes[ProfileIdx]],Small,6,0);
	        	else
	        		String(V5SquareCurve[TaylorV5Shapes[ProfileIdx]],Small,6,0);
        	}  
        }
        else if(ModOrEditMenu[1])
        {
		    led(ProfileIdx);
		    String(ModNames[ModORVal[1]],Small,-24,0);
			DisplayMods(1, 0,5,Profiles[ProfileIdx],Small,-12); 
			DisplayMods(1, 9,9,Profiles[ProfileIdx],Small,-12); 
	        DisplayMods(1, 6,8,Misc[5],Small,-12); 
	        DisplayMods(1,10,16,Misc[5],Small,-12); 
	        DisplayMods(1,17,18,Misc[6],Small,-12);
	        DisplayMods(1,19,19,Misc[7],Small,-12);
	        DisplayMods(1,20,20,Misc[15],Small,-12);
	        DisplayMods(1,21,23,Misc[8],Small,-12);
	      
	      
	        DisplayToggleOptions(1, 0,ARToggle[ToggleTaylorAR[ProfileIdx]]);
	        DisplayToggle       (1, 1,ToggleProgressive[ProfileIdx]);
	        DisplayToggle		(1, 2,ToggleAAV3[ProfileIdx]);
	        DisplayToggle	    (1, 3,ToggleAAV4[ProfileIdx]);
	        DisplayToggle	    (1, 4,ToggleAAV5[ProfileIdx]);
	        DisplayToggle       (1, 5,ToggleRapidFire[ProfileIdx]);
	        DisplayToggle       (1, 6,ToggleStrafeShot); 
	        DisplayToggle       (1, 7,ToggleCancelReload);
	        DisplayToggleOptions(1, 8,VMSpeed[ToggleVmSpeed]);
	        DisplayToggle       (1, 9,ToggleHoldBreath[ProfileIdx])
	        DisplayToggle       (1,10,ToggleTaylorSens)
	        DisplayToggleOptions(1,11,SlideType[ToggleCancelSlide]);
	        DisplayToggle       (1,12,ToggleEnemyPing)
	        DisplayToggle       (1,13,ToggleBunnyHop)
	        DisplayToggle       (1,14,ToggleProneShot)
	        DisplayToggle       (1,15,ToggleJumpShot)
	        DisplayToggle       (1,16,ToggleFastMelee)
	        DisplayToggleOptions(1,17,ControllerLayouts[Buttons]);
	        DisplayToggle       (1,18,ToggleBlockRumble)
	   
        }
        else 
        {
    		for(i = 0;i < GetEntriesStrings(0); i++) 
    		{
    			if(i == ModORVal[0]) 
    			{
        			color = OLED_BLACK;
	    		}else{
	        		color = OLED_WHITE;
	    		}
	    	 	printf(64 - ((GetCharsStrings(i) * OLED_FONT_SMALL_WIDTH) / 2),vert,OLED_FONT_SMALL,color,MainMenuId[i])
	    		vert += 12
			}
			vert = 4;	
        }			
        DisplayModsNToggles = FALSE; 
    } 
    if(!ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2] && !ModOrEditMenu[3]) // If NOT In Either Menu's \\ 
	{
    	if(DisplayTitle)                                            // Display Title - Display Screen \\
    	{ 
       		cls_oled(OLED_BLACK);
       	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	String(Misc[9],Small,-22,0);
        	String(Misc[10],Small,-5,0);
        	String(Misc[11],Small,10,0);
        	String(Profiles[ProfileIdx],Small,25,0);
        	DisplayTitle = FALSE;
            ScreenSaver  = TRUE; 
    	}
    	// Display a Blank Screen after 10 seconds ( Prevents Screen Burn on The OLED Screen ) 
    	if(ScreenSaver) 
    	{
        	BlankScreen += get_rtime();
        	
    		if(BlankScreen >= 10000)
    		{
    			cls_oled(OLED_BLACK);
    			BlankScreen = 0;
    			ScreenSaver = FALSE; 
        	} 
        }
        if(get_ival(Fire))
    	{
			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2])
    	    {
		        DriveMode = TRUE; 
		        combo_run(DriveMode);
    	    }
    	    set_val(PS4_RIGHT,0);
    	} 
		if(DriveMode) 
    	{
			combo_run(Blink);
			LedOn  = 150;
			LedOff = 300;
			
			if(event_press(PS4_SQUARE))
			{
				DriveMode = FALSE;
				combo_run(RumbleOff); 
    		} 
    	} 
        // Switch Profiles Activation \\ 
        led(ProfileIdx);
         
        if(!WarzoneLootProfile) 
		{
        	if(Swap) 
        	{ 
        		if(event_release(Swap) && get_ptime(Swap) < 150 || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])) 
        		{
    				SelectedProfileIdx =! SelectedProfileIdx;
    				WarzoneLootProfile = FALSE;
    
    				if(ModOrEditMenu[1]) 
    					DisplayModsNToggles = TRUE; 
        			else
            			DisplayTitle = TRUE;
            		
            	if(!WarzoneLootProfile) 
            	{
            		if(SelectedProfileIdx) 
            	   		ProfileIdx = 1;
            		else
            	   		ProfileIdx = 0; 
    			}
    			
	    		} 
	    		if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
	    			set_val(ActivatePressButton[0], 0);
      		}
      	} 
        if(ActivateHoldButton[1]) 
        {
        	if(get_ival(ActivateHoldButton[1]))
            {
            	if(event_press(ActivatePressButton[1]))
            	{
	             	ProfileIdx = 2; 
		       	   	WarzoneLootProfile =! WarzoneLootProfile;
		       	    
		       	    if(ModOrEditMenu[1]) 
	    				DisplayModsNToggles = TRUE; 
	        		else
	            		DisplayTitle = TRUE;
	            		
	            	if(!WarzoneLootProfile) 
	            	{
	            		if(SelectedProfileIdx) 
	            	   		ProfileIdx = 1;
	            		else
	            	   		ProfileIdx = 0; 
	    			}
	    		} 
	       	}           
	       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1]))
	    		set_val(ActivatePressButton[1], 0);   
	   	}   	
    } 
    /*========= A L L  F E A T U R E S  &  M O D   A C T I V A T I O N =======
    --------------------------- Everything Below ---------------------------*/ 
	if(ToggleBlockRumble) 
	{
		block_rumble();
	} 
	deadzone(Ads,Fire,99,99);
		
    if(!DriveMode)           
	{ 
		if(!ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2] && !ModOrEditMenu[3]) 
		{
		    // Quick Toggles \\
		    ToggleRapidFire[ProfileIdx]    = QuickToggleMods(ActivateHoldButton[2] , ActivatePressButton[2]  ,ToggleRapidFire [ProfileIdx], 5); 
		    ToggleProneShot                = QuickToggleMods(ActivateHoldButton[3] , ActivatePressButton[3]  ,ToggleProneShot             ,14);
		    ToggleJumpShot                 = QuickToggleMods(ActivateHoldButton[4] , ActivatePressButton[4]  ,ToggleJumpShot              ,15);
	        
	
	   		if(ToggleVmSpeed)
			{
				if(ToggleVmSpeed == 0) vm_tctrl( 0);	
			    if(ToggleVmSpeed == 1) vm_tctrl(-2);
			    if(ToggleVmSpeed == 2) vm_tctrl(-4);
			   	if(ToggleVmSpeed == 3) vm_tctrl(-6);
			   	if(ToggleVmSpeed == 4) vm_tctrl(-8);
			    if(ToggleVmSpeed == 5) vm_tctrl(-9);   	
			} 
			if(ToggleTaylorAR[ProfileIdx] == 1) 
    		{
       			if(get_ival(Ads) && get_ival(Fire))
        		{ 	
        			combo_run(Antirecoil);
        		}
	        }
			if(ToggleTaylorAR[ProfileIdx] == 2) 
		    { 
	        	if(get_ival(Ads) && get_ival(Fire))
	        	{
		    		SmartRumble = get_rumble(RumbleToUse());
		    	
			    	if(SmartRumble > 10 && SmartRumble < 90) 
					{
						AntirecoilStrength = TaylorARVert[ProfileIdx] + SmartRumble / 2;
					} 	
					if(SmartRumble < 10) 
					{
						SetVal(PS4_RY,TaylorARVert[ProfileIdx]);
						SetVal(PS4_RX,TaylorARHoriz[ProfileIdx]);
					}
					else
					{ 	
						SetVal(PS4_RY,AntirecoilStrength);
						SetVal(PS4_RX,TaylorARHoriz[ProfileIdx]);	
					}
	    	    	AntirecoilStrength  = 0; 
	    	    	SmartRumble = 0; 
				}
		    } 
		    if(ToggleProgressive[ProfileIdx] == 1) 
			{
				if(VerticalStart[ProfileIdx] < VerticalEnd[ProfileIdx])
					i_val = 1;
				else
					i_val = -1; 
	    			    
				i_pnt = (VerticalTime[ProfileIdx] * 10) / (abs(VerticalStart[ProfileIdx] - VerticalEnd[ProfileIdx])); 
				
	        	if(get_ival(Fire))
	        	{
	        		if(!p_complete())  
	    	   			ar_y = p_val();
	    			else
	           			ar_y = VerticalEnd[ProfileIdx];
	           			
		            SmartRumble = get_rumble(RumbleToUse())
		             
					if(SmartRumble > 10 && SmartRumble < 90) 
					{
						AntirecoilStrength = ar_y + SmartRumble / 4;
						
					} 	
					if(SmartRumble < 10) 
					{
						SetVal(PS4_RY,ar_y);
						SetVal(PS4_RX,Horizontal[ProfileIdx]); 
					}
					else
				    { 	
				
						SetVal(PS4_RY,AntirecoilStrength);  
						SetVal(PS4_RX,Horizontal[ProfileIdx]); 
					}
					
		    		AntirecoilStrength  = 0; 
		    		SmartRumble = 0; 
			        
			    }
			    if(!get_ival(Fire))  
				{
					ar_y = VerticalStart[ProfileIdx];
					i_cnt = 0;
					i_num = 0;
			    }
			}
	        if(ToggleAAV3[ProfileIdx] == 1) 
			{   
				if(ToggleADirection[ProfileIdx] == 1) { 
					AngleDirection = (get_val(PS4_RX) > 0);
				}
				
				RX = get_val(PS4_RX);                                
				RY = get_val(PS4_RY); 
				RightStick = isqrt(pow(RX,2) + pow(RY,2));
				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
				MaxMagnitude = (ActualMagnitude < 100);                                  
				angle = angle % 360;
				Tracking = (Tracking + TrackingSpeed) % 360;
		
				if(ToggleAAType[ProfileIdx] == 0){
				CosAngle = PolarArray[(angle + 270) % 360];  
				SinAngle = PolarArray[angle % 360];
				CAngle = PolarArray[(Tracking + 270) % 360];  
				SAngle = PolarArray[Tracking % 360];
			    }
			    if(ToggleAAType[ProfileIdx] == 1){
			    CosAngle = LinearArray[(angle + 270) % 360];  
				SinAngle = LinearArray[angle % 360];
				CAngle = LinearArray[(Tracking + 270) % 360];  
				SAngle = LinearArray[Tracking % 360];
				}
				if(TaylorTracking){ 
				Tracker1 = (TrackingSize * SAngle/100);
        		Tracker2 = (TrackingSize * CAngle/100);
        		} 
                
	            if ((abs(get_val(PS4_RX)) < 10) * (abs(get_val(PS4_RY)) < 10)) 
			    	angle += AdsSpeed[ProfileIdx] + GetAngle;
			    else 
			    	angle += TaylorAngle[ProfileIdx] + GetAngle;
			    
				if(ToggleBoostFire[ProfileIdx] == 1) 
				{
					if(get_ival(Fire))
					{
						SmartAAV1Rumble = get_rumble(RumbleToUse());
						GetAngle = TaylorABoostSpd[ProfileIdx];
					
	    		        if(SmartAAV1Rumble > 10 && SmartAAV1Rumble < 90) 
	    		        {
	    				    PolarStrength  = (TaylorPBoostStr[ProfileIdx] + SmartAAV1Rumble / 6); 
	    				    SmartAAV1Rumble = 0;
	    			    }
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	GetShapes(TaylorPBoostStr[ProfileIdx]/2); 
	    			    }
	    			    else
	    			    {
							GetShapes(PolarStrength/2); 	
				    	} 
				    }
				    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}	
	    		if(get_val(Ads) || get_val(Fire))
	    		{
		        	if(ActualMagnitude < TaylorRadius[ProfileIdx])           
		        	{
			   			SinAngle -= RX;                                                              
						CosAngle -= RY;
					}
					else
					{
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
					}
					if(!ToggleBoostFire[ProfileIdx] == 1 || !get_rumble(RumbleToUse())){
						if(RightStick > TaylorRadius[ProfileIdx]){
							GetShapes(TaylorRadius[ProfileIdx]);
						}else{
							GetShapes(AdsRadius[ProfileIdx]);
						}
					}
			    	PolarStrength = 0; 
			        SmartAAV1Rumble   = 0; 
		   		 } 
			}
			if(ToggleAAV4[ProfileIdx] == 1) 
			{ 
			    if(ToggleADirection[ProfileIdx] == 1){ 
			    	AngleDirection = (get_val(PS4_RX) > 0);
			    }
			    
			  	Rx = get_val(PS4_RX);
				Ry = get_val(PS4_RY);
			    RightStick = isqrt(pow(Rx,2) + pow(Ry,2));
			    
			    if(TaylorTracking){ 
				Tracker1 = (TrackingSize * SAngle/100);
        		Tracker2 = (TrackingSize * CAngle/100);
        		
        		} 
        		if(ToggleAAType[ProfileIdx] == 0){
				CAngle = PolarArray[(Tracking + 270) % 360];  
				SAngle = PolarArray[Tracking % 360];
			    }
			    if(ToggleAAType[ProfileIdx] == 1){
				CAngle = LinearArray[(Tracking + 270) % 360];  
				SAngle = LinearArray[Tracking % 360];
				}
			    Tracking = (Tracking + TrackingSpeed) % 360;
			    
			    if((abs(get_val(PS4_RX)) < 10) * (abs(get_val(PS4_RY)) < 10)) 
			    	Angle = (Angle + AdsSpeed[ProfileIdx] + AngleBoost) % 360;
			    else
			    	Angle = (Angle + TaylorAngle[ProfileIdx] + AngleBoost) % 360;
			    	
			    
				if(ToggleBoostFire[ProfileIdx] == 1) 
				{
					if(get_ival(Fire))
					{
						SmartAAV1Rumble = get_rumble(RumbleToUse());
						AngleBoost = TaylorABoostSpd[ProfileIdx];
					
	    		        if(SmartAAV1Rumble > 10 && SmartAAV1Rumble < 90) 
	    		        {
	    				    PolarStrength  = (TaylorPBoostStr[ProfileIdx] + SmartAAV1Rumble / 6); 
	    				    SmartAAV1Rumble = 0;
	    			    }
	    			    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	    			    	DoNotAtMePolar(POLAR_RS,Angle,TaylorPBoostStr[ProfileIdx]/2)
	    			    }
	    			    else
	    			    {
			    			DoNotAtMePolar(POLAR_RS,Angle,PolarStrength/2)  
				    	} 
				    }
				    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
				}
				
				if((get_ival(Ads) || get_ival(Fire)) && isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> DeadZone ||((get_val(Ads) || get_val(Fire)) && isqrt(abs(get_ival(PS4_LX)) * abs(get_ival(PS4_LX)) + abs(get_ival(PS4_LY)) * abs(get_ival(PS4_LY)))> DeadZone))   
			    {	
					if(!ToggleBoostFire[ProfileIdx] == 1 || !get_rumble(RumbleToUse())) {
						if(RightStick > TaylorRadius[ProfileIdx]) { 
					    	DoNotAtMePolar(POLAR_RS,Angle,TaylorRadius[ProfileIdx])
					    }
					    else
					    {
					    	DoNotAtMePolar(POLAR_RS,Angle,AdsRadius[ProfileIdx])
					    }
					}
				} 
				SmartAAV1Rumble = 0;
				PolarStrength = 0; 
		    }
		    if(ToggleAAV5[ProfileIdx] == 1) 
			{
				RX = get_val(PS4_RX);                                
				RY = get_val(PS4_RY);
				Tracking = (Tracking + TrackingSpeed[ProfileIdx]) % 360;
				CycleRefresh += get_rtime();
				
				if(ToggleADirection[ProfileIdx] == 1) { 
					AngleDirection = (get_val(PS4_RX) > 0);
				}
				if(TaylorTracking[ProfileIdx])
			    {
			       Tracker1 = (TrackingSize[ProfileIdx] * sin(Tracking)/100);
			       Tracker2 = (TrackingSize[ProfileIdx] * cos(Tracking)/100);
		        }
				if(!SpeedBoost) {
			    	if ((abs(get_val(PS4_RX)) < 10) * (abs(get_val(PS4_RY)) < 10)) 
			    	angle += AdsSpeed[ProfileIdx];
			    else 
			    	angle += TaylorAngle[ProfileIdx];
				} 
				if(get_val(Ads) || get_val(Fire))
				{  	
					if(SpeedBoost[ProfileIdx] == 1) 
					{ 
						angle += get_rtime();
						SpeedAngle = (SpeedAngle  + (angle / 100)) % 360;
						
						GetV5Shapes(TaylorRadius[ProfileIdx],SpeedAngle);	
					}
					else
					{
						GetV5Shapes(TaylorRadius[ProfileIdx],angle);	
					} 
				} 
				if(event_release(Ads)){
		        	angle = 0;
		        }
			}
			if(ToggleRapidFire[ProfileIdx] == 1)
			{
			 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
			    RestTime = HoldTime -get_rtime();
			 	if(RestTime < 0) RestTime = 0;
			    
			 	if(get_ival(Fire))
			    	    
			 		combo_run(RAPIDFIRE);
			 	else
			    	combo_stop(RAPIDFIRE);
			    
			    LedBlink(150,300);
			    
			}
		    if(ToggleStrafeShot) 
		    {
		   		if(get_val(Fire))
		        	combo_run(StrafeShot);
				else
		   			combo_stop(StrafeShot);
			}
	      	if(ToggleCancelReload)
			{
				if(event_press(Fire))
					FirstShotBeforeReload = TRUE; 
					
				if(event_press(Reload) && FirstShotBeforeReload)
				{
					ReloadInProgress = TRUE;
					FirstShotBeforeReload = FALSE;
				}
				if(get_val(Reload) && get_ptime(Reload) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(CancelReload);
				}
				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
				    ReloadTime = 0;

				if(ReloadTime > MaxReloadTime)
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime && event_press(Fire))
					combo_run(CancelReload);
			}
			if(ToggleCancelSlide == 1 || ToggleCancelSlide == 2)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(ToggleCancelSlide == 1 && event_release(Crouch))
						combo_run(CancelSlideMW)
					else if(ToggleCancelSlide == 2 && event_release(Crouch))
						combo_run(CancelSlideCW) 
						
					if(ToggleCancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
	                    
	                if(ToggleCancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(ToggleTaylorSens) 
	        {
            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
                        
                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
               		GenStr = GeneralSens;
                }
                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    GenStr = AdsSens;
                }  
                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    GenStr = FireSens;   
                }
                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
                { 
                    GenStr = AdsFireSens;
                }
                sensitivity(PS4_RY,NOT_USE,GenStr);
                sensitivity(PS4_RX,NOT_USE,GenStr);
            }
            if(ToggleHoldBreath[ProfileIdx] == 1)
			{
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}
			if(ToggleBunnyHop)
			{
	            if(get_ival(Jump) && get_ptime(Jump) > 200) 
	                combo_run(Bunnyhop); 
	        }
	        if(ToggleJumpShot) 
			{
				if(get_val(Fire))
					combo_run(JumpShot);
			}
			if(ToggleProneShot) 
			{
				if(get_val(Fire))
					set_val(Crouch,100);
			}
			if(ToggleFastMelee) 
			{
				if(get_val(Melee))
				combo_run(FastMelee);

				if(get_val(Ads) && event_press(Melee) < 500)
				combo_stop(FastMelee);
			}
			if(ToggleEnemyPing) 
        	{
        		if(get_ival(Fire) && get_ptime(Fire) >= 1000)
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing);		
        	}
	     }		
     }
 } 
function GetV5Shapes(f_var,f_angle){ 

	if(!(CycleRefresh++ % TimeInterval))
	{
		if(!SpiralPosition1)                                
		{
			InnerSpiral -= 1;
			if(InnerSpiral < RadiusMin)
				SpiralPosition1 = True;
		}
		else
		{
		    InnerSpiral += 1;
			if(InnerSpiral > f_var)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;
			if(OuterSpiral < RadiusMin)
				SpiralPosition2 = True;
		}
		else
		{
			OuterSpiral += 1;
			if(OuterSpiral >  f_var)
				SpiralPosition2 = False;
		}
		CycleRefresh = 0;
	}
	if(TaylorV5Shapes[ProfileIdx] == 0) 
    {
    	if(AngleDirection){
    		RX += (f_var * cos(f_angle))/100 + Tracker1;
        	RY += (f_var * sin(f_angle))/100 + Tracker2;
        }else{
        	RX += (f_var * sin(f_angle))/100 + Tracker1;
       		RY += (f_var * cos(f_angle))/100 + Tracker2;
        }
    }
    if(TaylorV5Shapes[ProfileIdx] == 1) // SpiralOval
	{
		if(AngleDirection){
			RX += ((OuterSpiral * sin(f_angle))/100 + Tracker1);
       		RY += ((InnerSpiral * cos(f_angle))/100 + Tracker2);
        }else{
        	RX += ((InnerSpiral * cos(f_angle))/100 + Tracker1);
        	RY += ((OuterSpiral * sin(f_angle))/100 + Tracker2);
        } 
    } 
    if(TaylorV5Shapes[ProfileIdx] == 2) // Tall Oval
    {
    	if(AngleDirection){
			RX += ((RadiusMin * sin(f_angle))/100 + Tracker1);
       		RY += ((f_var * cos(f_angle))/100 + Tracker2);
        }else{
        	RX += ((RadiusMin * cos(f_angle))/100 + Tracker1);
        	RY += ((f_var * sin(f_angle))/100 + Tracker2);
        } 
    }
    if(TaylorV5Shapes[ProfileIdx] == 3) // Wide Oval
    {
    	if(AngleDirection){
			RX += ((f_var * sin(f_angle))/100 + Tracker1);
       		RY += ((RadiusMin * cos(f_angle))/100 + Tracker2);
        }else{
        	RX += ((f_var * cos(f_angle))/100 + Tracker1);
        	RY += ((RadiusMin * sin(f_angle))/100 + Tracker2);
        } 
    }
    set_val(PS4_RX, clamp(RX, -100, 100));
	set_val(PS4_RY, clamp(RY, -100, 100));
} 
int RightStick,Rx,Ry;
function LedBlink(f_on,f_off) {
	LedOn  = f_on;
	LedOff = f_off;
	combo_run(BLINK);
}
function DoNotAtMePolar(stick, angle, rad) {
	if(TaylorShapes[ProfileIdx] == 0){  
		if(AngleDirection){
	  		offset(stick + 8, (rad * sin(angle))/ 100 + Tracker1);
	 		offset(stick + 7, (rad * cos(angle))/ 100 + Tracker2);
	 	}else{
	 		offset(stick + 8, (rad * cos(angle))/ 100 + Tracker1);
	 		offset(stick + 7, (rad * sin(angle))/ 100 + Tracker2);
	 	}
 	}
 	if(TaylorShapes[ProfileIdx] == 1){
 		if(AngleDirection){ 	
 			offset(stick + 8, (rad * sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (TaylorRadiusMin[ProfileIdx] * cos(angle)) / 100 + Tracker2 );
  		}else{
  			offset(stick + 8, (rad * cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (TaylorRadiusMin[ProfileIdx] * sin(angle)) / 100 + Tracker2);
  		}
  	}
  	if(TaylorShapes[ProfileIdx] == 2){
  		if(AngleDirection){ 
  			offset(stick + 8, (TaylorRadiusMin[ProfileIdx] * sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (rad * cos(angle)) / 100 + Tracker2);
  	    }else{ 
  	    	offset(stick + 8, (TaylorRadiusMin[ProfileIdx] * cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (rad * sin(angle)) / 100 + Tracker2);
  		} 
  	}
  	if(TaylorShapes[ProfileIdx] == 3){ 
		if(!SpiralPosition1){ 
			InnerSpiral -= 1;
			if(InnerSpiral < TaylorRadiusMin[ProfileIdx])
				SpiralPosition1 = True;
		}else{
	    	InnerSpiral += 1;
			if(InnerSpiral > rad)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2){
			OuterSpiral -= 1;
			if(OuterSpiral < TaylorRadiusMin[ProfileIdx])
				SpiralPosition2 = True;
		}else{
			OuterSpiral += 1;
			if(OuterSpiral >  rad)
				SpiralPosition2 = False;
		}
		if(AngleDirection){ 
			offset(stick + 8, (InnerSpiral * sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (OuterSpiral * cos(angle)) / 100 + Tracker2);
  		}else{
  			offset(stick + 8, (InnerSpiral * cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (OuterSpiral * sin(angle)) / 100 + Tracker2);
  		} 
  	}
  	if(TaylorShapes[ProfileIdx] == 4)
  	{ 
  		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;
	   	} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc; 
	    }
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc; 
	    }
	    else if(Position == 3) {  
	    	x = -100 + inc; y = inc; 
	    }
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	    offset(stick + 8, (rad * x)/100 + Tracker1);
	 	offset(stick + 7, (rad * y)/100 + Tracker2);
	}
 }  
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition1 = True;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = False;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition2 = True;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = False;
	} 
    if(TaylorShapes[ProfileIdx] == 0)                    
	{ 
		if(AngleDirection){
		    offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        }else{
            offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
            offset(PS4_RX ,(f_var * CosAngle)/100 + Tracker2);
        }
	} 
	if(TaylorShapes[ProfileIdx] == 1)        
	{ 
		if(AngleDirection){
        	offset(PS4_RX,(TaylorRadiusMin[ProfileIdx] * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        }else{
        	offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
        	offset(PS4_RX,(TaylorRadiusMin[ProfileIdx] * CosAngle)/ 100 + Tracker2);
        } 
	}
	if(TaylorShapes[ProfileIdx] == 2)                     
	{ 
		if(AngleDirection){
        	offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(TaylorRadiusMin[ProfileIdx] * CosAngle) /100 + Tracker2);  
        }else{
        	offset(PS4_RX,(f_var * CosAngle)/ 100 + Tracker1);
       		offset(PS4_RY,(TaylorRadiusMin[ProfileIdx] * SinAngle) /100 + Tracker2);  
        } 
	} 
	if(TaylorShapes[ProfileIdx] == 3)                  
	{
		if(AngleDirection){
        	offset(PS4_RX,(OuterSpiral * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * CosAngle)/100 + Tracker2);	
        }else{
        	offset(PS4_RX,(OuterSpiral * CosAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * SinAngle)/100 + Tracker2);
        }  
	}
    if(TaylorShapes[ProfileIdx] == 4)
	{
		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	 	offset(PS4_RX,(f_var * x)/100 + Tracker1);
        offset(PS4_RY,(f_var * y)/100 + Tracker2);
	}
}
combo Antirecoil{
// Vertical
   AntirecoilVertical = get_val(PS4_RY) + TaylorARVert[ProfileIdx];  
   if(AntirecoilVertical > 100) AntirecoilVertical = 100;
   if(abs(get_val(PS4_RY)) < abs(TaylorARVert[ProfileIdx]) +  5)
   set_val(PS4_RY, (AntirecoilVertical));
// Horizontal
   AntirecoilHorizontal = get_val(PS4_RX) + TaylorARHoriz[ProfileIdx];
   if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
   if(abs(get_val(PS4_RX)) < abs(TaylorARHoriz[ProfileIdx])  + 5)
   set_val(PS4_RX, AntirecoilHorizontal);
}
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(SlideDelay);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(SlideDelay);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo Bunnyhop{
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
}
combo JumpShot {
set_val(Jump,100);
wait(100);
}
combo CancelReload {
set_val(Swap,100);
wait(20);
wait(20)
set_val(Swap,100);
wait(20);
ReloadInProgress = FALSE; }
combo Saved { 
cls_oled(0); 
String(Misc[14],Medium,0,0);
wait(2000);
DisplayTitle = TRUE; 
} 
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(2000); 
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo DriveMode { 
cls_oled(0);
String(Misc[15],Medium,-15,0);
String(Misc[13],Medium,10,0);
wait(1500);
DisplayTitle = TRUE;
} 
combo StrafeShot{ 
offset(PS4_LX, 100);
wait(StrafeShotTime);
wait(50);
offset(PS4_LX, -100);
wait(StrafeShotTime);
wait(20);
}
combo QuickToggles{ 
wait(1500) 
DisplayTitle  = TRUE; 
reset_leds(); 
} 
function p_complete() { 
    i_cnt++;
    if (i_cnt > VerticalTime[ProfileIdx] * 10) {
    	//--avoid stack overflow
        i_cnt = VerticalTime[ProfileIdx] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
    	i_num = 0;
    	//--adjust ar_y 
    	ar_y += i_val;
    }
    return ar_y;
}	
function correctAngle(angle){
  if(angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function sin(angle){
	if(ToggleAAType[ProfileIdx] == 0) return PolarArray[correctAngle(angle)];
  	return LinearArray[correctAngle(angle)]; 
}
function cos(angle){
	if(ToggleAAType[ProfileIdx] == 0) return PolarArray[(correctAngle(angle) + 90) % 360];
    return LinearArray[(correctAngle(angle) + 90) % 360];
}

function offset( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function SetVal( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_ival(axis))) / 100 + get_ival(axis), -100, 100));
  return;
}
function DisplayToggleOptions(f_name,f_idx,f_string){
	if(ModORVal[f_name] == f_idx)
	{
		String(f_string,Small,6,0);
    } 
 }
function DisplayToggle(f_name,f_idx,f_toggle){

	if(ModORVal[f_name] == f_idx)
	{
    	if(f_toggle == 1)
    		String(Misc[0],Small,6,0);   
    	else 
    	    String(Misc[1],Small,6,0);   
    }
} 
function DisplayMods(f_mod,f_min,f_max,f_string,f_size,f_pos){ 
 
 if(ModORVal[f_mod] >= f_min && ModORVal[f_mod] <= f_max || ModORVal[f_mod] == f_min)
 {
 	String(f_string,f_size,f_pos,0);
 }
}
function String (stringLabel,fontSize,offsetY,offsetX) {
    
    if (fontSize == Small) {
        stringPosition = (127 - get_string_length(stringLabel) * 7) / 2;
        stringHeight = (64 - 10) / 2;
    } 
    
    else if (fontSize == Medium) {
        stringPosition = (127 - get_string_length(stringLabel) * 10) / 2;
        stringHeight = (64 - 16) / 2;
    }
    
    else if (fontSize == Large) {
        stringPosition = (127 - get_string_length(stringLabel) * 15) / 2;
        stringHeight = (64 - 21) / 2;
    }
    Print(stringPosition,stringHeight,stringLabel,fontSize,offsetY,offsetX);
}
function get_string_length(offset) { 
    stringLength = 0;
    while (duint8(offset++)) { stringLength++; }
    return stringLength + 1;
}
function Print (positionString,heightString,captionString,sizeFont,offSetY,offSetX) {
    
        printf(positionString + offSetX,heightString + offSetY,sizeFont,1,captionString);
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}

function EditableVals(f_idx,f_num,f_num2,ValueIndex,ValueIndexMin,ValueIndexMax ,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_idx == f_num || f_idx == f_num2) 
    { 
        if(get_ival(Ads))  
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles = TRUE; 
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles = TRUE; 
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles = TRUE; 
            } 
            BlockButtons();
        }
        if(f_idx == 4 || f_idx == 7)
            number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100) );
        else
            number_to_string(ValueIndex,find_digits(ValueIndex)); 
    }
    return ValueIndex;                
 } 
function ModORValNavi(f_modorval,f_min,f_max) {
	if(ModOrEditMenu[0]) 
	{
	    if(!get_val(Ads))
		{
	    	if(event_press(PS4_UP)) 
	        {
	           	f_modorval = cycle(f_modorval - 1, 0 , 3);
	   			DisplayModsNToggles = TRUE;	
	    	}
	    	if(event_press(PS4_DOWN)) 
	    	{
	        	f_modorval = cycle(f_modorval + 1, 0 , 3);
	            DisplayModsNToggles = TRUE; 
	    	}
	      BlockButtons(); 
	    }
	}
	if(!ModOrEditMenu[0]) 
	{
		if(!get_val(Ads))
		{
			if(event_press(PS4_RIGHT))  
			{     
		        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
		        DisplayModsNToggles = TRUE;   
	   		}     
			if(event_press(PS4_LEFT)) 
			{  
		        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
		        DisplayModsNToggles = TRUE;
			} 
	     BlockButtons(); 
		}
	} 
    if(event_release(PS4_CROSS))
	{
		if(ModOrEditMenu[0]) 
		{
    		if(f_modorval < AmountOfMainIdx) 
			{
				ModOrEditMenu[1] = TRUE;
				ModORVal[1] = AmountOfMods + 1;
				ModOrEditMenu[0] = FALSE;
				ModOrEditMenu[2] = FALSE;
				DisplayModsNToggles = TRUE;	
			} 
	    }
	}
	if(event_press(PS4_CROSS))
	{
		if(ModOrEditMenu[1]) 
		{
			if(f_modorval < 8 || f_modorval >= 10 && f_modorval <= 11)
			{
				ModOrEditMenu[2] = TRUE;
				ModORVal[2] = AmountOfValues + 1;
				ModOrEditMenu[1] = FALSE;
				ModOrEditMenu[0] = FALSE; 
				DisplayModsNToggles = TRUE;
				cls_oled(0);
				
			}
		}
		else if(ModORVal[0] == 1) 
        {
        	ModOrEditMenu[3] = TRUE;
			ModORVal[2]      = 0;
			ModOrEditMenu[0] = FALSE;
			ModOrEditMenu[1] = FALSE;
			DisplayModsNToggles = TRUE;	
		} 
    }
    if(event_release(PS4_CIRCLE) && !ModOrEditMenu[0])
    {
    	if(ModOrEditMenu[1]) 
    	{
			ModOrEditMenu[0] = TRUE;
			ModOrEditMenu[1] = FALSE;
			DisplayModsNToggles = TRUE;
			DisplayTitle = FALSE;
		}
		else if(ModOrEditMenu[2]) 
		{
			ModOrEditMenu[2] = FALSE;
			ModOrEditMenu[1]  = TRUE;
			DisplayModsNToggles = TRUE;	
		}
		else if(ModOrEditMenu[3]) 
		{
			ModOrEditMenu[1] = FALSE;
			ModOrEditMenu[2] = FALSE;
			ModOrEditMenu[3] = FALSE;
			ModOrEditMenu[0]  = TRUE;
			DisplayModsNToggles = TRUE;	
		}	
	}
	if(event_press(PS4_SQUARE))
	{
		ModOrEditMenu[0] = TRUE;
		ModOrEditMenu[2] = FALSE;
		ModOrEditMenu[1] = FALSE;
		DisplayModsNToggles = TRUE; 
	}
	if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 2);
        DisplayModsNToggles = TRUE;   	
    }
    BlockButtons();
return f_modorval; 
}
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function ToggleSwitch(f_name,f_idx,f_val,f_min,f_max) { 
	    
	if(f_name == f_idx) 
    {  	
		if(event_press(PS4_UP))
   		{
   			
	        f_val = cycle(f_val ++, f_min, f_max);
	     
	        if(!f_val)
	            combo_run(RumbleOff);
	        else
	            combo_run(RumbleOn);

	       DisplayModsNToggles = TRUE;
	       
        }
   		if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            if(!f_val)
                combo_run(RumbleOff);
            else
                combo_run(RumbleOn); 
            
            DisplayModsNToggles = TRUE;
    	}
    	if(ModOrEditMenu[1]) { 
	    	if(f_idx == 2){
	    		if(f_val == 1){
	    			ToggleAAV4 = 0;
	    			ToggleAAV5 = 0;
	    		}
	    	}
	    	if(f_idx == 3){
	    		if(f_val == 1){
	    			ToggleAAV3 = 0;
	    			ToggleAAV5 = 0;
	    		}
	    	}
	    	if(f_idx == 4){
	    		if(f_val == 1){
	    			ToggleAAV3 = 0;
	    			ToggleAAV4 = 0;
	    		}
	    	}
	    } 	
    }
    return f_val;
}
function QuickToggleMods(f_hold, f_press,f_val,f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(event_press(f_press)) 
		{
			ModORVal[1] = f_idx;  

			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn);
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff);
			}
			
				DisplayQuickToggles();
				combo_run(QuickToggles);
		
			if(f_val == 1) 
				String(Misc[0],Small,20,0);
           	else if(f_val== 0)
            	String(Misc[1],Small,20,0); 
	         
    	}
	    set_val(f_press, 0)
	   
   } 
   return f_val;
} 
function DisplayQuickToggles() { 

	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    String(Profiles[ProfileIdx],Small,-12,0);
    String(ModNames[ModORVal[1]],Small,-24,0);
} 
function GetEntriesStrings(x) {
  	do{ 
		if(MainMenuId[x++] == -1) 
          break; 
	}while (1);
  	return x;
}
function GetCharsStrings(x){
	if (MainMenuId[x + 1] != -1) return MainMenuId[x + 1] - MainMenuId[x] - 1;
 	return sizeof(MainMenuId) - MainMenuId[x];
}
function ButtonActivation(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_DOWN))
     	{
			HighLight = cycle(HighLight + 1,0,1);
			DisplayModsNToggles = TRUE;
		}
		if(event_press(PS4_UP))
		{
			HighLight = cycle(HighLight - 1,0,1);
			DisplayModsNToggles = TRUE;
		}
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(HighLight == 0) 
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 10 ); 
             	else 
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             		DisplayModsNToggles = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(HighLight == 0)
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 10 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
             		DisplayModsNToggles = TRUE;
            }
        }
        if(HighLight == 0)
        {
       		rect_oled(115,28, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,28, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(HighLight == 1)
		{
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		} 
        String(HoldButtons[ActivateHoldBtnIdx[i]],Small,1,0);
       	String(PressButtons[ActivatePressBtnIdx[i]],Small,12,0);
     }  
 }
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
    }
    return;
    
} 
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		

function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
int mask;
int ret;
int pval_data;
function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}
function Load(){ 

 pval_data = get_pvar(SPVAR_1, -32767, 32767, 0);
 TaylorARVert[0]       = unpack_int16_to_int8(pval_data, 0);
 TaylorARVert[1]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_2, -32767, 32767, 0);
 TaylorARVert[2]       = unpack_int16_to_int8(pval_data, 0);
 TaylorARHoriz[0]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_3, -32767, 32767, 0);
 TaylorARHoriz[1]      = unpack_int16_to_int8(pval_data, 0);
 TaylorARHoriz[2]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_4, -32767, 32767, 0);
 VerticalStart   [0]       = unpack_int16_to_int8(pval_data, 0);
 VerticalStart   [1]       = unpack_int16_to_int8(pval_data, 1);
	
 pval_data = get_pvar(SPVAR_5, -32767, 32767, 0);
 VerticalStart   [2]       = unpack_int16_to_int8(pval_data, 0);
 VerticalEnd     [0]       = unpack_int16_to_int8(pval_data, 1);
	
 pval_data = get_pvar(SPVAR_6, -32767, 32767, 0);
 VerticalEnd     [1]       = unpack_int16_to_int8(pval_data, 0);
 VerticalEnd     [2]       = unpack_int16_to_int8(pval_data, 1);
	
 pval_data = get_pvar(SPVAR_7, 1, 32767, 0);
 VerticalTime    [0]       = unpack_int16_to_int8(pval_data, 0);
 VerticalTime    [1]       = unpack_int16_to_int8(pval_data, 1);
	
 pval_data = get_pvar(SPVAR_8, 1, 32767, pack_int8_to_int16(0,8));
 VerticalTime    [2]       = unpack_int16_to_int8(pval_data, 0);
 DeadZone                  = unpack_int16_to_int8(pval_data, 1); 
 
 pval_data = get_pvar(SPVAR_9, -32767, 32767, 0);
 Horizontal      [0]       = unpack_int16_to_int8(pval_data, 0);
 Horizontal      [1]      = unpack_int16_to_int8(pval_data, 1);

 Horizontal      [2]      = get_pvar(SPVAR_10,-99,99,0); 
 
 pval_data = get_pvar(SPVAR_11, 1, 32767, pack_int8_to_int16(15,15));
 TaylorRadius[0]          = unpack_int16_to_int8(pval_data, 0);
 TaylorRadius[1]          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_12, 1, 32767, pack_int8_to_int16(15,15));
 TaylorRadius[2]         = unpack_int16_to_int8(pval_data, 0);
 TaylorAngle[0]          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_13, 1, 32767, pack_int8_to_int16(15,15));
 TaylorAngle[1]         = unpack_int16_to_int8(pval_data, 0);
 TaylorAngle[2]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_14, 1, 32767, pack_int8_to_int16(10,10));
 TaylorPBoostStr[0]     = unpack_int16_to_int8(pval_data, 0);
 TaylorPBoostStr[1]     = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_15, 1, 32767, pack_int8_to_int16(10,5));
 TaylorPBoostStr[2]     = unpack_int16_to_int8(pval_data, 0);   
 TaylorABoostSpd[0]     = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_16, 1, 32767, pack_int8_to_int16(5,5));
 TaylorABoostSpd[1]      = unpack_int16_to_int8(pval_data, 0);
 TaylorABoostSpd[2]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_17, 1, 32767, pack_int8_to_int16(10,10));
 TaylorRadiusMin[0]          = unpack_int16_to_int8(pval_data, 0);
 TaylorRadiusMin[1]          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_18, 1, 32767, pack_int8_to_int16(10,10));
 TaylorRadiusMin[2]         = unpack_int16_to_int8(pval_data, 0);
 AdsSpeed[0]                = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_19, 1, 32767, pack_int8_to_int16(10,10));
 AdsSpeed[1]      = unpack_int16_to_int8(pval_data, 0);
 AdsSpeed[2]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_20, 1, 32767, pack_int8_to_int16(10,10));
 AdsRadius[0]          = unpack_int16_to_int8(pval_data, 0);
 AdsRadius[1]          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_21, 1, 32767, pack_int8_to_int16(10,1));
 AdsRadius[2]          = unpack_int16_to_int8(pval_data, 0);
 RateOfFire[0]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_22, 1, 32767, pack_int8_to_int16(1,1));
 RateOfFire[1]         = unpack_int16_to_int8(pval_data, 0);
 RateOfFire[2]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_23, 1, 32767, pack_int8_to_int16(0, 0));
 TaylorV5Shapes[0]          = unpack_int16_to_int8(pval_data, 0);
 TaylorV5Shapes[1]          = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_24, 1, 32767, pack_int8_to_int16(0, 0));
 TaylorV5Shapes[2]       = unpack_int16_to_int8(pval_data, 0);
 TaylorShapes[0]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_25, 1, 32767, pack_int8_to_int16(0, 0));
 TaylorShapes[1]         = unpack_int16_to_int8(pval_data,0);
 TaylorShapes[2]         = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_26, 1, 32767, pack_int8_to_int16(0, 0));
 ToggleTaylorAR[0]         = unpack_int16_to_int8(pval_data,0);
 ToggleTaylorAR[1]         = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_27, 1, 32767, pack_int8_to_int16(0,2));
 ToggleTaylorAR[2]         = unpack_int16_to_int8(pval_data,0);
 TrackingSize[0]           = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_28, 1, 32767, pack_int8_to_int16(2,2));
 TrackingSize[1]     = unpack_int16_to_int8(pval_data,0);
 TrackingSize[2]     = unpack_int16_to_int8(pval_data,1);

 pval_data = get_pvar(SPVAR_29, 1, 32767, pack_int8_to_int16(2,2));
 TrackingSpeed[0]     = unpack_int16_to_int8(pval_data,0);
 TrackingSpeed[1]     = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_30, 1, 32767, pack_int8_to_int16(2,0));
 TrackingSpeed[2]     = unpack_int16_to_int8(pval_data,0);
 ToggleVmSpeed        = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_31, 1, 32767, 0);
 ToggleProgressive[0]= unpack_usigned(pval_data, 0, 1);
 ToggleProgressive[1]= unpack_usigned(pval_data, 1, 1);
 ToggleProgressive[2]= unpack_usigned(pval_data, 2, 1);
 ToggleAAV3[0]	= unpack_usigned(pval_data, 3, 1);
 ToggleAAV3[1]	= unpack_usigned(pval_data, 4, 1);
 ToggleAAV3[2]	= unpack_usigned(pval_data, 5, 1);
 ToggleAAV4[0]	= unpack_usigned(pval_data, 6, 1);
 ToggleAAV4[1]	= unpack_usigned(pval_data, 7, 1);
 ToggleAAV4[2]	= unpack_usigned(pval_data, 8, 1);
 ToggleRapidFire[0]	= unpack_usigned(pval_data, 9, 1);
 ToggleRapidFire[1]	= unpack_usigned(pval_data,10, 1);
 ToggleRapidFire[2]	= unpack_usigned(pval_data,11, 1);
 
 pval_data = get_pvar(SPVAR_32, 1, 32767, 0);
 ToggleAAType[0]= unpack_usigned(pval_data, 0, 1);
 ToggleAAType[1]= unpack_usigned(pval_data, 1, 1);
 ToggleAAType[2]= unpack_usigned(pval_data, 2, 1);
 ToggleAAV5[0]	= unpack_usigned(pval_data, 3, 1);
 ToggleAAV5[1]	= unpack_usigned(pval_data, 4, 1);
 ToggleAAV5[2]	= unpack_usigned(pval_data, 5, 1);
 ToggleADirection[0]= unpack_usigned(pval_data, 6, 1);
 ToggleADirection[1]= unpack_usigned(pval_data, 7, 1);
 ToggleADirection[2]= unpack_usigned(pval_data, 8, 1);
 ToggleBoostFire[0] = unpack_usigned(pval_data, 9, 1);
 ToggleBoostFire[1] = unpack_usigned(pval_data,10, 1);
 ToggleBoostFire[2] = unpack_usigned(pval_data,11, 1);
 
 
 pval_data = get_pvar(SPVAR_33, 1, 32767, 0);
 ToggleStrafeShot    = unpack_usigned(pval_data, 0, 1);
 ToggleCancelReload  = unpack_usigned(pval_data, 1, 1);
 ToggleHoldBreath[0] = unpack_usigned(pval_data, 2, 1);
 ToggleHoldBreath[1] = unpack_usigned(pval_data, 3, 1);
 ToggleHoldBreath[2] = unpack_usigned(pval_data, 4, 1);
 ToggleTaylorSens    = unpack_usigned(pval_data, 5, 1);
 ToggleEnemyPing     = unpack_usigned(pval_data, 6, 1);
 ToggleBunnyHop      = unpack_usigned(pval_data, 7, 1);
 ToggleProneShot     = unpack_usigned(pval_data, 8, 1);
 ToggleJumpShot      = unpack_usigned(pval_data, 9, 1);
 ToggleFastMelee     = unpack_usigned(pval_data,10, 1); 
 ToggleBlockRumble   = unpack_usigned(pval_data,11, 1);
 
 pval_data = get_pvar(SPVAR_34, 1, 32767, 0);
 TaylorTracking[0]   = unpack_usigned(pval_data, 0, 1);
 TaylorTracking[1]   = unpack_usigned(pval_data, 1, 1);
 TaylorTracking[2]   = unpack_usigned(pval_data, 2, 1);
 SpeedBoost[0]       = unpack_usigned(pval_data, 3, 1);
 SpeedBoost[1]       = unpack_usigned(pval_data, 4, 1);
 SpeedBoost[2]       = unpack_usigned(pval_data, 5, 1);
 
 
 GeneralSens         = get_pvar(SPVAR_35,   1, 327,  100); 
 AdsSens             = get_pvar(SPVAR_36,   1, 327,  100); 
 FireSens            = get_pvar(SPVAR_37,   1, 327,  100);
 AdsFireSens         = get_pvar(SPVAR_38,   1, 327,  100); 
 MaxReloadTime       = get_pvar(SPVAR_39,   1,9000, 2000);
 SlideDelay          = get_pvar(SPVAR_40,   1, 200,   80);
   
 pval_data = get_pvar(SPVAR_41, 1, 32767, pack_int8_to_int16(0,0));
 Buttons                     = unpack_int16_to_int8(pval_data, 0);
 ToggleCancelSlide           = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_42, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [0]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[0]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_43, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [1]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[1]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_44, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [2]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[2]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_45, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [3]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[3]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_46, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [4]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[4]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_47, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [5]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[5]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_48, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [6]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[6]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_49, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [7]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[7]      = unpack_int16_to_int8(pval_data, 1);
 
 set_pvar(SPVAR_50,StrafeShotTime    ); 
 

 } 
function Save(){ 

 pval_data = pack_int8_to_int16(TaylorARVert[0],TaylorARVert[1]);    
 set_pvar(SPVAR_1,pval_data); 
 pval_data = pack_int8_to_int16(TaylorARVert[2],TaylorARHoriz[0]);    
 set_pvar(SPVAR_2,pval_data);
 pval_data = pack_int8_to_int16(TaylorARHoriz[1],TaylorARHoriz[2]);    
 set_pvar(SPVAR_3,pval_data);
 pval_data = pack_int8_to_int16(VerticalStart[0],VerticalStart[1]);     
 set_pvar(SPVAR_4,pval_data);
 pval_data = pack_int8_to_int16(VerticalStart[2],VerticalEnd[0]);     
 set_pvar(SPVAR_5,pval_data);
 pval_data = pack_int8_to_int16(VerticalEnd[1],VerticalEnd[2]);     
 set_pvar(SPVAR_6,pval_data); 
 pval_data = pack_int8_to_int16(VerticalTime[0],VerticalTime[1]); 
 set_pvar(SPVAR_7,pval_data);
 pval_data = pack_int8_to_int16(VerticalTime[2],DeadZone); 
 set_pvar(SPVAR_8,pval_data);
 pval_data = pack_int8_to_int16(Horizontal[0],Horizontal[1]); 
 set_pvar(SPVAR_9,pval_data);
 set_pvar(SPVAR_10,Horizontal[2]);
 pval_data = pack_int8_to_int16(TaylorRadius[0],TaylorRadius[1]);    
 set_pvar(SPVAR_11,pval_data); 
 pval_data = pack_int8_to_int16(TaylorRadius[2],TaylorAngle[0]);    
 set_pvar(SPVAR_12,pval_data); 
 pval_data = pack_int8_to_int16(TaylorAngle[1],TaylorAngle[2]);    
 set_pvar(SPVAR_13,pval_data); 
 pval_data = pack_int8_to_int16(TaylorPBoostStr[0],TaylorPBoostStr[1]);    
 set_pvar(SPVAR_14,pval_data); 
 pval_data = pack_int8_to_int16(TaylorPBoostStr[2],TaylorABoostSpd[0]);    
 set_pvar(SPVAR_15,pval_data); 
 pval_data = pack_int8_to_int16(TaylorABoostSpd[1],TaylorABoostSpd[2]);    
 set_pvar(SPVAR_16,pval_data);
 pval_data = pack_int8_to_int16(TaylorRadiusMin[0],TaylorRadiusMin[1]);    
 set_pvar(SPVAR_17,pval_data); 
 pval_data = pack_int8_to_int16(TaylorRadiusMin[2],AdsSpeed[0]);    
 set_pvar(SPVAR_18,pval_data); 
 pval_data = pack_int8_to_int16(AdsSpeed[1],AdsSpeed[2]);    
 set_pvar(SPVAR_19,pval_data);
 pval_data = pack_int8_to_int16(AdsRadius[0],AdsRadius[1]);    
 set_pvar(SPVAR_20,pval_data);
 pval_data = pack_int8_to_int16(AdsRadius[2],RateOfFire[0]);    
 set_pvar(SPVAR_21,pval_data);
 pval_data = pack_int8_to_int16(RateOfFire[1],RateOfFire[2]);    
 set_pvar(SPVAR_22,pval_data);
 pval_data = pack_int8_to_int16(TaylorV5Shapes[0],TaylorV5Shapes[1]);    
 set_pvar(SPVAR_23,pval_data);
 pval_data = pack_int8_to_int16(TaylorV5Shapes[2],TaylorShapes[0]);    
 set_pvar(SPVAR_24,pval_data);
 pval_data = pack_int8_to_int16(TaylorShapes[1],TaylorShapes[2]);    
 set_pvar(SPVAR_25,pval_data);
 pval_data = pack_int8_to_int16(ToggleTaylorAR[0],ToggleTaylorAR[1]);    
 set_pvar(SPVAR_26,pval_data);
 pval_data = pack_int8_to_int16(ToggleTaylorAR[2],TrackingSize[0]);    
 set_pvar(SPVAR_27,pval_data);
 pval_data = pack_int8_to_int16(TrackingSize[1],TrackingSize[2]);    
 set_pvar(SPVAR_28,pval_data);
 pval_data = pack_int8_to_int16(TrackingSpeed[0],TrackingSpeed[1]);    
 set_pvar(SPVAR_29,pval_data);
 pval_data = pack_int8_to_int16(TrackingSpeed[2],ToggleVmSpeed);    
 set_pvar(SPVAR_30,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleProgressive[0]   ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleProgressive[1]   ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleProgressive[2]   ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV3[0]          ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV3[1]          ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV3[2]          ,5, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV4[0]          ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV4[1]          ,7, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV4[2]          ,8, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[0]     ,9, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[1]    ,10, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[2]    ,11, 1);
 set_pvar(SPVAR_31,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleAAType[0]        ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleAAType[1]        ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleAAType[2]        ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV5[0]          ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV5[1]          ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV5[2]          ,5, 1);
 pval_data = pack_usigned(pval_data, ToggleADirection[0]    ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleADirection[1]    ,7, 1);
 pval_data = pack_usigned(pval_data, ToggleADirection[2]    ,8, 1);
 pval_data = pack_usigned(pval_data, ToggleBoostFire[0]     ,9, 1);
 pval_data = pack_usigned(pval_data, ToggleBoostFire[1]    ,10, 1);
 pval_data = pack_usigned(pval_data, ToggleBoostFire[2]    ,11, 1);
 set_pvar(SPVAR_32,pval_data);
 
 
 pval_data = pack_usigned(pval_data, ToggleStrafeShot       ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleCancelReload     ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[0]    ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[1]    ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[2]    ,4, 1);
 pval_data = pack_usigned(pval_data, ToggleTaylorSens       ,5, 1);
 pval_data = pack_usigned(pval_data, ToggleEnemyPing        ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleBunnyHop        , 7, 1);
 pval_data = pack_usigned(pval_data, ToggleProneShot       , 8, 1);
 pval_data = pack_usigned(pval_data, ToggleJumpShot        , 9, 1);
 pval_data = pack_usigned(pval_data, ToggleFastMelee       ,10, 1);
 pval_data = pack_usigned(pval_data, ToggleBlockRumble     ,11, 1);
 set_pvar(SPVAR_33,pval_data);
 
 pval_data = pack_usigned(pval_data, TaylorTracking[0]      ,0, 1);
 pval_data = pack_usigned(pval_data, TaylorTracking[1]      ,1, 1);
 pval_data = pack_usigned(pval_data, TaylorTracking[2]      ,2, 1);
 pval_data = pack_usigned(pval_data, SpeedBoost[0]          ,3, 1);
 pval_data = pack_usigned(pval_data, SpeedBoost[1]          ,4, 1);
 pval_data = pack_usigned(pval_data, SpeedBoost[2]          ,5, 1);
 set_pvar(SPVAR_34,pval_data);
 
 set_pvar(SPVAR_35,GeneralSens         ); 
 set_pvar(SPVAR_36,AdsSens             ); 
 set_pvar(SPVAR_37,FireSens            ); 
 set_pvar(SPVAR_38,AdsFireSens         ); 
 set_pvar(SPVAR_39,MaxReloadTime       ); 
 set_pvar(SPVAR_40,SlideDelay          ); 
 
 pval_data = pack_int8_to_int16(Buttons,ToggleCancelSlide);     
 set_pvar(SPVAR_41,pval_data);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[0],ActivatePressBtnIdx [0]);     
 set_pvar(SPVAR_42,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[1],ActivatePressBtnIdx [1]);     
 set_pvar(SPVAR_43,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[2],ActivatePressBtnIdx [2]);     
 set_pvar(SPVAR_44,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[3],ActivatePressBtnIdx [3]);     
 set_pvar(SPVAR_45,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[4],ActivatePressBtnIdx [4]);     
 set_pvar(SPVAR_46,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[5],ActivatePressBtnIdx [5]);     
 set_pvar(SPVAR_47,pval_data);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[6],ActivatePressBtnIdx [6]);     
 set_pvar(SPVAR_48,pval_data);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[7],ActivatePressBtnIdx [7]);     
 set_pvar(SPVAR_49,pval_data);
 
 set_pvar(SPVAR_50,StrafeShotTime); 
 
 
 
 


 }
int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function MenuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 30;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 18; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(MENU_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 53,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 18;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
const uint8 MENU_SCROLL_TEXT[] = {
//    1			2		   3		4	     5		     6		   7		  8		     9         10	       11	   12		  13	  14		 15		  16		17        18
     _space, _left,	   _space,   _right,	_space,    _N,	      _e,         _x,       _t,        _space,    _M,      _o,       _d,     _slash,    _V,      _a,       _l,       _space,        
     _space,   _o,	     _r,     _space,    _up,	  _space,	  _down,	 _space,	_F,        _o,		  _r,	   _space,   _T,     _o, 	     _g,	  _g,		_l,	      _e,
     _space, _X,       _slash,       _A,       _space,     _F,	  _o,	      _r,		_space,	   _E,	      _d,	   _i,		  _t,		 _space,	 _M,	  _e,		_n,      _u,
     _space, _space,  _O,        _slash,   _B, _space,     _T,       _o,       _space,     _E,       _x,         _i,       _t,      _space,    _M,     _e,        _n,     _u,
     _space, _Y,_triangle, _space, _C,_h,_a,_n,_g,_e, _space, _P,_r,_o,_f,_i,_l,_e,
     _space,   _H,	  _o,	    _l,		_d,	      _space,	 _L,	    _2, 	    _slash,    _L,	  _T,    _space,		_left,       _space, _O, _r, _space,_right,
     _space,   _T,	   _o,    _space,   _A,	    _d, _j,	      _u,	 _s,	_t,     _space,		   _V,	  _a,		 _l, 	     _u,	  _e,		_s,	     _space,
     _space, _O,	   _r,     _space,    _B,   _u,		_t,	      _t,		 _o,		_n,	        _space,		   _C,		  _h,		 _o,	 _i,	  _c,		_e,      _s
};    


define  _0 = 48,   _A = 65,   _K = 75,   _U =  85,   _e = 101,   _o = 111,   _y       = 121,    _plus      = 43, _slash     = 47 , _dot     =  46;
define  _1 = 49,   _B = 66,   _L = 76,   _V =  86,   _f = 102,   _p = 112,   _z       = 122;
define  _2 = 50,   _C = 67,   _M = 77,   _W =  87,   _g = 103,   _q = 113,   _space   =  32;
define  _3 = 51,   _D = 68,   _N = 78,   _X =  88,   _h = 104,   _r = 114,   _bang    =  33;
define  _4 = 52,   _E = 69,   _O = 79,   _Y =  89,   _i = 105,   _s = 115,   _quote   =  34;
define  _5 = 53,   _F = 70,   _P = 80,   _Z =  90,   _j = 106,   _t = 116,   _hash    =  35;
define  _6 = 54,   _G = 71,   _Q = 81,   _a =  97,   _k = 107,   _u = 117,   _dollar  =  36;
define  _7 = 55,   _H = 72,   _R = 82,   _b =  98,   _l = 108,   _v = 118,   _percent =  37;
define  _8 = 56,   _I = 73,   _S = 83,   _c =  99,   _m = 109,   _w = 119,   _and     =  38;
define  _9 = 57,   _J = 74,   _T = 84,   _d = 100,   _n = 110,   _x = 120,   _tick    =  39;
define _left     = 133,   _right = 134,_up       = 131,_down     = 132,_cross    = 127, _circle   = 128, _triangle = 130;
