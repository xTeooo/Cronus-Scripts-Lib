/* 
  _____               .___                         __      __                   _____                              /\ _________          .__       .___  __      __                 
  /     \    ____    __| _/  ____  _______   ____  /  \    /  \_____   _______ _/ ____\_____   _______   ____      / / \_   ___ \   ____  |  |    __| _/ /  \    /  \_____   _______ 
 /  \ /  \  /  _ \  / __ | _/ __ \ \_  __ \ /    \ \   \/\/   /\__  \  \_  __ \\   __\ \__  \  \_  __ \_/ __ \    / /  /    \  \/  /  _ \ |  |   / __ |  \   \/\/   /\__  \  \_  __ \
/    Y    \(  <_> )/ /_/ | \  ___/  |  | \/|   |  \ \        /  / __ \_ |  | \/ |  |    / __ \_ |  | \/\  ___/   / /   \     \____(  <_> )|  |__/ /_/ |   \        /  / __ \_ |  | \/
\____|__  / \____/ \____ |  \___  > |__|   |___|  /  \__/\  /  (____  / |__|    |__|   (____  / |__|    \___  > / /     \______  / \____/ |____/\____ |    \__/\  /  (____  / |__|   
        \/              \/      \/              \/        \/        \/                      \/              \/  \/             \/                    \/         \/        \/         
  _________                  __     __   .__         .__     ___________                  ___ ___                      .___ 
 /   _____/  ____    ____  _/  |_ _/  |_ |__|  ______|  |__  \__    ___/_______  ___.__. /   |   \ _____   _______   __| _/ 
 \_____  \ _/ ___\  /  _ \ \   __\\   __\|  | /  ___/|  |  \   |    |   \_  __ \<   |  |/    ~    \\__  \  \_  __ \ / __ |  
 /        \\  \___ (  <_> ) |  |   |  |  |  | \___ \ |   Y  \  |    |    |  | \/ \___  |\    Y    / / __ \_ |  | \// /_/ |  
/_______  / \___  > \____/  |__|   |__|  |__|/____  >|___|  /  |____|    |__|    / ____| \___|_  / (____  / |__|   \____ |   Edition V1.00  
        \/      \/                                \/      \/                     \/            \/       \/              \/  

___________                .__                   ________           .__   _____   __   ________   ____ 
\__    ___/_____    ___.__.|  |    ____  _______ \______ \  _______ |__|_/ ____\_/  |_ \_____  \ /_   |
  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ |    |  \ \_  __ \|  |\   __\ \   __\ /  ____/  |   |
  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \/ |    `   \ |  | \/|  | |  |    |  |  /       \  |   |  Script Author 
  |____|   (____  / / ____||____/ \____/  |__|   /_______  / |__|   |__| |__|    |__|  \_______ \ |___|
                \/  \/                                   \/                                    \/       
_________   ____    _____    ___ ___  ________  __________  ___________                         
\_   ___ \ /_   |  /  |  |  /   |   \ \_____  \ \______   \ \__    ___/  ____  _____     _____  
/    \  \/  |   | /   |  |_/    ~    \  _(__  <  |       _/   |    |   _/ __ \ \__  \   /     \ 
\     \____ |   |/    ^   /\    Y    / /       \ |    |   \   |    |   \  ___/  / __ \_|  Y Y  \
 \______  / |___|\____   |  \___|_  / /______  / |____|_  /   |____|    \___  >(____  /|__|_|  /  Testing Team 
        \/            |__|        \/         \/         \/                  \/      \/       \/ 
        
 __________ __________ ________       _____   .___    _____    ___________                          
\______   \\______   \\_____  \     /  _  \  |   |  /     \   \__    ___/  ____  _____     _____   
 |     ___/ |       _/ /   |   \   /  /_\  \ |   | /  \ /  \    |    |   _/ __ \ \__  \   /     \  
 |    |     |    |   \/    |    \ /    |    \|   |/    Y    \   |    |   \  ___/  / __ \_|  Y Y  \  Testing Team 
 |____|     |____|_  /\_______  / \____|__  /|___|\____|__  /   |____|    \___  >(____  /|__|_|  / 
                   \/         \/          \/              \/                  \/      \/       \/         
   _____                           ___.                    
 \      \    ____    ____  ________\_ |__  _____   _______ 
 /   |   \  /  _ \  /  _ \ \___   / | __ \ \__  \  \_  __ \
/    |    \(  <_> )(  <_> ) /    /  | \_\ \ / __ \_ |  | \/   SmartSens & Other Code Possibly   
\____|__  / \____/  \____/ /_____ \ |___  /(____  / |__|   
        \/                       \/     \/      \/ 
 _________           __     __          
\______   \_____   _/  |_ _/  |_   ______
 |    |  _/\__  \  \   __\\   __\ /  ___/
 |    |   \ / __ \_ |  |   |  |   \___ \     Pretty Sure there will be code I use from the GPC GodFather/Reducer 
 |______  /(____  / |__|   |__|  /____  >
        \/      \/                    \/ 
 _______             ________         ___________.__             ___________.__   ________ .__     ___________        __________  
\______ \    ____   /  _____/ ________\__    ___/|  |__    ____  \_   _____/|__| /  _____/ |  |__  \__    ___/  ____  \______   \ 
 |    |  \  /  _ \ /   \  ___ \___   /  |    |   |  |  \ _/ __ \  |    __)  |  |/   \  ___ |  |  \   |    |   _/ __ \  |       _/ 
 |    `   \(  <_> )\    \_\  \ /    /   |    |   |   Y  \\  ___/  |     \   |  |\    \_\  \|   Y  \  |    |   \  ___/  |    |   \   No doubt Use Code from my Bro or had help at somepoint :)    
/_______  / \____/  \______  //_____ \  |____|   |___|  / \___  > \___  /   |__| \______  /|___|  /  |____|    \___  > |____|_  / 
        \/                 \/       \/                \/      \/      \/                \/      \/                 \/         \/  

________            _______             __      _____     __      _____           
\______ \    ____   \      \    ____  _/  |_   /  _  \  _/  |_   /     \    ____  
 |    |  \  /  _ \  /   |   \  /  _ \ \   __\ /  /_\  \ \   __\ /  \ /  \ _/ __ \ 
 |    `   \(  <_> )/    |    \(  <_> ) |  |  /    |    \ |  |  /    Y    \\  ___/    ( Polar Aim Assist - Real Polar Aim Assist )  < < Best Creator !!! 
/_______  / \____/ \____|__  / \____/  |__|  \____|__  / |__|  \____|__  / \___  >
        \/                 \/                        \/                \/      \/    

Thanks to Excalibur - Swizzy and any other Cronus Community Devs  
===========================================================
		  *** M e n u  N a v i g a t i o n ***
===========================================================
Enter Mod Menu             = Hold L2/LT & Press Options 
Exit Mod Menu              = Press Circle/B
Enter Edit Menu            = Press Cross/A
Exit Edit Menu             = Press Circle/B 
Enable/Disable KillSwitch  = Hold L2/LT & Press Share/View 
Change Profiles In ModMenu = Press TRIANGLE/Y 
Turn Mods ON/OFF           = Press UP/Down 

*/
// Add More Strings for Misc Display Text, Example Add More to the Title Screen Display \\
const string Misc[] = { "MW/CW  ", "On", "Off","ScottishTryHard","Edition V1.00","Taylordrift21","DriveMode","Enabled","Disabled"," Profile 1 "," Profile 2 "," Profile 3 ","ModernWarfare","Cold War","Press Cross/A","" };

const string ARToggle[] = { "Choose Rumble AR","Legacy AR","Polar MW Rumble","Polar CW Rumble","MW Rumble","CW Rumble",""} ; 

const string AAToggle[] = { "Circular","Tall Oval","Wide Oval","Spiral","Helix",""}; 

// This is for the Mod Menu,this is where we display Mods that are added to the script \\
const string ModNames[] = {"AR Type","AA v1","AA v2","Rapid Fire","StrafeAssist","CancelSlide","Adjust Vm Spd","HoldBreath","Enemy Ping","Controller Layout","Profile Btn","Resync Btn","3rd Profile Btns","UseProfileSwitch",
// ModName Number             0         1       2          3             4             5              6             7             8                9               10           11             12               13                 
"QT Rapid Fire","QT Profiles","RecoilOnTheFly","Shape Shifter",""};
//    14             15             16               17 
// This for editable values in the script for Edit Menu, change the values \\
const string ValNames[] = { "Vert Str","Horiz Str","Shape","Radius","Speed","Boost Fire","P Boost Str","P Boost Spd","Min Radius","Shape","Radius",
// ValName Number                 0         1         2       3        4          5            6            7             8          9       10          
                            "Speed","Boost Fire","P Boost Str","P Boost Spd","Min Radius","DeadZone","Rounds/Sec","Strafe Size","Slide Delay","Vm Speed",""}; 
// ValName Number              11        12           13            14            15          16           17         18

// Display Choosable Buttons Via Menu \\ 
const string HoldButtons[]       = { "< Select >","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const string PressButtons[]      = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const int8   HoldBtns []         = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 , PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE }; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

const string ControllerLayouts[] = { "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped",""}

define AmountOfValues = 20;  // If You Add More Editable Values, You need To Increase The Value Here...

// Profiles Variable 
int ProfileIdx; 

// Mod Menu/Toggle Variables/ [3] For 3 Profiles
int TaylorAR[3];
int TaylorAAV1[3];
int TaylorAAV2[3];
int RapidFire[3];
int ToggleHoldBreath[3]; 

int TaylorARVert[3];
int TaylorARHoriz[3];

// V1
int TaylorShape[3];
int TaylorRadius[3];
int TaylorAngle[3]; 
int TaylorBoost[3];
int TaylorBoostStr[3];
int TaylorBoostSpd[3];
int TaylorMinRadius[3];

// V2 
int TaylorShapes[3];
int TaylorSize[3];
int TaylorSpeed[3];
int TaylorFireBoost[3];
int TaylorPBoostStr[3];
int TaylorABoostSpd[3];
int TaylorMinRad[3];
int DeadZone[3];
int VmSpeed[3]; 

// RPS
int RateOfFire[3]; 
// Misc
int EnemyPing,MasterSwitch,Buttons; 

int StrafeAssist;
define TotalNumberOfProfiles = 2; // Amount Of Profiles Available \\ 

define AmountOfModsPerProfiles = 4;  // Amount Of Mods That Can Be Used On Each Profile

// Mixed Variables Needed For The Script To Function \\
 
int DisplayTitle = TRUE; // Display Title When The Script Loads, This Needs TO Be TRUE. 

int ScreenSaver,BlankScreen,ModMenu,DisplayMenu,ModNameIdx,EditMenu,ValNameIdx,SelectedProfileIdx,Profile3; // Menu Variables \\
int DriveMode,LedOn,LedOff; 
define ActivateButtonCount = 6;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx;
int QuickToggleActive,ToggleWidth,ToggleWidth1,ToggleFont,ToggleFont1,TogglePosition;
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping;
int RX,RY,angle,CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,AntirecoilStrength,PolarStrength,Angle,AngleBoost,GetAngle;
int PY,PX;
int AntirecoilVertical; 
int AntirecoilHorizontal;
int SmartSens_side,SmartSens;
int HoldTime,RestTime;
int CancelSlide,SlideDelay;

int STRAFE_MAX; // max +- lx value 
int strafeVal,strafeInc = 5;
define False              = FALSE;
define True               = TRUE; 
const int8 DamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};  

init { 
   Load(); 
 } 
	
main { 
        
       vm_tctrl(VmSpeed[ProfileIdx]);
       ActivateAllButtons(); // Call The Function So That We Can Select Buttons Via Menu, Activate Profiles OR Quick Toggles \\
       Buttons(Buttons); 
      /* Enter The Mod Menu */ 
        if(get_ival(Ads))  // AdsBtn , This is so that if you play flipped and define your button above you can still enter the menu \\ 
        {
        	if(event_press(PS4_OPTIONS))
        	{
        		ModMenu     = TRUE;      // Mod Menu Will Activate \\
        		DisplayMenu = TRUE;      // Display The Mod Menu \\  
        		EditMenu    = FALSE;
        
        		// Make Sure We Don't Enter Edit Menu when  Entering Mod Menu \\
        		
        		if(!ModMenu)             // If NOT in the Mod Menu, Display Title \\
        	    	DisplayTitle = TRUE; 
        	}
        	set_val(PS4_OPTIONS,0); set_val(PS4_RIGHT,0); 
        }
        if(!DisplayTitle)                
        { 
        	if(ModMenu) 
	        {  
	        	vm_tctrl(0);
	        	
	        	ModNameIdx                     = MenuNavigation(ModNameIdx,0,17);   
	        	
	        	TaylorAR  [ProfileIdx]         = ToggleSwitch(ModNameIdx == 0,TaylorAR  [ProfileIdx],0,5); 
	        	TaylorAAV1[ProfileIdx]         = ToggleSwitch(ModNameIdx == 1,TaylorAAV1[ProfileIdx],0,1); 
	        	TaylorAAV2[ProfileIdx]         = ToggleSwitch(ModNameIdx == 2,TaylorAAV2[ProfileIdx],0,1); 
	        	RapidFire [ProfileIdx]         = ToggleSwitch(ModNameIdx == 3,RapidFire [ProfileIdx],0,1);
	        	StrafeAssist                   = ToggleSwitch(ModNameIdx == 4,StrafeAssist,0,1);
	        	CancelSlide                    = ToggleSwitch(ModNameIdx == 5,CancelSlide,0,2); 
	        	EnemyPing                      = ToggleSwitch(ModNameIdx == 7,EnemyPing,0,1);
	        	ToggleHoldBreath[ProfileIdx]   = ToggleSwitch(ModNameIdx == 8,ToggleHoldBreath[ProfileIdx],0,1);
	        	
	        	Buttons                        = ToggleSwitch(ModNameIdx == 9,Buttons,0,21);
	            ActivateIndividualBtnIdx       = ToggleSwitch(ModNameIdx ==10,ActivateIndividualBtnIdx ,0,8);
	            ButtonActivation(0,ModNameIdx,11);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 0 Indicates The 1st Option For Buttons \\// 4 = ModNameIdx == 10
            	ButtonActivation(1,ModNameIdx,12);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 1 Indicates The 2nd Option For Buttons \\// 5 = ModNameIdx == 11 
            	MasterSwitch                   = ToggleSwitch(ModNameIdx == 13,MasterSwitch,0,1);
	        	
                ButtonActivation(2,ModNameIdx,14);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 3 Indicates The 3rd Option For Buttons \\// 6 = ModNameIdx == 13 
                ButtonActivation(3,ModNameIdx,15);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 4 Indicates The 4th Option For Buttons \\// 7 = ModNameIdx == 14
                ButtonActivation(4,ModNameIdx,16);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 3 Indicates The 3rd Option For Buttons \\// 6 = ModNameIdx == 15 
                ButtonActivation(5,ModNameIdx,17);  // This is the function I made to Choose 2 Buttons Via The Menu \\ 4 Indicates The 4th Option For Buttons \\// 7 = ModNameIdx == 16
                
	        }
	        if(EditMenu)   // We are In Edit Menu \\
	        {
	        	vm_tctrl(0);
	        	ValNameIdx        = MenuNavigation(ValNameIdx,0,21); 
	        	
	        	TaylorARVert    [ProfileIdx]  = EditValues(ValNameIdx , 0,TaylorARVert     [ProfileIdx]   ,-99, 99 , 1, 10);  
	            TaylorARHoriz   [ProfileIdx]  = EditValues(ValNameIdx , 1,TaylorARHoriz    [ProfileIdx]   ,-99, 99 , 1, 10); 
	            // Version 1 \\
	            TaylorShape     [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 2,TaylorShape  [ProfileIdx]   ,0,4);
	            TaylorRadius    [ProfileIdx]  = EditValues(ValNameIdx , 3,TaylorRadius     [ProfileIdx]    , 0, 99,  1, 10); 
	            TaylorAngle     [ProfileIdx]  = EditValues(ValNameIdx , 4,TaylorAngle      [ProfileIdx]    , 0, 99,  1, 10); 
	            TaylorBoost     [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 5,TaylorBoost  [ProfileIdx]   ,0,1);
	            TaylorBoostStr  [ProfileIdx]  = EditValues(ValNameIdx , 6,TaylorBoostStr   [ProfileIdx]    , 0, 40, 1, 10); 
	            TaylorBoostSpd  [ProfileIdx]  = EditValues(ValNameIdx , 7,TaylorBoostSpd   [ProfileIdx]    , 0, 40, 1, 10); 
	            TaylorMinRadius [ProfileIdx]  = EditValues(ValNameIdx , 8,TaylorMinRadius  [ProfileIdx]    , 0, 20, 1, 10); 
	            // Version 2 \\ 
	            TaylorShapes    [ProfileIdx]  = ToggleSwitch1(ValNameIdx ==9,TaylorShapes  [ProfileIdx]   ,0,4);
	            TaylorSize      [ProfileIdx]  = EditValues(ValNameIdx ,10,TaylorSize       [ProfileIdx]    , 0, 99, 1, 10);  
	            TaylorSpeed     [ProfileIdx]  = EditValues(ValNameIdx ,11,TaylorSpeed      [ProfileIdx]    , 0, 99, 1, 10); 
	            TaylorFireBoost [ProfileIdx]  = ToggleSwitch1(ValNameIdx ==12,TaylorFireBoost  [ProfileIdx],0,1);
	            TaylorPBoostStr [ProfileIdx]  = EditValues(ValNameIdx ,13,TaylorPBoostStr  [ProfileIdx]    , 0, 40, 1, 10); 
	            TaylorABoostSpd [ProfileIdx]  = EditValues(ValNameIdx ,14,TaylorABoostSpd  [ProfileIdx]    , 0, 40, 1, 10); 
	            TaylorMinRad    [ProfileIdx]  = EditValues(ValNameIdx ,15,TaylorMinRad     [ProfileIdx]    , 0, 20, 1, 10); 
	            DeadZone        [ProfileIdx]  = EditValues(ValNameIdx ,16,DeadZone         [ProfileIdx]    , 0, 20, 1, 10); 
	            
	            // Rapid Fire \\ 
	            RateOfFire      [ProfileIdx]  = EditValues(ValNameIdx ,17,RateOfFire       [ProfileIdx]    , 0, 25,1,10);
	            STRAFE_MAX 					  = EditValues(ValNameIdx ,18,STRAFE_MAX                       , 0, 50,1,10); 
	            SlideDelay                    = EditValues(ValNameIdx ,19,SlideDelay                       , 0,200,1,10); 
	            VmSpeed         [ProfileIdx]  = EditValues(ValNameIdx ,20,VmSpeed          [ProfileIdx]    ,-6,  5,1,10); 
	                   
	            if(ModNameIdx == 0) ValNameIdx = cycle(ValNameIdx,0,1);	
	            if(ModNameIdx == 1) ValNameIdx = cycle(ValNameIdx,2,8);
	            if(ModNameIdx == 2) ValNameIdx = cycle(ValNameIdx,9,16); 
	       		if(ModNameIdx == 3) ValNameIdx = cycle(ValNameIdx,17,17); 
	       		if(ModNameIdx == 4) ValNameIdx = cycle(ValNameIdx,18,18);
	       		if(ModNameIdx == 5) ValNameIdx = cycle(ValNameIdx,19,19); 
	       		if(ModNameIdx == 6) ValNameIdx = cycle(ValNameIdx,20,20); 
	          
	        }  
	    } 
        if(DisplayMenu) // Display The Menu \\ 
        {
        	cls_oled(OLED_BLACK);  // Clear The OLED Display \\ 
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); // Display The Rectangle Around The Text \\ 
        	led(ProfileIdx); // Different Led Colour Based On Which Profile You Are Using \\ 
        	vm_tctrl(0);
        	
        	if(EditMenu)  // If EditMenu Display The Editable Mods \\ 
        	{
        		printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
        	} 
        	else if(ModMenu) // If Mod Menu Display Mods
        	{
        		printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); // Display ModNames ( Medium Text )
        		
        		if(ModNameIdx >= 4 && ModNameIdx <= 6) 
        		{
        			printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                } 
            	if(ModNameIdx < AmountOfModsPerProfiles || ModNameIdx == 7) 
            	{
            		if(ProfileIdx == 0) 
        				printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    	else if(ProfileIdx == 1) 
            			printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
            		else if(ProfileIdx == 2) 
            	    	printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[11]); 
            	}
        	} 
            DisplayMenu = FALSE; 
        } // End Of Display Menu \\
        if(!ModMenu && !EditMenu) // When NOT In Mod Menu And Edit Menu \\
        {
			if(DisplayTitle)  // We Are Displaying Title \\
			{
				cls_oled(OLED_BLACK);  // Clear OLED Display \\
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); // Display The Rectangle Around The Text 
				printf(center_x(get_misc_chars(0), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[0]);  // Display "Title Screen"  \\ Misc[0] = 1st String In The Misc String List \\
				printf(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[3]); // Display "Menu Template" \\ Misc[3] = 3rd String In The Misc String List \\
				printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Misc[4]); // Display "Made By"       \\ Misc[4] = 4th String In The Misc String List \\
				//printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]); // Display "Taylordrift21" \\ Misc[5] = 5th String In The Misc String List \\
				
				// Display The Correct Profile ON The Display Title Screen \\
				
				if(ProfileIdx == 0) 
        			printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    else if(ProfileIdx == 1) 
            		printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
            	else if(ProfileIdx == 2) 
            	    printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[11]); 
				
				DisplayTitle = FALSE;
        		ScreenSaver  = TRUE; 
			}
			if(ScreenSaver)  // ScreenSaver, After 10 seconds The Display Will Go Blank , THIS IS TO PREVENT SCREEN BURN \\ 
    		{
       			BlankScreen += get_rtime();
        	
    			if(BlankScreen >= 10000)
    			{
    				cls_oled(OLED_BLACK);
    				BlankScreen = 0;
    				ScreenSaver = TRUE; 
    				
        		}// End Of BlankScreen \\	
    		}
    		if(get_ival(Fire))
    		{
    			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModMenu && !EditMenu)  // Enter Test Mode \\
	    	    {
			        DriveMode = TRUE; 
			        combo_run(DriveMode);
	    	    }
	    	} 
    		if(DriveMode) 
        	{
	        	LedOn  = 150;
				LedOff = 300;
				combo_run(Blink);
				
    			if(event_press(PS4_SQUARE))
    			{
    				DriveMode = FALSE;
    				combo_run(RumbleOff); 
        		} 
        	} 
            // Switch Profiles Activation \\ 
            led(ProfileIdx);// End of ScreenSaver \\
            
            if(MasterSwitch)
            {
	    		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0]))
	        	{
	    			SelectedProfileIdx =! SelectedProfileIdx;
	    			Profile3 = FALSE;
	    
	    			if(ModMenu) 
	    				DisplayMenu = TRUE; 
	        		else
	            		DisplayTitle = TRUE;
	            	    
	            	if(!Profile3) 
	            	{
	            		if(SelectedProfileIdx) 
	            	   		ProfileIdx = 1;
	            		else
	            	   		ProfileIdx = 0; 
	    			}
	    			if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0])) // Block The Profile Buttons IN Game \\
		    			set_val(ActivatePressButton[0], 0);  
		    	} 
		    	// Profile 3 Activation \\ 
		    	// ActivateHoldButton[1] And ActivatePressButton[1] Are The Buttons Chosen Via Menu TO Activate Profile 3 \\// In The Mod Menu It Looks Like This // ButtonActivation(1,ModNameIdx,5); \\
		    	if(get_ival(ActivateHoldButton[1]) && get_ival(ActivatePressButton[1]))
	            {
	             	ProfileIdx = 2; 
		       	   	Profile3 = TRUE;
		       	    
		       	    if(ModMenu) 
	    				DisplayMenu = TRUE; 
	        		else
	            		DisplayTitle = TRUE;
		       	}           
		       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1])) // Block The Buttons From IN Game \\ 
		    		set_val(ActivatePressButton[1], 0);   
		   	}
		}
		if(!ModMenu && !EditMenu) 
		{
	        if(!DriveMode) // If KillSwitch IS NOT Active The Mods Will Be Active \\  
	        { 
            // Quick Toggle Activation \\ Change The Variables If You Want QuickToggles \\ 0,1,2 < ModNameIdx Number , Choose Your Buttons At The Top Of The Script \\
            
	        	RapidFire[ProfileIdx]  = Quick_Toggle( ActivateHoldButton[2] , ActivatePressButton[2]  ,RapidFire,3);     // ActivateHoldButton[2] , ActivatePressButton[2] =  ButtonActivation(2,ModNameIdx,6);
				MasterSwitch           = Quick_Toggle( ActivateHoldButton[3] , ActivatePressButton[3]  ,MasterSwitch,10); // ActivateHoldButton[3] , ActivatePressButton[3] =  ButtonActivation(3,ModNameIdx,7);
	
			
			if(get_ival(Ads)) 
			{  
				if(event_press(ActivateHoldButton[4])) 
				{ 
					TaylorARVert[ProfileIdx] = cycle(TaylorARVert[ProfileIdx] + 1,-99,99);
					DisplayAR();	
				} 
			    if(event_press(ActivatePressButton[4]))
			    {
			    	TaylorARVert[ProfileIdx] = cycle(TaylorARVert[ProfileIdx] - 1, -99,99); 
			    	DisplayAR();
			    } 
				if(event_press(ActivateHoldButton[5]))
				{
					if(TaylorAAV1[ProfileIdx] == 1) 
						TaylorShape[ProfileIdx] = cycle(TaylorShape[ProfileIdx] + 1, 0 , 4);
				    else if(TaylorAAV2[ProfileIdx] == 1) 
				   	    TaylorShapes[ProfileIdx] = cycle(TaylorShapes[ProfileIdx] + 1, 0 , 4);
				   	    
				   	DisplayAA();
			    } 
			    if(event_press(ActivatePressButton[5]))
			    {
			        if(TaylorAAV1[ProfileIdx])
			    		TaylorShape[ProfileIdx] = cycle(TaylorShape[ProfileIdx] - 1, 0, 4); 
			        else if(TaylorAAV2[ProfileIdx])
			        	TaylorShapes[ProfileIdx] = cycle(TaylorShapes[ProfileIdx] - 1, 0, 4); 
			        	
			        DisplayAA();
			    } 
			    set_val(ActivateHoldButton[4],0); set_val(ActivatePressButton[4],0); set_val(ActivateHoldButton[5],0); set_val(ActivatePressButton[5],0); 
			}
			if(event_release(ActivateHoldButton[4]) || event_release(ActivatePressButton[4]) || event_release(ActivateHoldButton[5]) || event_release(ActivatePressButton[5]))
			{
				ScreenSaver = TRUE;
			}
			if(TaylorAR[ProfileIdx] == 1) 
    		{
	       		if(get_ival(Fire)) 
	        	{ 	
	        		combo_run(Antirecoil);
	        	}
	        }
		    if(TaylorAR[ProfileIdx] == 4 || TaylorAR[ProfileIdx] == 5) 
		    {
	        	if(get_ival(Fire))
	        	{
					if(!get_rumble(RUMBLE_A) || !get_rumble(RUMBLE_B))  
			
						SmartSens(TaylorARVert[ProfileIdx], PS4_RY);
						
		    		else
		    		{
		    			if(TaylorAR[ProfileIdx] == 4) 
		    				SmartRumble = get_rumble(RumbleToUse())
		    			else if(TaylorAR[ProfileIdx] == 5) 
		    				AntirecoilStrength = get_rumble(RUMBLE_A)/2;
		    			
					}
					if(AntirecoilStrength > 10 && AntirecoilStrength < 90) 
					{
						AntirecoilStrength = TaylorARVert[ProfileIdx] + SmartRumble / 4;
					} 	
					if(AntirecoilStrength < 10) 
					{
						SmartSens(TaylorARVert[ProfileIdx], PS4_RY);
						SmartSens(TaylorARHoriz[ProfileIdx],PS4_RX); 
					}
					else
					{ 	
						SmartSens(AntirecoilStrength,PS4_RY);  
						SmartSens(TaylorARHoriz[ProfileIdx],PS4_RX); 	
					}
    	    		AntirecoilStrength  = 0; 
    	    		SmartRumble = 0; 
			    }
			}
			if(TaylorAR[ProfileIdx] == 2 || TaylorAR[ProfileIdx] == 3) 
		    { 
				if(get_ival(Fire))
	        	{
					if(!get_rumble(RUMBLE_A) || !get_rumble(RUMBLE_B))  
			
						SmartSens(TaylorARVert[ProfileIdx] + PY, POLAR_RY);
						
		    		else
		    		{
		    			if(TaylorAR[ProfileIdx] == 2) 
		    				SmartRumble = get_rumble(RumbleToUse())
		    			else if(TaylorAR[ProfileIdx] == 3) 
		    				AntirecoilStrength = get_rumble(RUMBLE_A)/2;
		    			
					}
					if(AntirecoilStrength > 10 && AntirecoilStrength < 90) 
					{
						AntirecoilStrength = TaylorARVert[ProfileIdx] + SmartRumble / 2;
					} 	
					if(AntirecoilStrength < 10) 
					{
						SmartSens(TaylorARVert[ProfileIdx] + PY, POLAR_RY);
						SmartSens(TaylorARHoriz[ProfileIdx] + PX,POLAR_RX); 
					}
					else
					{ 	
						SmartSens(AntirecoilStrength + PY,POLAR_RY);  
						SmartSens(TaylorARHoriz[ProfileIdx] + PX,POLAR_RX); 	
					}
    	    		AntirecoilStrength  = 0; 
    	    		SmartRumble = 0; 
			    }
		    } 	
			if(TaylorAAV1[ProfileIdx] == 1) 
			{     
				RX = get_val(PS4_RX);                                
    			RY = get_val(PS4_RY); 
  				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
  				MaxMagnitude = (ActualMagnitude < 100);             
			
				                       
				angle += TaylorAngle[ProfileIdx] + GetAngle;                                    
				angle = angle % 360;  
				CosAngle = DamPolar[(angle + 270) % 360];  
				SinAngle = DamPolar[angle % 360];
    
   		   		/*=====================================
                | 		Boost On Fire With Rumble     |
                =====================================*/
				if(TaylorBoost[ProfileIdx]) 
			    {
    				if(get_ival(Fire))
    				{
    					SmartRumble = get_rumble(RumbleToUse());
    					GetAngle = TaylorBoostSpd;
    					
	    		        if(SmartRumble > 10 && SmartRumble < 80) 
	    		        {
	    				    PolarStrength  = (TaylorRadius[ProfileIdx] + TaylorBoostStr[ProfileIdx] + TaylorBoostSpd[ProfileIdx] + SmartRumble / 4); 
	    				    SmartRumble = 0;
	    			    }
    			    }
    			    if(event_release(Fire)) 
	    			{
	    				GetAngle = 0;
	    			} 
    			}
	    		if(get_val(Ads) || get_val(Fire))
	    		{
	        		if(ActualMagnitude < TaylorRadius[ProfileIdx])           
	        		{
	           			SinAngle -= RY;                                                              
						CosAngle -= RX;
		    		}
		   			else 
		   			{     
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
					}                                                  
					if(!TaylorBoost[ProfileIdx]) 
					{
						GetShapes(TaylorRadius[ProfileIdx]); 	
					}
						else
						{
							if(!get_rumble(RumbleToUse()))
			    				GetShapes(TaylorRadius[ProfileIdx]); 
			    			else 
			    				GetShapes(PolarStrength); 
		    		} 
		    			PolarStrength = 0; 
		    			SmartRumble   = 0; 
				}
			}
			if(TaylorAAV2[ProfileIdx] == 1) 
			{ 
				Angle = (Angle + TaylorSpeed[ProfileIdx] + AngleBoost) % 360;
			
				if(TaylorFireBoost[ProfileIdx])
	    		{
	    			if(get_ival(Fire))
	    			{
	    				SmartRumble = get_rumble(RumbleToUse());
	    				AngleBoost = TaylorABoostSpd[ProfileIdx];
	    					
	    		    if(SmartRumble > 10 && SmartRumble < 90) 
	    		    {
	    			 	PolarStrength  = (TaylorSize[ProfileIdx] + TaylorPBoostStr[ProfileIdx] + TaylorABoostSpd[ProfileIdx] + SmartRumble / 2);  
	    				SmartRumble    = 0;
	    			}
	    		}
	    		if(event_release(Fire)) 
	    		{
	    			AngleBoost = 0; 
	    		} 
	    	}
			if((get_val(Ads) || get_val(Fire)) && isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> DeadZone)   
		    {
				if(!TaylorFireBoost[ProfileIdx])
	    		{
				    GetRShapes(TaylorSize[ProfileIdx]);
				}
					else
					{	
						if(!get_rumble(RumbleToUse()))
		    				GetRShapes(TaylorSize[ProfileIdx]); 
		    			else 
		    				GetRShapes(PolarStrength);     
					}
				    SmartRumble = 0;
				    PolarStrength = 0; 
				} 
	    	}		
		    if(RapidFire[ProfileIdx]  == 1) 
	    	{ 
	    	 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
   		     	RestTime = HoldTime -get_rtime();
    	     	if(RestTime < 0) RestTime = 0;
			    
			 	if(get_ival(Fire))
			    	    
			 		combo_run(RAPIDFIRE);
			 	else
			    	combo_stop(RAPIDFIRE);
			    		
			    LedOn  = 150;
			    LedOff = 300;
			    combo_run(BLINK);
			}
			if(CancelSlide == 1 || CancelSlide == 2)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(CancelSlide == 1 && event_release(Crouch))
						combo_run(CancelSlideMW)
					else if(CancelSlide == 2 && event_release(Crouch))
						combo_run(CancelSlideCW) 
						
					if(CancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
	                    
	                if(CancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(EnemyPing) 
        	{
        		if(get_ival(Fire) && get_ptime(Fire) >= 1000)
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing);		
        	}
        	if(StrafeAssist) 
        	{
        		if(get_val(Fire))
        		{   
        			set_val(PS4_LX,RotationalAssist());
    		    }
    		} 
    		if(ToggleHoldBreath[ProfileIdx] == 1) 
            {
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}       
   	   } 
   } 
}// End Of Script \\

function RotationalAssist() {
    strafeVal += strafeInc;
    if(abs(strafeVal) == STRAFE_MAX) {
        strafeInc = inv(strafeInc);
    }
    return get_ival(PS4_LX) + strafeVal;
}
int polar_to_standard;
int final_val;
int range_min;
int range_max;
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(3000); 
}
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(SlideDelay);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(SlideDelay);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
function SmartSens(f_val, f_axis) { 
	
	if(f_axis == POLAR_RX) polar_to_standard = PS4_RX;
	else if(f_axis == POLAR_RY) polar_to_standard = PS4_RY;
	else if(f_axis == POLAR_LX) polar_to_standard = PS4_LX;
	else if(f_axis == POLAR_LY) polar_to_standard = PS4_LY;
	else polar_to_standard = f_axis;
	
	if(f_val < 0)
		SmartSens_side = -1; // Left / Up 
	else 
		SmartSens_side = 1; // Right / Down 

	if(SmartSens_side == -1) // if f_val has a negative value (Left side or Up) 
	{
	    if(get_ival(f_axis) > 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(polar_to_standard) * (100 - f_val)) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(polar_to_standard) * (100 + f_val)) / 100);
	}
	
	if(SmartSens_side == 1) // if f_val has a positive value (Right side or Down)
	{
	    if(get_ival(f_axis) < 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(polar_to_standard) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(polar_to_standard) * (100 - f_val)) / 100);
	}
	    	
	if(polar_to_standard == f_axis)
	{
	    final_val = f_val + SmartSens;
	    range_min = -100;
	    range_max = 100;
	}
	else
	{
		final_val = (f_val + SmartSens) * 327;
	    range_min = -32768;
	    range_max = 32767;
	}
// Set axis to SmartSens value
	if(SmartSens_side == -1 && get_val(f_axis) >= final_val || SmartSens_side == 1 && get_val(f_axis) <= final_val)
	    set_val(f_axis, clamp(final_val, range_min, range_max));
}
function GetRShapes(f_var){ 

	if(TaylorShapes[ProfileIdx] == 0) 
	{ 
		set_polar(POLAR_RS,Angle,f_var * 328/2)
	}
	if(TaylorShapes[ProfileIdx] == 1) 
	{ 
		set_polar(POLAR_RS,Angle,f_var * 328/2)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,TaylorMinRad[ProfileIdx] * 327)
		PX = get_val(POLAR_RX);			
	}
	if(TaylorShapes[ProfileIdx] == 2) 
	{ 
	    set_polar(POLAR_RS,Angle,TaylorMinRad[ProfileIdx] * 327)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,f_var * 327/2)
		PX = get_val(POLAR_RX);			
	}
	if(TaylorShapes[ProfileIdx] == 3)
	{
		if(!SpiralPosition1)                                
		{
			InnerSpiral -= 1;
			if(InnerSpiral < TaylorMinRad[ProfileIdx])
				SpiralPosition1 = True;
		}
		else
		{
	    	InnerSpiral += 1;
			if(InnerSpiral > f_var)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;
			if(OuterSpiral < TaylorMinRad[ProfileIdx])
				SpiralPosition2 = True;
		}
		else
		{
			OuterSpiral += 1;
			if(OuterSpiral >  f_var)
				SpiralPosition2 = False;
		}
		set_polar(POLAR_RS,Angle,InnerSpiral * 327/2)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,OuterSpiral * 327/2)
		PX = get_val(POLAR_RX);		
	}
	if(TaylorShapes[ProfileIdx] == 4) 
	{
		if(Position == 0)
    	{  
    	    set_polar(POLAR_RS,Angle,f_var)
    		PX = get_val(POLAR_RX)  + (Angle + f_var) * 327/10;	
    	}
    	if(Position == 1) 
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PY = get_val(POLAR_RY) + (Angle + f_var) * 327/10;
    	}
    	if(Position == 2)
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PX = get_val(POLAR_RX) + (Angle + f_var) * 327/10 * -1 ;	
    	}
    	if(Position == 3)
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PY = get_val(POLAR_RY) + (Angle + f_var) * 327/10 * -1 ;
    	}
    	Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
	}
	if(TaylorAR[ProfileIdx] == 2 && get_ival(Fire) || TaylorAR[ProfileIdx] == 3 && get_ival(Fire))
	{
		set_val(POLAR_RY,GetPolar(get_val(POLAR_RY) + TaylorARVert[ProfileIdx] * 327 ,get_ival(POLAR_RY)));
        set_val(POLAR_RX,GetPolar(get_val(POLAR_RX) + TaylorARHoriz[ProfileIdx] * 327,get_ival(POLAR_RX)));
    }
    else
    {
    	set_val(POLAR_RY,GetPolar(get_val(POLAR_RY) + PY ,get_ival(POLAR_RY)));
        set_val(POLAR_RX,GetPolar(get_val(POLAR_RX) + PX ,get_ival(POLAR_RX)));
    } 
	
}
int Position;   
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TaylorMinRadius[ProfileIdx])
			SpiralPosition1 = True;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = False;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TaylorMinRadius[ProfileIdx])
			SpiralPosition2 = True;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = False;
	} 
	if(TaylorShape[ProfileIdx] == 0)                    
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
	} 
	if(TaylorShape[ProfileIdx] == 1)        
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * TaylorMinRadius[ProfileIdx]) )/100; 
	}
	if(TaylorShape[ProfileIdx] == 2)                     
	{ 
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
        RY = (get_val(PS4_RY))  + ( (SinAngle * TaylorMinRadius[ProfileIdx]) )/100;
       
	} 
	if(TaylorShape[ProfileIdx] == 3)                  
	{
        RY = (get_val(PS4_RY))  + ( (SinAngle * InnerSpiral) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * OuterSpiral) )/100;  
	}
    if(TaylorShape[ProfileIdx] == 4)
	{
		if(Position == 0 || Position == 1)
    	{  
		    RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;
		}
	    if(Position == 2 || Position == 3)
		{  
		    RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
		}
			Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
    } 
    set_val(PS4_RX,RX);
	set_val(PS4_RY,RY);
}
int Output;
function GetPolar (Current,Received) {         
    
    Output = Current / 10 + Received / 10;
    
        if(Output <= -3276) return -32768; 
        if(Output >=  3276) return  32767; 

    return Current + Received; 
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
} 
combo Antirecoil{
// Vertical
   AntirecoilVertical = get_val(PS4_RY) + TaylorARVert[ProfileIdx];  
   if(AntirecoilVertical > 100) AntirecoilVertical = 100;
   if(abs(get_val(PS4_RY)) < abs(TaylorARVert[ProfileIdx]) +  5)
   set_val(PS4_RY, (AntirecoilVertical));
// Horizontal
   AntirecoilHorizontal = get_val(PS4_RX) + TaylorARHoriz[ProfileIdx];
   if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
   if(abs(get_val(PS4_RX)) < abs(TaylorARHoriz[ProfileIdx])  + 5)
   set_val(PS4_RX, AntirecoilHorizontal);
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
// Menu Navigation Function For BOTH Menu's \\    
function MenuNavigation(f_modorval,f_min,f_max) { 

	if(!get_val(Ads))
	{
		if(event_press(PS4_RIGHT))   // Press Right To See Next Mod/Value
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayMenu = TRUE;   
   		}     
		if(event_press(PS4_LEFT))    // Press Left To See Next Mod/Value 
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayMenu = TRUE;
		} 
		 BlockButtons(); 
	}
	// Example \\
	
	//if(f_modorval <= AmountOfEditableValues)  At the Top Of The Script " define AmountOfEditbleValues = 4 " Example..
	
	if(f_modorval <= 6)  // If ModNameIdx == 0  \\ IF You Have Mutiple Mods That Can Be Edited \\ You Could Do This... 
	{
		if(event_press(PS4_CROSS))  // Enter Edit Menu  \\
    	{ 
        	ValNameIdx  = AmountOfValues + 1; // Total Amount Of Values Available In Edit Menu \\ 
        	EditMenu    = TRUE;
        	ModMenu     = FALSE;
        	DisplayMenu = TRUE;
    	}
    	set_val(PS4_CROSS,0); 
    }
    if(ModMenu)  // When In Mod Menu  \\
    {
    	if(event_press(PS4_CIRCLE))  // Press Circle To Exit The Menu && Display The Title Screen \\  
    	{    
        	DisplayTitle = TRUE;
        	ModMenu      = FALSE; 
        	DisplayMenu  = FALSE; 
        	combo_run(RumbleOff); 
        	Save(); 
    	} 
    	set_val(PS4_CIRCLE,0); 
    }
    if(EditMenu) // When In Edit Menu \\
    {
    	if(event_press(PS4_CIRCLE))  // Press Circle To Exit The Edit Menu && Display The Mod Menu \\
    	{       
        	EditMenu     = FALSE; 
       		ModMenu      = TRUE;
        	DisplayMenu  = TRUE;   	
    	}
    	set_val(PS4_CIRCLE,0); 
    } 
    if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, TotalNumberOfProfiles);
        DisplayMenu = TRUE;   	
    }
    return f_modorval; 
} 
// Toggle Function \\ 
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
		if(ModNameIdx == 0) 
		{
			printf(center_x(get_toggle_chars(TaylorAR[ProfileIdx]), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,ARToggle[TaylorAR[ProfileIdx]]);
		}
		else if(ModNameIdx == 9)
	    {
	    	printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
	    }
	    else if(ModNameIdx == 10)
	    {
	    	printf(center_x(get_PressButton_chars(ActivateIndividualBtnIdx), OLED_FONT_MEDIUM_WIDTH),40,OLED_FONT_MEDIUM,OLED_WHITE,PressButtons[ActivateIndividualBtnIdx]);
	    }
	    else if(ModNameIdx == 5 ) 
	    {
	    	if(f_val == 0)
				printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	        else if(f_val == 1)
	    		printf(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);
	    	else if(f_val == 2)
	    		printf(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
	    } 
		else
		{
			if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
	    } 
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}
function ToggleSwitch1(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
		if(ValNameIdx == 2) 
		{
			printf(center_x(get_aa_chars(TaylorShape[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,AAToggle[TaylorShape[ProfileIdx]]);
		} 
		else if(ValNameIdx == 9) 
		{
			printf(center_x(get_aa_chars(TaylorShapes[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,AAToggle[TaylorShapes[ProfileIdx]]);
		}
		else
		{ 
			if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
		} 	
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}
// Editable Values Function, Adjust & Display The Values \\ 
function EditValues(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(Ads))  // Hold AdsBtn When Changing Values 
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex +  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;     // Display The Value
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex -  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;     // Display The Value
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            } 
            set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); // Block The Buttons In The Menu 
        }
        number_to_string(ValueIndex,find_digits(ValueIndex));  // Display The Number On OLED Display  
    }
    return ValueIndex;                
 } 
// Quick Toggle Function \\ 
function Quick_Toggle(f_hold, f_press, f_val, f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			ModNameIdx = f_idx; 
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn); 
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff); 
			}
			DisplayQuickToggles();  // Call The Display Quick Toggle Function \\ 
			combo_run(QuickToggles);// Combo Run For Quick Toggles , Clear's The Screen \\
			if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]); 
    	} 
	    set_val(f_press, 0)
   } 
   return f_val;
}
// Display 
function DisplayQuickToggles() { 

	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE);
	printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,ModNames[ModNameIdx]); 
	        
    if(ProfileIdx == 0) 
        printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
    else if(ProfileIdx == 1) 
        printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);
    else if(Profile3) 
        printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
     
} 
function DisplayAR() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE);
	printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
	number_to_string(TaylorARVert[ProfileIdx],find_digits(TaylorARVert[ProfileIdx]));  // Display The Number On OLED Display  
	 
}
function DisplayAA() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE);
    
    if(TaylorAAV1[ProfileIdx] == 1){ 
		printf(center_x(get_valName_chars(2), OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[2]);
		printf(center_x(get_aa_chars(TaylorShape[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,AAToggle[TaylorShape[ProfileIdx]]);
	}
	else if(TaylorAAV2[ProfileIdx] == 1){ 
		printf(center_x(get_valName_chars(9), OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[9]);
		printf(center_x(get_aa_chars(TaylorShapes[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,AAToggle[TaylorShapes[ProfileIdx]]);
		
	} 
	
    if(ProfileIdx == 0) 
        printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
    else if(ProfileIdx == 1) 
        printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);
    else if(Profile3) 
        printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
	 
} 
function ButtonActivation(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_UP) || event_press(PS4_DOWN))
     	{
			 QuickToggleActive =! QuickToggleActive;
			 DisplayMenu = TRUE;
     	}
     	if(!QuickToggleActive)
     	{
		 	 ToggleWidth    = OLED_FONT_SMALL_WIDTH;
		 	 ToggleFont     = OLED_FONT_SMALL;
		 	 TogglePosition = 50;
		 	 ToggleWidth1   = OLED_FONT_MEDIUM_WIDTH;
		 	 ToggleFont1    = OLED_FONT_MEDIUM;
		}
	 	else
	    {
		     ToggleWidth    = OLED_FONT_MEDIUM_WIDTH;
		     ToggleFont     = OLED_FONT_MEDIUM;
		     TogglePosition = 43;
		     ToggleWidth1   = OLED_FONT_SMALL_WIDTH;
		     ToggleFont1    = OLED_FONT_SMALL;
	    } 
	   
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
    
	             if(!QuickToggleActive) 
	             	ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 14 ); 
	             else 
	             	ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
	             	DisplayMenu = TRUE;
         	    
         	} 
            if(event_press(PS4_LEFT)) 
            {
            	
	            	if(!QuickToggleActive)
	             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 14 ); 
	             	else
	             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
	             		DisplayMenu = TRUE;
	             
            }
        }
        printf(center_x(get_HoldButton_chars(ActivateHoldBtnIdx[i])  ,ToggleWidth1),30,ToggleFont1,OLED_WHITE,HoldButtons[ActivateHoldBtnIdx[i]]);
        printf(center_x(get_PressButton_chars(ActivatePressBtnIdx[i]),ToggleWidth),TogglePosition,ToggleFont,OLED_WHITE,PressButtons[ActivatePressBtnIdx[i]]); 
     }
     set_val(TRACE_1,ActivateHoldBtnIdx[i]); 
 } 
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
// Used Combo's and other Functions In The Script \\
combo QuickToggles{ 
wait(1500) 
ScreenSaver   = TRUE; 
reset_leds(); 
}   
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo DriveMode { 
cls_oled(OLED_BLACK); 
if(DriveMode){  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);}
wait(1500);
DisplayTitle = TRUE;
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  set_val(Melee,0); set_val(Sprint,0); 
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_toggle_chars(f_idx){
	if (ARToggle[f_idx + 1] != -1) 
		return ARToggle[f_idx + 1] - ARToggle[f_idx] - 1;
	return sizeof(ARToggle) - ARToggle[f_idx];		
}
function get_aa_chars(f_idx){
	if (AAToggle[f_idx + 1] != -1) 
		return AAToggle[f_idx + 1] - AAToggle[f_idx] - 1;
	return sizeof(AAToggle) - AAToggle[f_idx];		
}
function get_HoldButton_chars(f_idx){
	if (HoldButtons[f_idx + 1] != -1) 
		return HoldButtons[f_idx + 1] - HoldButtons[f_idx] - 1;
	return sizeof(HoldButtons) - HoldButtons[f_idx];		
}
function get_PressButton_chars(f_idx){
	if (PressButtons[f_idx + 1] != -1) 
		return PressButtons[f_idx + 1] - PressButtons[f_idx] - 1;
	return sizeof(PressButtons) - PressButtons[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
	
function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // Position/Size Of The Number Shown In Edit Menu \\ 
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
function Load(){ 
 TaylorShape[0]         = get_pvar(SPVAR_1, 0, 4, 0); 
 TaylorShape[1]         = get_pvar(SPVAR_2, 0, 4, 0); 
 TaylorShape[2]         = get_pvar(SPVAR_3, 0, 4, 0); 
 TaylorRadius[0]        = get_pvar(SPVAR_4, 1,99,15); 
 TaylorRadius[1]        = get_pvar(SPVAR_5, 1,99,15);
 TaylorRadius[2]        = get_pvar(SPVAR_6, 1,99,15); 
 TaylorAngle[0]         = get_pvar(SPVAR_7, 1,99,15); 
 TaylorAngle[1]         = get_pvar(SPVAR_8, 1,99,15); 
 TaylorAngle[2]         = get_pvar(SPVAR_9, 1,99,15); 
 TaylorBoost[0]         = get_pvar(SPVAR_10, 0,1,0);
 TaylorBoost[1]         = get_pvar(SPVAR_11, 0,1,0);
 TaylorBoost[2]         = get_pvar(SPVAR_12, 0,1,0);
 TaylorBoostStr[0]      = get_pvar(SPVAR_13, 1,40,10);
 TaylorBoostStr[1]      = get_pvar(SPVAR_14, 1,40,10);
 TaylorBoostStr[2]      = get_pvar(SPVAR_15, 1,40,10);
 TaylorBoostSpd[0]      = get_pvar(SPVAR_16, 1,40,5);
 TaylorBoostSpd[1]      = get_pvar(SPVAR_17, 1,40,5);
 TaylorBoostSpd[2]      = get_pvar(SPVAR_18, 1,40,5);
 TaylorMinRadius[0]     = get_pvar(SPVAR_19, 1,20,5);
 TaylorMinRadius[1]     = get_pvar(SPVAR_20, 1,20,5);
 TaylorMinRadius[2]     = get_pvar(SPVAR_21, 1,20,5);
 TaylorShapes[0]     	= get_pvar(SPVAR_22, 0, 4, 0); 
 TaylorShapes[1]     	= get_pvar(SPVAR_23, 0, 4, 0); 
 TaylorShapes[2]     	= get_pvar(SPVAR_24, 0, 4, 0); 
 TaylorSize[0]    		= get_pvar(SPVAR_25, 1,99,15); 
 TaylorSize[1]   	    = get_pvar(SPVAR_26, 1,99,15);
 TaylorSize[2]   	 	= get_pvar(SPVAR_27, 1,99,15); 
 TaylorSpeed[0]    		= get_pvar(SPVAR_28, 1,99,15); 
 TaylorSpeed[1]         = get_pvar(SPVAR_29, 1,99,15); 
 TaylorSpeed[2]         = get_pvar(SPVAR_30, 1,99,15); 
 TaylorFireBoost[0]     = get_pvar(SPVAR_31, 0,1,0);
 TaylorFireBoost[1]     = get_pvar(SPVAR_32, 0,1,0);
 TaylorFireBoost[2]     = get_pvar(SPVAR_33, 0,1,0);
 TaylorPBoostStr[0]     = get_pvar(SPVAR_34, 1,40,10);
 TaylorPBoostStr[1]     = get_pvar(SPVAR_35, 1,40,10);
 TaylorPBoostStr[2]     = get_pvar(SPVAR_36, 1,40,10);
 TaylorABoostSpd[0]     = get_pvar(SPVAR_37, 1,40,5);
 TaylorABoostSpd[1]     = get_pvar(SPVAR_38, 1,40,5);
 TaylorABoostSpd[2]     = get_pvar(SPVAR_39, 1,40,5);
 TaylorMinRad[0]        = get_pvar(SPVAR_40, 1,20,5);
 TaylorMinRad[1]        = get_pvar(SPVAR_41, 1,20,5);
 TaylorMinRad[2]        = get_pvar(SPVAR_42, 1,20,5);
 TaylorARVert[0]        = get_pvar(SPVAR_43, -99,99,0);
 TaylorARVert[1]        = get_pvar(SPVAR_44, -99,99,0);
 TaylorARVert[2]        = get_pvar(SPVAR_45, -99,99,0);
 VmSpeed[0]             = get_pvar(SPVAR_46,-9,5,0);
 VmSpeed[1]             = get_pvar(SPVAR_47,-9,5,0);
 VmSpeed[2]             = get_pvar(SPVAR_48,-9,5,0);
 DeadZone               = get_pvar(SPVAR_49,1,20,8); 
 SlideDelay             = get_pvar(SPVAR_50,1,120,200); 
 STRAFE_MAX             = get_pvar(SPVAR_51,1,50,25); 
 ToggleHoldBreath[0]    = get_pvar(SPVAR_52,0,1,0); 
 ToggleHoldBreath[1]    = get_pvar(SPVAR_53,0,1,0); 
 ToggleHoldBreath[2]    = get_pvar(SPVAR_54,0,1,0); 
 } 
function Save(){ 
 set_pvar(SPVAR_1,TaylorShape[0]);
 set_pvar(SPVAR_2,TaylorShape[1]);
 set_pvar(SPVAR_3,TaylorShape[2]);
 set_pvar(SPVAR_4,TaylorRadius[0]);
 set_pvar(SPVAR_5,TaylorRadius[1]);
 set_pvar(SPVAR_6,TaylorRadius[2]);
 set_pvar(SPVAR_7,TaylorAngle[0]);
 set_pvar(SPVAR_8,TaylorAngle[1]);
 set_pvar(SPVAR_9,TaylorAngle[2]);
 set_pvar(SPVAR_10,TaylorBoost[0]);
 set_pvar(SPVAR_11,TaylorBoost[1]);
 set_pvar(SPVAR_12,TaylorBoost[2]);
 set_pvar(SPVAR_13,TaylorBoostStr[0]);
 set_pvar(SPVAR_14,TaylorBoostStr[1]);
 set_pvar(SPVAR_15,TaylorBoostStr[2]);
 set_pvar(SPVAR_16,TaylorBoostSpd[0]);
 set_pvar(SPVAR_17,TaylorBoostSpd[1]);
 set_pvar(SPVAR_18,TaylorBoostSpd[2]);
 set_pvar(SPVAR_19,TaylorMinRadius[0]);
 set_pvar(SPVAR_20,TaylorMinRadius[1]);
 set_pvar(SPVAR_21,TaylorMinRadius[2]);
 set_pvar(SPVAR_22,TaylorShapes[0]);
 set_pvar(SPVAR_23,TaylorShapes[1]);
 set_pvar(SPVAR_24,TaylorShapes[2]);
 set_pvar(SPVAR_25,TaylorSize[0]);
 set_pvar(SPVAR_26,TaylorSize[1]);
 set_pvar(SPVAR_27,TaylorSize[2]);
 set_pvar(SPVAR_28,TaylorSpeed[0]);
 set_pvar(SPVAR_29,TaylorSpeed[1]);
 set_pvar(SPVAR_30,TaylorSpeed[2]);
 set_pvar(SPVAR_31,TaylorFireBoost[0]);
 set_pvar(SPVAR_32,TaylorFireBoost[1]);
 set_pvar(SPVAR_33,TaylorFireBoost[2]);
 set_pvar(SPVAR_34,TaylorPBoostStr[0]);
 set_pvar(SPVAR_35,TaylorPBoostStr[1]);
 set_pvar(SPVAR_36,TaylorPBoostStr[2]);
 set_pvar(SPVAR_37,TaylorABoostSpd[0]);
 set_pvar(SPVAR_38,TaylorABoostSpd[1]);
 set_pvar(SPVAR_39,TaylorABoostSpd[2]);
 set_pvar(SPVAR_40,TaylorMinRad[0]);
 set_pvar(SPVAR_41,TaylorMinRad[1]);
 set_pvar(SPVAR_42,TaylorMinRad[2]);
 set_pvar(SPVAR_43,TaylorARVert[0]);
 set_pvar(SPVAR_44,TaylorARVert[1]);
 set_pvar(SPVAR_45,TaylorARVert[2]);
 set_pvar(SPVAR_46,VmSpeed[0]);
 set_pvar(SPVAR_47,VmSpeed[1]); 
 set_pvar(SPVAR_48,VmSpeed[2]); 
 set_pvar(SPVAR_49,DeadZone); 
 set_pvar(SPVAR_50,SlideDelay);
 set_pvar(SPVAR_51,STRAFE_MAX); 
 set_pvar(SPVAR_52,ToggleHoldBreath[0]); 
 set_pvar(SPVAR_53,ToggleHoldBreath[1]);
 set_pvar(SPVAR_54,ToggleHoldBreath[2]);
 } 