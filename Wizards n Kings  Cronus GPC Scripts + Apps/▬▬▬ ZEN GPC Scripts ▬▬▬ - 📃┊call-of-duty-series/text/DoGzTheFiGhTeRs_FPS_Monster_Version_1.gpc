// ******ZEN ONLY******        DoGzTheFiGhTeR's MODERN WARFARE SCRIPT V 3.0   **FPS MONSTER SCRIPT ******ZEN ONLY****** 
//									DoGzTheFiGhTeR's MeNu SYSTEM V 3.0

//				  PS4/XBOX
// MENU ON = HOLD L2/LT & PRESS OPTIONS/MENU 
// MASTER MENU = PRESS UP/DOWN/LEFT OR RIGHT WHILE IN MASTER MENU TO NAVIGATE TO A SUB MENU PRESS CROSS/A TO ENTER   

// CIRCLE IS MENU BACK BUTTON TO EXIT / 10 SECOND TIMER ON THE MENU WHICH WILL AUTO EXIT IF NO MENU BUTTONS ARE PRESSES

// SOME MENUS YOU WILL SEE THE TIMER COUNTING DOWN
// SCREENSAVER RUNS FOR TWO MINS BEFORE GOING BLANK ( ANY MENU ACTIONS INCLUDING QUICK TOGGLES IT WILL TRIGGER WHEN EXITING )

// MENU ONE = AIM ASSIST  ( DoGz  ||  PROGRESSION  ||  POLAR  )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING 
// PRESS CROSS/A TO ENTER THE SETTINGS FOR THAT SELECTION 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC
// CAN BE TESTED IN GAME WHILE IN MENU SYSTEM
// *NOTE* TO GO INTO OPTION ONE DoGz ASSIST CROSS NEEDS TO BE HELD FOR 200Ms TO PREVENT OPTION JUMPING *NOTE* 

// MENU TWO = SHOT MODS  ( DROP SHOT  ||  JUMP SHOT  ||  PRONE SHOT  ||  STRAFE SHOT  || SLIDE SHOT  )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC

// MENU THREE = FIRE MODS  ( RAPID FIRE ||  DYNAMIC FIRE  ||  SMART FIRE  ||  BURST FIRE  || SNIPER FIRE  )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC

// MENU FOUR = ANTI RECOIL MAIN SECTION  ( DoGz PROGRESSION RECOIL  ||  ITzSNACKS RECOIL )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING ( ONE DISABLES THE OTHER )
// PRESS CROSS/A TO ENTER THE SETTINGS FOR THAT SELECTION 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC
// CAN BE TESTED IN GAME WHILE IN MENU SYSTEM
// *NOTE* TO GO INTO OPTION ONE DoGz RECOIL CROSS NEEDS TO BE HELD FOR 200Ms TO PREVENT OPTION JUMPING *NOTE* 

// MENU FIVE = MISCELLANEOUS MODS 1 ( AUTORUN ||  HOLDBREATH  ||  RAPID MELEE  ||  EASY RELOAD (CRESCENS)  || SENSITIVITY (CANNOT BE USED WITH POLAR) )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC

// MENU SIX = MISCELLANEOUS MODS 2 ( BUNNY HOP ||  BUNNY WAIT  ||  AUTO ARMOUR  ||  AUTO REVIVE  || AUTO PING  )

// SELECT ENABLE/DISABLE FOR EACH ASSIST BY USING LEFT OR RIGHT WHEN THE ID BOX IS ON THAT ASSIST SETTING 
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// RECOIL ADJUSTABLE MENU ON THE FLY                  *****NOTE**   THIS IS ONLY FOR SNACKS RECOIL NOT DOGZ   **NOTE********

// CIRCLE/B WILL EXIT INSTANTLY AT ANY STAGE
// HOLD L2/LT ( FOR 350Ms ) & PRESS CROSS/A TO ENTER POWER BAR SCREEN  ( 9 SECOND TIMER IF NOTHING IS PRESSED IT WILL EXIT AND SCREEN SAVE FOR 2 MINS )
// EXIT TIMER WILL SHOW ( COUNTDOWN )

// PRESS UP OR DOWN OR LEFT STICK UP OR DOWN TO ALTER THE SHOWN VERTICAL RECOIL STREGNTH
// PRESS LEFT OR RIGHT OR LEFT STICK LEFT OR RIGHT TO ALTER THE SHOWN HORIZONTAL RECOIL STREGNTH

// PRESS SQUARE/X TO ENTER RECOIL PROFILE ADJUSTABLE'S
// USE UP & DOWN TO RUN THROUGH THE SETTINGS
// USE LEFT/RIGHT DPAD & LEFT STICK TO ADJUST VALUES ETC

// ONE PROFILE WILL TURN ANOTHER OFF ETC
// ONCE A PROFILE IS SELECTED IT WILL NOW BE IN USE AND CAN BE ALTERED ALSO AT THE POWER BAR

// HOLD CROSS AND PRESS OPTIONS/MENU   TO SAVE    PROFILES AT ANY TIME ( NOT WHILE IN MASTER MENU )
// HOLD CROSS AND PRESS SHARE/VIEW     TO LOAD    PROFILES AT ANY TIME ( NOT WHILE IN MASTER MENU )
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// QUICK TOGGLES DISPLAY

// USE ANY QUICK TOGGLE TO BRING THE DISPLAY UP WILL AUTO TOGGLE DEPENDING ON THE STATE
// IF THE QUICK TOGGLE MENU IS ON YOU CAN USE LEFT OR RIGHT TO TOGGLE ALSO
// IT WILL HAVE A 2 SECOND SHOW TIME WHICH WILL AUTO CLEAR AND BRING THE SCREEN SAVER ON
// IT WILL BLOCK MOST TRIGGER BUTTONS HENCE THE SHORT TIME ( AS LONG AS ADS / DOWN IS HELD THE TIMER WILL NOT RUN OUT )
// IF YOU WISH TO TOGGLE ON/OFF A FEW MODS KEEP ( HOLDING L2 FOR FIRE/SHOT MODS ) ( IF ITS RECOIL PROFILES YOUR LOOKING AT ETC HOLD DOWN DPAD )
// ( LED = RED = OFF ) ---- ( LED = GREEN = ON )

// RECOIL PROFILES WILL SHOW YOU THERE CURRENT VALUE 

// RUMBLE FEEDBACK WILL BE ON FOR MOST ACTIONS,NOTIFIY ETC
// RUMBLE IS OFF WHILE PLAYING SO HAVE IT ENABLED IF YOUR USING RUMBLE RECOIL!!

//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// NOTE *** IF IT HAS A QUICK TOOGLE LINKED TO THE MOD THERE IS A MASTER SWITCH JUST ABOVE MAIN { YOU CAN ISOLATE IT THERE 


// DoGz MASTER MENU V 3.0
// DoGz ON THE FLY ADJUSTABLE RECOIL MENU V 1.0
// DOGZ QUICK TOGGLE MENU V 1.0

// 3 DIFFERENT AIM ASSISTS ( POLAR AIM ASSIST )( PROGRESSION AIM ASSIST ) ( DoGz METHOD AIM ASSIST(VM SPEED INCLUDED ENHANCE'S ASSIST SPEED DOWN TO -7 MIN))
// ANTIRECOIL X 2( BOTH HAVE RUMBLE RECOIL OPTION ) ( DoGz PROGRESSION or ITzSNACK'S ON THE FLY ADJUSTABLE ENHANCED )

// WHEN ENABLED TRIGGERS HERE
// AIM ASSIST'S X 3      = L2 (WHEN L2 & R2 ARE PRESSED IT PROVIDES A BOOST TO AIM ASSIST FOR POLAR & DoGz ONLY ( BOOST CAN BE TURNED OFF FOR POLAR ) 
// THE THREE CAN BE USED TOGETHER OR SEPERATE OR MIX N MATCH ( ALL CAN BE USED WITH RECOIL AS WELL )

// DYNAMIC FIRE          = FIRE BUTTON ( PRESSURE SENSITIVE FIRE FULLY HELD = FASTEST SETTING DEFAULT = 30Ms )
// RAPID FIRE            = FIRE BUTTON ( WHEN ACTIVE ) ( USED FOR THE FASTEST RAPID FIRE )
// SMART FIRE            = FIRE BUTTON ( WHEN ACTIVE ) ( USED FOR A SLOWER RATE OF RAPID FIRE )
// BURST FIRE            = FIRE BUTTON ( WHEN ACTIVE ) ( USED TO TURN FULL AUTO GUNS INTO BURST FIRE )
// SNIPER FIRE           = HOLD ADS AFTER CERTAIN AMOUNT OF TIME IT WILL AUTO SHOT ( WHEN ACTIVE )

// JUMPSHOT              = FIRE BUTTON ( WHEN ACTIVE ) ( JUMP ON FIRE )
// DROP SHOT             = FIRE BUTTON ( WHEN ACTIVE ) ( RAPID CROUCH ON FIRE ) 
// PRONE WHILE FIRE      = FIRE BUTTON ( WHEN ACTIVE ) ( WILL LIE DOWN WHILE FIRING WHEN RELEASE FIRE STAND UP )
// STRAFE SHOT           = FIRE BUTTON ( WHEN ACTIVE ) ( WALK LEFT/RIGHT FOR A SET AMOUNT OF TIME )
// SLIDE SHOT            = LEATHAL BUTTON ( R1 / RB ) ( WHEN AUTORUNNING PRESS R1 TO SLIDE MANUALLY FIRE IF REQUIRED )(NUKEONE'S METHOD)(BLOCK R1 ON FULL RUN) 
// QUICK DROP FIRE       = ADS & CROUCH ( WHEN ACTIVE ) ( DROPS TO FLOOR AND AUTO FIRES FOR SET TIME )(FOLLOWS FIRE MOD ghost251313 INVENTION DONT@ME CREATION)

// ANTIRECOIL X 2(RUMBLE)= L2 & R2 ( REQUIRE'S VIBRATION SET ON IN GAME BUT IT WILL BE BLOCKED TO YOUR CONTROLLER FOR BOTH ANTI RECOILS)( WHEN ACTIVE )
// ANTIRECOIL X 2        = L2 & R2 ( RUMBLE OFF TRIGGERS BY ADS & FIRE (ALSO USES ADS TRIGGER TO START ABOVE 70%)( WHEN ACTIVE ) (SET TO 0 FOR INSATNT)

// AUTORUN               = PUSH FORWARD ON LEFT STICK ( TACTICAL SPRINT ( L3 ) ) ( WHEN ACTIVE )
// RAPID MELEE           = HOLD MELEE TO RAPID MELEE ( WHEN ACTIVE )
// BUNNY HOP RUN         = PUSH IN MOVEMENT DIRECTION MORE THAN HALF WAY TO BUNNY HOP ( WHEN ACTIVE )
// HOLD_BREATH           = HOLD L2 ( WHEN ACTIVE )
// EASY RELOAD           = HOLD L3 AND SQUARE TO START RECORDING RELOAD TIME RELEASE BUTTONS AS SOON AS RELOAD FINISHES (PREVENTS AUTORUN CANCELLING)(CRESCENS)
// HAIR TRIGGERS         = L2 OR R2 ( WHEN ACTIVE ) (SOON AS YOU TOUCH TRIGGERS THEY REGISTER AS 100% ) ( FOR FASTER RESPONSE IN GAME )
// AUTO ARMOUR (WARFARE) = HOLD TRIANGLE FOR 300ms ( WHEN ACTIVE )
// AUTO REVIVE           = HOLD SQUARE   FOR 300ms ( WHEN ACTIVE )
// SENSITIVITY           = CAN REDUCE OR INCREASE SENSITIVITY WHEN NO TRIGGERS ARE HELD, JUST ADS,JUST FIRE OR BOTH ADS & FIRE ARE HELD(CANNOT USE WITH POLAR)

// SENSITIVITY  = VARIES SETTINGS CAN BE APPLIED ( WHEN AIMING ) OR ( WHEN FIRING ) OR ( WHEN  AIMING AND FIRING ) ( THEN NO TRIGGERS HELD )
// *** NOTE *** SENSITIVITY NOT IN USE IF POLAR ASSIST IS ACTIVE *** NOTE ***
// RECORD RELOAD TIME HOLD DOWN AND HOLD SQUARE WHILE RELOADING RELEASE WHEN RELOAD COMPLETE (STOPS RELOAD FROM BEING CANCELLED WHEN MOVING/RUNNING)

// YOU CAN MAKE ALL ALTERATIONS BELOW INCLUDING BUTTONS, TRIGGERS AND MODS TO ENABLE/DISABLE ( FOLLOW DOWN TO main { )
// SCREENSAVER CAN BE TURNED OFF

// SHOUTOUTS...............................................................................................................................................

// MAXADMIN AS ALWAYS FOR HIS LEADERSHIP AND DEDICATION 
// CRESCENS RELOAD METHOD
// LED FLOWING WHEN MENU IS INACTIVE ( BRIGHTNESS CAN BE TURN UP OR DOWN OR OFF ) 
// LED FLOW CREATED BY DON'T AT ME AS THE MAIN METHOD OF POLAR ASSIST ( ENHANCED )
// ITzSNACKS RECOIL METHOD INCLUDING INVERTED
// ITzSNACKS HOLD BREATH METHOD
// THE MAIN MAN BATTS FOR ANY OF HIS WORK (DIGIT FUNCTION,(PROGRESSION FUNCTION WHICH I MADE PROGRESSION AIM ASSIST(WHICH WAS SHARED BY MR ORION))LEGENDS 8)
// BATTS || Mr ORION  || NOOZBAR || LEGITCLOUDzzz || DO NOT AT ME || ONLY THE THORN || x22DOT || ITzSNACKS || XBL JEDI || ALL FOR THERE WORK ALL LEGEND 8 )
// RIGHT I'LL CALM DOWN LOL ( TABLETS MUST HAVE KICKED IN 8 0 )



// NO NEED TO ALTER BELOW HERE
const byte FONT_STATS [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }}; 
const byte REFERENCE [] = {48,49,50,51,52,53,54,55,56,57};	

// NO NEED TO ALTER BELOW HERE
define UM1 = 67,UM2 = 82,UM3 = 79,UM4 = 83,UM5 = 47,UM6 = 65,UM7 = 68,UM8 = 80,UM9 = 77,UM10 = 69,UM11 = 78,UM12 = 85,UM13 = 76,UM14 = 84;
define ZERO = 0,ONE = 1,TWO = 2,THREE = 3,FOUR = 4,FIVE = 5,SIX = 6,SEVEN = 7,EIGHT = 8,NINE = 9,TEN = 10,ELEVEN = 11,TWELVE = 12,THIRTEEN = 13;
define FOURTEEN = 14,FIFTEEN = 15,SIXTEEN = 16,SEVENTEEN = 17,EIGHTEEN = 18,TWENTY = 20,FIFTY = 50,HUNDRED = 100,THOUSAND = 1000,TENTHOUSAND = 10000;
define XS1 = 67,XS2 = 82,XS3 = 79,XS4 = 83,XS5 = 47,XS6 = 65,XS7 = 32,XS8 = 69,XS9 = 84,XS10 =  85,XS11 = 80,G = 0,R= 0,YES = 1,NO  = 0,POLAR = 360;
define SL = 0,MD = 1,LG = 2,WD = 127,HG = 63,VL = 25,BK = 0,WT = 1,UL = 0,FL = 1,TK = 2,NEG = 45,ON = 50,OFF = 0,BT = 53,H_MX =  64,W_MX = 127;  
define RCM1 = 83,RCM2 = 81,RCM3 =  85,RCM4 = 65,RCM5 = 82,RCM6 = 69,RCM7 = 47,RCM8 =  88,RCM9 = 67,RCM10 = 79,RCM11 = 73,RCM12 = 76,RCM13 = 80, RCM14 = 70;
define AST1 = 76,AST2 = 69,AST3 = 70,AST4 = 84,AST5 = 32,AST6 = 79,AST7 = 82,AST9 = 71,AST8 = 73,AST10 = 78,AST11 = 47,AST12 = 72,POL_1 = 328;  
define ARC1 = 65,ARC2 = 78,ARC3 = 84,ARC4 = 73,ARC5 = 82,ARC6 = 69,ARC7 = 67,ARC8 = 79,ARC9 = 76,AAS1 = 65,AAS2 = 73,AAS3 = 77,AAS4 = 32,AAS5 = 83,AAS6 = 84;
define SSA1 = 68,SSA2 = 79,SSA3 = 71,SSA4 = 122,SSA5 = 84,SSA6 = 104,SSA7 = 101,SSA8 = 70,SSA9 = 105,SSA10 = 82,SAVER = 5000,SAVER1 = 10;
int SSMU1 = 1,SSMU2 = 8,SSMU3 = 15,SSMU4 = 22,SSMU5 = 29,SSMU6 = 36,SSMU7 = 43,SSMU8 = 50,SSMU9 = 57,SSMU10 = 64,SSMU11 = 71,SSMU12 = 78,SSMU13 = 85,SSMU14 = 92;
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8,RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;
int RT,MSC,SD1,DGT,DGR,TP1,TP2,SCREENSAVER = YES;
int RCMU1 = 127,RCMU2 = 137,RCMU3 = 147,RCMU4 = 157,RCMU5 = 167,RCMU6 = 177,RCMU7 = 187,RCMU8 = 197,RCMU9 = 227,RCMU10 = 237, RCMU11 = 247,RCMU12 = 257;
int RCMU13 = 267,RCMU14 = 277,RCMU15 = 297,RCMU16 = 307,RCMU17 = 317,RCMU18 = 327,RCMU19 = 337,RCMU20 = 347,RCMU21 = 357,RCMU22 = 367,M = 1,ID =1;
int RC,RECOIL_VALUE,LOAD,CR,RYSR,SRC,SZ,SAVE,DF,A,B,C,D,E,F,RC_PRO,CHANGE,POWER,AP;
int INC = YES,DEC,COLOUR[THREE];
// NO NEED TO ALTER BELOW HERE
define INVERT_OFF =  ONE;
define INVERT_ON  = -ONE;

// NO NEED TO ALTER BELOW HERE   | XBOX MATCH GUIDE ID(EQUIVALENT)| 
define PS         = PS4_PS;		 //XB1_XBOX
define SHARE      = PS4_SHARE;	 //XB1_VIEW  
define OPTIONS    = PS4_OPTIONS; //XB1_MENU  
define R1         = PS4_R1;		 //XB1_RB  
define R2         = PS4_R2;		 //XB1_RT  
define R3         = PS4_R3;		 //XB1_RS  
define L1         = PS4_L1;		 //XB1_LB  
define L2         = PS4_L2;		 //XB1_LT  
define RX         = PS4_RX;		 //XB1_RX  
define RY         = PS4_RY;		 //XB1_RY  
define LX         = PS4_LX;		 //XB1_LX  
define LY         = PS4_LY;		 //XB1_LY     
define L3         = PS4_L3;		 //XB1_LS  
define UP         = PS4_UP;		 //XB1_UP  
define DOWN       = PS4_DOWN;	 //XB1_DOWN  
define LEFT       = PS4_LEFT;	 //XB1_LEFT  
define RIGHT      = PS4_RIGHT;	 //XB1_RIGHT 
define CROSS      = PS4_CROSS;	 //XB1_A  
define CIRCLE     = PS4_CIRCLE;	 //XB1_B  
define SQUARE     = PS4_SQUARE;	 //XB1_X  
define TRIANGLE   = PS4_TRIANGLE;//XB1_Y  
define TOUCH      = PS4_TOUCH;	 //XB1_SYNC
define PLX		  = POLAR_LX;
define PRX		  = POLAR_RX;
define PRY		  = POLAR_RY;
define RS         = POLAR_RS;
define VIB_A      = RUMBLE_A;

// PUT YOUR IN GAME BUTTONS HERE BELOW IF DIFFERENT
define AIM        = PS4_L2;		 //XB1_LT 
define FIRE       = PS4_R2;		 //XB1_RT  
define TACTICAL   = PS4_L1;		 //XB1_LB 
define LEATHAL    = PS4_R1;		 //XB1_RB                                        
define CROUCH     = PS4_CIRCLE;	 //XB1_B
define MELEE      = PS4_R3;		 //XB1_RS  
define SPRINT     = PS4_L3;		 //XB1_A  
define SWAP       = PS4_TRIANGLE;//XB1_Y  
define JUMP       = PS4_CROSS;	 //XB1_A
define RELOAD     = PS4_SQUARE;	 //XB1_X 

// PUT YOUR BUTTONS HERE BELOW IF DIFFERENT OR YOU WANT TO CHANGE
define MENU_HOLD_BUTTON   = L2;		  //XB1_LT
define MENU_PRESS_BUTTON  = OPTIONS;  //XB1_MENU
define MENU_SELECT_BUTTON = CROSS;    //XB1_A
define MENU_BACK_BUTTON   = CIRCLE;   //XB1_B
define MENU_OFF_BUTTON    = TRIANGLE; //XB1_Y

//PROFILE SAVE & LOAD BUTTONS
define SAVE_HOLD = CROSS,	 SAVE_PRESS = OPTIONS;
define LOAD_HOLD = CROSS,    LOAD_PRESS = SHARE;


// PUT YOUR BUTTONS HERE BELOW IF DIFFERENT OR YOU WANT TO CHANGE
define JUMPSHOT_HOLD_TOGGLE       = AIM,     JUMPSHOT_PRESS_TOGGLE       = LEATHAL,   JUMPSHOT_ISOLATE   = CROUCH;
define BUNNYHOP_HOLD_TOGGLE       = AIM,     BUNNYHOP_PRESS_TOGGLE       = TACTICAL,  BUNNYHOP_ISOLATE   = CROUCH;
define DROPSHOT_HOLD_TOGGLE       = AIM,     DROPSHOT_PRESS_TOGGLE       = RELOAD,    DROPSHOT_ISOLATE   = JUMP;
define PRONESHOT_HOLD_TOGGLE      = AIM,     PRONESHOT_PRESS_TOGGLE      = TOUCH,     PRONESHOT_ISOLATE  = MELEE;
define STRAFESHOT_HOLD_TOGGLE     = AIM,     STRAFESHOT_PRESS_TOGGLE     = SWAP,      STRAFESHOT_ISOLATE = MELEE;
define QUICKDROPFIRE_HOLD_TRIGGER = AIM,     QUICKDROPFIRE_PRESS_TRIGGER = CROUCH;
define DYNAMICFIRE_HOLD_TOGGLE    = AIM,     DYNAMICFIRE_PRESS_TOGGLE    = DOWN;
define RAPIDFIRE_HOLD_TOGGLE      = AIM,     RAPIDFIRE_PRESS_TOGGLE      = UP;
define SMARTFIRE_HOLD_TOGGLE      = AIM,     SMARTFIRE_PRESS_TOGGLE      = LEFT;
define BURSTFIRE_HOLD_TOGGLE      = AIM,     BURSTFIRE_PRESS_TOGGLE      = RIGHT;
define SNIPERSHOT_HOLD_TOGGLE     = AIM,     SNIPERSHOT_PRESS_TOGGLE     = SHARE;
define RAPIDMELEE_HOLD_TOGGLE     = AIM,     RAPIDMELEE_PRESS_TOGGLE     = MELEE;
define AUTOPING_PRESS_TRIGGER     = FIRE;
define RECOIL_PRESS_BUTTON        = CROSS;

// NO NEED TO ALTER BELOW HERE  (Ms)
int    BRIGHTNESS             =    10;// LED BRIGHTNESS ( 0 = OFF ) ( 1 = BRIGHTEST  50 = DIM ETC )

int    MENU_TIMEOUT           = 10000;// MAIN MENU TIMEOUT TIME SET THE SAME AS BELOW
define MENU_TIMEOUT_          = 10000;// MAIN MENU TIMEOUT TIME SET THE SAME AS ABOVE

define QT_TIMEOUT_            =  1200;// FAST TOGGLE MENU TIME ( IN GAME ON THE FLY )
define MENUFLASH              =  1000;// SPEED OF NAME FLASHING IN THE MAIN MENU
define PROFILE_HOLD_TIME      =   150;// RECOIL LOAD/SAVE HOLD TIME
define ADJUST_MOD_BUTTON_HOLD =   150;// ADJUSTABLE MODS IN MENU HOLD TIME FOR FAST SCROLL
define BUTTON_PRESS_TIME      =   200;// TIME WHICH MENU OPTION ONE IS HELD ( CROSS ) ( PREVENTS JUMPING INTO MENU OPTION 1 WHEN NOT INTENDED )
define MENU_VM                =    10;// MENU VIRTUAL MACHINE TIME ( DON'T TOUCH THIS UNLESS YOU KNOW WHAT IT DOES )
define VM_TOGGLE              =    10;// TOGGLE VIRTUAL MACHINE TIME ( DON'T TOUCH THIS UNLESS YOU KNOW WHAT IT DOES )
define VM_DF                  =     0;// DEFAULT VIRTUAL MACHINE TIME ( DON'T TOUCH THIS UNLESS YOU KNOW WHAT IT DOES ) ZERO DEFAULT
define VIBRATE                =    40;// STREGNTH OF RUMBLE ( IF YOU DONT WANT RUMBLE NOTIFY SET TO 0 )
define LS_ADJUSTABLE_TRIGGER  =    20;// LEFT STICK PRESSURE APPLIED WHEN ADJUSTING RECOIL VALUES ETC ( START VALUE )
define RECOIL_HOLD_TRIGGER    =   350;// TIME BEFORE RECOIL ON THE FLY ADJUSTABLE MENU STARTS
define RC_DPAD_HOLD           =   180;// TIME BEFORE FAST SCROLL ADJUSTABLE STARTS

define RECOIL_ADJUSTER_MENU   =  9000;// RECOIL ON THE FLY MENU TIMEOUT TIME SET THE SAME AS BELOW
int    RC_MENU_TIMEOUT        =  9000;// RECOIL ON THE FLY MENU TIMEOUT TIME SET THE SAME AS ABOVE

// NO NEED TO ALTER BELOW HERE
int QT_TIMEOUT,DIGITS = YES,DOGZ_AA,POLAR_AA,PROG_AA,RECOIL_SELECT,DOGZ_RC,SNACKS_RC,MOD_NAME,ARC__VAL	,ARC____VAL;
int POLAR_RADIUS,POLAR_ANGLE,RELOAD_TIMER,RELOAD_TIME,RELOAD_LENGTH,USE_SENSE,SPEED,D_AS,D__AS,D__AS1,VM = YES;
int MASTER_MENU,MAIN_MENU_ID,MENU_ID,MAIN_MENU,MENU_ONE,MENU_TWO,MENU_THREE,MENU_FOUR,MENU_FIVE,MENU_SIX,QT_ID;
int COUNT,POSITION,LED,HH,WW,SILENT = YES,SHUNT,RUN,NAME,MOD_SELECT,MOD_ID = YES,MOD = YES,LOC,AA,ARC,ARC_V;

 
int MU1 = 127,MU2 = 137,MU3 = 147,MU4 = 157,MU5 = 167,MU6 = 177,MU7 = 187,MU8 = 207,MU9 = 217,MU10 = 227,MU11 = 237,MU12 = 247;
int MU13 = 267,MU14 = 277,MU15 = 287,MU16 = 297,MU17 = 317,MU18 = 327,MU19 = 337,MU20 = 347,MU21 = 357,MU22 = 367;
int RC1 = 267,RC2 = 277,RC3 = 287,RC4 = 297,RC5 = 307,RC6 = 317,RC7 = 327,RC8 = 337,RC9 = 347,RC10 = 357;
int TS1 = 127,TS2 = 137,TS3 = 147,TS4 = 157,TS5 = 167,TS6 = 177,TS7 = 187,TS8 = 197, TS9 = 207,TS10 = 217;
int TS11 = 227,TS12 = 237,TS13 = 247,TS14 = 257,TS15 = 267,TS16 = 277,TS17 = 287,TS18 = 297,TS19 = 307,TS20 = 317;
int AS1 = 267,AS2 = 277,AS3 = 287,AS4 = 297,AS5 = 307,AS6 = 317,AS7 = 327,AS8 = 337,AS9 = 347,AS10 = 357;
int XA1 = 127,XA2 = 137,XA3 = 147,XA4 = 157,XA5 = 167,XA6 = 177,XA7 = 187,XA8 = 197;
int XA9 = 207,XA10 = 217,XA11 = 227,XA12 = 237,XA13 = 247,AAM = 1043;

// NO NEED TO ALTER BELOW HERE
const string DOGZASSIST   = "DOGz";
const string PROGASSIST   = "PROG";
const string POLARASSIST  = "POLAR";
const string ASSIST       = "ASSIST";
const string TIMES        = "MODS ONE";
const string SHOT_MOD     = "SHOT MOD";
const string FIRE_MOD     = "FIRE MOD";
const string RECOIL       = "RECOIL";
const string MISC         = "MODS TWO";
const string SHOTMOD      = "< SHOT MODS >";
const string FIREMOD      = "< FIRE MODS >";
const string DROPFIRE     = "QUICK DROP FIRE";
const string DROPSHOT     = "DROP SHOT";
const string JUMPSHOT     = "JUMP SHOT";
const string PRONESHOT    = "PRONE SHOT";
const string STRAFESHOT   = "STRAFESHOT";
const string SLIDESHOT    = "SLIDE SHOT";
const string RAPIDFIRE    = "RAPIDFIRE";
const string DYNAMICFIRE  = "DYNAMIC";
const string SMARTFIRE    = "SMARTFIRE";
const string BURSTFIRE    = "BURSTFIRE";
const string SNIPERFIRE   = "SNIPERFIRE";
const string DISABLE      = "DISABLED";
const string ENABLE       = "ENABLED";
const string MODTOGGLE    = "MOD TOGGLE ON/OFF";
const string VERTICAL     = "RY-V";
const string HORIZONTAL   = "RX-H";
const string POWER1       = "POWER";
const string LOADED       = "LOADED THE";
const string SAVED        = "SAVED TO";
const string MEMORY       = "MEMORY";
const string RECOIL_      = "RECOIL DPAD ON/OFF";
const string DOGZRECOIL   = "DOGz";
const string SNACKSRECOIL = "SNACKS";
const string RECOIL_DF    = "DEFAULT";
const string RECOIL_A     = "PROFILE A";
const string RECOIL_B     = "PROFILE B";
const string RECOIL_C     = "PROFILE C";
const string RECOIL_D     = "PROFILE D";
const string RECOIL_E     = "PROFILE E";
const string RECOIL_F     = "PROFILE F";
const string DOGZ1RC      = "STREGNTH";
const string DOGZ2RC      = "INVERT FLOW";
const string DOGZ3RC      = "DIVIDE";
const string DOGZ4RC  	  = "RELEASE";
const string DOGZ5RC  	  = "RUMBLE";
const string OFF_     	  = "OFF";
const string ON_      	  = "ON";
const string SNACK1RC 	  = "VERTIACL";
const string SNACK2RC 	  = "HORIZONTAL";
const string SNACK3RC 	  = "RELEASE";
const string SNACK4RC     = "INVERTED";
const string SNACK5RC 	  = "RUMBLE";
const string MENU5_1  	  = "AUTORUN";
const string MENU5_2  	  = "HOLDBREATH";
const string MENU5_3  	  = "RAPID MELEE";
const string MENU5_4  	  = "EASY RELOAD";
const string MENU5_5  	  = "SENSITIVITY";
const string MENU6_1  	  = "BUNNY HOP";
const string MENU6_2  	  = "BUNNY WAIT";
const string MENU6_3   	  = "AUTOARMOUR";
const string MENU6_4  	  = "AUTOREVIVE";
const string MENU6_5  	  = "AUTO PING";
const string PROFILE  	  = "<RECOIL PROFILE>";
const string PROFILEA 	  = "PROFILE ONE";
const string PROFILEB 	  = "PROFILE TWO";
const string PROFILEC 	  = "PROFILE THREE";
const string PROFILED 	  = "PROFILE FOUR";
const string PROFILEE 	  = "PROFILE FIVE";
const string PROFILEF 	  = "PROFILE SIX";
const string MENU1    	  = "MENU1";
const string MENU2        = "MENU2";
const string MENU3    	  = "MENU3";
const string MENU4    	  = "MENU4";
const string MENU5    	  = "MENU5";
const string MENU6    	  = "MENU6";
const string DOGZ1    	  = "POSITIVE+";
const string DOGZ2    	  = "NEGITIVE-";
const string DOGZ3    	  = "INVERT VAL";
const string DOGZ4    	  = "DOGz OFF";
const string DOGZ5    	  = "VM SPEED";
const string POLAR1   	  = "RADIUS";
const string POLAR2   	  = "ANGLE";
const string POLAR3   	  = "BOOST";
const string POLAR4   	  = "SHAKE";
const string POLAR5       = "INPUT %";
const string PROG1    	  = "POSITIVE+";
const string PROG2    	  = "NEGITIVE-";
const string PROG3    	  = "WAIT TIME";
const string PROG4    	  = "PROG OFF";
const string PROG5    	  = "POLAR OFF";

// PUT YOUR TIMES/VALUES HERE BELOW IF YOU WISH TO (SHOULD NOT NEED ADJUSTING) CAN ADJUST VIA THE MENU ALSO
// |ROW1______________| ROW2____________________| ROW3_____________|__TIMES/VALUES MOD REFERENCE____| ( CAN ACCESS VIA MENU 2 )
int DROP_WAIT    =  50; define DROP_MIN   =   10, DROP_MAX   = 1000; // RAPID CROUCH WAIT TIME  ( BETWEEN PRESSES  )
int JUMP_WAIT    = 550; define JUMP_MIN   =   50, JUMP_MAX   = 1200; // JUMP ON FIRE WAIT TIME  ( BETWEEN PRESSES  )
int PRONE_WAIT   = 250; define PRONE_MIN  =   50, PRONE_MAX  = 1200; // TIME WHEN RELEASE FIRE  ( BEFORE  PRESSED  ) ( TO STAND BACK UP ) 
int STRAFE_WAIT  = 900; define STRAFE_MIN =   50, STRAFE_MAX = 2000; // WALK WAIT TIME          ( BETWEEN INVERT   ) ( BEFORE CHANGING DIRECTION )
int SLIDE_WAIT   = 200; define SLIDE_MIN  =   50, SLIDE_MAX  = 2000; // TIME CROUCH IS HELD     ( TO GO INTO SLIDE )     )

// SHOT MOD'S
int DROP_SHOT       =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 2 ) ( TOGGLE ON/OFF IN GAME )
int JUMP_SHOT       =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 2 ) ( TOGGLE ON/OFF IN GAME )
int PRONE_SHOT      =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 2 ) ( TOGGLE ON/OFF IN GAME )
int STRAFE_SHOT     =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 2 ) ( TOGGLE ON/OFF IN GAME )
int SLIDE_SHOT      =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 2 )
int QUICK_DROP_FIRE = YES;// ON/OFF BY DEFAULT ( TOGGLE ON/OFF IN GAME ) 
define STRAFE_RELEASE  =   35;// VALUE WHICH WILL BREAK STRAFE SHOT
define QUICK_DROP_WAIT = 1000;// LENGTH OF TIME TO HIT THE FLOOR AND FIRE

// FIRE MOD'S
int RAPID_FIRE      =  NO;// ON/OFF BY DEFAULT ( TOGGLE ON/OFF IN GAME ) 
int DYNAMIC_FIRE    =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 3 ) ( TOGGLE ON/OFF IN GAME )
int SMART_FIRE      =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 3 ) ( TOGGLE ON/OFF IN GAME )
int BURST_FIRE      =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 3 ) ( TOGGLE ON/OFF IN GAME )
int SNIPER_FIRE     =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 3 ) ( TOGGLE ON/OFF IN GAME )
// PUT YOUR TIMES/VALUES HERE BELOW IF YOU WISH TO (SHOULD NOT NEED ADJUSTING) CAN ADJUST VIA THE MENU ALSO
// |ROW1_______________| ROW2___________________________| ROW3____________________|__TIMES/VALUES MOD REFERENCE____| ( CAN ACCESS VIA MENU 3 ) 
int RAPID_WAIT    =  30; define RAPID_MIN         =   10, RAPID_MAX         = 1200;// RAPID FIRE WAIT TIME    ( BETWEEN PRESSES )
int DYNAMIC_WAIT  =  30; define DYNAMIC_MIN       =   10, DYNAMIC_MAX       = 1200;// DYNAMIC FIRE WAIT TIME  ( BETWEEN PRESSES )
int SMART_WAIT    = 350; define SMART_MIN         =   10, SMART_MAX         = 1200;// SMART FIRE WAIT TIME    ( BETWEEN PRESSES ) ( FOR A SLOWER RATE ? )
int BURST_WAIT    = 410; define BURST_MIN         =   10, BURST_MAX         = 1200;// BURST FIRE WAIT TIME    ( HOW LONG FIRE IS HELD )
int SNIPER_WAIT   = 350; define SNIPER_MIN        =   10, SNIPER_MAX        = 1200;// SNIPER FIRE WAIT TIME   ( HOW LONG ADS IS HELD BEFORE IT FIRES )
int FIRE_RATE;	         define RAPID_HIGH        =  490;//HIGHER VALUE WILL SLOW THE RATE OF FIRE WHEN FIRE IS HELD UNDER 50% ETC

// PUT YOUR VALUES HERE BELOW WHERE LABELLED IF YOU WANT TO
define AAMIN  = -5;// PROGRESSION NEGITIVE (MINIMUM)  
define AAMAX  =  5;// PROGRESSION POSITIVE (MAXIMUM)  
define AAVAL  =  5;// PROGRESSION STEP VALUE   
define AAWMIN =  1;// PROGRESSION WAIT (MINIMUM)  
define AAWMAX =  2;// PROGRESSION WAIT (MAXIMUM)   
define AAWVAL =  1;// PROGRESSION WAIT STEP TIME 

// NO NEED TO ALTER BELOW HERE
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;	
define PROG_VALUE_TRIGGER = 80;// DoGz ADS TRIGGER TO START DoGz PROG AIM ASSIST( MORE THAN 70% OF ADS HELD ) ( SET 0 IF YOU WANT INSTANT )
define DOGZ_VALUE_TRIGGER = 80;// DoGz ADS TRIGGER TO START DoGz AIM ASSIST ( MORE THAN 70% OF ADS HELD ) ( SET 0 IF YOU WANT INSTANT )

// |ROW1_______________| ROW2___________________________| ROW3____________________|__TIMES/VALUES MOD REFERENCE____|
int D___AS        =   5; define D___AS_MIN        =  -35, D___AS_MAX        =   35;//DOGZ AIMASSIST +
int D_AS1         =  -5; define D_AS1_MIN         =  -35, D_AS1_MAX         =   35;//DOGZ AIMASSIST -
int DG_AS         =   4; define D__AS1_MIN        =  -50, D__AS1_MAX        =   50;//DOGZ AIMASSIST INVERT
int DASR          =  50; define DASR_MIN          =    0, DASR_MAX          =  100;//DOGZ AIMASSIST RELEASE
int VMC           =   0; define VMC_MIN           =   -9, VMC_MAX           =  100;//VIRTUAL MACHINE ZEN SPEED TIME 	

int RADIUS        =   8; define POLAR_RADIUS_MIN  =    1, POLAR_RADIUS_MAX  =  100;//POLAR RADIUS
int ANGLE         =  20; define POLAR_ANGLE_MIN   =    1, POLAR_ANGLE_MAX   =   50;//POLAR ANGLE  
int POLAR_BOOST   =   5; define POLAR_BOOST_MIN   =  -30, POLAR_BOOST_MAX   =   30;//POLAR BOOST
int POLAR_SHAKE   =  20; define POLAR_SHAKE_MIN   =    0, POLAR_SHAKE_MAX   =   50;//POLAR SHAKE
int A_B_S         =   2; define A_B_S_MIN         =    0, A_B_S_MAX         =    5;//ACTUAL INPUT DIVIDE
int POLAR_RELEASE =  20; define POLAR_RELEASE_MIN =    5, POLAR_RELEASE_MAX =   50;//POLAR RELEASE

int POSI          =   0; define POSI_MIN          =  -30, POSI_MAX          =   30;//PROGRESSION ASSIST+ ( THIS IS ADDED TO THE MAIN VALUES ( 5) )
int NEGI          =   0; define NEGI_MIN          =  -30, NEGI_MAX          =   30;//PROGRESSION ASSIST- ( THIS IS ADDED TO THE MAIN VALUES (-5) )
int WA            =   0; define WA_MIN            =   -2, WA_MAX            =  100;//PROGRESSION WAIT    ( THIS IS ADDED TO THE MAIN VALUES ( 2) )
int PROG_RELEASE  =  15; define PROG_RELEASE_MIN  =    8, PROG_RELEASE_MAX  =   90;//PROGRESSION RELEASE

int ARC_VAL       =  50; define ARC_VAL_MIN       =    0, ARC_VAL_MAX       =  100;//DOGZ RECOIL VALUE
int ARC___VAL     =  60; define ARC___VAL_MIN     =    0, ARC___VAL_MAX     =  100;//DOGZ RECOIL INVERT VALUE
int DIVIDE        =   3; define DIVIDE_MIN        =  -10, DIVIDE_MAX        =   20;//DOGZ RECOIL DIVIDE 
int DOGZ_RELEASE  =  40; define DOGZ_RELEASE_MIN  =    5, DOGZ_RELEASE_MAX  =  100;//DOGZ RECOIL RELEASE

int DOGZ_RECOIL =  NO;// DoGz PROGRESSION RECOIL METHOD
int DOGZ_RUMBLE =  NO;// DoGz RECOIL USING VIBRATION OR TRIGGERS ( NO = ADS & FIRE ) ( YES = VIBRATION & ADS & FIRE )
define DOGZRC_VALUE_TRIGGER  = 70;// DoGz ADS TRIGGER TO START RECOIL ( MORE THAN 70% OF ADS HELD ) ( SET 0 IF YOU WANT INSTANT )
define SNACKRC_VALUE_TRIGGER = 70;// SNACK'S ADS TRIGGER TO START RECOIL ( MORE THAN 70% OF ADS HELD ) ( SET 0 IF YOU WANT INSTANT )
int SNACKS_RECOIL = YES;// ITzSNACKS RECOIL METHOD ENHANCED
int SNACK_RUMBLE  =  NO;// ITzSNACKS RECOIL USING VIBRATION OR TRIGGERS ( NO = ADS & FIRE ) ( YES = VIBRATION & ADS & FIRE )
int SNACK_INVERT  = INVERT_OFF;  //(  INVERT_ON  )    OR    (  INVERT_OFF  )

define VERTICAL_RECOIL_DF   = 21;//RECOIL  DEFAULT VERTICAL VALUE IF YOU GO BEYOND THE LIMITS WHILE ADJUSTING ( TO SAVE GOING BACK TO ZERO )( SET THE SAME AS VERTICAL BELOW )
define HORIZONTAL_RECOIL_DF =  0;//RECOIL  DEFAULT VERTICAL VALUE IF YOU GO BEYOND THE LIMITS WHILE ADJUSTING ( TO SAVE GOING BACK TO ZERO )( SET THE SAME AS HORIZONTAL BELOW)
// PUT YOUR TIMES/VALUES HERE BELOW IF YOU WISH TO (SHOULD NOT NEED ADJUSTING) CAN ADJUST VIA THE MENU ALSO
// |ROW1___________________| ROW2_____________________________| ROW3________________________|__TIMES/VALUES MOD REFERENCE____|
int VERTICAL_RECOIL   =  21; define VERTICAL_RECOIL_MIN   =  0, VERTICAL_RECOIL_MAX   =  100;//ITzSNACKS RECOIL UP/DOWN    ( DEFAULT VALUE )
int HORIZONTAL_RECOIL =   0; define HORIZONTAL_RECOIL_MIN =  0, HORIZONTAL_RECOIL_MAX =  100;//ITzSNACKS RECOIL LEFT/RIGHT
int SNACK_RELEASE     =   2; define SNACK_RELEASE_MIN     =  1, SNACK_RELEASE_MAX     =  100;//ITzSNACKS RELEASE

// |PROFILE A_______||PROFILE B________||PROFILE C________| |PROFILE D________| |PROFILE E________| |PROFILE F________|
int PROFILE_AY =  15, PROFILE_BY =   25, PROFILE_CY =   31,  PROFILE_DY =   35,  PROFILE_EY =   39,  PROFILE_FY =   44;//RECOIL PROFILES (RY (UP & DOWN))
int PROFILE_AX =   0, PROFILE_BX =    0, PROFILE_CX =    0,  PROFILE_DX =    0,  PROFILE_EX =    0,  PROFILE_FX =    0;//RECOIL PROFILES (RX (LEFT & RIGHT))
int RECOIL_PROFILES  = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )( A - F )
int RECOIL_LOAD_SAVE = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )( SAVES OR LOADS PROFILES A TO F ) ( V & H )

int AUTORUN     = YES;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 5 ) 
int HOLDBREATH  =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 5 ) 
int RAPID_MELEE = YES;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 5 ) ( TOGGLE IN GAME )
int EASY_RELOAD = YES;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 5 )
int SENSITIVITY =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 5 ) ( CANNOT BE USED WITH POLAR ASSIST )
int BUNNYHOP    =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 6 ) ( TOGGLE IN GAME ) 
int AUTOARMOUR  =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 6 ) 
int AUTOREVIVE  =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 6 ) 	
int AUTOPING    =  NO;// ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 6 ) 
// |ROW1___________________| ROW2_____________________________| ROW3________________________|__TIMES/VALUES MOD REFERENCE____|
int BUNNYHOP_WAIT	  = 550; define BUNNYHOP_WAIT_MIN     = 50,	BUNNYHOP_WAIT_MAX     = 2000;
// PUT YOUR TIMES/VALUES HERE BELOW IF YOU WANT TO
int    RAPID_MELEE_WAIT       =   40;// RAPID MELEE WAIT BEFORE NEXT MELEE
define AUTOPING_ACTIVATE_TIME =  950;// TIME HOLDING FIRE ORE ADS BEFORE PING ( CHOOSE BUTTON ABOVE ( TRIGGER BUTTONS ) ) 
define BUNNYHOP_ACTIVATE_TIME =  250;// HOLD TIME OF BUNNYHOP ACTIVATOR(TO ACTIVATE COMBO)
define BUNNYHOP_TRIGGER       =   40;// BUNNY HOP PUSH TRIGGER ( WHEN IT STARTS TO BUNNY HOP ) ( LS ACTIVATES ) ( WALK )
define SLIDE_TIME             = 1000;// SLIDE HOLD TIME ( CROUCH ) ( COMBO HOLD )
define ARMOUR_HOLD_TRIGGER    =  300;// ARMOUR HOLD TRIGGER TIME ( WARZONE ONLY )( TO ACTIVATE COMBO )
define ARMOUR_HOLD_TIME       = 6600;// ARMOUR HOLD TIME ( WARZONE ONLY )( COMBO HOLD )
define REVIVE_HOLD_TRIGGER    =  300;// REVIVE A BRO HOLD TRIGGER TIME( TO ACTIVATE COMBO )
define REVIVE_HOLD_TIME       = 1200;// REVIVE A BRO HOLD TIME( COMBO HOLD )
define RELOAD_HOLD_TIME_RECORDER = 300;// LENGTH OF TIME TO START RECORDING RELOAD TIME( TO ACTIVATE )

//AUTORUN-TACTICAL SPRINT OPTIONS
define RUN_TRIGGER          =  90;// VALUE TO PUSH UP BEFORE AUTORUN STARTS
define TACTICAL_SPRINT_WAIT =  40;// TIME BETWEEN BUTTON PRESS
define HOLDBREATH_RELEASE   = 200;// HOLDBREATH GAP ( TAKE BREATH )

// PUT YOUR SENSITIVITY HERE BELOW IF YOUR USING DYNAMIC SENSE 
int GENERAL_SENSE  = 100;// LIMITS STICK TO THIS VALUE (RX/RY)
int AIM_SENSE      =  90;// LIMITS STICK TO THIS VALUE (RX/RY)
int FIRE_SENSE     =  90;// LIMITS STICK TO THIS VALUE (RX/RY)
int AIM_FIRE_SENSE =  84;// LIMITS STICK TO THIS VALUE (RX/RY)

int POLAR_BOOST_FIRE   =  YES;// BOOST POLAR AIM ASSIST ON FIRE(WHEN AIMING & SHOOTING)
int POLAR_SHAKE_FIRE   =  YES;// SHAKE POLAR AIM ASSIST ON FIRE(WHEN AIMING & SHOOTING)

int POLAR_ASSIST       =  YES;// POLAR AIM ASSIST ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 1 )  
int DoGz_AIM_ASSIST    =  YES;// DoGz  AIM ASSIST ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 1 ) 
int PROGRESSION_ASSIST =  YES;// PROG  AIM ASSIST ON/OFF BY DEFAULT ( CAN ACCESS VIA MENU 1 ) 

// MASTER SWITCH ONLY HERE BELOW  ( ONLY FOR TOGGABLE MODS )
// SHOT MOD'S ( ONLY FOR TOGGABLE MODS )		
int DROPSHOT_     = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int JUMPSHOT_     = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int PRONESHOT_    = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int STRAFESHOT_   = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int QUICKDROPFIRE = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
// FIRE MOD'S ( ONLY FOR TOGGABLE MODS )
int RAPIDFIRE_    = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int DYNAMICFIRE_  = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int SMARTFIRE_    = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int BURSTFIRE_    = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int SNIPERFIRE_   = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
// OTHER MOD'S ( ONLY FOR TOGGABLE MODS )
int RAPIDMELEE    = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )
int BUNNY_HOP     = YES;//( CANNOT BE EDITED IN GAME ) ( IF YOU CHOOSE OFF IT WILL NOT WORK IN GAME )

init { 
	COLOUR = 150; 
	combo_run(CLEAR);
}

main {                                 

if (RECOIL_LOAD_SAVE && get_ival(LOAD_HOLD) && get_ptime(LOAD_HOLD) > PROFILE_HOLD_TIME && event_press(LOAD_PRESS)) {	
	SHUNT = LOAD_PRESS;
	LOAD = YES;
	LOAD_RECOIL ();
}
if (RECOIL_LOAD_SAVE && get_ival(SAVE_HOLD) && get_ptime(SAVE_HOLD) > PROFILE_HOLD_TIME && event_press(SAVE_PRESS)) {		
	SHUNT = SAVE_PRESS;
	SAVE = YES;
	SAVE_RECOIL ();
}
if (!MASTER_MENU && get_ival(MENU_HOLD_BUTTON) && event_press(MENU_PRESS_BUTTON)) {
	MASTER_MENU_ON();
}
if (MASTER_MENU) {
	vm_tctrl(MENU_VM);
	MENU_TIMEOUT -= get_rtime();
if (get_ival(UP) || get_ival(DOWN) || get_ival(LEFT) || get_ival(RIGHT) || get_ival(MENU_SELECT_BUTTON) || get_ival(MENU_BACK_BUTTON)) {
	MENU_TIMEOUT = MENU_TIMEOUT_;
	}
if (!MENU_TIMEOUT) {
	OFF();
}
if (event_press(MENU_OFF_BUTTON)) {
	OFF();
}
if (MAIN_MENU) {
	MAIN_MENU();
	set_rgb(ON * FIVE,ON,ON);
if (MAIN_MENU_ID == ONE && event_press(MENU_SELECT_BUTTON)) {
	MENU_ONE  = YES;
	MENU_ID   = YES;
	MENU_ONE();
    MAIN_OFF();
    set_rgb(ON * THREE,ON,OFF);
    }
if (MAIN_MENU_ID == TWO && event_press(MENU_SELECT_BUTTON)) {
	MENU_TWO   = YES;
	MOD_SELECT = YES;
	MENU_TWO();
    MAIN_OFF();
    set_rgb(OFF,ON,OFF);
    }
if (MAIN_MENU_ID == THREE && event_press(MENU_SELECT_BUTTON)) {
	MENU_THREE = YES;
	MOD_SELECT = YES;
	MENU_THREE();
    MAIN_OFF();
	 set_rgb(OFF,OFF,ON);
    }
if (MAIN_MENU_ID == FOUR && event_press(MENU_SELECT_BUTTON)) {
	MENU_FOUR     = YES;
	RECOIL_SELECT = YES;
	MENU_FOUR();
    MAIN_OFF();
    set_rgb(ON,OFF,OFF);
    }
if (MAIN_MENU_ID == FIVE && event_press(MENU_SELECT_BUTTON)) {
	MENU_FIVE = YES;
	MENU_ID   = YES;
	MENU_FIVE();
    MAIN_OFF();
	set_rgb(ON * FOUR,OFF,ON);
    }
if (MAIN_MENU_ID == SIX && event_press(MENU_SELECT_BUTTON)) {
	MENU_SIX  = YES;
	MENU_ID   = YES;
	MENU_SIX();
    MAIN_OFF();
    set_rgb(ON,OFF,ON);
    }
if (event_press(MENU_BACK_BUTTON)) {
	OFF();
	}
}
if (MENU_ONE) {
	MENU_ONE();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	MENU_ONE     =  NO;
	RESET();
	MAIN_MENU();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE && event_release(MENU_SELECT_BUTTON) && get_ptime(MENU_SELECT_BUTTON) > BUTTON_PRESS_TIME) {
	DOGZ_AA = YES;
	MENU_ONE_OFF();
    set_rgb(ON,ON,ON);
    }
if (MENU_ID == TWO && event_press(MENU_SELECT_BUTTON)) {
	POLAR_AA = YES;
	MENU_ONE_OFF();
    set_rgb(OFF,ON/TWO,ON/TWO);
    }
if (MENU_ID == THREE && event_press(MENU_SELECT_BUTTON)) {
	PROG_AA = YES;
	MENU_ONE_OFF();
    set_rgb(ON/TWO,OFF,ON/TWO);
    }
}
if (DOGZ_AA) {
	DOGZ_AA();
if (event_press(MENU_BACK_BUTTON)) {
	MENU_ONE = YES;
	MENU_ID  = YES;
	DOGZ_AA  =  NO;
	MENU_ONE();
	combo_run(VIBRATE);
}
if (MENU_ID == ONE) {
	D___AS = ADJUSTER(D___AS,D___AS_MIN,D___AS_MAX,ONE);
} 	
if (MENU_ID == TWO) {
	D_AS1 = ADJUSTER(D_AS1,D_AS1_MIN,D_AS1_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	DG_AS = ADJUSTER(DG_AS,D__AS1_MIN,D__AS1_MAX,ONE);
} 	
if (MENU_ID == FOUR) {
	DASR = ADJUSTER(DASR,DASR_MIN,DASR_MAX,ONE);
} 	
if (MENU_ID == FIVE) {
	VMC = ADJUSTER(VMC,VMC_MIN,VMC_MAX,ONE);
	} 	
}
if (POLAR_AA) {
	POLAR_AA();
if (event_press(MENU_BACK_BUTTON)) {
	MENU_ONE = YES;
	MENU_ID  = YES;
	POLAR_AA =  NO;
	MENU_ONE();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	RADIUS = ADJUSTER(RADIUS,POLAR_RADIUS_MIN,POLAR_RADIUS_MAX,ONE);
} 	
if (MENU_ID == TWO) {
	ANGLE = ADJUSTER(ANGLE,POLAR_ANGLE_MIN,POLAR_ANGLE_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	POLAR_BOOST = ADJUSTER(POLAR_BOOST,POLAR_BOOST_MIN,POLAR_BOOST_MAX,ONE);
} 	
if (MENU_ID == FOUR) {
	POLAR_SHAKE = ADJUSTER(POLAR_SHAKE,POLAR_SHAKE_MIN,POLAR_SHAKE_MAX,ONE);
} 	
if (MENU_ID == FIVE) {
	A_B_S = ADJUSTER(A_B_S,A_B_S_MIN,A_B_S_MAX,ONE);
 	}
} 	
if (PROG_AA) {
	PROG_AA();
if (event_press(MENU_BACK_BUTTON)) {
	MENU_ONE = YES;
	MENU_ID  = YES;
	PROG_AA  =  NO;
	MENU_ONE();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	POSI = ADJUSTER(POSI,POSI_MIN,POSI_MAX,ONE);
} 	
if (MENU_ID == TWO) {
	NEGI = ADJUSTER(NEGI,NEGI_MIN,NEGI_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	WA = ADJUSTER(WA,WA_MIN,WA_MAX,ONE);
} 	
if (MENU_ID == FOUR) {
	PROG_RELEASE = ADJUSTER(PROG_RELEASE,PROG_RELEASE_MIN,PROG_RELEASE_MAX,ONE);
} 	
if (MENU_ID == FIVE) {
	POLAR_RELEASE = ADJUSTER(POLAR_RELEASE,POLAR_RELEASE_MIN,POLAR_RELEASE_MAX,ONE);
 	}
}
if (MENU_TWO) {
	MENU_TWO();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	MENU_TWO     =  NO;
	MOD_SELECT   =  NO;
	MAIN_MENU();
	combo_run(VIBRATE);
	}
}
if (MENU_THREE) {
	MENU_THREE();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	MENU_THREE   =  NO;
	MOD_SELECT   =  NO;
	MAIN_MENU();
	combo_run(VIBRATE);
	}
}
if (MENU_FOUR) {
	MENU_FOUR();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU     = YES;
	MAIN_MENU_ID  = YES;
	MENU_FOUR     =  NO;
	RECOIL_SELECT =  NO;
	RESET();
	MAIN_MENU();
	combo_run(VIBRATE);
	}
}
if (DOGZ_RC) {
	DOGZ_RECOIL();
if (event_press(MENU_BACK_BUTTON)) {
	MENU_FOUR     = YES;
	RECOIL_SELECT = YES;
	DOGZ_RC       =  NO;
	MENU_FOUR();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	ARC_VAL = ADJUSTER(ARC_VAL,ARC_VAL_MIN,ARC_VAL_MAX,ONE);
} 	
if (MENU_ID == TWO) {
	ARC___VAL = ADJUSTER(ARC___VAL,ARC___VAL_MIN,ARC___VAL_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	DIVIDE = ADJUSTER(DIVIDE,DIVIDE_MIN,DIVIDE_MAX,ONE);
} 	
if (MENU_ID == FOUR) {
	DOGZ_RELEASE = ADJUSTER(DOGZ_RELEASE,DOGZ_RELEASE_MIN,DOGZ_RELEASE_MAX,ONE);
} 	
if (MENU_ID == FIVE) {
	DOGZ_RUMBLE = ADJUSTER(DOGZ_RUMBLE,NO,YES,ONE);
	} 	
}
if (SNACKS_RC) {
	SNACKS_RECOIL();
if (event_press(MENU_BACK_BUTTON)) {
	MENU_FOUR     = YES;
	RECOIL_SELECT = YES;
	SNACKS_RC     =  NO;
	MENU_FOUR();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	VERTICAL_RECOIL = ADJUSTER(VERTICAL_RECOIL,VERTICAL_RECOIL_MIN,VERTICAL_RECOIL_MAX,ONE);
} 	
if (MENU_ID == TWO) {
	HORIZONTAL_RECOIL = ADJUSTER(HORIZONTAL_RECOIL,HORIZONTAL_RECOIL_MIN,HORIZONTAL_RECOIL_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	SNACK_RELEASE = ADJUSTER(SNACK_RELEASE,SNACK_RELEASE_MIN,SNACK_RELEASE_MAX,ONE);
} 	
if (MENU_ID == FOUR) {
	SNACK_INVERT = ADJUSTER(SNACK_INVERT,NO,YES,ONE);
} 	
if (MENU_ID == FIVE) {
	SNACK_RUMBLE = ADJUSTER(SNACK_RUMBLE,NO,YES,ONE);
	} 	
}
if (MENU_FIVE) {
	MENU_FIVE();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	MENU_FIVE    =  NO;
	MENU_ID      =  NO;
	MAIN_MENU();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	AUTORUN = ADJUSTER(AUTORUN,NO,YES,ONE);
} 	
if (MENU_ID == TWO) {
	HOLDBREATH = ADJUSTER(HOLDBREATH,NO,YES,ONE);
} 	
if (MENU_ID == THREE) {
	RAPID_MELEE = ADJUSTER(RAPID_MELEE,NO,YES,ONE);
	} 
if (MENU_ID == FOUR) {
	EASY_RELOAD = ADJUSTER(EASY_RELOAD,NO,YES,ONE);
} 	
if (MENU_ID == FIVE) {
	SENSITIVITY = ADJUSTER(SENSITIVITY,NO,YES,ONE);
	} 	
}
if (MENU_SIX) {
	MENU_SIX();
if (event_press(MENU_BACK_BUTTON)) {
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	MENU_SIX     =  NO;
	MENU_ID      =  NO;
	MAIN_MENU();
	combo_run(VIBRATE);
	}
if (MENU_ID == ONE) {
	BUNNYHOP = ADJUSTER(BUNNYHOP,NO,YES,ONE);
} 	
if (MENU_ID == TWO) {
	BUNNYHOP_WAIT = ADJUSTER(BUNNYHOP_WAIT,BUNNYHOP_WAIT_MIN,BUNNYHOP_WAIT_MAX,ONE);
} 	
if (MENU_ID == THREE) {
	AUTOARMOUR = ADJUSTER(AUTOARMOUR,NO,YES,ONE);
} 	
if (MENU_ID == FOUR) {
	AUTOREVIVE = ADJUSTER(AUTOREVIVE,NO,YES,ONE);
} 	
if (MENU_ID == FIVE) {
	AUTOPING = ADJUSTER(AUTOPING,NO,YES,ONE);
	} 	
}
	BLOCK(DOWN); BLOCK(UP); BLOCK(LEFT); BLOCK(RIGHT); BLOCK(MENU_SELECT_BUTTON); SHUNT = MENU_BACK_BUTTON;
}
	D__AS1       = DG_AS;
	POLAR_RADIUS = RADIUS;
	POLAR_ANGLE  = ANGLE; 
if (!MASTER_MENU && !SRC && !RC_PRO) {
if (get_ival(BUNNYHOP_HOLD_TOGGLE) && event_press(BUNNYHOP_PRESS_TOGGLE) 
	|| QT_ID == ONE && event_press(LEFT) || QT_ID == ONE && event_press(RIGHT)) {
	BUNNYHOP = !BUNNYHOP;
	QT_ID = ONE;
	QUICK_TOGGLE();
	}
if (event_press(BUNNYHOP_ISOLATE)){
	BUNNYHOP = NO;
	}
if (NAME && QT_ID == ONE) {	
	TOGGLE(34,17,MENU6_1[ZERO],BUNNYHOP[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(PRONESHOT_HOLD_TOGGLE) && event_press(PRONESHOT_PRESS_TOGGLE) 
	|| QT_ID == TWO && event_press(LEFT) || QT_ID == TWO && event_press(RIGHT)) {
	PRONE_SHOT = !PRONE_SHOT;
	QT_ID = TWO;
	QUICK_TOGGLE();
	DROP_SHOT  = NO;
	JUMP_SHOT  = NO;
	}
if (event_press(PRONESHOT_ISOLATE)) {
	PRONE_SHOT = NO;
	}
if (NAME && QT_ID == TWO) {	
	TOGGLE(32,17,PRONESHOT[ZERO],PRONE_SHOT[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(DROPSHOT_HOLD_TOGGLE) && event_press(DROPSHOT_PRESS_TOGGLE)
	|| QT_ID == THREE && event_press(LEFT) || QT_ID == THREE && event_press(RIGHT)) {
	DROP_SHOT = !DROP_SHOT;
	QT_ID = THREE;
	QUICK_TOGGLE();
	JUMP_SHOT  = NO;
	PRONE_SHOT = NO;
	}
if (event_press(DROPSHOT_ISOLATE)) {
	DROP_SHOT = NO;
	}
if (NAME && QT_ID == THREE) {	
	TOGGLE(34,17,DROPSHOT[ZERO],DROP_SHOT[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(JUMPSHOT_HOLD_TOGGLE) && event_press(JUMPSHOT_PRESS_TOGGLE) 
	|| QT_ID == FOUR && event_press(LEFT) || QT_ID == FOUR && event_press(RIGHT)) {
	JUMP_SHOT = !JUMP_SHOT;
	QT_ID = FOUR;
	QUICK_TOGGLE();
	DROP_SHOT  = OFF;
	PRONE_SHOT = OFF;
	}
if (event_press(JUMPSHOT_ISOLATE)) {
	JUMP_SHOT = NO;
	}
if (NAME && QT_ID == FOUR) {	
	TOGGLE(34,17,JUMPSHOT[ZERO],JUMP_SHOT[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(STRAFESHOT_HOLD_TOGGLE) && event_press(STRAFESHOT_PRESS_TOGGLE) 
	|| QT_ID == FIVE && event_press(LEFT) || QT_ID == FIVE && event_press(RIGHT)) {
	STRAFE_SHOT = !STRAFE_SHOT;
	QT_ID = FIVE;
	QUICK_TOGGLE();
	}
if (event_press(STRAFESHOT_ISOLATE)) { 
	STRAFE_SHOT = NO;
	}
if (NAME && QT_ID == FIVE) {	
	TOGGLE(31,17,STRAFESHOT[ZERO],STRAFE_SHOT[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(DYNAMICFIRE_HOLD_TOGGLE) && event_press(DYNAMICFIRE_PRESS_TOGGLE) 
	|| QT_ID == SIX && event_press(LEFT) || QT_ID == SIX && event_press(RIGHT)) {
	DYNAMIC_FIRE = !DYNAMIC_FIRE;
	QT_ID = SIX;
	QUICK_TOGGLE();
	RAPID_FIRE  = NO;
	SMART_FIRE  = NO;
	BURST_FIRE  = NO;
	}
if (NAME && QT_ID == SIX) {	
	TOGGLE(42,17,DYNAMICFIRE[ZERO],DYNAMIC_FIRE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(RAPIDFIRE_HOLD_TOGGLE) && event_press(RAPIDFIRE_PRESS_TOGGLE) 
	|| QT_ID == SEVEN && event_press(LEFT) || QT_ID == SEVEN && event_press(RIGHT)) {
	RAPID_FIRE = !RAPID_FIRE;
	QT_ID = SEVEN;
	QUICK_TOGGLE();
	DYNAMIC_FIRE = NO;
	SMART_FIRE   = NO;
	BURST_FIRE   = NO;
	}
if (NAME && QT_ID == SEVEN) {	
	TOGGLE(31,17,RAPIDFIRE[ZERO],RAPID_FIRE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(SMARTFIRE_HOLD_TOGGLE) && event_press(SMARTFIRE_PRESS_TOGGLE) 
	|| QT_ID == EIGHT && event_press(LEFT) || QT_ID == EIGHT && event_press(RIGHT)) {
	SMART_FIRE = !SMART_FIRE;
	QT_ID = EIGHT;
	QUICK_TOGGLE();
	DYNAMIC_FIRE = NO;
	RAPID_FIRE   = NO;
	BURST_FIRE   = NO;
	}
if (NAME && QT_ID == EIGHT) {	
	TOGGLE(31,17,SMARTFIRE[ZERO],SMART_FIRE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(BURSTFIRE_HOLD_TOGGLE) && event_press(BURSTFIRE_PRESS_TOGGLE)
	|| QT_ID == NINE && event_press(LEFT) || QT_ID == NINE && event_press(RIGHT)) {
	BURST_FIRE = !BURST_FIRE;
	QT_ID = NINE;
	QUICK_TOGGLE();
	DYNAMIC_FIRE = NO;
	RAPID_FIRE   = NO;
	SMART_FIRE   = NO;
	}
if (NAME && QT_ID == NINE) {	
	TOGGLE(31,17,BURSTFIRE[ZERO],BURST_FIRE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(SNIPERSHOT_HOLD_TOGGLE) && event_press(SNIPERSHOT_PRESS_TOGGLE) 
	|| QT_ID == TEN && event_press(LEFT) || QT_ID == TEN && event_press(RIGHT)) {
	SNIPER_FIRE = !SNIPER_FIRE;
	QT_ID = TEN;
	QUICK_TOGGLE();
	}
if (NAME && QT_ID == TEN) {	
	TOGGLE(31,17,SNIPERFIRE[ZERO],SNIPER_FIRE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(RAPIDMELEE_HOLD_TOGGLE) && event_press(RAPIDMELEE_PRESS_TOGGLE) 
	|| QT_ID == ELEVEN && event_press(LEFT) || QT_ID == ELEVEN && event_press(RIGHT)) {
	RAPID_MELEE = !RAPID_MELEE;
	QT_ID = ELEVEN;
	QUICK_TOGGLE();
	}
if (NAME && QT_ID == ELEVEN) {	
	TOGGLE(31,17,MENU5_3[ZERO],RAPID_MELEE[MOD_NAME]);
	QT_NAME();
}
	else
if (get_ival(DOWN) && event_press(L3) 
	|| QT_ID == TWELVE && event_press(LEFT) || QT_ID == TWELVE && event_press(RIGHT)) {
	A = !A;
	QT_ID = TWELVE;
	QUICK_TOGGLE();
if (A) {
	HORIZONTAL_RECOIL = PROFILE_AX;
	VERTICAL_RECOIL   = PROFILE_AY;
	B = NO; C = NO; D = NO; E = NO; F = NO;
	}
}
if (NAME && QT_ID == TWELVE) {	
	TOGGLE(34,17,RECOIL_A[ZERO],A[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_AY,PROFILE_AX);
}
	else
if (get_ival(DOWN) && event_press(R3) 
	|| QT_ID == THIRTEEN && event_press(LEFT) || QT_ID == THIRTEEN && event_press(RIGHT)) {
	B = !B;
	QT_ID = THIRTEEN;
	QUICK_TOGGLE();
if (B) {
	HORIZONTAL_RECOIL = PROFILE_BX;
	VERTICAL_RECOIL   = PROFILE_BY;
	A = NO;C = NO; D = NO; E = NO; F = NO;
	}
}
if (NAME && QT_ID == THIRTEEN) {	
	TOGGLE(34,17,RECOIL_B[ZERO],B[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_BY,PROFILE_BX);
}
	else
if (get_ival(DOWN) && event_press(CROSS) 
	|| QT_ID == FOURTEEN && event_press(LEFT) || QT_ID == FOURTEEN && event_press(RIGHT)) {
	C = !C;
	QT_ID = FOURTEEN;
	QUICK_TOGGLE();
if (C) {
	HORIZONTAL_RECOIL = PROFILE_CX;
	VERTICAL_RECOIL   = PROFILE_CY;
	A = NO; B = NO; D = NO; E = NO; F = NO;
	}	
}
if (NAME && QT_ID == FOURTEEN) {	
	TOGGLE(34,17,RECOIL_C[SL],C[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_CY,PROFILE_CX);
}
	else
if (get_ival(DOWN) && event_press(CIRCLE) 
	|| QT_ID == FIFTEEN && event_press(LEFT) || QT_ID == FIFTEEN && event_press(RIGHT)) {
	D = !D;
	QT_ID = FIFTEEN;
	QUICK_TOGGLE();
if (D) {
	HORIZONTAL_RECOIL = PROFILE_DX;
	VERTICAL_RECOIL   = PROFILE_DY;
	A = NO; B = NO; C = NO; E = NO; F = NO;
	}	
}	
if (NAME && QT_ID == FIFTEEN) {	
	TOGGLE(34,17,RECOIL_D[ZERO],D[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_DY,PROFILE_DX);
}
	else
if (get_ival(DOWN) && event_press(TRIANGLE) 
	|| QT_ID == SIXTEEN && event_press(LEFT) || QT_ID == SIXTEEN && event_press(RIGHT)) {
	E = !E;
	QT_ID = SIXTEEN;
	QUICK_TOGGLE();
if (E) {
	HORIZONTAL_RECOIL = PROFILE_EX;
	VERTICAL_RECOIL   = PROFILE_EY;
	A = NO; B = NO; C = NO; D = NO; F = NO;
	}		
}
if (NAME && QT_ID == SIXTEEN) {	
	TOGGLE(34,17,RECOIL_E[ZERO],E[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_EY,PROFILE_EX);
}
	else
if (get_ival(DOWN) && event_press(SQUARE) 
	|| QT_ID == SEVENTEEN && event_press(LEFT) || QT_ID == SEVENTEEN && event_press(RIGHT)) {
	F = !F;
	QT_ID = SEVENTEEN;
	QUICK_TOGGLE();
if (F) {
	HORIZONTAL_RECOIL = PROFILE_FX;
	VERTICAL_RECOIL   = PROFILE_FY;
	A = NO; B = NO; C = NO; D = NO; E = NO;
	}			
}
if (NAME && QT_ID == SEVENTEEN) {	
	TOGGLE(34,17,RECOIL_F[ZERO],F[MOD_NAME]);
	QT_NAME();
	VALUES(PROFILE_FY,PROFILE_FX);
	}		
	else
if (get_ival(AIM) && event_press(PS) 
	|| QT_ID == EIGHTEEN && event_press(LEFT) || QT_ID == EIGHTEEN && event_press(RIGHT)) {
	QUICK_DROP_FIRE = !QUICK_DROP_FIRE;
	QT_ID = EIGHTEEN;
	QUICK_TOGGLE();
}
if (NAME && QT_ID == EIGHTEEN) {	
	TOGGLE(12,17,DROPFIRE[ZERO],QUICK_DROP_FIRE[MOD_NAME]);
	QT_NAME();
	}
if (!A && !B && !C && !D && !E && !F) {
	VERTICAL_RECOIL   = VERTICAL_RECOIL_DF;
	HORIZONTAL_RECOIL = HORIZONTAL_RECOIL_DF;
	}
}
if (NAME) {
	QT_TIMEOUT += get_rtime();
	BLOCK(DOWN); BLOCK(UP); BLOCK(LEFT); BLOCK(RIGHT); BLOCK(CROSS); BLOCK(CIRCLE); BLOCK(TRIANGLE); BLOCK(SQUARE);
	BLOCK(L3); BLOCK(R3); BLOCK(L1); BLOCK(R1); BLOCK(TOUCH); BLOCK(SHARE); BLOCK(PS);

if (QT_TIMEOUT > QT_TIMEOUT_) {
	QT_OFF();
	QT_ID = NO;
	}
if (get_ival(AIM) || get_ival(DOWN)) {
	QT_TIMEOUT = NO;
	}
if (get_ival(AIM) && get_ptime(AIM) > RECOIL_HOLD_TRIGGER && get_ival(RECOIL_PRESS_BUTTON)) {	
	QT_OFF();
	RYSR= YES;
	SRC = YES;
	}

}
if (!MASTER_MENU) {
if (QUICKDROPFIRE && QUICK_DROP_FIRE && get_val(QUICKDROPFIRE_HOLD_TRIGGER) && event_press(QUICKDROPFIRE_PRESS_TRIGGER)) {
    combo_run(QUICK_DROP_FIRE);
}
if (BUNNYHOP && BUNNY_HOP) {
if (abs(get_ival(LX)) > BUNNYHOP_TRIGGER || abs(get_ival(LY)) > BUNNYHOP_TRIGGER){
	RUN = FIVE;
	}
if (RUN && !combo_running(BUNNYHOP)) {
    RUN = RUN - ONE;
    combo_restart (BUNNYHOP);
    }
    else {
    combo_stop(BUNNYHOP);
	}
}
if (PRONESHOT_ && PRONE_SHOT) {
if (get_ival(FIRE)) {
	PRESS(CROUCH);
	}
	else
if (event_release(FIRE)) {	
	combo_run(PRONESHOT);
	}
}
if (DROPSHOT_ && DROP_SHOT && get_ival(FIRE)) {
 	combo_run(DROPSHOT);
}
if (JUMPSHOT_ && JUMP_SHOT && get_ival(FIRE)) {
    combo_run(JUMPSHOT); 
} 
if (STRAFESHOT_ && STRAFE_SHOT && get_ival(FIRE) && abs(get_ival(LX)) <= STRAFE_RELEASE && abs(get_ival(LY)) <= STRAFE_RELEASE) {
	combo_run(STRAFE);
}
	else {
	combo_stop(STRAFE);
	}
if (DYNAMICFIRE_ && DYNAMIC_FIRE && get_val(FIRE)) {
	FIRE_RATE = DYNAMIC_WAIT + RAPID_HIGH / get_val(FIRE) - FOUR ;
	combo_run(DYNAMIC_FIRE);
}
if (RAPIDFIRE_ && RAPID_FIRE && get_ival(FIRE)) {                                  
	combo_run(RAPID_FIRE);
}
if (SMARTFIRE_ && SMART_FIRE && get_ival(FIRE)) { 
	combo_run(SMART_FIRE);
	BLOCK (FIRE);
}
if (BURSTFIRE_ && BURST_FIRE && get_ival(FIRE)) {                                 
	combo_run(BURST_FIRE);
	BLOCK (FIRE);
}
if (SNIPERFIRE_ && SNIPER_FIRE && get_ival(AIM) >= 85 && get_ptime(AIM) == SNIPER_WAIT) {
	PRESS(SPRINT);
	PRESS(FIRE);
}
if (RAPIDMELEE && RAPID_MELEE && !get_ival (AIM) && get_ival(MELEE)) { 
	combo_run(MELEE);
}
if (AUTORUN && !RELOAD_LENGTH && !get_ival(AIM)) {    
if (get_ival(LY) >= -RUN_TRIGGER && get_ival(LY) <= -60) {
    combo_run(TACTICAL);
    }
if (get_ival(LY) < -RUN_TRIGGER) {    
    PRESS(SPRINT);
    }
if (get_ival(SPRINT)) {
	combo_run(TACTICAL);
	}
}
if (HOLDBREATH) {
if (get_ival(AIM)) {
	set_val(SPRINT,100);
    }
if (get_val(LY) < -90 && get_val(AIM) && get_ptime(AIM) > HOLDBREATH_RELEASE) { 
	combo_stop(HOLDBREATH);
	}
if (event_press(AIM)) { 
	combo_run(HOLDBREATH);
	}
}
if (SLIDE_SHOT && get_ival(LY) < -95 && event_press(LEATHAL)) {
	SHUNT = LEATHAL; 
	combo_run(SLIDE);
}  
if (AUTOARMOUR && get_ival(SWAP) && get_ptime(SWAP) > ARMOUR_HOLD_TRIGGER) {
	combo_run(ARMOUR);
	}
	else
if (event_press(AIM) || event_press(FIRE) || event_press(RELOAD) || event_press(JUMP)) {
	combo_stop(ARMOUR);
}
if (AUTOREVIVE && !get_ival(DOWN) && !get_ival(AIM) && get_ival(RELOAD) && get_ptime(RELOAD) > REVIVE_HOLD_TRIGGER) {
	combo_run(REVIVE);
	}
	else
if (event_press(AIM) || event_press(FIRE) || event_press(RELOAD) || event_press(JUMP)) {
	combo_stop(REVIVE);
}
if (AUTOPING) {
if (get_ival(AUTOPING_PRESS_TRIGGER)) {
	AP += get_rtime();
if (AP == AUTOPING_ACTIVATE_TIME) {
	combo_run(AUTOPING);
	}
}
if (event_release(FIRE)) {
	AP = NO;
	}
}
if (EASY_RELOAD && !SRC && !RYSR && !RC_PRO) {
if (get_ival(DOWN) && get_ival (RELOAD) && get_ptime (RELOAD) > RELOAD_HOLD_TIME_RECORDER) { 
	RELOAD_TIMER = YES;
	combo_run (VIBRATE);
	}
if (RELOAD_TIMER) {
	RELOAD_TIME = get_ptime(RELOAD);
if (event_release (RELOAD)) { 
    RELOAD_TIMER = NO;
	combo_run (VIBRATE);
	}
}                                
if (event_press(RELOAD)) {
	RELOAD_LENGTH = RELOAD_TIME; 
	}
if (RELOAD_LENGTH) { 
	RELOAD_LENGTH -= get_rtime();
if (RELOAD_LENGTH < NO) {
	RELOAD_LENGTH = NO;
	}
if (get_ival (AIM) || get_ival(FIRE)) {
	combo_run(RELOAD);
			}
	 	}
	}
}
if (!POLAR_ASSIST && SENSITIVITY) {
if (!get_ival(AIM) && !get_ival(FIRE)) { 
    USE_SENSE = GENERAL_SENSE;
    }
    else 
if (get_ival(AIM) && !get_ival(FIRE)) { 
    USE_SENSE = AIM_SENSE;
    }    
    else 
if (!get_ival(AIM) && get_ival(FIRE)) { 
    USE_SENSE = FIRE_SENSE;
    }
    else 
if (get_ival(AIM) && get_ival(FIRE)) { 
    USE_SENSE = AIM_FIRE_SENSE;
    }
	sensitivity (RY,NOT_USE,USE_SENSE);
    sensitivity (RX,NOT_USE,USE_SENSE);
}
if (PROGRESSION_ASSIST && get_ival(AIM) >= PROG_VALUE_TRIGGER) {
if (!combo_running(AAS)) {
	AS = PROGRESSION(AS,AAMIN + NEGI,AAMAX + POSI,AAVAL,AAS,ONE);
    AW = PROGRESSION(AW,AAWMIN,AAWMAX + WA,AAWVAL,AAD,TWO);
    combo_run(AAS);
    	}
if (abs(get_ival(RY))> PROG_RELEASE || abs(get_ival(RX)) > PROG_RELEASE) {
	combo_stop(AAS);
	}
}
if (POLAR_ASSIST && get_ival(AIM) && abs(get_ival(RX)) <= POLAR_RELEASE && abs(get_ival(RY)) <= POLAR_RELEASE) {
if (POLAR_BOOST_FIRE && get_ival(FIRE)) {
	POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
	}
	else {
	POLAR_RADIUS = POLAR_RADIUS;
	}
if (POLAR_SHAKE_FIRE && get_ival(FIRE)) {
	POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
	}
	else {
	POLAR_ANGLE = POLAR_ANGLE;
	}    
    set_polar(RS,SPEED = (SPEED + POLAR_ANGLE) % POLAR,abs(get_ival(PRX)) / A_B_S + POLAR_RADIUS * POL_1);
}
if (DoGz_AIM_ASSIST && abs(get_ival(RX)) < DASR && abs(get_ival(RY)) < DASR) {
if (get_ival(AIM) > DOGZ_VALUE_TRIGGER || get_ival(FIRE) > DOGZ_VALUE_TRIGGER) {
	D_AS = YES;
	AIM();
}
if(event_release(AIM) || event_release(FIRE)){
	D_AS = NO;
	vm_tctrl(VM_DF); 
	}
}
if (DOGZ_RECOIL) {
if (DOGZ_RUMBLE) {
if (get_ival (AIM) && get_ival (FIRE) && abs(get_ival(RY)) <= DOGZ_RELEASE && abs(get_ival(RX)) <= DOGZ_RELEASE && get_rumble(VIB_A)) {
	ARC = YES;
	DoGz_ARC();
	}
}
	else
if (!DOGZ_RUMBLE && get_val(AIM) && get_val(FIRE) > DOGZRC_VALUE_TRIGGER && abs(get_ival(RY)) <= DOGZ_RELEASE && abs(get_ival(RX)) <= DOGZ_RELEASE) {
    ARC = YES;
	DoGz_ARC();
}
if (event_release(AIM) || event_release(FIRE)) {
	ARC = NO;
	}
}
if (SNACKS_RECOIL) {
if (SNACK_RUMBLE) {
if (get_val(AIM) && get_val(FIRE) && get_rumble(VIB_A)) {
    combo_run(RECOIL);
    }
}
	else 
if (!SNACK_RUMBLE && get_val(AIM) && get_val(FIRE) > SNACKRC_VALUE_TRIGGER) {
    combo_run(RECOIL);
}
if (!MASTER_MENU && get_ival(AIM) && get_ptime(AIM) > RECOIL_HOLD_TRIGGER && get_ival(RECOIL_PRESS_BUTTON)) {	
	RYSR= YES;
	SRC = YES;
}
if (SRC || RYSR) {
if (event_press(UP) || get_ival(UP) && get_ptime(UP) > RC_DPAD_HOLD || get_ival(LY) >= LS_ADJUSTABLE_TRIGGER) {
    VERTICAL_RECOIL = VERTICAL_RECOIL + ONE;
    combo_run(VIBRATE);
    }
if (event_press(DOWN) || get_ival(DOWN) && get_ptime(DOWN) > RC_DPAD_HOLD || get_ival(LY) <= -LS_ADJUSTABLE_TRIGGER) {
    VERTICAL_RECOIL = VERTICAL_RECOIL - ONE;
    combo_run(VIBRATE);
    }
if (event_press(RIGHT) || get_ival(RIGHT) && get_ptime(RIGHT) > RC_DPAD_HOLD || get_ival(LX) >= LS_ADJUSTABLE_TRIGGER) {
    HORIZONTAL_RECOIL = HORIZONTAL_RECOIL + ONE;
    combo_run(VIBRATE);
    }
if (event_press(LEFT) || get_ival(LEFT) && get_ptime(LEFT) > RC_DPAD_HOLD || get_ival(LX) <= -LS_ADJUSTABLE_TRIGGER) {
    HORIZONTAL_RECOIL = HORIZONTAL_RECOIL - ONE;
    combo_run(VIBRATE);
    }
if (VERTICAL_RECOIL >  100) {
	VERTICAL_RECOIL = -100;
}
if (VERTICAL_RECOIL < -100) {
	VERTICAL_RECOIL =  100;
}
if (HORIZONTAL_RECOIL >  100) {
	HORIZONTAL_RECOIL = -100;
}
if (HORIZONTAL_RECOIL < -100) {
	HORIZONTAL_RECOIL =  100;
}
	BLOCK(UP); BLOCK(DOWN); BLOCK(RIGHT); BLOCK(LEFT); SHUNT = MENU_BACK_BUTTON;

}
if (abs(get_val(RY)) > VERTICAL_RECOIL + SNACK_RELEASE ||
	abs(get_val(RX)) > VERTICAL_RECOIL + SNACK_RELEASE) {
    combo_stop(RECOIL);
	}  
}
if (SRC || RC_PRO) {
	RECOIL_GUIDE();
	NAME_RC ();
	RC_MENU_TIMEOUT -= get_rtime();
if (get_ival(UP) || get_ival(DOWN) || get_ival(LEFT) || get_ival(RIGHT) || event_press(SQUARE) || get_ival(AIM) || get_ival(FIRE)
	|| get_ival(RECOIL_PRESS_BUTTON) || abs(get_ival(LX)) > LS_ADJUSTABLE_TRIGGER || abs(get_ival(LY)) > LS_ADJUSTABLE_TRIGGER) {
	RC_MENU_TIMEOUT = RECOIL_ADJUSTER_MENU;
	}
if (!RC_MENU_TIMEOUT) {
	RC_OFF();
}	
if (event_press(SQUARE)) {
	RC_PRO =  ON;
	ID     =  ON;
	SRC    =  NO;
	RYSR   =  NO;
	RECOIL_PROFILES();
}
	BLOCK(UP); BLOCK(DOWN); BLOCK(RIGHT); BLOCK(LEFT); SHUNT = SQUARE;
if (event_press(MENU_BACK_BUTTON)) {
	SHUNT = MENU_BACK_BUTTON;
	RC_OFF();
	}
}
if (RC_PRO) {
if (event_press(RECOIL_PRESS_BUTTON)) {
	RYSR= YES;
	SRC = YES;
	RC_PRO = OFF;
	ID     = OFF;
	RECOIL_PROFILES();
}	
	ID = ADJUSTA(ID,ONE,FOUR,ONE,RC_PRO);	
if(ID == ONE) {
	rect_oled(7,5,115,11,0,1);
	M = ADJUSTERY(M,ONE,SIX,ONE,RC_PRO);
}
if(ID == TWO) {
	rect_oled(35,31,60,13,0,1);
if (M == ONE) {	
	A = ADJUSTERY(A,NO,YES,ONE,RC_PRO);
}
if (M == TWO) {	
	B = ADJUSTERY(B,NO,YES,ONE,RC_PRO);
}
if (M == THREE) {	
	C = ADJUSTERY(C,NO,YES,ONE,RC_PRO);
}
if (M == FOUR) {	
	D = ADJUSTERY(D,NO,YES,ONE,RC_PRO);
}
if (M == FIVE) {	
	E = ADJUSTERY(E,NO,YES,ONE,RC_PRO);
	}
if (M == SIX) {	
	F = ADJUSTERY(F,NO,YES,ONE,RC_PRO);
	}
if (!A && !B && !C && !D && !E && !F) {
	VERTICAL_RECOIL   = VERTICAL_RECOIL_DF;
	HORIZONTAL_RECOIL = HORIZONTAL_RECOIL_DF;
	}
}
if(ID ==THREE) {
	rect_oled(6,35,30,14,0,1);
if (M == ONE) {	
	PROFILE_AX = ADJUSTERY(PROFILE_AX,-100,100,ONE,RC_PRO);
}
if (M == TWO) {	
	PROFILE_BX = ADJUSTERY(PROFILE_BX,-100,100,ONE,RC_PRO);
}
if (M == THREE) {	
	PROFILE_CX = ADJUSTERY(PROFILE_CX,-100,100,ONE,RC_PRO);
}
if (M == FOUR) {	
	PROFILE_DX = ADJUSTERY(PROFILE_DX,-100,100,ONE,RC_PRO);
}
if (M == FIVE) {	
	PROFILE_EX = ADJUSTERY(PROFILE_EX,-100,100,ONE,RC_PRO);
}
if (M == SIX) {	
	PROFILE_FX = ADJUSTERY(PROFILE_FX,-100,100,ONE,RC_PRO);
	}
}
if(ID ==FOUR) {
	rect_oled(95,35,27,14,0,1);
if (M == ONE) {	
	PROFILE_AY = ADJUSTERY(PROFILE_AY,0,100,ONE,RC_PRO);
}
if (M == TWO) {	
	PROFILE_BY = ADJUSTERY(PROFILE_BY,0,100,ONE,RC_PRO);
}
if (M == THREE) {	
	PROFILE_CY = ADJUSTERY(PROFILE_CY,0,100,ONE,RC_PRO);
}
if (M == FOUR) {	
	PROFILE_DY = ADJUSTERY(PROFILE_DY,0,100,ONE,RC_PRO);
}
if (M == FIVE) {	
	PROFILE_EY = ADJUSTERY(PROFILE_EY,0,100,ONE,RC_PRO);
}
if (M == SIX) {	
	PROFILE_FY = ADJUSTERY(PROFILE_FY,0,100,ONE,RC_PRO);
		}
	}
}
if (SHUNT) {
if (event_release(SHUNT)) {
	SHUNT = NO;
}
else {
	set_val (SHUNT,NO);
	}
}
if (SCREENSAVER && !MASTER_MENU && !NAME && !RYSR && !SRC && !RC_PRO && !LOAD && !SAVE) { 
	DGT += get_rtime();
if (DGT >= 100) {
	SD1 += TWO;
	TP1 += ONE;
	TP2 -= ONE;
	DGT  = NO;
	}
	DGR += get_rtime();
if (DGR >= 30) {
	Y_1 += ONE;
	Y_2 += TWO;
	Y_3 += THREE;
	Y_4 += FOUR;
	Y_5 += FIVE;
	Y_6 += SIX;
	Y_7 += SEVEN;
	Y_8 += EIGHT;
	DGR  = NO;
}
	NAME_SS();
	MSC += get_rtime();
if(MSC >= THOUSAND) {
	MSC = NO;
	RT += ONE;
	}
if(RT == 90) {
	SCREENSAVER = NO;
	RT = NO;
	cls_oled(ZERO);		
		}
	}
if (!MASTER_MENU && !NAME) {
	combo_run(RGB);
	}
}
combo QUICK_DROP_FIRE {
if (DYNAMIC_FIRE) 
	combo_run(DYNAMIC_FIRE);
else
if (RAPID_FIRE) 
	combo_run(RAPID_FIRE);
else 
  set_val(FIRE,100);
  set_val(CROUCH,100);
  wait(QUICK_DROP_WAIT);
}
combo AAS{
	set_val(RY, ONE * - AS);
	wait(AW);
	set_val(RX, ONE * - AS);
	wait(AW);
	set_val(RY,AS);
	wait(AW);
	set_val(RX,AS);
	wait(AW);
}
combo DROPSHOT {
    wait(DROP_WAIT)
	set_val(CROUCH,100);		
	wait(DROP_WAIT);
	set_val(CROUCH,NO);
}
combo STRAFE {
    set_val(LX,100 + get_ival(LX));
   	wait(STRAFE_WAIT);
    set_val(LX,-100 + get_ival(LX));
   	wait(STRAFE_WAIT);
}
combo DYNAMIC_FIRE {
	set_val(FIRE,100);
	wait(FIRE_RATE);
	set_val(FIRE,0);
	wait(FIRE_RATE);
}
combo RAPID_FIRE {
	set_val(FIRE,100);
	wait(RAPID_WAIT);
	set_val(FIRE,0);
	wait(RAPID_WAIT);
}
combo SMART_FIRE {
	set_val(FIRE,100);
	wait(100);
	wait(SMART_WAIT);
	set_val(FIRE,100);
}
combo BURST_FIRE {
	wait(10);
	set_val(FIRE,100);
	wait(BURST_WAIT);
}
combo JUMPSHOT {                   
    set_val(JUMP,100); 
    wait(50);  
    wait(JUMP_WAIT); 
}
combo BUNNYHOP{
    set_val(JUMP,100);
    wait(BUNNYHOP_WAIT);
    set_val(JUMP,0);
    wait(10);
}
combo SLIDE {
    AUTORUN = NO;
    set_val(CROUCH,100);
	wait(SLIDE_TIME);
	AUTORUN = YES;
	wait(50);
	combo_run(TACTICAL);
}
combo PRONESHOT {
    set_val(CROUCH,0);
	wait(PRONE_WAIT);
	set_val(CROUCH,100);
	wait(PRONE_WAIT);
}
combo MELEE {
    set_val(MELEE,100);
    wait(RAPID_MELEE_WAIT);
    set_val(MELEE,0);
    wait(10);
}
combo RELOAD {  
  	set_val(SWAP, 100);
  	wait(40);
  	wait(10);
 	set_val(SWAP, 100);
  	wait(40);
  	wait(10);
  	RELOAD_LENGTH = NO;
}
combo ARMOUR {
	set_val(SWAP,100);
	wait(ARMOUR_HOLD_TIME);
	set_val(SWAP,0);
}
combo REVIVE {
	set_val(RELOAD,100);
	wait(REVIVE_HOLD_TIME);
	set_val(RELOAD,0);
}
combo TACTICAL {
  	set_val(SPRINT,0);
  	wait(TACTICAL_SPRINT_WAIT);
  	set_val(SPRINT,100);
  	wait(TACTICAL_SPRINT_WAIT);
  	set_val(SPRINT,0);
  	wait(TACTICAL_SPRINT_WAIT);
}
combo AUTOPING {
	wait(50);
	set_val(UP,100);
	wait(50);
}
combo HOLDBREATH {
	set_val(SPRINT,0);
  	wait(60);
  	set_val(SPRINT,100);
 	wait(110);
  	set_val(SPRINT,0);
  	wait(110);
}
combo MENUS {
	printf(17,5,SL,1,MENU1[ZERO]);
	printf(78,5,SL,1,MENU2[ZERO]);
	printf(17,22,SL,1,MENU3[ZERO]);
	printf(79,22,SL,1,MENU4[ZERO]);
	printf(17,39,SL,1,MENU5[ZERO]);
	printf(79,39,SL,1,MENU6[ZERO]);
	wait(MENUFLASH);
	printf(14,5,SL,1,ASSIST[ZERO]);
	printf(66,5,SL,1,SHOT_MOD[ZERO]);
	printf(6,22,SL,1,FIRE_MOD[ZERO]);
	printf(75,22,SL,1,RECOIL[ZERO]);
	printf(6,39,SL,1,TIMES[ZERO]);
	printf(68,39,SL,1,MISC[ZERO]);
	wait(MENUFLASH);
}
combo VIBRATE {
    wait(150);
    set_rumble(VIB_A,VIBRATE);
    wait(250);
    reset_rumble();
}
combo LED {
	wait(150);
	LED =  ON;
	wait(150);
	LED = OFF;
}
combo RGB {
    wait(10);
    set_rgb(COLOUR / BRIGHTNESS, COLOUR[ONE] / BRIGHTNESS, COLOUR[TWO] / BRIGHTNESS);
    COLOUR[DEC] -= TWO; 
    COLOUR[INC] += TWO;
if (!COLOUR[DEC]) { 
    INC = (INC + ONE) % THREE; 
    DEC = (DEC + ONE) % THREE; 
	}
}
combo CLEAR {
	wait(5000);
	cls_oled(ZERO);
	SCREENSAVER = YES;
}
combo RECOIL {
    RECOIL_VALUE = get_val(RY) + VERTICAL_RECOIL;
if(RECOIL_VALUE > 100) RECOIL_VALUE = 100;
    set_val(RY,RECOIL_VALUE * SNACK_INVERT);
    RECOIL_VALUE = get_val(RX) + HORIZONTAL_RECOIL;
if(RECOIL_VALUE > 100) RECOIL_VALUE = 100;
    set_val(RX,RECOIL_VALUE);
}
combo RACE {
	X_1 = random(ZERO,W_MX);
	wait(SAVER1);
	X_2 = random(ZERO,W_MX);
	wait(SAVER1);
	X_3 = random(ZERO,W_MX);
	wait(SAVER1);
	X_4 = random(ZERO,W_MX);
	wait(SAVER1); 
	X_5 = random(ZERO,W_MX);
	wait(SAVER1);
	X_6 = random(ZERO,W_MX);
	wait(SAVER1); 
	X_7 = random(ZERO,W_MX);
	wait(SAVER1); 
	X_8 = random(ZERO,W_MX);
	wait(SAVER1);
}
combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
function VALUES (Y,X) {
	HH= 38;
	WW= 45;
	EDITNUMBER(Y,NUMBER(Y));
	HH= 38;
	WW= -31;
	EDITNUMBER(X,NUMBER(X));
	putc_oled(ONE,72);
	puts_oled(6,38,SL,1,1);
	putc_oled(ONE,86);
	puts_oled(117,38,SL,1,1);
}
function AIM() {
if (D_AS) {
if (!MASTER_MENU && !NAME && D_AS && VM) {
		vm_tctrl(VMC);
	}
		D__AS ++;
if (D__AS >= D___AS) {
	D__AS = DG_AS;
	}
	DG_AS --;
if (DG_AS <= D_AS1) {
	DG_AS = D__AS;
	}
	D__AS ++;
if(get_val(AIM)) {	
	set_val (RX,get_val(RX) + D__AS);
	set_val (RY,get_val(RY) + D__AS);
	}
if(get_val(FIRE)) {	
	set_val (RX,get_val(RX) + D__AS);
	set_val (RY,get_val(RY) + D__AS);
		}
	}
}
function DoGz_ARC () {
if (ARC){
	ARC__VAL   = ARC_VAL / DIVIDE;
	ARC____VAL = ARC_VAL / DIVIDE;
	ARC_VAL ++;
if (ARC_VAL + ARC_V >= ARC___VAL + ARC_V) {
	ARC_VAL = ARC__VAL;
	}
	ARC__VAL --;
if (ARC__VAL <= ARC____VAL) {
	ARC__VAL = ARC_VAL;
	}
	ARC_VAL ++;
	set_val (RY,get_ival(RY) + ARC_VAL + ARC_V);
	}
}
function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if(FLOW) {
    VALUE += INCREMENT;
if(VALUE <= MAX)  
    return VALUE;
if(VALUE > MAX) {
        PROG[ID] = NO;
    return VALUE - INCREMENT;}
}
else{
    VALUE -= INCREMENT;    
if(VALUE >= MIN)  
    return VALUE;
if(VALUE < MIN) {
   	PROG[ID] = YES;
    return VALUE + INCREMENT;}
} 
   		 return NO;    
}
function BLOCK (BUTTON) {
if (!get_ival(BUTTON)) 
		return; 
	set_val(BUTTON,NO);
}
function PRESS (BUTTON) {
if (get_ival(BUTTON))
		return;
	set_val(BUTTON, 100);
}
function  NAME_SS (){
	cls_oled(ZERO);
	combo_run(RACE);
	combo_run(RN);
if (Y_1 > H_MX)  Y_1 =  ZERO;
if (Y_2 > H_MX)  Y_2 =  ZERO;
if (Y_3 > H_MX)  Y_3 =  ZERO;
if (Y_4 > H_MX)  Y_4 =  ZERO;
if (Y_5 > H_MX)  Y_5 =  ZERO;
if (Y_6 > H_MX)  Y_6 =  ZERO;
if (Y_7 > H_MX)  Y_7 =  ZERO;
if (Y_8 > H_MX)  Y_8 =  ZERO;
if (SD1 > 105) SD1 =   -50;
if (TP1 > 45)  TP1 =  ZERO;
if (TP2 < ZERO)   TP2 =  55;
	putc_oled(ONE,RN1);
	puts_oled(X_1,Y_1,SL,1,1);
	putc_oled(ONE,RN2);
	puts_oled(X_2,Y_2,SL,1,1);
	putc_oled(ONE,RN3);
	puts_oled(X_3,Y_3,SL,1,1);
	putc_oled(ONE,RN4);
	puts_oled(X_4,Y_4,SL,1,1);
	putc_oled(ONE,RN5);
	puts_oled(X_5,Y_5,SL,1,1);
	putc_oled(ONE,RN6);
	puts_oled(X_6,Y_6,SL,1,1);
	putc_oled(ONE,RN7);
	puts_oled(X_7,Y_7,SL,1,1);
	putc_oled(ONE,RN8);
	puts_oled(X_8,Y_8,SL,1,1);
	putc_oled(ONE,SSA1);
	puts_oled(SSMU1 + SD1,TP1 + 2,SL,1,1);
	putc_oled(ONE,SSA2);
	puts_oled(SSMU2 + SD1,TP2 + 4,SL,1,1);
	putc_oled(ONE,SSA3);
	puts_oled(SSMU3 + SD1,TP1 + 6,SL,1,1);
	putc_oled(ONE,SSA4);
	puts_oled(SSMU4 + SD1,TP2 + 8,SL,1,1);
	putc_oled(ONE,SSA5);
	puts_oled(SSMU5 + SD1,TP1 + 10,SL,1,1);
	putc_oled(ONE,SSA6);
	puts_oled(SSMU6 + SD1,TP2 + 12,SL,1,1);
	putc_oled(ONE,SSA7);
	puts_oled(SSMU7 + SD1,TP1 + 14,SL,1,1);
	putc_oled(ONE,SSA8);
	puts_oled(SSMU8 + SD1,TP2 + 16,SL,1,1);
	putc_oled(ONE,SSA9);
	puts_oled(SSMU9 + SD1,TP1 + 18,SL,1,1);
	putc_oled(ONE,SSA3);
	puts_oled(SSMU10 + SD1,TP2 + 20,SL,1,1);
	putc_oled(ONE,SSA6);
	puts_oled(SSMU11 + SD1,TP1 + 22,SL,1,1);
	putc_oled(ONE,SSA5);
	puts_oled(SSMU12 + SD1,TP2 + 24,SL,1,1);
	putc_oled(ONE,SSA7);
	puts_oled(SSMU13 + SD1,TP1 + 26,SL,1,1);
	putc_oled(ONE,SSA10);
	puts_oled(SSMU14 + SD1,TP2 + 28,SL,1,1);
}
function RECOIL_GUIDE () {
	combo_stop(CLEAR);	
	WW = ZERO;HH = FOUR;SZ = ONE;
if (RYSR) {	
if (get_ival(RECOIL_PRESS_BUTTON) && get_ptime(RECOIL_PRESS_BUTTON) >= 20) {	
	cls_oled(ZERO);
	printf(0,4,1,1,VERTICAL[ZERO]);
	EDITNUMBER(VERTICAL_RECOIL,NUMBER(VERTICAL_RECOIL));
	rect_oled(15,25,100,25,0,1);
	rect_oled(15,25,VERTICAL_RECOIL,25,1,1);
	putc_oled(1,37);
	puts_oled(80,4,1,1,1);
	printf(92,05,SL,1,POWER1[ZERO]);
	RC_ON();
	RYSR = OFF;
	}
	}
if (SRC) {
if (get_ival(UP) || get_ival(DOWN) || get_ival(LY) >= LS_ADJUSTABLE_TRIGGER || get_ival(LY) <= -LS_ADJUSTABLE_TRIGGER) {
	RC = VERTICAL_RECOIL;
	RYSR = OFF;
if (VERTICAL_RECOIL < ZERO) {
	CR = -ONE;
	}
	else
if (VERTICAL_RECOIL > ZERO) {
	CR = ONE;
	}		
	cls_oled(ZERO);
	printf(0,4,1,1,VERTICAL[ZERO]);
	EDITNUMBER(RC,NUMBER(RC));
	rect_oled(15,25,100,25,0,1);
	rect_oled(15,25,RC * CR,25,1,1);
	putc_oled(1,37);
	puts_oled(80,4,1,1,1);
	printf(92,05,SL,1,POWER1[ZERO]);
	RC_ON();
	}
	else
if (get_ival(LEFT) || get_ival(RIGHT) || get_ival(LX) >= LS_ADJUSTABLE_TRIGGER || get_ival(LX) <= -LS_ADJUSTABLE_TRIGGER) {
	RC = HORIZONTAL_RECOIL;
	RYSR = OFF;
if (HORIZONTAL_RECOIL < ZERO) {
	CR = -ONE;
	}
	else
if (HORIZONTAL_RECOIL > ZERO) {
	CR = ONE;
	}	
	cls_oled(ZERO);
	printf(0,4,1,1,HORIZONTAL[ZERO]);
	EDITNUMBER(RC,NUMBER(RC));
	rect_oled(15,25,100,25,0,1);
	rect_oled(15,25,RC * CR,25,1,1);
	putc_oled(1,37);
	puts_oled(80,4,1,1,1);
	printf(92,05,SL,1,POWER1[ZERO]);
	RC_ON();
		}
	}
	WW = 57;HH = 20;SZ = ZERO;
	EDITNUMBER(RC_MENU_TIMEOUT / 1000,NUMBER(RC_MENU_TIMEOUT / 1000));
}
function RC_ON () {
	combo_stop(CLEAR);
if (RYSR || SRC) {
if (!A && !B && !C && !D && !E && !F) {
	printf(42,32,SL,1,RECOIL_DF[ZERO]);
	}
if (A) {
	printf(34,32,SL,1,RECOIL_A[ZERO]);
		}
if (B) {
	printf(34,32,SL,1,RECOIL_B[ZERO]);
	}
if (C) {
	printf(34,32,SL,1,RECOIL_C[ZERO]);
		}	
if (D) {
	printf(34,32,SL,1,RECOIL_D[ZERO]);
	}
if (E) {
	printf(34,32,SL,1,RECOIL_E[ZERO]);
	}	
if (F) {
	printf(34,32,SL,1,RECOIL_F[ZERO]);
		}
	}
}
function RC_OFF () {
	RYSR   = NO;
	SRC    = NO;
	RC_PRO = NO;
	cls_oled(ZERO);
	SZ = NO;
	SCREENSAVER = YES;
}
function  NAME_RC(){
if (SRC) {
	RCMU1--;RCMU2--;RCMU3--;RCMU4--;RCMU5--;
	RCMU6--;RCMU7--;RCMU8--;RCMU9--;RCMU10--;
	RCMU11--;RCMU12--;RCMU13--;RCMU14--;
	RCMU15--;RCMU16--;RCMU17--;RCMU18--;
	RCMU19--;RCMU20--;RCMU21--;RCMU22--;
	putc_oled(ONE,RCM1);
	puts_oled(RCMU1,53,SL,1,1);
	putc_oled(ONE,RCM2);
	puts_oled(RCMU2,53,SL,1,1);
	putc_oled(ONE,RCM3);
	puts_oled(RCMU3,53,SL,1,1);
	putc_oled(ONE,RCM4);
	puts_oled(RCMU4,53,SL,1,1);
	putc_oled(ONE,RCM5);
	puts_oled(RCMU5,53,SL,1,1);
	putc_oled(ONE,RCM6);
	puts_oled(RCMU6,53,SL,1,1);
	putc_oled(ONE,RCM7);
	puts_oled(RCMU7,53,SL,1,1);
	putc_oled(ONE,RCM8);
	puts_oled(RCMU8,53,SL,1,1);
	putc_oled(ONE,RCM5);
	puts_oled(RCMU9,53,SL,1,1);
	putc_oled(ONE,RCM6);
	puts_oled(RCMU10,53,SL,1,1);
	putc_oled(ONE,RCM9);
	puts_oled(RCMU11,53,SL,1,1);
	putc_oled(ONE,RCM10);
	puts_oled(RCMU12,53,SL,1,1);
	putc_oled(ONE,RCM11);
	puts_oled(RCMU13,53,SL,1,1);
	putc_oled(ONE,RCM12);
	puts_oled(RCMU14,53,SL,1,1);
	putc_oled(ONE,RCM13);
	puts_oled(RCMU15,53,SL,1,1);
	putc_oled(ONE,RCM5);
	puts_oled(RCMU16,53,SL,1,1);
	putc_oled(ONE,RCM10);
	puts_oled(RCMU17,53,SL,1,1);
	putc_oled(ONE,RCM14);
	puts_oled(RCMU18,53,SL,1,1);
	putc_oled(ONE,RCM11);
	puts_oled(RCMU19,53,SL,1,1);
	putc_oled(ONE,RCM12);
	puts_oled(RCMU20,53,SL,1,1);
	putc_oled(ONE,RCM6);
	puts_oled(RCMU21,53,SL,1,1);
	putc_oled(ONE,RCM1);
	puts_oled(RCMU22,53,SL,1,1);
	putc_oled(ONE,32);
	puts_oled(1,53,SL,1,1);
	}
}
function RECOIL_PROFILES () {
	cls_oled(ZERO);
	SZ = NO;
if (RC_PRO) {
	rect_oled(1,1,127,63,0,1);
	rect_oled(4,3,121,59,0,1);
	line_oled(123,17,4,17,1,1);
	printf(8,6,SL,1,PROFILE[ZERO]);
	printf(87,51,SL,1,VERTICAL[ZERO]);
	printf(8,51,SL,1,HORIZONTAL[ZERO]);
	CHANGE = NO;
if (M == ONE) {
	printf(26,19,SL,1,PROFILEA[ZERO]);
	line_oled(26,29,102,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_AY,NUMBER(PROFILE_AY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_AX,NUMBER(PROFILE_AX));
	putc_oled(ONE,65);
	puts_oled(58,43,1,1,1);
if (A){
	printf(41,33,SL,1,ENABLE[ZERO]);
	B = ZERO;C = ZERO;D = ZERO;E = ZERO;F = ZERO;
	HORIZONTAL_RECOIL = PROFILE_AX;
	VERTICAL_RECOIL   = PROFILE_AY;
}
if (!A) {
	printf(37,33,SL,1,DISABLE[ZERO]);
	}		
}
if (M == TWO) {
	printf(26,19,SL,1,PROFILEB[ZERO]);
	line_oled(26,29,102,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_BY,NUMBER(PROFILE_BY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_BX,NUMBER(PROFILE_BX));
	putc_oled(ONE,66);
	puts_oled(58,43,1,1,1);
if (B){
	printf(41,33,SL,1,ENABLE[ZERO]);
	A = NO; C = NO; D = NO; E = NO; F = NO;
	HORIZONTAL_RECOIL = PROFILE_BX;
	VERTICAL_RECOIL   = PROFILE_BY;
}
if (!B) {
	printf(37,33,SL,1,DISABLE[ZERO]);
	}	
}
if (M == THREE) {
	printf(20,19,SL,1,PROFILEC[ZERO]);
	line_oled(20,29,110,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_CY,NUMBER(PROFILE_CY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_CX,NUMBER(PROFILE_CX));
	putc_oled(ONE,67);
	puts_oled(58,43,1,1,1);
if (C){
	printf(41,33,SL,1,ENABLE[ZERO]);
	A = NO; B = NO; D = NO; E = NO; F = NO; 
	HORIZONTAL_RECOIL = PROFILE_CX;
	VERTICAL_RECOIL   = PROFILE_CY;
}
if (!C) {
	printf(37,33,SL,1,DISABLE[ZERO]);
	}	
}
if (M == FOUR) {
	printf(22,19,SL,1,PROFILED[ZERO]);
	line_oled(22,29,105,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_DY,NUMBER(PROFILE_DY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_DX,NUMBER(PROFILE_DX));
	putc_oled(ONE,68);
	puts_oled(58,43,1,1,1);
if (D){
	printf(41,33,SL,1,ENABLE[ZERO]);
	A = NO; B = NO; C = NO; E = NO; F = NO; 
	HORIZONTAL_RECOIL = PROFILE_DX;
	VERTICAL_RECOIL   = PROFILE_DY;
}
if (!D) {
	printf(37,33,SL,1,DISABLE[ZERO]);
	}	
}
if (M == FIVE) {
	printf(22,19,SL,1,PROFILEE[ZERO]);
	line_oled(22,29,105,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_EY,NUMBER(PROFILE_EY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_EX,NUMBER(PROFILE_EX));
	putc_oled(ONE,69);
	puts_oled(58,43,1,1,1);
if (E){
	printf(41,33,SL,1,ENABLE[ZERO]);
	A = NO; B = NO; C = NO; D = NO; F = NO; 
	HORIZONTAL_RECOIL = PROFILE_EX;
	VERTICAL_RECOIL   = PROFILE_EY;
}
if (!E) {
	printf(37,33,SL,1,DISABLE[ZERO]);
		}	
}
if (M == SIX) {
	printf(26,19,SL,1,PROFILEF[ZERO]);
	line_oled(26,29,102,29,1,1);
	HH= 38;
	WW= 49
	EDITNUMBER(PROFILE_FY,NUMBER(PROFILE_FY));
	HH= 38;
	WW= -36;
	EDITNUMBER(PROFILE_FX,NUMBER(PROFILE_FX));
	putc_oled(ONE,70);
	puts_oled(58,43,1,1,1);
if (F){
	printf(41,33,SL,1,ENABLE[ZERO]);
	A = NO; B = NO; C = NO; D = NO; E = NO; 
	HORIZONTAL_RECOIL = PROFILE_FX;
	VERTICAL_RECOIL   = PROFILE_FY;
}
if (!F) {
	printf(37,33,SL,1,DISABLE[ZERO]);
			}	
		}
	}
}
function MAIN_MENU () {
	cls_oled(ZERO);
	combo_run (MENUS);
	rect_oled(2,1,63,18,0,1);
	rect_oled(64,1,63,18,0,1);
	rect_oled(2,17,63,18,0,1);
	rect_oled(64,17,63,18,0,1);
	rect_oled(2,34,63,18,0,1);
    rect_oled(64,34,63,18,0,1);
    MENU();
	MAIN_MENU_ID();
	WW = -58;HH = 53;SZ = ZERO;
	EDITNUMBER(MENU_TIMEOUT / 1000,NUMBER(MENU_TIMEOUT / 1000));
}
function MAIN_MENU_ID () {
if (event_press(RIGHT) || event_press(UP)){
	MAIN_MENU_ID +=ONE;
	}
if (MAIN_MENU_ID > SIX ) {
	MAIN_MENU_ID = ONE;
	}
if (event_press(LEFT) || event_press(DOWN) ){
	MAIN_MENU_ID -=ONE;
	}
if (MAIN_MENU_ID < ONE ) {
	MAIN_MENU_ID = SIX;
	}
if (MAIN_MENU_ID == ONE)
	rect_oled(4,3,59,13,0,1);
if (MAIN_MENU_ID == TWO)			
	rect_oled(66,3,59,13,0,1);
if (MAIN_MENU_ID == THREE)	
	rect_oled(4,20,59,13,0,1);			
if (MAIN_MENU_ID == FOUR)			
	rect_oled(66,20,59,13,0,1);
if (MAIN_MENU_ID == FIVE)
	rect_oled(4,36,59,14,0,1);
if (MAIN_MENU_ID == SIX)
	rect_oled(66,36,59,14,0,1);
}
function MENU_ONE () {
	cls_oled(ZERO);
	rect_oled(0,11,128,18,0,1);	
	printf(13,16,SL,1,DOGZASSIST[ZERO]);
	rect_oled(0,29,128,18,0,1);
	printf(8,34,SL,1,POLARASSIST[ZERO]);
	rect_oled(0,47,128,17,0,1);
	printf(11,51,SL,1,PROGASSIST[ZERO]);
if (MENU_ONE) {
if (event_press(DOWN)) {
	MENU_ID +=ONE;
	}
if (MENU_ID > THREE) {
	MENU_ID = ONE;
	}
if (event_press(UP)) {
	MENU_ID -=ONE;
	}
if (MENU_ID < ONE) {
	MENU_ID = THREE;
	}
if (MENU_ID == ONE) {
	rect_oled(2,13,124,14,0,1);
	putc_oled(ONE,62);
	puts_oled(55,16,SL,1,1);
	DoGz_AIM_ASSIST = ADJUSTER(DoGz_AIM_ASSIST,NO,YES,ONE);	
	}	
if (MENU_ID == TWO) {			
	rect_oled(2,31,124,14,0,1);
	putc_oled(ONE,62);
	puts_oled(55,34,SL,1,1);
	POLAR_ASSIST = ADJUSTER(POLAR_ASSIST,NO,YES,ONE);
	}
if (MENU_ID == THREE) {	
	rect_oled(2,49,124,13,0,1);	
	putc_oled(ONE,62);
	puts_oled(55,51,SL,1,1);
	PROGRESSION_ASSIST = ADJUSTER(PROGRESSION_ASSIST,NO,YES,ONE);
	}
if (DoGz_AIM_ASSIST) {
	printf(66,16,SL,1,ENABLE[ZERO]);
}
if (!DoGz_AIM_ASSIST) {
	printf(66,16,SL,1,DISABLE[ZERO]);
	}		
if (POLAR_ASSIST){
	printf(66,34,SL,1,ENABLE[ZERO]);
}
if (!POLAR_ASSIST) {
	printf(66,34,SL,1,DISABLE[ZERO]);
}
if (PROGRESSION_ASSIST){
	printf(66,51,SL,1,ENABLE[ZERO]);
}
if (!PROGRESSION_ASSIST) {
	printf(66,51,SL,1,DISABLE[ZERO]);
	}
	LOC = YES;
	NAME();
	AA();
	}
}
function DOGZ_AA () {
if (DOGZ_AA) {	
	cls_oled(ZERO);
	printf(1,1,SL,1,DOGZ1[ZERO]);
	line_oled(127,11,0,11,1,1);
	HH= ONE;
	WW= 48;
	EDITNUMBER(D___AS,NUMBER(D___AS));
	printf(1,14,SL,1,DOGZ2[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH= 14;
	WW= 48;
	EDITNUMBER(D_AS1,NUMBER(D_AS1));
	printf(1,27,SL,1,DOGZ3[ZERO]);
	line_oled(127,37,0,37,1,1);
	HH= 27;
	WW= 48;
	EDITNUMBER(DG_AS,NUMBER(DG_AS));
	printf(1,40,SL,1,DOGZ4[ZERO]);
	line_oled(127,50,0,50,1,1);
	HH= 40;
	WW= 48;
	EDITNUMBER(DASR,NUMBER(DASR));
	printf(1,53,SL,1,DOGZ5[ZERO]);
	HH= 53;
	WW= 48;
	EDITNUMBER(VMC,NUMBER(VMC));
	MENU_ID ();
	}
}
function POLAR_AA () {
if (POLAR_AA) {	
	cls_oled(ZERO);
	printf(1,1,SL,1,POLAR1[ZERO]);
	line_oled(127,11,0,11,1,1);
	HH= ONE;
	WW= 50;
	EDITNUMBER(RADIUS,NUMBER(RADIUS));
	printf(1,14,SL,1,POLAR2[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH= 14;
	WW= 48;
	EDITNUMBER(ANGLE,NUMBER(ANGLE));
	printf(1,27,SL,1,POLAR3[ZERO]);
	line_oled(127,37,0,37,1,1);
	HH= 27;
	WW= 48;
	EDITNUMBER(POLAR_BOOST,NUMBER(POLAR_BOOST));
	printf(1,40,SL,1,POLAR4[ZERO]);
	line_oled(127,50,0,50,1,1);
	HH= 40;
	WW= 48;
	EDITNUMBER(POLAR_SHAKE,NUMBER(POLAR_SHAKE));
	printf(1,53,SL,1,POLAR5[ZERO]);
	HH= 53;
	WW= 48;
	EDITNUMBER(A_B_S,NUMBER(A_B_S));
	MENU_ID ();
	}
}
function PROG_AA () {
if (PROG_AA) {	
	cls_oled(ZERO);
	printf(1,1,SL,1,PROG1[ZERO]);
	line_oled(127,11,0,11,1,1);
	HH= ONE;
	WW= 48;
	EDITNUMBER(POSI,NUMBER(POSI));
	printf(1,14,SL,1,PROG2[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH= 14;
	WW= 48;
	EDITNUMBER(NEGI,NUMBER(NEGI));
	printf(1,27,SL,1,PROG3[ZERO]);
	line_oled(127,37,0,37,1,1);
	HH= 27;
	WW= 48;
	EDITNUMBER(WA,NUMBER(WA));
	printf(1,40,SL,1,PROG4[ZERO]);
	line_oled(127,50,0,50,1,1);
	HH= 40;
	WW= 48;
	EDITNUMBER(PROG_RELEASE,NUMBER(PROG_RELEASE));
	printf(1,53,SL,1,PROG5[ZERO]);
	HH= 53;
	WW= 48;
	EDITNUMBER(POLAR_RELEASE,NUMBER(POLAR_RELEASE));
	MENU_ID ();
	}
}
function MENU_TWO() {
	cls_oled(ZERO);
	rect_oled(1,1,127,63,0,1);
	rect_oled(4,3,121,59,0,1);
	line_oled(123,17,4,17,1,1);
	printf(19,6,SL,1,SHOTMOD[ZERO]);
	MOD_ID = ADJUST(MOD_ID,YES,THREE,ONE);
if (MOD_SELECT) {
if (MOD == ONE) {
	printf(16,19,1,1,DROPSHOT[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(DROP_WAIT,NUMBER(DROP_WAIT));
if (DROP_SHOT){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!DROP_SHOT) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}		
}
if (MOD == TWO) {
	printf(16,19,1,1,JUMPSHOT[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(JUMP_WAIT,NUMBER(JUMP_WAIT));
if (JUMP_SHOT){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!JUMP_SHOT) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == THREE) {
	printf(10,19,1,1,PRONESHOT[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(PRONE_WAIT,NUMBER(PRONE_WAIT));
if (PRONE_SHOT){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!PRONE_SHOT) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == FOUR) {
	printf(10,19,1,1,STRAFESHOT[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(STRAFE_WAIT,NUMBER(STRAFE_WAIT));
if (STRAFE_SHOT){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!STRAFE_SHOT) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == FIVE) {
	printf(10,19,1,1,SLIDESHOT[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(SLIDE_WAIT,NUMBER(SLIDE_WAIT));
if (SLIDE_SHOT){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!SLIDE_SHOT) {
	printf(37,37,SL,1,DISABLE[ZERO]);
		}	
}
if(MOD_ID == ONE) {
	rect_oled(7,5,115,11,0,1);
	MOD = ADJUSTER(MOD,YES,FIVE,ONE);
}
if(MOD_ID == TWO) {
	rect_oled(35,35,60,12,0,1);
if (MOD == ONE) {	
	DROP_SHOT = ADJUSTER(DROP_SHOT,NO,YES,ONE);
}
if (MOD == TWO) {	
	JUMP_SHOT = ADJUSTER(JUMP_SHOT,NO,YES,ONE);
}
if (MOD == THREE) {	
	PRONE_SHOT = ADJUSTER(PRONE_SHOT,NO,YES,ONE);
}
if (MOD == FOUR) {	
	STRAFE_SHOT = ADJUSTER(STRAFE_SHOT,NO,YES,ONE);
}
if (MOD == FIVE) {	
	SLIDE_SHOT = ADJUSTER(SLIDE_SHOT,NO,YES,ONE);
	}
}
if(MOD_ID == THREE) {
	rect_oled(38,48,50,12,0,1);
if (MOD == ONE) {	
	DROP_WAIT = ADJUSTER(DROP_WAIT,DROP_MIN,DROP_MAX,ONE);
}
if (MOD == TWO) {	
	JUMP_WAIT = ADJUSTER(JUMP_WAIT,JUMP_MIN,JUMP_MAX,ONE);
}
if (MOD == THREE) {	
	PRONE_WAIT = ADJUSTER(PRONE_WAIT,PRONE_MIN,PRONE_MAX,ONE);
}
if (MOD == FOUR) {	
	STRAFE_WAIT = ADJUSTER(STRAFE_WAIT,STRAFE_MIN,STRAFE_MAX,ONE);
}
if (MOD == FIVE) {	
	SLIDE_WAIT = ADJUSTER(SLIDE_WAIT,SLIDE_MIN,SLIDE_MAX,ONE);
			}
		}
	}
}
function MENU_THREE() {
	cls_oled(ZERO);
	rect_oled(1,1,127,63,0,1);
	rect_oled(4,3,121,59,0,1);
	line_oled(123,17,4,17,1,1);
	printf(19,6,SL,1,FIREMOD[ZERO]);
	MOD_ID = ADJUST(MOD_ID,YES,THREE,ONE);
if (MOD_SELECT) {
if (MOD == ONE) {
	printf(15,19,1,1,RAPIDFIRE[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(RAPID_WAIT,NUMBER(RAPID_WAIT));
if (RAPID_FIRE){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!RAPID_FIRE) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}		
}
if (MOD == TWO) {
	printf(26,19,1,1,DYNAMICFIRE[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(DYNAMIC_WAIT,NUMBER(DYNAMIC_WAIT));
if (DYNAMIC_FIRE){
	printf(44,37,SL,1,ENABLE[ZERO]);
}
if (!DYNAMIC_FIRE) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == THREE) {
	printf(15,19,1,1,SMARTFIRE[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(SMART_WAIT,NUMBER(SMART_WAIT));
if (SMART_FIRE){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!SMART_FIRE) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == FOUR) {
	printf(15,19,1,1,BURSTFIRE[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(BURST_WAIT,NUMBER(BURST_WAIT));
if (BURST_FIRE){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!BURST_FIRE) {
	printf(37,37,SL,1,DISABLE[ZERO]);
	}	
}
if (MOD == FIVE) {
	printf(10,19,1,1,SNIPERFIRE[ZERO]);
	HH= 50;
	WW= FIVE;
	EDITNUMBER(SNIPER_WAIT,NUMBER(SNIPER_WAIT));
if (SNIPER_FIRE){
	printf(41,37,SL,1,ENABLE[ZERO]);
}
if (!SNIPER_FIRE) {
	printf(37,37,SL,1,DISABLE[ZERO]);
		}	
}
if (MOD_ID == ONE) {
	rect_oled(7,5,115,11,0,1);
	MOD = ADJUSTER(MOD,YES,FIVE,ONE);
}
if (MOD_ID == TWO) {
	rect_oled(35,35,60,12,0,1);
if (MOD == ONE) {	
	RAPID_FIRE = ADJUSTER(RAPID_FIRE,NO,YES,ONE);
}
if (MOD == TWO) {	
	DYNAMIC_FIRE = ADJUSTER(DYNAMIC_FIRE,NO,YES,ONE);
}
if (MOD == THREE) {	
	SMART_FIRE = ADJUSTER(SMART_FIRE,NO,YES,ONE);
}
if (MOD == FOUR) {	
	BURST_FIRE = ADJUSTER(BURST_FIRE,NO,YES,ONE);
}
if (MOD == FIVE) {	
	SNIPER_FIRE = ADJUSTER(SNIPER_FIRE,NO,YES,ONE);
	}
}
if (MOD_ID == THREE) {
	rect_oled(38,48,50,12,0,1);
if (MOD == ONE) {	
	RAPID_WAIT = ADJUSTER(RAPID_WAIT,RAPID_MIN,RAPID_MAX,ONE);
}
if (MOD == TWO) {	
	DYNAMIC_WAIT = ADJUSTER(DYNAMIC_WAIT,DYNAMIC_MIN,DYNAMIC_MAX,ONE);
}
if (MOD == THREE) {	
	SMART_WAIT = ADJUSTER(SMART_WAIT,SMART_MIN,SMART_MAX,ONE);
}
if (MOD == FOUR) {	
	BURST_WAIT = ADJUSTER(BURST_WAIT,BURST_MIN,BURST_MAX,ONE);
}
if (MOD == FIVE) {	
	SNIPER_WAIT = ADJUSTER(SNIPER_WAIT,SNIPER_MIN,SNIPER_MAX,ONE);
			}
		}
	}
}
function MENU_FOUR() {
	cls_oled(ZERO);
	LOC = 53;
	NAME();
	printf(0,2,SL,1,RECOIL_[ZERO]);
	rect_oled(0,11,128,20,0,1);
	printf(10,17,SL,1,DOGZRECOIL[ZERO]);				
	rect_oled(0,32,128,20,0,1);									
	printf(8,38,SL,1,SNACKSRECOIL[ZERO]);
	RECOIL_SELECT = ADJUST(RECOIL_SELECT,YES,TWO,ONE);
if (DOGZ_RECOIL) {
	printf(66,17,SL,1,ENABLE[ZERO]);
	}
if (!DOGZ_RECOIL) {
	printf(66,17,SL,1,DISABLE[ZERO]);
	}		
if (SNACKS_RECOIL){
	printf(66,38,SL,1,ENABLE[ZERO]);
	}
if (!SNACKS_RECOIL) {
	printf(66,38,SL,1,DISABLE[ZERO]);
		}	
if (RECOIL_SELECT == ONE) {
	rect_oled(2,13,124,16,0,1);
	putc_oled(ONE,62);
	puts_oled(55,17,SL,1,1);
	DOGZ_RECOIL = ADJUSTER(DOGZ_RECOIL,NO,YES,ONE);
if (DOGZ_RECOIL == YES) {
	SNACKS_RECOIL = NO;
	}
if (RECOIL_SELECT == ONE && event_release(MENU_SELECT_BUTTON) && get_ptime(MENU_SELECT_BUTTON) > BUTTON_PRESS_TIME) {
	DOGZ_RC   = YES;
	MENU_FOUR_OFF();
	DOGZ_RECOIL();
	RESET();
	}
}	
if (RECOIL_SELECT == TWO) {
	rect_oled(2,34,124,16,0,1);
	putc_oled(ONE,62);
	puts_oled(55,38,SL,1,1);
	SNACKS_RECOIL = ADJUSTER(SNACKS_RECOIL,NO,YES,ONE);
if (SNACKS_RECOIL == YES) {
	DOGZ_RECOIL = NO;
	}
if (event_press(MENU_SELECT_BUTTON)) {	
	SNACKS_RC = YES;
	MENU_FOUR_OFF();
	SNACKS_RECOIL();
	RESET();
		}
	}
}
function DOGZ_RECOIL () {
if (DOGZ_RC) {
	cls_oled(ZERO);
	printf(1,1,SL,1,DOGZ1RC[ZERO]);
	line_oled(127,11,0,11,1,1);
	HH =  ONE;
	WW = 48;
	EDITNUMBER(ARC_VAL,NUMBER(ARC_VAL));
	printf(1,14,SL,1,DOGZ2RC[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH = 14;
	WW = 48;
	EDITNUMBER(ARC___VAL,NUMBER(ARC___VAL));
	printf(1,27,SL,1,DOGZ3RC[ZERO]);
	line_oled(127,37,0,37,1,1);
	HH = 27;
	WW = 48;
	EDITNUMBER(DIVIDE,NUMBER(DIVIDE));
	printf(1,40,SL,1,DOGZ4RC[ZERO]);
	line_oled(127,50,0,50,1,1);
	HH = 40;
	WW = 48;
	EDITNUMBER(DOGZ_RELEASE,NUMBER(DOGZ_RELEASE));
	printf(1,53,SL,1,DOGZ5RC[ZERO]);
if (DOGZ_RUMBLE){
	printf(99,52,SL,1,ON_[ZERO]);
	}
if (!DOGZ_RUMBLE) {
	printf(95,52,SL,1,OFF_[ZERO]);
	}		
	MENU_ID ();
	}
}
function SNACKS_RECOIL () {
if (SNACKS_RC) {
	cls_oled(ZERO);
	printf(1,1,SL,1,SNACK1RC[ZERO]);
	line_oled(127,11,0,11,1,1);
	HH = ONE;
	WW = 48;
	EDITNUMBER(VERTICAL_RECOIL,NUMBER(VERTICAL_RECOIL));
	printf(1,14,SL,1,SNACK2RC[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH = 14;
	WW = 48;
	EDITNUMBER(HORIZONTAL_RECOIL,NUMBER(HORIZONTAL_RECOIL));
	printf(1,27,SL,1,SNACK3RC[ZERO]);
	line_oled(127,37,0,37,1,1);
	HH = 27;
	WW = 48;
	EDITNUMBER(SNACK_RELEASE,NUMBER(SNACK_RELEASE));
	printf(1,40,SL,1,SNACK4RC[ZERO]);
	line_oled(127,50,0,50,1,1);
	printf(1,53,SL,1,SNACK5RC[ZERO]);
if (SNACK_INVERT){
	printf(99,40,SL,1,ON_[ZERO]);
	}
if (!SNACK_INVERT) {
	printf(95,40,SL,1,OFF_[ZERO]);
	}		
if (SNACK_RUMBLE){
	printf(99,52,SL,1,ON_[ZERO]);
	}
if (!SNACK_RUMBLE) {
	printf(95,52,SL,1,OFF_[ZERO]);
	}		
	MENU_ID ();
	}
}
function MENU_FIVE () {
if (MENU_FIVE) {
	cls_oled(ZERO);
	printf(1,1,SL,1,MENU5_1[ZERO]);
	line_oled(127,11,0,11,1,1);
	printf(1,14,SL,1,MENU5_2[ZERO]);
	line_oled(127,24,0,24,1,1);
	printf(1,27,SL,1,MENU5_3[ZERO]);
	line_oled(127,37,0,37,1,1);
	printf(1,40,SL,1,MENU5_4[ZERO]);
	line_oled(127,50,0,50,1,1);
	printf(1,53,SL,1,MENU5_5[ZERO]);
if (AUTORUN){
	printf(99,1,SL,1,ON_[ZERO]);
	}
if (!AUTORUN) {
	printf(95,1,SL,1,OFF_[ZERO]);
	}		
if (HOLDBREATH){
	printf(99,14,SL,1,ON_[ZERO]);
	}
if (!HOLDBREATH) {
	printf(95,14,SL,1,OFF_[ZERO]);
	}		
if (RAPID_MELEE){
	printf(99,27,SL,1,ON_[ZERO]);
	}
if (!RAPID_MELEE) {
	printf(95,27,SL,1,OFF_[ZERO]);
	}		
if (EASY_RELOAD){
	printf(99,40,SL,1,ON_[ZERO]);
	}
if (!EASY_RELOAD) {
	printf(95,40,SL,1,OFF_[ZERO]);
	}
if (SENSITIVITY){
	printf(99,53,SL,1,ON_[ZERO]);
	}
if (!SENSITIVITY) {
	printf(95,53,SL,1,OFF_[ZERO]);
	}		
	MENU_ID ();
	}
}
function MENU_SIX () {
if (MENU_SIX) {
	cls_oled(ZERO);
	printf(1,1,SL,1,MENU6_1[ZERO]);
	line_oled(127,11,0,11,1,1);
	printf(1,14,SL,1,MENU6_2[ZERO]);
	line_oled(127,24,0,24,1,1);
	HH = 14;
	WW = 48;
	EDITNUMBER(BUNNYHOP_WAIT,NUMBER(BUNNYHOP_WAIT));
	printf(1,27,SL,1,MENU6_3[ZERO]);
	line_oled(127,37,0,37,1,1);
	printf(1,40,SL,1,MENU6_4[ZERO]);
	line_oled(127,50,0,50,1,1);
	printf(1,53,SL,1,MENU6_5[ZERO]);
if (BUNNYHOP){
	printf(99,1,SL,1,ON_[ZERO]);
	}
if (!BUNNYHOP) {
	printf(95,1,SL,1,OFF_[ZERO]);
	}		
if (AUTOARMOUR){
	printf(99,27,SL,1,ON_[ZERO]);
	}
if (!AUTOARMOUR) {
	printf(95,27,SL,1,OFF_[ZERO]);
	}		
if (AUTOREVIVE){
	printf(99,40,SL,1,ON_[ZERO]);
	}
if (!AUTOREVIVE) {
	printf(95,40,SL,1,OFF_[ZERO]);
	}		
if (AUTOPING){
	printf(99,53,SL,1,ON_[ZERO]);
	}
if (!AUTOPING) {
	printf(95,53,SL,1,OFF_[ZERO]);
	}		
	MENU_ID ();
	}
}
function MENU_ID () {
if (event_press(DOWN)) {
	MENU_ID +=ONE;
	}
if (MENU_ID > FIVE ) MENU_ID = ONE;
if (event_press(UP)){
	MENU_ID -=ONE;
	}
if (MENU_ID < ONE ) MENU_ID = FIVE;
if (MENU_ID == ONE) {
	putc_oled(ONE,62);
	puts_oled(78,0,SL,1,1);
	putc_oled(ONE,60);
	puts_oled(120,0,SL,1,1);
	}
if (MENU_ID == TWO) {			
	putc_oled(ONE,62);
	puts_oled(78,13,SL,1,1);
	putc_oled(ONE,60);
	puts_oled(120,13,SL,1,1);
	}
if (MENU_ID == THREE) {	
	putc_oled(ONE,62);
	puts_oled(78,26,SL,1,1);	
	putc_oled(ONE,60);
	puts_oled(120,26,SL,1,1);
	}
if (MENU_ID == FOUR) {		
	putc_oled(ONE,62);
	puts_oled(78,39,SL,1,1);
	putc_oled(ONE,60);
	puts_oled(120,39,SL,1,1);
	}
if (MENU_ID == FIVE) {
	putc_oled(ONE,62);
	puts_oled(78,52,SL,1,1);
	putc_oled(ONE,60);
	puts_oled(120,52,SL,1,1);
	}
}
function  MENU () {
	MU1--;MU2--;MU3--;MU4--;MU5--;
	MU6--;MU7--;MU8--;MU9--;MU10--;
	MU11--;MU12--;MU13--;MU14--;
	MU15--;MU16--;MU17--;MU18--;
	MU19--;MU20--;MU21--;MU22--;
	putc_oled(ONE,UM1);
	puts_oled(MU1,BT,SL,1,1);
	putc_oled(ONE,UM2);
	puts_oled(MU2,BT,SL,1,1);
	putc_oled(ONE,UM3);
	puts_oled(MU3,BT,SL,1,1);
	putc_oled(ONE,UM4);
	puts_oled(MU4,BT,SL,1,1);
	putc_oled(ONE,UM4);
	puts_oled(MU5,BT,SL,1,1);
	putc_oled(ONE,UM5);
	puts_oled(MU6,BT,SL,1,1);
	putc_oled(ONE,UM6);
	puts_oled(MU7,BT,SL,1,1);
	putc_oled(ONE,UM7);
	puts_oled(MU8,BT,SL,1,1);
	putc_oled(ONE,UM5);
	puts_oled(MU9,BT,SL,1,1);
	putc_oled(ONE,UM8);
	puts_oled(MU10,BT,SL,1,1);
	putc_oled(ONE,UM6);
	puts_oled(MU11,BT,SL,1,1);
	putc_oled(ONE,UM7);
	puts_oled(MU12,BT,SL,1,1);
	putc_oled(ONE,UM9);
	puts_oled(MU13,BT,SL,1,1);
	putc_oled(ONE,UM10);
	puts_oled(MU14,BT,SL,1,1);
	putc_oled(ONE,UM11);
	puts_oled(MU15,BT,SL,1,1);
	putc_oled(ONE,UM12);
	puts_oled(MU16,BT,SL,1,1);
	putc_oled(ONE,UM4);
	puts_oled(MU17,BT,SL,1,1);
	putc_oled(ONE,UM10);
	puts_oled(MU18,BT,SL,1,1);
	putc_oled(ONE,UM13);
	puts_oled(MU19,BT,SL,1,1);
	putc_oled(ONE,UM10);
	puts_oled(MU20,BT,SL,1,1);
	putc_oled(ONE,UM1);
	puts_oled(MU21,BT,SL,1,1);
	putc_oled(ONE,UM14);
	puts_oled(MU22,BT,SL,1,1);
}
function QUICK_TOGGLE () {
	NAME       = YES;
	QT_TIMEOUT =  NO;
	combo_run(VIBRATE);
}
function QT_OFF () {
	NAME       = NO;
	QT_TIMEOUT = NO;
	vm_tctrl(VM_DF);
	cls_oled(ZERO);
	combo_run(VIBRATE);
	reset_leds ():
	SCREENSAVER = YES;
}
function  NAME () {
	XA1--;XA2--;XA3--;
	XA4--;XA5--;XA6--;
	XA7--;XA8--;XA9--;
	XA10--;XA11--;
	XA12--;XA13--;
	putc_oled(ONE,XS1);
	puts_oled(XA1,LOC,SL,1,1);
	putc_oled(ONE,XS2);
	puts_oled(XA2,LOC,SL,1,1);
	putc_oled(ONE,XS3);
	puts_oled(XA3,LOC,SL,1,1);
	putc_oled(ONE,XS4);
	puts_oled(XA4,LOC,SL,1,1);
	putc_oled(ONE,XS4);
	puts_oled(XA5,LOC,SL,1,1);
	putc_oled(ONE,XS5);
	puts_oled(XA6,LOC,SL,1,1);
	putc_oled(ONE,XS6);
	puts_oled(XA7,LOC,SL,1,1);
	putc_oled(ONE,XS7);
	puts_oled(XA8,LOC,SL,1,1);
	putc_oled(ONE,XS4);
	puts_oled(XA9,LOC,SL,1,1);
	putc_oled(ONE,XS8);
	puts_oled(XA10,LOC,SL,1,1);
	putc_oled(ONE,XS9);
	puts_oled(XA11,LOC,SL,1,1);
	putc_oled(ONE,XS10);
	puts_oled(XA12,LOC,SL,1,1);
	putc_oled(ONE,XS11);
	puts_oled(XA13,LOC,SL,1,1);
if (RECOIL_SELECT) {
	ARC ();
	}
}
function  ARC (){
	RC1--;RC2--;RC3--;RC4--;RC5--;
	RC6--;RC7--;RC8--;RC9--;RC10--;
	putc_oled(ONE,ARC1);
	puts_oled(RC1,53,SL,1,1);
	putc_oled(ONE,ARC2);
	puts_oled(RC2,53,SL,1,1);
	putc_oled(ONE,ARC3);
	puts_oled(RC3,53,SL,1,1);
	putc_oled(ONE,ARC4);
	puts_oled(RC4,53,SL,1,1);
	putc_oled(ONE,ARC5);
	puts_oled(RC5,53,SL,1,1);
	putc_oled(ONE,ARC6);
	puts_oled(RC6,53,SL,1,1);
	putc_oled(ONE,ARC7);
	puts_oled(RC7,53,SL,1,1);
	putc_oled(ONE,ARC8);
	puts_oled(RC8,53,SL,1,1);
	putc_oled(ONE,ARC4);
	puts_oled(RC9,53,SL,1,1);
	putc_oled(ONE,ARC9);
	puts_oled(RC10,53,SL,1,1);
}
function AA () {
	AS1--;AS2--;AS3--;AS4--;AS5--;
	AS6--;AS7--;AS8--;AS9--;AS10--;
	putc_oled(ONE,AAS1);
	puts_oled(AS1,1,SL,1,1);
	putc_oled(ONE,AAS2);
	puts_oled(AS2,1,SL,1,1);
	putc_oled(ONE,AAS3);
	puts_oled(AS3,1,SL,1,1);
	putc_oled(ONE,AAS4);
	puts_oled(AS4,1,SL,1,1);
	putc_oled(ONE,AAS1);
	puts_oled(AS5,1,SL,1,1);
	putc_oled(ONE,AAS5);
	puts_oled(AS6,1,SL,1,1);
	putc_oled(ONE,AAS5);
	puts_oled(AS7,1,SL,1,1);
	putc_oled(ONE,AAS2);
	puts_oled(AS8,1,SL,1,1);
	putc_oled(ONE,AAS5);
	puts_oled(AS9,1,SL,1,1);
	putc_oled(ONE,AAS6);
	puts_oled(AS10,1,SL,1,1);
}
function TOGGLE (LOCATION_X,LOCATION_Y,MOD_DISPLAY,MOD_STATUS) {
if (NAME) {
	cls_oled(ZERO);
	vm_tctrl(VM_TOGGLE);
	printf(LOCATION_X,LOCATION_Y,SL,1,MOD_DISPLAY);
if (MOD_STATUS) {
	printf(42,38,SL,1,ENABLE[ZERO]);
	set_rgb(NO,LED,NO);
	combo_run(LED);
	}
else {
	printf(38,38,SL,1,DISABLE[ZERO]);
	set_rgb(LED,NO,NO);
	combo_run(LED);
	}
}
	printf(5,2,SL,1,MODTOGGLE[ZERO]);
	rect_oled(0,11,128,20,0,1);	
	rect_oled(2,13,124,16,0,1);
	rect_oled(0,32,128,20,0,1);
	rect_oled(2,34,124,16,0,1);
}
function  QT_NAME () {
	TS1--; TS2--; TS3--; TS4--; TS5--;
	TS6--; TS7--; TS8--; TS9--; TS10--;
	TS11--;TS12--;TS13--;TS14--;TS15--;
	TS16--;TS17--;TS18--;TS19--;TS20--;
	putc_oled(ONE,AST1);
	puts_oled(TS1,53,SL,1,1);
	putc_oled(ONE,AST2);
	puts_oled(TS2,53,SL,1,1);
	putc_oled(ONE,AST3);
	puts_oled(TS3,53,SL,1,1);
	putc_oled(ONE,AST4);
	puts_oled(TS4,53,SL,1,1);
	putc_oled(ONE,AST5);
	puts_oled(TS5,53,SL,1,1);
	putc_oled(ONE,AST6);
	puts_oled(TS6,53,SL,1,1);
	putc_oled(ONE,AST7);
	puts_oled(TS7,53,SL,1,1);
	putc_oled(ONE,AST5);
	puts_oled(TS8,53,SL,1,1);
	putc_oled(ONE,AST7);
	puts_oled(TS9,53,SL,1,1);
	putc_oled(ONE,AST8);
	puts_oled(TS10,53,SL,1,1);
	putc_oled(ONE,AST9);
	puts_oled(TS11,53,SL,1,1);
	putc_oled(ONE,AST12);
	puts_oled(TS12,53,SL,1,1);
	putc_oled(ONE,AST4);
	puts_oled(TS13,53,SL,1,1);
	putc_oled(ONE,AST5);
	puts_oled(TS14,53,SL,1,1);
	putc_oled(ONE,AST6);
	puts_oled(TS15,53,SL,1,1);
	putc_oled(ONE,AST10);
	puts_oled(TS16,53,SL,1,1);
	putc_oled(ONE,AST11);
	puts_oled(TS17,53,SL,1,1);
	putc_oled(ONE,AST6);
	puts_oled(TS18,53,SL,1,1);
	putc_oled(ONE,AST3);
	puts_oled(TS19,53,SL,1,1);
	putc_oled(ONE,AST3);
	puts_oled(TS20,53,SL,1,1);
}
function ADJUST (VALUE,MIN,MAX,AMOUNT) {
if (event_press(DOWN) || get_ival (LY) > LS_ADJUSTABLE_TRIGGER) {
	VALUE += AMOUNT;
	return VALUE;
    }
if (VALUE > MAX) { 
	return MIN;
	}
if (event_press(UP) || get_ival (LY) < -LS_ADJUSTABLE_TRIGGER) {
	VALUE -= AMOUNT;
	return VALUE;
	}
if (VALUE < MIN) {
	return MAX;
	}
return VALUE;
}
function ADJUSTER (VALUE,MIN,MAX,AMOUNT) {
if (event_press(RIGHT) || get_ival (RIGHT) && get_ptime (RIGHT) >= ADJUST_MOD_BUTTON_HOLD
	|| get_ival (LX) > LS_ADJUSTABLE_TRIGGER) {
	VALUE += AMOUNT;
	return VALUE;
    }
if (VALUE > MAX) { 
	return MIN;
	}
if (event_press(LEFT) || get_ival (LEFT) && get_ptime (LEFT) >= ADJUST_MOD_BUTTON_HOLD
	|| get_ival (LX) < -LS_ADJUSTABLE_TRIGGER) {
	VALUE -= AMOUNT;
	return VALUE;
	}
if (VALUE < MIN) {
	return MAX;
	}
return VALUE;
}
function ADJUSTA (VALUE,MIN,MAX,AMOUNT,INDEX) {
if (event_press(DOWN) || get_ival (LY) > LS_ADJUSTABLE_TRIGGER) {
	CHANGE = YES;
	VALUE += AMOUNT;
	return VALUE;
    }
if (VALUE > MAX) { 
	CHANGE = YES;
	return MIN;
	}
if (event_press(UP) || get_ival (LY) < -LS_ADJUSTABLE_TRIGGER) {
	CHANGE = YES;
	VALUE -= AMOUNT;
	return VALUE;
	}
if (VALUE < MIN) {
	CHANGE = YES;
	return MAX;
	}
if (CHANGE == YES && INDEX == RC_PRO) {
	RECOIL_PROFILES();
	}	
return VALUE;
}
function ADJUSTERY (VALUE,MIN,MAX,AMOUNT,INDEX) {
if (event_press(RIGHT) || get_ival (RIGHT) && get_ptime (RIGHT) >= ADJUST_MOD_BUTTON_HOLD
	|| get_ival (LX) > LS_ADJUSTABLE_TRIGGER) {
	CHANGE = YES;
	VALUE += AMOUNT;
	return VALUE;
    }
if (VALUE > MAX) { 
	CHANGE = YES;
	return MIN;
	}
if (event_press(LEFT) || get_ival (LEFT) && get_ptime (LEFT) >= ADJUST_MOD_BUTTON_HOLD
	|| get_ival (LX) < -LS_ADJUSTABLE_TRIGGER) {
	CHANGE = YES;
	VALUE -= AMOUNT;
	return VALUE;
	}
if (VALUE < MIN) {
	CHANGE = ONE;
	return MAX;
	}
if (CHANGE == YES && INDEX == RC_PRO) {
	RECOIL_PROFILES();
	}		
return VALUE;
}
function MASTER_MENU_ON () {
	combo_stop(CLEAR);
	RC_OFF();
	MASTER_MENU  = YES;
	MAIN_MENU    = YES;
	MAIN_MENU_ID = YES;
	NAME         =  NO;
	MAIN_MENU();
	combo_run(VIBRATE);
}
function MAIN_OFF () { 
 	MAIN_MENU = NO;
    combo_stop (MENUS);
	combo_run(VIBRATE);
	MENU_TIMEOUT = MENU_TIMEOUT_;
}
function MENU_ONE_OFF () { 
 	MENU_ID  = YES;
 	MENU_ONE =  NO;
	combo_run(VIBRATE);
}
function MENU_FOUR_OFF () { 
 	MENU_ID   = YES;
 	MENU_FOUR =  NO;
	combo_run(VIBRATE);
}
function OFF ()	{
	combo_stop (MENUS);
	MASTER_MENU  = NO;
	MAIN_MENU    = NO;
	MENU_ONE     = NO;
	MENU_TWO     = NO;
	MENU_THREE   = NO;
	MENU_FOUR    = NO;
	MENU_FIVE    = NO;
	MENU_SIX     = NO;
	DOGZ_AA      = NO;
	POLAR_AA     = NO;
	PROG_AA      = NO;
	DOGZ_RC      = NO;
	SNACKS_RC    = NO;
	RECOIL_SELECT= NO;
	AA           = NO;
	MENU_TIMEOUT = MENU_TIMEOUT_;
	cls_oled(ZERO);
	combo_run(VIBRATE);
	reset_leds ():
	RESET ();
	vm_tctrl(VM_DF);
	SCREENSAVER = YES;
}
function RESET () {
	RC1  = 267;RC2  = 277;RC3  = 287;RC4 = 297;RC5  = 307;
	RC6  = 317;RC7  = 327;RC8  = 337;RC9 = 347;RC10 = 357;
	XA1  = 127;XA2  = 137;XA3  = 147;XA4 = 157;XA5  = 167;
	XA6  = 177;XA7  = 187;XA8  = 197;XA9 = 207;XA10 = 217;
	XA11 = 227;XA12 = 237;XA13 = 247;AS1 = 267;AS2  = 277;
	AS3  = 287;AS4  = 297;AS5  = 307;AS6 = 317;AS7  = 327;
	AS8  = 337;AS9  = 347;AS10 = 357;
}
function EDITNUMBER (SINGLE,MULTIPLE) {
if (SINGLE < ZERO) {
	putc_oled(DIGITS,NEG);
	DIGITS += ONE;
	SINGLE = abs(SINGLE);
	COUNT = YES;
	}
else 
	COUNT = ZERO;
if (MULTIPLE >= FIVE) {
	putc_oled(DIGITS,REFERENCE[SINGLE / TENTHOUSAND]);
	SINGLE = SINGLE % TENTHOUSAND;
	DIGITS +=  ONE;
	}
if (MULTIPLE >= FOUR) {
	putc_oled(DIGITS,REFERENCE[SINGLE / THOUSAND]);
	SINGLE = SINGLE % THOUSAND;
	DIGITS +=  ONE;
	}	
if (MULTIPLE >= THREE) {
	putc_oled(DIGITS,REFERENCE[SINGLE / HUNDRED]);
	SINGLE = SINGLE % HUNDRED;
	DIGITS +=  ONE;
	}
if (MULTIPLE >= TWO) {
	putc_oled(DIGITS,REFERENCE[SINGLE / TEN]);
	SINGLE = SINGLE % TEN;
	DIGITS += ONE;
	}
	putc_oled(DIGITS,REFERENCE[SINGLE]);
	puts_oled(CENTER(MULTIPLE + COUNT,YES) + WW,HH,SL + SZ,DIGITS,WT);    
	DIGITS = YES;
} 
function NUMBER (NUM) {
    NUM = abs(NUM);
if (NUM / TENTHOUSAND > ZERO) {
	return FIVE;
	}
if (NUM / THOUSAND > ZERO) { 
	return FOUR;
	}
if (NUM / HUNDRED > ZERO) { 
	return THREE;
	}
if (NUM / TEN  > ZERO) {
	return TWO;
	}
		return ONE;
}    
function CENTER (CHAR,SIZE) {
    POSITION = CHAR * FONT_STATS[SIZE][ZERO];
    POSITION = (WD - POSITION) / TWO;
		return POSITION;
}
function LOAD_RECOIL () {
if (LOAD){
	SCREENSAVER = NO;
	SRC = NO;
	RC_PRO = NO;
	cls_oled(ZERO);
	rect_oled(1,1,127,63,0,1);
	rect_oled(4,3,121,59,0,1);
	printf(10,12,1,1,LOADED[ZERO]);
	printf(34,32,1,1,MEMORY[ZERO]);
	VERTICAL_RECOIL   = get_pvar(SPVAR_1,  -100, 100, 22); 
    HORIZONTAL_RECOIL = get_pvar(SPVAR_2,  -100, 100,  0); 
    PROFILE_AY        = get_pvar(SPVAR_3,  -100, 100, 15);
    PROFILE_AX        = get_pvar(SPVAR_4,  -100, 100,  0);
    PROFILE_BY        = get_pvar(SPVAR_5,  -100, 100, 22);
    PROFILE_BX        = get_pvar(SPVAR_6,  -100, 100,  0);
	PROFILE_CY        = get_pvar(SPVAR_7,  -100, 100, 27);
    PROFILE_CX        = get_pvar(SPVAR_8,  -100, 100,  0);
    PROFILE_DY        = get_pvar(SPVAR_9,  -100, 100, 31);
    PROFILE_DX        = get_pvar(SPVAR_10, -100, 100,  0);
    PROFILE_EY        = get_pvar(SPVAR_11, -100, 100, 35);
    PROFILE_EX        = get_pvar(SPVAR_12, -100, 100,  0);
	PROFILE_FY        = get_pvar(SPVAR_13, -100, 100, 41);
    PROFILE_FX        = get_pvar(SPVAR_14, -100, 100,  0);
    }
    LOAD = NO;
	combo_run(CLEAR);
}
function SAVE_RECOIL () {
if (SAVE){
    SCREENSAVER = NO;
    SRC = NO;
	RC_PRO = NO;
    cls_oled(ZERO);
    rect_oled(1,1,127,63,0,1);
	rect_oled(4,3,121,59,0,1);
	printf(21,12,1,1,SAVED[ZERO]);
	printf(33,32,1,1,MEMORY[ZERO]);
    set_pvar(SPVAR_1,VERTICAL_RECOIL);
	set_pvar(SPVAR_2,HORIZONTAL_RECOIL);
	set_pvar(SPVAR_3,PROFILE_AY);
	set_pvar(SPVAR_4,PROFILE_AX);
	set_pvar(SPVAR_5,PROFILE_BY);
	set_pvar(SPVAR_6,PROFILE_BX);
	set_pvar(SPVAR_7,PROFILE_CY);
	set_pvar(SPVAR_8,PROFILE_CX);
	set_pvar(SPVAR_9,PROFILE_DY);
	set_pvar(SPVAR_10,PROFILE_DX);
	set_pvar(SPVAR_11,PROFILE_EY);
	set_pvar(SPVAR_12,PROFILE_EX);
	set_pvar(SPVAR_13,PROFILE_FY);
	set_pvar(SPVAR_14,PROFILE_FX);
	}
	SAVE = NO;
	combo_run(CLEAR);
}