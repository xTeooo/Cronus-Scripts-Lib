// GPC Online Library
// zen_test_script_v_1.01.gpc

/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*
+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
| | | | | | | | |Z|E|N| |T|E|S|T| |S|C|R|I|P|T| | | | | | | | | | | | | | | | | | | | | | |
*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
    
/*
	• ON BOOT UP THE ZEN LOGO WILL FLASH FOR 4 SECONDS (THIS CAN BE CANCELLED BY PRESSING LEFT OR HOLDING DPAD LEFT FOR 550ms TO REDIRECT STRAIGHT TO THE MENU SYSTEM)
	• IF LEFT TO RUN BY DEFAULT IT WILL DISPLAY THE BANNER WHICH WILL TELL YOU THE TITLE, CONSOLE AND CONTROLLER CURRENTLY CONNECTED, IT ALSO DISPLAYS A SMALL BATTERY OF THE CURRENT CONTROLLER CONNECTED, THERE IS ALSO A GUIDE STATING HOLD LEFT FOR MENU OPTIONS (THIS WILL TIMEOUT AFTER 20 SECONDS AND THE SCREEN WILL TURN BLACK (HOLDING DPAD LEFT FOR 550ms IN THIS MODE WILL ALWAYS START THE MENU)
	• TO NAVIGATE THROUGH THE MENU SYSTEM YOU WILL USE DPAD LEFT OR RIGHT TO CHANGE THE SELECT TEST FEATURE
	• TO SELECT A FEATURE TO TEST WHILE IN MENU MODE YOU PRESS CROSS/A TO BEGIN TEST
	• TO EXIT MOD MENU AND RETURN TO THE BANNER MODE PRESS TRIANGLE/Y
	• I HAVE TRIED TO KEEP THE FORMAT THROUGHOUT SO WHERE POSSIBLE TRIANGLE/Y WILL EXIT A TEST IF TRIANGLE/Y IS IN USE IN THAT TEST MODE HOLDING DPAD LEFT AND TRIANGLE/Y TOGETHER FOR 500ms WILL EXIT THE TEST
	• CROSS/A WILL MAINLY BE USED TO SWAP FUNCTIONS IN THE TEST FEATURES BUT OTHER FUNCTIONS MAY BE AVAILABLE SO IT WILL BE BEST TO READ THE INSTRUCTIONS FOR EACH FEATURE

	• FEATURE ONE - MULTIPLE BUTTON TEST
	PRESS ANY BUTTON AT THE SAME TIME TO TEST (IF ITS TO LARGE OF AN INPUT FOR THE SCREEN IT WILL CUT OUT THE DISPLAY, ON AN OCCASSION WHERE 5 BUTTONS ARE PRESSED THE DISPLAY MAY OVER RUN THE BORDER THIS IS THE DESIGN
	(TOUCHPAD NOT INCLUDED)
	HOLDING DPAD LEFT AND TRIANGLE/Y TOGETHER FOR 500ms WILL EXIT THE TEST BACK TO THE MAIN MENU
	
	• FEATURE TWO - ANALOGUE STICK TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	RX/RY WILL DISPLAY FIRST WHICH YOU CAN TEST AFTER TEST PRESS CROSS/A
	LX/LY WILL DISPLAY WHICH YOU CAN TEST AFTER TEST PRESS CROSS/A TO RETURN BACK TO RX/RY AND REPEAT UNTIL ANALOUGUE TEST COMPLETE
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE THREE - TRIGGER TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	TEST BOTH TRIGGERS AT THE SAME TIME USING R2/RT AND L2/LT UNTIL THE TEST IS COMPLETE
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE FOUR - DIGITAL BUTTON TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	THE TEST WILL BEGIN WITH L1/LB AND R1/RB PRESS THAT BUTTON TO TEST
	PRESS R2/RT TO SWAP TO L3/LS AND R3/RS PRESS THAT BUTTON TO TEST
	PRESS R2/RT TO SWAP TO UP/DOWN PRESS THAT BUTTON TO TEST
	PRESS R2/RT TO SWAP TO LEFT/RIGHT PRESS THAT BUTTON TO TEST
	PRESS R2/RT TO SWAP TO TOUCHPAD/SYNC AND CROSS/A AND CIRCLE/B AND SQUARE/X AND TRIANGLE/Y (THIS WILL ONLY TEST ONE AT ANY TIME DUE TO THE NAME BEING LARGE) PRESS R2/RT TO BEGIN THE TEST AGAIN
	HOLDING DPAD LEFT AND TRIANGLE/Y TOGETHER FOR 500ms WILL EXIT THE TEST BACK TO THE MAIN MENU
	
	• FEATURE FIVE - TOUCHPAD TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	THE TEST WILL BEGIN WITH FINGER 1 TEST DISPLAYING FINGER 1, FINGER1X, FINGER1Y TEST WITH ONE FINGER
	PRESS CROSS TO MOVE TO FINGER2
	THE TEST WILL NOW BE FINGER 2 TEST DISPLAYING FINGER 2, FINGER2X, FINGER2Y TEST WITH TWO FINGER
	PRESS CROSS TO REPEAT THE TEST 
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE SIX - GYRO/ACC TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	THE TEST WILL BEGIN WITH GYRO TEST DISPLAYING GYROZ, GYROX, GYROY TEST BY TILTING THE CONTROLLER ECT
	PRESS CROSS TO MOVE TO ACC
	THE TEST WILL NOW BE ACC TEST DISPLAYING ACCZ, ACCX, ACCY TEST BY TILTING THE CONTROLLER ECT 
	PRESS CROSS TO REPEAT THE TEST
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE SEVEN - RUMBLE TEST
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE
	THE TEST WILL BEGIN WITH RUMBLE A MOTOR THE VALUE ON THE SCREEN IS THE STRENGTH IN WHICH IT WILL RUMBLE THIS CAN BE ALTERED AT ANYTIME BEFORE AND DURING THE TEST BY USING DAPD UP/DOWN
	PRESS R2/RT TO BEGIN RUMBLE ON RUMBLE A MOTOR PRESS SQUARE/X TO STOP THE RUMBLE, PRESSING UP/DOWN ALSO STOPS THE RUMBLE 
	PRESS CROSS TO CHOOSE THE NEXT RUMBLE WHICH WILL BE RUMBLE B MOTOR AND WHICH WILL ALSO STOP THE CURRENT RUMBLE PRESS R2/RT TO BEGIN RUMBLE ON RUMBLE B MOTOR PRESS SQUARE/X TO STOP THE RUMBLE, PRESSING UP/DOWN ALSO STOPS THE RUMBLE 
	PRESS CROSS TO CHOOSE THE NEXT RUMBLE WHICH WILL BE RUMBLE LT (XBOX ONLY) MOTOR AND WHICH WILL ALSO STOP THE CURRENT RUMBLE PRESS R2/RT TO BEGIN RUMBLE ON RUMBLE LT MOTOR PRESS SQUARE/X TO STOP THE RUMBLE, PRESSING UP/DOWN ALSO STOPS THE RUMBLE 
	PRESS CROSS TO CHOOSE THE NEXT RUMBLE WHICH WILL BE RUMBLE RT (XBOX ONLY) MOTOR AND WHICH WILL ALSO STOP THE CURRENT RUMBLE PRESS R2/RT TO BEGIN RUMBLE ON RUMBLE RT MOTOR PRESS SQUARE/X TO STOP THE RUMBLE, PRESSING UP/DOWN ALSO STOPS THE RUMBLE
	STARTS ON RUMBLE A PRESS CROSS TO CYCLE RUMBLES RUMBLE A> RUMBLE B> RUMBLE LT> RUMBLE RT
	PRESS R2/RT TO START ANY RUMBLE
	PRESS SQUARE/X TO STOP RUMBLE
	PRESS UP/DOWN TO ADJUST RUMBLE
	(NOTE IF USING BLUETOOTH IT CAN TAKE A FEW SECONDS TO TURN OFF RUMBLE, WIRED IS INSTANT, A GOOD WAY TO MAKE THE ADJUSTMENT INSTANT IS TO ADJUST AND RE-PRESS R2 TO RESTART THE RUMBLE)
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE EIGHT - LED VIEWER ONE
	IT WILL DISPLAY THE COLOUR BEING APPLIED BY THE BAR INDICATOR (THE ZEN LED EYES WILL INDICATE THE MATCHING COLOUR)
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE NINE - LED VIEWER TWO
	IT WILL DISPLAY THE COLOUR BEING APPLIED BY THE COLOUR AND NUMBER (THE ZEN LED EYES WILL INDICATE THE MATCHING COLOUR)
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE TEN - MANUAL LED
	IT WILL DISPLAY THE COLOUR BEING APPLIED BY THE DISPLAY (THE ZEN LED EYES WILL INDICATE THE MATCHING COLOUR)
	CAN ADJUST THIS MANUALLY 
	THE COLOURS WILL START OFF BY DEFAULT AT RED 255, GREEN 255, BLUE 255
	THE FIRST COLOUR TO ALTER WILL CURRENTLY BE RED 
	PRESS UP/DOWN TO ADJUST THE VALUE OF RED WHICH WILL BE APPLIED TO THE ZEN LED EYES
	PRESS LEFT/RIGHT TO MOVE LEFT OR RIGHT TO ANOTHER COLOUR
	PRESS UP/DOWN TO ADJUST THE VALUE OF THAT COLOUR WHICH WILL BE APPLIED TO THE LED EYES ON THE ZEN
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE ELEVEN - ACSII VIEWER
	THIS WILL SHOW YOU THE CHARACHTER STORED BY THE ZEN WITH ITS REPESENTING VALUE
	USE THE DPAD UP/DOWN TO VIEW THE ACCII'S 
	EG... 48 = 0, 65 = A ETC 
	(48 & 65 ARE THE REPRESENTING VALUE)
	(0  & A ARE THE STORED VALUE)
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE TWELVE - BATTERY VIEWER
	THIS WILL BE A REPEATER OF THE DEVICE MONITOR IN ZEN STUDIO AND GIVE YOU THE TRUE LIVE VALUE 
	IT WILL START ON THE MAIN BATTERY (LARGE) WHICH WILL GIVE YOU THE TRUE CURRENT VALUE IN PERCENTAGE (%)
	PRESS CROSS/A TO VIEW THE BANNER BATTERY (SMALL) WHICH IS FILLED AT THE TRUE CURRENT VALUE IN PERCENTAGE (%)
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE THIRTEEN - SCREEN TEST ONE
	FILLED RECT (CUBE TEST)
	THIS WILL START OFF WITH CUBES RUNNING FASTLY ACROSS THE SCREEN 
	PRESS 
	PRESS ANY OF THE BUTTONS BELOW FOR A DIFFERENT SPEED EFFECT OF THE CUBES
	L2/LT, R2/RT, R1/RB, CROSS/A, CIRCLE/B, SQUARE/X, TRIANGLE/Y
	PRESS L1/LB AT ANY TIME TO DISPLAY ALL CUBES
	HOLDING DPAD LEFT AND TRIANGLE/Y TOGETHER FOR 500ms WILL EXIT THE TEST BACK TO THE MAIN MENU
	
	• FEATURE FOURTEEN - SCREEN TEST TWO
	PIXEL DOT TEST 
	THIS WILL FILL THE SCREEN OR BLANK THE SCREEN RANDOMLY 
	SQUARE/X WILL INVERT WHITE TO BLACK AND VICE VERSA
	CROSS/A WILL WIPE THE SCREEN FOR A FRESH START
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE FIFTEEN - SCREEN TEST THREE
	LINE/RECT TEST
	THIS WILL START WITH JUST RANDOM LINES TO STOP RANDOM LINES PRESS CROSS/A
	PRESS SQUARE/X TO ADD OR ONLY RUN RANDOM SQUARES
	SQUARE/X = RECT ON/OFF
	CROSS/A = LINES ON/OFF
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
	
	• FEATURE SIXTEEN - SuMiTuP (THE ZEN CALCULATOR)
	THIS WILL GIVE YOU THE TRUE VALUE IN WHICH THE ZEN WILL SUM EQUATIONS UPTO
	(ZEN WILL ALWAYS ROUND THE NUMBER OFF)
	(EG.. 9 / 2 = 4  ..... NOT 4.5)
	THIS WILL ALLOW UPTO 4 DIGITS PER VALUE 
	THREE VALUES IN TOTAL OF THE EQUATION
	SUM 1 (4 DIGIT) CAN BE *, +, -, /, % BY SUM 2 (4 DIGIT) WHICH WILL RETURN THE EQUALS SUM 3 (4 DIGIT)  EG... SUM 1 + SUM 2 = SUM 3
	YOU WILL START BY CHOOSING SUM 1'S VALUE BY USING DPAD UP/DOWN AND PRESS CROSS/A WHEN READY
	YOU WILL THEN CHOOSE WHAT TYPE OF EQUATION BY USING THE DPAD UP/DOWN AND PRESS CROSS/A WHEN READY
	YOU WILL THEN CHOOSE SUM 2'S VALUE BY USING DPAD UP/DOWN AND PRESS CROSS/A WHEN  YOUR READY FOR ZEN'S ANSWER WHICH WILL DISPLAY UNDERNEATH THE SUM
	PRESS CROSS/A TO GO BACK TO SUM 1 TO REPEAT ANOTHER CALCULATION
	PRESS SQUARE AT ANYTIME TO CLEAR THE VALUES AND START BACK AT SUM 1
	PRESS TRIANGLE AT ANY TIME TO EXIT TO THE MAIN MENU
*/
 
 	data(16, sizeof(A) + 16,
	sizeof(A) + sizeof(B) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + sizeof(K) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + sizeof(K) + sizeof(L) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + sizeof(K) + sizeof(L) + sizeof(M) + 16,
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + sizeof(K) + sizeof(L) + sizeof(M) + sizeof(N) + 16, 
	sizeof(A) + sizeof(B) + sizeof(C) + sizeof(D) + sizeof(E) + sizeof(F) + sizeof(G) + sizeof(H) + sizeof(I) + sizeof(J) + sizeof(K) + sizeof(L) + sizeof(M) + sizeof(N) + sizeof(O) + 16);
	
	const string A   = "MULTIPLE BUTTON";
	const string B   = "ANALOGUE STICK";
	const string C   = "  TRIGGER TEST";
	const string D   = " DIGITAL BUTTON";
	const string E 	 = " TOUCHPAD TEST";
	const string F   = " GYRO/ACC TEST";
	const string G   = "  RUMBLE TEST";
	const string H   = " LED VIEWER ONE";
	const string I   = " LED VIEWER TWO";
	const string J   = "   MANUAL LED";
	const string K   = "  ACSII VIEWER";
	const string L   = " BATTERY VIEWER";
	const string M   = " SCREEN TEST 1";
	const string N   = " SCREEN TEST 2";
	const string O   = " SCREEN TEST 3";
	const string P   = "   ZeN SuMiTuP";
	
	int IDX = 1; int print_label; 
	int print_A =  0, print_B =  1, print_C =  2, print_D =  3, print_E =  4, print_F =  5;  
	int print_G =  6, print_H =  7, print_I =  8, print_J =  9, print_K = 10, print_L = 11;  
	int print_M = 12, print_N = 13, print_O = 14, print_P = 15; 																	

	const string ZEN_TEST_SCRIPT = "ZEN TEST";
	const string CONSOLE         = "CONSOLE:";
	const string CONTROLLER      = "CONTROLLER:";
	const string MENU_HOLD       = "MENU HOLD LEFT";
	const string TEST_OPTION     = "TEST OPTION";
	const string PRESS_A_BUTTON  = "TEST BUTTONS";
	const string CHOICE          = "< A-ENT Y-EXIT >";
	const string TOUCH_THE_PAD   = "TOUCH THE PAD";
	const string TILT_THE_PAD    = "TILT THE PAD";
	const string PRESS_A_STICK   = "TEST ANALOGUES";
	const string PRESS_R2_RUMBLE = "R2/RT TO RUMBLE";
	const string ADJUST_LED = "ADJUST LED";
	const string L2_ ="L2/LT";
	const string R2_ ="R2/RT";
	const string R1_ ="R1/RB";
	const string L1_ ="L1/LB";
	const string R3_ ="R3/RS";
	const string L3_ ="L3/LS";
	const string UP_ ="UP";
	const string DOWN_ ="DOWN";
	const string LEFT_ ="LEFT";
	const string RIGHT_ ="RIGHT";
	const string TOUCH_ ="TOUCH/SYNC";
	const string CROSS_ ="CROSS/A";
	const string SQUARE_ ="SQUARE/X";
	const string CIRCLE_ ="CIRCLE/B";
	const string TRIANGLE_ ="TRIANGLE/Y";
	const string UP1    = "PRESS UP";
	const string DOWN1  = "PRESS DOWN";
	const string FACE_ = "SYNC,A,B,X,Y";
	const string PS4 ="PS4";
	const string XB1 ="XB1";
	const string RX_ ="RX";
	const string RY_ ="RY";
	const string LX_ ="LX";
	const string LY_ ="LY";
	const string FINGER1X_ ="X";
	const string FINGER1Y_ ="Y";
	const string FINGER1_  ="FINGER1";
	const string FINGER2X_ ="X";
	const string FINGER2Y_ ="Y";
	const string FINGER2_  ="FINGER2";
	const string GYROX_ ="GYROX";
	const string GYROY_ ="GYROY";
	const string GYROZ_ ="GYROZ";
	const string ACCX_ ="ACCX";
	const string ACCY_ ="ACCY";
	const string ACCZ_ ="ACCZ";
	const string VIBA_ ="RUMBLE A";
	const string VIBB_ ="RUMBLE B";
	const string VIBLT_ ="RUMBLE LT";
	const string VIBRT_ ="RUMBLE RT";
	const string RED = "Red";
	const string GREEN = "Green";
	const string BLUE = "Blue";
	const string RED_LED = "RED";
	const string GREEN_LED = "GREEN";
	const string BLUE_LED = "BLUE";
	const string SuMiTuP   = "SuMiTuP";
	const string ZERO    = "0%";
	const string TEN     = "10%";
	const string TWENTY  = "20%";
	const string THIRTY  = "30%";
	const string FOURTY  = "40%";
	const string FIFTY   = "50%";
	const string SIXTY   = "60%";
	const string SEVENTY = "70%";
	const string EIGHTY  = "80%";
	const string NINETY  = "90%";
	const string HUNDRED = "100%";
	
  	define PS    = PS4_PS,    SHARE  = PS4_SHARE,  OPTIONS = PS4_OPTIONS, R1       = PS4_R1,       R2     = PS4_R2,    R3 = PS4_R3;  
  	define L1    = PS4_L1,    L2     = PS4_L2,     RX      = PS4_RX,      RY       = PS4_RY,       LX     = PS4_LX,    LY = PS4_LY;   
  	define L3    = PS4_L3,    UP     = PS4_UP,     DOWN    = PS4_DOWN,    LEFT     = PS4_LEFT,     RIGHT  = PS4_RIGHT;    
  	define CROSS = PS4_CROSS, CIRCLE = PS4_CIRCLE, SQUARE  = PS4_SQUARE,  TRIANGLE = PS4_TRIANGLE, TOUCH  = PS4_TOUCH;  
    
    define FINGER1X = PS4_FINGER1X, FINGER1Y = PS4_FINGER1Y, FINGER1 = PS4_FINGER1;
    define FINGER2X = PS4_FINGER2X, FINGER2Y = PS4_FINGER2Y, FINGER2 = PS4_FINGER2;
    define GYROX = PS4_GYROX, GYROY = PS4_GYROY, GYROZ = PS4_GYROZ;
    define ACCX  =  PS4_ACCX,  ACCY =  PS4_ACCY,  ACCZ = PS4_ACCZ;
    
    const uint8 ASCII[] = 
    {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
	41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
	81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,
	116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,
	146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,
	176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,
	206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234, 235,
	236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255};
	
	const uint8 BUTTON[][] = { 
	{4, _X, _B, _O, _X,  0}, {4, _V, _I, _E, _W,  0}, {4, _M, _E, _N, _U,  0}, {2, _R, _B,  0,  0,  0}, {2, _R, _T,  0,  0,  0},
	{2, _R, _S,  0,  0,  0}, {2, _L, _B,  0,  0,  0}, {2, _L, _T,  0,  0,  0}, {2, _L, _S,  0,  0,  0}, {2, _R, _X,  0,  0,  0},
	{2, _R, _Y,  0,  0,  0}, {2, _L, _X,  0,  0,  0}, {2, _L, _Y,  0,  0,  0}, {2, _U, _P,  0,  0,  0}, {4, _D, _O, _W, _N,  0},
    {4, _L, _E, _F, _T,  0}, {5, _R, _I, _G, _H, _T}, {1, _Y,  0,  0,  0,  0}, {1, _B,  0,  0,  0,  0}, {1, _A,  0,  0,  0,  0}, {1, _X,  0,  0,  0,  0}};		 		
	
	define _0 =  48, _1 =  49, _2 =  50, _3 =  51, _4 =  52, _5 =  53, _6 =  54, _7 =  55, _8 =  56, _9 =  57, _space = 32,     _minus = 45;		 		
	define _A =  65, _B =  66, _C =  67, _D =  68, _E =  69, _F =  70, _G =  71, _H =  72, _I =  73, _J =  74, _K =  75, _L =  76, _M =  77; 
	define _N =  78, _O =  79, _P =  80, _Q =  81, _R =  82, _S =  83, _T =  84, _U =  85, _V =  86, _W =  87, _X =  88, _Y =  89, _Z =  90;			
	define _a =  97, _b =  98, _c =  99, _d = 100, _e = 101, _f = 102, _g = 103, _h = 104, _i = 105, _j = 106, _k = 107, _l = 108, _m = 109;	
	define _n = 110, _o = 111, _p = 112, _q = 113, _r = 114, _s = 115, _t = 116, _u = 117, _v = 118, _w = 119, _x = 120, _y = 121, _z = 122;			      
	
	const uint8 ASCII_SUM[] = {42,43,45,47,37};
	const uint8 ASCII_NUM[] = {48,49,50,51,52,53,54,55,56,57};
  	const uint8 REFERENCE[] = {48,49,50,51,52,53,54,55,56,57};
  	const uint8 NANDC[] = {79,88};
  	const uint8 FONT_STATS[][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }}; 
	
	define SMALL_FONT_WIDTH = 7;
	define SMALL_FONT_HEIGHT = 10;
	define MEDIUM_FONT_WIDTH  = 11;
	define MEDIUM_FONT_HEIGHT = 18;
	define OLED_W = 128, OLED_H = 64;  
	define SMALL = 0, MEDIUM = 1, LARGE = 2;  
	define FONT_W = 0, FONT_H = 1, FONT_L = 2;
	define BLACK = 0, WHITE = 1;
	define NEG = 45;   
	int COUNT =1, ON = TRUE, OFF = FALSE; 
	int BANNER, BORDER, MENU,ADJUSTA; 
  	int TIMEOUT, NO = 1;
	int TIMEOUT_ = 20000;
  	int REDLED = 255, BLUELED = 255, GREENLED = 255, LEDID = 1;
	int MULTIPLE_BUTTON_TEST, ANALOGUE_STICK_TEST, TRIGGER_TEST;
	int DIGITAL_BUTTON_TEST, TOUCHPAD_TEST, GYRO_ACC_TEST, RUMBLE_TEST;
	int LED_VIEWER_ONE, LED_VIEWER_TWO, MANUAL_LED, ACSII_VIEWER, BATTERY_STRENGTH;
	int SCREEN_TEST1, SCREEN_TEST2, SCREEN_TEST3, ZeN_SuMiTuP;	
	int SUM1,SUM2,SUM3 ,SUM4,idxc = 0, idxnc, ID = 0;
	int POWER,LIFE,BOTTOM,TOP,BAT = 1, BATT = 0,EMPTY = 1;
	int TRIGGERR,TRIGGERL, ACTUALTL, ACTUALTR, ACTUALTRR;
	int DIGITX1 = 18,DIGITX = 18,DIGITY1 = 22, DIGITY = 22, DIGITX2 = 18,DIGITY2 = 22,DIGITSIZE = 1; 
	int DIGITSIZE1 = 1, DIGITSIZE2 = 1, ANALOGUELX, ANALOGUELY, ANALOGUERX, ANALOGUERY, RIGHT_ANALOGUE;
	int DIGITALL, DIGITALR, DID = 1, BUMPERS, STICKS, DPADUD, DPADLR, FACE, LEFT_ANALOGUE = 1;
	int FINGER1T, FINGER2T = 1, ACC = 1, GYRO, RIDX,SHAKE = 50:
	int L1W = 50, L2W = 50, L3W = 50, L4W = 50, L5W = 50;
	int XDOT, YDOT, XDOTA, YDOTA, XDOTAB, YDOTAB, XDOTABC, YDOTABC, XDOTABCD; 
	int YDOTABCD, XDOTABCDE, YDOTABCDE, DOT, LINE, RECT, WHITEA = 1;
	int button_id[4];
	int button_idx,buffer_idx,idx_count;
	int btn_idx,b,j;
  	int set_screen = TRUE;
	define DISPLAY_RANGE =  32000;
	int colorCycleRed, colorCycleBlue, colorCycleTime;
	int colorCycleGreen = 255;
	int colorCycleCycle = 1;
	int colorCycleDelay = 60;
	int colorCycleColorRate = 1;
	int colorCycleTimeRate = -20;
	int i,cycle = 8;
	int c_red  = _space;
    int c_red1 = _space;
    int c_red2 = _R;
    int c_red3 = _e;
    int c_red4 = _d;
    int c_red5 = _space;
    int c_red6 = _minus;
    int c_red7 = _space;
    int c_red8;
    int c_red9;
    int c_red10;
    int red_new;
    int red_num;
    int red_val;
    int red_i;
    int red;
	int green; 
	int blue;
	int l_cycle;
	int c_blue  = _space;
    int c_blue1  = _B;
    int c_blue2 = _l;
    int c_blue3 = _u;
    int c_blue4 = _e;
    int c_blue5 = _space;
    int c_blue6 = _minus;
    int c_blue7 = _space;
    int c_blue8;
    int c_blue9;
    int c_blue10;
    int blue_new;
    int blue_num;
    int blue_val;
    int blue_i;
    int c_green  = _G;
    int c_green1 = _r;
    int c_green2 = _e;
    int c_green3 = _e;
    int c_green4 = _n;
    int c_green5 = _space;
    int c_green6 = _minus;
    int c_green7 = _space;
    int c_green8;
    int c_green9;
    int c_green10;
    int green_new;
    int green_num;
    int green_val;
    int green_i;
    

/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*
+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
| | | | | | | | |I|N|I|T|I|A|L|I|S|A|T|I|O|N| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | |
*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
init {
	 		cls_oled(0);
	 		combo_run (LOGO);
} 
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*
+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
| | | | | | | | |M|A|I|N| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | | | | |
*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/	


	main {             	  													  

 		if (event_press(LEFT)) 
 			combo_stop(LOGO);

		if (BANNER) {
			TIMEOUT += get_rtime();
			cls_oled(0);
		if(get_battery()<=11) { 
			LIFE = get_battery();
			BATTS ();
		}
			printf(12, 05, 0, 1,ZEN_TEST_SCRIPT[0]); 
    		printf( 5, 22, 0, 1,CONSOLE[0]);
    		printf( 5, 34, 0, 1,CONTROLLER[0]);
    		printf(13, 52, 0, 1,MENU_HOLD[0]);
    		EQUIP();
    	}
    	if (TIMEOUT >= TIMEOUT_) {
			BANNER = FALSE; 
			cls_oled(0);
		}	
		
		if (get_val(LEFT) && get_ptime(LEFT)>550) {
	 		ADJUSTA =  TRUE;
	 		MENU    =  TRUE;
	 		BORDER  =  TRUE;
	 		BANNER  = FALSE:
	 		IDX     =     1;
	 	}
    	if (ADJUSTA || MENU) {
    	if (event_press(TRIANGLE)) {
       		ADJUSTA = FALSE;
    		MENU    = FALSE;
    		BORDER  = FALSE;
    		BANNER  =  TRUE:
    		LED_VIEWER_TWO = FALSE;
    		combo_run (BANNER);
    	}
    	if (event_press(RIGHT)) {
        	IDX += 1;
        if (IDX > 16) IDX = 1; 
        	MENU   =  TRUE;
        	BORDER =  TRUE;
        	BANNER = FALSE:
        }
        if (event_press(LEFT)) {						
        	IDX -= 1;
        if (IDX < 1) IDX = 16; 
        	MENU   =  TRUE;
        	BORDER =  TRUE;
        	BANNER = FALSE:
        }	
   		if (IDX == 1) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			MULTIPLE_BUTTON_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 2) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			ANALOGUE_STICK_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
        if (IDX == 3) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			TRIGGER_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 4) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			DIGITAL_BUTTON_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
       if (IDX == 5) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			TOUCHPAD_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 6) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			GYRO_ACC_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
        if (IDX == 7) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			cls_oled(0);
			RUMBLE_TEST = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 8) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			LED_VIEWER_ONE = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
       if (IDX == 9) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			LED_VIEWER_TWO = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
		if (IDX == 10) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			MANUAL_LED = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }		
        if (IDX == 11) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {
        	ACSII_VIEWER = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 12) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			BATTERY_STRENGTH = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
        if (IDX == 13) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			SCREEN_TEST1 = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 14) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {
        	SCREEN_TEST2 = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
        if (IDX == 15) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			SCREEN_TEST3 = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
	}
		if (IDX == 16) {
        	cls_oled(0);
        	printf(8,32,0,1,dbyte(print_label[IDX]));
        	MENU = FALSE;
        if (event_press(CROSS)) {				
			ZeN_SuMiTuP = TRUE;
			ADJUSTA   = FALSE;
    		BORDER    = FALSE;
			MENU      = FALSE;
		}
    }
}
		if (BORDER) {
        	rect_oled(1,1,127,63,0,1);
			rect_oled(4,3,121,59,0,1);
			line_oled(124,24,4,24,1,1);
			line_oled(124,46,4,46,1,1);
			printf(26,10,0,1,TEST_OPTION[0]);
			printf(6,50,0,1,CHOICE[0]);
		}
		
		if (MULTIPLE_BUTTON_TEST == TRUE) {
		if (get_val(LEFT) && get_ptime(LEFT) > 550 && get_val(TRIANGLE) && get_ptime(TRIANGLE) > 550) {
			MULTIPLE_BUTTON_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
			cls_oled(0);
			rect_oled(1,1,127,63,0,1);
			rect_oled(4,3,121,59,0,1);
			line_oled(124,24,4,24,1,1);
			printf(22,10,0,1,PRESS_A_BUTTON[0]);
			button_idx = get_button();
        if (button_idx) {
            rect_oled(10,28,108,30,TRUE,BLACK);
            idx_count = button_idx;
            buffer_idx = 1;
        for (j = 0; j < button_idx; j++) {
        for (b = 1; b <= BUTTON[button_id[j]][0]; b++) {
        	putc_oled(buffer_idx,BUTTON[button_id[j]][b]);
        	buffer_idx++;
        }
        	idx_count--;
        if(idx_count) {
        	putc_oled(buffer_idx,32);
        	buffer_idx++;
        }
	}
        	puts_oled((OLED_WIDTH / 2) - (buffer_idx * MEDIUM_FONT_WIDTH / 2 - 3),35,MEDIUM,buffer_idx - 1,WHITE);
        }
        else {
            rect_oled(10,28,108,30,TRUE,BLACK);
        }
    }
    	if(ANALOGUE_STICK_TEST) {
    		ANALOGUERX = RX;
    		ANALOGUERY = RY;
			ANALOGUELX = LX;
			ANALOGUELY = LY;
			ANALOGUE();
		if(event_press(CROSS)) {
			LEFT_ANALOGUE = !LEFT_ANALOGUE;
			RIGHT_ANALOGUE = !RIGHT_ANALOGUE;
		}
		if (event_press(TRIANGLE)) {
			ANALOGUE_STICK_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
	}	
		if(TRIGGER_TEST) {
			TRIGGERR = R2;
			TRIGGERL = L2;
			TRIGGERS();
		if (event_press(TRIANGLE)) {
			TRIGGER_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
	}	
		if(DIGITAL_BUTTON_TEST) {
			DIGITAL();
		if (get_val(LEFT) && get_ptime(LEFT) > 550 && get_val(TRIANGLE) && get_ptime(TRIANGLE) > 550) {
			DIGITAL_BUTTON_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
		if(event_press(R2)) {
		DID += 1;
        if (DID > 5) DID = 1;    
        }
		if (DID == 1) {
			BUMPERS = TRUE;
			FACE = FALSE;
		}
		if (DID == 2) {
			STICKS = TRUE;
			BUMPERS = FALSE;
		}
		if (DID == 3) {
			DPADUD = TRUE;
			STICKS = FALSE;
		}
		if (DID == 4) {
			DPADLR = TRUE;
			DPADUD = FALSE;
		}
		if (DID == 5) {
			FACE = TRUE;
			DPADLR = FALSE;
		}
	}
		if(TOUCHPAD_TEST) {
    		TOUCHPAD();
		if(event_press(CROSS)) {
			FINGER1T = !FINGER1T;
			FINGER2T = !FINGER2T;
		}
		if (event_press(TRIANGLE)) {
			TOUCHPAD_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
	}	
		if(GYRO_ACC_TEST) {
    		GYRO();
		if(event_press(CROSS)) {
			GYRO = !GYRO;
			ACC  = !ACC;
		}
		if (event_press(TRIANGLE)) {
			GYRO_ACC_TEST = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
		}
	}	
		if (LED_VIEWER_ONE == TRUE) {
		if (event_press(TRIANGLE)) { 
    		LED_VIEWER_ONE =FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    	}
			cls_oled(0);
			led_color_cycle();
    		vm_tctrl ( colorCycleCycle / 20 );
		if (set_screen) {
	    	printf(11,(63 - (colorCycleRed / 5)) - 12,0,1,RED[0]);
	    	printf(46,(63 - (colorCycleGreen / 5)) - 12,0,1,GREEN[0]);
	    	printf(91,(63 - (colorCycleBlue / 5)) - 12,0,1,BLUE[0]);
	    	rect_oled(11,63 - (colorCycleRed / 5),21,colorCycleRed  / 5,TRUE,1); 
	    	rect_oled(53,63 - (colorCycleGreen / 5),21,colorCycleGreen / 5,TRUE,1);
	    	rect_oled(95,63 - (colorCycleBlue / 5),21,colorCycleBlue / 5,TRUE,1); 
	    	set_screen = FALSE;
		}
	}	
		if (LED_VIEWER_TWO == TRUE){
		if (event_press(TRIANGLE)) { 
    		LED_VIEWER_TWO =FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    		}
			cls_oled(0);
			set_val(TRACE_1,red);
    		set_val(TRACE_2,green);
    		set_val(TRACE_3,blue);
    		cycle_color();
    		set_rgb(red,green,blue);
    		display_red();
    		display_green();
    		display_blue();
    	}
    	if (MANUAL_LED == TRUE) {
		if (event_press(TRIANGLE)) { 
    		MANUAL_LED =FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    	}
    		MANUALLED();
    	if (event_press(RIGHT)) LEDID +=1;
		if (event_press(LEFT)) LEDID -=1;
		if (LEDID>3) LEDID = 1;
		if (LEDID<1) LEDID = 3;
		if (LEDID == 1) {
		if (event_press(UP)) REDLED +=1;
		if (event_press(DOWN)) REDLED -=1;
		if (REDLED>255) REDLED = 0;
		if (REDLED<0) REDLED = 255;
		}
		if (LEDID == 2) {
		if (event_press(UP)) GREENLED +=1;
		if (event_press(DOWN)) GREENLED -=1;
		if (GREENLED>255) GREENLED = 0;
		if (GREENLED<0) GREENLED = 255;
		}
		if (LEDID == 3) {
		if (event_press(UP)) BLUELED +=1;
		if (event_press(DOWN)) BLUELED -=1;
		if (BLUELED>255) BLUELED = 0;
		if (BLUELED<0) BLUELED = 255;
		}
	}
    	
    	if (RUMBLE_TEST) {
    		RUMBLE ();
    	if (event_press(TRIANGLE)) { 
    		RUMBLE_TEST = FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    		reset_rumble();
    	}
    	if (event_press(SQUARE)) {
    		reset_rumble();
    	}
    	if (event_press(DOWN) || get_val(DOWN) && get_ptime(DOWN) > 250) { 
    		SHAKE -= 1;
    		reset_rumble();
    	}
		if (event_press(UP) || get_val(UP) && get_ptime(UP) > 250) { 
			SHAKE += 1;
			reset_rumble();
		}
		if (SHAKE>100) SHAKE = 1;
		if (SHAKE<1) SHAKE = 100;
    	if (event_press(CROSS)) { 
    		RIDX += 1;
			reset_rumble ();
		}
        if (RIDX > 4) RIDX = 1;    
    	}
    	if (ACSII_VIEWER == TRUE) {
    	if (event_press(TRIANGLE)) { 
    		ACSII_VIEWER =FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    	}
    		SYMBOL((ON));
 		if (event_press(UP) || get_val(UP) && get_ptime(UP) > 150) {
            ID += 1;
        if (ID > 255) ID = 0;    
        }
        if (event_press(DOWN) || get_val(DOWN) && get_ptime(DOWN) > 150) {
            ID -= 1;
        if (ID < 0) ID = 255;    
        }	
    }
    	if (SCREEN_TEST1) {
    		combo_run (LINE1);
			combo_run (LINE2);
			combo_run (LINE3);
			combo_run (LINE4);
			combo_run (LINE5);
    	if (get_val(LEFT) && get_ptime(LEFT) > 550 && get_val(TRIANGLE) && get_ptime(TRIANGLE) > 550) {
			SCREEN_TEST1 = FALSE;
			ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
			combo_stop (LINE1);
			combo_stop (LINE2);
			combo_stop (LINE3);
			combo_stop (LINE4);
			combo_stop (LINE5);
		}
    		cls_oled(0):
		if (get_val(CROSS)) {
			L1W = 20;
			L2W = 20;
			L3W = 20;
			L4W = 20;
			L5W = 20;
		}
		if (get_val(SQUARE)) {
			L1W = 100;
			L2W = 100;
			L3W = 100;
			L4W = 100;
			L5W = 100;
		}
		if (get_val(TRIANGLE)) {
			L1W = 100;
			L2W = 80;
			L3W = 60;
			L4W = 40;
			L5W = 20;}
		if (get_val(CIRCLE)) {
			L1W = 20;
			L2W = 40;
			L3W = 60;
			L4W = 80;
			L5W = 100;
		}
		if (get_val(R2)) {
			L1W = 55;
			L2W = 60;
			L3W = 65;
			L4W = 70;
			L5W = 75;
		}
		if (get_val(R1)) {
			L1W = 75;
			L2W = 70;
			L3W = 65;
			L4W = 60;
			L5W = 55;
		}
		if (get_val(L2)) {
			L1W = 150;
			L2W = 125;
			L3W = 100;
			L4W = 75;
			L5W = 50;
		}
		if (get_val(L1)) {
			rect_oled(0,0,10,10,1,1);
			rect_oled(12,0,10,10,1,1);
			rect_oled(24,0,10,10,1,1);
			rect_oled(36,0,10,10,1,1);
			rect_oled(48,0,10,10,1,1);
			rect_oled(60,0,10,10,1,1);
			rect_oled(72,0,10,10,1,1);
			rect_oled(84,0,10,10,1,1);
			rect_oled(96,0,10,10,1,1);
			rect_oled(108,0,10,10,1,1);
			rect_oled(120,0,10,10,1,1);
			rect_oled(0,12,10,10,1,1);
			rect_oled(12,12,10,10,1,1);
			rect_oled(24,12,10,10,1,1);
			rect_oled(36,12,10,10,1,1);
			rect_oled(48,12,10,10,1,1);
			rect_oled(60,12,10,10,1,1);
			rect_oled(72,12,10,10,1,1);
			rect_oled(84,12,10,10,1,1);
			rect_oled(96,12,10,10,1,1);
			rect_oled(108,12,10,10,1,1);
			rect_oled(120,12,10,10,1,1);
			rect_oled(0,24,10,10,1,1);
			rect_oled(12,24,10,10,1,1);
			rect_oled(24,24,10,10,1,1);
			rect_oled(36,24,10,10,1,1);
			rect_oled(48,24,10,10,1,1);
			rect_oled(60,24,10,10,1,1);
			rect_oled(72,24,10,10,1,1);
			rect_oled(84,24,10,10,1,1);
			rect_oled(96,24,10,10,1,1);
			rect_oled(108,24,10,10,1,1);
			rect_oled(120,24,10,10,1,1);
			rect_oled(0,36,10,10,1,1);
			rect_oled(12,36,10,10,1,1);
			rect_oled(24,36,10,10,1,1);
			rect_oled(36,36,10,10,1,1);
			rect_oled(48,36,10,10,1,1);
			rect_oled(60,36,10,10,1,1);
			rect_oled(72,36,10,10,1,1);
			rect_oled(84,36,10,10,1,1);
			rect_oled(96,36,10,10,1,1);
			rect_oled(108,36,10,10,1,1);
			rect_oled(120,36,10,10,1,1);
			rect_oled(0,48,10,10,1,1);
			rect_oled(12,48,10,10,1,1);
			rect_oled(24,48,10,10,1,1);
			rect_oled(36,48,10,10,1,1);
			rect_oled(48,48,10,10,1,1);
			rect_oled(60,48,10,10,1,1);
			rect_oled(72,48,10,10,1,1);
			rect_oled(84,48,10,10,1,1);
			rect_oled(96,48,10,10,1,1);
			rect_oled(108,48,10,10,1,1);
			rect_oled(120,48,10,10,1,1);
		}
	}
		if (SCREEN_TEST2) {
		if (get_val(TRIANGLE)) {
    		SCREEN_TEST2 = FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    		combo_stop(SPREAD);
    	}
		if (event_press(CROSS)) 
			cls_oled(0);
		if (event_press(SQUARE)) { 
			WHITEA = !WHITEA;
		}
		if (XDOT < 1)XDOT = 127;
        if (YDOT < 1)YDOT = 63;
        if (XDOTA < 1)XDOTA = 127;
        if (YDOTA < 1)YDOTA = 63;
        if (XDOTAB < 1)XDOTAB = 127;
        if (YDOTAB < 1)YDOTAB = 63;
        if (XDOTABC < 1)XDOTABC = 127;
        if (YDOTABC < 1)YDOTABC = 63;
        if (XDOTABCD < 1)XDOTABCD = 127;
        if (YDOTABCD < 1)YDOTABCD = 63;
        if (XDOTABCDE < 1)XDOTABCDE = 127;
		if (YDOTABCDE < 1)YDOTABCDE = 63;
			pixel_oled(XDOT,YDOT,WHITEA)
            pixel_oled(XDOT,YDOT,WHITEA)
 			pixel_oled(XDOTA,YDOTA,WHITEA)
            pixel_oled(XDOTAB,YDOTAB,WHITEA)
            pixel_oled(XDOTABC,YDOTABC,WHITEA)
            pixel_oled(XDOTABCD,YDOTABCD,WHITEA)
            pixel_oled(XDOTABCDE,YDOTABCDE,WHITEA)
            combo_run(SPREAD);
		}
		if (SCREEN_TEST3) {
		if (get_val(TRIANGLE)) {
    		SCREEN_TEST3 = FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    		LINE    = FALSE;
    		RECT    = FALSE;
    		combo_stop(LINEA);
			combo_stop(LINEB);
            combo_stop(SPREAD0);
            combo_stop(SPREAD1);
    		combo_stop(SPREAD2);
    		combo_stop(SPREAD3);
    		combo_stop(SPREAD4);
    		cls_oled(0);
    	}
		if (event_press(CROSS)) {
			LINE = !LINE;
			cls_oled(0);
		}
		if (LINE) {
			combo_run(LINEA);
			combo_run(LINEB);
            combo_run(SPREAD0);
			line_oled(XDOT / 4,YDOT / 4,XDOTA / 4,YDOTA / 4,5,1);
		}
		if (!LINE) {
			combo_stop(LINEA);
			combo_stop(LINEB);
            combo_stop(SPREAD0);
			cls_oled(0);
		}	
		if (event_press(SQUARE)) {
			RECT = !RECT;
			cls_oled(0);
		}
		if (RECT) {
			combo_run(SPREAD1);
            combo_run(SPREAD0);
		}
		if (!RECT) {
			combo_stop(SPREAD0);
        	combo_stop(SPREAD1);
    		combo_stop(SPREAD2);
    		combo_stop(SPREAD3);
    		combo_stop(SPREAD4);
        	cls_oled(0);
        }
	}   
		if (BATTERY_STRENGTH) {
		if (event_press(CROSS)) {
			BATT = !BATT;
			BAT = !BAT;
		}
		if (event_press(TRIANGLE)) {
    		BATTERY_STRENGTH = FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    	}
		if (BAT) { 
		if(get_battery()<=11) { 
			LIFE = get_battery();
			BATTS ();
		}
	}
		if (BATT) { 
		if (get_battery()<=11) { 
			LIFE = get_battery();
			BATTZ();
		}
	}
}
    	if (ZeN_SuMiTuP) {
    	if (event_press(SQUARE)) {
    		idxc = 1;
    		SUM1 = 0;
    		SUM2 = 0;
    		SUM3 = 0;
    		SUM4 = 0;
    		cls_oled (0);
    	}
    		cls_oled (0);
    		rect_oled(1,1,127,63,0,1);
			rect_oled(4,3,121,59,0,1);
			line_oled(124,22,4,22,1,1);
			line_oled(124,46,4,46,1,1);
    		printf(37,10,0,1,SuMiTuP[0]);
        	DIGITX = 59;
			DIGITY = 49;
			DIGITSIZE = 0;
        	EDITNUMBER(SUM4,find_digits(SUM4));
        	putc_oled(1,ASCII_SUM[SUM2]);
			puts_oled(57,27,1,1,1);
    		DIGITX1 = 73;
			DIGITY1 = 27;
			DIGITSIZE1 = 1;
    		EDITNUMBER1(SUM3,NUMBER(SUM3));
    		DIGITX2 = 10;
			DIGITY2 = 27;
			DIGITSIZE2 = 1;
        	EDITNUMBER2(SUM1,NUMBER2(SUM1));
    	if (event_press(TRIANGLE)) {
    		ZeN_SuMiTuP = FALSE;
    		ADJUSTA = TRUE;
	 		MENU    = TRUE;
	 		BORDER  = TRUE;
    	}
    	if (event_press(CROSS)) {
        	idxc += 1;
        if (idxc > 4) idxc = 1; 
        }
   		if (idxc == 1) {
		if (event_press(UP) || get_val(UP) && get_ptime(UP) > 150) {
            SUM1 +=    1;
        }
        if (event_press(DOWN) || get_val(DOWN) && get_ptime(DOWN) > 150) {
            SUM1 -=    1;
        }	
	}
		if (idxc == 2) {
		if (event_press(UP)) {
            SUM2 +=    1;
        if (SUM2 > 4) SUM2 = 0; 
        }
        if (event_press(DOWN)) {
            SUM2 -=    1;
        if (SUM2 < 0) SUM2 = 4;
        if (SUM2 == 0) SUM4 = SUM1 * SUM3;
        if (SUM2 == 1) SUM4 = SUM1 + SUM3;
        if (SUM2 == 2) SUM4 = SUM1 - SUM3;
        if (SUM2 == 3) SUM4 = SUM1 / SUM3;
        if (SUM2 == 4) SUM4 = SUM1 % SUM3;
        }
    }
		if (idxc == 3) {
		if (event_press(UP) || get_val(UP) && get_ptime(UP) > 150) {
            SUM3 +=    1;
        }
        if (event_press(DOWN) || get_val(DOWN) && get_ptime(DOWN) > 150) {
            SUM3 -=    1;
        }
	}
    	if (idxc == 4) {
		if (SUM2 == 0) SUM4 = SUM1 * SUM3;
        if (SUM2 == 1) SUM4 = SUM1 + SUM3;
        if (SUM2 == 2) SUM4 = SUM1 - SUM3;
        if (SUM2 == 3) SUM4 = SUM1 / SUM3;
        if (SUM2 == 4) SUM4 = SUM1 % SUM3;
        }
    }
}//END OF MAIN	
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*
+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
| | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | | | |
*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
	combo LINE1 {
		rect_oled(0,0,10,10,1,1);
		wait (L1W);
		rect_oled(12,0,10,10,1,1);
		wait (L1W);
		rect_oled(24,0,10,10,1,1);
		wait (L1W);
		rect_oled(36,0,10,10,1,1);
		wait (L1W);
		rect_oled(48,0,10,10,1,1);
		wait (L1W);
		rect_oled(60,0,10,10,1,1);
		wait (L1W);
		rect_oled(72,0,10,10,1,1);
		wait (L1W);
		rect_oled(84,0,10,10,1,1);
		wait (L1W);
		rect_oled(96,0,10,10,1,1);
		wait (L1W);
		rect_oled(108,0,10,10,1,1);
		wait (L1W);
		rect_oled(120,0,10,10,1,1);
		wait (L1W);
}
	combo LINE2 {
		rect_oled(0,12,10,10,1,1);
		wait (L2W);
		rect_oled(12,12,10,10,1,1);
		wait (L2W);
		rect_oled(24,12,10,10,1,1);
		wait (L2W);
		rect_oled(36,12,10,10,1,1);
		wait (L2W);
		rect_oled(48,12,10,10,1,1);
		wait (L2W);
		rect_oled(60,12,10,10,1,1);
		wait (L2W);
		rect_oled(72,12,10,10,1,1);
		wait (L2W);
		rect_oled(84,12,10,10,1,1);
		wait (L2W);
		rect_oled(96,12,10,10,1,1);
		wait (L2W);
		rect_oled(108,12,10,10,1,1);
		wait (L2W);
		rect_oled(120,12,10,10,1,1);
		wait (L2W);
}
	combo LINE3 {
		rect_oled(0,24,10,10,1,1);
		wait (L3W);
		rect_oled(12,24,10,10,1,1);
		wait (L3W);
		rect_oled(24,24,10,10,1,1);
		wait (L3W);
		rect_oled(36,24,10,10,1,1);
		wait (L3W);
		rect_oled(48,24,10,10,1,1);
		wait (L3W);
		rect_oled(60,24,10,10,1,1);
		wait (L3W);
		rect_oled(72,24,10,10,1,1);
		wait (L3W);
		rect_oled(84,24,10,10,1,1);
		wait (L3W);
		rect_oled(96,24,10,10,1,1);
		wait (L3W);
		rect_oled(108,24,10,10,1,1);
		wait (L3W);
		rect_oled(120,24,10,10,1,1);
		wait (L3W);
}
	combo LINE4 {
		rect_oled(0,36,10,10,1,1);
		wait (L4W);
		rect_oled(12,36,10,10,1,1);
		wait (L4W);
		rect_oled(24,36,10,10,1,1);
		wait (L4W);
		rect_oled(36,36,10,10,1,1);
		wait (L4W);
		rect_oled(48,36,10,10,1,1);
		wait (L4W);
		rect_oled(60,36,10,10,1,1);
		wait (L4W);
		rect_oled(72,36,10,10,1,1);
		wait (L4W);
		rect_oled(84,36,10,10,1,1);
		wait (L4W);
		rect_oled(96,36,10,10,1,1);
		wait (L4W);
		rect_oled(108,36,10,10,1,1);
		wait (L4W);
		rect_oled(120,36,10,10,1,1);
		wait (L4W);
}
	combo LINE5 {
		rect_oled(0,48,10,10,1,1);
		wait (L5W);
		rect_oled(12,48,10,10,1,1);
		wait (L5W);
		rect_oled(24,48,10,10,1,1);
		wait (L5W);
		rect_oled(36,48,10,10,1,1);
		wait (L5W);
		rect_oled(48,48,10,10,1,1);
		wait (L5W);
		rect_oled(60,48,10,10,1,1);
		wait (L5W);
		rect_oled(72,48,10,10,1,1);
		wait (L5W);
		rect_oled(84,48,10,10,1,1);
		wait (L5W);
		rect_oled(96,48,10,10,1,1);
		wait (L5W);
		rect_oled(108,48,10,10,1,1);
		wait (L5W);
		rect_oled(120,48,10,10,1,1);
		wait (L5W);
}
	combo SPREAD {
 		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
 		XDOTAB = random(1,128);
 		YDOTAB = random(1,64);
 		XDOTABC = random(1,128);
 		YDOTABC = random(1,64);
 		XDOTABCD = random(1,128);
 		YDOTABCD = random(1,64);
 		XDOTABCDE = random(1,128);
 		YDOTABCDE = random(1,64);
}
 	combo SPREAD0 {
 		XDOT = XDOT + 10;
 		YDOT = YDOT + 10;
 		XDOTA = XDOTA - 10;
 		YDOTA = YDOTA - 10;
 		wait (600 );
}
 	combo SPREAD1 {
 		XDOT = XDOT + 5;
 		YDOT = YDOT + 5;
 		XDOTA = XDOTA - 10;
 		YDOTA = YDOTA - 10;
 		rect_oled(XDOT,YDOT,XDOT,YDOT,0,WHITEA);
 		wait (750);
 		rect_oled(XDOT,YDOT,XDOT,YDOT,0,WHITEA - 1);
 		wait (750);
 		cls_oled(0);
 		combo_run(SPREAD2);
}
 	combo SPREAD2 {
 		XDOT = XDOT + 10;
 		YDOT = YDOT + 10;
 		XDOTA = XDOTA - 30;
 		YDOTA = YDOTA - 30;
 		rect_oled(XDOT,YDOT,XDOTA,YDOTA,0,WHITEA);
 		wait (750);
 		cls_oled(0);
 		combo_run(SPREAD3);
}
 	combo SPREAD3 {
 		XDOT = XDOT + 50;
 		YDOT = YDOT + 50;
 		XDOTA = XDOTA - 50;
 		YDOTA = YDOTA - 50;
 		rect_oled(XDOTA,YDOTA,XDOTA,YDOTA,0,WHITEA);
 		wait (750);
 		rect_oled(XDOT,YDOT,XDOT,YDOT,0,WHITEA - 1);
 		wait (750);
 		cls_oled(0);
 		combo_run(SPREAD4);
}
  	combo SPREAD4 {
 		rect_oled(XDOTA,YDOTA,XDOTA,YDOTA,0,WHITEA);
 		wait (750);
 		rect_oled(XDOT,YDOT,XDOT,YDOT,0,WHITEA - 1);
 		wait (750);
 		cls_oled(0);
 		combo_run(SPREAD1);
 		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
}
 
	combo LINEA {
		line_oled(XDOT,YDOT,XDOTA,YDOTA,3,1);
		wait (350);
		line_oled(XDOT / 2 ,YDOT / 2 ,XDOTA / 2,YDOTA / 2,3,1);
		wait (350);
		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
		line_oled(XDOT,YDOT,XDOTA,YDOTA,3,1);
		wait (350);
		line_oled(XDOT / 3,YDOT / 3,XDOTA / 3,YDOTA / 3,3,1);
		wait (350);
		cls_oled(0);
		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
}
 	combo LINEB {
		line_oled(XDOT,YDOT,XDOTA,YDOTA,3,1);
		wait (350);
		line_oled(XDOT - 50 ,YDOT - 50 ,XDOTA - 50,YDOTA - 50,3,1);
		wait (350);
		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
 		cls_oled(0);
		line_oled(XDOT,YDOT,XDOTA,YDOTA,3,1);
		wait (350);
		line_oled(XDOT * 2,YDOT * 2,XDOTA * 2,YDOTA * 2,3,1);
		wait (350);
		cls_oled(0);
		XDOT = random(1,128);
 		YDOT = random(1,64);
 		XDOTA = random(1,128);
 		YDOTA = random(1,64);
}
	combo LOGO {	
		rect_oled(12,10,10,10,1,1);	
		rect_oled(21,10,10,10,1,1);	
		rect_oled(31,10,10,10,1,1);	
		rect_oled(40,10,10,10,1,1);
		line_oled(12,52,40,20,10,1);
		rect_oled(12,51,10,10,1,1);
		rect_oled(21,51,10,10,1,1);
		rect_oled(31,51,10,10,1,1);
		rect_oled(40,51,10,10,1,1);	
		rect_oled(52,10,10,10,1,1);
		rect_oled(62,10,10,10,1,1);
		rect_oled(72,10,10,10,1,1);
		rect_oled(52,20,10,10,1,1);	
		rect_oled(52,22,10,10,1,1);		
		rect_oled(52,31,10,10,1,1);
		rect_oled(62,31,10,10,1,1);
		rect_oled(72,31,10,10,1,1);
		rect_oled(52,40,10,10,1,1);
		rect_oled(52,42,10,10,1,1);	
		rect_oled(52,51,10,10,1,1);
		rect_oled(62,51,10,10,1,1);
		rect_oled(72,51,10,10,1,1);
		rect_oled(84,51,10,10,1,1);
		rect_oled(84,50,10,10,1,1);
		rect_oled(84,40,10,10,1,1);
		rect_oled(84,30,10,10,1,1);
		rect_oled(84,20,10,10,1,1);
		rect_oled(84,10,10,10,1,1);
		line_oled(110,60,88,10,10,1);
		rect_oled(112,10,10,10,1,1);
		rect_oled(112,20,10,10,1,1);
		rect_oled(112,30,10,10,1,1);
		rect_oled(112,40,10,10,1,1);
		rect_oled(112,45,10,10,1,1);
		rect_oled(112,50,10,10,1,1);
		wait (4000);
		BANNER = TRUE;
}	
	combo BANNER {
		cls_oled(0);
		TIMEOUT = FALSE;
		wait (250);
		BANNER = TRUE;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*
+--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
| | | | | | | | |F|U|N|C|T|I|O|N| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | |
*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function SYMBOL(OUTPUT) {
	if(OUTPUT) {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		printf(35,8,0,1,UP1[0]);
		printf(30,50,0,1,DOWN1[0]);
		putc_oled(1,ASCII[ID]);
		puts_oled(90,25,1,1,1);
		putc_oled(1,ASCII[61]);
		puts_oled(63,25,1,1,1);
		DIGITSIZE = 1;
		DIGITX = 18;
		DIGITY = 25;
		EDITNUMBER(ID,find_digits(ID));
	}	
}
function get_button() {
  		btn_idx = 0;
	for (b = 0; b <= 20; b++) {
	if (abs(get_val(b)) > 10) {
	    set_val(b,0);
	    button_id[btn_idx] = b;    
        btn_idx++;
    if (btn_idx > 4) {
        break;
		}
	}
}
    	return btn_idx;
}
function display_red() {
	if (red_new) {
    	red_i = 8;
        red_val = red;
    	red_num = find_digits(red);  
    if (red_num == 3) {
        c_red[red_i] = ASCII_NUM[red_val / 100];
        red_val %= 100;
        red_i += 1;
        }
    if (red_num >= 2) {
        c_red[red_i] = ASCII_NUM[red_val / 10];
        red_val %= 10;
        red_i += 1;
        }
        c_red[red_i] = ASCII_NUM[red_val];
    if (red_i < 9) {
        red_i += 1;
        c_red[red_i] = _space;
        }
    if (red_i < 10) {
        red_i += 1;
        c_red[red_i] = _space;
        }
    for (i = 0; i <= 10; i ++) {
        putc_oled(i + 1,c_red[i]);
        }
        puts_oled(center_x(11,MEDIUM),2,MEDIUM,11,WHITE)
        red_new = FALSE;
    }
}
function display_green() {
	if (green_new) {
    	green_i = 8;
        green_val = green;
    	green_num = find_digits(green);  
    if (green_num == 3) {
        c_green[green_i] = ASCII_NUM[green_val / 100];
        green_val %= 100;
        green_i += 1;
        }
    if (green_num >= 2) {
        c_green[green_i] = ASCII_NUM[green_val / 10];
        green_val %= 10;
        green_i += 1;
        }
        c_green[green_i] = ASCII_NUM[green_val];
    if (green_i < 9) {
        green_i += 1;
        c_green[green_i] = _space;
        }
    if (green_i < 10) {
        green_i += 1;
        c_green[green_i] = _space;
        }
	for (i = 0; i <= 10; i ++) {
        putc_oled(i + 1,c_green[i]);
        }
        puts_oled(center_x(11,MEDIUM),22,MEDIUM,11,WHITE)
        green_new = FALSE;
    }
}
function display_blue() {
	if (blue_new) {
    	blue_i = 8;
        blue_val = blue;
    	blue_num = find_digits(blue);  
    if (blue_num == 3) {
        c_blue[blue_i] = ASCII_NUM[blue_val / 100];
        blue_val %= 100;
        blue_i += 1;
        }
    if (blue_num >= 2) {
        c_blue[blue_i] = ASCII_NUM[blue_val / 10];
        blue_val %= 10;
        blue_i += 1;
        }
        c_blue[blue_i] = ASCII_NUM[blue_val];
    if (blue_i < 9) {
        blue_i += 1;
        c_blue[blue_i] = _space;
        }
	if (blue_i < 10) {
        blue_i += 1;
        c_blue[blue_i] = _space;
        }
    for (i = 0; i <= 10; i ++) {
        putc_oled(i + 1,c_blue[i]);
        }
        puts_oled(center_x(11,MEDIUM),44,MEDIUM,11,WHITE)
        blue_new = FALSE;
    }
}
function cycle_color() {
    if (!l_cycle && red < 255) {
	    red_new = TRUE;
	    red += 1;
	if (red == 255) l_cycle = 1;
	} 
	if (l_cycle == 1 && red > 0) {
        red -= 1;
        red_new = TRUE;
    if (red == 0) l_cycle = 2;
    }
    if (l_cycle == 2 && blue < 255) {
        red += 1;
        red_new = TRUE;
        blue += 1;
        blue_new = TRUE;
    if(blue == 255) l_cycle = 3;
    }
    if (l_cycle == 3 && blue > 0) {
        red -= 1;
        red_new = TRUE;
        blue -= 1;
        blue_new = TRUE;
    if (blue == 0) l_cycle = 4;
    }
    if (l_cycle == 4 && blue < 255) {
	    blue += 1;
	    blue_new = TRUE;
	if (blue == 255) l_cycle = 5;
	} 
	if (l_cycle == 5 && blue > 0) {
        blue -= 1;
        blue_new = TRUE;
    if (blue == 0) l_cycle = 6;
    }   
    if (l_cycle == 6 && green < 255) {
        green += 1;
        green_new = TRUE;
        blue += 1;
        blue_new = TRUE;
    if (green == 255) l_cycle = 7;
    }
    if (l_cycle == 7 && green > 0) {
        green -= 1;
        green_new = TRUE;
        blue -= 1;
        blue_new = TRUE;
    if (green == 0) l_cycle = 8;
    }
    if (l_cycle == 8 && green < 255) {
	    green += 1;
	    green_new = TRUE;
	if (green == 255) l_cycle = 9;
	} 
	if (l_cycle == 9 && green > 0) {
        green -= 1;
        green_new = TRUE;
    if (green == 0) l_cycle = 10;
    } 
    if (l_cycle == 10 && red < 255) {
        green += 1;
        green_new = TRUE;
        red += 1;
        red_new = TRUE;
    if (red == 255) l_cycle = 11;
    }
    if (l_cycle == 11 && red > 0) {
        green -= 1;
        green_new = TRUE;
        red -= 1;
        red_new = TRUE;
    if (red == 0) l_cycle = 12;
    }
    if (l_cycle == 12 && red < 255) {
    	green += 1;
    	green_new = TRUE;
        red += 1; 
        red_new = TRUE;
        blue += 1;
        blue_new = TRUE;
    if (red == 255) l_cycle = 13;
    }    
    if (l_cycle == 13 && red > 0) {  
        green -= 1;
        green_new = TRUE;
        red -= 1; 
        red_new = TRUE;
        blue -= 1;
        blue_new = TRUE;
    if (red == 0) l_cycle = 0;
    }
} 
function led_color_cycle() {
    	colorCycleTime += get_rtime();
    if (colorCycleTime >= cycle) {
        ClearRect();
        colorCycleTime = 0;
	if (colorCycleCycle == 1) {
	if (colorCycleRed < 255) {
	    colorCycleRed += colorCycleColorRate;
	}
	else if (colorCycleGreen > 0) {
	    colorCycleGreen -= colorCycleColorRate;
	}
    else if (colorCycleBlue < 255) {
	    colorCycleBlue += colorCycleColorRate;
	}
	else {
	    colorCycleCycle = 2;
	}
}
	if (colorCycleCycle == 2) {
	if (colorCycleRed > 0) {
	    colorCycleRed -= colorCycleColorRate;
	}
	else if (colorCycleGreen < 255) {
	    colorCycleGreen += colorCycleColorRate;
	}
	else if (colorCycleBlue > 0) {
	    colorCycleBlue -= colorCycleColorRate;
	}
    else { 
	    colorCycleCycle = 3;
	}
}
	if (colorCycleCycle == 3) {
	if (colorCycleRed < 255 && colorCycleGreen == 255) { 
		colorCycleRed += colorCycleColorRate;
	    colorCycleBlue += colorCycleColorRate;
	}
	else if (colorCycleBlue > 0) {
	    colorCycleBlue -= colorCycleColorRate;    
	    colorCycleGreen -= colorCycleColorRate;
	    colorCycleRed -= colorCycleColorRate;
	}
	else if (colorCycleGreen < 255) {
	    colorCycleGreen += colorCycleColorRate;
	if (colorCycleGreen == 1) {
	    colorCycleDelay += colorCycleTimeRate;
	if (colorCycleDelay < 0) { 
	    colorCycleDelay = 20;
	    colorCycleTimeRate = inv(colorCycleTimeRate);
	}   
	if (colorCycleDelay > 60) {     
	    colorCycleDelay = 40;   
	    colorCycleTimeRate = inv(colorCycleTimeRate);
	}
}
	if (colorCycleGreen == 255) {
	    colorCycleCycle = 1; 
		}
	} 
}
	    set_rgb(colorCycleRed,colorCycleGreen,colorCycleBlue); 
	}
} 
function ClearRect() {
    	rect_oled(11,(63 - (colorCycleRed / 5)) - 12,21,10,TRUE,0);
		rect_oled(46,(63 - (colorCycleGreen / 5)) - 12,35,10,TRUE,0);
		rect_oled(91,(63 - (colorCycleBlue / 5)) - 12,28,10,TRUE,0);
		rect_oled(11,63 - (colorCycleRed / 5),21,colorCycleRed / 5,TRUE,0);
		rect_oled(53,63 - (colorCycleGreen / 5),21,colorCycleGreen / 5,TRUE,0);
		rect_oled(95,63 - (colorCycleBlue / 5),21,colorCycleBlue / 5,TRUE,0);   
		set_screen = TRUE;
}
function EQUIP() {
	if(get_console() == PIO_PS4) {
	    printf(85,22,0,1,PS4[0]);
	}
	else if(get_console() == PIO_XB1) {
		printf(85,22,0,1,XB1[0]); 
	}
	if(get_controller() == PIO_PS4) {
		printf(85,34,0,1,PS4[0]); 
	}
	else if(get_controller() == PIO_XB1) {
		printf(85,34,0,1,XB1[0]); 
	}
}
function RUMBLE () {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(12,10,0,1,PRESS_R2_RUMBLE[0]);
		ACTUALTL = SHAKE;
		DIGITSIZE = 1;
		DIGITX = 55;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	if (RIDX == 1) {
		printf(40,49,0,1,VIBA_[0]);
	if (event_press (R2))
		set_rumble(RUMBLE_A,SHAKE);   
	}
	if (RIDX == 2) {
		printf(40,49,0,1,VIBB_[0]);
	if (event_press (R2))	
		set_rumble(RUMBLE_B,SHAKE);   
	}
	if (RIDX == 3) {
		printf(37,49,0,1,VIBLT_[0]);
	if (event_press (R2))	
		set_rumble(RUMBLE_LT,SHAKE);   
	}
	if (RIDX == 4) {
		printf(37,49,0,1,VIBRT_[0]);
	if (event_press (R2))	
		set_rumble(RUMBLE_RT,SHAKE);   
	}
}	
function BATTS () {
	if (BAT) { 
		cls_oled(0);
		LIFE = get_battery();
	if (LIFE >= 0)  { BOTTOM =  96; TOP = 30; EMPTY = 0;}
	if (LIFE == 1)  { BOTTOM = 121; TOP =  3; EMPTY = 1;}
	if (LIFE == 2)  { BOTTOM = 120; TOP =  6; EMPTY = 1;}
	if (LIFE == 3)  { BOTTOM = 118; TOP =  9; EMPTY = 1;}
	if (LIFE == 4)  { BOTTOM = 115; TOP = 12; EMPTY = 1;}
	if (LIFE == 5)  { BOTTOM = 111; TOP = 15; EMPTY = 1;}
	if (LIFE == 6)  { BOTTOM = 108; TOP = 18; EMPTY = 1;}
	if (LIFE == 7)  { BOTTOM = 105; TOP = 21; EMPTY = 1;}
	if (LIFE == 8)  { BOTTOM = 102; TOP = 24; EMPTY = 1;}
	if (LIFE == 9)  { BOTTOM =  99; TOP = 27; EMPTY = 1;}
	if (LIFE >= 10) { BOTTOM =  96; TOP = 30; EMPTY = 1;}
		rect_oled(BOTTOM,3,TOP,8,EMPTY,1);
		rect_oled(95,2,30,10,0,1);
		rect_oled(92,3,3,8,0,1);
	}
}
function BATTZ () { 
	if (BATT) {
		cls_oled(0);
	if (LIFE >= 0)  { BOTTOM =  20; TOP = 100; EMPTY = 0; printf(92,04, 1, 1,ZERO[0]);}
  	if (LIFE == 1)  { BOTTOM = 109; TOP =  10; EMPTY = 1; printf(92,04, 1, 1,TEN[0]);}
	if (LIFE == 2)  { BOTTOM =  99; TOP =  20; EMPTY = 1; printf(92,04, 1, 1,TWENTY[0]);}
	if (LIFE == 3)  { BOTTOM =  89; TOP =  30; EMPTY = 1; printf(92,04, 1, 1,THIRTY[0]);}
	if (LIFE == 4)  { BOTTOM =  79; TOP =  40; EMPTY = 1; printf(92,04, 1, 1,FOURTY[0]);}
	if (LIFE == 5)  { BOTTOM =  69; TOP =  50; EMPTY = 1; printf(92,04, 1, 1,FIFTY[0]);}
	if (LIFE == 6)  { BOTTOM =  59; TOP =  60; EMPTY = 1; printf(92,04, 1, 1,SIXTY[0]);}
	if (LIFE == 7)  { BOTTOM =  49; TOP =  70; EMPTY = 1; printf(92,04, 1, 1,SEVENTY[0]);}
	if (LIFE == 8)  { BOTTOM =  39; TOP =  80; EMPTY = 1; printf(92,04, 1, 1,EIGHTY[0]);}
	if (LIFE == 9)  { BOTTOM =  29; TOP =  90; EMPTY = 1; printf(92,04, 1, 1,NINETY[0]);}
	if (LIFE >= 10) { BOTTOM =  20; TOP = 100; EMPTY = 1; printf(83,04, 1, 1,HUNDRED[0]);}
		rect_oled(BOTTOM,25,TOP,25,EMPTY,1);
		rect_oled(20,25,100,25,0,1);
		rect_oled(14,28,6,19,0,1);
	}		
}
function TRIGGERS () {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(21,49,0,1,L2_[0]);
		printf(75,49,0,1,R2_[0]);
		printf(22,10,0,1,PRESS_A_BUTTON[0]);	
	if (get_ival(TRIGGERL)) {
		ACTUALTL = abs(get_val(TRIGGERL));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(TRIGGERR)) {
		ACTUALTR = abs(get_val(TRIGGERR));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
}
function DIGITAL () {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(22,10,0,1,PRESS_A_BUTTON[0]);	
	if (BUMPERS == TRUE) {
		printf(21,49,0,1,L1_[0]);
		printf(75,49,0,1,R1_[0]);
		DIGITALL = L1;
		DIGITALR = R1;
	if (get_ival(L1)) {
		ACTUALTL = abs(get_val(DIGITALL));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(R1)) {
		ACTUALTR = abs(get_val(DIGITALR));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
}
	if (STICKS == TRUE) {
		printf(75,49,0,1,R3_[0]);
		printf(21,49,0,1,L3_[0]);
		DIGITALL = L3;
		DIGITALR = R3;
	if (get_ival(L3)) {
		ACTUALTL = abs(get_val(DIGITALL));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(R3)) {
		ACTUALTR = abs(get_val(DIGITALR));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
}
	if (DPADUD == TRUE) {
		printf(75,49,0,1,DOWN_[0]);
		printf(25,49,0,1,UP_[0]);
		DIGITALL = UP;
		DIGITALR = DOWN;
	if (get_ival(UP)) {
		ACTUALTL = abs(get_val(DIGITALL));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(DOWN)) {
		ACTUALTR = abs(get_val(DIGITALR));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
}
	if (DPADLR == TRUE) {
		printf(75,49,0,1,RIGHT_[0]);
		printf(21,49,0,1,LEFT_[0]);
		DIGITALL = LEFT;
		DIGITALR = RIGHT;
	if (get_ival(LEFT)) {
		ACTUALTL = abs(get_val(DIGITALL));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(RIGHT)) {
		ACTUALTR = abs(get_val(DIGITALR));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
}
	if (FACE == TRUE) {
		printf(23,49,0,1,FACE_[0]);
	if (get_ival(TOUCH)) {
		printf(10,29,0,1,TOUCH_[0]);
		ACTUALTL = abs(get_val(TOUCH));
		DIGITSIZE = 1;
		DIGITX = 85;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	else if (get_ival(TRIANGLE)) {
		printf(10,29,0,1,TRIANGLE_[0]);
		ACTUALTL = abs(get_val(TRIANGLE));
		DIGITSIZE = 1;
		DIGITX = 85;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	else if (get_ival(SQUARE)) {
		printf(16,29,0,1,SQUARE_[0]);
		ACTUALTL = abs(get_val(SQUARE));
		DIGITSIZE = 1;
		DIGITX = 85;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	else if (get_ival(CROSS)) {
		printf(19,29,0,1,CROSS_[0]);
		ACTUALTL = abs(get_val(CROSS));
		DIGITSIZE = 1;
		DIGITX = 85;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	else if (get_ival(CIRCLE)) {
		printf(16,29,0,1,CIRCLE_[0]);
		ACTUALTL = abs(get_val(CIRCLE));
		DIGITSIZE1 = 1;
		DIGITX = 85;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
		}
	}
}
function ANALOGUE ()  {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		line_oled(65,22,65,44,1,1);
		printf(16,10,0,1,PRESS_A_STICK[0]);	
	if (LEFT_ANALOGUE) {
		printf(30, 49, 0, 1,LX_[0]);
		printf(84,49,0,1,LY_[0]);
	if (get_ival(ANALOGUELX)) {
		ACTUALTL = (get_val(ANALOGUELX));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(ANALOGUELY)) {
		ACTUALTR = (get_val(ANALOGUELY));
		DIGITSIZE1 = 1;
		DIGITX1 = 72;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}

}
	if (RIGHT_ANALOGUE) {
		printf(30,49,0,1,RX_[0]);
		printf(84,49,0,1,RY_[0]);
	if (get_ival(ANALOGUERX)) {
		ACTUALTL = (get_val(ANALOGUERX));
		DIGITSIZE = 1;
		DIGITX = 20;
		DIGITY = 25;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(ANALOGUERY)) {
		ACTUALTR = (get_val(ANALOGUERY));
		DIGITSIZE1 = 1;
		DIGITX1 = 75;
		DIGITY1 = 25;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
		}

	}
}
function MANUALLED() {		
		cls_oled(0);
    	rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(27,10,0,1,ADJUST_LED[0]);
    	printf(15,49,0,1,RED_LED[0]);
		printf(44,49,0,1,GREEN_LED[0]);
		printf(87,49,0,1,BLUE_LED[0]);
    	DIGITX = 15;
		DIGITY = 29;
		DIGITSIZE = 0;
		EDITNUMBER(REDLED,find_digits(REDLED));
    	DIGITX1 = 53;
		DIGITY1 = 29;
		DIGITSIZE1 = 0;
		EDITNUMBER1(GREENLED,NUMBER(GREENLED));
    	DIGITX2 = 91;
		DIGITY2 = 29;
		DIGITSIZE2 = 0;
		EDITNUMBER2(BLUELED,NUMBER2(BLUELED));
    	set_rgb(REDLED,GREENLED,BLUELED);
}
function TOUCHPAD ()  {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(16,10,0,1,TOUCH_THE_PAD[0]);	
	if (FINGER1T == TRUE) {
		printf(25,49,0,1,FINGER1X_[0]);
		printf(96,49,0,1,FINGER1Y_[0]);
		printf(42,49,0,1,FINGER1_[0]);
	if (get_ival(FINGER1X)) {
		ACTUALTL = (get_val(FINGER1X));
		DIGITX = 15;
		DIGITY = 30;
		DIGITSIZE = 0;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(FINGER1Y)) {
		ACTUALTR = (get_val(FINGER1Y));
		DIGITX1 = 90;
		DIGITY1 = 30;
		DIGITSIZE1 = 0;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
	if (get_ival(FINGER1)) {
		ACTUALTRR = (get_val(FINGER1));
		DIGITX2 = 55;
		DIGITY2 = 30;
		DIGITSIZE2 = 0;
		EDITNUMBER2(ACTUALTRR,NUMBER2(ACTUALTRR));
		}
	}
	if (FINGER2T == TRUE) {
		printf(25,49,0,1,FINGER2X_[0]);
		printf(96,49,0,1,FINGER2Y_[0]);
		printf(42,49,0,1,FINGER2_[0]);
	if (get_ival(FINGER2X)) {
		ACTUALTL = (get_val(FINGER2X));
		DIGITX = 15;
		DIGITY = 30;
		DIGITSIZE = 0;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(FINGER2Y)) {
		ACTUALTR = (get_val(FINGER2Y));
		DIGITX1 = 90;
		DIGITY1 = 30;
		DIGITSIZE1 = 0;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
	if (get_ival(FINGER2)) {
		ACTUALTRR = (get_val(FINGER2));
		DIGITX2 = 55;
		DIGITY2 = 30;
		DIGITSIZE2 = 0;
		EDITNUMBER2(ACTUALTRR,NUMBER2(ACTUALTRR));
		}
	}
}
function GYRO ()  {
		cls_oled(0);
		rect_oled(1,1,127,63,0,1);
		rect_oled(4,3,121,59,0,1);
		line_oled(124,22,4,22,1,1);
		line_oled(124,44,4,44,1,1);
		printf(21,10,0,1,TILT_THE_PAD[0]);	
	if (GYRO == TRUE) {
		printf(08,49,0,1,GYROX_[0]);
		printf(87,49,0,1,GYROY_[0]);
		printf(48,49,0,1,GYROZ_[0]);
	if (get_ival(GYROX)) {
		ACTUALTL = (get_val(GYROX));
		DIGITX = 20;
		DIGITY = 30;
		DIGITSIZE = 0;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(GYROY)) {
		ACTUALTR = (get_val(GYROY));
		DIGITX1 = 94;
		DIGITY1 = 30;
		DIGITSIZE1 = 0;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
	if (get_ival(GYROZ)) {
		ACTUALTRR = (get_val(GYROZ));
		DIGITX2 = 58;
		DIGITY2 = 30;
		DIGITSIZE2 = 0;
		EDITNUMBER2(ACTUALTRR,NUMBER2(ACTUALTRR));
		}
	}
	if (ACC == TRUE) {
		printf(10,49,0,1,ACCX_[0]);
		printf(90,49,0,1,ACCY_[0]);
		printf(50,49,0,1,ACCZ_[0]);
	if (get_ival(ACCX)) {
		ACTUALTL = (get_val(ACCX));
		DIGITX = 20;
		DIGITY = 30;
		DIGITSIZE = 0;
		EDITNUMBER(ACTUALTL,find_digits(ACTUALTL));
	}
	if (get_ival(ACCY)) {
		ACTUALTR = (get_val(ACCY));
		DIGITX1 = 94;
		DIGITY1 = 30;
		DIGITSIZE1 = 0;
		EDITNUMBER1(ACTUALTR,NUMBER(ACTUALTR));
	}
	if (get_ival(ACCZ)) {
		ACTUALTRR = (get_val(ACCZ));
		DIGITX2 = 55;
		DIGITY2 = 30;
		DIGITSIZE2 = 0;
		EDITNUMBER2(ACTUALTRR,NUMBER2(ACTUALTRR));
		}
	}
}
function EDITNUMBER(DIGIT,FDIGIT) {
	if(DIGIT < 0) {
		putc_oled(NO,NEG);
		NO += 1;
		DIGIT = abs(DIGIT);
		COUNT = 1;
	}
	else COUNT = 0;
	if(FDIGIT == 4) {
		putc_oled(NO,REFERENCE[DIGIT / 1000]);
		DIGIT = DIGIT % 1000;
		NO +=  1;
	}
	if(FDIGIT >= 3) {
		putc_oled(NO,REFERENCE[DIGIT / 100]);
		DIGIT = DIGIT % 100;
		NO +=  1;
	}
	if(FDIGIT >= 2) {
		putc_oled(NO,REFERENCE[DIGIT / 10]);
		DIGIT = DIGIT % 10;
		NO += 1;
	}
		putc_oled(NO,REFERENCE[DIGIT]);
		puts_oled(DIGITX,DIGITY,DIGITSIZE,NO,1);    
		NO = 1;
	
		putc_oled(NO,REFERENCE[DIGIT]);
} 
function find_digits(f_num) {
    	f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
} 
function EDITNUMBER1(DIGIT,FDIGIT) {
	if(DIGIT < 0) {
			putc_oled(NO,NEG);
			NO += 1;
			DIGIT = abs(DIGIT);
			COUNT = 1;
		}
	else COUNT = 0;
	if(FDIGIT == 4) {
			putc_oled(NO,REFERENCE[DIGIT / 1000]);
			DIGIT = DIGIT % 1000;
			NO +=  1;
		}
	if(FDIGIT >= 3) {
			putc_oled(NO,REFERENCE[DIGIT / 100]);
			DIGIT = DIGIT % 100;
			NO +=  1;
		}
	if(FDIGIT >= 2) {
			putc_oled(NO,REFERENCE[DIGIT / 10]);
			DIGIT = DIGIT % 10;
			NO += 1;
		}
			putc_oled(NO,REFERENCE[DIGIT]);
			puts_oled(DIGITX1,DIGITY1,DIGITSIZE1,NO,1);    
			NO = 1;
} 
	function NUMBER(NUM) {
    		NUM = abs(NUM);
    if(NUM / 1000 > 0) return 4;
    if(NUM /  100 > 0) return 3;
    if(NUM /   10 > 0) return 2;
    return 1;
}    
function EDITNUMBER2(DIGIT,FDIGIT) {
	if(DIGIT < 0) {
			putc_oled(NO,NEG);
			NO += 1;
			DIGIT = abs(DIGIT);
			COUNT = 1;
		}
	else COUNT = 0;
	if(FDIGIT == 4) {
			putc_oled(NO,REFERENCE[DIGIT / 1000]);
			DIGIT = DIGIT % 1000;
			NO +=  1;
		}
	if(FDIGIT >= 3) {
			putc_oled(NO,REFERENCE[DIGIT / 100]);
			DIGIT = DIGIT % 100;
			NO +=  1;
		}
	if(FDIGIT >= 2) {
			putc_oled(NO,REFERENCE[DIGIT / 10]);
			DIGIT = DIGIT % 10;
			NO += 1;
		}
			putc_oled(NO,REFERENCE[DIGIT]);
			puts_oled(DIGITX2,DIGITY2,DIGITSIZE2,NO,1);    
			NO = 1;
} 
	function NUMBER2(NUM) {
    		NUM = abs(NUM);
    if(NUM / 1000 > 0) return 4;
    if(NUM /  100 > 0) return 3;
    if(NUM /   10 > 0) return 2;
    return 1;
} 
function center_x(f_chars,f_font) {
    return 
    	(OLED_W / 2) - ((f_chars * FONT_STATS[f_font][FONT_W]) / 2);
}	