/*
 _______            ______           ________ __                ________ __  ______  __       ________          _______            
|       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \           
| ▓▓▓▓▓▓▓\ ______ |  ▓▓▓▓▓▓\________ \▓▓▓▓▓▓▓▓ ▓▓____   ______ | ▓▓▓▓▓▓▓▓\▓▓  ▓▓▓▓▓▓\ ▓▓____  \▓▓▓▓▓▓▓▓ ______ | ▓▓▓▓▓▓▓\          
| ▓▓  | ▓▓/      \| ▓▓ __\▓▓        \  | ▓▓  | ▓▓    \ /      \| ▓▓__   |  \ ▓▓ __\▓▓ ▓▓    \   | ▓▓   /      \| ▓▓__| ▓▓          
| ▓▓  | ▓▓  ▓▓▓▓▓▓\ ▓▓|    \\▓▓▓▓▓▓▓▓  | ▓▓  | ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓  \  | ▓▓ ▓▓|    \ ▓▓▓▓▓▓▓\  | ▓▓  |  ▓▓▓▓▓▓\ ▓▓    ▓▓          
| ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ \▓▓▓▓ /    ▓▓   | ▓▓  | ▓▓  | ▓▓ ▓▓    ▓▓ ▓▓▓▓▓  | ▓▓ ▓▓ \▓▓▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓    ▓▓ ▓▓▓▓▓▓▓\          
| ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓__| ▓▓/  ▓▓▓▓_   | ▓▓  | ▓▓  | ▓▓ ▓▓▓▓▓▓▓▓ ▓▓     | ▓▓ ▓▓__| ▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓▓▓▓▓▓▓ ▓▓  | ▓▓          
| ▓▓    ▓▓\▓▓    ▓▓\▓▓    ▓▓  ▓▓    \  | ▓▓  | ▓▓  | ▓▓\▓▓     \ ▓▓     | ▓▓\▓▓    ▓▓ ▓▓  | ▓▓  | ▓▓   \▓▓     \ ▓▓  | ▓▓          
 \▓▓▓▓▓▓▓  \▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓   \▓▓   \▓▓   \▓▓ \▓▓▓▓▓▓▓\▓▓      \▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓   \▓▓    \▓▓▓▓▓▓▓\▓▓   \▓▓          
                                                                                                                            
==============================================================================================================================
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦>  DoGzTheFiGhTeR's MOUSE FINE TUNING SETUP V1.00   <¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ ..September 2020.. Created..DoGz
==============================================================================================================================

¦> SAVE CURRENT MOUSE SETTINGS == LT/L2 && XBOX/PS OR KEYBOARD > INSERT (INS)

¦> CONTROLLER MOUSE TOGGLE (USING DPAD TO ADJUST ONCE ENABLED **ONLY ONE ACTIVE TO ADJUST BY CONTROLLER**)
¦> ACCELERATION TOGGLE == LT & Y  (HOLD 350Ms) > RY = DPAD UP (+) & DPAD DOWN (-) < || > RX = DPAD LEFT (-) & DPAD RIGHT (+) <
¦> SMOOTHNESS TOGGLE   == LT & A  (HOLD 350Ms) > RY = DPAD UP (+) & DPAD DOWN (-) < || > RX = DPAD LEFT (-) & DPAD RIGHT (+) <
¦> DEADZONE TOGGLE     == LT & X  (HOLD 350Ms) > RY = DPAD UP (+) & DPAD DOWN (-) < || > RX = DPAD LEFT (-) & DPAD RIGHT (+) <
¦> STICKIZE TOGGLE     == LT & B  (HOLD 350Ms) > RY = DPAD UP (+) & DPAD DOWN (-) < || > RX = DPAD LEFT (-) & DPAD RIGHT (+) <
¦> SENSITIVITY TOGGLE  == LT & LS (HOLD 350Ms) > DPAD RIGHT (+) & LEFT (-) <
¦> ADS RATIO TOGGLE    == LT & RS (HOLD 350Ms) > DPAD UP    (+) & DOWN (-) <

¦> KEYBOARD SETTINGS ADJUSMENT (ALWAYS ACTIVE)
¦> ACCELERATION ADJUST == > RX = KEYBOARD F1   (-) & KEYBOARD F2   (+) < || > RY = KEYBOARD F3   (-) & KEYBOARD F4   (+) <
¦> SMOOTHNESS ADJUST   == > RX = KEYBOARD F5   (-) & KEYBOARD F6   (+) < || > RY = KEYBOARD F7   (-) & KEYBOARD F8   (+) < 
¦> DEADZONE ADJUST     == > RX = KEYBOARD F9   (-) & KEYBOARD F10  (+) < || > RY = KEYBOARD F11  (-) & KEYBOARD F12  (+) <
¦> STICKIZE ADJUST     == > RX = KEYBOARD NUM4 (-) & KEYBOARD NUM6 (+) < || > RY = KEYBOARD NUM2 (-) & KEYBOARD NUM8 (+) <
¦> SENSITIVITY ADJUST  == > KEYBOARD LEFT ARROW (-)  & KEYBOARD RIGHT ARROW (+) <
¦> ADS RATIO ADJUST    == > KEYBOARD DOWN ARROW (-)  & KEYBOARD UP ARROW    (+) <

==============================================================================================================================
    KEYBOARD QUICK GUIDE 
==============================================================================================================================

¦> ACCELERATION (1-200)
- F1  = ACCELERATION X AXIS (DECREASE VALUE)
- F2  = ACCELERATION X AXIS (INCREASE VALUE)
- F3  = ACCELERATION Y AXIS (DECREASE VALUE)
- F4  = ACCELERATION Y AXIS (INCREASE VALUE)

¦> SMOOTHNESS (1-99)
- F5  = SMOOTHNESS X AXIS 	(DECREASE VALUE)
- F6  = SMOOTHNESS X AXIS 	(INCREASE VALUE)
- F7  = SMOOTHNESS Y AXIS 	(DECREASE VALUE)
- F8  = SMOOTHNESS Y AXIS 	(INCREASE VALUE)

¦> DEADZONE (1-100)
- F9  = DEADZONE X AXIS    	(DECREASE VALUE)
- F10 = DEADZONE X AXIS  	(INCREASE VALUE)
- F11 = DEADZONE Y AXIS   	(DECREASE VALUE)
- F12 = DEADZONE Y AXIS   	(INCREASE VALUE)

¦> STICKIZE (100-142)
- NUM4 = STICKIZE X AXIS 	(DECREASE VALUE)
- NUM6 = STICKIZE X AXIS 	(INCREASE VALUE)
- NUM2 = STICKIZE Y AXIS 	(DECREASE VALUE)
- NUM8 = STICKIZE Y AXIS 	(INCREASE VALUE)

¦> SENSITIVITY (1-100)
== > KEYBOARD LEFT ARROW 	(DECREASE VALUE)
== > KEYBOARD RIGHT ARROW 	(INCREASE VALUE)

¦> ADS GAIN RATIO (1-200)
== > KEYBOARD DOWN ARROW 	(DECREASE VALUE)
== > KEYBOARD UP ARROW 		(INCREASE VALUE)

== > EXIT QUICK EDIT MENU  = KEYBOARD ESCAPE (ESC)
== > SAVE CURRENT SETTINGS = KEYBOARD INSERT (INS)

¦> Make a note of the quick edit keys. Saved script to slot and select, Then enter game with a mouse connected.
¦> You must either use a Keyboard or controller to adjust .
¦> Tune on the fly using hotkeys shown below or with a controller, You can save settings to the Zen if required.
¦> When you open zen mouse settings via Zen Studio, Values that you have set or saved while tuning will show.
¦> Finilize & Export settings into a new profile referencing the game you have just setup.

(Be sure no Keys/Buttons conflict with hotkeys while setting up)
Eg.. Keyboard UP/Controller D-Pad UP when assigned to the same output the press will be seen on both OLED Buttons on the Zen. 
*/

const uint8 Font_Size [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }}; 
const uint8 Number_Value [] = {48,49,50,51,52,53,54,55,56,57};	

const string A    = " ACCELERATION RX";
const string B    = " ACCELERATION RY";
const string C    = "  SMOOTHNESS RX";
const string D    = "  SMOOTHNESS RY";
const string E    = "   DEADZONE RX";
const string F    = "   DEADZONE_RY";
const string G    = "   STICKIZE RX";
const string H    = "   STICKIZE RY";
const string I    = "   SENSITIVITY";
const string J    = "  ADS GAIN RATIO";
const string F1   = " F1";
const string F2   = " F2";
const string F3   = " F3";
const string F4   = " F4";
const string F5   = " F5";
const string F6   = " F6";
const string F7   = " F7";
const string F8   = " F8";
const string F9   = " F9";
const string F10  = "F10";
const string F11  = "F11";
const string F12  = "F12";
const string NUM2 = "NUM2";
const string NUM8 = "NUM8";
const string NUM4 = "NUM4";
const string NUM6 = "NUM6";
const string KEY  = "KEY";

int ACCELERATION_RX;
int ACCELERATION_RY;
int SMOOTHNESS_RX;
int SMOOTHNESS_RY;
int DEADZONE_RX;
int DEADZONE_RY;
int STICKIZE_RX;
int STICKIZE_RY;
int SENSITIVITY;
int ADS_RATIO;

int ACCELERATION;
int SMOOTHNESS;
int DEADZONE;
int STICKIZE;
int SENSE;
int ADS;

int Print_L;
int Print_Y;
int Print_X;
int C_Neg;
int C_POS;
int K_Neg;
int K_Pos;
int A_Arrow;
int Position_One;
int Position_Two;
int Position_Three;
int Position_Four;
int Print_Name_Label;
int Print_Setting_Value;
int Menu_Saver_Counter;
int Counter;
int Saver_Count;
int Position_Character;
int Mod_Toggle_Switch = 1;
int Key_Toggle_Switch = 1;
int Number_Add = 1;
int Active_K;
int Release_K;
int Key_Buffer;
int Key_Array[6];

//======================================================================================
//             INITIALIZATION                                              
//======================================================================================
                                             
init {       
   
   ACCELERATION_RX = get_pvar(SPVAR_1 ,   1, 200, 100);
   ACCELERATION_RY = get_pvar(SPVAR_2 ,   1, 200, 100);
   SMOOTHNESS_RX   = get_pvar(SPVAR_3 ,   1,  99,  50);
   SMOOTHNESS_RY   = get_pvar(SPVAR_4 ,   1,  99,  50);
   DEADZONE_RX     = get_pvar(SPVAR_5 ,   1, 100,  20);
   DEADZONE_RY     = get_pvar(SPVAR_6 ,   1, 100,  20);
   STICKIZE_RX     = get_pvar(SPVAR_7 , 100, 142, 142);
   STICKIZE_RY     = get_pvar(SPVAR_8 , 100, 142, 142);
   SENSITIVITY     = get_pvar(SPVAR_9 ,   1, 100,  50);
   ADS_RATIO       = get_pvar(SPVAR_10,   1, 200, 100);

}

//======================================================================================
//            MAIN SCRIPT                                              
//======================================================================================

main {   
           
    	Key_Monitor(0,0,0,0);
		Mouse_Tune();

/*            
============================================================================================================================
    SAVE MK SETTINGS (PVAR) - LT/L2 && XBOX/PS Or Keyboard Insert
============================================================================================================================
*/
	
	if ((get_ival(XB1_LT) && event_press(XB1_XBOX)) || (Event_press(KEY_INSERT))) {  // INSERT \\ = SAVE SETTINGS
		Save ();
	}
	
/*
============================================================================================================================
    CONTROLLER MK TOGGLES - LT/L2 && (BUTTON) - HOLD 350 Ms - Or Keyboard On The Fly Key Toggles
============================================================================================================================
*/
 
	if (get_ival(XB1_LT) && get_ival(XB1_Y) && get_ptime(XB1_Y) == 350) { 			// LT & Y \\ = ACCELERATION TOGGLE
		Mod_Switch_Toggle(Mod_Toggle_Switch,0,0,0,0,0);
	}
	
	if (get_ival(XB1_LT) && get_ival(XB1_A) && get_ptime(XB1_A) == 350) { 			// LT & A \\ = SMOOTHNESS TOGGLE
		Mod_Switch_Toggle(0,Mod_Toggle_Switch,0,0,0,0);
	}	
	
	if (get_ival(XB1_LT) && get_ival(XB1_X) && get_ptime(XB1_X) == 350) { 			// LT & X \\ = DEADZONE TOGGLE
		Mod_Switch_Toggle(0,0,Mod_Toggle_Switch,0,0,0);
	}
	
	if (get_ival(XB1_LT) && get_ival(XB1_B) && get_ptime(XB1_B) == 350) { 			// LT & B \\ = STICKIZE TOGGLE
		Mod_Switch_Toggle(0,0,0,Mod_Toggle_Switch,0,0);
	}		
	
	if (get_ival(XB1_LT) && get_ival(XB1_LS) && get_ptime(XB1_LS) == 350) { 		// LT & LS \\ = SENSITIVITY TOGGLE
		Mod_Switch_Toggle(0,0,0,0,Mod_Toggle_Switch,0);
	}
	
	if (get_ival(XB1_LT) && get_ival(XB1_RS) && get_ptime(XB1_RS) == 350) { 		// LT & RS \\ = ADS RATIO TOGGLE
		Mod_Switch_Toggle(0,0,0,0,0,Mod_Toggle_Switch);
	}	
	
/*	
============================================================================================================================
    MK SETUP - DPAD OR SPECIFIED KEYBOARD KEYS (KEYBOARD KEYS ALWAYS ACTIVE & TOGGLES ACTIVE MOD) 
============================================================================================================================
*/

	// Accelaration X AXIS
	if ((ACCELERATION && event_press(XB1_RIGHT))|| (Event_press(KEY_F2))) {   		// + \\ F2 = ACCELERATION X AXIS
		ACCELERATION_RX += 1;
		
		if (ACCELERATION_RX >= 200) ACCELERATION_RX = 200;
			Saver_Count = 1;
			
			if (event_press(XB1_RIGHT)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(133,F1[0],134,F2[0],A[0],ACCELERATION_RX);
			}
				
				if (Event_press(KEY_F2)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(133,F1[0],134,F2[0],A[0],ACCELERATION_RX);
					Quick_Toggle_Switch(Key_Toggle_Switch,0,0,0,0,0);
				}
			}
	
	if ((ACCELERATION && event_press(XB1_LEFT)) || (Event_press(KEY_F1))) { 		// - \\ F1 = ACCELERATION X AXIS
		ACCELERATION_RX -= 1;
		
		if (ACCELERATION_RX <= 1) ACCELERATION_RX = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_LEFT)) {	
				Print_X = !Print_X;
				C_Neg = 1;
				X(133,F1[0],134,F2[0],A[0],ACCELERATION_RX);
			}
				
				if (Event_press(KEY_F1)) {	
					Print_X = !Print_X;
					K_Neg = 1; 
					X(133,F1[0],134,F2[0],A[0],ACCELERATION_RX);
					Quick_Toggle_Switch(Key_Toggle_Switch,0,0,0,0,0);
				}
			}
	
	
	// Accelaration Y AXIS
	if ((ACCELERATION && event_press(XB1_UP)) || (Event_press(KEY_F4))) {   		// + \\ F4 = ACCELERATION Y AXIS
		ACCELERATION_RY += 1;
		
		if (ACCELERATION_RY >= 200) ACCELERATION_RY = 200;	
			Saver_Count = 1;
			
			if (event_press(XB1_UP)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(132,F3[0],131,F4[0],B[0],ACCELERATION_RY);
			}
				
				if (Event_press(KEY_F4)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(132,F3[0],131,F4[0],B[0],ACCELERATION_RY);
					Quick_Toggle_Switch(Key_Toggle_Switch,0,0,0,0,0);
				}
			}
	
	if ((ACCELERATION && event_press(XB1_DOWN)) || (Event_press(KEY_F3))) { 		// - \\ F3 = ACCELERATION Y AXIS
		ACCELERATION_RY -= 1;
		
		if (ACCELERATION_RY <= 1) ACCELERATION_RY = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_DOWN)) {	
				Print_X = !Print_X;
				C_Neg = 1;
				X(132,F3[0],131,F4[0],B[0],ACCELERATION_RY);
			}
				
				if (Event_press(KEY_F3)) {	
					Print_X = !Print_X;
					K_Neg = 1; 
					X(132,F3[0],131,F4[0],B[0],ACCELERATION_RY);
					Quick_Toggle_Switch(Key_Toggle_Switch,0,0,0,0,0);
				}
			}
	
	
	// SMOOTHNESS X AXIS
	if ((SMOOTHNESS && event_press(XB1_RIGHT)) || (Event_press(KEY_F6))) {   		// + \\ F6 = SMOOTHNESS X AXIS
		SMOOTHNESS_RX += 1;
		
		if (SMOOTHNESS_RX >= 99) SMOOTHNESS_RX = 99;	
			Saver_Count = 1;
			
			if (event_press(XB1_RIGHT)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(133,F5[0],134,F6[0],C[0],SMOOTHNESS_RX);
			}
				
				if (Event_press(KEY_F6)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(133,F5[0],134,F6[0],C[0],SMOOTHNESS_RX);
					Quick_Toggle_Switch(0,Key_Toggle_Switch,0,0,0,0);
				}
			}
	
	if ((SMOOTHNESS && event_press(XB1_LEFT)) || (Event_press(KEY_F5))) { 			// - \\ F5 = SMOOTHNESS X AXIS
		SMOOTHNESS_RX -= 1;
		
		if (SMOOTHNESS_RX <= 1) SMOOTHNESS_RX = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_LEFT)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(133,F5[0],134,F6[0],C[0],SMOOTHNESS_RX);
			}
				
				if (Event_press(KEY_F5)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(133,F5[0],134,F6[0],C[0],SMOOTHNESS_RX);
					Quick_Toggle_Switch(0,Key_Toggle_Switch,0,0,0,0);
				}
			}
	
	
	// SMOOTHNESS Y AXIS
	if ((SMOOTHNESS && event_press(XB1_UP)) || (Event_press(KEY_F8))) {   			// + \\ F8 = SMOOTHNESS Y AXIS
		SMOOTHNESS_RY += 1;
		
		if (SMOOTHNESS_RY >= 99) SMOOTHNESS_RY = 99;	
			Saver_Count = 1;
			
			if (event_press(XB1_UP)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(132,F7[0],131,F8[0],D[0],SMOOTHNESS_RY);
			}
				
				if (Event_press(KEY_F8)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(132,F7[0],131,F8[0],D[0],SMOOTHNESS_RY);
					Quick_Toggle_Switch(0,Key_Toggle_Switch,0,0,0,0);
				}
			}
	
	if ((SMOOTHNESS && event_press(XB1_DOWN)) || (Event_press(KEY_F7))) { 			// - \\ F7 = SMOOTHNESS Y AXIS
		SMOOTHNESS_RY -= 1;
		
		if (SMOOTHNESS_RY <= 1) SMOOTHNESS_RY = 1;
			Saver_Count = 1;
			
			if (event_press(XB1_DOWN)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(132,F7[0],131,F8[0],D[0],SMOOTHNESS_RY);
			}
				
				if (Event_press(KEY_F7)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(132,F7[0],131,F8[0],D[0],SMOOTHNESS_RY);
					Quick_Toggle_Switch(0,Key_Toggle_Switch,0,0,0,0);
				}
			}
	
	
	// DEADZONE X AXIS
	if ((DEADZONE && event_press(XB1_RIGHT)) || (Event_press(KEY_F10))) {   		// + \\ F10 = DEADZONE X AXIS
		DEADZONE_RX += 1;
		
		if (DEADZONE_RX >= 100) DEADZONE_RX = 100;	
			Saver_Count = 1;
			
			if (event_press(XB1_RIGHT)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(133,F9[0],134,F10[0],E[0],DEADZONE_RX);
			}
				
				if (Event_press(KEY_F10)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(133,F9[0],134,F10[0],E[0],DEADZONE_RX);
					Quick_Toggle_Switch(0,0,Key_Toggle_Switch,0,0,0);
				}
			}
	
	if ((DEADZONE && event_press(XB1_LEFT)) || (Event_press(KEY_F9))) { 			// - \\ F9 = DEADZONE X AXIS
		DEADZONE_RX -= 1;
		
		if (DEADZONE_RX <= 1) DEADZONE_RX = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_LEFT)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(133,F9[0],134,F10[0],E[0],DEADZONE_RX);
			}
				
				if (Event_press(KEY_F9)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(133,F9[0],134,F10[0],E[0],DEADZONE_RX);
					Quick_Toggle_Switch(0,0,Key_Toggle_Switch,0,0,0);
				}
			}
	
	// DEADZONE Y AXIS
	if ((DEADZONE && event_press(XB1_UP)) || (Event_press(KEY_F12))) {   			// + \\ F12 = DEADZONE Y AXIS
		DEADZONE_RY += 1;
		
		if (DEADZONE_RY >= 100) DEADZONE_RY = 100;	
			Saver_Count = 1;
			
			if (event_press(XB1_UP)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(132,F11[0],131,F12[0],F[0],DEADZONE_RY);
			}
				
				if (Event_press(KEY_F12)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(132,F11[0],131,F12[0],F[0],DEADZONE_RY);
					Quick_Toggle_Switch(0,0,Key_Toggle_Switch,0,0,0);
				}
			}
	
	if ((DEADZONE && event_press(XB1_DOWN)) || (Event_press(KEY_F11))) { 			// - \\ F11 = DEADZONE Y AXIS
		DEADZONE_RY -= 1;
		
		if (DEADZONE_RY <= 1) DEADZONE_RY = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_DOWN)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(132,F11[0],131,F12[0],F[0],DEADZONE_RY);
			}
				
				if (Event_press(KEY_F11)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(132,F11[0],131,F12[0],F[0],DEADZONE_RY);
					Quick_Toggle_Switch(0,0,Key_Toggle_Switch,0,0,0);
				}
			}
		
	
	// STICKIZE X AXIS
	if ((STICKIZE && event_press(XB1_RIGHT)) || (Event_press(KEY_NUM6))) {   		// + \\ NUM6 = STICKIZE X AXIS
		STICKIZE_RX += 1;
		
		if (STICKIZE_RX >= 142) STICKIZE_RX = 142;	
			Saver_Count = 1;
			
			if (event_press(XB1_RIGHT)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(133,NUM4[0],134,NUM6[0],G[0],STICKIZE_RX);
			}
				
				if (Event_press(KEY_NUM6)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(133,NUM4[0],134,NUM6[0],G[0],STICKIZE_RX);
					Quick_Toggle_Switch(0,0,0,Key_Toggle_Switch,0,0);
				}
			}
	
	if ((STICKIZE && event_press(XB1_LEFT)) || (Event_press(KEY_NUM4))) { 			// - \\ NUM4 = STICKIZE X AXIS
		STICKIZE_RX -= 1;
		
		if (STICKIZE_RX <= 100) STICKIZE_RX = 100;	
			Saver_Count = 1;
			
			if (event_press(XB1_LEFT)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(133,NUM4[0],134,NUM6[0],G[0],STICKIZE_RX);
			}
				
				if (Event_press(KEY_NUM4)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(133,NUM4[0],134,NUM6[0],G[0],STICKIZE_RX);
					Quick_Toggle_Switch(0,0,0,Key_Toggle_Switch,0,0);
				}
			}
	
	
	// STICKIZE Y AXIS
	if ((STICKIZE && event_press(XB1_UP)) || (Event_press(KEY_NUM8))) {   			// + \\ NUM8 = STICKIZE Y AXIS
		STICKIZE_RY += 1;
		
		if (STICKIZE_RY >= 142) STICKIZE_RY = 142;	
			Saver_Count = 1;
			
			if (event_press(XB1_UP)) {	
				Print_X = !Print_X;
				C_POS = 1; 
				X(132,NUM2[0],131,NUM8[0],H[0],STICKIZE_RY);
			}
				
				if (Event_press(KEY_NUM8)) {
					Print_X = !Print_X;
					K_Pos = 1; 
					X(132,NUM2[0],131,NUM8[0],H[0],STICKIZE_RY);
					Quick_Toggle_Switch(0,0,0,Key_Toggle_Switch,0,0);
				}
			}
	
	if ((STICKIZE && event_press(XB1_DOWN)) || (Event_press(KEY_NUM2))) { 			// - \\ NUM2 = STICKIZE Y AXIS
		STICKIZE_RY -= 1;
		
		if (STICKIZE_RY <= 100) STICKIZE_RY = 100;	
			Saver_Count = 1;
			
			if (event_press(XB1_DOWN)) {	
				Print_X = !Print_X;
				C_Neg = 1; 
				X(132,NUM2[0],131,NUM8[0],H[0],STICKIZE_RY);
			}
				
				if (Event_press(KEY_NUM2)) {
					Print_X = !Print_X;
					K_Neg = 1; 
					X(132,NUM2[0],131,NUM8[0],H[0],STICKIZE_RY);
					Quick_Toggle_Switch(0,0,0,Key_Toggle_Switch,0,0);
				}
			}
	
	
	// SENSITIVITY X + Y AXIS
	if ((SENSE && event_press(XB1_RIGHT)) || (Event_press(KEY_RIGHT))) {   			// + \\ RIGHT = SENSITIVITY
		SENSITIVITY += 1;
		
		if (SENSITIVITY >= 100) SENSITIVITY = 100;	
			Saver_Count = 1;
			
			if (event_press(XB1_RIGHT)) {	
				A_Arrow = 1;
				Print_X = !Print_X;
				C_POS = 1; 
				X(133,133,134,134,I[0],SENSITIVITY);
			}
				
				if (Event_press(KEY_RIGHT)) {
					A_Arrow = 1; 
					Print_X = !Print_X;
					K_Pos = 1; 
					X(133,133,134,134,I[0],SENSITIVITY);
					Quick_Toggle_Switch(0,0,0,0,Key_Toggle_Switch,0);
				}
			}
	
	if ((SENSE && event_press(XB1_LEFT)) || (Event_press(KEY_LEFT))) { 				// - \\ LEFT = SENSITIVITY
		SENSITIVITY -= 1;
		
		if (SENSITIVITY <= 1) SENSITIVITY = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_LEFT)) {	
				A_Arrow = 1;
				Print_X = !Print_X;
				C_Neg = 1; 
				X(133,133,134,134,I[0],SENSITIVITY);
			}
				
				if (Event_press(KEY_LEFT)) {
					A_Arrow = 1;
					Print_X = !Print_X;
					K_Neg = 1; 
					X(133,133,134,134,I[0],SENSITIVITY);
					Quick_Toggle_Switch(0,0,0,0,Key_Toggle_Switch,0);
				}
			}
	
	
	// ADS_RATIO
	if ((ADS && event_press(XB1_UP)) || (Event_press(KEY_UP))) {   					// + \\ UP = ADS_RATIO
		ADS_RATIO += 1;
		
		if (ADS_RATIO >= 200) ADS_RATIO = 200;	
			Saver_Count = 1;
			
			if (event_press(XB1_UP)) {	
				A_Arrow = 1;
				Print_X = !Print_X;
				C_POS = 1; 
				X(132,132,131,131,J[0],ADS_RATIO);
			}
				
				if (Event_press(KEY_UP)) {
					A_Arrow = 1;
					Print_X = !Print_X;
					K_Pos = 1; 
					X(132,132,131,131,J[0],ADS_RATIO);
					Quick_Toggle_Switch(0,0,0,0,0,Key_Toggle_Switch);
				}
			}
	
	if ((ADS && event_press(XB1_DOWN)) || (Event_press(KEY_DOWN))) { 				// - \\ DOWN = ADS_RATIO
		ADS_RATIO -= 1;
		
		if (ADS_RATIO <= 1) ADS_RATIO = 1;	
			Saver_Count = 1;
			
			if (event_press(XB1_DOWN)) {	
				A_Arrow = 1;
				Print_X = !Print_X;
				C_Neg = 1; 
				X(132,132,131,131,J[0],ADS_RATIO);
			}
				
				if (Event_press(KEY_DOWN)) {
					A_Arrow = 1;
					Print_X = !Print_X;
					K_Neg = 1; 
					X(132,132,131,131,J[0],ADS_RATIO);
					Quick_Toggle_Switch(0,0,0,0,0,Key_Toggle_Switch);
				}
			}
	
/*
============================================================================================================================
    MK SETUP SCREEN SAVER 
============================================================================================================================
*/

	if (Saver_Count) {
		
		Menu_Saver_Counter += get_rtime();
		
		Saver(XB1_UP);   Saver(XB1_DOWN); Saver(XB1_LEFT); Saver(XB1_RIGHT);
		Saver(KEY_F1);   Saver(KEY_F2);   Saver(KEY_F3);   Saver(KEY_F4);
		Saver(KEY_F5);   Saver(KEY_F6);   Saver(KEY_F7);   Saver(KEY_F8);
		Saver(KEY_F9);   Saver(KEY_F10);  Saver(KEY_F11);  Saver(KEY_F12);
		Saver(KEY_UP);   Saver(KEY_DOWN); Saver(KEY_LEFT); Saver(KEY_F12);
		Saver(KEY_NUM8); Saver(KEY_NUM2); Saver(KEY_NUM4); Saver(KEY_NUM6);
	}	
                                                                                                      
 }

/*
============================================================================================================================
    COMBO/FUNCTIONS 
============================================================================================================================
*/

combo Flip {
	
	wait(50);
	Print_Y  = 1;
	Y ();

}

function Mouse_Tune () {

		set_mk(MK_GENERAL,MK_ACCELERATION,ACCELERATION_RX,ACCELERATION_RY);
		set_mk(MK_GENERAL,MK_SMOOTHNESS,SMOOTHNESS_RX,SMOOTHNESS_RY);
		set_mk(MK_GENERAL,MK_DEADZONE,DEADZONE_RX,DEADZONE_RY);
		set_mk(MK_GENERAL,MK_STICKIZE,STICKIZE_RX,STICKIZE_RY);
		set_mk(MK_GENERAL,MK_SENSITIVITY,SENSITIVITY,NOT_USE);
		set_mk(MK_GENERAL,MK_ADS_GAIN_RATIO,ADS_RATIO,NOT_USE);
		
}

function Y () {
		
	if (Print_Y) {
		
		cls_oled(0);
		Fly_Menu(Print_Name_Label,Print_Setting_Value);
		
		putc_oled(1,Position_One);
		puts_oled(13,29,0,1,1);
		
		
		line_oled(11,30,11,37,1,1);
		line_oled(21,30,21,37,1,1);
		line_oled(11,29,13,27,1,1);
		line_oled(11,37,13,39,1,1);
		line_oled(19,27,21,29,1,1);
		line_oled(19,39,21,37,1,1);
		line_oled(13,27,18,27,1,1);
		line_oled(13,39,18,39,1,1);
		
		if (!A_Arrow) {
			rect_oled(1,48,33,14,0,1);
			printf(3,51,0,1,Position_Two); 
		}
			
			else if (A_Arrow) {	
				rect_oled(1,48,33,14,0,1);
				printf(02,51,0,1,KEY[0]);
				putc_oled(1,Position_Two);
				puts_oled(24,50,0,1,1);
			} 
		
				putc_oled(1,Position_Three);
				puts_oled(108,29,0,1,1);
		
		
				line_oled(116,30,116,37,1,1);
				line_oled(106,30,106,37,1,1);
				line_oled(116,29,114,27,1,1);
				line_oled(116,37,114,39,1,1);
				line_oled(108,27,106,29,1,1);
				line_oled(108,39,106,37,1,1);
				line_oled(114,27,108,27,1,1);
				line_oled(114,39,108,39,1,1);
				
				if (!A_Arrow) {
					rect_oled(94,48,33,14,0,1);
					printf(97,51,0,1,Position_Four); 
				}
					
					else if (A_Arrow) {	
						rect_oled(94,48,33,14,0,1);
						printf(96,51,0,1,KEY[0]);
						putc_oled(1,Position_Four);
						puts_oled(118,51,0,1,1);
		
					} 
							Print_Y = 0;
							A_Arrow = 0;
				}
			}

function X (Active_one,Active_Two,Active_Three,Active_Four,Active_Name,Active_Value) {
	
	if (Print_X) {
		
		if (C_Neg) {	
			putc_oled(1,Active_one);
			puts_oled(13,30,0,1,0);
			line_oled(12,30,12,37,1,1);
			line_oled(20,30,20,37,1,1);
			line_oled(12,28,19,28,1,1);
			pixel_oled(12,29,1);
			pixel_oled(20,29,1);
			C_Neg = 0;
		}	
			
			if (K_Neg && !A_Arrow) {	
				rect_oled(1,48,33,14,1,1);
				printf(03,51,0,0,Active_Two);
				K_Neg = 0;
			} 
				
				else if (K_Neg && A_Arrow) {	
					rect_oled(1,48,33,14,1,1);
					printf(02,51,0,0,KEY[0]);
					putc_oled(1,Active_Two);
					puts_oled(24,50,0,1,0);
					K_Neg = 0;
				} 
					
					if (C_POS) {		
						putc_oled(1,Active_Three);
						puts_oled(109,30,0,1,0);
		
						line_oled(115,30,115,37,1,1);
						line_oled(107,30,107,37,1,1);
						line_oled(115,28,109,28,1,1);
						pixel_oled(115,29,1);
						pixel_oled(108,28,1);
						pixel_oled(107,29,1);
						C_POS = 0;
					}
						
						if (K_Pos && !A_Arrow) {		
							rect_oled(94,48,33,14,1,1);
							printf(97,51,0,0,Active_Four); 
							K_Pos = 0;
						}
							
							else if (K_Pos && A_Arrow) {	
								rect_oled(94,48,33,14,1,1);
								printf(96,51,0,0,KEY[0]);
								putc_oled(1,Active_Four);
								puts_oled(118,51,0,1,0);
								K_Pos = 0
							} 
									
									Position_One = Active_one;
									Position_Two = Active_Two;
									Position_Three = Active_Three;
									Position_Four = Active_Four;
									Print_Name_Label = Active_Name;
									Print_Setting_Value = Active_Value;

									combo_run(Flip);
									Print_X = 0;
								}
							}
function Fly_Menu (Name,Number) {
	
	if (Saver_Count) 
		Print_L = 1;
		                       
       if (Print_L) {
		
			printf(5,6,0,1,Name);
			line_oled(124,18,4,18,2,1);
			rect_oled(1,1,127,63,0,1);		
			Edit_Value(Number,Calculate_Digits(Number));
	
				Print_L = 0;
			}
		}

function Quick_Toggle_Switch (Toggle_One,Toggle_Two,Toggle_Three,Toggle_Four,Toggle_Five,Toggle_Six) {

		ACCELERATION = Toggle_One;
		SMOOTHNESS = Toggle_Two;
		DEADZONE = Toggle_Three;
		STICKIZE = Toggle_Four;
		SENSE = Toggle_Five;
		ADS = Toggle_Six;

}
function Mod_Switch_Toggle (Mod_One,Mod_Two,Mod_Three,Mod_Four,Mod_Five,Mod_Six) {
		
		cls_oled(0);
		
	if (Mod_One)
		ACCELERATION = !ACCELERATION;
		
		if (ACCELERATION) {	
			SMOOTHNESS = 0;
			DEADZONE = 0;
			STICKIZE = 0;
			SENSE = 0;
			ADS = 0;
			Saver_Count = 1;
			Print_Y = 1;
			Position_One = 133;
			Position_Two = F1[0];
			Position_Three = 134;
			Position_Four = F2[0];
			Print_Name_Label = A[0]; 
			Print_Setting_Value = ACCELERATION_RX;
			Y();
		}
	
			if (Mod_Two)
				SMOOTHNESS = !SMOOTHNESS;
				
				if (SMOOTHNESS) {
					ACCELERATION = 0;
					DEADZONE = 0;
					STICKIZE = 0;
					SENSE = 0;
					ADS = 0;
					Saver_Count = 1;
					Print_Y = 1;
					Position_One = 133;
					Position_Two = F5[0];
					Position_Three = 134;
					Position_Four = F6[0];
					Print_Name_Label = C[0]; 
					Print_Setting_Value = SMOOTHNESS_RX;
					Y();
				}
	
					if (Mod_Three)
						DEADZONE = !DEADZONE;
						
						if (DEADZONE) {
							ACCELERATION = 0;
							SMOOTHNESS = 0;
							STICKIZE = 0;
							SENSE = 0;
							ADS = 0;
							Saver_Count = 1;
							Print_Y = 1;
							Position_One = 133;
							Position_Two = F9[0];
							Position_Three = 134;
							Position_Four = F10[0];
							Print_Name_Label = E[0]; 
							Print_Setting_Value = DEADZONE_RX;
							Y();		
						}
	
							if (Mod_Four)
								STICKIZE = !STICKIZE;
								
								if (STICKIZE) {
									ACCELERATION = 0;
									SMOOTHNESS = 0;
									DEADZONE = 0;
									SENSE = 0;
									ADS = 0;
									Saver_Count = 1;
									Print_Y = 1;
									Position_One = 133;
									Position_Two = NUM4[0];
									Position_Three = 134;
									Position_Four = NUM6[0];
									Print_Name_Label = G[0]; 
									Print_Setting_Value = STICKIZE_RX;
									Y();		
								}
	
									if (Mod_Five)
										SENSE = !SENSE;
										
										if (SENSE) {
											ACCELERATION = 0;
											SMOOTHNESS = 0;
											STICKIZE = 0;
											DEADZONE = 0;
											ADS = 0;
											Saver_Count = 1;
											Print_Y = 1;
											Position_One = 133;
											Position_Two = 133;
											Position_Three = 134;
											Position_Four = 134;
											A_Arrow = 1;
											Print_Name_Label = I[0]; 
											Print_Setting_Value = SENSITIVITY;
											Y();		
										}
	
											if (Mod_Six)
												ADS = !ADS;
												
												if (ADS) {
													ACCELERATION = 0;
													SMOOTHNESS = 0;
													STICKIZE = 0;
													DEADZONE = 0;
													SENSE = 0;
													Saver_Count = 1;
													Print_Y = 1;
													Position_One = 132;
													Position_Two = 132;
													Position_Three = 131;
													Position_Four = 131;
													A_Arrow = 1;
													Print_Name_Label = J[0]; 
													Print_Setting_Value = ADS_RATIO;
													Y();		
												}
											}

function Saver (Inputs) {
	
	if (Saver_Count) {	
	
		if ((get_ival(Inputs)) || (get_keyboard(Inputs))) {	
			Menu_Saver_Counter = 0;
		}
			
			else if ((Menu_Saver_Counter >= 25000) || (Event_press(KEY_ESC))) {
				Saver_Count = 0;
				ACCELERATION = 0;	
				SMOOTHNESS = 0;
				DEADZONE = 0;
				STICKIZE = 0;
				SENSE = 0;
				ADS = 0;
				Saver_Count = 0;
				cls_oled(0);
				Menu_Saver_Counter = 0;
				
			}
		}
	}

function Key_Monitor (Input,Store,Forward,Output) {
  
  		Active_K = Release_K = 0;
  	
  	if (Key_Buffer) {
    	
    	for (Input = 0; Input < 6; Input++) {
    		
    		if (Key_Array[Input] && !Key_Status(Key_Array[Input])) {
        		Release_K = Key_Array[Input];
        		Key_Array[Input] = 0;
        		Key_Buffer--;
        	
        			break;
      		}
    	}
	}
  	
  	if (Key_Buffer < 6) {
    	
    	for (Output = 4; Output < 111; Output++) {
    		Store = Output;
    		
    		if (Output>=104) Store = (~0) << (Output - 104);
      			Forward = 1;

    			if (Key_Status(Store)) {
    				
    				for (Input = 0; Input < 6; Input++) { 
    					
    					if (Key_Array[Input] == Store) {
         					Forward--; 
         						
         						break;
     					}
    				}
    
    if (Forward) {
    	
    	for (Input = 0; Input < 6; Input++) {
    		
    		if (!Key_Array[Input]) {
    			Key_Array[Input] = Store;
        			
        			break;
     		}
    	}
    					
    					Active_K = Store;
        				Key_Buffer++;
    			}
    		}
    	}
  	}
  		return;
}

function Key_Status (Key) { 
	
	if (Key < 0) 
		
		return get_modifiers(inv(Key)); 
			
			return get_keyboard(Key); 

}

function Event_press (Key)  { 
		
		return Key == Active_K;  
}

function Edit_Value (S_Digit,A_Digits) {
	
	if (S_Digit < 0) {
		putc_oled(Number_Add,45);
		Number_Add += 1;
		S_Digit = abs(S_Digit);
		Counter = 1;
	}
		else 
			Counter = 0;
			
			if (A_Digits >= 3) {
				putc_oled(Number_Add,Number_Value[S_Digit / 100]);
				S_Digit = S_Digit % 100;
				Number_Add +=  1;
			}
				
				if (A_Digits >= 2) {
					putc_oled(Number_Add,Number_Value[S_Digit / 10]);
					S_Digit = S_Digit % 10;
					Number_Add += 1;
				}
					
					putc_oled(Number_Add,Number_Value[S_Digit]);
					puts_oled(Center_Value(A_Digits + Counter,1),32,1,Number_Add,1);    
					Number_Add = 1;

} 

function Calculate_Digits (Actual_Number) {
    
    	Actual_Number = abs(Actual_Number);
	
	if (Actual_Number / 100 > 0) 
		return 3;
		
		if (Actual_Number / 10 > 0) 
			return 2;
				
				return 1;

}    

function Center_Value (Characters,Size_Id) {
    
    	Position_Character = Characters * Font_Size[Size_Id][0];
    	Position_Character = (127 - Position_Character) / 2;
			
			return Position_Character;

} 
function Save () {

		set_pvar(SPVAR_1 , ACCELERATION_RX);
		set_pvar(SPVAR_2 , ACCELERATION_RY);
		set_pvar(SPVAR_3 , SMOOTHNESS_RX  );
		set_pvar(SPVAR_4 , SMOOTHNESS_RY  );
		set_pvar(SPVAR_5 , DEADZONE_RX    );
		set_pvar(SPVAR_6 , DEADZONE_RY    );
		set_pvar(SPVAR_7 , STICKIZE_RX    );
		set_pvar(SPVAR_8 , STICKIZE_RY    );
		set_pvar(SPVAR_9 , SENSITIVITY    );
		set_pvar(SPVAR_10, ADS_RATIO      );

}