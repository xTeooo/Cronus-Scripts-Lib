const int picture[] = {106, 64, 0x0000, 0x0004, 0x10FE, 0x0000, 0x0000, 0x0000, 0x1FC0, 0x0000, 0x0FFF, 0xFF80, 0x0E00, 0x0000, 0x0003, 0xF000, 0x0001, 0xF9FF, 0xC000, 0x0000, 0x0000, 0x003C, 0x0000, 0x00FE, 0x3FC0, 0x0000, 0x0000, 0x0000, 0x0300, 0x0000, 0xFFFF, 0xE000, 0x0000, 0x0000, 0x0000, 0x4000, 0x00FF, 0xFFF0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3FFF, 0xF800, 0x0034, 0x0000, 0x0000, 0x0000, 0x000F, 0xFFFC, 0x0071, 0xD3C0, 0xFFFE, 0x0000, 0x0000, 0x023F, 0xFE00, 0x77FD, 0xE03F, 0xFFF8, 0x0000, 0x0000, 0x07FF, 0x01FF, 0xFFF8, 0x0FFF, 0xFFF0, 0x0000, 0x0000, 0x3C00, 0x7FFF, 0xFE07, 0xFFFF, 0xFF80, 0x0000, 0x0000, 0xE03F, 0xFFFF, 0x83FF, 0xFFFF, 0xF800, 0x0000, 0x0078, 0x1FFF, 0xFFC0, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x1C07, 0xFFFF, 0xF07F, 0xFFFF, 0xFFE0, 0x0000, 0x0002, 0x03FF, 0xFFFC, 0x0FFF, 0xFFFF, 0xFC00, 0x000F, 0xF800, 0xFFFF, 0xFF03, 0xFFFF, 0xFFFF, 0x0000, 0x03FF, 0x003F, 0xFFFF, 0xC1FF, 0xFFFF, 0xFFC0, 0x0000, 0xFFF0, 0x0FFF, 0xFFF0, 0x7FFF, 0xFFFF, 0xF000, 0x003F, 0xFE03, 0xFFFF, 0xFC3F, 0xFFFF, 0xFFFC, 0x0000, 0x0FFF, 0xC0FF, 0xFFFF, 0x0FFF, 0xFFFF, 0x3F00, 0x0003, 0xFC78, 0x1FFF, 0xFFC1, 0xFFFF, 0xFFD1, 0xC000, 0x00FE, 0x7E07, 0xFFFF, 0xF007, 0xFFFF, 0xFF10, 0x0000, 0x3FBF, 0x81FF, 0xFFFC, 0x000F, 0xFFFF, 0xE400, 0x000F, 0xEFE2, 0x7FFF, 0xFE00, 0x00FF, 0xFFF9, 0x0000, 0x03FF, 0xC05F, 0xFFFD, 0xC400, 0x0FFF, 0xFFC0, 0x0000, 0xFF87, 0x17FF, 0xFF20, 0x0003, 0xFFFF, 0xF000, 0x003F, 0xC7C5, 0xFFFF, 0xF000, 0x00FF, 0xFBFC, 0x0000, 0x0FFB, 0xF17F, 0xFFFE, 0x0300, 0xF800, 0x0000, 0x0003, 0xFFFC, 0x1FFF, 0xFF99, 0xC0FE, 0x0000, 0x0000, 0x00FF, 0xF787, 0xFFFF, 0xE400, 0xFFC0, 0x0000, 0x0000, 0x3FFF, 0xF0FF, 0xFFF9, 0xC1FF, 0xF006, 0x0000, 0x000F, 0xDFFC, 0x3FFF, 0xFE7F, 0xFFFC, 0x0000, 0x0000, 0x03F3, 0xCF87, 0xFFFF, 0x9FFF, 0xFF00, 0x0000, 0x0000, 0xFC3F, 0xE1FF, 0xFFE7, 0xFFFF, 0xC008, 0x0000, 0x003F, 0x1FFC, 0x3FFF, 0xF9FF, 0xFFFA, 0x0000, 0x0000, 0x0F87, 0xFF0F, 0xFFFE, 0x3FFF, 0xFF80, 0x2000, 0x0003, 0xC6FF, 0xE3FF, 0xFF9F, 0xFFFF, 0xFF1C, 0x0000, 0x00F1, 0x3FFC, 0x7FFF, 0xE3FF, 0xFFFF, 0xFF00, 0x0000, 0x38CF, 0xFF0F, 0xFFFC, 0xFFFF, 0xFFFF, 0x8000, 0x000E, 0x67FF, 0xE3FF, 0xFF3E, 0x0FFF, 0xFFE0, 0x0000, 0x030F, 0xFFFC, 0x7FFF, 0xCFF0, 0xFDFF, 0xF000, 0x0000, 0xCFFF, 0xFF0F, 0xFFF3, 0xFE00, 0x1FEC, 0x0000, 0x0023, 0xFFFF, 0xE5FF, 0xFCFC, 0x000F, 0xE200, 0x0000, 0x09FF, 0xFFFC, 0xFFFF, 0x1FF0, 0x1FC0, 0x0000, 0x0000, 0x7FFF, 0xFF2F, 0xFFEF, 0xFF47, 0xF000, 0x0000, 0x001F, 0xFFFF, 0xEFFF, 0x3BFF, 0xFCFC, 0x0000, 0x0000, 0x07FF, 0xFFF9, 0x7F80, 0x0BBF, 0x9F00, 0x0000, 0x0001, 0xFFFF, 0xFE7F, 0xFD00, 0x0213, 0x8000, 0x0000, 0x00FF, 0xFFFF, 0x9FFF, 0xEE00, 0x0040, 0x0000, 0x0000, 0x3FFF, 0xFFEF, 0xFFF3, 0xFC00, 0x3000, 0x0000, 0x000F, 0xFFFF, 0xF3FF, 0xFDFF, 0xFC00, 0x0000, 0x0000, 0x01FF, 0xFFFD, 0xFFF8, 0x3FFF, 0xC000, 0x0000, 0x0000, 0x7FFF, 0xDA7F, 0xFC00, 0xFFE0, 0x0000, 0x0000, 0x00FF, 0xFFF0, 0x9FFF, 0x8000, 0x0000, 0x0000, 0x0000, 0x3FFF, 0xFC07, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x000F, 0xFFFF, 0x007F, 0xFFF0, 0x0000, 0x0000, 0x0000, 0x03FF, 0xFFC0, 0x03FF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xF800, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x03F8, 0x0000, 0x0FFF, 0xFF80, 0x0000, 0x0000, 0x003F, 0xFF00, 0x0003, 0xFFFF, 0xE000, 0x0000, 0x0003, 0x1FFF, 0xC000, 0x00BF, 0xFFF8, 0x0000, 0x0000, 0x3FE3, 0xFFF0, 0x0000, 0x2FFF, 0xF300, 0x0000, 0x03FF, 0xFC7F, 0xFC00, 0x000F, 0xFFFF, 0x6000, 0x0007, 0xFFFF, 0x9FFF};

main {
	if (get_val(XB1_A)) {
		draw_picture(0, 0, 0);
	}
	else if (get_val(XB1_B)) {
		draw_picture(0, 0, 1);
	}
}
int __pictureX, __pictureX2, __pictureY, __pictureY2, __pictureBit, __pictureOffset, __pictureData;
function draw_picture(x, y, invert) {
	__pictureOffset = 2; // Reset the starting point
	__pictureBit = 16; // Reset bit flag
	for (__pictureY = 0; __pictureY < picture[1]; __pictureY++) { // Loop the Y axis
		for (__pictureX = 0; __pictureX < picture[0]; __pictureX++) { // Loop the X axis
			__pictureData = picture[__pictureOffset]
			__pictureX2 = x + __pictureX;
			__pictureY2 = y + __pictureY;
			if (__pictureX2 < 0 || __pictureX2 >= 128) {
				__pictureX2 -= 128;
			}
			if (__pictureY2 < 0 || __pictureY2 >= 64) {
				__pictureY2 -= 64;
			}
			if (test_bit(__pictureData, __pictureBit - 1)) {
				pixel_oled(__pictureX2, __pictureY2, !invert);
			}
			else {
				pixel_oled(__pictureX2, __pictureY2, invert);
			}
			__pictureBit--; // Decrement the bit flag, we're moving to the next bit
			if (!__pictureBit) { // Check if we've just handled the last bit
				__pictureBit = 16; // Reset the bit flag
				__pictureOffset++; // Move to the next value
			}
		}
	}
}