/*		    36936936936936936
            36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936        36936
     36936   36936        36936
      369    36936          369
		   	  369	
	DoGz TrIpLe AssisT V1.01 (CMP & ZEN)

|| AIM ASSIST TOGGLES ON/OFF		
||    (PS4)           (XBOX)
|| ( SQUARE/LEFT   OR  X/LEFT)   || PROGRESSION ON/OFF
|| ( SQUARE/RIGHT  OR  X/RIGHT)  || DoGz ASSIST ON/OFF
|| ( SQUARE/UP     OR  X/UP)     || POLAR ASSIST ON/OFF

CREDITS TO DON'T AT ME (DISCORD = ME.)FOR HIS AMAZING SELF MADE POLAR AIM ASSIST 5***** (ENHANCED HIS ORIGINAL VERSION A LITTLE 8 )) 
*/
define PS         = PS4_PS;  
define SHARE      = PS4_SHARE;  
define OPTIONS    = PS4_OPTIONS;  
define R1         = PS4_R1;  
define R2         = PS4_R2;  
define R3         = PS4_R3;  
define L1         = PS4_L1;  
define L2         = PS4_L2;  
define RX         = PS4_RX;  
define RY         = PS4_RY;  
define LX         = PS4_LX;  
define LY         = PS4_LY;     
define L3         = PS4_L3;  
define UP         = PS4_UP;  
define DOWN       = PS4_DOWN;  
define LEFT       = PS4_LEFT;  
define RIGHT      = PS4_RIGHT; 
define CROSS      = PS4_CROSS;  
define CIRCLE     = PS4_CIRCLE;  
define SQUARE     = PS4_SQUARE;  
define TRIANGLE   = PS4_TRIANGLE;  
define TOUCH      = PS4_TOUCH;
define VIB_A      = RUMBLE_A;
define X          = RX;                                    
define Y          = RY;
define ON         = TRUE;
define OFF        = FALSE;

// PUT YOUR BUTTONS HERE BELOW IF DIFFERENT
define AIM        = PS4_L2;// XB1_LT 
define FIRE       = PS4_R2;// XB1_RT  

// AIM ASSIST TOGGLES ON/OFF															     (PS4)           (XBOX)
define PROGRESSION_HOLD_TOGGLE       = SQUARE,	    PROGRESSION_PRESS_TOGGLE  = LEFT; // ( SQUARE/LEFT   OR  X/LEFT )
define DoGz_ASSIST_HOLD_TOGGLE       = SQUARE,	    DoGz_ASSIST_PRESS_TOGGLE  = RIGHT;// ( SQUARE/RIGHT	 OR  X/RIGHT )
define POLAR_ASSIST_HOLD_TOGGLE      = SQUARE,		POLAR_PRESS_TOGGLE        = UP;   // ( SQUARE/UP     OR  X/UP )

//AIM ASSIST MODS ON/OFF BY DEFAULT ( TOGGLE ON/OFF IN GAME )( CAN ALL RUN TOGETHER TO CREATE MORE AIM ASSISTS )( EXPERIMENT )
int DoGz_ASSIST        = ON;// DoGz AIM ASSTIST
int PROGRESSION_ASSIST = ON;// PROGRESSION AIM ASSIST
int POLAR_ASSIST       = ON;// DON'T AT ME POLAR AIM ASSIST ( CMP VERSION )

//PROGRESSION ASSIST SETTINGS
define PROGRESSION_RELEASE = 15; 
define AAMIN  = -5;// MINIMUM VALUE  
define AAMAX  =  5;// MAXIMUM VALUE  
define AAVAL  =  5;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS

// DON'T TOUCH THESE BELOW
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;

//POLAR ASSIST SETTINGS
define RADIUS        =  8;// RADIUS/STRENGTH/VALUE    
define STEPS         = 20;// STEP/SPEED        
define POLAR_RELEASE = 20;// RELEASE VALUE                                   
int    POLAR_BOOST   =  5;// BOOST VALUE MUST BE 1 TO 10   ( 1 = STRONGER SHAKE __ 10 = NO SHAKE )
int    POLAR_SHAKE   = 20;// SHAKE VALUE (EXPERIMENT) 2 - 200 

//DoGz ASSIST VALUES
define DoGz_ASSIST_RELEASE = 90;
int D_AS:
define VMCR   =  0;// DEFAULT VM SPEED
int VMC       =  0;// VM SPEED WHILE DoGz ASSIST ACTIVE (CMP CAN GO NO LOWER THAN -5 VM SPEED)
int D__AS     =  0;// STARTING VALUE/RETURN VALUE
int D__AS1    =  4;// INVERT DIRECTION VALUE
int D___AS    =  5;// ( HIGHEST VALUE )( WILL BE DOUBLED WHEN FIRING )
int D_AS1     = -5;// ( LOWEST VALUE ) ( WILL BE DOUBLED WHEN FIRING )

//POLAR CONDITIONS
define ACTIVE_WHEN_ADS    =  ON;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  ON;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   =  ON;// BOOST POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )
define POLAR_SHAKE_FIRE   =  ON;// SHAKE POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )
int VM                    =  ON;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )

// DON'T TOUCH THESE BELOW
define STEP_INTERVAL =  1;
define STEPS2 = 0;
int SHUNT,RADIUS1,RADIUS2 = 10,RADIUS3 = 100;
int time,angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,STEPS1;

const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 

main {

/////////////////////////////POLAR AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if (get_val(POLAR_ASSIST_HOLD_TOGGLE) && event_press(POLAR_PRESS_TOGGLE)) {
	SHUNT = POLAR_PRESS_TOGGLE;
	POLAR_ASSIST = !POLAR_ASSIST;
	}
if (POLAR_ASSIST) {
	actual_X = get_val(X);   
    actual_Y = get_val(Y);           
    actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
    max_Magnitude = (actual_Magnitude < 100);                      
if (POLAR_BOOST_FIRE) {
if (get_val(FIRE)) {	
   	RADIUS1 =  POLAR_BOOST * RADIUS2;
   	}
else
    RADIUS1 =  RADIUS3;
   	}
if (POLAR_SHAKE_FIRE) {
if (POLAR_SHAKE_FIRE && get_val(FIRE)) {
	STEPS1 = POLAR_SHAKE;
	}
else
	STEPS1 = STEPS2;
	}   			
if (!(time++ % STEP_INTERVAL)) {                                  
	angle += STEPS + STEPS1;                                                 
    }                                                               
    angle = angle % 360;                                            
    sin_angle = Polar_Array[angle % 360];                           
    cos_angle = Polar_Array[(angle + 270) % 360];                  
    cos_angle = (cos_angle * RADIUS) / RADIUS1;                         
    sin_angle = (sin_angle * RADIUS) / RADIUS1;                          
if ((ACTIVE_WHEN_ADS && get_val(AIM) && abs(get_val(RY)) < POLAR_RELEASE && abs(get_val(RX)) < POLAR_RELEASE) 
   	|| (ACTIVE_WHEN_FIRING && get_val(FIRE) && abs(get_val(RY))< POLAR_RELEASE && abs(get_val(RX)) < POLAR_RELEASE)) { 
if (actual_Magnitude <= RADIUS) {                                                      
    sin_angle -= actual_Y;                                                              
    cos_angle -= actual_X;                                                                 
    }
else {                                                                                       
    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
	}                                                  
    set_val(X, clamp_(actual_X + cos_angle, -100, 100));
    set_val(Y, clamp_(actual_Y + sin_angle, -100, 100)); 
    }
}

/////////////////////////////PROGRESSION AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if (get_val(PROGRESSION_HOLD_TOGGLE) && event_press(PROGRESSION_PRESS_TOGGLE)) {
	SHUNT = PROGRESSION_PRESS_TOGGLE;
	PROGRESSION_ASSIST = !PROGRESSION_ASSIST;
}
if (PROGRESSION_ASSIST && get_val(AIM) >= 80) {
if (!combo_running(AAS)) {
	AS = PROGRESSION(AS,AAMIN,AAMAX,AAVAL,AAS,1);
    AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
    combo_run(AAS);
    	}
if (abs(get_val(RY))> PROGRESSION_RELEASE || abs(get_val(RX)) > PROGRESSION_RELEASE) {
	combo_stop(AAS);
	}
}

/////////////////////////////DoGz AIM\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
if (get_val(DoGz_ASSIST_HOLD_TOGGLE) && event_press(DoGz_ASSIST_PRESS_TOGGLE)) {
	SHUNT = DoGz_ASSIST_PRESS_TOGGLE;
	DoGz_ASSIST = !DoGz_ASSIST;
}
if (DoGz_ASSIST && abs(get_val(RX)) < DoGz_ASSIST_RELEASE && abs(get_val(RY)) < DoGz_ASSIST_RELEASE) {
if (get_val(AIM) > 80) {
	D_AS = ON;
	AIM();
}
if (event_release(AIM) || event_release(FIRE)){
	D_AS = OFF;
	vm_tctrl(VMCR); 
	}
}

if (SHUNT)
if (event_release(SHUNT)) {
	SHUNT = OFF;
	}
else {
	set_val(SHUNT,OFF);
	}
}

combo AAS {
	set_val(RY, 1 * - AS);
	wait(AW);
	set_val(RX, 1 * - AS);
	wait(AW);
	set_val(RY,AS);
	wait(AW);
	set_val(RX,AS);
	wait(AW);
}

function AIM() {
	if (D_AS) {
	if (D_AS && VM) {
		vm_tctrl(VMC);
	}
		D__AS ++;
	if (D__AS >= D___AS)  D__AS = D__AS1;
		D__AS1 --;
	if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
		D__AS ++;
	if (get_val(AIM)) {	
		set_val(RX,get_val(RX) + D__AS);
		set_val(RY,get_val(RY) + D__AS);
	}
	if (get_val(FIRE)) {	
		set_val(RX,get_val(RX) + D__AS);
		set_val(RY,get_val(RY) + D__AS);
		}
	}
}

function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if (FLOW) {
    VALUE += INCREMENT;
if (VALUE <= MAX)  
    return VALUE;
if (VALUE > MAX) {
        PROG[ID] = 0;
    return VALUE - INCREMENT;}
	}
else {
    VALUE -= INCREMENT;    
if (VALUE >= MIN)  
    return VALUE;
if (VALUE < MIN) {
   	PROG[ID] = 1;
    return VALUE + INCREMENT;
    	}
	} 
   		 return OFF;    
}

function clamp_(int v,int lo,int hi) { 
if (v < lo) 
  	return lo;               
if (v > hi) 
  	return hi;        
  		return v;     
} 