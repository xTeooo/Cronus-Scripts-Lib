// GPC Online Library
// the_apex_legends_script_-_master_edition_-_the_#1_script_for_apex_legends_.gpc


/*V5.1
---PLEASE SHARE RECOIL VALUES IN THE SUPPORT TOPIC---
---VISIT SUPPORT TOPIC: tinyurl.com/support-top1c---


ABOUT AIM ASSIST IN APEX
In-game sensitivities higher than 8 and scopes other than 1-2x scopes will shut off the aim assist game mechanics, meaning that 
Aim Assist mod will have no effect. â€œAim Assist Valuesâ€ (see further below) affects how much the mod shakes your screen to apply the aim assist. 
For best performance, it should be only shaking slightly (so that it is barely noticeable). If you are not sure what values to use: you
can adjust these values on the fly!! See manual for more info. It is worth mentioning that the Apex Legends' in-game aim assist mechanic 
is not very strong. The same as with COD WW2, you may have the impression that aim assist is NOT working. To check if it is working, team up
and ask your buddy to move around whilst you aim at him, like so: youtu.be/xJRDH5xs2wM
Now, given the fact that there is so little Aim Assist (and other aim abuse options) available for APEX, consider not to focus Aim Assist, 
but rather focus on Aim Corrections because Aim Corrections WILL have a great impact on your accuracy, more than anyting else for that matter. 
Just remember: Apex is nothing like Fortnite: just like the game, this script it is not targeting kiddies who get a hard-on because of some aim bot 
ruining the game. Apex requires real skills. So, if you suck at Apex, dont blame in on the script or on the game! ;)
PS: this is the best script for Apex, for sure. Help me keep it up-to-date: are mods PATCHED? No longer working? LET ME KNOW!! THANKS!!


  ___  ____  ____  ____   ___  ____  __ _  ____ 
 / __)(  _ \(  __)/ ___) / __)(  __)(  ( \/ ___)
( (__  )   / ) _) \___ \( (__  ) _) /    /\___ \
 \___)(__\_)(____)(____/ \___)(____)\_)__)(____/
 				PROUDLY PRESENTS       
                   _____  ________   __          
             /\   |  __ \|  ____\ \ / /          
            /  \  | |__) | |__   \ V /           
           / /\ \ |  ___/|  __|   > <            
          / ____ \| |    | |____ / . \           
  _      /_/___ \_\_| ___|______/_/_\_\_   _____ 
 | |    |  ____/ ____|  ____| \ | |  __ \ / ____|
 | |    | |__ | |  __| |__  |  \| | |  | | (___  
 | |    |  __|| | |_ |  __| | . ` | |  | |\___ \ 
 | |____| |___| |__| | |____| |\  | |__| |____) |
 |______|______\_____|______|_| \_|_____/|_____/ 
              
	  _  _____ __ _     __ _ _________ _    
  |V||_|(_  | |_ |_)   |_ | \ |  |  | / \|\|
  | || |__) | |__| \   |__|_/_|_ | _|_\_/| |

--------------------------------------------------------------------------- 
    			  _    ,----------------------------------------------.
                __))   | INSTRUCTIONS: tinyurl.com/scriptinstructions |
              ( oo)   _)---------------------------------------------'
----------ooO--(_)--Ooo----------------------------------------------------
---PLEASE READ THE INSTRUCTIONS!!! OPEN THE URL ABOVE IN YOUR BROWSER!

The new aim corrections work the same as before, but now with a user dynamic touch of the aim stick. The amount of pressure 
will determine your sensitivity. Higher multipliers (15 and well above) will make aim corrections more static. If MP is making 
you over-aim, try MP 18 or 20 for example.

 	 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
	 â–ˆâ•”â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•—â–ˆ
	 â–ˆâ•‘USER CUSTOMIZING & CONFIGURATIONâ•‘â–ˆ
	 â–ˆâ• â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•£â–ˆ
	 â–ˆâ•‘*/define	STCK/*Sticks*/	= 0; /*â•‘â–ˆ
	 â–ˆâ•‘*/define	BTTN/*Buttons*/	= 0; /*â•‘â–ˆ 
	 â–ˆâ•‘*/define	Swap			= 0; /*â•‘â–ˆ Swap= 1; will swap bumpers<->triggers
	 â–ˆâ•‘*/define	Easy_Thumbs		= 1; /*â•‘â–ˆ
	 â–ˆâ• â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•£â–ˆ
	 â–ˆâ•‘*/define Hair_triggers	= 1; /*â•‘â–ˆ 
	 â–ˆâ•‘*/define	Aim__Abuse		= 0; /*â•‘â–ˆ Will activate when ADS is FULLY pressed
	 â–ˆâ•‘*/define Fast_Heal_Swap	= 0; /*â•‘â–ˆ HOLD D-PAD DOWN + TAP PS4_OPTIONS/XB1_MENU
	 â–ˆâ•‘*/define AIM__CORRECT	= 2; /*â•‘â–ˆ [0 = OFF] [1 = ADS SENS][2 = ADS SENS & ADS & ADS+FIRE SENS]
	 â–ˆâ•‘*/int    Multiplier		= 15 /*â•‘â–ˆ IN THE GAME MENU HIGHER YOUR STICK SENSITIVITY WITH 2 - 3 CLICKS
	 â–ˆâ•šâ•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â–ˆ 
	 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 

In the box above fill out your btn & stick layout and
the mods you want to use. From here on your script will
load exactly as you congfigured it above. 
oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo
  __               
 (_ _|_ o  _ |   _ 
 __) |_ | (_ |< _>             
                                                                       
0 = Default
1 = Southpaw
2 = Legacy
3 = Legacy-Southpaw

oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo 

 |_)    _|_ _|_  _  ._   _ 
 |_) |_| |_  |_ (_) | | _> 
                            
0 = Default
1 = Bumper Jumper
2 = Button Puncher
3 = Evolved
4 = Grenadier
5 = Ninja

oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo  
 ___                     
  | |_      ._ _  |_   _ 
  | | | |_| | | | |_) _> 
                         			
0 = not activated
1 = Auto Sprint activated = on your Left Thumb (just push forward to run)														
2 = Auto Sprint activated + Easy Jump under Left Stick Click 		
3 = Auto Sprint activated + Easy Crouch/Slide under Left Stick Click 
4 = Auto Sprint activated + Easy Melee under Left Stick Click
5 = Auto Sprint activated + Easy Ping under Left Stick Click
6 = Auto Sprint activated + Easy Ability under Left Stick Click
7 = Auto Sprint activated + Easy Ultimate Ability under Left Stick Click
8 = Auto Sprint activated + Auto Ping Enemy under Left Stick Click
9 = Auto Sprint activated + Fast_Heal_Swap under Left Stick Click 

oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo  

  /\  | |    _ _|_ |_   _  ._ 
 /--\ | |   (_) |_ | | (/_ |  
                              
0 = NOT USE / NOT load by default
1 = USE / LOAD BY DEFAULT. 
For example: if you want Swap to be True (R1<->R2 & L1<->L2) you fill
out 1. If you do not want this to be True, you leave it 0. 

//oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo 
  DO NOT CHANGE ANYTHING TO THIS DATA SECTION - IT`S FUNDAMENTAL TO THE SCRIPT
//oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo  */
const byte BL[][] = {{3,19,18,5,6},{3,6,18,5,19},{3,19,5,18,6},{3,6,5,18,19},
{13,19,18,5,6},{19,6,3,5,18}}; const byte SL[][] ={{12,11,9,10},{10,9,11,12},
{12,9,11,10},{10,11,9,12}}; const byte AR[][] = {{0,0,0},{0,0,0},{30,18,42},
{35,25,55},{28,14,42}}; data(0,0,3,0,3,0,0,0,0,0,0,3,0,3,0,0,3,0,3,0); 
//oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo */         
int ayout;
define SL_D= 0, SL_S= 1, SL_L= 2, SL_L_S= 3;
int _ayout;									
define BL_D= 0, BL_B= 1, BL_B_P= 2, BL_E= 3, BL_G= 4, BL_N= 5;
//oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo */
int PING, JUMP, CROUCH, MELEE, ABILITY;
int L__Y, L__X, R__X, R__Y;
//oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo */

/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |V|A|R|I|A|B|L|E|S| | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 

  
int ar_t[5]; 
int ar_s[5]; 
int ar_e[5];  
 
int idx;         
int key = 145;   
int record;
int Pr_mode=FALSE;

int i;             
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int v,ar_y;
int Auto_Sprint;
int T_Button;							
define Press_btn= 8;

int AA_1=TRUE;
int AA_2=TRUE;
 
int RF_1 = FALSE; 
int RF_2 = FALSE; 
int c = TRUE;
int r_o_f = 153;
int r = 0;
int b;
int res;
int H__T;
int R__T;
 
int Switch;
int Weapon1 = 0; 
int Weapon2 = 1;
int btn;


// Fast Heal Swap
//--starting position is up & left should be med-kit
int w_x = -100; //--wheel position left 
int w_y =  100; //--wheel position up
 
int window_time = 250; //--time in ms to hold UP before moving
int xy_time = 20; //--time to hold LX & LY  
int rs_x;
int rs_y;
int combo_count;


//The new aim corrections work the same as before, but now with a user dynamic touch of the aim stick. The amount of pressure will determine your sensitivity.
//Higher multipliers (15 and well above) will make aim corrections more static again, if you prefer the old method, simply higher the MP. Try MP 18 or 20 for example. 
//---Zoom sens variables
int ADS_SENS, GEN_SENS=100, ADS_FIRE_SENS, Sens, coRR;
int c___x,c___y;


//______________________AIM ASSIST - IF YOU EXPERIENCE SHAKING ___________________
//Aim Assist values: a higher value = stronger aim assist but also ads more shake
//So if you experience shake lower these values by 1 until the shaking stops
int a__p = 21; // Aim Assist Pos Value 
int a__n = 21; // Aim Assist Neg Value
int aa_delay =15;//If aim assist does not stick long enough, increase wait time
//_________________________________________________________________________________
//Aim Abuse Values
int HOLD = 284;
int RELEASE = 19;

init {
    
    record = get_pvar(SPVAR_16,140,150,140);
    if(record == key) {
        ar_t[0] = get_pvar(SPVAR_1 ,-100,100,0);  ar_t[1] = get_pvar(SPVAR_2, -100,100,0);  ar_t[2] = get_pvar(SPVAR_3, -100,100,0);
        ar_t[3] = get_pvar(SPVAR_4, -100,100,0);  ar_t[4] = get_pvar(SPVAR_5, -100,100,0);  ar_s[0] = get_pvar(SPVAR_6, -100,100,0);
        ar_s[1] = get_pvar(SPVAR_7, -100,100,0);  ar_s[2] = get_pvar(SPVAR_8, -100,100,0);  ar_s[3] = get_pvar(SPVAR_9, -100,100,0);
        ar_s[4] = get_pvar(SPVAR_10,-100,100,0);  ar_e[0] = get_pvar(SPVAR_11,-100,100,0);  ar_e[1] = get_pvar(SPVAR_12,-100,100,0);
        ar_e[2] = get_pvar(SPVAR_13,-100,100,0);  ar_e[3] = get_pvar(SPVAR_14,-100,100,0);  ar_e[4] = get_pvar(SPVAR_15,-100,100,0);
        a__p = get_pvar(PVAR_7,-60,60,21); a__n = get_pvar(PVAR_8,-60,60,21); aa_delay = get_pvar(PVAR_9,-60,60,20);
    }
}
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| |B|L|O|C|K| |S|T|A|R|T|S| |H|E|R|E| | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main{
	
	c___x = d___z(R__X,0);
    c___y = d___z(R__Y,0);
	set_val (30, L__X);

L__Y			= SL[ayout][0];
L__X			= SL[ayout][1];
R__X			= SL[ayout][2];
R__Y			= SL[ayout][3];

PING			= BL[_ayout][0];
JUMP			= BL[_ayout][1];
CROUCH			= BL[_ayout][2];
MELEE			= BL[_ayout][3];
ABILITY			= BL[_ayout][4];

_ayout 	= BTTN;
ayout 	= STCK;

if (Swap == 1){
 swap(3,4 ); swap(6,7);}

/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |E|A|S|Y| |T|H|U|M|B| | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 if (Easy_Thumbs >  0) 	Auto_Sprint=TRUE;
 if (Easy_Thumbs == 2) 	T_Button = JUMP; 
 if (Easy_Thumbs == 3) 	T_Button = CROUCH; 
 if (Easy_Thumbs == 4) 	T_Button = MELEE; 
 if (Easy_Thumbs == 5) 	T_Button = PING;
 if (Easy_Thumbs == 6) 	T_Button = ABILITY;
 
 if (Easy_Thumbs > 1 && Easy_Thumbs <7 && get_val(Press_btn)){set_val(T_Button, 100);}
 else if (Easy_Thumbs == 7 && get_val(Press_btn)){set_val(3, 100);set_val(6, 100);}
 else if (Easy_Thumbs == 8 && get_val(Press_btn)){combo_run (Auto_Ping);}
 else if (Easy_Thumbs == 9 && get_val(Press_btn)){rs_x = w_x; rs_y = w_y;}
    if(rs_x || rs_y)
    combo_run(HEAL);
    
if (get_val (7) && get_val (14) && get_ptime(14)> 1000){Pr_mode=TRUE; combo_run (Vibrate);}
  //--switch Weapon1 / Weapon2
    if(event_press(17) && !get_val(14))

        Switch=!Switch; 
/*__________________________________________________________________
							** - FIX FOR RAPID FIRE - */

if (!Switch && RF_1 || Switch && RF_2)
 	{									//______start RF
     set_bits(b, 0, 15, 255*257);
     	res = (b - ((1500*10)+ 536))*-1;
     		H__T = res / r_o_f;
     			R__T = H__T - 20;
     				if(R__T < 0) R__T = 0;
     					r = r - get_rtime()*2;
     			if(event_press(4)) 
     			{
     		set_val(4, 100); c = TRUE; r = H__T;
     		}
     	else if(get_val(4) && c) 
     		{
     		set_val(4, 100);
     		}
     	else if(!c) 
     		{
     		set_val(4, 0);
     		}
     	if(!get_val(4) && r<=0 && c == FALSE) 
     		{
     		r = H__T; c =TRUE;
     		}
     	if(r<=0 && c == TRUE) 
     		{
     		r = R__T; c =FALSE;
     		}
 		}								/*_____end RF
/*___________________________________________________________________
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|I|M| | |C|O|R|R|E|C|T|I|O|N|S| | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/  

	if(AIM__CORRECT==1||AIM__CORRECT==2)
	{//----------------------------start AIM CORRECTIONS
	//---multilplied variables 
	ADS_SENS=110-(Multiplier*2) +coRR /10; ADS_FIRE_SENS=105-(Multiplier*2) +coRR/10; 
	coRR = isqrt(abs(c___x) * abs(c___x) + abs(c___y) * abs(c___y));
	   if (get_val (7))
								{   
	  								if(get_val(4) && get_val(7)) 	                         
								  			{ 
								  			if (AIM__CORRECT==2){Sens = ADS_FIRE_SENS;}
								  			else Sens =ADS_SENS;
								  			}
									if(!get_val(4) && !get_val(7)) 
								  			{
								    		Sens = GEN_SENS;
								  	    	}   
	  		if(!get_val(4) && get_val(7)) 
								  			{
								    		Sens = ADS_SENS;
								  	    	}
										   	 
											
			else 
			{
			Sens = GEN_SENS;
			
		
			}
	}
	    if(Sens>100) Sens = 100;  
	    sensitivity(R__X, NOT_USE, Sens);
	    sensitivity(R__Y, NOT_USE, Sens);
	}//----------------------------end AIM_CORRECTIONS
	

//--colors for XBOX controller*/
    if(get_controller () == PIO_XB1)
    {
        if(idx == 0) led_color(6); // White
        if(idx == 1) led_color(0); // Green
        if(idx == 2) led_color(1); // Blue
        if(idx == 3) led_color(idx); //Red
        if(idx == 4) led_color(4); // SkyBlue
    }
    //--colors for PS4 controller
    else
        led_color(idx);

//--calculate values for progression
 
    //--adding or subtracting
    if((AR[idx][1] + ar_s[idx]) < (AR[idx][2] + ar_e[idx]))
        i_val = 1; 
    else
        i_val = -1;
    //--iteration point for progression 
    i_pnt = (AR[idx][0] * 10) / (abs((AR[idx][1] + ar_s[idx]) - (AR[idx][2] + ar_e[idx]))); 
 
 
//--reset counters/pointers
    if(!get_lval(4)) 
    {
       ar_y = AR[idx][1] + ar_s[idx];
       i_cnt = 0;
       i_num = 0;
    }
 
    if(get_val(4)) 
    {
    
        if(!p_complete())  
            ar_y = p_val();
        else
            ar_y = AR[idx][2] + ar_e[idx];
        //--set RY to anti recoil value
            if(y_val() > 100)
                set_val(R__Y, 100);
         else
            set_val(R__Y,y_val());
    }
if (Aim__Abuse==1)
    if(get_lval(7)> 99){combo_run(AimAbuse);}
    if(event_release(7)){ combo_stop(AimAbuse);}
 
    //Heal Swap Activation   
    //Down arrow is pressed 
if (Fast_Heal_Swap==1){
if(get_val (14) && event_press(2)) {
    rs_x = w_x;
    rs_y = w_y;}
    if(rs_x || rs_y)
    combo_run(HEAL);
    set_val(2,0);
}    

if(!Switch) 
{
    idx = Weapon1;
 
    //--select your "primary"
    if(get_val(14) && !get_val(7)) 
    { // DOWN start	
 
        if(event_press(20))
            {Weapon1 = 2; btn=20;} // Pink
        if(event_press(19))
            {Weapon1 = 1; btn=19;} // Blue
        if(event_press(18))
            {Weapon1 = 3; btn=18;} // Red
        if(event_press(17))
            {Weapon1 = 0; btn=17;} // Green
        if(event_press(5))
            {Weapon1 = 4; btn=5;} // SkyBlue
        //--block buttons
      if (get_val (btn)) set_val (btn,0);
    } // DOWN end 

    
    //--rapidfire for "Weapon 1" only
    if(get_val(7)){ 
    		if (event_press(2))
    {
        RF_1 = !RF_1;
    }
    set_val (2,0);
    }//--aim assist on/off
    if(get_val(7)){
    	if (event_press(0))
    {
        AA_1 = !AA_1; 
    }
    set_val(0,0);
    }
    	
 }

//--secondary weapon
if(Switch)
{
    idx = Weapon2;
 
    //--select your "secondary"
    if(get_val(14) && !get_val(7)) 
    { // DOWN start
 
        if(event_press(20))
            {Weapon2 = 2; btn=20;} // Pink
        if(event_press(19))
            {Weapon2 = 1; btn=19;} // Blue
        if(event_press(18))
            {Weapon2 = 3; btn=18;} // Red
        if(event_press(17))
            {Weapon2 = 0; btn=17;} // Green
        if(event_press(5))
            {Weapon2 = 4; btn=5;} // SkyBlue
      if (get_val (btn)) set_val (btn,0);
   


 
    } // DOWN end 
          


// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //--rapidfire for "Weapon 2" only
    if(get_val(7)){ 
    		if (event_press(2))
    {
        RF_2 = !RF_2;
    }
    set_val (2,0);
    }//--aim assist on/off
    if(get_val(7)){
    	if (event_press(0))
    {
        AA_2 = !AA_2;  
    }
    set_val(0,0);
    }
    }
if (Pr_mode){   
    if(get_val(7)) 
    { 
        if(get_val(20)) 
        {
            if(event_press(13))
                ar_s[idx] += 1;         
            if(event_press(14))
                ar_s[idx] -= 1;    
            if(event_press(16))
                ar_s[idx] += 10; 
            if(event_press(15))
                ar_s[idx] -= 10;
        }
 
        if(get_val(18)) 
        {
            if(event_press(13))
                ar_e[idx] += 1;          
            if(event_press(14))
                ar_e[idx] -= 1;    
            if(event_press(16))
                ar_e[idx] += 10; 
            if(event_press(15))
                ar_e[idx] -= 10;
        }
 
        if(get_val(19)) 
        {
            if(event_press(13))
                ar_t[idx] += 1;          
            if(event_press(14))
                ar_t[idx] -= 1;
        }
        if (get_val(17))
       	{
        	if (event_press(13)) a__p = a__p + 1; a__n = a__n + 1;//--DPAD UP a__p + 1        
        	if (event_press(14)) a__p = a__p - 1; a__n = a__n - 1;//--DAPD DOWN a__p -1       
        	if (event_press(15)) aa_delay = aa_delay - 1; aa_delay = aa_delay - 1;   
        	if (event_press(16)) aa_delay = aa_delay + 1; aa_delay = aa_delay + 1;
        }
 
        if(event_press(1)) 
        {
            set_pvar(SPVAR_1 ,ar_t[0]);  set_pvar(SPVAR_2 ,ar_t[1]); set_pvar(SPVAR_3 ,ar_t[2]);
            set_pvar(SPVAR_4 ,ar_t[3]);  set_pvar(SPVAR_5 ,ar_t[4]); set_pvar(SPVAR_6 ,ar_s[0]);
            set_pvar(SPVAR_7 ,ar_s[1]);  set_pvar(SPVAR_8 ,ar_s[2]); set_pvar(SPVAR_9 ,ar_s[3]);
            set_pvar(SPVAR_10,ar_s[4]);  set_pvar(SPVAR_11,ar_e[0]); set_pvar(SPVAR_12,ar_e[1]);
            set_pvar(SPVAR_13,ar_e[2]);  set_pvar(SPVAR_14,ar_e[3]); set_pvar(SPVAR_15,ar_e[4]);
            set_pvar(PVAR_7, a__p); set_pvar(PVAR_8, a__n); set_pvar(PVAR_7, aa_delay);
            combo_run (Vibrate); set_pvar(SPVAR_16,key); Pr_mode=FALSE;
        }
 
   
 
    } // ADS end
 } //Pr_mode end
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|I|M| |A|S|S|I|S|T| | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if (AA_1 &&!Switch || AA_2 &&Switch)
		{
			if(get_val(7))
			{ 
			combo_run(AA_XY);
			}   

			if(get_val(R__X) < -28 || get_val(R__X) > 28 || get_val(R__Y) < -28 || get_val(R__Y) > 28) 
			{
			combo_stop(AA_XY);
			}
		}
 /*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |E|A|S|Y| |R|U|N| | | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if (Auto_Sprint){
if (!get_val(7)&& get_val(L__Y) < -25)combo_run (EASY_RUN);}

/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |T|U|R|B|O| |B|T|N| |A|.|K|.| |H|A|I|R| |T|R|I|G|G|E|R|S| | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/  
if (Hair_triggers==1){
deadzone(4,7,90,90);}
}
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 combo AA_XY {
    set_val(R__X,0);
    wait(aa_delay);
    set_val(R__X,a__p);
    wait(aa_delay);
    set_val(R__X, 0);
    wait(aa_delay);
    set_val(R__X,a__n * -1);
    wait(aa_delay);
}
   // Heal Swap Combo part

combo HEAL {
    set_val(13, 100); //--hold up
    wait(window_time);
    set_val(13, 100); //--hold up
    set_val(R__X,rs_x);
    set_val(R__Y,rs_y); //--set RX & RY
    wait(xy_time);  
    set_val(R__X,rs_x); //--hold briefly, release UP
    set_val(R__Y,rs_y);
    wait(30);
    wait(30); //--second wait() will return input to controller
    combo_count += 1; //add one
    w_x = inv(w_x); //reverse for next call 
    if(combo_count == 2){
    //flip the sign
    w_y = inv(w_y);
    combo_count = 0;} //--reset
    rs_x = 0; //--clear vals so combo only runs once
    rs_y = 0;
 }
combo Auto_Ping{
	set_val(PING, 100);
	wait(25);
	set_val(PING, 0);
	wait(55);
	set_val(PING, 100);
	wait(25);
}
combo Vibrate {
    set_rumble(RUMBLE_A, 100);
    wait(300);
    reset_rumble();
    wait(1000);
}
combo EASY_RUN {                  
    set_val(8,100);       
    wait(30);                     
    wait(100);      
}  
combo AimAbuse {
    set_val(7, 100);
    wait(HOLD);
    set_val(7, 0);
    wait(RELEASE);
    }

function p_complete() { 
    i_cnt++;
    if (i_cnt > AR[idx][0] * 10) {
        //--avoid stack overflow
        i_cnt = AR[idx][0] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
} 
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
        i_num = 0;
        //--adjust ar_y 
        ar_y += i_val;
    }
    return ar_y;
} 
function d___z(f_axis,f_val) {
    f_val = get_val(f_axis);
    if(abs(f_val) < 10) {
        set_val(f_axis,0); 
        return 0;
    }
    return f_val;
}
function y_val() {
    v = get_val(R__Y);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ar_y;           
}
function led_color(f_color) {
   for(i = 0; i <= 3; i++) {
     set_led(i,dbyte((f_color * 4) + i));
   }
}