/*
 █████╗  ██████╗ ██████╗     ███████╗ ██████╗ ██████╗ ████████╗███╗   ██╗██╗████████╗███████╗    ██╗   ██╗██╗  ██╗
██╔══██╗██╔═══██╗██╔══██╗    ██╔════╝██╔═══██╗██╔══██╗╚══██╔══╝████╗  ██║██║╚══██╔══╝██╔════╝    ██║   ██║██║  ██║
███████║██║   ██║██║  ██║    █████╗  ██║   ██║██████╔╝   ██║   ██╔██╗ ██║██║   ██║   █████╗      ██║   ██║███████║
██╔══██║██║   ██║██║  ██║    ██╔══╝  ██║   ██║██╔══██╗   ██║   ██║╚██╗██║██║   ██║   ██╔══╝      ╚██╗ ██╔╝╚════██║
██║  ██║╚██████╔╝██████╔╝    ██║     ╚██████╔╝██║  ██║   ██║   ██║ ╚████║██║   ██║   ███████╗     ╚████╔╝      ██║
╚═╝  ╚═╝ ╚═════╝ ╚═════╝     ╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═══╝╚═╝   ╚═╝   ╚══════╝      ╚═══╝       ╚═╝
                                                                                                                  */

/*
───▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───
───█▒▒░░░░░░░░░▒▒█───
────█░░█░░░░░█░░█────
─▄▄──█░░░▀█▀░░░█──▄▄─
█░░█─▀▄░░░░░░░▄▀─█░░█
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                            █
█ 							 █
█    						 █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█*/
/*
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█   Vibration Must on In Game█
█   Left Deadzone =  9       █
█   Right Deadzone = 10      █
█ 						     █
█      						 █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█*/
 /*
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                            █
█Instructions:               █
█Rapidfire: - L2+LEFT DPAD   █
█ANTI RECOIL - DEFAULT    	 █					
█DROPSHOT - L2+RIGHT DPAD    █
█PUMP+SMG = L2+UP DPAD		 █
█100% ACCURACY SHOT L2+R1    █
█FAST RESET - DPAD DOWN      █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█*/


//CONFIGURE YOUR SETTINGS HERE****** UNSURE? JUST MESSAGE ME
int EDIT_BUTTON = PS4_CIRCLE
int CONFIRM_BUTTON = PS4_CIRCLE
int RESET_BUTTON = PS3_R3

//Controls
define VIEW_BTN       = PS4_SHARE;
define MENU_BTN       = PS4_OPTIONS;
define RX_BTN         = PS4_RX;
define RY_BTN         = PS4_RY;
define LX_BTN         = PS4_LX;
define LY_BTN         = PS4_LY;
define UP_BTN         = PS4_UP;
define DOWN_BTN       = PS4_DOWN;
define LEFT_BTN  = PS4_LEFT;
define RIGHT__BTN = PS4_RIGHT;
define CONFIRM_BTN    = PS4_CIRCLE;
define SELECT_BTN     = PS4_R2;
define RESET_BTN      = PS4_R3;
define PICKAXR_BTN    = PS4_TRIANGLE;
define BUILD_BTN      = PS4_CIRCLE;
define INVENTORY_BTN     = PS4_UP;
define CROUCH_BTN     = PS4_R3;
define AIM_BTN        = PS4_L2;
define SHOOT_BTN       = PS4_R2;
define BACK_BTN       = PS4_L1;
define FORWARD       = PS4_R1;
define RELOAD_BTN     = PS4_SQUARE;
define JUMP_BTN       = PS4_CROSS;
define SPRINT_BTN     = PS4_L3;
define TOUCH      = PS4_TOUCH;


int AoD2321324411 = FALSE;
int AoD23213244112 = FALSE; 
int AoD23213244 = 30; 
int AoD232132445 = FALSE;
int AoDP = TRUE;
define AoD2200991153774923 = 36;     
define AoD220099115774923 = TRUE;
int AoD22009911577492    = TRUE
define AoD2200991157749   = 6; 
define AoD220099115774 = 2; 
define AoD2200991157 = 1;
define AoD22009911577 = 20;
int AoD220099115 = TRUE;
int AoD22009911	= 2;        
int AoD2200991 = 9;  
int AoD1122342145134 = 3;        
int AoD112234214513 = 3;           
int AoD11223421451 = 5;    
int AoD1122342145 = 5;   
int AoD112234214 = TRUE;
int AoD11223421 = TRUE;
int AoD1122342 = TRUE;
int AoD23213213       = TRUE;                
int AoD23      = TRUE;                
define AoD99312145      = 270;          
define AoD112      =  18;
define AoD1122      = 200;                
define AoD11223      = 250;
define AoD112234      =  19;  
define AoD2234          =  1;                 
define AoD22344           =  2;                 
define AoD223443         =  3;                 
define AoD993          =  4;                 
define AoD9931       =  5;                 
define AoD99312         =  6;                 
define AoD993121         =  7;                 

data( 1,                 
  2,0,0,0 ,                 
  0,2,0,0 ,                    
  0,0,2,0 ,             
  0,0,0,2 ,                 
  2,0,2,0 ,                
  0,0,0,0 ,                
  2,2,2,2                  
) 

int AoDTAP; 
int AoDTA2;
int AoDTA22, AoDTA223;       
int AoDTA2234, AoDTA22346;
int AoDTA223464, AoDTA2234644, AoDTA22346446, AoDTA2234644611;
init {
combo_run(AoD232132);
combo_run(AoD2321321311);
combo_run(AoD2321321)}
const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};

main {
	block_rumble();
	 if(AoD220099115) {
	  	AoDTA2234 += get_rtime();
  		if(!(AoDTA2234 % AoD2200991157)) {
    		AoDTA22346 = (AoDTA22346+AoD22009911577) % 360; 
  		}
    			if(AoD112234214){
					if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= AoD2200991 + 5) {
						if(get_val(PS4_L2) > 90 && !get_val(PS4_R2)){
							AoD232132441();	
						}
					}
				}
				if(AoD1122342){
					if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= AoD2200991 + 5) {
						if(get_val(PS4_L2) > 90 && !get_val(PS4_R2)){
							combo_run(AoD2321);	
						}
					}
					if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= AoD2200991 + 5) {
						if(get_val(PS4_L2) > 90 && !get_val(PS4_R2)){
							combo_run(AoD232132131123);	
						}
					}
				}
				if(AoD11223421){
					if(get_val(PS4_R2)){
						if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= AoD2200991 + 5) {
    						combo_run(AoD2321321311231);
    					}
    					if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) >= AoD2200991 + 5) {
    						combo_run(AoD23213213112314);
    					}
					}
				}
			}
     if(AoD22009911577492){                               
            if( get_val(PS4_L2) && get_val(PS4_R2 )) {      
                combo_run(AoD2);                 
            }                                          
            if( abs(get_val(PS4_RY)) > AoD2200991153774923 || abs(get_val(PS4_RX)) > AoD2200991153774923) { 
                combo_stop (AoD2);               
        }
     }
if (get_val(PS4_L2)) {
if (event_press(PS4_UP)) {
combo_run (AoD232);
combo_run (AoD232132);
AoD232132445 = !AoD232132445;
AoDTAP = FALSE;}
set_val(PS4_L3, 0);}
if (AoD232132445) {
if (AoDTA2) {
set_val(PS4_L2, 0);
set_val(PS4_R2, 0);}
if (get_val(PS4_L2) && event_press(PS4_R2)) {
if (!AoDTAP) { 
AoDTAP = TRUE;
combo_run(AoD232132131123141);
set_val(PS4_R2, 0);}
}
if (event_press(PS4_L2)) {
AoDTAP = FALSE;}
}
if(get_val(PS4_L2) && event_press(PS4_LEFT)) {
combo_run (AoD232);
combo_restart(AoD2321321311);
AoD2321324411=!AoD2321324411;}
if (AoD2321324411) {
if(get_val(PS4_R2)) {
combo_run (AoD2321321311231411);}
}
if(get_val(PS4_L2) && event_press(PS4_RIGHT)) {
combo_run (AoD232);
combo_restart(AoD2321321);
AoD23213244112=!AoD23213244112;}
if (AoD23213244112) {
if(get_val(PS4_R2)) {
combo_run (AoD232132131123141131);}
}
if(event_press(PS4_DOWN)){
  combo_run(AoD013001);
  set_val(DOWN_BTN, 0);
  }
if(AoD23213213) {
	if(get_val(PS4_L2)){   
   	combo_run(AoD23213213);}  
    if(get_val(PS4_RX)<-38  
     ||get_val(PS4_RX)> 37){  
    combo_stop(AoD23213213);}}
if (get_val(PS4_L2) && get_val(PS4_R1)) {
AoDP = !AoDP;
combo_run(AoD23213213112314113);
set_val(PS4_R1, 0);
} else {
combo_stop(AoD23213213112314113);
}				                          
if(AoD23) {			 
   	if(get_val(PS4_L2)>90){   
   	combo_run(AoD23213213112);}		  
   	if(event_release(PS4_L2)){
   	combo_stop(AoD23213213112);}}
if(abs(get_val(PS4_LY)) < 9 && abs(get_val(PS4_LX)) < 9 ){        
set_val(PS4_LY,0);                                                
set_val(PS4_LX,0); }                                               
if(abs(get_val(PS4_RY)) < 9 && abs(get_val(PS4_RX)) < 9 ){         
set_val(PS4_RY,0);                                                 
set_val(PS4_RX,0); }
    }


combo AoD013001{
wait(3);
set_val(EDIT_BUTTON,100);
wait(15);
set_val(RESET_BUTTON,100);
wait(12);
set_val(CONFIRM_BUTTON,100);
wait(12)
set_val(CONFIRM_BUTTON,100);
}
combo AoD2 {  
AoDTA22 = get_val(PS4_RY) + AoD2200991157749;      
if(AoDTA22 > 100) AoDTA22 = 100;      
offset(PS4_RY, AoDTA22);
AoDTA223 = get_val(PS4_RX) + AoD220099115774;   
if(AoDTA223 > 100) AoDTA223 = 100;  
offset(PS4_RX, AoDTA223);
}
combo AoD232 {     
set_rumble(RUMBLE_A, 85);      
wait(225);                         
reset_rumble();                    
}
combo AoD2321 {
offset(PS4_RX,AoD2200991 + AoD11223421451);
wait(30);
offset(PS4_RX,(AoD2200991 + AoD11223421451) * -1);
wait(30);
}  
combo AoD232132 {                                       
if(AoD232132445) LED_CM (AoD223443); 
else  LED_CM (AoD22344);
wait(1000);
LED_CM (AoD99312)
}
combo AoD2321321311 {                                       
if(AoD2321324411) LED_CM (AoD223443); 
else  LED_CM (AoD22344);
wait(1000);
LED_CM (AoD99312)
}
combo AoD2321321 {                                       
if(AoD23213244112) LED_CM (AoD223443); 
else  LED_CM (AoD22344);
wait(1000);
LED_CM (AoD99312)
}
combo AoD23213213 {		 	
set_val(PS4_RY, AoD112234);
wait(10);   
set_val(PS4_RY, -18);  
wait(10);   
set_val(PS4_RX, 18);   
wait(10); 
set_val(PS4_RX, -18); 
wait(10); 
set_val(PS4_RY, 18); 
wait(10);
set_val(PS4_RY, -18); 
wait(10); 
set_val(PS4_RX, 18); 
wait(10); 
set_val(PS4_RX, -18); 
wait(10);
} 
combo AoD23213213112 {         
set_val(PS4_L2, 100);
wait(AoD99312145);         
set_val(PS4_L2, 0);    
wait(AoD112);
}
combo AoD232132131123 {
offset(PS4_RX,AoD2200991 + AoD1122342145);
wait(30);
offset(PS4_RX,(AoD2200991 + AoD1122342145) * -1);
wait(30);
}
combo AoD2321321311231 {
offset(PS4_RX,AoD2200991 + AoD1122342145134);
wait(30);
offset(PS4_RX,(AoD2200991 + AoD1122342145134) * -1);
wait(30);
}
combo AoD23213213112314 {
offset(PS4_RX,AoD2200991 + AoD112234214513);
wait(40);
offset(PS4_RX,(AoD2200991 + AoD112234214513) * -1);
wait(40);
}                                    
combo AoD232132131123141 { 
AoDTA2 = TRUE;
set_val(PS4_R2, 100);
wait(10);
wait(10);
set_val(PS4_L2, 100);
set_val(PS4_L3, 100);
set_val(PS4_R1, 100);
wait(15);
AoDTA2 = FALSE;
} 
combo AoD2321321311231411 {
set_val(PS4_R2, 100); 
wait(35);
set_val(PS4_R2, 0); 
wait(25);
}
combo AoD232132131123141131 {
set_val(PS4_R3,100);
wait(40);
wait(AoD23213244);
set_val(PS4_R3,100);
}
combo AoD23213213112314113 {
set_val(PS4_R2,100);
wait(100);
wait(250);
set_val(PS4_R2,100);
}

function LED_CM(Colour) {            
    set_led(LED_1,dbyte(( Colour * 4)- 3     )); 
    set_led(LED_2,dbyte(((Colour * 4)- 3) + 1)); 
    set_led(LED_3,dbyte(((Colour * 4)- 3) + 2)); 
    set_led(LED_4,dbyte(((Colour * 4)- 3) + 3)); 
}
function Set_polar(stick, AoDTA22346, radius){
  AoDTA223464 = 7 + stick; 
  AoDTA2234644 = 8 + stick;
  if(AoDTA22346 < 0) AoDTA22346 = 360 + (AoDTA22346 % 360);
  AoDTA22346 = (AoDTA22346 + 90) % 360;
  radius = clamp(radius, 0, 100);
  AoDTA2234644611 = Polar_Array[AoDTA22346];
  AoDTA22346446 = Polar_Array[(AoDTA22346 + 90) % 360];
  offset(AoDTA223464, inv(radius * AoDTA22346446 / 100));
  offset(AoDTA2234644, inv(radius * AoDTA2234644611 / 100));
  return;
}
function offset(int axis, int offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return 
}

function AoD232132441() { 
Set_polar(2, AoDTA22346, AoD2200991 + AoD22009911);    
} 
function clamp(v, lo, hi) 
{
    if(v < lo) return lo;
    if(v > hi) return hi;
    return v;
}
