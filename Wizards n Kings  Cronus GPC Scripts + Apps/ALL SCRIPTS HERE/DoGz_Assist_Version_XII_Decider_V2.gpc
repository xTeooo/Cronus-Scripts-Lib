/* DoGz Assist Version XII Decider V2 

• Multiplying increment by 3 must not exceed Strength [Will still work just not as designed!] 

• Must be able to increment 3 times at least within strength value ( Increment * 4 = 20 [5 * 4] = OK) <== Default Example as ( 7 * 3 = 21 )  X Would Be To High!!!

Examples..

• If Strength = 15 [Max Increment Will Be 5] 
• If Strength = 20 [Max Increment Will Be 6]  
• If Strength = 30 [Max Increment Will Be 10] 

*/

define Ads    = PS4_L2;
define Fire   = PS4_R2;
define Reload = PS4_SQUARE;
define aimY   = PS4_RY;
define aimX   = PS4_RX;
define Up     = PS4_UP;
define Down   = PS4_DOWN;
define Left   = PS4_LEFT;
define Right  = PS4_RIGHT;
define On     = TRUE;
define Off    = FALSE;

int power,Ypower,Xpower,Power,CountPower,AxisXY,Increment,Shunt;

int Assist     = 3; // 1 = [Strength1 + Increment1] -- 2 = [Strength2 + Increment2] -- 3 = [Strength3 + Increment3] (Values in USE!!)

int Strength1  = 20;// Power/Strength of Aim Assist
int Increment1 = 5; // Must be able to increment 3 times at least within strength value ( Increment * 4 = 20 [5 * 4] = OK) <== Default Example as ( 7 * 3 = 21 )

int Strength2  = 10;// Power/Strength of Aim Assist
int Increment2 = 3; // Must be able to increment 3 times at least within strength value ( Increment * 4 = 20 [5 * 4] = OK) <== Default Example as ( 7 * 3 = 21 )

int Strength3  = 13;// Power/Strength of Aim Assist
int Increment3 = 4; // Must be able to increment 3 times at least within strength value ( Increment * 4 = 20 [5 * 4] = OK) <== Default Example as ( 7 * 3 = 21 )

int deadZone   = 7; // Deazone in game

int AimAssist = On; //Aim Assist Main Toggle
int Reducer   = On; //Reduces power on input (Stick movement)

main {

	if (AimAssist) {
	
	    if (event_press(Ads)) { 
	    	
	    	Power = On;
	    }
	    
	    else if (!get_ival(Ads) && event_press(Fire)) {
	    	
	    	Power = On;
	    }
	    
	    if (get_ival(Ads) || get_ival(Fire)) {
	    	
	    	AxisXY = isqrt(abs(get_ival(aimX)) * abs(get_ival(aimX)) + abs(get_ival(aimY)) * abs(get_ival(aimY)));
	    	
	    	if (Assist == 1)
	    		
	    		AimAssist(Strength1,Increment1);
	    
	    	if (Assist == 2)
	    		
	    		AimAssist(Strength2,Increment2);
	    		
	    	if (Assist == 3)
	    		
	    		AimAssist(Strength3,Increment3);
	    		
	    } else {
	    	
	    	CountPower = 0;
	    	power = Off;
	    }
	    
	    if (get_ival(Reload) && !get_ival(Ads) && !get_ival(Fire)) {
	    
	    	if (event_press(Up)) {
	    		
	    		Shunt = Up;
	    		Assist = 1;
			}
			
	    	if (event_press(Right)) {
	    		
	    		Shunt = Right;
	    		Assist = 2;
	    	}
	    	
	    	if (event_press(Down)) {
	    		
	    		Shunt = Down;
	    		Assist = 3;
	    	}
	    }
	}
	
	if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        
        } else {
                
            set_val (Shunt,Off);
        }
    }
}

function AimAssist (Strength,Step) {

	if (Power) {
		
		Ypower = Strength;
		Xpower = Strength * -1;
		Increment = Step;
		Power = Off;
	}
	
	if (!power) {
	
		Xpower += Increment;
		Ypower -= Increment;
	
	} else {
		
		Xpower -= Increment;
		Ypower += Increment;
	}
	
	CountPower ++;
	
	if (CountPower >= (Strength / Increment)) {
		
		power = !power;
		CountPower = 0;
	}	
	
	if (AxisXY > deadZone) {
	
		if (Reducer) {
		
			set_Val(aimY,(Ypower - Strength / 2));
			set_Val(aimX,(Xpower - Strength / 2 * -1));
		
		} else {
		
			set_val(aimY,(Ypower - Strength / 2) + get_ival(aimY));
			set_val(aimX,(Xpower - Strength / 2 * -1) + get_ival(aimX));	
		}
		
	} else {
		
		if (Reducer) {
				
			set_Val(aimY,(Ypower - Strength / 2));
			set_Val(aimX,(Xpower - Strength / 2 * -1));
			
		} else {
			
			set_val(aimY,(Ypower - Strength / 2));
			set_val(aimX,(Xpower - Strength / 2 * -1));
		}
	}
}

function set_Val(Input,Output) {

	set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}