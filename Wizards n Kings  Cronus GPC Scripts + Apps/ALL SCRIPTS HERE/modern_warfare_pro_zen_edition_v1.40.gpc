// GPC Online Library
// modern_warfare_pro_zen_edition_v1.40.gpc

/*
 /$$   /$$                               /$$                          
| $$$ | $$                              | $$                          
| $$$$| $$  /$$$$$$   /$$$$$$  /$$$$$$$$| $$$$$$$   /$$$$$$   /$$$$$$ 
| $$ $$ $$ /$$__  $$ /$$__  $$|____ /$$/| $$__  $$ |____  $$ /$$__  $$              GRAND MERCI À NOOZBAR POUR LA FABRICATION DE CE MODÈLE SCRIPT ET MERCI DE VOTRE SOUTIEN
| $$  $$$$| $$  \ $$| $$  \ $$   /$$$$/ | $$  \ $$  /$$$$$$$| $$  \__/
| $$\  $$$| $$  | $$| $$  | $$  /$$__/  | $$  | $$ /$$__  $$| $$                               VOUS AVEZ M'AIDÉ À APPRENDRE TELLEMENT DÉJÀ ET J'APPRÉCIE BEAUCOUP           
| $$ \  $$|  $$$$$$/|  $$$$$$/ /$$$$$$$$| $$$$$$$/|  $$$$$$$| $$    Script Owner   
|__/  \__/ \______/  \______/ |________/|_______/  \_______/|__/      
                                                                          
            

  $$$$$$$$                  /$$                           /$$           /$$  /$$$$$$   /$$      /$$$$$$    /$$        
|__  $$__/                 | $$                          | $$          |__/ /$$__  $$ | $$     /$$__  $$ /$$$$        
   | $$  /$$$$$$  /$$   /$$| $$  /$$$$$$   /$$$$$$   /$$$$$$$  /$$$$$$  /$$| $$  \__//$$$$$$  |__/  \ $$|_  $$        
   | $$ |____  $$| $$  | $$| $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$| $$| $$$$   |_  $$_/    /$$$$$$/  | $$        
   | $$  /$$$$$$$| $$  | $$| $$| $$  \ $$| $$  \__/| $$  | $$| $$  \__/| $$| $$_/     | $$     /$$____/   | $$        
   | $$ /$$__  $$| $$  | $$| $$| $$  | $$| $$      | $$  | $$| $$      | $$| $$       | $$ /$$| $$        | $$        
   | $$|  $$$$$$$|  $$$$$$$| $$|  $$$$$$/| $$      |  $$$$$$$| $$      | $$| $$       |  $$$$/| $$$$$$$$ /$$$$$$   Compiler/Editer     
   |__/ \_______/ \____  $$|__/ \______/ |__/       \_______/|__/      |__/|__/        \___/  |________/|______/      
                  /$$  | $$                                                                                           
                 |  $$$$$$/                                                                                           
                  \______/                                         


            36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\||||||||||||||||||||||||||||||  USED SOME STUFF FROM DOGZ & HE HELPED WITH POLAR AIM  |||||||||||||||||||||||||||||/
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936        36936
     36936   36936        36936
      369    36936          369
		   	  369	 
            
  PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ
/*=============================================================================================================================                                          
|                       PLEASE READ BELOW - BEFORE PROGRAMMING THE SCRIPT YOU NEED TO CHECK BELOW FIRST                       |                 
|==============================================================================================================================   
| Enable Or Disable If you want to use only 1 button to switch profile 1 or 2 |*/  define one_button_press = TRUE;          /*|  <--- 1 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Enable or Disable If you want to use 2 buttons to switch profiles 1 or 2    |*/  define two_button_press = TRUE;         /* |  <--- 2 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Choose your button for 1 button to switch profiles             |*/ define profile_switch_button1 = PS4_TRIANGLE;         /* |  <--- ONLY 1 BUTTON, CHOOSE YOUR BUTTON
===============================================================================================================================
| Choose your buttons for 2 buttons to switch profiles                |*/  define profile_switch_button2 = PS4_L2;         /* |  <--- 2 BUTTONS TO SWITCH PROFILES & CHOOSE YOUR BUTTONS
=======================================================================
|                                                                     |*/define profile_switch_button3 = PS4_DOWN;         /* |  <--- CHOOSE YOUR BUTTONS 
                                                                      =========================================================
| Warzone Loot is an additional profile (profile 3) below you can choose the buttons to switch without interfering with game  |
===============================================================================================================================
| HOLD L2 & tap UP to get in warzone profile                           |*/ define warzone_switch_button  = PS4_L2;         /* |  <--- WARZONE PROFILE IS A SEPERATE PROFILE BUTTONS CAN NOT BE THE SAME
| HOLD L2 & tap UP to get back out of warzone profile                   |*/define warzone_switch_button1 = PS4_UP;         /* |  <--- CHOOSE YOUR 2 BUTTONS TO ACTIVATE 

===============================================================================================================================
◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺		
____________________________________________________________________________________________________________________________________________________

											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
____________________________________________________________________________________________________________________________________________________

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸											
	
	OLED screen indications: 
                              ———————————————————————————————
		                      |        G   A   M   E        |
		                      |      T   I   T   L   E      |  
		                      |       Current profile       | 
		                      |     Current Weapon Name     |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModMenu: 
                              ———————————————————————————————
		- First line:         |       Active Mod Name       |
		- Second line:        |       Current profile       | ▻▻▻  This shows you which profile you are on in mod menu 
		- Third line          |       ON / OFF status       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModEdit: Can 
                              ———————————————————————————————
		- First line:         |      Active Value Name      |
		- Second line:        |       Current profile       | ▻▻▻  This shows which profile you are on, Primary,Secondary, Warzone  
		- Third line          |       Editable  Value       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModWeapon: To Enter WeaponMod Hold L2 & Press XBOX/PS button to enter
                              ———————————————————————————————
		- First line:         |       Current profile       | ▻▻▻  indicates which profile you are on
		- Second line:        |   Current Weapon Categoty   | ▻▻▻  indicates which weapon category you are on 
		- Third line          |     Current Weapon Name     | ▻▻▻  indicate which weapon you are on
                              ———————————————————————————————
                     ⬅⬅⬅ PRESS DPAD LEFT OR RIGHT to Navigate ➨➨➨
                      
                       ⬆    PRESS DPAD UP OR DOWN  to Navigate  ⬇
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜		

	OLED screen indications in KillSwitch: 
                              ———————————————————————————————
                              |         SCRIPT OFF          | ▻▻▻  indicate that the script is muted
                              |                             | 
                              |   Hold CIRCLE/B to turn ON  | 
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModWeapon:
	
	Open ModWeapon (L2/LT + PS/XBOX to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Warzone Profile) by typing TRIANGLE/Y
		To switch between Weapon Category and Weapon Name, press UP or DOWN
		When the second line (Weapon Category) is in large text, you can only navigate between the different categories with LEFT or RIGHT.
		When the third line (Weapon Name) is in large text, you can only navigate between the different weapons of the active category with LEFT or RIGHT.
		Tap CROSS/B to close ModWeapon and go to ModMenu
		Tap SQUARE/X to go back to ModWeapon if you are in ModMenu
		Hold L2/LT and tap PS/XBOX to close ModWeapon
		
		Hold CROSS/A 500ms to reset Antirecoil temporary values and Rate of Fire temporary values of the active profile
		
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModMenu:

	Open ModMenu (L2/LT + OPTIONS/MENU to open or exit)
		Choose which profile you want to modify (Primary, Secondary or SideArm) by typing TRIANGLE/Y
		Navigate between the different MODS with LEFT or RIGHT
			- tap UP to turn ON
			- tap DOWN to turn OFF 
		
		Activate the mods you want on each profile...
		
	If the mod displayed has one or more editable values, pressing CROSS/A will open the ModEdit
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModEdit:

		Navigate between the different value with LEFT or RIGHT
		Change/edit the value by holding down R1/RB then tap UP or RIGHT to increase value and tap DOWN or LEFT to decrease value
		
		To exit ModEdit and go back to ModMenu, tap CIRCLE/B

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
				           
	Save every values (only available if you are in ModMenu or ModEdit or ModWeapon)		
		- Tap PS/XBOX to save EVERY values, toggles, weapon category and weapon name, independently for EACH profiles 

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Speed toggles (outside Mod Menu/Edit/Weapon)
		- Hold aiming button and hold 300ms UP, DOWN, RIGHT or LEFT
			- UP for	RapidFire
		

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
	
	Switch profiles
		- In Game:
			- Tap TRIANGLE/Y to switch profile 1 and 2 (primary and secondary)
		- In Mod Menu/Edit/Weapon
			- Tap TRIANGLE/Y to loop profile 1, 2, 3, 1, 2, 3 ...

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Kill Switch (disable everything)
		- Turn ON to OFF or OFF to ON
			- Hold aiming button and tap SHARE/VIEW 
			- Tap PS/XBOX 
		- Turn ON (disable everything)
			- Tap OPTIONS/MENU
			- Tap Map button
		- Turn OFF (enable everything)
			- Double tap CIRCLE/B
			- Hold CIRCLE/B more than 600ms
			- Hold SQUARE/X more than 1000ms while on the map only (for fast travel)
		
____________________________________________________________________________________________________________________________________________________
*/	
 const int8 data1[]={-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,
	  -90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,
	  -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,
	  -14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,
	  51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,
	  92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,
	  99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,
	  70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,
	  13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,
	  -42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,
	  -78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,
	  -98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100}; // data = Not really needed operates the same as far as i can tell bro*/
											
// Data Array For DoNotAtMe Steady Aim
/*___________________________________________________________________________________________________________________________________________________
 

*/
// Text to display
    const string TITLE = "MW PRO 1.04";
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE= "SAVED";
	const string PROFILE_1 = " Primary ";      // primary weapon
	const string PROFILE_2 = " Secondary ";    // secondary weapon
	const string PROFILE_3 = " Warzone ";      // SideArm

	const string ALL = " All Profiles ";
	const string MUTE = "Script OFF";
	const string HOLD = "Hold CIRCLE/B";
	const string ACTIVE = "to turn ON"
	const string STANDARD = "Legacy";
	const string PROGRESS = "Progressive";
	const string ANTIRECOIL_VERTICAL = "AR Vertical";
	const string POLARASSIST = "Polar";
	const string STICKYASSIST = "Sticky"; 
    const string PRESS_A_TO_CONTINUE = "Press Cross/A ";
    
    const string BTN_LAYOUT_0  = "Default";
    const string BTN_LAYOUT_1_FL = "DefaultFL";
    const string BTN_LAYOUT_1  = "Tactical";
    const string BTN_LAYOUT_2_FL  = "TacFL";
    const string BTN_LAYOUT_2  = "Lefty";
    const string BTN_LAYOUT_3  = "N0M4D/Charlie";
    const string BTN_LAYOUT_4  = "N0M4D/Charlie Tac.";
    const string BTN_LAYOUT_5  = "N0M4D/Charlie Left";
    const string BTN_LAYOUT_6  = "Bumper Jumper";
    const string BTN_LAYOUT_7  = "Bumper Jumper Tac.";
    const string BTN_LAYOUT_8  = "1-Hand-Gunslinger";
    const string BTN_LAYOUT_9  = "Stick and Move";
    const string BTN_LAYOUT_10 = "Brawler";
    const string BTN_LAYOUT_11 = "Beast";
    const string FLIPPED       = "Flipped"; 
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mod Name
	const string ANTIRECOIL  = "AR Type";      // modName_idx = 0
	const string RAPIDFIRE   = "RapidFire";    // modName_idx = 1
	const string POLARAIM    = "AA Type";      // modName_idx = 2
	const string HOLD_BREATH = "Hold Breath";  // modName_idx = 3
	const string QUICKSCOPE  = "QuickScope"    // modName_idx = 4
	const string WARZONE     = "WarzoneMods";  // modName_idx - 5
    const string FIRE_MODS   = "Drop Mods";    // modName_idx = 6
    const string SWAP        = "Flipped/Tr";   // modName_idx = 7
	const string BTN_LAYOUT  = "BTN Layout";   // modName_idx = 8


// Index to find Mod Name string - switchable in game with left/right in ModMenu 
	int modName_idx;

// modName_idx # of the last Mod Name string - Used for cycle modName_idx
	define LAST_MODNAME_STRING = 8;
	
// # of the last modName_idx that has a value that can be edited
	define LAST_EDITABLE_STRING = 6;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Value Name
	// modName_idx = 0 = LEGACY AR String 
	const string ANTIRECOIL_START         = "AR Start"; 	// valName_idx = 0   
	const string ANTIRECOIL_END           = "AR End";		// valName_idx = 1
	const string ANTIRECOIL_TIME          = "AR Time";	    // valName_idx = 2
	const string ANTIRECOIL_HORIZONTAL    = "AR Horiz";     // valName_idx = 3
	// modName_idx = 2
	const string RATE_OF_FIRE = "Rounds/sec";			    // valName_idx = 4
	// modName_idx = 
    const string POLAR_RADIUS             = "Radius";       // valName_idx = 5
    const string POLAR_STEPS              = "Steps";        // valName_idx = 6
    const string STEADYAIMING             = "SteadyAim";    // valName_idx = 7
    // modName_idx = 5
    const string STICKYAIM_SIZE           = "Sticky Size";  // valName_idx = 8
    const string STICKYAIM_TIME           = "Sticky Time";  // valName_idx = 9
    // modName_idx = 6
    const string QUICKSCOPESPEED          = "QScopeDelay";  // valName_idx = 10
    // modName_idx = 7
    const string AUTO_PING                = "Enemy Ping";   // valName_idx = 11 
    const string ENEMYPINGBYFIRE          = "PingOnFire";   // valName_idx = 12 
    const string EASY_PLATE               = "Easy Plates";  // valName_idx = 13
    // modName_idx = 8
    const string PRONESHOT                = "Prone Shot";   // valName_idx = 14
	const string DROPSHOT                 = "Drop Shot";    // valName_idx = 15
 	const string BUNNYHOP                 = "Bunny Hop";    // valName_idx = 16
    const string CANCELSLIDE              = "CancelSlide";  // valName_idx = 17
    const string SLIDE_DROP               = "S_DropShot";   // valName_idx = 18
    const string SLIDE_SHOT               = "Slide Shot";   // valName_idx = 19
 	
	
// Index to find Value Name string - switchable in game with left/right in ModEdit 
	int valName_idx;
	
// valName_idx # of the last Value Name string - Used for cycle valName_idx
	define AMOUNT_OF_VALNAME_IDX = 19;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

// Full Automatic Category
	const string A_RIFLE_LABEL = "Assault R.";
	const string SMG_LABEL = "SMG";
	const string LMG_LABEL = "LMG";
// Semi Automatic Category	
	const string RIFLE_LABEL = "Rifle";
	const string SHOTGUN_LABEL = "ShotGun";
	const string SNIPER_LABEL = "Sniper";
	const string HANDGUN_LABEL = "HandGun";
	
// To define if RapidFire or BurstFire will be available with the current weapon category	
	define amount_fullauto_category = 3; // If a new full automatic Weapon Category is added, add it before RIFLE[][] and change this define

// To define the Weapon Category of each of the profiles independently
	int weapon_category[3];
	
// To define the Weapon Name of each of the profiles independently	
	int weapon_name[3]; 
	
// Used to define which category is available for each of the profiles (HANDGUN is only available for profile 3 - SideArm)
	define amount_weapon_category = 6; // 7 arrays, A_RIFLE, SMG, LMG, RIFLE...
// Maximum number of weapons stored in a single array
	define max_stored = 13;
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

// Weapon Caregory arrays with several pre-registered weapons (line) and the values antirecoil_start, antirecoil_end, antirecoil_time, antirecoil_horizontal (column)
// arrays below LMG have in addition to these values, the rate_of_fire value of each weapon
// the Time value for antirecoil must be divided by 100 before entering the array (you want a Time value of 1sec so 1000ms, you must enter 10 in the array)

const int16 A_RIFLE[][] = { // start, end, time, horiz
{ 34, 28, 45, -11,  0 }, // M4A1
{ 38, 29, 37,  -1,  0 }, // AK-47
{ 27, 24, 42, -13,  0 }, // M13
{ 25,  9, 25,   0,  0 }, // FR 5.56
{ 35, 27, 35,   0,  5 }, // Oden
{ 30, 12, 45,   4,  0 }, // Kilo 141
{ 30, 20, 25, -20,  8 }, // FAL
{ 42, 31, 10,   0,  0 }, // FN Scar 17
{ 35, 30, 25,  13,  0 }, // RAM 7
{ 0,  0,  0,   0,  0 }, // GRAU 5.56
{ 39, 28, 32,  -2,  0 }, // CR-56 AMAX
{ 0,  0,  0,   0,  0 }, // AN-94
{ 0,  0,  0,   0,  0 }  // Custom AR
};
	define amount_A_RIFLE = 13;
	 
	const string A_RIFLE_1  = "M4A1";        // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 0
	const string A_RIFLE_2  = "AK-47";       // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 1
	const string A_RIFLE_3  = "M13";         // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 2
	const string A_RIFLE_4  = "FR 5.56";     // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 3
	const string A_RIFLE_5  = "Oden";        // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 4
	const string A_RIFLE_6  = "Kilo 141";    // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 5
	const string A_RIFLE_7  = "FAL";         // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 6
	const string A_RIFLE_8  = "FN Scar 17";  // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 7
	const string A_RIFLE_9  = "RAM 7";       // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 8
	const string A_RIFLE_10 = "GRAU 5.56";   // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 9
	const string A_RIFLE_11 = "CR-56 AMAX";  // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 10
	const string A_RIFLE_12 = "AN-94";       // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 11
	const string A_RIFLE_13 = "Custom AR";   // weapon_category[profile_idx] = 0 and weapon_name[profile_idx] = 12 
	

const int16 SMG[][] = { // start, end, time, horiz
{ 29,  26, 36,  -6, 0 }, // MP5
{ 28,  23, 32,  -7, 0 }, // MP7
{ 28,  27, 25,  -8, 0 }, // AUG
{ 37,  20, 40, -11, 0 }, // P90
{ 30,  15, 40,  -7, 0 }, // PP19
{ 25,  19, 15,  -7, 0 }, // UZI
{ 37,  27, 40,   2, 0 }, // FENNEC
{ 30,  25, 15,  -5, 0 }, // ISO
{  0,   0,  0,   0, 0 }  // Custom weapon 
};
	define amount_SMG = 10;
	
	const string SMG_1 = "MP5";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 0
	const string SMG_2 = "MP7";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 1
	const string SMG_3 = "AUG";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 2
	const string SMG_4 = "P90";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 3
	const string SMG_5 = "PP19 Bizon";  // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 4
	const string SMG_6 = "Uzi";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 5
	const string SMG_7 = "Striker 45";  // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 6
	const string SMG_8 = "Fennec";      // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 7
	const string SMG_9 = "ISO";         // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 8
	const string SMG_10 = "Custom SMG"; // weapon_category[profile_idx] = 1 and weapon_name[profile_idx] = 9

const int16 LMG[][] = { // start, end, time, horiz
{ 37, 33,  0,   0, 0 }, // PKM
{ 30, 24, 25, -11, 0 }, // SA87
{ 32, 33, 45,   7, 0 }, // M91
{ 35, 32, 35,  -2, 0 }, // MG34
{ 33, 26, 30, -10, 0 }, // HOLGER -26
{ 32, 26, 80,   6, 0 }, // BRUEN
{ 29, 31, 66,   0, 0 }, // Finn
{  0,  0,  0,   0, 0 } // Custom Weapon 
};
	define amount_LMG = 8;
	
	const string LMG_1 = "PKM";        // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 0
	const string LMG_2 = "SA87";       // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 1
	const string LMG_3 = "M91";        // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 2
	const string LMG_4 = "MG34";       // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 3
	const string LMG_5 = "Holger-26";  // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 4
	const string LMG_6 = "Bruen Mk9";  // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 5
	const string LMG_7 = "Finn";       // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 6
	const string LMG_8 = "Custom LMG"; // weapon_category[profile_idx] = 2 and weapon_name[profile_idx] = 7
	

const int16 RIFLE[][] = { // start, end, time, horiz, RoF(val min = 60)
{ 0, 0, 0, 0, 0 }, // EBR-14
{ 0, 0, 0, 0, 0 }, // MK2 CARBINE
{ 0, 0, 0, 0, 0 }, // KAR98K
{ 0, 0, 0, 0, 0 }, // CROSSBOW
{ 0, 0, 0, 0, 0 }  // SKS

};
	define amount_RIFLE = 5;
	
	const string RIFLE_1  = "EBR-14";       // weapon_category[profile_idx] = 3 and weapon_name[profile_idx] = 0
	const string RIFLE_2  = "MK2 Carbine";  // weapon_category[profile_idx] = 3 and weapon_name[profile_idx] = 1
	const string RIFLE_3  = "Kar98k";       // weapon_category[profile_idx] = 3 and weapon_name[profile_idx] = 2
	const string RIFLE_4  = "Crossbow";     // weapon_category[profile_idx] = 3 and weapon_name[profile_idx] = 3
	const string RIFLE_5  = "SKS";          // weapon_category[profile_idx] = 3 and weapon_name[profile_idx] = 4


const int16 SHOTGUN[][] = { // start, end, time, horiz, RoF(val min = 60)
{ 0,  0, 0, 0, 0 }, // Model 680
{ 0,  0, 0, 0, 0 }, // R9-0
{ 0,  0, 0, 0, 0 }, // 725
{ 0,  0, 0, 0, 0 }, // Origin 12
{ 0,  0, 0, 0, 0 }  // VLK Rogue
};
	define amount_SHOTGUN = 5;
	
	const string SHOTGUN_1 = "Model 680";  // weapon_category[profile_idx] = 4 and weapon_name[profile_idx] = 0
	const string SHOTGUN_2 = "R9-0";       // weapon_category[profile_idx] = 4 and weapon_name[profile_idx] = 1
	const string SHOTGUN_3 = "725";        // weapon_category[profile_idx] = 4 and weapon_name[profile_idx] = 2
	const string SHOTGUN_4 = "Origin 12";  // weapon_category[profile_idx] = 4 and weapon_name[profile_idx] = 3
	const string SHOTGUN_5 = "VLK Rogue";  // weapon_category[profile_idx] = 4 and weapon_name[profile_idx] = 4

const int16 SNIPER[][] = { // start, end, time, horiz, RoF(val min = 60)
{ 0, 0, 0, 0, 0 }, // SVD
{ 0, 0, 0, 0, 0 }, // M700
{ 0, 0, 0, 0, 0 }, // M44
{ 0, 0, 0, 0, 0 }  // Mantis
};
	define amount_SNIPER = 4;
	
	const string SNIPER_1 = "Dragunov";  // weapon_category[profile_idx] = 5 and weapon_name[profile_idx] = 0
	const string SNIPER_2 = "HDR";       // weapon_category[profile_idx] = 5 and weapon_name[profile_idx] = 1
	const string SNIPER_3 = "AX-50";     // weapon_category[profile_idx] = 5 and weapon_name[profile_idx] = 2
	const string SNIPER_4 = "Rytec AMR"; // weapon_category[profile_idx] = 5 and weapon_name[profile_idx] = 3

const int16 HANDGUN[][] = {   // start, end, time, horiz, RoF(val min = 60)
{  0, 0,  0, 0, 0  }, // X16
{  0, 0,  0, 0, 0  }, // 1911
{  0, 0,  0, 0, 0  }, // .357
{  0, 0,  0, 0, 0 },  // M19
{  0, 0,  0, 0, 0 },  // .50S
{  0, 0,  0, 0, 0 }   // Renetti
};
	define amount_HANDGUN = 6;
	
	const string HANDGUN_1 = "X16";      // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 0
	const string HANDGUN_2 = "1911";     // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 1
	const string HANDGUN_3 = ".357";     // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 2
	const string HANDGUN_4 = "M19";      // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 3
	const string HANDGUN_5 = ".50GS";    // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 4
	const string HANDGUN_6 = "Renetti";  // weapon_category[profile_idx] = 6 and weapon_name[profile_idx] = 5
	

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// array column number - Buffer to add or substract edited value to corresponding value in the array
	
	int antirecoil_start[3]; 
	int antirecoil_end[3];
	int antirecoil_time[3];
	int antirecoil_horizontal[3]; 
	int rate_of_fire[3];
	

// Used to define how many values there are per line - used in display_edit() function 
	int AMOUNT_OF_VAL_IN_ARRAY = 5; // = 4 for A_RIFLE, SMG and LMG, 5 for RIFLE, SHOTGUN, SNIPER and HANDGUN (who have also Rate of Fire values)
	
// Adjustable value + array value = final value
	
	int final_antirecoil_start;
	int final_antirecoil_end;
	int final_antirecoil_time;
	int final_antirecoil_horizontal; 
	int final_rate_of_fire;
	

// Used to define Profiles and also define # of profile to find, edit, and display the right index 
	int profile_idx; 
		
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Multi toggles
	
	int toggle_antirecoil[3];  // for 3 Profiles: profile_idx = 0, 1 and 2
	int toggle_rapidfire[3];  
	int toggle_aa_type[3];
    int toggle_holdbreath[3]; // ItzSnack Hold Breath
    int toggle_quickscope[3];
// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 3;  
	
// Amount of multi toggle - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 5;
		
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mods (toggles and values) that activates for all profiles at the same time (if toggled ON
	int quickscopedelay; 
	int cancel_slide; 
	int easy_plate;
	int enemy_ping
	int pingonfire;
	int slide_shot;
	int slide_dropshot; 
	int toggle_proneshot;
	int toggle_dropshot;
	int toggle_bunnyhop;
	int Prone_Speed = 80; //Prone On Shot - How long before you prone
	int DS_Speed = 60; //Drop Shot
	int swap_on;
    define SSA1 = 84;
    define SSA2 = 65;
    define SSA3 = 89;
    define SSA4 = 76;
    define SSA5 = 79;
    define SSA6 = 82;
    define SSA7 = 68;
    define SSA8 = 82;
    define SSA9 = 73;
    define SSA10 = 70;
    define SSA11 = 82;
    define SSA13 = 50;
    define SSA14 = 49;
    define SAVER = 5000;
    define SAVER1 = 10;
	int SSMU1 = 1;
	int SSMU2 = 8;
	int SSMU3 = 15;
	int SSMU4 = 22;
	int SSMU5 = 29;
	int SSMU6 = 36;
	int SSMU7 = 43;
	int SSMU8 = 50;
	int SSMU9 = 57;
	int SSMU10 = 64;
	int SSMU11 = 71;
	int SSMU12 = 78;
	int SSMU13 = 85;
	int SSMU14 = 92;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};

// Buffer to display converted values 
	//int display_val;  
	
// Variables for function number_to_string() 
	int i;
	int c,c_val;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

 data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
         
// Refresh OLED
	int SCREENSAVER;
	int display_title;
	int display_new = TRUE; 
	int display_black;
	int warzone_loot_profile; // Special weapon
    int profile_1or2;
    
// Used to define text width, size and Y position (in display_weapon() function and in ModWeapon navigation)
	int active_name;
	int name_width;
	int name_font;
	int name_y;
	int cat_width;
	int cat_font;
	int profile_width;
	int profile_font;
	int profile_y;

// ModMenu / ModEdit / ModWeapon / KillSwitch
	int ModMenu;	
	int ModEdit;
	int ModWeapon = 1; 
	int KillSwitch;
	int btn_layout; 
	           
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
    // Anti Recoil                                                 
	int i_val;                                                        
	int i_pnt;                                                        
	int i_num;                                                        
	int i_cnt;                                                        
	int v,ar_y;
	int x_ref;
   
	
// RapidFire / BurstFire
	int hold_time;                                                    
	int rest_time;
	int led_on;
	int led_off;
	
// Counter
	int count_black;  // for screen saver
	
// Double Tap
	int double_tap;
// Sticky Aim 
    int stickyaim_size;
    int stickyaim_time;
    // DoNotAtMe Polar Aim Assist
   define X = XB1_RX;                                    
   define Y = XB1_RY;                                    
   define ACTIVE_WHEN_ADS    = TRUE;                     
   define ACTIVE_WHEN_FIRING = TRUE;                     
   int RADIUS;        
   int STEPS;   
   int STEADY_AIM;
   
   define STEP_INTERVAL =  1;                            
   define VM_INTERVAL   = -2; 
   int time;                                             
   int angle, cos_angle, sin_angle;                      
   int actual_X, actual_Y, actual_Magnitude, max_Magnitude,angle_Out;
   int STEADY_VALUE;
   
   const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
   80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
   6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
   -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
   -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
   -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
   -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
   9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
   82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 
	
	  // Double tap 
    int q;											
    int double__tap[30];
    init {
    while(q < 30) 
    {double__tap[q] = -1;       
    q++;}}
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 
init{
// Profile 1
	// Toggles                                                  // Values
	STEADY_AIM = (360 / STEADY_AIM) / 2;
	       
	toggle_antirecoil[0] = get_pvar(SPVAR_1, 0, 2, 0   );       antirecoil_start[0]       = get_pvar(SPVAR_6,  -99,  99, 0 );
	toggle_rapidfire[0]  = get_pvar(SPVAR_2, 0, 1, 0   );       antirecoil_end[0]         = get_pvar(SPVAR_7,  -99,  99, 0 );         
	toggle_holdbreath[0] = get_pvar(SPVAR_3, 0, 1, 0   );       antirecoil_time[0]        = get_pvar(SPVAR_8,  -99,  99, 0 );           
	toggle_aa_type[0]    = get_pvar(SPVAR_4, 0, 2, 0   );       antirecoil_horizontal[0]  = get_pvar(SPVAR_9, -99,  99, 0 );  
	toggle_quickscope[0] = get_pvar(SPVAR_5, 0, 1, 0   );       rate_of_fire[0]           = get_pvar(SPVAR_10,  1,  25, 1 );
	                                                           
// Profile 2
	// Toggles                                                  // Values
	      
	toggle_antirecoil[1] = get_pvar(SPVAR_11, 0, 2, 0  );       antirecoil_start[1]       = get_pvar(SPVAR_16, -99,  99, 0 ); 
	toggle_rapidfire[1]  = get_pvar(SPVAR_12, 0, 1, 0  );       antirecoil_end[1]         = get_pvar(SPVAR_17, -99,  99, 0 );        
	toggle_holdbreath[1] = get_pvar(SPVAR_13, 0, 1, 0  );       antirecoil_time[1]        = get_pvar(SPVAR_18, -99,  99, 0 );         
	toggle_aa_type[1]    = get_pvar(SPVAR_14, 0, 2, 0  );       antirecoil_horizontal[1]  = get_pvar(SPVAR_19, -99,  99, 0 );    
	toggle_quickscope[1] = get_pvar(SPVAR_15, 0, 1, 0  );       rate_of_fire[1]           = get_pvar(SPVAR_20,   1,  25, 1 );
	                                                           
	
// Profile 3
	// Toggles                                                  // Values
	      
	toggle_antirecoil[2] = get_pvar(SPVAR_21, 0, 2, 0  );       antirecoil_start[2]       = get_pvar(SPVAR_26, -99,  99, 0 );
	toggle_rapidfire[2]  = get_pvar(SPVAR_22, 0, 1, 0  );       antirecoil_end[2]         = get_pvar(SPVAR_27, -99,  99, 0 );             
	toggle_holdbreath[2] = get_pvar(SPVAR_23, 0, 1, 0  );       antirecoil_time[2]        = get_pvar(SPVAR_28, -99,  99, 0 );    
	toggle_aa_type[2]    = get_pvar(SPVAR_24, 0, 2, 0  );       antirecoil_horizontal[2]  = get_pvar(SPVAR_29, -99,  99, 0 );    
	toggle_quickscope[2] = get_pvar(SPVAR_25, 0, 1, 0  );       rate_of_fire[2]           = get_pvar(SPVAR_30,   1,  25, 1 );
	                                                          
	
// Misc toggles 
    swap_on              = get_pvar(SPVAR_31, 0, 1, 0  );       stickyaim_size            = get_pvar(SPVAR_32,  1, 50, 20  ); 
                                                                stickyaim_time            = get_pvar(SPVAR_33,  1, 99, 20  );
                                                                RADIUS                    = get_pvar(SPVAR_34,  1, 99, 20  );
	                                                            STEPS                     = get_pvar(SPVAR_35,  1, 99, 15  );
	                                                            STEADY_AIM                = get_pvar(SPVAR_36,  1, 90, 20  );
	                                                            quickscopedelay           = get_pvar(SPVAR_37,  50, 600,350);  
	                                                            
	weapon_category[0] = get_pvar(SPVAR_38, 0,(amount_weapon_category - 1), 0 );          weapon_name[0] = get_pvar(SPVAR_41, 0, (max_stored - 1), 0 ); 
	weapon_category[1] = get_pvar(SPVAR_39, 0,(amount_weapon_category - 1), 0 );          weapon_name[1] = get_pvar(SPVAR_42, 0, (max_stored - 1), 0 ); 
	weapon_category[2] = get_pvar(SPVAR_40, 0,(amount_weapon_category - 1), 0 );          weapon_name[2] = get_pvar(SPVAR_43, 0, (max_stored - 1), 0 );

    
    enemy_ping            = get_pvar(SPVAR_44, 0, 1, 0);        pingonfire               = get_pvar(SPVAR_48,  0, 1, 0 ); 
	easy_plate            = get_pvar(SPVAR_45, 0, 1, 0);        cancel_slide             = get_pvar(SPVAR_49,  0, 1, 0 );  
	toggle_proneshot      = get_pvar(SPVAR_46, 0, 1, 0);        toggle_dropshot          = get_pvar(SPVAR_50,  0, 1, 0 ); 
	toggle_bunnyhop       = get_pvar(SPVAR_47, 0, 1, 0);        slide_shot               = get_pvar(SPVAR_51,  0, 1, 0 );
    slide_dropshot        = get_pvar(SPVAR_52, 0, 1, 0);        btn_layout               = get_pvar(SPVAR_53,  0,11, 0 ); 


	
}

main { // main section start
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                         DEBUG                                                         |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
/*
	set_val(TRACE_1, profile_idx);
	set_val(TRACE_2, weapon_category[profile_idx]);
	set_val(TRACE_3, weapon_name[profile_idx]);
	set_val(TRACE_4, toggle_rapidfire[profile_idx]);
*/	set_val(TRACE_5, ModMenu);
	set_val(TRACE_6, ModWeapon);
		
	set_val(TRACE_1, valName_idx);
	set_val(TRACE_2, toggle_antirecoil[profile_idx]);
	set_val(TRACE_3, toggle_aa_type[profile_idx]);
	set_val(TRACE_4, toggle_rapidfire[profile_idx]);
	//set_val(TRACE_5, rate_of_fire[profile_idx]);
	//set_val(TRACE_6, final_rate_of_fire);
	

/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                    BUTTONS LAYOUT                                                     |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	buttons_layout();
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                      DOUBLE TAP                                                       |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
    if(double_tap) 
        double_tap -= get_rtime(); 

/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                       CROSSOVER                                                       |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
  if(get_controller() != PIO_PS4) // If XBOX controller:
    {
        if(get_console() == PIO_PS4) // If PS4 console:
        {
            swap(PS4_SHARE,PS4_TOUCH); // View = TouchPad
        
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) //  RS + View = ScreenShot
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
        }
	}

/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                  TOGGLE KILL SWITCH                                                   |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

if(!ModMenu && !ModEdit && !ModWeapon)
	{
	// KillSwitch ON or OFF method
		if( (get_ival(AIM_BTN) && event_press(PS4_SHARE)) || !get_ival(AIM_BTN) && event_press(PS4_PS)	)
		{			
			KillSwitch = !KillSwitch;
			
			if(KillSwitch) 
				combo_run(RUMBLE_OFF);	// rumble and LED blink
				
			else
				combo_run(RUMBLE_ON);	// rumble and LED blink
		
			display_title = TRUE; // display Title screen, profile, Weapon Name, active slot and killswitch
	    }
        if(KillSwitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) 
        { 
            KillSwitch = FALSE; 
            combo_run(RUMBLE_ON); 
            display_title = TRUE;// display Title screen, profile, Weapon Name, active slot and killswitch 
        }
	
} 
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                       IF KILL SWITCH IS OFF (SCRIPT IS ACTIVE)                                        |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
	if(!KillSwitch)
	{
	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                             TOGGLE MOD WEAPON AND MOD MENU                            |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(get_ival(AIM_BTN))
		{
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                          TOGGLE MOD WEAPON                            |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/	
				if(event_release(PS4_PS))
				{
					if(!ModMenu)
						ModWeapon = !ModWeapon;
					else
						ModMenu = FALSE;
					
					if(!ModWeapon)
					{
							
						combo_run(RUMBLE_OFF);  // rumble and LED blink
						display_title = TRUE;   // display Title screen, profile, Weapon Name, active slot and killswitch
					}
					
					if(ModWeapon)
					{
						ModMenu = FALSE;      // close ModMenu
						ModEdit = FALSE;      // close ModEdit
						combo_run(RUMBLE_ON); // rumble and LED blink
						display_new = TRUE;	  // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
					}
				}
			
				
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                           TOGGLE MOD MENU                             |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
				if(event_release(PS4_OPTIONS))
				{
					if(!ModWeapon)
						ModMenu = !ModMenu;
					else
						ModWeapon = FALSE;
						
					if(!ModMenu)
					{
						ModEdit = FALSE; 		// close ModEdit
						combo_run(RUMBLE_OFF);  // rumble and LED blink
						display_title = TRUE;   // display Title screen, profile, Weapon Name, active slot and killswitch
					}
					
					if(ModMenu)
					{
						ModWeapon = FALSE;      // close ModWeapon
						modName_idx = 0;        // start to the first adjustable value (vals_available function do the correction to find the right idx)
						combo_run(RUMBLE_ON);	// rumble and LED blink
						display_new = TRUE;		// display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
					}
				}
		// Block buttons
			set_val(PS4_SHARE, 0);		   
			set_val(PS4_OPTIONS, 0);		
			set_val(PS4_PS, 0);				
		} // L2/LT section end
		
	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                                  MOD WEAPON IS ACTIVE                                 |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/	
		if(ModWeapon) //  So !ModMenu && !ModEdit too
		{
		// From ModWeapon to ModMenu when taping CIRCLE/B
			if(event_press(PS4_CIRCLE))
			{
				ModMenu = TRUE;
				ModWeapon = FALSE;
				display_new = TRUE;
			}	
		
		// Select Weapon Category or Weapon Name
			if(event_press(PS4_UP) || event_press(PS4_DOWN))
			{
				active_name = !active_name; // change active MEDIUM display
				display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
			}
		// Switch inside Weapon Category or inside Weapon Name		
			if(event_press(PS4_RIGHT))
			{
			// Switch Weapon Category 
				if(!active_name)
					weapon_category[profile_idx] += 1;
			// Switch Weapon Name
				else
					weapon_name[profile_idx] += 1;
					
				display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
			}
			if(event_press(PS4_LEFT))
			{
			// Switch Weapon Category 
				if(!active_name)
					weapon_category[profile_idx] -= 1;
			// Switch Weapon Name
				else
					weapon_name[profile_idx] -= 1;
					
				display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
			}
            if(weapon_category[profile_idx] > amount_weapon_category)
					weapon_category[profile_idx] = 0;
				else if(weapon_category[profile_idx] < 0)
					weapon_category[profile_idx] = amount_weapon_category;
	// Limits for Weapon Name
			weapon_name_limits(0, amount_A_RIFLE);
			weapon_name_limits(1, amount_SMG    );
			weapon_name_limits(2, amount_LMG    );
			weapon_name_limits(3, amount_RIFLE  );
			weapon_name_limits(4, amount_SHOTGUN);
			weapon_name_limits(5, amount_SNIPER );
			weapon_name_limits(6, amount_HANDGUN);
				
		// Reset temp value
			if(get_ival(PS4_CROSS) && get_ptime(PS4_CROSS) == 500)
			{
			   
				antirecoil_start[profile_idx]      = 0;
				antirecoil_end[profile_idx]        = 0;
				antirecoil_time[profile_idx]       = 0;
				antirecoil_horizontal[profile_idx] = 0;
				rate_of_fire[profile_idx]          = 0;
				combo_run(RUMBLE_ON);
				display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
			}
		} // ModWeapon section end	

	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                                   MOD MENU IS ACTIVE                                  |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(ModMenu)
		{
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                           TOGGLE FOR MODS                             |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
			
	
		    if(modName_idx != 3 && modName_idx <= LAST_EDITABLE_STRING) 
			{ 
			// Turn ModEdit ON
				if(event_press(PS4_CROSS) && !ModEdit) 
				{
					valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // always display first val names available when enter in edition mod
					ModEdit = TRUE;
					combo_run(RUMBLE_ON);
					display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
				}
			// Turn ModEdit OFF
				if(event_press(PS4_CIRCLE) && ModEdit)
				{
					ModEdit = FALSE;
					combo_run(RUMBLE_OFF);
					display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
				}
		    } 
		
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                          MOD EDIT IS ACTIVE                           |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/	
			if(ModEdit)
			{
			/*— ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — °
			|                EDIT ADJUSTABLE VALUES                 |
			° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° —*/
			// Edit value: hold R1/RB + UP (+1 or +10) or DOWN (-1 or -10) or RIGHT (+10 or +100) or LEFT (-10 or -100)	
				if(get_ival(PS4_L2)) 
				{
				// Mods that may have different values depending on the active Profile
				
	    		  //val_I_want_to_edit[profile] = edit_val( corresponding valName_idx , val_I_want_to_edit[profile], range min(positive val only) , range max, increase/decrease by X with RIGHT/LEFT, increase/decrease by X with UP/DOWN); 	
					
					antirecoil_start[profile_idx]      = edit_val( 0 , antirecoil_start[profile_idx]     , 99 , 99 , 1 , 10   ); 
					antirecoil_end[profile_idx]        = edit_val( 1 , antirecoil_end[profile_idx]       , 99 , 99 , 1 , 10   ); 
					antirecoil_time[profile_idx]       = edit_val( 2 , antirecoil_time[profile_idx]      , 0  , 99 , 1 , 10   );  
				    antirecoil_horizontal[profile_idx] = edit_val( 3 , antirecoil_horizontal[profile_idx], 99 , 99 , 1 , 10   );
					rate_of_fire[profile_idx]          = edit_val( 4 , rate_of_fire[profile_idx]         , 0  , 25 , 1 , 10   );
			        RADIUS                             = edit_val( 5 , RADIUS                            , 0  , 99 , 1 , 10   );
                    STEPS                              = edit_val( 6 , STEPS                             , 0  , 99 , 1 , 10   ); 
                    STEADY_AIM                         = edit_val( 7 , STEADY_AIM                        , 0  , 90 , 1 , 10   ); 
                    stickyaim_size                     = edit_val( 8 , stickyaim_size                    , 0  , 50 , 1 , 10   );
                    stickyaim_time                     = edit_val( 9 , stickyaim_time                    , 0  , 990, 1 , 10   );
				    quickscopedelay                    = edit_val( 10 , quickscopedelay                  , 0  , 600, 1 , 10   ); 
				} // SQUARE section end

			/*— ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — °
			|  FIND AVAILABLE VALUES AND NAVIGATION BETWEEN VALUES  |
			° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° —*/
				else // if NOT SQUARE
				{
				
				
					if(event_press(PS4_RIGHT))
					{
						valName_idx += 1;
						 
						
					// Limits for Standard Anti-Recoil	
						if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2)
						{								
							if(valName_idx == 2)
								valName_idx = 3;
							if(valName_idx > 3)
								valName_idx = 1;
						}
						
						display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
					}
					if(event_press(PS4_LEFT))
					{
						valName_idx -= 1;
					// Limits for Standard Anti-Recoil 
						if(modName_idx == 0 &&  toggle_antirecoil[profile_idx] == 2)
						{	
							if(valName_idx == 2)
								valName_idx = 1;
							if(valName_idx < 1)
								valName_idx = 3;
						}
						
						display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
					}
			    enemy_ping                     = toggle(valName_idx, 11, enemy_ping       );
			    pingonfire                     = toggle(valName_idx, 12, pingonfire       );
			    easy_plate                     = toggle(valName_idx, 13, easy_plate       );
			    toggle_proneshot               = toggle(valName_idx, 14, toggle_proneshot );
                toggle_dropshot                = toggle(valName_idx, 15, toggle_dropshot  ); 
                toggle_bunnyhop                = toggle(valName_idx, 16, toggle_bunnyhop  );  
                cancel_slide                   = toggle(valName_idx, 17, cancel_slide     ); 
                slide_dropshot                 = toggle(valName_idx, 18, slide_dropshot   ); 
                slide_shot                     = toggle(valName_idx, 19, slide_shot       ); 
					   
			// Available values for each of the mods (exemple: Anti-Recoil (modName_idx = 0) have 4 values per profile: valName_idx = 0 for antirecoil_start[<active profile>], = 1 for antirecoil_end[], = 2 for antirecoil_time[], = 3 for antirecoil_horizontal[]  
				 // if(modName_idx == 0) <so if I display Anti-Recoil>  vals_available( 0 , 3  ); <vals_available are valName_idx 0, 1, 2 and 3>
					if(modName_idx == 0) 
					{
						if(toggle_antirecoil[profile_idx] == 2)
							vals_available( 1 , 3  );// AntiRecoil Standard
						else
							vals_available( 0 , 3  );// AntiRecoil Progressive
					}
					    				
					if(modName_idx == 1) vals_available( 4 , 4  );// Rapid Fire
					
					if(modName_idx == 2) 
					{
					   if(toggle_aa_type[profile_idx] == 1) 
					       vals_available( 5 , 7 );// Polar Aim
					    else 
					       vals_available( 8 , 9 ); 
					}       
					
					if(modName_idx == 4) vals_available( 10, 10 ); 
					if(modName_idx == 5) vals_available( 11, 13 ); 
					if(modName_idx == 6) vals_available( 14, 19 ); 
					
					
				
					
				} // NOT SQUARE section end
			
			} // ModEdit section end
			
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                        MOD EDIT IS NOT ACTIVE                         |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
			else // if NOT ModEdit
			{	
			// From ModMenu to ModWeapon when taping SQUARE/X
				if(event_press(PS4_SQUARE))
				{
					ModMenu = FALSE;
					ModWeapon = TRUE;
					display_new = TRUE;
				}
			/*— ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — °
			|                  MOD NAME NAVIGATION                  |
			° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° —*/
			// Navigate mods name
				if(event_press(PS4_RIGHT))
				{
					modName_idx += 1;	
					display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
				}
				
				if(event_press(PS4_LEFT))
				{
					modName_idx -= 1;
					display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
				}
				
				if(event_release(PS4_TRIANGLE))
				{	
					display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
				}
				
			// Cycle mods name
				if(modName_idx > LAST_MODNAME_STRING)  
					modName_idx = 0;
				if(modName_idx < 0)
					modName_idx = LAST_MODNAME_STRING;
					
			/*— ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — °
			|                    TOGGLE FOR MODS                    |
			° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° — ° —*/
			// Tap UP to turn ON, DOWN to turn OFF
	    		// Mods that may have different ON/OFF status depending on the active Profile
	    		
			//toggle_I_want_to_edit[profile]  = toggle( corresponding modName_idx, toggle_I_want_to_edit[profile] );
				//toggle_legacy_ar[profile_idx]  = toggle( 0, toggle_legacy_ar[profile_idx]);
				toggle_antirecoil[profile_idx] = toggle(modName_idx, 0, toggle_antirecoil[profile_idx] );
				toggle_rapidfire[profile_idx]  = toggle(modName_idx, 1, toggle_rapidfire[profile_idx]  );
			    toggle_aa_type[profile_idx]    = toggle(modName_idx, 2, toggle_aa_type[profile_idx]    ); 
			    toggle_holdbreath[profile_idx] = toggle(modName_idx, 3, toggle_holdbreath[profile_idx] );
			    toggle_quickscope[profile_idx] = toggle(modName_idx, 4, toggle_quickscope[profile_idx] );
			    swap_on                        = toggle(modName_idx, 7, swap_on                        ); 
				btn_layout                     = toggle(modName_idx, 8, btn_layout                     );
				
			} // NOT ModEdit section end
			
		} // ModMenu section end
		
	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                            MOD MENU OR MOD WEAPON IS ACTIVE                           |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(ModMenu ||  ModWeapon) // ModEdit inclued
		{
		// Save everything
			if(!get_val(PS4_L2) && event_press(PS4_PS))
				save();
				
		// block ALL inputs (exept L2_R2_RX_RY_LX_LY to test antirecoil, rapidfire and burstfire against a wall without leaving ModEdit and ModMenu)	
			block_btn(); // user function
			//block_all_inputs(); // build in function
			
		// Switch profiles (but not in ModEdit)	
			if(event_press(PS4_TRIANGLE) && !ModEdit)
			{
				profile_idx += 1;
				
				display_new = TRUE;  // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
			}
		// Cycle profiles	
			if(profile_idx > (AMOUNT_OF_PROFILES - 1))
				profile_idx = 0;
		}

	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                      FIND FINAL ANTIRECOIL AND RAPIDFIRE VALUES                       |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
	// Defines the amount of value that the active (profile_idx) Weapon Category array has

		
			
	// Find final values in relation to Weapon Category array		
		if(weapon_category[profile_idx] == 0) 
		{
		    
			final_antirecoil_start      = A_RIFLE[weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = A_RIFLE[weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = A_RIFLE[weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
			final_antirecoil_horizontal = A_RIFLE[weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = A_RIFLE[weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}	
		
		if(weapon_category[profile_idx] == 1) 
		{
		   
			final_antirecoil_start      = SMG  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = SMG  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = SMG  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
			final_antirecoil_horizontal = SMG  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = SMG  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}
		
		if(weapon_category[profile_idx] == 2) 
		{
		 
			final_antirecoil_start      = LMG  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = LMG  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = LMG  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
			final_antirecoil_horizontal = LMG  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = LMG  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}	
			
		if(weapon_category[profile_idx] == 3) 
		{
		   
			final_antirecoil_start      = RIFLE  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = RIFLE  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = RIFLE  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
			final_antirecoil_horizontal = RIFLE  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = RIFLE  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}
			
		if(weapon_category[profile_idx] == 4) 
		{
		  
			final_antirecoil_start      = SHOTGUN  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = SHOTGUN  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = SHOTGUN  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
		    final_antirecoil_horizontal = SHOTGUN  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = SHOTGUN  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}
			
		if(weapon_category[profile_idx] == 5) 
		{
		   
			final_antirecoil_start      = SNIPER  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = SNIPER  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = SNIPER  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
			final_antirecoil_horizontal = SNIPER  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = SNIPER  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}
		
		if(weapon_category[profile_idx] == 6) 
		{
		    
			final_antirecoil_start      = HANDGUN  [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx];
			final_antirecoil_end        = HANDGUN  [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx];
			final_antirecoil_time       = HANDGUN  [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx];
		    final_antirecoil_horizontal = HANDGUN  [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx];
			final_rate_of_fire          = HANDGUN  [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx];
		}
	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|                    NOT MOD MENU (NOT MOD EDIT) AND NOT MOD WEAPON                     |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(!ModMenu && !ModWeapon)
		{
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|                               FEATURES                                |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
		
		// Hair Trigger
			deadzone(PS4_L2,PS4_R2,99,99);
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
			if(get_val(warzone_switch_button) && event_release(warzone_switch_button1))
	      	{
	        	profile_idx = 2; 
	       		warzone_loot_profile = !warzone_loot_profile; 
	        	display_title = TRUE;
	       
	      	}
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

		// Speed Toggles
		
		
		// Bolck RapidFire Speed Toggle for full auto weapon
			//if(weapon_category[profile_idx] >= amount_fullauto_category) 
				toggle_rapidfire[profile_idx]  = speed_toggle( AIM_BTN, PS4_UP, toggle_rapidfire[profile_idx] , 1 );
		// Bolck BurstFire Speed Toggle for semi auto weapon	
			//if(weapon_category[profile_idx] < amount_fullauto_category) 
   	 	
  			if(toggle_aa_type[profile_idx]== 1)
			{
    			
  				actual_X = get_val(X);
		  		actual_Y = get_val(Y);
		  		actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));
		  		max_Magnitude = (actual_Magnitude < 100);
  
				if (!(time++ % STEP_INTERVAL))
				{
    				angle += STEPS;
  				}
  				angle = angle % 360;
  				sin_angle = Polar_Array[angle % 360];
		  		cos_angle = Polar_Array[(angle + 270) % 360];
		  		cos_angle = (cos_angle * RADIUS) / 100;
		  		sin_angle = (sin_angle * RADIUS) / 100;
		  
  				if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN))))
   				{ 
    				vm_tctrl(VM_INTERVAL);
    				if (actual_Magnitude <= RADIUS)
    				{
      					sin_angle -= actual_Y;
      					cos_angle -= actual_X;
    				}
    				else 
    				{
				      	sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
				      	cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
				    }
    				set_val(X, calculate(actual_X + cos_angle, -100, 100));
    				set_val(Y, calculate(actual_Y + sin_angle, -100, 100));
  				}
 				else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) {
    				vm_tctrl(0); 
  				}
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
            }    
               
    		if(toggle_aa_type[profile_idx] == 2)
  			{
			    if(get_val(AIM_BTN))
			   		combo_run(STICKY_AIM);
			    else 
			    	combo_stop(STICKY_AIM); 
			    	  	
			} 
			
	   		if(toggle_holdbreath[profile_idx] == 1)
	   		{
	          	if(get_val(AIM_BTN))
					set_val(SPRINT_BTN, 100);
	                      
	          	if(get_val(PS4_LY) <-90 && get_val(AIM_BTN) && get_ptime(AIM_BTN) > 200)
	              	combo_stop(CH);       
	                    
	          	if(event_press(AIM_BTN)) 
	              	combo_run(CH);
	  
	          	if(get_val(AIM_BTN) && get_lval(SPRINT_BTN)) 
	              	set_val(SPRINT_BTN, 0);       
	  		}
	 
	  		if(enemy_ping)
	  		{
		  		if(get_val(AIM_BTN) && double_click(PS4_UP))
		      		combo_run(auto_ping);        
	      
	  		}
	  		
	  		if(enemy_ping && pingonfire)
	  		{ 
	     		if(event_press(FIRE_BTN))
	       			combo_run(auto_ping); 
	  		}     
			  
	  		if(easy_plate)
	  		{
		  		if(get_val(SWITCH_BTN)&&get_ptime(SWITCH_BTN)>350)
			  		combo_run(easy_plate);
			    
		  		if(get_val(AIM_BTN)>10 || get_val(FIRE_BTN)>10 || get_val(RELOAD_BTN))
			  		combo_stop(easy_plate);	
	  		}
			
	  		if(toggle_quickscope[profile_idx] == 1)
	  		{
	      		if(event_release(AIM_BTN) && get_ptime(AIM_BTN) < 140)
	          		combo_run(Quick_Scope);
	  		}
	  		
	  		if(cancel_slide)  
	  		{                                                                                                  
	    		if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
	    		{
			      	if(event_release (CROUCH_BTN))
			         	combo_run(CANCEL_SLIDE)                                            
		    	}                                 
	 		} 
	 		
	 		if(toggle_proneshot) 
	 		{ 
	     		if(get_val(FIRE_BTN) && get_ptime(FIRE_BTN) > Prone_Speed)
	          		set_val(CROUCH_BTN,100);
	          
	 		}
	 
	 		if(toggle_dropshot) 
	 		{ 
	     		if(get_val(FIRE_BTN))
	            	combo_run(DS);
	 		}
	 
	 		if(toggle_bunnyhop) 
	 		{ 
	     		if (get_val(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) 
	             	combo_run(BUNNYHOP); 
	 		}  
	 		
	 		if(slide_dropshot)
	 		{ 
				if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
				{   
	             	if(event_release(CROUCH_BTN))
	                 	combo_run(SLIDE_DROPSHOT);           
		   		}                                                   
	 		}  
	 		
			if(slide_shot) 
			{
				if(abs(get_val(PS4_LY)) > 65 || abs(get_val(PS4_LX)) > 65)
			    {
					if(event_release(CROUCH_BTN))
		            	combo_run(SLIDE_SHOT); 
	      		} 
	 		}
		/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
		|              FEATURES THAT NOT ACTIVE WITH SPECIAL WEAPON             |
		¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
			//if(!special_weapon)
			//{
	// Switch Profiles - tap TRIANGLE/Y to switch profile 1 or 2 - double tap for profile 3 - hold R3/RS + tap for sync color
			if(one_button_press) 
			{ 
				if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150)
        		{
        	    	profile_1or2=!profile_1or2; 
        	    	
     
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	} 
     
           	  if(two_button_press) 
           	  { 
           		if(get_ival(profile_switch_button2) && (event_press(profile_switch_button3)))
        		{
        	    	profile_1or2=!profile_1or2;
        	    
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	} 
      
                  if(!warzone_loot_profile)
                  {
    				if(profile_1or2)
	    				profile_idx = 1;
	    		
	    			// If Profile 1
	    			else 	
	    				profile_idx = 0; 
           }      
    
	} // ModMenu OFF end
		
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		
			// NOT Secial Weapon section end
			
		// NOT ModMenu (and NOT ModEdit) and !ModWeapon section end
		
	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|   FEATURES THAT NOT ACTIVE WITH SPECIAL WEAPON OR MOD WEAPON BUT WORKS ON MOD MENU    |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(!ModWeapon)
		{
		// AntiRecoil
			// AntiRecoil
			// AntiRecoil
			if(toggle_antirecoil[profile_idx])
			{
			// Antirecoil Standard final value
				if(toggle_antirecoil[profile_idx] == 2)
					final_antirecoil_start = final_antirecoil_end;
			// AntiRecoil vertical		
	    		if(final_antirecoil_start < final_antirecoil_end)
	    	   		i_val = 1; 
	    		else
	    	    	i_val = -1;
	    		i_pnt = (final_antirecoil_time * 10) / (abs(final_antirecoil_start - final_antirecoil_end)); 
	    	
	    		if(!get_val(FIRE_BTN)) 
	    		{
					ar_y = final_antirecoil_start;
	    	    	i_cnt = 0;
	    	    	i_num = 0;
	    		}     
	    		
	    	// Run AntiRecoil
	    	    if(get_val(FIRE_BTN))
	    		{
	    	    	if(!p_complete())  
						ar_y = p_val();
	    	    	else
	    	        	ar_y = final_antirecoil_end;
	            
					if(y_val() < 100)
	           			set_val(PS4_RY,y_val()); 
	           			
	    		// Run combo for AntiRecoil Horizontal
					combo_run(X_VAL);	
	    		}
	    		
	    	// Stop AntiRecoil Horizontal combo
	    		if(abs(get_val(PS4_RX)) > abs(final_antirecoil_horizontal) + 5)
	  	  			combo_stop(X_VAL);
			}
	
	

	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		
		// RapidFire
			if(toggle_rapidfire[profile_idx] == 1)
			{
		   hold_time = 500 / final_rate_of_fire; 
           rest_time = hold_time - 20;
           if(rest_time < 0) rest_time = 0;
	    	// Run combo
	    		if(get_val(FIRE_BTN))
	    			combo_run(RAPIDFIRE);
	    		else
	    			combo_stop(RAPIDFIRE);
	    		
	    		led_on = 150;
	    		led_off = 300;
	    		combo_run(BLINK);
			}
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
	
	
			
		}// NOT Special weapon and NOT ModWeapon section end

	/*— x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x
	|               DISPLAY EVERYTHING IN MOD MENU, MOD EDIT AND MOD WEAPON                 |
	x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x — x —*/
		if(display_new) 
		{
		    SCREENSAVER = FALSE; // Clear OLED screen	
			cls_oled(0);    		
			rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    		line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
			count_black = 0;

			if(ModEdit)
			{
		    // Display Value Name and value
	    		// Mods that may have different values depending on the active Profile
	    		
			    // Display_edit( corresponding valName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , val_I_want_to_be_displayed[profile] );
				
				    display_edit( 0  , center_x(sizeof(ANTIRECOIL_START)     - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0]      , antirecoil_start[profile_idx]      );
				
				if(toggle_antirecoil[profile_idx] == 2) // if Standard AntiRecoil
					display_edit( 1  , center_x(sizeof(ANTIRECOIL_VERTICAL)  - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_VERTICAL[0]   , antirecoil_end[profile_idx]        );
				else
					display_edit( 1  , center_x(sizeof(ANTIRECOIL_END)       - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_END[0]        , antirecoil_end[profile_idx]        );
				    display_edit( 2  , center_x(sizeof(ANTIRECOIL_TIME)      - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_TIME[0]       , antirecoil_time[profile_idx]       );
			        display_edit( 3  , center_x(sizeof(ANTIRECOIL_HORIZONTAL)- 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] );
				    display_edit( 4  , center_x(sizeof(RATE_OF_FIRE)         - 1, OLED_FONT_MEDIUM_WIDTH) , RATE_OF_FIRE[0]          , rate_of_fire[profile_idx]          );
                    display_edit( 5  , center_x(sizeof(POLAR_RADIUS)         - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_RADIUS[0]          , RADIUS                             );
                    display_edit( 6  , center_x(sizeof(POLAR_STEPS)          - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_STEPS[0]           , STEPS                              );
                    display_edit( 7  , center_x(sizeof(STEADYAIMING)         - 1, OLED_FONT_MEDIUM_WIDTH) , STEADYAIMING[0]          , STEADY_AIM                         );
                    display_edit( 8  , center_x(sizeof(STICKYAIM_SIZE)       - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_SIZE[0]        , stickyaim_size                     );
                    display_edit( 9  , center_x(sizeof(STICKYAIM_TIME)       - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_TIME[0]        , stickyaim_time                     );
                    display_edit( 10 , center_x(sizeof(QUICKSCOPESPEED)      - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPESPEED[0]       , quickscopedelay                    );
                    display_mod1( 11 , center_x(sizeof(AUTO_PING)            - 1, OLED_FONT_MEDIUM_WIDTH) , AUTO_PING[0]             , enemy_ping                         ); 
                    display_mod1( 12 , center_x(sizeof(ENEMYPINGBYFIRE)      - 1, OLED_FONT_MEDIUM_WIDTH) , ENEMYPINGBYFIRE[0]       , pingonfire                         );
                    display_mod1( 13 , center_x(sizeof(EASY_PLATE)           - 1, OLED_FONT_MEDIUM_WIDTH) , EASY_PLATE[0]            , easy_plate                         );
                    display_mod1( 14 , center_x(sizeof(PRONESHOT)            - 1, OLED_FONT_MEDIUM_WIDTH) , PRONESHOT[0]             , toggle_proneshot                   );
                    display_mod1( 15 , center_x(sizeof(DROPSHOT)             - 1, OLED_FONT_MEDIUM_WIDTH) , DROPSHOT[0]              , toggle_dropshot                    );
                    display_mod1( 16 , center_x(sizeof(BUNNYHOP)             - 1, OLED_FONT_MEDIUM_WIDTH) , BUNNYHOP[0]              , toggle_bunnyhop                    );
                    display_mod1( 17 , center_x(sizeof(CANCELSLIDE)          - 1, OLED_FONT_MEDIUM_WIDTH) , CANCELSLIDE[0]           , cancel_slide                       ); 
                    display_mod1( 18 , center_x(sizeof(SLIDE_DROP)           - 1, OLED_FONT_MEDIUM_WIDTH) , SLIDE_DROP[0]            , slide_dropshot                     );
                    display_mod1( 19 , center_x(sizeof(SLIDE_SHOT)           - 1, OLED_FONT_MEDIUM_WIDTH) , SLIDE_SHOT[0]            , slide_shot                         ); 
				// Mods that have same value on every Profile
				
			
				
				// Display Profile only on mods that may have a different value depending on the Profile
				if(valName_idx < AMOUNT_OF_VAL_IN_ARRAY) // idx from 0 to 4 are mods that may have a different value depending on the Profile
					display_profile ();
				else // Mods that have the same value on every profiles, display EVERY PROFILES
	    			printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); 
			}
			else if(ModWeapon)
			{
			// Display active Profile
				display_profile (); 
	    	// Display active Weapon Category and Name
	    		display_weapon();
			}
			else 
			{
		    // Display Mod Name and ON/OFF
	    		// Mods that may have different ON/OFF status depending on the active Profile
	    		
			   // Display_mod( corresponding modName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , toggle_I_want_to_be_displayed[profile]);
				
				display_mod ( 0 , center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0]  , toggle_antirecoil[profile_idx]);
				display_mod ( 1 , center_x(sizeof(RAPIDFIRE)  - 1, OLED_FONT_MEDIUM_WIDTH) , RAPIDFIRE[0]   , toggle_rapidfire[profile_idx] );
		        display_mod ( 2 , center_x(sizeof(POLARAIM)   - 1, OLED_FONT_MEDIUM_WIDTH) , POLARAIM[0]    , toggle_aa_type[profile_idx]   );
		        display_mod ( 3 , center_x(sizeof(HOLD_BREATH)- 1, OLED_FONT_MEDIUM_WIDTH) , HOLD_BREATH[0] , toggle_holdbreath[profile_idx]);
			    display_mod ( 4 , center_x(sizeof(QUICKSCOPE) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPE[0]  , toggle_quickscope[profile_idx]);
		        display_mod2( 5 , center_x(sizeof(WARZONE)    - 1, OLED_FONT_MEDIUM_WIDTH) , WARZONE[0]                                     );
                display_mod2( 6 , center_x(sizeof(FIRE_MODS)  - 1, OLED_FONT_MEDIUM_WIDTH) , FIRE_MODS[0]                                   );
                display_mod ( 7 , center_x(sizeof(SWAP)       - 1, OLED_FONT_MEDIUM_WIDTH) , SWAP[0]        , swap_on                       );
				display_mod ( 8 , center_x(sizeof(BTN_LAYOUT) - 1, OLED_FONT_MEDIUM_WIDTH) , BTN_LAYOUT[0]  , btn_layout                    );
				
				
				// Display Profile only on mods that may have different ON/OFF status depending on the active Profile
				if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) // idx from 0 to 4 are mods that may have different ON/OFF status depending on the active Profile
					display_profile ();
				else // Mods that have the same toggle on every profiles, display EVERY PROFILE
	    			printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); 
			}
			
			display_black = TRUE;
	        display_new = FALSE;
	        
	    } // display_new section end
	    
	} // !KillSwitch section end
// back to main section

/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                           DISPLAY TITLE - KILLSWITCH - PROFILE - WEAPON NAME - # SLOT                                 |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
// Display Script Title    
    if(display_title)
    {
    	cls_oled(0);	// clear OLED screen
    	SCREENSAVER = FALSE;
    	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
    	count_black = 0;// reset screen saver timer
    	active_name = FALSE;    		
            
    	if(KillSwitch)
    	{
    		printf(center_x(sizeof(MUTE)   - 1, OLED_FONT_MEDIUM_WIDTH),8 ,OLED_FONT_MEDIUM,OLED_WHITE,MUTE  [0]);    // Script OFF
    		printf(center_x(sizeof(HOLD)   - 1, OLED_FONT_SMALL_WIDTH) ,38,OLED_FONT_SMALL ,OLED_WHITE,HOLD  [0]);     // hold CIRCLE/B
    		printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH) ,50,OLED_FONT_SMALL ,OLED_WHITE,ACTIVE[0]); // to turn ON
    	}
    	else
    	{
           printf(center_x(sizeof(TITLE)   - 1, OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]);	// display TITLE centered in X 
    	// Display active Weapon Name    		
			display_weapon();

    	// Display profile name
    		if(warzone_loot_profile)
    		{
    			//printf(center_x(sizeof(SPECIAL) - 1, OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,SPECIAL[0]);
    			printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]);
    		}
    		else 
				display_profile ();
    	
    		display_black = TRUE;	// screen saver
    	}
    	
    	display_title = FALSE;
    }
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                     SCREEN SAVER                                                      |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
    if(display_black && !ModMenu && !KillSwitch && !ModWeapon)
    {
    	count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_black = FALSE;
    		SCREENSAVER = TRUE;
    	}
    }
    if (SCREENSAVER) { 
		DGT += get_rtime();
		if (DGT >= 100) {
			SD1 += 2;
			TP1 += 1;
			TP2 -= 1;
			DGT  = 0;
		}
				DGR += get_rtime();
				
				if (DGR >= 30) {
					Y_1 += 1;
					Y_2 += 2;
					Y_3 += 3;
					Y_4 += 4;
					Y_5 += 5;
					Y_6 += 6;
					Y_7 += 7;
					Y_8 += 8;
					DGR  = 0;
				}
						NAME();
						MSC += get_rtime();
						if(MSC >= 1000) {
							MSC = 0;
							RT += 1;
						}
							if(RT == 90) {
								SCREENSAVER = 0;
								RT = 0;
								cls_oled(0);		
							}
						}
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                      COLOR LED                                                        |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	if(KillSwitch)
		led(7);

	else
		led(profile_idx);
		
} // main section end
/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                  MAIN SECTION END                                                     |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                   COMBO SECTION                                                       |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
combo STICKY_AIM {
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
    wait(stickyaim_time);
    }   

combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
	}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				   // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
	}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo BLINK {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
    }

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜  

combo RAPIDFIRE { 
    wait(hold_time);
    set_val(FIRE_BTN, 0);
    wait(rest_time);
    }


combo X_VAL { // Antirecoil Horizontal
	x_ref = get_val(PS4_RX) + final_antirecoil_horizontal;
    if(x_ref > 100) x_ref = 100;
    set_val(PS4_RX, x_ref);
	}
combo CANCEL_SLIDE {              
    set_val(CROUCH_BTN, 100);          
    wait(120);                         
    set_val(CROUCH_BTN, 0);            
    wait(60);                          
    set_val(CROUCH_BTN, 100);          
    wait(50);                          
    set_val(CROUCH_BTN, 100);          
    set_val(JUMP_BTN, 100);           
    wait(60);                          
    set_val(CROUCH_BTN, 0);            
    set_val(JUMP_BTN, 100);          
    wait(10);                        
    set_val(JUMP_BTN, 0);         
} 
 combo DS {
    set_val(CROUCH_BTN,100);
    wait(40);
    set_val(CROUCH_BTN,0);
    wait(DS_Speed);}
combo BUNNYHOP
{
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
}
combo SLIDE_DROPSHOT {
 	set_val(CROUCH_BTN, 100);
	wait(1300);
	set_val(CROUCH_BTN, 0);
	wait(2000);//1610
	set_val(CROUCH_BTN, 100);
	wait(1000);
	set_val(CROUCH_BTN, 0);
	
 }
combo SLIDE_SHOT {
    set_val(CROUCH_BTN,100);
    wait(380);
    wait(50);
if (toggle_rapidfire[profile_idx] == 1){ 
    combo_run(RAPIDFIRE);
}
else
    set_val(FIRE_BTN,100);
    wait(1000);
   
} 
combo Quick_Scope {
 set_val(AIM_BTN,100);
 wait(quickscopedelay); 
 set_val(AIM_BTN,100);
 set_val(FIRE_BTN,100);
 wait(40);
 set_val(AIM_BTN,100);
 wait(40); }        
   
 combo CH {
	set_val(SPRINT_BTN,0);
	wait(60);
	set_val(SPRINT_BTN,100);
	wait(110);
	set_val(SPRINT_BTN,0);
	wait(110);}

combo auto_ping
	{set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	}
combo easy_plate
	{set_val(SWITCH_BTN,100);
	wait(6000)}//time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}	
int sin_angle1,cos_angle1; 
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
function Set_polar1(stick,angle,radius,offset) {
if (angle < 0) 
	angle = 360 + (angle % 360);
	
	angle = (angle + 90) % 360;
	sin_angle1 = data1[angle];
  	cos_angle1 = data1[(angle + 90) % 360];
if (offset) {
    offset1(7 + stick, (cos_angle1 * radius) / 100);
    offset1(8 + stick, (sin_angle1 * radius) / 100);
  	} 
else {
    set_val(7 + stick, (cos_angle1 * radius) / 100);
    set_val(8 + stick, (sin_angle1 * radius) / 100);
  	}
  	return;
}

function atan2(y, x) {
if (x >= 0 && y > 0) 
	angle_Out = -90;
else if (x  < 0 && y >= 0) 
	angle_Out = 90;
else if (x <= 0 && y < 0) 
	angle_Out = -270;
else 
	angle_Out = 270;
	
	x = abs(x);
  	y = abs(y);
if (x < y) 
	angle_Out += (x * 45 / y);
else if (x > y) 
	angle_Out += 90 - (y * 45 / x);
else 
	angle_Out += 45;

  	angle_Out = abs(angle_Out % 360);
		return (angle_Out);
}

function offset1(axis,offset_val) {
  	set_val(axis,clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100));
  		return;
}
function map (inMin,inMax,outMin,outMax,x) {
  	return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}    
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     


/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
|                                                 FUNCTION SECTION                                                      |
◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
// Antirecoil
function p_complete() { 

    i_cnt++;
    if(i_cnt > final_antirecoil_time * 10) 
    {
        i_cnt = final_antirecoil_time * 10;
        return 1;
    }    
    return 0;
}  

function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  

function y_val() {
    v = get_val(PS4_RY);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > abs(ar_y + 5))
        return v;
    return v + ar_y;
}

function weapon_name_limits(f_cat, f_limit) { // weapon_name_limits(0,amount_A_RIFLE)
	if(weapon_category[profile_idx] == f_cat)
	{
		if(weapon_name[profile_idx] >= f_limit)
			weapon_name[profile_idx] = 0;
		if(weapon_name[profile_idx] < 0)
			weapon_name[profile_idx] = f_limit - 1;
	}
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods
	
	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )
	
	if(valName_idx == f_idx)
	{
    // +1 or -1															 // We can add function variable for increase/decrease to define if we increase/decrease by 1, 10, 100 ...
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
	}
	
// Block Rate of Fire to 60RPM minimum 
	if(weapon_category[profile_idx] == 0 && (rate_of_fire[profile_idx] < inv(A_RIFLE[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(A_RIFLE[weapon_name[profile_idx]][4]) + 1;	
	if(weapon_category[profile_idx] == 1 && (rate_of_fire[profile_idx] < inv(SMG[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(SMG[weapon_name[profile_idx]][4]) + 1;
	if(weapon_category[profile_idx] == 2 && (rate_of_fire[profile_idx] < inv(LMG[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(LMG[weapon_name[profile_idx]][4]) + 1;
	if(weapon_category[profile_idx] == 3 && (rate_of_fire[profile_idx] < inv(RIFLE[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(RIFLE[weapon_name[profile_idx]][4]) + 1;
	if(weapon_category[profile_idx] == 4 && (rate_of_fire[profile_idx] < inv(SHOTGUN[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(SHOTGUN[weapon_name[profile_idx]][4]) + 1;
	if(weapon_category[profile_idx] == 5 && (rate_of_fire[profile_idx] < inv(SNIPER[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(SNIPER[weapon_name[profile_idx]][4]) + 1;
	if(weapon_category[profile_idx] == 6 && (rate_of_fire[profile_idx] < inv(HANDGUN[weapon_name[profile_idx]][4]) + 1))
		rate_of_fire[profile_idx] = inv(HANDGUN[weapon_name[profile_idx]][4]) + 1;
			
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function toggle(f_var, f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(modName/valName, 1, PS4_UP, toggle_antirecoil[profile_idx]);
	
	if(event_press(PS4_UP))
	{
		if(f_var == f_idx)
		{
			if(modName_idx == 0 || modName_idx == 2)
			{
			// Increase
				f_val += 1;
			// Limits
				if(f_val > 2)
					f_val = 0;
				if(f_val < 0)
					f_val = 2;
			}
			else if(modName_idx == 8) 
			{
			// Increase
				f_val += 1;
			// Limits
				if(f_val > 11)
					f_val = 0;
				if(f_val < 0)
					f_val = 11;
			}
			else
				f_val = 1;
		
		// Rumble	
			if(f_val == 0) //if OFF
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
	}

	if(event_press(PS4_DOWN))
	{
		if(f_var == f_idx)
		{
			if(modName_idx == 0 || modName_idx == 2) // if AntiRecoil MOD
			{
			// Decrease
				f_val -= 1;
			// Limits
				if(f_val > 2)
					f_val = 0;
				if(f_val < 0)
					f_val = 2;
			}
			else if(modName_idx == 8) 
			{
			// Decrease
				f_val -= 1;
			// Limits
				if(f_val > 11)
					f_val = 0;
				if(f_val < 0)
					f_val = 11;
			}
			else
				f_val = 0;
		
		// Rumble	
			if(f_val == 0) //if OFF
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);	
		}
		
		display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
	}
	
	return f_val;
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function speed_toggle(f_hold, f_press, f_val, f_string) {  // toggle_aimassist[profile_idx] = speed_toggle(PS4_R3, PS4_UP, toggle_aimassist[profile_idx], #cons_string for this toggle);
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 50)) // Hold second button 300ms or more
		{
			modName_idx = f_string;
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else
			{
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

function display_profile() {

	if(display_title)
	{
		profile_width = OLED_FONT_SMALL_WIDTH;
		profile_font = OLED_FONT_SMALL;
		profile_y = 34;
	}
	if(display_new) 
	{
		if(ModWeapon)
		{
			profile_width = OLED_FONT_MEDIUM_WIDTH;
			profile_font = OLED_FONT_MEDIUM;
			profile_y = 3;
		}
		else
		{
			profile_width = OLED_FONT_SMALL_WIDTH;
			profile_font = OLED_FONT_SMALL;
			profile_y = 23;
		}
		
	}

	if(profile_idx == 0) 
		printf(center_x(sizeof(PROFILE_1) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_1[0]); // print Profile 1
	else if(profile_idx == 1)
		printf(center_x(sizeof(PROFILE_2) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_2[0]); // print Profile 2
	else if(profile_idx == 2)
		printf(center_x(sizeof(PROFILE_3) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_3[0]); // print Profile 3

}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

function display_edit(f_idx, f_string, f_print, f_val) { // display_edit(0 , center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0] , antirecoil_start[profile_idx]);
	
    if(valName_idx == f_idx)
    {
	// Display value name
    	printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    	
    // Display all editable values in the arrays (every AntiRecoil values and RoF values)
    	if(f_idx < AMOUNT_OF_VAL_IN_ARRAY)
    	{
    		if(weapon_category[profile_idx] == 0)
    		{
    			if(f_idx == 2)
    				number_to_string((A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 1)
    		{
    			if(f_idx == 2)
    				number_to_string((SMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(SMG[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SMG[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 2)
    		{
    			if(f_idx == 2)
    				number_to_string((LMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((LMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(LMG[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(LMG[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 3)
    		{
    			if(f_idx == 2)
    				number_to_string((RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(RIFLE[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(RIFLE[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 4)
    		{
    			if(f_idx == 2)
    				number_to_string((SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 5)
    		{
    			if(f_idx == 2)
    				number_to_string((SNIPER[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SNIPER[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(SNIPER[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SNIPER[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    			
    		if(weapon_category[profile_idx] == 6)
    		{
    			if(f_idx == 2)
    				number_to_string((HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100));
    			else
    				number_to_string(HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val));
    		}
    	}
  
    // Display editable values that are not in the arrays (every values exept AntiRecoil values and RoF values)
    	else 
    		number_to_string(f_val, find_digits(f_val));
    }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function  NAME(){
		cls_oled(0);
		combo_run(RACE);
		combo_run(RN);
	if (Y_1 > 64)  
		Y_1 =  0;
	if (Y_2 > 64)  
		Y_2 =  0;
	if (Y_3 > 64)  
		Y_3 =  0;
	if (Y_4 > 64)  
		Y_4 =  0;
	if (Y_5 > 64)  
		Y_5 =  0;
	if (Y_6 > 64)  
		Y_6 =  0;
	if (Y_7 > 64)  
		Y_7 =  0;
	if (Y_8 > 64)  
		Y_8 =  0;
	if (SD1 > 105) 
		SD1 = -50;
	if (TP1 > 45)  
		TP1 =  0;
	if (TP2 < 0)   
		TP2 = 55;
		putc_oled(1,RN1);
		puts_oled(X_1,Y_1,0,1,1);
		putc_oled(1,RN2);
		puts_oled(X_2,Y_2,0,1,1);
		putc_oled(1,RN3);
		puts_oled(X_3,Y_3,0,1,1);
		putc_oled(1,RN4);
		puts_oled(X_4,Y_4,0,1,1);
		putc_oled(1,RN5);
		puts_oled(X_5,Y_5,0,1,1);
		putc_oled(1,RN6);
		puts_oled(X_6,Y_6,0,1,1);
		putc_oled(1,RN7);
		puts_oled(X_7,Y_7,0,1,1);
		putc_oled(1,RN8);
		puts_oled(X_8,Y_8,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
		putc_oled(1,SSA2);
		puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
		putc_oled(1,SSA3);
		puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
		putc_oled(1,SSA4);
		puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
		putc_oled(1,SSA5);
		puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
		putc_oled(1,SSA6);
		puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
		putc_oled(1,SSA7);
		puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
		putc_oled(1,SSA8);
		puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1);
		putc_oled(1,SSA9);
		puts_oled(SSMU9 + SD1,TP1 + 18,0,1,1);
		putc_oled(1,SSA10);
		puts_oled(SSMU10 + SD1,TP2 + 20,0,1,1);
		putc_oled(1,SSA11);
		puts_oled(SSMU11 + SD1,TP1 + 22,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU12 + SD1,TP2 + 24,0,1,1);
		putc_oled(1,SSA13);
		puts_oled(SSMU13 + SD1,TP1 + 26,0,1,1);
		putc_oled(1,SSA14);
		puts_oled(SSMU14 + SD1,TP2 + 28,0,1,1);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_weapon () {

	if(!active_name)
	{
		name_width = OLED_FONT_SMALL_WIDTH;
		name_font = OLED_FONT_SMALL;
		name_y = 50;
		cat_width = OLED_FONT_MEDIUM_WIDTH;
		cat_font = OLED_FONT_MEDIUM;
	}
	else
	{
		name_width = OLED_FONT_MEDIUM_WIDTH;
		name_font = OLED_FONT_MEDIUM;
		name_y = 43;
		cat_width = OLED_FONT_SMALL_WIDTH;
		cat_font = OLED_FONT_SMALL;
	}
	
// Display active Weapon Category and Name
    if(weapon_category[profile_idx] == 0) 
    {
    // Display active Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(A_RIFLE_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,A_RIFLE_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(A_RIFLE_1) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(A_RIFLE_2) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(A_RIFLE_3) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(A_RIFLE_4) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_4[0]);
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(A_RIFLE_5) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_5[0]);
    	if(weapon_name[profile_idx] == 5)
    		printf(center_x(sizeof(A_RIFLE_6) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_6[0]);
    	if(weapon_name[profile_idx] == 6)
    		printf(center_x(sizeof(A_RIFLE_7) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_7[0]);
    	if(weapon_name[profile_idx] == 7)
    		printf(center_x(sizeof(A_RIFLE_8) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_8[0]);
    	if(weapon_name[profile_idx] == 8)
    		printf(center_x(sizeof(A_RIFLE_9) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_9[0]);
    	if(weapon_name[profile_idx] == 9)
    		printf(center_x(sizeof(A_RIFLE_10) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_10[0]);
    	if(weapon_name[profile_idx] == 10)
    		printf(center_x(sizeof(A_RIFLE_11) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_11[0]);
    	if(weapon_name[profile_idx] == 11)
    		printf(center_x(sizeof(A_RIFLE_12) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_12[0]);
    	if(weapon_name[profile_idx] == 12)
    		printf(center_x(sizeof(A_RIFLE_13) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_13[0]);
    }
    if(weapon_category[profile_idx] == 1)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(SMG_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SMG_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(SMG_1) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(SMG_2) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(SMG_3) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(SMG_4) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_4[0]);
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(SMG_5) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_5[0]);
    	if(weapon_name[profile_idx] == 5)
    		printf(center_x(sizeof(SMG_6) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_6[0]);
    	if(weapon_name[profile_idx] == 6)
    		printf(center_x(sizeof(SMG_7) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_7[0]);
    	if(weapon_name[profile_idx] == 7)
    		printf(center_x(sizeof(SMG_8) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_8[0]);
        if(weapon_name[profile_idx] == 8)
    		printf(center_x(sizeof(SMG_9) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_9[0]);
        if(weapon_name[profile_idx] == 9)
    		printf(center_x(sizeof(SMG_10) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_10[0]);	
    }
    
    if(weapon_category[profile_idx] == 2)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(LMG_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,LMG_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(LMG_1) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(LMG_2) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(LMG_3) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(LMG_4) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_4[0]);
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(LMG_5) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_5[0]);
    	if(weapon_name[profile_idx] == 5)
    		printf(center_x(sizeof(LMG_6) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_6[0]);
    	if(weapon_name[profile_idx] == 6)
    		printf(center_x(sizeof(LMG_7) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_7[0]);
    	if(weapon_name[profile_idx] == 7)
    		printf(center_x(sizeof(LMG_8) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_8[0]);	
    
    }
    if(weapon_category[profile_idx] == 3)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(RIFLE_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,RIFLE_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(RIFLE_1) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(RIFLE_2) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(RIFLE_3) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(RIFLE_4) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_4[0]);
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(RIFLE_5) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_5[0]);
    
    }
    if(weapon_category[profile_idx] == 4)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(SHOTGUN_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SHOTGUN_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(SHOTGUN_1) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(SHOTGUN_2) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(SHOTGUN_3) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(SHOTGUN_4) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_4[0]);
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(SHOTGUN_5) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_5[0]);
    		
    }
    if(weapon_category[profile_idx] == 5)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(SNIPER_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SNIPER_LABEL[0])
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(SNIPER_1) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(SNIPER_2) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(SNIPER_3) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(SNIPER_4) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_4[0]);
    }
    if(weapon_category[profile_idx] == 6)
    {
    // Display Weapon Category
    	if(display_new)
    		printf(center_x(sizeof(HANDGUN_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,HANDGUN_LABEL[0]);
    // Display active Weapon Name
    	if(weapon_name[profile_idx] == 0)
    		printf(center_x(sizeof(HANDGUN_1) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_1[0]);
    	if(weapon_name[profile_idx] == 1)
    		printf(center_x(sizeof(HANDGUN_2) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_2[0]);
    	if(weapon_name[profile_idx] == 2)
    		printf(center_x(sizeof(HANDGUN_3) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_3[0]);
    	if(weapon_name[profile_idx] == 3)
    		printf(center_x(sizeof(HANDGUN_4) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_4[0]);	
    	if(weapon_name[profile_idx] == 4)
    		printf(center_x(sizeof(HANDGUN_5) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_5[0]);
    	if(weapon_name[profile_idx] == 5)
    		printf(center_x(sizeof(HANDGUN_6) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_6[0]);	
    }
// Enabling RapidFire by default for Semi-Automatic Weapons
  if(weapon_category[profile_idx] == 0 && weapon_name[profile_idx] == 3)
    		toggle_rapidfire[profile_idx] = 1;
  if(weapon_category[profile_idx] == 0 && weapon_name[profile_idx] == 6) 
            toggle_rapidfire[profile_idx] = 1; 
// Disabling RapidFire by default for Full-Automatic Weapons
    else if((weapon_category[profile_idx] < amount_fullauto_category) && display_new)
    		toggle_rapidfire[profile_idx] = 0;
    		//toggle_burstfire[profile_idx] = 0; 
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
int layout_y;
function display_mod(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);

			if(f_idx == 0) // if AntiRecoil MOD
			{
	    	// Display OFF or Progressive or Standard
	    		if(f_toggle == 1)
	    			printf(center_x(sizeof(PROGRESS) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PROGRESS[0]);
	    		else if(f_toggle == 2)
	    			printf(center_x(sizeof(STANDARD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STANDARD[0]);
	    		else
    				printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
			}
			else if(f_idx == 2)
			{
				if(f_toggle == 1)
			    	printf(center_x(sizeof(POLARASSIST) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,POLARASSIST[0]);
				else if(f_toggle == 2)  
			        printf(center_x(sizeof(STICKYASSIST) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STICKYASSIST[0]);
			    else
			        printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
		    }
		    else if(f_idx == 8) 
		    {
		    
		        if(swap_on)
		        {
		        	printf(center_x(sizeof(FLIPPED) - 1,OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL, OLED_WHITE,FLIPPED[0]);
		        	layout_y = 37;
		        }
		        else
		        	layout_y = 42;
		        	
				if(f_toggle == 1)
					printf(center_x(sizeof(BTN_LAYOUT_1) - 1,OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL, OLED_WHITE,BTN_LAYOUT_1[0]);
				
				else if(f_toggle == 2)  
					printf(center_x(sizeof(BTN_LAYOUT_2) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_2[0]);
				
				else if(f_toggle == 3) 
					printf(center_x(sizeof(BTN_LAYOUT_3) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_3[0]); 
				
				else if(f_toggle == 4)  
					printf(center_x(sizeof(BTN_LAYOUT_4) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_4[0]);
				
				else if(f_toggle == 5) 
					printf(center_x(sizeof(BTN_LAYOUT_5) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_5[0]); 
				
				else if(f_toggle == 6)  
					printf(center_x(sizeof(BTN_LAYOUT_6) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_6[0]);
				
				else if(f_toggle == 7)  
					printf(center_x(sizeof(BTN_LAYOUT_7) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_7[0]);
				
				else if(f_toggle == 8)  
					printf(center_x(sizeof(BTN_LAYOUT_8) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_8[0]);
				
				else if(f_toggle == 9)  
					printf(center_x(sizeof(BTN_LAYOUT_9) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_9[0]);
				
				else if(f_toggle == 10)  
					printf(center_x(sizeof(BTN_LAYOUT_10) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_10[0]);
				
				else if(f_toggle == 11)  
					printf(center_x(sizeof(BTN_LAYOUT_11) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_11[0]);
				
			    else
			        printf(center_x(sizeof(BTN_LAYOUT_0) - 1, OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,BTN_LAYOUT_0[0]);
		    
		    }
		    
	    	else 
	    	{
	    	
	    	  
	    	
	    		if(f_toggle == 1)
	    			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
	    		else
	    			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
    		
    	          
			}  
     	}
}

int RT,MSC,SD1,DGT,DGR,TP1,TP2;
function display_mod1(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(valName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        	
    	// Display ON OFF
    		if(f_toggle == 1)
    			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
    		else
    			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
    	}
}
function display_mod2(f_idx, f_string, f_print) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        	printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]);
    
    } 
    	
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;
function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
        
    // Values that are not in the array (aimassist_time for exemple)
		if(valName_idx >= AMOUNT_OF_VAL_IN_ARRAY)
		{
    	// Substract    
        	if(f_val < inv(f_rng_min)) 
        		f_val = inv(f_rng_min); 
   		// Add   
       		if(f_val > f_rng_max) 
        		f_val = f_rng_max;
		}
		
    // Values that are in the array 
		else
		{
	  		if(weapon_category[profile_idx] == 0) 
	  		{
		    // Substract    
		        if((f_val + A_RIFLE[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + A_RIFLE[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + A_RIFLE[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - A_RIFLE[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 1) 
	  		{
		    // Substract    
		        if((f_val + SMG[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + SMG[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + SMG[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - SMG[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 2) 
	  		{
		    // Substract    
		        if((f_val + LMG[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + LMG[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + LMG[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - LMG[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 3) 
	  		{
		    // Substract    
		        if((f_val + RIFLE[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + RIFLE[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + RIFLE[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - RIFLE[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 4) 
	  		{
		    // Substract    
		        if((f_val + SHOTGUN[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + SHOTGUN[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + SHOTGUN[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - SHOTGUN[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 5) 
	  		{
		    // Substract    
		        if((f_val + SNIPER[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + SNIPER[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + SNIPER[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - SNIPER[weapon_name[profile_idx]][valName_idx];
			}
	  		if(weapon_category[profile_idx] == 6) 
	  		{
		    // Substract    
		        if((f_val + HANDGUN[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) 
		        	f_val = inv(f_rng_min + HANDGUN[weapon_name[profile_idx]][valName_idx]); 
		    // Add   
		        if((f_val + HANDGUN[weapon_name[profile_idx]][valName_idx]) > f_rng_max) 
		        	f_val = f_rng_max - HANDGUN[weapon_name[profile_idx]][valName_idx];
			}
        }
        display_new = TRUE; // display ModName, ModEdit, ModWeapon, profile, ON/OFF and value
    }
    return f_val; 
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function number_to_string(f_val,f_digits) {
/***********************************************************
 *  number_to_string(value to convert, # of digits in value)
 *
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
 *   
 *      Convert digits to ASCII
 *      Add ASCII character to print buffer
 *      Print string centered X & Y on OLED
 *  
***********************************************************/
    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }
        }
        c_val /= 10;
    }
    if(display_title)
    	puts_oled(120, 34, OLED_FONT_SMALL, i - 1, OLED_WHITE); // display current # slot - Small (53)
    	//puts_oled(116, 45, OLED_FONT_MEDIUM, i - 1, OLED_WHITE); // display current # slot - Medium
    else
    	puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // adjustable value centered in X
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_x(f_chars,f_font) {
//  center_x(number of chars,font size);  
//	    return X for Centering String Horizontally

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; 

function save () {
	combo_run(SAVE);
	
// Profile 1
	// Toggles                                      // Values
	
	
    set_pvar(SPVAR_1,toggle_antirecoil[0]  );       set_pvar(SPVAR_6 ,antirecoil_start[0]     );    
    set_pvar(SPVAR_2,toggle_rapidfire[0]   );       set_pvar(SPVAR_7 ,antirecoil_end[0]       );           
	set_pvar(SPVAR_3,toggle_holdbreath[0]  );       set_pvar(SPVAR_8,antirecoil_time[0]      );      
	set_pvar(SPVAR_4,toggle_aa_type[0]     );       set_pvar(SPVAR_9,antirecoil_horizontal[0]);   
	set_pvar(SPVAR_5,toggle_quickscope[0]  );       set_pvar(SPVAR_10,rate_of_fire[0]         );                                        
	                                                
	                                               
	      
	     
// Profile 2
	// Toggles                                       // Values
	       
    set_pvar(SPVAR_11,toggle_antirecoil[1]);         set_pvar(SPVAR_16,antirecoil_start[1]     );
    set_pvar(SPVAR_12,toggle_rapidfire[1] );         set_pvar(SPVAR_17,antirecoil_end[1]       );             
	set_pvar(SPVAR_13,toggle_holdbreath[1]);         set_pvar(SPVAR_18,antirecoil_time[1]      );   
	set_pvar(SPVAR_14,toggle_aa_type[1] );           set_pvar(SPVAR_19,antirecoil_horizontal[1]); 
	set_pvar(SPVAR_15,toggle_quickscope[1] );        set_pvar(SPVAR_20,rate_of_fire[1]         );
	                                                
	                                                
// Profile 3
	// Toggles                                       // Values
	
    set_pvar(SPVAR_21,toggle_antirecoil[2]);         set_pvar(SPVAR_26,antirecoil_start[2]     );  
    set_pvar(SPVAR_22,toggle_rapidfire[2] );         set_pvar(SPVAR_27,antirecoil_end[2]       );        
	set_pvar(SPVAR_23,toggle_holdbreath[2]);         set_pvar(SPVAR_28,antirecoil_time[2]      );        
	set_pvar(SPVAR_24,toggle_aa_type[2]   );         set_pvar(SPVAR_29,antirecoil_horizontal[2]); 
	set_pvar(SPVAR_25,toggle_quickscope[2]);         set_pvar(SPVAR_30,rate_of_fire[2]         );
	                                                
	                                               
// Misc values			 
	set_pvar(SPVAR_31, swap_on            );         set_pvar(SPVAR_32,stickyaim_size );        
	                                                 set_pvar(SPVAR_33,stickyaim_time );
	                                                 set_pvar(SPVAR_34,RADIUS         );
	                                                 set_pvar(SPVAR_35,STEPS          );
	                                                 set_pvar(SPVAR_36,STEADY_AIM     );
	                                                 set_pvar(SPVAR_37,quickscopedelay); 
	           
// Pre-set weapon
	set_pvar(SPVAR_38, weapon_category[0]);         set_pvar(SPVAR_41, weapon_name[0]          );
	set_pvar(SPVAR_39, weapon_category[1]);         set_pvar(SPVAR_42, weapon_name[1]          );
	set_pvar(SPVAR_40, weapon_category[2]);         set_pvar(SPVAR_43, weapon_name[2]          );
	       
	set_pvar(SPVAR_44,enemy_ping         );         set_pvar(SPVAR_48,pingonfire               );                                               
    set_pvar(SPVAR_45,easy_plate         );         set_pvar(SPVAR_49,cancel_slide             ); 
    set_pvar(SPVAR_46,toggle_proneshot   );         set_pvar(SPVAR_50,toggle_dropshot          ); 
    set_pvar(SPVAR_47,toggle_bunnyhop    );         set_pvar(SPVAR_51,slide_dropshot           );
	set_pvar(SPVAR_52,slide_shot         );         set_pvar(SPVAR_53,btn_layout               ); 
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}  
int JUMP_BTN, CROUCH_BTN, RELOAD_BTN, SWITCH_BTN, TACTICAL_BTN,LETHAL_BTN,AIM_BTN,FIRE_BTN,SPRINT_BTN, MELEE_BTN;
function buttons_layout() {
	if (btn_layout == 0) // Default
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  
								       
	}
	else if (btn_layout == 1) // Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1;
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
							       	   CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  					       	   
	}
	else if (btn_layout == 2) // Lefty
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   MELEE_BTN     = PS4_L3;
									   SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  							   
	}
	else if (btn_layout == 3) // N0M4D/Charlie
	{
		JUMP_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;   
		CROUCH_BTN   = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN   = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN   = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									  SPRINT_BTN    = PS4_L3;
								      MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						      
	}
	else if (btn_layout == 4) // N0M4D/Charlie Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 5) // N0M4D/Charlie Lefty
	{
		JUMP_BTN      = PS4_CROSS;     AIM_BTN       = PS4_L1; 
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    FIRE_BTN      = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   MELEE_BTN     = PS4_L3;
								       SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 6) // Bumper Jumper
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 7) // Bumper Jumper Tactical
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1; 
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 8) // One-Hand-Gunslinger
	{
		JUMP_BTN      = PS4_CROSS;     FIRE_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 9) // Stick and Move
	{
		MELEE_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       JUMP_BTN      = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 10) // Brawler
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 11) // Beast
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
}