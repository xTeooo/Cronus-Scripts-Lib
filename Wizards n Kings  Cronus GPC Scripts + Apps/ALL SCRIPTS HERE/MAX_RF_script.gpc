int AimAssist_onoff  = TRUE;               
define shake            = 21; // Power  
define Wait             = 20; // Wait

define pullUp = -70;   // Strength of pull
define pullTime = 30;  // Duration of pull (Milliseconds)
define Fire = PS4_R2;  // Fire Button in game (Combo runs on press only)

// Rapid Fire
define FireHoldToggle  = PS4_L2;
define FirePressToggle = PS4_UP;

int RapidFire = FALSE;
define FireHold = 40;
define FireWait = 40;

// Recoil Values
define antirecoil_vertical = 30;
define antirecoil_horizontal = 0;

main {    
    
    //Aim Assist V 2                                     
    if (AimAssist_onoff) {                            
        if (get_val(PS4_L2))      //<<<<<<<<<TRIGGER                 
            combo_run(Auto_Aimm);                     
        else        
            combo_stop(Auto_Aimm);                    
 
 
        if (get_val(PS4_L2)) {                        
            if (abs(get_val(PS4_RX)) > 21 || abs(get_val(PS4_RY)) > 21){ // <<<RELEASE
             combo_stop(Auto_Aimm);                  
            }                                         
        }                                             
    }
    
    if (event_press(Fire)) {
        combo_run(headShot);
    }
    
    if (get_val(FireHoldToggle)) {
    	set_val(FirePressToggle,0);
    	
    	if (event_press(FirePressToggle)) {
    		RapidFire = !RapidFire;
    		combo_run(Rumble);
    	}
    }
    
    if (RapidFire) {
    
	    if (get_val(Fire)) {
            
            combo_run(RapidFire);
        
        } else {
                
            combo_stop(RapidFire);
        }
    }
    
// Antirecoil
	if(get_val(PS4_L2) && get_val(PS4_R2)) {
		set_val(PS4_RX, clamp_f(SmartSens(antirecoil_horizontal, PS4_RX), -100, 100)); 
		set_val(PS4_RY, clamp_f(SmartSens(antirecoil_vertical, PS4_RY), -100, 100));
	}
}//  MAIN BLOCK END    

combo Auto_Aimm {          
    set_val(10,shake * -1); 
    wait(Wait);              
    set_val(9,shake);
    wait(Wait);              
    set_val(10,shake); 
    wait(Wait);               
    set_val(9,shake * -1); 
    wait(Wait); // Notice this Wait has a capital W as wait is a built in function             
}

combo headShot {
    set_val(PS4_RY,pullUp);
    wait(pullTime);
}

combo RapidFire {

    set_val(Fire,100);
    wait(FireHold);
    set_val(Fire,0);
    wait(FireWait);
}

combo Rumble {
    
    if (RapidFire)
        
        set_rumble(RUMBLE_A,35);
        
    else 
            
        set_rumble(RUMBLE_B,35);
    
        wait(250);
        reset_rumble();
}

int SmartSens_side;
int SmartSens;
	
function SmartSens(f_val, f_axis) { 

	if(f_val < 0)
		SmartSens_side = -1; 
	else 
		SmartSens_side = 1; 

	if(SmartSens_side == -1)  
	{
	    if(get_val(f_axis) > 0) 
	    	SmartSens = ((get_val(f_axis) * (100 - f_val)) / 100); 
	    
	    else if(get_val(f_axis) <= 0) 
	    	SmartSens = ((get_val(f_axis) * (100 + f_val)) / 100);
	}
	
	if(SmartSens_side == 1) 
	{
	    if(get_val(f_axis) < 0)
	    	SmartSens = ((get_val(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_val(f_axis) >= 0) 
	    	SmartSens = ((get_val(f_axis) * (100 - f_val)) / 100);
	}

	if(SmartSens_side == -1 && get_val(f_axis) >= f_val + SmartSens || SmartSens_side == 1 && get_val(f_axis) <= f_val + SmartSens)
	    return f_val + SmartSens;
	    
	return 0;
}

function clamp_f(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_hi;
	if(f_val < f_lo) return f_lo;
	return f_val;
}