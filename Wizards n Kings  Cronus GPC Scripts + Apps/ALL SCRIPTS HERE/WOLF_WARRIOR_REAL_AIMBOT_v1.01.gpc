/*


                          ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄▄▄▄▄▄▄▄▄▄▄            ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
                         ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌          ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
                         ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀           ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌
                         ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌                    ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌
                         ▐░▌   ▄   ▐░▌▐░▌       ▐░▌▐░▌          ▐░█▄▄▄▄▄▄▄▄▄           ▐░▌   ▄   ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌
                         ▐░▌  ▐░▌  ▐░▌▐░▌       ▐░▌▐░▌          ▐░░░░░░░░░░░▌          ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌       ▐░▌▐░░░░░░░░░░░▌
                         ▐░▌ ▐░▌░▌ ▐░▌▐░▌       ▐░▌▐░▌          ▐░█▀▀▀▀▀▀▀▀▀           ▐░▌ ▐░▌░▌ ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀█░█▀▀      ▐░▌     ▐░▌       ▐░▌▐░█▀▀▀▀█░█▀▀ 
                         ▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌          ▐░▌                    ▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌     ▐░▌       ▐░▌     ▐░▌       ▐░▌▐░▌     ▐░▌  
                         ▐░▌░▌   ▐░▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌                    ▐░▌░▌   ▐░▐░▌▐░▌       ▐░▌▐░▌      ▐░▌ ▐░▌      ▐░▌  ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌      ▐░▌ 
                         ▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌                    ▐░░▌     ▐░░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌
                          ▀▀       ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀                      ▀▀       ▀▀  ▀         ▀  ▀         ▀  ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀ 
                          
                               ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄   ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄      
                              ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌     
                              ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌       ▐░▌ ▀▀▀▀█░█▀▀▀▀  ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌     
                              ▐░▌       ▐░▌▐░▌               ▐░▌     ▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌          ▐░▌     ▐░▌       ▐░▌▐░▌▐░▌    ▐░▌     
                              ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌     ▐░▌          ▐░▌     ▐░▌       ▐░▌▐░▌ ▐░▌   ▐░▌     
                              ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░▌ ▐░▌       ▐░▌     ▐░▌          ▐░▌     ▐░▌       ▐░▌▐░▌  ▐░▌  ▐░▌     
                              ▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀      ▐░▌     ▐░█▀▀▀▀█░█▀▀      ▐░▌     ▐░█▀▀▀▀▀▀▀█░▌▐░▌       ▐░▌     ▐░▌          ▐░▌     ▐░▌       ▐░▌▐░▌   ▐░▌ ▐░▌     
                              ▐░▌     ▐░▌  ▐░▌               ▐░▌     ▐░▌     ▐░▌       ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌          ▐░▌     ▐░▌       ▐░▌▐░▌    ▐░▌▐░▌     
                              ▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░▌      ▐░▌  ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌     ▐░▌      ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌     ▐░▐░▌     
                              ▐░▌       ▐░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌      ▐░░▌     
                               ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀       ▀       ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀       ▀       ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀        ▀▀ 
                               
                               
                                                           ╔╗ ╦ ╦  ╔═╗╦═╗╦╔╦╗╔╦╗╦ ╦  ╔═╗╔╗╔╔╦╗  ╔═╗═╗ ╦╔═╗╔═╗╦  ╦╔╗ ╦ ╦╦═╗
                                                           ╠╩╗╚╦╝  ║ ╦╠╦╝║║║║║║║╚╦╝  ╠═╣║║║ ║║  ║╣ ╔╩╦╝║  ╠═╣║  ║╠╩╗║ ║╠╦╝
                                                           ╚═╝ ╩   ╚═╝╩╚═╩╩ ╩╩ ╩ ╩   ╩ ╩╝╚╝═╩╝  ╚═╝╩ ╚═╚═╝╩ ╩╩═╝╩╚═╝╚═╝╩╚═
                               
    ♥♥     ♥♥  ♥♥♥♥♥  ♥♥♥♥♥♥  ♥♥♥♥♥♥♥  ♥♥♥♥♥♥  ♥♥♥    ♥♥ ♥♥♥♥♥♥♥             ♥♥♥    ♥♥♥ ♥♥     ♥♥         ♥♥♥♥♥♥ ♥♥     ♥♥        ♥♥    ♥♥  ♥♥♥♥♥  ♥♥♥    ♥♥  ♥♥♥♥♥♥   ♥♥♥♥♥  ♥♥    ♥♥ ♥♥♥♥♥♥  ♥♥♥♥♥♥  
    ♥♥     ♥♥ ♥♥   ♥♥ ♥♥   ♥♥    ♥♥♥  ♥♥    ♥♥ ♥♥♥♥   ♥♥ ♥♥                  ♥♥♥♥  ♥♥♥♥ ♥♥     ♥♥        ♥♥      ♥♥     ♥♥        ♥♥    ♥♥ ♥♥   ♥♥ ♥♥♥♥   ♥♥ ♥♥       ♥♥   ♥♥ ♥♥    ♥♥ ♥♥   ♥♥ ♥♥   ♥♥ 
    ♥♥  ♥  ♥♥ ♥♥♥♥♥♥♥ ♥♥♥♥♥♥    ♥♥♥   ♥♥    ♥♥ ♥♥ ♥♥  ♥♥ ♥♥♥♥♥               ♥♥ ♥♥♥♥ ♥♥ ♥♥  ♥  ♥♥        ♥♥      ♥♥  ♥  ♥♥        ♥♥    ♥♥ ♥♥♥♥♥♥♥ ♥♥ ♥♥  ♥♥ ♥♥   ♥♥♥ ♥♥♥♥♥♥♥ ♥♥    ♥♥ ♥♥♥♥♥♥  ♥♥   ♥♥ 
    ♥♥ ♥♥♥ ♥♥ ♥♥   ♥♥ ♥♥   ♥♥  ♥♥♥    ♥♥    ♥♥ ♥♥  ♥♥ ♥♥ ♥♥                  ♥♥  ♥♥  ♥♥ ♥♥ ♥♥♥ ♥♥        ♥♥      ♥♥ ♥♥♥ ♥♥         ♥♥  ♥♥  ♥♥   ♥♥ ♥♥  ♥♥ ♥♥ ♥♥    ♥♥ ♥♥   ♥♥ ♥♥    ♥♥ ♥♥   ♥♥ ♥♥   ♥♥ 
     ♥♥♥ ♥♥♥  ♥♥   ♥♥ ♥♥   ♥♥ ♥♥♥♥♥♥♥  ♥♥♥♥♥♥  ♥♥   ♥♥♥♥ ♥♥♥♥♥♥♥             ♥♥      ♥♥  ♥♥♥ ♥♥♥  ♥♥      ♥♥♥♥♥♥  ♥♥♥ ♥♥♥  ♥♥       ♥♥♥♥   ♥♥   ♥♥ ♥♥   ♥♥♥♥  ♥♥♥♥♥♥  ♥♥   ♥♥  ♥♥♥♥♥♥  ♥♥   ♥♥ ♥♥♥♥♥♥  
     


KKKKKKKKKK0x:;xKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk;:x0KKKKKKKKKKKKKKKK
MMMMMMMMW0l'..cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl...cOWMMMMMMMMMMMMMM
MMMMMMMXo'.....;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:......lKMMMMMMMMMMMMM
MMMMMWO;........'lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKo'........;OWMMMMMMMMMMM
MMMMWk'...........,dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd,...........'xWMMMMMMMMMM
MMMWx'...ox;........,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd,........,xd....xWMMMMMMMMM
MMMO,...dNW0:.........'l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o,.........;0WWx...'kWMMMMMMMM
MMK:...lNMMMKc...........ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc'..........cKMMMNo...;KMMMMMMMM
MWx...;0MMWMMNd............;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx;............oXMMWWMK:...dWMMMMMMM
MXc...oWM0xXMMWk,............'lONMWNK0kxdollllclllllodxk0KNWMNOl,............,kWMMNdxWWx...:XMMMMMMM
MK;..'kMWd'dWMMWKc..............:lc,'....................',cl:..............:0WMMWx.,0MO,..,0MMMMMMM
X0;..,0MXc.'kWMMMNx,......................................................'dNMMMMO,..oWK;..,0NXWMMMM
cxc..,0MX:..,OWMMMWKl....................................................c0WMMMM0;...:K0;..:xcoNMMMM
:''..'OMXc...,OWMMMMWOc................................................:OWMMMMW0;....'OO'..'..dWMMMM
K:....xMWo....'xNMMMMMNOc'...........................................cONMMMMMMO,......do.....,0MMMMM
MNx,..lNM0,.....lKWMMMMMK:..........................................;0MMMMMMMMK:......;'.....xWMMMMM
MMMXx::0MWx......xWMMMXx,............................................,dXMMMMMMMXo...........dNMMMMMM
MMMMMWKNMMK;...'dNMW0o,......,:clodol;'................................,o0WMMNOO0x;.......;OWMMMMMMM
MMMMMMMMW0:...;ON0d:....,cdOKNWN0dc;'.....................................:d0NO:',,......'kWMMMMMMMM
MMMMMMMWx'...:do:....;oOXWMMMMXkoc:;.........................................:odc'........'xWMMMMMMM
MMMMMMNd.....'.....;xXMMMMMMMMWKOdl;............................................''..........oNMMMMMM
MMMMMNd...........oXMMMMMMMNOo:'.............................................................lXMMMMM
MMMMWx...........dNMMMMMWKo;..................................................................cXMMMM
MMMMO,..........lNMMMMMNx,..;l;................................;l;...,,........................cXMMM
MMMX:...........dMMMMMMWX0OdoONOl'...........................lON0odOOd;.........................lXMM
MMWx............cXMMMMMMMMMMWNWMWO;........................;kWMWNWMMXkdolc;'.....................dNM
MMNc...'.........c0WNOxxkkOKNMMMMM0;......................,OMMMMMWNXKKKKXNNKx:...................'kW
MMK;.;xo..........'cd:.....';lOWMMWk'.....................xWMMWKxc;''..'cxd:,.....................:K
MM0;:KX:.........'.......',...;oXMMNl....................lNMMNd:'..,'.......,......................d
MMKd0M0,.........;do,....;xdoxc.cXMMXc..................:KMMNo.:xodx;....,lx:......................,
MMWWWM0,..........;kKOdlc:okkd:;,xWMMXd,...............cKMMWk;;:dOko:cldOKO:....................:lll
MMMMMMNl............:x0XWWWWWWWNKKWMMMWKx:'..........,oOXWMWXKNWWWWWWWX0xc'.....................:KMM
MMMMMMM0;..,,........,lOWMMMMWMMMMMMMMMMMWKkl,.......''.,dXMMMMMMMMMMW0o;........';..............lNM
MMMMMMMWKc.lOc......'cdxxxdoo0WWXOONMMMMMMMMMXc...........,oOXWWKdodxxxdl'......cOo..............'kW
MMMMMMMMMNkxXNk:............,llc,..lXMMMMMMMMMd..............,cll,............:kN0;...............cX
MMMMMMMMMMMMMMMNOl,.................xMMMMMMMMWd............................,lONMXc................'k
MMMMMMMMMMMMMMMMMWXOdl:;,''.........oWMMMMMMMMd........;l'.........'',;:ldOXWMMXl..................d
MMMMMMMMMMMMMMMMMMMMMMWNXKKO;......'kMMMMMMMMMd........:0k'......,kKKXNWMMMMMWO:...................c
MMMMMMMMMMMMMMMMMMMMMMMMMMMO';x:...oNMMMMMMMMMd........,0W0:..,d:;0MMMMMMMMWKo'....................;
MMMMMMMMMMMMMMMMMMMMMMMMMMWkoK0;.,xNMMMMMMMMMMd.........xWMNx'.xN0XMMMMMMW0o'......................;
MMMMMMMMMMMMMMMMMMMMMMMMMMWWWWx:dXMMMMMMMMMMMWd.........cXMMWKloNMMMMMMXkc'.';ll,.............:l'..:
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKXMMMMMMMMMMMMXkc'........'OMMMMWXNMMMMMNOddk0KKx;..............oNk,.c
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNXXKOdo:.....oNMMMMMMMMMMMMMMWKko,................xMWO;d
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOxooooddl'...;0MMMMMMMMMMNOdl:'..................'OMMWKK
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkOOOxol:'.....kMMWWMMMMWO:.......................;KMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK00O00KXKOl....oWNxOMMMWk'........................oWMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0dc;'.....'',:c,...lXx.cXMMK;..............,:........,OMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl...................;c'.,0MWd...............dd........oNMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'.......................'OMX:..............cXd.......;0MMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd'......................,0MO'.............;0Xc......'kWMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,.....................lNNo.............,OWO'......dWMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxxKNWWWNO;....................,0WO,............,kWNl......dNMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc..;:::;.....................;OW0;............,OWWx.....'xWMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx:,.......................;dXXx,............:0WM0,....:0WMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0OOkxoooolc,......,oxO0KOo;............'dXMMK:...'oXMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXkl:,'..',:clkXMKd:,..............c0WMMK:...c0WMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXKKKKXWWMMMM0,..............cONMMW0;..:ONMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;...........'lOWMMMWO,.cONMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'.........:dKWMMMMNd:l0WMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.......,lONMMMMMWXkkKWMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl......:xXWMMMMMMMWNNMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'...'lOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0dd0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK                          
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 /$$      /$$  /$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$ /$$    /$$ /$$$$$$$$       /$$$$$$$$ /$$   /$$  /$$$$$$  /$$   /$$ /$$   /$$ /$$     /$$ /$$$$$$  /$$   /$$
| $$$    /$$$ /$$__  $$ /$$__  $$ /$$__  $$|_  $$_/| $$   | $$| $$_____/      |__  $$__/| $$  | $$ /$$__  $$| $$$ | $$| $$  /$$/|  $$   /$$//$$__  $$| $$  | $$
| $$$$  /$$$$| $$  \ $$| $$  \__/| $$  \__/  | $$  | $$   | $$| $$               | $$   | $$  | $$| $$  \ $$| $$$$| $$| $$ /$$/  \  $$ /$$/| $$  \ $$| $$  | $$
| $$ $$/$$ $$| $$$$$$$$|  $$$$$$ |  $$$$$$   | $$  |  $$ / $$/| $$$$$            | $$   | $$$$$$$$| $$$$$$$$| $$ $$ $$| $$$$$/    \  $$$$/ | $$  | $$| $$  | $$
| $$  $$$| $$| $$__  $$ \____  $$ \____  $$  | $$   \  $$ $$/ | $$__/            | $$   | $$__  $$| $$__  $$| $$  $$$$| $$  $$     \  $$/  | $$  | $$| $$  | $$
| $$\  $ | $$| $$  | $$ /$$  \ $$ /$$  \ $$  | $$    \  $$$/  | $$               | $$   | $$  | $$| $$  | $$| $$\  $$$| $$\  $$     | $$   | $$  | $$| $$  | $$
| $$ \/  | $$| $$  | $$|  $$$$$$/|  $$$$$$/ /$$$$$$   \  $/   | $$$$$$$$         | $$   | $$  | $$| $$  | $$| $$ \  $$| $$ \  $$    | $$   |  $$$$$$/|  $$$$$$/
|__/     |__/|__/  |__/ \______/  \______/ |______/    \_/    |________/         |__/   |__/  |__/|__/  |__/|__/  \__/|__/  \__/    |__/    \______/  \______/ 
 
 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

𝓔𝓧𝓒𝓐𝓛𝓘𝓑𝓤𝓡 ---- HELPING ME UNDERSTAND THE RULES OF THE CODE + HELPING ME WITH ANYTHING I NEEDED SO HUGE THANKYOU 

𝓢𝓦𝓔𝓔𝓣 𝓔𝓥𝓘𝓛𝟏𝟒 ---- HELPING ME UNDERSTAND THE MODS AND HOW THEY WORK + HELPIMG ME CREATE A FANTASTIC TRACKER 

𝓐𝓝𝓤𝓢 𝓟𝓞𝓦𝓔𝓡 ---- HELPING ME UNDERSTAND THE PROFILE INDEXING AND KILLSWICH  

𝓒𝓡𝓔𝓢𝓒𝓔𝓝𝓢 ---- FOR ALOWING ME TO USE HIS AWESOME POLAR AIM

𝓑𝓐𝓣𝓣𝓢 ---- FOR HIS STICKY AIM

𝓝𝓘𝓚𝓞𝓛𝓐𝓘 ---- TRIPLE STICKY METHOD

𝓩𝓔𝓝 𝓕𝓞𝓡𝓤𝓜---- FOR PROGRESSIVE AR

𝓢𝓒𝓡𝓘𝓟𝓣 𝓣𝓔𝓢𝓣𝓔𝓡𝓢 ---- FOR HELPING ME FIND AND SORT BUGS OUT ON DIFFERENT PLATFORMS, THERE INPUT WAS A MASSIVE HELP

   𝓫𝓸𝓭𝓰𝓮2𝓴10  
   
   𝓫𝓲𝓵𝓵𝔂 𝓫𝓸𝓫 𝓽𝓱𝓸𝓻𝓽𝓸𝓷
   
   𝓘𝓪𝓶𝓒𝓪𝓻𝓫𝓼
   
   𝓛𝓲𝔃𝔃𝔂 𝓫𝓲𝓷 𝓱𝓲𝓭𝓲𝓷𝓰
   
   𝓓𝓮𝓪𝓭𝓵𝔂𝓕𝓮𝓮𝓽              
						
===========================================================================================================================================================================================================================================================================

__  __  ___ ___  ___     ___ ___ _  ___ _  _ _   _    __  _ _  _
|__]|__|  |   |  [__     [__   |  | |    |_/   \_/    |__| | |\/|
|__]|  |  |   |  ___]    ___]  |  | |___ | \_   |     |  | | |  |
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Every person in the game has an invisible-rectangular box around them. The reticule of each player will become 'stuck' once it has landed inside of this area and slightly follow the box.

This is designed to aid in the aiming of a target.But, is not the same as 'auto-aim' or 'aim-assist' where the reticule automatically targets the nearest box.

The sticky aim function only works once you have actually moved your reticule inside the area of the box. Once 'there,' the sticky aim is activated. However, it will not do all the work on its own.

In most games, If you don't move with it or if you move against it, you cancel the sticky assist. However, if moving with it--it makes it easier to track a moving player while shooting at them.

In addition to "Aim-Assist" and "Sticky-Aim." There is also "Bullet-Assist" (not a technical term) -- Basically this means that you can shoot in a designated area of the 'box' around a player and get a hit maker even if your not exactly centered over the player.

===========================================================================================================================================================================================================================================================================

_  __  ___  __   _  ___        __    __    _        _  __ 
/ ` )_) )_  (_   / ` )_   )\ ) (_     )_)  / )  )   /_/ )_)
(_  / \ (__  __) (_  (__  (  (  __)   /    (_/  (__ / / / \ 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                                            


Polar Radius: The distance/radius/reach of the Aim Assist pattern from the center point. The larger the circle, the more strength over larger
'''''''''''''
distances. Once you are locked on to an enemy, increasing this value will therefore add more strength. This is what we achieve with the

PRBoost: The amount we add is the value behind PolaRBoost.
''''''''
Polar Steps: The amount that the angle is changed in each pattern cycle. The angle starts at 0 and ends at 359 (360 degrees). Setting the Polar
''''''''''''
Angle to 10 means that the angle is increased by 10 degrees each cycle until reaching 359. A larger value means that the aim assist pattern is

completed faster then with a lower value. By adding to this value once we are locked on to an enemy using the AngleBoost we increase the

stickiness because it preserves the Aim Bubble better.


==========================================================================================================================================================================================================================================================================


__     __ _____   __                    ___ __      __    __ __ 
(_ |  ||_ |_  |   |_ \  /||     /| |__|   | |__) /\ /  |_/|_ |__)
__)|/\||__|__ |   |__ \/ ||__    |    |   | | \ /--\\__| \|__| \ 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''       
Enhanced Tracking Strength is for how strong the tracking is on a target to high and the screen will shake 

Enhanced Tracking Speed  = Speed of the rotation of the Tracking and the speed


==========================================================================================================================================================================================================================================================================

/$$      /$$  /$$$$$$  /$$$$$$$   /$$$$$$ 
| $$$    /$$$ /$$__  $$| $$__  $$ /$$__  $$
| $$$$  /$$$$| $$  \ $$| $$  \ $$| $$  \__/
| $$ $$/$$ $$| $$  | $$| $$  | $$|  $$$$$$ 
| $$  $$$| $$| $$  | $$| $$  | $$ \____  $$
| $$\  $ | $$| $$  | $$| $$  | $$ /$$  \ $$
| $$ \/  | $$|  $$$$$$/| $$$$$$$/|  $$$$$$/
|__/     |__/ \______/ |_______/  \______/ 
'''''''''''''''''''''''''''''''''''''''''''                                           


① LEGACY RECOIL, 

② PROGRESSIVE RECOIL, (START) (END) (TIME)

③ SWEET EVIL RECOILS, (RUMBLE RECOIL) USE NEGATIVE NUMBERS FOR THIS RECOIL 

④ CRESCENS POLAR

⑤ BATTS STICKY AIM

⑥ WOLF WARRIOR TRACKER

⑦ TURBO MELEE

⑧ SLIDE CANCEL OPTIONS (MW/WARZONE)+ (COLD WAR)

⑨ NEW AIM ASSIST 

①⓪ HOLD BREATH

①① RAPID FIRE (ALSO HAS A QUICK TOGGLE AVAILABLE (HOLD)LT/L2) + (DPAD RIGHT) COLOR INDICATOR (GREEN) AND (RED) ADJUSTABLE FIRE RATE 

①② ADJUSTABLE SENSES

①③ QUICK SCOPING 

①④ CORRECTION (SENSE BOOST = CORRECTS SENSITIVITY)

①⑤ BUNNY HOP QUICK TOGGLE ACCESS (HOLD)LT/L2+ TAP (DPAD DOWN) 
						
①⑥ AKIMBO RAPID FIRE (ONLY QUICK TOGGLE AVAILABLE (HOLD)LT/L2) + (DPAD LEFT) COLOR INDICATOR (PURPLE) AND (RED)

①⑦ ALL BUTTON LAYLOUTS 

①⑧ MASTER KILL SWITCH(QUICK TOGGLE KILL SWITCH/DRIVE MODE (HOLD LT/L2  + (DPAD UP) THIS WILL DEACTIVATE ALL MODS 

①⑨ PRIMARY(BLUE) AND SECONDARY(GREEN) PROFILES U CAN ADJUST (ALL RECOILS) LEGACY, RUMBLE, PROGRESSIVE

TO SWITCH TO PROFILES PRESS (TRIANGLE/Y)    RESYNC PROFILE (LT + CIRCLE)

②⓪ CANCEL RELOAD

②① CANCEL PLATES

*/
define dash_board             = 0;
define Legacy                 = 1;
define Sweet_Evil_Recoil_menu = 2;
define Progressive_Menu       = 3;
define Batts_Sticky_Menu      = 4;
define Polar_Aim_Menu         = 5;
define Enhanced_Menu          = 6;
define Senses_Menu            = 7;
define Boosts_Menu            = 8;
define ButtonLayout           = 9;
define StickLayout           = 10;
define Slide_Cancel_Mod_Menu = 11;

define Rapid_Fire_menu       = 12;
define Global_menu           = 13;
define SE_AIM_menu           = 14;

define cycle_limit  = 14;
define cycle_return = 1;

define PROFILE_SYNC		= PS4_CIRCLE;	


int construct = 2,screen_saver = 1, clear,strobing_a,strobing_b,menu;
int EditMenu;
int refresh_edit;
int stick_input
int edit_idx;

define EDIT_VAL_PRINT_Y = 18; // Y coordinate for print Edit Value
const string dash_idx[] = { "Wolf Warior", "Grimmy & Excalibur" };

const string instruction_idx[] = { " OPEN MENU ", "CLOSE MENU", "NAVIGATION","PRIMARY", "SECONDARY"};
const string submenu_idx[] = {
	"DASH BOARD",   // 0. 
	"LEGACY RECOIL",// 1.
	"RUMBLE RECOIL",// 2.
	"PROGRESSIVE",  // 3.
	"BATTS STICKY", // 4.
	"POLAR AIM",    // 5.
	"TRACKER",      // 6.
	"SENSES",       // 7.
	"BOOSTS",       // 8.
	"BUTTON LAYOUT",// 9.
	"STICK LAYOUT", // 10. 
	"SLIDE CANCEL", // 11.       /
	"RAPID FIRE",   // 12.
	"GLOBAL MODS",  // 13.
	"AIM ASSIST"    // 14.
	
	

};
const string World_str[] = {
"OFF",//0
"DROP SHOT",//1
"BUNNY HOP",//2
"TURBO MELEE",//3
"QUICKSCOPE",   //4
"RUMBLE", //5
"FIRE PING", //6
"STOP RELOAD",//7
"STOP PLATE",//8
"SNIPER HOLD",//9
"INVERTED",   //10
"TRIGGER", //11
"AA BOOSTER",//12
"GLOBAL MODS" //13
}
const uint8 World_chars []= {
3, //0
9, //1
9, //2
11,//3
10,//4
6, //5
9, //6
11,//7
10,//8
11,//9
8, //10
8, //11
10 //12

}

int GLOBAL_MODS;

const uint8 ModNames_char_count [] ={

	0, // "DASH BOARD"    //0
	13,// "LEGACY"        //1
	13,// "RUMBLE RECOIL" //2
	11,// "PROGRESSIVE "  //3
	12,// "BATTS STICKY"  //4
	9,//  "POLAR AIM"     //5
	7, // "TRACKER"       //6
	6, // "SENSES"        //7
	6, // "BOOSTS"        //8
	13,// "BUTTON LAYOUT" //9 
	12,// "STICK LAYOUT"  //10
	12,// "SLIDE CANCEL"  //11
	10,// "FREE"          //12
	10,// "RAPID FIRE"    //13
	11,// GLOBAL MODS     //14
	10 // AIM ASSIST      //15
}
const uint8 Edit_ind []={
	0,//0
	1,//1
	1,//2
	1,//3
	1,//4
	1,//5
	1,//6
	1,//7
	1,//8
	0,//9
	0,//10
	1,//11
	1,//12
	1,//13
	1,//14
	1 //15
}
//---------------------------

const string PROFILES[] = { "PRIMARY", "SECONDARY", "" }

const string option_idx[] = {
	"OFF", "ON",
	"SLIDE MW", "SLIDE CW",
	"RUMBLE AR","DYNAMIC AR"
};
//--- BUTTON LAYOUT
const string BL_str [] = {
	"DEFAULT",          // 0
	"TACTICAL",         // 1
	"LEFTY",            // 2
	"N0M4D/CHARLIE",    // 3
	"NOM4D/CH TACTICAL",// 4
	"NOM4D/CHARL L3F7Y",// 5
	"BUMPER JUMPER",    // 6
	"BUMP/JUM TACTICAL",// 7
	"ONE-HAND GUNSLING",// 8
	"STICK AND MOVE",   // 9
	"BRAWLER",          // 10
	"BEAST",            // 11
	"DEFAULT SWAPPED",  // 12
	"BUMP/J SWAPPED",   // 13 
	"BUMP/J TACT SWAPP",// 14
	"STICK & MOVE SWAP",// 15
	"TACTICAL SWAPPED"  // 16
};
//--- STICK LAYOUT
const string SL_str [] = {
	"DEFAULT",          // 0
	"SOUTHPAW",         // 1
	"LEGACY",           // 2
	"LEGACY SOUTHPAW",  // 3
	
	"SOUTHPAW",         // 4
	"NO CLICK SWAP",    // 5
	
	"LEGACY SOUTHPAW",  // 6
	"NO CLIC SWAP"      // 7
}; 

/*=========================================
		EDIT VALUES STRINGS
=========================================*/
const string EditValuesNames [] ={
	"RADIUS",          //0
	"STEPS" ,          //1 
	"CW SLIDE DELAY",  //2
	"MW SLIDE DELAY",  //3
	"TRACKER STRENGTH", //4
	"E SCAN SPEED",    //5
	"AR STRENGTH",     //6
	"GEN SENS",        //7   
	"ADS SENS",        //8
	"FIRE SENS",       //9
	"ADS FIRE SENS",   //10
	"GRENADE SENS" ,   //11
	"BOOST_SENSES",    //12
	"VERTICAL",        //13
	"HORIZONTAL",      //14
	"FREE",  //15
	"VERTICAL START",  //16
	"VERTICAL END",    //17
	"VERTICAL TIME",   //18
	"HORIZOTAL START", //19
	"HORIZONTAL END",  //20
	"HORIZONTAL TIME ",//21
	"RATE OF FIRE",    //22
	"ADS SIZE",        //23
	"ADS TIME",        //24
	"FIRE SIZE",       //25
	"FIRE TIME",       //26
	"HIP SIZE",        //27
	"HIP TIME",        //28
	"MIN RADIUS",	   //29			
    "MAX RADIUS",	   //30		
    "MIN ANGLE",	   //31	
    "MAX ANGLE"	       //32	

}
const uint8 CharCount [] ={
	6, //RADIUS         /0/
	5, //STEPS           1
	14,//CW Slide Delay  4
	14,//MW Slide Delay   5
	16,//E Scan Strength  6  
	12,//E Scan Speed      7
	11,//AR Strength     8 
	8, //GEN SENS         9 
	8, //ADS SENS         10
	9, //FIRE SENS        11
	13,//ADS FIRE SENS    12
	12,//GRENADE SENS     13
	11,//BOOST_SENSES
	8, //VERTICAL
	10,//HORIZONTAL
	0,//FREE
	14,//VERTICAL START
	11,//VERTICAL END      20
	13,//VERTICAL TIME
	16,//HORIZOTAL START
	14,//HORIZONTAL END
	15,//HORIZONTAL TIME	
	12,//RATE OF FIRE       25
	8, //ADS SIZE
	8, //ADS TIME
	9, //FIRE SIZE
	9, //FIRE TIME        29
	8, // HIP SIZE//30
	8,  //HIP TIME //31
	10,//MIN RADIUS //32
	10,//MAX RADIUS //33
	9,//,MIN ANGLE//34
	9 //MAX ANGLE
	
}
const uint8 Min_Max [][] = {
	{0, 0 },// DASH BOARD   
	{13,14},// LEGACY RECOIL  
	{6, 6 },// RUMBLE RECOIL 
	{16,21},// PROGRESSIVE   
	{23,28},// STICKY AIM 
	{0, 1 },// POLAR AIM
	{4, 5 },// ENHAN SCANING
	{7,11 },// SENSES
	{12,12},// BOOSTS
	{0, 0 },// BUTTON LAYOUT
	{0, 0 },// STICK LAYOUT
	{2,3},  // "SLIDE CANCEL
	   
	{22,22},// RAPID FIRE
	{0,0},  // GLOBAL MENU
	{29,32} // SE AIM ASSIST

	
}  
//----VaR------
int update_timer,C_RX,C_RY,C_LX,C_LY, L_RX,L_RY,AR_RY;
int ar_strength, angle,inverted,ret,enhanced_scanning_angle ;
int mvt_direction,rx_drift,ry_drift,lx_drift,ly_drift,drift_calib;
int i;

int KS_Rapid_Fire;
int hold_time;                                                    
int rest_time;
int led_on;
int led_off; 
int USE_RAPID_FIRE[2];
define Akimbo_Toggle      	 =   PS4_LEFT;	
int Akimbo;
int RS_gr;
int mn=326, mx=328; 
define RS=POLAR_RS; 
int rnd;
int SLIDE_MW; 
int SLIDE_CW;
int CW_SLIDE_DELAY; 
int MW_SLIDE_DELAY;
int KillSwitch;



define MAGNITUDE					= 500;
int REFRESH_RATE					= TIME_BASE * 10;
int USE_CORRECTION;
int USE_SENS;
int GEN_SENS ;
int ADS_SENS;
int FIRE_SENS;
int ADS_FIRE_SENS;
int GRENADE_SENS;
int ads_grenade_sens;
int ads_fire_sens;
int Sens;
int Radius;
int anti_recoil;       
int anti_recoil_H; 
define AR_Release = 68;
int DS_Speed = 80;
int reloading;
int reloading_time;
int shot_before_reload;
define max_reload_time = 5000;	
int cancel_plates_timer;
int SCOPE_VAL = 100;
int _ret
int P_o_l_a_r__v_e_l_o_c_i_t_y ;
int P_o_l_a_r__r_a_d_i_u_s;

//TOGGLES
int USE_CANCEL_RELOAD
int USE_CANCEL_PLATES
int USE_STEADY_AIM;
int USE_LEGACY[2]
int SENSES_BOOST;
int POLARBOOSTER     = TRUE;
int USE_WOLF_SENS;
int USE_DROPSHOT;
int USE_MELEE;
int USE_SLIDE_CANCEL = TRUE
int USE_HAIR_TRIGGER = TRUE;
int USE_HOLD_BREATH ;
int	USE_RUMBLE       = TRUE;
int USE_PROGRESSIVE[2];
int USE_TRACKING;
int USE_POLAR_AIM;
int USE_STICKY_AIM;
int AR_TYPE;
int PR_BOOST = 6;
int USE_BUNNY_HOP;
int USE_QUICKSCOPE[2];

int INDEXER;
int RESOLUTION;
int ANTI_RECOIL_V[2]; 
int ANTI_RECOIL_H[2]; 
int ENHANCED_SCANNING_STRENGTH;
int ENHANCED_SCANNING_SPEED;
int ANTIRECOIL_START[2];
int ANTIRECOIL_END[2];
int ANTIRECOIL_TIME[2];

int ANTIRECOIL_H_START[2];
int ANTIRECOIL_H_END[2];
int ANTIRECOIL_H_TIME[2];

int STICKY_AIM_SIZE;
int STICKY_AIM_TIME;
int POLAR_STEPS;
int POLAR_RADIUS;
int AR_STRENGTH[2];
int RATE_OF_FIRE;
int USE_PING;

define TIME_BASE			        = 4;	
define MAX_DRIFT			        = 15;
define timelimit 					= 304;

int MIN_RADIUS;
int MAX_RADIUS;
int USE_AIM_ASSIST;
int MIN_ANGLE						= 4;
int MAX_ANGLE						= 8;

int INVERTED; 

//OLED
define ofmw = OLED_FONT_MEDIUM_WIDTH;
define ofsw = OLED_FONT_SMALL_WIDTH;
define ofs  = OLED_FONT_SMALL;
define ofm  = OLED_FONT_MEDIUM;
define ofl  = OLED_FONT_LARGE;


// BODGES AA_BOOSTER
int AA_BOOSTER;
//--RY Radius
    int LY_Min                        = -18;
    int LY_Max                        =  18;
//--RX Radius
    int LX_Min                        = -25;
    int LX_Max                        =  25;
//--Wait Time
    define w                        =  80;
//--Variables
    int a, b; //c;



int ADS_SIZE 
int ADS_TIME
int ADS_FIRE_SIZE
int ADS_FIRE_TIME
int HIP_SIZE
int HIP_TIME

const int16 TRACKER[] 		= {
	0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156,173, 190, 207, 224, 241, 258, 275, 292, 309, 325,342, 358, 374, 390, 406, 422, 438, 453, 469, 484,500, 515, 529, 544, 559, 573, 587, 601, 615, 629,642, 656, 669, 682, 694, 707, 719, 731, 743, 754,766, 777, 788, 798, 809, 819, 829, 838, 848, 857,866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 939, 945, 951, 956, 961, 965, 970, 974, 978, 981,984, 987, 990, 992, 994, 996, 997, 998, 999, 999,1000
}     
init{
	LOAD_PVARS()
	Sensitivity_Alignent()
	mvt_direction = 1;
	
	update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
	inverted = -1;
	else
	inverted = 1;
	
	angle = 90 * inverted;
	enhanced_scanning_angle = 90 * inverted;
	
	drift_calib = 100;	
	
	led(6);
	
}

/*==============================================================
						MAIN BLOCK
==============================================================*/
main
{

	set_val(TRACE_1,menu);
	set_val(TRACE_2,INDEXER);
	set_val(TRACE_3,USE_LEGACY[INDEXER]);
	set_val(TRACE_4,USE_PROGRESSIVE[INDEXER]);
	//set_val(TRACE_4,weapon_idx);
	
	Run_Button_Configs()


	//--- TURN SCRIPT ON/OFF  KillSwitch
	if((get_ival(PS4_L2) > 50 && event_release(PS4_SHARE))){
		
		KillSwitch = !KillSwitch;
		display_QT(1);
		set_val(PS4_SHARE, 0);
		
		combo_run(RUMBLE_ON);
	}

	if( construct  ) { 
		cls_oled( 1 );
		
		if( menu == dash_board ) { 
			rect_oled( 1, 1, 126, 22, 1, 0 ); led( SkyBlue );
			printf( center_x( 11, ofmw ), 4, 1, 1, dash_idx[ 0 ] );
			printf( center_x( 18, ofsw ), 26, 0, 0, dash_idx[ 1 ] );
			clear = 0; screen_saver = 1;
		}
		
		else if( menu ) { 
			print_profile_text(INDEXER, 1);
			rect_oled( 1, 1, 126, 17, 1, 0 );
			create_dpad( 1, 36, 0 ); 
			create_dpad( 112, 36, 0 );
			if( menu != Global_menu )printf( center_x( 11, ofsw ), 38, 0, 0, instruction_idx[ 2 ] );
			
			//--- RAPID FIRE  1.
			if( menu ==Rapid_Fire_menu ) { 
				print_mod_name();
				if( USE_RAPID_FIRE[INDEXER] == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red);   } 
				if( USE_RAPID_FIRE[INDEXER]== 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led( SkyBlue ); combo_run(RUMBLE_ON)}
				
			}
			//--- SLIDE CANCEL  2.
			if( menu == Slide_Cancel_Mod_Menu ) { 
				print_mod_name();
				if( USE_SLIDE_CANCEL == 0 ) { printf( center_x(3, ofmw ), 20, 1, 0, option_idx[ 0 ] );led( Red ); SLIDE_MW = 0; SLIDE_CW = 0; }
				if( USE_SLIDE_CANCEL == 1 ) { printf( center_x(8, ofmw ), 20, 1, 0, option_idx[ 2 ] ); led( SkyBlue ); SLIDE_MW = 1; SLIDE_CW = 0; }
				if( USE_SLIDE_CANCEL == 2 ) { printf( center_x(8, ofmw ), 20, 1, 0, option_idx[ 3 ] ); led(SkyBlue); SLIDE_MW = 0; SLIDE_CW = 1; combo_run (RUMBLE_ON)}
			}
			//--- POLAR AIM   3.
			if( menu ==Polar_Aim_Menu ) { 
				print_mod_name();
				if( USE_POLAR_AIM == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red  ); USE_POLAR_AIM = 0}
				if( USE_POLAR_AIM == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led(SkyBlue ); USE_POLAR_AIM = 1combo_run (RUMBLE_ON)}	
			}
			//--- STICKY    4.
			if( menu == Batts_Sticky_Menu ) { 
				print_mod_name();
				if( USE_STICKY_AIM == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led(Red );USE_STICKY_AIM = 0 }
				if( USE_STICKY_AIM == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led(SkyBlue); USE_STICKY_AIM = 1combo_run(RUMBLE_ON)}
			}
			if( menu == Sweet_Evil_Recoil_menu ) { 
				print_mod_name();
				if( AR_TYPE[INDEXER] == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( AR_TYPE[INDEXER] == 1 ) { printf( center_x(11, ofmw ), 20, 1, 0, option_idx[ 5 ]  ); led( SkyBlue );  }
			    if( AR_TYPE[INDEXER] == 2 ) { printf( center_x(11, ofmw ), 20, 1, 0, option_idx[ 4 ]  ); led( SkyBlue );  }
				set_val(TRACE_5, AR_TYPE);
			}
			//--- ENCHACED SCANING .8
			if( menu == Enhanced_Menu){
				print_mod_name();
				if(  USE_TRACKING == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led(Red); }
				if(  USE_TRACKING == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue ); combo_run(RUMBLE_ON)}
			}
			//--- SENSES .10
			if( menu == Senses_Menu) {
				print_mod_name();
				if( USE_WOLF_SENS == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );}
				if( USE_WOLF_SENS == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue);combo_run(RUMBLE_ON) }
			}
			//--- Boosts_Menu 11
			if( menu == Boosts_Menu) {
				print_mod_name();
				if( USE_CORRECTION == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red ); }
				if( USE_CORRECTION == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue ); combo_run(RUMBLE_ON) } 
			}
			//-- BUTTON LAYOUT 12
			if( menu == ButtonLayout ) { 
				print_mod_name();
				if( BUTTON_LAYLOUT >= 0 && BUTTON_LAYLOUT < 17) OptionMenu_BL ( Opt_BL [ BUTTON_LAYLOUT ], BUTTON_LAYLOUT ) led( SkyBlue );combo_run(RUMBLE_ON);
			}
			//--- STICK LAYOUT 13
			if( menu == StickLayout ) { 
				print_mod_name();
				if(STICK_LAYLOUT == 0) {printf( center_x( 7, ofsw ), 20, ofs, 0, SL_str[ 0 ] ); led( SkyBlue );  STICK_LAYLOUT = 0; }// DEFAULT
				if(STICK_LAYLOUT == 1) {printf( center_x( 8, ofsw ), 20, ofs, 0, SL_str[ 1 ] ); led( SkyBlue );  STICK_LAYLOUT = 1; }// SOUTHPAW
				if(STICK_LAYLOUT == 2) {printf( center_x( 6, ofsw ), 20, ofs, 0, SL_str[ 2 ] ); led( SkyBlue );  STICK_LAYLOUT = 2; }// LEGACY
				if(STICK_LAYLOUT == 3) {printf( center_x(15, ofsw ), 20, ofs, 0, SL_str[ 3 ] ); led( SkyBlue );  STICK_LAYLOUT = 3; }// LEGACY SOUTHPAW
				
				if(STICK_LAYLOUT == 4) {printf( center_x( 8, ofsw ), 20, ofs, 0, SL_str[ 4 ] ); led( SkyBlue );  STICK_LAYLOUT = 4; }// SOUTHPAW (SOUTHPAW NO CLICK SWAP)
				if(STICK_LAYLOUT == 5) {printf( center_x(13, ofsw ), 30, ofs, 0, SL_str[ 5 ] ); led( SkyBlue );  STICK_LAYLOUT = 4; }// NO CLICK SWAP (SOUTHPAW NO CLICK SWAP)
				
				if(STICK_LAYLOUT == 6) {printf( center_x(15, ofsw ), 20, ofs, 0, SL_str[ 6 ] ); led( SkyBlue );  STICK_LAYLOUT = 5; }// LEGACY SOUTHPAW (LEGACY SOUTHPAW NO CLICK SWAP)
				if(STICK_LAYLOUT == 7) {printf( center_x(12, ofsw ), 30, ofs, 0, SL_str[ 7 ] ); led( SkyBlue  );  STICK_LAYLOUT = 5; }// NO CLIC SWAP (LEGACY SOUTHPAW NO CLICK SWAP)
			}
			//---LEGACY RECOIL
			if(menu == Legacy){
				print_mod_name();
				weaponmenu(USE_LEGACY[INDEXER]);
			}
			
			//----PROGRESSIVE
			if(menu ==Progressive_Menu){
				print_mod_name();
				weaponmenuPRO(USE_PROGRESSIVE[INDEXER])
			} 
			//----GLOBAL MENU
			if( menu == Global_menu ){ 
				print_mod_name();
				if( GLOBAL_MODS == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				//--------------------------------------
				if(GM_changed)Global_Menu(GLOBAL_MODS);
				//--------------------------------------
				
			}
			if(menu == SE_AIM_menu){
				print_mod_name();
				if( USE_AIM_ASSIST  == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( USE_AIM_ASSIST  == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led(SkyBlue ) ;combo_run(RUMBLE_ON)  }
			}

			screen_saver = 0;
			
		}
		
		construct = 0;
	}
	
	//----GLOBAL MENU
	//===================================\\
	//   ALL CODE FOR MODS ARE HERE MAIN //
	//===================================\\

	vm_tctrl(-6);
	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_ival(aim_x))+ 2);
		ry_drift = max(ry_drift, abs(get_ival(aim_y))+ 2);
		
		lx_drift = max(lx_drift, abs(get_ival(strafe))+ 2);
		ly_drift = max(ly_drift, abs(get_ival(walk))+ 2);
		
		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);
		
		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);
		
		drift_calib--;
		
		rx_drift = max(rx_drift, ry_drift);
		lx_drift = max(lx_drift, ly_drift);
		
	}
	else
	{	
		if( menu == dash_board && !EditMenu && !KillSwitch) { 
			//--- OPEN MENU 
			if( get_val( XB1_LT )){
				if(event_press( XB1_MENU ) ) { 
					menu = Legacy; 
					construct = 1; 
					EditMenu  = FALSE; 
					set_val(XB1_MENU,0);
					KS_Rapid_Fire = FALSE
				}
			}
			if(get_val(ADS) &&event_press(PROFILE_SYNC))
			INDEXER =!INDEXER;
			if(INDEXER) led( Yellow );
			else led(SkyBlue);
			if( !screen_saver) {
				print_profile_text(INDEXER, 0);
				
			}
			
			if(event_release(SWITCH) && get_ptime(SWITCH) <= 496)
			{
				INDEXER =!INDEXER;
				if(INDEXER) led( Yellow );
				else led(SkyBlue);
				if( !screen_saver) {
					print_profile_text(INDEXER, 0);
					combo_run(WAIT_MESSAGE);
				}
			}
			//--- SLIDE CANCEL
			if(USE_SLIDE_CANCEL)
			{
				if( abs(get_val(PS4_LY)) > 80 || abs(get_val(PS4_LX)) > 80 )
				{
					if(event_release(CROUCH))
					{
						if (SLIDE_MW) combo_run(MW);
						
						if (SLIDE_CW) combo_run (CW);
					} 
				}
			}
		}
		// STICKY AIM
		if(USE_STICKY_AIM)
		{
			if(get_ival(ADS) && !get_ival(FIRE))
			{
				combo_run(Sticky_Aim);
				STICKY_AIM_SIZE = ADS_SIZE;
				STICKY_AIM_TIME = ADS_TIME;
			} 
			else if(get_ival(ADS) && !get_ival(FIRE)) {
				combo_stop(Sticky_Aim);
				STICKY_AIM_SIZE  = ADS_FIRE_SIZE;
				STICKY_AIM_TIME = ADS_FIRE_SIZE;
			}
			else if(!get_ival(ADS) && get_ival(FIRE)){
				combo_run(Sticky_Aim);
				STICKY_AIM_TIME += HIP_SIZE;
				STICKY_AIM_TIME -= HIP_SIZE;
			} 
			else 
			{
				combo_stop(Sticky_Aim);
			}
		}
		
		if(USE_CORRECTION)	
		{
			ads_grenade_sens=100-(SENSES_BOOST); ads_fire_sens=96-(SENSES_BOOST); 
			if (get_val (PS4_L2))
			{
				if(get_val(PS4_R2) && get_val(PS4_L2))                              
				{ 
					Sens = ads_fire_sens;                                              
				}
				if(!get_val(PS4_R2) && !get_val(PS4_L2) || get_val (PS4_R2) &&!get_val(PS4_L2)) 
				{
					Sens = 100; 
				}   
				if(!get_val(PS4_R2) && get_val(PS4_L2))
				{
					Sens = ads_grenade_sens;
				}
				if (stick_input > Radius)/*cut_off_polar*/
				{
					if(Sens > 100) Sens = 100;  
					sensitivity(PS4_RX, NOT_USE, Sens);
					sensitivity(PS4_RY, NOT_USE, Sens);
				}
			}  
		}
		stick_input = (isqrt(pow(get_ival(PS4_RX),2) + pow(get_ival(PS4_RY),2)));

		if(USE_POLAR_AIM)
		{
			if (POLARBOOSTER && get_ival(FIRE)) 
			{
				Radius = P_o_l_a_r__r_a_d_i_u_s + PR_BOOST;
			}
			else 
			{
				Radius = P_o_l_a_r__r_a_d_i_u_s;
			}
			if (get_ival(ADS) || (get_ival(FIRE)))
			{
				if (stick_input <= Radius)
				{ 
					rnd = random(mn, mx);
					RS_gr = (RS_gr + P_o_l_a_r__v_e_l_o_c_i_t_y) % 360;
					set_polar(RS, RS_gr, (Radius * rnd));
				}
				
			} 
		}

		if(USE_RUMBLE == FALSE)
		{
			block_rumble();
		}
		
		if(USE_HAIR_TRIGGER)
		{
			if(get_ival(FIRE) > 10)
			set_val(FIRE, 100);
			
			if(get_ival(ADS)> 10)
			set_val(ADS, 100);
		}		
		
		C_RX = get_ival(aim_x);
		C_RY = get_ival(aim_y);
		
		if(get_val(ADS) > 50 || get_val(FIRE) > 50)
		{									
			if(update_timer >= REFRESH_RATE)
			{					
				block(aim_x, REFRESH_RATE);
				block(aim_y, REFRESH_RATE);
				
				_ret = get_mvt_direction(C_RX, L_RX);
				
				if(_ret != 0)
				mvt_direction = _ret;
				
				update_timer = 0;	
				
				L_RX = C_RX;
				L_RY = C_RY;
			}	
			
			if((AR_TYPE) && ((get_val(ADS) > 50) && (get_val(FIRE) > 50)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
			{
				if(AR_TYPE == 1)
				{
					AR_RY = get_rumble_evil_ar();
				}
				else
				{
					if(AR_TYPE == 2)
					AR_RY = (get_ptime(FIRE) / (160));
					
					ar_strength = (AR_STRENGTH / 2) + AR_STRENGTH
					
					if(AR_RY > ar_strength)
					AR_RY = ar_strength ;
					
					AR_RY = AR_RY +  AR_STRENGTH- ((abs(C_RX * C_RX) + abs(C_RY * C_RY)) / 1000) ;
				}
				
				if(inverted == -1)
				C_RY += inv(AR_RY);
				else
				C_RY += AR_RY;
			}
			
			
			{		
		if(USE_TRACKING)
				{
					if(mvt_direction == 1)
					{
						C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, sin(enhanced_scanning_angle));
						C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, cos(enhanced_scanning_angle));
					}
					else
					{
						C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, cos(enhanced_scanning_angle));
						C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH, sin(enhanced_scanning_angle));
					}
					
					enhanced_scanning_angle = ((enhanced_scanning_angle + ENHANCED_SCANNING_SPEED)%360);
				}
	  if(USE_AIM_ASSIST)
				if(mvt_direction == 1)
				{
					C_RX += get_polar_coordinate(random(MIN_RADIUS,MAX_RADIUS), sin(angle));
					C_RY += get_polar_coordinate(random(MIN_RADIUS,MAX_RADIUS), cos(angle));
				}
				else
				{
					C_RX += get_polar_coordinate(random(MIN_RADIUS,MAX_RADIUS), cos(angle));
					C_RY += get_polar_coordinate(random(MIN_RADIUS,MAX_RADIUS), sin(angle));
				}
				
				angle = ((angle + random(MIN_ANGLE,MAX_ANGLE))%360);
			}
			
			if(USE_PROGRESSIVE[INDEXER] )
			{
				if(ANTIRECOIL_START[INDEXER] < ANTIRECOIL_END[INDEXER])
				i_val = 1;
				else
				i_val = -1;
				
				
				i_pnt = (ANTIRECOIL_TIME[INDEXER] * 10) / (abs(ANTIRECOIL_START[INDEXER] - ANTIRECOIL_END[INDEXER])); 
				
				// Horizontal
				
				if(ANTIRECOIL_H_START[INDEXER] < ANTIRECOIL_H_END[INDEXER])
				i_val_h = 1;
				else
				i_val_h = -1;
				
				i_pnt_h = (ANTIRECOIL_H_TIME[INDEXER] * 10) / (abs(ANTIRECOIL_H_START[INDEXER] - ANTIRECOIL_H_END[INDEXER]));
				
				
				if(!get_ival(FIRE))  
				{
					// Vertical
					ar_y = ANTIRECOIL_START[INDEXER];
					i_cnt = 0;
					i_num = 0;
					// Horizontal
					ar_x = ANTIRECOIL_H_START[INDEXER];
					i_cnt_h = 0;
					i_num_h = 0;
				}
				// If Fire button is held
				if(get_ival(FIRE)) 
				{
					// Vertical
					if(!p_complete())  
					ar_y = p_val();
					else
					ar_y = ANTIRECOIL_END[INDEXER];
					
					if(y_val() < 100)
					//set_val(PS4_RY,y_val()); 
					C_RY = y_val();
					
					// Horizontal
					if(!p_complete_x())
					ar_x = p_val_x();
					else
					ar_x = ANTIRECOIL_H_END[INDEXER];
					
					if(x_val() < 100)
					//set_val(PS4_RX,x_val()); 
					C_RX = x_val();
					
				}
			}
		
			set_val(aim_x, clamp(C_RX, -100, 100));
			set_val(aim_y, clamp(C_RY, -100, 100));
			
			update_timer += get_rtime();
		}
		else
		{
			update_timer = 0;
			update_timer = REFRESH_RATE;
			
			angle = 90 * inverted;
			enhanced_scanning_angle = 90 * inverted;
			
			set_val(aim_x, C_RX);
			set_val(aim_y, C_RY);
		}
	 }
	
	
		if(USE_LEGACY[INDEXER])
		{ 
			if( get_val(ADS) && get_val(FIRE )) {  
				
				combo_run(AntiRecoil);                 
			}                                          
			
			if( abs(get_val(10)) > AR_Release || abs(get_val(9)) > AR_Release) {
				
				combo_stop (AntiRecoil);               
			}                                
		}    
		
		if(USE_HOLD_BREATH)
		{
			if(get_val(ADS))
			set_val(SPRINT,100);
			
			if(get_val(walk) <-90 && get_val(ADS) && get_ptime(ADS) > 200 && combo_running(HOLD_BREATH))
			combo_stop(HOLD_BREATH);
			
			if(event_press(ADS))
			combo_run(HOLD_BREATH);
			
			if(get_val(ADS) && get_lval(SPRINT))
			set_val(SPRINT,0);
		}	
	
	if(USE_WOLF_SENS)
	{
		if(!get_val(ADS) && !get_val(FIRE)) 
		{ 
			USE_SENS=GEN_SENS;
		}
		else if(get_val(ADS) && !get_val(FIRE))
		{ 
			USE_SENS=ADS_SENS;
		}    
		else if(!get_val(ADS) && get_val(FIRE))
		{ 
			USE_SENS=FIRE_SENS;
		}
		else if(get_val(ADS) && get_val(FIRE))
		{ 
			USE_SENS=ADS_FIRE_SENS;
		}
		else if(get_val(LETHAL))
		{ 
			USE_SENS=GRENADE_SENS;
		}
		sensitivity(PS4_RY,NOT_USE,USE_SENS);
		sensitivity(PS4_RX,NOT_USE,USE_SENS);			
	}
	
	if(USE_DROPSHOT) {
		
		if(get_val(FIRE)) combo_run(DROP);
	}
	if(USE_MELEE)
	{
		if(get_val(MELEE))
		combo_run(Turbo_Melee);
		
		if(get_val(ADS) && event_press(FIRE) < 100)
		combo_stop(Turbo_Melee);
	}
	
	
	
	
	if(USE_PING)
	{
		if(get_val(ADS)&& double_click(PS4_UP)||event_press(FIRE))
		combo_run(Auto_Ping);
		
		if(!get_val(ADS))
		combo_stop(Auto_Ping);
	}
	
	if(get_ival(ADS) && event_release(PS4_DOWN)){
		
		USE_BUNNY_HOP =!USE_BUNNY_HOP;
		combo_run(Menu_Rumble);
		
		if(!USE_BUNNY_HOP)
		{		
			
			set_led(Yellow, Blue);
			
		}
	}
	
	if(USE_BUNNY_HOP){
		
		if(get_ival(JUMP) && get_ptime(JUMP) > 200) 
		combo_run(Bunnyhop); 	
		
		led_on  = 150;
		led_off = 300;
		
	}
	if(!KS_Rapid_Fire){
		if(get_ival(ADS) && event_release(PS4_RIGHT)){
			
			USE_RAPID_FIRE[INDEXER] =!USE_RAPID_FIRE[INDEXER];
			combo_run(Menu_Rumble);
			
			if(!USE_RAPID_FIRE[INDEXER])
			{		
				combo_stop(BLINK);
				set_led(Red, 1);
				set_led (0, 3);
			}
		}
		//AKIMBO
		if(get_ival(ADS) && event_press(Akimbo_Toggle)) {
			combo_run (RUMBLE_ON);
			combo_restart(BLINK_3);
			
			Akimbo = !Akimbo;
		}
	}
	if (Akimbo) {
		if(get_ival(FIRE))
		combo_run(Akimbo);
		led_on  = 150;
		led_off = 300;
		combo_run(BLINK_3);
	}
	
	//--- RAPID FIRE
	if(USE_RAPID_FIRE[INDEXER]){
		
		hold_time = 500 / (  RATE_OF_FIRE[INDEXER]); 
		rest_time = hold_time - 20;
		if(rest_time < 0) rest_time = 0;
		
		if(get_val(FIRE))combo_run(RAPIDFIRE );
		else combo_stop(RAPIDFIRE );	
		
		led_on  = 150;
		led_off = 300;
		combo_run(BLINK);
	}
	//QUICK SCOPE
	if (USE_QUICKSCOPE) { 
		
		if(event_release(ADS) && get_ptime(ADS) > 260) { 
			set_val(SPRINT, 100); 
			combo_run(QUICKSCOPE);                
		} 
		//CANCEL RELOAD
		if(USE_CANCEL_RELOAD) {
			
			if(event_press(FIRE))
			shot_before_reload = TRUE;

			if(event_press(RELOAD) && shot_before_reload) 
			{
				reloading = TRUE;
				shot_before_reload = FALSE;
			}
			if(get_val(RELOAD) && get_ptime(RELOAD) >= 250) 
			{
				reloading = FALSE;
				combo_stop(CANCEL_RELOAD);
			}
			if(reloading)
			reloading_time += get_rtime();
			else reloading_time = 0;

			if(reloading_time > max_reload_time)
			reloading = FALSE;

			if(reloading_time > 0 && reloading_time <= max_reload_time && event_press(FIRE))
			combo_run(CANCEL_RELOAD);
		}
		//CANCEL PLATS
		if(USE_CANCEL_PLATES)

		{
			cancel_plates_timer += get_rtime();
			
			if(cancel_plates_timer >= 3000) 
			{
				cancel_plates_timer = 0;
		
			}
			if(event_press(ADS) || event_press(FIRE))
			//|| event_press(JUMP))
			combo_run(CANCEL_PLATES);
		}
		  if (AA_BOOSTER) {
       //   (get_ival(PS4_L2) || get_ival(PS4_R2))
      if (get_ival(PS4_R2) // && get_ival(PS4_L2) 
    && abs(get_ival(PS4_LX)) <= 20 && abs(get_ival(PS4_LY)) <= 20)
        
            combo_run(BOOST_BY_BODGE);
    }
	}    
	//==============================================

	if( menu && !EditMenu) { 
		
		//===========================================================
		//       SWITCH PROFILES  Y/TRIANGLE  
		//===========================================================
		
		if( event_press(SWITCH))  {
			INDEXER = !INDEXER;
			
			print_profile_text(INDEXER, 1);
			GM_changed = TRUE;
			construct = 1;
			
		}  

		//--- EXIT from OLED MENU
		if( event_press( PS4_CIRCLE )) { Save_Exit()}
		
		//--- ENTER in EDIT MENU
		if( menu != Global_menu ){// exept Global Menu
			if( event_press( PS4_CROSS  )) { 
				EditMenu = TRUE;
				refresh_edit = TRUE; 
				edit_idx = Min_Max [menu][0]; 
				construct = 0;  
			}
		}
		//--- BLOCK ALL INPUTS when we in OLED MENU
		block_all_inputs();
		
		
		if( event_press( PS4_RIGHT ) ) { 
			menu++; 
			if( menu > cycle_limit )  menu = cycle_return;  
			construct = 1;
		}
		if( event_press( PS4_LEFT  ) ){ 
			menu--; 
			if( menu < cycle_return )  menu = cycle_limit ; 
			construct = 1;
			
		}
		
		//--- RAPID FIRE
		if( menu == Rapid_Fire_menu ) {
			USE_RAPID_FIRE[INDEXER] = change_options(USE_RAPID_FIRE[INDEXER], 1,0 );
		}
		//--- SLIDE CANCEL
		if( menu == Slide_Cancel_Mod_Menu ) {
			USE_SLIDE_CANCEL = change_options(USE_SLIDE_CANCEL, 2,0 );
		}
		//--- POLAR ASSIST
		if( menu ==Polar_Aim_Menu ) {
			USE_POLAR_AIM = change_options(USE_POLAR_AIM, 1,0 );
		}
		//--- BATTS STICKY
		if( menu == Batts_Sticky_Menu ) {
			USE_STICKY_AIM = change_options(USE_STICKY_AIM, 1,0 );
		}
		//---HOLD BREATH
		
		//--- RECOIL 
		if( menu == Sweet_Evil_Recoil_menu ) {
			AR_TYPE[INDEXER] = change_options(AR_TYPE[INDEXER], 1,0 );	
		}
		
		//--- ENHANCED SCANING
		if( menu == Enhanced_Menu){
			USE_TRACKING = change_options( USE_TRACKING, 1,0 );
		}
		//--- SENSES
		if( menu == Senses_Menu) {
			USE_WOLF_SENS = change_options(USE_WOLF_SENS, 1,0 );	
		}
		//--- BOOSTS
		if( menu == Boosts_Menu) {
			USE_CORRECTION = change_options(USE_CORRECTION, 1,0 );	
		}
		//--- BUTTON LAYOUT
		if( menu == ButtonLayout ) {
			BUTTON_LAYLOUT = change_options(BUTTON_LAYLOUT,16,0) ; 
		}
		//--- STICK LAYOUT
		if( menu == StickLayout ) {
			STICK_LAYLOUT = change_options(STICK_LAYLOUT,5,0) ; 
		}
		//LEGACY
		if( menu == Legacy) {
			USE_LEGACY[INDEXER]  = change_options(USE_LEGACY[INDEXER] , 93,0 ); 
		
		
		}//USE_AIM_ASSIST
		if( menu == SE_AIM_menu) {
			USE_AIM_ASSIST = change_options(USE_AIM_ASSIST , 1,0 ); 
		}
		//PROGRESSIVE
		if( menu == Progressive_Menu) {
			USE_PROGRESSIVE[INDEXER]  = change_options(USE_PROGRESSIVE[INDEXER] , 93,0 ); 
		}
		if( menu == Global_menu ) {
			GLOBAL_MODS = change_options(GLOBAL_MODS, 12,0 );
			
			if(GLOBAL_MODS == 1) {
				if(event_press(XB1_A)){
					USE_DROPSHOT = !USE_DROPSHOT;
					edit_global_mods(USE_DROPSHOT);	
				}
				if(USE_DROPSHOT) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 2) {
				if(event_press(XB1_A)){
					USE_BUNNY_HOP = !USE_BUNNY_HOP;
					edit_global_mods(USE_BUNNY_HOP);
				}
				if(USE_BUNNY_HOP) { led(Yellow) }
				else { led(Red) }
			}
			if(GLOBAL_MODS == 3) {
				if(event_press(XB1_A)){
					USE_MELEE = !USE_MELEE;
					edit_global_mods(USE_MELEE);
				}
				if(USE_MELEE) { led(Yellow) }
				else { led(Red) }
			}
			
			if(GLOBAL_MODS == 4) {
				if(event_press(XB1_A)){
					USE_QUICKSCOPE[INDEXER] = !USE_QUICKSCOPE[INDEXER];
					edit_global_mods(USE_QUICKSCOPE[INDEXER]);
				}
				if(USE_QUICKSCOPE[INDEXER]) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 5) {
				if(event_press(XB1_A)){
					USE_RUMBLE = !USE_RUMBLE;
					edit_global_mods(USE_RUMBLE);
				}
				if(USE_RUMBLE) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 6) {
				if(event_press(XB1_A)){
					USE_PING = !USE_PING;
					edit_global_mods(USE_PING);
				}
				if(USE_PING) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 7) {
				if(event_press(XB1_A)){
					USE_CANCEL_RELOAD = !USE_CANCEL_RELOAD;
					edit_global_mods(USE_CANCEL_RELOAD);
				}
				if(USE_CANCEL_RELOAD) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 8) {
				if(event_press(XB1_A)){
					USE_CANCEL_PLATES = !USE_CANCEL_PLATES;
					edit_global_mods(USE_CANCEL_PLATES);
				}
				if(USE_CANCEL_PLATES) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 9) {
				if(event_press(XB1_A)){
					USE_HOLD_BREATH = !USE_HOLD_BREATH;
					edit_global_mods(USE_HOLD_BREATH);
				}
				if(USE_HOLD_BREATH) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 10) {
				if(event_press(XB1_A)){
					INVERTED = !INVERTED;
					edit_global_mods(INVERTED);
				}
				if(INVERTED) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 11) {
				if(event_press(XB1_A)){
					USE_HAIR_TRIGGER = !USE_HAIR_TRIGGER;
					edit_global_mods(USE_HAIR_TRIGGER);
				}
				if(USE_HAIR_TRIGGER) { led(Yellow) }
				else { led(Red) }
				
			}
			if(GLOBAL_MODS == 12) {
			     if(event_press(XB1_A)){
					AA_BOOSTER = !AA_BOOSTER;
					edit_global_mods(AA_BOOSTER);
				}
				if(AA_BOOSTER) { led(Yellow) }
			else { led(Red) }
			
			}
		}
		
	}
	if( menu &&  EditMenu){
		
		//--- Exit Edit Menu --> back to OLED MENU
		if(event_press(PS4_CIRCLE)){  construct = 1; EditMenu = FALSE; }
		
		block_all_inputs();
		if(event_press(PS4_RIGHT)) {
			edit_idx++;
			if(edit_idx > Min_Max [menu][1]) edit_idx = Min_Max [menu][0];
			if(edit_idx < Min_Max [menu][0]) edit_idx = Min_Max [menu][0];
			
			refresh_edit = TRUE;
		}
		//--- GO LEFT---
		block_all_inputs();
		if(event_press(PS4_LEFT)) {
			edit_idx--;
			if(edit_idx < Min_Max [menu][0]) edit_idx = Min_Max [menu][1] ;
			refresh_edit = TRUE;
		}
		//--- REFRESH EDIT MENU
		if(refresh_edit){
			cls_oled( 1 );
			rect_oled( 1, 1, 126, 14, 1, 0 );
			
			//--- There is no Edit variables for this MOD
			if(Edit_ind[ menu ] == 0 ){
				print_mod_name();
				//---NO EDIT LABEL--- 
				line_oled(1,45,127,45,1,0);
				printf( center_x( 17, ofsw ), 20, ofs, 0, NO_EDIT_VAR1[0] );  
				printf( center_x( 12, ofsw ), 33, ofs, 0, NO_EDIT_VAR2[0] ); 
			}
			//--- SLIDE CANCEL
			if( menu == Slide_Cancel_Mod_Menu ) {
				print_mod_name();  //                  val,       min, max, indx   
				if(edit_idx == 2) {display_edit( CW_SLIDE_DELAY,  10,   80, 2  ) ;}
				if(edit_idx == 3) {display_edit( MW_SLIDE_DELAY,  10,   80, 3 ) ;}				
			}
			//--STICKY AIM--
			else if( menu == Batts_Sticky_Menu ) {
				print_mod_name();//                   val,          min,  max, indx     
				if(edit_idx == 23) {display_edit( ADS_SIZE ,          0,   30, 23 ) ;}		
				if(edit_idx == 24) {display_edit( ADS_TIME,           0,   30, 24 ) ;}	
				if(edit_idx == 25) {display_edit(ADS_FIRE_SIZE,       0,   30, 25 ) ;}		
				if(edit_idx == 26) {display_edit(ADS_FIRE_TIME,       0,   30, 26 ) ;}		
				if(edit_idx == 27) {display_edit(HIP_SIZE,            0,   30, 27 ) ;}		
				if(edit_idx == 28) {display_edit(HIP_TIME,            0,   30, 28 ) ;}		
			}
			//--POLAR---
			else if( menu ==Polar_Aim_Menu ) {
				print_mod_name();//                   val,       min, max, indx
				if(edit_idx == 0) {display_edit(P_o_l_a_r__r_a_d_i_u_s,      0, 35, 0); }
				if(edit_idx == 1) {display_edit(P_o_l_a_r__v_e_l_o_c_i_t_y ,      0, 35, 1); }	
			}
			//----TRACKER---
			else if( menu == Enhanced_Menu ) {
				print_mod_name();//                   val,                min, max, Indx 
				if(edit_idx == 4) {display_edit(ENHANCED_SCANNING_STRENGTH, 0 , 30, 4); }
				if(edit_idx == 5) {display_edit(ENHANCED_SCANNING_SPEED   , 0 , 30, 5); }	
			} 
			//----SWEET EVIL RECOIL---
			else if( menu == Sweet_Evil_Recoil_menu ) {
				print_mod_name();//                   val,            min, max, indx 
				if(edit_idx == 6) {display_edit(AR_STRENGTH[INDEXER], -100 , 100, 6); }
			}
			//---------SENSES--------
			else if( menu == Senses_Menu ) {
				print_mod_name();//                   val,       min,  max, indx 
				if(edit_idx == 7) {display_edit(GEN_SENS,        0 , 327, 7); }
				if(edit_idx == 8) {display_edit(ADS_SENS,       0 , 327, 8); }
				if(edit_idx == 9) {display_edit(FIRE_SENS,      0 , 327, 9); }
				if(edit_idx == 10) {display_edit(ADS_FIRE_SENS,  0 , 327, 10); }
				if(edit_idx == 11) {display_edit(GRENADE_SENS,   0 , 327, 11); }
			}
			//------LEGACY-------
			else if( menu == Legacy ) {
				print_mod_name();//                   val,                min,  max, indx 
				if(edit_idx == 13) {display_edit(ANTI_RECOIL_V[INDEXER],   0 , 100, 13); }
				if(edit_idx == 14) {display_edit(ANTI_RECOIL_H[INDEXER],  -30 , 100, 14); }
			}
			//--------BOOSTS----------
			else if( menu == Boosts_Menu ) {
				print_mod_name();//                   val,         min, max, indx 
				if(edit_idx == 12) {display_edit(SENSES_BOOST ,     0 , 20, 12); }	
			}
			//V------PROGRESSIVE RECOIL-------V
			else if( menu == Progressive_Menu ) {
				print_mod_name();//                   val,                       min,  max, indx   
				if(edit_idx == 16) {display_edit(ANTIRECOIL_START[INDEXER],      -30 , 100, 16); }
				if(edit_idx == 17) {display_edit( ANTIRECOIL_END[INDEXER] ,      -30 , 100, 17); }
				if(edit_idx == 18) {display_edit( ANTIRECOIL_TIME[INDEXER],      1500 , 6000,18); }
				//H------PROGRESSIVE RECOIL-------H	
				if(edit_idx == 19) {display_edit(ANTIRECOIL_H_START[INDEXER],    -25 , 50, 19); }
				if(edit_idx == 20) {display_edit( ANTIRECOIL_H_END[INDEXER]  ,   -25 , 50, 20); }
				if(edit_idx == 21) {display_edit( ANTIRECOIL_H_TIME[INDEXER] ,   1500 , 6000, 21); }	
			}
			//------RAPID FIRE---------
			if( menu == Rapid_Fire_menu ) {
				print_mod_name();//                   val,       min,  max, indx   
				if(edit_idx == 22) {display_edit( RATE_OF_FIRE,   0,   25,  22  ) ;}				
			}
			else if( menu == SE_AIM_menu ) {
				print_mod_name();//    val,                       min,  max, indx   
				if(edit_idx == 29) {display_edit(MIN_RADIUS,        0 , 50, 29 ); }
				if(edit_idx == 30) {display_edit(MAX_RADIUS ,       0 , 50, 30); }
				if(edit_idx == 31) {display_edit(MIN_ANGLE,         0 , 50, 31); }
				if(edit_idx == 32) {display_edit(MAX_ANGLE,         0 , 50, 32); }
			}
			
			
			refresh_edit = FALSE;	
		}
		//---------SLIDE CANCEL-----------
		if( menu == Slide_Cancel_Mod_Menu ) {
			print_mod_name();//                                 var,       ,min,  max, step
			if(edit_idx == 2) { CW_SLIDE_DELAY  = edit_val( CW_SLIDE_DELAY , 10,   80,  1  ) ;}
			if(edit_idx == 3) { MW_SLIDE_DELAY  = edit_val( MW_SLIDE_DELAY , 10,   80,  1  ) ;}		
		}
		//POLAR
		else if( menu ==Polar_Aim_Menu ) { 
			print_mod_name();//                                   var,         ,min,  max, step
			if(edit_idx == 0) { P_o_l_a_r__r_a_d_i_u_s     = edit_val( P_o_l_a_r__r_a_d_i_u_s,       0,   35,  1  ) ;}
			if(edit_idx == 1) { P_o_l_a_r__v_e_l_o_c_i_t_y  = edit_val( P_o_l_a_r__v_e_l_o_c_i_t_y ,           0,   35,  1  ) ;}	
		}
		//---  -- Batts_Sticky_
		else if( menu == Batts_Sticky_Menu ) {
			print_mod_name();//                                    var,       ,min,  max, step
			if(edit_idx == 23) { ADS_SIZE  = edit_val( ADS_SIZE ,               0,   30,  1  ) ;}			
			if(edit_idx == 24) { ADS_TIME  = edit_val( ADS_TIME ,               0,   30,  1  ) ;}
			if(edit_idx == 25) { ADS_FIRE_SIZE  = edit_val( ADS_FIRE_SIZE ,     0,   30,  1  ) ;}			
			if(edit_idx == 26) { ADS_FIRE_TIME = edit_val( ADS_FIRE_TIME ,      0,   30,  1  ) ;}	
			if(edit_idx == 27) { HIP_SIZE  = edit_val( HIP_SIZE ,               0,   30,  1  ) ;}			
			if(edit_idx == 28) { HIP_TIME = edit_val( HIP_TIME ,                0,   30,  1  ) ;}	
		}
		// TRACKER
		else if( menu == Enhanced_Menu ) {
			print_mod_name();//                                                var,                 ,min,  max, step 
			if(edit_idx == 4) { ENHANCED_SCANNING_STRENGTH  = edit_val( ENHANCED_SCANNING_STRENGTH ,  0,   30,  1  ) ;}
			if(edit_idx == 5) { ENHANCED_SCANNING_SPEED     = edit_val( ENHANCED_SCANNING_SPEED    ,  0,   30,  1  ) ;}				
		}
		//SWEET EVIL RUMBLE & DYNAMIC RECOIL
		else if( menu == Sweet_Evil_Recoil_menu ) {
			print_mod_name();//                                            var,       ,min,  max, step
			if(edit_idx == 6) {AR_STRENGTH[INDEXER] = edit_val( AR_STRENGTH[INDEXER] , -100,  100,  1  ) ;}		
		}
		//WOLF SENSES
		else if( menu == Senses_Menu ) {
			print_mod_name();//                           var,           ,min,  max, step
			if(edit_idx == 7) {GEN_SENS      = edit_val( GEN_SENS       ,  50,  327,  1  ) ;}
			if(edit_idx == 8) {ADS_SENS      = edit_val( ADS_SENS      ,  50,  327,  1  ) ;}
			if(edit_idx == 9) {FIRE_SENS     = edit_val( FIRE_SENS     ,  50,  327,  1  ) ;}
			if(edit_idx == 10) {ADS_FIRE_SENS = edit_val( ADS_FIRE_SENS ,  50,  327,  1  ) ;}
			if(edit_idx == 11) {GRENADE_SENS  = edit_val( GRENADE_SENS  ,  50,  327,  1  ) ;}
		}
		//LEGACY AR
		else if( menu == Legacy) {
			print_mod_name();	//                                                var,        ,min,  max, step
			if(edit_idx == 13) {ANTI_RECOIL_V[INDEXER]   = edit_val( ANTI_RECOIL_V[INDEXER] ,    0,  100,  1  ) ;}
			if(edit_idx == 14) {ANTI_RECOIL_H[INDEXER] = edit_val( ANTI_RECOIL_H[INDEXER] ,     -30, 100,  1  ) ;}
		}
		//BOOSTS
		else if( menu == Boosts_Menu ) {
			print_mod_name();
			//                                                var,  ,min,  max, step
			if(edit_idx == 12){SENSES_BOOST  = edit_val( SENSES_BOOST   ,  0,  20,  1  ) ;}	
		}
		
		//PROGRESSIVE AR
		else if( menu == Progressive_Menu) {
			print_mod_name();	//                                                         var,               ,min,  max, step                                                  
			if(edit_idx == 16) {ANTIRECOIL_START[INDEXER]        = edit_val( ANTIRECOIL_START[INDEXER]      ,  -30,  100,    1  ) ;}
			if(edit_idx == 17) {ANTIRECOIL_END[INDEXER]          = edit_val(  ANTIRECOIL_END[INDEXER]       ,  -30,  100,    1  ) ;}
			if(edit_idx == 18) {ANTIRECOIL_TIME[INDEXER]         = edit_val(  ANTIRECOIL_TIME[INDEXER]      ,  1500,  6000,  10 ) ;}
			if(edit_idx == 19) {ANTIRECOIL_H_START[INDEXER]      = edit_val( ANTIRECOIL_H_START[INDEXER]    ,  -30,   50,    1  ) ;}
			if(edit_idx == 20) {ANTIRECOIL_H_END[INDEXER]        = edit_val(  ANTIRECOIL_H_END[INDEXER]     ,  -30,   50,    1  ) ;}
			if(edit_idx == 21) {ANTIRECOIL_H_TIME[INDEXER]       = edit_val(  ANTIRECOIL_H_TIME[INDEXER]    ,  1500,  6000,  10 ) ;}
			
		}//RAPID FIRE RATE
		else if( menu == Rapid_Fire_menu ) {
			print_mod_name();	//                           var,       ,min,  max, step
			if(edit_idx == 22) { RATE_OF_FIRE = edit_val(  RATE_OF_FIRE , 0,   25,  1  ) ;}	
			
		}
		else if( menu == SE_AIM_menu) {
			print_mod_name();	//   var,               ,min,  max, step                                                  
			if(edit_idx == 29) {MIN_RADIUS = edit_val( MIN_RADIUS     ,  4,  50,    1  ) ;}
			if(edit_idx == 30) {MAX_RADIUS = edit_val( MAX_RADIUS     ,  0,  50,    1  ) ;}
			if(edit_idx == 31) {MIN_ANGLE  = edit_val(  MIN_ANGLE    ,   2,  50,    1 ) ;}
			if(edit_idx == 32) {MAX_ANGLE  = edit_val( MAX_ANGLE    ,    0,   50,   1  ) ;}
		
			}
			
	}
	//--- SCREEN SAVER
	if( screen_saver ) {
		if( menu == dash_board ) { strobing_a1(); }
		clear += get_rtime();
		if( clear >= 12000 ) { cls_oled( 0 ); clear = 0; screen_saver = 0; }
	}
}

/*===============================END OF MAIN BLOCK==========================

===============================COMBO START================================*/
combo HOLD_BREATH
{
	set_val(SPRINT,0);
	wait(64);
	set_val(SPRINT,100);
	wait(112);
	set_val(SPRINT,0);
	wait(112);
}
combo MW {
	set_val(CROUCH, 100);
	wait(MW_SLIDE_DELAY); 
	set_val(CROUCH, 0);
	wait(60);
	set_val(CROUCH, 100);
	wait(50);
	set_val(CROUCH, 100);
	set_val(JUMP, 100);
	wait(60);
	set_val(CROUCH, 0);
	set_val(JUMP, 100);
	wait(10);
	set_val(JUMP, 0);
}
combo CW {
	set_val(CROUCH, 100);
	wait(CW_SLIDE_DELAY);
	set_val(CROUCH, 0);
	wait(20);
	set_val(SPRINT, 0);
	set_val(ADS, 100);
	wait(10);
	set_val(ADS, 0);
	set_val(CROUCH, 100);
	set_val(SPRINT, 100);
	wait(20);
	set_val(CROUCH, 0);
	set_val(SPRINT, 0);
	wait(20);
}
combo DROP {
	set_val(CROUCH,100);
	wait(40);
	set_val(CROUCH,0);
	wait(DS_Speed);
}
combo Bunnyhop{
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
}
combo Auto_Ping{
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
}
combo AntiRecoil {  
	anti_recoil = get_val(aim_y) + ANTI_RECOIL_V[INDEXER] * inverted      
	if(anti_recoil > 100) anti_recoil = 100;      
	set_val(aim_y, anti_recoil);                     
	anti_recoil_H = get_val(aim_x) + ANTI_RECOIL_H[INDEXER] * inverted  
	if(anti_recoil_H > 100) anti_recoil_H = 100;  
	set_val(aim_x, anti_recoil_H);   
}           
combo RUMBLE_ON {
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
}
combo Menu_Rumble {
	set_rumble(RUMBLE_B,100);
	wait(200);
	reset_rumble();

}
combo BOOST_BY_BODGE {
    a = random(LY_Min, LY_Max);
    b = (LX_Min) 
    c = (LX_Max);
   
    //  (LX_Min, LX_Max);
    //c = random(-15,        15);
    set_val(PS4_LY, get_ival(PS4_LY) + a);
    set_val(PS4_LX, get_ival(PS4_LX) + b);
    wait (100);
    set_val(PS4_LX, get_ival(PS4_LX) + c);
 
    wait(w);
}
combo CANCEL_RELOAD {
	set_val(SWITCH,100);
	wait(20);
	wait(20)
	set_val(SWITCH,100);
	wait(20);
	reloading = FALSE; 
}
combo CANCEL_PLATES { 
	set_val(MELEE,100);
	wait(20);
	USE_CANCEL_PLATES = FALSE;
	cancel_plates_timer = 0; 
}
combo BLINK {
	led(Yellow);
	wait(led_on);
	led(Red);
	wait(led_off);
}
combo BLINK_3 {
	led(Red);
	wait(led_on);
	led(Pink);
	wait(led_off);
}
combo RAPIDFIRE { 
	set_val(FIRE, 100);
	wait(hold_time);
	set_val(FIRE,   0);
	wait(rest_time);
	
}
combo QUICKSCOPE {  
	set_val(FIRE, 0); 
	set_val(ADS, 100); 
	set_val(SPRINT, 100); 
	wait(SCOPE_VAL);    
	set_val(FIRE, 100);
	set_val(ADS, 100); 
	set_val(SPRINT, 100); 
	wait(40);                        
}
combo Akimbo {
	set_val(FIRE, 100);
	set_val(ADS, 100);
	wait(100);
	set_val(FIRE,0);
	set_val(ADS,0);
	wait(100);
}
combo Sticky_Aim {
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE));
	wait(STICKY_AIM_TIME);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE));
	set_val(strafe,xy_val(strafe, STICKY_AIM_SIZE));
	wait(STICKY_AIM_TIME);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE * -1));
	wait(STICKY_AIM_TIME);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE * -1));
	wait(STICKY_AIM_TIME);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE * -1));
	set_val(strafe,xy_val(strafe, STICKY_AIM_SIZE * -1));
	wait(STICKY_AIM_TIME);
}
combo Turbo_Melee {
	set_val(MELEE, 100);
	wait(35);
	set_val(MELEE, 0);
	wait(30);  
} 
//==========COMBO END==============================
data(1,// begin of data segment--------              
2,0,0,0, //1. Blue                                 
0,2,0,0, //2. Red                                  
0,0,2,0, //3. Green                                
0,0,0,2, //4. Pink                                 
2,0,2,0, //5. SkyBlue                              
0,2,2,0, //6. Yellow                               
2,2,2,2, //7. White 
0,0,0,0  //8. OFF
); // end of data

define Purple        =  1;                           
define Red           =  2;                           
define Blue          =  3;                           
define Pink          =  4;                           
define SkyBlue       =  5;                           
define Yellow        =  6;                           
define White         =  7;                           
define OFF_Color     =  8;    
//----- End of data segment--------  
function display_edit(f_val,f_min ,f_max , f_ind){	
	
	// on the left: min value
	number_to_string(f_min ,find_digits(f_min) ,4 , 18 , OLED_FONT_SMALL);
	// on the right: max value
	number_to_string(f_max ,find_digits(f_max) ,97 , 18 , OLED_FONT_SMALL);
	
	// print edit value on oled                                                           
	if( ((find_digits(f_val)/ 2) * OLED_FONT_MEDIUM_WIDTH == 0 )) horiz_X_center_sufix = 54;
	else horiz_X_center_sufix = 57 - ((find_digits(f_val)/ 2) * OLED_FONT_MEDIUM_WIDTH);     
	// number_to_string(f_val,f_digits ,print_s_x , print_s_y , f_font)                          
	number_to_string(f_val ,find_digits(f_val) ,horiz_X_center_sufix , EDIT_VAL_PRINT_Y , OLED_FONT_MEDIUM);// 45 
	
	//--- print label 
	line_oled(1,45,127,45,2,0);
	
	printf( center_x( CharCount[f_ind], ofsw ), 50, ofs, 0, EditValuesNames[f_ind] );   
}
function edit_val( f_val, f_min, f_max, f_inc1) {  // 
	
	f_val    = value_change( f_val ,XB1_DOWN , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
	f_val    = value_change( f_val ,XB1_UP, f_inc1     , f_min, f_max ); // f_inc1
	
	Stop_Input()
	
	return f_val;                        
}                      

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

	if(press_hold(f_btn)) 
	{
		f_val += f_inc;
		
		if (f_val > f_rng_max) f_val = f_rng_max;
		else if(f_val < f_rng_min) f_val = f_rng_min;
		
		refresh_edit  = TRUE;
	}
	return f_val; 
} 
function press_hold(f_btn) { 
    //  return TRUE - event_press()   
    //  - every 250 ms when button is held

    return event_press(f_btn) || (get_ival(f_btn) && get_ptime(f_btn) >= 500);
    //&& get_ptime(f_btn) % (get_rtime() * 8) == 0;
}
const uint8 Opt_BL [] = {
	7 , 8, 5, 13, 17, 17,13, 17, 17, 14, 7, 5, 15, 14, 17, 17,16 
};
function OptionMenu_BL ( str_char , f_indx ) {

	printf( center_x( str_char, ofsw ), 20, ofs, 0, BL_str[ f_indx ] );   

}
function print_mod_name (){
	printf( center_x( ModNames_char_count[menu], ofsw ), 4, 0, 1, submenu_idx[ menu  ] )
}
function change_options (f_var, max_val, min_val) {

	if( event_press( XB1_DOWN ) )   { 
		f_var++;
		construct = 1;
		GM_changed = TRUE;
		if( f_var > max_val ) f_var =  min_val; 
		return f_var;
	}
	else if( event_press( XB1_UP ) )   { 
		f_var--; 
		construct = 1;
		GM_changed = TRUE;
		if( f_var < min_val ) f_var =  max_val; 
		return f_var;
	}
	Stop_Input()
	
	return f_var;
}
function center_x( menu_chars, menu_font ) {
	return( OLED_WIDTH / 2 ) - ( ( menu_chars * menu_font ) / 2 );
}

function led( f_color ) {
	for( i = 0; i <= 3; i++ ) {
		set_led( i, duint8( ( (f_color * 4) - 3 ) + i ) );
	}
}
int double__tap;
function double_click(button) {        
	if (double__tap[button] >= 0) {                    
		double__tap[button] += get_rtime(); 
		if (double__tap[button] > 450)
		double__tap[button] = -1;                                                                                       
	}           
	if (event_release(button) && get_ptime(button) <= 200) { 
		if (double__tap[button] < 0) {                    
			double__tap[button] = 0;                        
		} else {             
			double__tap[button] = -1;                       
			return 1;                                   
		}                                                     
	}                                                  
	return 0;
}
function strobing_a1() {
	strobing_a = strobing_a + get_rtime();

	//printf( center_x( 10, ofsw ), 35, 0, 0, instruction_idx[ 0 ] );
	//rect_oled(20, 38, 90, 33, 1,0 );
	if(strobing_a <= 3000){
		show_OPEN_MENU( 1 )
	}else{
		show_Edit_Menu ( 1 );
	}
	
	if( strobing_a > 6000 ) {
		strobing_a = 0;
	}
}
function strobing_b1() {
	strobing_b = strobing_b + get_rtime();
	if( strobing_b < 500 ) {
		l_active( 25, 49, 0 );
		u_active( 46, 49, 0 );
		r_active( 88, 49, 0 );
		d_active( 67, 49, 0 );
	}
	if( strobing_b > 500 ) {
		l_active( 25, 49, 1 );
		u_active( 46, 49, 1 );
		r_active( 88, 49, 1 );
		d_active( 67, 49, 1 );
	}
	if( strobing_b > 1000 ) {
		strobing_b = 0;
	}
}
function create_dpad( x, y, c ) {
	pixel_oled( 6  + x, 1  + y, c ); pixel_oled( 7  + x, 1  + y, c ); pixel_oled( 8  + x, 1  + y, c );
	pixel_oled( 5  + x, 2  + y, c ); pixel_oled( 9  + x, 2  + y, c ); pixel_oled( 5  + x, 3  + y, c );
	pixel_oled( 9  + x, 3  + y, c ); pixel_oled( 6  + x, 4  + y, c ); pixel_oled( 8  + x, 4  + y, c );
	pixel_oled( 2  + x, 5  + y, c ); pixel_oled( 3  + x, 5  + y, c ); pixel_oled( 7  + x, 5  + y, c );
	pixel_oled( 11 + x, 5  + y, c ); pixel_oled( 12 + x, 5  + y, c ); pixel_oled( 1  + x, 6  + y, c );
	pixel_oled( 4  + x, 6  + y, c ); pixel_oled( 10 + x, 6  + y, c ); pixel_oled( 13 + x, 6  + y, c );
	pixel_oled( 1  + x, 7  + y, c ); pixel_oled( 5  + x, 7  + y, c ); pixel_oled( 9  + x, 7  + y, c );
	pixel_oled( 13 + x, 7  + y, c ); pixel_oled( 1  + x, 8  + y, c ); pixel_oled( 4  + x, 8  + y, c );
	pixel_oled( 10 + x, 8  + y, c ); pixel_oled( 13 + x, 8  + y, c ); pixel_oled( 2  + x, 9  + y, c );
	pixel_oled( 3  + x, 9  + y, c ); pixel_oled( 7  + x, 9  + y, c ); pixel_oled( 11 + x, 9  + y, c );
	pixel_oled( 12 + x, 9  + y, c ); pixel_oled( 6  + x, 10 + y, c ); pixel_oled( 8  + x, 10 + y, c );
	pixel_oled( 5  + x, 11 + y, c ); pixel_oled( 9  + x, 11 + y, c ); pixel_oled( 5  + x, 12 + y, c );
	pixel_oled( 9  + x, 12 + y, c ); pixel_oled( 6  + x, 13 + y, c ); pixel_oled( 7  + x, 13 + y, c );
	pixel_oled( 8  + x, 13 + y, c );
}
function l_active( x, y, c ) {
	pixel_oled(2 + x, 6 + y, c ); pixel_oled(3 + x, 6 + y, c ); pixel_oled(2 + x, 7 + y, c );
	pixel_oled(3 + x, 7 + y, c ); pixel_oled(4 + x, 7 + y, c ); pixel_oled(2 + x, 8 + y, c );
	pixel_oled(3 + x, 8 + y, c );
}
function u_active( x, y, c ) {
	pixel_oled( 6 + x, 2 + y, c ); pixel_oled( 7 + x, 2 + y, c ); pixel_oled( 8 + x, 2 + y, c );
	pixel_oled( 6 + x, 3 + y, c ); pixel_oled( 7 + x, 3 + y, c ); pixel_oled( 8 + x, 3 + y, c );
	pixel_oled( 7 + x, 4 + y, c );
}
function r_active( x, y, c ) {
	pixel_oled( 11 + x, 6 + y, c ); pixel_oled( 12 + x, 6 + y, c ); pixel_oled( 10 + x, 7 + y, c );
	pixel_oled( 11 + x, 7 + y, c ); pixel_oled( 12 + x, 7 + y, c ); pixel_oled( 11 + x, 8 + y, c );
	pixel_oled( 12 + x, 8 + y, c );
}
function d_active( x, y, c ) {
	pixel_oled( 7 + x, 10 + y, c ); pixel_oled( 6 + x, 11 + y, c ); pixel_oled( 7 + x, 11 + y, c );
	pixel_oled( 8 + x, 11 + y, c ); pixel_oled( 6 + x, 12 + y, c ); pixel_oled( 7 + x, 12 + y, c );
	pixel_oled( 8 + x, 12 + y, c );
}
//========MENU EDITS ================================
const string NO_EDIT_VAR1  = "No Edit Variables";  //
const string NO_EDIT_VAR2  = "for this MOD";       //
const string LT_MENU       = "   OPEN MENU  ";        //
const string L2_OPTIONS    = " L2 + OPTIONS ";        //
const string EDIT_MENU1    = "  KILLSWITCH  ";        //
const string EDIT_MENU2    = " L2  +  SHARE ";        //
//===================================================
const string ERASE_SPACE = "        ";              
function print_profile_text ( indx,print_color ){
	printf(30, 50, 0, !print_color, ERASE_SPACE[0])                                           
	if(indx){// Secondary
		//rect_oled(2,50,110,20,1,print_color);
		printf(30, 50, 0, !print_color, PROFILES[1])
		led( Yellow );
	}else{   // Primary
		//rect_oled( <x> , <y>, <width>, <height>, <fill>, <color> );
		//rect_oled(2,50,110,20,1,print_color);
		printf(40, 50, 0, !print_color, PROFILES[0]);
		led(SkyBlue)
	}
	
}
function show_OPEN_MENU( color ) {

	printf(center_x(14, ofsw ), 40, ofs, color, LT_MENU[0]    );  
	printf(center_x(14, ofsw ), 50, ofs, color, L2_OPTIONS[0] );  
	
}
function show_Edit_Menu( color ) {

	printf(center_x(15, ofsw ), 40, ofs, color, EDIT_MENU1[0] );  
	printf(center_x(15, ofsw ), 50, ofs, color, EDIT_MENU2[0] );  
	
}
function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		ret = (_axis % _resolution);

		if (ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - ret);
		}
		else
		{
			_axis -= ret;
		}
	}
	else
	{
		ret = (_axis % _resolution);

		if (abs(ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + ret);
		}
		else
		{
			_axis += abs(ret);
		}
	}

	return _axis;
}
function get_mvt_direction( _val, _lval) {
	if (abs(_val - _lval) <= 2)
	return 0;

	if (_val < _lval) //move left
	return -1;

	if (_val > _lval)
	return 1;

	return 0;
}
int i_val ;
int i_num;
int i_cnt;
int v,ar_y;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;
int i_pnt
int i_val_h
int  i_pnt_h
const string SAVE  = "SAVED";
combo SAVE { 
	cls_oled(0);						
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	wait(10)
	
	wait(300);
	cls_oled(0);
	wait(100);
	menu = dash_board; 
	construct = 1; 
	strobing_b1();
	
	
}
function get_rumble_evil_ar()
{	
	ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (ret > 10 && ret < 90)
	{
		return (ret - AR_STRENGTH);
	}

	return 0;
}
function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val( 40 ,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

function sin(angle)
{   
	if(angle <= 90)
	{             
		ret = (TRACKER[angle]);
	}
	else if (angle <= 180)
	{      
		ret = (TRACKER[180 - angle]);
	}
	else if (angle <= 270)
	{
		ret = inv(TRACKER[angle - 180]);     
	}
	else 
	{
		ret = inv(TRACKER[360 - angle]);      
	}
	
	return ret;
}
function cos(angle)
{   
	if(angle <= 90)
	{             
		ret = (TRACKER[90 - angle]);
	}
	else if (angle <= 180)
	{      
		ret = inv(TRACKER[angle - 90]);
	}
	else if (angle <= 270)
	{
		ret = inv(TRACKER[270 - angle]);       
	}
	else 
	{
		ret = (TRACKER[angle - 270]);       
	}
	
	return ret;
}
function get_polar_coordinate(Radius, coef)
{
	if(Radius > 32)
	{
		Radius = 32;
	}
	
	return((Radius * coef) / 1000);		
}
function p_complete()
{

	i_cnt++;
	if(i_cnt > ANTIRECOIL_TIME[INDEXER] * 10)
	{
		i_cnt = ANTIRECOIL_TIME[INDEXER] * 10;
		return 1;
	}
	return 0;
}
function p_complete_x()
{
	i_cnt_h++;
	if (i_cnt_h >  ANTIRECOIL_H_TIME[INDEXER] * 10)
	{
		i_cnt_h =  ANTIRECOIL_H_TIME[INDEXER] * 10 ;
		return 1;
	}
	return 0;
}
function p_val_x() {
	i_num_h++;
	if(i_num_h == i_pnt_h) {
		
		i_num_h = 0;
		
		ar_x += i_val_h;
	}
	return ar_x;
}
function y_val() { 
	v = get_val(PS4_RY);
	if(abs(v) < 10)
	v = 0;    
	if(abs(v) > abs(ar_y + 5))
	return v;   
	return v + ar_y;           
}
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
	v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
	return v_x;
	return v_x + ar_x;   	    
}
function p_val() {
	i_num++;
	if(i_num == i_pnt) {
		
		i_num = 0;
		
		ar_y += i_val ;
	}
	return ar_y;
}

function xy_val(f_axis,f_val) {
	if(abs(get_val(f_axis)) < STICKY_AIM_SIZE[INDEXER] + 4) 
	return f_val;
	return get_val(f_axis); 
}
function display_QT(togg_number){                           
	cls_oled(0);
	
	if( togg_number == 1){
		print_QT( sizeof(Add_QT_1 ) , Add_QT_1[0] );
		if(KillSwitch){                                                          
			printf( 36 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_OFF[0] ); 
			screen_saver = 0;
		}else{                                                                   
			printf( 45 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
		}
	} 
	
	combo_run(WAIT_MESSAGE);  
} 
combo WAIT_MESSAGE {

	wait(1500);
	cls_oled(0);
	wait(100);
}

function center_y(f_size) { 
	return (OLED_HEIGHT  / 2) - (f_size / 2);
}          
//====================================================================================== 
//   Quick Toggles                                    
//====================================================================================== 

const string  QT_ON  ="ON"; 
const string  QT_OFF ="OFF"; 

function print_QT (f_cheract_size ,  f_label ){                         
	rect_oled(1,1,127,63,0,1);                                          
	line_oled(1,20,127,20,1,1);                                         
	printf( center_x( f_cheract_size , OLED_FONT_MEDIUM_WIDTH)    , 2 , OLED_FONT_MEDIUM , OLED_WHITE, f_label); 
}                                                                           
const string Add_QT_1 = " SCRIPT";
//display_Add_QT (1 ); //  - add this code to the Quick Toggle : SCRIPT IS	

// Variables for function number_to_string()  
int n_str_;                            
int c,c_val; 
int horiz_X_center_sufix;
// f_val:value  | f_digits: 1 to 5 | print_s_x: X | print_s_y  | f_font  
function number_to_string(f_val,f_digits ,print_s_x , print_s_y , f_font) {                  

	n_str_ = 1;  c_val = 10000;                            
	
	if(f_val < 0)                     
	{                                                 
		putc_oled(n_str_,45);     
		n_str_ += 1;                                      
		f_val = abs(f_val);  
		
	}                                                 
	
	for(c = 5; c >= 1; c--)                           
	{                                                 
		if(f_digits >= c)                             
		{                                             
			putc_oled(n_str_,ASCII_NUM[f_val / c_val]);    
			f_val = f_val % c_val;                    
			n_str_ +=  1;                                  
			
		}                                             
		c_val /= 10;                                  
	}                                                
	puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_BLACK); // adjustable value centered in X 
}     
const uint8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
{48,49,50,51,52,53,54,55,56,57};  
function find_digits(f_num) {                         
	//  find_digits(value)                                
	//        return Number of Digits in Value Passed     
	
	f_num = abs(f_num);                               
	if(f_num / 10000 > 0) return 5;                   
	if(f_num /  1000 > 0) return 4;                   
	if(f_num /   100 > 0) return 3;                   
	if(f_num /    10 > 0) return 2;                   
	return 1;                  
} 
function Stop_Input() { 
	set_val(JUMP,0);set_val(CROUCH,0);  
	set_val(TACTICAL,0);set_val(LETHAL,0);  
	set_val(RELOAD,0); set_val(SWITCH,0);
	set_val(PS4_OPTIONS,0);set_val(PS4_SHARE,0); 
	set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); 
	set_val(PS4_CROSS,0);set_val(PS4_CIRCLE,0); 
	set_val(PS4_SQUARE,0);set_val(PS4_UP,0);   
	set_val(PS4_DOWN,0);set_val(PS4_RIGHT,0);
} 
int FIRE;
int ADS;
int LETHAL;
int TACTICAL;
int JUMP;
int SWITCH;
int RELOAD; 
int CROUCH;
int MELEE;
int SPRINT; 

const int16 BL[][] = {            
	 //Fire    ads        LETHAL        TACTICAL          JUMP    SWITCH        RELOAD       CROUCH   MELEE   SPRINT
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // DEFAULT
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // TACTICAL
	{XB1_LT,   XB1_RT,    XB1_LB,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_LS, XB1_RS  },     // LEFTY
	{XB1_RT,   XB1_RB,    XB1_LT,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // N0M4D/CHARLIE
	{XB1_RT,   XB1_RB,    XB1_LT,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // N0M4D/CHARLIE TACTIVAL
	{XB1_LT,   XB1_LB,    XB1_RT,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_LS, XB1_RS  },     // N0M4D/CHARLIE L3F7Y
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BUMPER JUMPER
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // BUMPER JUMPER TACTICAL
	{XB1_LB,   XB1_LT,    XB1_RT,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // ONE-HAND GUNSLINGER
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,       XB1_RS,    XB1_Y,        XB1_X,     XB1_B,  XB1_A,  XB1_LS  },     // STICK AND MOVE
	{XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BRAWLER
	{XB1_RT,   XB1_LT,    XB1_RS,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RB, XB1_LS  },     // BEAST
	{XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // DEFAULT SWITCHED
	{XB1_RB,   XB1_LB,    XB1_RT,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BUMPER JUMPER SWITCHED 
	{XB1_RB,   XB1_LB,    XB1_RT,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // BUMPER JUMPER TACTICAL SWITCHED 
	{XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,       XB1_RS,    XB1_Y,        XB1_X,     XB1_B,  XB1_A,  XB1_LS  },     // STICK AND MOVE SWITCHED
	{XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  }};     // TACTICAL SWITCHED
	
		

function Run_Button_Configs(){

	FIRE        = BL[BUTTON_LAYLOUT][0];
	ADS         = BL[BUTTON_LAYLOUT][1];

	LETHAL      = BL[BUTTON_LAYLOUT][2];
	TACTICAL    = BL[BUTTON_LAYLOUT][3];

	JUMP        = BL[BUTTON_LAYLOUT][4];
	SWITCH      = BL[BUTTON_LAYLOUT][5];
	RELOAD      = BL[BUTTON_LAYLOUT][6];
	CROUCH      = BL[BUTTON_LAYLOUT][7];
	MELEE       = BL[BUTTON_LAYLOUT][8];
	SPRINT      = BL[BUTTON_LAYLOUT][9];

	walk        = SL[STICK_LAYLOUT][0];
	strafe      = SL[STICK_LAYLOUT][1];
	aim_y       = SL[STICK_LAYLOUT][2];
	aim_x       = SL[STICK_LAYLOUT][3];}

const int16 SL[][] = {            
	//Walk,     Strafe, AimY,    AimX    
	{ XB1_LY,     XB1_LX, XB1_RY, XB1_RX },    // DEFAULT
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW
	{ XB1_LY,     XB1_RX, XB1_RY, XB1_LX },    // LEGACY
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX },    // LEGACY SOUTHPAW
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW NO CLICK SWAP
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX }};   // LEGACY SOUTHPAW NO CLICK SWAP

int walk,strafe,aim_y,aim_x; 

int BUTTON_LAYLOUT,STICK_LAYLOUT;
const string weapon_idx[] = {
	//ASSAULT\\
	"OFF" , "AK-47(CW)", "Krig 6", "QBZ-83", "FFAR 1", "Groza","FARA 83","Kilo 141", "XM4", "FAL", "M4A1","FR 5.56","Oden","M13","PPSH","AK-47(MW)","C58","RAM 7","GRAU 5.56" ,"CR-56 AMAX","CR-56 A E","AN-94","CARV 2", "AS VAL","EM2",
	//SMG\\         
	"MP5(CW)","Milano 821","AK-74u","CRX 9","Bullfrog","MAC-10","LC10","AUG","P90","MP5(MW)","Uzi","Bizon","MP7","TEC 9","Fennec","ISO","OTs 9", 
	//SHOTGUNS\\
	"Hauer 77", "Gallo SA12","St.Sweeper","Model 680","R9-0","725","Origin 12","VLK Rogue","JAK-12","JAK-12 E",
	//LMG\\
	"Stoner 63","RPD", "M60","PKM","SA87","SA87 E","MG34","Holger-26","MG 82","Bruen Mk9","Bruen Mk9 E","Finn",
	//MARKSMAN RIFLES\\  
	"Type 63", "M16", "AUG", "DMR 14","EBR-14","MK2 Carbine","Kar98k","Crossbow","SKS", "SP-R 208",
	//SNIPERS\\
	"Pelington","LW3", "M82","Swiss", "HDR","AX-50","Rytec AMR","ZRG 20MM",
	//PISTOLS\
	"1911","Magnum","Diamatti","X16",".357","M19",".50GS","Renetti","Sykov","Nail Gun","Marshall","AM93"   
};                           
const uint8 Weapon_chars []= {
	/*AR*/  3,9,6,6,6,5,7,8,3,3,4,7,4,3,4,9,3,5,9,10,9,5,6,6,3,
	/*SMG*/ 7,10,6,4,8,6,4,3,3,7,3,5,3,5,6,3,5,
	/*SHOTGUNS*/ 8,9,10,9,4,3,9,9,6,8,
	/*LMG*/9,3,3,3,4,6,4,9,5,9,11,4,
	/*MARKSMAN*/ 7,3,3,6,6,11,6,8,3,8,
	/*SNIPER*/9,3,3,5,3,5,9,8,
	/*PISTOLS*/4,6,8,3,4,3,5,7,5,8,8,4};

int weapon_indx_loop;
function weaponmenu(f_indx){
	for (weapon_indx_loop = 0; weapon_indx_loop < 94; weapon_indx_loop++) {
		
		if( f_indx ==  0 && weapon_indx_loop == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0,weapon_idx[  0 ])led( Red)combo_run(RUMBLE_ON)}//OFF
		else if(f_indx == weapon_indx_loop){printf( center_x( Weapon_chars[f_indx], ofmw ), 20, 1, 0, weapon_idx[  weapon_indx_loop ] )}//SCROLL
	}   
}
int weap_pro_ind;
function weaponmenuPRO(f_ind_pro){ 
	for (weap_pro_ind = 0; weap_pro_ind < 94; weap_pro_ind++) {

		if( f_ind_pro ==  0 && weap_pro_ind == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  0 ])led( Red)combo_run(RUMBLE_ON)}
		else if(f_ind_pro == weap_pro_ind){printf( center_x( Weapon_chars[f_ind_pro], ofmw ), 20, 1, 0, weapon_idx[  weap_pro_ind ] ); combo_run(RUMBLE_ON)}//SCROLL
	}

}
int GM_changed;
function Global_Menu(Global_ind)	 { 

	set_val(TRACE_6,Global_ind);
	printf( center_x( World_chars[Global_ind], ofmw ), 20, 1, 0,World_str[ Global_ind] ); 
	
	if(Global_ind == 1)edit_global_mods(USE_DROPSHOT) ;
	if(Global_ind == 2)edit_global_mods(USE_BUNNY_HOP); 
	if(Global_ind == 3)edit_global_mods(USE_MELEE );
	if(Global_ind == 4)edit_global_mods(USE_QUICKSCOPE[INDEXER]);
	if(Global_ind == 5)edit_global_mods(USE_RUMBLE);
	if(Global_ind == 6)edit_global_mods(USE_PING);
	if(Global_ind == 7)edit_global_mods(USE_CANCEL_RELOAD);
	if(Global_ind == 8)edit_global_mods(USE_CANCEL_PLATES);
	if(Global_ind == 9)edit_global_mods(USE_HOLD_BREATH);
	if(Global_ind ==10)edit_global_mods(INVERTED);
	if(Global_ind ==11)edit_global_mods(USE_HAIR_TRIGGER);
	if(Global_ind ==12)edit_global_mods(AA_BOOSTER);
	
	GM_changed = FALSE;
	
}
const string RESET ="      ";
function edit_global_mods ( f_mod ){
	
	printf( center_x( 5, ofmw ), 38, 0, 0, RESET[ 0 ] );
	if(f_mod) printf( center_x( 3, ofmw ), 38, 0, 0, option_idx[ 1 ] );
	else printf( center_x( 2, ofmw ), 38, 0, 0, option_idx[ 0 ] );
	
}

define Left_stick_sens  = 2; 
define Leftstick_Add = 2;
define Right_stick_sens  = 0; 
define Rightstick_Add = 0;

function Sensitivity_Alignent()
{
	if( abs(get_val(strafe)) < Left_stick_sens ) set_val(strafe,0);                         
	if( abs(get_val(walk)) < Left_stick_sens ) set_val(walk,0);                         
	
	if (get_val(strafe) > Left_stick_sens ) 
	{set_val(strafe, (get_val(strafe)+ Leftstick_Add ));}
	
	if (get_val(strafe) >100) {set_val(strafe, 100);}                                  
	if (get_val(strafe) < inv(Left_stick_sens )) 
	
	{set_val(strafe, (get_val(strafe)- Leftstick_Add));} 
	if (get_val(strafe) <-100) {set_val(strafe, -100);}                                
	
	if (get_val(walk) > Left_stick_sens ) 
	{set_val(walk, (get_val(walk)+ Leftstick_Add));} 
	
	if (get_val(walk) >100) {set_val(walk, 100);}     
	
	if (get_val(walk) < inv(Left_stick_sens )) 
	
	{set_val(walk, (get_val(walk)- Leftstick_Add));} 
	
	if (get_val(walk) <-100) {set_val(walk, -100);}                                
	
	
	if( abs(get_val(aim_x)) < Right_stick_sens ) set_val(strafe,0);                         
	if( abs(get_val(aim_y)) < Right_stick_sens ) set_val(walk,0);                          
	
	if (get_val(strafe) > Right_stick_sens )
	{set_val(strafe, (get_val(strafe)+ Rightstick_Add ));}     
	if (get_val(strafe) >100) 
	{set_val(strafe, 100);}                                  
	if (get_val(strafe) < inv(Right_stick_sens )) {set_val(strafe, (get_val(strafe)- Rightstick_Add));} 
	if (get_val(strafe) <-100) {set_val(strafe, -100);}                                
	
	if (get_val(walk) > Right_stick_sens )
	{set_val(walk, (get_val(walk)+ Rightstick_Add));}     
	if (get_val(walk) >100) {set_val(walk, 100);}                                  
	if (get_val(walk) < inv(Right_stick_sens )) {set_val(walk, (get_val(walk)- Rightstick_Add));} 
	if (get_val(walk) <-100) {set_val(walk, -100);}                               
	
}
//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                                                                               #
//#################################################################################################
//############################ Sweet_EviL_14 pvar bit packing 2.0.1 ###############################
//################################################################################################# 
int mask;

int pval_data;
function pack_unsigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
	return pvar;
}
function unpack_unsigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
	return ret;
}
function pack_signed(int var1, int var2){

	ret = 0;
	if(var1 < 0)
	{
		var1 = abs(var1) | 128;
	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
	ret *= -1;
	return ret;
}
function unpack_signed(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 128 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 127) * ret;
	}
	else
	{
		ret = pvar>>8;

		if(pvar<0)
		{
			ret += 1;
		}
	}
	return ret;
}
	function  LOAD_PVARS() {pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
	
    USE_POLAR_AIM                = unpack_unsigned(pval_data, 0, 1);
    USE_TRACKING                 = unpack_unsigned(pval_data, 1, 1);
	USE_PROGRESSIVE     [0]      = unpack_unsigned(pval_data, 2, 1);
	USE_PROGRESSIVE     [1]      = unpack_unsigned(pval_data, 3, 1);
	USE_STEADY_AIM               = unpack_unsigned(pval_data, 4, 1);
	USE_CORRECTION               = unpack_unsigned(pval_data, 5, 1);
	USE_STICKY_AIM               = unpack_unsigned(pval_data, 6, 1);
	INVERTED                     = unpack_unsigned(pval_data, 7, 1); 
    USE_SLIDE_CANCEL             = unpack_unsigned(pval_data, 8, 1);
    USE_CANCEL_PLATES            = unpack_unsigned(pval_data, 9, 1);
    USE_AIM_ASSIST              = unpack_unsigned(pval_data, 10, 1);

    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    USE_WOLF_SENS                = unpack_unsigned(pval_data,0, 1);
    USE_DROPSHOT                 = unpack_unsigned(pval_data,1, 1);
	USE_MELEE       	         = unpack_unsigned(pval_data,2, 1);
	USE_QUICKSCOPE               = unpack_unsigned(pval_data,3, 1);
    USE_HOLD_BREATH              = unpack_unsigned(pval_data,4, 1);
    USE_RAPID_FIRE               = unpack_unsigned(pval_data,5, 1);
    USE_BUNNY_HOP                = unpack_unsigned(pval_data,6, 1);
    USE_PING                     = unpack_unsigned(pval_data,7, 1);
    USE_CANCEL_RELOAD            = unpack_unsigned(pval_data,8, 1);
    USE_RUMBLE                   = unpack_unsigned(pval_data,9, 1);
   
   
    pval_data = get_pvar(SPVAR_3, -32767, 32767, 0);
    RESOLUTION                   = unpack_signed(pval_data, 0);
	SENSES_BOOST                 = unpack_signed(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_4, 1,32767,pack_signed(22, 18));
	POLAR_RADIUS                 = unpack_signed(pval_data, 0);
	POLAR_STEPS            = unpack_signed(pval_data, 1);
	
	
    pval_data = get_pvar(SPVAR_5, 1,32767,pack_signed(14, 11));
	ADS_SIZE               = unpack_signed(pval_data, 0);
	ADS_TIME               = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_6,1,32767,pack_signed(8, 2));
	ENHANCED_SCANNING_STRENGTH    = unpack_signed(pval_data, 0);
	ENHANCED_SCANNING_SPEED       = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_7, 1,32767,pack_signed(30, 25));
	ANTI_RECOIL_V  [0]            = unpack_signed(pval_data, 0);
	ANTI_RECOIL_V  [1]            = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_8,   -32767, 32767, 0);
	ANTI_RECOIL_H  [0]            = unpack_signed(pval_data, 0);
	ANTI_RECOIL_H   [1]           = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_9, -32767, 32767, 0);
	ANTIRECOIL_START[0]            = unpack_signed(pval_data, 0);
	ANTIRECOIL_START[1]            = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_10, -32767, 32767, 0);
	ANTIRECOIL_END[0]       = unpack_signed(pval_data, 0);
	ANTIRECOIL_END[1]        = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_11, 1,32767,pack_signed(10, 12));
	ADS_FIRE_SIZE               = unpack_signed(pval_data, 0);
	ADS_FIRE_TIME               = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_12,  -32767, 32767, 0);
	AR_STRENGTH[0]             = unpack_signed(pval_data, 0);
	AR_STRENGTH[1]              = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_13,1,32767,pack_signed(100, 12));
	GRENADE_SENS        = unpack_signed(pval_data, 0);
	RATE_OF_FIRE         = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_14,1,32767,pack_signed(80, 80));
	MW_SLIDE_DELAY       = unpack_signed(pval_data, 0);
	CW_SLIDE_DELAY         = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_15,-32767, 32767, 0);
	SLIDE_MW           = unpack_signed(pval_data, 0);
	SLIDE_CW           = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_16,-32767, 32767, 0);
	ANTIRECOIL_H_START[0]         = unpack_signed(pval_data, 0);
	ANTIRECOIL_H_START[1]         = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_17,-32767, 32767, 0);
	ANTIRECOIL_H_END [0]        = unpack_signed(pval_data, 0);
	ANTIRECOIL_H_END [1]        = unpack_signed(pval_data, 1);
	pval_data = get_pvar(SPVAR_18,1,32767,pack_signed(17, 12));
	HIP_SIZE               = unpack_signed(pval_data, 0);
	HIP_TIME               = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_19,-32767, 32767, 0);
	AR_TYPE [0]        = unpack_signed(pval_data, 0);
	AR_TYPE [1]        = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_20,-32767, 32767, 0);
	USE_LEGACY[0]         = unpack_signed(pval_data, 0);
	USE_LEGACY[1]         = unpack_signed(pval_data, 1);
	
	
    ANTIRECOIL_TIME[0]       = get_pvar(SPVAR_21,   1,   6000,  1500);
    ANTIRECOIL_TIME[1]       = get_pvar(SPVAR_22,   1,   6000,  1500);
    ANTIRECOIL_H_TIME [0]    = get_pvar(SPVAR_23,   1,   6000,  1500);
    ANTIRECOIL_H_TIME [1]    = get_pvar(SPVAR_24,   1,   6000,  1500);
    BUTTON_LAYLOUT           = get_pvar(SPVAR_25 ,   0,  16,  0); 
    STICK_LAYLOUT            = get_pvar(SPVAR_26 ,   0,   5,  0);
    
    GEN_SENS                 = get_pvar(SPVAR_27,   1,   327,  100);
    ADS_SENS                 = get_pvar(SPVAR_28,   1,   327,  100);
    FIRE_SENS                = get_pvar(SPVAR_29,   1,   327,  100);
    ADS_FIRE_SENS            = get_pvar(SPVAR_30,   1,   327,  100);
    
    pval_data = get_pvar(SPVAR_31, 1,32767,pack_signed(2, 17));
	MIN_RADIUS               = unpack_signed(pval_data, 0);
	MAX_RADIUS               = unpack_signed(pval_data, 1);
	
	
	pval_data = get_pvar(SPVAR_32, 1,32767,pack_signed(4, 18));
	MIN_ANGLE               = unpack_signed(pval_data, 0);
	MAX_ANGLE               = unpack_signed(pval_data, 1);
	
   
    
    
   
  } 
function Save_Exit(){ 

 
  pval_data = pack_unsigned(pval_data, USE_POLAR_AIM                ,0, 1);
  pval_data = pack_unsigned(pval_data, USE_TRACKING                 ,1, 1);
  pval_data = pack_unsigned(pval_data, USE_PROGRESSIVE     [0]      ,2, 1);
  pval_data = pack_unsigned(pval_data, USE_PROGRESSIVE     [1]      ,3, 1);
  pval_data = pack_unsigned(pval_data, USE_STEADY_AIM               ,4, 1);
  pval_data = pack_unsigned(pval_data, USE_CORRECTION               ,5, 1);
  pval_data = pack_unsigned(pval_data, USE_STICKY_AIM               ,6, 1);
  pval_data = pack_unsigned(pval_data, INVERTED                     ,7, 1);
  pval_data = pack_unsigned(pval_data, USE_SLIDE_CANCEL             ,8, 1);
  pval_data = pack_unsigned(pval_data, USE_CANCEL_PLATES            ,9, 1);
  pval_data = pack_unsigned(pval_data, USE_AIM_ASSIST              ,10, 1);
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_unsigned(pval_data, USE_WOLF_SENS               ,0, 1);
  pval_data = pack_unsigned(pval_data, USE_DROPSHOT                ,1, 1);
  pval_data = pack_unsigned(pval_data, USE_MELEE                   ,2, 1);
  pval_data = pack_unsigned(pval_data, USE_QUICKSCOPE              ,3, 1);
  pval_data = pack_unsigned(pval_data, USE_HOLD_BREATH             ,4, 1);
  pval_data = pack_unsigned(pval_data, USE_RAPID_FIRE              ,5, 1);
  pval_data = pack_unsigned(pval_data, USE_BUNNY_HOP               ,6, 1);
  pval_data = pack_unsigned(pval_data, USE_PING                    ,7, 1);
  pval_data = pack_unsigned(pval_data, USE_CANCEL_RELOAD           ,8, 1);
  pval_data = pack_unsigned(pval_data, USE_RUMBLE                  ,9, 1);

  set_pvar(SPVAR_2,pval_data);
 
  pval_data = pack_signed(RESOLUTION,SENSES_BOOST);
  set_pvar(SPVAR_3,pval_data); 
                                                                              
  pval_data = pack_signed(POLAR_RADIUS ,POLAR_STEPS);
  set_pvar(SPVAR_4,pval_data);  
                                                          
  pval_data = pack_signed(ADS_SIZE,ADS_TIME);
  set_pvar(SPVAR_5,pval_data);
  
  pval_data = pack_signed(ENHANCED_SCANNING_STRENGTH,ENHANCED_SCANNING_SPEED ); 
  set_pvar(SPVAR_6,pval_data);
                                                         
  pval_data = pack_signed(ANTI_RECOIL_V  [0] ,ANTI_RECOIL_V  [1]  );
  set_pvar(SPVAR_7,pval_data);  
                                                      
  pval_data = pack_signed(ANTI_RECOIL_H  [0],ANTI_RECOIL_H   [1]  ); 
  set_pvar(SPVAR_8,pval_data);
  
  pval_data = pack_signed(ANTIRECOIL_START[0]  ,ANTIRECOIL_START[1]  ); 
  set_pvar(SPVAR_9,pval_data);
  
   pval_data = pack_signed(ANTIRECOIL_END[0] ,ANTIRECOIL_END[1]); 
   set_pvar(SPVAR_10,pval_data);
   
   pval_data = pack_signed(ADS_FIRE_SIZE ,ADS_FIRE_TIME); 
   set_pvar(SPVAR_11,pval_data);
   

  pval_data = pack_signed(AR_STRENGTH[0],AR_STRENGTH[1]);
  set_pvar(SPVAR_12,pval_data);
  
  
  pval_data = pack_signed(GRENADE_SENS,RATE_OF_FIRE); 
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_signed(MW_SLIDE_DELAY,CW_SLIDE_DELAY ); 
  set_pvar(SPVAR_14,pval_data);
  
     pval_data = pack_signed(SLIDE_MW,SLIDE_CW);     
  set_pvar(SPVAR_15,pval_data);
  
  pval_data = pack_signed(ANTIRECOIL_H_START[0],ANTIRECOIL_H_START[1]);
  set_pvar(SPVAR_16,pval_data);
  
  pval_data = pack_signed(ANTIRECOIL_H_END[0],ANTIRECOIL_H_END[1]); 
  set_pvar(SPVAR_17,pval_data);
 
   pval_data = pack_signed(HIP_SIZE,HIP_TIME);
  set_pvar(SPVAR_18,pval_data);
  
  pval_data = pack_signed(AR_TYPE[0],AR_TYPE[1]); 
  set_pvar(SPVAR_19,pval_data);
  
   pval_data = pack_signed(USE_LEGACY[0],USE_LEGACY[1]); 
  set_pvar(SPVAR_20,pval_data);
  
  set_pvar(SPVAR_21,ANTIRECOIL_TIME[0] );     
  set_pvar(SPVAR_22,ANTIRECOIL_TIME[1] );
  set_pvar(SPVAR_23,ANTIRECOIL_H_TIME [0]); 
  set_pvar(SPVAR_24,ANTIRECOIL_H_TIME [1] );
  set_pvar(SPVAR_25,BUTTON_LAYLOUT)
  set_pvar(SPVAR_26,STICK_LAYLOUT); 
  set_pvar(SPVAR_27,GEN_SENS ); 
  set_pvar(SPVAR_28,ADS_SENS );
  set_pvar(SPVAR_29,FIRE_SENS)
  set_pvar(SPVAR_30,ADS_FIRE_SENS); 
  
   pval_data = pack_signed(MIN_RADIUS,MAX_RADIUS); 
  set_pvar(SPVAR_31,pval_data);
  
   pval_data = pack_signed(MIN_ANGLE,MAX_ANGLE); 
  set_pvar(SPVAR_32,pval_data);
 			     

 combo_run(SAVE);


}