/* 					
		  	
		  	   		    C O D  P A E  V E R S I O N  3 1 . 0 2 		  
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝                                                               

				   _____      _ _          __   _____        _         
				  / ____|    | | |        / _| |  __ \      | |        
				 | |     __ _| | |   ___ | |_  | |  | |_   _| |_ _   _ 
				 | |    / _` | | |  / _ \|  _| | |  | | | | | __| | | |
				 | |___| (_| | | | | (_) | |   | |__| | |_| | |_| |_| |
				  \_____\__,_|_|_|  \___/|_|   |_____/ \__,_|\__|\__, |
				      |  _ \| |          | |     / __ \           __/ |
				      | |_) | | __ _  ___| | __ | |  | |_ __  ___|___/ 
				      |  _ <| |/ _` |/ __| |/ / | |  | | '_ \/ __|     
				      | |_) | | (_| | (__|   <  | |__| | |_) \__ \     
				      |____/|_|\__,_|\___|_|\_\  \____/| .__/|___/     
		 __   ___  __   ___  ___  __  ___              | |  ___  __    ___    __                 
		|__) |__  |__) |__  |__  /  `  |   /\  |  |\/| |_| |__  |  \ |  |  | /  \ |\ |       
	 	|    |___ |  \ |    |___ \__,  |  /~~\ |  |  |     |___ |__/ |  |  | \__/ | \|   
	                            
	 		A  M O D E R N  W A R F A R E  C R O S S  O V E R  S C R I P T  B Y   			
			  _______  ______ _______ _______ _______ _______ __   _ _______
			  |       |_____/ |______ |______ |       |______ | \  | |______
			  |_____  |    \_ |______ ______| |_____  |______ |  \_| ______|   
			 
			    		  P O L A R  A I M  A S S I S T  W I T H 
		  	   		 	      A I M  C O R R E C T I O N S 
		  	   		 	   
    			    A U T O  R A P I D  F I R E  D E T E C T I O N 
    			  		     A . K . A .  A U T O  S W A P
    			  
    			  			     E X C L U S I V E :
				    A D V A N C E D  A N T I  R E C O I L  W I T H  
			         U L T R A  F A S T  &  E A S Y  S E T - U P.
			       
			      C O D  P A E  ©  C R E S C E N S  2 0 1 5 - 2 0 2 1			   
			    D O W N L O A D E D  M O R E  T H A N  5  M I L L I O N 
			  T I M E S  A R O U N D  T H E  G L O B E  S I N C E  B 0 2.
	                   	                                                                     
                                                                                                                                                        
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
							
	 					
 							   ▄▄▄·      ▄▄▌   ▄▄▄· ▄▄▄  
							  ▐█ ▄█▪     ██•  ▐█ ▀█ ▀▄ █·
							   ██▀· ▄█▀▄ ██▪  ▄█▀▀█ ▐▀▀▄ 
							  ▐█▪·•▐█▌.▐▌▐█▌▐▌▐█ ▪▐▌▐█•█▌ 
							  .▀    ▀█▄▀▪.▀▀▀  ▀  ▀ .▀  ▀											
						     P O L A R  A I M  A S S I S T  
					     W I T H  A I M  C O R R E C T I O N S 
					       		  C R E A T E D  B Y 
							   ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗   
							   ║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗   
							   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝  
						 8 / 10  U S E R S  C O N F I R M  : 
		    *  B E S T  A I M  A S S I S T  O N  C O D  B O  C O L D  W A R  *
		 S O U R C E :  U S E R  P O L L  Z e n  -  S c r i p t s  &  T r i c k s  
	 	 T H E  # 1  I N D E P E N D E N T  Z E N  D I S C O R D  S E R V E R  B Y 
	 		 					T H E  A L P H A  T E A M  
	 		 					
	 		 					
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
							__ _             _                                       
						   / _| |__ ___ __ _| |___ ______							 
						  |  _| / _` \ V  V / / -_|_-<_-<                           
					      |_| |_\__,_|\_/\_/|_\___/__/__/                           
						     c o m p i l e s   w i t h                               
							  ( 0 )  w a r n i n g s       
				
   						
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
					
						W H A T  M Y  U S E R S  S A Y : 
						
						
					"31.02 is amazing! Thanks for the update."
									odb1180
						
  "I ussualy always say fuck AA, but your AA has been giving me magical results 
  without killing Anti Recoil! In any other script I got Aim Assist turned off"
							      AnusPower
						
"Crescens I just wanted to thank you for such a great script. I tried others then 
	ended up right back on yours. Can’t wait to see what you come up with next."
									gminn
									
	"I tried quite few scripts with OLED menu and the recent game packs but 
	nothing, really nothing beats your script by far. Your work is authentic, 
					  smooth, smart and always on point."
					  				seth21
						
						".....the script is sensational"
									ferraz
						   
						"Thank you Bro, your script is fire!
			The best I have ever used in my 4 months owning a cronus zen."
									D136660
						   
	"Just wanted you to know been using the newest script and it's a beast. 
	 I play with XIM APEX, so M&K. I've been in alot of highlights and (..) 
					Your polar tracks awesome no shake at 18 /18"
								   woody2000
					 
					"....your code is clean and well written ....
					....not like the other copy paste kiddos like 
					     Taylordrift21 (or i can say nutorius)..."
					 				kekkerx
	
					"...your script by far is the best I’ve used."
									  Tats
	
				 "Also ich fange an, dein Script zu lieben!" :wink:
									Newcomer
	
				"I just tested your new easy recoil setup on Cold War 
			and holy sheeeeesh dude. You can get almost a laser beam with it"
								   𝓢𝓢_𝓝𝓲𝓴𝓸𝓵𝓪𝓲
	
			"You truly have the best script out there bro, I’ve been using 
				many scripts that are scams and yours is truly genuine."
									   jwff
	
			"Gotta say... that is one of the strongest Aim Assist ive seen 
						in a script (with default settings)"
									   Langy
	
			"Just donated another 20 bro. Only downloaded the script last 
					night, blown my mind since.. great work!"
									   hazzy
	
					    "Crescens your script is a lazer beam!"
									  TexasElite
									  
									    #1 
					      COD PAE was downloaded over 5 million 
						   times around the globe since BO2. 
								  
███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗███████╗
╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝╚══════╝
                  INSTRUCTIONS: https://tinyurl.com/PAE-instructions
     _              ___
 ___| |_ ___ ___   |_  |
|_ -|  _| -_| . |   _| |_
|___|_| |___|  _|  |_____|
USER CONFIG |_| IN SCRIPT
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║  			►►► BUTTON CONFIGURATION - FILL OUT THE CORRESPONDING NUMBERS ◄◄◄   	     ║ 
║  		   																			     ║ 
║*/								define /*B*/uttons = 1;								   /*║
║  		   																			     ║
║ 		DEFAULT= 0 || TACTICAL= 1 || LEFTY= 2 || NOM4D= 3 || CHARLIE= 4			   	   	 ║
║   GUNSLINGER= 5|| BUMPER JUMPER= 6 || BUMPER JUMPER TACTICAL= 7 || STICK & MOVE= 8     ║
║             			        		   					 						   	 ║
║ 			 		# if you play with FLIPPED bumpers/triggers # 	 				     ║
║  		   																			     ║
║ 		 DEFAULT= 9 || TACTICAL= 10 || LEFTY= 11 || NOM4D= 12 || CHARLIE= 13		     ║ 
║ GUNSLINGER= 14|| BUMPER JUMPER= 15 || BUMPER JUMPER TACTICAL= 16 || STICK & MOVE= 17   ║
║  		   																			     ║
║*/								define /*S*/ticks = 0;							       /*║
║  		   																			   	 ║
║          	 DEFAULT= 0 || SOUTHPAW= 1 || LEGACY= 2 || LEGACY SOUTHPAW= 3 			     ║
║  		   																			   	 ║
║*/								   define invert= 1;							       /*║
║  		    If you play with inverted Y-axis, change this value to - 1				   	 ║
║  		   																			   	 ║
║*/						    int c_over_PS4_controller = OFF;						   /*║
║					  PS4 to Microsoft crossover support (swap 1,27) 				     ║
║																						 ║
║*/							    int Kill_Switch_Used= OFF;					  	   	   /*║
║*/							   define KILL_SWITCH=XB1_SYNC;					       	   /*║
║				 IF YOU WANT A KILL SWITCH TO TURN SCRIPT ON/OFF PUT "ON"    	         ║ 
║ 				FILL OUT WHICH BUTTON WILL BE THE KILL SWITCH FOR THE SCRIPT             ║
║		    To toggle the Kill Switch: double tap the button you selected above.	     ║
║				       Button overview: https://ibb.co/ckyTQBs							 ║
║				Note: the original function of the button you pick as your 				 ║
║			 kill switch will have a little delay (so activate that function			 ║
║				with a long press of the kill switch). The double tap will 				 ║
║				NOT trigger the original function of the button you picked.				 ║
║				   WZ players SHOULD use the KILL SWITCH (for driving).					 ║
║																						 ║
║*/							 int Oh_my_sexy_bumper = 2;								   /*║
║  1=Big Skub`s CROUCH Dance || 2 = Crescens` Pang! Singel Kill Shot || 3 = Drop-shooter ║
║  	4 = Strafe-shooter || 5 = Jump-shooter || 6 = Burst_shooter	|| 7 = Aim Buse			 ║
║									  8 = Jitter										 ║
║ NOTE: 7 & 8 are for Zombies playmode. AimAbuse from SS_Nikolai. Jitter from Sweet_Evil ║
║*/								 int burst_hold=250; 								   /*║
║*/								 int burst_rest=200; 								   /*║
║							    Values for burst fire. 									 ║
║																						 ║
║*/								int cancel_slide= OFF;		   						   /*║
║ 			 			[3 = MW / 1 = COLD WAR LEGACY / OFF = OFF]						 ║
║                            Release prone to cancel slide.   							 ║
║																						 ║
║*/							  define RF_led_sync_btn= XB1_X;						   /*║ 
║*/						      int sync_with_double_tap = 3; 	     				   /*║	
║			Fill out the button that resets the leds when they are out of sync 			 ║
║					      (using manual secondary rapid fire).						     ║
║		  If "sync_with_double_tap" is 2, the sync will only activate with a 	         ║
║		  double tap and holding down the sync button on the second tap shortly 		 ║
║		(until it rumbles). This will avoid unwanted use of the in game function.     	 ║
║	  For example (when "sync_with_double_tap" is 2 and the sync btn = reload/loot):	 ║
║		you want to pick up a weapon, holding down the loot button will function as	     ║
║				normal without snycing the leds. When double tapping 					 ║
║	   and then holding down the loot button, it will sync the leds (and not pick up	 ║
║ 										the weapon. 									 ║
║	 If "sync_with_double_tap" is 3 - the sync will only occur when you hold the sync	 ║
║	 button when secondary led is selected. This will allow you respawn with X/Reload:   ║
║		So, every time you die respawn with the reload BTN. That way you are always      ║
║						sure that the correct wpn led is selected. 						 ║
║If the leds are out of sync holding your primary weapon than double tap & hold sync btn.║
║  Options sync_with_double_tap 3 comes highly recommended for Cold War Multi Player. 	 ║
║										 												 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
S N I P E R  S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║	 
║*/   							  int quick_scope = 2;								   /*║
║*/                            int quick_scope_time = 370;							   /*║
║*/							      int qs_pr_time = 150;								   /*║
║						Quick scope: press FIRE to auto/quick scope.					 ║
║					1= standard quick scope, 2 = quick scope with the 					 ║
║				  right bumper (lethal grenade). Note: the quick scope					 ║
║				  is triggered with a short tap of the bumper. Press and				 ║
║					hold lethal for using the grenade. The quick scope					 ║
║						    time is the time from scope to fire. 						 ║
║					The qs_pr_time is maximum time that the bumper is					 ║
║				pressed before cancelling the quick scope (and using the grenade)		 ║
║*/								  int auto_crouch= OFF;								   /*║
║				If you want to auto crouch (after a normal ADS scope shot)				 ║
║					 set auto_crouch ON or else leave it to OFF.						 ║
║																						 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
A I M  A S S I S T  S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/					 	    int sticky_tripple_or_polar_aa=4;						   /*║
║			3= MY POLAR ASSIST || 2 = TRIPPLE STICKY || 1 = STICKY CLASSIC  			 ║
║								4 = STEALTH POLAR										 ║
║																						 ║
║*/							 int P_o_l_a_r__v_e_l_o_c_i_t_y = 28;					   /*║
║							    size, amount, speed										 ║
║				  Velocity: 28/30 (reduce if too much screen shake).					 ║
║*/							    int P_o_l_a_r__r_a_d_i_u_s = 30;					   /*║
║								 radius, threshold			   	    					 ║
║ 			Radius: 30 (min 18, max 38 - this is also the cut off value for				 ║	
║		the Polar Aim Assist, above this threshold aim corrections takes over			 ║
║*/								int PolarBooster = ON;								   /*║
║*/	 							   int PR_Boost = 6; 								   /*║
║					If you want the boost the Polar AA when you fire					 ║
║					   leave the PolarBooster ON else set it OFF.					     ║
║					  Fill out the amount of boost under PR_Boost.						 ║
║	 	 												 								 ║													 ║
║*/								     int _v=22;								   		   /*║
║				STICKY AIM ASSIST ONLY: screen shake? lower this value.					 ║
║																						 ║
║								TRIPPLE STICKY VALUES:									 ║
║									 	 ADS											 ║
║*/								 int wait_val_1 = 20;  								   /*║ 
║*/								 int aim_val_1 = 22;								   /*║
║								     ADS & FIRE									   		 ║
║*/								 int wait_val_2 = 20; 								   /*║
║*/								 int aim_val_2 = 26; 								   /*║
║								        FIRE											 ║
║*/							     int wait_val_3 = 20;                                  /*║
║*/						         int aim_val_3 = 24; 								   /*║
║																						 ║
║ 					STEALTH POLAR values (extract from FortniteZenDesigner,				 ║ 
║								optimized for COD by Crescens)							 ║
║*/								 int PolarRadius = 15;								   /*║
║*/								 int PolarAngle = 20;								   /*║
║*/								 int RadiusBoost = ON;								   /*║
║*/								 int AngleBoost = ON;								   /*║
║*/								 int PolarRBoost = 6;								   /*║
║*/								 int PolarABoost = 10;								   /*║
║			Radius & Angle are the "default" aim assist values, you should set these	 ║
║		first and find your sweetspot before activating and customizing boost values. 	 ║
║																						 ║
║*/							int rainbow_flash_indicator = OFF;					  	   /*║	
║					Rainbow flash to indicate that CRESCENS POLAR is active				 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
A N T I  R E C O I L  S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/								  int AR_method_used=2;								   /*║
║				  1 = Auto AR (rumbles detected) / 2 = Legacy advanced AR 		 		 ║
║									  OFF = AR off										 ║
║																						 ║
║*/							       int AR_STRENGTH=54;								   /*║	
║					If your weapon moves up set a lower value. If your					 ║ 
║							wpn moves down set a higher value. 							 ║
║					 The auto AR is an extract from Sweet_Evil`s script.				 ║
║																 						 ║
║*/					  define Y_1=21, eY_1=30, r_t_1=3170, X_1= 0;					   /*║
║*/					  define Y_2=29, eY_2=30, r_t_2=3290, X_2= 0;				  	   /*║
║*/					  define Y_3=31, eY_3=30, r_t_3=3040, X_3= 0; 			  	 	   /*║
║*/					  define Y_4=40, eY_4=36, r_t_4=2640, X_4= 0; 			  	 	   /*║
║  						    DEFAULT RECOIL VALUES LEGACY AR	 							 ║
║																						 ║
║*/							int default_pr_or_cur_state=1;						 	   /*║
║					 WHEN YOU SELECT ONE OF THE FOUR RECOIL PROFILES					 ║	
║				  WITH D-PAD DOWN + X/A/B/Y SQUARE/TRIANGLE/CIRCLE/CROSS				 ║
║				     YOU CAN RESET THE CURRENT STATE AND SWITCH AR ON 					 ║
║				  						    OR 											 ║
║				 LEAVE THE CURRENT STATE AS IS AND ONLY SWITCH THE PROFILE.				 ║
║ 		 2 = when switching recoil profile, RESET current state & recoil is on. 		 ║
║					1 = when switching, current state remains as is 				 	 ║
║																					     ║
║*/								  int BlockRumble=OFF;	    					 	   /*║
║ 			 Set to ON if you do not want to feel rumbles despite some of 				 ║ 
║  							the mods require rumble input.							     ║  							     														 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
A I M  C O R R E C T I O N S  /  S E N S I T I V I T Y   S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 											
║*/							  int in_game_menu_sens=14;								   /*║
║			PLEASE READ "AIM CORRECTIONS" IN THE MANUAL ABOUT THIS VALUE				 ║
║					MANUAL: https://tinyurl.com/PAE-instructions						 ║
║																						 ║
║*/							int aim_sens_corrections= ON;							   /*║
║	 			THE UTLITMATE AIM ASSIST AND SKILL BOOSTER FROM CRESCENS				 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
A U T O  P I N G  &  A U T O  C A N C E L  R E L O A D  S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 											
║*/								int smart_reload= ON;								   /*║
║							Cancel reload with fire or ads 								 ║
║																						 ║
║*/								int enemy_ping= OFF;							 	   /*║
║					Auto Ping ON or OFF? If ON, set ping type.							 ║
║*/								  int ping_type=3;									   /*║
║					0=ping on ADS, 1=ping on fire, 2=ping on ads & fire 				 ║
║				3=ping with Sexy Bumper (ADS+LETHAL) - this deactivates 				 ║
║			all other Sexy Bumpers (and it deactivates the option to change				 ║
║						    the Sexy Bumper on the Fly!!)								 ║
║*/								int BTN_PING = PS4_LEFT;						 	   /*║
║	Button used for ping WARNING: PING NEEDS TO BE SWITCHED OFF FOR MW OR THIS 			 ║
║						BUTTON MUST BE CHANGED TO D-PAD UP.	 							 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
T R I G G E R  &  B U M P E R  S T U F F
╔════════════════════════════════════════════════════════════════════════════════════════╗ 											
║*/							   int hairtriggers = ON;								   /*║
║											 											 ║
║*/							 int easy_field_equip= OFF; 						 	   /*║
║*/							define easy_field_btn=XB1_LB;					 	   	   /*║
║		"easy_field_equip:" short tap of tactical activates field equipment				 ║ 
║	You can also define your right bumper / lethal grenade or any other btn to activate  ║ 
║						 your field equipment with one tap.								 ║
║																						 ║
║*/							     int easy_plates=OFF;			 	   	   			   /*║
║		 Easy plates is activated with a longer press of the Y/Triangle button			 ║
║	  HINT: WZ players: to drop loot/inventory hold d_pad down and hold Y/Traingle		 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
E A S Y  T H U M B  /  E A S Y  M E L E E  S T U F F
╔════════════════════════════════════════════════════════════════════════════════════════╗ 											
║*/							  int smart_thumb_stick= 2;								   /*║
║*/							  int l_stick_click = XB1_B;							   /*║ 
║*/								int walk_tresh= -50;								   /*║
║	1= Easy Sprint ON / 2 = Easy Sprint ON & Easy Melee, Easy Jump or Easy Prone is ON   ║
║ 					3 = same as 2 without Easy Run / OFF = all off						 ║
║		[FILL OUT THE BUTTON THAT NEEDS TO BE PRESSED under left stick click]			 ║
║			Easy sprint stick treshhold (-75 = pressed more than 75%)					 ║
║																						 ║
║*/		                       int turbo_melee = 2;									   /*║
║   If set to 1: it will repeat MELEE in quick succession if you hold the MELEE button	 ║ 
║  down. If you set turbo_melee to 2, it will preform the final kill move if you press	 ║ 
║  and hold down MELEE. If you double press MELEE and hold down the MELEE on the second	 ║
║     tap it will preform the turbo melee (repeating to melee in quick succession).		 ║ 
║   					To switch Turbo Melee off, set to OFF. 						     ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
L O A D  S L O T S  S T U F F
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║*/	  							define Slot_Left = 1;								   /*║	
║*/								define Slot_Right = 2;								   /*║
║*/								define Slot_Up = 3;									   /*║
║*/								define Slot_Down = 4;								   /*║
║    If you compiled the script on multiple slots, you can access the slots with your    ║
║  controller by holding down the LS/L3 stick and tapping one of the four D-pad buttons. ║
║ 					You can fill out the slots you are using above.						 ║ 
╚════════════════════════════════════════════════════════════════════════════════════════╝
R A P I D  F I R E  S T U F F 
╔════════════════════════════════════════════════════════════════════════════════════════╗ 
║																						 ║
║*/								  int dynamic_RF=OFF;								   /*║
║					Dynamic RF (fire rate increases with amount of pressure				 ║
║	     		  on the trigger (when off, fire rate always at its fastest) 	 		 ║ 
║																						 ║
║*/								int Fire_Rate_Timer = 111; 							   /*║
║			 If auto SWAP (= auto rapid fire) is selected and one of your				 ║
║				   automatic weapons seems to have a lower fire rate					 ║
║				    increase this value to 121, or try other values.					 ║
║				   		  Rumbles are needed from the game menu.	     				 ║
╚════════════════════════════════════════════════════════════════════════════════════════╝
     _              ___
 ___| |_ ___ ___   |_  |
|_ -|  _| -_| . |  |  _|
|___|_| |___|  _|  |___|
READ|_|THE INSTRUCTIONS

INSTRUCTIONS: https://tinyurl.com/PAE-instructions

________________________________________________________________________________________________________

							 SCRIPT STARTS BELOW / MAKE NO CHANGES UNLESS INDICATED
			╔════════════════════════════════════════════════════════════════════════════════════════╗    																			     ║
			║																						 ║
			║				 dP""b8 88""Yb 888888 .dP"Y8  dP""b8 888888 88b 88 .dP"Y8 				 ║
			║				dP   `" 88__dP 88__   `Ybo." dP   `" 88__   88Yb88 `Ybo."                ║
			║				Yb      88"Yb  88""   o.`Y8b Yb      88""   88 Y88 o.`Y8b                ║
 			║				 YboodP 88  Yb 888888 8bodP'  YboodP 888888 88  Y8 8bodP'                ║
 			║				 A  S i g n a t u r e  S c r i p t  B y  C r e s c e n s           	     ║
			║ 						 																 ║
			╚════════════════════════════════════════════════════════════════════════════════════════╝		
						    © CRESCENS FOR CRONUS ZEN, 2015-2021. ALL RIGHTS RESERVED.
_________________________________________________________________________________________________________*/

const string C_1 = "CRESCENS`";
const string C_2 = "PAE V31.02";
const string C_3 = "AutoSwap";
const string C_4 = "RF";
const string C_5 = "AR";
const string C_6 = "with AR";
const string C_20 = "Sniper";
const string C_21 = "Sniper +";
const string C_22 = "Pistol";
const string C_11 = "Akimbo";
const string C_12 = "AutoAim";
const string C_13 = "ALL OFF";
const string C_14 = "Auto ON";
const string C_15 = "Primary AR";
const string C_16 = "Secondary RF";
const string C_19 = "Auto OFF";
const string C_18 = "AimAbuse";
const string C_17 = "Jitter";
const string C_24 = "Burst";
const string C_25 = "Jumper";
const string C_26 = "Strafe";
const string C_27 = "Drop";
const string C_28 = "Pang";
const string C_29 = "Dance";
const string C_30 = "A-AimOFF";
const string C_31 = "Quantity";
const string C_32 = "Amplitude";
const string C_41 = "Game Sens";
const string C_43 = "VerticalSTART";
const string C_44 = "VerticalEND";
const string C_45 = "Horizontal";
const string C_46 = "Time Value";
const string C_53 = "AR Strength";

const uint8 FONT_STATS[][] = {
{7,10},{11,18},{16,26}
};
define B_K = 0; define W = 1; define XS = 0; define M = 1; 
define L = 2; define F_W = 0; define F_H = 1;

define Off= 13, Blue= 0, Red= 1, Green= 2, Lavender= 3, White= 4, Yellow= 5, 
SkyBlue= 6, Neon= 7, Lilac= 8, Pink= 9, Pinkish= 10, Orange= 11, Emerald= 12;
data( 
/* 0		1		  2		  3		   4	    5		 6
 Blue      Red 	   Green   Lavender	 White	 Yellow   SkyBlue*/
1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1, 1,1,1,0, 0,1,1,0, 1,0,1,0,
/* 7		8		 9		 10  	   11      12       13       
 Neon 	  Lilac    Pink    Pinkish   Orange  Emerald    Off*/
3,1,0,0, 2,3,0,0, 1,3,0,0, 1,3,1,0, 0,3,1,0, 1,1,2,0, 0,0,0,0); 
		
/*button/sticks array by Crescens*/
const int8 B[][]={/*all button layouts supported*/
{4,7,8,6,3,18,19,5},
{4,7,8,6,3,5,19,18},
{7,4,5,3,6,18,19,8},
{4,6,8,6,7,18,19,5},
{4,3,8,6,7,18,19,5},
{6,7,8,3,4,18,19,5},
{4,7,8,19,3,18,6,5},
{4,7,8,19,3,5,6,18},
{4,7,8,6,3,18,5,19},
{3,6,8,7,4,18,19,5},
{3,6,8,7,4,5,19,18},
{6,3,5,4,7,18,19,8},
{3,7,8,7,6,18,19,5},
{3,4,8,7,6,18,19,5},
{7,6,8,4,3,18,19,5},
{3,6,8,19,4,18,7,5},
{3,6,8,19,4,5,7,18},
{3,6,8,7,4,18,5,19}
};
const int8 S[][]={/*sticks*/
{12,11,9,10},
{10,9,11,12},
{12,9,11,10},
{10,11,9,12}
};
define s_D=0, s_S=1, s_L=2, s_L_S=3;
define b_D=0, b_T=1, b_L=2, b_N=3, b_C=4, b_O=5, b_B=6, b_B_J_T=7, b_S=8;
define f_D=9, f_T=10, f_L=11, f_N=12, f_C=13, f_O=14, f_B=15, f_B_J_T=16, f_S=17;
/*--do not change! this will conflict with the button array.*/ 
int WALK, STRAFE, AIM_X, AIM_Y, FIRE, ADS, SPRINT, TAC_G, LETHAL, PRONE, JUMP, MELEE;
/*-----------------------------------------------------------------------------------*/
int ar_sY_[5], ar_eY_[5], ar_sX_[5], ar_tm_[5]; int Recoil_Pr=1;
int interval, iteration_point; int i_, i_count; int AR_V; int RY, RX;
int record; int edit = FALSE; int no_recoil=TRUE; int WPN_1=TRUE; int release, rnd; 
int auto_aim = FALSE; int dance_active=FALSE; int pang=FALSE; int drop=FALSE;
int burst=FALSE; int drop_time = 1200; int strafe=FALSE; int strafe_time=700;
int jumper=FALSE; int jump_time=200; int notify, notifier; int pin = 880, code;
int ads_grenade_sens, ads_fire_sens, Sens, long_shot_sens, actual_sens;
int RS_gr, running_p, _amplitude, _quantity; int mn=326, mx=328; define RS=POLAR_RS; int Radius;
int rapid_fire = FALSE; /*toggle on Hold ADS + D-pad right */
int Rumble_Wait_Timer = FALSE; int rapid_fire_timer; int Rumble_Timer = 0; 
int Cur_Rumble; int Old_Rumble; int AutoSwap = FALSE; int akimbo = FALSE;
int auto_run=0; int sY_eY_cor, sY_eY_cor2; int sX_cor, stick_input;
int y_ambit = 8; int x_ambit = 8; int y_input[15]; int x_input[15]; int idX,rx_avg;
int idx,ry_avg, idx2, ry_avg2; int newv1, newv2; int wpn_holster=FALSE; int pr=FALSE;
int sniper = FALSE; int rld_time, rld_1, rld_2; int b_reload=FALSE; int once=1;
int i; int wtime; int recoil_RF; int dflt_lo; int game_sens, _w; int flasher, b_f, b_f_wait, f_clr;
int script_on=1; int hue; int Pressed; int AR_S; 
int current_x, current_y, newv, newt, turbo, Aim_Abuse=FALSE, Jitter=FALSE;
int Angle; int Speed;
define ON = 1; define OFF = -1;
int displayNew = TRUE; int displayValue;

/*functions...don`t make any changes!*/
function s(id,fval){set_val(id,fval);}
function p(id){return event_press(id);}
function r(id){return event_release(id);}
function g(id){return get_ival(id);}
function pv(id,min,max,fval){return get_pvar(id,min,max,fval);}
function s_pv(id,fval){set_pvar(id,fval);}
function displ(v0, v1, v2, v3, v4, v5) {s(TRACE_1, v0); s(TRACE_2, v1); s(TRACE_3, v2); s(TRACE_4, v3); s(TRACE_5, v4); s(TRACE_6, v5);}
function notify_bumper(Oh_my_sexy_bumper){notify=Oh_my_sexy_bumper;}
function btn(f__btn){if (!g(f__btn))return;s(f__btn, 0);}
function hrt(h__btn){if (!g(h__btn))return;s(h__btn, 100);}
function load_sens() {game_sens = in_game_menu_sens; s_pv(SPVAR_41, game_sens); s_pv(SPVAR_42, code);}
function load_polar() {_quantity = P_o_l_a_r__v_e_l_o_c_i_t_y; _amplitude = P_o_l_a_r__r_a_d_i_u_s ;s_pv(SPVAR_43, _quantity);s_pv(SPVAR_44, _amplitude);}
function notify(pos){if (pos) notify = 1;else notify = 2;}
function s_s(s_btn, s_2){sensitivity(s_btn, NOT_USE, s_2);}
function Led(C) {for(i = 0; i <= 3; i++){set_led(i,duint8((C*4) + i));}}
function p_count(){i_count++;if(i_count > (ar_tm_ / 10)){i_count = (ar_tm_ / 10);return 1;}return 0;}
function c(){i_++;if(i_ == iteration_point){i_ = 0;AR_V += interval;}return AR_V;}
function load_rld() {rld_1 = 1200; rld_2 = 800; code = 225; s_pv(SPVAR_22, rld_2); s_pv(SPVAR_21, rld_1) s_pv(SPVAR_42, code);}					 
function load_rcl() {ar_tm_[1] = r_t_1; ar_tm_[2] = r_t_2; ar_tm_[3] = r_t_3; ar_tm_[4] = r_t_4; ar_sY_[1] = Y_1; ar_sY_[2] = Y_2; ar_sY_[3] = Y_3; ar_sY_[4] = Y_4;
		 ar_eY_[1] = eY_1; ar_eY_[2] = eY_2; ar_eY_[3] = eY_3; ar_eY_[4] = eY_4; ar_sX_[1] = X_1; ar_sX_[2] = X_2; ar_sX_[3] = X_3; ar_sX_[4] = X_4; AR_S = AR_STRENGTH; save__();}


init {
 	combo_run(SCREEN_START); b_f=Oh_my_sexy_bumper; code = pv(SPVAR_42, 1, 2000, 880); l();
  	if (code == pin){load_sens(); load_polar(); load_rld(); load_rcl();}
    else game_sens = pv(SPVAR_41, 3, 20, game_sens); rld_1 = pv(SPVAR_21, 0, 4000, 1200); 
    rld_2 = pv(SPVAR_22, 0, 4000, 1200); _quantity = pv(SPVAR_43, 15, 40, _quantity); 
    _amplitude = pv(SPVAR_44, 15, 50, _amplitude); 
}
main
{
if (BlockRumble==ON) {
        block_rumble();
    }

if (c_over_PS4_controller == ON){swap (1,27);}

WALK = S[ticks][0]; STRAFE = S[ticks][1]; AIM_X = S[ticks][2]; AIM_Y = S[ticks][3]; 
FIRE = B[uttons][0]; ADS = B[uttons][1]; SPRINT = B[uttons][2]; TAC_G = B[uttons][3]; 
LETHAL = B[uttons][4]; PRONE = B[uttons][5]; JUMP = B[uttons][6]; MELEE = B[uttons][7]; 

if (Kill_Switch_Used == 1)
					{
					if (!g(ADS) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);}
					if (!g(XB1_DOWN) && g(KILL_SWITCH)) {block(KILL_SWITCH, 200);}
      				if (get_brtime(KILL_SWITCH) <= 200)  { if (!g(ADS) && p(KILL_SWITCH))
      												{
      												script_on=!script_on;
      												notify(!script_on);
      												}
      												}
      				if (!script_on) {Led (Off);} 
   				 	}
      				 
if (script_on){
  

							

if (hairtriggers == 1) 	{
						hrt(ADS);hrt(FIRE);
						}

	
/*

                      ╦  ╔═╗╔═╗╔╦╗   ╔═╗╦ ╦╔╦╗  ╔╦╗╔═╗╔╗╔╦ ╦                  
    ──────────────────║  ║ ║╠═╣ ║║───║ ║║ ║ ║───║║║║╣ ║║║║ ║──────────────────
                      ╩═╝╚═╝╩ ╩═╩╝   ╚═╝╚═╝ ╩   ╩ ╩╚═╝╝╚╝╚═╝
                    M U L T I  A D S  L O A D  O U T  M E N U  
                    B Y  C R E C S E N S  ©  2 0 1 5 - 2 0 2 1 

*/
doubletap (ADS);

if(g(ADS) && !edit)
   					{

					if(Pressed && p(PS4_DOWN))
   											{
											   WPN_1=FALSE;
											   rapid_fire=FALSE;
											   notify (rapid_fire);
											   wpn_holster=FALSE;
											   no_recoil=FALSE;
											   sniper =FALSE;
											   dflt_lo=FALSE;
											   akimbo=FALSE;
											   AutoSwap=FALSE;
											   cls_oled(0); 
											   P_s(0, 41, 128, L, W, C_13[0], sizeof(C_13));
											   ol();
  											  }
 					if(!Pressed && p(PS4_DOWN))
											  {
											   WPN_1 = TRUE;
											   wpn_holster=FALSE;											   
											   rapid_fire=FALSE;
											   notify (sniper);
											   recoil_RF=FALSE;
											   no_recoil=FALSE;
											   sniper =TRUE;
											   dflt_lo=FALSE;
											   akimbo=FALSE;
											   cls_oled(0); 
											   P_s(0, 24, 128, L, W, C_20[0], sizeof(C_20));
											   ol();
											 }

					if(p(PS4_UP))
										   	{
												dflt_lo=TRUE;
												notify (dflt_lo);
												cls_oled(0); 
												P_s(0, 24, 128, L, W, C_5[0], sizeof(C_5));
												ol();
										   	}
   					doubletap(XB1_UP);
   					
					if (p(XB1_UP) && Pressed)
											{
 											AR_method_used ++;
 											notify (AR_method_used);
 											if(AR_method_used==3)
				 												{
				 												AR_method_used=1;
				 												}
 											if (AR_method_used==1)
				 												{ 												
						 										P_s(0, 0, 128, M, W, C_14[0], sizeof(C_14));
						 										ol();
						 										}
		 				    				if (AR_method_used==2)
				 												{ 												 								
						 										P_s(0, 0, 128, M, W, C_19[0], sizeof(C_19));
						 										ol();
						 										}
						 					}

					if(p(PS4_RIGHT))
						   					{
						   					  WPN_1=FALSE
											  rapid_fire=TRUE;
											  notify (rapid_fire);
											  wpn_holster=FALSE;
											  no_recoil=FALSE;
											  sniper =FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 24, 128, L, W, C_4[0], sizeof(C_4));
											  ol();
											 }
					doubletap (PS4_LEFT);

					if(p(PS4_LEFT)&& !Pressed)
											 {
											  WPN_1 = TRUE;
											  rapid_fire=TRUE;
											  wpn_holster=TRUE;
											  notify (wpn_holster);
											  no_recoil=FALSE;
											  sniper =FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 18, 128, M, W, C_16[0], sizeof(C_16));
											  ol();
											 }
					
					if (g (PS4_LEFT)&& get_ptime (PS4_LEFT) > 800 && once == 1)
											 {
											   no_recoil=TRUE;
											   notify (no_recoil);
											   once = once - 1;
											   P_s(0, 18, 128, M, W, C_16[0], sizeof(C_16));
											   P_s(0, 41, 128, M, W, C_15[0], sizeof(C_15));								
											   ol();
											 }

					if(p(PS4_LEFT)&& Pressed)
											{
											   rapid_fire = FALSE; AutoSwap = TRUE; 
											   wpn_holster = FALSE;
											   notify(AutoSwap); 			   			
											   P_s(0, 0, 128, M, W, C_3[0], sizeof(C_3));					
											   ol();
										    }

					if (g (PS4_DOWN)&& get_ptime (PS4_DOWN) > 800 && once == 1)
											{
											  WPN_1 = TRUE;
											  rapid_fire=TRUE;
											  wpn_holster=TRUE;
											  notify (wpn_holster);
											  no_recoil=FALSE;
											  recoil_RF=FALSE;
											  dflt_lo=FALSE;
											  akimbo=FALSE;
											  notify (wpn_holster);
											  once = once - 1;
											  AutoSwap=FALSE;
											  cls_oled(0); 
											  P_s(0, 0, 128, M, W, C_21[0], sizeof(C_21));
											  P_s(0, 30, 128, L, W, C_22[0], sizeof(C_22));
											  ol();
											}
					if (g (PS4_RIGHT)&& get_ptime (PS4_RIGHT) > 800 && once == 1)
											{
											  no_recoil=TRUE;
											  WPN_1=TRUE;
											  recoil_RF=TRUE;
										      notify (no_recoil);
											  once = once - 1;
											  cls_oled(0); 											
											  P_s(0, 18, 128, M, W, C_4[0], sizeof(C_4));
											  P_s(0, 41, 128, L, W, C_6[0], sizeof(C_6));
											  ol();
											}
					if (g (PS4_SHARE && get_ptime (PS4_SHARE) > 800 && once == 1))
											{ 
											if (wpn_holster || AutoSwap)
															  {
															  akimbo=TRUE;
															  notify (akimbo);
															  b_f=5;
															  cls_oled(0);  
															  P_s(0, 41, 128, L, W, C_11[0], sizeof(C_11));
															  ol();
															  }
											if (get_brtime(PS4_RIGHT) <= 3200)
															{												
															wpn_holster=TRUE;
															WPN_1=TRUE;
															recoil_RF = TRUE;
														  	notify (wpn_holster);
														  	akimbo=TRUE;
															b_f=5;
															cls_oled(0);  
															P_s(0, 41, 128, L, W, C_11[0], sizeof(C_11));
															ol();
															}
											}
			btn (PS4_SHARE);btn (PS4_LEFT);
			btn (PS4_RIGHT);btn (PS4_UP);
			btn (PS4_DOWN);btn (WII_HOME);
			btn (WII_PLUS);btn (XB1_VIEW);
			}
if (dflt_lo)
			{
			WPN_1=TRUE;
		   	rapid_fire=FALSE;
		   	wpn_holster=FALSE;
		   	no_recoil=TRUE;
		   	sniper =FALSE;
		   	recoil_RF=FALSE;
		   	akimbo=FALSE;
		   	AutoSwap=FALSE;
		   	}

if (once < 1 && r (XB1_LEFT)) {once = 1;}
if (once < 1 && r (XB1_DOWN)) {once = 1;}
if (once < 1 && r (XB1_RIGHT)){once = 1;}
if (once < 1 && r (XB1_SHARE)){once = 1;}

if (g(XB1_RS) && p(XB1_DOWN))
 							{
 							auto_aim = !auto_aim;
 							notify (auto_aim);
 							if (auto_aim)
 										{
 										cls_oled(0); 
 										P_s(0, 0, 128, M, B_K, C_1[0], sizeof(C_1));
 										P_s(0, 22, 128, XS, W, C_2[0], sizeof(C_2));
 										P_s(0, 41, 128, L, W, C_12[0], sizeof(C_12));
 										ol();
 										}
 							if (!auto_aim)
 										{
 										cls_oled(0); 
 										P_s(0, 0, 128, M, B_K, C_1[0], sizeof(C_1));
 										P_s(0, 22, 128, XS, W, C_2[0], sizeof(C_2));
 										P_s(0, 41, 128, L, W, C_30[0], sizeof(C_30));
 										ol();
 										}
 							}
/*
   
                      ╔═╗╔═╗═╗ ╦╦ ╦   ╔╗ ╦ ╦╔╦╗╔═╗╔═╗╦═╗╔═╗               
    ──────────────────╚═╗║╣ ╔╩╦╝╚╦╝───╠╩╗║ ║║║║╠═╝║╣ ╠╦╝╚═╗───────────────
                      ╚═╝╚═╝╩ ╚═ ╩    ╚═╝╚═╝╩ ╩╩  ╚═╝╩╚═╚═╝               

*/
  if (g(ADS))
  			{
     		if (p(XB1_XBOX)) 
     						{      
           					 Oh_my_sexy_bumper ++;
           					 b_f=Oh_my_sexy_bumper;
           					 B_o();
            
            				if (Oh_my_sexy_bumper == 9) 
            										  {
            										  Oh_my_sexy_bumper = 1; 
            										  b_f = 1;
            										  }
            				if (Oh_my_sexy_bumper)
            									{ 
            									notify_bumper(Oh_my_sexy_bumper); 
            									}
                         	}
           btn (XB1_XBOX);            
 }
  
/*

╔═╗╔═╗═╗ ╦╦ ╦  ╔╗ ╦ ╦╔╦╗╔═╗╔═╗╦═╗╔═╗  
╚═╗║╣ ╔╩╦╝╚╦╝  ╠╩╗║ ║║║║╠═╝║╣ ╠╦╝╚═╗  
╚═╝╚═╝╩ ╚═ ╩   ╚═╝╚═╝╩ ╩╩  ╚═╝╩╚═╚═╝  
┌┐ ┬ ┬  ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗      
├┴┐└┬┘  ║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗      
└─┘ ┴   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝      

*/
			
  if (Oh_my_sexy_bumper >= 1)
  							{
  							if (g(LETHAL))release = get_ptime(LETHAL);
  							}
    if (Oh_my_sexy_bumper == 1) /*	╔╗ ┬┌─┐  ╔╦╗┌─┐┌┐┌┌─┐  ╦  ┬┌┬┐┌┬┐┬  ┌─┐  ╔╦╗┌─┐┌┐┌┌─┐┌─┐
									╠╩╗││ ┬  ║║║├─┤│││└─┐  ║  │ │  │ │  ├┤    ║║├─┤││││  ├┤ 
									╚═╝┴└─┘  ╩ ╩┴ ┴┘└┘└─┘  ╩═╝┴ ┴  ┴ ┴─┘└─┘  ═╩╝┴ ┴┘└┘└─┘└─┘
									┌┐ ┬ ┬  ╔╗ ┬┌─┐  ╔═╗┬┌─┬ ┬┌┐ ┌┐   ┌┬┐┌─┐┬  ┬┌─┐┬  ┌─┐┌─┐┌─┐┌─┐┌┬┐  ┌┐ ┬ ┬                         
									├┴┐└┬┘  ╠╩╗││ ┬  ╚═╗├┴┐│ │├┴┐├┴┐   ││├┤ └┐┌┘├┤ │  │ │├─┘├─┘├┤  ││  ├┴┐└┬┘                       
									└─┘ ┴   ╚═╝┴└─┘  ╚═╝┴ ┴└─┘└─┘└─┘  ─┴┘└─┘ └┘ └─┘┴─┘└─┘┴  ┴  └─┘─┴┘  └─┘ ┴  
									╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                 
									║  ├┬┘├┤ └─┐│  ├┤ │││└─┐                 
									╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘ */
								{
        						if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
        																							{
        																							dance_active = TRUE;
        																							}
        						if (dance_active)
        										{
										        if (g(LETHAL))
										        s(FIRE,100);
										        combo_run(DANCE);
										        block(LETHAL, release + 50);
										        }
        						if (dance_active && r(LETHAL))
        										{
        										dance_active=FALSE;
        										}
}
        
    if (Oh_my_sexy_bumper == 2) 
    							{ /*╔═╗╔═╗╔╗╔╔═╗  ┬  ╔═╗╦╔╗╔╔═╗╦  ╔═╗  ╦╔═╦╦  ╦    ╔═╗╦ ╦╔═╗╔╦╗
									╠═╝╠═╣║║║║ ╦  │  ╚═╗║║║║║ ╦║  ║╣   ╠╩╗║║  ║    ╚═╗╠═╣║ ║ ║ 
									╩  ╩ ╩╝╚╝╚═╝  o  ╚═╝╩╝╚╝╚═╝╩═╝╚═╝  ╩ ╩╩╩═╝╩═╝  ╚═╝╩ ╩╚═╝ ╩ 
									┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                           
									├┴┐└┬┘  ║  ├┬┘├┤ └─┐│  ├┤ │││└─┐                           
									└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘*/                          
								if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							pang = TRUE;        																				
      																								}
      							if (pang)
      									{
      									if (g(LETHAL))
  									    combo_run(BANGER);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (pang && r(LETHAL))
	        										{
	        										pang=FALSE;
	        										}
}
	
 if (Oh_my_sexy_bumper == 3) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							drop = TRUE;        																				
      																								}
      							if (drop)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									drop_time -= get_rtime();
      									block(LETHAL, release + 50);
      									if (drop_time >= 0) 
      													{
      													s(PRONE,100);
      													}
      									}
  								if (drop && r(LETHAL))
	        										{
	        										drop=FALSE;
	        										drop_time = 1200;
	        										}
        																							
    
    }
 
 if (Oh_my_sexy_bumper == 4) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							strafe = TRUE;        																				
      																								}
      							if (strafe)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									combo_run (STRAFER)
      									block(LETHAL, release + 50);
      									}
  								if (strafe && r(LETHAL))
	        										{
	        										strafe=FALSE;
	        										}
        																							
    
    }
    
 if (Oh_my_sexy_bumper == 5) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							jumper = TRUE;        																				
      																								}
      							if (jumper)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);      									
      									combo_run (JUMPER)
      									block(LETHAL, release + 50);
      									}
  								if (jumper && r(LETHAL))
	        										{
	        										jumper=FALSE;
	        										}
        																							
    
    }
    if (Oh_my_sexy_bumper == 6) 
    							{
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							burst = TRUE;        																				
      																								}
      							if (burst)
      									{
      									if (g(LETHAL))
      									combo_run(BURSTER);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (burst && r(LETHAL))
	        										{
	        										burst=FALSE;
	        										}
}

if (Oh_my_sexy_bumper == 7) 
    							{
    							
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							Aim_Abuse = TRUE;        																				
      																								}
      							if (Aim_Abuse)
      									{
      									if (g(LETHAL))
      									s(FIRE,100);
      									combo_run(AIMBOT);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (Aim_Abuse && r(LETHAL))
	        										{
	        										Aim_Abuse=FALSE;
	        										}
}

if (Oh_my_sexy_bumper == 8) 
    							{
    							
      							if (g(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) 
      																								{
        																							Jitter = TRUE;        																				
      																								}
      							if (Jitter)
      									{
      									if (g(LETHAL))
      									combo_run(cJitters);
  									   	block(LETHAL, release + 50);
  									   	}
  								if (Jitter && r(LETHAL))
	        										{
	        										Jitter=FALSE;
	        										}
}
/*

                     ╔╦╗╦╔╦╗╔═╗  ╔═╗╔═╗╦  ╦╔╗ ╦═╗╔═╗╔╦╗╦╔═╗╔╗╔                  
    ──────────────────║ ║║║║║╣───║  ╠═╣║  ║╠╩╗╠╦╝╠═╣ ║ ║║ ║║║║──────────────────
                      ╩ ╩╩ ╩╚═╝  ╚═╝╩ ╩╩═╝╩╚═╝╩╚═╩ ╩ ╩ ╩╚═╝╝╚╝                  

*/


/*	╔╦╗┬┌┬┐┌─┐  ╔═╗┌─┐┬  ┬┌┐ ┬─┐┌─┐┌┬┐┬┌─┐┌┐┌  
	 ║ ││││├┤   ║  ├─┤│  │├┴┐├┬┘├─┤ │ ││ ││││  
	 ╩ ┴┴ ┴└─┘  ╚═╝┴ ┴┴─┘┴└─┘┴└─┴ ┴ ┴ ┴└─┘┘└┘  
	┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌┐┌┌─┐              
	├┴┐└┬┘  ║  ├┬┘├┤ └─┐├┤ │││└─┐              
	└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘┘└┘└─┘ */             


if (g(XB1_DOWN) && g(XB1_X) && get_ptime(XB1_X) > 500 && !record && !edit) 
																{
														      	record = TRUE;
														      	notify(record);
										    					}
if (record) 
			{
      		if (!WPN_1) 
      						{
        					rld_2 = get_ptime(XB1_X);
        											if (r(XB1_X)) 
        														{
          														record = FALSE;
          														s_pv(SPVAR_22, rld_2);
          														notify(record);
        														}
      						}
      		if (WPN_1) 		
      						{
      						rld_1 = get_ptime(XB1_X);
      												if (r(XB1_X)) 
      															{
														        record = FALSE;
														        s_pv(SPVAR_21, rld_1);
														        notify(record);
      															}
      						}
    		} 
   				

/*

                      ╔═╗╔═╗╔╗╔╔═╗╔═╗╦   ╦═╗╔═╗╦  ╔═╗╔═╗╔╦╗                  
    ──────────────────║  ╠═╣║║║║  ║╣ ║───╠╦╝║╣ ║  ║ ║╠═╣ ║║──────────────────
                      ╚═╝╩ ╩╝╚╝╚═╝╚═╝╩═╝ ╩╚═╚═╝╩═╝╚═╝╩ ╩═╩╝                  

*/
   if (!WPN_1)
    				{
    				rld_time = rld_2;
    				} 
    			else 
    				{
    				rld_time = rld_1;
    				}
   if (r(XB1_X) && get_ptime(XB1_X) < 300) 
   										{
   										b_reload = rld_time;
   										}
    if (smart_reload == 1 && b_reload) /*╔═╗┬ ┬┌┬┐┌─┐  ╔═╗┌─┐┌┐┌┌─┐┌─┐┬    ╦═╗┌─┐┬  ┌─┐┌─┐┌┬┐
									     ╠═╣│ │ │ │ │  ║  ├─┤││││  ├┤ │    ╠╦╝├┤ │  │ │├─┤ ││
									     ╩ ╩└─┘ ┴ └─┘  ╚═╝┴ ┴┘└┘└─┘└─┘┴─┘  ╩╚═└─┘┴─┘└─┘┴ ┴─┴┘
									┌┐ ┬ ┬  ╔═╗┬─┐┌─┐┌─┐┌─┐┌┐┌┌─┐                       
									├┴┐└┬┘  ║  ├┬┘├┤ └─┐├┤ │││└─┐                       
									└─┘ ┴   ╚═╝┴└─└─┘└─┘└─┘┘└┘└─┘*/ 
								{
      							b_reload -= get_rtime();
      							if (b_reload < 0) 
      											{
      											b_reload = 0;
      											}
      							if (p(FIRE) || p(ADS))
      											{
      											combo_run(CANCEL_RLD);
      											}
    							}
 

if(!g (XB1_B) && r(XB1_Y) && get_ptime(XB1_Y) < 300 && wpn_holster)
														{
														 WPN_1 = !WPN_1; notify (WPN_1);
														}
														
if(easy_plates==1)
	{
		if(g(XB1_Y)&& get_ptime(XB1_Y)>300 && !g(XB1_DOWN))
		combo_run(EASY_PLATE);

		if(combo_running(EASY_PLATE) && (g(ADS)>10 || g(FIRE)>10 || g(XB1_X)))
		{
			combo_stop(EASY_PLATE);
			s(MELEE, 100);
		}
	}														

if(!g(ADS) && g(XB1_DOWN)) {once = once - 1;}
if (r(XB1_DOWN)) {once = 1;}

if (wpn_holster)
				{
if (sync_with_double_tap == 1)
						{			
if (!g (ADS) && g (RF_led_sync_btn) && get_ptime(RF_led_sync_btn) > 300 && once == 1)
																						{ 
																						WPN_1 = !WPN_1; notify (WPN_1); once = once - 1;																						
																						}
						}
else if (sync_with_double_tap == 2)
						{
					//	if (g(RF_led_sync_btn)) {release = get_ptime(RF_led_sync_btn);}
						doubletap(RF_led_sync_btn);
					    if (!g (ADS) && Pressed == 1 && g (RF_led_sync_btn) && get_ptime(RF_led_sync_btn) > 300 && once == 1 && wpn_holster)
																						{ 																					
																						WPN_1 = !WPN_1; notify (WPN_1); once = once - 1; 																						
																						}
						}
else if (sync_with_double_tap == 3)
						{
					//	if (g(RF_led_sync_btn)) {release = get_ptime(RF_led_sync_btn);}
						doubletap (RF_led_sync_btn);
					   	if (Pressed == 1)
					   			{
					   			if (!g (ADS) && Pressed == 1 && g (RF_led_sync_btn) && get_ptime(RF_led_sync_btn) > 300 && once == 1 && wpn_holster)
																						{ 																					
																						if (WPN_1) {WPN_1 = FALSE; notify (WPN_1); once = once - 1;} 																						
																						}
								}
					   else if (Pressed == 0)	
					   			{	
					   			if (!g (ADS) && Pressed == 0 && g (RF_led_sync_btn) && get_ptime(RF_led_sync_btn) > 300 && once == 1 && wpn_holster)
																						{ 																					
																						if (!WPN_1) {WPN_1 = TRUE; notify (WPN_1); once = once - 1;}																						
																						}
								}
						}
				
										        if (Pressed == 1) 
										        				{
										        				if (g(RF_led_sync_btn)) {btn(RF_led_sync_btn);} 
										        				if (r(RF_led_sync_btn)) {Pressed = 0;}
										        				}										       
												if (r (RF_led_sync_btn) && once < 1 ) once = 1; 
				}
/*   

                      ╦═╗╔═╗╔═╗╦╔╦╗   ╔═╗╦╦═╗╔═╗  ─┼─┼─   ╔═╗╦ ╦╔╦╗╔═╗   ╦═╗╔═╗                 
    ──────────────────╠╦╝╠═╣╠═╝║ ║║───╠╣ ║╠╦╝║╣────┼─┼────╠═╣║ ║ ║ ║ ║───╠╦╝╠╣──────────────────
                      ╩╚═╩ ╩╩  ╩═╩╝   ╚  ╩╩╚═╚═╝          ╩ ╩╚═╝ ╩ ╚═╝   ╩╚═╚                   

*/
    if (dynamic_RF==1) /*dynamic rf by Crescens*/
    					{
    					wtime = 125	- (g(FIRE));
    					}
    					else
    					{
    					wtime = 25 ;
    					}
        
    if (get_val(FIRE)) 
    					{
            			if (akimbo && !WPN_1) 
            										{
              										combo_run(AKIMBO);              						
    												}
    					if (rapid_fire && !WPN_1 || recoil_RF && WPN_1)				{
              										combo_run(RAPID_FIRE);
              										}
            							
            			else if (wpn_holster && !WPN_1) 
            										{
              										combo_run(RAPID_FIRE);
				    								}
            			}    
/*fix for Rapid fire whilst sprint (credits A64)*/
if ((combo_running(RAPID_FIRE) || combo_running (AKIMBO)) && ((g(WALK)) < -85))
																		        {
																	        s(WALK, -85);
s(STRAFE, 0);
}																	        
/*
╔═╗╦ ╦╔╦╗╔═╗  ╔═╗╦ ╦╔═╗╔═╗  ┌┐ ┬ ┬
╠═╣║ ║ ║ ║ ║  ╚═╗║║║╠═╣╠═╝  ├┴┐└┬┘
╩ ╩╚═╝ ╩ ╚═╝  ╚═╝╚╩╝╩ ╩╩    └─┘ ┴ 
╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗          
║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗          
╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝ */
if (AutoSwap)
			{
     	if(get_val(FIRE))
    			{
        		if(get_rumble (RUMBLE_A) > 0 && !Rumble_Wait_Timer) 
									{
										Rumble_Wait_Timer = TRUE;
									}
        		if(Rumble_Wait_Timer) 
		        					{
		        					Rumble_Timer += get_rtime();
		        					
       								if(get_rumble (RUMBLE_A) > 0) 	
        							
        														Cur_Rumble = get_rumble (RUMBLE_A)*255/100;
        							
       								if(Cur_Rumble > Old_Rumble)
							       							  	{
							                					Old_Rumble = Cur_Rumble;
							                					Rumble_Timer = 0;
							            						}
        							else if(Cur_Rumble < Old_Rumble)
    								
    															Old_Rumble = Cur_Rumble;
    								
        							if(Rumble_Timer >= Fire_Rate_Timer) 
        							
        														rapid_fire_timer = TRUE;
        							}
 
    			}
    
 				if(event_release(FIRE))
 									{
							    	rapid_fire_timer=FALSE;
							        combo_stop(RAPID_FIRE); 
							        Rumble_Timer = 0;
							        Rumble_Wait_Timer = FALSE;
							        Old_Rumble = 0;
    								}
   				if (rapid_fire_timer)
   						{
     					if (get_val(FIRE)) 
            						{
            						if (akimbo) 
            									{
              									combo_run(AKIMBO);
              									} else 
            									{
              									combo_run(RAPID_FIRE);
            									}
            						}
    		   					
    					}
    		}/*end AutoSwap*/

/*

                      ╔═╗╔═╗╔╗╔╔═╗╔═╗╦   ╔═╗╦  ╦╔╦╗╔═╗                 
    ──────────────────║  ╠═╣║║║║  ║╣ ║───╚═╗║  ║ ║║║╣──────────────────
                      ╚═╝╩ ╩╝╚╝╚═╝╚═╝╩═╝ ╚═╝╩═╝╩═╩╝╚═╝                 

*/
    
if (cancel_slide == 1 || cancel_slide == 3 ) 
 						{/*credits: ╔═╗┬ ┬┌┬┐┌─┐  ╔═╗┌─┐┌┐┌┌─┐┌─┐┬    ╔═╗┬  ┬┌┬┐┌─┐
									╠═╣│ │ │ │ │  ║  ├─┤││││  ├┤ │    ╚═╗│  │ ││├┤ 
									╩ ╩└─┘ ┴ └─┘  ╚═╝┴ ┴┘└┘└─┘└─┘┴─┘  ╚═╝┴─┘┴─┴┘└─┘
									┌┐ ┬ ┬  ╔╦╗ ┬┌─┐┌┐┌┌─┐┌─┐╦╔═┬┬  ┬              
									├┴┐└┬┘   ║║ │├─┤││││ ┬│ │╠╩╗││  │              
									└─┘ ┴   ═╩╝└┘┴ ┴┘└┘└─┘└─┘╩ ╩┴┴─┘┴─┘*/
    					if ((g(PS4_LY) < -60) || (g(PS4_LY) > 60) || 
    					(g(PS4_LX) < -60) || (g(PS4_LX) > 60)) 
															{
															if (r(PRONE)) 												      
											      						{
      																	if (cancel_slide == 1) 
	          																	{
					            												combo_run(CANCEL_SLIDE);
																				}
				          												
																		if (cancel_slide == 3)
																		        {
																		         combo_run(CANCEL_SLIDE_MW);
																		        }
											        					}	
															
															}
																 
     				 									
																
    					}
/*
                      ╔═╗╔═╗╔═╗╦ ╦  ╔╦╗╔═╗╔═╗╦  ╔═╗╦ ╦               
    ──────────────────║╣ ╠═╣╚═╗╚╦╝───║║║╣ ╠═╝║  ║ ║╚╦╝───────────────
                      ╚═╝╩ ╩╚═╝ ╩   ═╩╝╚═╝╩  ╩═╝╚═╝ ╩  
                     	   B Y  C R E S C E N S 
*/

   if ((easy_field_equip == 1 && !g(LETHAL) && !g(FIRE)) || (easy_field_equip == 1 && !g(TAC_G) && !g(FIRE)))
					{
					
					if (g(easy_field_btn)) block (easy_field_btn,150);
					if(r(easy_field_btn))
								{
								if (get_ptime(easy_field_btn) <= 150)
								combo_run (FIELD);
								block (easy_field_btn,50);}
								}

/*

                      ╔═╗╦ ╦╔╦╗╔═╗   ╔═╗╦╔╗╔╔═╗                  
    ──────────────────╠═╣║ ║ ║ ║ ║───╠═╝║║║║║ ╦──────────────────
                      ╩ ╩╚═╝ ╩ ╚═╝   ╩  ╩╝╚╝╚═╝                  

*/				  
if(enemy_ping==1)
	{
		if(ping_type == 0)
		{
			if(p(ADS))
				combo_run(AUTO_PING); 
		}
      	if(ping_type == 1)
		{
			if(p(FIRE))
				combo_run(AUTO_PING); 
		}
		if(ping_type == 2)
		{
			if(g(ADS) && p(FIRE))
				combo_run(AUTO_PING); 
		}
		if(ping_type == 3)
		{
			if(g(ADS) && g(LETHAL))
				{
				s(BTN_PING, 100); block (LETHAL, release + 50); Oh_my_sexy_bumper = 10;
				}
		}
	}
/*

                      ╔═╗╔═╗╦  ╔═╗╦═╗   ╔═╗╦╔╦╗   ╔═╗╔═╗╔═╗╦╔═╗╔╦╗  ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗                  
    ──────────────────╠═╝║ ║║  ╠═╣╠╦╝───╠═╣║║║║───╠═╣╚═╗╚═╗║╚═╗ ║───║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗──────────────────
                      ╩  ╚═╝╩═╝╩ ╩╩╚═   ╩ ╩╩╩ ╩   ╩ ╩╚═╝╚═╝╩╚═╝ ╩   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝                  

                        B E S T  A I M  A S S I S T  O N  C O D  -  B Y  C R E S C E N S 
*/

    
       
/*start*/ stick_input = (isqrt(pow(g(AIM_X),2) + pow(g(AIM_Y),2)));
 
if (sticky_tripple_or_polar_aa == 3)
 									{
 		if (PolarBooster == ON && g(FIRE)) 
 				{
                Radius = _amplitude + PR_Boost;
            	}
                else 
                {
                Radius = _amplitude;
                }
								      if (g(ADS) || (g(FIRE)))
								      			{
	        									if (stick_input <= Radius)
	        													{ 
	        													  rnd = random(mn, mx);
	        													  running_p = TRUE;
														          RS_gr = (RS_gr + _quantity) % 360;
														          set_polar(RS, RS_gr, (Radius * rnd));
	        													}
	        									else running_p = FALSE;
								      			} 
									}/*end*/
		
		
					      if (g(XB1_DOWN))
					      				{
					      				
									        if (p(XB1_LT)) 
									        				{
													          _quantity --;
													          notify(1);
													          s_pv(SPVAR_43, _quantity);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = _quantity;
													          P_s(0, 41, 128, M, B_K, C_31[0], sizeof(C_31));
					        								}
        									if (p(XB1_RT)) 
													        {
													          _quantity ++;
													          notify(1);
													          s_pv(SPVAR_43, _quantity);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = _quantity;
													          P_s(0, 41, 128, M, B_K, C_31[0], sizeof(C_31));
													        }
												
      										
									        if (p(XB1_LB)) 
									        				{
													          _amplitude --;
													          notify(1);
													          s_pv(SPVAR_44, _amplitude);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = _amplitude;	
													          P_s(0, 41, 128, M, B_K, C_32[0], sizeof(C_32));
					        								}
        									if (p(XB1_RB)) 
													        {
													          _amplitude ++;
													          notify(1);
													          s_pv(SPVAR_44, _amplitude);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = _amplitude;
													          P_s(0, 41, 128, M, B_K, C_32[0], sizeof(C_32));
													        }
												        
											btn(XB1_LT); btn(XB1_LB);
											btn(XB1_RT); btn(XB1_RB);
											}


 if (sticky_tripple_or_polar_aa == 4) {
    
    	if (RadiusBoost==ON && g(FIRE)) {
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost==ON && g(FIRE)) {
                        Angle = PolarAngle + PolarABoost;
                    }
                        else {
                            Angle = PolarAngle;
                        }

        if (g(ADS) && abs(get_ival(AIM_X)) <= Radius && abs(g(AIM_Y)) <= Radius) {         
            
                set_polar(POLAR_RS,Speed = (Speed + Angle) % 360,(abs(g(POLAR_RX)) + abs(g(POLAR_RY))) / 4 + Radius * 328);
            }
        }

 /*

                      ╔═╗╦╔╦╗   ╔═╗╔═╗╦═╗╦═╗╔═╗╔═╗╔╦╗╦╔═╗╔╗╔╔═╗   ╔═╗╦═╗╔═╗╔═╗╔═╗╔═╗╔╗╔╔═╗                  
    ──────────────────╠═╣║║║║───║  ║ ║╠╦╝╠╦╝║╣ ║   ║ ║║ ║║║║╚═╗───║  ╠╦╝║╣ ╚═╗║  ║╣ ║║║╚═╗──────────────────
                      ╩ ╩╩╩ ╩   ╚═╝╚═╝╩╚═╩╚═╚═╝╚═╝ ╩ ╩╚═╝╝╚╝╚═╝   ╚═╝╩╚═╚═╝╚═╝╚═╝╚═╝╝╚╝╚═╝                  

*/
    if (aim_sens_corrections == 1) 
							{
  							ads_grenade_sens = 100 - (game_sens); ads_fire_sens = 96 - (game_sens); long_shot_sens=90-(game_sens); actual_sens = 100;
      						if (!g(ADS) && !g(FIRE) && !g(LETHAL) && !g(TAC_G)) 
																					  {
																					  Sens = actual_sens;
																				      } 
																				      else if(g(ADS) && !g(FIRE) ) 
																					  {  
																				      if (sniper && WPN_1) Sens = long_shot_sens; 
																				      else
																					  Sens=ads_grenade_sens;
																					  }
																				      else if (!g(ADS) && g(FIRE)) 
																				      {
																				        Sens = actual_sens;
																				      } 
																				      else if (g(ADS) && g(FIRE)) 
																				      {  
																				      if (sniper && WPN_1) Sens = long_shot_sens; 
																				      else
																				        Sens = ads_fire_sens;
																				      } 
																				      else if (g(TAC_G) || g(LETHAL)) 
																				      {
																				        Sens = ads_grenade_sens;
																				      }
																				      if (stick_input > Radius)/*cut_off_polar*/
																				      {
																				        if (Sens > 100) Sens = 100;
																				        s_s(AIM_X, Sens);
																				        s_s(AIM_Y, Sens);
																				        running_p=TRUE;
																			      }
					      if (g(XB1_DOWN)) 
					      					{
									        if (p(XB1_VIEW)) 
									        				{
													          game_sens--;
													          notify(1);
													          s_pv(SPVAR_41, game_sens);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = game_sens;	
													          P_s(0, 41, 128, M, B_K, C_41[0], sizeof(C_41));
					        								}
        									if (p(XB1_MENU)) 
													        {
													          game_sens++;
													          notify(1);
													          s_pv(SPVAR_41, game_sens);
													          displayNew = TRUE;
													          cls_oled(0);
													          displayValue = game_sens;	
													          P_s(0, 41, 128, M, B_K, C_41[0], sizeof(C_41));
													        }
												btn(XB1_VIEW);
												btn(XB1_MENU);
      										}
      					if (g(XB1_VIEW) && g(XB1_MENU))/*resets values to default from user config*/
      														{
      														game_sens=in_game_menu_sens;
      														notify(3);
      														s_pv(SPVAR_41, game_sens);
      														btn(XB1_VIEW);
															btn(XB1_MENU);
															displayNew = TRUE;
													        cls_oled(0);
													        displayValue = game_sens;	
													        P_s(0, 41, 128, M, B_K, C_41[0], sizeof(C_41));
      														}
      														
   } 
    displ(ar_tm_, ar_sY_, ar_eY_, ar_sX_, rld_1, AR_S);
/*

                      ╔═╗╔═╗╔═╗╦ ╦  ╔╦╗╦ ╦╦ ╦╔╦╗╔╗                
    ──────────────────║╣ ╠═╣╚═╗╚╦╝───║ ╠═╣║ ║║║║╠╩╗───────────────
                      ╚═╝╩ ╩╚═╝ ╩    ╩ ╩ ╩╚═╝╩ ╩╚═╝               

*/
if (smart_thumb_stick <=  2 && smart_thumb_stick >=  0)
							{ 
							auto_run=1;
							} 
							else 
							{
							auto_run =0;
							}
							/*Easy Thumbs (& Easy Melee) by Crescens*/
if (smart_thumb_stick >=  2 && smart_thumb_stick  <= 3 && g(XB1_LS)&& !sniper)
							{
							s(l_stick_click, 100);
							}
if (turbo_melee == 1)
						    {
						    if (get_val(MELEE)) 
						    					{
						    					combo_run (FAST_MELEE);
						    					}
						    if (smart_thumb_stick >=  2 && smart_thumb_stick  <= 3 && g(XB1_LS)&& !sniper)
						    																			{
																				    					combo_run (FAST_MELEE);
																				    					}
						    }
if (turbo_melee == 2)
							{
							if (get_brtime(MELEE) <= 200 && p(MELEE)|| get_brtime(XB1_LS) <= 200 && p(XB1_LS))
														{
														if (g(MELEE))
																	{
																	turbo ++;
																	}
														if (smart_thumb_stick >=  2 && smart_thumb_stick  <= 3 && g(XB1_LS)&& !sniper)
																	{
																	turbo ++;
																	}
														}
							
							if (turbo > 0)
											{
											if (g(MELEE) || g(XB1_LS)) 
														{
														combo_run (FAST_MELEE);														
														}
											}
							if (get_lval(MELEE) && !g(MELEE) || get_lval(XB1_LS) && !g(XB1_LS))
														{
														turbo = 0;																											
														}
							
											
							}
/*

                      ╔═╗╦ ╦╔╦╗╔═╗   ╦═╗╦ ╦╔╗╔                  
    ──────────────────╠═╣║ ║ ║ ║ ║───╠╦╝║ ║║║║──────────────────
                      ╩ ╩╚═╝ ╩ ╚═╝   ╩╚═╚═╝╝╚╝                  

*/
  if (auto_run) 
  				{
      			if (!g(ADS) && g(WALK) < (walk_tresh)) 
      												{
      												combo_run(EASY_RUN);			      			
													}
	} 
/*the classical aim assist by excalibur & dot22 */   
if (sticky_tripple_or_polar_aa==1)
								{ _w=20;
								if(g(ADS))
										{
										combo_run(STICKY_AIM);
										}
										else
										{
										combo_stop(STICKY_AIM);
}
}/* credits:┌─┐┬ ┬┬  ┌─┐┬ ┬┬   ┬       
			│  ├─┤│  │  ├─┤│  ┌┼─      
			└─┘┴ ┴┴  └─┘┴ ┴┴  └┘       
			╔═╗╔═╗    ╔╗╔┬┬┌─┌─┐┬  ┌─┐┬
			╚═╗╚═╗    ║║║│├┴┐│ ││  ├─┤│
			╚═╝╚═╝────╝╚╝┴┴ ┴└─┘┴─┘┴ ┴┴
			tripple sticky by 
			chi chi & 𝓢𝓢_𝓝𝓲𝓴𝓸𝓵𝓪𝓲*/
if (sticky_tripple_or_polar_aa==2)
								{
								if(g(ADS) && !g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v  = aim_val_1;
													_w = wait_val_1;
													}
								else if(g(ADS) && g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v  = aim_val_2;
													_w = wait_val_2;
													}
								else if(!g(ADS) && g(FIRE))
													{
													combo_run(STICKY_AIM);
													_v = aim_val_3;
													_w = wait_val_3;
													}
}/*polar aa by
╔═╗┬─┐┌─┐┌─┐┌─┐┌─┐┌┐┌┌─┐
║  ├┬┘├┤ └─┐│  ├┤ │││└─┐
╚═╝┴└─└─┘└─┘└─┘└─┘┘└┘└─┘*/



if(sniper && WPN_1 && !wpn_holster || WPN_1 && wpn_holster && sniper)
		{/*credit: ╦  ┌─┐┌─┐┬┌┬┐┌─┐┬  ┌─┐┬ ┬┌┬┐┌─┐
				   ║  ├┤ │ ┬│ │ │  │  │ ││ │ ││└─┐
				   ╩═╝└─┘└─┘┴ ┴ └─┘┴─┘└─┘└─┘─┴┘└─┘ */
        if(g(ADS))
            s(SPRINT,100);

        if(g(WALK) <-90 && g(ADS) && get_ptime(ADS) > 200)
            combo_stop(CH);

            if(p(ADS)) 
                combo_run(CH);

            if(g(ADS) && get_lval(SPRINT)) 
                s(SPRINT,0);
            
            if (quick_scope == 1)
            					{
             					if(p(FIRE) && !g(ADS))/*scope shot added by Crescens*/ 
             						{   
						          	combo_run (QUICK_S) 
						            }
								}
			if (quick_scope == 2)
								{
								if (!g(ADS))
										  {
											if (g(LETHAL)) block (LETHAL,qs_pr_time);
											if (r(LETHAL))
														{
														if (get_ptime(LETHAL) <= 150)
														combo_run (QUICK_S);
														block (LETHAL,50);
														}
										  }
								}
								
			if(auto_crouch==1)
       						if (r(ADS))
       									{
       									combo_run(CROUCH);
       									}		
       								
       								
        }else if (auto_aim){ if(get_val(FIRE) && !g(ADS)){s(ADS,100);}}
        
/*

                      ╔═╗╦═╗   ╔═╗╔═╗╔═╗╦ ╦   ╔═╗╔═╗╔╦╗  ╦ ╦╔═╗                  
    ──────────────────╠═╣╠╦╝───║╣ ╠═╣╚═╗╚╦╝───╚═╗║╣  ║───║ ║╠═╝──────────────────
                      ╩ ╩╩╚═   ╚═╝╩ ╩╚═╝ ╩    ╚═╝╚═╝ ╩   ╚═╝╩                    

*/	
current_x = g(AIM_X);
current_y = g(AIM_Y);
        
if(g(XB1_DOWN) && !g(ADS) && !edit) 
    { 
    if (default_pr_or_cur_state == 1)
    {
     if(r(XB1_X) && get_ptime (XB1_X)<500)
            {Recoil_Pr=1; l();} 
        if(r(XB1_A))
            {Recoil_Pr=2; l();} 
        if(r(XB1_B))
            {Recoil_Pr=3; l();}
        if(r(XB1_Y)&& get_ptime (XB1_Y)<400)
            {Recoil_Pr=4; l();} 
            }
            else 
            {
        if(r(XB1_X) && get_ptime (XB1_X)<500)
            {Recoil_Pr=1; dflt_lo=TRUE; l();} 
        if(r(XB1_A))
            {Recoil_Pr=2; dflt_lo=TRUE; l();} 
        if(r(XB1_B))
            {Recoil_Pr=3; dflt_lo=TRUE; l();}
        if(r(XB1_Y)&& get_ptime (XB1_Y)<400)
            {Recoil_Pr=4; dflt_lo=TRUE; l();} 
            }
    btn(XB1_B);btn (XB1_A); btn (XB1_LB); btn (XB1_RB); btn (XB1_RS); block (XB1_Y, 450);
    } 

if (get_brtime(XB1_DOWN) <= 200 && p(XB1_DOWN))
												{
												pr=TRUE; notify (pr);
												} 
if (r(XB1_DOWN)&&pr)
					{
					pr=FALSE;
					}
if (!g (XB1_X) && !record)
					{
  					if (g (PS4_DOWN)&&pr)	
  										{
  										if (get_ptime (PS4_DOWN) > 2500 && !g (XB1_X))   
  												{
  												{edit = 1; newt =1; newv=1; ar_tm_[Recoil_Pr] = 0; notify (newt); b_f=4;}
  												pr=FALSE; 												
  												}        					
                         				}
                         
                   	}
      
      
    
 if (edit)
       	{
       if (g (FIRE) && g(ADS) && newt)
    		   	{
     			 ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + get_rtime();     
				}
      			if (r (FIRE)&& newt)
      				{
      				save__(); b_f=2; newt =0; notify (!newt); newv=1; newv1 = ar_tm_[Recoil_Pr]/2; newv2 = ar_tm_[Recoil_Pr]/2;
      				}  
      if (g (XB1_UP))
      				{
      				edit=0; 
      				newv=0;
      				ol();
      				}      					
    					if (newv==1)
    								{    											
									if (r(FIRE)) {save__(); b_f=2;
												{ 
												if (idx >0 || idx2 > 0 || idX > 0 )
														{ 
														idx = 0; ry_avg = 0; idx2 = 0; ry_avg2 = 0; idX = 0; rx_avg = 0;
														}
												}
    								}
    								
  if (r (FIRE)&& newv) newv1=newv2;
   
    if(g(ADS) && g(FIRE)) {
    newv1 = newv1 - get_rtime();
        
      if (newv1 > 0){
        if(abs(current_y) >= y_ambit) {
            y_input[idx] =  current_y;
            idx += 1;
           
            if(idx == 15) {
               
                for(idx = 0;idx <= 14;idx++) {
	                ry_avg += y_input[idx]; 
		        }
		      
		        ry_avg /= 15;
		  
		        sY_eY_cor += ry_avg / 10;
		    
		        ry_avg = 0;
		        idx = 0;
		        		displayNew = TRUE;
				        cls_oled(0);
				        displayValue = sY_eY_cor;	
				        P_s(0, 41, 128, M, B_K, C_43[0], sizeof(C_43));
		        
	        }
	        }/*--end if (newv1 > 0)*/}else
	        if(abs(current_y) >= y_ambit) {
            y_input[idx2] =  current_y;
            idx2 += 1;
            
           
           
            if(idx2 == 15) {
               
                for(idx2 = 0;idx2 <= 14;idx2++) {
	                ry_avg2 += y_input[idx2]; 
		        }
		      
		        ry_avg2 /= 15;
		  
		        sY_eY_cor2 += ry_avg2 / 10;
		        		displayNew = TRUE;
				        cls_oled(0);
				        displayValue = sY_eY_cor2;	
				        P_s(0, 41, 128, M, B_K, C_44[0], sizeof(C_44));
		    
		        ry_avg2 = 0;
		        idx2 = 0;
	        }
	        }
	     if(abs(current_x) >= x_ambit) {
           		x_input[idX] =  current_x;
            	idX += 1;
	         if(idX == 15) {
               
                for(idX = 0;idX <= 14;idX++) {
	                rx_avg += x_input[idX]; 
	                
		        }
		      
		        rx_avg /= 15;
		  
		        sX_cor += rx_avg / 10;
		    
		        rx_avg = 0;
		        idX = 0;
	        }
	        }
	        ar_sX_[Recoil_Pr]= sX_cor;
	        
         	ar_sY_[Recoil_Pr] = sY_eY_cor; ar_eY_[Recoil_Pr] = sY_eY_cor2;
        }
        

   }
    
    if (g (XB1_DOWN)){
    
        if(g(XB1_X)){	
        
        if (p(XB1_RB) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sY_[Recoil_Pr];}	
				        P_s(0, 41, 128, M, B_K, C_43[0], sizeof(C_43));
        if (p(XB1_LB) && Recoil_Pr) {ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sY_[Recoil_Pr];}	
				        P_s(0, 41, 128, M, B_K, C_43[0], sizeof(C_43));
        if (p(XB1_LT) && Recoil_Pr){ ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] - 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_43[0], sizeof(C_43));}
        if (p(XB1_RT) && Recoil_Pr) { ar_sY_[Recoil_Pr] = ar_sY_[Recoil_Pr] + 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_43[0], sizeof(C_43));}
       
                           }
        if(g(XB1_A)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_eY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_44[0], sizeof(C_44));}       
        if (p(XB1_LB) && Recoil_Pr) {ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_eY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_44[0], sizeof(C_44));}     
        if (p(XB1_LT) && Recoil_Pr){ ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] - 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_eY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_44[0], sizeof(C_44));}       
        if (p(XB1_RT) && Recoil_Pr) { ar_eY_[Recoil_Pr] = ar_eY_[Recoil_Pr] + 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_eY_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_44[0], sizeof(C_44));} 
         
                           }
        if(g(XB1_B)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sX_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_45[0], sizeof(C_45));}    
        if (p(XB1_LB) && Recoil_Pr) {ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 1; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sX_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_45[0], sizeof(C_45));}    
        if (p(XB1_LT) && Recoil_Pr){ ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] - 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sX_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_45[0], sizeof(C_45));}       
        if (p(XB1_RT) && Recoil_Pr) { ar_sX_[Recoil_Pr] = ar_sX_[Recoil_Pr] + 10; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_sX_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_45[0], sizeof(C_45));}
   
                           }
        if(g(XB1_Y)){																								
        if (p(XB1_RB) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 100; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_tm_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_46[0], sizeof(C_46));}     
        if (p(XB1_LB) && Recoil_Pr) {ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 100; save__(); b_f=1;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_tm_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_46[0], sizeof(C_46));}      
        if (p(XB1_LT) && Recoil_Pr){ ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] - 1000; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_tm_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_46[0], sizeof(C_46));}      
        if (p(XB1_RT) && Recoil_Pr) { ar_tm_[Recoil_Pr] = ar_tm_[Recoil_Pr] + 1000; save__(); b_f=2;
        				displayNew = TRUE;
				        cls_oled(0);
				        displayValue = ar_tm_[Recoil_Pr];	
				        P_s(0, 41, 128, M, B_K, C_46[0], sizeof(C_46));}
        if (ar_tm_[Recoil_Pr] <=0) ar_tm_[Recoil_Pr] = 0; 
        
                           }
       btn (XB1_B); btn(XB1_Y); btn (XB1_XBOX); btn (XB1_X); btn (XB1_A);btn (XB1_RT);btn (XB1_RB); btn (XB1_LT);btn (XB1_LB);  
           }    
    
    }
    
    

    if(Recoil_Pr == 1) {ar_sY_[0] = ar_sY_[1]; ar_eY_[0] = ar_eY_[1]; ar_sX_[0] = ar_sX_[1]; ar_tm_[0] = ar_tm_[1];  f_clr = SkyBlue;}          
    if(Recoil_Pr == 2) {ar_sY_[0] = ar_sY_[2]; ar_eY_[0] = ar_eY_[2]; ar_sX_[0] = ar_sX_[2]; ar_tm_[0] = ar_tm_[2];  f_clr = Orange;}
    if(Recoil_Pr == 3) {ar_sY_[0] = ar_sY_[3]; ar_eY_[0] = ar_eY_[3]; ar_sX_[0] = ar_sX_[3]; ar_tm_[0] = ar_tm_[3];  f_clr = Pink;}
    if(Recoil_Pr == 4) {ar_sY_[0] = ar_sY_[4]; ar_eY_[0] = ar_eY_[4]; ar_sX_[0] = ar_sX_[4]; ar_tm_[0] = ar_tm_[4];  f_clr = Yellow;}

/*

                      ╔═╗╔╗╔╔╦╗╦   ╦═╗╔═╗╔═╗╔═╗╦╦               
    ──────────────────╠═╣║║║ ║ ║───╠╦╝║╣ ║  ║ ║║║───────────────
                      ╩ ╩╝╚╝ ╩ ╩   ╩╚═╚═╝╚═╝╚═╝╩╩═╝             

*/
if (no_recoil && WPN_1)

						 {
						  if(ar_sY_ < ar_eY_)
						  interval = 1;
						  else
						  interval = -1;
						  
						  iteration_point = (ar_tm_ / 10) / (abs(ar_sY_ - ar_eY_));
						  
						  if(!get_lval(FIRE))
  											{
										    AR_V = ar_sY_;
										    i_count = 0;
										    i_ = 0;
										  	}  
  						if(g(FIRE))
  									{if (AR_method_used == 2){
								    AntiRecoil(AIM_X, ar_sX_);
								    if(!p_count())
								    AR_V = c();
								    else
								    AR_V = (ar_eY_);
								    AntiRecoil(AIM_Y, AR_V)
								    }
								    else{
								    AR_V = get_rumble_evil_ar();
								    AntiRecoil(AIM_Y, AR_V)
								    
										}
  									}
  if (AR_method_used == 1)
  						{
  						 f_clr = Neon;
  						if (g(XB1_LS) && g(XB1_RS)) 
					      					{
									        if (p(XB1_LT)) 
									        				{
													          AR_S --;
													          notify(1);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 1;
													          displayNew = TRUE;
														      cls_oled(0);
														      displayValue = AR_S;	
														      P_s(0, 41, 128, M, B_K, C_53[0], sizeof(C_53)); 													          
					        								}
        									if (p(XB1_RT)) 
													        {
													          AR_S ++;
													          notify(1);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 1;
													          displayNew = TRUE;
														      cls_oled(0);
														      displayValue = AR_S;	
														      P_s(0, 41, 128, M, B_K, C_53[0], sizeof(C_53)); 
													        }
												
      										
									        if (p(XB1_LB)) 
									        				{
													          AR_S = AR_S - 10;
													          notify(2);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 2;
													          displayNew = TRUE;
														      cls_oled(0);
														      displayValue = AR_S;	
														      P_s(0, 41, 128, M, B_K, C_53[0], sizeof(C_53)); 
					        								}
        									if (p(XB1_RB)) 
													        {
													          AR_S = AR_S + 10;
													          notify(2);
													          s_pv(SPVAR_53, AR_S);
													          b_f = 2;
													          displayNew = TRUE;
														      cls_oled(0);
														      displayValue = AR_S;	
														      P_s(0, 41, 128, M, B_K, C_53[0], sizeof(C_53)); 
													        }
											btn(XB1_LT); btn(XB1_LB); btn(XB1_LS);
											btn(XB1_RT); btn(XB1_RB); btn(XB1_RS); 
											}
  
  }
  }
if(displayNew) {
		        NumberToString(displayValue,FindDigits(displayValue));
		        displayNew = FALSE;
    			}
    			
 if(g (XB1_LS) && !get_val(ADS)) 
    { 
        if(p(XB1_RIGHT))
            {load_slot(Slot_Right);} 
        if(p(XB1_LEFT))
            {load_slot(Slot_Left);} 
        if(p(XB1_UP))
            {load_slot(Slot_Up);} 
        if(p(XB1_DOWN))
            {load_slot(Slot_Down);} 
    btn(XB1_UP);btn (XB1_DOWN);btn (XB1_RIGHT); btn (XB1_LEFT); 
    } 

  if (!script_on || edit) Led (Off);
 	else if (no_recoil && g(FIRE) && !rapid_fire_timer && WPN_1 || g(FIRE) && no_recoil && WPN_1){b_f=1;}
 		else if (akimbo && !WPN_1) Led(Pinkish);
				else if (wpn_holster && !WPN_1 || rapid_fire && !WPN_1 && rapid_fire || ! no_recoil && akimbo && rapid_fire && !WPN_1 || rapid_fire_timer && g(FIRE)) Led(Red);
  						else if (g(ADS) && rainbow_flash_indicator == ON && running_p && !g(FIRE)) 
  																							{
																						    hue++;
																						    if (hue == 360) hue = 0;
																						    set_hsb(hue, 100, 100)
																						  	}
						else if (sniper && !!WPN_1) Led (Emerald);
				else if (no_recoil && ar_tm_ > 0){Led (f_clr);}
  		else Led(Blue);
  
  
  if(notify)
  			{
			  notifier += get_rtime();
			  						if(notifier < 150) set_rumble(1,75);
  									else if(notifier < 400) reset_rumble();
  									else
  										{
										  notify -= 1;
										  notifier = 0;
  										}
  			}
 /*

                      ╔═╗╦  ╔═╗╔═╗╦ ╦╔═╗╦═╗                  
    ──────────────────╠╣ ║  ╠═╣╚═╗╠═╣║╣ ╠╦╝──────────────────
                      ╚  ╩═╝╩ ╩╚═╝╩ ╩╚═╝╩╚═                  

*/
  if (b_f >0 && b_f < 9)
					  {			
					  flasher += get_rtime();
					  if (flasher >=0 && flasher <= (b_f*400)) 
					  											{
					  											b_f_wait = 200; combo_run (FLASH);
					  											}
					  else if(flasher>=(b_f*400)) 
					  							{
					  							b_f=0;
					  							}
  
  }
 if (b_f==0 && combo_running (FLASH)) {combo_stop (FLASH); reset_leds(); flasher=0;}

  
 }
} 
combo STICKY_AIM {
s(AIM_Y,xy_val(AIM_Y, _v));
wait(_w);
s(AIM_X,xy_val(AIM_X, _v));
s(STRAFE,xy_val(STRAFE, _v));
wait(_w);
s(AIM_Y,inv(xy_val(AIM_Y, _v)));
wait(_w);
s(AIM_X,inv(xy_val(AIM_X, _v)));
s(STRAFE,inv(xy_val(STRAFE, _v)));
wait(_w);
}
combo DANCE {
s(PRONE, 100);
wait(30);
wait(60);
s(PRONE, 0);
wait(30);
wait(60);
s(XB1_UP, 100);
wait(30);
wait(60);
s(XB1_UP, 0);
wait(30);
wait(60);
}
combo BANGER {
s(FIRE, 100);
wait(40);
s(FIRE, 0);
wait(150);
}
combo STRAFER { 
set_val(STRAFE,-100); 
wait(strafe_time);
set_val(STRAFE, 100);  
wait(strafe_time);
}   
combo JUMPER { 
set_val(JUMP,100); 
wait(jump_time);
set_val(JUMP, 0);  
wait(jump_time);
} 
combo BURSTER {
s(FIRE, 100);
wait(burst_hold);
s(FIRE, 0);
wait(burst_rest);
}
combo AKIMBO {
s(FIRE, 100);
s(ADS, 100);
wait(wtime);
s(FIRE, 0);
s(ADS, 0);
wait(wtime);
}
combo FLASH{
Led (f_clr);
wait (b_f_wait);
Led (Off);
wait (b_f_wait);
}
combo RAPID_FIRE {
s(FIRE,100);
wait(wtime);
s(FIRE,  0);
wait(wtime);
}

combo CANCEL_SLIDE_MW {
s(PRONE, 100);
wait(120);
s(PRONE, 0);
wait(60);
s(PRONE, 100);
wait(50);
s(PRONE, 100);
s(JUMP, 100);
wait(60);
s(PRONE, 0);
s(JUMP, 100);
wait(10);
s(JUMP, 0);
}
    
combo CANCEL_SLIDE {
s(PRONE, 100);
wait(80);
s(PRONE, 0);
wait(20);
s(SPRINT, 0);
s(ADS, 100);
wait(10);
s(ADS, 0);
s(PRONE, 100);
s(SPRINT, 100);
wait(20);
s(PRONE, 0);
s(SPRINT, 0);
wait(20);
}
combo AUTO_PING {
s(BTN_PING,100);
wait(20);
s(BTN_PING,0);
wait(20);
s(BTN_PING,100);
wait(20);
s(BTN_PING,0);
}
combo FIELD {
s(TAC_G, 100);
s(LETHAL, 100);
wait(150);
}

combo CROUCH {
s(PRONE,100);            
wait(150);                        
}  
combo CANCEL_RLD {
s(XB1_Y, 100);
wait(30);
wait(20);
s(XB1_Y, 100);
wait(30);
wait(20);
b_reload=FALSE;
}
combo EASY_RUN{
s(SPRINT,100);
wait(30);
wait(100);
}
combo cJitters 
{//extract from SweetEvil Cyber Aim
s(ADS,100);
s(FIRE,0);
wait(8);
s(ADS,100);
s(FIRE,100);
wait(8);
s(ADS,0);
s(FIRE,100);
wait(8);
wait(8);
 }
combo FAST_MELEE {
set_val(MELEE, 100);
wait(35);
set_val(MELEE, 0);
wait(30);  
}
combo AIMBOT {//extract from SS_Nikolai`s Scripts
s(ADS, 100);
wait(random(220, 420)); // Hold Time Between 220ms and 420ms
s(ADS, 0);
wait(random(95, 220));  //  Release Time Between 95ms and 220ms 
}
combo OLED_CS{
wait(6000);
wait(6000);
wait(6000);
cls_oled(0);
}
combo QUICK_S {  
s(FIRE,0); 
s(ADS,100); 
wait(quick_scope_time);    
s(ADS,100); 
s(FIRE,100);
wait(50); 
}
combo CH {
s(SPRINT,0);
wait(60);
s(SPRINT,100);
wait(110);
s(SPRINT,0);
wait(110);
}
combo EASY_PLATE {
	notify(1);
	wait (50);
	s(XB1_Y,100);
	wait(6000); 
}
combo SCREEN_START {
cls_oled(0);
P_s(0, 0, 128, M, B_K, C_1[0], sizeof(C_1));
P_s(0, 22, 128, XS, W, C_2[0], sizeof(C_2));
wait(1000); 
ol();
  }
function notify_pr(Recoil_Pr){
notify  = Recoil_Pr
}
function save__ (){
s_pv(SPVAR_1, ar_sY_[1]);
s_pv(SPVAR_2, ar_eY_[1]);
s_pv(SPVAR_3, ar_tm_[1]);
s_pv(SPVAR_4, ar_sX_[1]);
s_pv(SPVAR_5, ar_sY_[2]);
s_pv(SPVAR_6, ar_eY_[2]);
s_pv(SPVAR_7, ar_tm_[2]);
s_pv(SPVAR_8, ar_sX_[2]);
s_pv(SPVAR_9, ar_sY_[3]);
s_pv(SPVAR_10, ar_eY_[3]);
s_pv(SPVAR_11, ar_tm_[3]);
s_pv(SPVAR_12, ar_sX_[3]);
s_pv(SPVAR_13, ar_sY_[4]);
s_pv(SPVAR_14, ar_eY_[4]);
s_pv(SPVAR_15, ar_tm_[4]);
s_pv(SPVAR_16, ar_sX_[4]);
s_pv(SPVAR_53, AR_S);
notify (1);
}

function l (){
ar_sY_[1]	= pv(SPVAR_1, 0,100, 20);
ar_eY_[1]	= pv(SPVAR_2,-100,100, 0);
ar_tm_[1] 	= pv(SPVAR_3, -30000,30000,5000);
ar_sX_[1] 	= pv(SPVAR_4,-100,100, 0);
ar_sY_[2]	= pv(SPVAR_5, 0,100, 20);
ar_eY_[2]	= pv(SPVAR_6,-100,100, 0);
ar_tm_[2]	= pv(SPVAR_7, -30000,30000,5000);
ar_sX_[2]	= pv(SPVAR_8,-100,100, 0);
ar_sY_[3]	= pv(SPVAR_9, 0,100, 20);
ar_eY_[3]	= pv(SPVAR_10,-100,100, 0);
ar_tm_[3]	= pv(SPVAR_11, -30000,30000,5000);
ar_sX_[3]	= pv(SPVAR_12,-100,100, 0);
ar_sY_[4]	= pv(SPVAR_13, 0,100, 20);
ar_eY_[4]	= pv(SPVAR_14,-100,100, 0);
ar_tm_[4]	= pv(SPVAR_15, -30000,30000,5000);
ar_sX_[4]	= pv(SPVAR_16,-100,100, 0);
AR_S		= pv(SPVAR_53,-100,100, 0);
notify_pr(Recoil_Pr); b_f=(Recoil_Pr);
}

function B_o (){
if (Oh_my_sexy_bumper == 7) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_18[0], sizeof(C_18));
								ol();
								}
if (Oh_my_sexy_bumper == 8) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_17[0], sizeof(C_17));
								ol();
								}
if (Oh_my_sexy_bumper == 6) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_24[0], sizeof(C_24));
								ol();
								}
if (Oh_my_sexy_bumper == 5) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_25[0], sizeof(C_25));
								ol();
								}
if (Oh_my_sexy_bumper == 4) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_26[0], sizeof(C_26));
								ol();
								}
if (Oh_my_sexy_bumper == 3) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_27[0], sizeof(C_27));
								ol();
								}
if (Oh_my_sexy_bumper == 2) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_28[0], sizeof(C_28));
								ol();
								}
if (Oh_my_sexy_bumper == 9) 
    							{
    							cls_oled(0); 
    							P_s(0, 22, 128, L, W, C_29[0], sizeof(C_29));
								ol();
								}

								
}

function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < 25)  
return f_val;    
return get_val(f_axis);     
} 
function AntiRecoil (axis, recoil){  
RY = current_y;
RX = current_x;

if (g(FIRE) && (isqrt(RX*RX + RY*RY)) <= abs(recoil))
{
if(abs(RY) <= abs(recoil))
{
s(axis,(recoil * (100 - abs(g(axis)))) / 100 + g(axis));
}
}
}
function P_s(x, y, width, font, colour, str, strSize) {
if (width > 0 && strSize > 0) {
width = (width - (strSize - 1) * FONT_STATS[font][F_W]) / 2;
if (width > 0) x += width;
}
printf(x, y, font, colour, str);
}
int _ret;
function get_rumble_evil_ar()/*credits: sweet evil (extract)*/
{	
_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));

if (_ret > 10 && _ret < 90)
{
	return (_ret - AR_S);
}

return 0;	
}
function ol(){
combo_run (OLED_CS);
}
function doubletap (btnID){

if (get_brtime(btnID) <= 200 && p(btnID))
								    {
								      Pressed =1; notify (Pressed); 
								    }
    		else if (p(btnID))
    		{
								      Pressed =0;
								    }
			else if (Pressed == 1 && r(btnID))
									{
									 Pressed =0;
									}
				}
			
int bufferIndex;
int charIndex,digitIndex;
int font = 1;
int FONT_WIDTH = 1;
int FONT_HEIGHT = 1;
 
function NumberToString(f_val,f_digits) {
 
    bufferIndex = 1;  
    digitIndex = 10000;
	if(f_val < 0) {                     //--neg numbers
         putc_oled(bufferIndex,45);    //--add leading "-"
         bufferIndex += 1;
         f_val = abs(f_val);
	} 
	for(charIndex = 5; charIndex >= 1; charIndex--) {
	    if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++; 
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);   //--add ","
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    }   
    puts_oled(CenterX(bufferIndex - 1,font),CenterY(font),font,bufferIndex - 1,OLED_WHITE);    
} 
 
function CenterX(f_chars,f_font) {
    return (OLED_WIDTH / 2) - ((f_chars * FONT_STATS[f_font][FONT_WIDTH]) / 2);
}
///////////////////////////////////////////////////// 
 
 
function CenterY(f_size) {
	ol();
    return (OLED_HEIGHT / 2) - (FONT_STATS[f_size][FONT_HEIGHT] / 2);
}
////////////////////////////////////////////////////////////////
//  FindDigits(f_num)
//
//        return Number of Digits in Value Passed     
//
////////////////////////////////////////////////////////////////
function FindDigits(f_num) {
    f_num = abs(f_num);
    if(f_num / 1000 > 0) return 4;
    if(f_num /  100 > 0) return 3;
    if(f_num /   10 > 0) return 2;
    return 1;
}

/*
			╔════════════════════════════════════════════════════════════════════════════════════════╗    																			     ║
			║																						 ║
			║				 dP""b8 88""Yb 888888 .dP"Y8  dP""b8 888888 88b 88 .dP"Y8 				 ║
			║				dP   `" 88__dP 88__   `Ybo." dP   `" 88__   88Yb88 `Ybo."                ║
			║				Yb      88"Yb  88""   o.`Y8b Yb      88""   88 Y88 o.`Y8b                ║
 			║				 YboodP 88  Yb 888888 8bodP'  YboodP 888888 88  Y8 8bodP'                ║
 			║				 A  S i g n a t u r e  S c r i p t  B y  C r e s c e n s           	     ║
			║ 						 																 ║
			╚════════════════════════════════════════════════════════════════════════════════════════╝		
						    © CRESCENS FOR CRONUS ZEN, 2015-2021. ALL RIGHTS RESERVED.
*/