// GPC Online Library
// official_scottishtryhard_32bit_mw/cw/vanguard/warzone_v4.0_.gpc

/*				  _________                  __     __   .__         .__     ___________                  ___ ___                      .___
				 /   _____/  ____    ____  _/  |_ _/  |_ |__|  ______|  |__  \__    ___/_______  ___.__. /   |   \ _____   _______   __| _/
				 \_____  \ _/ ___\  /  _ \ \   __\\   __\|  | /  ___/|  |  \   |    |   \_  __ \<   |  |/    ~    \\__  \  \_  __ \ / __ | 
				 /        \\  \___ (  <_> ) |  |   |  |  |  | \___ \ |   Y  \  |    |    |  | \/ \___  |\    Y    / / __ \_ |  | \// /_/ | 
				/_______  / \___  > \____/  |__|   |__|  |__|/____  >|___|  /  |____|    |__|    / ____| \___|_  / (____  / |__|   \____ | 
				        \/      \/                                \/      \/                     \/            \/       \/              \/ 
										 
													________  ________   __________ .__   __   
													\_____  \ \_____  \  \______   \|__|_/  |_ 
													  _(__  <  /  ____/   |    |  _/|  |\   __\
													 /       \/       \   |    |   \|  | |  |  
													/______  /\_______ \  |______  /|__| |__|  
													       \/         \/         \/            	
															   _____      _______   
															  /  |  |     \   _  \  
															 /   |  |_    /  /_\  \ 
															/    ^   /    \  \_/   \
															\____   |  /\  \_____  /
															     |__|  \/        \/ 
/*
============================================================================================================================================
  Credits                                                                                           
============================================================================================================================================

	ScottishTryHard Version 4.0 - 32Bit GPC 
	Author  = Taylordrift21 
	Credits = DoGzTheFiGhTeR - DoNotAtMe - Batts - Excalibur - Swizzy - Noozbar - Fadexz - LegitCloudzzz 
/*
============================================================================================================================================
  Instructions - Please Read                                                                                            
============================================================================================================================================
								/*------------------------------- INSTRUCTIONS PLEASE READ ------------------------------------------
								=====================================================================================================
								Enter Mod Menu   							= HOLD ADS & OPTIONS  
								-----------------------------------------------------------------------------------------------------
								Exit Menu                                   = CIRCLE/B 
								-----------------------------------------------------------------------------------------------------
								Enter Edit Menu To Change Values            = CROSS/A 
								-----------------------------------------------------------------------------------------------------
								Exit Edit Menu To Mod Menu                  = CIRCLE/B
								-----------------------------------------------------------------------------------------------------
								Enable/Disable Drive Mode                   = HOLD FIRE & Double Tap Right / Press Square TO Disable
								-----------------------------------------------------------------------------------------------------
								Change Profiles In The Menu                 = TRIANGLE/Y
								-----------------------------------------------------------------------------------------------------
								Change Values In Edit Menu                  = HOLD ADS & LEFT OR RIGHT OR UP OR DOWN
								-----------------------------------------------------------------------------------------------------
								Turn Mods On/Off                            = PRESS UP / DOWN TO CYCLE TOGGLE OPTIONS IF APPLICABLE
								-----------------------------------------------------------------------------------------------------
								Navigate The Main Menu                      = PRESS UP / DOWN 
								-----------------------------------------------------------------------------------------------------
								Navigate Mod Menu & Edit Menu               = PRESS LEFT / RIGHT 
								-----------------------------------------------------------------------------------------------------
								Choosing Buttons For Profiles/QuickToggles  = HOLD ADS & PRESS LEFT OR RIGHT 
								-----------------------------------------------------------------------------------------------------
								====================================================================================================*/
			
/*
/*
========================================================================================================================================
 Menu String Lists 
========================================================================================================================================
*/
const string MainMenuId[]      = {"Antirecoil","Aim Assist","Fire Mods","Misc Mods","HGun Settings","Mod Activation","Controller Config","Profiles","Quick Toggles","Custom Name",""};
const string profileId []      = {"Primary","Secondary","Custom Profile",""};
const string titleScreen[]     = {"ScottishTryHard","V4.0",""};
const string miscStrings[]     = {"All Profiles","AA Type Disabled","Controller Config","Prim - Sec","3rd Profile","QuickToggles","For Rumble AR","Handgun Mode","Drive Mode","Activated","Deactivated","Saved",""}; 
/*
========================================================================================================================================
 Menu Variables (Not Used For Index) 
========================================================================================================================================
*/
int mainMenu,mainMenuIdx,profileIdx,modMenu,editMenu;
int displayTitle = TRUE;
int blankScreen,screenSaver;
int i;
int updateDisplay;

const uint8 mainRange[][] = { 
{ 0 , 1 , 1 },// Antirecoil 
{ 2 , 5 , 1 },// Aim Assist
{ 6 ,11 , 1 },// Fire Mods
{12 ,20 , 1 },// Misc Mods
{21 ,21 , 1 },// SniperMode
{22 ,30 , 1 },// Mod Activation
{31 ,37 , 1 },// Controller
{38 ,40 , 1 },// Profiles
{41 ,46 , 1 },// QuickToggles 
{47 ,47 , 1 } // Custom Name
}
const string modNames  []      = {
"Standard AR","Advanced Step AR",
"Taylor Assist","Batts Assist","Strafe Assist","HeadShot Assist",
"Rapid Fire","Burst Fire","Cancel Reload","Crouch Shot","Jump Shot","Insta Drop",
"Slide Cancel","BunnyHop","Fast Melee","Enemy Ping","Custom Sens","HoldBreath","Quick Scope","Auto Aim","Vm Speed",
"HandGun Mode", 
"Standard AR","Advanced Step AR","Taylor Assist","Batts Assist","Rapid Fire","Burst Fire","Crouch Shot","Jump Shot","Insta Drop",
"Button Layout","Stick Layout","Block Rumble","Button Remap 1","Button Remap 2","Unmap Button 1","Unmap Button 2",
"Profile Btn","Resync Btns","Custom Profile",
"Rapid Fire","Burst Fire","Jump Shot","HoldBreath","HandGun Mode","RecoilOnTheFly",
"Custom Name",
""};
const uint8 modIdxRange[][] = { 
//ValRangeMin- ValRangeMax - Editable - Profile - Array - Index\\5
{     0      ,      1      ,     1    ,    1    ,   0   ,    0 },//Standard AR 
{	  2      ,      9      ,     1    ,    1    ,   1   ,    0 },//Advanced Step AR
{	 10      ,     22      ,     1    ,    1    ,   2   ,    0 },//TaylorAssist
{	 23      ,     24      ,     1    ,    1    ,   3   ,    0 },//Batts AA
{	 25      ,     26      ,     1    ,    0    ,   3   ,    0 },//Strafe Assist
{	 27      ,     28      ,     1    ,    0    ,   3   ,    0 },//HeadShot Assist
{	 29      ,     29      ,     1    ,    1    ,   3   ,    1 },//Rapid Fire
{	 30      ,     32      ,     1    ,    1    ,   4   ,    2 },//Burst Fire
{	 33      ,     33      ,     1    ,    0    ,   3   ,    0 },//Cancel Reload
{    34      ,     34      ,     1    ,    1    ,   3   ,    1 },//Crouch Shot	  
{	  0      ,      0      ,     0    ,    1    ,   3   ,    1 },//Jump Shot
{	  0      ,      0      ,     0    ,    1    ,   3   ,    1 },//Insta Drop
{	 35      ,     35      ,     1    ,    0    ,   5   ,    0 },//Slide Cancel
{	  0      ,      0      ,     0    ,    0    ,  18   ,    0 },//BunnyHop
{	  0      ,      0      ,     0    ,    1    ,   3   ,    0 },//FastMelee
{	 36      ,     36      ,     1    ,    0    ,   3   ,    0 },//Enemy Ping
{    37      ,     40      ,     1    ,    0    ,   3   ,    0 },//Custom Sens
{	  0      ,      0      ,     0    ,    1    ,   3   ,    0 },//HoldBreath
{	 41      ,     41      ,     1    ,    1    ,   6   ,    0 },//QuickScopeDelay
{	  0      ,      0      ,     0    ,    1    ,   3   ,    0 },//AutoAim
{	  0      ,      0      ,     0    ,    1    ,  19   ,    0 },//VmSpeed
{    42      ,     43      ,     1    ,    1    ,   3   ,    1 },//SniperMode
{	  0      ,      0      ,     0    ,    1    ,   7   ,    0 },//ModActivation 1
{	  0      ,      0      ,     0    ,    1    ,   7   ,    0 },//ModActivation 2
{	  0      ,      0      ,     0    ,    1    ,   8   ,    0 },//ModActivation 3
{	  0      ,      0      ,     0    ,    1    ,   8   ,    0 },//ModActivation 4
{	  0      ,      0      ,     0    ,    1    ,   9   ,    0 },//ModActivation 5
{	  0      ,      0      ,     0    ,    1    ,   9   ,    0 },//ModActivation 6
{	  0      ,      0      ,     0    ,    1    ,  10   ,    0 },//ModActivation 7
{	  0      ,      0      ,     0    ,    1    ,  10   ,    0 },//ModActivation 8
{	  0      ,      0      ,     0    ,    1    ,  11   ,    0 },//ModActivation 9
{	  0      ,      0      ,     0    ,    2    ,  12   ,    0 },//BlockRumble
{	  0      ,      0      ,     0    ,    2    ,  13   ,    0 },//ButtonLayout
{	  0      ,      0      ,     0    ,    2    ,   3   ,    0 },//StickLayout
{	  0      ,      0      ,     0    ,    2    ,  14   ,   14 },//ButtonRemap()
{	  0      ,      0      ,     0    ,    2    ,  14   ,   14 },//ButtonRemap()
{	  0      ,      0      ,     0    ,    2    ,  15   ,   15 },//ButtonUnmap()
{	  0      ,      0      ,     0    ,    2    ,  15   ,   15 },//ButtonUnmap()
{	  0      ,      0      ,     0    ,    3    ,  17   ,    0 },//ProfileBtn
{	  0      ,      0      ,     0    ,    3    ,  16   ,   17 },//Resync
{	  0      ,      0      ,     0    ,    4    ,  16   ,   17 },//CustomProfile
{	  0      ,      0      ,     0    ,    5    ,  16   ,   17 },//QuickToggleBtns0
{	  0      ,      0      ,     0    ,    5    ,  16   ,   17 },//QuickToggleBtns1
{	  0      ,      0      ,     0    ,    5    ,  16   ,   17 },//QuickToggleBtns2
{	  0      ,      0      ,     0    ,    5    ,  16   ,   17 },//QuickToggleBtns3
{	  0      ,      0      ,     0    ,    5    ,  16   ,   17 },//QuickToggleBtns4
{	  0      ,      0      ,     0    ,    6    ,  16   ,   17 } //QuickToggleBtns5
}
const string valNames [] = {
"Vertical","Horizontal",
"V Start","V Mid","V End","V Time","Horiz Start","Horiz Mid","Horiz End","Horiz Time",
"AA Type","Choose Shape","Shape Direction","Ads Speed","Speed","Radius","Boost On Fire","Invert Boost","Boost Str","Boost Spd","Taylor Tracking","Tracking Size","Tracking Speed",
"Sticky Size","Sticky Time",
"Active Time","Strafe Strength",
"HeadShot Strength","Hold Time",
"Rounds/Sec",
"Hold Time","Wait Time","Trigger Pressure",
"Reload Time",
"CrouchSpeed",
"Slide Delay",
"Ping Delay",
"Generel","Ads","Fire","AdsFire",
"QuickScope Delay",
"Rounds/Sec","AR VertStrength",
""};
const int16 valuesRange[][] = {
// Min - Max - IncrementMin - IncrementMax - Profile - ScaleTime 
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Vertical Strength
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Horizontal Strength
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Vertical Start
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Vertical Mid 
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Vertical End
{   1  ,  99 ,       1      ,       10     ,    1    ,   1   },//Vertical Time
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Horizontal Start
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Horizontal Mid
{ -99  ,  99 ,       1      ,       10     ,    1    ,   0   },//Horizontal End
{   1  ,  99 ,       1      ,       10     ,    1    ,   1   },//Horizontal Time
{   0  ,   3 ,       1      ,        1     ,    1    ,   0   },//AA Type
{   0  ,  12 ,       1      ,        1     ,    1    ,   0   },//AA Shape
{ 	0  ,   1 ,       1      ,        1     ,    1    ,   0   },//AA Shape Direction
{ 	1  ,  99 ,       1      ,       10     ,    1    ,   0   },//ADS Speed
{   1  ,  99 ,       1      ,       10     ,    1    ,   0   },//Speed
{ 	1  ,  99 ,       1      ,       10     ,    1    ,   0   },//Radius
{   0  ,   1 ,       1      ,        1     ,    1    ,   0   },//BoostOnFire Toggle
{ 	0  ,   1 ,       1      ,        1     ,    1    ,   0   },//InvertBoost Toggle
{ 	1  ,  40 ,       1      ,       10     ,    1    ,   0   },//Boost Strength
{   1  ,  40 ,       1      ,       10     ,    1    ,   0   },//Boost Speed
{   0  ,   1 ,       1      ,        1     ,    1    ,   0   },//Tracking Toggle
{   1  ,   8 ,       1      ,        2     ,    1    ,   0   },//Tracking Strength
{ 	1  ,   8 ,       1      ,        2     ,    1    ,   0   },//Tracking Speed
{ 	1  ,  99 ,       1      ,       10     ,    1    ,   0   },//StickySize
{ 	1  ,  99 ,       1      ,       10     ,    1    ,   0   },//StickyTime
{   1  ,2000 ,      10      ,      100     ,    0    ,   0   },//ActiveTime
{ 	1  ,  99 ,       1      ,       10     ,    0    ,   0   },//StrafeSize
{ 	1  ,  99 ,       1      ,       10     ,    0    ,   0   },//HeadShotStrength
{ 	1  ,2000 ,      10      ,      100     ,    0    ,   0   },//HeadShotHold

{ 	1  ,  25 ,       1      ,       10     ,    1    ,   0   },//Rounds/Sec
{   1  , 990 ,      10      ,      100     ,    0    ,   0   },//BfHoldTime
{ 	1  , 990 ,      10      ,      100     ,    0    ,   0   },//BfWaitTime
{ 	1  , 100 ,       1      ,       10     ,    0    ,   0   },//BfRelease
{   1  ,5000 ,      10      ,      100     ,    0    ,   0   },//ReloadTime
{ 	1  ,  99 ,       1      ,       10     ,    0    ,   0   },//CrouchSpeed
{ 	1  , 200 ,       1      ,       10     ,    0    ,   0   },//SlideDelay
{ 	1  ,5000 ,      10      ,      100     ,    0    ,   0   },//PingDelay
{   1  , 327 ,       1      ,       10     ,    0    ,   0   },//GenSens
{ 	1  , 327 ,       1      ,       10     ,    0    ,   0   },//AdsSens
{ 	1  , 327 ,       1      ,       10     ,    0    ,   0   },//FireSens
{   1  , 327 ,       1      ,       10     ,    0    ,   0   },//AdsFireSens
{   1  ,5000 ,      10      ,      100     ,    0    ,   0   },//QuickScopeDelay
{ 	1  ,  25 ,       1      ,       10     ,    7    ,   0   },//Rounds/Sec HG
{ -99  ,  99 ,       1      ,       10     ,    7    ,   0   } //SniperVertical
}
int modIdx;
int modNameIdx;
int ToggleAntirecoil[3];
int ToggleProgressive[3];
int ToggleTaylorAssist[3];
int ToggleBattsAssist[3];
int StrafeAssist[3];
int HeadShotAssist[3];
int ToggleRapidFire[3];
int ToggleBurstFire[3];
int ToggleCancelReload;
int ToggleCrouchShot[3];
int ToggleJumpShot[3];
int ToggleDropShot[3];
int ToggleCancelSlide;
int ToggleBunnyHop;
int ToggleFastMelee[3];
int ToggleEnemyPing;
int ToggleTaylorSens;
int ToggleHoldBreath[3];
int ToggleQuickScope[3];
int AutoAim[3]; 
int vmSpeed;
int ToggleSniperMode[3];
int standardARFireType[3];
int progressiveARFireType[3];
int taylorFireType[3];
int battsFireType[3];
int rapidFireType[3];
int burstFireType[3]; 
int crouchShotFireType[3];
int jumpShotFireType[3];
int dropShotFireType[3]; 
int ToggleBlockRumble;
int Buttons;
int Sticks;
int singleProfileBtnIdx;
/*
===========================
 Edit Menu 
===========================
*/
int valNameIdx,valIdx;
int VerticalStrength[3];
int HorizontalStrength[3];
int VerticalStart[3];
int VerticalMid[3];
int VerticalEnd[3];
int VerticalTime[3];
int HorizontalStart[3];
int HorizontalMid[3];
int HorizontalEnd[3];
int HorizontalTime[3];
int ToggleAAType[3]; 
int TaylorShapes[3];
int ShapeDirection[3];
int AdsSpeed[3];
int TaylorAngle[3];
int TaylorRadius[3];
int ToggleBoostFire[3];
int BoostReducer[3];
int TaylorPBoostStr[3];
int TaylorABoostSpd[3];
int TaylorTracking[3];
int TrackingSize[3];
int TrackingSpeed[3];
int AimAssistSize[3];
int AimAssistTime[3];
int StrafeActiveTime;
int StrafeSize; 
int HeadShotStrength;
int HeadShotHoldTime;
int RateOfFire[3];
int BurstFireHold;
int BurstFireWait;
int BurstFireRelease;
int ReloadTime;
int CrouchSpeed; 
int SlideDelay;
int PingDelay; 
int GeneralSens
int AdsSens;
int FireSens;
int AdsFireSens;
int QuickScopeDelay;
int HandGunRPS;
int HandGunVertical;

/*
================================================================================
 Variables Used Within The Code In The Main Section 
================================================================================
*/
int HandGunRoF;
int SmartRumble,AntirecoilStrength;
int HoldTime,RestTime;
int FireRF;
int FirstShotBeforeReload,ReloadInProgress,MaxReloadTime;
int GenStr;
int CompleteTime;
int Time;
int AntirecoilStart,AntirecoilMid,AntirecoilEnd,StrafeAngle;
int HybridStart;
int HorizTime;
int SelectedProfileIdx,CustomProfile;
int Tracking,Tracker1,Tracker2;
int CosAngle,SinAngle;
int angleVersionFive;
int BoostedAimAssistv4,AimAssistBoostv4,BoostAnglev4; // v4 && v5 AimAssist 
int RX,RY;
int SpiralPosition1,InnerSpiral,OuterSpiral,SpiralPosition2,Position,SpeedAngle,AngleDirection;
int x,y,inc;
int CycleRefresh;
int TimeInterval = 4;
int PolarStart	 = 1000;
int PolarMid   	 = 1200;
int PolarAimAssist,PolarAimAssistv1;
define False     = FALSE;
define True      = TRUE; 
int driveMode;
int HandGunVStrength;
int Angle;
int displayOnTheFly;
int update;
int BunnyGoHop; 

define yDelay = 50;

init {  
 	InitializeShapeChange();
 	Load();
 } 
main { 
	
	Buttons(Buttons);
	ActivateAllButtons(); // This function is called for Button choices you select via Menu 
	RemapButtonsConfig(); // This function is called for remap buttons, where you select buttons via the menu 
	UnmapButtonsConfig(); // This function is called for the un map buttons, where you select buttons via the menu
	ControllerRSLS(Sticks);
	if(update){ 
		getAdminValues();
	} 
	if(get_console() == PIO_PS4)
    {
        if(get_controller() != PIO_PS4) // If not PS4 controller:
        {
            if(get_ival(PS4_SHARE)) // View
            {
                if(get_ival(PS4_R3)) // RS + View =  ScreenShot
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
                else // View only = PS4_TOUCH
                {
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE, 0);
                }
            }
        }
    }
    else if(get_console() == PIO_XB360) // If XBOX console
    {
        if(get_controller() == PIO_PS4) // If PS4 controller:
            swap(PS4_TOUCH, PS4_SHARE);
    }
	if(get_ival(Ads)){ 
		if(event_press(PS4_OPTIONS)){ 
			getMenuStatus(TRUE,TRUE,FALSE,FALSE,FALSE)
			modNameIdx = 0;
			cls_oled(OLED_BLACK);
			combo_run(rumbleOn);
			InitializeShapeChange();
			
			if(!mainMenu){ 
				getMenuStatus(FALSE,FALSE,FALSE,FALSE,TRUE)
			} 
		}
		set_val(PS4_OPTIONS,0);
	} 
    if(!displayTitle){ 
    	if(mainMenu || modMenu || editMenu){ 
    		led(profileIdx);
    		menuScroll();
    		vm_tctrl(0);	
    	} 
		if(mainMenu){ 
			mainMenuIdx = menuNavigation(mainMenuIdx,0,9);	
			
			if(update){ 
				getAdminValues();
			} 
		}
		if(modMenu){ 	
			modNameIdx = menuNavigation(modNameIdx,mainRange[mainMenuIdx][0],mainRange[mainMenuIdx][1]);
			modIdx = -1;
			ToggleAntirecoil     [profileIdx]= toggleSwitch( ToggleAntirecoil     [profileIdx] ); 
			ToggleProgressive    [profileIdx]= toggleSwitch( ToggleProgressive    [profileIdx] );
			ToggleTaylorAssist   [profileIdx]= toggleSwitch( ToggleTaylorAssist   [profileIdx] );
			ToggleBattsAssist    [profileIdx]= toggleSwitch( ToggleBattsAssist    [profileIdx] );
			StrafeAssist         [profileIdx]= toggleSwitch( StrafeAssist         [profileIdx] );
		    HeadShotAssist       [profileIdx]= toggleSwitch( HeadShotAssist       [profileIdx] );
			ToggleRapidFire      [profileIdx]= toggleSwitch( ToggleRapidFire      [profileIdx] );
			ToggleBurstFire      [profileIdx]= toggleSwitch( ToggleBurstFire      [profileIdx] );
			ToggleCancelReload               = toggleSwitch( ToggleCancelReload                );
			ToggleCrouchShot     [profileIdx]= toggleSwitch( ToggleCrouchShot     [profileIdx] );
			ToggleJumpShot       [profileIdx]= toggleSwitch( ToggleJumpShot       [profileIdx] );
			ToggleDropShot       [profileIdx]= toggleSwitch( ToggleDropShot       [profileIdx] );
			ToggleCancelSlide                = toggleSwitch( ToggleCancelSlide                 );
			ToggleBunnyHop                   = toggleSwitch( ToggleBunnyHop       			   );
			ToggleFastMelee      [profileIdx]= toggleSwitch( ToggleFastMelee      [profileIdx] );
			ToggleEnemyPing                  = toggleSwitch( ToggleEnemyPing                   );
			ToggleTaylorSens                 = toggleSwitch( ToggleTaylorSens                  );
			ToggleHoldBreath     [profileIdx]= toggleSwitch( ToggleHoldBreath     [profileIdx] );
			ToggleQuickScope     [profileIdx]= toggleSwitch( ToggleQuickScope     [profileIdx] );
			AutoAim              [profileIdx]= toggleSwitch( AutoAim              [profileIdx] );
			vmSpeed						     = toggleSwitch( vmSpeed              			   );
			ToggleSniperMode     [profileIdx]= toggleSwitch( ToggleSniperMode     [profileIdx] );
			standardARFireType   [profileIdx]= toggleSwitch( standardARFireType   [profileIdx] );
			progressiveARFireType[profileIdx]= toggleSwitch( progressiveARFireType[profileIdx] );
			taylorFireType       [profileIdx]= toggleSwitch( taylorFireType       [profileIdx] );
			battsFireType        [profileIdx]= toggleSwitch( battsFireType        [profileIdx] );
			rapidFireType        [profileIdx]= toggleSwitch( rapidFireType        [profileIdx] );
			burstFireType        [profileIdx]= toggleSwitch( burstFireType        [profileIdx] );
			crouchShotFireType   [profileIdx]= toggleSwitch( crouchShotFireType   [profileIdx] );
			jumpShotFireType     [profileIdx]= toggleSwitch( jumpShotFireType     [profileIdx] );
			dropShotFireType     [profileIdx]= toggleSwitch( dropShotFireType     [profileIdx] );
			Buttons                          = toggleSwitch( Buttons                           );
			Sticks                           = toggleSwitch( Sticks                            );
			ToggleBlockRumble                = toggleSwitch( ToggleBlockRumble                 );
			ButtonConfig(0)
			ButtonConfig(1)
			UnmapBtnIdx[0]                   = toggleSwitch( UnmapBtnIdx[0]                    );
			UnmapBtnIdx[1]                   = toggleSwitch( UnmapBtnIdx[1]                    );
		    singleProfileBtnIdx              = toggleSwitch( singleProfileBtnIdx               );
			ButtonActivation(0)
			ButtonActivation(1)
			ButtonActivation(2)
			ButtonActivation(3)
			ButtonActivation(4)
			ButtonActivation(5)
			ButtonActivation(6)
			ButtonActivationAR(7)	
			NameChange();
			
			if(update){ 
				getAdminValues();
			} 
		} 
		if(editMenu){
			valNameIdx = menuNavigation(valNameIdx,modIdxRange[modNameIdx][0],modIdxRange[modNameIdx][1]);
			valIdx = -1; 
			VerticalStrength  [profileIdx] = editValues( VerticalStrength  [profileIdx] );
			HorizontalStrength[profileIdx] = editValues( HorizontalStrength[profileIdx] );
			VerticalStart     [profileIdx] = editValues( VerticalStart     [profileIdx] );
			VerticalMid       [profileIdx] = editValues( VerticalMid       [profileIdx] );
			VerticalEnd       [profileIdx] = editValues( VerticalEnd       [profileIdx] );
			VerticalTime      [profileIdx] = editValues( VerticalTime      [profileIdx] );
			HorizontalStart   [profileIdx] = editValues( HorizontalStart   [profileIdx] );
			HorizontalMid     [profileIdx] = editValues( HorizontalMid     [profileIdx] );
			HorizontalEnd     [profileIdx] = editValues( HorizontalEnd     [profileIdx] );
			HorizontalTime    [profileIdx] = editValues( HorizontalTime    [profileIdx] );
			ToggleAAType      [profileIdx] = editSwitch( ToggleAAType      [profileIdx] );
			TaylorShapes      [profileIdx] = editSwitch( TaylorShapes      [profileIdx] );
			ShapeDirection    [profileIdx] = editSwitch( ShapeDirection    [profileIdx] );
			AdsSpeed          [profileIdx] = editValues( AdsSpeed          [profileIdx] );
			TaylorAngle       [profileIdx] = editValues( TaylorAngle       [profileIdx] );
			TaylorRadius      [profileIdx] = editValues( TaylorRadius      [profileIdx] );
			ToggleBoostFire   [profileIdx] = editSwitch( ToggleBoostFire   [profileIdx] );
			BoostReducer      [profileIdx] = editSwitch( BoostReducer      [profileIdx] );
			TaylorPBoostStr   [profileIdx] = editValues( TaylorPBoostStr   [profileIdx] );
			TaylorABoostSpd   [profileIdx] = editValues( TaylorABoostSpd   [profileIdx] );
			TaylorTracking    [profileIdx] = editSwitch( TaylorTracking    [profileIdx] );
			TrackingSize      [profileIdx] = editValues( TrackingSize      [profileIdx] );
			TrackingSpeed     [profileIdx] = editValues( TrackingSpeed     [profileIdx] );
			AimAssistSize     [profileIdx] = editValues( AimAssistSize     [profileIdx] );
			AimAssistTime     [profileIdx] = editValues( AimAssistTime     [profileIdx] );
			StrafeActiveTime               = editValues( StrafeActiveTime               );
			StrafeSize                     = editValues( StrafeSize                     );
			HeadShotStrength               = editValues( HeadShotStrength               );
			HeadShotHoldTime               = editValues( HeadShotHoldTime               );
			RateOfFire        [profileIdx] = editValues( RateOfFire        [profileIdx] );
			BurstFireHold                  = editValues( BurstFireHold                  );
			BurstFireWait                  = editValues( BurstFireWait                  );
			BurstFireRelease               = editValues( BurstFireRelease               );
			MaxReloadTime                  = editValues( MaxReloadTime                  );
			CrouchSpeed                    = editValues( CrouchSpeed                    );
			SlideDelay                     = editValues( SlideDelay                     );
			PingDelay                      = editValues( PingDelay                      );
			GeneralSens                    = editValues( GeneralSens                    );
			AdsSens                        = editValues( AdsSens                        );
			FireSens                       = editValues( FireSens                       );
			AdsFireSens                    = editValues( AdsFireSens                    );
			QuickScopeDelay                = editValues( QuickScopeDelay                );
			HandGunRPS                     = editValues( HandGunRPS                     );
			HandGunVertical                = editValues( HandGunVertical                );
		
			
			if(update){ 
		     	getAdminValues();
			} 
		}
	}
	if(updateDisplay){
		
		if(mainMenu || modMenu || editMenu){ 
			rect_oled(2,3,127,50,1,0);
			rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
			line_oled(0, 50,127 , 50, 1, 1); 
		}
		if(modMenu || editMenu) {
			line_oled(0,28,127 , 28, 1, 1); 
		}
        if(editMenu){ 
        	print(centerPosition(getStringLength(valNames[valNameIdx]),OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,valNames[valNameIdx]);
        	
        	if(valuesRange[valNameIdx][4] == 1){ 
        		print(centerPosition(getStringLength(profileId[profileIdx]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , profileId[profileIdx]);
        	} 
        	if(valuesRange[valNameIdx][4] == 7){
        		print(centerPosition(getStringLength(miscStrings[7]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[7]);
        	} 
        } 	
        else if(modMenu) { 
        	print(centerPosition(getStringLength(modNames[modNameIdx]) ,OLED_FONT_SMALL_WIDTH), 4  ,OLED_FONT_SMALL , OLED_WHITE , modNames[modNameIdx]);
        	if(modIdxRange[modNameIdx][3] == 0){
        		print(centerPosition(getStringLength(miscStrings[0]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[0]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 1){ 
        		print(centerPosition(getStringLength(profileId[profileIdx]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , profileId[profileIdx]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 2){ 
        		print(centerPosition(getStringLength(miscStrings[2]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[2]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 3){ 
        		print(centerPosition(getStringLength(miscStrings[3]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[3]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 4){ 
        		print(centerPosition(getStringLength(miscStrings[4]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[4]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 5){ 
        		print(centerPosition(getStringLength(miscStrings[5]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[5]);
        	} 
        	if(modIdxRange[modNameIdx][3] == 6){ 
        		print(centerPosition(getStringLength(miscStrings[6]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , miscStrings[6]);
        	} 
        	if(modNameIdx == 47){ 
        		DisplayAscii(Y);
        	} 
        }
        else {
       
	        rect_oled(2,3,127,50,1,0);
			rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
			rect_oled(2,16,125,18,1,1); 
			line_oled(0, 50,127 , 50, 1, 1);
			
			displayMainIdx(0,9,1);
			displayMainIdx(1,0,2);
			displayMainIdx(2,1,3);
			displayMainIdx(3,2,4);
			displayMainIdx(4,3,5);
			displayMainIdx(5,4,6);
			displayMainIdx(6,5,7);
			displayMainIdx(7,6,8);
			displayMainIdx(8,7,9);
			displayMainIdx(9,8,0);
			
		}
		updateDisplay = FALSE;
	}
	if(!mainMenu && !modMenu && !editMenu){ 
		if(displayTitle){ 
			cls_oled(OLED_BLACK);
	   	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
	   	    print(centerPosition(getStringLength(titleScreen[0]),OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,titleScreen[0]);
	   	    print(centerPosition(getStringLength(titleScreen[1]),OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,titleScreen[1]);
	   	    print(centerPosition(getStringLength(profileId[profileIdx]),OLED_FONT_SMALL_WIDTH), 50 ,OLED_FONT_SMALL , OLED_WHITE , profileId[profileIdx]);
	   	    DisplayAscii(Y2);
	   	    displayTitle = FALSE;
	   	    screenSaver  = TRUE;
	   	}   
	    if(screenSaver){  
    		blankScreen += get_rtime();
    	
			if(blankScreen >= 10000)
			{
				cls_oled(OLED_BLACK);
				blankScreen = 0;
				screenSaver = FALSE;
	    	} 
	    }
	    if(!CustomProfile){
	    	if(ActivateIndividualButton){ 
	    		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])){
					SelectedProfileIdx =! SelectedProfileIdx;
					CustomProfile = FALSE;
	
					if(modMenu)
						updateDisplay = TRUE;
					else
						displayTitle = TRUE;
	        	}	
	        	if(!CustomProfile){ 
	        	
	        		if(SelectedProfileIdx) 
	        	   		profileIdx = 1;
	        		else
	        	   		profileIdx = 0; 
				} 
	    		if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
	    			set_val(ActivatePressButton[0], 0);
	  		}
	  	} 
	    if(ActivateHoldButton[1]){
	    	if(get_ival(ActivateHoldButton[1])){
	        	if(event_press(ActivatePressButton[1])){
	             	profileIdx = 2; 
		       	    CustomProfile =! CustomProfile;
		       	    
		       	    if(modMenu) 
	    				updateDisplay = TRUE; 
	        		else
	            		displayTitle = TRUE;
	            		
	            	if(!CustomProfile) 
	            	{
	            		if(SelectedProfileIdx) 
	            	   		profileIdx = 1;
	            		else
	            	   		profileIdx = 0; 
	    			}
	    		} 
	       	}           
	       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1]))
	    		set_val(ActivatePressButton[1], 0);   
	   	} 
	   	led(profileIdx);
	   	
	   	if(ToggleBurstFire[profileIdx] == 1  || burstFireType[profileIdx] == 1) 
    		deadzone(Ads,Fire,NOT_USE,NOT_USE); 
    	else
    		deadzone(Ads,Fire,99,99); 
    	
    	if(ToggleBlockRumble){
			block_rumble();
		}
	   	if(get_ival(Fire)){
			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !mainMenu && !modMenu && !editMenu){
		        driveMode = TRUE; 
		        combo_run(DriveMode);
    	    }
    	    set_val(PS4_RIGHT,0);
    	} 
    	if(driveMode){
			combo_run(Blink);
			LedOn  = 150;
			LedOff = 300;
			
			if(event_press(PS4_SQUARE)){
				driveMode = FALSE;
				combo_run(driveModeOff); 
				combo_run(rumbleOff); 
    		} 
    	} 
 
	    RemapButtons(ActiveButtonRemap[0],RemapButtonActive[0]);
    	RemapButtons(ActiveButtonRemap[1],RemapButtonActive[1]);
    	UnmapButtonID(UnmapButton[0])
    	UnmapButtonID(UnmapButton[1])
    	
    	if(!driveMode){ 
    	
    		ToggleRapidFire [profileIdx]  = QuickToggleMods(ActivateHoldButton[2] , ActivatePressButton[2]  ,ToggleRapidFire [profileIdx],6 ,1);
    		ToggleBurstFire [profileIdx]  = QuickToggleMods(ActivateHoldButton[3] , ActivatePressButton[3]  ,ToggleBurstFire [profileIdx],7 ,modIdxRange[modNameIdx][5]);
			ToggleJumpShot  [profileIdx]  = QuickToggleMods(ActivateHoldButton[4] , ActivatePressButton[4]  ,ToggleJumpShot  [profileIdx],10,1);
			ToggleHoldBreath[profileIdx]  = QuickToggleMods(ActivateHoldButton[5] , ActivatePressButton[5]  ,ToggleHoldBreath[profileIdx],17,1); 
			ToggleSniperMode[profileIdx]  = QuickToggleMods(ActivateHoldButton[6] , ActivatePressButton[6]  ,ToggleSniperMode[profileIdx],21,1);
    		
			if(vmSpeed){
				if(vmSpeed == 0) vm_tctrl( 0);	
			    if(vmSpeed == 1) vm_tctrl(-2);
			    if(vmSpeed == 2) vm_tctrl(-4);
			   	if(vmSpeed == 3) vm_tctrl(-6);
			} 
			
    		if(ToggleSniperMode[profileIdx] == 1){
	        	LedBlink(1300,500);
	        	HandGunVStrength = HandGunVertical;
	        	HandGunRoF       = HandGunRPS;
    		}
    		if(!ToggleSniperMode[profileIdx] == 1){
    			HandGunVStrength   = VerticalStrength[profileIdx];
    			HandGunRoF         = RateOfFire[profileIdx];
       		}
       		if(get_ival(Ads)){
       			if(event_press(ActivatePressButton1[7])){
       				VerticalStrength[profileIdx] += 2; 
       				if(VerticalStrength[profileIdx] > 99) VerticalStrength[profileIdx] = -99; 
       				displayOnTheFly = TRUE;
       			}
       			if(event_press(ActivatePressButton[7])) 
       			{
       				VerticalStrength[profileIdx] -= 2; 
       				if(VerticalStrength[profileIdx] < -99) VerticalStrength[profileIdx] = 99; 
       				displayOnTheFly = TRUE;
       			}
       			set_val(ActivatePressButton1[7],0); set_val(ActivatePressButton[7],0);
       		}
       		if(event_release(ActivatePressButton1[7]) ||  event_release(ActivatePressButton[7]))
			{
				screenSaver = TRUE;
			}
			if(displayOnTheFly) {
				DisplayAR();
				displayOnTheFly = FALSE;
			}
       		if(ToggleAntirecoil[profileIdx] == 1 || ToggleSniperMode[profileIdx] == 1) { 
				if(antirecoilActivationLegRum() || AutoAim && get_ival(Fire)){
					offset(AimRY,HandGunVStrength);
					offset(AimRX,HorizontalStrength[profileIdx]);
				} 
			}
			if(ToggleAntirecoil[profileIdx] == 2) { 
				if(antirecoilActivationLegRum() || AutoAim && get_ival(Fire)){
					SmartRumble = get_rumble(RumbleToUse());
					if(SmartRumble > 10 && SmartRumble < 90){ 
						AntirecoilStrength = HandGunVStrength + SmartRumble / 2; 
					} 
					if(SmartRumble < 10){ 
						offset(AimRY,HandGunVStrength);
						offset(AimRX,HorizontalStrength[profileIdx]);
					}else{ 
						offset(AimRY,AntirecoilStrength);
						offset(AimRX,HorizontalStrength[profileIdx]);
					}
				}
			}
			if(!ToggleSniperMode[profileIdx] == 1){ 
				if(ToggleProgressive[profileIdx] == 1 || ToggleProgressive[profileIdx] == 2 || ToggleProgressive[profileIdx] == 3) { 
		    
				    CompleteTime = (VerticalTime[profileIdx]   * 100) / 3;
				    HorizTime    = (HorizontalTime[profileIdx] * 100) / 3;
				   
					if(antirecoilActivationProg() || AutoAim && get_ival(Fire)){
				        SmartRumble = get_rumble(RumbleToUse());
				        
				        Time += get_rtime();
				        
				        if(ToggleProgressive[profileIdx] == 2) { 
					        if(SmartRumble > 10 && SmartRumble < 90){ 
						        AntirecoilStart = VerticalStart[profileIdx] + SmartRumble / 2;
						        AntirecoilMid   = VerticalMid  [profileIdx] + SmartRumble / 2;
						        AntirecoilEnd   = VerticalEnd  [profileIdx] + SmartRumble / 2;
					        }
					    }
					    if(ToggleProgressive[profileIdx] == 3) { 
					        if(SmartRumble > 10 && SmartRumble < 90){ 
					        	HybridStart = VerticalStart[profileIdx] + SmartRumble / 2;
					        } 
					    } 
				        if(Time < CompleteTime){ 
				        	if(ToggleProgressive[profileIdx] == 2 && SmartRumble < 10 || ToggleProgressive[profileIdx] == 1){ 
				            	 offset(PS4_RY,VerticalStart[profileIdx]);
				            }else{
				            	 offset(PS4_RY,AntirecoilStart);
				            }
				             if(ToggleProgressive[profileIdx] == 3){
				            	 offset(AimRY,HybridStart);
				            } 
				        } 
				        else if(Time < CompleteTime * 2 ){ 
				            if(ToggleProgressive[profileIdx] == 2 && SmartRumble < 10 || ToggleProgressive[profileIdx] == 1 || ToggleProgressive[profileIdx] == 3){ 
				            	offset(PS4_RY,VerticalMid[profileIdx]);
				            }else{
				            	offset(PS4_RY,AntirecoilMid);
				            } 
				        } 
				        else if(Time < CompleteTime * 3){ 
				    		if(ToggleProgressive[profileIdx] == 2 && SmartRumble < 10 || ToggleProgressive[profileIdx] == 1 || ToggleProgressive[profileIdx] == 3){ 
				    			offset(PS4_RY,VerticalEnd[profileIdx]);
				    		}else{ 
				            	offset(PS4_RY,AntirecoilEnd);
				            }     
				        }
				        if(Time >= VerticalTime[profileIdx] * 100){ 
				        	if(ToggleProgressive[profileIdx] == 2 && SmartRumble < 10 || ToggleProgressive[profileIdx] == 1 || ToggleProgressive[profileIdx] == 3){ 
				    			offset(PS4_RY,VerticalEnd[profileIdx]);
				    		}else{ 
				            	offset(PS4_RY,AntirecoilEnd);
				            }     
				        } 
				        if(Time < HorizTime){ 
				            offset(PS4_RX,HorizontalStart[profileIdx]);      
				        }  
				        else if(Time < HorizTime * 2 ) { 
				            offset(PS4_RX,HorizontalMid[profileIdx]);  
				        }  
				        else if(Time < HorizTime * 3){  
				            offset(PS4_RX,HorizontalEnd[profileIdx]);         
				        } 
				        if(Time >= HorizontalTime[profileIdx] * 100){
				        	offset(PS4_RX,HorizontalEnd[profileIdx]);
				        }      
				    } 
				    if(event_release(Fire)){ 
				    	Time            = 0;
				    	SmartRumble     = 0;
				    	AntirecoilStart = 0;
				    	AntirecoilMid   = 0;
				    	AntirecoilEnd   = 0;
				    	HybridStart     = 0;
		    		} 
				} 
			} 
			if(ToggleTaylorAssist[profileIdx] == 1 || ToggleTaylorAssist[profileIdx] == 2 || ToggleTaylorAssist[profileIdx] == 3  || ToggleTaylorAssist[profileIdx] == 4 || ToggleTaylorAssist[profileIdx] == 5 ){ 	// V1 && V6 										
				
				RX              = get_val(AimRX);
				RY              = get_val(AimRY); 
				Tracking        = (Tracking + TrackingSpeed[profileIdx]) % 360;
			
				GetAngle(TaylorShapes[profileIdx],angleVersionFive,TaylorRadius[profileIdx]);
				CycleRefresh    += get_rtime();
				
				if(ShapeDirection[profileIdx]){ 
			    	AngleDirection = (get_val(AimRX) > 0);
			    } 
			    if(TaylorTracking[profileIdx]){ 
					Tracker1 = (TrackingSize[profileIdx] * sin(Tracking)/100);
			        Tracker2 = (TrackingSize[profileIdx] * cos(Tracking)/100);
			    }    
				if(ToggleBoostFire[profileIdx] == 1 && get_ival(Fire)){ 
					if((abs(get_val(AimRX)) < 10) * (abs(get_val(AimRY)) < 10)) 
					    angleVersionFive += AdsSpeed[profileIdx] + BoostAnglev4;
				    else
					    angleVersionFive +=  TaylorAngle[profileIdx] + BoostAnglev4;
				}else{ 
					if((abs(get_val(AimRX)) < 10) * (abs(get_val(AimRY)) < 10)) 
					    angleVersionFive += AdsSpeed[profileIdx];
					else
					    angleVersionFive +=  TaylorAngle[profileIdx];
				} 
			    if(ToggleBoostFire[profileIdx] == 1){
					if(get_ival(Fire)){ 
						AimAssistBoostv4 = get_rumble(RumbleToUse());
						BoostAnglev4 =  TaylorABoostSpd[profileIdx];
		        		if(AimAssistBoostv4 > 10 && AimAssistBoostv4 < 90){  
				   			BoostedAimAssistv4  = (TaylorPBoostStr[profileIdx] + AimAssistBoostv4 / 6); 
			   			}
			   			if(BoostReducer[profileIdx]){ 
							if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
								GetAngle(TaylorShapes[profileIdx],angleVersionFive,TaylorRadius[profileIdx] + inv(TaylorPBoostStr[profileIdx]));
							}else{ 
						   	 	GetAngle(TaylorShapes[profileIdx],angleVersionFive,inv(BoostedAimAssistv4/2));
					   		} 
					   	}else{ 
					   		if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
								GetAngle(TaylorShapes[profileIdx],angleVersionFive,TaylorRadius[profileIdx] + TaylorPBoostStr[profileIdx]);
							}else{ 
					   	 		GetAngle(TaylorShapes[profileIdx],angleVersionFive,BoostedAimAssistv4);
					   	 	} 
				   		} 
			   		}	
				   	if(event_release(Fire)){ 
				   		BoostedAimAssistv4 = 0;
				   		AimAssistBoostv4   = 0;
				   	} 
				}
				if(ToggleTaylorAssist[profileIdx] == 3){ 
					angleVersionFive += get_rtime();
					GetAngle(TaylorShapes[profileIdx],SpeedAngle,TaylorRadius[profileIdx]);
					SpeedAngle = (SpeedAngle  + (angleVersionFive / 100)) % 360;
				} 
				if(aimAssistActivation() || AutoAim && get_ival(Fire)){
					if(ToggleTaylorAssist[profileIdx] == 1){ 
						offset(POLAR_RS + 8,SinAngle);
						offset(POLAR_RS + 7,CosAngle);
					}
					if(ToggleTaylorAssist[profileIdx] == 2 || ToggleTaylorAssist[profileIdx] == 3){ 
						set_val(AimRX, clamp(RX + CosAngle, -100, 100));
						set_val(AimRY, clamp(RY + SinAngle, -100, 100));
					} 		
				} 
				if(event_release(Ads) || event_release(Fire)){ 
			    	angleVersionFive = 0;
			    	Positionv2 = 0;
			    	Position = 0;
			    }
			    if(ToggleTaylorAssist[profileIdx] == 4){	
			    	if(aimAssistActivation()|| AutoAim && get_ival(Fire)){
				    	if(get_ival(Fire)){ 
				    		PolarAimAssist = get_ptime(Fire); 
				    	}
						if(PolarAimAssist <= PolarStart){
			         		offset(POLAR_RS + 8,SinAngle);
							offset(POLAR_RS + 7,CosAngle);
			     		}
			     		if((PolarAimAssist > PolarStart) && (PolarAimAssist <= PolarMid)){
			         		set_val(AimRX, clamp(RX + CosAngle, -100, 100));
							set_val(AimRY, clamp(RY + SinAngle, -100, 100));
			     		}
			     		if(PolarAimAssist > PolarMid) {
			         		set_val(AimRX, clamp(RX + CosAngle, -100, 100));
							set_val(AimRY, clamp(RY + SinAngle, -100, 100));
			     		}
			     		if(event_release(Fire)){ 
			     			PolarAimAssist = 0;
			     		} 
			     	} 
				} 
				if(ToggleTaylorAssist[profileIdx] == 5){	
			    	if(aimAssistActivation()|| AutoAim && get_ival(Fire)){
			    		if(get_ival(Fire)){ 
			    			PolarAimAssistv1 = get_ptime(Fire);
			    		}
						if(PolarAimAssistv1 <= PolarStart){
			         		set_val(AimRX, clamp(RX + CosAngle, -100, 100));
							set_val(AimRY, clamp(RY + SinAngle, -100, 100));
			     		}
			     		 
			     		if((PolarAimAssistv1 > PolarStart) && (PolarAimAssistv1 <= PolarMid)){
			     			set_val(AimRX, clamp(RX + CosAngle, -100, 100));
							set_val(AimRY, clamp(RY + SinAngle, -100, 100));
			     		}
			     		if(PolarAimAssistv1 > PolarMid) {
			         		offset(POLAR_RS + 8,SinAngle);
							offset(POLAR_RS + 7,CosAngle);
			     		}
			     		if(event_release(Fire)){ 
			     			PolarAimAssistv1 = 0;
			     		}
		     	  	} 
				} 
			} 
			if(ToggleBattsAssist[profileIdx]){
				if(aimAssistActivationBatts()|| AutoAim && get_ival(Fire)){
					combo_run(stickyAim);
				}
			}
			if(StrafeAssist[profileIdx] == 1){ 
				if((get_ival(Ads) && get_ival(Fire) && get_ptime(Fire) < StrafeActiveTime) || get_ival(Fire) && get_ptime(Fire) < StrafeActiveTime){ 
					Angle += get_rtime();
					StrafeAngle = (StrafeAngle  + (Angle / 100)) % 360;
					combo_run(StrafeAA);
				}
			}
			if(HeadShotAssist[profileIdx] == 1) {
				RY = HeadShotStrength * -1;
				if(get_ival(Fire) && get_ptime(Fire) < HeadShotHoldTime) { 	
					offset(AimRY,RY);	
				}
			}
			if(ToggleRapidFire[profileIdx] == 1 || ToggleSniperMode[profileIdx] == 1){
			 	
			 	HoldTime = 500 / HandGunRoF; 	
			    RestTime = HoldTime -get_rtime();
			 	if(RestTime < 0) RestTime = 0;
			    
			 	if(rapidFireType[profileIdx] == 0) { 
				 	if(get_ival(Fire))
				 		combo_run(RAPIDFIRE);
				 	else
				    	combo_stop(RAPIDFIRE);
				} 
				if(rapidFireType[profileIdx] == 1) { 
					if(get_ival(Ads)){
			    		if(get_ival(Lethal)){
			    			FireRF = TRUE;
			    		}
			    	    set_val(Lethal,0);
			        } 
			        if(FireRF){ 
			    		set_val(Fire,100);
			    		combo_run(RAPIDFIRE);
			    	}
			    	if(event_release(Ads) || event_release(Lethal))
			    	{
			    		FireRF = FALSE;
			    	}
			    }
			    LedBlink(150,300);   
			}
			if(ToggleBurstFire[profileIdx] == 1 || ToggleBurstFire[profileIdx] == 2 ){ 
    
				if(burstFireType[profileIdx] == 0) { 
					if(ToggleBurstFire[profileIdx] == 1) {
						if(get_ival(Fire) > 0 && get_ival(Fire) <= BurstFireRelease) {
				        	combo_run(BurstFireAuto);
				        } else {
				        	combo_stop(BurstFireAuto);
				    	}
				    } 
				    else if(ToggleBurstFire[profileIdx] == 2) {
						if(get_ival(Fire)) { 
							set_val(Fire,0);
					        combo_run(BurstFireSemi);   
					    }
					}
				}
				if(burstFireType[profileIdx] == 1) { 
					if(get_ival(Ads)){
			    		if(get_ival(Lethal)){
			    			FireRF = TRUE;
			    		}
			    	    set_val(Lethal,0);
			        } 
			        if(FireRF){ 
			        	set_val(Fire,100);
			        	if(ToggleBurstFire[profileIdx] == 1)
			        		combo_run(BurstFireAuto);
			        	else
			        		combo_run(BurstFireSemi);   
			        }
			    } 	
				if(event_release(Ads) || event_release(Lethal))
			    {
			    	FireRF = FALSE;
			    }
			    LedBlink(150,300);
			}
			if(ToggleCancelReload){
				if(event_press(Fire))
					FirstShotBeforeReload = TRUE; 
					
				if(event_press(Reload) && FirstShotBeforeReload)
				{
					ReloadInProgress = TRUE;
					FirstShotBeforeReload = FALSE;
				}
				if(get_val(Reload) && get_ptime(Reload) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(CancelReload);
				}
				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
				    ReloadTime = 0;

				if(ReloadTime > MaxReloadTime)
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime && event_press(Fire))
					combo_run(CancelReload);
			}
			if(ToggleTaylorSens){ 
				 if(get_ival(Ads)){ 
       				if(!get_ival(Fire)){ 
            			GenStr = AdsSens;
        			}else{ 
            			GenStr = AdsFireSens;
        			} 
   				}
    			else if(get_ival(Fire)){ 
        			GenStr = FireSens; 
    			}else{ 
        			GenStr = GeneralSens;
    			} 
    			set_polar(POLAR_RS,_get_polar(POLAR_RS, POLAR_ANGLE), get_polar(POLAR_RS, POLAR_RADIUS) * GenStr / 100);
    		}
    		if(ToggleCancelSlide == 1 || ToggleCancelSlide == 2){
				if((get_val(MoveLY) < -80) || (get_val(MoveLY) > 80) || (get_val(MoveLX) < -80) || (get_val(MoveLX) > 80))
				{
					if(ToggleCancelSlide == 1 && event_release(Crouch))
						combo_run(CancelSlideMW)
					else if(ToggleCancelSlide == 2 && event_release(Crouch))
						combo_run(CancelSlideCW) 
						
					if(ToggleCancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
	                    
	                if(ToggleCancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(ToggleHoldBreath[profileIdx] == 1)
			{
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}
			
	        if(ToggleBunnyHop == 1) { 
            	if(get_ival(Jump) && get_ptime(Jump) > 200) 
                	combo_run(Bunnyhop); 
            } 
            if(ToggleBunnyHop == 2){ 
            	if(get_ival(Jump) && get_ptime(Jump) > 400) {
            		BunnyGoHop = TRUE;
            	} 
            	if(BunnyGoHop){ 
            		combo_run(Bunnyhop);	
            	}
            	if(event_release(Jump) && get_ptime(Jump) < 150 || event_press(Crouch)) {
            		BunnyGoHop = FALSE;
            		set_val(Jump,0);
            	}
            			
            	
            	if(!BunnyGoHop || combo_running(CancelSlideMW) || combo_running(CancelSlideCW)){
            		combo_stop(Bunnyhop);
            	    BunnyGoHop = FALSE;
                } 
            } 
	        if(ToggleJumpShot[profileIdx] == 1) 
			{
				if(jumpShotFireType[profileIdx] == 0){ 
		    		if(get_ival(Fire)){
		    			combo_run(JumpShot);
		    		}
		    	} 
		    	if(jumpShotFireType[profileIdx] == 1){ 
		    		if(get_ival(Ads) && get_ival(Fire)){ 
		    			combo_run(JumpShot);
		    		}
		    	} 	
			}
			if(ToggleFastMelee[profileIdx] == 1) 
			{
				if(get_val(Melee))
					combo_run(FastMelee);

				if(get_val(Ads) && event_press(Melee) < 500)
					combo_stop(FastMelee);
			}
			if(ToggleEnemyPing) 
        	{
        		if(get_ival(Fire) && get_ptime(Fire) >= 300)
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing);		
        	}
        	if(ToggleCrouchShot[profileIdx] == 1) { 
		    	if(crouchShotFireType[profileIdx] == 0){ 
		    		if(get_ival(Fire)){
		    			combo_run(CrouchShotCmb);
		    		}
		    	} 
		    	if(crouchShotFireType[profileIdx] == 1){ 
		    		if(get_ival(Ads) && get_ival(Fire)){ 
		    			combo_run(CrouchShotCmb);
		    		}
		    	} 
		    }
		    if(ToggleDropShot[profileIdx] == 1) 
			{
				if(dropShotFireType[profileIdx] == 0){ 
					if(get_val(Ads) && get_val(Fire) && event_press(Crouch)){
						InstaDropShot = TRUE;
					} 
				}
				if(dropShotFireType[profileIdx] == 1){ 
					if(get_ival(Ads) && get_ival(Fire)){
						InstaDropShot = TRUE;
					}
				} 
				if(dropShotFireType[profileIdx] == 2){ 
					if(get_ival(Fire)){
						InstaDropShot = TRUE;
					}
				}
				if(InstaDropShot)  
					combo_run(InstaDrop);
				
				if(event_release(Ads) || event_release(Fire))
				{
					InstaDropShot = FALSE;
					combo_stop(InstaDrop);
				} 	
			}
			if(ToggleQuickScope[profileIdx] == 1){ 
				if(event_release(Ads))
					combo_run(QuickScope);
			}
			if(ToggleQuickScope[profileIdx] == 2){ 
				if(event_press(Ads) && get_ptime(Ads) < 140)
					combo_run(QuickScope);
			} 
			if(AutoAim[profileIdx] == 1){ 
				if(get_ival(Fire))
					set_val(Ads,100);
			} 
       	}
    }
    
    if (get_ival(XB1_LS)) {
        combo_run(whyWHY);
    }
    
    set_val(TRACE_1,Ascii[AsciiIndex]);
}

combo whyWHY {
    set_val(XB1_Y,100);
    wait(20);
    wait(yDelay);
    set_val(XB1_Y,100);
    wait(20);
}

int InstaDropShot;
const int8   PolarArray   [] = {-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8   LinearArray  [] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};   
function GetAngle(getShapes,getSinCos,Rad){ 
	if(TaylorShapesInfo[getShapes][5] == 0){
		if(AngleDirection){
			SinAngle  = (cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/100 + Tracker1;
			CosAngle  = (sin(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/100 + Tracker2; 
		}else{ 
			CosAngle  = (cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/100 + Tracker1;
			SinAngle  = (sin(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/100 + Tracker2; 
		} 
	} 
	if(TaylorShapesInfo[getShapes][5] == 1){ 
		Spiral(Rad);
		if(AngleDirection){
			CosAngle  = (sin(TaylorShapesInfo[getShapes][1] + getSinCos) * InnerSpiral)/100 + Tracker1;
			SinAngle  = (cos(TaylorShapesInfo[getShapes][2] + getSinCos) * OuterSpiral)/100 + Tracker2;
		}else{ 
			CosAngle  = (cos(TaylorShapesInfo[getShapes][1] + getSinCos) * InnerSpiral)/100 + Tracker1;
			SinAngle  = (sin(TaylorShapesInfo[getShapes][2] + getSinCos) * OuterSpiral)/100 + Tracker2;
		} 
	}
	if(TaylorShapesInfo[getShapes][5] == 2){ 
		Helix();
		CosAngle  = (Rad * y)/100 + Tracker1;
		SinAngle  = (Rad * x)/100 + Tracker2;
	}
	if(TaylorShapesInfo[getShapes][5] == 3){ 
		if(Positionv2 == 0){ 
			CosAngle  = (cos(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/100 + Tracker1;
			SinAngle  = (sin(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/100 + Tracker2; 
		} 
		if(Positionv2 == 1){ 
			CosAngle  = (cos(TaylorShapesInfo[getShapes][2] + getSinCos) * Rad/TaylorShapesInfo[getShapes][3])/100 + Tracker1;
		    SinAngle  = (sin(TaylorShapesInfo[getShapes][1] + getSinCos) * Rad/TaylorShapesInfo[getShapes][4])/100 + Tracker2; 
		} 
	    Positionv2 ++ 
		if(Positionv2 == 2){ 
		  	Positionv2 = 0;
		}
	} 
} 
int Positionv2;
function InitializeShapeChange() { 
	if(TaylorShapesInfo[TaylorShapes[profileIdx]][0] == 3) {
		if(ToggleTaylorAssist[profileIdx] == 1 || ToggleTaylorAssist[profileIdx] == 2){ 
			if(!ToggleBoostFire[profileIdx]){ 
				InnerSpiral = TaylorRadius[profileIdx]/2;	
				OuterSpiral = TaylorRadius[profileIdx];
			}else{ 
				InnerSpiral = TaylorPBoostStr[profileIdx]/2;	
				OuterSpiral = TaylorPBoostStr[profileIdx];
			}
		}
	}	
}
function Helix(){ 
	inc = (i % 100);
    if(Position == 0){ 
   		x = inc; y = 100 - inc;
   	} 
    else if (Position == 1){ 
    	x = 100 - inc; y = - inc; 
    }
    else if (Position == 2){
    	x = -inc; y = -100 + inc; 
    }
    else if(Position == 3) {  
    	x = -100 + inc; y = inc; 
    }
    Position ++;
   
    if(Position == 4){ 
    	Position = 0;
    }	
 } 
function Spiral(Rad){ 
	
	if(!(CycleRefresh++ % TimeInterval))
	{
		if(!SpiralPosition1)                                
		{
			InnerSpiral -= 1;
			if(InnerSpiral < Rad/2)
				SpiralPosition1 = True;   
		}
		else
		{
		    InnerSpiral += 1;
			if(InnerSpiral > Rad)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;
			if(OuterSpiral < Rad/2)
				SpiralPosition2 = True;
		}
		else
		{
			OuterSpiral += 1;
			if(OuterSpiral > Rad)
				SpiralPosition2 = False
		}
		CycleRefresh = 0;
	}	
}
function correctAngle(angle){
  if(angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function sin(angle){
	
  	if(ToggleAAType[profileIdx] == 1)
		return PolarArray[correctAngle(angle)];
	else if(ToggleAAType[profileIdx] == 2)
    	return LinearArray[correctAngle(angle)];
    else if(ToggleAAType[profileIdx] == 3)
    	return PolarArray[correctAngle(angle)];
    	
    return 0;
}
function cos(angle){
	if(ToggleAAType[profileIdx] == 1)
		return PolarArray[(correctAngle(angle) + 90) % 360];
	else if(ToggleAAType[profileIdx] == 2)
    	return LinearArray[(correctAngle(angle) + 90) % 360];
    else if(ToggleAAType[profileIdx] == 3)
    	return LinearArray[(correctAngle(angle) + 90) % 360]; 
    	
    return 0;   
}
const int16 TaylorShapesInfo[][] = {
// Shape ID - CosAngle - SinAngle - DivisableRadiusCos - DivisableRadiusSin - NonSpiral 
{      0    ,    0     ,    0     ,          1         ,         1          ,     0 }, // Circular 
{      1    ,    0     ,    0     ,          2         ,         1          ,     0 }, // TallOval
{      2    ,    0     ,    0     ,          1         ,         2          ,     0 }, // WideOval
{      3    ,    0     ,    0     ,          2         ,         1          ,     1 }, // SpiralOval 
{      4    ,    0     ,    0     ,          2         ,         1          ,     1 }, // Spiral 
{      5    ,    0     ,    0     ,          1         ,         1          ,     2 }, // Helix 
{      6    ,    0     ,    0     ,          1         ,         0          ,     0 }, // Kitt 
{      7    ,    0     ,    0     ,          0         ,         1          ,     0 }, // Vertical Flare
{      8    ,   45    ,   135     ,          1         ,         1          ,     3 }, // Tartan Flex 
{      9    ,  180    ,   315     ,          1         ,         1          ,     0 }, // Jupiter
{     10    ,  135    ,    45     ,          1         ,         1          ,     0 }, // Bishop
{     11    ,   45    ,   135     ,          1         ,         1          ,     0 }, // Blade
{     12    ,  315    ,   180     ,          1         ,         1          ,     0 }  // Osclirate  
} 
function offset(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
  return;
}
function antirecoilActivationLegRum(){ 
	if(standardARFireType[profileIdx] == 0){ 
		if(get_ival(Ads) && get_ival(Fire)){ 
			return TRUE;
		}
	}
	if(standardARFireType[profileIdx] == 1){ 
		if(get_ival(Fire) && !get_ival(Ads)){
			return TRUE;
		}
	} 
	if(standardARFireType[profileIdx] == 2){ 
		if(get_ival(Ads) && get_ival(Fire) || get_ival(Fire)){ 
			return TRUE;
		} 
	} 
	return 0;
} 
function antirecoilActivationProg(){ 
	if(progressiveARFireType[profileIdx] == 0){ 
		if(get_ival(Ads) && get_ival(Fire)){ 
			return TRUE;
		}
	}
	if(progressiveARFireType[profileIdx] == 1){ 
		if(get_ival(Fire) && !get_ival(Ads)){
			return TRUE;
		}
	} 
	if(progressiveARFireType[profileIdx] == 2){ 
		if(get_ival(Ads) && get_ival(Fire) || get_ival(Fire)){ 
			return TRUE;
		} 
	} 
	return 0;
} 
function aimAssistActivation(){ 

	if(taylorFireType[profileIdx] == 0){ 
		if(get_ival(Ads) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	if(taylorFireType[profileIdx] == 1){ 
		if(get_ival(Ads) && get_ival(Fire)){ 
			return TRUE;
		} 
	} 
	if(taylorFireType[profileIdx] == 2){ 
		if(get_ival(Fire) && !get_ival(Ads)){
			return TRUE;
		} 
	}
	if(taylorFireType[profileIdx] == 3){ 
		if(get_ival(Ads) && get_ival(Fire) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	return 0;
} 
function aimAssistActivationBatts(){ 
	
	if(battsFireType[profileIdx] == 0){ 
		if(get_ival(Ads) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	if(battsFireType[profileIdx] == 1){ 
		if(get_ival(Ads) && get_ival(Fire)){ 
			return TRUE;
		} 
	} 
	if(battsFireType[profileIdx] == 2){ 
		if(get_ival(Fire) && !get_ival(Ads)){
			return TRUE;
		} 
	} 
	if(battsFireType[profileIdx] == 3){ 
		if(get_ival(Ads) && get_ival(Fire) || get_ival(Fire)){ 
			return TRUE;
		}
	} 
	return 0;
} 
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
function toggleSwitch(Var){ 
	if(modNameIdx == modIdx++){ 
		if(event_press(PS4_UP)){ 
			Var = Refresh(Var ++,0,getStringCount(modIdxRange[modNameIdx][4]));
			updateDisplay = TRUE;
			if(!Var)
				combo_run(rumbleOff);
			else
		    	combo_run(rumbleOn); 
		} 
		if(event_press(PS4_DOWN)){ 
			Var = Refresh(Var --,0,getStringCount(modIdxRange[modNameIdx][4]));
			updateDisplay = TRUE;
			if(!Var)
				combo_run(rumbleOff);
			else
		   	 	combo_run(rumbleOn); 
		}
		if(modNameIdx == 2){ 
			if(event_press(PS4_R1)){ 
				adminAimAssistValues[profileIdx] = Refresh(adminAimAssistValues[profileIdx] + 1,0,46);
				updateDisplay = TRUE;
				update = TRUE;
				
				if(!Var)
					combo_run(rumbleOff);
				else
			    	combo_run(rumbleOn); 
			} 
			if(event_press(PS4_L1)){ 
				adminAimAssistValues[profileIdx] = Refresh(adminAimAssistValues[profileIdx] - 1,0,46);
				updateDisplay = TRUE;
				update = TRUE;
				if(!Var)
					combo_run(rumbleOff);
				else
			   	 	combo_run(rumbleOn); 
			}
		} 
		if(modNameIdx == 0){ 
			if(Var == 1){
				ToggleProgressive[profileIdx] = 0;
			}
		}
		if(modNameIdx == 1){ 
			if(Var == 1){ 
				ToggleAntirecoil[profileIdx] = 0;
			}
		} 
		if(modNameIdx == 6){ 
			if(Var == 1){ 	
				ToggleBurstFire[profileIdx] = 0;
			}
		} 
		if(modNameIdx == 7){ 
			if(Var == 1){ 
				ToggleRapidFire[profileIdx] = 0;
			}
		}
		if(modNameIdx == 0){ 
			print(centerPosition(getStringLength(standardAR[ToggleAntirecoil[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,standardAR[ToggleAntirecoil[profileIdx]])			
		} 
		else if(modNameIdx == 1){ 
			print(centerPosition(getStringLength(progressiveAR[ToggleProgressive[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,progressiveAR[ToggleProgressive[profileIdx]])			
		}
		else if(modNameIdx == 2){ 
			print(centerPosition(getStringLength(taylorAssist[ToggleTaylorAssist[profileIdx]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,taylorAssist[ToggleTaylorAssist[profileIdx]])
			print(centerPosition(getStringLength(adminAA[adminAimAssistValues[profileIdx]]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,adminAA[adminAimAssistValues[profileIdx]])
		}
		else if(modNameIdx == 7){ 
			print(centerPosition(getStringLength(burstFireMode[ToggleBurstFire[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,burstFireMode[ToggleBurstFire[profileIdx]])	
		}
		else if(modNameIdx == 12){ 
			print(centerPosition(getStringLength(slideType[ToggleCancelSlide]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,slideType[ToggleCancelSlide])	
		}
		else if(modNameIdx == 13){ 
			print(centerPosition(getStringLength(bunnyHoppy[ToggleBunnyHop]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,bunnyHoppy[ToggleBunnyHop])	
		}
		else if(modNameIdx == 18){ 
			print(centerPosition(getStringLength(qScopeToggle[ToggleQuickScope[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,qScopeToggle[ToggleQuickScope[profileIdx]])	
		}
		else if(modNameIdx == 20){ 
			print(centerPosition(getStringLength(VMSpeed[vmSpeed]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,VMSpeed[vmSpeed])	
		}
		else if(modNameIdx == 22){ 
			print(centerPosition(getStringLength(arActivation[standardARFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,arActivation[standardARFireType[profileIdx]])	
		}
		else if(modNameIdx == 23){ 
			print(centerPosition(getStringLength(arActivation[progressiveARFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,arActivation[progressiveARFireType[profileIdx]])	
		}
		else if(modNameIdx == 24){ 
			print(centerPosition(getStringLength(aimAssistType[taylorFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,aimAssistType[taylorFireType[profileIdx]])	
		}
		else if(modNameIdx == 25){ 
			print(centerPosition(getStringLength(aimAssistType[battsFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,aimAssistType[battsFireType[profileIdx]])	
		}
		else if(modNameIdx == 26){ 
			print(centerPosition(getStringLength(fireModsType[rapidFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,fireModsType[rapidFireType[profileIdx]])	
		}
		else if(modNameIdx == 27){ 
			print(centerPosition(getStringLength(fireModsType[burstFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,fireModsType[burstFireType[profileIdx]])	
		}
		else if(modNameIdx == 28){ 
			print(centerPosition(getStringLength(miscFireTypes[crouchShotFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,miscFireTypes[crouchShotFireType[profileIdx]])	
		}
		else if(modNameIdx == 29){ 
			print(centerPosition(getStringLength(miscFireTypes[jumpShotFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,miscFireTypes[jumpShotFireType[profileIdx]])	
		}
		else if(modNameIdx == 30){ 
			print(centerPosition(getStringLength(dropShotTypes[dropShotFireType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,dropShotTypes[dropShotFireType[profileIdx]])	
		}
		else if(modNameIdx == 31){ 
			print(centerPosition(getStringLength(BtnLayouts[Buttons]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,BtnLayouts[Buttons])	
		}
		else if(modNameIdx == 32){ 
			print(centerPosition(getStringLength(controllerStick[Sticks]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,controllerStick[Sticks])	
		}
		else if(modNameIdx == 36){ 
			print(centerPosition(getStringLength(UnmapButtons[UnmapBtnIdx[0]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,UnmapButtons[UnmapBtnIdx[0]])	
		}
		else if(modNameIdx == 37){ 
			print(centerPosition(getStringLength(UnmapButtons[UnmapBtnIdx[1]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,UnmapButtons[UnmapBtnIdx[1]])	
		}
		else if(modNameIdx == 38){ 
			print(centerPosition(getStringLength(pressButtons[singleProfileBtnIdx]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,pressButtons[singleProfileBtnIdx])	
		}	
		else { 
	
		if(Var == 1)
			print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
		else
			print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
		}
	} 
	return Var;
} 
function editSwitch(Var){ 
	if(valNameIdx == valIdx++){ 
		if(event_press(PS4_UP)){ 
			Var = Refresh(Var ++,valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
			updateDisplay = TRUE;
		} 
		if(event_press(PS4_DOWN)){ 
			Var = Refresh(Var --,valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
			updateDisplay = TRUE;
		}
		if(valNameIdx == 10){ 
			print(centerPosition(getStringLength(curveType[ToggleAAType[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,curveType[ToggleAAType[profileIdx]])	
		} 
		else if(valNameIdx == 11){ 
		    if(ToggleAAType[profileIdx] == 0)
		    	print(centerPosition(getStringLength(miscStrings[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,miscStrings[1])	
			else if(ToggleAAType[profileIdx] == 1)
				print(centerPosition(getStringLength(circularCurve[TaylorShapes[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,circularCurve[TaylorShapes[profileIdx]])	
			else if(ToggleAAType[profileIdx] == 2)
				print(centerPosition(getStringLength(squareCurve[TaylorShapes[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,squareCurve[TaylorShapes[profileIdx]])	
			else if(ToggleAAType[profileIdx] == 3)
				print(centerPosition(getStringLength(mixedCurve[TaylorShapes[profileIdx]]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,mixedCurve[TaylorShapes[profileIdx]])	
		} 	
		else { 
		
			if(Var == 1)
				print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
			else
				print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
		} 
	}
	return Var;
} 
function editValues(Var){ 
	if(valNameIdx == valIdx++){ 
		if(get_ival(Ads)){ 
			if(event_press(PS4_RIGHT)){ 
				Var = Refresh(Var + valuesRange[valNameIdx][2],valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
				updateDisplay = TRUE;
			} 
			if(event_press(PS4_LEFT)){ 
				Var = Refresh(Var - valuesRange[valNameIdx][2],valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
				updateDisplay = TRUE;
			}
			if(event_press(PS4_UP)){ 
				Var = Refresh(Var + valuesRange[valNameIdx][3],valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
				updateDisplay = TRUE;
			} 
			if(event_press(PS4_DOWN)){ 
				Var = Refresh(Var - valuesRange[valNameIdx][3],valuesRange[valNameIdx][0],valuesRange[valNameIdx][1]);
				updateDisplay = TRUE;
			}	
		}
		if( valuesRange[valNameIdx][5] == 0 ){
			NumberToString(Var,FindDigits(Var));   
		} 
		if( valuesRange[valNameIdx][5] == 1 ){ 
			NumberToString(Var * 100,FindDigits(Var * 100));
		}		
	} 
	return Var;
} 		
function menuNavigation(Index,fMin,fMax) { 
   if(mainMenu){ 
    	if(event_press(PS4_UP)){
           	Index = Refresh(Index --,fMin,fMax);
           	updateDisplay = TRUE;
    	}
    	if(event_press(PS4_DOWN)){
        	Index = Refresh(Index ++,fMin,fMax);
            updateDisplay = TRUE; 
    	}
    	if(event_press(PS4_CIRCLE)){ 
    		getMenuStatus(FALSE,FALSE,FALSE,FALSE,TRUE)
    		InitializeShapeChange();
    		Save();
    		if(update){ 
				getAdminValues();
			} 
    	} 
    }
    if(!mainMenu){ 
    	if(!get_ival(Ads)){ 
	    	if(event_press(PS4_RIGHT)){
	           	Index = Refresh(Index ++,fMin,fMax);
	           	updateDisplay = TRUE;
	    	}
	    	if(event_press(PS4_LEFT)){
	        	Index = Refresh(Index --,fMin,fMax);
	            updateDisplay = TRUE; 
	    	}
	    } 
    } 
    if(event_release(PS4_CROSS)){
    	if(mainMenu){ 
    		if(mainRange[mainMenuIdx][2] != 0){
				modNameIdx = mainRange[ mainMenuIdx ][ 0 ];
				InitializeShapeChange();
				getMenuStatus(TRUE,FALSE,TRUE,FALSE,FALSE)
				cls_oled(OLED_BLACK);
				if(update){ 
					getAdminValues();
				} 
			} 	
    	}
    }
    if(event_press(PS4_CROSS)){ 
    	if(modMenu){
    		if(modIdxRange[modNameIdx][2] == 1){
    			valNameIdx  = modIdxRange[modNameIdx][0];
    			InitializeShapeChange();
				getMenuStatus(TRUE,FALSE,FALSE,TRUE,FALSE)
				if(update){ 
					getAdminValues();
				} 
			} 
		}
    }
    if(event_release(PS4_CIRCLE) && !mainMenu){ 
    	if(modMenu){ 
    		getMenuStatus(TRUE,TRUE,FALSE,FALSE,FALSE)
    		InitializeShapeChange();
    		if(update){ 
				getAdminValues();
			} 
    	}
    	else if(editMenu){ 
    		getMenuStatus(TRUE,FALSE,TRUE,FALSE,FALSE)
    		InitializeShapeChange();
    		if(update){ 
				getAdminValues();
			} 
    	}
    }
    if(modIdxRange[modNameIdx][3] == 1 || valuesRange[valNameIdx][4] == 1){ 
    	if(event_press(PS4_TRIANGLE)){ 
			profileIdx = Refresh(profileIdx ++,0,2);
			updateDisplay = TRUE;
		}
	}
	BlockButtonPress ();
	return Index; 
}
function getMenuStatus(fUpdate,fMainMenu,fModMenu,fEditMenu,fDisplayTitle){ 	
	updateDisplay    = fUpdate;
	mainMenu         = fMainMenu;
	modMenu          = fModMenu;
	editMenu         = fEditMenu;
	displayTitle     = fDisplayTitle;
} 
function Refresh(Value,Min,Max){  
    if(Value > Max) 
    	return Min;	 	
    if(Value < Min)
    	return Max;     
    
    return Value;    
}
function getAdminValues(){ 
	ToggleTaylorAssist[profileIdx] = adminToggle[adminAimAssistValues[profileIdx]][ 0];
	ToggleBattsAssist[profileIdx]  = adminToggle[adminAimAssistValues[profileIdx]][ 1];
	ToggleAAType      [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 0]; 
	TaylorShapes      [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 1]; 
	ShapeDirection    [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 2];  
	AdsSpeed          [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 3]; 
	TaylorAngle       [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 4]; 
	TaylorRadius      [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 5]; 
	ToggleBoostFire   [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 6]; 
	BoostReducer      [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 7]; 
	TaylorPBoostStr   [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 8]; 
	TaylorABoostSpd   [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][ 9]; 
	TaylorTracking    [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][10]; 
	TrackingSize      [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][11]; 
	TrackingSpeed     [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][12]; 
	AimAssistSize     [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][13]; 
	AimAssistTime     [profileIdx] = adminValues[adminAimAssistValues[profileIdx]][14];
	update = FALSE;
} 
/*
============================================================================================================================================
 Combo Section 
============================================================================================================================================
*/
combo stickyAim {
	offset(AimRY,AimAssistSize[profileIdx]);
	wait(AimAssistTime[profileIdx]);
	offset(AimRX,AimAssistSize[profileIdx]);
	offset(MoveLX,AimAssistSize[profileIdx]);
	wait(AimAssistTime[profileIdx]);
	offset(AimRY,inv(AimAssistSize[profileIdx]));
	wait(AimAssistTime[profileIdx]);
	offset(AimRX,inv(AimAssistSize[profileIdx]));
	offset(MoveLX,inv(AimAssistSize[profileIdx]));
	wait(AimAssistTime[profileIdx]);
}
combo StrafeAA { 
	offset(PS4_LX,StrafeSize);
	wait(SpeedAngle);
	wait(20);
	offset(PS4_LX,inv(StrafeSize));
	wait(SpeedAngle);
	wait(20);
} 
combo RAPIDFIRE { 
	wait(HoldTime);
	set_val(Fire, 0);
	wait(RestTime);
}
combo BurstFireAuto {
    set_val(Fire,100);
    wait(BurstFireHold);
    set_val(Fire,0);
    wait(BurstFireWait);
}
combo BurstFireSemi {

    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);
    wait(40); 
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);
    wait(40);    
    wait(BurstFireWait);
}
combo CancelReload {
	set_val(Swap,100);
	wait(20);
	wait(20)
	set_val(Swap,100);
	wait(20);
	ReloadInProgress = FALSE; 
}
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(SlideDelay);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(SlideDelay);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo QuickScope {
set_val(Ads,100);
wait(QuickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}         
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(PingDelay); 
}
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo JumpShot {
set_val(Jump,100);
wait(20);
set_val(Jump,0);
wait(20);
}
combo InstaDrop {
set_val(Crouch,100);
wait(1000);
set_val(Crouch,0);
InstaDropShot = FALSE;
}
combo CrouchShotCmb {
set_val(Crouch,100);
wait(50);
set_val(Crouch,0);
wait(CrouchSpeed);
}
combo Bunnyhop{
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
}
combo QuickToggles{ 
wait(1500) 
displayTitle  = TRUE; 
reset_leds(); 
InitializeShapeChange();
} 
combo rumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
}
combo rumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
}
combo DriveMode { 
cls_oled(OLED_BLACK);
print(centerPosition(getStringLength(miscStrings[8]),OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_WHITE,miscStrings[8])
print(centerPosition(getStringLength(miscStrings[9]),OLED_FONT_MEDIUM_WIDTH),35,OLED_FONT_MEDIUM,OLED_WHITE,miscStrings[9])
wait(1500);
displayTitle = TRUE;
} 
combo driveModeOff { 
cls_oled(OLED_BLACK);
print(centerPosition(getStringLength(miscStrings[8]),OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_WHITE,miscStrings[8])
print(centerPosition(getStringLength(miscStrings[10]),OLED_FONT_MEDIUM_WIDTH),35,OLED_FONT_MEDIUM,OLED_WHITE,miscStrings[10])
wait(1500);
displayTitle = TRUE;
} 
combo saved { 
cls_oled(OLED_BLACK);
print(centerPosition(getStringLength(miscStrings[11]),OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,miscStrings[11])
wait(500);
displayTitle = TRUE;
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo BLINK {
wait(LedOn);
led(7);
wait(LedOff);
} 
function _get_polar(int stick, int var) {
  if (var == POLAR_ANGLE) {
    if(stick == POLAR_LS)
    return atan2(get_val(POLAR_LY) / 327, get_val(POLAR_LX) / 327);
    if(stick == POLAR_RS)
    return atan2(get_val(POLAR_RY) / 327, get_val(POLAR_RX) / 327);
  }
  if(stick == POLAR_LS) {
    return isqrt((get_val(POLAR_LX) * get_val(POLAR_LX)) + (get_val(POLAR_LY) * get_val(POLAR_LY)));
  }
  return isqrt((get_val(POLAR_RX) * get_val(POLAR_RX)) + (get_val(POLAR_RY) * get_val(POLAR_RY)));
}

int angle_Out;
function atan2(int y, int x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  return abs(angle_Out);
}
/*
============================================================================================================================================
  Quick Toggle ()                                                                                                                      
============================================================================================================================================
*/

int displayQToggles;
function QuickToggleMods(f_hold, f_press,f_val,f_idx,fMax) {  
	if (f_hold == 0 || f_press == 0) return f_val;

	if(get_ival(f_hold))
	{
		if(event_press(f_press)) 
		{
		    modNameIdx = f_idx;
		    f_val = Refresh(f_val ++,0,fMax);
		    displayQToggles = TRUE;
		   
	        if(!f_val)
	            combo_run(rumbleOff);
	        else
	            combo_run(rumbleOn);	
		    
	    }
	    else if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 40))
		{
			modNameIdx = f_idx;
			f_val = 0;
			displayQToggles = TRUE;
			combo_run(rumbleOff);
		} 
	    set_val(f_press, 0) 
	} 
	if(displayQToggles){
		combo_run(QuickToggles);
		screenSaver = FALSE;
		cls_oled(OLED_BLACK);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
		displayQToggles = FALSE;
		print(centerPosition(getStringLength(modNames[modNameIdx]) ,OLED_FONT_SMALL_WIDTH), 4  ,OLED_FONT_SMALL , OLED_WHITE , modNames[modNameIdx]);
		if(modIdxRange[modNameIdx][3] == 1){ 
       		print(centerPosition(getStringLength(profileId[profileIdx]),OLED_FONT_SMALL_WIDTH), 16 ,OLED_FONT_SMALL , OLED_WHITE , profileId[profileIdx]);
		} 
		if(modNameIdx == 7){ 	
			if(f_val == 0) 
				print(centerPosition(getStringLength(burstFireMode[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,burstFireMode[0])	
			else if(f_val == 1)
				print(centerPosition(getStringLength(burstFireMode[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,burstFireMode[1])
			else if(f_val == 2)
				print(centerPosition(getStringLength(burstFireMode[2]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,burstFireMode[2])
		} 
		else { 
		
		if(f_val == 1)
			print(centerPosition(getStringLength(Toggle[1]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[1])	
		else
			print(centerPosition(getStringLength(Toggle[0]),OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Toggle[0])	
		}
	}   
	return f_val;
} 
   
 
/*
============================================================================================================================================
 Main Menu Design 
============================================================================================================================================
*/
function displayMainIdx(activeString,previousString,nextString){
	if(mainMenuIdx == activeString){ 
		print(centerPosition(getStringLength(MainMenuId[activeString]),OLED_FONT_SMALL_WIDTH),21,OLED_FONT_SMALL,OLED_BLACK,MainMenuId[activeString])
		print(centerPosition(getStringLength(MainMenuId[nextString]),OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,MainMenuId[nextString])
		print(centerPosition(getStringLength(MainMenuId[previousString]),OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,MainMenuId[previousString])
	} 
} 
/*
============================================================================================================================================
 Customisable Menu Options For Buttons (Hold & Press Options) 
============================================================================================================================================
*/
const string HoldButtons[]     = { "Select","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Dpad Down","Dpad Up","Dpad Left","Dpad Right","Triangle/Y","Cross/A","Circle/B","Square/X"};
const int8   HoldBtns []       = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3 , PS4_R3 ,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_TRIANGLE,PS4_CROSS, PS4_CIRCLE,PS4_SQUARE}; 
const int8   PressBtns[]       = { -1,  PS4_TRIANGLE,PS4_CROSS, PS4_CIRCLE,PS4_SQUARE,PS4_DOWN, PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_SHARE,PS4_OPTIONS,PS4_TOUCH,PS4_ACCX,PS4_ACCY,PS4_PS,XB1_XBOX,XB1_PR1,XB1_PR2,XB1_PL1,XB1_PL2};

int highLight;
int ActivateIndividualButton = 0;
define ActivateButtonCount = 10;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivatePressButton1[ActivateButtonCount];
int ActivatePressBtnIdx1[ActivateButtonCount];
function ButtonActivation(i){
	if(modNameIdx == modIdx++){ 
 		if(event_press(PS4_UP)){ 
 			highLight = Refresh(highLight ++,0,1);
 			updateDisplay = TRUE;
 		}
 		if(event_press(PS4_DOWN)){ 
 			highLight = Refresh(highLight --,0,1);
 			updateDisplay = TRUE;
 		} 
	    if(get_ival(Ads)){
	    	if(highLight == 0){
	    		if(event_press(PS4_RIGHT)){ 
	    			ActivateHoldBtnIdx[i] = Refresh(ActivateHoldBtnIdx[i] + 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			ActivateHoldBtnIdx[i] = Refresh(ActivateHoldBtnIdx[i] - 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    		    updateDisplay = TRUE;
	    		} 
	    	}
	    	if(highLight == 1){ 
	    		if(event_press(PS4_RIGHT)){ 
	    			ActivatePressBtnIdx[i] = Refresh(ActivatePressBtnIdx[i] + 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			ActivatePressBtnIdx[i] = Refresh(ActivatePressBtnIdx[i] - 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    		    updateDisplay = TRUE;
	    		} 
	    	} 
        }
        if(highLight == 0){
       		rect_oled(115,30, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,30, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(highLight == 1){
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		}   
        print(centerPosition(getStringLength(HoldButtons[ActivateHoldBtnIdx[i]]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,HoldButtons[ActivateHoldBtnIdx[i]])
        print(centerPosition(getStringLength(pressButtons[ActivatePressBtnIdx[i]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,pressButtons[ActivatePressBtnIdx[i]])
     }  
 }
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivatePressButton1[i]        = PressBtns[clamp(ActivatePressBtnIdx1[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(singleProfileBtnIdx, 0, sizeof(PressBtns))];   
    }
    return;   
} 
/*
==============================================================================================================================================
 Customisable Menu Options For Re-Map Buttons Via OLED
==============================================================================================================================================
*/
const int8 RemapBtns  [] = 
{ -1,PS4_L2,PS4_R2,PS4_L1,PS4_R1,PS4_L3,PS4_R3,PS4_TRIANGLE,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT,PS4_SHARE,PS4_OPTIONS,PS4_TOUCH,PS4_ACCX,PS4_ACCY,PS4_PS,XB1_XBOX,XB1_PR1,XB1_PR2,XB1_PL1,XB1_PL2}; 
const string AllButtons[] = 
{"Remap Btn","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","TRIANGLE/Y","CROSS/A","CIRCLE/B","SQUARE/X","DOWN","UP","LEFT","RIGHT","SHARE/VIEW","OPTIONS/MENU","TOUCH/SYNC","ACCX/SHARE","ACCY",
"PS","XBOX","XB1 PR1","XB1 PR2","XB1 PL1","XB1 PL2"};
function RemapButtons(ActiveBtn,RemapBtn){ 
	if(get_ival(ActiveBtn) || event_press(ActiveBtn)){ 
		set_val(RemapBtn,100);
		set_val(ActiveBtn,0);
	}
}
define InitiateButtons = 3;
int ActiveButtonRemap[InitiateButtons]
int RemapButtonActive[InitiateButtons]
int AllButtonsIdx[InitiateButtons]
int AllButtonsOneIdx[InitiateButtons]

function RemapButtonsConfig(){
    
    for (i = 0; i < InitiateButtons; i++) 
    {
    	ActiveButtonRemap[i] = RemapBtns[clamp(AllButtonsIdx[i], 0, sizeof(RemapBtns))];
    	RemapButtonActive[i] = RemapBtns[clamp(AllButtonsOneIdx[i], 0, sizeof(RemapBtns))];	
    }
    return;   
}
function ButtonConfig(i){ 
	if(modNameIdx == modIdx++)
 	{ 
 		if(event_press(PS4_UP)){ 
 			highLight = Refresh(highLight ++,0,1);
 			updateDisplay = TRUE;
 		}
 		if(event_press(PS4_DOWN)){ 
 			highLight = Refresh(highLight --,0,1);
 			updateDisplay = TRUE;
 		} 
	    if(get_ival(Ads)){
	    	if(highLight == 0){
	    		if(event_press(PS4_RIGHT)){ 
	    			AllButtonsIdx[i] = Refresh(AllButtonsIdx[i] + 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			AllButtonsIdx[i] = Refresh(AllButtonsIdx[i] - 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    		    updateDisplay = TRUE;
	    		} 
	    	}
	    	if(highLight == 1){ 
	    		if(event_press(PS4_RIGHT)){ 
	    			AllButtonsOneIdx[i] = Refresh(AllButtonsOneIdx[i] + 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			AllButtonsOneIdx[i] = Refresh(AllButtonsOneIdx[i] - 1,0,getStringCount(modIdxRange[modNameIdx][4]));
	    		    updateDisplay = TRUE;
	    		} 
	    	} 
        }
		if(highLight == 0){
   			rect_oled(115,30, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,30, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(highLight == 1){
	    	rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		} 
		print(centerPosition(getStringLength(AllButtons[AllButtonsIdx[i]]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,AllButtons[AllButtonsIdx[i]])
        print(centerPosition(getStringLength(AllButtons[AllButtonsOneIdx[i]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,AllButtons[AllButtonsOneIdx[i]])
	}  
} 
/*
============================================================================================================================================
  Unmap Buttons Config ()                                                                                                                     
============================================================================================================================================
*/
const string UnmapButtons[] = 
{"Unmap Btn","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","TRIANGLE/Y","CROSS/A","CIRCLE/B","SQUARE/X","DOWN","UP","LEFT","RIGHT","SHARE/VIEW","OPTIONS/MENU","TOUCH/SYNC","ACCX/SHARE","ACCY",
"PS","XBOX","XB1 PR1","XB1 PR2","XB1 PL1","XB1 PL2"};

define UnmapButtonId = 3;
int UnmapButton[UnmapButtonId]
int UnmapBtnIdx[UnmapButtonId]

function UnmapButtonsConfig(){
    
    for (i = 0; i < UnmapButtonId; i++) 
    {	
   	 	UnmapButton[i] = RemapBtns[clamp(UnmapBtnIdx[i], 0, sizeof(RemapBtns))]; 	
    }
    return;   
}
function UnmapButtonID(UnmappedButtonID){ 
	set_val(UnmappedButtonID,0);
} 
/*
===========================================================================================================================================
 Recoil On The Fly Adjustments Via Menu Button Options
===========================================================================================================================================
*/
function ButtonActivationAR(i){
	if(modNameIdx == modIdx++){ 
 		if(event_press(PS4_UP)){ 
 			highLight = Refresh(highLight ++,0,1);
 			updateDisplay = TRUE;
 		}
 		if(event_press(PS4_DOWN)){ 
 			highLight = Refresh(highLight --,0,1);
 			updateDisplay = TRUE;
 		} 
	    if(get_ival(Ads)){
	    	if(highLight == 0){
	    		if(event_press(PS4_RIGHT)){ 
	    			ActivatePressBtnIdx1[i] = Refresh(ActivatePressBtnIdx1[i] + 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			ActivatePressBtnIdx1[i] = Refresh(ActivatePressBtnIdx1[i] - 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    		    updateDisplay = TRUE;
	    		} 
	    	}
	    	if(highLight == 1){ 
	    		if(event_press(PS4_RIGHT)){ 
	    			ActivatePressBtnIdx[i] = Refresh(ActivatePressBtnIdx[i] + 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    			updateDisplay = TRUE;
	    		}
	    		if(event_press(PS4_LEFT)){ 
	    			ActivatePressBtnIdx[i] = Refresh(ActivatePressBtnIdx[i] - 1,0,getStringCount(modIdxRange[modNameIdx][5]));
	    		    updateDisplay = TRUE;
	    		} 
	    	} 
        }
        if(highLight == 0){
       		rect_oled(115,30, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,30, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(highLight == 1){
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		}   
        print(centerPosition(getStringLength(pressButtons[ActivatePressBtnIdx1[i]]),OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,pressButtons[ActivatePressBtnIdx1[i]])
        print(centerPosition(getStringLength(pressButtons[ActivatePressBtnIdx[i]]),OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,pressButtons[ActivatePressBtnIdx[i]])
     }  
 }
/*
==========================================================================================================================
 String Lists For Limits Using Swizzy's String Count Function 
==========================================================================================================================
*/
const string Toggle    []      = {"Off","On"};
const string standardAR[]      = {"Off","Legacy","Rumble"};
const string progressiveAR[]   = {"Off","Standard","Rumble","Hybrid"};
const string taylorAssist[]    = {"Choosa AA Version","Version 4","Version 5","V5 + SpeedBoost","V6","V6 ++"}; 
const string burstFireMode[]   = {"Off","Auto Mode","Semi Mode"};
const string slideType[]       = {"Off","Mw/Vanguard","ColdWar"};
const string qScopeToggle[]    = {"Off","Release Ads","On Ads"};
const string arActivation[]    = {"Ads & Fire","Fire Only","Ads+Fire & Fire"}; 
const string fireModsType[]    = {"Fire Only","Ads + Bumper"}; 
const string aimAssistType[]   = {"Ads Or Fire","Ads & Fire","Fire Only","Ads&Fire Or Fire"}; 
const string miscFireTypes[]   = {"Fire Only","Ads & Fire"};
const string dropShotTypes[]   = {"Ads & Fire+Crouch","Ads & Fire Only","Fire Only"};
const string bunnyHoppy[]      = {"Off","Hold" ,"Toggle w/JumpBtn"};
const string VMSpeed[]         = {"0","-2","-4","-6"};
const string BtnLayouts[]      = {"Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped"}
const string controllerStick[] = {"Default","Southpaw","Legacy","Legacy Southpaw"};
const string pressButtons[]
= { "Select","Triangle/Y","Cross/A","Circle/B","Square/X","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Share/View","Options/Menu","Touch/Sync","Accx/Share","Accy","PS Btn","Xbox Btn","Xbx PR1","Xbx PR2","Xbx PL1","Xbx PL2"};
const string curveType      [] = {"Select Type","Polar","Linear","Mixed",""};
const string circularCurve[] = {"Circular","Tall Oval","Wide Oval","Vortex Oval","Spiral","Helix","KITT","Vertical Flare","Tartan Army","Jupiter","Bishop","Blade","Oscilirate",""};
const string squareCurve  [] = {"Diamond","Tall Diamond","Wide Diamond","Spiral Prism","Spiral Diamond","Helix Diamond","KITT","Vertical Flare","Tartan Army","Jupiter","Bishop","Blade","Oscilirate",""}; 
const string mixedCurve   [] = {"Hexagon","Tall Hex","Wide Hex","Spiral HexV1","SpiralHexV2","Helix Hex","KittHex","Vertical Hex","Tartan Hex","Jupiter Hex","Bishop Hex","Blade Hex","OscilirateHex",""}; 

function getStringCount(arrayIdx) { 
 i = 0;
 if(arrayIdx ==  0) { while (standardAR      [i] != -1) { i++; } }	
 if(arrayIdx ==  1) { while (progressiveAR   [i] != -1) { i++; } }	
 if(arrayIdx ==  2) { while (taylorAssist    [i] != -1) { i++; } }
 if(arrayIdx ==  3) { while (Toggle          [i] != -1) { i++; } }
 if(arrayIdx ==  4) { while (burstFireMode   [i] != -1) { i++; } }
 if(arrayIdx ==  5) { while (slideType       [i] != -1) { i++; } }
 if(arrayIdx ==  6) { while (qScopeToggle    [i] != -1) { i++; } }
 if(arrayIdx ==  7) { while (arActivation    [i] != -1) { i++; } }
 if(arrayIdx ==  8) { while (aimAssistType   [i] != -1) { i++; } }
 if(arrayIdx ==  9) { while (fireModsType    [i] != -1) { i++; } }
 if(arrayIdx == 10) { while (miscFireTypes   [i] != -1) { i++; } }
 if(arrayIdx == 11) { while (dropShotTypes   [i] != -1) { i++; } }
 if(arrayIdx == 12) { while (BtnLayouts      [i] != -1) { i++; } }
 if(arrayIdx == 13) { while (controllerStick [i] != -1) { i++; } }
 if(arrayIdx == 14) { while (AllButtons      [i] != -1) { i++; } }
 if(arrayIdx == 15) { while (UnmapButtons    [i] != -1) { i++; } }
 if(arrayIdx == 16) { while (HoldButtons     [i] != -1) { i++; } }
 if(arrayIdx == 17) { while (pressButtons    [i] != -1) { i++; } }
 if(arrayIdx == 18) { while (bunnyHoppy      [i] != -1) { i++; } }
 if(arrayIdx == 19) { while (VMSpeed         [i] != -1) { i++; } }
 
 return i - 1;
}
/*                                                                                                
============================================================================================================================================
  Custom Name                                                                                                                            
============================================================================================================================================
*/  
define Y  = 32; 
define Y2 = 35;
int Ascii[11];
int AsciiIndex;
int LowerCase;
function DisplayAscii(Position){ 
putc_oled(1,Ascii[0])
puts_oled(26,Position,0,1,1);
putc_oled(1,Ascii[1])
puts_oled(33,Position,0,1,1);
putc_oled(1,Ascii[2])
puts_oled(40,Position,0,1,1);
putc_oled(1,Ascii[3])
puts_oled(47,Position,0,1,1);
putc_oled(1,Ascii[4])
puts_oled(54,Position,0,1,1);
putc_oled(1,Ascii[5])
puts_oled(61,Position,0,1,1);
putc_oled(1,Ascii[6])
puts_oled(68,Position,0,1,1);
putc_oled(1,Ascii[7])
puts_oled(75,Position,0,1,1);
putc_oled(1,Ascii[8])
puts_oled(82,Position,0,1,1);
putc_oled(1,Ascii[9])
puts_oled(89,Position,0,1,1);
putc_oled(1,Ascii[10])
puts_oled(96,Position,0,1,1);
	
} 
function NameChange(){ 

	if(modNameIdx == modIdx++)  
 	{ 
 		if(event_press(PS4_CROSS)){ 
			LowerCase =! LowerCase;
			if(LowerCase)
				Ascii[AsciiIndex] = 97; 
			else
				Ascii[AsciiIndex] = 65;
				
			updateDisplay = TRUE;
		} 
		if(event_press(PS4_SQUARE)){ 
			Ascii[AsciiIndex] = 32;
			updateDisplay = TRUE;
		} 
		if(event_press(PS4_RIGHT)){ 
			AsciiIndex = Refresh(AsciiIndex + 1,0,10);
			updateDisplay = TRUE;
		}
		if(event_press(PS4_LEFT)){ 
			AsciiIndex = Refresh(AsciiIndex - 1,0,10);
		    updateDisplay = TRUE;
		} 
	    if(event_press(PS4_UP)){ 
			Ascii[AsciiIndex] = Refresh(Ascii[AsciiIndex] + 1,33,122);
			updateDisplay = TRUE;
		}
		if(event_press(PS4_DOWN)){ 
			Ascii[AsciiIndex] = Refresh(Ascii[AsciiIndex] - 1,33,122);
		    updateDisplay = TRUE;
		} 
	    if(AsciiIndex == 0){
	    	line_oled(27,44,30,44, 2, 1 );
	   	}
	   	else if(AsciiIndex == 1){ 
	   		line_oled(34,44,37,44, 2, 1 );
	   	}
	   	else if(AsciiIndex == 2){ 
	   		line_oled(41,44,44,44, 2, 1 );
	    }
	   	else if(AsciiIndex == 3){ 
	   		line_oled(48,44,51,44,2, 1 );
	    }
	   	else if(AsciiIndex == 4){ 
	   		line_oled(55,44,58,44, 2, 1 );
	    }
	    else if(AsciiIndex == 5){ 
	   		line_oled(62,44,65,44, 2, 1 );
	    }
	    else if(AsciiIndex == 6){ 
	   		line_oled(69,44,72,44, 2, 1 );
	    }
	    else if(AsciiIndex == 7){ 
	   		line_oled(76,44,79,44, 2, 1 );
	    }
	    else if(AsciiIndex == 8){ 
	   		line_oled(82,44,85,44, 2, 1 );
	    }
	    else if(AsciiIndex == 9){ 
	   		line_oled(90,44,93,44, 2, 1 );
	    }
	    else if(AsciiIndex == 10){ 
	   		line_oled(97,44,100,44, 2, 1 );
	    }
	}
}
 /*
============================================================================================================================================
  Display Recoil On The Fly ()                                                                                                                      
============================================================================================================================================
*/
function DisplayAR() { 
	screenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE);
	print(centerPosition(getStringLength(valNames[0]),OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,valNames[0]);
    print(centerPosition(getStringLength(profileId[profileIdx]),OLED_FONT_SMALL_WIDTH),16,OLED_FONT_SMALL,OLED_WHITE,profileId[profileIdx]);
	NumberToString(VerticalStrength[profileIdx], FindDigits(VerticalStrength[profileIdx]))
}
/*
============================================================================================================================================
  LED Lights ()                                                                                                                      
============================================================================================================================================
*/ 
int LedOn,LedOff;
function LedBlink(f_on,f_off) {
	LedOn  = f_on;
	LedOff = f_off;
	combo_run(BLINK);
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );	
    
/*
============================================================================================================================================
 Get String Length (Made By Swizzy) 
============================================================================================================================================
*/
int stringLength;
function getStringLength(offset) { 
    stringLength = 0;
    do { 
        offset++;
        stringLength++;
    } while (duint8(offset));
    return stringLength;
 } 
/*
============================================================================================================================================
  NumberToString () (Made By Batts)                                                                                                                     
============================================================================================================================================
*/   
int bufferIndex;
int charIndex,digitIndex;
function NumberToString(f_val,f_digits) {
    bufferIndex = 1;  
    digitIndex = 10000;
    if(f_val < 0) {                    //--neg numbers
         putc_oled(bufferIndex,45);    //--add leading "-"
         bufferIndex += 1;
         f_val = abs(f_val);
    } 
    for(charIndex = 5; charIndex >= 1; charIndex--) {
        if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++; 
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);//--add ","
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    } 
    puts_oled(centerPosition(bufferIndex - 1,OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,bufferIndex - 1,OLED_WHITE);
} 
int logVal;
function FindDigits(num) {
   logVal = 0;
   do {
      num /= 10;
      logVal++;
   } while (num);
   return logVal;
}
/*
============================================================================================================================================
 Center X Function (Made By Batts) 
============================================================================================================================================
*/
function centerPosition(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
/*
============================================================================================================================================
 Admin Values Array 
============================================================================================================================================
*/
int adminAimAssistValues[3];
const string adminAA[] = {"Default","TD21 TryHard","Wayne0 PC","Wayne0 Console","Wayne0 Sniper","Ceorin Confundo","Ceorin Obliviate1","Ceorin Obliviate2","BUDDHA ROTTENBODY","BUDDHA EL DIABLO","BUDDHA TD21MAFIOSO","Booba Vibes","Booba Vibes Too","Booba Snipes","ZK JEFE AR/LMG","ZK JEFE SMG","ZK JEFE SNIPES","CROW DeMeo","CROW Luca Brasi",
"CROW Strauss","MattJK AtomV2","MattJK Particle","MattJK Molecule","KSC HELLRAISER13","KSC HELLRAISER14","KSC SNIPER","Hstlr GG AR/Snipe","Hstlr GG SMG","TazRebirthWarrior","Taz Multi Warrior","Mike_S1","Mike_S2","Mike_S3","Scuba94SnapSh0t 1","Scuba94SnapSh0t 2","Valdy Beams","Valdy Rush", 
"McHammer OneTime","BW Sticky Sauce P","BW Sticky Sauce S","BW Sticky Sauce C","Katastrophe","Katastrophe Magic","KatsUranium","Queso Range","Queso Close","Queso Sniper",""};
const int16 adminValues[][] = { // AA version 4 & 5 & 6                                                           
//Type-Shpe-SDir-ASpd-Spd-Rad-BTog-BRed-BStr-BSpd-TTog-TStr-TSpd-BattsSize-BattsTime  
{ 0  ,  0 , 0  ,  8 ,15, 15 , 0  , 0  , 5  , 5  , 0  , 2  , 2  ,   10    ,   20    }, // Default Settings 
{ 1  ,  1 , 1  , 12 ,17, 17 , 1  , 0  , 2  , 2  , 0  , 2  , 3  ,   10    ,   20    }, // TD21 \\
{ 2  ,  0 , 1  , 10 ,15, 15 , 0  , 0  , 5  , 5  , 1  , 3  , 4  ,   10    ,   20    }, // Wayne0 - PC \\
{ 2  ,  0 , 1  , 10 ,15, 10 , 0  , 0  , 2  , 2  , 1  , 3  , 4  ,   10    ,   20    }, // Wayne0 - Console \\
{ 2  ,  6 , 0  , 30 ,30,  5 , 0  , 0  , 0  , 0  , 1  , 3  , 4  ,    0    ,    0    }, // Wayne0 - Sniper \\
{ 3  ,  3 , 1  , 15 ,11,  6 , 1  , 0  , 5  , 5  , 1  , 2  , 3  ,    0    ,    0    }, // Ceorin - "Confundo" 	 \\
{ 2  ,  1 , 1  , 11 , 9,  7 , 1  , 0  , 5  , 5  , 1  , 2  , 3  ,    0    ,    0    }, // Ceorin - "Obliviate1" 		 \\ 
{ 2  ,  5 , 1  , 20 ,24, 11 , 1  , 0  , 2  , 2  , 1  , 3  , 3  ,    0    ,    0    }, // Ceorin - "Obliviate2" 		 \\
{ 2  ,  8 , 0  , 20 ,26, 14 , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,    5    ,   10    }, // Buddha - "RottenBody" \\
{ 2  ,  3 , 1  , 13 ,15, 11 , 0  , 0  , 0  , 0  , 1  , 3  , 3  ,   10    ,   20    }, // Buddha - "El Diablo" \\
{ 2  ,  5 , 1  , 12 ,15, 12 , 0  , 0  , 0  , 0  , 1  , 2  , 3  ,   12    ,   10    }, // Buddha - "TD21Mafioso" \\
{ 2  ,  4 , 1  , 11 ,11,  9 , 1  , 0  , 5  , 7  , 1  , 2  , 3  ,    9    ,   20    }, // Booba - "Booba Vibes" \\
{ 2  ,  4 , 1  , 13 ,13, 13 , 1  , 0  , 5  , 7  , 1  , 3  , 3  ,    9    ,   20    }, // Booba - "Booba Vibes Too" \\
{ 2  ,  4 , 1  , 11 ,11,  3 , 1  , 0  , 2  , 5  , 1  , 2  , 3  ,    9    ,   20    }, // Booba - "Booba Snipes" \\
{ 1  ,  4 , 1  , 16 ,14,  9 , 1  , 0  , 5  ,10  , 1  , 2  , 0  ,    0    ,    0    }, // Zkultra - "ZK JEFE AR/LMG " \\
{ 2  ,  4 , 1  , 20 ,18, 13 , 1  , 0  , 8  ,10  , 1  , 4  , 2  ,   25    ,   10    }, // Zkultra - "ZK JEFE SMG" \\
{ 1  ,  1 , 1  , 10 ,10,  6 , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,    0    ,    0    }, // Zkultra - "ZK JEFE SNIPES" \\
{ 2  ,  6 , 0  , 16 ,16, 11 , 0  , 0  , 0  , 0  , 1  , 5  , 5  ,   10    ,   40    }, // Crow - "DeMeo" \\
{ 3  , 12 , 1  , 30 ,30,  8 , 0  , 0  , 0  , 0  , 1  , 5  , 5  ,   10    ,   40    }, // Crow - "Luca Brasi" \\
{ 1  ,  0 , 1  ,  9 , 9, 12 , 0  , 0  , 0  , 0  , 1  , 2  , 3  ,   10    ,   40    }, // Crow - "Strauss" \\
{ 1  ,  0 , 1  , 26 ,80, 16 , 1  , 1  , 2  , 1  , 1  , 5  , 3  ,   25    ,   30    }, // MattJK - "MattJK AtomV2" \\
{ 2  ,  6 , 0  , 23 ,42, 19 , 1  , 1  , 4  , 2  , 1  , 3  , 3  ,    0    ,    0    }, // MattJK - "MattJK Particle" \\
{ 1  ,  0 , 0  , 20 ,40, 22 , 0  , 0  , 0  , 0  , 1  , 3  , 3  ,    0    ,    0    }, // MattJK - MattJK Molecule" \\
{ 3  ,  1 , 0  ,  9 , 9, 13 , 0  , 0  , 0  , 0  , 1  , 2  , 4  ,    0    ,    0    }, // KSC HELLRAISER13 \\
{ 3  ,  6 , 0  , 13 ,13, 18 , 0  , 0  , 0  , 0  , 1  , 4  , 6  ,    0    ,    0    }, // KSC HELLRAISER14 \\
{ 2  ,  7 , 0  , 21 ,18, 4  , 0  , 0  , 0  , 0  , 1  , 2  , 3  ,    0    ,    0    }, // KSC SNIPER \\
{ 1  ,  0 , 1  , 20 ,20,  8 , 1  , 1  ,2   ,13  , 0  , 0  , 0  ,    5    ,   10    }, // Hstlr "Hstlr GG AR/Snipe" \\
{ 2  ,  1 , 1  , 20 ,20,  8 , 1  , 0  ,6   ,13  , 1  , 2  , 3  ,    0    ,    0    }, // Hstlr - "Hstlr GG SMG"	\\
{ 1  ,  8 , 1  ,  7 ,10,  8 , 1  , 1  , 3  , 4  , 1  , 3  , 4  ,    0    ,    0    }, // Taz - "TazRebirthWarrior" \\
{ 3  ,  5 , 1  ,  9 ,11, 10 , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,    0    ,    0    }, // Taz - "Taz Multi Warrior" \\
{ 2  ,  4 , 0  , 11 ,11, 10 , 1  , 0  , 5  , 7 ,  1  , 2  , 3  ,    9    ,   20    }, // Mike_S1 - "Mike_S1" \\ 
{ 2  ,  4 , 0  , 10 ,15, 15 , 1  , 0  , 5  , 7  , 1  , 3  , 3  ,    9    ,   20    }, // Mike_S2 - "Mike_S2" \\
{ 1  ,  0 , 0  , 11 ,13, 12 , 1  , 0  , 5  , 7  , 1  , 3  , 3  ,    9    ,   20    }, // Mike_S3 - "Mike_S3" \\
{ 2  ,  6 , 0  , 10 ,12, 10 , 1  , 0  , 4  , 8  , 1  , 3  , 4  ,    9    ,   20    }, // Scuba94 - "Scuba94SnapSh0t 1" \\
{ 2  ,  6 , 1  , 11 ,13, 14 , 1  , 0  , 4  , 8  , 1  , 5  , 6  ,    9    ,   20    }, // Scuba94 - "Scuba94SnapSh0t 2" \\
{ 2  ,  4 , 1  , 13 ,13, 11 , 1  , 0  , 5  , 5  , 1  , 2  , 3  ,    9    ,   20    }, // ValdyClapz - "Valdy Beams" \\
{ 2  ,  4 , 1  , 15 ,15, 15 , 1  , 0  , 5  , 5  , 1  , 3  , 3  ,    9    ,   20    }, // ValdyClapz - "Valdy Rush"  \\
{ 1  ,  4 , 1  , 23 ,21,  9 , 0  , 0  , 0  , 0  , 1  , 4  , 3  ,    6    ,   10    }, // McHammer - "McHammer OneTime" \\
{ 2  ,  4 , 1  , 15 ,15,  9 , 1  , 0  , 2  , 2  , 1  , 2  , 2  ,    9    ,   20    }, // BlueWaffle - "BW Sticky Sauce P" \\
{ 2  ,  4 , 1  , 10 ,15, 13 , 1  , 0  , 7  , 5  , 1  , 2  , 5  ,   15    ,   30    }, // BlueWaffle - "BW Sticky Sauce S" \\
{ 1  ,  0 , 1  , 25 ,15,  7 , 0  , 0  , 0  , 0  , 1  , 1  , 4  ,    0    ,    0    }, // BlueWaffle - "BW Sticky Sauce C" \\
{ 3  ,  8 , 1  , 25 ,40,  6 , 1  , 1  , 4  , 5  , 1  , 2  , 3  ,   20    ,   20    }, // Katastrophe  \\
{ 3  ,  6 , 0  , 20 ,30,  6 , 1  , 1  , 4  , 5  , 1  , 2  , 3  ,   20    ,   20    }, // Katastrophe Magic \\
{ 2  ,  8 , 1  , 15 ,20,  3 , 1  , 1  , 2  , 3  , 1  , 2  , 3  ,   20    ,   20    }, // KatsUranium \\
{ 1  ,  3 , 1  , 10 ,15,  9 , 1  , 0  , 5  , 7  , 1  , 2  , 3  ,    9    ,   20    }, // Queso Range \\
{ 1  ,  3 , 1  , 13 ,13, 13 , 1  , 0  , 5  , 7  , 1  , 3  , 3  ,    9    ,   20    }, // Queso Close \\
{ 2  ,  6 , 1  , 25 ,15,  5 , 0  , 0  , 0  , 0  , 1  , 2  , 4  ,    0    ,    0    }  // Queso Sniper \\
};

const int16 adminToggle[][] = { 
{ 0 , 0 },// Default   \\
{ 1 , 0 },// TD21      \\
{ 5 , 1 },// Wayne 1   \\
{ 5 , 1 },// Wayne 2   \\
{ 5 , 0 },// Wayne 3   \\
{ 5 , 0 },// Ceorin 1  \\
{ 5 , 0 },// Ceorin 2  \\
{ 5 , 0 },// Ceoirn 3  \\
{ 5 , 1 },// Buddha 1  \\
{ 5 , 1 },// Buddha 2  \\
{ 5 , 1 },// Buddha 3  \\
{ 5 , 1 },// Booba 1   \\
{ 5 , 1 },// Booba 2   \\
{ 5 , 1 },// Booba 3   \\
{ 5 , 0 },// Zkultra 1 \\ 
{ 5 , 1 },// Zkultra 2 \\ 
{ 5 , 0 },// Zkultra 3 \\ 
{ 5 , 1 },// Crow 1    \\
{ 5 , 1 },// Crow 2    \\
{ 5 , 1 },// Crow 3    \\
{ 5 , 1 },// MattJK 1  \\
{ 5 , 0 },// MattJK 2  \\
{ 5 , 0 },// MattJK 3  \\
{ 5 , 0 },// KSC 1	   \\
{ 5 , 0 },// KSC 2     \\ 
{ 2 , 0 },// KSC 3     \\ 
{ 5 , 0 },// Hstlr 1   \\
{ 5 , 0 },// Hstlr 2   \\
{ 5 , 0 },// Taz 1     \\
{ 5 , 0 },// Taz 2     \\
{ 5 , 1 },// Mike_S1   \\
{ 5 , 1 },// Mike_S2   \\
{ 5 , 1 },// Mike_S3   \\
{ 5 , 1 },// Scuba94 1 \\
{ 5 , 1 },// Scuba94 2 \\
{ 5 , 1 },// ValdyClapz 1 \\
{ 5 , 1 },// ValdyClapz 2 \\
{ 3 , 1 },// McHammer 1 \\
{ 5 , 1 },// BlueWaffle 1 \\
{ 5 , 1 },// BlueWaffle 2 \\
{ 5 , 0 },// BluesWaffle3 \\
{ 5 , 1 },// Katastrophe 1 \\
{ 5 , 1 },// Katastrophe 2 \\
{ 5 , 1 },// Katastrophe 3\\
{ 5 , 1 },// QUESO 1 \\
{ 5 , 1 },// QUESO 2 \\
{ 5 , 0 } // QUESO 3 \\
};                                            


int Ads,Fire,Tactical,Lethal,Crouch,Jump,Reload,Melee,Swap,Sprint,Ping;    
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		

function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
 /*
============================================================================================================================================
  Controller Stick Layouts ()                                                                                                                      
============================================================================================================================================
*/
int AimRY,AimRX,MoveLY,MoveLX;
const uint8  StickLayouts[][] = { 
//  0       1      2      3    //
{ PS4_RY,PS4_RX,PS4_LY,PS4_LX},// Default Sticks 
{ PS4_LY,PS4_LX,PS4_RY,PS4_RX},// SouthPaw
{ PS4_RY,PS4_LX,PS4_LY,PS4_RX},// Legacy 
{ PS4_LY,PS4_RX,PS4_LY,PS4_LX} // Legacy SouthPaw
};
function ControllerRSLS(sticks){ 
  AimRY      = StickLayouts[sticks][0];
  AimRX      = StickLayouts[sticks][1];
  MoveLY     = StickLayouts[sticks][2];
  MoveLX     = StickLayouts[sticks][3];
 
 }
  /*
============================================================================================================================================
  Block Buttons()                                                                                                                      
============================================================================================================================================
*/
 const uint8 BlockButtons [] = {  
  PS4_L2,PS4_OPTIONS,PS4_LEFT, PS4_RIGHT,PS4_UP,PS4_DOWN,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_TRIANGLE,PS4_L1,PS4_R1,PS4_R2};
  
 function BlockButtonPress (){  
    for(i = 0; i < 13; i++){
    	if(get_ival(BlockButtons[i]) || event_press(BlockButtons[i])){
        	set_val(BlockButtons[i],0);
        	set_val(Tactical,0);
        	set_val(Ping,0);
        	set_val(Melee,0);
        }    
    }
}
/*
============================================================================================================================================
  Menu Scroll ()                                                                                                                      
============================================================================================================================================
*/
int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function menuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 50;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 20; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(MENU_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 53,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 20;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
const uint8 MENU_SCROLL_TEXT[] = {
//    1			2		   3	4	     5		    6		 7		  8		    9      10	     11	     12		  13	   14		 15		  16		17        18
     
     space, space, P , R , E ,S ,S ,space , U,P , space , O , R , space , D , O , W , N , space , space,
     
     P , R , E ,S ,S ,space , L,E,F,T, space , O , R , space , R, I , G ,H, T , space,
     
     space, space, T,O , space, C,_Y,C,L,E , space , T , H , E , space , M,O,D,S, space,
     
     space, space, space,P,R,E,S,S, space, A,space,slash,space,C,R,O,S,S,space,space,
     
     space, T,O,space,E,N,T,E,R,space,A,N,_Y,space,M,E,N,U,S,space,
     
     space,T,O,space,E,X,I,T,space,A,N,_Y,space,M,E,N,U,S,space,space,
     
     space,space,P,R,E,S,S , space, B, space,slash,space,C,I,R,C,L,E,space,space,
     
     space, P , R , E ,S ,S ,space , _Y, space , slash,space,T,R,I,A,N,G,L,E,space,
     
     space,T,O,space,C,H,A,N,G,E,space,P,R,O,F,I,L,E,S,space,
     
     space,space,space,H,O,L,D,space,L,T,space,slash,space,L,_2,space,space,space,space,space,
     
     P , R , E ,S ,S ,space , L,E,F,T, space , O , R , space , R, I , G ,H, T , space,
     
     space, space, P , R , E ,S ,S ,space , U,P , space , O , R , space , D , O , W , N , space , space,
     
     space ,space, T,O , space, C,H,A,N,G,E,space,V,A,L,U,E,S,space,space 
          
};  
define  _0 = 48,   A = 65,   K = 75,   U =  85,   e = 101,   o = 111,   _y       = 121,    _plus      = 43, slash     = 47 , _dot     =  46, _minus = 45;
define  _1 = 49,   B = 66,   L = 76,   V =  86,   f = 102,   p = 112,   z       = 122;
define  _2 = 50,   C = 67,   M = 77,   W =  87,   g = 103,   q = 113,   space   =  32;
define  _3 = 51,   D = 68,   N = 78,   X =  88,   h = 104,   r = 114,   bang    =  33;
define  _4 = 52,   E = 69,   O = 79,   _Y =  89, _i = 105,   s = 115,   quote   =  34;
define  _5 = 53,   F = 70,   P = 80,   Z =  90,   j = 106,   t = 116,   hash    =  35;
define  _6 = 54,   G = 71,   Q = 81,   a =  97,   k = 107,   u = 117,   dollar  =  36;
define  _7 = 55,   H = 72,   R = 82,   b =  98,   l = 108,   v = 118,   percent =  37;
define  _8 = 56,   I = 73,   S = 83,   c =  99,   m = 109,   w = 119,   and     =  38;
define  _9 = 57,   J = 74,   T = 84,   d = 100,   n = 110,  _x = 120,   tick    =  39;

define _left     = 133,   _right = 134,_up       = 131,_down     = 132,_cross    = 127, _circle   = 128, _triangle = 130;
 /*
============================================================================================================================================
  Bit Packing SPVARs ()                                                                                                                      
============================================================================================================================================
*/
// Use these for 32-bit SPVARs
define FULL_BITMASK = -1;
define MAX_BITS = 32;
define MAX_FW_BITS = 32;

function reset_spvar() {
	spvar_current_slot = SPVAR_20; // Change this to say where it's safe to start storing data
	spvar_current_bit = 0;
	spvar_current_value = 0;
}
function get_bit_count(val) {
/*	if (val == (1 << (MAX_FW_BITS - 1))) {
		return MAX_FW_BITS;
	}*/
	if (val < 0) {
		return get_bit_count(abs(val + 1));
	}
	spvar_tmp = 0;
	do {
		spvar_tmp++;
		val = val >> 1; // Shift the value down 1 bit
	} while (val);
	return spvar_tmp;
}
function get_bit_count2(min, max) {	
	spvar_tmp = max(get_bit_count(min), get_bit_count(max));
	if (is_signed2(min, max)) {
		spvar_tmp++;
	}
	return spvar_tmp;
}
function is_signed2(min, max) { return min < 0 || max < 0; }

function make_full_mask(bits) {	
	if (bits == MAX_FW_BITS) {
		return FULL_BITMASK;
	}
	return (FULL_BITMASK & (~(1 << (MAX_FW_BITS - 1)))) >> (MAX_FW_BITS - bits - 1);
}
function make_sign(bits) { return 1 << clamp(bits - 1, 0, MAX_FW_BITS - 1); }
function make_sign_mask(bits) { return ~make_sign(bits); }

function pack_u(val, bits) { return val & make_full_mask(bits); }
function pack_i(val, bits) {
	if (val < 0) {
		return (abs(val) & make_sign_mask(bits)) | make_sign(bits);	
	}
	return val & make_sign_mask(bits);
}
function unpack_i(val, bits) {
	if (val & make_sign(bits)) {
		return 0 - (val & make_sign_mask(bits));
	}
	return val & make_sign_mask(bits);
}

int spvar_current_bit;
int spvar_current_slot;
int spvar_current_value;
int spvar_tmp;
int spvar_bits;

function read_spvar_slot(slot) { return get_pvar(slot, 0-(FULL_BITMASK & (1 << (MAX_BITS - 1))), 0-((0-(FULL_BITMASK & (1 << (MAX_BITS - 1)))) + 1), 0); }

function save_spvar(val, min, max, save) {
	spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value	
	
	if (is_signed2(min, max)) {
		val = pack_i(val, spvar_bits); // Pack as signed value	
	}
	val = pack_u(val, spvar_bits); // Pack as unsigned value - because this is more inclusive than signed, we don't need an else here - just always do it (micro optimization)
	
	if (spvar_bits > MAX_BITS - spvar_current_bit) { // If we cannot fit the value here, we need to store what we can and move to the next slot
		spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add what we can to the current value
		set_pvar(spvar_current_slot, spvar_current_value); // Force save, we're moving to the next value		
		spvar_current_slot++; // Move to the next slot
		spvar_bits -= (MAX_BITS - spvar_current_bit); // Update the required bits according to our needs for the next slot
		val = val >> (MAX_BITS - spvar_current_bit); // Move the remaining bits to their new location
		spvar_current_bit = 0; // We've hit the end, so we start over
		spvar_current_value = 0; // Reset our value so we start clean
	}
	
	spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add the value to the current position
	spvar_current_bit += spvar_bits; // Increment the bit position
	if (spvar_current_bit >= MAX_BITS) {
		spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
		set_pvar(spvar_current_slot, spvar_current_value);
		spvar_current_slot++; // move to the next slot
		if (!spvar_current_bit) {
			spvar_current_value = 0; // Reset our value so we start clean
		}
	}
	if (save) {
		set_pvar(spvar_current_slot, spvar_current_value);
	}	
}

function read_spvar(min, max, _default) {
    spvar_current_value = read_spvar_slot(spvar_current_slot); // Load the value so we always have it where we need it to be
    spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value
    spvar_current_value = pack_u(spvar_current_value >> spvar_current_bit, spvar_bits); // Shift our bits into position
    
    if (spvar_bits > MAX_BITS - spvar_current_bit) { // if the value doesn't fit in this variable, we need to fetch the next value aswell and merge them accordingly
        spvar_current_slot++; // Move to the next slot
        spvar_tmp = read_spvar_slot(spvar_current_slot); // load the new slot into a temporary variable
        spvar_tmp = pack_u(spvar_tmp, spvar_bits - (MAX_BITS - spvar_current_bit)); // Get the bits we need
        spvar_tmp = spvar_tmp << (MAX_BITS - spvar_current_bit); // Shift the bits into their correct position
        spvar_current_value = pack_u(spvar_current_value, MAX_BITS - spvar_current_bit);
        spvar_current_value = spvar_current_value | spvar_tmp; // put all bits together again
        spvar_current_bit = spvar_current_bit - MAX_BITS; // Reset the bit position so we get the correct position next
    }    
    spvar_current_bit += spvar_bits; // move to the next variable position
    if (spvar_current_bit >= MAX_BITS) {
        spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
        spvar_current_slot++;
    }    
    spvar_current_value = pack_u(spvar_current_value, spvar_bits); // Extract all bits included for this value
    if (is_signed2(min, max)) { // Check if we have a sign bit
        spvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore signed value
    }
    if (spvar_current_value < min || spvar_current_value > max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead
        return _default;
    }
    return spvar_current_value;
}
function Load(){ 

	for(i = 0; i < 3; i++){ 
     	ToggleTaylorAssist[i] = adminToggle[adminAimAssistValues[i]][ 0];
        ToggleBattsAssist [i] = adminToggle[adminAimAssistValues[i]][ 1];
     	ToggleAAType      [i] = adminValues[adminAimAssistValues[i]][ 0]; 
		TaylorShapes      [i] = adminValues[adminAimAssistValues[i]][ 1]; 
		ShapeDirection    [i] = adminValues[adminAimAssistValues[i]][ 2];  
		AdsSpeed          [i] = adminValues[adminAimAssistValues[i]][ 3]; 
		TaylorAngle       [i] = adminValues[adminAimAssistValues[i]][ 4]; 
		TaylorRadius      [i] = adminValues[adminAimAssistValues[i]][ 5]; 
		ToggleBoostFire   [i] = adminValues[adminAimAssistValues[i]][ 6]; 
		BoostReducer      [i] = adminValues[adminAimAssistValues[i]][ 7]; 
		TaylorPBoostStr   [i] = adminValues[adminAimAssistValues[i]][ 8]; 
		TaylorABoostSpd   [i] = adminValues[adminAimAssistValues[i]][ 9]; 
		TaylorTracking    [i] = adminValues[adminAimAssistValues[i]][10]; 
		TrackingSize      [i] = adminValues[adminAimAssistValues[i]][11]; 
		TrackingSpeed     [i] = adminValues[adminAimAssistValues[i]][12]; 
		AimAssistSize     [i] = adminValues[adminAimAssistValues[i]][13]; 
		AimAssistTime     [i] = adminValues[adminAimAssistValues[i]][14];  
 	}

		
		 
	BurstFireHold       = get_pvar(SPVAR_1,1,990,510);
	BurstFireWait       = get_pvar(SPVAR_2,1,990 ,350);
	BurstFireRelease    = get_pvar(SPVAR_3,1,100 ,50);
	StrafeActiveTime    = get_pvar(SPVAR_4,1,2000,300);
	HeadShotHoldTime    = get_pvar(SPVAR_5,1,2000,800);
	MaxReloadTime   	= get_pvar(SPVAR_6,1,5000,1000);
	PingDelay           = get_pvar(SPVAR_7,1,5000,1000);
	QuickScopeDelay     = get_pvar(SPVAR_8,1,990 ,350);
	
	
	Ascii[0] 			= get_pvar(SPVAR_9,32,122,84);
	Ascii[1] 			= get_pvar(SPVAR_10,32,122,97);
	Ascii[2] 			= get_pvar(SPVAR_11,32,122,121);
	Ascii[3] 			= get_pvar(SPVAR_12,32,122,108);
	Ascii[4] 			= get_pvar(SPVAR_13,32,122,111);
	Ascii[5] 			= get_pvar(SPVAR_14,32,122,114);
	Ascii[6] 			= get_pvar(SPVAR_15,32,122,100);
	Ascii[7] 			= get_pvar(SPVAR_16,32,122,114);
	Ascii[8] 			= get_pvar(SPVAR_17,32,122,105);
	Ascii[9] 			= get_pvar(SPVAR_18,32,122,102);
	Ascii[10] 			= get_pvar(SPVAR_19,32,122,116);

	
	reset_spvar();


	adminAimAssistValues [0] = read_spvar(  0, 46, 0);
	adminAimAssistValues [1] = read_spvar(  0, 46, 0);
	adminAimAssistValues [2] = read_spvar(  0, 46, 0);
	ToggleAntirecoil    [0]= read_spvar(  0, 2,0);
	ToggleAntirecoil    [1]= read_spvar(  0, 2,0);
	ToggleAntirecoil    [2]= read_spvar(  0, 2,0);
	ToggleProgressive   [0]= read_spvar(  0, 3,0);
	ToggleProgressive   [1]= read_spvar(  0, 3,0);
	ToggleProgressive   [2]= read_spvar(  0, 3,0);
	ToggleTaylorAssist  [0]= read_spvar(  0, 5,adminToggle[adminAimAssistValues[0]][ 0]);
	ToggleTaylorAssist  [1]= read_spvar(  0, 5,adminToggle[adminAimAssistValues[1]][ 0]);
	ToggleTaylorAssist  [2]= read_spvar(  0, 5,adminToggle[adminAimAssistValues[2]][ 0]);
	ToggleBattsAssist   [0]= read_spvar(  0, 1,adminToggle[adminAimAssistValues[0]][ 1]);
	ToggleBattsAssist   [1]= read_spvar(  0, 1,adminToggle[adminAimAssistValues[1]][ 1]);
	ToggleBattsAssist   [2]= read_spvar(  0, 1,adminToggle[adminAimAssistValues[2]][ 1]);
	StrafeAssist        [0]= read_spvar(  0, 1,0);
	StrafeAssist        [1]= read_spvar(  0, 1,0);
	StrafeAssist        [2]= read_spvar(  0, 1,0);
	HeadShotAssist      [0]= read_spvar(  0, 1,0);
	HeadShotAssist      [1]= read_spvar(  0, 1,0);
	HeadShotAssist      [2]= read_spvar(  0, 1,0);
	
	ToggleRapidFire     [0]= read_spvar(  0, 1,0);
	ToggleRapidFire     [1]= read_spvar(  0, 1,0);
	ToggleRapidFire     [2]= read_spvar(  0, 1,0);
	ToggleBurstFire     [0]= read_spvar(  0, 2,0);
	ToggleBurstFire     [1]= read_spvar(  0, 2,0);
	ToggleBurstFire     [2]= read_spvar(  0, 2,0);
	ToggleCancelReload     = read_spvar(  0, 1,0);
	ToggleCrouchShot    [0]= read_spvar(  0, 1,0);
	ToggleCrouchShot    [1]= read_spvar(  0, 1,0);
	ToggleCrouchShot    [2]= read_spvar(  0, 1,0);
	ToggleJumpShot      [0]= read_spvar(  0, 1,0);
	ToggleJumpShot      [1]= read_spvar(  0, 1,0);
	ToggleJumpShot      [2]= read_spvar(  0, 1,0);
	ToggleDropShot      [0]= read_spvar(  0, 1,0);
	ToggleDropShot      [1]= read_spvar(  0, 1,0);
	ToggleDropShot      [2]= read_spvar(  0, 1,0);
	ToggleCancelSlide      = read_spvar(  0, 2,0);
	ToggleBunnyHop         = read_spvar(  0, 2,0);
	ToggleFastMelee     [0]= read_spvar(  0, 1,0);
	ToggleFastMelee     [1]= read_spvar(  0, 1,0);
	ToggleFastMelee     [2]= read_spvar(  0, 1,0);
	ToggleEnemyPing        = read_spvar(  0, 1,0);
	ToggleTaylorSens       = read_spvar(  0, 1,0);
	ToggleHoldBreath    [0]= read_spvar(  0, 1,0);
	ToggleHoldBreath    [1]= read_spvar(  0, 1,0);
	ToggleHoldBreath    [2]= read_spvar(  0, 1,0);
	ToggleQuickScope    [0]= read_spvar(  0, 2,0);
	ToggleQuickScope    [1]= read_spvar(  0, 2,0);
	ToggleQuickScope    [2]= read_spvar(  0, 2,0);
	AutoAim             [0]= read_spvar(  0, 1,0);
	AutoAim             [1]= read_spvar(  0, 1,0);
	AutoAim             [2]= read_spvar(  0, 1,0);
	vmSpeed                = read_spvar(  0, 1,0);
	ToggleSniperMode    [0]= read_spvar(  0, 1,0);
	ToggleSniperMode    [1]= read_spvar(  0, 1,0);
	ToggleSniperMode    [2]= read_spvar(  0, 1,0);
	standardARFireType  [0]= read_spvar(  0, 2,0);
	standardARFireType  [1]= read_spvar(  0, 2,0);
	standardARFireType  [2]= read_spvar(  0, 2,0);
	progressiveARFireType[0]= read_spvar( 0, 2,0);
	progressiveARFireType[1]= read_spvar( 0, 2,0);
	progressiveARFireType[2]= read_spvar( 0, 2,0);
	taylorFireType      [0] = read_spvar( 0, 3,0);
	taylorFireType      [1] = read_spvar( 0, 3,0);
	taylorFireType      [2] = read_spvar( 0, 3,0);
	battsFireType       [0] = read_spvar( 0, 3,0);
	battsFireType       [1] = read_spvar( 0, 3,0);
	battsFireType       [2] = read_spvar( 0, 3,0);
	rapidFireType       [0] = read_spvar( 0, 1,0);
	rapidFireType       [0] = read_spvar( 0, 1,0);
	rapidFireType       [0] = read_spvar( 0, 1,0);
	burstFireType       [0] = read_spvar( 0, 1,0);
	burstFireType       [1] = read_spvar( 0, 1,0);
	burstFireType       [2] = read_spvar( 0, 1,0);
	crouchShotFireType  [0] = read_spvar( 0, 1,0);
	crouchShotFireType  [1] = read_spvar( 0, 1,0);
	crouchShotFireType  [2] = read_spvar( 0, 1,0);
	jumpShotFireType    [0] = read_spvar( 0, 1,0);
	jumpShotFireType    [1] = read_spvar( 0, 1,0);
	jumpShotFireType    [2] = read_spvar( 0, 1,0);
	dropShotFireType    [0] = read_spvar( 0, 2,0);
	dropShotFireType    [1] = read_spvar( 0, 2,0);
	dropShotFireType    [2] = read_spvar( 0, 2,0);
	ToggleBlockRumble       = read_spvar( 0, 1,0);
	Buttons    			    = read_spvar( 0,21,0);
	Sticks    			    = read_spvar( 0, 3,0);
	singleProfileBtnIdx	    = read_spvar( 0, 8,0);
	ActivateHoldBtnIdx[0]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[1]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[2]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[3]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[4]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[5]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[6]  = read_spvar(  0,14,0);
	ActivateHoldBtnIdx[7]  = read_spvar(  0,14,0);
	ActivatePressBtnIdx[0] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[1] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[2] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[3] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[4] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[5] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[6] = read_spvar(  0,19,0);
	ActivatePressBtnIdx[7] = read_spvar(  0,19,0);
	ActivatePressBtnIdx1[7]= read_spvar(  0,19,0);
	AllButtonsIdx[0]       = read_spvar(  0,25,0);
	AllButtonsIdx[1]       = read_spvar(  0,25,0);
	AllButtonsOneIdx[0]	   = read_spvar(  0,25,0);
	AllButtonsOneIdx[1]	   = read_spvar(  0,25,0);
	UnmapBtnIdx[0]         = read_spvar(  0,25,0);
	UnmapBtnIdx[1]         = read_spvar(  0,25,0);
	
	ToggleAAType    [0]    = read_spvar(0,  3, adminValues[adminAimAssistValues[0]][ 0]);
   	ToggleAAType    [1]    = read_spvar(0,  3, adminValues[adminAimAssistValues[1]][ 0]);
   	ToggleAAType    [2]    = read_spvar(0,  3, adminValues[adminAimAssistValues[2]][ 0]);
   	TaylorShapes    [0]    = read_spvar(0, 12, adminValues[adminAimAssistValues[0]][ 1]);
   	TaylorShapes    [1]    = read_spvar(0, 12, adminValues[adminAimAssistValues[1]][ 1]);
   	TaylorShapes    [2]    = read_spvar(0, 12, adminValues[adminAimAssistValues[2]][ 1]);
   	ShapeDirection  [0]    = read_spvar(0,  1, adminValues[adminAimAssistValues[0]][ 2]);
	ShapeDirection  [1]    = read_spvar(0,  1, adminValues[adminAimAssistValues[1]][ 2]);
	ShapeDirection  [2]    = read_spvar(0,  1, adminValues[adminAimAssistValues[2]][ 2]);
   	ToggleBoostFire    [0] = read_spvar(0, 1, adminValues[adminAimAssistValues[0]][ 6]);
   	ToggleBoostFire    [1] = read_spvar(0, 1, adminValues[adminAimAssistValues[1]][ 6]);
   	ToggleBoostFire    [2] = read_spvar(0, 1, adminValues[adminAimAssistValues[2]][ 6]);
   	BoostReducer    [0] = read_spvar(0,  1, adminValues[adminAimAssistValues[0]][ 7]);
   	BoostReducer    [1] = read_spvar(0,  1, adminValues[adminAimAssistValues[1]][ 7]);
   	BoostReducer    [2] = read_spvar(0,  1, adminValues[adminAimAssistValues[2]][ 7]);
	TaylorTracking  [0] = read_spvar(0,  1, adminValues[adminAimAssistValues[0]][10]);
	TaylorTracking  [1] = read_spvar(0,  1, adminValues[adminAimAssistValues[1]][10]);
	TaylorTracking  [2] = read_spvar(0,  1, adminValues[adminAimAssistValues[2]][10]);
	
 	VerticalStrength[0] = read_spvar(-99, 99, 0);	
 	VerticalStrength[1] = read_spvar(-99, 99, 0);
 	VerticalStrength[2] = read_spvar(-99, 99, 0);	
   	HorizontalStrength[0] = read_spvar(-99,99,0);
    HorizontalStrength[1] = read_spvar(-99,99,0);
    HorizontalStrength[2] = read_spvar(-99,99,0);
   	VerticalStart   [0] = read_spvar(-99, 99, 0);
   	VerticalStart   [1] = read_spvar(-99, 99, 0);
   	VerticalStart   [2] = read_spvar(-99, 99, 0);
   	VerticalMid     [0] = read_spvar(-99, 99, 0);
   	VerticalMid     [1] = read_spvar(-99, 99, 0);
   	VerticalMid     [2] = read_spvar(-99, 99, 0);
   	VerticalEnd     [0] = read_spvar(-99, 99, 0);
   	VerticalEnd     [1] = read_spvar(-99, 99, 0);
   	VerticalEnd     [2] = read_spvar(-99, 99, 0);
   	HorizontalStart [0] = read_spvar(-99, 99, 0);
   	HorizontalStart [1] = read_spvar(-99, 99, 0);
   	HorizontalStart [2] = read_spvar(-99, 99, 0);
   	HorizontalMid   [0] = read_spvar(-99, 99, 0);
   	HorizontalMid   [1] = read_spvar(-99, 99, 0);
   	HorizontalMid   [2] = read_spvar(-99, 99, 0);
   	HorizontalEnd   [0] = read_spvar(-99, 99, 0);
   	HorizontalEnd   [1] = read_spvar(-99, 99, 0);
   	HorizontalEnd   [2] = read_spvar(-99, 99, 0);
   	HandGunVertical     = read_spvar(-99, 99, 0);
   	
   	VerticalTime    [0] = read_spvar(  1, 99, 0);
   	VerticalTime    [1] = read_spvar(  1, 99, 0);
   	VerticalTime    [2] = read_spvar(  1, 99, 0);
   	HorizontalTime  [0] = read_spvar(  1, 99, 0);
   	HorizontalTime  [1] = read_spvar(  1, 99, 0);
   	HorizontalTime  [2] = read_spvar(  1, 99, 0);
	RateOfFire     [0]  = read_spvar(  1, 25, 1);
	RateOfFire     [1]  = read_spvar(  1, 25, 1);
	RateOfFire     [2]  = read_spvar(  1, 25, 1);
	HandGunRPS  	    = read_spvar(1, 25,1);
   	AdsSpeed        [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][ 3]);
	AdsSpeed        [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][ 3]);
	AdsSpeed        [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][ 3]);
	TaylorAngle     [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][ 4]);
	TaylorAngle     [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][ 4]);
	TaylorAngle     [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][ 4]);
	TaylorRadius    [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][ 5]);
	TaylorRadius    [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][ 5]);
	TaylorRadius    [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][ 5]);
	TaylorPBoostStr [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][ 8]);
	TaylorPBoostStr [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][ 8]);
	TaylorPBoostStr [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][ 8]);
	TaylorABoostSpd [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][ 9]);
	TaylorABoostSpd [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][ 9]);
	TaylorABoostSpd [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][ 9]);
	TrackingSize    [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][11]);
	TrackingSize    [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][11]);
	TrackingSize    [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][11]);
	TrackingSpeed   [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][12]);
	TrackingSpeed   [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][12]);
	TrackingSpeed   [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][12]);
	AimAssistSize   [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][13]);
	AimAssistSize   [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][13]);
	AimAssistSize   [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][13]);
	AimAssistTime   [0] = read_spvar(1, 99,adminValues[adminAimAssistValues[0]][14]);
	AimAssistTime   [1] = read_spvar(1, 99,adminValues[adminAimAssistValues[1]][14]);
	AimAssistTime   [2] = read_spvar(1, 99,adminValues[adminAimAssistValues[2]][14]);
	HeadShotStrength    = read_spvar(1, 99,20);
	StrafeSize          = read_spvar(1, 99,50);
	CrouchSpeed			= read_spvar(1, 99,60);
	SlideDelay			= read_spvar(1, 200,120);
	GeneralSens         = read_spvar(1, 327,100);
	AdsSens             = read_spvar(1, 327,100);
	FireSens            = read_spvar(1, 327,100);
	AdsFireSens         = read_spvar(1, 327,100);
}
function Save(){ 
   combo_run(saved);

   set_pvar(SPVAR_1,BurstFireHold);
   set_pvar(SPVAR_2,BurstFireWait);
   set_pvar(SPVAR_3,BurstFireRelease);
   set_pvar(SPVAR_4,StrafeActiveTime);
   set_pvar(SPVAR_5,HeadShotHoldTime);
   set_pvar(SPVAR_6,MaxReloadTime);
   set_pvar(SPVAR_7,PingDelay);
   set_pvar(SPVAR_8,QuickScopeDelay);
   
   set_pvar(SPVAR_9,Ascii[0]); 
   set_pvar(SPVAR_10,Ascii[1]); 
   set_pvar(SPVAR_11,Ascii[2]); 
   set_pvar(SPVAR_12,Ascii[3]); 
   set_pvar(SPVAR_13,Ascii[4]); 
   set_pvar(SPVAR_14,Ascii[5]); 
   set_pvar(SPVAR_15,Ascii[6]); 
   set_pvar(SPVAR_16,Ascii[7]); 
   set_pvar(SPVAR_17,Ascii[8]); 
   set_pvar(SPVAR_18,Ascii[9]);
   set_pvar(SPVAR_19,Ascii[10]); 
   


	reset_spvar();
	save_spvar(adminAimAssistValues [0],  0, 46,FALSE);
	save_spvar(adminAimAssistValues [1],  0, 46,FALSE);
	save_spvar(adminAimAssistValues [2],  0, 46,FALSE);
	save_spvar(ToggleAntirecoil    [0],  0, 2,FALSE);
	save_spvar(ToggleAntirecoil    [1],  0, 2,FALSE);
	save_spvar(ToggleAntirecoil    [2],  0, 2,FALSE);
	save_spvar(ToggleProgressive   [0],  0, 3,FALSE);
	save_spvar(ToggleProgressive   [1],  0, 3,FALSE);
	save_spvar(ToggleProgressive   [2],  0, 3,FALSE);
	save_spvar(ToggleTaylorAssist  [0],  0, 5,FALSE);
	save_spvar(ToggleTaylorAssist  [1],  0, 5,FALSE);
	save_spvar(ToggleTaylorAssist  [2],  0, 5,FALSE);
	save_spvar(ToggleBattsAssist[0],  0, 1,FALSE);
	save_spvar(ToggleBattsAssist[1],  0, 1,FALSE);
	save_spvar(ToggleBattsAssist[2],  0, 1,FALSE);
	save_spvar(StrafeAssist        [0],  0, 1,FALSE);
	save_spvar(StrafeAssist        [1],  0, 1,FALSE);
	save_spvar(StrafeAssist        [2],  0, 1,FALSE);
	save_spvar(HeadShotAssist      [0],  0, 1,FALSE);
	save_spvar(HeadShotAssist      [1],  0, 1,FALSE);
	save_spvar(HeadShotAssist      [2],  0, 1,FALSE);
    save_spvar(ToggleRapidFire     [0],  0, 1,FALSE);
	save_spvar(ToggleRapidFire     [1],  0, 1,FALSE);
	save_spvar(ToggleRapidFire     [2],  0, 1,FALSE);
	save_spvar(ToggleBurstFire     [0],  0, 2,FALSE);
	save_spvar(ToggleBurstFire     [1],  0, 2,FALSE);
	save_spvar(ToggleBurstFire     [2],  0, 2,FALSE);
	save_spvar(ToggleCancelReload     ,  0, 1,FALSE);
	save_spvar(ToggleCrouchShot    [0],  0, 1,FALSE);
	save_spvar(ToggleCrouchShot    [1],  0, 1,FALSE);
	save_spvar(ToggleCrouchShot    [2],  0, 1,FALSE);
	save_spvar(ToggleJumpShot      [0],  0, 1,FALSE);
	save_spvar(ToggleJumpShot      [1],  0, 1,FALSE);
	save_spvar(ToggleJumpShot      [2],  0, 1,FALSE);
	save_spvar(ToggleDropShot      [0],  0, 1,FALSE);
	save_spvar(ToggleDropShot      [1],  0, 1,FALSE);
	save_spvar(ToggleDropShot      [2],  0, 1,FALSE);
	save_spvar(ToggleCancelSlide      ,  0, 2,FALSE);
	save_spvar(ToggleBunnyHop         ,  0, 2,FALSE);
	save_spvar(ToggleFastMelee     [0],  0, 1,FALSE);
	save_spvar(ToggleFastMelee     [1],  0, 1,FALSE);
	save_spvar(ToggleFastMelee     [2],  0, 1,FALSE);
	save_spvar(ToggleEnemyPing        ,  0, 1,FALSE);
	save_spvar(ToggleTaylorSens       ,  0, 1,FALSE);
	save_spvar(ToggleHoldBreath    [0],  0, 1,FALSE);
	save_spvar(ToggleHoldBreath    [1],  0, 1,FALSE);
	save_spvar(ToggleHoldBreath    [2],  0, 1,FALSE);
	save_spvar(ToggleQuickScope    [0],  0, 2,FALSE);
	save_spvar(ToggleQuickScope    [1],  0, 2,FALSE);
	save_spvar(ToggleQuickScope    [2],  0, 2,FALSE);
	save_spvar(AutoAim             [0],  0, 1,FALSE);
	save_spvar(AutoAim             [1],  0, 1,FALSE);
	save_spvar(AutoAim             [2],  0, 1,FALSE);
	save_spvar(vmSpeed             	  ,  0, 1,FALSE);
	save_spvar(ToggleSniperMode    [0],  0, 1,FALSE);
	save_spvar(ToggleSniperMode    [1],  0, 1,FALSE);
	save_spvar(ToggleSniperMode    [2],  0, 1,FALSE);
	save_spvar(standardARFireType  [0],  0, 2,FALSE);
	save_spvar(standardARFireType  [1],  0, 2,FALSE);
	save_spvar(standardARFireType  [2],  0, 2,FALSE);
	save_spvar(progressiveARFireType[0], 0, 2,FALSE);
	save_spvar(progressiveARFireType[1], 0, 2,FALSE);
	save_spvar(progressiveARFireType[2], 0, 2,FALSE);
	save_spvar(taylorFireType      [0] , 0, 3,FALSE);
	save_spvar(taylorFireType      [1] , 0, 3,FALSE);
	save_spvar(taylorFireType      [2] , 0, 3,FALSE);
	save_spvar(battsFireType       [0] , 0, 3,FALSE);
	save_spvar(battsFireType       [1] , 0, 3,FALSE);
	save_spvar(battsFireType       [2] , 0, 3,FALSE);
	save_spvar(rapidFireType       [0] , 0, 1,FALSE);
	save_spvar(rapidFireType       [0] , 0, 1,FALSE);
	save_spvar(rapidFireType       [0] , 0, 1,FALSE);
	save_spvar(burstFireType       [0] , 0, 1,FALSE);
	save_spvar(burstFireType       [1] , 0, 1,FALSE);
	save_spvar(burstFireType       [2] , 0, 1,FALSE);
	save_spvar(crouchShotFireType  [0] , 0, 1,FALSE);
	save_spvar(crouchShotFireType  [1] , 0, 1,FALSE);
	save_spvar(crouchShotFireType  [2] , 0, 1,FALSE);
	save_spvar(jumpShotFireType    [0] , 0, 1,FALSE);
	save_spvar(jumpShotFireType    [1] , 0, 1,FALSE);
	save_spvar(jumpShotFireType    [2] , 0, 1,FALSE);
	save_spvar(dropShotFireType    [0] , 0, 2,FALSE);
	save_spvar(dropShotFireType    [1] , 0, 2,FALSE);
	save_spvar(dropShotFireType    [2] , 0, 2,FALSE);
	save_spvar(ToggleBlockRumble       , 0, 1,FALSE);
	save_spvar(Buttons    			   , 0,21,FALSE);
	save_spvar(Sticks    			   , 0, 3,FALSE);
	save_spvar(singleProfileBtnIdx	   , 0, 8,FALSE);
	save_spvar(ActivateHoldBtnIdx[0]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[1]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[2]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[3]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[4]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[5]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[6]  ,  0,14,FALSE);
	save_spvar(ActivateHoldBtnIdx[7]  ,  0,14,FALSE);
	save_spvar(ActivatePressBtnIdx[0] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[1] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[2] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[3] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[4] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[5] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[6] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx[7] ,  0,19,FALSE);
	save_spvar(ActivatePressBtnIdx1[7],  0,19,FALSE);
	save_spvar(AllButtonsIdx[0]       ,  0,25,FALSE);
	save_spvar(AllButtonsIdx[1]       ,  0,25,FALSE);
	save_spvar(AllButtonsOneIdx[0]	   , 0,25,FALSE);
	save_spvar(AllButtonsOneIdx[1]	   , 0,25,FALSE);
	save_spvar(UnmapBtnIdx[0]         ,  0,25,FALSE);
	save_spvar(UnmapBtnIdx[1]         ,  0,25,FALSE);
	
	save_spvar(ToggleAAType    [0]    ,0,  3,FALSE);
	save_spvar(ToggleAAType    [1]    ,0,  3,FALSE);
	save_spvar(ToggleAAType    [2]    ,0,  3,FALSE);
	save_spvar(TaylorShapes    [0]    ,0, 12,FALSE);
	save_spvar(TaylorShapes    [1]    ,0, 12,FALSE);
	save_spvar(TaylorShapes    [2]    ,0, 12,FALSE);
	save_spvar(ShapeDirection  [0]    ,0,  1,FALSE);
	save_spvar(ShapeDirection  [1]    ,0,  1,FALSE);
	save_spvar(ShapeDirection  [2]    ,0,  1,FALSE);
	save_spvar(ToggleBoostFire    [0] ,0, 1,FALSE);
	save_spvar(ToggleBoostFire    [1] ,0, 1,FALSE);
	save_spvar(ToggleBoostFire    [2] ,0, 1,FALSE);
	save_spvar(BoostReducer    [0] ,0,  1,FALSE);
	save_spvar(BoostReducer    [1] ,0,  1,FALSE);
	save_spvar(BoostReducer    [2] ,0,  1,FALSE);
	save_spvar(TaylorTracking  [0] ,0,  1,FALSE);
	save_spvar(TaylorTracking  [1] ,0,  1,FALSE);
	save_spvar(TaylorTracking  [2] ,0,  1,FALSE);
	
	save_spvar(VerticalStrength[0] ,-99, 99,FALSE);	
	save_spvar(VerticalStrength[1] ,-99, 99,FALSE);
	save_spvar(VerticalStrength[2] ,-99, 99,FALSE);	
	save_spvar(HorizontalStrength[0] ,-99,99,FALSE);
	save_spvar(HorizontalStrength[1] ,-99,99,FALSE);
	save_spvar(HorizontalStrength[2] ,-99,99,FALSE);
	save_spvar(VerticalStart   [0] ,-99, 99,FALSE);
	save_spvar(VerticalStart   [1] ,-99, 99,FALSE);
	save_spvar(VerticalStart   [2] ,-99, 99,FALSE);
	save_spvar(VerticalMid     [0] ,-99, 99,FALSE);
	save_spvar(VerticalMid     [1] ,-99, 99,FALSE);
	save_spvar(VerticalMid     [2] ,-99, 99,FALSE);
	save_spvar(VerticalEnd     [0] ,-99, 99,FALSE);
	save_spvar(VerticalEnd     [1] ,-99, 99,FALSE);
	save_spvar(VerticalEnd     [2] ,-99, 99,FALSE);
	save_spvar(HorizontalStart [0] ,-99, 99,FALSE);
	save_spvar(HorizontalStart [1] ,-99, 99,FALSE);
	save_spvar(HorizontalStart [2] ,-99, 99,FALSE);
	save_spvar(HorizontalMid   [0] ,-99, 99,FALSE);
	save_spvar(HorizontalMid   [1] ,-99, 99,FALSE);
	save_spvar(HorizontalMid   [2] ,-99, 99,FALSE);
	save_spvar(HorizontalEnd   [0] ,-99, 99,FALSE);
	save_spvar(HorizontalEnd   [1] ,-99, 99,FALSE);
	save_spvar(HorizontalEnd   [2] ,-99, 99,FALSE);
	save_spvar(HandGunVertical     ,-99, 99,FALSE);
	
	save_spvar(VerticalTime    [0] ,  1, 99,FALSE);
	save_spvar(VerticalTime    [1] ,  1, 99,FALSE);
	save_spvar(VerticalTime    [2] ,  1, 99,FALSE);
	save_spvar(HorizontalTime  [0] ,  1, 99,FALSE);
	save_spvar(HorizontalTime  [1] ,  1, 99,FALSE);
	save_spvar(HorizontalTime  [2] ,  1, 99,FALSE);
	save_spvar(RateOfFire     [0]  ,  1, 25,FALSE);
	save_spvar(RateOfFire     [1]  ,  1, 25,FALSE);
	save_spvar(RateOfFire     [2]  ,  1, 25,FALSE);
	save_spvar(HandGunRPS    	     ,1, 25,FALSE);
	
	save_spvar(AdsSpeed        [0] ,1, 99,FALSE);
	save_spvar(AdsSpeed        [1] ,1, 99,FALSE);
	save_spvar(AdsSpeed        [2] ,1, 99,FALSE);
	save_spvar(TaylorAngle     [0] ,1, 99,FALSE);
	save_spvar(TaylorAngle     [1] ,1, 99,FALSE);
	save_spvar(TaylorAngle     [2] ,1, 99,FALSE);
	save_spvar(TaylorRadius    [0] ,1, 99,FALSE);
	save_spvar(TaylorRadius    [1] ,1, 99,FALSE);
	save_spvar(TaylorRadius    [2] ,1, 99,FALSE);
	save_spvar(TaylorPBoostStr [0] ,1, 99,FALSE);
	save_spvar(TaylorPBoostStr [1] ,1, 99,FALSE);
	save_spvar(TaylorPBoostStr [2] ,1, 99,FALSE);
	save_spvar(TaylorABoostSpd [0] ,1, 99,FALSE);
	save_spvar(TaylorABoostSpd [1] ,1, 99,FALSE);
	save_spvar(TaylorABoostSpd [2] ,1, 99,FALSE);
	save_spvar(TrackingSize    [0] ,1, 99,FALSE);
	save_spvar(TrackingSize    [1] ,1, 99,FALSE);
	save_spvar(TrackingSize    [2] ,1, 99,FALSE);
	save_spvar(TrackingSpeed   [0] ,1, 99,FALSE);
	save_spvar(TrackingSpeed   [1] ,1, 99,FALSE);
	save_spvar(TrackingSpeed   [2] ,1, 99,FALSE);
	save_spvar(AimAssistSize   [0] ,1, 99,FALSE);
	save_spvar(AimAssistSize   [1] ,1, 99,FALSE);
	save_spvar(AimAssistSize   [2] ,1, 99,FALSE);
	save_spvar(AimAssistTime   [0] ,1, 99,FALSE);
	save_spvar(AimAssistTime   [1] ,1, 99,FALSE);
	save_spvar(AimAssistTime   [2] ,1, 99,FALSE);
	save_spvar(HeadShotStrength    ,1, 99,FALSE);
	save_spvar(StrafeSize          ,1, 99,FALSE);
	save_spvar(CrouchSpeed		   ,1, 99,FALSE);
	save_spvar(SlideDelay			,1, 200,FALSE);

	save_spvar(GeneralSens         ,1, 327,FALSE);
	save_spvar(AdsSens             ,1, 327,FALSE);
	save_spvar(FireSens            ,1, 327,FALSE);
	save_spvar(AdsFireSens         ,1, 327,TRUE);
} 