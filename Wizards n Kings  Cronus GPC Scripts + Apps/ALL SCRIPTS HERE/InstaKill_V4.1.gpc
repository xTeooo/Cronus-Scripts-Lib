/*                                                                  ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
 ──▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───                                               ★[][][][][][][][][][][][][][][][][][][][][][||★
───█▒▒░░░░░░░░░▒▒█───                                               ★|| Dev: Lxuiee&+SayNoBro                   ||★
────█░░█░░░░░█░░█────                                               ★||[][][][][][][][][][][][][][][][][][][][][||★           
─▄▄──█░░░▀█▀░░░█──▄▄─                                               ★||INSTA KILL V4                            ||★
█░░█─▀▄░░░░░░░▄▀─█░░█                                               ★||Working Season 8                         ||★                                                                                                                                                   
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█                                              ★||Credit LegitCloud For Aim Correction :)  ||★                     
█░░╦─╦╔╗╦─╔╗╔╗╔╦╗╔╗░░█                                              ★||[][][][][][][][][][][][][][][][][][][][][||★
█░░║║║╠─║─║─║║║║║╠─░░█                                              ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
█░░╚╩╝╚╝╚╝╚╝╚╝╩─╩╚╝░░█                                             
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█                                              
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★                                                                      
[][][][][][C][O][N][T][R][O][L][S][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]][][][][][][][][][][][][][]][][][][][][][][][][][]][][][][]][][][][][][]
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
//  || !!AIM ABUSE LT+LEFT U CAN SWITCH BTWEEN LONG AND SHORT             ||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//  || !!OP AIM ASSIST LT+ UP SWITCH BEWTWEEN SHORT AND LONG              ||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]||
//  || !!Aim ASSIST Always On                                             ||    
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]     
//  || !!RAPID FIRE: ADS + RIGHT                                          ||      
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]     
//  || !!ANTI-RECOIL *** ALWAYS OFF                                       ||      
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]            
//  || !!HAIR TRIGGER: always On, This also allows super fast building.   ||                                                     
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]     
//  || !!PERFECT ACCURACY: L2+R1                                          ||              
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]                                   
//  || !!DROPSHOT    *** HOLD LT_L2 + LS_L3                               ||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//  || !!DROPSHOT: L2+SQUARE                                              ||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]||
//  || !!Aim Correction Always On  U Can Change in setting below to the ads sens u use||                      
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]||
//  || !!AntiRecoil  Always On But Can Change To False For Scoped Only[][][][][][][][]||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//  ========================================================================
*/
 
//[][][][][][][][][][][][][][][][][][][][][][][][][]
// BUTTON LAYOUT: BUILDER PRO                     ||
 define FIRE_BTN = 4; //XB1_RT //PS4_R2           ||
 define ADS_BTN = 7; //XB1_LT //PS4_L2            ||
 define CROUCH_BTN = 5; //XB1_RS //PS4_R3         ||
 define SPRINT_BTN = 8; //XB1_LS //PS4_L3         ||
 define JUMP_BTN = 19; //XB1_A  //PS4_CROSS       ||
 define NEXT_PIECE = 3; //XB1_RT //PS4_R1         ||
 define LEFT_BUMP = 6; //XB1_LB //PS4_L1          ||
 define RIGHT_BUMP = 3; // XB1_RB //PS4_R1        ||
 define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLE    ||
 define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE     ||
 define WALL_BTN = 4; //XB1_RB //PS4_R2           ||
 define STAIRS_BTN = 7; //XB1_LB //PS4_L2         ||
 define FLOOR_BTN = 3; //XB1_RT //PS4_R1          ||
 define ROOF_BTN = 6; //XB1_LT //PS4_L1           ||
 define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE     ||
 define R_X = 9; //XB1_RX //PS4_RX                ||
 define R_Y = 10; //XB1_RY //PS4_RY               ||
 define L_X = 11; //XB1_LX //PS4_LX               ||
 define L_Y = 12; //XB1_LY //PS4_LY               ||
 define UP = 13; //XB1_UP //PS4_UP                ||
 define DOWN = 14; //XB1_DOWN //PS4_DOWN          ||
 define LEFT = 15; //XB1_LEFT //PS4_LEFT          ||
 define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT       ||
 define MENU		= XB1_MENU;                // ||
 define VIEW_SHARE = PS4_SHARE;                // ||
 define MENU_OPTIONS = PS4_OPTIONS;            // ||
 define Blue = 1;                              // ||
 define Red = 2;                               // ||
 define Green = 3;                             // ||
 define Pink = 4;                              // ||
 define SkyBlue = 5;                           // ||
 define Yellow = 6;                            // ||
 define White = 7;                             // ||
//  [][][][][][][][][][][][][][][][][][][][][][][][]//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][] 
//   Aim Assist -- Always on  ||                                                                                                                                                         ||
define Sampling_Time = 8, Aim_Boost = 7, Aim_Correction = 12, Aim_Perfection_Limit = 32, POS_Aim_Limit = 72, NEG_Aim_Limit = -72, POS_Micro_MVT_Limit = 24, NEG_Micro_MVT_Limit = -24; //||
int X_Last_Value = 0, Y_Last_Value = 0, X_Current_Value = 0, Y_Current_Value = 0;																									   //||
int Sampling_Done = FALSE;																																							   //||
int spiroide_pulse = 0, fine_pulse = 0;																																				   //||
int Joystick_calibration = FALSE;																																					   //||
int RX_Axis_Joystick_calibrate = 0, RY_Axis_Joystick_calibrate = 0, Lock_Target_flag = 0;                                                                                              //||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][[][][][][][][][][][][][][][][][][][][][][][]
//   AIM ABUSE                    ||
int LONG_Release = 17;         // ||
int SHORT_Release = 27;        // ||
int LONG_Hold = 245;           // ||
int SHORT_Hold = 235;          // ||
int Long_abuse = FALSE;        // ||
int Short_abuse = TRUE;        // ||    
//  [][][][][][][][][][][][][][][][][][][][][][][]
//Dropshot                                      ||
 int DropShot = FALSE;                       // ||                                         
 int dsdown   = 10;     // Time you are down    ||                                          
 int dsup     = 70    // Time you are up        ||
//   [][][][][][][][][][][][][][][][][][]][][][]||[][][][][][][][][][][][][][][][][][][][][][]][][][][][][][][][][][][][][]
//ANTI RECOIL SETTINGS                                                                                                   ||
 int ANTI_RECOIL; // For AntiRecoil combo                                                                                ||
 int anti_recoil; // For AntiRecoil combo                                                                                ||
 define AR_Release = 55;                                                                                              // ||
 define ONLY_WITH_SCOPE = FALSE; //u can toggle false and true for example true is for scoped only false is always on :) ||
//      [][][][][][][][][][][][][][][][][][][]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//RUMBLE
int rumble_type = RUMBLE_A;
// [][][][][][][][][][][][][][][]
//100% Accuracy - L2/LT & R1/RB||
int PerfectAccuracy  = TRUE; //||
// [][][][][][][][][][][][][][][]
//  Rapidfire - LT/L2 + Right ||
int RapidFire      = FALSE; //||
//  [][][][][][][][][][][][][]||
int HairTrigger    = TRUE   //||
//  [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//=================================================================================================================================
//LED + Build
int a; int b;
 





data ( 1,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,2,0,2,0,0,2,2,0,2,2,2,2);        
int RMBLE = RUMBLE_A;   
int Notify = TRUE
                                                                       
                                                                      
                                                                              






//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★MAIN SECTION★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★//
main {

//HAIR TRIGGER
if(HairTrigger){                                                                         
     if(get_val(FIRE_BTN)){set_val(FIRE_BTN,100);}                                     
     }
     
//100% ACCURACY
if (get_val(ADS_BTN) && get_val(RIGHT_BUMP)) {
  PerfectAccuracy = !PerfectAccuracy
   combo_run(Notify);a=0;b=2;
  combo_run(PerfectAccuracy);
set_val(RIGHT_BUMP, 0);
      } else {
  combo_stop(PerfectAccuracy);
}

// ANTI RECOIL
     if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
         ANTI_RECOIL = 7;
         combo_run(AntiRecoil);
     }
     
 //--Rapidfire
if(get_val(ADS_BTN) && event_press(RIGHT)){
   rumble_A_if_true(RapidFire);
   RapidFire =! RapidFire;
   if(RapidFire == TRUE){combo_run(Notify);a=0;b=2;} 
   if(RapidFire == FALSE){combo_run(Notify);a=2;b=0;}
   }
   if(RapidFire){
     if(get_val(FIRE_BTN)){
        combo_run(Rapidfire);                                          
       } 
     }
     
     //Dropshot
if(get_val(ADS_BTN) && event_press(RELOAD_BTN)){
   DropShot =! DropShot;   
   if(DropShot == TRUE){combo_run(Notify);a=0;b=2;}
   if(DropShot == FALSE){combo_run(Notify);a=2;b=0;}
   rumble_A_if_true(DropShot);}
   if(DropShot){
      if(get_val(ADS_BTN)&&get_val(FIRE_BTN)){combo_run(DropShot);}
     if (event_press(18)){ DropShot = FALSE; }
     }     
        
//Aim Assist
if (Joystick_calibration == FALSE){
	sensitivity(PS4_RY, 50, 100);        
	sensitivity(PS4_RX, 50, 100);
	RX_Axis_Joystick_calibrate = get_val(PS4_RX); 
    RY_Axis_Joystick_calibrate = get_val(PS4_RY); 
    Joystick_calibration = TRUE;     
    }
 	X_Last_Value = X_Current_Value;
    Y_Last_Value = Y_Current_Value;
    X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
    Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate;
if(get_val(PS4_L2) && get_val(PS4_R2)){
	Lock_Target_flag = 1;
    }else{
    Lock_Target_flag = 0;
    }
    if(Lock_Target_flag && !combo_running(Lock_Target)){ 
	Lock_Target_flag -= 1; 
	combo_restart(Lock_Target);
	}
	if(get_val(PS4_L2)) {
		if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit){
			if(abs(X_Last_Value - X_Current_Value) < 15){
				sensitivity(PS4_RY, 38, 100);        
				sensitivity(PS4_RX, 38, 100);
				combo_stop(Aim_Assist_Perfection);
                Sampling_Done = FALSE;
 			if(get_val(PS4_R2) > 95){
				combo_stop(Fine_Tune_Aim);
                fine_pulse = 0;
                combo_run(spiroide_Aim_Assit);
                                    }
            else{
          	    combo_stop(spiroide_Aim_Assit);
                spiroide_pulse = 0;
                combo_run(Fine_Tune_Aim);
                }    
       		}
   		}
  	else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit) {
		sensitivity(PS4_RY, 33, 100);        
		sensitivity(PS4_RX, 33, 100);
		combo_stop(Fine_Tune_Aim);
        combo_stop(spiroide_Aim_Assit);
        spiroide_pulse = 0;
        fine_pulse = 0;
        combo_run(Aim_Assist_Perfection);
        }
 	}
    else{
        sensitivity(PS4_RY, 50, 100);        
		sensitivity(PS4_RX, 50, 100);
		combo_stop(Fine_Tune_Aim);
        combo_stop(spiroide_Aim_Assit);
        combo_stop(Aim_Assist_Perfection);
        spiroide_pulse = 0;
        fine_pulse = 0;
        Sampling_Done = FALSE;}    
        


if (Long_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Long_abuse_combo); 
} else { combo_stop(Long_abuse_combo); }
}
if (Short_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Short_abuse_combo);
} else { combo_stop(Short_abuse_combo); }}

if (get_val(XB1_LT) && event_press(LEFT)) {
Short_abuse = !Short_abuse;
Long_abuse = !Long_abuse;
RMBLE_A(Short_abuse);}

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★COMBO SECTION★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
}
combo PerfectAccuracy {
set_val(FIRE_BTN,100);
wait(96);
wait(376);
set_val(FIRE_BTN,100);
}
combo Rapidfire {
set_val(FIRE_BTN, 100); 
wait(120);
set_val(FIRE_BTN, 0); 
wait(30);
}


combo Aim_Assist_Perfection {        
X_Last_Value = X_Current_Value;
Y_Last_Value = Y_Current_Value;
wait(Sampling_Time);  
X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate; 
if (Sampling_Done == TRUE ){Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
}
X_Last_Value = X_Current_Value;
Y_Last_Value = Y_Current_Value;
wait(Sampling_Time);
X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
Y_Current_Value = get_lval(PS4_RY)- RX_Axis_Joystick_calibrate; 
if (Sampling_Done == TRUE ){Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
}
Sampling_Done = TRUE; 
wait(Sampling_Time);
}
combo Fine_Tune_Aim {
set_val(PS4_RX,(15 - fine_pulse));
set_val(PS4_LX,(-15 + fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RX,(15 - fine_pulse));
set_val(PS4_RY,(13 - fine_pulse));
set_val(PS4_LX,(-5 + fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RY,(13 - fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RX,(-15 + fine_pulse));
set_val(PS4_RY,(13 - fine_pulse));
set_val(PS4_LX,(5 - fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RX,(-15 + fine_pulse));
set_val(PS4_LX,(15 - fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time); 
set_val(PS4_RX,(-15 + fine_pulse));
set_val(PS4_RY,(-13 + fine_pulse));
set_val(PS4_LX,(5 - fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RY,(-13 + fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RX,(15 - fine_pulse));
set_val(PS4_RY,(-13 + fine_pulse));
set_val(PS4_LX,(-5 + fine_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
fine_pulse = fine_pulse + 2;
if ( fine_pulse >10){
	fine_pulse = 0;   
	}
}
combo spiroide_Aim_Assit {
set_val(PS4_RX,(4 + spiroide_pulse));
set_val(PS4_LX,(-15+ spiroide_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RY,(5 + spiroide_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RX,(-4 - spiroide_pulse));
set_val(PS4_LX,15 - spiroide_pulse );
wait(Sampling_Time);
wait(Sampling_Time);
set_val(PS4_RY,(5 + spiroide_pulse));
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
wait(Sampling_Time);
spiroide_pulse = spiroide_pulse + 2;
if ( spiroide_pulse >10){
	spiroide_pulse = 0;   
	}
} 
combo Lock_Target {
set_val(PS4_R2, 0);
set_val(PS4_L2, 0);  
wait(100);
set_val(PS4_L2, 100);
wait(50);
set_val(PS4_R2, 100);
}

combo Short_abuse_combo {
set_val(7, 100); wait(SHORT_Hold);
set_val(7, 0);   wait(SHORT_Release); }

combo Long_abuse_combo {
set_val(7, 100); wait(LONG_Hold);
set_val(7, 0);   wait(LONG_Release); }

combo RUMBLE {
set_rumble(RMBLE, 100); wait(300);
reset_rumble(); }

combo DropShot{
set_val(5,100);
wait(dsdown);
wait(dsup);
set_val(5,100);
}

combo Notify {
if(Notify){set_rumble(RUMBLE_B,65);}
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}
combo VIBRATE {
    set_rumble(rumble_type, 100);
    wait(300);
    reset_rumble();
}
combo AntiRecoil {
     anti_recoil = get_val(R_Y) + ANTI_RECOIL;
     if (anti_recoil > 100) anti_recoil = 100;
     set_val(R_Y, anti_recoil);
 }

function rumble_A_if_true(var) {
    if (var) rumble_type = RUMBLE_A;
    else rumble_type = RUMBLE_B;
    combo_run(VIBRATE);
}

function RMBLE_A(var) {
if (var) RMBLE = RUMBLE_A;
else RMBLE = RUMBLE_B;
combo_run(RUMBLE); }

function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) { 
	if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit) {
		if(Last_Value < Current_Value){           
			if (Boost){ 
				if (X_AXIS)
					set_val(PS4_RX, (Current_Value + Aim_Boost)); 
 	            if (Y_AXIS)
                    set_val(PS4_RY, (Current_Value + Aim_Boost));
                      }
 			    else if(Correction){
                   		if (X_AXIS)
           		            set_val(PS4_RX, (Current_Value - Aim_Correction)); 
 				        if (Y_AXIS)
                            set_val(PS4_RY, (Current_Value - Aim_Correction));            
                        		    }
                    			}
                else{ //--moving left
           			if (Boost){
                		if (X_AXIS)
                    		set_val(PS4_RX, (Current_Value - Aim_Boost)); 
                		if (Y_AXIS)
                			set_val(PS4_RY, (Current_Value - Aim_Boost));
								} 
				else if(Correction){
						if (X_AXIS)
							set_val(PS4_RX, (Current_Value + Aim_Correction)); 
						if (Y_AXIS)
							set_val(PS4_RY, (Current_Value + Aim_Correction));}}}}
//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
 ///---DEV---//====================================================================================================================
//-++CRONUS++-//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
//-NLMS-//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!11
//########################################################################################################################################
///---Testers---//########################################################################################################################
// Thanks For The Testers That Tested For This, So Thankful :) //#########################################################################
//#############################################################################################################################
//#################################################################################################################################
//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★###############★★★★★★★★★★★★★★★★★★★★★★★★★★★★################################
//################################################################################################################################
