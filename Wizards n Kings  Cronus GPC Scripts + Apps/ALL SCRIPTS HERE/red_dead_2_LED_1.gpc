

/*
 Havxk Red Dead Redemption 2 Multiplayer Script 
 
 
** THIS SCRIPT IS ONLY FOR CRONUSZEN **
** DO NOT MAKE ANY RANDOM CHANGES IN SCRIPT **	
  
MADE BY: fadyszn


*/



const uint8 picture[] = {73, 53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x7E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00};
                                                                                                                                                             
                                       
                                       
                                       
                                       
/*
After you open MENU with L3/LS + R3/RS, you have to use your LEFT analog stick to turn mods ON/OFF or adjust them.
* Click E to adjust/edit mods, click ON/OFF to turn them ON or OFF with CROSS/A *
* EXIT MENU BY CIRCLE, SETTINGS AUTOMATICALLY SAVED UNTIL YOU PROGRAM GAMEPACKS OR SCRIPTS TO YOUR ZEN AGAIN *

                                       

-------------------------------------------------------------------------------------------------------------------
        
*/       
        
                                                                                                                                                             
/////////////////////////
int _currentSlot;
int default_vals = TRUE;

//cursor
int cursordz = 20; //deadzone for cursor movement
int cursorspeed = 1; //cursor move speed

int xx = 60;
int yy = 30;
int old_xx;
int old_yy;
int cursor = TRUE;

int display = TRUE;

int MENU_S;
define SAVE = -1;
define GAME = 0;
define _MAIN = 1;

//display pages
int MENU_P;
define PAGE1 = 1;
define PAGE2 = 2;
define PAGE3 = 3;
define PAGE4 = 4;

//edit pages
define RAPID = 2;
define _RECOIL = 3;
define POLAR = 4;
define AAEXP = 5;
define STICKY = 6;

int c_t;//count l3 + r3
int c_b;
int c_s;
int ss = TRUE

int MENU = FALSE;//toggle main menu
int EDIT = FALSE;
int AAExploit = FALSE;

int zone_id = 0;
const string t_m1 = "L3 + R3";

const string t_ARO = "<<            >>";
const string t_p1 = "Aim Assist";
const string t_p2 = "MODS 1";
const string t_p3 = "MODS 0";
const string t_p4 = "MODS 2";
const string SAVE_ = "ALL VALUES";
const string _SAVE 	= "SAVED";

const string t_aa1 = "AA Exploit";
const string t_aa2 = "POLAR";
const string t_aa3 = "STICKY";

const string t_rf = "RAPID FIRE";
const string t_rc = "ANTI RECOIL";
const string t_ht = "HAIRTRIGGER";

const string t_es = "EASY SLIDE";
const string t_ep = "EASY PLATE";
const string t_er = "EASY REVIVE";

const string t_ds = "DIVE SHOT";
const string t_aR = "AUTO RUN";
const string t_hb = "NOT USED";

const string t_on = "ON";
const string t_off = "OFF";
const string t_e = "E";
const string t_st = "STRENGTH";
const string t_spe = "SPEED";
const string t_rae = "RADIUS";
const string t_ver = "V";
const string t_hor = "H";

int LSDZ = 6
int RSDZ = 11

int ndx = 0
int ndy = 0

/////////////////////////
	int Rapid_Fire = FALSE;
	int rfspeed = 30
	int DropShot = FALSE; 
	int DropShotSpeed = 30; 
    int AutoRun = FALSE; 
    int HairTriggers = FALSE;
    int EASY__SLIDE_DROP = FALSE;
    int holdbreath = FALSE;
    int easy_plate = FALSE;  //Holding triangle to place one plate will automatically hold triangle until all plates are full, cancel by firing, ads or tapping reload
    int easy_revive = FALSE; //Double clicking square will automatically hold square button for 10 seconds while you revive, cancel by firing, ads or tapping reload
	int polar_aim = FALSE;
	int SPEED        =   10;
	int radius       =   15;
	int sticky_aim_assist = FALSE;
	int _v = 18; 
	int in_game_menu_sens = 14;        // Must Be 3 HIGHER Then your in-game sensitivity [Read Below For Better Understanding]
	define aim_sens_corrections = 0;   // [0 = OFF / 1 = ON / 2 = ON + ZOOM SENS IS ALSO ON] - zoom sensitivity does not work with bumpers/triggers flipped] 
                                                                                                                                                             /*
    THE IDEA BEHIND AIM CORRECTIONS IS THAT YOU HIGHER YOUR IN-GAME SENSITIVITY WITH 2 OR 3
    CLICKS. THIS WILL ALLOW YOU TO TURN AROUND FAST WITHOUT LOSING CONTROL OVER YOUR AIM:
    THE SCRIPT WILL LOWER YOUR SENSITIVITY WHEN YOU AIM AND EVEN MORE WHEN YOU AIM & FIRE 
    SO THAT YOU CAN LOCK ON TARGET. SO FOR EXAMPLE: IF YOU PLAY NORMALLY WITH SENS 8 IN THE 
    GAME, SET YOUR SENSITIVITY TO 11 IN THE GAME MENU AND FOLLOW THE STEPS BELOW.  
                                                                                                                                                                 
	1) FILL OUT THE IN_GAME_MENU_SENS STICK SENSITIVITY UP ABOVE
    2) THAT`S IT! YOU`RE ALL SET AND GOOD TO GO!                                                                                                                                                             */

//--Anti Recoil (L2 + OPTIONS)
	int antirecoil_        =  FALSE; 
	define INTVERTED_RECOIL   =      1;  // INVERTED RECOIL METHOD ( IF INVERTED SET TO  -1  INSTEAD OF  1 )
	int DEFAULT_VERTICAL      =     28;  
	int DEFAULT_HORIZONTAL    =      4;
                                                                                                                                                                           /*
    CHECK THE STICK & BUTTON LAYOUTS BELOW. DO NOT MIND THE CONSOLE/PLATFORM,
    BUT MAKE SURE THAT THE BUTTON DISCRIPTIONS (FIRE, ADS, ETC) MATCHES WITH YOURS.
    IF YOU NEED TO MAKE CHANGES, THERE IS A LIST OF IDENTIFIERS JUST BELOW.
                   STICKS:
       PS4_CIRCLE            XB1_B 
       PS4_CROSS             XB1_A
       PS4_R1                XB1_RB
       PS4_R2                XB1_RT
       PS4_R3                XB1_RS
       PS4_L1                XB1_LB
       PS4_L2                XB1_LT
       PS4_L3                XB1_LS
                                                                                                                                                                  */
//--Layout
    define FIRE     = PS4_R2;  //Change To R1 For Flipped Bumpers                  
    define ADS      = PS4_L2;  //Change To L1 For Flipped Bumpers                     
    define SPRINT   = PS4_L3;                
    define PRONE    = PS4_CIRCLE;                              
    define MELEE    = PS4_R3;
    define JUMP     = PS4_CROSS;
    define TACTICAL = PS4_L1;  //Change To L2 For Flipped Bumpers                  
    define LETHAL   = PS4_R1;  //Change To R2 For Flipped Bumpers                   
    define VIB_A    = RUMBLE_A; //Leave Alone

//--AA Exploit 
	int Current_State        = 0;
	int Aim_Abuse_State      = 3;
	define Get_Last_Value    = 1;
	define Get_Current_Value = 2;
	define Aim_Correction    = 5;
	define Aim_Boost         = 3;
	define Aim_Perfection_Limit = 30;
	int X_Last_Value     = 0;
	int Y_Last_Value     = 0;
	int X_Current_Value  = 0;
	int Y_Current_Value  = 0;
	int mvt = 0;
	int Aim_Boost_Val = 0; 
	int Aim_Correction_Val = 0;

//--Variable Just Ignore
    int RECOIL,BOOOST;
    int angle;
    int ads_grenade_sens, ads_fire_sens, Sens;
    int q;											
    int double__tap[30];
    int INC = 1,DEC,COLOUR[3];
	init {
	set_rgb(255,255,255)
	SPEED = get_pvar(SPVAR_1, -100,+100, 10); 
	radius = get_pvar(SPVAR_2, -100,+100, 15);
	_v = get_pvar(SPVAR_3, -100,+100, 18);
	DEFAULT_VERTICAL = get_pvar(SPVAR_4, -100,+100, 28);
	DEFAULT_HORIZONTAL = get_pvar(SPVAR_5, -100,+100, 4);
	rfspeed = get_pvar(SPVAR_6, -100,+100, 30);
	_currentSlot = get_slot();
    while(q < 30) 
    {double__tap[q] = -1; q++;}
	combo_run(BLINK);
	combo_run(BLIINK);
	COLOUR = 255; }
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
if(get_val(PS4_L2) && get_val(PS4_R2) && get_val(PS4_L1) && get_val(PS4_R1) && get_val(PS4_L3) && get_val(PS4_R3)){default_vals = TRUE load_slot(_currentSlot)}
if(default_vals){
set_pvar(SPVAR_1, 10);
set_pvar(SPVAR_2, 15);
set_pvar(SPVAR_3, 18);
set_pvar(SPVAR_4, 28);
set_pvar(SPVAR_5,  4);
set_pvar(SPVAR_6, 30);
default_vals = FALSE;
}
set_val(TRACE_4,c_b)
	 vm_tctrl(-2);
	 //dispaly start
	 if(display){
	 cls_oled(0)
	 c_b = 0
	 if(MENU_S == SAVE){
		printf(9,15,1,1,SAVE_[0]);
		printf(39,35,1,1,_SAVE[0]);
		}
	 if(MENU_S == GAME){
	 	draw_Title_L_N(0, 0, 0);
	 	printf(center_x(sizeof(t_m1) - 1, OLED_FONT_SMALL_WIDTH),9,0,1,t_m1[0]);
	 	rect_oled(0,0,128,64,0,1)
	 }
	 if(EDIT){
	 if(MENU_S == POLAR){
	 	printf(center_x(sizeof(t_aa2) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_aa2[0]);
	 	printf(6,27,0,1,t_ARO[0]);
	 	printf(6,47,0,1,t_ARO[0]);
	 	printf(29,27,0,1,t_spe[0]);
	 	printf(29,47,0,1,t_rae[0]);
	 	line_oled(0,40,127,40,1,1)
	 	number_to_string1(SPEED,find_digits1(SPEED));
	 	number_to_string2(radius,find_digits2(radius));
	 	}
	 if(MENU_S == STICKY){
	 	printf(6,38,0,1,t_ARO[0]);
	 	printf(center_x(sizeof(t_st) - 1, OLED_FONT_SMALL_WIDTH),25,0,1,t_st[0]);
	 	printf(center_x(sizeof(t_aa3) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_aa3[0]);
	 	number_to_string1(_v,find_digits1(_v));
	 	}
	 if(MENU_S == _RECOIL){
	 	printf(center_x(sizeof(t_rc) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_rc[0]);
	 	printf(6,27,0,1,t_ARO[0]);
	 	printf(6,47,0,1,t_ARO[0]);
	 	printf(29,27,0,1,t_ver[0]);
	 	printf(29,47,0,1,t_hor[0]);
	 	line_oled(0,40,127,40,1,1)
	 	number_to_string1(DEFAULT_VERTICAL,find_digits1(DEFAULT_VERTICAL));
	 	number_to_string2(DEFAULT_HORIZONTAL,find_digits2(DEFAULT_HORIZONTAL));
	 	}
	 if(MENU_S == RAPID){
	 	printf(center_x(sizeof(t_rf) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_rf[0]);
	 	printf(center_x(sizeof(t_spe) - 1, OLED_FONT_SMALL_WIDTH),25,0,1,t_spe[0]);
	 	printf(6,38,0,1,t_ARO[0]);
	 	number_to_string1(rfspeed,find_digits1(rfspeed));
	 	}
	 	rect_oled(xx,yy,3,3,1,1)
	 	line_oled(100,16,100,63,1,1)
	 	line_oled(27,16,27,63,1,1)
	 	line_oled(0,16,127,16,1,1)
	 	rect_oled(0,0,128,64,0,1)
	 	}
	 if(MENU_S == _MAIN){
	 	if(MENU_P == PAGE1){
	 	printf(6,5,0,1,t_ARO[0]);
	 	printf(center_x(sizeof(t_p1) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_p1[0]);
	 	if(AAExploit){
	 	printf(106,21,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,21,0,1,t_off[0]);
	 	}
	 	if(polar_aim){
	 	printf(106,36,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,36,0,1,t_off[0]);
	 	}
	 	if(sticky_aim_assist){
	 	printf(106,52,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,52,0,1,t_off[0]);
	 	}
	 	printf(6,21,0,1,t_aa1[0]);
	 	printf(24,36,0,1,t_aa2[0]);
	 	printf(20,52,0,1,t_aa3[0]);
	 	printf(87,21,0,1,t_e[0]);
	 	printf(87,36,0,1,t_e[0]);
	 	printf(87,52,0,1,t_e[0]);
	 	line_oled(80,32,100,16,2,1)
	 	}
	 	if(MENU_P == PAGE2){
	 	printf(6,5,0,1,t_ARO[0]);
	 	printf(center_x(sizeof(t_p2) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_p2[0]);
	 	
	 	if(Rapid_Fire){
	 	printf(106,21,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,21,0,1,t_off[0]);
	 	}
	 	if(antirecoil_){
	 	printf(106,36,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,36,0,1,t_off[0]);
	 	}
	 	if(HairTriggers){
	 	printf(106,52,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,52,0,1,t_off[0]);
	 	}
	 	printf(6,21,0,1,t_rf[0]);
	 	printf(2,36,0,1,t_rc[0]);
	 	printf(2,52,0,1,t_ht[0]);
	 	printf(87,21,0,1,t_e[0]);
	 	printf(87,36,0,1,t_e[0]);
	 	printf(87,52,0,1,t_e[0]);
	 	line_oled(80,63,100,47,2,1)
	 	}
	 	if(MENU_P == PAGE3){
	 	printf(6,5,0,1,t_ARO[0]);
	 	printf(center_x(sizeof(t_p3) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_p3[0]);
	 	if(EASY__SLIDE_DROP){
	 	printf(106,21,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,21,0,1,t_off[0]);
	 	}
	 	if(easy_plate){
	 	printf(106,36,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,36,0,1,t_off[0]);
	 	}
	 	if(easy_revive){
	 	printf(106,52,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,52,0,1,t_off[0]);
	 	}
	 	printf(6,21,0,1,t_es[0]);
	 	printf(6,36,0,1,t_ep[0]);
	 	printf(2,52,0,1,t_er[0]);
	 	printf(87,21,0,1,t_e[0]);
	 	printf(87,36,0,1,t_e[0]);
	 	printf(87,52,0,1,t_e[0]);
	 	line_oled(80,32,100,16,2,1)
	 	line_oled(80,47,100,32,2,1)
	 	line_oled(80,63,100,47,2,1)
	 	}
	 	if(MENU_P == PAGE4){
	 	printf(6,5,0,1,t_ARO[0]);
	 	printf(center_x(sizeof(t_p3) - 1, OLED_FONT_SMALL_WIDTH),5,0,1,t_p4[0]);
	 	if(DropShot){
	 	printf(106,21,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,21,0,1,t_off[0]);
	 	}
	 	if(AutoRun){
	 	printf(106,36,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,36,0,1,t_off[0]);
	 	}
	 	if(holdbreath){
	 	printf(106,52,0,1,t_on[0]);
	 	}
	 	else{
	 	printf(103,52,0,1,t_off[0]);
	 	}
	 	printf(10,21,0,1,t_ds[0]);
	 	printf(13,36,0,1,t_aR[0]);
	 	printf(2,52,0,1,t_hb[0]);
	 	printf(87,21,0,1,t_e[0]);
	 	printf(87,36,0,1,t_e[0]);
	 	printf(87,52,0,1,t_e[0]);
	 	line_oled(80,32,100,16,2,1)
	 	line_oled(80,47,100,32,2,1)
	 	line_oled(80,63,100,47,2,1)
	 	}
	 line_oled(80,16,80,63,1,1)
	 line_oled(0,32,127,32,1,1)
	 line_oled(0,47,127,47,1,1)
	 line_oled(100,16,100,63,1,1)
	 line_oled(100,0,100,16,1,1)
	 line_oled(27,0,27,16,1,1)
	 line_oled(0,16,127,16,1,1)
	 rect_oled(xx,yy,3,3,1,1)
	 rect_oled(0,0,128,64,0,1)
	 }
	 ss = TRUE;
	 display = FALSE
	 }
	 //display end
	 
	 if(ss){	
    c_b += get_rtime();
    if(c_b >= 18000){
      cls_oled(0);
      c_b = 0;
      ss = FALSE;
    }
  }
	 
	 if(!MENU && !EDIT){
	 	if(event_press(PS4_OPTIONS)){display = TRUE}
	 combo_run(RGB);
	 cursor = FALSE
	 	if(get_val(PS4_L3) && get_val(PS4_R3)){
	 		c_t += get_rtime();
    		if(c_t >= 500){
    		combo_run (vibrate);
    		MENU_P = PAGE1
    		MENU = !MENU
			c_t = 0;
			display = TRUE
    		}
    	}
	 }
	 
	 if(MENU_S == SAVE){
	cursor = FALSE;
	set_pvar(SPVAR_1, SPEED);
	set_pvar(SPVAR_2, radius);
	set_pvar(SPVAR_3, _v);
	set_pvar(SPVAR_4, DEFAULT_VERTICAL);
	set_pvar(SPVAR_5, DEFAULT_HORIZONTAL);
	set_pvar(SPVAR_6, rfspeed);
		c_s += get_rtime();
    	if(c_s >= 500){
    		cls_oled(0);
    		c_s = 0;
    		MENU_S = GAME; 
    		display = TRUE;
    	}
	}
	 
	 if(MENU){
	 	cursor = TRUE
	 	MENU_S = MENU
	 	if(event_press(PS4_CIRCLE)){
	 		MENU = FALSE
	 		MENU_S = SAVE
	 		display = TRUE
	 	}
	 	if(MENU_P == PAGE1){

	 		set_rgb(255,0,0)
	 		set_val(TRACE_1,zone_id)
	 		set_val(TRACE_2,1)
	 		if(zone_id == 2 && event_release(PS4_CROSS)){//right
				zone_id = 0
	 			MENU_P = PAGE2
	 			display = TRUE
	 		}
	 		if(zone_id == 1 && event_release(PS4_CROSS)){//left
	 			zone_id = 0
	 			MENU_P = PAGE4
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 4 && event_release(PS4_CROSS)){
	 			zone_id = 0
	 			AAExploit = !AAExploit
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 6 && event_release(PS4_CROSS)){//polar
	 			zone_id = 0
	 			polar_aim = !polar_aim
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 8 && event_release(PS4_CROSS)){//sticky
	 			zone_id = 0
	 			sticky_aim_assist = !sticky_aim_assist
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 5 && event_release(PS4_CROSS)){//polar
	 			zone_id = 0
	 			MENU = FALSE
	 			EDIT = TRUE
	 			MENU_S = POLAR
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 7 && event_release(PS4_CROSS)){//sticky
	 			zone_id = 0
	 			MENU = FALSE
	 			EDIT = TRUE
	 			MENU_S = STICKY
	 			display = TRUE
	 		}
	 	}
	 	
	 	if(MENU_P == PAGE2){

	 		set_rgb(0,255,0)
	 		set_val(TRACE_1,zone_id)
	 		set_val(TRACE_2,2)
	 		
	 		if(zone_id == 2 && event_release(PS4_CROSS)){//right
	 			zone_id = 0
	 			MENU_P = PAGE4
	 			display = TRUE
	 		}
	 		if(zone_id == 1 && event_release(PS4_CROSS)){//left
	 			zone_id = 0
	 			MENU_P = PAGE1
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 4 && event_release(PS4_CROSS)){//rapid fire
	 			zone_id = 0
	 			Rapid_Fire = !Rapid_Fire
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 6 && event_release(PS4_CROSS)){//anti recoil
	 			zone_id = 0
	 			antirecoil_ = !antirecoil_
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 8 && event_release(PS4_CROSS)){//hairtriggers
	 			zone_id = 0
	 			HairTriggers = !HairTriggers
	 			display = TRUE
	 		}
	 		if(zone_id == 3 && event_release(PS4_CROSS)){//rapid fire
	 			zone_id = 0
	 			MENU = FALSE
	 			EDIT = TRUE
	 			MENU_S = RAPID
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 5 && event_release(PS4_CROSS)){//anti recoil
	 			zone_id = 0
	 			MENU = FALSE
	 			EDIT = TRUE
	 			MENU_S = _RECOIL
	 			display = TRUE
	 		}
	 	}
	 	if(MENU_P == PAGE3){

	 		set_rgb(0,0,255)
	 		set_val(TRACE_1,zone_id)
	 		set_val(TRACE_2,3)
	 		
	 		if(zone_id == 2 && event_release(PS4_CROSS)){//right
	 		zone_id = 0
	 		MENU_P = PAGE4
	 		display = TRUE
	 		}
	 		if(zone_id == 1 && event_release(PS4_CROSS)){//left
	 		zone_id = 0
	 		MENU_P = PAGE2
	 		display = TRUE
	 		}
	 		if(zone_id == 4 && event_release(PS4_CROSS)){//EASY__SLIDE_DROP
	 			zone_id = 0
	 			EASY__SLIDE_DROP = !EASY__SLIDE_DROP
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 6 && event_release(PS4_CROSS)){//easy_plate
	 			zone_id = 0
	 			easy_plate = !easy_plate
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 8 && event_release(PS4_CROSS)){//easy_revive
	 			zone_id = 0
	 			easy_revive  = !easy_revive
	 			display = TRUE
	 		}
	 	}
	 	if(MENU_P == PAGE4){

	 		set_rgb(255,150,0)
	 		set_val(TRACE_1,zone_id)
	 		set_val(TRACE_2,3)
	 		
	 		if(zone_id == 2 && event_release(PS4_CROSS)){//right
	 		zone_id = 0
	 		MENU_P = PAGE1
	 		display = TRUE
	 		}
	 		if(zone_id == 1 && event_release(PS4_CROSS)){//left
	 		zone_id = 0
	 		MENU_P = PAGE2
	 		display = TRUE
	 		}
	 		if(zone_id == 4 && event_release(PS4_CROSS)){//DropShot
	 			zone_id = 0
	 			DropShot = !DropShot
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 6 && event_release(PS4_CROSS)){//AutoRun
	 			zone_id = 0
	 			AutoRun = !AutoRun
	 			display = TRUE
	 		}
	 		
	 		if(zone_id == 8 && event_release(PS4_CROSS)){//holdbreath
	 			zone_id = 0
	 			holdbreath  = !holdbreath
	 			display = TRUE
	 		}
	 	}
	 	if(yy > 16 && yy < 32 && xx > 80 && xx < 100){zone_id = 3}
	 	if(yy > 16 && yy < 32 && xx > 100){zone_id = 4}
	 	
	 	if(yy > 32 && yy < 47 && xx > 80 && xx < 100){zone_id = 5}
	 	if(yy > 32 && yy < 47 && xx > 100){zone_id = 6}
	 	
	 	if(yy > 47 && xx > 80 && xx < 100){zone_id = 7}
	 	if(yy > 47 && xx > 100){zone_id = 8}
	 	
	 	if(yy > 16 && xx < 80){zone_id = 0}
	 	if(xx < 27 && yy < 16){zone_id = 1}
	 	if(xx > 100 && yy < 16){zone_id = 2}
	 	if(xx < 100 && xx > 27 && yy < 16){zone_id = 0}
	 	
	 }
	 
	 if(EDIT){
	 	cursor = TRUE
	 	if(event_press(PS4_CIRCLE)){
	 		MENU = TRUE
	 		EDIT = FALSE
	 		MENU_S = _MAIN
	 		display = TRUE
	 		if(MENU_S == POLAR){MENU_P = PAGE1}
	 		if(MENU_S == STICKY){MENU_P = PAGE1}
	 		if(MENU_S == _RECOIL){MENU_P = PAGE2}
	 		if(MENU_S == RAPID){MENU_P = PAGE2}
	 	}
	 	if(MENU_S == POLAR){
	 	set_val(TRACE_1,zone_id)
	 	if(yy < 16 ^^ xx > 27 && xx < 100){zone_id = 0}
	 	if(xx < 27 && yy > 16 && yy < 40){zone_id = 1}
	 	if(xx > 100 && yy > 16 && yy < 40){zone_id = 2}
	 	if(xx < 27 && yy > 40){zone_id = 3}
	 	if(xx > 100 && yy > 40){zone_id = 4}
	 	
	 	if(zone_id == 1 && event_release(PS4_CROSS)){
	 		SPEED --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 2 && event_release(PS4_CROSS)){
	 		SPEED ++
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 3 && event_release(PS4_CROSS)){
	 		radius --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 4 && event_release(PS4_CROSS)){
	 		radius ++
	 		display = TRUE
	 		}
	 	
	 	}
	 	if(MENU_S == STICKY){
	 	if(yy < 16 ^^ xx > 27 && xx < 100){zone_id = 0}
	 	if(xx < 27 && yy > 16){zone_id = 1}
	 	if(xx > 100 && yy > 16){zone_id = 2}
	 	
	 	if(zone_id == 1 && event_release(PS4_CROSS)){
	 		_v --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 2 && event_release(PS4_CROSS)){
	 		_v ++
	 		display = TRUE
	 		}
	 	}
	 	if(MENU_S == _RECOIL){
	 	if(yy < 16 ^^ xx > 27 && xx < 100){zone_id = 0}
	 	if(xx < 27 && yy > 16 && yy < 40){zone_id = 1}
	 	if(xx > 100 && yy > 16 && yy < 40){zone_id = 2}
	 	if(xx < 27 && yy > 40){zone_id = 3}
	 	if(xx > 100 && yy > 40){zone_id = 4}
	 	
	 	if(zone_id == 1 && event_release(PS4_CROSS)){
	 		DEFAULT_VERTICAL --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 2 && event_release(PS4_CROSS)){
	 		DEFAULT_VERTICAL ++
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 3 && event_release(PS4_CROSS)){
	 		DEFAULT_HORIZONTAL --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 4 && event_release(PS4_CROSS)){
	 		DEFAULT_HORIZONTAL ++
	 		display = TRUE
	 		}
	 	}
	 	if(MENU_S == RAPID){
	 	if(yy < 16 ^^ xx > 27 && xx < 100){zone_id = 0}
	 	if(xx < 27 && yy > 16){zone_id = 1}
	 	if(xx > 100 && yy > 16){zone_id = 2}
	 	
	 	if(zone_id == 1 && event_release(PS4_CROSS)){
	 		rfspeed --
	 		display = TRUE
	 		}
	 		
	 	if(zone_id == 2 && event_release(PS4_CROSS)){
	 		rfspeed ++
	 		display = TRUE
	 		}
	 	}
	 }
	 
	if(AAExploit){ 
      if(get_val(ADS)) {
            if (Current_State == Get_Last_Value) {
                X_Last_Value = get_lval(PS4_RX);
                Y_Last_Value = get_lval(PS4_RY);
                Current_State = Get_Current_Value; }
            else if (Current_State == Get_Current_Value) {
                X_Current_Value = get_val(PS4_RX);
                Y_Current_Value = get_val(PS4_RY);
                if(Aim_Abuse_State == Aim_Correction) {
                    Current_State = Aim_Boost; }
                else {
                    Current_State = Aim_Correction; }
            }
            if (Current_State == Aim_Boost) { 
                Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
                Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
                Current_State = Get_Last_Value;
                Aim_Abuse_State = Aim_Boost; }  
            else if (Current_State == Aim_Correction) {
                Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
                Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
                Current_State = Get_Last_Value;
                Aim_Abuse_State = Aim_Correction; } 
        }
        else {
            Current_State = Get_Last_Value;
            Aim_Abuse_State = Aim_Correction; }
            
            }
    if (polar_aim) {  
	if(get_ival(ADS) > 95){
        if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= radius) {
              angle = mod(angle, SPEED, 360);
              set_polar(POLAR_RS, angle, radius * random(326,328)); }
    }
  }
  
if(holdbreath) { if( get_val(ADS) ) combo_run(HOLD_BREATH_cmb); }

if(HairTriggers) { deadzone(ADS,FIRE,100,100); }

if(EASY__SLIDE_DROP && get_val(PRONE))combo_run(DROP_SHOT);

if (AutoRun) {
if(double_click(PS4_CROSS)) combo_run (AutoSprint); }

if(easy_plate) {
	if(double_click(PS4_TRIANGLE))
		combo_run(easy_plate);
	if(get_val(FIRE)>10)
		combo_stop(easy_plate);
	if(get_val(ADS)>10)
		combo_stop(easy_plate);
	if(get_val(PS4_SQUARE))
		combo_stop(easy_plate); }
		
	if(easy_revive) {
  if(double_click(PS4_SQUARE))
		combo_run(easy_revive);
  if(get_val(FIRE)>10)
		combo_stop(easy_revive);
  if(get_val(ADS)>10)
		combo_stop(easy_revive);
  if(get_val(PS4_SQUARE))
		combo_stop(easy_revive); }
		
  if(aim_sens_corrections) {
    ads_grenade_sens=100-(in_game_menu_sens); ads_fire_sens=96-(in_game_menu_sens); 
    if (get_val (ADS)) {
    if(get_val(FIRE) && get_val(ADS) || get_val(FIRE)) {
    Sens = ads_fire_sens; }
    if(!get_val(FIRE) && get_val(ADS) || get_val (LETHAL) && !get_val (ADS) || get_val (TACTICAL) && !get_val (ADS)) {
    Sens = ads_grenade_sens; }
    if(Sens > 100) Sens = 100;  
    sensitivity(PS4_RX, NOT_USE, Sens);
    sensitivity(PS4_RY, NOT_USE, Sens); }
    }
        if (Rapid_Fire) {
    if(get_val(FIRE)) {
        combo_run (Rapiid_Fire);}
        }
        
        if (DropShot) {
    if(get_val(ADS) && get_val(FIRE)) {
        combo_run (DroppShott);}
        }

      if (antirecoil_) {
      if (get_val(ADS) && get_val(FIRE)) {
      combo_run(RECOIL); } 
      if (abs(get_val(PS4_RY)) > DEFAULT_VERTICAL + 2 || abs(get_val(PS4_RX)) > DEFAULT_VERTICAL + 2) {
      combo_stop(RECOIL); }  }
      
   if (sticky_aim_assist) {
   if(get_val(ADS)) combo_run(STICKY_AIM);
   else combo_stop(STICKY_AIM);}
   
	    if(abs(get_val(PS4_LY)) < LSDZ && abs(get_val(PS4_LX)) < LSDZ ){        
    	set_val(PS4_LY,0);                                                
    	set_val(PS4_LX,0); }                                           
    	if(abs(get_val(PS4_RY)) < RSDZ && abs(get_val(PS4_RX)) < RSDZ ){         
    	set_val(PS4_RY,0);                                                 
    	set_val(PS4_RX,0); }
    	
    	set_val(TRACE_5,yy);                                                 
    	set_val(TRACE_6,xx);
    	
    	if(cursor){
      	if (get_val(PS4_LX) > cursordz){
        xx += cursorspeed; 
      	}
      	if (get_val(PS4_LX) < -cursordz){
        xx -= cursorspeed;
      	}
      	if (get_val(PS4_LY) < -cursordz){
        yy -= cursorspeed;
      	}
      	if (get_val(PS4_LY) > cursordz){
        yy += cursorspeed;
      	}
      	if(xx <= 3){xx = 3;}
      	if(yy <= 3){yy = 3;}
      	if(xx >= 125){xx = 125;}
      	if(yy >= 60){yy = 60;}
      	if(xx != old_xx || yy != old_yy) {
        display = TRUE;
        old_xx = xx;
        old_yy = yy;
      	}
      	block_all_inputs()
    	}
    	
		}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
combo RGB {
wait(10);
set_rgb(COLOUR, COLOUR[1], COLOUR[2]);
COLOUR[DEC] -= 1; 
COLOUR[INC] += 1;
if (!COLOUR[DEC]) { 
INC = (INC + 1) % 3; 
DEC = (DEC + 1) % 3; }
}
combo HOLD_BREATH_cmb {                   
set_val(SPRINT, 100);
wait(100);  
}
combo AutoSprint {
set_val(PS4_CROSS, 100); 
wait(35);
set_val(PS4_CROSS, 0); 
wait(75);    // AUTO SPRINT VALUE HERE 
}
combo BLINK {                                       
  if(Rapid_Fire) set_rgb (0,255,0); 
  else  set_rgb (255,0,0); 
  wait(2000);
  set_rgb (0,0,0); 
}
combo BLIINK {                                       
  if(DropShot) set_rgb (0,255,0); 
  else  set_rgb (255,0,0); 
  wait(2000);
  set_rgb (0,0,0); 
}
combo Rapiid_Fire {
set_val(FIRE, 100); 
wait(35);
set_val(FIRE, 0); 
wait(rfspeed);
}
combo DroppShott {
set_val(PS4_SQUARE,100);
wait(40);
wait(DropShotSpeed);
set_val(PS4_SQUARE,100);
}
combo easy_revive {
set_rumble(RUMBLE_A,100);
wait(200);
reset_rumble();
set_val(PS4_SQUARE,100);
wait(10000); //time revive is held for adjust higher or lower 500 if you fail to get the revive
}
combo DROP_SHOT{
set_val(PS4_SQUARE,100); 	
wait(800); 
}
combo easy_plate {
set_rumble(RUMBLE_A,100);
wait(200);
reset_rumble();
set_val(PS4_TRIANGLE,100);
wait(6000) //time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating
}
combo STICKY_AIM {
set_val(PS4_RY,xy_val(PS4_RY, _v));
wait(20);
set_val(PS4_RX,xy_val(PS4_RX, _v));
set_val(PS4_LX,xy_val(PS4_LX, _v));
wait(20);
set_val(PS4_RY,xy_val(PS4_RY, _v * -1));
wait(20);
set_val(PS4_RX,xy_val(PS4_RX, _v * -1));
set_val(PS4_LX,xy_val(PS4_LX, _v * -1));
wait(20);
}
combo vibrate {     
set_rumble(RUMBLE_A, 85);      
wait(225);                         
reset_rumble();                    
}
combo RECOIL { BOOOST++;
RECOIL = get_val(PS4_RY) + DEFAULT_VERTICAL + BOOOST;
if(BOOOST == 10) {
BOOOST = 0; }
if(RECOIL > 100) {
RECOIL = 100; }
set_val(PS4_RY,RECOIL * INTVERTED_RECOIL);
RECOIL = get_val(PS4_RX) + DEFAULT_HORIZONTAL;
if(RECOIL > 100){
RECOIL = 100; }
set_val(PS4_RX,RECOIL);
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) 
    { 
       mvt = abs(Last_Value) + abs(Current_Value);
       Aim_Boost_Val = ( mvt + 1 )/2; //Rounding integer division (instead of truncating)
       Aim_Correction_Val = Aim_Boost_Val + 4;
 
       if(Aim_Boost_Val >= 10)
       {
           Aim_Boost_Val = 10;
           Aim_Correction_Val = 14;
       }
       else if(Aim_Boost_Val == 0)
       {
            Aim_Boost_Val = 2
            Aim_Correction_Val = 4;
       }
       if(mvt < Aim_Perfection_Limit) 
       {
            if(Last_Value < Current_Value)
            {           
                if (Boost)
                { 
                    if (X_AXIS)
                        set_val(PS4_RX, (Current_Value + Aim_Boost_Val)); 
 
                    if (Y_AXIS)
                        set_val(PS4_RY, (Current_Value + Aim_Boost_Val));
                }
                else if(Correction)
                {
                    if (X_AXIS)
                        set_val(PS4_RX, (Current_Value - Aim_Correction_Val)); 
 
                    if (Y_AXIS)
                        set_val(PS4_RY, (Current_Value - Aim_Correction_Val));            
                }
            }
            else
            {
                if (Boost)
                { 
                    if (X_AXIS)
                        set_val(PS4_RX, (Current_Value - Aim_Boost_Val)); 
 
                    if (Y_AXIS)
                        set_val(PS4_RY, (Current_Value - Aim_Boost_Val));
                }
                else if(Correction)
                {
                    if (X_AXIS)
                        set_val(PS4_RX, (Current_Value + Aim_Correction_Val)); 
 
                    if (Y_AXIS)
                        set_val(PS4_RY, (Current_Value + Aim_Correction_Val));            
                }
            }
        }
    } 
function double_click(button) {        
if (double__tap[button] >= 0) {    
double__tap[button] += get_rtime(); 
if (double__tap[button] > 450)
double__tap[button] = -1;               
}   
if (event_release(button) && get_ptime(button) <= 200) { 
if (double__tap[button] < 0) {
double__tap[button] = 0;
} else { 
double__tap[button] = -1;   
return 1;   
} 
}  
return 0;
}
function mod(var,val1,val2){
var += val1;
var %= val2;
return var;
}
function xy_val(f_axis,f_val) {
	if(abs(get_val(f_axis)) < (_v + 1))  
	return f_val;    
	return get_val(f_axis);
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | | D | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 int __Title_L_NX, __Title_L_NX2, __Title_L_NY, __Title_L_NY2, __Title_L_NBit, __Title_L_NOffset, __Title_L_NData;
function draw_Title_L_N(x, y, invert) {
	__Title_L_NOffset = 2; // Reset the starting point
	__Title_L_NBit = 8; // Reset bit flag
	for (__Title_L_NY = 0; __Title_L_NY < picture[1]; __Title_L_NY++) { // Loop the Y axis
		for (__Title_L_NX = 0; __Title_L_NX < picture[0]; __Title_L_NX++) { // Loop the X axis
			__Title_L_NData = picture[__Title_L_NOffset]
			__Title_L_NX2 = x + __Title_L_NX;
			__Title_L_NY2 = y + __Title_L_NY;
			if (__Title_L_NX2 < 0 || __Title_L_NX2 >= 128) {
				__Title_L_NX2 -= 128;
			}
			if (__Title_L_NY2 < 0 || __Title_L_NY2 >= 64) {
				__Title_L_NY2 -= 64;
			}
			if (test_bit(__Title_L_NData, __Title_L_NBit - 1)) {
				pixel_oled(__Title_L_NX2, __Title_L_NY2, !invert);
			}
			else {
				pixel_oled(__Title_L_NX2, __Title_L_NY2, invert);
			}
			__Title_L_NBit--; // Decrement the bit flag, we're moving to the next bit
			if (!__Title_L_NBit) { // Check if we've just handled the last bit
				__Title_L_NBit = 8; // Reset the bit flag
				__Title_L_NOffset++; // Move to the next value
			}
		}
	}
}
function center_x(f_chars,f_font) {
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

	const uint8 ASCII_NUM[] = 
//--  0  1  2  3  4  5  6  7  8  9
 	{48,49,50,51,52,53,54,55,56,57};
 
 
     int i;
     int c,c_val;
 
function find_digits1(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
function find_digits2(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
function number_to_string1(f_val,f_digits) {
 
 
    i = 1;  c_val = 10000;
 
	if(f_val < 0) {          //--neg numbers
 
         putc_oled(i,45);    //--add leading "-"
 
         i += 1;
 
         f_val = abs(f_val);
	} 
 
 
	for(c = 5; c >= 1; c--) {
 
	    if(f_digits >= c) {
 
            putc_oled(i,ASCII_NUM[f_val / c_val]);
 
            f_val = f_val % c_val;
 
            i +=  1; 
 
            if(c == 4) {
                putc_oled(i,44);   //--add ","
 
                i += 1;
            }
        }
 
        c_val /= 10;
    }   
 	if(MENU_S == STICKY || MENU_S == RAPID){
    puts_oled(ndx + 53,ndy + 38,1,i - 1,1);}
    
    if(MENU_S == POLAR || MENU_S == _RECOIL){
    puts_oled(ndx + 83,ndy + 27,0,i - 1,1);}
}
function number_to_string2(f_val,f_digits) {
 
 
    i = 1;  c_val = 10000;
 
	if(f_val < 0) {          //--neg numbers
 
         putc_oled(i,45);    //--add leading "-"
 
         i += 1;
 
         f_val = abs(f_val);
	} 
 
 
	for(c = 5; c >= 1; c--) {
 
	    if(f_digits >= c) {
 
            putc_oled(i,ASCII_NUM[f_val / c_val]);
 
            f_val = f_val % c_val;
 
            i +=  1; 
 
            if(c == 4) {
                putc_oled(i,44);   //--add ","
 
                i += 1;
            }
        }
 
        c_val /= 10;
    }   
    if(MENU_S == POLAR || MENU_S == _RECOIL){
    puts_oled(ndx + 83,ndy + 47,0,i - 1,1);}
}