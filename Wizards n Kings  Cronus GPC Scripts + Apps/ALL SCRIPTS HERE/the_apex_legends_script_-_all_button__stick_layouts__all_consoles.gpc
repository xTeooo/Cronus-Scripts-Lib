// GPC Online Library
// the_apex_legends_script_-_all_button_/_stick_layouts_/_all_consoles.gpc

/*V4.4
READ THE INSTRUCTIONS!!! 
CREDITS: BATTS, CRECENS, Horrebb, ItzSnack, Noozbar
  ___  ____  ____  ____   ___  ____  __ _  ____ 
 / __)(  _ \(  __)/ ___) / __)(  __)(  ( \/ ___)
( (__  )   / ) _) \___ \( (__  ) _) /    /\___ \
 \___)(__\_)(____)(____/ \___)(____)\_)__)(____/
 				PROUDLY PRESENTS       
                   _____  ________   __          
             /\   |  __ \|  ____\ \ / /          
            /  \  | |__) | |__   \ V /           
           / /\ \ |  ___/|  __|   > <            
          / ____ \| |    | |____ / . \           
  _      /_/___ \_\_| ___|______/_/_\_\_   _____ 
 | |    |  ____/ ____|  ____| \ | |  __ \ / ____|
 | |    | |__ | |  __| |__  |  \| | |  | | (___  
 | |    |  __|| | |_ |  __| | . ` | |  | |\___ \ 
 | |____| |___| |__| | |____| |\  | |__| |____) |
 |______|______\_____|______|_| \_|_____/|_____/ 
              
	  _  _____ __ _     __ _ _________ _    
  |V||_|(_  | |_ |_)   |_ | \ |  |  | / \|\|
  | || |__) | |__| \   |__|_/_|_ | _|_\_/| |

--------------------------------------------------------------------------- 
    			  _    ,----------------------------------------------.
                __))   | INSTRUCTIONS: tinyurl.com/scriptinstructions |
              ( oo)   _)---------------------------------------------'
----------ooO--(_)--Ooo----------------------------------------------------
INSTRUCTIONS: OPEN THE URL ABOVE IN YOUR BROWSER!

 	 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ
	 â–ˆâ•”â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•—â–ˆ
	 â–ˆâ•‘USER CUSTOMIZING & CONFIGURATIONâ•‘â–ˆ
	 â–ˆâ• â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•£â–ˆ
	 â–ˆâ•‘*/define	STCK/*Sticks*/	= 0; /*â•‘â–ˆ
	 â–ˆâ•‘*/define	BTTN/*Buttons*/	= 0; /*â•‘â–ˆ 
	 â–ˆâ•‘*/define	Swap			= 0; /*â•‘â–ˆ Swap= 1; will swap bumpers<->triggers
	 â–ˆâ• â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•£â–ˆ
	 â–ˆâ•‘*/define EASY__MELEE		= 0; /*â•‘â–ˆ For Button Puncher users: melee with right stick
	 â–ˆâ•‘*/define Hair_triggers	= 1; /*â•‘â–ˆ 
	 â–ˆâ•‘*/define	Aim__Abuse		= 0; /*â•‘â–ˆ 
	 â–ˆâ•‘*/define Fast_Heal_Swap	= 0; /*â•‘â–ˆ HOLD D-PAD DOWN + TAP PS4_OPTIONS/XB1_MENU
	 â–ˆâ•šâ•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â–ˆ 
	 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ 

In the box above fill out your btn & stick layout and
the mods you want to use. From here on your script will
load exactly as you congfigured it above. 
oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo
  __               
 (_ _|_ o  _ |   _ 
 __) |_ | (_ |< _>             
                                                                       
0 = Default
1 = Southpaw
2 = Legacy
3 = Legacy-Southpaw

oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo 

 |_)    _|_ _|_  _  ._   _ 
 |_) |_| |_  |_ (_) | | _> 
                            
0 = Default
1 = Bumper Jumper
2 = Button Puncher
3 = Evolved
4 = Grenadier
5 = Ninja
oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo                                                        

  /\  | |    _ _|_ |_   _  ._ 
 /--\ | |   (_) |_ | | (/_ |  
                              
0 = NOT USE / NOT load by default
1 = USE / LOAD BY DEFAULT. 
For example: if you want Swap to be True (R1<->R2 & L1<->L2) you fill
out 1. If you do not want this to be True, you leave it 0. 

oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo oooooooooo  
*/
const byte BTTNS[][] = {
{3,19,18,5,6},  
{3,6,18,5,19}, 
{3,19,5,18,6}, 
{3,6,5,18,19},
{13,19,18,5,6}, 
{19,6,3,5,18}  
};

const byte STCKS[][] = {
{12,11,9,10},
{10,9,11,12},
{12,9,11,10},	
{10,11,9,12}	
};

const byte AR[][] =  {
{0,0,0}, 	// weapon 0 = WHITE
{0,0,0}, 	// weapon 1	= GREEN
{30,18,42}, // weapon 2	= RED
{35,25,55}, // weapon 3 = DARK BLUE
{28,14,42} 	// weapon 4 = SKY BLUE
};
/*
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | |L|E|D|S| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 
data(0,0,3,0,3,0,0,0,0,0,0,3,
         0,3,0,0,3,0,3,0); 
         

int Stick_Layout;								
define STCKS_DEFAULT 				= 0;
define STCKS_SOUTHPAW 			 	= 1;
define STCKS_LEGACY 			  	= 2;
define STCKS_LEGACY_SOUTHPAW		= 3;
define S_MIN						= 0;
define S_MAX						= 3;

int Button_Layout;									
define BTTNS_DEFAULT				= 0;
define BTTNS_BUMPER_JUMPER			= 1;
define BTTNS_BUTTON_PUNCHER			= 2;
define BTTNS_EVOLVED				= 3;
define BTTNS_GRENADIER				= 4;
define BTTNS_NINJA					= 5;
define B_MIN						= 0;
define B_MAX						= 5;

int PING;
int JUMP;
int CROUCH;
int MELEE;
int ABILITY;

int L__Y;
int L__X;
int R__X;
int R__Y;

/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |V|A|R|I|A|B|L|E|S| | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 

  
int ar_t[5]; 
int ar_s[5]; 
int ar_e[5];  
 
int idx;         
int key = 145;   
int record;     

int i;             
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int v,ar_y;


int AA_1=TRUE;
int AA_2=TRUE;
 
int RF_1 = FALSE; 
int RF_2 = FALSE; 
int RATE_OF_FIRE  = 13; 
 
int Switch;
int Weapon1 = 0; 
int Weapon2 = 1; 

// Fast Heal Swap
//--starting position is up & left should be med-kit
int w_x = -100; //--wheel position left 
int w_y =  100; //--wheel position up
 
int window_time = 250; //--time in ms to hold UP before moving
int xy_time = 20; //--time to hold LX & LY  
int rs_x;
int rs_y;
int combo_count;

int hold_time;
int rest_time;

//Aim Assist values: a higher value = stronger aim assist but also ads more shake
int a__p = 20; // Aim Assist Pos Value 
int a__n = 23; // Aim Assist Neg Value
//Aim Abuse Values
int HOLD = 284;
int RELEASE = 19;

init {
    
    record = get_pvar(SPVAR_16,140,150,140);
    if(record == key) {
        ar_t[0] = get_pvar(SPVAR_1 ,-100,100,0);  ar_t[1] = get_pvar(SPVAR_2, -100,100,0);  ar_t[2] = get_pvar(SPVAR_3, -100,100,0);
        ar_t[3] = get_pvar(SPVAR_4, -100,100,0);  ar_t[4] = get_pvar(SPVAR_5, -100,100,0);  ar_s[0] = get_pvar(SPVAR_6, -100,100,0);
        ar_s[1] = get_pvar(SPVAR_7, -100,100,0);  ar_s[2] = get_pvar(SPVAR_8, -100,100,0);  ar_s[3] = get_pvar(SPVAR_9, -100,100,0);
        ar_s[4] = get_pvar(SPVAR_10,-100,100,0);  ar_e[0] = get_pvar(SPVAR_11,-100,100,0);  ar_e[1] = get_pvar(SPVAR_12,-100,100,0);
        ar_e[2] = get_pvar(SPVAR_13,-100,100,0);  ar_e[3] = get_pvar(SPVAR_14,-100,100,0);  ar_e[4] = get_pvar(SPVAR_15,-100,100,0);
    }
}
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| |B|L|O|C|K| |S|T|A|R|T|S| |H|E|R|E| | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main{

set_val (TRACE_1, PING);
set_val (TRACE_2, JUMP);
set_val (TRACE_3, ABILITY);
set_val (TRACE_4, CROUCH);
set_val (TRACE_5, MELEE);

L__Y			= STCKS[Stick_Layout][0];
L__X			= STCKS[Stick_Layout][1];
R__X			= STCKS[Stick_Layout][2];
R__Y			= STCKS[Stick_Layout][3];

PING			= BTTNS[Button_Layout][0];
JUMP			= BTTNS[Button_Layout][1];
CROUCH			= BTTNS[Button_Layout][2];
MELEE			= BTTNS[Button_Layout][3];
ABILITY			= BTTNS[Button_Layout][4];

Button_Layout 	= BTTN;
Stick_Layout 	= STCK;

if (Swap == 1){
 swap(3,4 ); swap(6,7);}

  //--switch Weapon1 / Weapon2
    if(event_press(17) && !get_val(14))

        Switch=!Switch; 

//--rapidfire + on/off + RoF adjust
    hold_time = 500 / RATE_OF_FIRE;
    rest_time = hold_time - 20;
    if(rest_time < 0) rest_time = 0;
 
 
    if(get_val(4) && (!Switch && RF_1) || (Switch && RF_2))

        {combo_run(RAPID_FIRE);}

    //--colors for XBOX controller
    if(get_controller () == PIO_XB1)
    {
        if(idx == 0) led_color(6); // White
        if(idx == 1) led_color(0); // Green
        if(idx == 2) led_color(1); // Blue
        if(idx == 3) led_color(idx); //Red
        if(idx == 4) led_color(4); // SkyBlue
    }
    //--colors for PS4 controller
    else
        led_color(idx);

//--calculate values for progression
 
    //--adding or subtracting
    if((AR[idx][1] + ar_s[idx]) < (AR[idx][2] + ar_e[idx]))
        i_val = 1; 
    else
        i_val = -1;
    //--iteration point for progression 
    i_pnt = (AR[idx][0] * 10) / (abs((AR[idx][1] + ar_s[idx]) - (AR[idx][2] + ar_e[idx]))); 
 
 
//--reset counters/pointers
    if(!get_lval(4)) 
    {
       ar_y = AR[idx][1] + ar_s[idx];
       i_cnt = 0;
       i_num = 0;
    }
 
    if(get_val(4)) 
    {
    
        if(!p_complete())  
            ar_y = p_val();
        else
            ar_y = AR[idx][2] + ar_e[idx];
        //--set RY to anti recoil value
            if(y_val() > 100)
                set_val(R__Y, 100);
         else
            set_val(R__Y,y_val());
    }
if (Aim__Abuse==1)
    if(get_lval(7)> 99){combo_run(AimAbuse);}
    if(event_release(7)){ combo_stop(AimAbuse);}
 
    //Heal Swap Activation   
    //Down arrow is pressed 
if (Fast_Heal_Swap==1){
if(get_val (14) && event_press(2)) {
    rs_x = w_x;
    rs_y = w_y;}
    if(rs_x || rs_y)
    combo_run(HEAL);
}    

if(!Switch) 
{
    idx = Weapon1;
 
    //--select your "primary"
    if(get_val(14) && !get_val(7)) 
    { // DOWN start	
 
    if(event_press(20))
            {Weapon1 = 2;} // Pink
        if(event_press(19))
            {Weapon1 = 1;} // Blue
        if(event_press(18))
            {Weapon1 = 3;} // Red
        if(event_press(17))
            {Weapon1 = 0;} // Green
        if(event_press(5))
            {Weapon1 = 4;} // SkyBlue
        //--block buttons
        set_val (5, 0); set_val (17, 0); set_val (18, 0);
        set_val (19, 0); set_val (20, 0);
    } // DOWN end 

    
    //--rapidfire for "Weapon 1" only
    if(get_val(7)){ 
    		if (event_press(2))
    {
        RF_1 = !RF_1;
    }
    set_val (2,0);
    }//--aim assist on/off
    if(get_val(7)){
    	if (event_press(0))
    {
        AA_1 = !AA_1; 
    }
    set_val(0,0);
    }

	
 }

//--secondary weapon
if(Switch)
{
    idx = Weapon2;
 
    //--select your "secondary"
    if(get_val(14) && !get_val(7)) 
    { // DOWN start
 
        if(event_press(20))
            {Weapon2 = 2;} // Pink
        if(event_press(19))
            {Weapon2 = 1;} // Blue
        if(event_press(18))
            {Weapon2 = 3;} // Red
        if(event_press(17))
            {Weapon2 = 0;} // Green
        if(event_press(5))
            {Weapon2 = 4;} // SkyBlue
     
        		
        //--block buttons
        set_val (5, 0); set_val (17, 0); set_val (18, 0);
        set_val (19, 0); set_val (20, 0);
        
 
    } // DOWN end 
          


// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    //--rapidfire for "Weapon 2" only
    if(get_val(7)){ 
    		if (event_press(2))
    {
        RF_2 = !RF_2;
    }
    set_val (2,0);
    }//--aim assist on/off
    if(get_val(7)){
    	if (event_press(0))
    {
        AA_2 = !AA_2;  
    }
    set_val(0,0);
    }
    }
    
    if(get_val(7)) 
    { 
        if(get_val(20)) 
        {
            if(event_press(13))
                ar_s[idx] += 1;          
            if(event_press(14))
                ar_s[idx] -= 1;    
            if(event_press(16))
                ar_s[idx] += 10; 
            if(event_press(15))
                ar_s[idx] -= 10;
        }
 
        if(get_val(18)) 
        {
            if(event_press(13))
                ar_e[idx] += 1;          
            if(event_press(14))
                ar_e[idx] -= 1;    
            if(event_press(16))
                ar_e[idx] += 10; 
            if(event_press(15))
                ar_e[idx] -= 10;
        }
 
        if(get_val(19)) 
        {
            if(event_press(13))
                ar_t[idx] += 1;          
            if(event_press(14))
                ar_t[idx] -= 1;
        }
 
        if(event_press(1)) 
        {
            set_pvar(SPVAR_1 ,ar_t[0]);  set_pvar(SPVAR_2 ,ar_t[1]); set_pvar(SPVAR_3 ,ar_t[2]);
            set_pvar(SPVAR_4 ,ar_t[3]);  set_pvar(SPVAR_5 ,ar_t[4]); set_pvar(SPVAR_6 ,ar_s[0]);
            set_pvar(SPVAR_7 ,ar_s[1]);  set_pvar(SPVAR_8 ,ar_s[2]); set_pvar(SPVAR_9 ,ar_s[3]);
            set_pvar(SPVAR_10,ar_s[4]);  set_pvar(SPVAR_11,ar_e[0]); set_pvar(SPVAR_12,ar_e[1]);
            set_pvar(SPVAR_13,ar_e[2]);  set_pvar(SPVAR_14,ar_e[3]); set_pvar(SPVAR_15,ar_e[4]);
            set_pvar(SPVAR_16,key); combo_run (Vibrate);
        }
 
        set_val(17,0); set_val(20,0);
        set_val(18,0); set_val(19,0);
        set_val(13,0); set_val(14,0);
        set_val(16,0); set_val(15,0);
        set_val(2,0);
 
    } // ADS end
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|I|M| |A|S|S|I|S|T| | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if(get_val(7)){ if (AA_1 &&!Switch || AA_2 &&Switch)combo_run(AA_XY);}  else combo_stop(AA_XY); 
 /*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |E|A|S|Y| |R|U|N| | | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if (!get_val(7)&& get_val(L__Y) < -25)combo_run (EASY_RUN);
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |E|A|S|Y| |M|E|L|E|E| | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if (EASY__MELEE == 1 && get_val(8))set_val(MELEE, 100);	 
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |T|U|R|B|O| |B|T|N| |A|.|K|.| |H|A|I|R| |T|R|I|G|G|E|R|S| | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/  
if (Hair_triggers==1){
deadzone(4,7,90,90);}
}
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 combo AA_XY {
    set_val(R__Y,xy_val(R__Y, a__p));
    wait(20);
    set_val(R__X,xy_val(R__X, a__p));
    set_val(L__X,xy_val(L__X, a__p));
    wait(20);
    set_val(R__Y,xy_val(R__Y, a__n * -1));
    wait(20);
    set_val(R__X,xy_val(R__X, a__n * -1));
    set_val(L__X,xy_val(L__X, a__n * -1));
    wait(20);
}
   // Heal Swap Combo part
combo HEAL {
    set_val(13, 100); //--hold up
    wait(window_time);
    set_val(13, 100); //--hold up
    set_val(R__X,rs_x);
    set_val(R__Y,rs_y); //--set RX & RY
    wait(xy_time);  
    set_val(R__X,rs_x); //--hold briefly, release UP
    set_val(R__Y,rs_y);
    wait(30);
    wait(30); //--second wait() will return input to controller
    combo_count += 1; //add one
    w_x = inv(w_x); //reverse for next call 
    if(combo_count == 2){
    //flip the sign
    w_y = inv(w_y);
    combo_count = 0;} //--reset
    rs_x = 0; //--clear vals so combo only runs once
    rs_y = 0;
 }
    
combo RAPID_FIRE { 
    set_val(4,100);
    wait(hold_time); 
    set_val(4,  0); 
    wait(rest_time);
}
combo Vibrate {
    set_rumble(RUMBLE_A, 100);
    wait(300);
    reset_rumble();
    wait(1000);
}
combo EASY_RUN {                  
    set_val(8,100);       
    wait(30);                     
    wait(100);      
}  
combo AimAbuse {
    set_val(7, 100);
    wait(HOLD);
    set_val(7, 0);
    wait(RELEASE);
    }

function xy_val(f_axis,f_val) {
	if(abs(get_val(f_axis)) < 25)
	return f_val;
	return get_val(f_axis);
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > AR[idx][0] * 10) {
        //--avoid stack overflow
        i_cnt = AR[idx][0] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
} 
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
        i_num = 0;
        //--adjust ar_y 
        ar_y += i_val;
    }
    return ar_y;
} 
function y_val() {
    v = get_val(R__Y);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ar_y;           
}
function led_color(f_color) {
   for(i = 0; i <= 3; i++) {
     set_led(i,dbyte((f_color * 4) + i));
   }
}