// GPC Online Library
// battlefield_v_project_lollipop.gpc

//Battlefield V- Project Lollipop ----0 Author Icebed 0
//Best Battlefield V menu released yet				  |
// May/10/2019									  |
/*
*V3
To reset values just reinstall the script to your cronusmax or switch what number mode your on and back to it.

			  __  _  ___,___,    _, __, ___,  _,,   ,_                                   
			 '|_)'|\' | ' | |   /_,'|_,' |   /_,|   | \,                                 
			 _|_) |-\ |   |'|__'\_  |   _|_,'\_'|___|_/                                  
				'     '  `'   '   '   ` '  '       `  '                                      
	       :::::::::: ::::::::::: :::     ::: :::::::::: 
	       :+:            :+:     :+:     :+: :+:         
	      +:+            +:+     +:+     +:+ +:+          
	     :#::+::#       +#+     +#+     +:+ +#++:++#      
	    +#+            +#+      +#+   +#+  +#+            
	   #+#            #+#       #+#+#+#   #+#             
	  ###        ###########     ###     ##########                                                         		 
		        |===
				 |===										
 +--^----------,--------,-----,--------^-,-------------
 | |||||||||   `--------'     |Created-by-icebed!!!!!!!) =>   =>
 `+---------------------------^----------|-------------	  
   `\_,---------,---------,--------------'	   
     / XXXXXX /'|       /'			    
    / XXXXXX /  `\    /'
   / XXXXXX /`-------'
  / XXXXXX /
 / XXXXXX /
(________(                
 `------'

--------------------------------------------------------------------------------------------------------
                                                                 
  INSTRUCTIONS:
  _____________________________________________________________________________________________________
Hold D-PAD down & DOUBLE TAP BUTTON

Aim corrections = PS4 CIRCLE
Anti-recoil = on by defualt
_____________________________________________________________________________________________________
Auto Heal = Hold up for 2 Secconds plus
Auto squad heal = Hold left for 2 secconds plus
_____________________________________________________________________________________________________
Hold Aim & tap

Rapid Fire Always on = Right     
All Rapid Fire Off = Down

_____________________________________________________________________________________________________

-------INSTURCTIONS TO CHANGE ANTI-RECOIL ON THE FLY-------

One Rumble = +1
One Rumble = -1

Y-AXIS

HOLD PS4_L1
starting anti recoil +1 = ps4_up
starting anti recoil -1 = ps4_down

HOLD PS4_CROSS
mid anti recoil +1 = ps4_up
mid anti recoil -1 = ps4_down

HOLD PS4_TRIANGLE
starting anti recoil +1 = ps4_up
starting anti recoil -1 = ps4_down

-----------------------------------------------------------

X-AXIS

HOLD PS4_CIRCLE
starting anti recoil +1 = ps4_RIGHT
starting anti recoil -1 = ps4_LEFT

HOLD PS4_CROSS
mid anti recoil +1 = ps4_RIGHT
mid anti recoil -1 = ps4_LEFT

HOLD PS4_TRIANGLE
starting anti recoil +1 = ps4_RIGHT
starting anti recoil -1 = ps4_LEFT
  															                                                           
  _    _                     _____  _              _    _               
 | |  | |                   / ____|| |            | |  (_)              
 | |  | | ___   ___  _ __  | (___  | |  ___   ___ | |_  _   ___   _ __  
 | |  | |/ __| / _ \| '__|  \___ \ | | / _ \ / __|| __|| | / _ \ | '_ \ 
 | |__| |\__ \|  __/| |     ____) || ||  __/| (__ | |_ | || (_) || | | |
  \____/ |___/ \___||_|    |_____/ |_| \___| \___| \__||_| \___/ |_| |_|
                                                                        
   
	   In this part of the script, you can adujust some settings and configerations.
	   True = ON, and False = OFF     
	   Select what you would like to use below
 */
define EASY__RUN					=	FALSE;		// EASY RUN 
define RUN__SENS					=	-75; 		// SENSITIVITY WHEN EASY RUN SHOULD ACTIVATE 
define EASY__SLIDE_DROP				=	TRUE;		// TAP PRONE (RIGHT STICK CLICK) FOR CROUCH, PRESS PRONE FOR 1 SEC TO DROP / SLIDE
define EASY__MELEE					=	FALSE;		// MELEE IS UNDER LEFT STICK CLICK
define CANCEL_RLD               	=   FALSE;       // AUTO CANCEL RELOAD, USE ADS OR FIRE TO ACTIVATE
define SWAP							=	FALSE;		// THIS SWAPS THE STICKS SO THAT YOU HAVE MELEE AND PRONE UNDER YOUR THUMBS 
define SPOT__TRIGGER				=	FALSE;		// WHEN TRUE, AUTO SPOT WILL ONLY RUN WHEN YOU PRESS AND HOLD AIM
define turbo__trigger				=	TRUE;		// HAIR TRIGGERS ON BOTH ADS & FIRE
define V_SENS						=   150;        // RIGHT JOYSTICK Y AXIS!!! HIGHER the slower the axis will be
define X_SENS                   	=   150;        // RIGHT JOYSTICK X AXIS!!! HIGHER the slower the axis will be
define F_SENS                   	=   150;        // RIGHT JOYSTICK Z AXIS!!! HIGHER the slower the axis will be
int Starting_Anti_Recoil_Value 		=   34;			//Anti-recoil Y-AXIS Starting point for 1/3 of total anti-recoil time
int Mid_Point_Anti_Recoil_Value 	=   32;			//Anti-recoil Y-AXIS Starting point for 2/3 of total anti-recoil time
int Ending_Anti_Recoil_Value 		=   30;			//Anti-recoil Y-AXIS Starting point for 3/3 of total anti-recoil time
define Total_Anti_Recoil_Time 		=   4750;		//Anti-recoil time Limit to empty full Clip of ammo
int p,inc,inc_2,pr,pr_2,vm,vm_2;					
int vm_count,vm_loops,p_count,v,ar_y;				
int Starting_Anti_Recoil_Value1 	=   0;			//Anti-recoil X-AXIS Starting point for 1/3 of total anti-recoil time
int Mid_Point_Anti_Recoil_Value1	=   0;			//Anti-recoil X-AXIS Starting point for 2/3 of total anti-recoil time
int Ending_Anti_Recoil_Value1 		=   0;			//Anti-recoil X-AXIS Starting point for 3/3 of total anti-recoil time
define Total_Anti_Recoil_Time1 		=   4750;		//Anti-recoil time Limit to empty full Clip of ammo
int inc1,inc_4,pr1,pr_4,vm1,vm_4;					
int vm_count1,vm_loops1,p_count1,x,ar_x;			
define AIM__CORRECT					 = FALSE;		// Makes waeapon sway less when Aiming
define AimAssist        			 = TRUE;
define Shake            			 = 13;        	//How much your screen shakes
define Speed           	`			 = 70;        	//How fast your screen shakes

/*     AIM CORRECTION SENSITIVITY VALUES:
       ADS SENS = SENS WHEN AIMING
       GEN SENS = GENERAL STICK SENS
       HIP SENS = SENS WHEN HIP FIRING
       ADS FIRE SENS = SENS WHEN AIMING AND FIRING WEAPON
       MIDPOINTS = 0-50 OF JOYSTICK Ratio "Example"  
       If set to 25, then 0-25 of joystick movement will be 50% of joystick now
       If set to 100, the 100 of the joystick will equal 50% of joystick movement
*/
int ADS_SENS=90, GEN_SENS=130, HIP_SENS=80, ADS_FIRE_SENS=85, Use_sens, midpoint=50, ADS_FIRE_MIDPOINT=50, HIP_MIDPOINT=50, GEN_MIDPOINT=50, ADS_MIDPOINT=50;

// Finished confergrations

/*
                    | |              | |      
   ___  ___   _ __  | |_  _ __  ___  | | ___  
  / __|/ _ \ | '_ \ | __|| '__|/ _ \ | |/ __| 
 | (__| (_) || | | || |_ | |  | (_) || |\__ \ 
  \___|\___/ |_| |_| \__||_|   \___/ |_||___/ 
                                                                                           
*/
define HOME=0;			//PS4_PS / XB1_XBOX
define VIEW_reset=1;	//PS4_SHARE / XB1_VIEW
define MENU_save=2;		//PS4_OPTIONS / XB1_MENU
define SPOT=3;			//PS4_R1 / XB1_RB
define FIRE=4;			//PS4_R2 / XB1_RT
define MELEE=5;			//PS4_R3 / XB1_RS
define TACTICAL=6;		//PS4_L1 / XB1_LB
define ADS=7;			//PS4_L2 / XB1_LT
define SPRINT=8;		//PS4_L3 / XB1_LS 
define RX=9;			//PS4_RX / XB1_RX
define RY=10;			//PS4_RY / XB1_RY
define LX=11;			//PS4_LX / XB1_LX
define LY=12;			//PS4_LY / XB1_LY
define UP=13;			//PS4_UP / XB1_UP
define DOWN=14;			//PS4_DOWN / XB1_DOWN
define LEFT=15;			//PS4_LEFT / XB1_LEFT
define RIGHT=16;		//PS4_RIGHT / XB1_RIGHT
define SW_WEAPON=17;	//PS4_TRIANGLE / XB1_Y
define PRONE=18;		//PS4_CIRCLE / XB1_B
define JUMP=19;			//PS4_CROSS / XB1_A
define RELOAD=20;		//PS4_SQUARE / XB1_X
define GYROX_PR1=24;	//PS4_GYROX / XB1_PR1
define GYROY_PR2=25;	//PS4_GYROY / XB1_PR2
define GYROZ_PL1=26;	//PS4_GYROZ / XB1_PL1
define TOUCH_PL2=27;	//PS4_TOUCH / XB1_PL2
define Off=0;
define Green=1;
define Blue=2;
define Pink=3;
define Red=4;
define SkyBlue=5;
define White=7;
data(
0,0,0,0,
0,0,2,0,
2,0,0,0,
0,0,0,2,
0,2,0,0,
2,0,2,0,
2,2,2,2
); 
int    q;
int    double__tap[30];
int    G__M=TRUE; 
int    hold_time;
int    rest_time;
int    PrimaryWeapon=TRUE;
int    RF_KS=FALSE;
int    b_reload;
int    auto_heal;
int    auto_heal_medic;
int    TimelimitA=1000;
int    TimerA=0;
int    RATE_OF_FIRE = 25;	// Adujust from 1-25 shots pr-seccond
init {
    while(q < 30) {
        double__tap[q] = -1;       
        q++;
    }    
    RATE_OF_FIRE 	= get_pvar(SPVAR_1,0, 20, 13);
    
    vm_loops = (Total_Anti_Recoil_Time / 10) / 2;
    if(Starting_Anti_Recoil_Value < Mid_Point_Anti_Recoil_Value)
        inc = 1;
    else
        inc = -1;
    if(Mid_Point_Anti_Recoil_Value < Ending_Anti_Recoil_Value)
        inc_2 = 1;
    else
        inc_2 = -1;
    pr = abs(Starting_Anti_Recoil_Value - Mid_Point_Anti_Recoil_Value);
    pr_2 = abs(Mid_Point_Anti_Recoil_Value - Ending_Anti_Recoil_Value);
    vm = vm_loops / pr;
    vm_2 = vm_loops / pr_2;
    vm_loops1 = (Total_Anti_Recoil_Time1 / 10) / 2;
    if(Starting_Anti_Recoil_Value1 < Mid_Point_Anti_Recoil_Value1)
        inc1 = 1;
    else
        inc1 = -1;
    if(Mid_Point_Anti_Recoil_Value1 < Ending_Anti_Recoil_Value1)
        inc_4 = 1;
    else
        inc_4 = -1;
    pr1 = abs(Starting_Anti_Recoil_Value1 - Mid_Point_Anti_Recoil_Value1);
    pr_4 = abs(Mid_Point_Anti_Recoil_Value1 - Ending_Anti_Recoil_Value1);
    vm1 = vm_loops1 / pr1;
    vm_4 = vm_loops1 / pr_4;
} 

main {
  if(get_val(DOWN)) {
	if (double_click(2)) {
        G__M = !G__M;
         if (G__M) combo_run (Rumb);
         if (!G__M) combo_run (RumbTwo);
    }
    set_val(2,0);
    }
if(get_val(ADS) &&(G__M)){
	if(event_press(DOWN)){
		PrimaryWeapon=TRUE;
		RF_KS=FALSE;
}
	if(event_press(RIGHT)){
		PrimaryWeapon=TRUE;
		RF_KS=TRUE;
} 
	set_val(1,0); set_val(2,0); set_val(13,0); set_val(14,0); set_val(15,0); set_val(16,0); 
}
if (SWAP){
	swap(8, 5);
	} 
if(EASY__SLIDE_DROP){
if (event_release(PRONE) && get_ptime(PRONE)< 165){ 
        set_val(PRONE, 100);
    }
}
if (SPOT__TRIGGER && get_val(ADS)) combo_run (AutoSpot);
    if (event_release (UP)&& get_ptime(UP)> 500){
     set_val(UP,0);
     auto_heal = !auto_heal; 
    	if (auto_heal) combo_run (RumbTwo);
 				if (!auto_heal) combo_run (Rumb);}
     
     if (event_release (LEFT)&& get_ptime(LEFT)> 500){
      set_val (LEFT,0);
      auto_heal_medic = !auto_heal_medic;
       	if (auto_heal_medic) combo_run (RumbTwo);
 				if (!auto_heal_medic) combo_run (Rumb);} 
	 if (auto_heal && event_release (FIRE) &&!get_val(ADS)) {TimerA=TimelimitA;}
 	if (TimerA>0)
     {
     TimerA=TimerA - get_rtime();
     if (TimerA<=3000 && event_press (RELOAD)){ combo_run (AutoHeal);}
      }  
     
	if (auto_heal_medic &&!get_val(ADS)){
 		combo_run (AutoHeal_Medic);
 	}
if (EASY__MELEE && get_val(SPRINT)) set_val(PRONE, 100);

turbo(FIRE);
turbo(ADS); 
 
if(AIM__CORRECT){   
  if(get_val(FIRE) && get_val(ADS)) { 
	Use_sens = ADS_FIRE_SENS && ADS_FIRE_MIDPOINT;
  }
  if(get_val(FIRE) && !get_val(ADS)) { 
	Use_sens = HIP_SENS && HIP_MIDPOINT;
  }
  if(!get_val(FIRE) && !get_val(ADS)) {
	Use_sens = GEN_SENS && GEN_MIDPOINT;
  }
  if(!get_val(FIRE) && get_val(ADS)) {
	Use_sens = ADS_SENS && ADS_MIDPOINT;
  } 
	sensitivity( 9 , PS4_RX == NOT_USE,300 - X_SENS);
    sensitivity( 10, PS4_RY == NOT_USE,300 - V_SENS);
    sensitivity( 26, PS4_GYROZ == NOT_USE,300 - F_SENS);
}
    set_val(30,vm_count);
    set_val(31,p);
    set_val(32,ar_y);
 
    if(!get_lval(4)) {
        p = 0;
        vm_count = 0;
        p_count = 0;
        ar_y = Starting_Anti_Recoil_Value;
    }
    if(get_val(4) && get_val(7)) {
        p = p_cycle();
        if(p != -1)
            ar_y = p_val();
        else
            ar_y = Ending_Anti_Recoil_Value;
         set_val(10,y_val());
    }    
    set_val(33,vm_count1);
    set_val(34,p);
    set_val(35,ar_x);
 
    if(!get_lval(4)) {
        p = 0;
        vm_count1 = 0;
        p_count1 = 0;
        ar_x = Starting_Anti_Recoil_Value1;
    }
    if(get_val(4) && get_val(7)) {
        p = p_cycle1();
        if(p != -1)
            ar_x = p_val1();
        else
            ar_x = Ending_Anti_Recoil_Value1;
         set_val(9,x_val());
    }    
if (get_val(PS4_L1)) {
 if (event_press(PS4_UP)) {
 Starting_Anti_Recoil_Value = Starting_Anti_Recoil_Value + 1;
 combo_run (Rumb);}
 if(event_press(PS4_DOWN)) {
 Starting_Anti_Recoil_Value = Starting_Anti_Recoil_Value - 1;
 combo_run (Rumb);}
 set_val(PS4_RIGHT, 0); set_val(PS4_LEFT, 0); }
 if (get_val(PS4_CROSS)) {
 if (event_press(PS4_UP)) {
 Mid_Point_Anti_Recoil_Value = Mid_Point_Anti_Recoil_Value + 1;
 combo_run (Rumb);}
 if(event_press(PS4_DOWN)) {
 Mid_Point_Anti_Recoil_Value = Mid_Point_Anti_Recoil_Value - 1;
 combo_run (Rumb);}
 set_val(PS4_UP, 0); set_val(PS4_DOWN, 0); }
 if (get_val(PS4_TRIANGLE)) {
 if (event_press(PS4_UP)) {
 Ending_Anti_Recoil_Value = Ending_Anti_Recoil_Value + 1;
 combo_run (Rumb);}
 if(event_press(PS4_DOWN)) {
 Ending_Anti_Recoil_Value = Ending_Anti_Recoil_Value - 1;
 combo_run (Rumb);}
 set_val(PS4_UP, 0); set_val(PS4_DOWN, 0); }
 if (get_val(PS4_CIRCLE)) {
 if (event_press(PS4_RIGHT)) {
 Starting_Anti_Recoil_Value1 = Starting_Anti_Recoil_Value1 + 1;
 combo_run (Rumb);}
 if(event_press(PS4_LEFT)) {
 Starting_Anti_Recoil_Value1 = Starting_Anti_Recoil_Value1 - 1;
 combo_run (Rumb);}
 set_val(PS4_RIGHT, 0); set_val(PS4_LEFT, 0); }
 if (get_val(PS4_CROSS)) {
 if (event_press(PS4_RIGHT)) {
 Mid_Point_Anti_Recoil_Value1 = Mid_Point_Anti_Recoil_Value1 + 1;
 combo_run (Rumb);}
 if(event_press(PS4_LEFT)) {
 Mid_Point_Anti_Recoil_Value1 = Mid_Point_Anti_Recoil_Value1 - 1;
 combo_run (Rumb);}
 set_val(PS4_RIGHT, 0); set_val(PS4_LEFT, 0); } 
 if (get_val(PS4_TRIANGLE)) {
 if (event_press(PS4_RIGHT)) {
 Ending_Anti_Recoil_Value1 = Ending_Anti_Recoil_Value1 + 1;
 combo_run (Rumb);}
 if(event_press(PS4_LEFT)) {
 Ending_Anti_Recoil_Value1 = Ending_Anti_Recoil_Value1 - 1;
 combo_run (Rumb);}
 set_val(PS4_RIGHT, 0); set_val(PS4_LEFT, 0); }
if(AimAssist){
if (get_val(PS4_L2) && get_val(PS4_R2)) {
combo_run(AimAssist);
}
if((get_val(PS4_RX)) > Shake || (get_val(PS4_RX)) < inv(Shake)){
combo_stop(AimAssist);
}
}   
if (EASY__RUN){ 
 if (get_val(LY)<=RUN__SENS &&!get_val(ADS)){ combo_run(EASY_RUN); } 
 }
if (PrimaryWeapon){
	if (RF_KS && get_val(FIRE)){combo_run (RAPID_FIRE);
		hold_time = 500 / RATE_OF_FIRE;
		rest_time = hold_time - 20;
		if(rest_time < 0) rest_time = 0;
}
	} 
if(event_release(PS4_SQUARE))
combo_run(CANCEL_RLD);

if(b_reload)
 if (event_press(PS4_L2) || event_press(PS4_R2)) {
  combo_run(CNCL_RELOAD);
  b_reload = FALSE;
  combo_stop (CANCEL_RLD);
  }
PLAY__LEDS ();
}
combo RAPID_FIRE { 
	set_val(FIRE,100);
	wait(35); 
	set_val(FIRE,  0); 
	wait(35);
}
combo Rumb{
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
     wait(150);
     reset_rumble();
}
combo RumbTwo {
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait (150);
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait(150);
    reset_rumble();
}
    combo EASY_RUN {
	set_val(SPRINT,100); 
	wait(32);   
	wait(100); 
}
combo CANCEL_RLD {
 b_reload = TRUE;
 wait(1800)
 b_reload = FALSE; 
}
combo CNCL_RELOAD {
set_val(MELEE, 100);
wait (75);
set_val(MELEE, 0);
set_val(PS4_R2, 100);
b_reload = FALSE;
}
combo AimAssist {
set_val(RX, Shake);
wait(Speed);
wait(4);
set_val(RX, Shake*(-1));
wait(Speed);
}
combo AutoSpot { 
    set_val(SPOT, 100); 
    wait(40);                 
    set_val(SPOT, 0);   
    wait(960); 
}
combo AutoHeal_Medic {
if (!get_val(FIRE))
    set_val(LEFT, 100);
    wait(200);
    if (!get_val(FIRE))
    set_val (UP, 100);
    wait(200);
}
combo AutoHeal{
wait (2000);
if (!get_val(FIRE))	
    set_val (UP, 100);
    wait(200);
    wait(960);
}
function turbo(btn) {
    if (!turbo__trigger || !get_val(btn)) return; 
    set_val(btn, 100);
    }  
function p_val1() {
    p_count1++;
    if(p_count1 == vm1[p]) {
        p_count1 = 0;
        ar_x += inc1[p];
    }
    return ar_x;
} 
function p_cycle1() { 
    vm_count1++;
    if (vm_count1 > vm_loops1) { 
        if(!p) {
            vm_count1 = 0;
            return 1;
        }
        else{
            vm_count1 = vm_loops1; 
            return -1;
         } 
     }
     return p;
}        
function x_val() {
    x = get_val(9);
    if(abs(x) < 10)
        x = 0;
    if(abs(x) > ar_x + 5)
        return x;
    return x + ar_x;       
}
function p_val() {
    p_count++;
    if(p_count == vm[p]) {
        p_count = 0;
        ar_y += inc[p];
    }
    return ar_y;
} 
function p_cycle() { 
    vm_count++;
    if (vm_count > vm_loops) { 
        if(!p) {
            vm_count = 0;
            return 1;
        }
        else{
            vm_count = vm_loops; 
            return -1;
         } 
     }
     return p;
}        
function y_val() {
    v = get_val(10);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ar_y;
    }
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function PLAY__LEDS (){
	if(PrimaryWeapon) color_led (Blue);
	if(PrimaryWeapon && RF_KS) color_led (Red);
	if(AIM__CORRECT && get_val (FIRE)) color_led(Pink);
	if(get_val(FIRE) && get_val(ADS)) color_led (Green);
	
}
function color_led(colour) {
	set_led(LED_1, dbyte(colour * 4));
	set_led(LED_2, dbyte((colour * 4) + 1));
	set_led(LED_3, dbyte((colour * 4) + 2));
	set_led(LED_4, dbyte((colour * 4) + 3));
}

/*
Thanks For useing my script.
I would also like to thanks everyone. That has helped by posting code on the fourms.
The knowlege people have shared to help me learn .GPC
This couldnt of been done with out you and the Manual.

Please if you have a seccond. 
Could you rate my script a Thumbs up, if you enjoy it.
â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–„â–„â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘
â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘
â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘
â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–‘â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘
â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„â–„â–ˆâ–‘â–‘â–‘â–‘â–‘â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–„â–‘â–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘
â–“â–“â–“â–“â–“â–“â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€â–‘â–‘â–‘â–‘â–€â–€â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–€â–‘â–‘â–‘â–‘
	
*/