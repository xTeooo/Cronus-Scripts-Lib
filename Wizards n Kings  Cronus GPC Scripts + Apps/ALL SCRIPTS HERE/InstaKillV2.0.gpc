/*

 ──▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───
───█▒▒░░░░░░░░░▒▒█───
────█░░█░░░░░█░░█────
─▄▄──█░░░▀█▀░░░█──▄▄─
█░░█─▀▄░░░░░░░▄▀─█░░█
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█░░╦─╦╔╗╦─╔╗╔╗╔╦╗╔╗░░█
█░░║║║╠─║─║─║║║║║╠─░░█
█░░╚╩╝╚╝╚╝╚╝╚╝╩─╩╚╝░░█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
____________________________InstalKill _V2____ Fortnite Update 7.30 Working ____________________________________________


///   |------*/ int In_Game_Sens   = 5;     /*#######|------------------- SENSITIVITY OPTIMIZING! -------------------|                                                                                      ///

///  SETUP                                                                                 ///
///--------------------------------------------------------------------------------------------------------------------
///   /////CONTROLS/////				/////BEST SCRIPT /////											   ///                                            
///===================================================================================== 
/// AUTO RUN: alway on, moving the left stick upwards will automatically run              ///
///=========================================================================================
///AIM ABUSE 2 sets Both LT+LEFT dont put both as TRUE AS Wont Work Only One At A Time :) 
///============================================================================================
///DROPSHOT: ADS + RELOAD_BTN, the player lowers and rises quickly as he shoots                                                 ///                                                                                                                              
///============================================================================================
///ANTI RECOIL: always on                      
///============================================================================================
///RAPID FIRE: ADS + RIGHT                           
///============================================================================================
///HAIR TRIGGER: always On, This also allows super fast building.                                                              ///                                    
///============================================================================================
///  
///============================================================================================
///                
///============================================================================================
/// 
///============================================================================================
/// 
///============================================================================================
/// 
///============================================================================================
/// 
///============================================================================================
///_______________________________________________________________________________________ ///_
*/

 
 
 
                                                                             
                                
                                                                                    
                                                                                  
                                                                                   
                                                                                    
//RAPID FIRE ///
int rapid_onoff = FALSE; 
  
//OP AimAbuse 1 And 2
int AimAbuse = FALSE; // HOLD "ADS_BTN" and TAP "LEFT" for toggle ON_OFF
int AimAbuse2 = TRUE; // HOLD "ADS_BTN" and TAP "LEFT" for toggle ON_OFF 
 
//AIM ASSIST 
int OpAimAssist = FALSE; // HOLD "ADS_BTN" and TAP "UP"
 
//GHOST PEEK HOLD L2(LT) AND TAP R2(RT)
int Ghost_Peek = FALSE; // HOLD "ADS_BTN" and TAP "DROP" for toggle ON_OFF
 
 //AIM ASSIST  HOW MUCH SCREEN SHAKE
int shake = 50; 
                                                                                                                    
//Drop Shot
int Drop_Shot = FALSE; // HOLD "ADS_BTN" and TAP "JUMP_BTN" for toggle ON_OFF
 
 //BUTTONS:
 
 
//RAPID FIRE BUTTON
int RAPID = 16; //RIGHT
 
 //GHOST PEEK BUTTON
define DROP = 6; //PS4_L1 XB1_LB
 
//----------------------------------------
// BUTTON LAYOUT: BUILDER PRO
 define FIRE_BTN = 4; //XB1_RB //PS4_R2
 define ADS_BTN = 7; //XB1_LB //PS4_L2
 define CROUCH_BTN = 5; //XB1_RS //PS4_R3
 define SPRINT_BTN = 8; //XB1_LS //PS4_L3
 define JUMP_BTN = 19; //XB1_A  //PS4_CROSS
 define NEXT_PIECE = 3; //XB1_RT //PS4_R1
 define LEFT_BUMP = 6; //XB1_LT //PS4_L1
 define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLE
 define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE
 define WALL_BTN = 4; //XB1_RB //PS4_R2
 define STAIRS_BTN = 7; //XB1_LB //PS4_L2
 define FLOOR_BTN = 3; //XB1_RT //PS4_R1
 define ROOF_BTN = 6; //XB1_LT //PS4_L1
 define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
 define R_X = 9; //XB1_RX //PS4_RX
 define R_Y = 10; //XB1_RY //PS4_RY
 define L_X = 11; //XB1_LX //PS4_LX
 define L_Y = 12; //XB1_LY //PS4_LY
 define UP = 13; //XB1_UP //PS4_UP
 define DOWN = 14; //XB1_DOWN //PS4_DOWN
 define LEFT = 15; //XB1_LEFT //PS4_LEFT
 define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT








 //-------------------------------------------------------------------------------------------
 //COLOR IDENTIFICATION              
 define Blue = 1;
 define Red = 2;
 define Green = 3;
 define Pink = 4;
 define SkyBlue = 5;
 define Yellow = 6;
 define White = 7;
 data(1,
     2, 0, 0, 0, //1. Blue                                 
     0, 2, 0, 0, //2. Red                                  
     0, 0, 2, 0, //3. Green                                
     0, 0, 0, 2, //4. Pink                                 
     2, 0, 2, 0, //5. SkyBlue                              
     0, 2, 2, 0, //6. Yellow                               
     2, 2, 2, 2 //7. White 
 );
 int Col_ind;
 //END








 //Build Speed
 define build_speed = 50;
 define speed = 50;
 //END







 //-----------------------------------------------------
 // VARIABLES









 //ANTI RECOIL SETTINGS
 int ANTI_RECOIL; // For AntiRecoil combo
 int anti_recoil; // For AntiRecoil combo
 define AR_Release = 25;
 define ONLY_WITH_SCOPE = TRUE; // if TRUE Antirecoil IS ON only when scoping - if FALSE, is always ON
 //END








 //RUMBLE
 int rumble_type = RUMBLE_A;
 //END








 //JItter
 int tap; //ADVANCED JITTER
 int R2_block; //ADVANCED JITTER
 //END








 //AIM ASSIST HOLD & WAIT
 int aimabuse_hold;
 int aimabuse_rest;
 //END









 main { //--------------------------------- 
     /////////////////////////////////////////////////////////////////////////////////
     // ON-OFF SETTINGS:


     if (get_val(ADS_BTN)) {
         if (event_press(DROP)) {
             Ghost_Peek = !Ghost_Peek;
             rapid_onoff = FALSE;
             Drop_Shot = FALSE;
             rumble_A_if_true(Ghost_Peek);
         }
  
         if (event_press(RIGHT)) {
             rapid_onoff = !rapid_onoff;
             Ghost_Peek = FALSE;
             rumble_A_if_true(rapid_onoff);
         }
         if (event_press(RELOAD_BTN)) {
             Drop_Shot = !Drop_Shot;
             Ghost_Peek = FALSE;
             rumble_A_if_true(Drop_Shot);
         }
         
         set_val(DROP, 0);
         set_val(DOWN, 0);
         set_val(RIGHT, 0);
         set_val(SWAP_BTN, 0);
         set_val(JUMP_BTN, 0);
    }
     // HOLD L2(LT) and PRESS LEFT
     if (get_val(ADS_BTN) && event_press(LEFT)) {
         AimAbuse2 = !AimAbuse2;
         AimAbuse = !AimAbuse;
         rumble_A_if_true(AimAbuse2);
     }
     // HOLD L2(LT) and PRESS UP
     if (get_val(ADS_BTN)) {
         if (event_press(UP)) {
             OpAimAssist = !OpAimAssist;
             rumble_A_if_true(OpAimAssist);
         }
         set_val(UP, 0);
     }
     /////////////////////////////////////////////////////////////////////////////////
     //  Color Identification
     if (rapid_onoff &&!Ghost_Peek ) colourled(Red); //EVERYTHING IS OFF
     if (Drop_Shot) colourled(White);
     if ((Ghost_Peek)) colourled(Yellow); //IF YELLOW Ghost Peeking IS ON


     /////////////////////////////////////////////////////////////////////////////////
     //Rapid Fire
     if (rapid_onoff) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) { // HOLD L2 AND R2 FOR RAPID (DONE LIKE THIS TO BE ABLE TO EDIT OBJECTS)
             combo_run(RAPID_FIRE);
             ANTI_RECOIL = 11;
         }
     }
     /////////////////////////////////////////////////////////////////////////////////
     // ANTI RECOIL
     if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
         ANTI_RECOIL = 7;
         combo_run(AntiRecoil);
     }
     /////////////////////////////////////////////////////////////////////////////////
     // ASSAULT RIFLES AIM ABUSE                                            
     if (AimAbuse) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
             aimabuse_hold = 110; // HOW LONG IS L2 HELD FOR
             aimabuse_rest = 18; // HOW LONG IS L2 NOT HELD FOR
             combo_run(AIM_ABUSE); //AIM ABUSE
         } else {
             combo_stop(AIM_ABUSE);
         }
     } //-----------------------------------------------

     /////////////////////////////////////////////////////////////////////////////////
     // SENSITIVE AIM ABUSE                                           
     if (AimAbuse2) {
         if (get_val(ADS_BTN) > 95) {
             aimabuse_hold = 110; // HOW LONG IS L2 HELD FOR
             aimabuse_rest = 18; // HOW LONG IS L2 NOT HELD FOR
             combo_run(AIM_ABUSE); //AIM ABUSE
         } else {
             combo_stop(AIM_ABUSE);
         }
     }


////////AUTO RUN
     if (!get_val(ADS_BTN) && get_val(L_Y) < -90) {
         set_val(SPRINT_BTN, 100);
     }
     /////////////////////////////////////////////////////////////////////////////////
     //SNEAK PEAK
     if (Ghost_Peek) {
         if (get_val(ADS_BTN)) {
             if (event_press(FIRE_BTN)) {
                 combo_run(AUTO_SNEAK_PEAK);
             }
             set_val(FIRE_BTN, 0);
         }
     }
     
     /////////////////////////////////////////////////////////////////////////////////
     //DROP SHOT
     if (Drop_Shot) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
             combo_run(DROP_SHOT);
         }
     }
     /////////////////////////////////////////////////////////////////////////////////
     //HAIR TRIGGER
     if (get_val(FIRE_BTN)) { // IF YOU PRESS AT LEAST 1% OF FIRE BTN IT'LL HAVE AN OUTPUT OF 100
         set_val(FIRE_BTN, 100);
     }
     ///////////////////////////////////////////////////////////////////////////////// 
     //Aim Assist V 2 
     if (OpAimAssist) {
         if (get_val(ADS_BTN) > 95) {
             combo_run(Auto_Aimm);
         } else {
             combo_stop(Auto_Aimm);
         }
         if (get_val(ADS_BTN)) {
             if (abs(get_val(9)) > 15 || abs(get_val(10)) > 15) {
                 combo_stop(Auto_Aimm);
             }
         }
     }


 } //----------------------------------------- 








 // COMBO BLOCKS 
 combo Auto_Aimm { //AIM ASSIST V2
     set_val(R_Y, shake * -1); //1  
     wait(20)
     set_val(R_X, shake); //1  
     wait(20)
     set_val(R_Y, shake); //1  
     wait(20)
     set_val(R_X, shake * -1); //1  
     wait(20)
 } //end

combo AUTO_SNEAK_PEAK {
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(15);
     set_val(FIRE_BTN, 100);
     wait(15);
     wait(10); //INCREASE THIS IF YOU SHOOT THE STAIRS
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(95);
 } // END


 combo AIM_ABUSE { // RAPID AIM
     set_val(ADS_BTN, 100);
     wait(aimabuse_hold);
     set_val(ADS_BTN, 0);
     wait(aimabuse_rest);
 } //end 


 combo RAPID_FIRE {
     set_val(FIRE_BTN, 100);
     wait(10);
     set_val(FIRE_BTN, 0);
     wait(10);
 } //end


 combo DROP_SHOT {
     set_val(CROUCH_BTN, 100);
     wait(80);
     wait(60); // how long to wait until next drop 
 }

 combo VIBRATE {
     set_rumble(rumble_type, 100);
     wait(300);
     reset_rumble();
 } //end

 combo AntiRecoil {
     anti_recoil = get_val(R_Y) + ANTI_RECOIL;
     if (anti_recoil > 100) anti_recoil = 100;
     set_val(R_Y, anti_recoil);
 }


 function rumble_A_if_true(var) {
     if (var) rumble_type = RUMBLE_A;
     else rumble_type = RUMBLE_B;
     combo_run(VIBRATE);
 }
 // COLOR LED function                                
 //--------------------------------------------------------------
 function colourled(Colour) {
     Col_ind = (Colour * 4) - 3;
     set_led(LED_1, dbyte(Col_ind));
     set_led(LED_2, dbyte(Col_ind + 1));
     set_led(LED_3, dbyte(Col_ind + 2));
     set_led(LED_4, dbyte(Col_ind + 3));
 }