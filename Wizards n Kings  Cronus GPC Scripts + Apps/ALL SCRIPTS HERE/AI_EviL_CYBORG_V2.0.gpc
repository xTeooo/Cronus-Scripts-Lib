//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                                                                               #
//#################################################################################################
//################### © 2021, Sami ABADA - Sweet EviL, All Rights Reserved ########################
//################################################################################################# 
/*
	
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
					© 2021, Sami ABADA - Sweet EviL, All Rights Reserved


//#################################################################################################
*/
								 	
const int16 Lookup_Table[] 		= {
									0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156, 
									173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
									342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
									500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
									642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
									766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
									866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
									939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
									984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
									1000
									};								 	

define TIME_BASE			= 4;	// don't change	

define MAX_DRIFT			= 12;	// don't change	if calculated drift is greater than 12, the controller is dead

//################################################################################################# 								 	
								 	
define ADS_BUTTON			= PS4_L2;
define FIRE_BUTTON			= PS4_R2;
define CROUCH_BUTTON 		= PS4_CIRCLE;  
define JUMP_BUTTON  		= PS4_CROSS;
define SWAP_BUTTON			= PS4_TRIANGLE;
define MELEE_BUTTON			= PS4_R3;
define SPRINT_BUTTON		= PS4_L3;

int INVERTED				= 0; 	// 1 if you play inveted 

int	USE_RUMBLE 				= FALSE;
int USE_HAIR_TRIGGER		= TRUE;

//################################################################################################# 

define DISABLED						= 0;
define USE_RUMBLE_EVIL_AR			= 1;
define USE_DYNAMIC_EVIL_AR			= 2;

int EVIL_AR							= DISABLED;  // 
int AR_STRENGTH						= 20;  		// can be negative if you want more ar and use : USE_RUMBLE_EVIL_AR

//################################################################################################# 

int USE_EVIL_BOT					= TRUE;

//################################################################################################# 

// EVIL BOT TYPE: dont't change

define CIRCULAR						= 1;
define OVAL							= 2;

//################################################################################################# 

// EviL Spiral dont't change

define DISABLE_SPIRAL				= 0;
define LOW_SPIRAL					= 2;
define MID_SPIRAL					= 3;
define HIGH_SPIRAL					= 4;


//################################################################################################# 

// EviL Spiral dont't change

define DISABLE_SCAN					= 0;
define LOW_SCAN						= 1;
define MID_SCAN						= 2;
define HIGH_SCAN					= 3;


//################################################################################################# 

// EviL Spiral dont't change

define DISABLE_SREADY_AIM			= 0;
define LOW_SREADY_AIM				= 4;
define MID_SREADY_AIM				= 6;
define HIGH_SREADY_AIM				= 8;
	
//################################################################################################# 

int USE_SWEET_EVIL_AI					= TRUE; //ONLY ADVANCED USER!

int SWEET_EVIL_AI_THRESHOLD				= 30;

//ADS ONLY
int FRONTAL_ADS_EVIL_SLOPE				= 6;
int FRONTAL_ADS_EVIL_ASSIST				= 10;
int FRONTAL_ADS_EVIL_BOT_TYPE			= OVAL;
int FRONTAL_ADS_EVIL_SPIRAL				= DISABLE_SPIRAL;
int FRONTAL_ADS_EVIL_SCAN				= DISABLE_SCAN;
int FRONTAL_ADS_EVIL_STEADY_AIM			= DISABLE_SREADY_AIM;
int FRONTAL_ADS_SENS					= 100;   // range 25 to 300 less than 100 reduce sensitivity like negative boost

int DRIFT_ADS_EVIL_SLOPE				= 6;
int DRIFT_ADS_EVIL_ASSIST				= 10;
int DRIFT_ADS_EVIL_BOT_TYPE				= OVAL;
int DRIFT_ADS_EVIL_SPIRAL				= DISABLE_SPIRAL;
int DRIFT_ADS_EVIL_SCAN					= DISABLE_SCAN;
int DRIFT_ADS_EVIL_STEADY_AIM			= DISABLE_SREADY_AIM;
int DRIFT_ADS_SENS						= 100;

//ADS + FIRE
int FRONTAL_ADS_FIRE_EVIL_SLOPE			= 6;
int FRONTAL_ADS_FIRE_EVIL_ASSIST		= 20;
int FRONTAL_ADS_FIRE_EVIL_BOT_TYPE		= OVAL;
int FRONTAL_ADS_FIRE_EVIL_SPIRAL		= DISABLE_SPIRAL;
int FRONTAL_ADS_FIRE_EVIL_SCAN			= DISABLE_SCAN;
int FRONTAL_ADS_FIRE_EVIL_STEADY_AIM	= DISABLE_SREADY_AIM;
int FRONTAL_ADS_FIRE_SENS				= 100;

int DRIFT_ADS_FIRE_EVIL_SLOPE			= 6;
int DRIFT_ADS_FIRE_EVIL_ASSIST			= 20;
int DRIFT_ADS_FIRE_EVIL_BOT_TYPE		= OVAL;
int DRIFT_ADS_FIRE_EVIL_SPIRAL			= DISABLE_SPIRAL;
int DRIFT_ADS_FIRE_EVIL_SCAN			= DISABLE_SCAN;
int DRIFT_ADS_FIRE_EVIL_STEADY_AIM		= DISABLE_SREADY_AIM;
int DRIFT_ADS_FIRE_SENS					= 100;

//HIP FIRE
int FRONTAL_HIP_FIRE_EVIL_SLOPE			= 6;
int FRONTAL_HIP_FIRE_EVIL_ASSIST		= 20;
int FRONTAL_HIP_FIRE_EVIL_BOT_TYPE		= OVAL;
int FRONTAL_HIP_FIRE_EVIL_SPIRAL		= DISABLE_SPIRAL;
int FRONTAL_HIP_FIRE_EVIL_SCAN			= DISABLE_SCAN;
int FRONTAL_HIP_FIRE_EVIL_STEADY_AIM	= DISABLE_SREADY_AIM;
int FRONTAL_HIP_FIRE_SENS				= 100;

int DRIFT_HIP_FIRE_EVIL_SLOPE			= 6;
int DRIFT_HIP_FIRE_EVIL_ASSIST			= 20;
int DRIFT_HIP_FIRE_EVIL_BOT_TYPE		= OVAL;
int DRIFT_HIP_FIRE_EVIL_SPIRAL			= DISABLE_SPIRAL;
int DRIFT_HIP_FIRE_EVIL_SCAN			= DISABLE_SCAN;
int DRIFT_HIP_FIRE_EVIL_STEADY_AIM		= DISABLE_SREADY_AIM;
int DRIFT_HIP_FIRE_SENS					= 100;

//################################################################################################# 

int	EVIL_SLOPE;
int	EVIL_ASSIST;
int EVIL_BOT_TYPE;
int EVIL_SPIRAL;
int EVIL_SCAN;
int EVIL_STEADY_AIM;
int EVIL_SENS;

//################################################################################################# 

define MAGNITUDE					= 80;			   // don't change tweak this when you have ar drift issue
int REFRESH_RATE					= TIME_BASE * 10;  // don't change

//################################################################################################# 			

int update_timer;
int C_RX;
int C_RY;
int C_LX;
int C_LY;
int L_RX;
int L_RY;
//int T_RX;
int T_RY;
int Inc_Dec_State_1;
int Inc_Dec_State_2;
int Aim_Assit_1;
int Aim_Assit_2;
int angle;
int _ret;
//int _temp;
int mvt_direction;
//int magnitude_ok;
int min_aim_assit;
int cw_angle;
int inverted;
int rx_drift;
int ry_drift;
int lx_drift;
int ly_drift;
int drift_calib;

int _var;
int _scan_1;
int _scan_2;
int _EVIL_ASSIST_1;
int _EVIL_ASSIST_2;
int _EVIL_ASSIST_3;

init
{
	mvt_direction = 1;
	
	Inc_Dec_State_1 = TRUE;
	Inc_Dec_State_2 = FALSE;
	
    update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	cw_angle = 90 * inverted;
			
	drift_calib = 100;
}


main {

	vm_tctrl(-6);
	
	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_ival(PS4_RX))+ 2);
		ry_drift = max(ry_drift, abs(get_ival(PS4_RY))+ 2);

		lx_drift = max(lx_drift, abs(get_ival(PS4_LX))+ 2);
		ly_drift = max(ly_drift, abs(get_ival(PS4_LY))+ 2);

		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);

		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);

		drift_calib--;	
		
		rx_drift = max(rx_drift, ry_drift);
		lx_drift = max(lx_drift, ly_drift);
	}
	else
	{
		if(USE_RUMBLE == FALSE)
		{
			block_rumble();
		}

		if(USE_HAIR_TRIGGER)
		{
			if(get_ival(PS4_R2) > 10)
				set_val(PS4_R2, 100);

			if(get_ival(PS4_L2)> 10)
				set_val(PS4_L2, 100);
		}

		C_RX = get_ival(PS4_RX);
		C_RY = get_ival(PS4_RY);

		C_LX = get_ival(PS4_LX);
		C_LY = get_ival(PS4_LY);

		if(isqrt(pow(C_RX, 2) + pow(C_RY, 2)) <= rx_drift)
		{
			C_RX = 0;
			C_RY = 0;
		}

		if(isqrt(pow(C_LX, 2) + pow(C_LY, 2)) <= lx_drift)
		{
			C_LX = 0;
			C_LY = 0;
		}
		
		set_val(PS4_LX, C_LX);
		set_val(PS4_LY, C_LY);

		if(get_val(ADS_BUTTON) > 50 || get_val(FIRE_BUTTON) > 50)
		{
			if(USE_SWEET_EVIL_AI == TRUE)
			{
				_ret = isqrt(pow(C_RX, 2) + pow(C_RY, 2));		
				
				if(get_ival(ADS_BUTTON) && !get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_ADS_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_ADS_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_ADS_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_ADS_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_ADS_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_ADS_EVIL_STEADY_AIM;
					EVIL_SENS = FRONTAL_ADS_SENS;
				}				
				else if(get_ival(ADS_BUTTON) && !get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_ADS_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_ADS_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_ADS_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_ADS_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_ADS_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_ADS_EVIL_STEADY_AIM;
					EVIL_SENS = DRIFT_ADS_SENS;
				}			
				else if(get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_ADS_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_ADS_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_ADS_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_ADS_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_ADS_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_ADS_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = FRONTAL_ADS_FIRE_SENS;
				}			
				else if(get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_ADS_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_ADS_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_ADS_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_ADS_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_ADS_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_ADS_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = DRIFT_ADS_FIRE_SENS;
				}				
				else if(!get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret <= SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = FRONTAL_HIP_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = FRONTAL_HIP_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = FRONTAL_HIP_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = FRONTAL_HIP_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = FRONTAL_HIP_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = FRONTAL_HIP_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = FRONTAL_HIP_FIRE_SENS;
				}				
				else if(!get_ival(ADS_BUTTON) && get_ival(FIRE_BUTTON) && _ret > SWEET_EVIL_AI_THRESHOLD)
				{
					EVIL_SLOPE = DRIFT_HIP_FIRE_EVIL_SLOPE;
					EVIL_ASSIST = DRIFT_HIP_FIRE_EVIL_ASSIST;
					EVIL_BOT_TYPE = DRIFT_HIP_FIRE_EVIL_BOT_TYPE;
					EVIL_SPIRAL = DRIFT_HIP_FIRE_EVIL_SPIRAL;
					EVIL_SCAN = DRIFT_HIP_FIRE_EVIL_SCAN;
					EVIL_STEADY_AIM = DRIFT_HIP_FIRE_EVIL_STEADY_AIM;
					EVIL_SENS = DRIFT_HIP_FIRE_SENS;
				}
				
				sensitivity(PS4_RX, NOT_USE, EVIL_SENS);
				sensitivity(PS4_RY, NOT_USE, EVIL_SENS);
				
				if(EVIL_SPIRAL)
				{
					min_aim_assit = EVIL_ASSIST/EVIL_SPIRAL;
					
					if(min_aim_assit == 0 && Aim_Assit_2 == 0)
					{
						Aim_Assit_1 = min_aim_assit;	
						Aim_Assit_2 = EVIL_ASSIST;
					}
				}
			}
			
			
			if(update_timer >= REFRESH_RATE)
			{
				block(PS4_RX, REFRESH_RATE);
				block(PS4_RY, REFRESH_RATE);

				_ret = get_mvt_direction(C_RX, L_RX);

				if(_ret != 0)
				mvt_direction = _ret;

				//set_val(TRACE_1, mvt_direction);

				if(USE_EVIL_BOT == TRUE)
				{
					if(Inc_Dec_State_1 == FALSE)
					{
						Aim_Assit_1 -= 1;

						if(Aim_Assit_1 < min_aim_assit)
						Inc_Dec_State_1 = TRUE;
					}
					else
					{
						Aim_Assit_1 += 1;

						if(Aim_Assit_1 > EVIL_ASSIST)
						Inc_Dec_State_1 = FALSE;
					}

					if(Inc_Dec_State_2 == FALSE)
					{
						Aim_Assit_2 -= 1;

						if(Aim_Assit_2 < min_aim_assit)
						Inc_Dec_State_2 = TRUE;
					}
					else
					{
						Aim_Assit_2 += 1;

						if(Aim_Assit_2 > EVIL_ASSIST)
						Inc_Dec_State_2 = FALSE;
					}
				}

				update_timer = 0;

				L_RX = C_RX;
				L_RY = C_RY;
			}

			if((EVIL_AR) && ((get_val(ADS_BUTTON) > 50) && (get_val(FIRE_BUTTON)> 50)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
			{
				if(EVIL_AR == USE_RUMBLE_EVIL_AR)
				{
					T_RY = get_rumble_evil_ar();
				}
				else
				{
					T_RY = get_dynamic_evil_ar(C_RX, C_RY, AR_STRENGTH);
				}

				if(inverted == -1)
				{
					C_RY += inv(T_RY);
				}
				else
				{
					C_RY += T_RY;
				}
			}

			if(USE_EVIL_BOT == TRUE)
			{
			
				if(EVIL_BOT_TYPE == CIRCULAR)
				{
					
					if(EVIL_SPIRAL)
					{
						_EVIL_ASSIST_1 = Aim_Assit_1;
						_EVIL_ASSIST_2 = Aim_Assit_2;
					}
					else
					{
						_EVIL_ASSIST_1 = EVIL_ASSIST;
						_EVIL_ASSIST_2 = EVIL_ASSIST;
					}
					
					if(EVIL_SCAN == TRUE)
					{
						_scan_1 = get_polar_coordinate(_EVIL_ASSIST_1/2, sin(cw_angle));
						_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, cos(cw_angle));
					}
					else
					{
						_scan_1 = 0;
						_scan_2 = 0;
					}
					
					if(mvt_direction == 1)
					{		
						
						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_2;
					}
					else
					{		
						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_2;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
					}
				
				}
				else if(EVIL_BOT_TYPE == OVAL)
				{
					if(EVIL_SPIRAL)
					{
						_EVIL_ASSIST_1 = Aim_Assit_1;
						_EVIL_ASSIST_2 = Aim_Assit_2;
						_EVIL_ASSIST_3 = Aim_Assit_2;
					}
					else
					{
						_EVIL_ASSIST_1 = EVIL_ASSIST;
						_EVIL_ASSIST_2 = EVIL_ASSIST;
						_EVIL_ASSIST_3 = EVIL_ASSIST/2;
					}
					
					if(mvt_direction == 1)
					{		
						
						if(EVIL_SCAN == TRUE)
						{
							_scan_1 = get_polar_coordinate(_EVIL_ASSIST_2/2, sin(cw_angle));
							_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, cos(cw_angle));
						}
						else
						{
							_scan_1 = 0;
							_scan_2 = 0;
						}
					
						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, sin(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_3, cos(angle)) + _scan_2;
					}
					else
					{		
						if(EVIL_SCAN == TRUE)
						{
							_scan_1 = get_polar_coordinate(_EVIL_ASSIST_2/2, cos(cw_angle));
							_scan_2 = get_polar_coordinate(_EVIL_ASSIST_1/2, sin(cw_angle));
						}
						else
						{
							_scan_1 = 0;
							_scan_2 = 0;
						}
						
						C_RX += get_polar_coordinate(_EVIL_ASSIST_1, cos(angle)) + _scan_1;
						C_RY += get_polar_coordinate(_EVIL_ASSIST_3, sin(angle)) + _scan_2;
					}
				}
			}

			angle += EVIL_SLOPE;
			angle = angle % 360;

			cw_angle = (cw_angle + EVIL_SCAN) % 360;

			if(EVIL_STEADY_AIM)
			{
				C_RX = get_steady_aim(C_RX, EVIL_STEADY_AIM);
				C_RY = get_steady_aim(C_RY, EVIL_STEADY_AIM);
			}

			set_val(PS4_RX, clamp(C_RX, -100, 100));
			set_val(PS4_RY, clamp(C_RY, -100, 100));

			update_timer += get_rtime();
		}
		else
		{
			update_timer = 0;
			update_timer = REFRESH_RATE;

			angle = 90 * inverted;
			cw_angle = 90 * inverted;

			Aim_Assit_1 = min_aim_assit;
			Aim_Assit_2 = EVIL_ASSIST;
			
			set_val(PS4_RX, C_RX);
			set_val(PS4_RY, C_RY);
		}
	}
}

//#################################################################################################

function get_rumble_evil_ar()
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH);
	}

	return 0;
}

//#################################################################################################

function get_dynamic_evil_ar(_C_RX, _C_RY, _AR_STRENGTH)
{	
	_ret = (get_ptime(FIRE_BUTTON)/ (160));
	_var = 	(AR_STRENGTH/2) + AR_STRENGTH;				
	
	if(_ret > _var)
		_ret = _var;
						
	_ret = _ret +  _AR_STRENGTH - ((abs(_C_RX * _C_RX) + abs(_C_RY * _C_RY))/1000) ;

	return _ret;
}
						
//#################################################################################################

function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}

//#################################################################################################

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val(TRACE_3,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

//################################################################################################# 

function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}

//################################################################################################# 

function sin(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    
    return _ret;
}

//################################################################################################# 

function cos(angle)
{   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    
    return _ret;
}

//################################################################################################# 

function get_polar_coordinate(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}


/*
	This script is protecteted by U.S and International copyright loaws. 
	Reproduction, sale and distribution of the script without Sami ABADA permission is prohibited.
		
						© 2021, Sami ABADA - Sweet EviL, All Rights Reserved
*/