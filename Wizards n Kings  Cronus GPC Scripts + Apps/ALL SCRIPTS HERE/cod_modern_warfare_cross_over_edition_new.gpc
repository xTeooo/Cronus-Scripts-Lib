// GPC Online Library
// cod_modern_warfare:_cross_over_edition!_(new).gpc

/*
              
              		A GPC POWER SCRIPT BY CRESCENS FOR CRONUSMAX
                 ___      _ _          __      ___       _                               
                / __\__ _| | |   ___  / _|    /   \_   _| |_ _   _                       
               / /  / _` | | |  / _ \| |_    / /\ / | | | __| | | |                      
              / /__| (_| | | | | (_) |  _|  / /_//| |_| | |_| |_| |                      
              \____/\__,_|_|_|  \___/|_|   /___,'  \__,_|\__|\__, |                      
                                                             |___/                       
                       _                   __    __            __                
       /\/\   ___   __| | ___ _ __ _ __   / / /\ \ \__ _ _ __ / _| __ _ _ __ ___ 
      /    \ / _ \ / _` |/ _ \ '__| '_ \  \ \/  \/ / _` | '__| |_ / _` | '__/ _ \
     / /\/\ \ (_) | (_| |  __/ |  | | | |  \  /\  / (_| | |  |  _| (_| | | |  __/
     \/    \/\___/ \__,_|\___|_|  |_| |_|   \/  \/ \__,_|_|  |_|  \__,_|_|  \___|
                                                                                 
                     
                     /~` _ _  _ _  /~\   _  _  (~ _|._|_. _  _ 
                     \_,| (_)_\_\  \_/\/(/_|   (_(_|| | |(_)| |
                                               
  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  
  
                   CALL OF DUTY MODERN WARFARE: CROSS OVER EDITION                            
                            THE #1 COD SCRIPT WORLDWIDE!                                       
  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__                                   
 
 ___________________________________________________________________________________________
 
     BUTTON / STICK LAYOUT    : ALL BUTTON & STICK LAYOUTS ARE SUPPORTED                         
     BUMPERS / TRIGGERS       : DEFAULT & FLIPPED ARE SUPPORTED                    
     VERSION                  : 1.8 BETA
     PLATFORMS                : XBOX ONE, PS4
     INPUT DEVICES            : ALL CONTROLLERS, ELITE CROSS OVER FOR PS4, M&K
     SUPPORT / REQUESTS       : HTTPS://TINYURL.COM/GPCSUPPORT
 _____________________________________________________________________________________________
 
     Tools, mods & info`s: 
     •    	Anti Recoil, new approach - easily set up the perfect no-recoil values
     •   	Aim Assist, the `sticky` aim exploit - new approach
     •    	Aim Corrections, to optimize sensitivty for maximum movement speed combined with highest 
         	accuracy: aim, aim+fire and grenade sensitivity 
     •    	Easy to set-up, user configuration takes no more than 20 - 30 seconds 
     •    	Easy to use, yet the most powerfull option for COD multi-player: this script beats all 
        	other COD scripts & game packs 
 _______________________________________________________________________________________________
 
    USER CONFIGURATION                         
	     _ 			    ___   
	 ___| |_ ___ ___   |_  |  
	|_ -|  _| -_| . |   _| |_ 
	|___|_| |___|  _|  |_____|
	USER CONFIG |_|Sticks & Buttons 
	
   	BUTTONS XBOX	: 	RT, RB, B, LT, LB, LS   
   	BUTTONS PS4 	:	R1, R2, R3, CIRCLE, L1, L2, L3 
    
    WHAT BUTTON DO YOU USE FOR (write in CAPS ONLY):    
    */
    int FIRE 		= 	RT;
	int ADS 		= 	LT;
	int SPRINT 		= 	LS;
	int TACTICAL 	= 	LB;
	int LETHAL 		= 	RB;
	int MELEE 		= 	B;  
	
	/*
	AND WITH WHAT STICK DO YOU WALK, STRAFE, AIM/LOOK VERTICAL AND AIM/LOOK HORIZONTAL	*/
	int WALK		=	LY;
	int	STRAFE		=	LX;
	int	AIM_H		=	RX;
	int AIM_V		=	RY;	
	
	/*        
	     _              ___ 
	 ___| |_ ___ ___   |_  |
	|_ -|  _| -_| . |  |  _|
	|___|_| |___|  _|  |___|
	USER CONFIG |_| Mod Menu 
					& Settings   
*/

	define A__A_and_A__R	= 	1;	//[0 = OFF / 1 = ON] aim assist & anti recoil
	int	   _v				=	24; // if you experience screen shake lower this value
	define invert			=	1;	//[-1 = inverted / 1 not inverted)
	
	define CNL_RELOAD		=	1;	//[0 = OFF / 1 = ON] cancel reload with fire or ads
	define EASY__MELEE		=	1;	//[0 = OFF / 1 = ON] super fast melee with your right thumb stick (for tactical button layout)	
	define EASY__SPRINT		=	1;	//[0 = OFF / 1 = ON] auto sprint
	
	define AIM__CORRECT		=	1;	//[0 = OFF / 1 = ON] aim corrections (sens variables)
	int 	IN_GAME_SENS	=	12; //--tip: fill this value also out under "init" and under "function RESET_Defaults" (scroll down)
	/*
	Black Ops mods below, if you set BLACK_OPS to 0, all Black Ops mods will be switched off*/	
	define BLACK_OPS		=   1;	//[0 = OFF / 1 = ON] 
	define FIRE__AND_HEAL	=	1;	//[0 = OFF / 1 = ON] AUTO HEAL - after firing your weapon 
	define KS__FIREMODS		=	2;	//[0 = OFF / 1 = legacy switch only / 2 = legacy & kill switch]
     /*
 _________________________________________________________________________________________________________                        
     
     
         
     INSTRUCTIONS
     
     HOLD ADS + 
                     - TAP UP            = ANTI RECOIL ON (RAPID FIRE OFF)
                     - TAP RIGHT         = RAPID FIRE ON (ANTI RECOIL OFF)
                     - TAP LEFT          = RAPID FIRE SECONDARY ON (ANTI RECOIL OFF)
                     - HOLD LEFT         = RAPID FIRE SECONFARY ON + ANTI RECOIL ON
                     - TAP DOWN          = RAPID FIRE OFF / ANTI RECOIL OFF
                     - HOLD VIEW/SHARE   = RESET DEFAULTS (RESET ANTI RECOIL VALUES)
                     
     WHEN RAPID FIRE SECONDARY = ON
                     
                     - TAP SWITCH WEAPON TO SWITCH BETWEEN RAPID FIRE AND NORMAL FIRE (WHITE LED = RAPID FIRE)
                     - TAP RELOAD TO RELOAD
                     - TO RESET IF YOU DIED WITH YOUR SECONDARY WEAPON: RESPAWN WITH RELOAD (HOLD RELOAD FOR >180ms)
                     
     TO SET ANTI RECOIL VALUES:
     
         - ACTIVATE ANTI RECOIL (LED TURNS GREEN)
         - ACTIVATE EDIT MENU (HOLD B / CIRCLE + TAP UP) (LED TURNS RED)
         - AIM STRAIGHT AHEAD (SO HOLD ADS) AND FIRE YOUR WEAPON
         - WHILST FIRING, CORRECT THE VERTICAL RECOIL MANUALLY USING THE AIM STICK
         - WHILST FIRING, CORRECT THE HORIZONTAL RECOIL MANUALLY USING THE AIM STICK
         - WHEN THE RECOIL IS REDUCED TO A MINIMUM EXIT EDIT MENU (HOLD B / CIRCLE + TAP UP)
         - VALUEAS ARE AUTO SAVED ON EXIT
         
     TO CALIBRATE RELOAD TIMES (IF YOU NOTICE A DELAY WHEN AIMING):
     
         - HOLD D-PAD DOWN + DOUBLE TAP RELOAD + HOLD DOWN RELOAD ON SECOND TAP 
         - RELEASE RELOAD AT THE END OF THE RELOAD ANIMATION   
  
     
     TO TWEAK AIM CORRECTIONS ON THE FLY 
 
         - HOLD B/CIRCLE AND HOLD TRIANGLE / Y + TAP SHARE / VIEW (-1)
         - HOLD B/CIRCLE AND HOLD TRIANGLE / Y + TAP MENU / OPTIONS (+1)
         
     LEDS
     	GREEN 		= ANTI RECOIL
     	WHITE		= RAPID FIRE
     	RED			= EDIT MODE
     	BLUE		= NEUTRAL
     
 __________________________________________________________________________________________________________    

 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |V|A|R|I|A|B|L|E|S| | | | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     
     
     //---anti recoil, aim assist variables*/ 
    
     int a_r__c, a_r_x__c;
     int actual_x, actual_y;
     int x_y__thresh = 10;
     int input__y[25], input__x[25];
     int idx, idx_x, ry__av, rx__av;
     int Y_val, X_val;
     int edit = FALSE;
     int A__R;
     int v, v_x;
     int aa_max;
     
     
     //---sens variables (grenade sensitivity is the same as ads sens)
     int ADS_SENS, ADS_FIRE_SENS, Sens;
 
    define RT	 	= 	XB1_RT;
    define R2		=   PS4_R2;
	define LT 		= 	XB1_LT;
	define L2		=	PS4_L2;
	define LS 		= 	XB1_LS;
	define L3		=	PS4_L3;
	define LB 		= 	XB1_LB;
	define L1		=	PS4_L1;
	define RB	 	= 	XB1_RB;
	define R1		=	PS4_R1;
	define B		= 	XB1_B;
	define CIRCLE	= 	PS4_CIRCLE;
	define LY 		= 	WII_LY;
	define LX 		= 	PS4_LX;
	define RX		= 	XB1_RX;
	define RY 		= 	PS3_RY;
		
	
     //---other
     int d_click;
     int record, rumble;
     int GUN_BELT=FALSE, WPN_1, K; 
     int RELOAD__TIME, b_reload=FALSE;
     int RF=FALSE, Fire_KS=FALSE;
     int first_time;
     int F_H=FALSE;
     
 	init{
 	a_r__c = get_pvar(SPVAR_10,-100,100, 15); 
 	a_r_x__c = get_pvar(SPVAR_11,-100,100, 0);
	RELOAD__TIME= get_pvar(SPVAR_3, 0, 4000, 800);
	IN_GAME_SENS = get_pvar(SPVAR_15, 3, 20, 12); //-----fill out your in game sensitivity here (and once more further down under reset defaults)
	first_time = get_pvar(SPVAR_16, 0, 1, 1);
	aa_max = _v + 1
	}/*
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |M|A|I|N| |B|L|O|C|K| |S|T|A|R|T|S| |H|E|R|E| | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 main {
     set_val (30, aa_max);
     set_val (31, a_r_x__c);
     set_val (32, Sens);
     set_val (33, STRAFE);
 //--- ELITE Controller fix for PS4  
 //--- if you require this fix remove the /* (below) & the */ (further below).
   /* 
     
     if(get_console() == PIO_PS4 && get_controller() != PIO_PS4) 
         {
         set_val(PS4_TOUCH, 0); 
             if(get_val(PS4_SHARE)) 
             {
             if(!get_val(PS4_R3)) 
                 {
                 set_val(PS4_TOUCH, 100);
                 set_val(PS4_SHARE, 0);
                 }
             set_val(PS4_R3, 0);
             }
          }*/ 
  //---deadzone sticks
     actual_x = d__z(AIM_H,0);
     actual_y = d__z(AIM_V,0);
                                                                                                                   
  //---double click timer 
     if(d_click) {d_click -= get_rtime();}/*
     
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | |M|E|N|U| |A|D|S| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
   if(get_val(ADS))    
                 {
     //--FIRE MODS OFF 
     if(event_press(XB1_DOWN))
                 {//D-pad DOWN
                     WPN_1=TRUE
                     RF=FALSE;
                     rumble (RF);
                     GUN_BELT=FALSE;
                     A__R=FALSE;
                  }
 //--FIRE MODS OFF / anti recoil on
     if(event_press(XB1_UP))
                 {//D-pad UP
                     WPN_1=TRUE
                       RF=FALSE;
                     rumble (RF);
                     GUN_BELT=FALSE;
                     A__R=TRUE;            
                 }
 //--RAPID FIRE ON
     if(event_press(XB1_RIGHT))
                 {//D-pad RIGHT
                     WPN_1=TRUE
                     RF=TRUE;           
                     rumble (RF);
                     Fire_KS=FALSE;
                     GUN_BELT=FALSE;
                     A__R=FALSE;                
                 }
 //--RF SECONDANRY
     if(event_press(XB1_LEFT))
                 {//D-pad LEFT
                      WPN_1 = TRUE
                      RF=TRUE;
                      GUN_BELT=TRUE;
                      Fire_KS=FALSE;
                      rumble (GUN_BELT);
                      A__R=FALSE;                      
                 }
     if (get_val (XB1_LEFT)&& get_ptime (XB1_LEFT) > 800)
                 {
                     A__R=TRUE;
                     rumble (A__R);
                 }
                 
     if(get_val(XB1_VIEW) && get_ptime (XB1_VIEW) > 800)
                 { 
                     RESET_Defaults();
                 }
     }//--END
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |R|E|C|O|R|D| |T|I|M|E| | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
     if (get_val (XB1_DOWN))    //hold down + double click reload
                 {//---START
                 if (event_press(XB1_X)&& d_click)       
                                             { 
                                             record = TRUE; rumble (record); 
                                             }
                 else if (event_press(XB1_X)&& !d_click)
                                                 {
                                                 d_click = 300;
                                                 }
                 if (record)
                                  {
                                  RELOAD__TIME = get_ptime(XB1_X);
                                                          if (event_release (XB1_X))
                                                          { 
                                                         record = FALSE; save_pvars (); rumble (record);
                                                         }
                                 }                                
                 }//--END
          
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |R|E|S|E|T|S| | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/  
     if(event_release(XB1_X)) 
                         {
                         if (Fire_KS && get_ledx ())Fire_KS=FALSE; reset_leds ();
                         b_reload=TRUE; 
                         }
     if(b_reload) 
                 {
                 b_reload = b_reload + get_rtime();
                 }
     if(b_reload >= RELOAD__TIME) 
                                     {
                                     b_reload = 0;
                                     b_reload = FALSE;
                                     }
  /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |C|A|N|C|E|L| |R|E|L|O|A|D| | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
     if (CNL_RELOAD==1)
             {
             if (b_reload && (event_press(FIRE)||event_press(ADS))) 
                                                                 {
                                                                 combo_run(CANCEL_RLD);
                                                                 } 
             }    
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |W|E|A|P|O|N| |F|I|R|E| |M|O|D|S| | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/     
     if(event_release(XB1_Y) && get_ptime(XB1_Y) < 300 && GUN_BELT)
                                 {                          
                                 WPN_1 = !WPN_1; rumble (WPN_1); 
                                 }  
 
                                 
     if (record==FALSE &&GUN_BELT && get_val (XB1_X)&& WPN_1==FALSE && get_ptime(XB1_X) > 180) 
                                 {//--RESET 
                                  WPN_1 = TRUE; rumble (WPN_1); 
                                 }
 //-- Rapid fire 
     if (RF)
     
         {
         if (!WPN_1 && GUN_BELT || WPN_1 &&!GUN_BELT)
                                             {
                                             if (get_val (FIRE) && !Fire_KS && RF )
                                                                             {
                                                                             combo_run (RAPID_FIRE);
                                                                             }
                                             }
         }
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |A|I|M| | |C|O|R|R|E|C|T|I|O|N|S| | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                                                      _     _    
 */
      if(AIM__CORRECT==1)
                         {//----------------------------start AIM CORRECTIONS
                    	ADS_SENS=111-(IN_GAME_SENS*2); ADS_FIRE_SENS=106-(IN_GAME_SENS*2);
       
                                       if(get_val(FIRE) && get_val(ADS))                              
                                               { 
                                               Sens = ADS_FIRE_SENS;                                              
                                               }
                                     if(!get_val(FIRE) && !get_val(ADS)) 
                                               {
                                             Sens = 100;
                                               }   
                                       if(!get_val(FIRE) && get_val(ADS) || get_val (LETHAL)) 
                                               {
                                             Sens = ADS_SENS;
                                               }
                                            
                                     if(Sens > 100) Sens = 100;  
                                     sensitivity(AIM_H, NOT_USE, Sens);
                                     sensitivity(AIM_V, NOT_USE, Sens);
                         }//----------------------------end AIM_CORRECTIONS
     
     if (get_val(XB1_B))
         {//-START
             if (event_press(XB1_UP))
                                 { 
                                 if (A__R && WPN_1)
                                         {
                                         edit = !edit; rumble(edit);
                                         }
                                 }
             if (event_release(XB1_UP) && edit==FALSE ) 
                                         {
                                         save_pvars ();
                                         }    
                                          
             if (event_press(XB1_VIEW))
                                 {
                                 IN_GAME_SENS --; save_pvars ();
                                 }
             if (event_press(XB1_MENU))
                                 {
                                 IN_GAME_SENS ++; save_pvars ();                                                           
                                 }
             set_val (XB1_VIEW,0); set_val (XB1_MENU,0);
         }//--END
                                 
                                 
     if (BLACK_OPS==1)    
      {
 /*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | |K|I|L|L| |S|W|I|T|C|H| |&| |S|U|P|E|R| |P|W| |S|W|I|T|C|H| | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
     if (!get_val(XB1_B))
                 {     
                 if (KS__FIREMODS==1)
                                      {
                                     if(get_val(XB1_LEFT) && !get_val (ADS)) 
                                                                     { 
                                                                     set_val (XB1_Y,100); K=TRUE; if(K) 
                                                                                   {
                                                                                   K = K + get_rtime();
                                                                                   }
                                                                              if(K <= 400) 
                                                                                  {
                                                                                 combo_run (KILL);
                                                                                 }
                                                                     }
                                     if(get_val(XB1_UP) && !get_val (ADS))
                                                                     { 
                                                                     set_val (LETHAL,100); set_val (TACTICAL,100);  
                                                                     }
                                     }
                                      if (KS__FIREMODS==2)
                                                          {
                                                         if (!WPN_1 && GUN_BELT || WPN_1 &&!GUN_BELT)
                                                                     {
                                                                         if(get_val(XB1_LEFT) && !get_val (ADS))
                                                                             {
                                                                               if (RF) Fire_KS=TRUE; K=TRUE; if(K) 
                                                                                   {
                                                                                   K = K + get_rtime();
                                                                                   }
                                                                              if(K <= 400) 
                                                                                  {
                                                                                 combo_run (KILL);
                                                                                 }
                                                                             }
         
                                                                         if(get_val(XB1_UP) && !get_val (ADS))        
                                                                                 {
                                                                                 set_val (LETHAL,100); set_val (TACTICAL,100); 
                                                                                 if (RF) Fire_KS=TRUE;
                                                                                 }
                                                                     }
         
                                     }
                 }/*
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |A|U|T|O| |H|E|A|L| | | | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
     if(FIRE__AND_HEAL==1)
                       {
                     if (event_release (FIRE))
                                          {
                                         F_H=TRUE; combo_run (KILL);
                                         }
                     }
                     
         }//--end black ops
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | |A|I|M| |A|S|S|I|S|T| |A|N|T|I| |R|E|C|O|I|L| | | | | | | | | | | | | | | | | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
     if(A__A_and_A__R==1)
        if(get_val(ADS)) 
        {   
              
                if (get_val (FIRE)) 
                { 
     	            if (A__R && WPN_1)
                    {
                        if (edit)
	                    {
	                     ar ();
	                     ar_x ();
	                    }
                Y_val = a_r__c;
                X_val = a_r_x__c;
                set_val (AIM_V,Y()*invert);
                set_val (AIM_H,X());
                	}
            	}
         else Y_val=0; X_val=0; 
           
                   combo_run(STICKY_AIM);                  
	                                             
        }
        else combo_stop(STICKY_AIM);
   
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |E|A|S|Y| |M|E|L|E|E| | | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
     if (EASY__MELEE==1)    
                     {
                      if (get_val(SPRINT))set_val(MELEE, 100);        
                     }/*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |E|A|S|Y| |R|U|N| | | | | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
     if (EASY__SPRINT==1)
                     { 
                     if (!get_val(ADS)&& get_val(WALK) < -25)combo_run (EASY_RUN);
                     } /*
  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |T|U|R|B|O| |B|T|N| |A|.|K|.| |H|A|I|R| |T|R|I|G|G|E|R|S| | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/  
     deadzone(FIRE,ADS,99,99);
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |L|E|D|S| |R|U|M|B|L|E| | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
	if (!get_ledx()){if (Fire_KS==TRUE){set_ledx(LED_1, 255);}
	else if (edit==TRUE || ADS_SENS >100 || ADS_FIRE_SENS >100 )f_Led (0,2,0,0);
	else if (GUN_BELT && !WPN_1||!GUN_BELT && RF && WPN_1) f_Led (2,2,2,2); 
	else if (A__R)f_Led (0,0,2,0);
	else f_Led (2,0,0,0);} if (Fire_KS) {rumble (1);} if(rumble) combo_run(RUMBLE); 
 }/*--END OF MAIN
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 
 combo STICKY_AIM {
	set_val(AIM_V,xy_(AIM_V,_v));
	wait(20);
	set_val(AIM_H,xy_(AIM_H,_v));
	set_val(STRAFE,xy_(STRAFE,_v));
	wait(20);
	set_val(AIM_V,xy_(AIM_V, inv(_v)));
	wait(20);
	set_val(AIM_H,xy_(AIM_H, inv(_v)));
	set_val(STRAFE,xy_(STRAFE, inv(_v)));
	wait(20);
}

 combo RAPID_FIRE { 
     set_val(FIRE,100);
     wait(35); 
     set_val(FIRE,  0); 
     wait(35);
 } 
 combo KILL {
     if (F_H)
     set_val (TACTICAL,100);
     wait (40);
     if (K)
     set_val (XB1_Y,100);
     wait (400);
     F_H=FALSE;
     K=FALSE;
     wait (40);
     }
 combo CANCEL_RLD {
     rumble (1);    
     set_val(XB1_Y, 100);
     wait(30);
     wait(20);
     set_val(XB1_Y, 100);
     wait(30);
     wait(20);
     b_reload=FALSE;
 }
 combo RUMBLE{
     wait(150);
     set_rumble(1,100);
     wait(150);
     reset_rumble();
     rumble--;
 }
 combo EASY_RUN{                  
     set_val(SPRINT,100);       
     wait(30);                     
     wait(100);      
 }  
 
 function rumble(pos) {
     if(pos)
         rumble = 1;
     else    
         rumble = 2;
 } 
 function Y() {
     v = actual_y;
     if(abs(v) < AIM_V)
         v = 0;
     if(abs(v) > Y_val + 5)
         return v;
     return v + Y_val;           
 }
 function X() {
     v_x = actual_x;
     if(abs(v_x) < AIM_H)
         v_x = 0;
     if(abs(v_x) > X_val + 5)
         return v_x;
     return v_x + X_val;           
 }
 function RESET_Defaults () {
 	a_r__c =15;
 	a_r_x__c=0;
    IN_GAME_SENS=12;//-------------------------------------------------fill out your in_game_sens here 
    first_time=0;
    save_pvars ();    
    }
function xy_(f_axis,f_val) {
	if(abs(get_val(f_axis)) < aa_max)  
	return f_val;	
	return get_val(f_axis); 	
} 
 function save_pvars (){
	set_pvar(SPVAR_10, a_r__c);	
	set_pvar(SPVAR_11, a_r_x__c);
    set_pvar(SPVAR_3, RELOAD__TIME); 
    set_pvar(SPVAR_15, IN_GAME_SENS);
    set_pvar(SPVAR_16, first_time); 
    rumble (1);
    }
 function ar (){
    if(abs(actual_y) >= x_y__thresh){
	 input__y[idx] =  actual_y;
	 idx += 1; 
	 if(idx == 25) 
	 {
	 for(idx = 0;idx <= 24;idx++) 
	 {
	 ry__av += input__y[idx];
	 }
	 ry__av /= 25;
	 a_r__c += ry__av / 10;
	 ry__av = 0;
	 idx = 0;
	 }
	 }
	 }
 function ar_x (){
     if(abs(actual_x) >= x_y__thresh) 
     {
     input__x[idx_x] =  actual_x;
     idx_x += 1; 
     if(idx_x == 25) 
     {
     for(idx_x = 0;idx_x <= 24;idx_x++) 
     {
     rx__av += input__x[idx_x];
     }
     rx__av /= 25; 
     a_r_x__c += rx__av / 10;
     rx__av = 0;
     idx_x = 0;
     }
     }
 	 }
 function d__z(f_axis,f_val) {
     f_val = get_val(f_axis);
     if(abs(f_val) < 10) 
     {
     set_val(f_axis,0); 
     return 0;
     }
     return f_val;
 	 }
 function f_Led (a,b,c,d){  
    set_led(LED_1,a);  
    set_led(LED_2,b); 
    set_led(LED_3,c); 
    set_led(LED_4,d);
 }
 
 /*
  
0    PS4_PS        PS3_PS         XB1_XBOX    XB360_XBOX    WII_HOME    WII_HOME
1    PS4_SHARE     PS3_SELECT     XB1_VIEW    XB360_BACK    WII_MINUS   WII_MINUS
2    PS4_OPTIONS   PS3_START      XB1_MENU    XB360_START   WII_PLUS    WII_PLUS
3    PS4_R1        PS3_R1         XB1_RB      XB360_RB      WII_RT
4    PS4_R2        PS3_R2         XB1_RT      XB360_RT      WII_ZR
5    PS4_R3        PS3_R3         XB1_RS      XB360_RS      WII_ONE    
6    PS4_L1        PS3_L1         XB1_LB      XB360_LB      WII_C       WII_LT
7    PS4_L2        PS3_L2         XB1_LT      XB360_LT      WII_Z       WII_ZL
8    PS4_L3        PS3_L3         XB1_LS      XB360_LS      WII_TWO    
9    PS4_RX        PS3_RX         XB1_RX      XB360_RX      WII_RX
10   PS4_RY        PS3_RY         XB1_RY      XB360_RY      WII_RY
11   PS4_LX        PS3_LX         XB1_LX      XB360_LX      WII_NX      WII_LX
12   PS4_LY        PS3_LY         XB1_LY      XB360_LY      WII_NY      WII_LY
13   PS4_UP        PS3_UP         XB1_UP      XB360_UP      WII_UP      WII_UP
14   PS4_DOWN      PS3_DOWN       XB1_DOWN    XB360_DOWN    WII_DOWN    WII_DOWN
15   PS4_LEFT      PS3_LEFT       XB1_LEFT    XB360_LEFT    WII_LEFT    WII_LEFT
16   PS4_RIGHT     PS3_RIGHT      XB1_RIGHT   XB360_RIGHT   WII_RIGHT   WII_RIGHT
17   PS4_TRIANGLE  PS3_TRIANGLE   XB1_Y       XB360_Y       WII_X
18   PS4_CIRCLE    PS3_CIRCLE     XB1_B       XB360_B       WII_B       WII_B
19   PS4_CROSS     PS3_CROSS      XB1_A       XB360_A       WII_A       WII_A
20   PS4_SQUARE    PS3_SQUARE     XB1_X       XB360_X       WII_Y
21   PS4_ACCX      PS3_ACCX                                 WII_ACCX    
22   PS4_ACCY      PS3_ACCY                                 WII_ACCY    
23   PS4_ACCZ      PS3_ACCZ                                 WII_ACCZ    
24   PS4_GYROX     PS3_GYRO       XB1_PR1         
25   PS4_GYROY                    XB1_PR2                               WII_ACCNX    
26   PS4_GYROZ                    XB1_PL2                               WII_ACCNY    
27   PS4_TOUCH                    XB1_PL2                               WII_ACCNZ    
28   PS4_TOUCHX                                                         WII_IRX    
29   PS4_TOUCHY                                                         WII_IRY    
30   TRACE_1                    
31   TRACE_2                    
32   TRACE_3                    
33   TRACE_4                    
34   TRACE_5                    
35   TRACE_6                    
LED Definitions
0    LED_1
1    LED_2
2    LED_3
3    LED_4

Rumble Definitions
0    RUMBLE_A
1    RUMBLE_B
2    RUMBLE_LT
3    RUMBLE_RT*/