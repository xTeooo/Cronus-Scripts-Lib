// VERSION CRONUSMAX******CMP/ZEN******     DoGzTheFiGhTeR's FORTNITE DoGz DAM HOT V1.00    ******ZEN/CMP******VERSION CRONUSMAX 

// 3 DIFFERENT AIM ASSISTS ( POLAR AIM ASSIST )( PROGRESSION AIM ASSIST ) ( DoGz METHOD AIM ASSIST (VM SPEED OPTION INCLUDED ENHANCE'S ASSIST SPEED DOWN TO -5 MIN) )
// ALL THREE AIM ASSISTS CAN RUN TOGETHER ALONG WITH RECOIL WHICH CREATES NEW AIM ASSIST'S   *****( EXPERIMENT ) ***** 

// ADJUSTABLE MOD MENU X 8 OPTIONS
// AIM ASSIST'S X 3      = L2 (WHEN L2 & R2 ARE PRESSED IT PROVIDES A BOOST TO AIM ASSIST FOR POLAR & DoGz ONLY )( BOOST OR SHAKE CAN BE TURNED OFF FOR POLAR ) 
// DYNAMIC FIRE          = FIRE BUTTON ( WHEN ACTIVE ) (PRESSURE RAPID FIRE ( FIRE HELD IN FULLY = FASTEST )
// JUMPSHOT              = FIRE BUTTON ( WHEN ACTIVE )
// DROP SHOT             = FIRE BUTTON ( WHEN ACTIVE )
// ANTI RECOIL X 2       = L2 & R2 (VIBRATION MODE REQUIRES IT ENABLED IN GAME )
//      ( YOU CAN CHOOSE RECOIL ON VIBRATE OR JUST L2 & R2 )       ( YOU CAN CHOOSE RECOIL INVERTED )
 
// INSTANT EDIT AND RESET ( CHOOSE YOUR LAYOUT ) 
// FAST RESET VIA ONE BUTTON PLUS YOUR NORMAL RESET PROCEDURE ( CHOOSE YOUR BUTTON CHOICE )
// QUICK EDIT ASSIST FOR SUPER FAST EDITS ( CHOOSE YOUR BUTTON CHOICE )


// VIBRATION RECOIL IS BETTER IN MY OPINION BUT YOU HAVE TO HAVE THE CONTROLLER RUMBLING (( ITS WORTH IT THO ))

// I HAVE LEFT ALL THREE AIM ASSIST'S RUNNING BY DEFAULT TOGGLE OF IN GAME  *** EXPERIMENT *** *** EXPERIMENT ***

// L2     &&   UP     = DON'T AT ME AIM ASSIST  ( XBOX = LT  &  UP ) 
// L2     &&   LEFT   = PROGRESSION AIM ASSIST  ( XBOX = LT  &  LEFT )
// L2     &&   RIGHT  = DoGz AIM ASSIST         ( XBOX = LT  &  RIGHT )
// SQUARE &&   R1     = DYNAMIC FIRE            ( XBOX = X   &  RB )
// L2     &&   CIRCLE = DROP SHOT ON FIRE 		( XBOX = LT  &  B )	( TURBO CROUCH ON FIRE )
// L2     &&   CROSS  = JUMP SHOT ON FIRE 		( XBOX = LT  &  A )	( JUMP ON FIRE )



// RECOIL HOLD BUTTON = CROSS AND PRESS ( UP ) OR ( DOWN ) TO ADJUST RECOIL **ADJUSTABLE RECOIL**

// MENU SYSTEM GUIDE ( THE LED WILL ID WHAT MOD/CLASS YOU ARE IN AND IT WILL RUMBLE AT THE MAXIMUM VALUE IN THAT CLASS/MOD )

// HOLD L2 & PRESS OPTIONS BUTTON ( TO ENTER/EXIT MENU MODE ) ( LT/MENU ) ( VIBRATES )
// TRIANGLE TO ALSO EXIT MENU ( Y )
// CROSS TO CHANGE CLASS TO CHANGE ( A )
// UP OR DOWN TO ADD OR SUBTRACT VALUE IN THAT CLASS
// VIBRATES ON THE MAXIMUM VALUE OF THAT CLASS/MOD      ( IF USING BLUETOOTH IT MAY VIBRATE A LITTLE LONGER )

// MENU CLASS
//____COLOUR ID_________________MOD/CLASS__________________
// 1. RED                     = DOGZ ASSIST POSITIVE VALUE
// 2. GREEN                   = DOGZ ASSIST NEGITIVE VALUE
// 3. PINK/PURPLE             = VIRTUAL MACHINE RUN TIME WHILE HOLDING L2 (INTENDED FOR DOGZ ASSIST)
// 4. YELLOW                  = PROGRESSION POSITIVE
// 5. WHITE                   = PROGRESSION NEGITIVE
// 6. BRIGHT BLUE             = PROGRESSION WAIT
// 7. BRIGHT PURPLE (PULSING) = POLAR BOOST
// 8. BRIGHT BLUE   (PULSING) = POLAR SHAKE

const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 

define PS         = PS4_PS;  
define SHARE      = PS4_SHARE;  
define OPTIONS    = PS4_OPTIONS;  
define R1         = PS4_R1;  
define R2         = PS4_R2;  
define R3         = PS4_R3;  
define L1         = PS4_L1;  
define L2         = PS4_L2;  
define RX         = PS4_RX;  
define RY         = PS4_RY;  
define LX         = PS4_LX;  
define LY         = PS4_LY;     
define L3         = PS4_L3;  
define UP         = PS4_UP;  
define DOWN       = PS4_DOWN;  
define LEFT       = PS4_LEFT;  
define RIGHT      = PS4_RIGHT; 
define CROSS      = PS4_CROSS;  
define CIRCLE     = PS4_CIRCLE;  
define SQUARE     = PS4_SQUARE;  
define TRIANGLE   = PS4_TRIANGLE;  
define TOUCH      = PS4_TOUCH;
define VIB_A      = RUMBLE_A;

define X   = RX;                                    
define Y   = RY;
define YES = TRUE;
define NO  = FALSE;

// PUT YOUR BUTTONS HERE BELOW IF DIFFERENT
// GAME BUTTONS BELOW   
define BUILD      = PS4_CIRCLE;  
define AIM        = PS4_L2;  
define FIRE       = PS4_R2;  
define PREVWEAPON = PS4_L1;  
define NEXTWEAPON = PS4_R1;                                         
define ROOF       = PS4_L1;  
define STAIRS     = PS4_L2;  
define FLOOR      = PS4_R1;  
define WALL       = PS4_R2;	                                            
define CROUCH     = PS4_R3;  
define JUMP       = PS4_CROSS;  
define RELOAD     = PS4_SQUARE;
define PICKAXE    = PS4_TRIANGLE;  
// EDIT LAYOUT BELOW
define EDIT_ASSIST_BUTTON = PS4_L3
define EDIT_BUTTON        = PS4_CIRCLE;  
define SELECT             = PS4_R2;
define RESET              = PS4_R3;
define CONFIRM            = PS4_CIRCLE; 
define FAST_RESET_BUTTON  = PS4_TOUCH;
define FAST_RESET_EDIT    = PS4_L3;// MUST BE EDIT IN GAME NO HOLD TIME
define EDIT_HOLD_WAIT     = 130;   // EDIT HOLD TIME IF USED ( IF NOT EDIT ( REPLACE LINE ) LINE 240 DIRECTIONS THERE )

// MENU BUTTONS
define MENU_HOLD_BUTTON              = L2,		MENU_PRESS_BUTTON         = OPTIONS;// ( L2 & OPTIONS TO ENTER/EXIT MENU )(XBOX  =  LT && MENU )
define MENU_MOD_CHANGE_BUTTON        = CROSS;                                       // CROSS   ( PRESS TO CHANGE MOD/CLASS IN MENU )          (XBOX  =  A )
define MENU_EXIT_BUTTON              = TRIANGLE;                                    // TRIANGLE( PRESS TO EXIT MENU ALSO )                    (XBOX  =  Y )

// AIM ASSIST TOGGLES ON/OFF
define PROGRESSION_HOLD_TOGGLE       = AIM,	    PROGRESSION_PRESS_TOGGLE  = LEFT; // ( L2/LEFT  OR  LT/LEFT )
define DoGz_ASSIST_HOLD_TOGGLE       = AIM,	    DoGz_ASSIST_PRESS_TOGGLE  = RIGHT;// ( L2/RIGHT OR  LT/RIGHT )
define DONT_AT_ME_ASSIST_HOLD_TOGGLE = AIM,		DONT_AT_ME_PRESS_TOGGLE   = UP;   // ( L2/UP    OR  LT/UP )
// MOD TOGGLES																				(PS4)           (XBOX)
define DYNAMIC_FIRE_HOLD_TOGGLE      = SQUARE,  DYNAMIC_FIRE_PRESS_TOGGLE = NEXTWEAPON; // ( SQUARE/R1   OR   X/RB )
define JUMPSHOT_HOLD_TOGGLE          = AIM,     JUMPSHOT_PRESS_TOGGLE     = JUMP;       // ( L2/CROSS    OR   LT/A )
define DROPSHOT_HOLD_TOGGLE          = AIM,     DROPSHOT_PRESS_TOGGLE     = CROUCH;     // ( L2/R3       OR   LT/RS )

define SNACKS_RECOIL_HOLD_BUTTON = JUMP;// ** CROSS / A **   RECOIL HOLD BUTTON = CROSS AND PRESS ( UP ) OR ( DOWN ) OR ( LEFT ) OR ( RIGHT ) TO ADJUST RECOIL

// DON'T TOUCH THESE BELOW
define STEP_INTERVAL =  1;
define STEPS2 = 0;
int RADIUS1,RADIUS2 = 10,RADIUS3 = 100;
int RADIUS4, RADIUS5;
int STEPS1,FIRE_RATE,PA,EDIT,HOLD,D_AS;
int time,angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,L;
int SHUNT,MENU,RECOIL,IDX = 1;

// MISC TIMES
define FAST_RESET_WAIT = 50;// BETWEEN BUTTON PRESSES 
define PICKAXE_WAIT    = 30;	// BUTTON PRESS TIME
define DELAY           = 30;          // DELAY BEFORE EDIT ASSIST (SELECT) IS HELD 

// MENU VALUES MIN/MAX THESE WILL BE ADDED/SUBTRACTED IN GAME VIA THE MENU
int D___AS_MIN   =   0,   D___AS_MAX =  20;
int D_AS1_MIN    = -20,   D_AS1_MAX  =   0;
int VMC_MIN      =  -5,   VMC_MAX    =  10;
int POS,POS_MIN  =   0,   POS_MAX    =  20;
int NEG,NEG_MIN  = -20,   NEG_MAX    =   1;
int WA,WA_MIN    =  -2,   WA_MAX     =  50;
int BOOST_MIN    =   1,   BOOST_MAX  =  10;
int SHAKE_MIN    =   2,   SHAKE_MAX  = 200;

// PROGRESSION ASSIST SETTINGS
define PROGRESSION_RELEASE = 15; 
define VMCR   =  0;
define AAMIN  = -6;// MINIMUM VALUE  
define AAMAX  =  6;// MAXIMUM VALUE  
define AAVAL  =  6;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS

//DON'T TOUCH THESE
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;

// POLAR ASSIST SETTINGS
define RADIUS        =  8;// RADIUS/STRENGTH/VALUE    
define STEPS         = 20;// STEP/SPEED        
define POLAR_RELEASE = 20;// RELEASE VALUE                                   
int    POLAR_BOOST   =  7;// BOOST VALUE MUST BE 1 TO 10   ( 1 = STRONGER SHAKE __ 10 = NO SHAKE )
int    POLAR_SHAKE   = 20;// SHAKE VALUE (EXPERIMENT) 2 - 200 

// DoGz ASSIST VALUES
define DoGz_ASSIST_RELEASE = 50;
int VMC    = 0;//DEFAULT VM SPEED 
int D__AS  = 0;//STARTING VALUE/RETURN VALUE
int D__AS1 = 4;//INVERT DIRECTION VALUE
int D___AS = 5;//( HIGHEST VALUE )( WILL BE DOUBLED WHEN FIRING )
int D_AS1 = -5;//( LOWEST VALUE ) ( WILL BE DOUBLED WHEN FIRING )

// SHOT MOD OPTIONS
define JUMPSHOT_WAIT  = 550;//WAIT TIME OF CROUCH (TO JUMP ON FIRE)(COMBO WAIT)
define DROP_SHOT_WAIT =  50;//HOLD TIME OF CROUCH (TO RAPID CROUCH ON FIRE)(COMBO WAIT)

// RAPID FIRE AND DYNAMIC RAPID FIRE OPTIONS
define RATE        =  2;
define RAPID       = 60;
define RAPID_GAIN  = 10;//ADD HERE IF REQUIRED ( ADD 10,20,30 ETC UNTIL BOTH FIRES ARE CORRECT ) ( MAKE RAPID/DYNAMIC FIRE SPEED ADJUSTMENT HERE ONLY )
int    FIRERATE    = 1000;

// ANTI RECOIL STARTING VALUES AND CONDITIONS
int    VERTICAL_RECOIL   =  28;//RECOIL VERTICAL   * STARTING VALUE * ( DEFAULT VALUE/STREGNTH ) ( START AT 18 IF NOT USING VIBRATION AND TEST )
define DEFAULT_RETURN    =  28;//RECOIL  DEFAULT VERTICAL VALUE IF YOU GO BEYOND THE LIMITS WHILE ADJUSTING ( TO SAVE GOING BACK TO ZERO ) ( SET THE SAME AS ABOVE )
define INTVERTED_RECOIL  =   1;//ITzSNACK'S INVERTED RECOIL METHOD ( IF INVERTED SET TO    -1   INSTEAD OF   1 )
define SNACKS_ANTIRECOIL = YES;//RECOIL MASTER CONTROL ( IF YOU DON'T WANT ANTI-RECOIL RUNNING AT ALL INPUT NO HERE )
define VIBRATION_RECOIL  = YES;//RECOIL ACTIVE ON VIBRATE OR JUST ON THE TRIGGERS ( L2 & R2 ) ( YES = VIBRATION  OR  NO = TRIGGERS ) ( MASTER ABOVE MUST BE SET TO YES ) 

// POLAR CONDITIONS
define ACTIVE_WHEN_ADS    = YES;//POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING = YES;//POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   = YES;//BOOST POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )
define POLAR_SHAKE_FIRE   = YES;//SHAKE POLAR AIM ASSIST ON FIRE ( WHEN AIMING & SHOOTING )

// AIM ASSIST MODS ON/OFF BY DEFAULT ( TOGGLE ON/OFF IN GAME )( CAN ALL RUN TOGETHER TO CREATE MORE AIM ASSISTS )( EXPERIMENT )
int DoGz_ASSIST        = YES;//DoGz AIM ASSTIST
int PROGRESSION_ASSIST = YES;//PROGRESSION AIM ASSIST
int DONT_AT_ME_ASSIST  = YES;//DON'T AT ME POLAR AIM ASSIST ( CMP VERSION )
int VM                 = YES;//VM SPEED CONTROL ( CHANGES PATTERN AND SPEED ) ( LEAVE YES ALTERED IN MENU SYSTEM )

// SHOT MODS //***** VERY IMPORTANT CHOOSE ONLY 1 BELOW  *****\\ JUMPSHOT OR DROPSHOT BY DEFAULT ??
int DROP_SHOT          = YES;//( ONLY CHOOSE ONE SHOT MOD BY DEFAULT ) ON/OFF BY DEFAULT   ( RAPID CROUCH ON FIRE )( TOGGLE ON/OFF IN GAME )
int JUMP_SHOT          =  NO;//( ONLY CHOOSE ONE SHOT MOD BY DEFAULT ) ON/OFF BY DEFAULT   ( JUMP ON FIRE )        ( TOGGLE ON/OFF IN GAME )

// FIRE MODES
int DYNAMIC_FIRE       = YES;//ON/OFF BY DEFAULT (DYNAMIC_FIRE) ) ( TOGGLE ON/OFF IN GAME )

// EDIT MODS
int INSTANT_PICKAXE    = YES;//INSTANT PICKAXE ON/OFF
int EDIT_ASSIST        = YES;//QUICK EDIT ASSIST
int FAST_RESET         = YES;//FAST RESET
int EDIT_RESET         = YES;//INSTANT EDIT & RESET WITH HOLD TIME 

main {

if (EDIT_ASSIST) {
if (get_val(EDIT_ASSIST_BUTTON)) {
	ASSIST();
	EDIT = YES;
	}
if (event_release (EDIT_ASSIST_BUTTON)) {
	combo_run (CONFIRM);
	HOLD = NO;
	EDIT = NO;
	}
}
if (FAST_RESET) {
if (!get_val(L2) && event_press(FAST_RESET_BUTTON)) {                                                         
    SHUNT = FAST_RESET_BUTTON;
    combo_run(RESET);
	}
}
if (EDIT_RESET) {
if (get_val(EDIT_BUTTON) && get_ptime(EDIT_BUTTON) > EDIT_HOLD_WAIT) {  //** IF NO HOLD TIME SWAP THIS LINE FOR THIS **        if (get_val(EDIT_BUTTON)) {
	EDIT = YES;
}
if (EDIT == YES) {
if (event_release(SELECT) || event_press(RESET)) {  
    combo_run (CONFIRM);
    EDIT = NO;
}
if (event_press(PICKAXE) || event_press(BUILD)) {
	EDIT = NO;
		}
	}
}
if (get_val(MENU_HOLD_BUTTON) && event_press(MENU_PRESS_BUTTON)) {
	SHUNT = MENU_PRESS_BUTTON;
	MENU = !MENU;
	IDX = 1;
	combo_run(VIBRATE);
}
if (MENU) {
if (event_press(MENU_EXIT_BUTTON)) {
    MENU = NO;
    }
if (event_press(MENU_MOD_CHANGE_BUTTON)) {
    IDX += 1;
if (IDX > 8) IDX = 1; 
    }
if (IDX == 1) {
    LED(0,2,0,0);//RED =  = DOGZ ASSIST POSITIVE VALUE
    D___AS = ADJUST(D___AS,D___AS_MIN,D___AS_MAX,1);
}
if (IDX == 2) {
    LED(0,0,2,0);//GREEN = DOGZ ASSIST NEGITIVE VALUE
    D_AS1 = ADJUST(D_AS1,D_AS1_MIN,D_AS1_MAX,1); 
}
if (IDX == 3) {
   	LED(0,0,0,2);//PINK/PURPLE =  VIRTUAL MACHINE RUN TIME WHILE HOLDING L2 (INTENDED FOR DOGZ ASSIST)
	VMC = ADJUST(VMC,VMC_MIN,VMC_MAX,1);
}
if (IDX == 4) {
    LED(0,2,2,0);//YELLOW = PROGRESSION POSITIVE
	POS = ADJUST(POS,POS_MIN,POS_MAX,1);
}
if (IDX == 5) {
    LED(2,2,2,2);//WHITE = PROGRESSION NEGITIVE
	NEG = ADJUST(NEG,NEG_MIN,NEG_MAX,1);
}
if (IDX == 6) {
    LED(3,0,0,0);//BRIGHT BLUE = PROGRESSION WAIT
	WA = ADJUST(WA,WA_MIN,WA_MAX,1);
}
if (IDX == 7) {
    LED(0,0,0,L/3);///BRIGHT PINK/PURPLE PULSING = POLAR SHAKE
	POLAR_BOOST = ADJUST(POLAR_BOOST,BOOST_MIN,BOOST_MAX,1);
	L++;
if (L > 3) {
	L = NO;
	}
}
if (IDX == 8) {
    LED(L/3,0,0,0);//BRIGHT BLUE PULSING = POLAR SHAKE
	POLAR_SHAKE = ADJUST(POLAR_SHAKE,SHAKE_MIN,SHAKE_MAX,1);
	L++;
if (L > 3) {
	L = NO;
	}
}
	set_val(MENU_MOD_CHANGE_BUTTON,0);set_val(UP,0); set_val(DOWN,0); 
}
else {
reset_leds ();
}
if (!get_val(SNACKS_RECOIL_HOLD_BUTTON) && get_val(DONT_AT_ME_ASSIST_HOLD_TOGGLE) && event_press(DONT_AT_ME_PRESS_TOGGLE)) {
	SHUNT = DONT_AT_ME_PRESS_TOGGLE;
	DONT_AT_ME_ASSIST = !DONT_AT_ME_ASSIST;
}
if (DONT_AT_ME_ASSIST) {
	actual_X = get_val(X);   
    actual_Y = get_val(Y);           
    actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
    max_Magnitude = (actual_Magnitude < 100);                      
if (POLAR_BOOST_FIRE) {
if (get_val(FIRE)) {	
   	RADIUS1 =  POLAR_BOOST * RADIUS2;
   	}
else
    RADIUS1 =  RADIUS3;
   	}
if (POLAR_SHAKE_FIRE) {
if (POLAR_SHAKE_FIRE && get_val(FIRE)) {
	STEPS1 = POLAR_SHAKE;
	}
else 
	STEPS1 = STEPS2;
}   			
if (!(time++ % STEP_INTERVAL)){                                  
	angle += STEPS + STEPS1;                                                 
    }                                                               
    angle = angle % 360;                                            
    sin_angle = Polar_Array[angle % 360];                           
    cos_angle = Polar_Array[(angle + 270) % 360];                  
    cos_angle = (cos_angle * RADIUS) / RADIUS1;                         
    sin_angle = (sin_angle * RADIUS) / RADIUS1;                          
if ((ACTIVE_WHEN_ADS && get_val(AIM) && abs(get_val(RY)) < POLAR_RELEASE && abs(get_val(RX)) < POLAR_RELEASE) 
   	|| (ACTIVE_WHEN_FIRING && get_val(FIRE) && abs(get_val(RY))< POLAR_RELEASE && abs(get_val(RX)) < POLAR_RELEASE)) { 
if(actual_Magnitude <= RADIUS){                                                      
    sin_angle -= actual_Y;                                                              
    cos_angle -= actual_X;                                                                 
    }
else {                                                                                       
    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
	}                                                  
    set_val(X, clamp(actual_X + cos_angle, -100, 100));
    set_val(Y, clamp(actual_Y + sin_angle, -100, 100)); 
    }
}
if (!get_val(SNACKS_RECOIL_HOLD_BUTTON) && get_val(PROGRESSION_HOLD_TOGGLE) && event_press(PROGRESSION_PRESS_TOGGLE)) {
	SHUNT = PROGRESSION_PRESS_TOGGLE;
	PROGRESSION_ASSIST = !PROGRESSION_ASSIST;
}
if (PROGRESSION_ASSIST && get_val(AIM) >= 80) {
if (!combo_running(AAS)) {
	AS = PROGRESSION(AS,AAMIN + NEG,AAMAX + POS,AAVAL,AAS,1);
    AW = PROGRESSION(AW,AAWMIN,AAWMAX + WA,AAWVAL,AAD,2);
    combo_run(AAS);
    	}
if (abs(get_val(RY))> PROGRESSION_RELEASE || abs(get_val(RX)) > PROGRESSION_RELEASE) {
	combo_stop(AAS);
	}
}
if (!get_val(SNACKS_RECOIL_HOLD_BUTTON) && get_val(DoGz_ASSIST_HOLD_TOGGLE) && event_press(DoGz_ASSIST_PRESS_TOGGLE)) {
	SHUNT = DoGz_ASSIST_PRESS_TOGGLE;
	DoGz_ASSIST = !DoGz_ASSIST;
}
if (DoGz_ASSIST && abs(get_val(RX)) < DoGz_ASSIST_RELEASE && abs(get_val(RY)) < DoGz_ASSIST_RELEASE) {
if (get_val(AIM) > 80) {
	D_AS = YES;
	AIM();
}
if(event_release(AIM)){
	D_AS = NO;
	vm_tctrl(VMCR); 
	}
}
if (INSTANT_PICKAXE) {
if (get_val(PICKAXE)) {
	PA = YES;
	}
if (PA && event_release(FIRE)) {
	combo_run (PICKAXE);
	}
if(get_val(BUILD)|| event_press(AIM)|| get_val(NEXTWEAPON)|| get_val(PREVWEAPON)) {
	PA = NO;
	}   	
}
if (get_val(DYNAMIC_FIRE_HOLD_TOGGLE) && event_press(DYNAMIC_FIRE_PRESS_TOGGLE)) {
	SHUNT = DYNAMIC_FIRE_PRESS_TOGGLE;
	DYNAMIC_FIRE   = !DYNAMIC_FIRE;
}                                                      
if (!EDIT && DYNAMIC_FIRE && get_val(FIRE)) {
	deadzone(L2,R2,10,10);
	FIRE_RATE = FIRERATE / get_val(FIRE) * RATE;
	combo_run(RAPID_FIRE);
}
if (get_val(DROPSHOT_HOLD_TOGGLE) && event_press(DROPSHOT_PRESS_TOGGLE)) {
	DROP_SHOT = !DROP_SHOT;
	JUMP_SHOT = NO;
}
if (!EDIT && DROP_SHOT && get_val(FIRE)) {
	combo_run(DROPSHOT);
} 
if (get_val(JUMPSHOT_HOLD_TOGGLE) && event_press(JUMPSHOT_PRESS_TOGGLE)) {
	JUMP_SHOT = !JUMP_SHOT;
	DROP_SHOT = NO;
}
if (JUMP_SHOT && get_val(FIRE)) {
    combo_run(JUMPSHOT); 
}
if (event_press(BUILD)) {
	JUMP_SHOT = NO;
	DROP_SHOT = NO;
}
if (SNACKS_ANTIRECOIL) {
if (VIBRATION_RECOIL) {
if (get_val(AIM) && get_val(FIRE) && get_rumble(VIB_A)) {
    combo_run(RECOIL);
    }
}
else if (!VIBRATION_RECOIL) {
if (get_val(AIM) && get_val(FIRE)) {
    combo_run(RECOIL);
    }
}
if (get_val(SNACKS_RECOIL_HOLD_BUTTON)) { 
if (event_press(UP)) {
    VERTICAL_RECOIL = VERTICAL_RECOIL + 1;
    combo_run(VIBRATE);
}
if (event_press(DOWN)) {
    VERTICAL_RECOIL = VERTICAL_RECOIL - 1;
    combo_run(VIBRATE);
	}
if(VERTICAL_RECOIL < -100 || VERTICAL_RECOIL > 100) {
	VERTICAL_RECOIL  = DEFAULT_RETURN;
}
	set_val(UP,0); set_val(DOWN,0);
}
if (abs(get_val(RY)) > VERTICAL_RECOIL + 2 || abs(get_val(RX)) > VERTICAL_RECOIL + 2) {
    combo_stop(RECOIL);
	}  
}
if (SHUNT && event_release(SHUNT)) {
	SHUNT = NO;
	}
else {
	set_val (SHUNT,NO);
	}
}

combo AAS{
	set_val(RY, 1 * - AS);
	wait(AW);
	set_val(RX, 1 * - AS);
	wait(AW);
	set_val(RY,AS);
	wait(AW);
	set_val(RX,AS);
	wait(AW);
}
combo DROPSHOT {
    wait(DROP_SHOT_WAIT)
	set_val(CROUCH,100);		
	wait(DROP_SHOT_WAIT);
}
combo RAPID_FIRE {
	set_val(FIRE,100);
	wait(FIRE_RATE + RAPID_GAIN);
	set_val(FIRE,0);
	wait(FIRE_RATE + RAPID_GAIN);
}
combo JUMPSHOT {                   
    set_val(JUMP,100); 
    wait(50);  
    wait(JUMPSHOT_WAIT); 
}
combo CONFIRM {
	wait(20);
	set_val(CONFIRM,100);
	wait(50);
}
combo PICKAXE {
	set_val(PICKAXE,100);
	wait(PICKAXE_WAIT);
}
combo RESET {
	set_val(FAST_RESET_EDIT,100);
	wait(FAST_RESET_WAIT)
	set_val(RESET,100);		
	wait(FAST_RESET_WAIT);
	combo_run(CONFIRM);
}
combo RECOIL {
    RECOIL = get_val(RY) + VERTICAL_RECOIL;
if(RECOIL > 100) RECOIL = 100;
    set_val(PS4_RY,RECOIL * INTVERTED_RECOIL);
}
combo VIBRATE {
    set_rumble(VIB_A,60);
    wait(350);
	reset_rumble ();
} 
function ASSIST () {
	HOLD += get_rtime();
if (get_val(EDIT_ASSIST_BUTTON)) {
if (HOLD >= DELAY)
  	PRESS (SELECT);
  	}
}
function PRESS (BUTTON) {
if (get_val(BUTTON))
		return;
	set_val(BUTTON, 100);
}
function AIM() {
	if (D_AS) {
	if (D_AS && VM) {
		vm_tctrl(VMC);
	}
		D__AS ++;
	if (D__AS >= D___AS)  D__AS = D__AS1;
		D__AS1 --;
	if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
		D__AS ++;
	if(get_val(L2)) {	
	set_val (RX,get_val(RX) + D__AS);
	set_val (RY,get_val(RY) + D__AS);
	}
	if(get_val(R2)) {	
	set_val (RX,get_val(RX) + D__AS);
	set_val (RY,get_val(RY) + D__AS);
		}
	}
}
function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if(FLOW) {
    VALUE += INCREMENT;
if(VALUE <= MAX)  
    return VALUE;
if(VALUE > MAX) {
        PROG[ID] = 0;
    return VALUE - INCREMENT;}
}
else {
    VALUE -= INCREMENT;    
if(VALUE >= MIN)  
    return VALUE;
if(VALUE < MIN) {
   	PROG[ID] = 1;
    return VALUE + INCREMENT;}
} 
   		 return NO;    
}
function ADJUST (VALUE,MIN,MAX,AMOUNT) {
if (event_press(UP)) {
	VALUE += AMOUNT;
	return VALUE;
    }
if (VALUE > MAX) { 
	return MIN;
	}
if (event_press(DOWN)) {
	VALUE -= AMOUNT;
	return VALUE;
	}
if (VALUE < MIN) {
	return MAX;
	}
if (VALUE == MAX) {
	combo_run(VIBRATE);
	}
return VALUE;
}
function LED(a,b,c,d) {
    set_led(LED_1,a);
    set_led(LED_2,b);
    set_led(LED_3,c);
    set_led(LED_4,d);
}
/*  Link out or delete this function below if using the Zen */
function clamp(int v,int lo,int hi) { 
if(v < lo) 
  	return lo;               
if(v > hi) 
  	return hi;        
  		return v;     
} 