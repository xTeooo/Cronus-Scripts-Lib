																																										/*
	MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmss      ``-/++ooyhddddddhyso+++:-`      `:yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdd+`  `-:+ydmmNMMMMMMMMMMMMMMMMMMMMNNmdhs+:.`  -hdNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm/   .:shNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmho-`  -sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+   :smMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmo.  .sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd/`  -hdhhmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhddo-  .yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/`  `.o++sdNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh+++/.   /hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMo`   `+hNNdyyhmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhyhmNmy/`   yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.  .+dho:--://///oymMMMMMMMMMMMMMMMMMMMMMMMMNmy+/////:-./sdh/  `sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  .:/:.:shdmNmmmdddNMMMMMMMMMMMMMMMMMMMMMMMMNmddmmmNNmdy+:-:/:  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   `./dmdyoo++oshmNMMMMMMMMMMMMMMMMMMMMMMMMMMMNmys+++oshdmy/``  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   `/mMNy/`     `.-+shhdmNNmhdNMMMNddmNNmdhys/-``     `+dNNd:   oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   :hMMm/`          ```.-:::odNMMMNh+:::-```           .smMNh.  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   :hMMm+.             `-/odNmho+odNmho:.              .smMNh.  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/` `:ydMNs:.--``     `-odNMmo-`   `:ymMNd/.`     `.--.:hNNds-  -hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd.  `.yMMNmddmdhysssyhmNMMN+`   `   -sNMMNdhysssyhdddhmMMms.   sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM`  `/hNMMMMMMMNmmmmNMMMMMMm/::+sys/::smMMMMMMNmdmNNMMMMMMMNy:  `sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/`  .+shmmmmds/:/smMMMMMMMNmNNNMMMNNmmNMMMMMMNms::+ydmNmdhs/.  :hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+-.  `.--.`  `:shdhydNNmmdddmmmmmdddmNNNhyhddy-` ``.--.` `--hNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh.   .:+-`  ``.-/oosssso+oo+/+oo+osysso+/-..`  `:+:`  `:NNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd+   :sms:`  .sNNNmmNNNmmmmdmmmmNNNmmNNdo`  ./ydy`  -sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM`   :dMNy: `+mNh+/sdy::+ssy/-+yhs:omNh/  +hNNh.   sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy.  `:MMNo.  .:.   ``         ``   --.  `dMMd/   +mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM-  .sMMNo.                      `      .dNMmo`  +dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM+` .+hNNmy/.  .:/:`.:---:--:-..:+:` `-+yNNmy/`  -yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+`  -/smNm+`:yNmhdNNmmNmmNmdhmNy--omNdo/.` ..yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdoo` `-smNho/+sssyysssosyysoo+/sdNmo`    :NNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd-  `/dNNmmmmddddddddddmmmmmNNy/  `-.`/MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MNmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm/`   .:/oymmNMMMMMMMMNNmmy+/:.   -:.`/mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmNM
M-                                                                ``-+ossysoo/-``                                                                   -M
M.                                                                      ```                                                                         .M
M.     `:////:   .///:` `../////:-.`   `://////////-``.-://///..`    ://////////:.   `.///////////. `.-//////..`    ////-    `-///-``-///////////:. .M
M.     dNMMMMM. /dMMMo/ohNMMNNNMMMMm+-+dNMMMMMMNNNy+ohMMMNNNNMMMd+` oNMMMNNNNMMMMM. -smNMMMMMMNNms+odMMMNNNMMMMd/ `oMMMd+    oNMMM/odMMMNNNNNNNNd+. .M
M.   `oMMMMMMMy/hMMMdodMMNh+.../dMMMd/`..yNMMmo...odMMMy+-..:mMMMh::MMMNh++++hNMMM:``..-mMMMh:...smMMNy/-../mMMMy:/MMMNo    +dMMNs:dMMMN+++++/-.`   .M
M.  `:NMMNNNMMNNNMMm:NMMNh`    :hMMMy-  -NMMNy`  /dMMMh`    .mMMMy/mMMMNNNMMMNNmh+    .sMMMd/   +mMMNy    `-mMMMs/mMMMs.   -dMMNd``smNNNNNNMMNd`    .M
M.  :mMMMo+hMMMMMMm:-NMMMmo::+smMMMy-  -mMMMy.   omMMMmo::+smMMMyohMMMhymMMMNh/`   --:oMMMMs--- sNMMMm+::+ymMMMs-/MMMMy/:/oNMMNh. --/ooooodNMMM/`   .M
M. :hMMMs-`/MMMMMmo  odNMMMNNMMNmy:`  -hMMMy- `/ `+hNMMMNNMMNmy:-sMMMd: `:yNMMms::dNNNMMMMMNNd+ `odNMMMNNMMNms-` -hNMMMNNNMMmh/.:hNNNNNNNNMMMms     .M
M. `----`  `-----.`   .---------.     `----`   -   `---------.  `----.`    ------------------.    `---------.     `---------.` `.------------.      .M
MyssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssyM																											*/
//                                                  * APEX LEDGENDS PSYCHO SCRIPT VIP *

//--BUTTONS ( Customize To Your Layout )
	define FLIPPED     = FALSE; // Make TRUE if you play flipped
    define TACTICAL    = PS4_L1;
    define LETHAL      = PS4_R1;
    define SPRINT      = PS4_L3;
    define MELEE       = PS4_R3;
	define SWAP        = PS4_TRIANGLE;
    define CROUCH      = PS4_CIRCLE;
    define JUMP        = PS4_CROSS;
    define RELOAD      = PS4_SQUARE;
	define AIM_X	   = PS4_RX;
	define AIM_Y	   = PS4_RY;
	define STRAFE 	   = PS4_LX;
	define WALK 	   = PS4_LY;
	define PSYCHO_Polar       = TRUE;
	define PSYCHO_Steady_Aim  = FALSE;
	int RADIUS      = 22; 
	int ANGLE       =  8; 
	int RESOLUTION  =  8; 

//--Smart Anti Recoil
	define PSYCHO_Smart_AR = TRUE;
	int AR_STRENGTH            =   30;

//--Hair Triggers (INSTANT FIRE WITH R2)
	define Hair_Triggers = TRUE;

//--Slide Cancel
	define Slide_Cancel = FALSE;

//--Bunny Hop
	define Bunny_Hop = FALSE;

//--Aim Corrections
	define in_game_menu_sens  =    4;
	define AimSensCorrections = TRUE;
	define Max_Display_Range = 200;
	int displayNew   = TRUE;
	int displayBlack = FALSE;
	int count;
	int INC = 1,DEC,COLOUR[3];
	int BRIGHTNESS = 3;
	define STICK_DRIFT = 10;
	define TIME_BASE = 8;
	define MAGNITUDE = 100;
	int REFREH_RATE = TIME_BASE * 10;
	int _rumble;
	int C_RX;
	int C_RY;
	int L_RX;
	int L_RY;
	int refresh_rate;
	int _ret;
	int mvt_direction
	int angle;
	int Timer1 = 0;
	int Timer2 = 0;
	int Time   = 30;
	int Length;
	int MaxLength = 800;
	int MinLength = 200;
	int X_POS1;
	int Y_POS1;
	int X_POS2;
	int Y_POS2;
	int Steps1;
	int Steps2;
	int MinSteps = 5;
	int MaxSteps = 25;
	int XorY1 = TRUE;
	int XorY2 = TRUE;
	int Reset = FALSE;
	int Dir1 = 1;
	int Dir2 = -1;
	int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;
	int ADS;
	int FIRE;

init {
	mvt_direction =  1;
	angle         = 90;
	COLOUR = 255;
	cls_oled(0);
	X_POS1 = random(1 , 128);
	Y_POS1 = random(1 , 64);
	X_POS2 = random(1 , 128);
	Y_POS2 = random(1 , 64);
	Steps1 = random(MinSteps, MaxSteps);
	Steps2 = random(MinSteps, MaxSteps);
	Length = random(MinLength , MaxLength);  
	}

main {
  combo_run(RGB); 
	if(FLIPPED) {
		ADS  = PS4_L1;
		FIRE = PS4_R1;
	} else {
		ADS  = PS4_L2;
		FIRE = PS4_R2;
	}
	if(Hair_Triggers) {
		if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);
	
		if(get_ival(PS4_L2) > 10)
			set_val(PS4_L2, 100);	
	}
  if(PSYCHO_Polar) {
	if(get_val(ADS) > 50 || get_val(FIRE) > 50)
	{						
		
		C_RX = get_ival(PS4_RX);
		C_RY = get_ival(PS4_RY);
		
		if(!get_mvt_direction(C_RX, L_RX))
		{	
			if(abs(C_RX) < STICK_DRIFT)
				C_RX = 0;	
		}
		
		if(!get_mvt_direction(C_RY, L_RY))
		{	
			if(abs(C_RY) < STICK_DRIFT)
				C_RY = 0;		
		}
		
		if(!(refresh_rate%REFREH_RATE))
		{
			L_RX = C_RX;
			L_RY = C_RY;
		}
		
		
		if(check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY) && get_val(ADS) > 50 && get_val(FIRE) > 50)
		{
			_ret += clamp(get_RUMBLE_EVIL_AR(), -100, 100);			
		}
		
		_ret = get_mvt_direction(C_RX, L_RX);
								
		if(_ret != 0)
			mvt_direction = _ret;	
		
		if(mvt_direction == 1)
		{
			C_RX += get_polar_coordinate(RADIUS, sin(angle));
			C_RY += get_polar_coordinate(RADIUS, cos(angle));
		}
		else
		{
			C_RX += get_polar_coordinate(RADIUS, cos(angle));
			C_RY += get_polar_coordinate(RADIUS, sin(angle));
		}
		
		angle += ANGLE;
		angle = angle % 360;
		
		if(PSYCHO_Steady_Aim)
		{
			C_RX = get_steady_aim(C_RX, RESOLUTION);
			C_RY = get_steady_aim(C_RY, RESOLUTION);	
		}
	
		set_val(PS4_RX, clamp(C_RX, -100, 100));
		set_val(PS4_RY, clamp(C_RY, -100, 100));
		
		refresh_rate += get_rtime();
	}
	else
	{
		C_RX = 0;
		C_RY = 0;
		L_RX = 0;
		L_RY = 0;
		refresh_rate = 0;
		angle = 90
		}
	}
	if(Slide_Cancel)  {                                                                                                  
		if((get_ival(WALK) < -80) || (get_ival(WALK) > 80) || (get_ival(STRAFE) < -80) || (get_ival(STRAFE) > 80)) {
			if(event_release (CROUCH))
		combo_run(CANCEL_SLIDE);
		    	}                                 
	 		}
	if(Bunny_Hop) { 
		if (get_ival(JUMP) && get_ptime(JUMP) > 200) 
	combo_run(BUNNYHOP); 
	 		}
	if (PSYCHO_Smart_AR) {
	  if(get_val(ADS) > 50 && get_val(FIRE) > 50) {						
		if(!(refresh_rate%REFREH_RATE)) {
			L_RX = C_RX;
			L_RY = C_RY;
		}

		C_RX = get_ival(PS4_RX);
		C_RY = get_ival(PS4_RY);
		
		if(check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY)) {
			set_val(PS4_RY, clamp(C_RY + get_RUMBLE_EVIL_AR(), -100, 100));			
		}
		
		refresh_rate += get_rtime();
	} else {
		C_RX = 0;
		C_RY = 0;
		L_RX = 0;
		L_RY = 0;
		refresh_rate = 0;	
		}
	}
  if (AimSensCorrections) {
    ads_grenade_sens = 100 - (in_game_menu_sens);
    ads_fire_sens    = 97  - (in_game_menu_sens);
    actual_sens      = 100;
    if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(LETHAL) && !get_ival(TACTICAL)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && !get_ival(FIRE)) {
      Sens = ads_grenade_sens;
    } else if (!get_ival(ADS) && get_ival(FIRE)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && get_ival(FIRE)) {
      Sens = ads_fire_sens;
    } else if (get_ival(TACTICAL) || get_ival(LETHAL)) {
      Sens = ads_grenade_sens;
    }
    if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY))) > 30) {
      if (Sens > 100) Sens = 100;
      sensitivity(PS4_RX, NOT_USE, Sens);
      sensitivity(PS4_RY, NOT_USE, Sens);
		}
	}
	if(get_ival(PS4_L1) && get_ptime(PS4_L1) > 350) {
		block_all_outputs();
		displayNew = TRUE;
		//--1's
        AR_STRENGTH = ValueChange(AR_STRENGTH, PS4_LEFT , -1);
        AR_STRENGTH = ValueChange(AR_STRENGTH, PS4_RIGHT,  1);
        //--10's
        AR_STRENGTH = ValueChange(AR_STRENGTH, PS4_DOWN, -10);
        AR_STRENGTH = ValueChange(AR_STRENGTH, PS4_UP  ,  10);
    }
    if(displayNew) {
        cls_oled(OLED_BLACK);
        count = 0;
        NumberToString(AR_STRENGTH,FindDigits(AR_STRENGTH));
        displayNew = FALSE;
        displayBlack = TRUE;
    }
    if(displayBlack) {
    	count ++
    	if(count == 599) {
		cls_oled(0);
		}
    	if(count > 599) {
		ScreenSaver();
    	}
		if(count > 2499) {
		cls_oled(OLED_BLACK)
    	displayBlack = FALSE;
		}
	}
    set_val(TRACE_1,count)
}

combo RGB {
	wait(10);
	set_rgb(COLOUR / BRIGHTNESS, COLOUR[1] / BRIGHTNESS, COLOUR[2] / BRIGHTNESS);
	COLOUR[DEC] -= 2; 
	COLOUR[INC] += 2;
	if (!COLOUR[DEC]) { 
	INC = (INC + 1) % 3; 
	DEC = (DEC + 1) % 3; }
}
combo CANCEL_SLIDE {
    set_val(CROUCH, 100);
    wait(120);
    set_val(CROUCH, 0);
    wait(60);
    set_val(CROUCH, 100);
    wait(50);
    set_val(CROUCH, 100);
    set_val(JUMP, 100);
    wait(60);
    set_val(CROUCH, 0);
    set_val(JUMP, 100);
    wait(10);
    set_val(JUMP, 0);
}
combo BUNNYHOP {
    set_val(JUMP, 100);
    wait(30);
    set_val(JUMP, 0);
    wait(30);
    set_val(JUMP, 100);
    wait(30);
    set_val(JUMP, 0);
    wait(30);
}
combo hold {
	wait(Time);
	Timer1 = Timer1 + 1;
	Timer2 = Timer2 + 1;
	Length = Length - 1;
	if(Length < 1) {                                
		Reset = !Reset;
	}
	if(XorY1 == TRUE) {
		X_POS1 = X_POS1 + Dir1;
	}
	if(XorY1 == FALSE) {
		Y_POS1 = Y_POS1 + Dir1;
	}
	if(XorY2 == TRUE) {
		X_POS2 = X_POS2 + Dir2;
	}
	if(XorY2 == FALSE) {
		Y_POS2 = Y_POS2 + Dir2;
	}
}
combo CoinFlip1 {
	Dir1 = random(1 , 3);
	if(Dir1 == 2) {
		Dir1 = -1;
	}
}
combo CoinFlip2 {
	Dir2 = random(1 , 3);
	if(Dir2 == 2) {
		Dir2 = -1;
	}
}
function ValueChange(AR_STRENGTH, f_btn, f_inc) {
    if(press_hold(f_btn)) {
        AR_STRENGTH += f_inc;
        if(AR_STRENGTH < inv(Max_Display_Range)) {
            AR_STRENGTH = inv(Max_Display_Range);
        }
        if(AR_STRENGTH > Max_Display_Range) {
            AR_STRENGTH = Max_Display_Range; 
        }
        displayNew = TRUE;
    }
    return AR_STRENGTH;
}
int bufferIndex;
int charIndex,digitIndex;
function NumberToString(f_val,f_digits) {
    bufferIndex = 1;  
    digitIndex = 10000;
    if(f_val < 0) {                     //--neg numbers
         putc_oled(bufferIndex,45);     //--add leading "-"
         bufferIndex += 1;
         f_val = abs(f_val);
    } 
    for(charIndex = 5; charIndex >= 1; charIndex--) {
        if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++; 
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);   //--add ","
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    }   
    puts_oled(center_x(bufferIndex - 1, OLED_FONT_LARGE_WIDTH), 25, OLED_FONT_LARGE, bufferIndex - 1, OLED_WHITE);
}
function block_all_outputs() {
	set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
	set_val(JUMP  , 0 ); 	set_val(CROUCH, 0 );    set_val(RELOAD, 0 );
}
function FindDigits(f_number) {
    f_number = abs(f_number);
    if(f_number / 10000 > 0) return 5;
    if(f_number /  1000 > 0) return 4;
    if(f_number /   100 > 0) return 3;
    if(f_number /    10 > 0) return 2;
    return 1;
}
function center_x(f_chars,f_font) {
      return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function get_RUMBLE_EVIL_AR() {	
	_rumble = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B))
	
	if (_rumble > 10 && _rumble < 90)
	{
		return (_rumble - AR_STRENGTH);
	}

	return 0;
}

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval) {

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

function get_mvt_direction( _val, _lval) {
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}

function sin(angle) {   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    return _ret;
}

function cos(angle) {   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    return _ret;
}

function get_polar_coordinate(radius, coef) {
	if(radius > 32)
	{
		radius = 32;
	}
	return((radius * coef) / 1000);		
}

function get_steady_aim( _axis, _resolution) {
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}
	return _axis;
}
function ScreenSaver() {
	pixel_oled(X_POS1 , Y_POS1 , 1)
	pixel_oled(X_POS2 , Y_POS2 , 1)
	combo_run(hold);
	if(X_POS1 < 1)X_POS1 = 127;
	if(Y_POS1 < 1)Y_POS1 = 63;
	if(X_POS1 > 128)X_POS1 = 1;
	if(Y_POS1 > 64)Y_POS1 = 1;
	if(X_POS2 < 1)X_POS2 = 127;
	if(Y_POS2 < 1)Y_POS2 = 63;
	if(X_POS2 > 128)X_POS2 = 1;
	if(Y_POS2 > 64)Y_POS2 = 1;
	if(Reset == TRUE) {
		cls_oled(0);
		X_POS1 = random(1 , 128);
		Y_POS1 = random(1 , 64);
		X_POS2 = random(1 , 128);
		Y_POS2 = random(1 , 64);
		Steps1 = random(MinSteps, MaxSteps);
		Steps2 = random(MinSteps, MaxSteps);
		Length = random(MinLength , MaxLength);
		Reset = FALSE;
	}
	if(Timer1 > Steps1) {
		Timer1 = 0;
		Steps1 = random(MinSteps , MaxSteps);
		XorY1 = !XorY1;
		combo_run(CoinFlip1);
	}
	if(Timer2 > Steps2) {
		Timer2 = 0;
		Steps2 = random(MinSteps , MaxSteps);
		XorY2 = !XorY2;
		combo_run(CoinFlip2);
	}
}
const int16 Lookup_Table[] = { 0, 17, 34, 52, 69, 87, 104, 121, 139, 156, 173, 190, 207, 224, 241, 258, 275, 292, 309, 325, 342, 358, 374, 390, 406, 422, 438, 453, 469, 484, 500, 515, 529, 544, 559, 573, 587, 601, 615, 629, 642, 656, 669, 682, 694, 707, 719, 731, 743, 754, 766, 777, 788, 798, 809, 819, 829, 838, 848, 857, 866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 939, 945, 951, 956, 961, 965, 970, 974, 978, 981, 984, 987, 990, 992, 994, 996, 997, 998, 999, 999, 1000};
function press_hold(f_btn) {
    return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
           && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}