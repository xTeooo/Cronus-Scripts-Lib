																																																																																									/*

         ░█████╗░██████╗░██╗░░██╗░█████╗░██╗░░██╗███████╗░█████╗░████████╗░██████╗
         ██╔══██╗██╔══██╗██║░██╔╝██╔══██╗██║░░██║██╔════╝██╔══██╗╚══██╔══╝██╔════╝
         ███████║██████╔╝█████═╝░██║░░╚═╝███████║█████╗░░███████║░░░██║░░░╚█████╗░
         ██╔══██║██╔═══╝░██╔═██╗░██║░░██╗██╔══██║██╔══╝░░██╔══██║░░░██║░░░░╚═══██╗
         ██║░░██║██║░░░░░██║░╚██╗╚█████╔╝██║░░██║███████╗██║░░██║░░░██║░░░██████╔╝
         ╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░
Subscribe to ApkCheats on YouTube, make sure to visit the website aswell www.apkfreecheats.co.uk

          ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
          ᥊᥊            Exclusive V2             ᥊᥊
          ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊																																																																										*/

//===============================================================
//    BUTTON LAYOUT - CHANGE TO YOUR BUTTON LAYOUT
//===============================================================
define PS 	     = PS4_PS; 
define SHARE     = PS4_SHARE; 
define OPTIONS   = PS4_OPTIONS; 
define R1 	     = PS4_R1; //XB1_RB
define R2 		 = PS4_R2; //XB1_RT
define R3 		 = PS4_R3; //XB1_RS
define L1 		 = PS4_L1; //XB1_LB
define L2 		 = PS4_L2; ///XB1_LT
define L3 		 = PS4_L3; //XB1_LS 
define RX 		 = PS4_RX;//XB1_RX
define RY 		 = PS4_RY;//XB1_RY
define LX 		 = PS4_LX;//XB1_LX
define LY 		 = PS4_LY;//XB1_LY
define UP 		 = PS4_UP;//XB1_UP
define DOWN	 	 = PS4_DOWN; //XB1_DOWN
define LEFT 	 = PS4_LEFT; //XB1_LEFT
define RIGHT	 = PS4_RIGHT; //XB1_RIGHT
define TRIANGLE  = PS4_TRIANGLE; //XB1_Y
define CIRCLE	 = PS4_CIRCLE; // XB1_A
define CROSS	 = PS4_CROSS; //XB1_B
define SQUARE	 = PS4_SQUARE;//XB1_X
define TOUCHPAD  = PS4_TOUCH;//XB1_SYNC

/*SWITCH PROFILE BUTTONS 
    OPTION 1 = 1 BUTTON PRESS FOR SWITCH PROFILE */
    define profile_switch_button1  = TRIANGLE; // Press
    define profile_button          = FALSE;    // CHANGE TO TRUE IF YOU WANT ONLY 1 BUTTON PRESS FOR PROFILE SWITCH = FALSE = OFF 
	
/*OPTION 2 = 2 BUTTON PRESS FOR SWITCH PROFILE */  
    define profile_switch_button2  = L2;    // Hold
    define profile_switch_button3  = DOWN;  // Press
    define profile_switch_button23 = TRUE;  // CHANGE TO TRUE IF YOU WANT 2 BUTTON PRESS FOR PROFILE SWITCH = TRUE = ON 

// BELOW YOU CAN CHANGE YOUR DROP SHOT BUTTON    
    int USE_SLIDE_CANCEL 	        = TRUE;
    define slide_dropshot_button    = PS4_CIRCLE;
    define slide_CANCEL_delay 		= 40; // 40 - 60 BEST RANGE FOR COD
    
const string TITLE     				   = "ExclusiveV2";
const string CREDIT    				   = "Created By :";
const string NAME      				   = "ApkCheats";
const string OFF 	   				   = "OFF"; 
const string ON 	   				   = "ON"; 
const string SAVE 	   				   = "SAVED";
const string PROFILE_1 				   = "PRIMARY": 
const string PROFILE_2 				   = "SECONDARY": 
const string ANTI_RECOIL    		   = "Legacy AR";		
const string APKCHEATS_AR   		   = "Apk AR";      
const string RAPID_FIRE     		   = "Rapid Fire*";       
const string AKIMBOO_FIRE   		   = "Akimbo RF";          
const string APKCHEATSV1   		 	   = "ExclusiveAA";           
const string APKCHEATSV2    		   = "SilentAA";              
const string EXCLUSIVE_SENS  		   = "Sensitivity";       
const string POLAR_AIM      		   = "Polar Aim";         
const string STICKY_AIM     		   = "Sticky Aim"         
const string SENS_BOOSTER   		   = "Sens Boost";          
const string DROP_SHOT      		   = "Drop Shot";          
const string QUICK_SCOPE    		   = "Quick Scope"         
const string HOLD_BREATH   			   = "Hold Breath";       
const string BUN_HOP    			   = "Bunny Hop";        
const string AUTO_PING     			   = "Enemy Ping";        
const string AUTO_RUN       		   = "AutoRun";           
const string SWAP           		   = "Swap Tr/Bu";        
const string INVERTED       		   = "Inverted Y";        
const string ANTI_RECOIL_VERTICAL      = "AR Vertical"; 		  
const string ANTI_RECOIL_HORIZONTAL    = "AR Horiz";		     
const string ANTI_RECOIL_START         = "AR Start";          
const string ANTI_RECOIL_END           = "AR End";            
const string ANTI_RECOIL_TIME          = "AR Time";           
const string HORIZONTAL_RECOIL_START   = "HorizStart";        
const string HORIZONTAL_RECOIL_END     = "HorizEnd";          
const string HORIZONTAL_RECOIL_TIME    = "HorizTime";       
const string RATE_OF_FIRE              = "Rounds/sec";	     
const string AKIMBO_FIRE               = "Rounds/Sec";        
const string SAMPLING_TIME             = "Sample Time";       
const string AIM_BOOST                 = "Aim Boost";         
const string AIM_CORRECTION            = "Correction";        
const string AIM_PERFECTION            = "Perfection" ;       
const string AIM_BOOST1                = "Aim Boost";         
const string AIM_CORRECTION1           = "Correction";        
const string AIM_PERFECTION1           = "Perfection";       
const string IN_GAME_SENS              = "InGameSens";        
const string POLAR_RADIUS              = "Radius";           
const string POLAR_STEPS               = "Steps";             
const string STICKY_AIM_SIZE           = "Sticky Size";       
const string STICKY_AIM_TIME           = "Sticky Time";       
const string GEN__SENS                 = "GeneralSens";       
const string ADS__SENS                 = "ADS Sens";          
const string FIRE__SENS                = "Fire Sens";         
const string ADS__FIRE__SENS           = "ADSFireSens";       
const string GRENADE__SENS             = "GrenadeSens";       
const string DROP_SHOT_SPEED           = "Drop Speed";        
const string QUICK_SCOPE_SPEED         = "QScopeDelay";      

int i;
int c,c_val;
data(1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0);     
int display_title = TRUE;
int display_new; 
int display_black;
int ModMenu;	
int Mod_Edit;
int KillSwitch;
int MoDName_idx;
int valName_idx;
int profile_idx; 
int val_col_idx;
define LAST_EDITABLE_COLUMN   =  9;
define LAST_MODNAME_STRING    = 17;
define LAST_EDITABLE_STRING   = 11;
define AMOUNT_OF_VALNAME_IDX  = 28;
define AMOUNT_OF_PROFILES     =  2;  
define AMOUNT_OF_MULTI_TOGGLE =  6;
const uint8 VALUES[][]  = { { 30, 0, 10, 20, 24, 0, 0, 0, 1, 1 }, { 11, 0, 11, 21, 25, 0, 0, 0, 1, 1 } }; 	
const uint8 ASCII_NUM[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
int antirecoil_vertical[2]; 
int antirecoil_horizontal[2];
int antirecoil_start[2];
int antirecoil_end[2];
int antirecoil_time[2];
int horizontal_start[2];
int horizontal_end[2];
int horizontal_time[2];
int rate_of_fire[2];
int akimborf[2]; 
int toggle_antirecoil[2];   
int toggle_APKCHEATS_AR[2] 
int toggle_rapidfire[2];  
int toggle_akimborf[2];   
int toggle_holdbreath[2]; 
int toggle_quickscope[2];
int sticky_aim;
int stickyaim_size;
int stickyaim_time;
int ApkExclusive5;
int Sampling_Time;
int Aim_Boost;
int Aim_Correction;
int Aim_Perfection_Limit;
define POS_Aim_Limit = 70;
define NEG_Aim_Limit = -70;
define POS_Micro_MVT_Limit = 50;
define NEG_Micro_MVT_Limit = -50;
int X_Last_Value     = 0;
int Y_Last_Value     = 0;
int X_Current_Value  = 0;
int Y_Current_Value  = 0;
int Sampling_Done = FALSE;
int spiroide_pulse = 0;
int fine_pulse = 0;
int Joystick_calibration = FALSE;
int RX_Axis_Joystick_calibrate = 0; 
int RY_Axis_Joystick_calibrate = 0;
int Current_State          = 0;
int Aim_Abuse_State      = 2;
define Get_Last_Value     = 0;
define Get_Current_Value = 1;
int mvt = 0;
int Aim_Boost_Val = 0; 
int Aim_Correction_Val = 0;
int ApkExclusive710; 
int quickscopedelay; 
int ApkExclusives__Sensitivity;
int ingamesens;
int ads_grenade_sens;
int ads_fire_sens;
int Sens;
int RADIUS;        
int STEPS; 
int polar_aim;
int angle;
int Custom__Sensitivity;
int GEN_SENS;
int ADS_SENS;
int FIRE_SENS;
int ADS_FIRE_SENS;
int GRENADE_SENS;
int USE_SENS;
int drop_shot;
int drop_speed;
int enemy_ping;
int bunny_hop;
int autorun_on;
int swap_on;
int inverted_on;
int AntirecoilVertical; 
int ApkCheatsHorizontal;
int invert; 
int i_val;                                                        
int i_pnt;                                                        
int i_num;                                                        
int i_cnt;                                                        
int v,ar_y;
int i_val_h;
int i_pnt_h;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;
int hold_time;                                                    
int rest_time;
int led_on;
int led_off; 
int q;											
int double__tap[30];
int count_black; 
int profile_1or2; 
     
init {  
    	toggle_antirecoil[0]  = get_pvar(SPVAR_1, 0, 1, 0 );        antirecoil_vertical[30]  = get_pvar(SPVAR_7 , -99, 99, 0);         
    	toggle_APKCHEATS_AR[0]= get_pvar(SPVAR_2, 0, 1, 0 );        antirecoil_horizontal[0] = get_pvar(SPVAR_8 , -99, 99, 0);
    	toggle_rapidfire[0]   = get_pvar(SPVAR_3, 0, 1, 0 );        antirecoil_start[0]      = get_pvar(SPVAR_9 , -99, 99, 0);
    	toggle_akimborf[0]    = get_pvar(SPVAR_4, 0, 1, 0 );        antirecoil_end[0]        = get_pvar(SPVAR_10, -99, 99, 0); 
        toggle_holdbreath[0]  = get_pvar(SPVAR_5, 0, 1, 0 );        antirecoil_time[0]       = get_pvar(SPVAR_11, -99, 99, 0);                                                           
        toggle_quickscope[0]  = get_pvar(SPVAR_6, 0, 1, 0 );        horizontal_start[0]      = get_pvar(SPVAR_12, -99, 99, 0); 
                                                                    horizontal_end[0]        = get_pvar(SPVAR_13, -99, 99, 0);
                                                                    horizontal_time[0]       = get_pvar(SPVAR_14, -99, 99, 0);
                                                                    rate_of_fire[0]          = get_pvar(SPVAR_15,   0, 25, 0);
                                                                    akimborf[0]              = get_pvar(SPVAR_16,   0, 25, 0);  
     
    	toggle_antirecoil[1]  = get_pvar(SPVAR_17, 0, 1, 0 );       antirecoil_vertical[1]   = get_pvar(SPVAR_23, -99, 99, 0);         
    	toggle_APKCHEATS_AR[1]= get_pvar(SPVAR_18, 0, 1, 0 );       antirecoil_horizontal[1] = get_pvar(SPVAR_24, -99, 99, 0);
    	toggle_rapidfire[1]   = get_pvar(SPVAR_19, 0, 1, 0 );       antirecoil_start[1]      = get_pvar(SPVAR_25, -99, 99, 0);
    	toggle_akimborf[1]    = get_pvar(SPVAR_20, 0, 1, 0 );       antirecoil_end[1]        = get_pvar(SPVAR_26, -99, 99, 0); 
        toggle_holdbreath[1]  = get_pvar(SPVAR_21, 0, 1, 0 );       antirecoil_time[1]       = get_pvar(SPVAR_27, -99, 99, 0);                                                           
        toggle_quickscope[1]  = get_pvar(SPVAR_22, 0, 1, 0 );       horizontal_start[1]      = get_pvar(SPVAR_28, -99, 99, 0); 
                                                                    horizontal_end[1]        = get_pvar(SPVAR_29, -99, 99, 0);
                                                                    horizontal_time[1]       = get_pvar(SPVAR_30, -99, 99, 0);
                                                                    rate_of_fire[1]          = get_pvar(SPVAR_31,   0, 25,13);
                                                                    akimborf[1]              = get_pvar(SPVAR_32,   0, 25,13);  

       ApkExclusive5             = get_pvar(SPVAR_33, 0, 1, 0);
       ApkExclusive710           = get_pvar(SPVAR_34, 0, 1, 0);     Sampling_Time            = get_pvar(SPVAR_45,  1, 10, 10);         
       ApkExclusives__Sensitivity= get_pvar(SPVAR_35, 0, 1, 0);     Aim_Boost                = get_pvar(SPVAR_46,  1, 15, 10);       
       polar_aim              = get_pvar(SPVAR_36, 0, 1, 0);        Aim_Correction           = get_pvar(SPVAR_47,  1, 15, 5);
       sticky_aim             = get_pvar(SPVAR_37, 0, 1, 0);        Aim_Perfection_Limit     = get_pvar(SPVAR_48,  1, 60, 30);
       drop_shot              = get_pvar(SPVAR_38, 0, 1, 0);        ingamesens               = get_pvar(SPVAR_49,  1, 20, 0);
       Custom__Sensitivity    = get_pvar(SPVAR_39, 0, 1, 0);        RADIUS                   = get_pvar(SPVAR_50,  1, 99, 20);
       enemy_ping             = get_pvar(SPVAR_40, 0, 1, 0);        STEPS                    = get_pvar(SPVAR_51,  1, 99, 15);
       bunny_hop             = get_pvar(SPVAR_41, 0, 1, 0);        stickyaim_size           = get_pvar(SPVAR_52,  1, 50, 17);
       autorun_on             = get_pvar(SPVAR_42, 0, 1, 0);		stickyaim_time           = get_pvar(SPVAR_53,  1, 99, 25); 
       swap_on                = get_pvar(SPVAR_43, 0, 1, 0);		drop_speed               = get_pvar(SPVAR_54,  1, 250, 60); 	 
       inverted_on            = get_pvar(SPVAR_44, 0, 1, 0);	    GEN_SENS                 = get_pvar(SPVAR_55,  1, 327,100);
                                                                    ADS_SENS                 = get_pvar(SPVAR_56,  1, 327,100);
                                                                    FIRE_SENS                = get_pvar(SPVAR_57,  1, 327,100);
                                                                    ADS_FIRE_SENS            = get_pvar(SPVAR_58,  1, 327,100);
                                                                    GRENADE_SENS             = get_pvar(SPVAR_59,  1, 327,100);
       		                                                        quickscopedelay          = get_pvar(SPVAR_60,  50,600,350); 
       		                                                        Aim_Boost                = get_pvar(SPVAR_61,  1, 15, 10 );
       		                                                        Aim_Correction           = get_pvar(SPVAR_62,  1, 15, 5 );
       		                                                        Aim_Perfection_Limit     = get_pvar(SPVAR_63,  1, 60, 30); 
while(q < 30) {
	double__tap[q] = -1;       
	q++;
	}
}

main {
	if(get_console() == PIO_XB360 && get_controller() == PIO_PS4)	
		swap(PS4_TOUCH, PS4_SHARE);
     
	 if(display_title) {
        	cls_oled(1);	
        	count_black = 0;
     
        	if(KillSwitch) {
        		printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	
    			                                     
    		} else {
        	   printf(5, 5, 1, 0, TITLE[0]);
               printf(16, 27, 0, 0, CREDIT[0]);
               printf(27, 38, 0, 0, NAME[0]);
     
        	
        		if(profile_idx == 0)
        		   printf(16, 47, 1, 0, PROFILE_1[0]);
        		if(profile_idx == 1)
        		   printf(16, 47, 1, 0, PROFILE_2[0]);
     
     
        		display_black = TRUE;	
        		display_title = FALSE;
        	}
        }

        if(display_black && !ModMenu && !KillSwitch) {
        	count_black += get_rtime();
        	if(count_black >= 5000) {
        		cls_oled(0);
        		count_black = 0;
        		display_black = FALSE;
        	}
        }
     
    	if(get_val(L2)) {
    		if(event_release(PS4_SHARE)) {
    			KillSwitch = !KillSwitch;
     
    			if(KillSwitch)        
    				combo_run(RUMBLE_OFF);	
    			else
    				combo_run(RUMBLE_ON);	
     
        		
    			display_title = TRUE;
    		}
      
    		if(event_release(PS4_OPTIONS) && !KillSwitch) {
    			ModMenu = !ModMenu;

    			if(!ModMenu) {
    				Mod_Edit = FALSE; 	
    				
    				combo_run(RUMBLE_OFF);  
    				display_title = TRUE;   
    			}
     
    			if(ModMenu) {
    				MoDName_idx = 0;        
    				combo_run(RUMBLE_ON);	
    				display_new = TRUE;		
    			}
    		}
    		set_val(PS4_SHARE, 0);		    
    		set_val(PS4_OPTIONS, 0);		
    	}    
    
    if(!KillSwitch) {

    	if(ModMenu) {                	 
    		if(MoDName_idx <= LAST_EDITABLE_STRING)	{
    			if(event_press(PS4_CROSS) && !Mod_Edit) {
    				valName_idx = AMOUNT_OF_VALNAME_IDX + 1; 
    				Mod_Edit = TRUE;
    				combo_run(RUMBLE_ON);
    				display_new = TRUE;
    			}
     
    			if(event_press(PS4_CIRCLE) && Mod_Edit) {
    				Mod_Edit = FALSE;
    				combo_run(RUMBLE_OFF);
    				display_new = TRUE;
    			}
    		}

    		if(Mod_Edit) {
    			if(get_val(L2)) {
    				antirecoil_vertical[profile_idx]   = edit_val( 0  , antirecoil_vertical[profile_idx]  ,   0, 99  , 1  , 10); 
    				antirecoil_horizontal[profile_idx] = edit_val( 1  , antirecoil_horizontal[profile_idx], -99, 99  , 1  , 10); 
    				antirecoil_start[profile_idx]      = edit_val( 2  , antirecoil_start[profile_idx]     , -99, 99  , 1  , 10); 
                    antirecoil_end[profile_idx]        = edit_val( 3  , antirecoil_end[profile_idx]       , -99, 99  , 1  , 10); 
                    antirecoil_time[profile_idx]       = edit_val( 4  , antirecoil_time[profile_idx]      , -99, 99  , 1  , 10); 
                    horizontal_start[profile_idx]      = edit_val( 5  , horizontal_start[profile_idx]     , -99, 99  , 1  , 10); 
                    horizontal_end[profile_idx]        = edit_val( 6  , horizontal_end[profile_idx]       , -99, 99  , 1  , 10); 
                    horizontal_time[profile_idx]       = edit_val( 7  , horizontal_time[profile_idx]      , -99, 99  , 1  , 10); 
                    rate_of_fire[profile_idx]          = edit_val( 8  , rate_of_fire[profile_idx]         ,   0, 25  , 1  , 10); 
                    akimborf[profile_idx]              = edit_val( 9  , akimborf[profile_idx]             ,   0, 25  , 1  , 10); 
    			    Sampling_Time                      = edit_val( 10 , Sampling_Time         			  ,   0, 10  , 1  , 10); 
                    Aim_Boost                          = edit_val( 11 , Aim_Boost             			  ,   0, 10  , 1  , 10); 
                    Aim_Correction                     = edit_val( 12 , Aim_Correction        			  ,   0, 10  , 1  , 10); 
                    Aim_Perfection_Limit               = edit_val( 13 , Aim_Perfection_Limit  			  ,   0, 60  , 1  , 10); 
                    Aim_Boost                          = edit_val( 14 , Aim_Boost             			  ,   0, 10  , 1  , 10); 
                    Aim_Correction                     = edit_val( 15 , Aim_Correction        			  ,   0, 10  , 1  , 10); 
                    Aim_Perfection_Limit               = edit_val( 16 , Aim_Perfection_Limit  			  ,   0, 60  , 1  , 10); 
                    ingamesens                         = edit_val( 17 , ingamesens           			  ,   0, 20  , 1  , 10); 
                    RADIUS                             = edit_val( 18 , RADIUS                			  ,   0, 99  , 1  , 10); 
                    STEPS                              = edit_val( 19 , STEPS                 			  ,   0, 99  , 1  , 10); 
                    stickyaim_size                     = edit_val( 20 , stickyaim_size       			  ,   0, 50  , 1  , 10); 
                    stickyaim_time                     = edit_val( 21 , stickyaim_time       			  ,   0, 990 , 1  , 10); 
                    GEN_SENS                           = edit_val( 22 , GEN_SENS             			  ,   0, 327 , 1  , 10); 
                    ADS_SENS                           = edit_val( 23 , ADS_SENS             			  ,   0, 327 , 1  , 10); 
                    FIRE_SENS                          = edit_val( 24 , FIRE_SENS            			  ,   0, 327 , 1  , 10); 
                    ADS_FIRE_SENS                      = edit_val( 25 , ADS_FIRE_SENS        			  ,   0, 327 , 1  , 10); 
                    GRENADE_SENS                       = edit_val( 26 , GRENADE_SENS         			  ,   0, 327 , 1  , 10); 
                    drop_speed                         = edit_val( 27 , drop_speed           			  ,   0, 9990, 10 , 10);
                    quickscopedelay                    = edit_val( 28 , quickscopedelay      			  ,   0, 600 , 1  , 10); 
     
    			} else  {
    			
    				if(event_press(RIGHT)) {
    					valName_idx += 1;
    					display_new = TRUE; 
    				}
    				if(event_press(LEFT)) {
    					valName_idx -= 1;
    					display_new = TRUE;
    				}

    				if(MoDName_idx == 0)  vals_available(  0, 1   );	
    				if(MoDName_idx == 1)  vals_available(  2, 7   );       				
    				if(MoDName_idx == 2)  vals_available(  8, 8   );
    				if(MoDName_idx == 3)  vals_available(  9, 9   );			
    				if(MoDName_idx == 4)  vals_available( 10 , 13 );
    				if(MoDName_idx == 5)  vals_available( 14 , 16 );  
    				if(MoDName_idx == 6)  vals_available( 17 , 17 ); 
    				if(MoDName_idx == 7)  vals_available( 18 , 19 ); 
    				if(MoDName_idx == 8)  vals_available( 20 , 21 ); 
    				if(MoDName_idx == 9)  vals_available( 22 , 26 );  
    				if(MoDName_idx == 10) vals_available( 27 , 27 ); 
    				if(MoDName_idx == 11) vals_available( 28 , 28 ); 
    			} 
    		}  else  {
    		
    			if(event_press(RIGHT)) {
    				MoDName_idx += 1;
    				display_new = TRUE;
    			}
    			if(event_press(LEFT)) {
    				MoDName_idx -= 1;
    				display_new = TRUE;
    			}
     
    			if(MoDName_idx > LAST_MODNAME_STRING) 
    				MoDName_idx = 0;
    			if(MoDName_idx < 0)
    				MoDName_idx = LAST_MODNAME_STRING;
     
    			if(event_press(TRIANGLE)) {
    				profile_idx += 1;
    				display_new = TRUE;
    			}
    			
    			if(profile_idx > (AMOUNT_OF_PROFILES - 1))
				profile_idx = 0;
    			toggle_antirecoil[profile_idx]   = toggle(  0, toggle_antirecoil[profile_idx]   );
    			toggle_APKCHEATS_AR[profile_idx] = toggle(  1, toggle_APKCHEATS_AR[profile_idx] ); 
    			toggle_rapidfire[profile_idx]    = toggle(  2, toggle_rapidfire[profile_idx]    );
    			toggle_akimborf[profile_idx]     = toggle(  3, toggle_akimborf[profile_idx]     ); 
    			ApkExclusive5                    = toggle(  4, ApkExclusive5                    );
    			ApkExclusive710                  = toggle(  5, ApkExclusive710                  ); 
                ApkExclusives__Sensitivity       = toggle(  6, ApkExclusives__Sensitivity       );
                polar_aim                      	 = toggle(  7, polar_aim                        );
                sticky_aim                     	 = toggle(  8, sticky_aim                       );
                Custom__Sensitivity              = toggle(  9, Custom__Sensitivity              );
                drop_shot                      	 = toggle( 10, drop_shot                        );
                toggle_quickscope[profile_idx] 	 = toggle( 11, toggle_quickscope[profile_idx]   );
                toggle_holdbreath[profile_idx] 	 = toggle( 12, toggle_holdbreath[profile_idx]   );
                bunny_hop                     	 = toggle( 13, bunny_hop                       );
                enemy_ping                     	 = toggle( 14, enemy_ping                       ); 
    			autorun_on  					 = toggle( 15 , autorun_on  				    );
    			swap_on     					 = toggle( 16 , swap_on    					    );
    			inverted_on 					 = toggle( 17 , inverted_on 				    );
    		} 
    	
    		if(event_press(PS4_PS))
    		save ();
    		block_all_inputs();
    	} 
    							 
    	if(!ModMenu) {
     
		if(swap_on) {
			swap(R1, R2);
			swap(L1, L2);
		}

   	 	deadzone(L2, R2, 100, 100);
     
         if (ApkExclusive5) {
              if (Joystick_calibration == FALSE) {
                    RX_Axis_Joystick_calibrate = get_val(RX); 
                    RY_Axis_Joystick_calibrate = get_val(RY); 
                    Joystick_calibration = TRUE;     
                }
            X_Last_Value = X_Current_Value;
            Y_Last_Value = Y_Current_Value;
            X_Current_Value = get_lval(RX)- RX_Axis_Joystick_calibrate;
            Y_Current_Value = get_lval(RY)- RY_Axis_Joystick_calibrate;
                
            if(get_val(L2)) {
                    if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit)  {
                            if(abs(X_Last_Value - X_Current_Value) < 15) {
                                    combo_stop(Aim_Assist_Perfection);
                                    Sampling_Done = FALSE;
                                    if(get_val(R2))  {
                                            combo_stop(Fine_Tune_Aim);
                                            fine_pulse = 0;
                                            combo_run(spiroide_Aim_Assit);
                                        } 
										else 
										{
                                            combo_stop(spiroide_Aim_Assit);
                                            spiroide_pulse = 0;
                                            combo_run(Fine_Tune_Aim);
						}    
					}
				} else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit)  {
                            combo_stop(Fine_Tune_Aim);
                            combo_stop(spiroide_Aim_Assit);
                            spiroide_pulse = 0;
                            fine_pulse = 0;
                            combo_run(Aim_Assist_Perfection);
                        }
				} 
				else 
				{
                    combo_stop(Fine_Tune_Aim);
                    combo_stop(spiroide_Aim_Assit);
                    combo_stop(Aim_Assist_Perfection);
                    spiroide_pulse = 0;
                    fine_pulse = 0;
                    Sampling_Done = FALSE;    
                }
     }
      
		if(ApkExclusive710) {
        if(get_val(L2))  {
                if (Current_State == Get_Last_Value) {
                    X_Last_Value = get_lval(RX);
                    Y_Last_Value = get_lval(RY);
     
                    Current_State = Get_Current_Value;
     
                }
                else if (Current_State == Get_Current_Value) {
                    X_Current_Value = get_val(RX);
                    Y_Current_Value = get_val(RY);
     
                    if(Aim_Abuse_State == Aim_Correction)
                    {    
                        Current_State = Aim_Boost;
                    } else {
                        Current_State = Aim_Correction;
                    }    
                }
                if (Current_State == Aim_Boost) {
                    
                    Aim_Perfection1(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
                    Aim_Perfection1(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
     
                    Current_State = Get_Last_Value;
                    Aim_Abuse_State = Aim_Boost;  
                }
                else if (Current_State == Aim_Correction) {
                    
                    Aim_Perfection1(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
                    Aim_Perfection1(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
     
                    Current_State = Get_Last_Value;
                    Aim_Abuse_State = Aim_Correction; 
                } 
            } 
			else 
			{
                Current_State = Get_Last_Value;
                Aim_Abuse_State = Aim_Correction; 
            }  
    }
     
		if(ApkExclusives__Sensitivity) {
          ads_grenade_sens = 100 - (ingamesens); ads_fire_sens = 96 - (ingamesens); 
          if (get_val (L2)) {
			if(get_val(R2) && get_val(L2)) { 
			Sens = ads_fire_sens;
			}
			if(!get_val(R2) && !get_val(L2) || get_val (R2) &&!get_val(L2)) {
			Sens = 100;
			}   
			if(!get_val(R2) && get_val(L2)) {
			Sens = ads_grenade_sens;
			}
            if(Sens > 100) Sens = 100;  
            sensitivity(RX, NOT_USE, Sens);
            sensitivity(RY, NOT_USE, Sens);
			}
        }  
     
        if(polar_aim){
        if(get_ival(L2)) {
            if(isqrt(abs(get_val(RX)) * abs(get_val(RX)) + abs(get_val(RY)) * abs(get_val(RY))) <= RADIUS) {
                  angle = MoD(angle, STEPS, 360);
                  set_polar(POLAR_RS, angle, RADIUS * random(326, 328)); 
				 }
		   }
      }
      	
        if(sticky_aim) {
        if(get_val(L2)  && !get_val(R2)) 
        combo_run(STICKY_AIM);
        else 
        combo_stop(STICKY_AIM); 
            } 
      	
      if(toggle_holdbreath[profile_idx] == 1) {

      if(get_val(L2)) set_val(L3, 100);
      }

      if(toggle_holdbreath[profile_idx] == 1) {
      if(get_val(LY) <-90 && get_val(L2) && get_ptime(L2) > 200) combo_stop(CH);
      }

      if(toggle_holdbreath[profile_idx] == 1) {
      if(event_press(L2)) combo_run(CH);
      }

      if(toggle_holdbreath[profile_idx] == 1) {
      if(get_val(L2) && get_lval(L3)) set_val(L3, 0); 
      }
     
            if(drop_shot) {
            if(get_val(R2)) combo_run(DS);
             }
     
            if(enemy_ping) {
	    		if(get_val(L2)&& double_click(UP)||event_press(R2))
	    	    	combo_run(auto_ping);
	    		if(!get_val(L2))
	    			combo_stop(auto_ping);
    		}
     
		if(bunny_hop) {
			if (get_ival(CROSS) && get_ptime(CROSS) > 200) {
				combo_run(bunny_hopping);
		} else {
			if(combo_running(bunny_hopping))
				combo_stop(bunny_hopping); 
				}
			}
     
    	if(toggle_quickscope[profile_idx] == 1) {
    	if(event_release(L2) && get_ptime(L2) < 140)
        combo_run(Quick_Scope);
    	}	
     
        if(Custom__Sensitivity)
        if(!get_val(L2) && !get_val(R2)) { 
        USE_SENS = GEN_SENS;
		}
        else if(get_val(L2) && !get_val(R2)) { 
        USE_SENS = ADS_SENS;
		}    
        else if(!get_val(L2) && get_val(R2)) { 
        USE_SENS = FIRE_SENS;
		}
        else if(get_val(L2) && get_val(R2)) { 
        USE_SENS = ADS_FIRE_SENS;
		}
        else if(get_val(R1)) { 
        USE_SENS = GRENADE_SENS; 
		}
        sensitivity(RY, NOT_USE, USE_SENS);
        sensitivity(RX, NOT_USE, USE_SENS);		
     
    		if(autorun_on)  {
        		if(get_val(LY) < -85) {
        	    	set_val(LY, -100);
        	    	set_val(L3, 100);
        		}
    		}
    	
    		if(inverted_on) 
    			invert = -1;
    		else
    			invert = 1;
     
			if(profile_button) {
				if(event_press(profile_switch_button1)) {
        	    	profile_1or2 = !profile_1or2;
     
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	}
     
    	 	if(profile_switch_button23) {
           		if(get_lval(profile_switch_button2) && (event_press(profile_switch_button3))) {
        	    	profile_1or2=!profile_1or2;
        	    
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	}
    		if(get_val(L3))
    			set_val(TRIANGLE, 0);
             
        	if(profile_1or2)
        		profile_idx = 1;
        
        	else	
        		profile_idx = 0;
    	} 
     
		if(USE_SLIDE_CANCEL) {
			if((get_val(LY) < -80) || (get_val(LY) > 80) || (get_val(LX) < -80) || (get_val(LX) > 80))
			{
				if(event_release(slide_dropshot_button))
				{
					combo_run(COMBO_SLIDE_CANCEL);
				} 
			}
		}
     
    
    	if(toggle_antirecoil[profile_idx] == 1) {
    		if(get_val(R2))
    			combo_run(ANTI_RECOIL);
    		  else
    			combo_stop(ANTI_RECOIL);
    	}
  
		if(toggle_APKCHEATS_AR[profile_idx] == 1) {
    	
        	if((VALUES[profile_idx][2] + antirecoil_start[profile_idx]) < (VALUES[profile_idx][3] + antirecoil_end[profile_idx]))
        	    i_val = 1; 
        	else
        	    i_val = -1;
     
        	i_pnt = ((VALUES[profile_idx][4] + antirecoil_time[profile_idx]) * 10) / (abs((VALUES[profile_idx][2] + antirecoil_start[profile_idx]) - (VALUES[profile_idx][3] + antirecoil_end[profile_idx]))); 
     
        	if((VALUES[profile_idx][5] + horizontal_start[profile_idx]) < (VALUES[profile_idx][6] + horizontal_end[profile_idx]))
        	    i_val_h = 1; 
        	else
        	    i_val_h = -1;
     
        	i_pnt_h = ((VALUES[profile_idx][7] + horizontal_time[profile_idx]) * 10) / (abs((VALUES[profile_idx][5] + horizontal_start[profile_idx]) - (VALUES[profile_idx][6] + horizontal_end[profile_idx]))); 
     
        	if(!get_val(R2)) {
       			
       			ar_y = VALUES[profile_idx][2] + antirecoil_start[profile_idx];
       			i_cnt = 0;
       			i_num = 0;
       			
       			ar_x = VALUES[profile_idx][5] + horizontal_start[profile_idx];
       			i_cnt_h = 0;
       			i_num_h = 0;
       		}   
     
        	   if(get_val(R2)) {
       		    
       		    if(!p_complete())  
       		        ar_y = p_val();
       		    else
       		        ar_y = VALUES[profile_idx][3] + antirecoil_end[profile_idx];
     
    			if(y_val() < 100)
        	   		set_val(RY,y_val()); 
     
       		    if(!p_complete_x())  
       		        ar_x = p_val_x();
       		    else
       		        ar_x = VALUES[profile_idx][6] + horizontal_end[profile_idx];
     
    			if(x_val() < 100)
        	   		set_val(RX,x_val()); 
       		}		
     
    }
		if(toggle_rapidfire[profile_idx] == 1) {
        	hold_time = 500 / (VALUES[profile_idx][8] + rate_of_fire[profile_idx]); 
       		rest_time = hold_time - 20;
        	if(rest_time < 0) rest_time = 0;
        	if(get_val(R2))
        		combo_run(RAPID_FIRE);
        	else
        		combo_stop(RAPID_FIRE);
        	led_on = 150;
        	led_off = 300;
        	combo_run(Blink);
    	}

		if(toggle_akimborf[profile_idx] == 1) { 	
        if(get_val(R2))
        combo_run(ARF);
        else 
        combo_stop(ARF);
		led_on = 150;
        led_off = 300;
        combo_run(Blink);   
     
       }

    	if(display_new)  {
    		cls_oled(0);
        	count_black = 0;
     
    		if(Mod_Edit) {
    			display_edit( 0  , center_x(sizeof(ANTI_RECOIL_VERTICAL)   	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL_VERTICAL[0]   , antirecoil_vertical[profile_idx]   );
    			display_edit( 1  , center_x(sizeof(ANTI_RECOIL_HORIZONTAL) 	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] );
    			display_edit( 2  , center_x(sizeof(ANTI_RECOIL_START)     	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL_START[0]  	  , antirecoil_start[profile_idx] 	   );
                display_edit( 3  , center_x(sizeof(ANTI_RECOIL_END)    	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL_END[0]    	  , antirecoil_end[profile_idx] 	   );
                display_edit( 4  , center_x(sizeof(ANTI_RECOIL_TIME)   	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL_TIME[0]   	  , antirecoil_time[profile_idx] 	   );
                display_edit( 5  , center_x(sizeof(HORIZONTAL_RECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_RECOIL_START[0], horizontal_start[profile_idx]  	   );
                display_edit( 6  , center_x(sizeof(HORIZONTAL_RECOIL_END)   - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_RECOIL_END[0]  , horizontal_end[profile_idx] 	   );
                display_edit( 7  , center_x(sizeof(HORIZONTAL_RECOIL_TIME)  - 1, OLED_FONT_MEDIUM_WIDTH)  , HORIZONTAL_RECOIL_TIME[0] , horizontal_time[profile_idx] 	   );
                display_edit( 8  , center_x(sizeof(RATE_OF_FIRE)      	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , RATE_OF_FIRE[0]      	  , rate_of_fire[profile_idx] 		   );
                display_edit( 9  , center_x(sizeof(AKIMBO_FIRE)       	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , AKIMBO_FIRE[0]       	  , akimborf[profile_idx] 	   		   );
                display_edit( 10 , center_x(sizeof(SAMPLING_TIME)     	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , SAMPLING_TIME[0]      	  , Sampling_Time                      );
                display_edit( 11 , center_x(sizeof(AIM_BOOST)         	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_BOOST[0]          	  , Aim_Boost                          );
                display_edit( 12 , center_x(sizeof(AIM_CORRECTION)       	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_CORRECTION[0]         , Aim_Correction                	   );
                display_edit( 13 , center_x(sizeof(AIM_PERFECTION)       	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_PERFECTION[0]         , Aim_Perfection_Limit          	   );
                display_edit( 14 , center_x(sizeof(AIM_BOOST1)        	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_BOOST1[0]         	  , Aim_Boost                     	   );
                display_edit( 15 , center_x(sizeof(AIM_CORRECTION1)      	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_CORRECTION1[0]        , Aim_Correction                	   );
                display_edit( 16 , center_x(sizeof(AIM_PERFECTION1)        	- 1, OLED_FONT_MEDIUM_WIDTH)  , AIM_PERFECTION1[0]        , Aim_Perfection_Limit          	   );
                display_edit( 17 , center_x(sizeof(IN_GAME_SENS)        	- 1, OLED_FONT_MEDIUM_WIDTH)  , IN_GAME_SENS[0]        	  , ingamesens                         );
                display_edit( 18 , center_x(sizeof(POLAR_RADIUS)      	 	- 1,OLED_FONT_MEDIUM_WIDTH)   , POLAR_RADIUS[0]      	  , RADIUS                        	   );
                display_edit( 19 , center_x(sizeof(POLAR_STEPS)       	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , POLAR_STEPS[0]       	  , STEPS                         	   );
                display_edit( 20 , center_x(sizeof(STICKY_AIM_SIZE)    	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , STICKY_AIM_SIZE[0]   	  , stickyaim_size                	   );
                display_edit( 21 , center_x(sizeof(STICKY_AIM_TIME)    	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , STICKY_AIM_TIME[0]   	  , stickyaim_time                	   );
                display_edit( 22 , center_x(sizeof(GEN__SENS)           	- 1, OLED_FONT_MEDIUM_WIDTH)  , GEN__SENS[0]          	  , GEN_SENS                      	   ); 
                display_edit( 23 , center_x(sizeof(ADS__SENS)           	- 1, OLED_FONT_MEDIUM_WIDTH)  , ADS__SENS[0]          	  , ADS_SENS                      	   ); 
                display_edit( 24 , center_x(sizeof(FIRE__SENS)          	- 1, OLED_FONT_MEDIUM_WIDTH)  , FIRE__SENS[0]         	  , FIRE_SENS                     	   ); 
                display_edit( 25 , center_x(sizeof(ADS__FIRE__SENS)       	- 1, OLED_FONT_MEDIUM_WIDTH)  , ADS__FIRE__SENS[0]        , ADS_FIRE_SENS                 	   ); 
                display_edit( 26 , center_x(sizeof(GRENADE__SENS)       	- 1, OLED_FONT_MEDIUM_WIDTH)  , GRENADE__SENS[0]      	  , GRENADE_SENS                  	   );
                display_edit( 27 , center_x(sizeof(DROP_SHOT_SPEED)     	- 1, OLED_FONT_MEDIUM_WIDTH)  , DROP_SHOT_SPEED[0]     	  , drop_speed                    	   );
                display_edit( 28 , center_x(sizeof(QUICK_SCOPE_SPEED) 	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , QUICK_SCOPE_SPEED[0]   	  , quickscopedelay               	   );
    		} else {
    			display_MoD( 0   ,  center_x(sizeof(ANTI_RECOIL)       	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , ANTI_RECOIL[0]      	  , toggle_antirecoil[profile_idx]	   );
    			display_MoD( 1   ,  center_x(sizeof(APKCHEATS_AR)  	 		- 1, OLED_FONT_MEDIUM_WIDTH)  , APKCHEATS_AR[0] 		  , toggle_APKCHEATS_AR[profile_idx]   );
                display_MoD( 2   ,  center_x(sizeof(RAPID_FIRE)   	    	- 1, OLED_FONT_MEDIUM_WIDTH)  , RAPID_FIRE[0]       	  , toggle_rapidfire[profile_idx]      );
                display_MoD( 3   ,  center_x(sizeof(AKIMBOO_FIRE)  	    	- 1, OLED_FONT_MEDIUM_WIDTH)  , AKIMBOO_FIRE[0]      	  , toggle_akimborf[profile_idx]	   );
                display_MoD( 4   ,  center_x(sizeof(APKCHEATSV1)           	- 1, OLED_FONT_MEDIUM_WIDTH)  , APKCHEATSV1[0]            , ApkExclusive5 					   );
                display_MoD( 5   ,  center_x(sizeof(APKCHEATSV2)        	- 1, OLED_FONT_MEDIUM_WIDTH)  , APKCHEATSV2[0]       	  , ApkExclusive710 				   );
                display_MoD( 6   ,  center_x(sizeof(EXCLUSIVE_SENS)        	- 1, OLED_FONT_MEDIUM_WIDTH)  , EXCLUSIVE_SENS[0]         , ApkExclusives__Sensitivity         );
                display_MoD( 7   ,  center_x(sizeof(POLAR_AIM)        	  	- 1, OLED_FONT_MEDIUM_WIDTH)  , POLAR_AIM[0]        	  , polar_aim  					       );
                display_MoD( 8   ,  center_x(sizeof(STICKY_AIM)        	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , STICKY_AIM[0]       	  , sticky_aim  					   );
                display_MoD( 9   ,  center_x(sizeof(SENS_BOOSTER)        	- 1, OLED_FONT_MEDIUM_WIDTH)  , SENS_BOOSTER[0]       	  , Custom__Sensitivity  			   );
                display_MoD( 10  , center_x(sizeof(DROP_SHOT)         	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , DROP_SHOT[0]        	  , drop_shot 		 				   );
                display_MoD( 11  , center_x(sizeof(QUICK_SCOPE)        	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , QUICK_SCOPE[0]      	  , toggle_quickscope[profile_idx]     );
                display_MoD( 12  , center_x(sizeof(HOLD_BREATH)      	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , HOLD_BREATH[0]     		  , toggle_holdbreath[profile_idx]     );
                display_MoD( 13  , center_x(sizeof(BUN_HOP)       	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , BUN_HOP[0]      		  , bunny_hop 					       );
                display_MoD( 14  , center_x(sizeof(AUTO_PING)        	 	- 1, OLED_FONT_MEDIUM_WIDTH)  , AUTO_PING[0]       		  , enemy_ping 				 	       ); 
    			display_MoD( 15  ,  center_x(sizeof(AUTO_RUN) 			 	- 1, OLED_FONT_MEDIUM_WIDTH)  , AUTO_RUN[0] 			  , autorun_on 					       );
    			display_MoD( 16  ,  center_x(sizeof(SWAP) 			     	- 1, OLED_FONT_MEDIUM_WIDTH)  , SWAP[0]    				  , swap_on 						   );
    			display_MoD( 17  ,  center_x(sizeof(INVERTED) 			 	- 1, OLED_FONT_MEDIUM_WIDTH)  , INVERTED[0]				  , inverted_on 					   );
    		}
     
    		if(MoDName_idx < AMOUNT_OF_MULTI_TOGGLE)  {
    			if(profile_idx == 0) 
        			
        			line_oled(0, 26, 39, 26, 5, 1); 
        		else if(profile_idx == 1)
        			
        			line_oled(44, 26, 83, 26, 5, 1); 
     
    		} else {
        		line_oled(0, 26, 39, 26, 5, 1);
        		line_oled(44, 26, 83, 26, 5, 1);
        		line_oled(88, 26, 127, 26, 5, 1);
        	}
    		display_black = TRUE;
            display_new = FALSE;
		} 
	}     
    	led(profile_idx);
} 

combo Aim_Assist_Perfection {
	X_Last_Value = X_Current_Value
	Y_Last_Value = Y_Current_Value
	wait(Sampling_Time);
	X_Current_Value = get_lval(RX)- RX_Axis_Joystick_calibrate;
	Y_Current_Value = get_lval(RY)- RY_Axis_Joystick_calibrate; 
	if (Sampling_Done == TRUE ) {
	Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
	Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); }
	X_Last_Value = X_Current_Value;
	Y_Last_Value = Y_Current_Value;
	wait(Sampling_Time);
	X_Current_Value = get_lval(RX)- RX_Axis_Joystick_calibrate;
	Y_Current_Value = get_lval(RY)- RX_Axis_Joystick_calibrate; 
	if (Sampling_Done == TRUE ) {
	Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
	Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); }
	Sampling_Done = TRUE; 
	wait(Sampling_Time);
}
combo Fine_Tune_Aim {
    set_val(RX,(15 - fine_pulse));
    set_val(LX,(-15 + fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(15 - fine_pulse));
    set_val(RY,(10 - fine_pulse));
    set_val(LX,(-5 + fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RY,(10 - fine_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-15 + fine_pulse));
    set_val(RY,(10 - fine_pulse));
    set_val(LX,(5 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time)
    wait(Sampling_Time)
    set_val(RX,(-15 + fine_pulse));
    set_val(LX,(15 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-15 + fine_pulse)); 
    set_val(RY,(-10 + fine_pulse));
    set_val(LX,(5 - fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RY,(-10 + fine_pulse)); 
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(15 - fine_pulse));
    set_val(RY,(-10 + fine_pulse));
    set_val(LX,(-5 + fine_pulse))
    wait(Sampling_Time);
    wait(Sampling_Time); 

    fine_pulse = fine_pulse + 2;

	if (fine_pulse > 10) {
		fine_pulse = 0;   
	}
}
combo spiroide_Aim_Assit {
    set_val(RX,(4 + spiroide_pulse));
    set_val(LX,(-15+ spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    set_val(RX,(-4 - spiroide_pulse));
    set_val(LX,15 - spiroide_pulse );
    wait(Sampling_Time);
    wait(Sampling_Time)
    set_val(RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);

    spiroide_pulse = spiroide_pulse + 2;

	if (spiroide_pulse > 10) {
		spiroide_pulse = 0;   
	}
}
combo CH {
	set_val(L3, 0);
	wait(60);
	set_val(L3, 100);
	wait(110);
	set_val(L3, 0);
	wait(110);
}
combo auto_ping {
	set_val(UP, 100);
	wait(20)
	set_val(UP, 0);
	wait(20)
	set_val(UP, 100);
	wait(20)
	set_val(UP, 0);
}
combo bunny_hopping {
    set_val(CROSS, 100);
    wait(54);
    set_val(CROSS, 0);
    wait(54);
    set_val(CROSS, 100);
    wait(54);
    set_val(CROSS, 0);
    wait(54);
}
combo DS {
    set_val(slide_dropshot_button, 100);
    wait(40);
    set_val(slide_dropshot_button, 0);
    wait(drop_speed);
}
combo STICKY_AIM {
    set_val(RY, xy_val (RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(RX, xy_val (RX, stickyaim_size));
    set_val(LX, xy_val (LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(RY, xy_val (RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(RX, xy_val (RX, stickyaim_size * -1));
    set_val(LX, xy_val (LX, stickyaim_size * -1));
    wait(stickyaim_time);
}
combo ARF {
    set_val(R2, 100);
    set_val(L2, 100);
    wait(40);
    set_val(R2, 0);
    set_val(L2, 0);
    wait(akimborf);
} 
combo Quick_Scope {
	set_val(L2, 100);
	wait(quickscopedelay); 
	set_val(L2, 100);
	set_val(R2, 100);
	wait(40);
	set_val(L2, 100);
	wait(40); 
}
combo RUMBLE_ON {						
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
} 
 
combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}
combo SAVE { 
	cls_oled(0);						
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	wait(10)
	call(RUMBLE_ON);												
	wait(150);
	call(RUMBLE_ON);					
	wait(1000);
	display_new = TRUE;				   
}
combo ANTI_RECOIL {
    AntirecoilVertical = get_val(RY) + (VALUES[profile_idx][0] + antirecoil_vertical[profile_idx]);  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(RY)) < abs(VALUES[profile_idx][0] + antirecoil_vertical[profile_idx]) + 5)
    set_val(RY, (AntirecoilVertical * invert));
    ApkCheatsHorizontal = get_val(RX) + (VALUES[profile_idx][1] + antirecoil_horizontal[profile_idx]);
    if(ApkCheatsHorizontal > 100) ApkCheatsHorizontal = 100;
    if(abs(get_val(RX)) < abs(VALUES[profile_idx][1] + antirecoil_horizontal[profile_idx]) + 5)
    set_val(RX, ApkCheatsHorizontal);
}
combo RAPID_FIRE { 
    wait(hold_time);
    set_val(R2, 0);
    wait(rest_time);
}
combo Blink {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}
combo COMBO_SLIDE_CANCEL {
	set_val(slide_dropshot_button, 100);
	wait(slide_CANCEL_delay);
	set_val(slide_dropshot_button, 0);
	wait(60);
	set_val(slide_dropshot_button, 100);
	wait(50);
	set_val(slide_dropshot_button, 100);
	set_val(PS4_CROSS, 100);
	wait(60);
	set_val(slide_dropshot_button, 0);
	set_val(PS4_CROSS, 100);
	wait(10);
	set_val(PS4_CROSS, 0);
}
function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) { 
           if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit) {
                    if(Last_Value < Current_Value) {           
                            if (Boost) { 
                                    if (X_AXIS)
                                        set_val(RX, (Current_Value + Aim_Boost)); 
     
                                    if (Y_AXIS)
                                            set_val(RY, (Current_Value + Aim_Boost));
                                }
                            else if(Correction) {
                                    if (X_AXIS)
                                        set_val(RX, (Current_Value - Aim_Correction)); 
     
                                    if (Y_AXIS)
                                    set_val(RY, (Current_Value - Aim_Correction));            
                                }
                        } 
						else 
						{
                            if (Boost) { 
                                    if (X_AXIS)
                                        set_val(RX, (Current_Value - Aim_Boost)); 
     
                                    if (Y_AXIS)
                                            set_val(RY, (Current_Value - Aim_Boost));
                                }
                            else if(Correction) {
                                    if (X_AXIS)
                                        set_val(RX, (Current_Value + Aim_Correction)); 
     
                                    if (Y_AXIS)
                                    set_val(RY, (Current_Value + Aim_Correction));            
			}
		}
	}
} 
function Aim_Perfection1(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) { 
           mvt = abs(Last_Value) + abs(Current_Value);
           Aim_Boost_Val = ( mvt + 1 ) / 2; 
           Aim_Correction_Val = Aim_Boost_Val + 4;
     
           if(Aim_Boost_Val >= 10) {
               Aim_Boost_Val = 10;
               Aim_Correction_Val = 14;
           }
           else if(Aim_Boost_Val == 0) {
                Aim_Boost_Val = 2
                Aim_Correction_Val = 4;
           }
           if(mvt < Aim_Perfection_Limit) {
                
                if(Last_Value < Current_Value) {           
                    if (Boost) { 
                        if (X_AXIS)
                            set_val(RX, (Current_Value + Aim_Boost_Val)); 
     
                        if (Y_AXIS)
                            set_val(RY, (Current_Value + Aim_Boost_Val));
                    }
                    else if(Correction) {
                        if (X_AXIS)
                            set_val(RX, (Current_Value - Aim_Correction_Val)); 
     
                        if (Y_AXIS)
                            set_val(RY, (Current_Value - Aim_Correction_Val));            
                    }
                } 
				else 
				{
                    if (Boost) { 
                        if (X_AXIS)
                            set_val(RX, (Current_Value - Aim_Boost_Val)); 
     
                        if (Y_AXIS)
                            set_val(RY, (Current_Value - Aim_Boost_Val));
                    }
                    else if(Correction) {
                        if (X_AXIS)
                            set_val(RX, (Current_Value + Aim_Correction_Val)); 
     
                        if (Y_AXIS)
                            set_val(RY, (Current_Value + Aim_Correction_Val));            
                    }
                }
            }
        } 
function MoD(VaR, VaR1, VaR2){
	VaR += VaR1;
		VaR %= VaR2;
			return VaR;
} 
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function xy_val(f_axis, f_val) {
	if(abs(get_val(f_axis)) < stickyaim_size + 1) 
		return f_val;
			return get_val(f_axis); 
}
function p_complete() {
    i_cnt++;
    if(i_cnt > (VALUES[profile_idx][4] + antirecoil_time[profile_idx]) * 10) 
    {
        i_cnt = (VALUES[profile_idx][4] + antirecoil_time[profile_idx]) * 10;
        return 1;
    }    
    return 0;
}   
function p_val() { 
    i_num++;
    if(i_num == i_pnt) {
 
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  
function y_val() { 
    v = get_val(10);
 
    if(abs(v) < 10)
        v = 0;
 
    if(abs(v) > ar_y + 5)
        return v;
 
    return v + (ar_y * invert);           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > (VALUES[profile_idx][7] + horizontal_time[profile_idx]) * 10) {                                                               
    	
        i_cnt_h = (VALUES[profile_idx][7] + horizontal_time[profile_idx]) * 10;                                                                                         
        
        return 1;
       }
       return 0;
}     
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) {
        
    	i_num_h = 0;
    	 
    	ar_x += i_val_h;
    }
    return ar_x;
} 
function x_val() {
	v_x = get_val(RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}   
function vals_available(f_min, f_max) { 
	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;
 
	val_col_idx = valName_idx;	
}
function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {    
    	if(valName_idx == f_idx)
    	{
        	// print the range values                                          
		    // on the left: min value                                          
		    print_number(f_min ,find_digits(f_min) ,2 , 35 , OLED_FONT_SMALL); 
		    // on the right: max value                                         
		    print_number(f_max ,find_digits(f_max) ,97 , 35 , OLED_FONT_SMALL);
		    
		    set_val(TRACE_1,f_min);
		    
        	f_val    = Value_Change( f_val ,LEFT , inv(f_inc1), f_min, f_max ); 
        	f_val    = Value_Change( f_val ,RIGHT, f_inc1     , f_min, f_max ); 
       	 
       	   	f_val    = Value_Change( f_val ,DOWN , inv(f_inc2), f_min, f_max ); 
           	f_val    = Value_Change( f_val ,UP   , f_inc2     , f_min, f_max );     		
    	}
    	
    	if(rate_of_fire[profile_idx] < 0)
    		rate_of_fire[profile_idx] = 0;

    	return f_val;
}
int N_String_;                  
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) {                                                     
    N_String_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(N_String_,45);    //--add leading "-" 
         N_String_ += 1;                                 
         f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(f_digits >= c)                             
        {                                              
            putc_oled(N_String_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            N_String_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,N_String_ - 1,OLED_WHITE); // adjustable value centered in X
}                             
function toggle(f_idx, f_val) {     
    	if(event_press(UP)) {
    		if(MoDName_idx == f_idx)
    		{
    			if(f_idx == 1)  
    				toggle_rapidfire[profile_idx] = 0; 
    
    			f_val = 1;
    			combo_run(RUMBLE_ON);
    		}
     
    		display_new = TRUE;
    	}
     
    	if(event_press(DOWN))
    	{
    		if(MoDName_idx == f_idx)
    		{
    			f_val = 0;
    			combo_run(RUMBLE_OFF);
    		}		
    		display_new = TRUE;
    	}
    	return f_val;
}
function display_edit(f_idx, f_string, f_print, f_val) { 
        	if(valName_idx == f_idx) {
    			//--- print rectangle 
        		rect_oled(0, 0,OLED_WIDTH,OLED_HEIGHT,FALSE,1); 
        		//--- print line divider
    			line_oled(0,24,127,24,1,1);
    			line_oled(0,32,127,32,1,1);
    			
        		printf(f_string, 3,OLED_FONT_MEDIUM, OLED_WHITE, f_print);
     
        	
        		if(f_idx == 4 || f_idx == 7) 
        			number_to_string((VALUES[profile_idx][val_col_idx] + f_val) * 100, find_digits((VALUES[profile_idx][val_col_idx] + f_val) * 100));
     
        	
        		else if(f_idx <= LAST_EDITABLE_COLUMN) 
        			number_to_string(VALUES[profile_idx][val_col_idx] + f_val, find_digits(VALUES[profile_idx][val_col_idx] + f_val));
     
        	
        		else 
        			number_to_string(f_val, find_digits(f_val));
        	}
}
function display_MoD(f_idx, f_string, f_print, f_toggle) { 
        	if(MoDName_idx == f_idx) {
        		//--- print rectangle 
        		rect_oled(0, 0,OLED_WIDTH,OLED_HEIGHT,FALSE,1);
        		
        		line_oled(1,1,127,1,1,1);
        		line_oled(0,23,127,23,1,1);
        		//--- print line divider
    			line_oled(0,24,127,24,1,1);
    			line_oled(0,32,127,32,1,1);
    			rect_oled(34,32,64,40,1,1); 
    			 
    			
    			// 3 Draw arrows
				putc_oled(1,133); // Left 
				puts_oled(2,45,OLED_FONT_SMALL,1,OLED_WHITE);   // left mid	
				putc_oled(1,134); // Right 
				puts_oled(119,45,OLED_FONT_SMALL,1,OLED_WHITE); // right mid
    			
        		printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
     
        	
        		if(f_toggle == 1)
        			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),36,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
        		else
        			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),36,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
	}
}
function Value_Change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 
        if(press_hold(f_btn)) {
            f_val += f_inc;
    		if(valName_idx > LAST_EDITABLE_COLUMN)
    		{
            	if(f_val < f_rng_min) 
            		f_val = f_rng_min; 
       		 
           		if(f_val > f_rng_max) 
            		f_val = f_rng_max;
    		}
    		else
    		{
          
            if((f_val + VALUES[profile_idx][val_col_idx]) < f_rng_min) 
            	f_val = f_rng_min + VALUES[profile_idx][val_col_idx]; 
        
            if((f_val + VALUES[profile_idx][val_col_idx]) > f_rng_max) 
            	f_val = f_rng_max - VALUES[profile_idx][val_col_idx]; 
            }
            display_new = TRUE;
        }
        return f_val; 
    } 
function number_to_string(f_val,f_digits) {
        i = 1;  c_val = 10000;
     
    	if(f_val < 0) //
    	{          
             putc_oled(i,45);    
             i += 1;
             f_val = abs(f_val);
    	} 
     
    	for(c = 5; c >= 1; c--) 
    	{
    	    if(f_digits >= c) 
    	    {
                putc_oled(i,ASCII_NUM[f_val / c_val]);
                f_val = f_val % c_val;
                i +=  1; 
                if(c == 4) 
                {
                    putc_oled(i,44);  
                    i += 1;
                }
            }
            c_val /= 10;
        }   
        puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
    }  
function find_digits(f_num) {     
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
function center_x(f_chars,f_font) {
        return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function center_y(f_size) {
   return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
function press_hold(f_btn) { 
    	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
    	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
    }
function led(f_color) {
       for(i = 0; i <= 3; i++) 
       {
         set_led(i,duint8((f_color * 4) + i));
       }
    }
function save() { combo_run(SAVE); set_pvar(SPVAR_1, toggle_antirecoil[0]); set_pvar(SPVAR_7, antirecoil_vertical[0]); set_pvar(SPVAR_2, toggle_APKCHEATS_AR[0]); set_pvar(SPVAR_8, antirecoil_horizontal[0]); set_pvar(SPVAR_3, toggle_rapidfire[0]); set_pvar(SPVAR_9, antirecoil_start[0]); set_pvar(SPVAR_4, toggle_akimborf[0]); set_pvar(SPVAR_10, antirecoil_end[0]); set_pvar(SPVAR_5, toggle_holdbreath[0]); set_pvar(SPVAR_11, antirecoil_time[0]); set_pvar(SPVAR_6, toggle_quickscope[0]); set_pvar(SPVAR_12, horizontal_start[0]); set_pvar(SPVAR_13, horizontal_end[0]); set_pvar(SPVAR_14, horizontal_time[0]); set_pvar(SPVAR_15, rate_of_fire[0]); set_pvar(SPVAR_16, akimborf[0]); set_pvar(SPVAR_17, toggle_antirecoil[1]); set_pvar(SPVAR_23, antirecoil_vertical[1]); set_pvar(SPVAR_18, toggle_APKCHEATS_AR[1]); set_pvar(SPVAR_24, antirecoil_horizontal[1]); set_pvar(SPVAR_19, toggle_rapidfire[1]); set_pvar(SPVAR_25, antirecoil_start[1]); set_pvar(SPVAR_20, toggle_akimborf[1]); set_pvar(SPVAR_26, antirecoil_end[1]); set_pvar(SPVAR_21, toggle_holdbreath[1]); set_pvar(SPVAR_27, antirecoil_time[1]); set_pvar(SPVAR_22, toggle_quickscope[1]); set_pvar(SPVAR_28, horizontal_start[1]); set_pvar(SPVAR_29, horizontal_end[1]); set_pvar(SPVAR_30, horizontal_time[1]); set_pvar(SPVAR_31, rate_of_fire[1]); set_pvar(SPVAR_32, akimborf[1]); set_pvar(SPVAR_33, ApkExclusive5); set_pvar(SPVAR_34, ApkExclusive710); set_pvar(SPVAR_45, Sampling_Time); set_pvar(SPVAR_35, ApkExclusives__Sensitivity); set_pvar(SPVAR_46, Aim_Boost); set_pvar(SPVAR_36, polar_aim); set_pvar(SPVAR_47, Aim_Correction); set_pvar(SPVAR_37, sticky_aim); set_pvar(SPVAR_48, Aim_Perfection_Limit); set_pvar(SPVAR_38, drop_shot); set_pvar(SPVAR_49, ingamesens); set_pvar(SPVAR_39, Custom__Sensitivity); set_pvar(SPVAR_50, RADIUS); set_pvar(SPVAR_40, enemy_ping); set_pvar(SPVAR_51, STEPS); set_pvar(SPVAR_41, bunny_hop); set_pvar(SPVAR_52, stickyaim_size); set_pvar(SPVAR_42, autorun_on); set_pvar(SPVAR_53, stickyaim_time); set_pvar(SPVAR_43, swap_on); set_pvar(SPVAR_54, drop_speed); set_pvar(SPVAR_44, inverted_on); set_pvar(SPVAR_55, GEN_SENS); set_pvar(SPVAR_56, ADS_SENS); set_pvar(SPVAR_57, FIRE_SENS); set_pvar(SPVAR_58, ADS_FIRE_SENS); set_pvar(SPVAR_59, GRENADE_SENS); set_pvar(SPVAR_60, quickscopedelay); set_pvar(SPVAR_61, Aim_Boost); set_pvar(SPVAR_62, Aim_Correction); set_pvar(SPVAR_63, Aim_Perfection_Limit); }