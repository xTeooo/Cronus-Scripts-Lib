//DoGzPolarV6 created by DoGzTheFiGhTeR

define Fire = PS4_R2;
define Ads  = PS4_L2;
define RX   = PS4_RX;
define RY   = PS4_RY;

define Edit     = PS4_CIRCLE;   // Edit In Game 
define Confirm  = PS4_CIRCLE; 	// Edit Confirm In Game	
define Reset    = PS4_R3;       // Edit Reset In Game

define FastReset  = PS4_TOUCH;    // FAST RESET BUTTON 

int DoGzPolarV6 = TRUE;
int InstaFastReset = TRUE;
int ButtonTime = 20;         // Edit Button Time 

int BaseSpeed = 11;// Real Polar (Zen) Under DeadZone on ADS
int ZoneSpeed = 14;// DAM Polar After DeadZone On ADS
int FireSpeed = 20;// Real Polar or DAM Polar Before Or After DeadZone On Fire

int BasePower = 11;// Real Polar (Zen) Under DeadZone on ADS
int ZonePower = 15;// DAM Polar After DeadZone
int FirePower = 17;// Real Polar or DAM Polar Before Or After DeadZone or Fire

int DeadZone  =  10;

int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,Speed;

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
    
main{
	
	block_rumble();
	
	deadzone(Ads,Fire,100,100);

	if (DoGzPolarV6) {
	
		if ((get_ival(Ads) || get_ival(Fire)) && abs(get_ival(RX)) <= DeadZone && abs(get_ival(RY)) <= DeadZone) {
			
			Speed += Angle;
		
		if (Speed >= 360) Speed = 0;

			if (get_ival(Fire)) {
                
                Radius = FirePower;
            	Angle  = FireSpeed;
            }
                
                else {
                    
                    Radius = BasePower;
                	Angle  = BaseSpeed;
                }
                
		set_polar(POLAR_RS,Speed,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 3 + Radius * 327);
	}
	    
		if ((get_ival(Ads) || get_ival(Fire)) && (abs(get_ival(RX)) > DeadZone || abs(get_ival(RY)) > DeadZone)) {
            
        	actual_X = get_ival(RX);
        	actual_Y = get_ival(RY);
        	actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
        	max_Magnitude = (actual_Magnitude < 100);

    		if (get_ival(Fire)) {
                
         		Radius = FirePower;
            	Angle  = FireSpeed;
        	}
                
        		else {
                    
            		Radius = ZonePower;
                	Angle  = ZoneSpeed;
            	}
            
			angle += Angle;
        	angle = angle % 360;
        	sin_angle = DamPolar[angle % 360];
        	cos_angle = DamPolar[(angle + 270) % 360];
        	cos_angle = (cos_angle * Radius) / 100;
        	sin_angle = (sin_angle * Radius) / 100;

        	if (actual_Magnitude <= 20) { 
                
        		sin_angle -= actual_Y; 
            	cos_angle -= actual_X; 
        	}
            	else { 
                    
            		sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                	cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
            	} 

        		Set_Val(RX,cos_angle);
        		Set_Val(RY,sin_angle); 
    	}
    	
    }
    
    if (InstaFastReset) {
    	
    	if (event_press(FastReset)) { 
       	
    		combo_run(FastReset);
    	}
    
combo FastReset {

    set_val(Edit,100);
    wait(ButtonTime)
    set_val(Reset,100);        
    wait(ButtonTime);
    combo_run(Confirm);
}
combo Confirm {

    set_val(Confirm,100);
    wait(ButtonTime);
    set_val(Confirm,0);
    wait(ButtonTime);
}

}
function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}
    