																																									/*
	Credits To The Following:
	 ~ DoNotAtMe For His Emulated Polar AA For CMP+
	 ~ DoGzTheFiGhTeR For Two Types Of Recoil
	 ~ Chi Chi For Helping With A Few Screen Display Bugs
	 ~ Skadezy For Slide Cancel
	 ~ SS_Nikolai For Merging This All Together And Testing																											*/

//--To Adjust Recoil In-Game Just Hold L1/LB & Tap UP For +1 Vertical, Down For -1 Vertical and Tap Left For +1 Horizontal, Right For -1 Horizontal

//--BUTTONS ( Customize To Your Layout )
    define FIRE        = PS4_R2;
    define ADS         = PS4_L2;
    define TACTICAL    = PS4_L1;
    define LETHAL      = PS4_R1;
    define SPRINT      = PS4_L3;
    define MELEE       = PS4_R3;
	define SWAP        = PS4_TRIANGLE;
    define CROUCH      = PS4_CIRCLE;
    define JUMP        = PS4_CROSS;
    define RELOAD      = PS4_SQUARE;
	define AIM_X	   = PS4_RX;
	define AIM_Y	   = PS4_RY;
	define STRAFE 	   = PS4_LX;
	define WALK 	   = PS4_LY;

//--Rumble Block ~ If TRUE, VIBRATION RECOIL WILL WORK BUT YOU WON"T FEEL THE VIBRATIONS :) 
	define Rumble_Block = FALSE

//--Hair Triggers ( IF L2/LT OR R2/RT IS HELD MORE THEN 10% IT'LL REGISTER AS 100% IN THE GAME )
	define Hair_Triggers = TRUE;

//--Slide Cancel ( Double Tap Prone To Perform Slide Cancel )
	define Slide_Cancel = TRUE;

//--Bunny Hop
	define Bunny_Hop = TRUE;

//--DoNotAtMe Emulated Polar For CMP+
	define DoNotAtMePolar	  = TRUE;
	define RADIUS             =   25; // Aim Assist Strength
	define STEPS  			  =   18; // Aim Assist Speed
	define ACTIVE_WHEN_ADS    = TRUE; // If TRUE Aim Assist Will Be Active When ADS
	define ACTIVE_WHEN_FIRING = TRUE; // If TRUE Aim Assist Will Be Active When ADS + FIRING

//--Anti Recoil
    define INTVERTED_RECOIL   =     1; // ITzSNACK'S INVERTED RECOIL METHOD ( IF INVERTED SET TO    -1   INSTEAD OF   1 )
    int Vertical_Value        =    45; // VERTICAL RECOIL  
    int Horizontal_Value      =    -6; // HORIZONTAL RECOIL
    define SNACKS_ANTIRECOIL  =  TRUE; // RECOIL MASTER CONTROL ( IF YOU DON'T WANT ANTI-RECOIL RUNNING AT ALL INPUT FALSE HERE )
    define VIBRATION_RECOIL   =  TRUE; // RECOIL ACTIVE ON VIBRATE OR JUST ON THE TRIGGERS ( L2 & R2 ) ( TRUE = VIBRATION  OR  FALSE = TRIGGERS )

//--Script Begins Here Just Ignore Here Down--\\
define STEP_INTERVAL = 1; define VM_INTERVAL = -1; int time; int angle, cos_angle, sin_angle; int actual_X, actual_Y, actual_Magnitude, max_Magnitude; int RECOIL; const char Polar_Aim_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; main { if(DoNotAtMePolar) { vm_tctrl(VM_INTERVAL); if((ACTIVE_WHEN_ADS && get_val(PS4_L2)) || (ACTIVE_WHEN_FIRING && get_val(PS4_R2))){ actual_X = get_val(PS4_RX); actual_Y = get_val(PS4_RY); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if(!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Aim_Array[angle % 360]; cos_angle = Polar_Aim_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if(actual_Magnitude <= RADIUS) { sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(PS4_RX, clamp(actual_X + cos_angle, -100, 100)); set_val(PS4_RY, clamp(actual_Y + sin_angle, -100, 100)); } } if(Rumble_Block) { block_rumble(); } if (SNACKS_ANTIRECOIL) { if (VIBRATION_RECOIL) { if(get_val(PS4_L2) && get_val(PS4_R2) && get_rumble(RumbleToUse())) { combo_run(RECOIL); } } else if (!VIBRATION_RECOIL && get_val(PS4_L2) && get_val(PS4_R2)) { combo_run(RECOIL); } if (abs(get_val(PS4_RY)) > Vertical_Value + 2 || abs(get_val(PS4_RX)) > Vertical_Value + 2) { combo_stop(RECOIL); } } if(get_val(PS4_L1) && get_ptime(PS4_L1 > 250)) { set_val(TRACE_1, Vertical_Value) set_val(TRACE_2, Horizontal_Value) if(event_press(PS4_UP)) { Vertical_Value = Vertical_Value + 1; combo_run(Increase); } if(event_press(PS4_DOWN)) { Vertical_Value = Vertical_Value - 1; combo_run(Decrease); } set_val(PS4_UP, 0); set_val(PS4_DOWN, 0); if(event_press(PS4_LEFT)) { Horizontal_Value = Horizontal_Value + 1; combo_run(Increase); } if(event_press(PS4_RIGHT)) { Horizontal_Value = Horizontal_Value - 1; combo_run(Decrease); } set_val(PS4_LEFT, 0); set_val(PS4_RIGHT, 0); } if(Slide_Cancel) { if((get_val(WALK) < -80) || (get_val(WALK) > 80) || (get_val(STRAFE) < -80) || (get_val(STRAFE) > 80)) { if(event_release (CROUCH)) combo_run(CANCEL_SLIDE); } } if(Bunny_Hop) { if (get_val(JUMP) && get_ptime(JUMP) > 200) combo_run(BUNNYHOP); } if(Hair_Triggers) { if(get_val(FIRE) > 10) set_val(FIRE, 100); if(get_val(ADS) > 10) set_val(ADS, 100); } } combo CANCEL_SLIDE { set_val(CROUCH, 100); wait(120); set_val(CROUCH, 0); wait(60); set_val(CROUCH, 100); wait(50); set_val(CROUCH, 100); set_val(JUMP, 100); wait(60); set_val(CROUCH, 0); set_val(JUMP, 100); wait(10); set_val(JUMP, 0); } combo Increase { set_rumble(RUMBLE_A, 100); wait(250); reset_rumble(); } combo Decrease { set_rumble(RUMBLE_B, 100); wait(150); reset_rumble(); } combo BUNNYHOP { set_val(JUMP, 100); wait(30); set_val(JUMP, 0); wait(30); set_val(JUMP, 100); wait(30); set_val(JUMP, 0); wait(30); } combo RECOIL { RECOIL = get_val(PS4_RY) + Vertical_Value; if(RECOIL > 100) RECOIL = 100; set_val(PS4_RY,RECOIL * INTVERTED_RECOIL); RECOIL = get_val(PS4_RX) + Horizontal_Value; if(RECOIL > 100) RECOIL = 100; set_val(PS4_RX,RECOIL); } function RumbleToUse() { if (get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) == 100) { return RUMBLE_B; } if (get_rumble(RUMBLE_B) == 100) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) { return RUMBLE_B; } return 0; } function clamp(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; }