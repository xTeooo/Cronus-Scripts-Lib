                            define Fire     = PS4_R2;                                
                            define Ads      = PS4_L2;                                  
                            define Pickaxe  = PS4_TRIANGLE;                            
                            define N_Weapon = PS4_R1;                                 
                            define P_Weapon = PS4_L1;                                
                            define Reload   = PS4_SQUARE;                              
                            define Jump     = PS4_CROSS;                               
                            define Build    = PS4_CIRCLE;	
                            define Wall     = PS4_R2;		
                            define Floor    = PS4_R1;		
                            define Ramp     = PS4_L2;		
                            define Roof     = PS4_L1;		                                                   
                            define Edit     = PS4_L3;   
                            define Select   = PS4_R2;     
                            define Confirm  = PS4_L2; 	
                            define Reset    = PS4_RIGHT;                                   
               
                            define RY       = PS4_RY;
                            define RX       = PS4_RX;
                            define LY       = PS4_LY;
                            define LX       = PS4_LX;                                  


																					
				           define AimV1ExploitYT  = TRUE;						       /*║
║*/					       define Ads_Assist      = FALSE;                              /*║
║*/                        define Fire_Assist     = TRUE;                              /*║
║*/                        define Radius          = 7;                                 /*║
║*/                        define Steps           = 30;                                /*║
║                                                                                        ║
║*/                        define HeadAssist      = FALSE;                              /*║
║*/                        define HeadHipAssist   = FALSE;                              /*║
║*/                        define HeadStep        = 2;                                 /*║
║*/                        define HeadMax         = 30;                                /*║
║                                                                                        ║
║																						 ║                     
║*/                        define AntiRecoil      = FALSE;                              /*║ 
║*/                        define ARVert          = 25;                                /*║
║*/                        define ARHoriz         =  0;                                /*║
║                                                                                        ║

║																						 ║     
║*/                        define QuickEditAssist = FALSE;                             /*║
║*/                        define EditDelay       = 20;                                /*║
║*/                        define EditAssist      = PS4_L3;                            /*║ 
║                                                       

║                                                                                        ║
║*/                        define InstaFastReset = TRUE;                              /*║
║*/                        define FastReset      = PS4_DOWN;                          /*║
║*/                        define ButtonTime     = 30;                                 /*║
║                                                                                        ║
║                                                                                        ║
║*/                        define InstaEditReset = FALSE;                              /*║
║*/                        define EditHold       = FALSE;                              /*║
║*/                        define EditHoldTime   = 130;                                /*║
║                                                                                        ║




║                                                                                        ║
║*/                         define InstantPickaxe = FALSE;   	                       /*║    
║                                                                                        ║

 
 
 

║						   															     ║
║*/                        define BuildTracker    = TRUE;                              /*║
║*/                        define BuildSyncTime   = 2000;                              /*║
║                                                                                        ║


                


                     
																						 
*/                    
                     int AntirecoilVertical,AntirecoilHorizontal;
                     int angle, cos_angle, sin_angle,time;
                     int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
                     int BuildTrack,BuildCount;
                     int Head,Edit1,Edit2,EditT,Axe;
                     int Step_Interval = 1;   
                     int display_black,count_black; 
                     int display_title = TRUE;
                     define vm_internal = -6;                                           
                     define On = TRUE;
                     define Off = FALSE;


main {

vm_tctrl(vm_internal);

if(QuickEditAssist) {
  
  if(get_ival(EditAssist)) {
  
      EditAssist();
         Edit1 = On;
}
          if(event_release(EditAssist)) {
 
             EditT = 0;	
             Edit1 = Off;
     }
}
if(InstaFastReset) {
    
  if (event_press(FastReset)) { 
      
       combo_run(FastReset);
    }
}
if(InstaEditReset) {
        
   if(EditHold) {
        	
     if(get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
         Edit1 = On;
         Edit2 = On;
     }
}
       else if (event_press(Edit)) {
        			
          Edit1 = On;
          Edit2 = On;
}
		 if (Edit2) {
            
           if(event_release(Select)) {  
                
              Edit1 = Off;
              Edit2 = Off;
              BuildTrack = Off;
        }
    }
}    

if (Edit1 || Edit2) {
        
   if (event_press(Reset)) {  
            
       combo_run(InstantReset);
            
        Edit1 = Off;
        Edit2 = Off;
        }

          if (event_press(Pickaxe)) {
            
            Edit1 = Off;
            Edit2 = Off;
		}
    }

if(BuildTracker) {
 
  if(event_press(Build)) { BuildTrack = !BuildTrack;}
  
    if(BuildTrack) { ¡BuildCount += get_rtime();
  
     if(event_press(Pickaxe) || BuildCount == BuildSyncTime) { BuildTrack = FALSE; BuildCount = 0;}
  
       if(get_ival(PS4_L1) || get_ival(PS4_L2) || get_ival(PS4_R2) || get_ival(PS4_R1) || get_ival(PS4_SQUARE)) BuildCount = 0;}}
         
         if (!BuildTrack && !Edit1 && !Edit2){

if(InstantPickaxe) {
                    
  if (event_press(Pickaxe)) {
                        
      Axe = On;}
                	
       if (Axe) {
                        
         if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                            
           Axe = Off;}
                        
             if (event_release(Fire)) {
                            
              combo_run(Pickaxe);
          }
     }
} 
if(AntiRecoil) {
  
   if(get_ival(Ads) && get_ival(Fire)) { 	
  
       combo_run(Antirecoil);   
      }
 }    
if(AimV1ExploitYT) {
  
       actual_X = get_val(RX);
        actual_Y = get_val(RY);
         actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));                                                                                                                                                                                              //CREATED BY EXPLOIT YT
          max_Magnitude = (actual_Magnitude < 100);
  
            if(!(time++ % Step_Interval)){
       
       angle += Steps;}
      
       angle = angle % 360;
        sin_angle = Polar_Array[angle % 360];
         cos_angle = Polar_Array[(angle + 270) % 360];                   
          cos_angle = (cos_angle * Radius) / 100;
           sin_angle = (sin_angle * Radius) / 100;
         
           if((Ads_Assist && get_val(Ads)) || (Fire_Assist && get_val(Fire))) {
 
             if(actual_Magnitude <= Radius){
  
       sin_angle -= actual_Y;
        cos_angle -= actual_X;
         }else {
          sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
           cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
}
  
        set_val(RX, clamp(actual_X + cos_angle, -100, 100));
         set_val(RY, clamp(actual_Y + sin_angle, -100, 100));}
          if(get_ival(Ads)){ combo_run(AimExploitV1);
           
        }
   }
if(HeadAssist) {
	        
	if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire)) {
	        
	    if (abs(get_ival(RY)) < HeadMax) { 
	        		
	        Head += HeadStep;
	       
	           combo_run(HeadAssist);
	 }	
}             
                  if (!get_ival(Fire)) Head = 0;
	        	
                     if (Head >= HeadMax) combo_stop(HeadAssist);
	 }
if(display_title){           
      cls_oled(0);            
        DrawLogo(0, 0, 0);
         display_title = FALSE;  
           display_black = TRUE;
}                             
if(display_black){                            
       count_black += get_rtime();
        if(count_black >= 9000){                        
          cls_oled(0);         
           count_black = 0;      
            display_black = FALSE; 
           }
       }
   }
}

combo Antirecoil {
 
    AntirecoilVertical = get_val(PS4_RY) + ARVert;  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(ARVert) + 5)
    set_val(PS4_RY, (AntirecoilVertical));
    AntirecoilHorizontal = get_val(PS4_RX) + ARHoriz;
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(ARHoriz) + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}

combo AimExploitV1 {
   
    set_Val(LX,inv(150));
    wait(17);
    set_Val(LX,150);
    wait(17);
}

combo HeadAssist{

	set_val(RY,inv(Head) + get_val(RY));
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(ButtonTime);
    Axe = Off;
}

combo FastReset {

    set_val(EditAssist,50);
    wait(ButtonTime)
    set_val(Reset,50);        
    wait(ButtonTime);
    combo_run(Confirm);
}

combo Confirm {

    set_val(Confirm,70);
    wait(ButtonTime);
    set_val(Confirm,70);
    wait(ButtonTime);
}

combo InstantReset {

    wait(40)
    combo_run(Confirm);
}

function EditAssist () {

    EditT += get_rtime();
    if(get_ival(EditAssist)) {
    if(EditT >= EditDelay)
    EditPress(Select);
    }
}

function EditPress (Button) {

    if(get_ival(Button))
    return;
    set_val(Button,100);
}

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
    return; 
}

const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};//CREATED BY EXPLOIT YT

const int16 BOOT_LOGO[] = { 

119, 63,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x01FF,0xF0FE,0x1FF8,0x7FFF,0x7E3F,0x7EFF,0xFEFF,0xF803,0xFFE3,0xFE3F,0xF8FF,0xFEFC,0x7EFD,0xFFFD,0xFFF0,0x07FF,0xCFFE,
    0x7FF9,0xFFFD,0xF8FD,0xFBFF,0xFBFF,0xE00F,0xFFBF,0xFEFF,0xFBFF,0xFBF1,0xFBF7,0xFFF7,0xFFC0,0x1F1F,0x7EFE,0xFBFF,0xFFF3,0xE3E7,0xCFFF,0xEF8F,0x803E,0x3EF8,0x7DF1,0xFFBD,0xE7E7,0xCF9E,0xF7DF,0x1F00,0x7C7D,0xE0FB,0xE3FF,0x7BCF,
    0xCF9F,0x3DEF,0xBE3E,0x00F8,0x73C1,0xF7C7,0xDCF7,0x9FDF,0x3E7B,0xCE7C,0x3801,0xF007,0x83EF,0x9F81,0xE03F,0xFE7C,0x0780,0xF800,0x03FE,0x0F07,0xDFFE,0x03C0,0x7FFC,0xF80F,0x01FF,0x0007,0xFC1E,0x0FBF,0xF807,0x80FF,0xF9F0,0x1E03,
    0xFE00,0x0FF8,0x3C1F,0x7FE0,0x0F01,0xFFF3,0xE03C,0x07FC,0x001F,0xF078,0x3EFF,0xC01E,0x03FF,0xE7C0,0x780F,0xF800,0x3E00,0xF07D,0xFF80,0x3C07,0xFFCF,0x80F0,0x1F00,0x007C,0x01E0,0xFBFF,0x8078,0x0FBF,0x9F01,0xE03E,0x1C00,0xF803,
    0xC1F7,0xDF00,0xF01F,0x3F3E,0x03C0,0x7C7C,0x01F0,0x07C3,0xEFBE,0x01E0,0x3E7E,0x7C07,0x80F8,0xF803,0xE00F,0xCFDF,0x3E07,0xC07C,0x7CF8,0x0F81,0xF1F0,0x07E0,0x1FFF,0x7EFC,0x0FC1,0xF8FD,0xF83F,0x03FF,0xE00F,0xC01F,0xFCFD,0xF81F,
    0x83F1,0xFBF0,0x7E07,0xFFC0,0x1F80,0x1FF1,0xFBF0,0x3F07,0xE3F7,0xE0FC,0x0FFF,0x803F,0x001F,0xC3F7,0xE07E,0x0FC7,0xEFC1,0xF81F,0xFF00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1D2E,0xEEEE,0x703B,0xBBBD,0xA200,0x0000,0x0000,0x0022,0x5549,0x1424,0x4454,0x4B4C,0x0000,0x0000,0x0000,0x47BB,0x93B8,0xC0EE,0xEE97,0x8800,0x0000,0x0000,0x0089,0x5424,0x6080,0x5145,0x2B10,0x0000,0x0000,
    0x0001,0xD2A8,0x4EA7,0x23BA,0xBBD6,0x2000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0F76,0xC3B6,0xE879,0xDF11,0xDAEE,0xF000,0x0000,0x0012,0x4F84,0x3950,0x9108,0x2135,0x1520,0x0000,0x0000,0x3C95,0x0E23,0xA122,0x1042,
    0x7BBB,0xC000,0x0000,0x0049,0x2A10,0xE442,0x4420,0x84B4,0x5500,0x0000,0x0000,0x9754,0x3B68,0xF79C,0x41DD,0x2EA9,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4BBB,0x4CD1,0x0E00,0x0000,0x0000,0x0000,0x0000,0x0094,0x54A5,0xA614,0x0000,0x0000,0x0000,0x0000,0x0001,0x2ECD,0x4BC4,0x2800,0x0000,0x0000,0x0000,0x0000,
    0x0251,0x4A95,0x8850,0x0000,0x0000,0x0000,0x0000,0x0003,0x3AB4,0xC93A,0xE000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0xF7DF,0x7DFB,0xEF8F,0xA4F4,0x5F63,0xEDE3,0x6FC0,0x03EF,0xBEFB,0xF7DF,0x9F49,0xEDBE,0xC7DB,0xC6DF,0x8007,0xDF7D,0xB7EC,0x3322,0x93DF,0x7D8F,0xB78D,
    0xBF00,0x0CB6,0xDB63,0x1866,0x45E6,0xBEDB,0x1B66,0x1B18,0x0018,0x7DC7,0xC63E,0xCCF3,0xCC39,0xF636,0xCC3E,0x3000,0x30FB,0x8D8C,0x7D99,0xE31C,0x73EC,0x6D98,0x7C60,0x0061,0xE61B,0x18C3,0x3266,0x30E6,0x18DB,0x3018,0xC000,0xDBCD,
    0xB631,0x8664,0x4C6B,0xEC3D,0xB661,0xB180,0x01F7,0xDF6C,0x63EF,0xCF98,0xF6D8,0x7BEC,0xC3E3,0x0003,0xEDBE,0xD8C7,0xDF1F,0x31ED,0xB0F7,0xD987,0xC600
} 
                                              
int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData;                      
function DrawLogo(x, y, invert) {                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) {         
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) {     
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;   
            if (!logoBit) {      
                logoBit = 16;     
                logoOffset++;     
            }  
        }   
    }    
}