																																																								/*
   _____    _____            _   _   _   _              _           _       __  __  __          __       _____                 _           _   
  / ____|  / ____|          | \ | | (_) | |            | |         (_)     |  \/  | \ \        / /      / ____|               (_)         | |  
 | (___   | (___            |  \| |  _  | | __   ___   | |   __ _   _      | \  / |  \ \  /\  / /      | (___     ___   _ __   _   _ __   | |_ 
  \___ \   \___ \           | . ` | | | | |/ /  / _ \  | |  / _` | | |     | |\/| |   \ \/  \/ /        \___ \   / __| | '__| | | | '_ \  | __|
  ____) |  ____) |          | |\  | | | |   <  | (_) | | | | (_| | | |     | |  | |    \  /\  /         ____) | | (__  | |    | | | |_) | | |_ 
 |_____/  |_____/           |_| \_| |_| |_|\_\  \___/  |_|  \__,_| |_|     |_|  |_|     \/  \/         |_____/   \___| |_|    |_| | .__/   \__|
                    ______                                                                                                        | |          
                   |______|                                                                                                       |_|          

 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   _____                            _         ______           _   _            ______       _   _   _     _                 
  / ____|                          | |       |  ____|         (_) | |          |  ____|     | | (_) | |   (_)                
 | (___   __      __   ___    ___  | |_      | |__    __   __  _  | |          | |__      __| |  _  | |_   _    ___    _ __  
  \___ \  \ \ /\ / /  / _ \  / _ \ | __|     |  __|   \ \ / / | | | |          |  __|    / _` | | | | __| | |  / _ \  | '_ \ 
  ____) |  \ V  V /  |  __/ |  __/ | |_      | |____   \ V /  | | | |____      | |____  | (_| | | | | |_  | | | (_) | | | | |
 |_____/    \_/\_/    \___|  \___|  \__|     |______|   \_/   |_| |______|     |______|  \__,_| |_|  \__| |_|  \___/  |_| |_|
                                                                                                                             
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Note From CHI CHI / ErickCHIN :
					- UP & DOWN to select the value to edit.
					- LEFT & RIGHT to increase or decrease selected value
					- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 					Credits To The Following People Below :
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - ErikChin / CHI CHI For His Mod Menu Screen & Optimized Sticky Aim
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Sweet_Evil For His Save / Load Values Properly Code & Dynamic Progression Recoil + Smart Rumble Recoil
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - ItzSnack For Strafe, Drop shot
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Djangokill For Chicken Mod idea, Bunny Hop, Smart Grenade
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - LegitCloudzzz For Polar Strafe idea
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - NukeOne aka BoneFisher For Optimized Strafe
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Crescens For Aim Sensitivity Corrections, Polar Aim Assist & Auto Rapid Fire Detection
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - TaylorDrift21 For Helping Me So Much With Display Stuff Such as AR Type & More!
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Skadezy For Smart Slide Cancel
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Whoever mixed Legitzzz Simplified Polar with DoGzTheFiGhTeRz Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - DoGzTheFiGhTeR For His Zen Eye Colour Pulsing, Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Me, SS_Nikolai For Putting All This Together
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   SMART    = Slide Cancel That Uses In-Game Vibrations
   STANDARD = Slide Cancel That Activates When Releasing PRONE Button And SPRINT BUTTON Is Pushed 85%
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   TAP     = Auto Ping Whenever You Double Tap ADS
   ADSFIRE = Auto Ping Whenever You ADS + Fire
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Choose Your Own Quick Toggle's   				@ Line 109
	Block In-Game Rumble             				@ Line 106 ( In-Game Vibrations Must Be Enabled Still For Some Mods To Work )
	Customize Buttons To Your Layout 				@ Line 90
	Choose Your Easy Prone Button    				@ Line 87
	Choose Your Quick Scope Mode     				@ Line 84
	Choose Your Auto Ping Mode       				@ Line 81
	Change Your Slide Cancel Delay And Or Threshold @ Line 77
	Choose If You Want Hair Triggers 				@ Line 74
	Choose If You Want Kill Switch  				@ Line 71
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																																							*/

//--Leave Alone
	define SMART = 0, STANDARD = 1, TAP = 2, ADSFIRE = 3, AIM_FIRE = 4, DBL_TAP = 5;

//--Kill Switch Toggle. If set to TRUE, Kill Switch will be active by double tapping the PAUSE button. FALSE will ignore your double press to activate Kill Switch
	define Kill_Switch_Toggle = FALSE;

//--Hair Triggers ( IF L2/LT OR R2/RT IS HELD MORE THEN 10% IT'LL REGISTER AS 100% IN THE GAME )
	int Hair_Triggers = TRUE;

//--Slide Cancel Delay Time ~ Threshold value needed for Slide Cancel to activate
	define Slide_Cancel_Delay =   80;
	define THRESHOLD          =   85;

//--Auto Ping Mode ( TAP or ADSFIRE )
	int Auto_Ping_Mode = TAP;

//--Quick Scope Mode ( AIM_FIRE or DBL_TAP )
	int QuickScope_Mode = DBL_TAP;

//--Easy Prone Button
	define Easy_Prone_Button = PS4_L3;

//--BUTTONS ( Customize To Your Layout )
	int INVERTED     =     1; // <--- Make 2 If you play inverted
	define FLIPPED   = FALSE; // <--- Make TRUE if you play flipped
    define TACTICAL  = PS4_L1;
    define LETHAL    = PS4_R1;
    define SPRINT    = PS4_L3;
    define MELEE     = PS4_R3;
	define SWAP      = PS4_TRIANGLE;
    define PRONE     = PS4_CIRCLE;
    define JUMP      = PS4_CROSS;
    define RELOAD    = PS4_SQUARE;
	define AIM_X	 = PS4_RX;
	define AIM_Y	 = PS4_RY;
	define STRAFE 	 = PS4_LX;
	define WALK 	 = PS4_LY;

//--Set to TRUE if you want to block all controller vibrations ( IN-GAME VIBRATIONS MUST STILL BE ENABLED THOUGH )
	define Rumble_Block = TRUE;

//--Quick Toggle Button Combos
	define QUICK_TOGGLES	  = 	  FALSE;    // Make TRUE If You Want The Ability To Turn On Mods Without Entering Menu
	define KILL_SWITCH_BUTTON =      PS4_L3;	// Double Tap This Button To Activate & Deactivate Kill Switch
	define RAPID_FIRE_BUTTON  =    PS4_LEFT;	// ADS + This Button To Activate Rapid Fire
	define DROP_SHOT_BUTTON   =    PS4_DOWN;	// ADS + This Button To Activate Drop Shot
	define AKIMBO_BUTTON      =   PS4_RIGHT;	// ADS + This Button To Activate Akimbo Rapid Fire
	define JUMP_SHOT_BUTTON   =      PS4_UP;	// ADS + This Button To Activate Prone Rise
	define MENU_OPEN_BUTTON   = PS4_OPTIONS;	// ADS + This Button To Open Menu

//--Values
	define getupdelay 			 = 	   80;	 // Get Up Delay For Easy Prone
    define Strafe_Wait 		     =	  500;	 // How long to before switching left to right
	define Time_Blow 			 =    825;   // Every 1000 = 1 Second
	define Auto_Ping_Press_Value =	   30;   // Rate At Which Ping Is Pressed

/*  If auto rapid fire is selected and one of your
	automatic weapons seems to have a lower fire rate
	increase the value to 121, or try other values.	*/

//--Leave Alone
	int rapid_fire_speed;
	int in_game_menu_sens;
	int RESOLUTION;
	int AIM_ASSIST;
	int AIM_SLOPE;
	int AR_STRENGTH;
	int DropShotSpeed;
	int Fire_Rate_Timer;
	int QS_Delay;

//--Variable Just Leave Alone
	int ADS;
	int FIRE;
	int wait_time_correction;
	int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;
	int frame;
	int update_timer;
	int C_RX;
	int C_RY;
	int C_LX;
	int C_LY;
	int L_RX;
	int L_RY;
	//int T_RX;
	int T_RY;
	int Inc_Dec_State_1;
	int Inc_Dec_State_2;
	int Aim_Assit_1;
	int Aim_Assit_2;
	int angle;
	int _ret;
	//int _temp;
	//int magnitude_ok;
	int mvt_direction;
	int min_aim_assit;
	int cw_angle;
	int inverted;
	int rx_drift;
	int ry_drift;
	int lx_drift;
	int ly_drift;
	int drift_calib;
	int _var;
	int ptime;
	int trigger_toggle;
	int INC = 1,DEC,COLOUR[3];
	int color = 1;
	int Rumble_Wait_Timer = FALSE;
	int rapid_fire_timer;
	int Rumble_Timer = 0;
	int Cur_Rumble;
	int Old_Rumble;
	int wtime;
	int cooktime;
	int release;
	int dance_active = FALSE;
	int slide_enable = FALSE;
	int q;
	int double__tap[30];
	int REFRESH_RATE = TIME_BASE * 10;
	define MAX_DRIFT = 12;
	define CRESCENS_RADIUS1 = 100;
	define CRESCENS_SPEED1 = 3;
	define STEPSS    = 8;
	define MAGNITUDE = 85;
	define Tall_Oval = 1;
	define Wide_Oval = 2;
	define Ellipse   = 3;
	define Circle    = 4;
	define TIME_BASE = 4;
	define STEP_INTERVAL =  1;
	define smartgrenade_safedelay  = 3200;
	define smartgrenade_throwdelay = 2600;

//TOGGLES - START
int EviL_AR;
int Sweet_EviL_Bot;
int Sweet_EviL_Steady_Aim;
int AimSensCorrections;
int Rapid_Fire_Toggle;
int auto_rf;
int Akimbo_Rapid_Fire;
int Slide_Cancel_Mode;
int JumpShot;
int ScopeShot;
int QuickScope;
int Fast_Melee;
int Strafe_Toggle;
int DropShot;
int holdbreath;
int AutoPing;
int Prone_Rise;
int Chicken_Mode;
int B_Hop;
int Smart_Grenade;
int Auto_Blow;
int toggle_easyprone;
int Bigg_Man_Little_Dance;
//TOGGLES - END

int ZS;
int KS;
int c_b;
int sel = 1;
int mod = 2;
int ss = TRUE;
int display = TRUE;
define NumofMods = 22;

const string OFF 	    = "Choose Type";
const string MWSTANDARD = "MW Standard";
const string MWRUMBLE   = "MW Rumble";
const string CWSTANDARD = "CW Standard";
const string CWRUMBLE   = "CW Rumble";
const string RUMBLE     = "Rumble AR";
const string DYNAMIC    = "Dynamic AR"; 
const string t_text[]   = {
"Hold L2 + OPTIONS",  // 0
"Sweet EviL Recoil",  // 1 -
"Sweet EviL Bot",	  // 2
"Sweet EviL Steady",  // 3
"Aim Corrections",	  // 4
"Rapid Fire", 		  // 5
"Auto Rapid Fire",	  // 6
"Akimbo Rapid Fire",  // 7
"Slide Cancel",		  // 8
"Jump Shot",	   	  // 9
"Scope Shot",		  // 10
"Quick Scope",		  // 11
"Fast Melee",		  // 12
"Strafe",			  // 13
"Dropshot", 		  // 14
"Snipers Breath",	  // 15
"Auto Ping",	 	  // 16
"Prone Rise",	  	  // 17 
"Chicken Mode",		  // 18 
"Bunny Hop",		  // 19 
"Smart Grenade",	  // 20
"Smart C4",			  // 21 
"Easy Prone",		  // 22
"Big Man Lil Dance",  // 23 -
"OFF",				  // 24 --
"ON",				  // 25 --
"Width",			  // 26 --
"Height",			  // 27 --
"Vertical",			  // 28 --
"Horizontal",		  // 29 --
"RPS",				  // 30 --
"Kill Switch"		  // 31 --
};

init {
	if(get_pvar(SPVAR_64, 0, 9999, 0) != 1486) {
		set_pvar(SPVAR_64, 1486):
		reset_script_var();
		save();	}
	
	load_pvar();

	mvt_direction   = 1;
	min_aim_assit   = AIM_ASSIST / 2;
	Aim_Assit_1     = min_aim_assit;	
	Aim_Assit_2     = AIM_ASSIST;
	Inc_Dec_State_1 = TRUE;
	Inc_Dec_State_2 = FALSE;
	
    update_timer = REFRESH_RATE;
	
	if(INVERTED == 2)
		inverted = -1;
	else
		inverted = 1;
		
	angle    = 90 * inverted;
	cw_angle = 90 * inverted;

	drift_calib = 100;
  
	COLOUR = 255; 
	
	combo_run(niko); 

	if(rapid_fire_speed > 1)
	wait_time_correction = -10;

	while(q < 30) {
	double__tap[q] = -1;       
	q++; }
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
	if(Sweet_EviL_Bot == TRUE)
	  vm_tctrl(-6);
    else
	  vm_tctrl(-2);
	if(FLIPPED) {
		ADS  = PS4_L1;
		FIRE = PS4_R1;
	} else {
		ADS  = PS4_L2;
		FIRE = PS4_R2;
	}
    if(get_controller() != PIO_PS4) {
        if(get_console() == PIO_PS4) {
            swap(PS4_SHARE,PS4_TOUCH);  
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
			}
        }
	}
	if (Kill_Switch_Toggle) {
	if(double_click(KILL_SWITCH_BUTTON)) {
		KS = !KS
		frame = -1;
		combo_restart(niko);
		display = TRUE;
		}
	}
	if(!KS) {
	if(ZS == 0) {
    
	    //RAPIDFIRE - START
		if(QUICK_TOGGLES) {
	    if(get_ival(ADS) && event_press(RAPID_FIRE_BUTTON)) {
	    	combo_run (vibrate);
	        combo_restart(BLINK);
			Rapid_Fire_Toggle = !Rapid_Fire_Toggle;
			}
		}
	if(Rapid_Fire_Toggle) {
		if(get_ival(FIRE)) {
			combo_run(Rapid_Fire);	}
			if(event_release(FIRE)) {
			combo_stop(Rapid_Fire);
			}
		}
		//RAPIDFIRE - END

		// AUTO RAPID FIRE - START
	if (auto_rf) {
     	if(get_val(FIRE)) {
			if(get_rumble (RUMBLE_A) > 0 && !Rumble_Wait_Timer) {
				Rumble_Wait_Timer = TRUE;
			}
	if(Rumble_Wait_Timer) {
				Rumble_Timer += get_rtime();
		        					
			if(get_rumble (RUMBLE_A) > 0) 	
        							
				Cur_Rumble = get_rumble (RUMBLE_A) * 255 / 100;
        							
			if(Cur_Rumble > Old_Rumble) {
				Old_Rumble = Cur_Rumble;
				Rumble_Timer = 0;
			}
			  else if(Cur_Rumble < Old_Rumble)
    								
				Old_Rumble = Cur_Rumble;
    								
	if(Rumble_Timer >= Fire_Rate_Timer) 
        							
		rapid_fire_timer = TRUE;
				}
		}
    
		if(event_release(FIRE)) {
			rapid_fire_timer = FALSE;
			combo_stop(RAPID_FIRE); 
			Rumble_Timer = 0;
			Rumble_Wait_Timer = FALSE;
			Old_Rumble = 0;
		}
   if (rapid_fire_timer) {
		if (get_ival(FIRE)) {
			combo_run(RAPID_FIRE);
			wtime = 25 - get_ival(FIRE);
			}
		}
    }
		// AUTO RAPID FIRE - END
	
	    //POLAR - START		
	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_ival(AIM_X))  + 2);
		ry_drift = max(ry_drift, abs(get_ival(AIM_Y))  + 2);

		lx_drift = max(lx_drift, abs(get_ival(STRAFE)) + 2);
		ly_drift = max(ly_drift, abs(get_ival(WALK)) + 2);

		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);

		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);

		drift_calib--;
	}
	else
	{

		//HAIR TRIGGERS -  START
	if(Hair_Triggers) {
		if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);
	
		if(get_ival(PS4_L2) > 10)
			set_val(PS4_L2, 100);
	}
		//HAIR TRIGGERS - END
		
		C_RX = get_val(AIM_X);
		C_RY = get_val(AIM_Y);

		C_LX = get_val(STRAFE);
		C_LY = get_val(WALK);

		if(isqrt(pow(C_RX, 2) + pow(C_RY, 2)) <= rx_drift)
		{
			C_RX = 0;
			C_RY = 0;
		}

		if(isqrt(pow(C_LX, 2) + pow(C_LY, 2)) <= lx_drift)
		{
			C_LX = 0;
			C_LY = 0;
		}

      if(get_val(ADS) > 50 || get_val(FIRE) > 50) {
			if(update_timer >= REFRESH_RATE)
			  {
				block(AIM_X, REFRESH_RATE);
				block(AIM_Y, REFRESH_RATE);

				_ret = get_mvt_direction(C_RX, L_RX);

				if(_ret != 0)
				mvt_direction = _ret;

				//set_val(TRACE_1, mvt_direction);

				if(Sweet_EviL_Bot == TRUE)
				{
					if(Inc_Dec_State_1 == FALSE)
					{
						Aim_Assit_1 -= 1;

						if(Aim_Assit_1 < min_aim_assit)
						Inc_Dec_State_1 = TRUE;
					}
					else
					{
						Aim_Assit_1 += 1;

						if(Aim_Assit_1 > AIM_ASSIST)
						Inc_Dec_State_1 = FALSE;
					}

					if(Inc_Dec_State_2 == FALSE)
					{
						Aim_Assit_2 -= 1;

						if(Aim_Assit_2 < min_aim_assit)
						Inc_Dec_State_2 = TRUE;
					}
					else
					{
						Aim_Assit_2 += 1;

						if(Aim_Assit_2 > AIM_ASSIST)
						Inc_Dec_State_2 = FALSE;
					}
				}

				update_timer = 0;

				L_RX = C_RX;
				L_RY = C_RY;
			}

			if((EviL_AR) && ((get_val(ADS) > 50) && (get_val(FIRE)> 50)) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
			{
				if(EviL_AR == 1)
				{
					T_RY = get_rumble_evil_ar();
				}
				else
				{
					T_RY = get_dynamic_evil_ar(C_RX, C_RY, AR_STRENGTH);
				}

				if(inverted == -1)
				{
					C_RY += inv(T_RY);
				}
				else
				{
					C_RY += T_RY;
				}
			}
			
			if(Sweet_EviL_Bot == TRUE)
			{
				if(mvt_direction == 1)
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, sin(angle)) + get_polar_coordinate(Aim_Assit_2/2, sin(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, cos(angle)) + get_polar_coordinate(Aim_Assit_1/2, cos(cw_angle)));
				}
				else
				{
					C_RX += (get_polar_coordinate(Aim_Assit_1, cos(angle))+ get_polar_coordinate(Aim_Assit_2/2, cos(cw_angle)));
					C_RY += (get_polar_coordinate(Aim_Assit_2, sin(angle))+ get_polar_coordinate(Aim_Assit_1/2, sin(cw_angle)));
				}
	
				angle += AIM_SLOPE;
				angle = angle % 360;
	
				cw_angle = (cw_angle + 1) % 360;
			}

			if(Sweet_EviL_Steady_Aim == TRUE)
			{
				C_RX = get_steady_aim(C_RX, RESOLUTION);
				C_RY = get_steady_aim(C_RY, RESOLUTION);
			}

			set_val(AIM_X, clamp(C_RX, -100, 100));
			set_val(AIM_Y, clamp(C_RY, -100, 100));

			update_timer += get_rtime();
		}
		else
		{
			update_timer = 0;
			update_timer = REFRESH_RATE;

			angle = 90 * inverted;
			cw_angle = 90 * inverted;

			Aim_Assit_1 = min_aim_assit;
			Aim_Assit_2 = AIM_ASSIST;
			}
		}
		//POLAR - END

		//BIG MAN LITTLE DANCE - START
  if (Bigg_Man_Little_Dance) {
    if (get_ival(LETHAL)) release = get_ptime(LETHAL);
    if (get_ival(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) {
      dance_active = TRUE;
    }
    if (dance_active) {
      if (get_ival(LETHAL)) set_val(FIRE, 100);
      combo_run(DANCE);
      block(LETHAL, release + 50);
    }
    if (dance_active && event_release(LETHAL)) {
      dance_active = FALSE;
    }
  }
		//BIG MAN LITTLE DANCE - END

		//STRAFE - START
	    if(Strafe_Toggle) {
			if(get_ival(FIRE))combo_run(Strafe);
	        else combo_stop(Strafe); 
			}
		//STRAFE - END
		
		//DROPSHOT - START
		if(QUICK_TOGGLES) {
		if(get_ival(ADS) && event_press(DROP_SHOT_BUTTON)) {
	        combo_run (vibrate);
	        combo_restart(BLIINK);
			DropShot = !DropShot;
			}
		}
		if (DropShot) {
	    	if(get_ival(FIRE))combo_run(DroppShott); 
			}
		//DROPSHOT - END

		//BIG MAN LITTLE DANCE - START
  if (Bigg_Man_Little_Dance) {
    if (get_ival(LETHAL)) release = get_ptime(LETHAL);
    if (get_ival(LETHAL) && get_ptime(LETHAL) <= get_ptime(ADS) && get_val(ADS)) {
      dance_active = TRUE;
    }
    if (dance_active) {
      if (get_ival(LETHAL)) set_val(FIRE, 100);
      combo_run(DANCE);
      block(LETHAL, release + 50);
    }
    if (dance_active && event_release(LETHAL)) {
      dance_active = FALSE;
    }
  }
		//BIG MAN LITTLE DANCE - END
	
	//SMART GRENADE - START
	if(Smart_Grenade) {
		if(combo_running(Cook_And_Release_Grenade) && (cooktime == smartgrenade_throwdelay) && (main_button_pressed(LETHAL) || double_click(LETHAL))) {
			combo_stop(Cook_And_Release_Grenade);
		}
		if(get_ival(LETHAL) && get_ptime(LETHAL) < 200)
		{
			cooktime = smartgrenade_throwdelay;
			combo_run(Cook_And_Release_Grenade);
		}
		if(get_ival(LETHAL) && get_ptime(LETHAL) > 200)
		{
			cooktime = smartgrenade_safedelay;
			combo_run(Cook_And_Release_Grenade);
		}
	}
	//SMART GRENADE - END

		//AKIMBO RAPID FIRE - START
		if(QUICK_TOGGLES) {
		if(get_ival(ADS) && event_press(AKIMBO_BUTTON)) {
	        combo_run (vibrate);
	        combo_restart(BLIIINK);
			Akimbo_Rapid_Fire = !Akimbo_Rapid_Fire;
			}
		}
		if (Akimbo_Rapid_Fire) {
			if(get_ival(FIRE))
				combo_run(AkimboRapid);
		}
		//AKIMBO RAPID FIRE - END

		//FAST MELEE - START
	if(Fast_Melee) {
		if(get_ival(MELEE)) 
			combo_run(Melee_Fastly); }
		//FAST MELEE - END
		
		//QUICKSCOPE - START
	if(QuickScope) { 
	  if(QuickScope_Mode == AIM_FIRE) {
		if(trigger_toggle == TRUE && get_ival(RELOAD) || trigger_toggle == TRUE && get_ival(LETHAL)) {
	set_val(RELOAD, 0); set_val(LETHAL, 0);
		} else if(event_release(RELOAD) || event_release(LETHAL)) { 
		trigger_toggle = FALSE; } 
	if(event_press(ADS)) {
		trigger_toggle = TRUE; 
		} else if(get_ival(ADS) && get_ptime(ADS) > 140) { 
	set_val(SPRINT, 100); 
		} else if(trigger_toggle == TRUE && event_release(ADS)) { 
			combo_run(QuickScopee); }
	if(event_press(SPRINT)) {
		combo_run(Hold_Breath); }
		} else if(QuickScope_Mode == DBL_TAP) {
        if(event_release(ADS) && get_ptime(ADS) <= 250) {
            combo_run(QuickScopee); } 
		}
	}
		//QUICKSCOPE - END

		//SCOPESHOT - START
   if(ScopeShot) {
      if(get_ival(FIRE) && !get_ival(ADS)) {
          set_val(ADS,100); } 
		 }
		//SCOPESHOT - END
		
		//PRONE RISE - START
		if(Prone_Rise) {
            if (get_ival(FIRE))
                combo_run(ProneRise);
			}
	    //PRONE RISE - END
	    
	    //CHICKEN MODE - START
	if (Chicken_Mode) {
		if(get_ival(FIRE)) {
			combo_run(Strafe_Shot);
				combo_run(Dropping_Shot); }			
			} else {
			combo_stop(Strafe_Shot);
				combo_stop(Dropping_Shot); }
	  	//CHICKEN MODE - END	  
	  
		//BUNNY HOP - START
	if(B_Hop) {
		if (get_ival(JUMP) && get_ptime(JUMP) > 200) {
			combo_run(BUNNYHOP);
		} else {
		if(combo_running(BUNNYHOP))
			combo_stop(BUNNYHOP); }
		}
		//BUNNY HOP - END
		
	  	//HOLDBREATH - START
		if(holdbreath) {
		if(get_ival(ADS))
			set_val(SPRINT,100);

		if(get_ival(WALK) <-90 && get_ival(ADS) && get_ptime(ADS) > 200)
			combo_stop(CH);       

		if(event_press(ADS)) 
			combo_run(CH);

		if(get_ival(ADS) && get_lval(SPRINT)) 
			set_val(SPRINT,0);
		}
		//HOLDBREATH - END
		
		//HAIRTRIGGERS - START
	if(Hair_Triggers) {
		if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 0x64);
	
		if(get_ival(PS4_L2)> 10)
			set_val(PS4_L2, 0x64);
	}
		//HAIRTRIGGERS - END
		
		//SLIDECANCLE - START
		if(Slide_Cancel_Mode) {
	        if((get_ival(WALK) < -THRESHOLD) || (get_ival(WALK) > THRESHOLD) || (get_ival(STRAFE) < -THRESHOLD) || (get_ival(STRAFE) > THRESHOLD)) {
	            slide_enable = 0;
	        if(event_release(PRONE)) {
	                if (Slide_Cancel_Mode == 1) {
	                    slide_enable = 1;
	                }
	                else if (Slide_Cancel_Mode == 2) 
	                {
	                    if(((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))) {
	                        slide_enable = 1;
	                    }
	                }
	                else if (Slide_Cancel_Mode == 3) 
	                {
	                    slide_enable = 2;
	                }
	                else if (Slide_Cancel_Mode == 4) 
	                {
	                    if(((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))) {
	                        slide_enable = 2;
	                    }
	                }
	            }
	            
	            if(slide_enable)
	            {
	                if(slide_enable == 1)
	                    combo_run(CANCEL_SLIDE_MW);
	                else if(slide_enable == 2)
	                    combo_run(CANCEL_SLIDE_CW);        
	            }
	        }                
	    }
		//SLIDECANCLE - END
		
		//AUTOPING - START
		if(AutoPing) {
			if (Auto_Ping_Mode == TAP) {
				if(double_click(ADS))
					combo_run(AutoPingC); 
		} else if (Auto_Ping_Mode == ADSFIRE) {
				if(get_ival(ADS) && event_press(FIRE))
					combo_run(AutoPingC);
			}
		}
		//AUTOPING - END
		
		//SENS - START
  if (AimSensCorrections) {
    ads_grenade_sens = 100 - (in_game_menu_sens);
    ads_fire_sens    = 96  - (in_game_menu_sens);
    actual_sens      = 100;
    if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(LETHAL) && !get_ival(TACTICAL)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && !get_ival(FIRE)) {
      Sens = ads_grenade_sens;
    } else if (!get_ival(ADS) && get_ival(FIRE)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && get_ival(FIRE)) {
      Sens = ads_fire_sens;
    } else if (get_ival(TACTICAL) || get_ival(LETHAL)) {
      Sens = ads_grenade_sens;
    }
    if (isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) > 30) {
      if (Sens > 100) Sens = 100;
      sensitivity(AIM_X, NOT_USE, Sens);
      sensitivity(AIM_Y, NOT_USE, Sens);
		}
	}
	//SENS - END

		//AUTO BLOW - START
		if(Auto_Blow) {
		if(event_release(LETHAL))
		combo_run(BOOM);
	}
		//AUTO BLOW - END

		//EASY PRONE - START
    if(toggle_easyprone) {
        if(get_ival(FIRE) && event_press(Easy_Prone_Button)) {
            combo_run(easy_prone);
        }
        if(get_ival(Easy_Prone_Button) && event_press(FIRE)) {
            combo_run(easy_prone);
        }
        if(get_ival(Easy_Prone_Button)&& event_release(FIRE)) {
            combo_run(get_up);
        }
        if(get_ival(FIRE)&& event_release(Easy_Prone_Button)) {
            combo_run(get_up);
        }
    }
		//EASY PRONE - END

		//JumpShot - START
 		if(QUICK_TOGGLES) {
	    if(get_ival(ADS) && event_press(JUMP_SHOT_BUTTON)) {
	    	combo_run (vibrate);
	        combo_restart(BLINK1);
			JumpShot = !JumpShot;
			}
		}
	    if(JumpShot) {  
			if(get_ival(FIRE)) combo_run(JS);
		}
		//JumpShot - END
		
		//RUMBLE BLOCK - START
		if(Rumble_Block) {
			block_rumble();
		}
		//RUMBLE BLOCK - END

		if(get_val(ADS) && event_press(MENU_OPEN_BUTTON)) {
			ZS = 1;
			combo_stop(RGB);
			display = TRUE;
		}
		combo_run(RGB); 
	}
	niko_check();
	if(ZS == 1) {
		block_all_inputs();
		block_all_outputs();

		if(mod == 1) {
		   if(event_press(PS4_CROSS)) {    

		      EviL_AR ++;

		      if(EviL_AR  > 2) EviL_AR = 0;
		      if(EviL_AR  < 0) EviL_AR = 2;
		      display = TRUE; 
		   }
	    }
		if(mod == 8) { 
		if(event_press(PS4_CROSS)) {    

		      Slide_Cancel_Mode ++;

		      if(Slide_Cancel_Mode  > 4) Slide_Cancel_Mode = 0;
		      if(Slide_Cancel_Mode  < 0) Slide_Cancel_Mode = 4;
		      display = TRUE; 
		   }
	    }
		if(event_press(PS4_CROSS) && (mod == 2))Sweet_EviL_Bot = !Sweet_EviL_Bot
		if(event_press(PS4_CROSS) && (mod == 3))Sweet_EviL_Steady_Aim = !Sweet_EviL_Steady_Aim
		if(event_press(PS4_CROSS) && (mod == 4))AimSensCorrections = !AimSensCorrections
		if(event_press(PS4_CROSS) && (mod == 5))Rapid_Fire_Toggle = !Rapid_Fire_Toggle
		if(event_press(PS4_CROSS) && (mod == 6))auto_rf = !auto_rf
		if(event_press(PS4_CROSS) && (mod == 7))Akimbo_Rapid_Fire = !Akimbo_Rapid_Fire
		if(event_press(PS4_CROSS) && (mod == 9))JumpShot = !JumpShot
		if(event_press(PS4_CROSS) && (mod == 10))ScopeShot = !ScopeShot
		if(event_press(PS4_CROSS) && (mod == 11))QuickScope = !QuickScope
		if(event_press(PS4_CROSS) && (mod == 12))Fast_Melee = !Fast_Melee
		if(event_press(PS4_CROSS) && (mod == 13))Strafe_Toggle = !Strafe_Toggle
		if(event_press(PS4_CROSS) && (mod == 14))DropShot = !DropShot
		if(event_press(PS4_CROSS) && (mod == 15))holdbreath = !holdbreath
		if(event_press(PS4_CROSS) && (mod == 16))AutoPing = !AutoPing
		if(event_press(PS4_CROSS) && (mod == 17))Prone_Rise = !Prone_Rise
		if(event_press(PS4_CROSS) && (mod == 18))Chicken_Mode = !Chicken_Mode
		if(event_press(PS4_CROSS) && (mod == 19))B_Hop = !B_Hop
		if(event_press(PS4_CROSS) && (mod == 20))Smart_Grenade = !Smart_Grenade
		if(event_press(PS4_CROSS) && (mod == 21))Auto_Blow = !Auto_Blow
		if(event_press(PS4_CROSS) && (mod == 22))toggle_easyprone = !toggle_easyprone
		if(event_press(PS4_CROSS) && (mod == 23))Bigg_Man_Little_Dance = !Bigg_Man_Little_Dance
		
		if(event_press(PS4_SQUARE) && mod == 14) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 11) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 6) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 5) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 4) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 3) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 2) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 1) {
			ZS = 2;
			display = TRUE;
		}

		if(mod == 1) {
			if(EviL_AR) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 2) {
			if(Sweet_EviL_Bot) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 3) {
			if(Sweet_EviL_Steady_Aim) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 4) {
			if(AimSensCorrections) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 5) {
			if(Rapid_Fire_Toggle) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 6) {
			if(Akimbo_Rapid_Fire) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 7) {
			if(Akimbo_Rapid_Fire) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 8) {
			if(Slide_Cancel_Mode) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 9) {
			if(JumpShot) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 10) {
			if(ScopeShot) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 11) {
			if(QuickScope) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 12) {
			if(Fast_Melee) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 13) {
			if(Strafe_Toggle) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 14) {
			if(DropShot) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 15) {
			if(holdbreath) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
	    if(mod == 16) {
			if(AutoPing) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 17) {
			if(Prone_Rise) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 18) {
			if(Chicken_Mode) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 19) {
			if(B_Hop) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 20) {
			if(Smart_Grenade) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 21) {
			if(Auto_Blow) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 22) {
			if(toggle_easyprone) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 23) {
			if(Bigg_Man_Little_Dance) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(event_press(PS4_UP)) {
			mod --;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			mod ++;
			display = TRUE;
		}
		if(mod > NumofMods) mod = 1
		if(mod < 1) mod = NumofMods
		
		if(event_press(PS4_CIRCLE)) {
			ZS = 0;
			save();
			frame = -1;
			combo_restart(niko);
			display = TRUE;
		}
	}
	if(ZS == 2) {
		block_all_inputs();
		block_all_outputs();

		if(ptime != 100)
			ptime += get_rtime();

		if(event_press(PS4_CIRCLE) && (mod ==  14 || 11 || 6 || 5 || 4 || 3 || 2 || 1)) {
			ZS = 1;
			display = TRUE;
		}
		if(event_press(PS4_UP)) {
			sel ++ ;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			sel -- ;
			display = TRUE;
		}
		if(sel < 0) sel = 0
		if(sel > 2) sel = 2

	if(AIM_ASSIST < 0) AIM_ASSIST = 0;
	if(AIM_ASSIST > 50) AIM_ASSIST = 50;
	if(AIM_SLOPE < 0) AIM_SLOPE = 0;
	if(AIM_SLOPE > 50) AIM_SLOPE = 50;
	if(RESOLUTION < 0) RESOLUTION = 0;
	if(RESOLUTION > 22) RESOLUTION = 22;
	if(AR_STRENGTH < -100) AR_STRENGTH = -100;
	if(AR_STRENGTH > 100) AR_STRENGTH = 100;
	if(DropShotSpeed < 1) DropShotSpeed = 1;
	if(DropShotSpeed > 100) DropShotSpeed = 100;
	if(in_game_menu_sens < 1) in_game_menu_sens = 1;
	if(in_game_menu_sens > 20) in_game_menu_sens = 20;
	if(rapid_fire_speed < 1) rapid_fire_speed = 1;
	if(rapid_fire_speed > 15) rapid_fire_speed = 15;
	if(QS_Delay < 1) QS_Delay = 1;
	if(QS_Delay > 1000) QS_Delay = 1000;
	if(Fire_Rate_Timer < 1) Fire_Rate_Timer = 1;
	if(Fire_Rate_Timer > 1000) Fire_Rate_Timer = 1000;

		if(mod == 1) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				AR_STRENGTH = AR_STRENGTH + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				AR_STRENGTH = AR_STRENGTH - 0x01;
				display = TRUE;
			}
		}
		if(mod == 2) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				AIM_ASSIST = AIM_ASSIST + 2;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				AIM_ASSIST = AIM_ASSIST - 2;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				AIM_SLOPE = AIM_SLOPE + 2;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				AIM_SLOPE = AIM_SLOPE - 2;
				display = TRUE;
			}
		}
		if(mod == 3) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				RESOLUTION = RESOLUTION + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				RESOLUTION = RESOLUTION - 0x01;
				display = TRUE;
			}
		}
		if(mod == 4) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				in_game_menu_sens = in_game_menu_sens + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				in_game_menu_sens = in_game_menu_sens - 0x01;
				display = TRUE;
			}
		}
		if(mod == 5) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				rapid_fire_speed = rapid_fire_speed + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				rapid_fire_speed = rapid_fire_speed - 0x01;
				display = TRUE;
			}
		}
		if(mod == 6) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				Fire_Rate_Timer = Fire_Rate_Timer + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				Fire_Rate_Timer = Fire_Rate_Timer - 0x01;
				display = TRUE;
			}
		}
		if(mod == 11) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				QS_Delay = QS_Delay + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				QS_Delay = QS_Delay - 0x01;
				display = TRUE;
			}
		}
		if(mod == 14) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				DropShotSpeed = DropShotSpeed + 0x01;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				DropShotSpeed = DropShotSpeed - 0x01;
				display = TRUE;
				}
			}
		}
	}
	if(ss) {
		if(!KS) {
		if(ZS == 0) text1()
		if(ZS == 1) text2()
		rect_oled(0, 0, 128, 64, 0, 1);
    	c_b += get_rtime();
		ssaver()
    	if(c_b >= 9000) {
      		cls_oled(0);
      		c_b = 0;
      		ss = FALSE;
			}
		}
	}
	if(display) {
		cls_oled(0);
		c_b = 0;
		if(!KS) {
		if(ZS == 0) {
			printf (center_x(get_chars(0), OLED_FONT_SMALL_WIDTH),18, 0,1,t_text[0]);
		}

		if(ZS == 1) {
			printf (center_x(get_chars(mod), OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL_HEIGHT),0,1,t_text[mod]);

		if(mod == 1) {
		     if (EviL_AR == 0)
		         printf(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
			 else if (EviL_AR == 1)
				 printf(center_x(sizeof(RUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, RUMBLE[0]);
			else if (EviL_AR == 2)
				 printf(center_x(sizeof(DYNAMIC) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DYNAMIC[0]);
			}

		if(mod == 8) {
		     if (Slide_Cancel_Mode == 0)
		         printf(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
			 else if (Slide_Cancel_Mode == 1)
				 printf(center_x(sizeof(MWSTANDARD) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWSTANDARD[0]);
			 else if (Slide_Cancel_Mode == 2)
				 printf(center_x(sizeof(MWRUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWRUMBLE[0]);
			 else if (Slide_Cancel_Mode == 3)
				 printf(center_x(sizeof(CWSTANDARD) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWSTANDARD[0]);
			 else if (Slide_Cancel_Mode == 4)
				 printf(center_x(sizeof(CWRUMBLE) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWRUMBLE[0]);
			}
		}
		if(ZS == 2) {
			printf (center_x(get_chars(mod), OLED_FONT_SMALL_WIDTH),3, 0, 1, t_text[mod]);

			if(mod == 14) {
				number_to_string(DropShotSpeed,FindDigits(DropShotSpeed), 25);
			}
			if(mod == 11) {
				number_to_string(QS_Delay,FindDigits(QS_Delay), 25);
			}
			if(mod == 6) {
				number_to_string(Fire_Rate_Timer,FindDigits(Fire_Rate_Timer), 25);
			}
			if(mod == 5) {
				number_to_string(rapid_fire_speed,FindDigits(rapid_fire_speed), 25);
			}
			if(mod == 4) {
				number_to_string(in_game_menu_sens,FindDigits(in_game_menu_sens), 25);
			}
			if(mod == 3) {
				number_to_string(RESOLUTION,FindDigits(RESOLUTION), 25);
			}
			if(mod == 2) {
				number_to_string(AIM_ASSIST,FindDigits(AIM_ASSIST), 22);
				number_to_string(AIM_SLOPE,FindDigits(AIM_SLOPE), 42);
			}
			if(mod == 1) {
				number_to_string(AR_STRENGTH,FindDigits(AR_STRENGTH), 25);
			}
			if(sel == 2)line_oled(30, 20, 40, 20, 3, 1)
			if(sel == 1)line_oled(30, 33, 40, 33, 3, 1)
			if(sel == 0)line_oled(30, 46, 40, 46, 3, 1)
			}
		} else {
		rect_oled(0, 0, 128, 64, 0, 1);
		printf (center_x(get_chars(11), OLED_FONT_SMALL_WIDTH), 34, 0, 1, t_text[31]);
		}
		rect_oled(0, 0, 128, 64, 0, 1);
		ss = TRUE;
		display = FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
combo RGB {
	wait(10);
	set_rgb(COLOUR, COLOUR[1], COLOUR[2]);
	COLOUR[DEC] -= 1; 
	COLOUR[INC] += 1;
	if (!COLOUR[DEC]) { 
	INC = (INC + 1) % 3; 
	DEC = (DEC + 1) % 3; }
}
combo BUNNYHOP {
    set_val(JUMP, 100);
    wait(30);
    set_val(JUMP, 0);
    wait(30);
    set_val(JUMP, 100);
    wait(30);
    set_val(JUMP, 0);
    wait(30);
}
combo QuickScopee { 
	set_val(FIRE,0); 
	set_val(SPRINT,100);
	set_val(ADS,100); 
	wait(QS_Delay); 
	set_val(SPRINT,100);
	set_val(ADS,100); 
	set_val(FIRE, 100); 
	wait(50); 
} 
combo Hold_Breath { 
	set_val(SPRINT, 0);
	wait(80);
	set_val(SPRINT, 100); 
	wait(100); 
	set_val(SPRINT, 0); 
	wait(80); 
}
combo Cook_And_Release_Grenade() {
	if(cooktime == smartgrenade_throwdelay) set_val(LETHAL, 100);
	wait(cooktime);
	set_val(LETHAL, 0);
	wait(100);
}
combo AutoPingC {
	set_val (PS4_UP,100);
	wait(Auto_Ping_Press_Value);
	set_val(PS4_UP,0);
	wait(Auto_Ping_Press_Value);
	set_val(PS4_UP,100);
	wait(Auto_Ping_Press_Value);
	set_val(PS4_UP,0);
	wait(Auto_Ping_Press_Value);
}
combo Rapid_Fire {
	set_val(FIRE, 100);
	wait(20 * rapid_fire_speed);
	set_val(FIRE, 0);
	wait(10 * rapid_fire_speed - wait_time_correction);
	set_val(FIRE, 0); 
}
combo RAPID_FIRE {
	set_val(FIRE, 100);
	wait(wtime);
	set_val(FIRE, 0);
	wait(wtime);
}
combo DANCE {
	set_val(PRONE, 100);
	wait(30);
	wait(60);
	set_val(PRONE, 0);
	wait(30);
	wait(60);
	set_val(PS4_UP, 100);
	wait(30);
	wait(60);
	set_val(PS4_UP, 0);
	wait(30);
	wait(60);
}
combo BOOM   {
    wait(Time_Blow);
	set_val(RELOAD, 100);
	wait(60); 
	set_val(RELOAD, 0);
	wait(60);
	set_val(RELOAD, 100);
	wait(60);
	set_val(RELOAD, 0)
}
combo AkimboRapid {
    set_val(FIRE, 100);
    set_val(ADS, 100);
    wait(40);
    set_val(FIRE,0);
    set_val(ADS,0);
	wait(40);
}
combo vibrate {     
	set_rumble(RUMBLE_A, 85);      
	wait(225);                         
	reset_rumble();
}
combo BLINK1 {
	if(Prone_Rise) set_rgb (0,255,0);
	else  set_rgb (255,0,0);
	wait(2000);
	set_rgb (0,0,0);
}
combo ProneRise {
	set_val(PRONE, 100);
	wait(560);
	set_val(PRONE, 0);
	wait(150);
	set_val(JUMP, 100);
	wait(560);
	set_val(JUMP, 0);
	wait(150);
}
combo BLINK {                                       
	if(Rapid_Fire_Toggle) set_rgb (0,255,0); 
	else  set_rgb (255,0,0); 
	wait(2000);
	set_rgb (0,0,0); 
}
combo Strafe {
    set_val(STRAFE, XY_Val (STRAFE, 100));
    wait(Strafe_Wait);
    wait(50);
    set_val(STRAFE, XY_Val (STRAFE, 100 * -1));
    wait(Strafe_Wait);
    wait(50);
}
combo BLIINK {                                       
	if(DropShot) set_rgb (0,255,0); 
	else  set_rgb (255,0,0); 
	wait(2000);
	set_rgb (0,0,0); 
}
combo Strafe_Shot {
    set_val(STRAFE, 100);
    wait(300);
    wait(10);
    set_val(STRAFE, -100);
    wait(300);
    wait(10);
}
combo Dropping_Shot {
	set_val(PRONE,100);
	wait(random(30,100));
	wait(random(60,250));
	set_val(PRONE,100);
}
combo Melee_Fastly {
	set_val(MELEE, 100);
	wait(40);
	set_val(MELEE, 0);
	wait(30);  
}
combo BLIIINK {                                       
	if(Akimbo_Rapid_Fire) set_rgb (0,255,0); 
	else  set_rgb (255,0,0); 
	wait(2000);
	set_rgb (0,0,0); 
}
 combo CH {
	set_val(SPRINT,0);
	wait(60);
	set_val(SPRINT,100);
	wait(110);
	set_val(SPRINT,0);
	wait(110);
}
combo DroppShott {
	set_val(PRONE,100);
	wait(110);
	wait(DropShotSpeed);
	set_val(PRONE,100);
}
combo CANCEL_SLIDE_CW {
	set_val(PRONE, 100);
	wait(Slide_Cancel_Delay);
	set_val(PRONE, 0);
	wait(20);
	set_val(SPRINT, 0);
	set_val(ADS, 100);
	wait(10);
	set_val(ADS, 0);
	set_val(PRONE, 100);
	set_val(SPRINT, 100);
	wait(20);
	set_val(PRONE, 0);
	set_val(SPRINT, 0);
	wait(20);
}
combo CANCEL_SLIDE_MW {
	set_val(PRONE, 100);
	wait(Slide_Cancel_Delay);
	set_val(PRONE, 0);
	wait(60);
	set_val(PRONE, 100);
	wait(50);
	set_val(PRONE, 100);
	set_val(JUMP, 100);
	wait(60);
	set_val(PRONE, 0);
	set_val(JUMP, 100);
	wait(10);
	set_val(JUMP, 0);
}
combo easy_prone {
    set_val(PRONE, 100);
    wait(350);
}
combo get_up {
    set_val(JUMP, 100);
    wait(getupdelay)
}
combo JS {
	set_val(JUMP,100);
	wait(100);
	set_val(JUMP,0);
	wait(100);
}
combo niko {
	wait(20);
	image_oled(0, 10, color, FALSE, frames[frame]);
	frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function save() {
	set_pvar(SPVAR_1, EviL_AR);
	set_pvar(SPVAR_2, Sweet_EviL_Bot);
	set_pvar(SPVAR_3, Sweet_EviL_Steady_Aim);
	set_pvar(SPVAR_4, AimSensCorrections);
	set_pvar(SPVAR_5, Rapid_Fire_Toggle);
	set_pvar(SPVAR_6, auto_rf);
	set_pvar(SPVAR_7, Akimbo_Rapid_Fire);
	set_pvar(SPVAR_8, Slide_Cancel_Mode);
	set_pvar(SPVAR_9, JumpShot);
	set_pvar(SPVAR_10, ScopeShot);
	set_pvar(SPVAR_11, QuickScope);
	set_pvar(SPVAR_12, Fast_Melee);
	set_pvar(SPVAR_13, Strafe_Toggle);
	set_pvar(SPVAR_14, DropShot);
	set_pvar(SPVAR_15, holdbreath);
	set_pvar(SPVAR_16, AutoPing);
	set_pvar(SPVAR_17, Prone_Rise);
	set_pvar(SPVAR_18, Chicken_Mode);
	set_pvar(SPVAR_19, B_Hop);
	set_pvar(SPVAR_20, Smart_Grenade);
	set_pvar(SPVAR_21, Auto_Blow);
	set_pvar(SPVAR_22, toggle_easyprone);
	set_pvar(SPVAR_23, Bigg_Man_Little_Dance);

	set_pvar(SPVAR_24, AIM_ASSIST);
	set_pvar(SPVAR_25, AIM_SLOPE);
	set_pvar(SPVAR_26, RESOLUTION);
	set_pvar(SPVAR_27, AR_STRENGTH);
	set_pvar(SPVAR_28, DropShotSpeed);
	set_pvar(SPVAR_29, in_game_menu_sens);
	set_pvar(SPVAR_30, rapid_fire_speed);
	set_pvar(SPVAR_31, QS_Delay);	
	set_pvar(SPVAR_32, Fire_Rate_Timer);
}
function load_pvar() {
	EviL_AR	 				= get_pvar(SPVAR_1,  0, 2, 	0);
	Sweet_EviL_Bot			= get_pvar(SPVAR_2,  0, 1, 	0);
	Sweet_EviL_Steady_Aim	= get_pvar(SPVAR_3,  0, 1, 	0);
	AimSensCorrections    	= get_pvar(SPVAR_4,  0, 1, 	0);
	Rapid_Fire_Toggle 		= get_pvar(SPVAR_5,  0, 1, 	0);
	auto_rf			 		= get_pvar(SPVAR_6,  0, 1, 	0);
	Akimbo_Rapid_Fire 		= get_pvar(SPVAR_7,  0, 1, 	0);
	Slide_Cancel_Mode 		= get_pvar(SPVAR_8,  0, 4, 	0);
	JumpShot 				= get_pvar(SPVAR_9,  0, 1, 	0);
	ScopeShot 				= get_pvar(SPVAR_10, 0, 1, 0);
	QuickScope 	        	= get_pvar(SPVAR_11, 0, 1, 	0);
	Fast_Melee 				= get_pvar(SPVAR_12, 0, 1, 	0);
	Strafe_Toggle 			= get_pvar(SPVAR_13, 0, 1, 	0);
	DropShot	 			= get_pvar(SPVAR_14, 0, 1, 	0);
	holdbreath 				= get_pvar(SPVAR_15, 0, 1, 	0);
	AutoPing 				= get_pvar(SPVAR_16, 0, 1, 	0);
	Prone_Rise 				= get_pvar(SPVAR_17, 0, 1, 	0);
	Chicken_Mode 			= get_pvar(SPVAR_18, 0, 1, 	0);
	B_Hop 					= get_pvar(SPVAR_19, 0, 1, 	0);
	Smart_Grenade			= get_pvar(SPVAR_20, 0, 1, 	0);
	Auto_Blow				= get_pvar(SPVAR_21, 0, 1, 	0);
	toggle_easyprone   		= get_pvar(SPVAR_22, 0, 1, 	0);
	Bigg_Man_Little_Dance   = get_pvar(SPVAR_23, 0, 1, 	0);

	AIM_ASSIST 			    = get_pvar(SPVAR_24,    0,    50,   12);
	AIM_SLOPE 			    = get_pvar(SPVAR_25,    0,    50,    8);
	RESOLUTION 				= get_pvar(SPVAR_26,    0,    22,    8); 
	AR_STRENGTH 			= get_pvar(SPVAR_27, -100,   100,   30);
	DropShotSpeed 			= get_pvar(SPVAR_28,    0,   100,   40);
	in_game_menu_sens 		= get_pvar(SPVAR_29,    0,    20,   10);
	rapid_fire_speed 		= get_pvar(SPVAR_30,    0,    15,    5);
	QS_Delay		 		= get_pvar(SPVAR_31,    0,  1000,  285);
	Fire_Rate_Timer 		= get_pvar(SPVAR_32,    0,  1000,  111);
}
function reset_script_var() {
	EviL_AR     			=   0;
	Sweet_EviL_Bot  		=   0;
	Sweet_EviL_Steady_Aim   =   0;
	AimSensCorrections  	=   0;
	Rapid_Fire_Toggle   	=   0;
	auto_rf					=	0;
	Akimbo_Rapid_Fire   	=   0;
	Slide_Cancel_Mode 	    =   0;
	JumpShot 	        	=   0;
	ScopeShot           	=   0;
	QuickScope          	=   0;
	Fast_Melee          	=   0;
	Strafe_Toggle       	=   0;
	DropShot            	=   0;
	holdbreath 		    	=   0;
	AutoPing 		    	=   0;
	Prone_Rise          	=   0;
	Chicken_Mode	    	=   0;
	B_Hop 		        	=   0;
	Smart_Grenade 	    	=   0;
	Auto_Blow   	    	=   0;
	toggle_easyprone    	=   0;
	Bigg_Man_Little_Dance   =   0;

	AIM_ASSIST            	=   12;
	AIM_SLOPE          		=    8;
	RESOLUTION              =    8;
	AR_STRENGTH      		=   30;
	DropShotSpeed       	=   40;
	in_game_menu_sens   	=   10;
	rapid_fire_speed 		=    5;
	Fire_Rate_Timer		   	=  111;
	QS_Delay 				=  285;
}
function block_all_outputs() {
	set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 );    set_val(PS4_SQUARE, 0 );
}
function main_button_pressed(except) {
	if(except != -1 && event_press(except))
		return FALSE;
	if (event_press(LETHAL))
		return TRUE;
	return FALSE;
}
function niko_check() {
	if(!combo_running(niko) && frame <= 15)
	combo_restart(niko);
}
function double_click(button) {
    if (double__tap[button] >= 0) {
        double__tap[button] += get_rtime();
        if (double__tap[button] > 450)
            double__tap[button] = -1;
    }
    if (event_release(button) && get_ptime(button) <= 200) {
        if (double__tap[button] < 0) {
            double__tap[button] = 0;
        } else {
            double__tap[button] = -1;
            return 1;
        }
    }
    return 0;
}
function XY_Val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < 25)
    return f_val;
    return get_val(f_axis);
}
int i;
int c,c_val;
const uint8 ASCII_NUM[] = 
  	{ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
function get_rumble_evil_ar() {	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH);
	}

	return 0;
}
function get_dynamic_evil_ar(_C_RX, _C_RY, _AR_STRENGTH) {	
	_ret = (get_ptime(FIRE) / (160));
	_var = 	(AR_STRENGTH / 2) + AR_STRENGTH;				
	
	if(_ret > _var)
		_ret = _var;
						
	_ret = _ret +  _AR_STRENGTH - ((abs(_C_RX * _C_RX) + abs(_C_RY * _C_RY)) / 1000) ;

	return _ret;
}
function get_steady_aim( _axis, _resolution) {
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}
function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval) {
	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}
function get_mvt_direction( _val, _lval) {
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}
function sin(angle) {   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        _ret = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
       	_ret = inv(Lookup_Table[360 - angle]);      
    }
    
    return _ret;
}
function cos(angle) {   
    if(angle <= 90)
    {             
        _ret = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        _ret = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
        _ret = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
        _ret = (Lookup_Table[angle - 270]);       
    }
    
    return _ret;
}
function get_polar_coordinate(radius, coef) {
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}
function number_to_string(f_val, f_digits, f_pos) {
	i = 1;
	c_val = 10000;
	if (f_val < 0) {
		putc_oled(i, 45);
		i += 1;
		f_val = abs(f_val);
	}
	for (c = 5; c >= 1; c--) {
		if (f_digits >= c) {
			putc_oled(i, ASCII_NUM[f_val / c_val]);
			f_val = f_val % c_val;
			i += 1;
			if (c == 4) {
				putc_oled(i, 44);
				i += 1;
			}
		}
		c_val /= 10;
	}
    puts_oled(center_x(i - 1, OLED_FONT_MEDIUM_WIDTH), f_pos, OLED_FONT_MEDIUM, i - 1, OLED_WHITE);
}
function FindDigits( f_number) {
	f_number = abs(f_number);
	if (f_number / 10000 > 0)
		return 5;
	if (f_number / 1000 > 0)
		return 4;
	if (f_number / 100 > 0)
		return 3;
	if (f_number / 10 > 0)
		return 2;
	return 1;
}
const int16 Lookup_Table[] = { 0, 17, 34, 52, 69, 87, 104, 121, 139, 156, 173, 190, 207, 224, 241, 258, 275, 292, 309, 325, 342, 358, 374, 390, 406, 422, 438, 453, 469, 484, 500, 515, 529, 544, 559, 573, 587, 601, 615, 629, 642, 656, 669, 682, 694, 707, 719, 731, 743, 754, 766, 777, 788, 798, 809, 819, 829, 838, 848, 857, 866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 939, 945, 951, 956, 961, 965, 970, 974, 978, 981, 984, 987, 990, 992, 994, 996, 997, 998, 999, 999, 1000};
const image frames[] = { {23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 0x80, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 0x80, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 0x80, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x80, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 0x80, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xA0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x80, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x80, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0x80, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 0x80, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 0x80, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 0x80, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 0x80}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 0x80, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 0x80, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x80, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 0x80}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} }
define yy  = 2;
int x1 = 60,x2 = 68,x3 = 76,x4 = 84,x5 = 92,x6 = 100,x7 = 108,x8 = 116,x9 = 124,x10 = 132,x11 = 140,x12 = 148,x13 = 156,x14 = 164,x15 = 172,x16 = 180,x17 = 188,x18 = 196,x19 = 204,x20 = 212,x21 = 220,x22 = 228,x23 = 236,x24 = 244,x25 = 252,x26 = 260,x27 = 268,x28 = 276;
function text1() {
	putc_oled(1,ASCII_UPPER_M);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_D);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_W);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_A);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_F);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_A);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_B);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_Y);
	puts_oled(x17,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x18,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x19,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UNDERSCORE);
	puts_oled(x21,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x22,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_I);
	puts_oled(x23,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_K);
	puts_oled(x24,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_O);
	puts_oled(x25,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_L);
	puts_oled(x26,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_A);
	puts_oled(x27,yy,0,1,1);
	putc_oled(1,ASCII_LOWER_I);
	puts_oled(x28,yy,0,1,1);
	
	fall();
}
function text2() {
	putc_oled(1,ASCII_UPPER_P);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_X);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x17,yy,0,1,1);

	putc_oled(1,ASCII_SPACE);
	puts_oled(x18,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x21,yy,0,1,1);
	
	putc_oled(1,ASCII_SPACE);
	puts_oled(x22,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x23,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_D);
	puts_oled(x24,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x25,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x26,yy,0,1,1);

	rect_oled(x19 - 4,yy,9,9,0,1)
	rect_oled(x19 - 3,yy + 1,7,7,0,0)
	rect_oled(x19 + 5,yy,1,9,1,0)
	fall();
}
function fall() {
	x1--;x2--;x3--;x4--;x5--;x6--;x7--;x8--;x9--;x10--;
	x11--;x12--;x13--;x14--;x15--;x16--;x17--;x18--;x19--;x20--;
	x21--;x22--;x23--;x24--;x25--;x26--;x27--;x28--;
}
function center_x(f_chars,f_font) {
      return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function center_y(f_size) {
    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
function get_chars(x) {
      if (t_text[x + 1] != -1) return t_text[x + 1] - t_text[x] - 0x01;
      return sizeof(t_text) - t_text[x];
}
function ssaver() {
	line_oled(0,13,127,13,1,1)
	rect_oled(0, 0,15,14,1, 0)
	rect_oled(0, 0,15,14, 0,1)
	if(c_b < 1000) {
    	putc_oled(1,ASCII_DIGIT9);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 1000) {
    	putc_oled(1,ASCII_DIGIT8);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 2000) {
    	putc_oled(1,ASCII_DIGIT7);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 3000) {
    	putc_oled(1,ASCII_DIGIT6);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 4000) {
    	putc_oled(1,ASCII_DIGIT5);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 5000) {
    	putc_oled(1,ASCII_DIGIT4);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 6000) {
    	putc_oled(1,ASCII_DIGIT3);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b > 7000) {
    	putc_oled(1,ASCII_DIGIT2);
		puts_oled(4,3, 0,1,1);
	}
	if(c_b >= 8000) {
    	putc_oled(1,ASCII_DIGIT1);
		puts_oled(4,3, 0,1,1);
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | |S | S| _ | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/