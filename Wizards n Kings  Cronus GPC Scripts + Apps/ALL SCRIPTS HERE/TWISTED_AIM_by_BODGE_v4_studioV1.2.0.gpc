/* TWISTED_AIM_by_BODGE_VANGUARD_PACIFIC_v4_Working_in_StudioV1.2.0.0
Thanks to Sweet Evil for his awsome tracking,Thanks to SS_NICOLAI for his AimAssist,Thanks to Moderslife and Anus_Power,Thanks to Crescens for his Aim correctins,Thanks to TaylorDrift21 for his easy to use menu
Credits to all the Cronus Devs ;)
===========================================================
		  *** M e n u  N a v i g a t i o n ***
===========================================================
Enter Mod Menu             = Hold L2/LT & Press Options 
Exit Mod Menu              = Press Circle/B
Enter Edit Menu            = Press Cross/A
Exit Edit Menu             = Press Circle/B 
Enable/Disable Drive Mode  = Press ADS and Double Tap Right 
Change Profiles In ModMenu = Press TRIANGLE/Y 
Turn Mods ON/OFF           = Press UP/Down
Edit Mod Values            = Hold L2/LT & Press Left/Right
*///----KILL_SWITCH----\\

    define KILL_SWITCH_BUTTON = PS4_PS;    // Double Tap This Button To Activate & Deactivate Kill Switch
    define ProfileSync		  = PS4_CROSS;    // Hold ADS & Tap This Button To Resync Profiles
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
int minn = -174, maxx = 84;
int xy,yx,xyz,zyx;
 const int16 Lookup_Table[] ={
    0,   17,  34,  52,  69,  87,  104, 121, 139, 156, 
    173, 190, 207, 224, 241, 258, 275, 292, 309, 325,
    342, 358, 374, 390, 406, 422, 438, 453, 469, 484,
    500, 515, 529, 544, 559, 573, 587, 601, 615, 629,
    642, 656, 669, 682, 694, 707, 719, 731, 743, 754,
    766, 777, 788, 798, 809, 819, 829, 838, 848, 857,
    866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 
    939, 945, 951, 956, 961, 965, 970, 974, 978, 981,
    984, 987, 990, 992, 994, 996, 997, 998, 999, 999,
    1000
}
init {
mvt_direction = 1;
    UPDATE_TIME = REFRESH_RATE;
	MAX_RADIUS = PolarRadius/ModAngle;
    AA_RADIUS = MAX_RADIUS;
    RadialEffect = TRUE;
	if(INVERTED == 1)
		inverted = -1;
	else
		inverted = 1;
		
	angle = 90 * inverted;
	scan_angle = 90 * inverted;
Load(); 
 } 
	
main { 

xy = isqrt(2)/2;
yx = pow(3,xy);
        
       set_val(TRACE_1, TRACKING_STRENGTH3); 
       set_val(TRACE_2, yx);
       set_val(TRACE_3, angle4);
       set_val(TRACE_4, TrackingSize1);
       set_val(TRACE_5, Tracker1);
       set_val(TRACE_6, Tracker2);
       vm_tctrl(VmSpeed);
       ActivateAllButtons();
       Buttons(Buttons); 
       Menu();

if(AIMsens)
{
RX_max = max(RX_max, abs(get_ival(PS4_RX))+ 2);
RY_max = max(RY_max, abs(get_ival(PS4_RY))+ 2);
LX_max = max(LX_max, abs(get_ival(PS4_LX))+ 2);
LY_max = max(LY_max, abs(get_ival(PS4_LY))+ 2);
RX_max = min(RX_max, LXRX_min);
RY_max = min(RY_max, LXRX_min);
LX_max = min(LX_max, LXRX_min);
LY_max = min(LY_max, LXRX_min);
AIMsens--;
RX_max = max(RX_max, RY_max);
LX_max = max(LX_max, LY_max);
}
else
{  

if(!ModMenu && !EditMenu) 
		{
	    	if(ToggleBlockRumble) 
	        {
				block_rumble();
	        } 
	     	deadzone(ADS,FIRE,99,99);
	     	if (ProfileButton)
			{
			if(event_release(PS4_TRIANGLE) && get_ptime(PS4_TRIANGLE) <= 380)
			{
				SelectedProfileIdx =!SelectedProfileIdx;
				if(SelectedProfileIdx)
				ProfileIdx = 1;
				else 
				ProfileIdx = 0;
				if (ModMenu) 
	    		DisplayMenu  = TRUE; 
	        	else
	            DisplayTitle = TRUE;
			}
			if(get_val(ADS) && event_press(ProfileSync))
			{
			    SelectedProfileIdx =!SelectedProfileIdx;
			    if(SelectedProfileIdx)
			    ProfileIdx = 1;
			    else 
			    ProfileIdx = 0;
			    if(ModMenu) 
			    DisplayMenu  = TRUE; 
	            else
	            DisplayTitle = TRUE;	
			  }
			}		
if(get_ival(ADS) >10 && get_val(FIRE)>10){
sensitivity(PS4_RX,0,94); 
sensitivity(PS4_RY,0,94);}
aim_rx = get_ival(PS4_RX);
aim_ry = get_ival(PS4_RY);
aim_lx = get_ival(PS4_LX);
aim_ly = get_ival(PS4_LY);

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
if (Kill_Switch_Toggle) {
    if(double_click(KILL_SWITCH_BUTTON) && !ModMenu && !EditMenu) {
        KS = !KS
   //DriveMode
 if(KS  == 0){
 combo_run(KilllSwitch);
 combo_run(Blink);LedOn = 150;LedOff = 300;
 } 
 else if(KS  == 1){
 combo_run(Notify);c=2;b=0;
 combo_run(KilllSwitch);
 combo_run(RumbleOff);
    }
        }
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\    
    if(KS) {

if (AA_BOOSTER){
if(get_val(FIRE) > 25)
{
aim_lx += Get_polar(POL_RADIUS, sin(POL_ANGLE));
aim_ly += Get_polar(POL_RADIUS, cos(POL_ANGLE));
aim_lx *= 2;
aim_ly *= 2;
POL_ANGLE += POL_MAX;
POL_ANGLE = POL_ANGLE % 360;
}
else
{
POL_ANGLE = 0;
}
} 
 if (ProgressionAA [ProfileIdx]) {        
 if (get_ival(ADS) && get_val(FIRE)){
 RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin[ProfileIdx],ProgPowerMax[ProfileIdx],ProgPowerInc[ProfileIdx],RadFlow,1);
 AngleFlow = PolarFlow(AngleFlow,ProgWaitMin[ProfileIdx],ProgWaitMax[ProfileIdx],ProgWaitInc[ProfileIdx],AngFlow,2); }
if (get_ival(ADS) || get_ival(FIRE) && abs(get_ival(RX)) <= ProgRelease[ProfileIdx] && abs(get_ival(RY)) <= ProgRelease[ProfileIdx]) {
 combo_run(Progression);
  } else if (event_release(FIRE)){
 combo_stop(Progression);
  }
  }
if(PolarAssist [ProfileIdx]){
 T_RX = get_val(aim_rx);                                
 T_RY = get_val(aim_ry);
if(abs(get_val(aim_rx)) <= 8)
	 set_val(aim_rx, 0); 
if(abs(get_val(aim_ry)) <= 8)
	 set_val(aim_ry, 0);
if(ToggleADirection == TRUE){ 
 AngleDirection = (get_val(PS4_RX) > 0);}
 seAngle = ((seAngle + (mvt_direction * PolarAngle))%360);
 RightStick = isqrt(pow(T_RX,2) + pow(T_RY,2));
 ActualMagnitude = isqrt(pow(T_RX, 2) + pow(T_RY, 2));   
 MaxMagnitude = (ActualMagnitude < 100);
 StickRadius = (AdsRadius + 3);
 GetAngle = PolarABoost;
 angle = ((angle + (mvt_direction * PolarAngle))%360);
 Tracking = (Tracking + TrackingSpeed) % 360;
 if(ToggleResponseCurve == 0){
 CosAngle = DnamPolar[(angle + 270) % 360];  
 SinAngle = DnamPolar[angle % 360];
 CAngle = DnamPolar[(Tracking + 270) % 360];  
 SAngle = DnamPolar[Tracking % 360];}
 if(ToggleResponseCurve == 1){
 CosAngle = LinearArray[(angle + 270) % 360];  
 SinAngle = LinearArray[angle % 360];
 CAngle = LinearArray[(Tracking + 270) % 360];  
 SAngle = LinearArray[Tracking % 360];}
 if(Tracking1){
 if (get_val(FIRE)){
 Tracker1 = (TrackingSize1 * SAngle/100);
 Tracker2 = (TrackingSize1 * CAngle/100);
 }else{
 Tracker1 = (TrackingSize * SAngle/100);
 Tracker2 = (TrackingSize * CAngle/100);
 }}
if(get_ival(ADS) > 10 || get_ival(FIRE) > 10)
        {
    if((abs(get_val(PS4_RX)) < 10) * (abs(get_val(PS4_RY)) < 10))
		angle += angle + GetAngle;
		else
		angle += StickSpeed + GetAngle;
	if(FireBoost){
	if(get_ival(FIRE)> 10)
		{
		TwistedRumble = get_rumble(RumbleToUse());
		GetAngle = PolarABoost;
		combo_run(StickyOnFire);
					    
	    if(TwistedRumble > 10 && TwistedRumble < 90) 
	    {
	    	PolarStrength  = (PolarRBoost + TwistedRumble / 6); 
	    	TwistedRumble = 0;
	    }
	    if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    {
	    	GetShapes(PolarRBoost/2); 
	    	}
	    	else
	    	{
			GetShapes(PolarStrength/2); 	
			} }
			if(event_release(FIRE))
	    	{
	    	GetAngle = 0;
	    	combo_stop (StickyOnFire);
	    	} }
		if(ActualMagnitude < StickRadius)           
		    {
			SinAngle -= T_RX;                                                              
			CosAngle -= T_RY;
			}
			else
			{
				SinAngle = (SinAngle * (200 - ((abs(T_RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
				CosAngle = (CosAngle * (200 - ((abs(T_RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
			}
		if (get_ival(FIRE) > 10){
			GetShapes(PolarRadius);
			}
			else
			{
			GetShapes(AdsRadius);
			}
		  }
if((get_ival(FIRE)) && isqrt(abs(get_ival(T_RX)) * abs(get_ival(T_RX)) + abs(get_ival(T_RY)) * abs(get_ival(T_RY)))> DeadZone || (get_ival(ADS) || get_val(FIRE)) && isqrt(abs(get_ival(PS4_LX)) * abs(get_ival(PS4_LX)) + abs(get_ival(PS4_LY)) * abs(get_ival(PS4_LY)))> DeadZone)
		  {
	   if ((abs(get_val(PS4_RX)) < 15) * (abs(get_val(PS4_RY)) < 15))
		 seAngle = ((seAngle + (mvt_direction * StickSpeed))%360);
	     else
		 seAngle = ((seAngle + (mvt_direction * PolarAngle))%360);
	   if(RightStick > StickRadius) 
		 {
		 DoNotAtMePolar(POLAR_RS,seAngle,StickRadius);
		 }
	     else
		 {
		 DoNotAtMePolar(POLAR_RS,seAngle,PolarRadius);
		}
	  }
    PolarStrength = 0; 
  TwistedRumble = 0;					
 }
if((get_val(ADS) > 50) || (get_val(FIRE) > 50)){
if(isqrt(pow(aim_rx, 2) + pow(aim_ry, 2)) <= RX_max)
{
aim_rx = 0;
aim_ry = 0;
}
if(isqrt(pow(aim_lx, 2) + pow(aim_ly, 2)) <= LX_max)
{
aim_lx = 0;
aim_ly = 0;
}
if(SCANNING || Modulation || PolarAimAssist || _STEADY_AIM){
if(UPDATE_TIME >= REFRESH_RATE){					
	block(aim_rx, REFRESH_RATE);
	block(aim_ry, REFRESH_RATE);
				
RUMBLE = get_mvt_direction(aim_rx, C_RX);
				
	if(RUMBLE != 0)
	   mvt_direction = RUMBLE;
			  UPDATE_TIME = 0;	
              C_RX = aim_rx;
              C_RY = aim_ry;}
              else
{
UPDATE_TIME = 0;
UPDATE_TIME = REFRESH_RATE;
angle = 90 * inverted;
scan_angle = 90 * inverted;
AA_RADIUS = MAX_RADIUS;
TRACKING_BOT = track_00;
set_val(PS4_RX, aim_rx);
set_val(PS4_RY, aim_ry);
}}
if(SCANNING)
{
if(TRACKING_BOT == track_00)
{
TRACKING_BOT = track_01;
}
else if(TRACKING_BOT == track_01)
{
aim_rx += getTRACKING_STRENGTH(mvt_direction, 1);
TRACKING_BOT = track_02;
}
else if(TRACKING_BOT == track_02)
{
TRACKING_BOT = track_03;
}
else
{
aim_rx += getTRACKING_STRENGTH(mvt_direction, 0);
TRACKING_BOT = track_00;
}
}
   if(RapidFire[ProfileIdx]  == 1) 
	{
		HoldTime = 500 / RateOfFire[ProfileIdx]; 
	   	RestTime = HoldTime -get_rtime();
	    if(RestTime < 0) RestTime = 0;
		if(get_ival(FIRE))
		combo_run(RAPIDFIRE);
		else
		combo_stop(RAPIDFIRE);
		combo_run(BLINK);LedOn = 120;LedOff = 320;
	}
 if (Modulation [ProfileIdx]){
   SCAN_STRENGTH1 = SCAN_STRENGTH;	
   SCAN_STRENGTH2 = ((SCAN_STRENGTH1*2) /(SCAN_STRENGTH1/2) + SCAN_STRENGTH1);
   SCAN_STRENGTH3 = (((SCAN_STRENGTH1*6) /SCAN_STRENGTH1) + SCAN_STRENGTH1);
   angle3 = angle2 + 1;
   angle4 = angle2;
   if (get_ival(ADS) >10 && get_ival(FIRE) >10)
	   {
	   angle4 = angle3;
	   SCAN_STRENGTH1 = SCAN_STRENGTH2 - 1;
	   }
   else if (get_ival(ADS) >10)
       {
       angle4 = angle2;
       SCAN_STRENGTH1 = SCAN_STRENGTH1;
  	   }
   else if (get_ival(FIRE) >10)
	   {
	   angle4 = angle3 + 1;
	   SCAN_STRENGTH1 = SCAN_STRENGTH3 ;
	   }
  	   SCAN_STRENGTH4 = SCAN_STRENGTH1;
   
if(mvt_direction == 1)
       {
		aim_rx += Get_polar(SCAN_STRENGTH4, sin(scan_angle));
		aim_ry += Get_polar(SCAN_STRENGTH4, cos(scan_angle));
	   }
	else
	   {
		aim_rx += Get_polar(SCAN_STRENGTH4, cos(scan_angle));
		aim_ry += Get_polar(SCAN_STRENGTH4, sin(scan_angle));
	   }
	   scan_angle = (scan_angle + angle4) % 360;
	   }
if (RadiusEffect)
{ 
if(RadiusEffect == 0) TwistedMinRad = (1);
if(RadiusEffect == 1) TwistedMinRad = (3);	
if(RadiusEffect == 2) TwistedMinRad = (6);
if(RadiusEffect == 3) TwistedMinRad = (8);
if(RadiusEffect == 4) TwistedMinRad = (10);
}else {
TwistedMinRad = 1;}
if(ShapeSpeed){
VmSpeed = VmSpeed1;
if(ShapeSpeed == 1) VmSpeed1 = -6;
if(ShapeSpeed == 2) VmSpeed1 = -3;
if(ShapeSpeed == 3) VmSpeed1 =  0;
}else if(ShapeSpeed == 0){
			VmSpeed = -9;}
if(PolarAimAssist [ProfileIdx]) {
if(RadialEffect == FALSE)
{
AA_RADIUS -= 1;
if(AA_RADIUS < MAX_RADIUS)
RadialEffect = TRUE;
}
else
{
AA_RADIUS += 1;
RUMBLE = AA_RADIUS + 1;
if(RUMBLE >= PolarRadius)
RadialEffect = FALSE;
}
if (RadialEffect == TRUE)
{
if(mvt_direction == 1)
{
aim_rx += Get_polar(AA_RADIUS, sin(angle));
aim_ry += Get_polar(AA_RADIUS, cos(angle));
}
else
{
aim_rx += Get_polar(AA_RADIUS, cos(angle));
aim_ry += Get_polar(AA_RADIUS, sin(angle));
}
angle += angle_2;
}
else
{
RUMBLE = SeRadius/2;
if(mvt_direction == 1)
{
aim_rx += Get_polar(random(RUMBLE,SeRadius), sin(angle));
aim_ry += Get_polar(random(RUMBLE,SeRadius), cos(angle));
}
else
{
aim_rx += Get_polar(random(RUMBLE,SeRadius), cos(angle));
aim_ry += Get_polar(random(RUMBLE,SeRadius), sin(angle));
}
angle = ((angle + random((SeAngle/2),SeAngle))%360);
angle = angle % 360;
}}
if(_STEADY_AIM == TRUE)
{
aim_rx = getSTEADYaim(aim_rx, STEADY_RESOLUTION);
aim_ry = getSTEADYaim(aim_ry, STEADY_RESOLUTION);
} 
set_val(PS4_RX, clamp(aim_rx, -100, 100));
set_val(PS4_RY, clamp(aim_ry, -100, 100));
UPDATE_TIME += get_rtime();
}
set_val(PS4_LX, clamp(aim_lx, -100, 100));
set_val(PS4_LY, clamp(aim_ly, -100, 100));

if (STICKY_HEADSHOT){
if (get_val(ADS)){
tval= abs(abs(HEADSHOT_IN_Y) - abs(get_ival(HEADSHOT_STICK)))
if( tval >= 15 ) {
HEADSHOT_TIME=0
} else {
POINT_DIR_UP_V= HEADSHOT_TIME / abs(POINT_DIR_UP_D) }
if(POINT_DIR_UP_D <= 0) {
POINT_DIR_UP_V=inv(POINT_DIR_UP_V)
}
if(HEADSHOT_TIME >= 1) {
tval=get_val(HEADSHOT_STICK)
tval=clamp(tval + POINT_DIR_UP_V ,-100,100)
set_val(HEADSHOT_STICK,tval)
HEADSHOT_TIME=HEADSHOT_TIME - get_rtime()
if(HEADSHOT_STICK != PS4_RX && get_val(PS4_RX) <= 10) {
set_val(PS4_RX,0)
} else if(HEADSHOT_STICK != PS4_RY && get_val(PS4_RY) <= 10) {
set_val(PS4_RY,0)
}}
}} 
 if(get_val(ADS)){
   combo_run(ADS_FAST);
   }else{ 
if(((DriveMode == 1)||(!KS)) || combo_running(ADS_FAST)){
    combo_stop(ADS_FAST);}}
if(get_val(FIRE)){
    combo_run(SHOOT_SOONER);
    }else{ 
if(event_release(FIRE))
if(((DriveMode == 1)||(!KS)) || combo_running(SHOOT_SOONER))
    combo_stop(SHOOT_SOONER);}
 //DYNAMIC RECOIL  
if (DYNAMIC_RC [ProfileIdx]){
if (AR){
   if(get_val(ADS) && get_val(FIRE)){
   
    combo_run(AR);
 if(abs(get_val(RY)) > AR + 2 || abs(get_val(RX)) > AR + 2) {
combo_stop(AR);
}}}
     if(!get_lval(FIRE)) {
       ar_y = Starting_Anti_Recoil_Value;
       i_cnt = 0;
       i_num = 0;
    //--RT
    if(get_val(FIRE)) {
        if(!p_complete())  
            ar_y = p_val();
        else
            ar_y = Ending_Anti_Recoil_Value;
        //--set RY to anti recoil value
        set_val(RY,y_val());//30
    rumble = get_rumble(RumbleToUse());
	if (rumble > 10 && rumble < 90)
	{
	rc_rumble = (rumble - ar_y);
	rumble=0
	}
	if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B))
	    			    {
	set_val(POLAR_RY,polar_clamp(get_val(POLAR_RY) + y_val() * 327 ,get_ival(POLAR_RY)));
    set_val(POLAR_RX,polar_clamp(get_val(POLAR_RX), get_ival(POLAR_RX))); 
	    			    }
	    			    else
	    			    {
    set_val(POLAR_RY,polar_clamp(get_val(POLAR_RY) + rc_rumble * 327 ,get_ival(POLAR_RY)));
    set_val(POLAR_RX,polar_clamp(get_val(POLAR_RX), get_ival(POLAR_RX)));				    	
    }
  }
}
if  (ANTIRECOOIL) {
      if ((get_val(ADS) && get_val(FIRE)) && get_rumble(RUMBLE_A))
      {
      combo_run(RECOIL); } 
      if(abs(get_val(LY)) < 10 && abs(get_val(LX)) < 10 ){        
        set_val(LY,0);                                                
        set_val(LX,0); }                                           
      if(abs(get_val(RY)) < 10 && abs(get_val(RX)) < 10 ){         
        set_val(RY,0);                                                 
        set_val(RX,0);                                                
       }
       else
       {
      if(abs(get_val(RY)) > DEFAULT_VERTICAL + 2 || abs(get_val(RX)) > DEFAULT_VERTICAL + 2) {
        combo_stop(RECOIL); 
        }  }}
        }
if (Anti_Recoil_Mod) {
if (get_ival(ADS) && get_ival(FIRE)){
		anti_recoil = get_val(RY) + ANTI_RECOIL_Vertical;
		if (anti_recoil > 100) anti_recoil = 100;
		set_val(RY, anti_recoil);
		anti_recoil_H = get_val(RX) + ANTI_RECOIL_Horizontal;
		if (anti_recoil_H > 100) anti_recoil_H = 100;
		set_val(RX, anti_recoil_H);
	}}
if(PolarAssist == 0){
VmSpeed = (-9);} 
if(aim_sens_corrections) {
	
	if(ToggleResponseCurve == 1){
	//if(get_val(ADS) || get_val(FIRE)) {
    ads_fire_sens = 100      - (in_game_menu_sens - 1);
    hip_fire_sens = 100      - (in_game_menu_sens + 4);
    ads_sens = 100           - (in_game_menu_sens - 2);      
    gen_sens = 97;
    }else{
    if(ToggleResponseCurve == 0)
    ads_fire_sens = 100      - (in_game_menu_sens - in_game_menu_sens + 4);
    hip_fire_sens = 100      - (in_game_menu_sens + 2);
    ads_sens = 100           - (in_game_menu_sens - in_game_menu_sens + 3);      
    gen_sens = 99;
    }
    if(!get_val(ADS) && !get_val(FIRE)) { 
    Sens=gen_sens;}
    else if(get_val(ADS) && !get_val(FIRE)) { 
    Sens=ads_sens;}    
    else if(!get_val(ADS) && get_val(FIRE)) { 
    Sens=hip_fire_sens;}
    else if(get_val(ADS) && get_val(FIRE)) { 
    Sens=ads_fire_sens;}

    if(RightStick > PolarRadius) {
    if(Sens > 100) Sens = 100;}
    sensitivity(RX, NOT_USE, Sens);
    sensitivity(RY, NOT_USE, Sens);
    }
//} 
if(BUNNY_HOP) {
if (get_ival(JUMP) && get_ptime(JUMP) > 350){
combo_run(BUNNYHOP);}
else{
if(combo_running(BUNNYHOP))
combo_stop(BUNNYHOP);
}}
if(CancelSlide == 1 || CancelSlide == 2 || CancelSlide == 3)
    {
     if (get_val(PS4_LY) || get_val(PS4_LX))   
        { 
	if(CancelSlide == 1 && event_release(CROUCH)) 
	{
		combo_run(CancelSlideMW)
    }
    else if(CancelSlide == 2 && event_release(CROUCH))
    {
		combo_run(CancelSlideVG) 
	}
	else if(CancelSlide == 3 && event_release(CROUCH))
    {
		combo_run(CancelSlideCW) 
	}
	if(CancelSlide == 1 && combo_running(CancelSlideMW) && (get_val(ADS) && event_release(CROUCH) && get_ptime(CROUCH) > 450))
		combo_stop(CancelSlideMW)
	if(CancelSlide == 2 && combo_running(CancelSlideCW) && (get_val(ADS) && event_release(CROUCH) && get_ptime(CROUCH) > 450))
		combo_stop(CancelSlideVG)
	if(CancelSlide == 3 && combo_running(CancelSlideCW) && (get_val(ADS) && event_release(CROUCH) && get_ptime(CROUCH) > 450))
		combo_stop(CancelSlideCW)
	}}
//--auto run 
  if (auto_run){
  if(auto_run == TRUE){
  AutoSprint = 1;}
  else
  if(auto_run == FALSE){
  AutoSprint = 0;}
  if (AutoSprint == 1 && !get_val(ADS) && !get_val(FIRE) && get_val(LY) < -95){       
  combo_run(SPRINT); }
  }
    //--reset weapon
  if (WeaponReset){   
if (event_press(PS4_L3)){
weapon_reset = TRUE;
combo_run(WeaponReset);
if (event_release(PS4_L3))
combo_stop(WeaponReset);
}
if (combo_running(WeaponReset) && get_val(ADS)||get_val(FIRE)||event_release(SWAP) && get_val(PS4_L3)){
weapon_reset = FALSE;
combo_stop(WeaponReset);
}}
if(sticky_aim_assist) {
if (JUICY_STICKY){
if(get_ival(ADS)){
 combo_run(STICKY_AIM);}
 else combo_stop(STICKY_AIM);}  
if (sticky_aim) {
if (get_val(FIRE)){ 
  combo_run(Sticky_AA);}
  else combo_stop(Sticky_AA);}
  }      
 if(holdbreath[ProfileIdx] == 1) { 
    if(get_val(ADS)) set_val(SPRINT, 100);
    if(get_val(ADS))
    combo_run(HOLD_BREATH);
    if(get_val(ADS) && get_ptime(ADS) > 250)
	combo_stop(HOLD_BREATH);
    if(event_release(ADS))
    combo_stop(HOLD_BREATH); 
    if(get_val(ADS) && get_lval(SPRINT)) 
	set_val(SPRINT, 0);
	} 
 if(HairTriggers) {
      deadzone (ADS, FIRE, 100, 100); 
      }
if(AimSens){
    if(!get_val(ADS) && !get_val(FIRE)) { 
    USE_SENS=GEN_SENS;}
    else if(get_val(ADS) && !get_val(FIRE)) { 
    USE_SENS=ADS_SENS;}    
    else if(!get_val(ADS) && get_val(FIRE)) { 
    USE_SENS=FIRE_SENS;}
    else if(get_val(ADS) && get_val(FIRE)) { 
    USE_SENS=ADS_FIRE_SENS;}
    else if(get_val(FIRE)) { 
    USE_SENS=GRENADE_SENS;}
    sensitivity(RY,NOT_USE,USE_SENS);
    sensitivity(RX,NOT_USE,USE_SENS);
    }
if(ToggleFastMelee)
	{
if(get_val(MELEE))
	combo_run(FastMelee);
if(get_val(ADS) && event_press(MELEE) < 500)
	combo_stop(FastMelee);}
    if(use_cancel_plates)
    {
if(get_ival(SWAP) && get_ptime(SWAP) >= 450)
    cancel_plates = TRUE;
    if(cancel_plates)
    {
    cancel_plates_timer += get_rtime();
    if(cancel_plates_timer >= 3000) 
    {
    cancel_plates_timer = 0;
    cancel_plates = FALSE;
    }
if(event_press(ADS) || event_press(FIRE))
    combo_run(CANCEL_PLATES);
    }
  }
if(CancelReload)
	{
if(event_press(FIRE))
    FirstShotBeforeReload = TRUE; 
if(event_press(RELOAD) && FirstShotBeforeReload)
	{
	ReloadInProgress = TRUE;
	FirstShotBeforeReload = FALSE;
	}
if(get_val(RELOAD) && get_ptime(RELOAD) >= 250)
	{
	ReloadInProgress = FALSE;
	combo_stop(CancelReload);
	}
if(ReloadInProgress)
	ReloadTime += get_rtime();
	else 
	ReloadTime = 0;
if(ReloadTime > MaxReloadTime[ProfileIdx])
	ReloadInProgress = FALSE;
if(ReloadTime > 0 && ReloadTime <= MaxReloadTime[ProfileIdx] && event_press(FIRE))
	combo_run(CancelReload);
	}
   }
  } 
 }
}
//}// End Of Script \\
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\
int Position;   
/*
function Set_Val(Input,Output) { // DoGz Function \\ :) 

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
      return; 
}*/
 function polar_clamp( _val, _ival)
{
	RUMBLE = (_val / 10) + (_ival / 10);

	if (RUMBLE < -3276)
		return -32768;

	if (RUMBLE > 3276)
		return 32767;

	return _val + _ival;
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > Total_Anti_Recoil_Time[ProfileIdx] *10) {
    	//--avoid stack overflow
        i_cnt = Total_Anti_Recoil_Time[ProfileIdx] *10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
    	i_num = 0;
    	//--adjust ar_y 
    	ar_y += i_val;
    }
    return ar_y;
}
combo ADS_FAST {
    set_val(ADS,100);
    wait(40);
    wait(4000);
    }
combo SHOOT_SOONER {
    set_val(FIRE,100);
    wait(40);
    wait(4000);
    }
combo FastMelee {
set_val(MELEE, 100);
wait(35);
set_val(MELEE, 0);
wait(30);  
}
 combo CANCEL_PLATES { 
 set_val(MELEE,100);
 wait(20);
 cancel_plates = FALSE;
 cancel_plates_timer = 0; 
}
combo CancelReload {
set_val(SWAP,100);
wait(20);
wait(20)
set_val(SWAP,100);
wait(20);
ReloadInProgress = FALSE; }


combo RAPIDFIRE { 
wait(HoldTime);
set_val(FIRE, 0);
wait(RestTime);
}
/*combo Rapiid_Fire {
set_val (FIRE, 100); 
    wait(60);
    set_val(FIRE, 0); 
    wait(30);
    }*/
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(17);
wait(LedOff);
}

combo WeaponReset {
    set_val(SPRINT, 100);
    wait(60);
    set_val(SPRINT, 0);
    wait(30);
	set_val(SWAP, 100);
	wait(80); //60
	set_val(SWAP, 0);
	wait(30);
	wait(30);
	set_val(SWAP, 100);
	wait(80);
	set_val(SWAP, 0);
	set_val(SPRINT, 100);
	wait(40);
	set_val(SPRINT, 0);
}
   combo CancelSlideMW {
	wait(100);
	
	set_val(CROUCH, 100);
	wait(SlideDelay); //60
	set_val(CROUCH, 0);
	wait(50);
	set_val(CROUCH, 100);
	wait(40);
	set_val(JUMP, 100);
	wait(SlideDelay);
	set_val(CROUCH, 0);
	wait(SlideDelay);
	set_val(JUMP, 0);
	set_val(SPRINT, 100);
	wait(30);
	set_val(SPRINT, 0);
	set_val(SPRINT, 100);
	wait(30);
	set_val(SPRINT, 0);
	wait(10);
	wait(10);
    }
combo CancelSlideVG {              
set_val(CROUCH, 100);          
wait(SlideDelay);                         
set_val(CROUCH, 0);            
wait(60);                          
set_val(CROUCH, 100);          
wait(50);                          
set_val(CROUCH, 100);          
set_val(JUMP, 100);           
wait(60);                          
set_val(CROUCH, 0);            
set_val(JUMP, 100);          
wait(10);                        
set_val(JUMP, 0);
}
combo CancelSlideCW {
set_val(CROUCH, 100);
wait(SlideDelay);
set_val(CROUCH, 0);
wait(20);
set_val(SPRINT, 0);
set_val(CROUCH, 100);
set_val(SPRINT, 100);
wait(20);
set_val(CROUCH, 0);
set_val(SPRINT, 0);
wait(20);
}
combo SPRINT {
    set_val(SPRINT,100); 
    wait(40);
    wait(10);
    set_val(SPRINT,100); 
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
} 
function Menu (){
        if(get_ival(PS4_L2)) 
        {
        	if(event_press(PS4_OPTIONS))
        	{
        		ModMenu     = TRUE;      
        		DisplayMenu = TRUE;       
        		EditMenu    = FALSE;
        
        		if(!ModMenu)             
        	    	DisplayTitle = TRUE; 
        	}
        	set_val(PS4_OPTIONS,0); set_val(PS4_RIGHT,0); 
        }
        if(!DisplayTitle)                
        { 
        	//  modname    
        	if(ModMenu) 
	        {  
	        	vm_tctrl(0);
	        	
	        	ModNameIdx                     = MenuNavigation(ModNameIdx,0,24);   //28
	        	
	        	Anti_Recoil_Mod   [ProfileIdx]   = ToggleSwitch(ModNameIdx == 0,Anti_Recoil_Mod   [ProfileIdx],0,1); 
	        	DYNAMIC_RC        [ProfileIdx]   = ToggleSwitch(ModNameIdx == 1,DYNAMIC_RC        [ProfileIdx],0,1); 
	        	sticky_aim_assist                = ToggleSwitch(ModNameIdx == 2,sticky_aim_assist             ,0,1); 
	        	PolarAssist       [ProfileIdx]   = ToggleSwitch(ModNameIdx == 3,PolarAssist       [ProfileIdx],0,1); 
	        	ProgressionAA     [ProfileIdx]   = ToggleSwitch(ModNameIdx == 4,ProgressionAA     [ProfileIdx],0,1); 
 				PolarAimAssist    [ProfileIdx]   = ToggleSwitch(ModNameIdx == 5,PolarAimAssist    [ProfileIdx],0,1);
 				Modulation        [ProfileIdx]   = ToggleSwitch(ModNameIdx == 6,Modulation        [ProfileIdx],0,1);

	        	AimSens                        = ToggleSwitch(ModNameIdx == 7,AimSens                      ,0,1);
	        	//TRACKING                     = ToggleSwitch(ModNameIdx == 8,TRACKING,0,1);
	        	CancelSlide                    = ToggleSwitch(ModNameIdx == 9,CancelSlide,0,3);
	        	aim_sens_corrections           = ToggleSwitch(ModNameIdx ==10,aim_sens_corrections,0,1);
	            holdbreath[ProfileIdx]         = ToggleSwitch(ModNameIdx ==11,holdbreath        [ProfileIdx],0,1);
	        	_STEADY_AIM                    = ToggleSwitch(ModNameIdx ==12,_STEADY_AIM                   ,0,1);
	        	BUNNY_HOP                      = ToggleSwitch(ModNameIdx ==13,BUNNY_HOP                     ,0,1); 
	        	AA_BOOSTER                     = ToggleSwitch(ModNameIdx ==14,AA_BOOSTER                    ,0,1);// CROUCH Shot                                     //
        		HairTriggers                   = ToggleSwitch(ModNameIdx ==15,HairTriggers                  ,0,1);// JUMP Shot 
        		ToggleFastMelee                = ToggleSwitch(ModNameIdx ==16,ToggleFastMelee               ,0,1);
	        	ToggleBlockRumble              = ToggleSwitch(ModNameIdx ==17,ToggleBlockRumble             ,0,1);
	        	
	        	Buttons                        = ToggleSwitch(ModNameIdx ==18,Buttons,0,21);
	            ProfileButton                  = ToggleSwitch(ModNameIdx ==19,ProfileButton ,0,1);
 				auto_run                       = ToggleSwitch(ModNameIdx ==20,auto_run                      ,0,1);
 				RapidFire       [ProfileIdx]   = ToggleSwitch(ModNameIdx ==21,RapidFire         [ProfileIdx],0,1);
	        	CancelReload    			   = ToggleSwitch(ModNameIdx ==22,CancelReload                  ,0,1);
	            use_cancel_plates    		   = ToggleSwitch(ModNameIdx ==22,use_cancel_plates             ,0,1);
	            ToggleResponseCurve            = ToggleSwitch(ModNameIdx ==23,ToggleResponseCurve,0,1);
	            WeaponReset                    = ToggleSwitch(ModNameIdx ==24,WeaponReset,0,1);
	            
 				
	        }
	        //modname  valname
	        if(EditMenu)   
	        {
	        	vm_tctrl(0);
	        	ValNameIdx        = MenuNavigation(ValNameIdx,0,56
	        	); 
	        	
	            DEFAULT_VERTICAL           [ProfileIdx]  = EditValues(ValNameIdx , 39,DEFAULT_VERTICAL          [ProfileIdx] ,-99, 99 , 1, 10);  
	            DEFAULT_HORIZONTAL         [ProfileIdx]  = EditValues(ValNameIdx , 40,DEFAULT_HORIZONTAL        [ProfileIdx] ,-99, 99 , 1, 10);
	            ANTIRECOOIL    		                     = ToggleSwitch(ValNameIdx ==41,ANTIRECOOIL             ,0,1);
	        		           
	            Starting_Anti_Recoil_Value [ProfileIdx]  = EditValues(ValNameIdx , 2,Starting_Anti_Recoil_Value [ProfileIdx] ,-99, 99 , 1, 10);
        		Ending_Anti_Recoil_Value   [ProfileIdx]  = EditValues(ValNameIdx , 3,Ending_Anti_Recoil_Value   [ProfileIdx] ,-99, 99 , 1, 10);
        		Total_Anti_Recoil_Time     [ProfileIdx]  = EditValues(ValNameIdx , 4,Total_Anti_Recoil_Time     [ProfileIdx] ,  0, 400, 1, 10);
	            recoil_drop                [ProfileIdx]  = EditValues(ValNameIdx , 5,recoil_drop                [ProfileIdx] ,-99, 99 , 1, 10); 
	            recoil_angle               [ProfileIdx]  = EditValues(ValNameIdx , 6,recoil_angle                [ProfileIdx] ,-99, 99 , 1, 10);
	            antirecoilStrength         [ProfileIdx]  = EditValues(ValNameIdx , 7,antirecoilStrength         [ProfileIdx] ,-99, 99,  1, 10);
	            //  \\sticky_aim_assist
	          
	            _v                   [ProfileIdx]  = EditValues(ValNameIdx , 8,_v            [ProfileIdx]    , 0, 99, 1, 10); 
	            wait_v               [ProfileIdx]  = EditValues(ValNameIdx , 9,wait_v        [ProfileIdx]    , 0, 99, 1, 10); 
	            _v_hip               [ProfileIdx]  = EditValues(ValNameIdx ,10,_v_hip        [ProfileIdx]    , 0, 99, 1, 10); 
	            wait_v_hip           [ProfileIdx]  = EditValues(ValNameIdx ,11,wait_v_hip    [ProfileIdx]    , 0, 99, 1, 10); 

                //  \\ PolarAssist
	            AdsRadius            [ProfileIdx]  = EditValues(ValNameIdx ,13,AdsRadius             [ProfileIdx]    , 0, 35, 1,  2);
	            PolarRadius          [ProfileIdx]  = EditValues(ValNameIdx ,14,PolarRadius           [ProfileIdx]    , 0, 40, 1, 10);  
	            PolarAngle           [ProfileIdx]  = EditValues(ValNameIdx ,15,PolarAngle            [ProfileIdx]    , 0, 50, 1, 10);
	            FireBoost                          = ToggleSwitch1(ValNameIdx == 16,FireBoost                                ,0,  1);
	            PolarRBoost          [ProfileIdx]  = EditValues(ValNameIdx ,17,PolarRBoost           [ProfileIdx]    , 0, 40, 1, 10);
	            ChooseShapes         [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 18,ChooseShapes     [ProfileIdx]            ,0,  4);
	            RadiusEffect         [ProfileIdx]  = ToggleSwitch1(ValNameIdx == 19,RadiusEffect     [ProfileIdx]            ,0,  4);
	            ShapeSpeed                         = ToggleSwitch1(ValNameIdx == 20,ShapeSpeed                               ,0,  3);
	            STEADY_RESOLUTION                  = EditValues(ValNameIdx ,21,STEADY_RESOLUTION                     , 0, 20, 1,  2);

	            //  \\  ProgressionAA
	            ProgPowerMin  [ProfileIdx]  = EditValues(ValNameIdx ,22,ProgPowerMin     [ProfileIdx]    ,-99,  20, 1, 10); 
	            ProgPowerMax  [ProfileIdx]  = EditValues(ValNameIdx ,23,ProgPowerMax     [ProfileIdx]    ,  0,  99, 1, 10); 
	            ProgPowerInc  [ProfileIdx]  = EditValues(ValNameIdx ,24,ProgPowerInc     [ProfileIdx]    ,  0,  30, 1, 10); 
	            ProgWaitMin   [ProfileIdx]  = EditValues(ValNameIdx ,25,ProgWaitMin      [ProfileIdx]    ,  0,  40, 1, 10);
	            ProgWaitMax   [ProfileIdx]  = EditValues(ValNameIdx ,26,ProgWaitMax      [ProfileIdx]    ,  0,1000, 1, 10); 
	            ProgWaitInc   [ProfileIdx]  = EditValues(ValNameIdx ,27,ProgWaitInc      [ProfileIdx]    ,  0, 250, 1, 10); 
	            ProgRelease   [ProfileIdx]  = EditValues(ValNameIdx ,28,ProgRelease      [ProfileIdx]    ,  0,  50, 1, 10); 
	           
	            
	            // RAPID FIRE \\ 
	            RateOfFire      [ProfileIdx]  = EditValues(ValNameIdx ,29,RateOfFire     [ProfileIdx]    ,  0,  30, 1, 5);
	            MaxReloadTime 	[ProfileIdx]  = EditValues(ValNameIdx ,30,MaxReloadTime  [ProfileIdx]    ,  0,9000,10,100);
	            // MISC \\
	            GEN_SENS                      = EditValues(ValNameIdx ,31,GEN_SENS                       ,  0,327, 1,10);
        	    ADS_SENS                      = EditValues(ValNameIdx ,32,ADS_SENS                       ,  0,327, 1,10);
                FIRE_SENS                     = EditValues(ValNameIdx ,33,FIRE_SENS                      ,  0,327, 1,10);
        	    ADS_FIRE_SENS                 = EditValues(ValNameIdx ,34,ADS_FIRE_SENS                  ,  0,327, 1,10);
        	    GRENADE_SENS                  = EditValues(ValNameIdx ,35,GRENADE_SENS                   ,  0,327, 1,10);
	            TRACKING_STRENGTH 	          = EditValues(ValNameIdx ,36,TRACKING_STRENGTH              ,  0, 16, 1, 4);
	            SlideDelay                    = EditValues(ValNameIdx ,37,SlideDelay                     , 10,200, 1,10); 
	            in_game_menu_sens             = EditValues(ValNameIdx ,38,in_game_menu_sens              ,  0, 20, 1, 5); 
	            POL_RADIUS                    = EditValues(ValNameIdx ,42,POL_RADIUS                     ,  0,100, 1,10);       
	           // RX_Axis_Joystick_calibrate    = EditValues(ValNameIdx ,43,RX_Axis_Joystick_calibrate     ,  0, 50, 1, 5); 
	            //RY_Axis_Joystick_calibrate    = EditValues(ValNameIdx ,44,RY_Axis_Joystick_calibrate     ,  0, 50, 1, 5);
	            SCAN_STRENGTH                 = EditValues(ValNameIdx ,0,SCAN_STRENGTH                   ,  0, 24, 1, 5);
	            angle2                        = EditValues(ValNameIdx ,1,angle2                          ,  0, 16, 1, 2);
	            SeRadius        [ProfileIdx]  = EditValues(ValNameIdx ,45,SeRadius       [ProfileIdx]    ,  0, 36, 1, 5);
	            SeAngle         [ProfileIdx]  = EditValues(ValNameIdx ,46,SeAngle        [ProfileIdx]    ,  0, 18, 1, 2);
	            
	            
	            if(ModNameIdx == 1) ValNameIdx = cycle(ValNameIdx,2,6);
	            if(ModNameIdx == 2) ValNameIdx = cycle(ValNameIdx,8,11); 
	       		if(ModNameIdx == 3) ValNameIdx = cycle(ValNameIdx,13,20); 
	       		if(ModNameIdx == 4) ValNameIdx = cycle(ValNameIdx,22,28);
	       		if(ModNameIdx == 5) ValNameIdx = cycle(ValNameIdx,45,46); 
	       		if(ModNameIdx == 6) ValNameIdx = cycle(ValNameIdx,0,1); 
	       		if(ModNameIdx == 7) ValNameIdx = cycle(ValNameIdx,31,35); 
	       		if(ModNameIdx == 8) ValNameIdx = cycle(ValNameIdx,36,36); 
	       		if(ModNameIdx == 9) ValNameIdx = cycle(ValNameIdx,37,37); 
	       		if(ModNameIdx ==10) ValNameIdx = cycle(ValNameIdx,38,38);
	       		if(ModNameIdx ==12) ValNameIdx = cycle(ValNameIdx,21,21);
	       		if(ModNameIdx == 0) ValNameIdx = cycle(ValNameIdx,39,41);
	       		if(ModNameIdx ==14) ValNameIdx = cycle(ValNameIdx,42,42);
	       	    if(ModNameIdx ==25) ValNameIdx = cycle(ValNameIdx,43,44);
	       	    
	       	    if(ModNameIdx ==21) ValNameIdx = cycle(ValNameIdx,29,29);
	       	    if(ModNameIdx ==22) ValNameIdx = cycle(ValNameIdx,30,30);
	          
	        }  
	    } 
        if(DisplayMenu) 
        {
        	cls_oled(OLED_BLACK);  
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);  
        	led(ProfileIdx);  
        	vm_tctrl(0);
        	
        	if(EditMenu)   
        	{
        		print(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
        	} 
        	else if(ModMenu) //   Info  Misc
        	{
        		print(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); 
        		
        		if(ModNameIdx >= 6 && ModNameIdx <= 10) 
        		{
        			print(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                }
                if(ModNameIdx == 12) 
        		{
        			print(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
        		}
        		if(ModNameIdx == 14) 
        		{
        			print(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                }
                 if(ModNameIdx >= 21 && ModNameIdx <= 22) 
        		{
        			print(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
                } 
            	if(ModNameIdx < AmountOfModsPerProfiles || ModNameIdx == 11) 
            	{
            		if(ProfileIdx == 0) 
        				print(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    	else if(ProfileIdx == 1) 
            			print(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
            	}
            	if(ModNameIdx == 8)
				{
				print(center_x(get_Info_chars(2), OLED_FONT_SMALL_WIDTH),33,OLED_FONT_SMALL,OLED_WHITE,Info[2]);
        	    print(center_x(get_Info_chars(1), OLED_FONT_SMALL_WIDTH),46,OLED_FONT_SMALL,OLED_WHITE,Info[1]);
        	    } 
            	if(ModNameIdx == 10)
            	{
				print(center_x(get_Info_chars(0), OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,Info[0]);
        	    } 
        	}
            DisplayMenu = FALSE; 
        } 
        if(!ModMenu && !EditMenu) 
        {
			if(DisplayTitle) 
			{
				cls_oled(OLED_BLACK);  
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
				print(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[3]);
				print(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[4]);
				print(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Misc[5]); 
			
				
				if(ProfileIdx == 0) 
        			print(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);
           	    else if(ProfileIdx == 1) 
            		print(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[10]); 
				DisplayTitle = FALSE;
        		ScreenSaver  = TRUE; 
			}
			if(ScreenSaver)
    		{
       			BlankScreen += get_rtime();
        	
    			if(BlankScreen >= 10000)
    			{
    				cls_oled(OLED_BLACK);
    				BlankScreen = 0;
    				ScreenSaver = TRUE; 
    				
        		}	
    		}
    		if(get_ival(FIRE))
    		{
    			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModMenu && !EditMenu)
	    	    {
			        DriveMode = TRUE;
			        KS = 0;
			        combo_run(DriveMode);
	    	    }
	    	} 
    		if(DriveMode) 
        	{
				combo_run(Blink);
				LedOn  = 150;
				LedOff = 300;
    			if(event_release(PS4_SQUARE))
    			{
    				DriveMode = FALSE;
    				KS= 1;
    				combo_run(DriveMode);
    				combo_run(RumbleOff); 
        		}  
        	} 
             
            led(ProfileIdx);
		}
   } 
const string Info[] = {"Match InGame","5-10~Warzone","0-5 ~ MP",""};
//                           0                1           2
const string Misc[] = { "F.P.S", "On", "Off","TWISTED AIM","C0D Edition","by BODGE","DriveMode","Enabled","Disabled"," Profile 1 "," Profile 2 "," Profile 3 ","ModernWarfare","Cold War","Press Cross/A","Vert Str","KillSwitch","Vanguard",""};
//                         0       1     2          3               4         5           6           7         8          9            10              11              12           13          14             15          16          17
const string ModNames[] = {"Classic AR","Smart Recoil","Sticky Aim","Niko AA","Progressive AA","SweetEvil AA","SE Modulation","Senses","TRACKING BOT","CancelSlide","Aim Corrections","HoldBreath","Steady Aim","Bunny Hop","AA Booster","HairTrigger",
//                               0             1             2          3             4               5                6          7          8              9              10             11          12          13            14           15                       
"Fast MELEE","BlockRumble","Controller Layout","Profiles","Auto Run","Rapid Fire","Cancel RELOAD","Curve Type","Weapon Reset","RS-Calibrate","QT JUMP Shot","RecoilOnTheFly","Shape Shifter",""};
//   16            17               18             19         20           21             22           23             24          25              26              27            28
const string ValNames[] = { "Strength","Speed","Start Value","End Value","Total Time","RecoilDrop","RecoilAngle","Strength","ADS Size","ADS Speed","Fire Size","Fire Speed","FREE","ADS Radius","Fire Radius",
//                               0        1           2            3          4           5            6             7           8          9          10           11        12        13           14         
 "Angle","BoostOnFire","BoostPower","Shape","ShapeEffect","Shape Speed","Steady Res","Min Power","Max Power","Power Inc","Min Wait","Max Wait","Wait Inc","Release",
//  15        16            17         18        19            20            21          22         23           24         25         26         27        28         
"Rounds/Sec","RELOAD Time","Gen Sens","ADS Sens","FIRE Sens","ADS+FIRE","Gre/Tac","Strength","Slide Delay","InGame Sens","V Strength","H Strength","Rumble","PowerBoost","RX","RY","Radius","Angle",""}; 
//   29            30           31         32         33          34        35        36           37            38           39           40         41          42        43        44          45       46
const string MinRadius[] = {"Off","Weak","Medium","Strong","Strongest",""};
const string ShapesToggle[] = {"Standard","Tall","Wide","Spiral","Spiral v2",""};
const string VMSpeed[]       = {"Default","Fast","Medium","Slow","","",""};
const string CurveType[]       = {"Standard","Linear/Dynamic",""};

const int8   HoldBtns []         = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 , PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE }; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

const string ControllerLayouts[] = { "Default", "TACTICAL", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper PING","Bumper PING Tac", "Default Flipped","TACTICAL Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.PING Flipped","B.PING.Tac.Flipped",""}
//???????????????????????DONT TOUCH BELOW OR BRAKE SCRIPT????????????????????????????????\\
const int8 DnamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
const int8 LinearArray[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
define AmountOfValues = 56;
// Misc
int  SinAngle, CosAngle;
int rand;
int EnemyPing,Buttons,CancelReload,MaxReloadTime;
int VmSpeed = -9;  // 0 -2 -4 -6 -8 -9
int VmSpeed1;
define MAGNITUDE					= 500;  //         500 75
define TIME_BASE = 2;	            //4  don't change    1
int REFRESH_RATE = TIME_BASE *10;  // 10 don't change   20
//define ret = RUMBLE;
int ProfileIdx; 
int RapidFire[2];
int RateOfFire[2];
define TotalNumberOfProfiles = 1;
define AmountOfModsPerProfiles = 6;
int DisplayTitle = TRUE; 
int ScreenSaver,BlankScreen,ModMenu,DisplayMenu,ModNameIdx,EditMenu,ValNameIdx,SelectedProfileIdx;
int DriveMode,LedOn,LedOff; 
define ActivateButtonCount = 8;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx;
int QuickToggleActive,ToggleWidth,ToggleWidth1,ToggleFont,ToggleFont1;
int ADS,FIRE,LETHAL,TACTICAL,JUMP,CROUCH,MELEE,SPRINT,RELOAD,SWAP,PING;
int angle,cos_angle,sin_angle,L_LX,L_LY,ActualMagnitude,MaxMagnitude,Radius;
//int aim_rx,aim_ry;
int ModAngle = 2;  // 1  2  3  
int Radial_Effect;
int GetTwistedShape,PolarRadius[2],PolarAngle[2],PolarRBoost[2],PolarRelease[2];
int ProgRelease[2],ProgPowerMin[2],ProgPowerMax[2],ProgPowerInc[2],ProgWaitMin[2],ProgWaitMax[2],ProgWaitInc[2];
int a_rumble,b_rumble,rumble,rc_rumble;
int SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,PolarStrength;
int randAngle, scan_angle, horizontal, vertical, S_RX, S_RY;
int in_game_menu_sens,Rapid_Fire,HairTriggers,AimSens;
int BUNNY_HOP,SlideDelay,RUMBLE,RUMBLE2,mvt_direction,inverted;
int Angle;
int seAngle;
int DeadZone = 15;
int TwistedMinRad[2];
int PolarABoost = 6;
int RightStick,AngleDirection;
int Tracking,Tracker1,Tracker2,CAngle,SAngle,GetAngle;
int ToggleResponseCurve = 0;
int ToggleADirection = TRUE;
int Tracking1 = TRUE;
define TrackingSize  = 8;
int TrackingSize1 = (TrackingSize + TrackingSize/2);
define TrackingSpeed = 2;
int TrackingSpeed1 = TrackingSpeed*2;
int AdsSpeed  = 10;
int AdsRadius[2]; //=16;
int StickRadius = 18;
int StickSpeed = 6;
int Speed;
int ChooseShapes;
int ShapeSpeed;
int RadiusEffect[2];

int	inc;
int KS = TRUE;
int AIMsens = TRUE;
int RX_max,RY_max,LX_max,LY_max;
int LXRX_min = 15;
int RestTime;
int CancelSlide;
int ToggleFastMelee;
int ToggleBlockRumble = TRUE;
int FirstShotBeforeReload,ReloadInProgress,ReloadTime;
int STEADY_RESOLUTION;
int AA_RADIUS;
int MAX_RADIUS;
int POL_MAX = 45;
int POL_RADIUS= 35;
int POL_ANGLE;
int PolarMin;
int SCAN_STRENGTH = 8;
int SCAN_STRENGTH1;
int SCAN_STRENGTH2;
int SCAN_STRENGTH3;
int SCAN_STRENGTH4;
int angle2 [2];
int angle3;
int angle4;
int SeRadius [2];
int SeAngle [2];
int FireBoost = TRUE;
int Kill_Switch_Toggle = TRUE;
int aim_sens_corrections  = TRUE;
int holdbreath[2];
int INVERTED    = 0;
//--Variable Shit Just Ignore
int _STEADY_AIM ;//    = TRUE;
int FireSpeed = 98;
int sticky_aim      = TRUE;
int WeaponReset = TRUE;
int weapon_reset = TRUE;
int reset_weapon;
int PolarAssist[2];   
int AngleBoost;
int ProgressionAA[2];   
int PolarAimAssist[2];
int RadFlow         = TRUE;
int AngFlow         = TRUE;
define Prf          = TRUE;
define Paf          = TRUE;
int i_val           = TRUE;
int i_pnt           = TRUE;
int i_num           = TRUE;
int i_cnt           = TRUE;
int v,ar_y          = TRUE;
int weapon          = TRUE;
int AR              = TRUE;
int auto_run;
int AutoSprint;
//define SMOOTHING	= 1;
int smoothing;
int ARS,AR_H;
int AR_I           = 1; 
int Release        = 20;
int recoil_Y;
int recoil_X;
//int true_radius;
//int modi_radius,modi_recoil;
int GEN_SENS,ADS_SENS,FIRE_SENS,ADS_FIRE_SENS,GRENADE_SENS;
int SCANBOOST = TRUE;
//int PolarRBoost,PolarABoost;
//--Buttons --////////////////////////////////////////////////////////
    define Switch_Weapon = PS4_TRIANGLE;
    define HOME       = PS4_PS;
    define VIEW       = PS4_SHARE;
    define RX         = PS4_RX;
    define RY         = PS4_RY;
    define LX         = PS4_LX;
    define LY         = PS4_LY;
    define UP         = PS4_UP;                
    define DOWN       = PS4_DOWN;             
    define LEFT       = PS4_LEFT;             
    define RIGHT      = PS4_RIGHT;
    define AIM_V      = PS4_RY;
    define AIM_H      = PS4_RX;
    define STRAFE     = PS4_LX;
    define STICK_1_X  = LX;
    define STICK_1_Y  = LY;
    int aim_lx        = LX ;
    int aim_ly        = LY ;
    int aim_rx        = RX ;
    int aim_ry        = RY ;
    int true_Ry       = RY ;
    int true_Rx       = RX ;
    int altrecoil_Ry  = RY ;
    int altrecoil_Rx  = RX ;
    int modi_Ry       = RY ;
    int modi_Rx       = RX ;
    int final_Ry      = RY ;
    int altrecoil_y   = RY ;
    int altrecoil_x   = RX ;
    int RadiusFlow    = Prf;
    int AngleFlow     = Paf;
    int final_Rx      = RX ;
    int Ry            = RY ;
    int Rx            = RX ;
    int T_RX,T_RY,C_RX,C_RY,pX,pY;
    int PX[2],PY[2];
    int USE_SENS = TRUE;
    int Sens = TRUE;
    int gen_sens,ads_sens,ads_fire_sens,hip_fire_sens;//RUMBLE;
    int TwistedRumble,RadialEffect; int scanAngle = 2;
	define MAX_TIME_TO_CHECK = 5000; // in ms. Max value is 32767.
    define MAX_TIME  = 150;
    define MIN_TIME  = 50;
    int HOLD_TIME;
//AA_BOOSTER
    int AA_BOOSTER;
    int LY_Min       = -18; //18
    int LY_Max       =  18; //18
    int LX_Min       = -26;
    int LX_Max       =  26;
    int w            =  80;
    int l, m, n, a, b, e, d, f;
    int rumble_type = RUMBLE_A; 
// STICKY---------------------
    int Aim_Val,Wait_Val;
    int JUICY_STICKY    = TRUE;
    int sticky_aim_assist;
    int _v                   = 12;      // 28 ADS
    int wait_v               = 20;
    int _v_hip               = 16;      // 28 HipFire
    int wait_v_hip           = 20;
    int STICKY_AIM_TIME;
    int SCANNING = TRUE;
    int Modulation [2];
    int UPDATE_TIME;
    //--TRACKING
    int ScanAngle;
    int TRACKING = TRUE;
    int TRACKING_STRENGTH[2];
    int TRACKING_STRENGTH1;
    int TRACKING_STRENGTH3;
    int TRACKING_BOT;
    define track_00 = 0x00;
    define track_01 = 0x01;
    define track_02 = 0x02;
    define track_03 = 0x03;
//DYNAMIC/PROGRESSIVE RECOIL__________________________________________________________\\
    int Anti_Recoil_Mod  = TRUE;
    int anti_recoil, anti_recoil_H;
    int ANTI_RECOIL_Vertical  = 15;
    int ANTI_RECOIL_Horizontal = 0;
    //int mg = 13;
    int Anti_Recoil_Release[2],DYNAMIC_RC [2];    
    int Starting_Anti_Recoil_Value[2],Ending_Anti_Recoil_Value[2],Total_Anti_Recoil_Time[2];
    int antirecoilStrength = 60;
    int recoil_angle[2],recoil_drop[2];
    int ANTIRECOOIL           = TRUE;
    define INTVERTED_RECOIL   =    1;
    int DEFAULT_VERTICAL [2],DEFAULT_HORIZONTAL [2],R_A,RECOIL,BOOOST; // ANTIRECOOIL
    int tval;
    int rnd;
int angle_2 = 8;
int ProfileButton[2];
int ProfileSwap = TRUE;
int x, y;
int HoldTime;
//--HEAD SHOT    
int POINT_DIR_UP_D    =-10;
int STICKY_HEADSHOT = TRUE;
int POINT_DIR_UP_V = TRUE;      
int HEADSHOT_IN_Y  = PS4_LY;
int HEADSHOT_TIME;  //= 15;
int HEADSHOT_STICK= PS4_RY;
//-------AIM_CORRECTIONS-------\\
/*
define Sampling_Time = 10;
define Aim_Boost = 10;
define Aim_Correction = 5;
define Aim_Perfection_Limit = 30;
define POS_Aim_Limit = 70;
define NEG_Aim_Limit = -70;
define POS_Micro_MVT_Limit = 85;
define NEG_Micro_MVT_Limit = -85;                                                                                                
int FINE_AIM = TRUE;
int X_Last_Value =0;
int Y_Last_Value =0;
int X_Current_Value =0;
int Y_Current_Value =0;
int Sampling_Done = TRUE;
int spiroide_pulse = 1;
int fine_pulse = 1;
int Joystick_calibration       = TRUE;
int RX_Axis_Joystick_calibrate = 0; 
int RY_Axis_Joystick_calibrate = 0; */
int use_cancel_plates,cancel_plates,cancel_plates_timer;
int double__tap[30];


function MenuNavigation(f_modorval,f_min,f_max) { 

	if(!get_val(ADS))
	{
		if(event_press(PS4_RIGHT))   
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayMenu = TRUE;   
   		}     
		if(event_press(PS4_LEFT))    
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayMenu = TRUE;
		} 
		 BlockButtons(); 
	}
	//ModName
if (ModNameIdx == 0
//||  ModNameIdx == 1
||  ModNameIdx == 2
||  ModNameIdx == 3
||  ModNameIdx == 4
||  ModNameIdx == 5
||  ModNameIdx == 6
||  ModNameIdx == 7
||  ModNameIdx == 8
||  ModNameIdx == 9
||  ModNameIdx == 10
||  ModNameIdx == 12
||  ModNameIdx == 14
||  ModNameIdx == 24
||  ModNameIdx == 25
||  ModNameIdx == 21
||  ModNameIdx == 22)

	{
		if(event_press(PS4_CROSS))
    	{ 
        	ValNameIdx  = AmountOfValues + 1;
        	EditMenu    = TRUE;
        	ModMenu     = FALSE;
        	DisplayMenu = TRUE;
    	}
    	set_val(PS4_CROSS,0); 
    }
    if(ModMenu)
    {
    	if(event_press(PS4_CIRCLE)) 
    	{    
        	DisplayTitle = TRUE;
        	ModMenu      = FALSE; 
        	DisplayMenu  = FALSE; 
        	combo_run(RumbleOff); 
        	Save(); 
    	} 
    	set_val(PS4_CIRCLE,0); 
    }
    if(EditMenu)
    {
    	if(event_press(PS4_CIRCLE))
    	{       
        	EditMenu     = FALSE; 
       		ModMenu      = TRUE;
        	DisplayMenu  = TRUE;   	
    	}
    	set_val(PS4_CIRCLE,0); 
    } 
	if(event_press(PS4_TRIANGLE)) 
	{ 
	 ProfileIdx = cycle(ProfileIdx + 1, 0, TotalNumberOfProfiles);
	 DisplayMenu = TRUE;   	
	}
    return f_modorval; 
} 
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn);  
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
    
		if(ModNameIdx == 0)
		{
		if(f_val == 1)
				print(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	    if(f_val == 0)
	    		print(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
		}
	    else if(ModNameIdx == 8) 
		{
		if(f_val == 1)
				print(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[1]);
	    else if(f_val == 0)
	    		print(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);		}
		else if(ModNameIdx == 10) 
		{
		if(f_val == 1)
				print(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[1]);
	    else if(f_val == 0)
	    		print(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),49,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
		}
		else if(ModNameIdx == 18)
	    {
	    	print(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
	        print(center_x(get_Info_chars(0), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Info[0]);
	    }
	    else if(ModNameIdx == 9 ) 
	    {
	    if(f_val == 0)
			print(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	    else if(f_val == 1)
	    	print(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);
	    else if(f_val == 2)
	    	print(center_x(get_misc_chars(17), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[17]);
	    else if(f_val == 3)
	    	print(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
	    }
	    else if(ModNameIdx == 23)
	    {
	    	print(center_x(get_ResponseCurve_chars(ToggleResponseCurve), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,CurveType[ToggleResponseCurve]);
	        print(center_x(get_Info_chars(0), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Info[0]);
	    }
		else
		{
			if(f_val == 1)
				print(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		print(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
	    } 
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}

function ToggleSwitch1(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayMenu = TRUE;
            combo_run(RumbleOff); 
    	}
    	if(ValNameIdx == 19) 
		{
			print(center_x(get_radius_chars(RadiusEffect), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,MinRadius[RadiusEffect]);
		}
		else
		if(ValNameIdx == 18) 
		{
			print(center_x(get_aa_chars(ChooseShapes[ProfileIdx]), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,ShapesToggle[ChooseShapes[ProfileIdx]]);
		}
		else
		if(ValNameIdx == 20) 
		{
			print(center_x(get_speed_chars(ShapeSpeed), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,VMSpeed[ShapeSpeed]);
		}
		else
		{
			if(f_val == 1)
				print(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		print(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
		} 	
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}

function EditValues(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(ADS))
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex +  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex -  ValueIndexMinVal,ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE; 
            } 
            set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_UP,0); set_val(PS4_DOWN,0);
        }
        if(f_idx == 4)
        	number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100) );
        else
        	number_to_string(ValueIndex,find_digits(ValueIndex)); 
    }
    return ValueIndex;                
 }   
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
 
 combo STICKY_AIM {
    set_val(AIM_V,XY_Val(AIM_V, _v));
    wait(wait_v);
    set_val(AIM_H,XY_Val(AIM_H, _v));
    wait(wait_v);
    set_val(AIM_V,XY_Val(AIM_V, _v * -1));
    wait(wait_v);
    set_val(AIM_H,XY_Val(AIM_H, _v * -1));
    wait(wait_v);
    } 
    int STRAFE1;
    
combo Sticky_AA {
    STRAFE1 = abs(get_val(STRAFE)):
    set_val(AIM_V,XY_Val(AIM_V, _v_hip));
    wait(wait_v_hip);
    set_val(AIM_H,XY_Val(AIM_H, _v_hip)); 
    if(abs(get_val(STRAFE)) <= 10) {
    if(STICKY_AIM_TIME <= 500) {
    set_val(STRAFE,XY_Val(STRAFE,  -10));
    } else {
    set_val(STRAFE,XY_Val(STRAFE,  10));}}
    wait(wait_v_hip);
    set_val(AIM_V,XY_Val(AIM_V, _v_hip * -1));
    wait(wait_v_hip);
    set_val(AIM_H,XY_Val(AIM_H, _v_hip * -1));
    set_val(STRAFE,XY_Val(STRAFE, _v_hip * -1));
    wait(32);
    STRAFE1=clamp1(STRAFE1 + AIM_H ,-100,100);
    set_val(PS4_LX, clamp(STRAFE1, -100, 100));
    }
  /*  combo Legacy {
    
    set_val(RY,AdsRadius * -1);
    wait(wait_v);
    set_val(RX,AdsRadius);
    wait(wait_v);
    set_val(RY,AdsRadius);
    wait(wait_v);
    set_val(RX,AdsRadius * -1);
    wait(wait_v);
    sensitivity(PS4_RX,0,94); 
    sensitivity(PS4_RY,0,94);
}*/
    combo StickyOnFire {
	offset_batts_sticky(PS4_RY,PolarRadius);
	wait(20);
	offset_batts_sticky(PS4_RX,PolarRadius);
	offset_batts_sticky(PS4_LX,PolarRadius);
	wait(20);
	offset_batts_sticky(PS4_RY,inv(PolarRadius));
	wait(20);
    offset_batts_sticky(PS4_RX,inv(PolarRadius));
    offset_batts_sticky(PS4_LX,inv(PolarRadius));
    wait(20);
    }
    function offset_batts_sticky(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_ival(Stick))) / 100 + get_ival(Stick), -100, 100));
  return;
}
combo RECOIL { BOOOST++;
RECOIL = get_val(RY) + DEFAULT_VERTICAL + BOOOST;
if(BOOOST == 10) {
BOOOST = 0; }
if(RECOIL > 100) {
RECOIL = 100; }
set_val(RY,RECOIL * INTVERTED_RECOIL);
RECOIL = get_val(RX) + DEFAULT_HORIZONTAL;
if(RECOIL > 100){
RECOIL = 100; }
set_val(RX,RECOIL);
}
function double_click(button) { 
 if (double__tap[button] >= 0) { double__tap[button] += get_rtime(); if (double__tap[button] > 450) double__tap[button] = -1; } 
 if (event_release(button) && get_ptime(button) <= 200) { 
 if (double__tap[button] < 0) { double__tap[button] = 0; } else { double__tap[button] = -1; return 1; } } return 0; }
 combo Notify {
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);set_led(LED_2, 0);set_led(LED_3, 0);set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(250);set_led(LED_1, 0);set_led(LED_2, 0);set_led(LED_3, 0);set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);set_led(LED_2, c);set_led(LED_3, b);set_led(LED_4, 0);
wait(250);
reset_leds();
}
 
function getSTEADYaim( axis, resolution)
{
if (axis >= 0)
{
RUMBLE = (axis % resolution);
if (RUMBLE >= (resolution / 2))
{
axis = axis + (resolution - RUMBLE);
}
else
{
axis -= RUMBLE;
}
}
else
{
RUMBLE = (axis % resolution);
if (abs(RUMBLE) >= (resolution / 2))
{
axis = axis - (resolution + RUMBLE);
}
else
{
axis += abs(RUMBLE);
}
}
return axis;
}
function correctAngle(angle){
  if(angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function _sin(angle){
if(ToggleResponseCurve == 0) return DnamPolar[correctAngle(angle)];
return LinearArray[correctAngle(angle)];
}
function _cos(angle){
if(ToggleResponseCurve == 0) return DnamPolar[(correctAngle(angle) + 90) % 360];
return LinearArray[(correctAngle(angle) + 90) % 360];
    }
function offset( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function DoNotAtMePolar(stick, angle, rad) {
	if(ChooseShapes[ProfileIdx] == 0){  
		if(AngleDirection){
	  		offset(stick + 8, (rad * _sin(angle))/ 100 + Tracker1);
	 		offset(stick + 7, (rad * _cos(angle))/ 100 + Tracker2);
	 	}else{
	 		offset(stick + 8, (rad * _cos(angle))/ 100 + Tracker1);
	 		offset(stick + 7, (rad * _sin(angle))/ 100 + Tracker2);
	 	}
 	}
 	if(ChooseShapes[ProfileIdx] == 1){
 		if(AngleDirection){ 
 			offset(stick + 8, (rad * _sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (TwistedMinRad[ProfileIdx] * _cos(angle)) / 100 + Tracker2 );
  		}else{
  			offset(stick + 8, (rad * _cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (TwistedMinRad[ProfileIdx] * _sin(angle)) / 100 + Tracker2);
  		}
  	}
  	if(ChooseShapes[ProfileIdx] == 2){
  		if(AngleDirection){
  			offset(stick + 8, (TwistedMinRad[ProfileIdx] * _sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (rad * _cos(angle)) / 100 + Tracker2);
  	    }else{ 
  	    	offset(stick + 8, (TwistedMinRad[ProfileIdx] * _cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (rad * _sin(angle)) / 100 + Tracker2);
  		} 
  	}
  	if(ChooseShapes[ProfileIdx] == 3){ 
		if(!SpiralPosition1){ 
			InnerSpiral -= 1;
			if(InnerSpiral < TwistedMinRad[ProfileIdx])
				SpiralPosition1 = TRUE;
		}else{
	    	InnerSpiral += 1;
			if(InnerSpiral > rad)
				SpiralPosition1 = FALSE;
		}
		if(!SpiralPosition2){
			OuterSpiral -= 1;
			if(OuterSpiral < TwistedMinRad[ProfileIdx])
				SpiralPosition2 = TRUE;
		}else{
			OuterSpiral += 1;
			if(OuterSpiral >  rad)
				SpiralPosition2 = FALSE;
		}
		if(AngleDirection){
			offset(stick + 8, (InnerSpiral * _sin(angle)) / 100 + Tracker1);
  			offset(stick + 7, (OuterSpiral * _cos(angle)) / 100 + Tracker2);
  		}else{
  			offset(stick + 8, (InnerSpiral * _cos(angle)) / 100 + Tracker1);
  			offset(stick + 7, (OuterSpiral * _sin(angle)) / 100 + Tracker2);
  		} 
  	}
  	if(ChooseShapes[ProfileIdx] == 4)
  	{ 
  		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;
	   	} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc; 
	    }
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc; 
	    }
	    else if(Position == 3) {  
	    	x = -100 + inc; y = inc; 
	    }
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	    offset(stick + 8, (rad * x)/100 + Tracker1);
	 	offset(stick + 7, (rad * y)/100 + Tracker2);
	}
 }
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TwistedMinRad)
			SpiralPosition1 = TRUE;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = FALSE;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TwistedMinRad)
			SpiralPosition2 = TRUE;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = FALSE;
	} 
    if(ChooseShapes == 0)                    
	{ 
		if(AngleDirection){
		//if(mvt_direction == 1){
		    offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        //}
        }else{
            offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
            offset(PS4_RX ,(f_var * CosAngle)/100 + Tracker2);
        }
	} 
	if(ChooseShapes == 1)        
	{ 
		if(AngleDirection){
		//if(mvt_direction == 1){
        	offset(PS4_RX,(TwistedMinRad * SinAngle)/ 100 + Tracker1);
            offset(PS4_RY,(f_var * CosAngle) /100 + Tracker2);   
        //}
        }else{
        	offset(PS4_RY ,(f_var * SinAngle)/100 + Tracker1);
        	offset(PS4_RX,(TwistedMinRad * CosAngle)/ 100 + Tracker2);
        } 
	}
	if(ChooseShapes == 2)                     
	{ 
		if(AngleDirection){
		//if(mvt_direction == 1){
        	offset(PS4_RX,(f_var * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(TwistedMinRad * CosAngle) /100 + Tracker2);  
        //}
        }else{
        	offset(PS4_RX,(f_var * CosAngle)/ 100 + Tracker1);
       		offset(PS4_RY,(TwistedMinRad * SinAngle) /100 + Tracker2);  
        } 
	} 
	if(ChooseShapes == 3)                  
	{
		if(AngleDirection){
		//if(mvt_direction == 1){
        	offset(PS4_RX,(OuterSpiral * SinAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * CosAngle)/100 + Tracker2);	
        //}
        }else{
        	offset(PS4_RX,(OuterSpiral * CosAngle)/ 100 + Tracker1);
        	offset(PS4_RY,(InnerSpiral * SinAngle)/100 + Tracker2);
        }  
	}
    if(ChooseShapes == 4)
	{
		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	 	offset(PS4_RX,(f_var * x)/100 + Tracker1);
        offset(PS4_RY,(f_var * y)/100 + Tracker2);
	}
	
}
combo BUNNYHOP {
	set_val(JUMP, 100);
	wait(40);
	set_val(JUMP, 0);
	wait(40);
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(32);
}
    combo Progression {
set_val(RY,RadiusFlow);
wait(AngleFlow);
set_val(RX,RadiusFlow);
wait(AngleFlow);
set_val(RY,RadiusFlow * -1);
wait(AngleFlow);
set_val(RX,RadiusFlow * -1);
wait(AngleFlow);
}
 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\        
combo AR {
    ARS = get_val(RY) + AR;
    if(ARS > 100) ARS = 100;
    set_val(RY,ARS * AR_I);
    ARS = get_val(RX) + AR_H;
    if(ARS > 100) ARS = 100;
    set_val(RX,ARS);
    }
combo HOLD_BREATH { 
	set_val(SPRINT,0);
	wait(20);
	set_val(SPRINT,64); 
	wait(64); 
	set_val(SPRINT,0); 
	wait(110);
	set_val(SPRINT,64);
	wait(64);
	set_val(SPRINT,0);
	wait(110);
	set_val(SPRINT,100);
	wait(64);
	set_val(SPRINT,0);
	wait(110);
	set_val(SPRINT,100);
	//wait(20);
	//combo_restart(HOLD_BREATH);
	//set_val(SPRINT,0);
}
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\// Used Combo's and other Functions In The Script \\
   
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}

combo DriveMode { 
cls_oled(OLED_BLACK); 
if((DriveMode)|| (!KS)) {  
print(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
print(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
combo_run(Blink);LedOn = 150;LedOff = 300;
DisplayTitle = FALSE; }
else if((!DriveMode)|| (KS)) {  
print(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
print(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);}
wait(1500);
DisplayTitle = TRUE;
combo_stop(Blink);
} 
combo KilllSwitch { 
cls_oled(OLED_BLACK); 
if(KS == 0) {  
print(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[16]);
print(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
combo_run(Blink);LedOn = 150;LedOff = 300;
}
else if(KS == 1) {  
print(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[16]);
print(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);}
wait(12000);
combo_stop(Blink);
}

function BlockButtons() { 
set_val(JUMP,0);        set_val(CROUCH,0);    set_val(TACTICAL,0);  set_val(LETHAL,0);   set_val(RELOAD,0);       set_val(PING,0);      set_val(SWAP,0);  set_val(MELEE,0); set_val(SPRINT,0); 
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function get_Info_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Info[f_idx + 1] - Info[f_idx] - 1;
	return sizeof(Info) - Info[f_idx];
	}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_aa_chars(f_idx){
	if (ShapesToggle[f_idx + 1] != -1) 
		return ShapesToggle[f_idx + 1] - ShapesToggle[f_idx] - 1;
	return sizeof(ShapesToggle) - ShapesToggle[f_idx];		
}
function get_radius_chars(f_idx){
	if (MinRadius[f_idx + 1] != -1) 
		return MinRadius[f_idx + 1] - MinRadius[f_idx] - 1;
	return sizeof(MinRadius) - MinRadius[f_idx];
}
function get_speed_chars(f_idx){
	if (VMSpeed[f_idx + 1] != -1) 
		return VMSpeed[f_idx + 1] - VMSpeed[f_idx] - 1;
	return sizeof(VMSpeed) - VMSpeed[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function get_ResponseCurve_chars(f_idx){
	if (CurveType[f_idx + 1] != -1) 
		return CurveType[f_idx + 1] - CurveType[f_idx] - 1;
	return sizeof(CurveType) - CurveType[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
const uint8 Layouts[][] = {            
 	  //FIRE   ADS	  LETHAL TACTICAL  JUMP	 CROUCH	  MELEE	  SPRINT  RELOAD WSwap,  PING 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
const int16 SLayouts[][] = {            
	//Walk,     Strafe, AimY,    AimX    
	{ XB1_LY,     XB1_LX, XB1_RY, XB1_RX },    // DEFAULT
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW
	{ XB1_LY,     XB1_RX, XB1_RY, XB1_LX },    // LEGACY
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX },    // LEGACY SOUTHPAW
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW NO CLICK SWAP
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX }};   // LEGACY SOUTHPAW NO CLICK SWAP

//int aim_ry,aim_rx;
int walk,strafe;
function Buttons(Type) {
	
	FIRE     = Layouts[Type][0];
	ADS      = Layouts[Type][1];
	LETHAL   = Layouts[Type][2];
	TACTICAL = Layouts[Type][3];
	JUMP     = Layouts[Type][4];
	CROUCH   = Layouts[Type][5];
	MELEE    = Layouts[Type][6];
	SPRINT   = Layouts[Type][7];
	RELOAD   = Layouts[Type][8];
	SWAP     = Layouts[Type][9];
	PING     = Layouts[Type][10];
	
	//walk     = SLayouts[Type][0];
	//strafe   = SLayouts[Type][1];
    aim_ly    = SLayouts[Type][0];
	aim_lx    = SLayouts[Type][1];
	aim_ry    = SLayouts[Type][2];
	aim_rx    = SLayouts[Type][3];
	
}

function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
    data(1,   1,0,0,0, 0,1,0,0,   0,0,1,0,   0,0,0,1,   1,0,1,0,  0,1,1,0,   1,1,1,1,  2,0,0,0,0,2,0,0,   0,0,2,0,0,0,0,2,2,0,2,0,   0,2,2,0,   2,2,2,2, 3,0,0,0,0,3,0,0,  0,0,3,0,   0,0,0,3,  3,0,3,0,   0,3,3,0,3,3,3,3  );

 function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) {
    if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit){ 
    if(Last_Value < Current_Value){
    if (Boost){
    if (X_AXIS)
    set_val(RX, (Current_Value + Aim_Boost)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value + Aim_Boost));}
    else if(Correction){
    if (X_AXIS)
    set_val(RX, (Current_Value - Aim_Correction)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value - Aim_Correction));}}            
    else{
    if (Boost){
    if (X_AXIS)
    set_val(RX, (Current_Value - Aim_Boost)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value - Aim_Boost));}
    else if(Correction){                         
    if (X_AXIS)
    set_val(RX, (Current_Value + Aim_Correction)); 
    if (Y_AXIS)
    set_val(RY, (Current_Value + Aim_Correction));}}}}     
 function y_val() {
    v = get_val(10);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ar_y;           
}
 function a_f(p,m) {
    if(abs(get_val(p)) < Release)
    return m;
    return get_val(p);
    }
    function Get_polar(radius, coef)
{
	if(radius > 32)
	{
		radius = 32;
	}
		
	return((radius * coef) / 1000);		
}
function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
     Pfb += Pv;
    
    if(Pfb <= Pfv)  
     return Pfb;
        
    if(Pfb > Pfv) {
    Pid =  FALSE;
     return Pfb - Pv;}}

    else {
    Pfb -= Pv;    
        
    if(Pfb >= Psv)  
    return Pfb;

    if(Pfb < Psv) {
    Pid = TRUE; 
    return Pfb + Pv;
    }} 
    return  FALSE;
 }
function clamp1(v, lo, hi) 
{
    if(v < lo) return lo;
    if(v > hi) return hi;
    return v;
} 
function sin(angle)
{   
    if(angle <= 90)
    {             
       RUMBLE = (Lookup_Table[angle]);
    }
    else if (angle <= 180)
    {      
        RUMBLE = (Lookup_Table[180 - angle]);
    }
    else if (angle <= 270)
    {
          RUMBLE = inv(Lookup_Table[angle - 180]);     
    }
    else 
    {
           RUMBLE = inv(Lookup_Table[360 - angle]);      
    }
    
   return  RUMBLE
} 
function cos(angle)
{   
    if(angle <= 90)
    {             
        RUMBLE = (Lookup_Table[90 - angle]);
    }
    else if (angle <= 180)
    {      
        RUMBLE = inv(Lookup_Table[angle - 90]);
    }
    else if (angle <= 270)
    {
       RUMBLE = inv(Lookup_Table[270 - angle]);       
    }
    else 
    {
       RUMBLE = (Lookup_Table[angle - 270]);       
    }
   return  RUMBLE
} 

function getTRACKING_STRENGTH(_a, _b)
{
/*
   TRACKING_STRENGTH1 = TRACKING_STRENGTH;
   TRACKING_STRENGTH2 = (TRACKING_STRENGTH + (TRACKING_STRENGTH/2) -3);
   TRACKING_STRENGTH4 = (TRACKING_STRENGTH + TRACKING_STRENGTH/2);
   if (ToggleResponseCurve == 0){ 
   if (get_val(ADS) && get_val(FIRE))
	   {
	   TRACKING_STRENGTH1 = TRACKING_STRENGTH2 ;
  }else
   if (get_val(ADS) && !get_val(FIRE))
       {
       TRACKING_STRENGTH1 = TRACKING_STRENGTH1;
  }else   
   if (!get_val(ADS) && get_val(FIRE))
	   {
	   TRACKING_STRENGTH1 = TRACKING_STRENGTH4;
	   }
  	   
  	   }
  	   */
  	   TRACKING_STRENGTH3 = TRACKING_STRENGTH;
if (_a == 1)
{
if (_b)
{
RUMBLE = TRACKING_STRENGTH3;
}
else
{
RUMBLE = (- TRACKING_STRENGTH3);
}
}
else
{
if (_b)
{
RUMBLE = (- TRACKING_STRENGTH3);
}
else
{
RUMBLE =  TRACKING_STRENGTH3;
}
}
return RUMBLE;
}
//=========================================================================================================================
function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
	return 0;

	if (_val < _lval)
	return -1;

	if (_val > _lval)
	return 1;

	return 0;
}
function XY_Val(f_Axis, f_Val) {
    if(abs(get_val(f_Axis)) < 25)
        return f_Val;
            return get_ival(f_Axis);
}
int mask;
int pval_data;
function pack_unsigned(int pvar, int RUMBLE, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (RUMBLE<<position);
	return pvar;
}
function unpack_unsigned(int pvar, int position, int number_of_bits){
	mask = 0;
	RUMBLE = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	RUMBLE = (pvar & mask) >> position
	return RUMBLE;
}
function pack_signed(int var1, int var2){

	RUMBLE = 0;
	if(var1 < 0)
	{
		var1 = abs(var1) | 128;
	}
	RUMBLE = (abs(var2)<<8)|var1;
	
	if(var2<0)
	RUMBLE *= -1;
	return RUMBLE;
}
function unpack_signed(int pvar, int var){
	RUMBLE = 0;
	if(var == 0)
	{	 
		RUMBLE = 128 & abs(pvar) ;
		RUMBLE = RUMBLE >> 7;
		RUMBLE = ((-2) * RUMBLE) + 1;
		RUMBLE = ( abs(pvar) & 127) * RUMBLE;
	}
	else
	{
		RUMBLE = pvar>>8;

		if(pvar<0)
		{
			RUMBLE += 1;
		}
	}
	return RUMBLE;
}
	function  Load() {pval_data = get_pvar(SPVAR_1, 1, 32767, 0);

	sticky_aim_assist            = unpack_unsigned(pval_data, 0, 1);
	PolarAssist                  = unpack_unsigned(pval_data, 1, 1);
	ProgressionAA                = unpack_unsigned(pval_data, 2, 1); 
    RapidFire                    = unpack_unsigned(pval_data, 3, 1);
    CancelReload                 = unpack_unsigned(pval_data, 4, 1);
    AimSens                      = unpack_unsigned(pval_data, 5, 1);
    ProfileButton                = unpack_unsigned(pval_data, 6, 1);
    auto_run                     = unpack_unsigned(pval_data, 7, 1);

    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    TRACKING                     = unpack_unsigned(pval_data,0, 1);
    CancelSlide                  = unpack_unsigned(pval_data,1, 1);
	aim_sens_corrections       	 = unpack_unsigned(pval_data,2, 1);
	holdbreath                   = unpack_unsigned(pval_data,3, 1);
    _STEADY_AIM                  = unpack_unsigned(pval_data,4, 1);
    AA_BOOSTER                   = unpack_unsigned(pval_data,5, 1);
    BUNNY_HOP                    = unpack_unsigned(pval_data,6, 1);
    HairTriggers                 = unpack_unsigned(pval_data,7, 1);
    ToggleFastMelee              = unpack_unsigned(pval_data,8, 1);
   // ToggleBlockRumble            = unpack_unsigned(pval_data,9, 1);
    
   
    pval_data = get_pvar(SPVAR_3,  -32767, 32767, 0);
	Anti_Recoil_Mod  [0]            = unpack_signed(pval_data, 0);
	Anti_Recoil_Mod  [1]            = unpack_signed(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_4,  -32767, 32767, 0);
	DYNAMIC_RC  [0]                 = unpack_signed(pval_data, 0);
	DYNAMIC_RC  [1]                 = unpack_signed(pval_data, 1);
	
	
    pval_data = get_pvar(SPVAR_5, 1,32767,pack_signed(25, 30));
	DEFAULT_VERTICAL  [0]         = unpack_signed(pval_data, 0);
	DEFAULT_VERTICAL  [1]         = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_6, 1,32767,pack_signed(0, 0));
	DEFAULT_HORIZONTAL  [0]       = unpack_signed(pval_data, 0);
	DEFAULT_HORIZONTAL  [1]       = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_7, 1,32767,pack_signed(45, 45));
	Starting_Anti_Recoil_Value  [0]  = unpack_signed(pval_data, 0);
	Starting_Anti_Recoil_Value  [1]  = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_8, 1,32767,pack_signed(55, 55));
	Ending_Anti_Recoil_Value  [0]    = unpack_signed(pval_data, 0);
	Ending_Anti_Recoil_Value  [1]    = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_9, 1,32767,pack_signed(20, 20));
	recoil_drop[0]                   = unpack_signed(pval_data, 0);
	recoil_drop[1]                   = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_10, 1,32767,pack_signed(45, 45));
	recoil_angle[0]                   = unpack_signed(pval_data, 0);
	recoil_angle[1]                   = unpack_signed(pval_data, 1);
	
	//pval_data = get_pvar(SPVAR_11, 1,32767,pack_signed(40, 35));
	//antirecoilStrength[0]            = unpack_signed(pval_data, 0);
	//antirecoilStrength[1]            = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_12, 1,32767,pack_signed(10, 20));
	_v                    = unpack_signed(pval_data, 0);
	wait_v                = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_13, 1,32767,pack_signed(18, 30));
	_v_hip                = unpack_signed(pval_data, 0);
	wait_v_hip            = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_14,-32767, 32767, 0);
	RadiusEffect[0]       = unpack_signed(pval_data, 0);
	RadiusEffect[1]       = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_15,1,32767,pack_signed(20, 20));
	PolarRadius[0]        = unpack_signed(pval_data, 0);
	PolarRadius[1]        = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_16,1,32767,pack_signed(10, 16));
	AdsRadius[0]         = unpack_signed(pval_data, 0);
	AdsRadius[1]         = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_17,1,32767,pack_signed(8, 10));
	PolarAngle [0]       = unpack_signed(pval_data, 0);
	PolarAngle [1]       = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_18,1,32767,pack_signed(6, 10));
	PolarRBoost[0]       = unpack_signed(pval_data, 0);
	PolarRBoost[1]       = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_19,1,32767,pack_signed(2, 2));
	TwistedMinRad [0]        = unpack_signed(pval_data, 0);
	TwistedMinRad [1]        = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_20,-32767, 32767, 0);
	Modulation[0]         = unpack_signed(pval_data, 0);
	Modulation[1]         = unpack_signed(pval_data, 1);
	
	ChooseShapes[1]            = get_pvar(SPVAR_21,   1,   600,  0);
    ChooseShapes[1]            = get_pvar(SPVAR_22,   1,   100,  0);
    Total_Anti_Recoil_Time[0]  = get_pvar(SPVAR_23,   1,   100,  20);
    Total_Anti_Recoil_Time[1]  = get_pvar(SPVAR_24,   1,   100,  20);
    SlideDelay                 = get_pvar(SPVAR_25,   1,   600,  20);
    MaxReloadTime              = get_pvar(SPVAR_26,   1,   100,  1500);
    Buttons                    = get_pvar(SPVAR_27 ,  0,   21,   0); 
    POL_RADIUS                 = get_pvar(SPVAR_28 ,  1,   100,  40);
    
    GEN_SENS                 = get_pvar(SPVAR_29,   1,   327,  100);
    ADS_SENS                 = get_pvar(SPVAR_30,   1,   327,  100);
    FIRE_SENS                = get_pvar(SPVAR_31,   1,   327,  100);
    ADS_FIRE_SENS            = get_pvar(SPVAR_32,   1,   327,  100);
    
    pval_data = get_pvar(SPVAR_33, 1,32767,pack_signed(10, 17));
	RateOfFire[0]               = unpack_signed(pval_data, 0);
	RateOfFire[0]               = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_34, 1,32767,pack_signed(8, 7));
	STEADY_RESOLUTION               = unpack_signed(pval_data, 0);
	in_game_menu_sens               = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_35, 1,32767,pack_signed(10, 8));
	TRACKING_STRENGTH     [0]         = unpack_signed(pval_data, 0);
	TRACKING_STRENGTH     [1]         = unpack_signed(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_36, 1,32767,pack_signed(-15, -25));
	ProgPowerMin[0]             = unpack_signed(pval_data, 0);
	ProgPowerMin[1]             = unpack_signed(pval_data, 0);
	pval_data = get_pvar(SPVAR_37, 1,32767,pack_signed(15, 25));
	ProgPowerMax[0]             = unpack_signed(pval_data, 0);
	ProgPowerMax[1]             = unpack_signed(pval_data, 0);
	pval_data = get_pvar(SPVAR_38, 1,32767,pack_signed(3, 5));
    ProgPowerInc[0]             = unpack_signed(pval_data, 0);
    ProgPowerInc[1]             = unpack_signed(pval_data, 0);
    pval_data = get_pvar(SPVAR_39, 1,32767,pack_signed(1, 1));
    ProgWaitMin[0]             = unpack_signed(pval_data, 0);
    ProgWaitMin[1]             = unpack_signed(pval_data, 0);
    pval_data = get_pvar(SPVAR_40, 1,32767,pack_signed(1, 1));
    ProgWaitMax[0]             = unpack_signed(pval_data, 0);
    ProgWaitMax[1]             = unpack_signed(pval_data, 0);
    pval_data = get_pvar(SPVAR_41, 1,32767,pack_signed(1, 1));
    ProgWaitInc[0]             = unpack_signed(pval_data, 0);
    ProgWaitInc[1]             = unpack_signed(pval_data, 0);
    pval_data = get_pvar(SPVAR_42, 1,32767,pack_signed(20, 30));
    ProgRelease[0]             = unpack_signed(pval_data, 0);
    ProgRelease[1]             = unpack_signed(pval_data, 0);
	
	pval_data = get_pvar(SPVAR_43, 1,32767,pack_signed(10, 8));
	SCAN_STRENGTH     [0]      = unpack_signed(pval_data, 0);
	SCAN_STRENGTH     [1]      = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_44, 1,32767,pack_signed(2, 2));
	angle2     [0]             = unpack_signed(pval_data, 0);
	angle2     [1]             = unpack_signed(pval_data, 1);
   
   	pval_data = get_pvar(SPVAR_45, 1,32767,pack_signed(24, 24));
	SeRadius     [0]      = unpack_signed(pval_data, 0);
	SeRadius     [1]      = unpack_signed(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_46, 1,32767,pack_signed(2, 2));
	SeAngle     [0]             = unpack_signed(pval_data, 0);
	SeAngle     [1]             = unpack_signed(pval_data, 1); 
   
  } 
function Save(){ 

  pval_data = pack_unsigned(pval_data, sticky_aim_assist            ,0, 1);
  pval_data = pack_unsigned(pval_data, PolarAssist                  ,1, 1);
  pval_data = pack_unsigned(pval_data, ProgressionAA                ,2, 1);
  pval_data = pack_unsigned(pval_data, RapidFire                    ,3, 1);
  pval_data = pack_unsigned(pval_data, CancelReload                 ,4, 1);
  pval_data = pack_unsigned(pval_data, AimSens                      ,5, 1);
  pval_data = pack_unsigned(pval_data, ProfileButton                ,6, 1);
  pval_data = pack_unsigned(pval_data, auto_run                     ,7, 1);
  set_pvar(SPVAR_1,pval_data);
 
  pval_data = pack_unsigned(pval_data, TRACKING                    ,0, 1);
  pval_data = pack_unsigned(pval_data, CancelSlide                 ,1, 1);
  pval_data = pack_unsigned(pval_data, aim_sens_corrections        ,2, 1);
  pval_data = pack_unsigned(pval_data, holdbreath                  ,3, 1);
  pval_data = pack_unsigned(pval_data, _STEADY_AIM                 ,4, 1);
  pval_data = pack_unsigned(pval_data, AA_BOOSTER                  ,5, 1);
  pval_data = pack_unsigned(pval_data, BUNNY_HOP                   ,6, 1);
  pval_data = pack_unsigned(pval_data, HairTriggers                ,7, 1);
  pval_data = pack_unsigned(pval_data, ToggleFastMelee             ,8, 1);
  pval_data = pack_unsigned(pval_data, ToggleBlockRumble           ,9, 1);
  set_pvar(SPVAR_2,pval_data);
 
  pval_data = pack_signed(Anti_Recoil_Mod[0] ,Anti_Recoil_Mod[1]);
  set_pvar(SPVAR_3,pval_data); 
                                                                              
  pval_data = pack_signed(DYNAMIC_RC[0] ,DYNAMIC_RC[1]);
  set_pvar(SPVAR_4,pval_data);  
                                                          
  pval_data = pack_signed(DEFAULT_VERTICAL[0] ,DEFAULT_VERTICAL[1]);
  set_pvar(SPVAR_5,pval_data);
  
  pval_data = pack_signed(DEFAULT_HORIZONTAL[0] ,DEFAULT_HORIZONTAL[1]); 
  set_pvar(SPVAR_6,pval_data);
                                                         
  pval_data = pack_signed(Starting_Anti_Recoil_Value[0] ,Starting_Anti_Recoil_Value[1]);
  set_pvar(SPVAR_7,pval_data);  
                                                      
  pval_data = pack_signed(Ending_Anti_Recoil_Value[0] ,Ending_Anti_Recoil_Value[1]); 
  set_pvar(SPVAR_8,pval_data);
  
  pval_data = pack_signed(recoil_drop[0]  ,recoil_drop[1]  ); 
  set_pvar(SPVAR_9,pval_data);
  
  pval_data = pack_signed(recoil_angle[0] ,recoil_angle[1]); 
  set_pvar(SPVAR_10,pval_data);
   
 // pval_data = pack_signed(antirecoilStrength[0] ,antirecoilStrength[1]); 
 // set_pvar(SPVAR_11,pval_data);

  pval_data = pack_signed(_v,wait_v);
  set_pvar(SPVAR_12,pval_data);
  
  pval_data = pack_signed(_v_hip,wait_v_hip); 
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_signed(RadiusEffect[0],RadiusEffect[1] ); 
  set_pvar(SPVAR_14,pval_data);
  
  pval_data = pack_signed(PolarRadius[0],PolarRadius[1]);     
  set_pvar(SPVAR_15,pval_data);
  
  pval_data = pack_signed(AdsRadius[0],AdsRadius[1]);
  set_pvar(SPVAR_16,pval_data);
  
  pval_data = pack_signed(PolarAngle[0],PolarAngle[1]); 
  set_pvar(SPVAR_17,pval_data);
 
  pval_data = pack_signed(PolarRBoost[0],PolarRBoost[1]);
  set_pvar(SPVAR_18,pval_data);
  
  pval_data = pack_signed(TwistedMinRad [0],TwistedMinRad [1]); 
  set_pvar(SPVAR_19,pval_data);
  
  pval_data = pack_signed(Modulation[0],Modulation[1]); 
  set_pvar(SPVAR_20,pval_data);
  
  set_pvar(SPVAR_21,ChooseShapes[0] );
  set_pvar(SPVAR_22,ChooseShapes[1] );
  set_pvar(SPVAR_23,Total_Anti_Recoil_Time[0] );     
  set_pvar(SPVAR_24,Total_Anti_Recoil_Time[1] );
  set_pvar(SPVAR_25,SlideDelay ); 
  set_pvar(SPVAR_26,MaxReloadTime );
  set_pvar(SPVAR_27,Buttons);
  set_pvar(SPVAR_28,POL_RADIUS); 
  set_pvar(SPVAR_29,GEN_SENS ); 
  set_pvar(SPVAR_30,ADS_SENS );
  set_pvar(SPVAR_31,FIRE_SENS);
  set_pvar(SPVAR_32,ADS_FIRE_SENS); 
  
      pval_data = pack_signed(RateOfFire[0],RateOfFire[1]); 
  set_pvar(SPVAR_33,pval_data);
      pval_data = pack_signed(STEADY_RESOLUTION,in_game_menu_sens); 
  set_pvar(SPVAR_34,pval_data);
      pval_data = pack_signed(TRACKING_STRENGTH [0],TRACKING_STRENGTH [1]); 
  set_pvar(SPVAR_35,pval_data);
      pval_data = pack_signed(ProgPowerMin [0],ProgPowerMin [1]); 
  set_pvar(SPVAR_36,pval_data);
      pval_data = pack_signed(ProgPowerMax [0],ProgPowerMax [1]); 
  set_pvar(SPVAR_37,pval_data);
      pval_data = pack_signed(ProgPowerInc [0],ProgPowerInc [1]); 
  set_pvar(SPVAR_38,pval_data);
      pval_data = pack_signed(ProgWaitMin [0],ProgWaitMin [1]); 
  set_pvar(SPVAR_39,pval_data);
      pval_data = pack_signed(ProgWaitMax [0],ProgWaitMax [1]); 
  set_pvar(SPVAR_40,pval_data);
      pval_data = pack_signed(ProgWaitInc [0],ProgWaitInc [1]); 
  set_pvar(SPVAR_41,pval_data);
      pval_data = pack_signed(ProgRelease [0],ProgRelease [1]); 
  set_pvar(SPVAR_42,pval_data);
      pval_data = pack_signed(SCAN_STRENGTH [0],SCAN_STRENGTH [1]); 
  set_pvar(SPVAR_43,pval_data);
      pval_data = pack_signed(angle2 [0],angle2 [1]); 
  set_pvar(SPVAR_44,pval_data);
      pval_data = pack_signed(SeRadius [0],SeRadius [1]); 
  set_pvar(SPVAR_45,pval_data);
      pval_data = pack_signed(SeAngle [0],SeAngle [1]); 
  set_pvar(SPVAR_46,pval_data);
}
		    