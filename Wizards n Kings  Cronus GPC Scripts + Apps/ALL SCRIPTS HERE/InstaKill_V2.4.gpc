/*

 ──▄▀▀▀▄▄▄▄▄▄▄▀▀▀▄───
───█▒▒░░░░░░░░░▒▒█───
────█░░█░░░░░█░░█────
─▄▄──█░░░▀█▀░░░█──▄▄─
█░░█─▀▄░░░░░░░▄▀─█░░█
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█░░╦─╦╔╗╦─╔╗╔╗╔╦╗╔╗░░█
█░░║║║╠─║─║─║║║║║╠─░░█
█░░╚╩╝╚╝╚╝╚╝╚╝╩─╩╚╝░░█
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
____________________________InstalKill _V2.4____ Fortnite Update 7.40 Working ____________________________________________
                                                                                   ///
///   |------//SENSITIVITY*/ int Y_SENSITIVITY = 85; int X_SENSITIVITY = 85; int OpSENS = TRUE;     /*#######|
///  SETUP                                                                                 ///
///--------------------------------------------------------------------------------------------------------------------
///   /////CONTROLS/////				/////BEST SCRIPT /////											   ///                                            
///===================================================================================== 
///  Insta Edit And Insta Reset New
///=========================================================================================
///AIM ABUSE long/Short ADS + LEFT  switches thru both NEW
///============================================================================================
///Anti Aim + DROPSHOT: ADS + RELOAD_BTN, the player lowers and rises quickly as he shoots   New                                              ///                                                                                                                              
///============================================================================================
///ANTI RECOIL: always on                      
///============================================================================================
///RAPID FIRE: ADS + RIGHT                           
///============================================================================================
///HAIR TRIGGER: always On, This also allows super fast building.                                                              ///                                    
///============================================================================================
///PerfectAccuracy LT+RB
///============================================================================================
///Head Aimbot  ---> ALWAYS ON   
///============================================================================================
/// AimAssist 1 and 2 Toggle LB+UP switch thru both NEW
///============================================================================================
/// Sniper aim Improved
///============================================================================================
/// New SENS FOR IN GAME
///============================================================================================
/// 
///============================================================================================
///_______________________________________________________________________________________ ///_
*/

//INSTA EDIT & INSTA RESET//////////////////////////////////////////////////
int EDIT_BUTTON       = BUILD_BTN;                         				////
int EDIT_BUTTON_HOLD  = TRUE;          									////
int HOLD_TIME         = 200;      										//// 
int EDIT_RESET_BUTTON = CROUCH_BTN  

//Rapid Fire (IMPROVED)
int RapidFire      = FALSE; 
 
//AntiAim
int AntiAim        = TRUE;
int Defense			= FALSE;
int Offense			= TRUE;

//Aim Abuse
int LONG_Release = 55;
int SHORT_Release = 27;
int LONG_Hold = 235;   
int SHORT_Hold = 235;
int Long_abuse = TRUE; 
int Short_abuse = FALSE;
 
//Aim Assist

int OpAimAssist1 = TRUE;     
int OpAimAssist2 = FALSE;                 
int OpAimAssist1_V = 9;     
int OpAimAssist2_V = 13;      
int OpAimAssist1_SPEED =60; 
int OpAimAssist2_SPEED =65;  

//GHOST PEEK HOLD L2(LT) 
int Ghost_Peek = FALSE; // HOLD "LT" and Press "LB" for  ON_OFF
 

/////100% Accuracy//////////////////////////////////////////////////////////
int PerfectAccuracy  = TRUE; 
                                                                                                                    
//Drop Shot
int Drop_Shot = FALSE; // HOLD "ADS_BTN" and TAP "JUMP_BTN" for toggle ON_OFF
 
 //BUTTONS:
 
 
//RAPID FIRE BUTTON
int RAPID = 16; //RIGHT
 
 //GHOST PEEK BUTTON
define DROP = 6; //PS4_L1 XB1_LB
int OP = FALSE;
int RMBLE = RUMBLE_A;                                             ////
int Notify = TRUE     

////LED/////////////////////////////////////////////////////////////////////
int a; int b;

 
//----------------------------------------
// BUTTON LAYOUT: BUILDER PRO
 define FIRE_BTN = 4; //XB1_RT //PS4_R2
 define ADS_BTN = 7; //XB1_LT //PS4_L2
 define CROUCH_BTN = 5; //XB1_RS //PS4_R3
 define SPRINT_BTN = 8; //XB1_LS //PS4_L3
 define JUMP_BTN = 19; //XB1_A  //PS4_CROSS
 define NEXT_PIECE = 3; //XB1_RT //PS4_R1
 define LEFT_BUMP = 6; //XB1_LB //PS4_L1
 define RIGHT_BUMP = 3; // XB1_RB //PS4_R1
 define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLE
 define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE
 define WALL_BTN = 4; //XB1_RB //PS4_R2
 define STAIRS_BTN = 7; //XB1_LB //PS4_L2
 define FLOOR_BTN = 3; //XB1_RT //PS4_R1
 define ROOF_BTN = 6; //XB1_LT //PS4_L1
 define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
 define R_X = 9; //XB1_RX //PS4_RX
 define R_Y = 10; //XB1_RY //PS4_RY
 define L_X = 11; //XB1_LX //PS4_LX
 define L_Y = 12; //XB1_LY //PS4_LY
 define UP = 13; //XB1_UP //PS4_UP
 define DOWN = 14; //XB1_DOWN //PS4_DOWN
 define LEFT = 15; //XB1_LEFT //PS4_LEFT
 define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT
 define MENU		= XB1_MENU;








 //-------------------------------------------------------------------------------------------
 //COLOR IDENTIFICATION              
 define Blue = 1;
 define Red = 2;
 define Green = 3;
 define Pink = 4;
 define SkyBlue = 5;
 define Yellow = 6;
 define White = 7;
 data(1,
     2, 0, 0, 0, //1. Blue                                 
     0, 2, 0, 0, //2. Red                                  
     0, 0, 2, 0, //3. Green                                
     0, 0, 0, 2, //4. Pink                                 
     2, 0, 2, 0, //5. SkyBlue                              
     0, 2, 2, 0, //6. Yellow                               
     2, 2, 2, 2 //7. White 
 );
 int Col_ind;
 //END








 //Build Speed
 define build_speed = 50;
 define speed = 50;
 //END







 //-----------------------------------------------------
 // VARIABLES









 //ANTI RECOIL SETTINGS
 int ANTI_RECOIL; // For AntiRecoil combo
 int anti_recoil; // For AntiRecoil combo
 define AR_Release = 25;
 define ONLY_WITH_SCOPE = TRUE; // if TRUE Antirecoil IS ON only when scoping - if FALSE, is always ON
 //END








 //RUMBLE
 int rumble_type = RUMBLE_A;
 //END








 //JItter
 int tap; //ADVANCED JITTER
 int R2_block; //ADVANCED JITTER
 //END








 //AIM ASSIST HOLD & WAIT
 int aimabuse_hold;
 int aimabuse_rest;
 //END









 main { //--------------------------------- 
     /////////////////////////////////////////////////////////////////////////////////
     // ON-OFF SETTINGS:
  if (get_val(ADS_BTN)) {
         if (event_press(DROP)) {
             Ghost_Peek = !Ghost_Peek;
             RapidFire = FALSE;
             rumble_A_if_true(Ghost_Peek);
         }
  
         if (event_press(RIGHT)) {
             RapidFire = !RapidFire;
             Ghost_Peek = FALSE;
             rumble_A_if_true(RapidFire);
         }
       
         set_val(DROP, 0);
         set_val(DOWN, 0);
         set_val(RIGHT, 0);
         set_val(SWAP_BTN, 0);
         set_val(JUMP_BTN, 0);
    }
   
    //InstaEdit & InstaReset
if (a) 
{                                                                           
 if (i < num) 
 {                                                                     
  if (!combo_running(master)) 
  {                                                      
   combo_run(master);                                                                 
  }  
 
  } 
  else if (i > num) 
  {                                                            
       a = FALSE;                                                                   
  }                                                                                
    }                                                                                    
 
    if(EDIT_BUTTON_HOLD)                                                                     
    {                                                                            
      if(get_val(EDIT_BUTTON) && get_ptime(EDIT_BUTTON) > HOLD_TIME)                     
      {                                                                                
          edit = TRUE;                                                                       
      }   
    }                                                                                  
      else if(!EDIT_BUTTON_HOLD)                                                         
      {                                                                                
        if(get_val(EDIT_BUTTON))                                                           
        {                                                                                
        edit = TRUE;                                                                       
        }                                                                                
        }  
   if (edit == TRUE) 
    {                                                                  
     resetPress(0,1,0,0,0,0);                                                         
   if (get_val(BUILD_BTN)) 
    {                                                        
     OpAimAssist1 = TRUE;                                                                
     Long_abuse  = TRUE;                                                                
    }   
 
     if (event_release(FIRE_BTN) || get_val(EDIT_RESET_BUTTON) || get_val(SWAP_BTN)) 
     {   
      set_click(BUILD_BTN, 1, 0);                                                  
      edit = FALSE;                                                                
      }                                                                                
       }
       
    //100% ACCURACY
if (get_val(ADS_BTN) && get_val(RIGHT_BUMP)) {
  combo_run(PerfectAccuracy);
  combo_run(Notify);a=0;b=2;
set_val(RIGHT_BUMP, 0);
      } else {
  combo_stop(PerfectAccuracy);
}
 
  /////////////////////////////////////////////////////////////////////////////////
     //  Color Identification
     if (RapidFire &&!Ghost_Peek ) colourled(Red); //EVERYTHING IS OFF
     if ((Ghost_Peek)) colourled(Yellow); //IF YELLOW Ghost Peeking IS ON


     /////////////////////////////////////////////////////////////////////////////////
     //Rapid Fire
     if (RapidFire) {
         if (get_val(ADS_BTN) && get_val(FIRE_BTN)) { // HOLD L2 AND R2 FOR RAPID (DONE LIKE THIS TO BE ABLE TO EDIT OBJECTS)
             combo_run(RAPID_FIRE);
             ANTI_RECOIL = 11;
         }
     }
     /////////////////////////////////////////////////////////////////////////////////
     // ANTI RECOIL
     if (get_val(ADS_BTN) && get_val(FIRE_BTN)) {
         ANTI_RECOIL = 8;
         combo_run(AntiRecoil);
     }
///////////////OPSENS////////////      
      if (OpSENS) { 
if(get_val(7)&&get_val(4)){
sensitivity(10, NOT_USE, Y_SENSITIVITY); sensitivity(9, NOT_USE, X_SENSITIVITY); }
if (abs(get_val(10)) < 5 && abs(get_val(9)) < 5) {
set_val        (10, 0);         set_val(9, 0);  
}} 

     
/////////////////////////////////////////////////////////////////////////////////
     //SNEAK PEAK
     if (Ghost_Peek) {
         if (get_val(ADS_BTN)) {
             if (event_press(FIRE_BTN)) {
                 combo_run(AUTO_SNEAK_PEAK);
             }
             set_val(FIRE_BTN, 0);
         }
     }
     
     /////////////////////////////////////////////////////////////////////////////////
     //HAIR TRIGGER
     if (get_val(FIRE_BTN)) { // IF YOU PRESS AT LEAST 1% OF FIRE BTN IT'LL HAVE AN OUTPUT OF 100
         set_val(FIRE_BTN, 100);
     }
     ///////////////////////////////////////////////////////////////////////////////// 
 //AIM ASSIST
if (get_val(XB1_LT)){ if (event_press(UP)) {
OpAimAssist1 = !OpAimAssist1;
OpAimAssist2 = !OpAimAssist2;
RMBLE_A(OpAimAssist1); }set_val(3, 0); }

if (OpAimAssist2) {
if (get_val(7) > 95) { combo_run(OpAimAssist2_combo);}}
if (get_val(9)<-19||get_val(9)>19||get_val(10)<-19||get_val(10)>19||get_val(9)<-19||get_val(9)>19||get_val(10)<-19||get_val(10)>19){ 
combo_stop(OpAimAssist2_combo);}

if (OpAimAssist1) {
if (get_val(7) > 95) { combo_run(AAs_COMBO);}}
if (abs(get_val(9)) > 15 || abs(get_val(10)) > 15) {
combo_stop(AAs_COMBO);} 

if (Long_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Long_abuse_combo); 
} else { combo_stop(Long_abuse_combo); }
}
if (Short_abuse) {
if (get_val(XB1_LT) > 95) {
combo_run(Short_abuse_combo);
} else { combo_stop(Short_abuse_combo); }}

if (get_val(XB1_LT) && event_press(LEFT)) {
Short_abuse = !Short_abuse;
Long_abuse = !Long_abuse;
RMBLE_A(Short_abuse); }
	

//AntiAim
   
   if(get_val(ADS_BTN) && event_press(RELOAD_BTN)){
   AntiAim =! AntiAim;
   if(AntiAim == TRUE){combo_run(Notify);a=0;b=2;}
   if(AntiAim == FALSE){combo_run(Notify);a=2;b=0;} 
   }
   if(AntiAim){
      if(Defense){if(get_val(FIRE_BTN)==0&&get_rumble(RUMBLE_A)||get_rumble(RUMBLE_B)){combo_run(AntiAim);}}
      if(Offense){if(get_val(ADS_BTN)&&get_val(FIRE_BTN)){combo_run(AntiAim);}}
      }
   }


// COMBO BLOCKS   

combo OP_Tap {
set_val(5, 100);
wait(15); wait(15);
set_val(4, 100);
wait(15); wait(10);
set_val(5, 100);
wait(15); wait(5);
}

combo OP_Hold {
set_val(5, 100);
wait(15); wait(15);
set_val(4, 100);
wait(15); wait(10);
set_val(5, 100);
wait(15); wait(95);
	}


combo Short_abuse_combo {
set_val(7, 100); wait(SHORT_Hold);
set_val(7, 0);   wait(SHORT_Release); }

combo Long_abuse_combo {
set_val(7, 100); wait(LONG_Hold);
set_val(7, 0);   wait(LONG_Release); } 

combo AAs_COMBO {
set_val(9, (OpAimAssist1_V)); wait(OpAimAssist1_SPEED);
set_val(9, OpAimAssist1_V * -1); wait(OpAimAssist1_SPEED); }

combo OpAimAssist2_combo {
set_val(10, (OpAimAssist2_V)); wait(OpAimAssist2_SPEED)
set_val(9, (OpAimAssist2_V)); wait(OpAimAssist2_SPEED)
set_val(10, OpAimAssist2_V * -1); wait(OpAimAssist2_SPEED)
set_val(9, OpAimAssist2_V * -1); wait(OpAimAssist2_SPEED)}


combo AUTO_SNEAK_PEAK {
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(15);
     set_val(FIRE_BTN, 100);
     wait(15);
     wait(10); //INCREASE THIS IF YOU SHOOT THE STAIRS
     set_val(CROUCH_BTN, 100);
     wait(15);
     wait(95);
 } // END


combo AntiAim{
set_val(CROUCH_BTN,140);
wait(50);
wait(50);
set_val(CROUCH_BTN,150);
}


 
combo AimAbuse {
set_val(ADS_BTN, 100);
wait(AimAbuse_HOLD);
set_val(ADS_BTN, 0);
wait(AimAbuse_RELEASE);
} 


combo master {                                                                           
wait(WAIT);                                                                             
set_val(button, 100);                                                                   
wait(28);                                                                               
set_val(button, 0);                                                                     
wait(28);                                                                               
i = i + 1;                                                                              
}

combo RAPID_FIRE {
     set_val(FIRE_BTN, 100);
     wait(10);
     set_val(FIRE_BTN, 0);
     wait(10);
 } //end
 
 combo Notify {
if(Notify){set_rumble(RUMBLE_B,65);}
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}
 
combo PerfectAccuracy {
set_val(FIRE_BTN,100);
wait(100);
wait(250);
set_val(FIRE_BTN,100);
}

 combo VIBRATE {
     set_rumble(rumble_type, 100);
     wait(300);
     reset_rumble();
 } //end

 combo RumbleOnce {
    set_rumble(RUMBLE_A, 100);
    wait(250);
    reset_rumble();}
    
    combo RumbleTwice {
    set_rumble(RUMBLE_A, 100);
    wait(250);
    set_rumble(RUMBLE_A, 0);
    wait(250);
    set_rumble(RUMBLE_A, 100);
    wait(250);
    reset_rumble();}
 
 combo AntiRecoil {
     anti_recoil = get_val(R_Y) + ANTI_RECOIL;
     if (anti_recoil > 100) anti_recoil = 100;
     set_val(R_Y, anti_recoil);
 }
 
 combo RUMBLE {
set_rumble(RMBLE, 100); wait(300);
reset_rumble(); }


 function rumble_A_if_true(var) {
     if (var) rumble_type = RUMBLE_A;
     else rumble_type = RUMBLE_B;
     combo_run(VIBRATE);
 }
 // COLOR LED function                                
 //--------------------------------------------------------------
 function colourled(Colour) {
     Col_ind = (Colour * 4) - 3;
     set_led(LED_1, dbyte(Col_ind));
     set_led(LED_2, dbyte(Col_ind + 1));
     set_led(LED_3, dbyte(Col_ind + 2));
     set_led(LED_4, dbyte(Col_ind + 3));
 }
 
 function resetPress(P0,P1,P2,P3,T,S) {                                              
if(!P0){pressedIt[0] = FALSE;}    else if(P0) {pressedIt[0] = TRUE;}                     
if(!P1){pressedIt[1] = FALSE;}    else if(P1) {pressedIt[1] = TRUE;}                        
if(!P2){pressedIt[2] = FALSE;}    else if(P2) {pressedIt[2] = TRUE;}                        
if(!P3){pressedIt[3] = FALSE;}    else if(P3) {pressedIt[3] = TRUE;}                      
}   

function set_click(B, Num, Wait) {                                                      
    WAIT = Wait;                                                                            
    i = 0;                                                                                   
button = B;                                                                              
num = Num;                                                                               
a = TRUE;                                                                                
}
function RMBLE_A(var) {
if (var) RMBLE = RUMBLE_A;
else RMBLE = RUMBLE_B;
combo_run(RUMBLE); }

int edit = FALSE;                                                                       
int pressedIt[6];                                                                       
int WAIT;                                                                                
int num, i;                                                                           
int button; 




 ///---DEV---//
//-SayNoBro-//
//-Lxuieee-//
///---Testers---//
// Thanks For The Testers That Tested For This  So Thankful :) //