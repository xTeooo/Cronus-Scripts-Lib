const int16 ANGLEVAL[] = { 23170,  23167,  23156,  23139,  23114,  23082,  23044,  22998,  22945,  22885,  22818,  22745,  22664,  22577,  22482,  22381,  22273,  22158,  22036,  21908,  21773,  21632,  21483,  21329,  21167,  21000,  20825,  20645,  20458,  20265,  20066,  19861,  19650,  19432,  19209,  18980,  18745,  18505,  18259,  18007,  17750,  17487,  17219,  16946,  16667,  16384,  16096,  15802,  15504,  15201,  14894,  14582,  14265,  13944,  13619,  13290,  12957,  12620,  12278,  11934,  11585,  11233,  10878,  10519,  10157,  9792,  9424,  9053,  8680,  8304,  7925,  7544,  7160,  6774,  6387,  5997,  5605,  5212,  4817,  4421,  4024,  3625,  3225,  2824,  2422,  2019,  1616,  1213,  809,  404,  00,  -404,  -809,  -1213,  -1616,  -2019,  -2422,  -2824,  -3225,  -3625,  -4024,  -4421,  -4817,  -5212,  -5605,  -5997,  -6387,  -6774,  -7160,  -7544,  -7925,  -8304,  -8680,  -9053,  -9424,  -9792,  -10157,  -10519,  -10878,  -11233,  -11585,  -11934,  -12278,  -12620,  -12957,  -13290,  -13619,  -13944,  -14265,  -14582,  -14894,  -15201,  -15504,  -15802,  -16096,  -16384,  -16667,  -16946,  -17219,  -17487,  -17750,  -18007,  -18259,  -18505,  -18745,  -18980,  -19209,  -19432,  -19650,  -19861,  -20066,  -20265,  -20458,  -20645,  -20825,  -21000,  -21167,  -21329,  -21483,  -21632,  -21773,  -21908,  -22036,  -22158,  -22273,  -22381,  -22482,  -22577,  -22664,  -22745,  -22818,  -22885,  -22945,  -22998,  -23044,  -23082,  -23114,  -23139,  -23156,  -23167,  -23170,  -23167,  -23156,  -23139,  -23114,  -23082,  -23044,  -22998,  -22945,  -22885,  -22818,  -22745,  -22664,  -22577,  -22482,  -22381,  -22273,  -22158,  -22036,  -21908,  -21773,  -21632,  -21483,  -21329,  -21167,  -21000,  -20825,  -20645,  -20458,  -20265,  -20066,  -19861,  -19650,  -19432,  -19209,  -18980,  -18745,  -18505,  -18259,  -18007,  -17750,  -17487,  -17219,  -16946,  -16667,  -16384,  -16096,  -15802,  -15504,  -15201,  -14894,  -14582,  -14265,  -13944,  -13619,  -13290,  -12957,  -12620,  -12278,  -11934,  -11585,  -11233,  -10878,  -10519,  -10157,  -9792,  -9424,  -9053,  -8680,  -8304,  -7925,  -7544,  -7160,  -6774,  -6387,  -5997,  -5605,  -5212,  -4817,  -4421,  -4024,  -3625,  -3225,  -2824,  -2422,  -2019,  -1616,  -1213,  -809,  -404,  00,  404,  809,  1213,  1616,  2019,  2422,  2824,  3225,  3625,  4024,  4421,  4817,  5212,  5605,  5997,  6387,  6774,  7160,  7544,  7925,  8304,  8680,  9053,  9424,  9792,  10157,  10519,  10878,  11233,  11585,  11934,  12278,  12620,  12957,  13290,  13619,  13944,  14265,  14582,  14894,  15201,  15504,  15802,  16096,  16384,  16667,  16946,  17219,  17487,  17750,  18007,  18259,  18505,  18745,  18980,  19209,  19432,  19650,  19861,  20066,  20265,  20458,  20645,  20825,  21000,  21167,  21329,  21483,  21632,  21773,  21908,  22036,  22158,  22273,  22381,  22482,  22577,  22664,  22745,  22818,  22885,  22945,  22998,  23044,  23082,  23114,  23139,  23156,  23167,  23170 };
const int16 PIVAL[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};   

int DZ = 100;
int TargetList[2];
int targetLoop;
int index;
int i;
int angle;
int power;
int TIME = 1;

int deltax,deltay;
int hyp;
int anglesx,anglesy;
int B = 528;
int A = 559;
int rnd;
int SHAKEX = -8; 
int STRAFEX = -10; 
int SHAKEY = -8;  
int STRAFEY = -10; 
int RIGHTOFFSETY,RIGHTOFFSETX;
int LEFTOFFSETX,LEFTOFFSETY;
int LX = PS4_LX;
int LY = PS4_LY;
int RY = PS4_RY;
int RX = PS4_RX;
int ry;
int rx; 
int lx; 
int ly; 
int RAXIS;
main {
    block_rumble();
	Aimbot();
	CalcAngle()
	valuefinder()
	RAXIS = get_polar(POLAR_RS, POLAR_ANGLE);
	combo_run(u);
	combo_run(w);
	combo_run(A);
	combo_run(c)
Y(PS4_RX,(PI * PI / 180));
Y(PS4_RY,(PI * PI / 180));
rnd = random(A, B);
set_polar(POLAR_LS, DZ, (100 * rnd));	
	}
	
combo u {
	Y(RX,rx)wait(TIME)Y(RX,0)wait(TIME)Y(RX,-rx)wait(TIME)Y(RX,0)wait(TIME)
}
combo w {
	Y(RY,0)wait(TIME)Y(RY,ry)wait(TIME)Y(RY,0)wait(TIME)Y(RY,-ry)wait(TIME)
}
combo A{
	Y(LX,lx)wait(TIME)Y(LX,0)wait(TIME)Y(LX,-lx)wait(TIME)Y(LX,0)wait(TIME)
}
combo c{
	Y(LY,0)wait(TIME)Y(LY,ly)wait(TIME)Y(LY,0)wait(TIME)Y(LY,-ly)wait(TIME)
}

	function valuefinder(){
RIGHTOFFSETX = -1
RIGHTOFFSETY = -1
if ( RX > 0 ) {
RIGHTOFFSETX = 1
}
if ( RY > 0 ) {
RIGHTOFFSETY = 1
}
rx = (RX + SHAKEX) * RIGHTOFFSETX
ry = (RY + SHAKEY) * RIGHTOFFSETY
LEFTOFFSETX = -1
LEFTOFFSETY = -1
if ( LX > 0 ) {
LEFTOFFSETX = 1
}
if ( LY > 0 ) {
LEFTOFFSETY = 1
}
lx =  (LX + STRAFEX) * LEFTOFFSETX
ly =  (LY + STRAFEY) * LEFTOFFSETY

}
function Y( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (32767 - abs(get_val(axis))) / 32767 + get_val(axis), -32767, 32767));
  return;
}	
function atan(){
	if (anglesx != anglesx){
		anglesx = 0;
			}
	if (anglesy != anglesy){
		anglesy = 0;
			}
	if (anglesx > 89){
		anglesx = 89;
			}
	if (anglesx < -89){
		anglesx = -89;
			}
	if (anglesy > 180){
		anglesy -= 360;
			}
	if (anglesy < -180){
		anglesy += 180;
			}
	return anglesx;
	return anglesy;
	}


int radianval
function tan(tanValue){
  radianval = atan() * (PI / 180);
  tanValue = atan ();
  return   ANGLEVAL[(radianval/tanValue)];
  return   PIVAL[(radianval/tanValue)];
  return 0;
}
int val;

function sin (x){
   x = atan();
   val = PI / 180;
   return   ANGLEVAL[(x * val)];
   return   PIVAL[(x * val)];
   return 0;
}

int sign,sum,PI;	
int n;
function PI(){
sign = sign*(-1) 
n = n + 2;
sum = sum +(sign *(4 / ((n) * (n + 1)*(n + 2))))
PI = sum;
   return sum;
   return ANGLEVAL[PI];}
function Get3dDistance(){
	return isqrt(pow(get_ival(RY), 2) + pow(get_ival(RX), 2));
}
function Aimbot(){
	TargetList = targetLoop * TargetList;
	targetLoop = 0;
	for( i = 0;
	i < PI();
	i ++){
		if (index == -1 || i < PI) {
			index = i;
					}
		continue;
		set()
		gr()
		CalcAngle();
		targetLoop = Get3dDistance();
		targetLoop++;
			}
	if(targetLoop > 0){
				targetLoop = 0;
				TargetList = 0;
							}
					}
			
function CalcAngle(){
	deltax = RX;
	deltay = RY;
	hyp = isqrt(deltax * deltax + deltay * deltay);
if(RAXIS < 45) {
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  0x721804; // / 
		    anglesy = ( deltay * sin(135 + deltax / hyp)) * 57 +  0x721804; 
		} 
		else if(RAXIS <  89) { 
			anglesx = ( deltax/2 * tan(deltax / hyp)) * 57 +  0x721804; // | 
		    anglesy = ( deltay   * sin(deltay / hyp)) * 57 +  0x721804;
		} 
		else if(RAXIS < 135) { 
			anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  0x721804; 
		    anglesy = ( deltay * sin(225 + deltax / hyp)) * 57 +  0x721804; 
		}  
		else if(RAXIS < 180) {
		    anglesx = ( deltax * tan(deltax / hyp))  * 57 +  0x721804;
		    anglesy = ( deltay/2 * sin(deltay / hyp)) * 57 +  0x721804; 
		}
		else if(RAXIS < 225) { 
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  0x721804;  
		    anglesy = ( deltay * sin(135 + deltax / hyp)) * 57 +  0x721804; 
		}  
		else if(RAXIS < 270) { 
		    anglesx = ( deltax/2 * tan(deltax / hyp)) * 57 +  0x721804;
		    anglesy = ( deltay * sin(deltay / hyp))* 57 +  0x721804; 
		}
		else if(RAXIS < 315) { 
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  0x721804; 
		    anglesy = ( deltay * sin(225 + deltax / hyp)) * 57 +  0x721804; 
		}
		else { 
		  	anglesx = ( deltax *   tan(deltax / hyp)) * 57 +  0x721804;
		    anglesy = ( deltay/2 * sin(deltay / hyp)) * 57 +  0x721804; 
		}}
	function gr()
{
power = POLAR_RS;

    if(power >= 0 && power <= 200 )
        power = power;
    else
        power = 200;

}

function set()
{
angle = POLAR_RS;
    if(angle >= 0 && angle <= 459 )
      angle = angle;
    else
       angle = 0;

} ú¸Œ½‹¿†µ…´…À÷ÂóÂ