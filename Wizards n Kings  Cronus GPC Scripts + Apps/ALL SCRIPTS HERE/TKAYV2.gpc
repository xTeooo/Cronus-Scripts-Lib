/*
████████╗██╗░░██╗░█████╗░██╗░░░██╗  ██╗░░░██╗██████╗░  ░█████╗░███╗░░██╗████████╗██╗
╚══██╔══╝██║░██╔╝██╔══██╗╚██╗░██╔╝  ██║░░░██║╚════██╗  ██╔══██╗████╗░██║╚══██╔══╝██║
░░░██║░░░█████═╝░███████║░╚████╔╝░  ╚██╗░██╔╝░░███╔═╝  ███████║██╔██╗██║░░░██║░░░██║
░░░██║░░░██╔═██╗░██╔══██║░░╚██╔╝░░  ░╚████╔╝░██╔══╝░░  ██╔══██║██║╚████║░░░██║░░░██║
░░░██║░░░██║░╚██╗██║░░██║░░░██║░░░  ░░╚██╔╝░░███████╗  ██║░░██║██║░╚███║░░░██║░░░██║
░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░  ░░░╚═╝░░░╚══════╝  ╚═╝░░╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝

██████╗░██╗░░░░░░█████╗░░█████╗░███╗░░░███╗
██╔══██╗██║░░░░░██╔══██╗██╔══██╗████╗░████║
██████╦╝██║░░░░░██║░░██║██║░░██║██╔████╔██║
██╔══██╗██║░░░░░██║░░██║██║░░██║██║╚██╔╝██║
██████╦╝███████╗╚█████╔╝╚█████╔╝██║░╚═╝░██║
╚═════╝░╚══════╝░╚════╝░░╚════╝░╚═╝░░░░░╚═╝
                                                                                                                         
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
██ ██ █ ▄▄█ ▄▄█ ▄▄▀████ ▄▄▀█ ▄▄█ ▄▄█ ▄▄█ ▄▄▀█ ▄▄█ ▄▄▀█▀▄▀█ ▄▄██
██ ██ █▄▄▀█ ▄▄█ ▀▀▄████ ▀▀▄█ ▄▄█ ▄██ ▄▄█ ▀▀▄█ ▄▄█ ██ █ █▀█ ▄▄██
██▄▀▀▄█▄▄▄█▄▄▄█▄█▄▄████ ██ █▄▄▄█▄███▄▄▄█▄█▄▄█▄▄▄█▄██▄██▄██▄▄▄██
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
||=========================================|| ||=========================================|| ||=========================================||                                                                               
||============ MOD MENU SYSTEM ============|| ||======== RECOIL ADJUSTABLE MENU =========|| ||============= OTHER FEATURES ============||
||                                         || ||                                         || ||                                         ||
||* Enter Menu    = L2/LT + OPTIONS/MENU   || ||  Enter Menu = HOLD CROSS/A For 1 Second || ||         RESTORE DEFAULT SETTINGS        ||
||* Next Menu     = CROSS/A {MOD = 4 PAGES}|| ||                + TAP                    || ||     HOLD LEFT + PS/XBOX FOR 1 SECOND    ||
||* Previous Menu = CIRCLE/B               || ||                                         || ||                                         ||
||* Exit Menu     = TRIANGLE/Y             || ||            Vertical Power               || ||           SHOW SLOT/HELP INFO           ||
||                                         || ||  [+ Increase = UP] [- Decrease = DOWN]  || ||          HOLD R3/RS + TAP LEFT          ||
||* Next Mod/Scroll Down   = DOWN          || ||                                         || ||                                         ||
||* Previous Mod/Scroll Up = UP            || ||              Pull Power                 || ||           SCRIPT AUTO SAVES ON          ||
||                                         || ||[+ Increase = RIGHT] [- Decrease = LEFT] || ||      MENU EXIT OR RECOIL ADJUSTMENT     ||
||* Adjust Mod/Value  [+ Increase] = RIGHT || ||                                         || ||                                         ||
||* Adjust Mod/Value  [- Decrease] = LEFT  || ||               Pull Time                 || ||              SPEED TOGGLES              ||
||*Mod List Page 1-2 + Value/Time Page 3-4*|| ||[+ Increase = R1/RB] [- Decrease = L1/LB]|| ||            HOLD[L2/LT] + TAP            ||
||	    * AUTO TIMEOUT WHEN IDOL *         || ||	    * AUTO TIMEOUT WHEN IDOL *       || ||	         PRESET TOGGLE BUTTON          ||
||=========================================|| ||=========================================|| ||=========================================||                                                                               
||=========================================|| ||=========================================|| ||=========================================||                                                                                                         
                                                                                                                                     
|************************************| |*************************************|                                                                                                         
|      SPEED TOGGLES (DEFAULT)       | |         MOD ACTIVATE (DEFAULT)      |
|************************************| |*************************************|
|[ANTI_RECOIL] = (L2/LT + LEFT)      | | [GHOST PEEK] = (L2/LT + TAP R1/RB)  |
|[FIRE MOD]    = (L2/LT + UP)        | |          [QUICK SCOPE] =            |
|[SHOT MOD]    = (L2/LT + DOWN)      | |    (ADS PRESS or ADS RELEASE or)    |
|[BUNNY HOP]   = (L2/LT + RIGHT)     | |    (FIRE PRESS or FIRE RELEASE)     |
|[QUICK SCOPE] = (L2/LT + SHARE/VIEW)| |                                     |
|[PUMP SMG]    = (L2/LT + TRIANGLE/Y)| |[HIPFIRE] = ONLY FIRE REQUIRED TO RUN|
************************************** ***************************************

|********************************************| |********************************************|  
|    TimeZ AIM ASSIST/HEADSHOT AA VALUES     | |   DoGz SMART RECOIL [TIMED/RUMBLE/LEGACY]  |
|********************************************| |********************************************|
|          POWER = POWER/STRENGTH * 5        | |   VERTICAL POWER = RY AXIS BASE STRENGTH   |
|      AATIME = CUTOUT TIME (AA DURATION)    | |     PULL POWER = [TIMED] PULL STRENGTH     |
|  HEADSTEP = INCREMENT PROGRESSION HEAD AA  | |       PULL TIME = [TIMED] PULL SPEED       |
|   HEADMAX = MAX VALUE PROGRESSION HEAD AA  | |    RUMBLE = AUTO CALCULATES PULL POWER     |
|                                            | |        RUMBLE + TIMED OFF = LEGACY         |
|                                            | | LEGACY/RUMBLE = ONLY VERTICAL POWER ACTIVE |
********************************************** **********************************************
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█▄ ▄█ ▄▀▄ █▀▄▄▀█▀▄▄▀█ ▄▄▀█▄ ▄█ ▄▄▀█ ▄▄▀█▄ ▄████ ▀██ █▀▄▄▀█▄ ▄█ ▄▄█ ▄▄██
██ ██ █▄█ █ ▀▀ █ ██ █ ▀▀▄██ ██ ▀▀ █ ██ ██ █████ █ █ █ ██ ██ ██ ▄▄█▄▄▀██
█▀ ▀█▄███▄█ █████▄▄██▄█▄▄██▄██▄██▄█▄██▄██▄█████ ██▄ ██▄▄███▄██▄▄▄█▄▄▄██
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
• Recoil strength set for MK-7 AR (Hold ADS > 95% & FIRE) To use recoil system (Release ADS Slightly for other weapons)

• Slide Fire ONLY operates on Fire (ADS Blocks Mod from running until Sliding) Then you can ADS if you want to, Fire Will not shoot until sliding!!!
	(Set In game Slide time As low as possible [Script Default 110ms] [Game Default 150ms] <== Match in game and in script)

• Pump SMG Hold Fire and you will shoot and swap weapon to your LEFT [Press R1 to Activate After Shot or L1 To Cancel] Override Toggle Isolates Mod Completely

• Bunny Hop Just HOLD JUMP

• Mod Must be enabled in the MENU for the quick toggle to be ACTIIVE

• Lines 2348 to 2397 ==> (Default Settings Must Match Settings Lines 362 to 430) {BOTTOM OF THE SCRIPT!!]  

• RESTORE DEFAULT SETTINGS ==> DO NOT ACTIVATE ON BUILD & RUN (ONLY WHEN PROGRAMMED TO SLOT 1-8)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 In Game Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
//Combat Buttons
define Fire     = PS4_R2;       // Fire In Game
define Ads      = PS4_L2;       // Ads In Game
define Pickaxe  = PS4_TRIANGLE; // Pickaxe In Game
define N_Weapon = PS4_R1;       // Next Weapon In Game
define P_Weapon = PS4_L1;       // Previous Weapon In Game
define Reload   = PS4_SQUARE;   // Reload In Game
define Jump     = PS4_CROSS;    // Jump In Game
define Crouch   = PS4_R3;       // Crouch In Game

// Build Buttons
define Build    = PS4_CIRCLE;	// Build In Game {Switch/Edit or Switch}
define Switch   = PS4_LEFT;     // Switch In Game {Switch Only} [Used In Builder Pro Mod]
define Wall     = PS4_R2;		// Wall In Game
define Floor    = PS4_R1;		// Floor In Game
define Ramp     = PS4_L2;		// Ramp In Game
define Trap     = PS4_SQUARE;	// Trap In Game
define Roof     = PS4_L1;		// Roof In Game

// Edit Buttons
define Edit     = PS4_L3;   // Edit In Game (Use This Button If Using HoldTime In Game Or NOT Edit Assist Without Hold Time)
define Select   = PS4_R2;       // Edit Select Piece In Game
define Confirm  = PS4_CIRCLE; 	// Edit Confirm In Game	
define Reset    = PS4_R3;       // Edit Reset In Game

// Movement/Aim Sticks
define AimY     = PS4_RY;  // Vertical Aim Axis In Game
define AimX     = PS4_RX;  // Horizontal Aim Axis In Game
define Strafe   = PS4_LX;  // Horizontal Walk Axis In Game
define Walk     = PS4_LY;  // Vertical Walk Axis In Game
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define ToggleHold      = PS4_L2;       // Toggle HOLD Activator
								       // + TAP The Required Press Toggle
								       
define RecoilPress     = PS4_LEFT;     // Toggle PRESS Activator [ANTI_RECOIL] (L2/LT + LEFT)
define FireModPress    = PS4_UP;       // Toggle PRESS Activator [FIRE MOD]    (L2/LT + UP)
define ShotModPress    = PS4_DOWN;     // Toggle PRESS Activator [SHOT MOD]    (L2/LT + DOWN)
define BunnyHopPress   = PS4_RIGHT;    // Toggle PRESS Activator [BUNNY HOP]   (L2/LT + RIGHT)
define QuickScopePress = PS4_SHARE;    // Toggle PRESS Activator [QUICK SCOPE] (L2/LT + SHARE/VIEW)
define PumpSmgPress    = PS4_TRIANGLE; // Toggle PRESS Activator [PUMP SMG]    (L2/LT + TRIANGLR/Y)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Menu Buttons                       )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
// Enter/Exit Menu
define MenuEnterHold  = PS4_L2;
define MenuEnterPress = PS4_OPTIONS;
define MenuExitPress  = PS4_TRIANGLE;
// Next/Previous Menu Page
define NextMenuPress  = PS4_CROSS;
define PrevMenuPress  = PS4_CIRCLE;

// Navigation/Adjusment Buttons
define Up    = PS4_UP;
define Down  = PS4_DOWN;
define Left  = PS4_LEFT;
define Right = PS4_RIGHT;

// Show Current Slot Info/Title Buttons;
define FindSlotHold  = PS4_R3;		 // Hold + Tap [R3/RS + LEFT] To Display Slot And Help Info
define FindSlotPress = PS4_LEFT;    
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(            Script Reset Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define ScriptResetHold  = PS4_LEFT; // !! WARNING THIS WILL WIPE ALL SAVED SETTTINGS TO THE DEFAULT SETTINGS !! [Hold LEFT + PS/XBOX Buttons For 1 Second]  !WARNING!
define ScriptResetPress = PS4_PS;   // !! WARNING THIS WILL WIPE ALL SAVED SETTTINGS TO THE DEFAULT SETTINGS !! [Hold LEFT + PS/XBOX Buttons For 1 Second]  !WARNING!
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(            Recoil On The Fly Buttons               )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
// Anti-Recoil On The Fly Adjustment [Available When OnTheFlyRecoil = On + DoGzSmartAR = On]
define RecoilHoldOnFly  = PS4_CROSS; // Hold For 1 Second To Activate[Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On)]
define ARPowerUpPress   = PS4_UP;	 // Increase Vertical Power      [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On)]
define ARPowerDownPress = PS4_DOWN;	 // Decrease Vertical Power      [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On)]
define ARPullUpPress    = PS4_LEFT;	 // Increase Pull Power          [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On) + (TimedRecoil = On)]
define ARPullDownPress  = PS4_RIGHT; // Decrease Pull Power          [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On) + (TimedRecoil = On)]
define ARTimeUpPress    = PS4_R1;    // Increase Pull Time           [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On) + (TimedRecoil = On)]
define ARTimeDownPress  = PS4_L1;    // Decrease Pull Time           [Available When (OnTheFlyRecoil = On) + (DoGzSmartAR = On) + (TimedRecoil = On)]
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Mod Activator                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define GhostPeekPress = PS4_L1; 	 // GhostPeek Shot = [ADS + HOLD or TAP => L1/LB]
define PumpShotPress  = PS4_R1;  	 // Pump Shot = [ADS + TAP => R1/RB] 
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Definitions/Variables              )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Small = 0,Medium = 1,Large = 2;
define Black = 0,White = 1;
define Off = 0,On = 1;
define Columns = 5;
define TurboCrouch = 1,CrouchPosition = 2;
define PumpWall = 1,PumpRamp = 2;
define AdsPress = 1,AdsRelease = 2,FirePress = 3,FireRelease = 4;

define ModToggleMax = 6;
define TimeoutLimitM = 20000;
define ScrollDelay = 2000;
define ScrollSpeed =  70;
define ScrollX =   7;
define ScrollY =  54;
int Spvar = 9;
int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar,ScreenLine,ScreenIndex,ScreenY,Title,LogoX,LogoX2,LogoY,LogoY2,LogoBit,LogoOffset,LogoData;
int BoostAR,AxisCY,AxisLY,TimeValue,OutPut,RumValue,RecoilTimer;
int MainMenu,MainM,SubM,ValM,Render,Amount,Pointer,Label,Run,Page,Vals,displayY,Index,IndY,Display,DisplayTime,Boot,HorizontalT;
int stringPosition,stringHeight,stringLength,bufferIndex,charIndex,digitIndex,Slot,RecoilValueOled,RumbleTimer,Screen1;
int Shunt,BlinkLed,Modled,Blink,MenuTimeout,ToggleTime,Toggle,ToggleT,ToggleName,LedDec,Rgb,LedInc,Colour[3];
int AAT,Axis,Head,Tap,R2Block;
int BuildTrack,BuildCount,Edit1,Edit2,EditT,Axe,BuildPro;
int DynaWait,ModToggleC,ToggleAR,ToggleFM,ToggleSM,ToggleBH,ToggleQS,TogglePS;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Display Strings                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const string MiscString[] = {"DoGzTheFiGhTeRs","FN Flipped V1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Saved Settings","To The Zen","Restoring Script","To Default Values","Restarting"};
const string SniperString[] = {"OFF","L2P","L2R","R2P","R2R"};
const string CrouchString[] = {"OFF","TURBO","POSE"};
const string SlideString[] = {"OFF","PW","PR"};
const string MenuString[] = {"OFF","ON"};
const int16 ModToggles [] = {ToggleHold,RecoilPress,FireModPress,ShotModPress,BunnyHopPress,QuickScopePress,PumpSmgPress};
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const string ModToggleL [] = {"",
"Anti-Recoil",
"Fire Mods",
"Shot Mods",
"Bunny Hop",
"Quick Scope",
"Pump SMG"
};
const string Strings[] = {
/*~~~~~~~0~~~~~~~~~~~~~~~~~~1~~~~~~~~~~~~~~~2~~~~~~~~~~~~~~~~~3~~~~~~~~~~~~~~~4~~~~~~~~~~~~/*5},IX
{*/ "Aim Assist"   , "Anti-Recoil"   , "Fire Mods"     , "Shot Mods"    , "Global Mods"  , /*0},MM
{*/ "TimeZ Assist" , "TimeZ Timed"   , "TimeZHipfire"  , "HeadShot AA"  , "Head Hipfire" , /*1},AA
{*/ "TimeZ Power"  , "TimeZ Time"    , "Head Step"     , "Head Power"   , ""             , /*2},AA
{*/ "Smart Recoil" , "Timed"         , "Rumble"        , "Hipfire"      , "Values"       , /*3},AR 
{*/ "RY Power"     , "Pull Power"    , "Pull Time"     , ""             , ""             , /*4},AR 
{*/ "Rapid"        , "Dynamic"       , "Burst"         , "Hipfire"      , "Values"       , /*5},FM
{*/ "Rapid Hold"   , "Rapid Wait"    , "Dyna Hold"     , "Dyna Wait"    , "Burst Hold"   , /*6},FM
{*/ "Slide"        , "Crouch"        , "Strafe"        , "Jump"         , "Hipfire"      , /*7},SM
{*/ "Slide Time"   , "Crouch Wait"   , "Strafe Time"   , "Jump Wait"    , ""             , /*8},SM
{*/ "Quick Scope"  , "Pump Shot"     , "Bunny Hop"     , "Pump SMG"     , "Ghost Peek"   , /*9},GM
{*/ "Scope Time"   , "Slide Delay"   , "Jump Speed"    , "PSMG Time"    , "Peek Time"      /*10}GM
*/};/*~~~0~~~~~~~~~~~~~~~~~~1~~~~~~~~~~~~~~~2~~~~~~~~~~~~~~~~~3~~~~~~~~~~~~~~~4~~~~~~~~~~~~/*5*/
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Mod Menu Arrays                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const int16 TogAddress[][] = {{0,0},
{ 1  , 5  },
{ 10 , 14 },
{ 17 , 20 },
{ 26 , 30 },
{ 35 , 39 }
};

const int16 ModAddress[][] = {{0,0},
{ 6  , 9  },
{ 14 , 16 },
{ 21 , 25 },
{ 31 , 34 },
{ 40 , 44 }
};

const int16 ModRangeType[][] = {{0,1,1},/* 
==> MIN <==  ==> MAX <== => INC <==  /* ==> Value Guide ~~~~ <== */ 
{	0       ,    1      ,   1     }, /* ==> AA Menu Value 1  <== *///Aim Assist
{	0       ,    1      ,   1     }, /* ==> AA Menu Value 2  <== */
{	0       ,    1      ,   1     }, /* ==> AA Menu Value 3  <== */
{	0       ,    1      ,   1     }, /* ==> AA Menu Value 4  <== */
{	0       ,    1      ,   1     }, /* ==> AA Menu Value 5  <== */
{	1       ,    10     ,   1     }, /* ==> AA Menu Value 6  <== */
{	1000    ,    5000   ,   1     }, /* ==> AA Menu Value 7  <== */
{	1       ,    30     ,   1     }, /* ==> AA Menu Value 8  <== */
{	1       ,    70     ,   1     }, /* ==> AA Menu Value 9  <== */

{	0       ,    1      ,   1     }, /* ==> AR Menu Value 10 <== *///Anti Recoil
{	0       ,    1      ,   1     }, /* ==> AR Menu Value 11 <== */
{	0       ,    1      ,   1     }, /* ==> AR Menu Value 12 <== */															  
{	0       ,    1      ,   1     }, /* ==> AR Menu Value 13 <== */
{	1       ,    100    ,   1     }, /* ==> AR Menu Value 14 <== */
{	1       ,    100    ,   1     }, /* ==> AR Menu Value 15 <== */
{	10      ,    1000   ,   10    }, /* ==> AR Menu Value 16 <== */

{	0       ,    1      ,   1     }, /* ==> FM Menu Value 17 <== *///Fire Mods
{	0       ,    1      ,   1     }, /* ==> FM Menu Value 18 <== */
{	0       ,    1      ,   1     }, /* ==> FM Menu Value 19 <== */
{	0       ,    1      ,   1     }, /* ==> FM Menu Value 20 <== */
{	20      ,    60     ,   10    }, /* ==> FM Menu Value 21 <== */
{	30      ,    100    ,   10    }, /* ==> FM Menu Value 22 <== */															  
{	30      ,    60     ,   10    }, /* ==> FM Menu Value 23 <== */
{	33      ,    70     ,   1     }, /* ==> FM Menu Value 24 <== */
{	300     ,    800    ,   10    }, /* ==> FM Menu Value 25 <== */

{	0       ,    1      ,   1     }, /* ==> SM Menu Value 26 <== *///Shot Mods
{	0       ,    2      ,   1     }, /* ==> SM Menu Value 27 <== */
{	0       ,    1      ,   1     }, /* ==> SM Menu Value 28 <== */
{	0       ,    1      ,   1     }, /* ==> SM Menu Value 29 <== */
{	0       ,    1      ,   1     }, /* ==> SM Menu Value 30 <== */
{	50      ,    250    ,   1     }, /* ==> SM Menu Value 31 <== */															  
{	50      ,    300    ,   10    }, /* ==> SM Menu Value 32 <== */
{	100     ,    3000   ,   100   }, /* ==> SM Menu Value 33 <== */
{	40      ,    1000   ,   10    }, /* ==> SM Menu Value 34 <== */

{	0       ,    4      ,   1     }, /* ==> GM Menu Value 35 <== *///Global Mods
{	0       ,    2      ,   1     }, /* ==> GM Menu Value 36 <== */
{	0       ,    1      ,   1     }, /* ==> GM Menu Value 37 <== */
{	0       ,    1      ,   1     }, /* ==> GM Menu Value 38 <== */
{	0       ,    1      ,   1     }, /* ==> GM Menu Value 39 <== */
{	100     ,    1000   ,   10    }, /* ==> GM Menu Value 40 <== */  									  
{	50      ,    350    ,   10    }, /* ==> GM Menu Value 41 <== */
{	50      ,    5000   ,   10    }, /* ==> GM Menu Value 42 <== */
{	10      ,    100    ,   1     }, /* ==> GM Menu Value 43 <== */
{	50      ,    450    ,   5     }  /* ==> GM Menu Value 44 <== */
};
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Mods And Settings                  )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
/*------------------------------------*
 |Fixed Mod's (None Menu Mods BELOW)  |
/*------------------------------------*/
define LEDRainbowFlow    = On;   // [(On) or (Off)] = Don't At Me's Rainbow Flow (LED CYCLE)
define BlockRumble       = On;   // [(On) or (Off)] = Block Controller Rumble
define PlayStationOnXbox = On;   // [(On) or (Off)] = Touchpad Fix On PC or Xbox 
define HairTriggers      = On;   // [(On) or (Off)] = Instant Triggers (Sets L2/LT + R2/RT to 100 Instantly) (!!R2/RT Not Active When Dynamic Fire In Use)
define OnTheFlyRecoil    = On;   // [(On) or (Off)] = Anti Recoil On The Fly Adjustment Via OLED Plus Auto Save
// Instant Pickaxe
define InstantPickaxe = On;   	 // [ On / Off ] Instant Pickaxe
// Build Monitor
define BuildTracker  = On;       // Isolate Aim Assist And Head Shot Mod In Build Mode
define BuildSyncTime = 2000;     // Auto De-Sync After 2 Seconds Of being Idol [Pickaxe == Manual Re-Sync]
// Builder Pro
define BuilderPro = Off;         // Hold Button/Paddle To Place Builds (Release Exits Build Mode)
// Instant Edit + Reset 
define InstaEditReset = On;   	 // [ON / OFF] Normal Instant Edit/Reset
define EditHold       = On;      // [ON / OFF] SET On WHEN USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP ) [Off = INSTANT PRESS]
define EditHoldTime   = 130;     // Time If Using Hold to Edit In game [Setting To Be Matched To In Game Time]
// Fast Reset (One Button)
define InstaFastReset = On;        // Fast Reset [ON / OFF]
define FastReset      = PS4_TOUCH; // FAST RESET BUTTON [ MUST BE BLANK IN GAME / OR SOMETHING HARDLY USED!!! ]
// Quick Edit Assist
define QuickEditAssist = On;       // [ON / OFF] Edit Assist
define EditDelay       = 20;       // Edit Assist Hold Delay On Select
define EditAssist      = PS4_L3;   // EDIT ASSIST + FAST RESET EDIT BUTTON (Edit In Game [ NO HOLD TIME!!! ])
// Button Press Time [20- 50ms]
define ButtonTime = 20;            // Button Press Time (Edit Combo's + Instant Pickaxe)
/*------------------------------------*
 |Fixed Mod's (None Menu Mods ABOVE)  |
/*------------------------------------*/
//===========================================================================================================================================================
/*------------------------------*
 |	    In Game Menu Mod's      |
 |------------------------------|
 |------------------------------|
 |-------------------------------*
 | DoGz TimeZ Assist Settings & |
 | Progression Headshot Assist  |
/*------------------------------*/ // Lines 2348 to 2397 ==> (Default Settings Must Match Settings Lines 362 to 430) {BOTTOM OF THE SCRIPT!!]
int ModValues;
int AimAssist       = On;        // [(On) or (Off)] = Master Toggle For DoGz TimeZ Assist
int AATimed         = Off;       // [(On) or (Off)] = Aim Assist Will Cut Out After 2 seconds By Default (Change Below)
int AimAssistHip    = On;        // [(On) or (Off)] = {Operates on Ads Or Fire Alone}
int HeadAssist      = Off;       // [(On) or (Off)] = Progression Headshot Assist
int HeadHipAssist   = On;        // [(On) or (Off)] = Operate on Fire Only [If FALSE It Will Only Run On ADS & FIRE]
int Power           = 2;         // [1 - 10] =  DoGz TimeZ Aim Assist Power [1,2,3,4,5] ==> (>> 1 = 5 , 2 = 10 , 3 = 15 , 4 = 20 , 5 = 25 etc  <<) [LINEAR USE VALUE 1]
int AATime          = 2000;      // [1000 - 5000] =  DoGz TimeZ Aim Assist Will Cut Out After Time [1000] = 1 Second, [2000] = 2 Second
int HeadStep        = 2;         // [1 - 30] = Step Increment Increasing Until Its Reached HeadMax 
int HeadMax         = 30;        // [1 - 70] = Max Head Assist Value 
/*------------------------------*
 |	DoGz Smart AR Settings      |
/*------------------------------*/
int DoGzSmartAR     = On;		 // [(On) or (Off)] = Master Toggle For DoGz Smart Anti-Recoil 
int TimedRecoil     = On;        // [(On) or (Off)] = Smart Using Time 							(TimedRecoil = Off + RumbleRecoil = Off ==== Legacy Recoil On)
int RumbleRecoil    = Off;       // [(On) or (Off)] = Smart Using Rumble Feedback				(TimedRecoil = Off + RumbleRecoil = Off ==== Legacy Recoil On)
int RecoilHipFire   = Off;       // [(On) or (Off)] = {Operates on Fire Alone}
int DoGzARVertical  = 47;        // [1 - 100] = Base Power RY Axis [Timed/Rumble] (MK Values)
int DoGzARPullPower = 40;        // [1 - 100] = Pull Power RY Axis [Timed]        (MK Values)
int DoGzARTime      = 60;        // [10 - 1000] = Pull Time RY Axis [Timed]       
/*------------------------------*
 |	Fire Mods Settings          |
/*------------------------------*/
int RapidFire       = Off;		 // [(On) or (Off)] = {Rapid Fire At Fixed Rate} 										** ONLY ENABLE ONE FIRE MOD (Rapid/Dyna/Burst)**
int DynamicFire     = Off;       // [(On) or (Off)] = {Rapid Fire At Varied Rate Using Pressure of the R2/RT Trigger}  	** ONLY ENABLE ONE FIRE MOD (Rapid/Dyna/Burst) **
int BurstFire       = Off;       // [(On) or (Off)] = {Burst Fire For Set Length on Automatic Weapons} 					** ONLY ENABLE ONE FIRE MOD (Rapid/Dyna/Burst) **
int FireModHipFire  = On;        // [(On) or (Off)] = {Operates on Fire Alone}
int RapidHold       = 30;        // [Ms = 20 - 60] = {Fire Press Time}
int RapidWait       = 30;        // [Ms = 30 - 100] = {Fire Release Time}
int DynamicHold     = 40;        // [Ms = 30 - 60] = {Fire Press Time}
int DynamicWait     = 33;        // [Ms = 33 - 70] = {Fire Release Time} 
int BurstHold       = 510;       // [Ms = 300 - 800] = {Fire Hold Time}
/*------------------------------*
 |	Shot Mods Settings          |
/*------------------------------*/  // ** ONLY ENABLE ONE SHOT MOD  (Prone/Crouch/Strafe/Jump) Or (Crouch + Strafe Used Together)**
int SlideShot       = Off;		 // [(On) or (Off)] = {Slide When Firing and Stand On Release}
int CrouchShot      = Off;		 // [(Off) or (TurboCrouch) or (CrouchPosition)] = {Turbo Crouch or Crouch Position(Will Crouch When Firing and Stand when Fire is Released)}  
int StrafeShot      = Off;		 // [(On) or (Off)] = {While Firing Strafe Left Then Right And Repeat}  
int JumpShot        = Off;		 // [(On) or (Off)] = {Repeatedly Jump While holding Ads + Fire or Fire if ShotModHipFire On}
int ShotModHipFire  = Off;		 // [(On) or (Off)] = {Operates on Fire Alone}
int SlideTime       = 110;		 // [Ms] = {Delay before going prone} (Match In Game Setting)   
int CrouchWait      = 120;		 // [Ms] = {Delay between Turbo Crouching}   
int StrafeTime      = 1500; 	 // [Ms] = {Strafe in one direction for set length of time}  
int JumpShotWait    = 550;   	 // [Ms] = {Delay between Jumps} 
/*------------------------------*
 |	Global Mods Settings        |
/*------------------------------*/
int QuickScope      = Off;       // [(Off) or (AdsPress) or (AdsRelease) or (FirePress) or (FireRelease)] = {Auto Scope and Fire}
int PumpShot        = PumpWall;  // [(Off) or [(PumpWall) or (PumpRamp)]
int BunnyHop        = Off;       // [(On) or (Off)] = {Repeatedly Jump While Holding Jump}
int PumpSMG         = Off;		 // [(On) or (Off)] = {Pump Smg}
int GhostPeek       = Off;       // [(On) or (Off)] = {Pop up and shoot returning to hidden position} (Holding Ads + Tap R1 To Shoot)
int ScopeTime       = 360;		 // [Ms] = {Ads Zoom in time}      
int PumpTime        = 50;		 // [Ms] = {Slide Duration}   
int JumpSpeed       = 600;		 // [Ms] = {Delay between Jumps}
int PumpSmgTime     = 15;        // [Ms] = {Pump Smg Press Time}
int PeekTime        = 200;       // [Ms] = {Delay between Crouch and Fire}
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(           Quick Toggles Default State              )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
int ModToggleT;
int AntiRecoilMod = On;		// [(On) or (Off)] = {AntiRecoil Toggle On/Off By Default}
int FireMod       = On;		// [(On) or (Off)] = {Fire Mods Toggle On/Off By Default}
int ShotMod       = On;		// [(On) or (Off)] = {Shot Mods Toggle On/Off By Default}
int BunnyHopMod   = On;		// [(On) or (Off)] = {BunnyHop Toggle On/Off By Default}
int QuickScopeMod = On;		// [(On) or (Off)] = {Quick Scope Toggle On/Off By Default}
int PumpSmgMod    = On;		// [(On) or (Off)] = {Pump SMG Toggle On/Off By Default}

init {
    
    combo_run(Boot);
   	LedInc = 1;
    Colour = 150;
    
    if (get_pvar(SPVAR_64,0,10,5) != Spvar) {
		
		set_pvar(SPVAR_64,Spvar):
		Reset();
		Save();		
	}
 
	Load();
    
    ToggleAR = DoGzSmartAR;
    ToggleBH = BunnyHop;
    ToggleQS = QuickScope;
    TogglePS = PumpSMG;
    if (RapidFire || DynamicFire || BurstFire) ToggleFM = On;
    if (SlideShot || CrouchShot || StrafeShot || JumpShot) ToggleSM = On;
}

main {

if (!Boot) {
	
	if (PlayStationOnXbox && get_console() == PIO_XB360 && get_controller() == PIO_PS4) swap(PS4_TOUCH,PS4_SHARE);
    
    if (BlockRumble) block_rumble();
    	
   	if (HairTriggers) { 
   		
   		if (!DynamicFire || DynamicFire && !FireMod) {
   			
   			deadzone(PS4_L2,PS4_R2,100,100);
   		
   		} else {
    
   			deadzone(PS4_L2,NOT_USE,100,NOT_USE);
   		}
   	}

	if (QuickEditAssist) {
	 	
	 	if (get_ival(EditAssist)) {
			
			EditAssist();
			Edit1 = On;
		}

		if (event_release(EditAssist)) {
			
			EditT = 0;	
			Edit1 = Off;
		}
	}

    if (InstaFastReset) {
    	
    	if (event_press(FastReset)) { 
       	
    		combo_run(FastReset);
    	}
    }	

	if (InstaEditReset) {
        
        if (EditHold) {
        	
        	if (get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
            	Edit1 = On;
            	Edit2 = On;
			}
        }
        	
        else if (event_press(Edit)) {
        			
        		Edit1 = On;
            	Edit2 = On;
		}
		
		if (Edit2) {
            
            if (event_release(Select)) {  
                
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
            }
		}
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
            
            combo_run(InstantReset);
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
        }

        if (event_press(Pickaxe)) {
            
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
		}
    }
	
	if (BuilderPro) {
            
		if (get_ival(Switch)) {    
			
			BuildPro = On;
			
			if (BuildTracker) 
				
				BuildTrack = On;
        } 
            
        if (BuildPro && event_release(Switch)) {
        
        	combo_run(BuildPro);
        	BuildPro = Off;
        	
        	if (BuildTracker) 
				
				BuildTrack = Off;
        }        
    }
    
	if (BuildTracker) {
        
        if (event_press(Build)) {
            
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack && !BuildPro) {
            
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                
                BuildTrack = Off;
                BuildCount = 0;
            }
            
            if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap)) 
                
                BuildCount = 0;
        }
    }
	
	if (!BuildTrack && !Edit1 && !Edit2) {
	
	    if (InstantPickaxe) {
                    
        	if (event_press(Pickaxe)) {
                        
            	Axe = On;
            }
                	
            if (Axe) {
                        
            	if (event_press(Build) || event_press(Switch) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) { 
                            
                 	Axe = Off;
                }
                        
                if (event_release(Fire)) {
                            
                	combo_run(Pickaxe);
                }
            }
        }

	    if (AimAssist) {
	    	
	    	if (AATimed) {
	    	
	    		if (get_ival(Ads) && get_ptime(Ads) <= AATime || AimAssistHip && get_ival(Fire) && get_ptime(Fire) <= AATime) {
	        	
	        		AimAssist();
	        	}
	        	
	        } else if (get_ival(Ads)|| AimAssistHip && get_ival(Fire)) {
	        	
	        		AimAssist();
	        }
	        
	        if (!get_ival(Ads) && !get_ival(Fire)) {
	        
	        	AAT = 0;
	        	Axis = 0;
	        }
	    }
	    
	    if (HeadAssist) {
	        
	        if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire)) {
	        
	        	if (abs(get_ival(AimY)) < HeadMax) { 
	        		
	        		Head += HeadStep;
	        		combo_run(HeadAssist);
	        	}	
	        }
	        
	        if (!get_ival(Fire)) Head = 0;
	        	
	        if (Head >= HeadMax) combo_stop(HeadAssist);
	    }
	    
        if (QuickScope  <= 2) {
        
            if (FireMod) {
	        
                if (RapidFire) {
                	
                	if (get_ival(Ads) && get_ival(Fire) || (FireModHipFire && get_ival(Fire))) {
                        
                		combo_run(RapidFire);
                    
                    } else {
                        
	        			combo_stop(RapidFire);
                	}
            	}    
                
                if (DynamicFire) { 
                
                    DynaWait = DynamicWait * 10 - (get_ival(Fire) * 3);
                    
                    if (get_ival(Ads) && get_ival(Fire) || (FireModHipFire && get_ival(Fire))) {
                    
                        combo_run(DynamicFire);
                    
                    } else {   
                        
                        combo_stop(DynamicFire);
                    }
                }
                
	        	if (BurstFire) {
	        
                    if (get_ival(Ads) && get_ival(Fire) || (FireModHipFire && get_ival(Fire))) {
                    
                    	combo_run(BurstFire);
                    
                    } else {
                        
                        combo_stop(BurstFire);
                    }
                }
            }
	        
	        if (ShotMod) {
	        
                if (SlideShot) {
                    
                    if (!get_ival(Ads) && event_press(Fire)) {
                        
                        combo_run(SlideShot);
                    }
                    
                    if (event_release(Fire)) {
                    	
                    	combo_run(SlideShot);
                	}
                	
                	if (combo_running(SlideShot)) {
                	
                		set_val(Fire,0);
                	}
                }
	        
                if (JumpShot) {
                
                    if (get_ival(Ads) && get_ival(Fire) || (ShotModHipFire && get_ival(Fire))) {
                        
                        combo_run(JumpShot);
                    
                    } else {
                            
                        combo_stop(JumpShot);
                    }
                }
	        
                if (CrouchShot == TurboCrouch) {
                
                    if (get_ival(Ads) && get_ival(Fire) || (ShotModHipFire && get_ival(Fire))) {
                        
                        combo_run(CrouchShot);
                    
                    } else {
                            
                        combo_stop(CrouchShot);
                    }
                
                } else if (CrouchShot == CrouchPosition) { 
	        
                    if (get_ival(Ads) && get_ival(Fire) && get_ptime(Fire) == 50 || (ShotModHipFire && get_ival(Fire) && get_ptime(Fire) == 50)) {
                        
                        combo_run(CrouchPose);
                    }
                    
                    if (event_release(Fire) && get_ptime(Fire) >= 50) {
                    	
                    	combo_run(CrouchStand);
                	}
                }            
                
                if (StrafeShot) {
                
                    if (get_ival(Ads) && get_ival(Fire) || (ShotModHipFire && get_ival(Fire))) {
                    
                        if (abs(get_ival(Strafe)) <= 35 && abs(get_ival(Walk)) <= 35) {    
                        
                            combo_run(StrafeShot);
                    
                        } else {
                            
                            combo_stop(StrafeShot);
                        }
                    }
                }    
 	        }   
        }
	    	    
	    if (BunnyHop && BunnyHopMod) {
	    
	    	if (get_ival(Jump) && get_ptime(Jump) >= JumpSpeed) {
	    	
	    		combo_run(BunnyHop) ;
	    	
	    	} else {
	    	
	    		combo_stop(BunnyHop);
	    	}
	    }
	    
	    if (GhostPeek) {
	    
	    	if (get_ival(Ads) && get_ival(GhostPeekPress)) {
	    	
	    		Shunt = GhostPeekPress;
	    		combo_run(GhostPeek);
	    	}
	    }

	    if (PumpShot) {
	    
	    	if (get_ival(Ads) && event_press(PumpShotPress)) {
            
            	Shunt = PumpShotPress;
            	
            	if (PumpShot == PumpWall) {
            	
            		combo_run(PumpWall);
            	}
            	
            	if (PumpShot == PumpRamp) {
            	
            		combo_run(PumpRamp);
            	}
        	}
	    }
	        
        if (PumpSMG && PumpSmgMod) {
            
            if (R2Block) {
                
                set_val(Fire,0);
            }
            
            if (event_press(Fire) && !Axe) {
                
                if (!Tap) {
                    
                    Tap = On;
                    combo_run(PumpSmg);
                    set_val(Fire,0);
            	}
            }
            
            if (event_press(N_Weapon)) {
                
                Tap = Off;
            }
            
            if (event_press(P_Weapon)) {
                
                Tap = On;
            }
        }

        if (QuickScopeMod && !get_ival(Pickaxe) && !get_ival(Reload)) {
        
        	if (QuickScope == AdsPress) {
        	
        		if (event_press(Ads)) {
        		
        			combo_run(QuickScope);
        		}
        	}
	    
        	if (QuickScope == AdsRelease) {
        	
        		if (event_release(Ads)) {
        		
        			combo_run(QuickScope);
        		}
        	}
        
        	if (QuickScope == FirePress) {
        	
        		if (event_press(Fire)) {
        		
        			Shunt = Fire;
        			combo_run(QuickScope);
        		}
        	}
	    
        	if (QuickScope == FireRelease) {
        	
        		if (event_press(Fire)) 
        		
        			Shunt = Fire;
        		
        		if (event_release(Fire)) {
        		
        			combo_run(QuickScope);
        		}
        	}    
        }
        
	    if (DoGzSmartAR && AntiRecoilMod) {
	    
	        if (get_ival(Ads) >= 95 && get_ival(Fire) || (RecoilHipFire && get_ival(Fire))) {
	        
            	TimeValue += get_rtime();
            	
            	if (TimeValue > 30) { 
            		
            		AxisLY = get_lval(AimY);
            		AxisCY = get_ival(AimY);
            	}
            	
            	if (abs(AxisCY) != abs(AxisLY)) BoostAR = ((AxisCY - AxisLY) * 4);
            	
            	if ((BoostAR != 0) && (TimeValue > 40)) {
            	
            		BoostAR = 0;
            		TimeValue = 0;
            	}
            	
            	if (RumbleRecoil) {
            	    
            	    if (get_rumble(RUMBLE_A)) {
                    
            	    	RumValue = get_rumble(RUMBLE_A) / 3;
            	    	
            	    } else {
	        	    	
	        	    	RumValue = 0;	
	        	    }
	        	}    
	        
            	if (TimedRecoil) {
            	   
            	   RecoilTimer += get_rtime();
            	   
            	   if (RecoilTimer > DoGzARTime) {
                    
            	    	RumValue = DoGzARPullPower;
            	    	RecoilTimer = 0;
            	    
            	    } else {
	        	    	
	        	    	RumValue = 0;	
	        	    }
	        	} 
	        	
	        	OutPut = (DoGzARVertical + RumValue + BoostAR);
	        	Set_Val(AimY,OutPut);
	        }
	    
	    	if (!get_ival(Fire)) {
	    		
	    		RecoilTimer = 0;
	    		TimeValue = 0;
	    		BoostAR = 0;
        	} 	
	    
	    	if (OnTheFlyRecoil) {
             
	    		if (!MainMenu && get_ival(RecoilHoldOnFly) && get_ptime(RecoilHoldOnFly) >= 1000) {
                	
                	RecoilOled();
                }
                
                if (event_release(RecoilHoldOnFly)) RumbleTimer = 0;  
            }
 	    }
	}
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

        Shunt = MenuEnterPress;
        MenuToggle(On,On,On,On,Off);
        combo_run(Rumble);
    }	
	
	if (MainMenu) {
		
		combo_stop(RecoilValue);
		combo_stop(Boot);
		combo_stop(Save);
		MenuTimeout += get_rtime();
		Menu();
		Scroll();
        
        if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(NextMenuPress) || event_press(PrevMenuPress)) {

            MenuTimeout = Off;
        }
        
        if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {
            
        	if (event_press(MenuExitPress)) Shunt = MenuExitPress;
                
            MenuToggle(Off,Off,Off,Off,On);
            Save();
            combo_run(Rumble);
        }
	}
	
	if (!MainMenu) {
	
		if (Title) TitleScreen();
	    
	    if (Display) Display();
	    
	    if (get_ival(ModToggles[0])) ModToggles();
		
		if (ToggleTime) TimeToggle();
    
       	if (LEDRainbowFlow) LedFlow();
       	 
	    if (get_ival(FindSlotHold) && event_press(FindSlotPress)) {
            
            Shunt = FindSlotPress;
            Slot = On;
            combo_run(Boot);
       	}    
    }
    
	if (BlinkLed > 0) Blink();
	
	if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        
        } else {
            
            set_val(Shunt,Off);
        }
    }
}    
    
    if (get_ival(ScriptResetHold)) {
    	
    	set_val(ScriptResetPress,0);
    	
    	if (get_ival(ScriptResetPress) && get_ptime(ScriptResetPress) == 1000) {
    		
    		Boot = On;
    		cls_oled(0);
    		combo_stop(Boot);
    		combo_stop(RecoilValue);
    		combo_stop(Save);
    		combo_run(ResetScriptValues);
    	}
    }
    
    if (Boot) block_all_inputs();
}

combo HeadAssist{

	set_val(AimY,inv(Head) + get_val(AimY));
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidHold);
    set_val(Fire,0);
    wait(RapidWait);
}

combo DynamicFire {

    set_val(Fire,100);
    wait(DynamicHold);
    set_val(Fire,0);
    wait(DynaWait);
}

combo BurstFire {

    set_val(Fire,100);
    wait(BurstHold);
    set_val(Fire,0);
    wait(350);
}

combo CrouchPose {

    set_val(Crouch,100);
    wait(50);
}

combo CrouchStand {
	
	wait(50);
    set_val(Jump,100);
    wait(50);
}

combo SlideShot {
	
	set_val(Crouch,100);
    wait(SlideTime);
}

combo JumpShot {

    set_val(Jump,100);      
    wait(50);               
    set_val(Jump,0);       
    wait(20);
    wait(JumpShotWait);
}

combo CrouchShot {

    set_val(Crouch,100);
    wait(50);
    set_val(Crouch,0);
    wait(20);
    wait(CrouchWait);
}

combo StrafeShot {

    set_val(Strafe,-100);
    wait(StrafeTime);
    set_val(Strafe,100);
    wait(StrafeTime);
}

combo PumpWall {

    set_val(Fire,100);
    wait(PumpTime);
 	set_val(Build,100);
    wait(PumpTime);
    set_val(Wall,100);
    wait(PumpTime);
    set_val(Build,100);
    wait(50);
    wait(30);
}

combo PumpRamp {

    set_val(Fire,100);
    wait(PumpTime);
 	set_val(Build,100);
 	set_val(Ramp,0);
    wait(PumpTime);
    set_val(Ramp,100);
    wait(PumpTime);
    set_val(Build,100);
    wait(50);
    wait(30);
}

combo PumpSmg {
    
    R2Block = On;
    set_val(Fire,100);
    wait(PumpSmgTime);
    wait(5);
    set_val(Ads,100);
    set_val(P_Weapon,100);
    wait(PumpSmgTime);
    R2Block = Off;
}

combo BunnyHop {
   
    wait(30);	
	set_val(Jump,0);
    wait(50);
    wait(JumpSpeed);
}
 
combo GhostPeek {
	
	set_val(Crouch,100);
	wait(30);
	wait(30);
	set_val(Fire,100);
	wait(30);
	set_val(Crouch,100);
	wait(30);
	wait(PeekTime);
}

combo QuickScope {
    
    set_val(Ads,100);
    wait(ScopeTime);
    wait(20);
    set_val(Ads,100);   
    set_val(Fire,100);
    wait(110);
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(ButtonTime);
    Axe = Off;
}

combo BuildPro {   
    
    set_val(Switch,0);
    wait(50);      
    set_val(Switch,100);
    wait(50);
}

combo Confirm {

    set_val(Confirm,100);
    wait(ButtonTime);
    set_val(Confirm,0);
    wait(ButtonTime);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(ButtonTime)
    set_val(Reset,100);        
    wait(ButtonTime);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo RecoilValue {
 	
	if (RecoilValueOled) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	    line_oled(126,23,2,23,1,1);
	    line_oled(126,50,2,50,1,1);
	    String(Strings[1],Small,26,0);
	    
	    
	    if (Press(ARPowerUpPress) || Press(ARPowerDownPress)) {
	    	
	    	String(Strings[20],Medium,-20,0);
        	NumberToString(DoGzARVertical,FindDigits(DoGzARVertical)); 
        	puts_oled(CenterMod(DoGzARVertical),29,Medium,bufferIndex - 1,White);
	    }
		
		if (TimedRecoil) {	
	        
	        if (Press(ARPullUpPress) || Press(ARPullDownPress)) {
	        	
				String(Strings[21],Medium,-20,0);
        		NumberToString(DoGzARPullPower,FindDigits(DoGzARPullPower)); 
        		puts_oled(CenterMod(DoGzARPullPower),29,Medium,bufferIndex - 1,White);
	        }
		
	        if (Press(ARTimeUpPress) || Press(ARTimeDownPress)) {
	        	
				String(Strings[22],Medium,-20,0);
        		NumberToString(DoGzARTime,FindDigits(DoGzARTime)); 
        		puts_oled(CenterMod(DoGzARTime),29,Medium,bufferIndex - 1,White);
	        }		
		
		}                         
								  
		RecoilValueOled = Off;    
	
	}
		wait(8000);
		cls_oled(0);
		RumbleTimer = 0;
		Save();
		combo_run(Save);
}

combo Rumble {

    set_rumble(RUMBLE_A,15);
    wait(250); 
	reset_rumble();
}

combo Boot {
    
    combo_stop(RecoilValue);
    combo_stop(Save);
    
    if (!Slot) {
    	
    	cls_oled(0);
		RenderLogo(0,0,0);
		Slot = 10000;
	}
    
    wait(10);
    wait(Slot);
    
    if (Slot) {
            
		cls_oled(0);
        String(MiscString[0],Small,-25,0);
        String(MiscString[1],Small,-12,0);
        printf(24,43,0,1,MiscString[2]);
        NumberToString(get_slot(),FindDigits(get_slot())); 
        puts_oled(89,39,Medium,bufferIndex - 1,White);
        Slot = Off;
    }    
        
	wait(10000);
	cls_oled(0);
	Screen1 = On;
	DisplayTime = 0;
	Display = On;
}

combo Save {

	rect_oled(1,1,127,63,0,1);
	String(MiscString[6],Small,-10,0);
	String(MiscString[7],Small,10,0);
	wait(10);
	wait(2000);
	Screen1 = On;
	DisplayTime = 0;
	Display = On;
	cls_oled(0);
}

combo ResetScriptValues {
	
	rect_oled(1,1,127,63,0,1);
	String(MiscString[8],Small,-10,0);
	String(MiscString[9],Small,10,0);
	wait(10);
	wait(5000);
	cls_oled(0);
	String(MiscString[10],Medium,-16,0);
	putc_oled(1,FULLSTOP); 
	puts_oled(20,25,2,1,1);
	wait(500);
	putc_oled(1,FULLSTOP); 
	puts_oled(45,25,2,1,1);
	wait(500);
	putc_oled(1,FULLSTOP); 
	puts_oled(70,25,2,1,1);
	wait(500);
	putc_oled(1,FULLSTOP); 
	puts_oled(95,25,2,1,1);
	wait(500);
	wait(1000);
	set_pvar(SPVAR_64,5);
	wait(10);
	load_slot(get_slot());           
}

function EditAssist () {

    EditT += get_rtime();
        
        if (get_ival(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
           		EditPress(Select);
        }
}

function EditPress (Button) {

    if (get_ival(Button))
        
   		return;
            
        set_val(Button,100);
}

function AimAssist() {

	AAT += get_rtime();
	
	if (!Axis) 
		
		set_Val(AimY,AAT * Power / 10);
		
	if (Axis == 1)  
		
		set_Val(AimX,AAT * Power / 10);
	
	if (Axis == 2)  
		
		set_Val(AimY,inv(AAT * Power / 10));

	if (Axis == 3) {
		
		set_Val(AimX,inv(AAT * Power / 10));
	
		if (AAT > 50) {
		
			AAT = 0;
			Axis = 0;
		}
	
	} else if (AAT > 50) {
		
		AAT = 0;
		Axis += 1;
	}
}

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
    return; 
}

function Set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
        
    return; 
}

function RecoilOled() {

	combo_stop(Boot);
	RumbleTimer += get_rtime();
	
	if (Press(ARPowerUpPress)) {
		
		DoGzARVertical = clamp(DoGzARVertical++,1,100);
		RecoilValueOled = On;
	}
    
    if (Press(ARPowerDownPress)) {
    	
    	DoGzARVertical = clamp(DoGzARVertical--,1,100);
    	RecoilValueOled = On;
    }
    
    if (Press(ARPullUpPress)) {
    	
    	DoGzARPullPower = clamp(DoGzARPullPower++,1,100);
    	RecoilValueOled = On;
    }
    
    if (Press(ARPullDownPress)) {
    	
    	DoGzARPullPower = clamp(DoGzARPullPower--,1,100);
    	RecoilValueOled = On;
    }
    
    if (Press(ARTimeUpPress)) {
    	
    	DoGzARTime = clamp(DoGzARTime + 10,10,1000);
    	RecoilValueOled = On;
    }
    
    if (Press(ARTimeDownPress)) {
    	
    	DoGzARTime = clamp(DoGzARTime - 10,10,1000);
    	RecoilValueOled = On;
    }
        
    if (RecoilValueOled) {
    	
    	if (RumbleTimer <= 1200) combo_run(Rumble);
    	combo_restart(RecoilValue);
    	DisplayTime = 0;
    	ToggleT = 0;
  		Display = Off;
  		Title = Off;
  		ToggleTime = Off;
	}
	
	BlockButton(ARPowerUpPress); BlockButton(ARPowerDownPress); BlockButton(ARPullUpPress); 
	BlockButton(ARPullDownPress); BlockButton(ARTimeUpPress); BlockButton(ARTimeDownPress);
}

function Display () {

    DisplayTime += get_rtime();
  	
  	if (DisplayTime <= 10) Title = On;
  	
  	if (Screen1 && DisplayTime > 20000) {
  		
  		cls_oled(0);
  		Screen1 = Off;
  		DisplayTime = 0;
  	}
  	 else if (DisplayTime > 20000) {
  		
  		cls_oled(0);
  		Display = Off;
  		DisplayTime = 0;
  		Title = Off;
  	}  	
}

function ModToggles() {

    for(Toggle = 1; Toggle <= ModToggleMax; Toggle++) { 
    
    	if (ModToggleC[Toggle] && event_press(ModToggles[Toggle])) {
    		
    		Shunt = ModToggles[Toggle];
    		ModToggleT[Toggle] = !ModToggleT[Toggle]
    		ToggleName = On;
    		Toggle(ModToggleT[Toggle],ModToggleL[Toggle]);
    		combo_run(Rumble);
    	}
    }
}

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot)) combo_stop(Boot);
	if (combo_running(RecoilValue)) combo_stop(RecoilValue);
	if (combo_running(Save)) combo_stop(Save);
	
		Blink = ModT;
		BlinkLed = 2;
        ToggleT = 0;
        ToggleTime = On;
    
    if (ToggleName) {
        
        cls_oled(0);
        String(MiscString[5],Small,-26,0);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        String(ModP,Small,-10,0);

        if (ModT) {
            
            String(MiscString[3],Small,10,3);
                
        } else {
                
            String(MiscString[4],Small,10,3);
        }
        
        ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
    if (!MainMenu && ToggleT >= 5000) {
        
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}

function LedFlow() {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        
        set_rgb(Colour,Colour[1],Colour[2]);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
        
        Rgb = 0;    
    }
}

function Blink() {
    
	if (BlinkLed > 0)     
    	
    	Modled += get_rtime();
    
    if (Blink) {
        
        set_rgb(0,255,0);
    
    } else {
        
        set_rgb(255,0,0);
    }
    
    if (Modled > 450)
    	
    	set_rgb(0,0,0);
    	
    if (Modled > 600) {
    	
    	BlinkLed --;
    	Modled = 0;
    }    		
}

function MenuToggle(Print,Indx,Main,Section,Banner) { 

	cls_oled(0); 
	Render = Print;
	Index = Indx;
	MainMenu = Section;
	MainM = Main;
	if (Banner) combo_run(Save);
	ValM = Off;
	Vals = Off;
  	SubM = Off; 
	Page = Off;
	Screen1 = On;
	MenuTimeout = 0;
	ScrollTime = 0;
	ScrollLine = 0;
	ScrollWait = 200;
	ScrollChar = 0;
}

function Menu() {

	if (!Vals) {
		
		if (Index < Amount && event_press(Down)){ Index++; Render = 1;}
		if (Index > 1 && event_press(Up)){ Index--; Render = 1;}
	
	    if (SubM) {
	    	
	    	if (event_press(Right)){ 
	    		
	    		ModValues[Index + TogAddress[Pointer][0] - 1] += 1;
	    		if (ModValues[Index + TogAddress[Pointer][0] - 1] > ModRangeType[TogAddress[Pointer][0] + Index - 1][1])
	    		ModValues[Index + TogAddress[Pointer][0] - 1] = 0;
	    		Update(Index + TogAddress[Pointer][0] - 1);
	    	}
	    
	    	if (event_press(Left)){ 
	    		
	    		ModValues[Index + TogAddress[Pointer][0] - 1] -= 1;
	    		if (ModValues[Index + TogAddress[Pointer][0] - 1] < 0)
	    		ModValues[Index + TogAddress[Pointer][0] - 1] = ModRangeType[TogAddress[Pointer][0] + Index - 1][1];
				Update(Index + TogAddress[Pointer][0] - 1);
	    	}
	    
	    } else if (ValM) {
	    	
	    	if (Press(Right)){ 
	    		
	    		ModValues[Index + ModAddress[Pointer][0] - 1] += ModRangeType[ModAddress[Pointer][0] + Index - 1][2];
	    		if (ModValues[Index + ModAddress[Pointer][0] - 1] > ModRangeType[ModAddress[Pointer][0] + Index - 1][1])
	    		ModValues[Index + ModAddress[Pointer][0] - 1] = 0;
	    		Update(Index + TogAddress[Pointer][0] - 1);
	    	}
	    
	    	if (Press(Left)){ 
	    		
	    		ModValues[Index + ModAddress[Pointer][0] - 1] -= ModRangeType[ModAddress[Pointer][0] + Index - 1][2];
	    		if (ModValues[Index + ModAddress[Pointer][0] - 1] < ModRangeType[ModAddress[Pointer][0] + Index - 1][0])
	    		ModValues[Index + ModAddress[Pointer][0] - 1] = ModRangeType[ModAddress[Pointer][0] + Index - 1][1];
	    		Update(Index + TogAddress[Pointer][0] - 1);
	    	}	    
	    }
	
	} else {
	
	    if (event_press(Down)) { 
	    	
	    	Index = clamp(Index++,ModAddress [Pointer][0],ModAddress [Pointer][1]); 
	    	Render = On;
	    }
	    
	    if (event_press(Up)) { 
	    	
	    	Index = clamp(Index--,ModAddress [Pointer][0],ModAddress [Pointer][1]); 
	    	Render = On;
	    }
	    
	    if (Press(Right)) { 
	    	
	    	ModValues[Index] = clamp(ModValues[Index] + ModRangeType [Index][2],ModRangeType [Index][0],ModRangeType [Index][1]); 
	    	Render = On;
	    }
	    
	    if (Press(Left)) { 
	    	
	    	ModValues[Index] = clamp(ModValues[Index] - ModRangeType [Index][2],ModRangeType [Index][0],ModRangeType [Index][1]); 
	    	Render = On;
	    }
	}
	
	if (event_press(NextMenuPress)) { 
	
		if (MainM) {
	
			if (Index == 1) Page = Index; 
			else if (Index == 2) Page = Index + 1; 
			else Page = Index * 2 - 1;
		
			Index = On;
			SubM = On;
			MainM = Off;
	
		} else if (SubM) {
		
			Page ++;
			Index = On;
			ValM = On;
			SubM = Off;
		
		} else if (ValM) {

			if (Page == 2)  Index = ModAddress [1][0];
			if (Page == 4)  Index = ModAddress [2][0];
			if (Page == 6)  Index = ModAddress [3][0];
			if (Page == 8)  Index = ModAddress [4][0];
			if (Page == 10) Index = ModAddress [5][0];			
			ValM = Off;
			Vals = On;
		}	
		
		rect_oled(0,0,127,52,1,0);
		Render = On;
	}
	
	if (event_press(PrevMenuPress)) { 

		if (SubM) {
			
			Page = Off;
			Index = On;
			MainM = On;
			SubM = Off;
	
		} else if (ValM) {
		
		    Page --;        
		    Index = On;     
		    SubM = On;      
		    ValM = Off;     
							
		} if (Vals) {       
							
			Index = On;     
			ValM = On;      
			Vals = Off;	    
		}                   
		
		rect_oled(0,0,127,52,1,0);
		Render = On;
	}	
	
	Render();
	BlockButton(Up); BlockButton(Down); BlockButton(Left); BlockButton(Right); BlockButton(NextMenuPress); BlockButton(PrevMenuPress);
}

function Update (Mon) {

 	if (Mon == 10) ToggleAR = !ToggleAR;
    if (Mon == 11) RumbleRecoil = Off;  
	if (Mon == 12) TimedRecoil = Off;
 	
 	if (Mon == 17) {
 		
 		DynamicFire = Off;
		BurstFire = Off; 
	}
 	
 	if (Mon == 18) {
 		
 		RapidFire = Off;
		BurstFire = Off; 
	}
	
 	if (Mon == 19) {
 		
 		RapidFire = Off;
		DynamicFire = Off; 
	}
	
 	if (Mon == 26) {
 		
 		CrouchShot = Off;
		StrafeShot = Off;
		JumpShot = Off;  
	}
 	
 	if (Mon == 27 || Mon == 28) {
 		
 		SlideShot = Off;
		JumpShot = Off;  
	}	
	
	if (Mon == 29) {

 		SlideShot = Off;
 		CrouchShot = Off;
		StrafeShot = Off;
	}	
	
	if (Mon == 35) ToggleQS = !ToggleQS;
	
	if (Mon == 37) ToggleBH = !ToggleBH;
 	   
    if (Mon == 38) TogglePS = !TogglePS;    
    
    if (RapidFire || DynamicFire || BurstFire) ToggleFM = On; else ToggleFM = Off;
    if (SlideShot || CrouchShot || StrafeShot || JumpShot) ToggleSM = On; else ToggleSM = Off;

	if (Page == 7) rect_oled(90,1,39,50,1,0);
	
	else rect_oled(107,1,22,50,1,0);
	
	Render = On;
}

function Limits(Point,Lbl) {

	Pointer = Point;
	Label   = Lbl;
}

function Render() {

   	if (Page == 1 || Page == 2)  Limits(1,4);
	if (Page == 3 || Page == 4)  Limits(2,6);
	if (Page == 5 || Page == 6)  Limits(3,9);
	if (Page == 7 || Page == 8)  Limits(4,9);
	if (Page == 9 || Page == 10) Limits(5,10);	
	if (Page == 8 || Page == 2) Amount = 4; 
	else if (Page == 4) Amount = 3; 
	else Amount = 5;
		
   	if (Render) {
   		
   		Indicator();
   		
   		if (!Vals) {
   	        
   	        for (Run = 0; Run < Amount; Run++) {
   	            
   	            NumberToString(Run + 1,FindDigits(Run + 1)); 
                puts_oled(0,Run * 10 + 3,Small,1,White);
	            printf(18,Run * 10 + 3,Small,1,Strings[Strings(Page,Run)]);
	            
	            if (SubM) {
	            
	            	if (TogAddress[Pointer][0] + Run - 1 < TogAddress[Pointer][1]) {
   					
   						if (Page == 7 && Run == 1) {
   							
   							if (CrouchShot == 1) HorizontalT = 93;
   							
   							else if (CrouchShot == 2) HorizontalT = 99;
   							
   							else HorizontalT = 106;
   							
   							printf(HorizontalT,Run * 10 + 3,Small,1,CrouchString[ModValues[TogAddress[Pointer][0] + Run]]);
   						
   						} else if (Page == 9 && Run == 0)
   						
   							printf(106,Run * 10 + 3,Small,1,SniperString[ModValues[TogAddress[Pointer][0] + Run]]);
   						
   						else if (Page == 9 && Run == 1)
   						
   							printf(106,Run * 10 + 3,Small,1,SlideString[ModValues[TogAddress[Pointer][0] + Run]]);
   						
   						else
   							
   							printf(106,Run * 10 + 3,Small,1,MenuString[ModValues[TogAddress[Pointer][0] + Run]]);
					}
	            }
	            
	            if (ValM) {
	            
	            	NumberToString(ModValues[ModAddress[Pointer][0] + Run],FindDigits(ModValues[ModAddress[Pointer][0] + Run])); 
    	    		puts_oled(100,Run * 10 + 3,Small,bufferIndex - 1,White);
	            }
	            
	            displayY += 10;
	        }
	
		} else if (Vals) {
			
			rect_oled(17,17,90,33,1,0);
			String(Strings[Strings(0,Pointer - 1)],Small,-25,0);
			String(Strings[Label + Index],Small,-9,0);
			NumberToString(ModValues[Index],FindDigits(ModValues[Index])); 
    		puts_oled(CenterMod(ModValues[Index]),31,Medium,bufferIndex - 1,White);
		}
	}
	
	Render = Off;
}

function Indicator() {
 
	if (Render) {
				
		if (!Vals) {
		
			if (Index == 1) IndY = 3;
	    	if (Index == 2) IndY = 13;
	    	if (Index == 3) IndY = 23;
	    	if (Index == 4) IndY = 33;
	   	 	if (Index == 5) IndY = 43;
	   	 	

	    	rect_oled(7,0,10,52,1,0);
	    	putc_oled(1,134);
        	puts_oled(8,IndY,Small,1,White);
    	}    
		
		rect_oled(0,53,127,11,0,1);
	}
}

function Strings(Row,Col) { 

	return Columns * Row + Col; 
}

function String(stringLabel,fontSize,offsetY,offsetX) {
    
    if (fontSize == Small) {
        
        stringPosition = (127 - StringLength(stringLabel) * 7) / 2;
        stringHeight = (64 - 10) / 2;
    } 
    
    else if (fontSize == Medium) {
        
        stringPosition = (127 - StringLength(stringLabel) * 10) / 2;
        stringHeight = (64 - 16) / 2;
    }
    
    else if (fontSize == Large) {
        
        stringPosition = (127 - StringLength(stringLabel) * 15) / 2;
        stringHeight = (64 - 21) / 2;
    }
    
    Print(stringPosition,stringHeight,stringLabel,fontSize,offsetY,offsetX);
}

function StringLength(CharCount) { 
    
    stringLength = 0;
    
    while (duint8(CharCount++)) { 
    	
    	stringLength++; 
    }
    
    return stringLength + 1;
}

function Print(positionString,heightString,captionString,sizeFont,offSetY,offSetX) {
    
        printf(positionString + offSetX,heightString + offSetY,sizeFont,1,captionString);
}

function CenterMod(Num) { 
    
    if (Num < 10)   return (127 - 10) / 2;
    if (Num < 100)  return (127 - 20) / 2;    
    if (Num < 1000) return (127 - 30) / 2;
    if (Num >=1000) return (127 - 40) / 2;    
	return -1;
} 

function NumberToString(Digit,Digits) {
 
    bufferIndex = 1;  
    digitIndex = 10000;
	
	if(Digit < 0) {
         
         putc_oled(bufferIndex,45);
         bufferIndex += 1;
         Digit = abs(Digit);
	} 
	
	for(charIndex = 5; charIndex >= 1; charIndex--) {
	    
	    if(Digits >= charIndex) {
            
            putc_oled(bufferIndex,(Digit / digitIndex) + 48);
            Digit %= digitIndex;
            bufferIndex ++; 
            
            if(charIndex == 5) {
                
                putc_oled(bufferIndex,44);
                bufferIndex ++;
            }
        }
        
        digitIndex /= 10;
    }   
}
 
function FindDigits(Number) {
    
    Number = abs(Number);
    
    if(Number / 10000 > 0) return 5;
    if(Number /  1000 > 0) return 4;
    if(Number /   100 > 0) return 3;
    if(Number /    10 > 0) return 2;
    return 1;
} 

function BlockButton(Button) { 

	if (!get_ival(Button))
		
		return; 
		
	set_val(Button,Off);
}

function Press (Button) {

	return event_press(Button) || get_ival(Button) && get_ptime(Button) >= 450;
}                      
                                                     
function RenderLogo(PixelX,PixelY,PixelColour) {                     
    
    LogoOffset = 2;                                    
    LogoBit = 16;                                           
    
    for (LogoY = 0;LogoY < Logo[1];LogoY++) {
        
        for (LogoX = 0;LogoX < Logo[0];LogoX++) {
            
            LogoData = Logo[LogoOffset]          
            LogoX2 = PixelX + LogoX;                       
            LogoY2 = PixelY + LogoY;                       
            
            if (LogoX2 < 0 || LogoX2 >= 128) {        
                LogoX2 -= 128;                        
            } 
            
            if (LogoY2 < 0 || LogoY2 >= 64) {         
                LogoY2 -= 64;                         
            }
            
            if (test_bit(LogoData,LogoBit - 1)) {     
                pixel_oled(LogoX2,LogoY2,!PixelColour);   
            
            } else { 
            
                pixel_oled(LogoX2,LogoY2,PixelColour);    
            }                                            
            
            LogoBit--;         
            
            if (!LogoBit) {    
                
                LogoBit = 16;  
                LogoOffset++; 
            }  
        }   
    }
}     

function Scroll () {

	ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			
			} else {  
				
				putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
			} 
		}
		 
		puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
		ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		
		ScrollLine = 0;
	} 
	
	ScrollChar--; 
 
	if(ScrollChar < 1) {
			
		ScrollChar = 17; 
		ScrollWait = ScrollDelay;
	}
		
	ScrollTime = 0; 
	} 
} 

function TitleScreen() {

	if (Title) {
	
		if (ScreenY <= 52){
		
			for(ScreenIndex = 1; ScreenIndex <= 16; ScreenIndex++) { 
 				
 				if (Screen1) 
				
					putc_oled(ScreenIndex,TitleScreen[ScreenLine][ScreenIndex]);
				
				else
				
					putc_oled(ScreenIndex,InfoScreen[ScreenLine][ScreenIndex]);
					
				puts_oled(10, 3 + ScreenY,0,ScreenIndex,1);
			}
		
			ScreenY += 13;
			ScreenLine += 1;
		}
	}
	
	if (ScreenY > 52) {
		
		Title = Off;
		ScreenY = Off;
		ScreenLine = Off;
	}
}

const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   , CIRCLE   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     B     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     P     ,     r     ,     e     ,     v     ,   SPACE   ,    MENU   , 
	SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   , 
	SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  SPACE   ,     O     ,     N     ,  F_SLASH  ,     O     ,     F     ,     F     ,   SPACE   ,     T     ,     i     ,     m     ,     e     ,  F_SLASH  ,     V     ,     a     ,     l     ,	
	SPACE   ,  MENU    ,   SPACE   ,     I     ,     n     ,     f     ,     o     ,   SPACE   ,   PLUS    ,   SPACE   ,     B     ,     u     ,     t     ,     t     ,     o     ,     n     ,     s     ,
	SPACE   ,   R      ,     E     ,     S     ,     E     ,     T     ,     S     ,     C     ,     R     ,     I     ,     P     ,     T     ,   SPACE   ,   LEFT    ,   SPACE   ,     P    ,      S     };

const uint8 TitleScreen[][] = {/* 
	¦¦>0<¦¦¦¦>1<¦¦¦¦>2<¦¦¦¦>3<¦¦¦¦>4<¦¦¦¦>5<¦¦¦¦>6<¦¦¦¦>7<¦¦¦¦>8<¦¦¦¦>9<¦¦¦¦>10<¦¦¦>11<¦¦¦>12<¦¦¦>13<¦¦¦>14<¦¦¦>15<¦¦¦>16<¦¦*/
	{L01L01,L01L02,L01L03,L01L04,L01L05,L01L06,L01L07,L01L08,L01L09,L01L10,L01L11,L01L12,L01L13,L01L14,L01L15,L01L16,L01L17},
	{L02L01,L02L02,L02L03,L02L04,L02L05,L02L06,L02L07,L02L08,L02L09,L02L10,L02L11,L02L12,L02L13,L02L14,L02L15,L02L16,L02L17},
	{L03L01,L03L02,L03L03,L03L04,L03L05,L03L06,L03L07,L03L08,L03L09,L03L10,L03L11,L03L12,L03L13,L03L14,L03L15,L03L16,L03L17},
	{L04L01,L04L02,L04L03,L04L04,L04L05,L04L06,L04L07,L04L08,L04L09,L04L10,L04L11,L04L12,L04L13,L04L14,L04L15,L04L16,L04L17},
	{L05L01,L05L02,L05L03,L05L04,L05L05,L05L06,L05L07,L05L08,L05L09,L05L10,L05L11,L05L12,L05L13,L05L14,L05L15,L05L16,L05L17}};

const uint8 InfoScreen[][] = {/* 
	¦¦>0<¦¦¦¦>1<¦¦¦¦>2<¦¦¦¦>3<¦¦¦¦>4<¦¦¦¦>5<¦¦¦¦>6<¦¦¦¦>7<¦¦¦¦>8<¦¦¦¦>9<¦¦¦¦>10<¦¦¦>11<¦¦¦>12<¦¦¦>13<¦¦¦>14<¦¦¦>15<¦¦¦>16<¦¦*/
	{L06L01,L06L02,L06L03,L06L04,L06L05,L06L06,L06L07,L06L08,L06L09,L06L10,L06L11,L06L12,L06L13,L06L14,L06L15,L06L16,L06L17},
	{L07L01,L07L02,L07L03,L07L04,L07L05,L07L06,L07L07,L07L08,L07L09,L07L10,L07L11,L07L12,L07L13,L07L14,L07L15,L07L16,L07L17},
	{L08L01,L08L02,L08L03,L08L04,L08L05,L08L06,L08L07,L08L08,L08L09,L08L10,L08L11,L08L12,L08L13,L08L14,L08L15,L08L16,L08L17},
	{L09L01,L09L02,L09L03,L09L04,L09L05,L09L06,L09L07,L09L08,L09L09,L09L10,L09L11,L09L12,L09L13,L09L14,L09L15,L09L16,L09L17},
	{L10L01,L10L02,L10L03,L10L04,L10L05,L10L06,L10L07,L10L08,L10L09,L10L10,L10L11,L10L12,L10L13,L10L14,L10L15,L10L16,L10L17}};
	
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/

define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define B_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/

define L01L01 = SPACE ,L02L01 = SPACE ,L03L01 = SPACE ,L04L01 = SPACE ,L05L01 = SPACE;
define L01L02 = M     ,L02L02 = R     ,L03L02 = PLUS  ,L04L02 = UP    ,L05L02 = S;
define L01L03 = A     ,L02L03 = E     ,L03L03 = SPACE ,L04L03 = DOWN  ,L05L03 = H;
define L01L04 = I     ,L02L04 = C     ,L03L04 = L     ,L04L04 = SPACE ,L05L04 = O;
define L01L05 = N     ,L02L05 = O     ,L03L05 = _1    ,L04L05 = R     ,L05L05 = W;
define L01L06 = SPACE ,L02L06 = I     ,L03L06 = SPACE ,L04L06 = Y     ,L05L06 = SPACE;
define L01L07 = M     ,L02L07 = L     ,L03L07 = R     ,L04L07 = SPACE ,L05L07 = S;
define L01L08 = E     ,L02L08 = SPACE ,L03L08 = _1    ,L04L08 = O     ,L05L08 = L;
define L01L09 = N     ,L02L09 = O     ,L03L09 = SPACE ,L04L09 = R     ,L05L09 = O;
define L01L10 = U     ,L02L10 = T     ,L03L10 = T     ,L04L10 = SPACE ,L05L10 = T;
define L01L11 = SPACE ,L02L11 = F     ,L03L11 = I     ,L04L11 = LEFT  ,L05L11 = SPACE;
define L01L12 = L     ,L02L12 = SPACE ,L03L12 = M     ,L04L12 = RIGHT ,L05L12 = R;
define L01L13 = _2    ,L02L13 = H     ,L03L13 = E     ,L04L13 = SPACE ,L05L13 = _3;
define L01L14 = SPACE ,L02L14 = L     ,L03L14 = SPACE ,L04L14 = P     ,L05L14 = SPACE;
define L01L15 = PLUS  ,L02L15 = D     ,L03L15 = O     ,L04L15 = U     ,L05L15 = PLUS;
define L01L16 = SPACE ,L02L16 = SPACE ,L03L16 = R     ,L04L16 = L     ,L05L16 = SPACE;
define L01L17 = MENU  ,L02L17 = X     ,L03L17 = SPACE ,L04L17 = L     ,L05L17 = LEFT;

define L06L01 = SPACE ,L07L01 = SPACE ,L08L01 = SPACE ,L09L01 = SPACE ,L10L01 = SPACE;
define L06L02 = R     ,L07L02 = LEFT  ,L08L02 = Z	  ,L09L02 = S     ,L10L02 = PLUS;
define L06L03 = E     ,L07L03 = SPACE ,L08L03 = E	  ,L09L03 = P     ,L10L03 = SPACE;
define L06L04 = S     ,L07L04 = PLUS  ,L08L04 = N	  ,L09L04 = E     ,L10L04 = T;
define L06L05 = E     ,L07L05 = SPACE ,L08L05 = SPACE ,L09L05 = E     ,L10L05 = A;
define L06L06 = T     ,L07L06 = P     ,L08L06 = W	  ,L09L06 = D     ,L10L06 = P;
define L06L07 = SPACE ,L07L07 = S     ,L08L07 = I	  ,L09L07 = SPACE ,L10L07 = SPACE;
define L06L08 = S     ,L07L08 = SPACE ,L08L08 = L	  ,L09L08 = T     ,L10L08 = S;
define L06L09 = C     ,L07L09 = F     ,L08L09 = L	  ,L09L09 = O     ,L10L09 = E;
define L06L10 = R     ,L07L10 = O     ,L08L10 = SPACE ,L09L10 = G     ,L10L10 = T;
define L06L11 = I     ,L07L11 = R     ,L08L11 = R	  ,L09L11 = G     ,L10L11 = SPACE;
define L06L12 = P     ,L07L12 = SPACE ,L08L12 = E	  ,L09L12 = L     ,L10L12 = B;
define L06L13 = T     ,L07L13 = _1    ,L08L13 = L	  ,L09L13 = E     ,L10L13 = U;
define L06L14 = SPACE ,L07L14 = S     ,L08L14 = O	  ,L09L14 = S     ,L10L14 = T;
define L06L15 = H     ,L07L15 = E     ,L08L15 = A	  ,L09L15 = SPACE ,L10L15 = T;
define L06L16 = L     ,L07L16 = C     ,L08L16 = D	  ,L09L16 = L     ,L10L16 = O;
define L06L17 = D     ,L07L17 = SPACE ,L08L17 = SPACE ,L09L17 = _2    ,L10L17 = N;

const int16 Logo[] = {125, 48, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01FF, 0xE000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1FFF, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F8, 0xFFFC, 0x0000, 0x0000, 0x0000, 0x000F, 0xE000, 0x0007, 0xFFC7, 0xFFE1, 0xFF03, 0xFFC1, 0xFFFD, 0xF87F, 0x3F80, 0x003F, 0xFE3F, 0xFF1F, 0xFC1F, 0xFF0F, 0xFFEF, 0xE3FB, 0xFDFF, 0xFDFF, 0xF1FF, 0xF9FF, 0xF0FF, 0xFC7F, 0xFF7F, 0x1FDF, 0xEFFF, 0xEFFF, 0x8FFF, 0xCFFF, 0xC7FF, 0xF3FF, 0xFBF8, 0xFEFF, 0x7FFF, 0x7FFC, 0x7FFC, 0xFFFE, 0x3FFF, 0x9FFF, 0xDFE7, 0xF7FB, 0xFFFB, 0xFFE3, 0xFC07, 0xF3F9, 0xFFFE, 0xFFFE, 0xFF3F, 0xBFDF, 0xFFDF, 0xFF1F, 0xE07F, 0x9FEF, 0xEFF7, 0xFFF7, 0xFDFD, 0xFEFF, 0xFEFE, 0x00FF, 0x03FC, 0xFF7F, 0x3F83, 0xFFBF, 0xE7EF, 0xF7FF, 0xF7F0, 0x07F8, 0x1FE7, 0xFBF9, 0xFE1F, 0xC1FF, 0x3F7F, 0xBFF8, 0x3F80, 0x3FC0, 0xFF3F, 0xDFCF, 0xF0FE, 0x0FFD, 0xFBFC, 0x1FC1, 0xFC01, 0xFFE7, 0xF0FE, 0xFE7F, 0x87F0, 0x7FFF, 0xDFE0, 0xFE0F, 0xF00F, 0xFFBF, 0x87F7, 0xF3FC, 0x3F83, 0xFFFE, 0xFF07, 0xF07F, 0xF87F, 0xFDF8, 0x1FBF, 0xBFC1, 0xFC1F, 0xFFF7, 0xF83F, 0x83FF, 0xC3FF, 0xEFC0, 0xFDFF, 0xFE0F, 0xE0FF, 0xFFBF, 0xC1FC, 0x1FFE, 0x1FFF, 0x7F0F, 0xEFFF, 0xE07F, 0x07FF, 0xFDFE, 0x0FE0, 0xFFF0, 0xFFFB, 0xF87F, 0x7FFE, 0x03F8, 0x3FFF, 0xEFF0, 0x7F07, 0xFF87, 0xFF9F, 0xC3FB, 0xFFF0, 0x1FC1, 0xFFFF, 0x7F83, 0xF83F, 0xFC3F, 0xC0FF, 0x3FDF, 0xFF80, 0xFE0F, 0xDFFB, 0xFC1F, 0xC1FC, 0x01FE, 0x07F9, 0xFEFF, 0xFC07, 0xF07E, 0xFFDF, 0xE0FE, 0x0FE0, 0x0FF0, 0x3FCF, 0xF7FF, 0xE03F, 0x83F3, 0xFEFF, 0x07F0, 0x7F00, 0x7F81, 0xFE7F, 0x3FBF, 0x81FC, 0x1F9F, 0xF7F8, 0x3F83, 0xF803, 0xFC07, 0xF3F9, 0xFDFC, 0x0FE0, 0xFC7F, 0xBFC1, 0xFC1F, 0xC01F, 0xE03F, 0xFF8F, 0xEFE0, 0x7F07, 0xE3FD, 0xFE0F, 0xE0FF, 0x00FF, 0x00FF, 0xFC7F, 0x7F83, 0xF83F, 0x0FEF, 0xF07F, 0x07FF, 0xC7F8, 0x07FF, 0xC3F9, 0xFC1F, 0xC1F8, 0x7F7F, 0x83F8, 0x3FFE, 0x3FC0, 0x1FFC, 0x1FCF, 0xE0FE, 0x0FE3, 0xFBFC, 0x1FC1, 0xFFF1, 0xFE00, 0x7FC0, 0xFE7F, 0x87F0, 0x000F, 0xDFE0, 0xFE0F, 0xFF8F, 0xF000, 0x7000, 0x01FC, 0x0000, 0x0000, 0x7F07, 0xF07F, 0xFC7F, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F, 0x83FF, 0xE3FC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F};
    
function Load() {
	
        ModValues[1]  = get_pvar(SPVAR_1, ModRangeType[1] [0],ModRangeType[1] [1],ModValues[1]);		
        ModValues[2]  = get_pvar(SPVAR_2, ModRangeType[2] [0],ModRangeType[2] [1],ModValues[2]);    
        ModValues[3]  = get_pvar(SPVAR_3, ModRangeType[3] [0],ModRangeType[3] [1],ModValues[3]);    
        ModValues[4]  = get_pvar(SPVAR_4, ModRangeType[4] [0],ModRangeType[4] [1],ModValues[4]);    
        ModValues[5]  = get_pvar(SPVAR_5, ModRangeType[5] [0],ModRangeType[5] [1],ModValues[5]);    
        ModValues[6]  = get_pvar(SPVAR_6, ModRangeType[6] [0],ModRangeType[6] [1],ModValues[6]);    
        ModValues[7]  = get_pvar(SPVAR_7, ModRangeType[7] [0],ModRangeType[7] [1],ModValues[7]);    
        ModValues[8]  = get_pvar(SPVAR_8, ModRangeType[8] [0],ModRangeType[8] [1],ModValues[8]);    
        ModValues[9]  = get_pvar(SPVAR_9, ModRangeType[9] [0],ModRangeType[9] [1],ModValues[9]);    
        ModValues[10] = get_pvar(SPVAR_10,ModRangeType[10][0],ModRangeType[10][1],ModValues[10]);
        ModValues[11] = get_pvar(SPVAR_11,ModRangeType[11][0],ModRangeType[11][1],ModValues[11]);
        ModValues[12] = get_pvar(SPVAR_12,ModRangeType[12][0],ModRangeType[12][1],ModValues[12]);
        ModValues[13] = get_pvar(SPVAR_13,ModRangeType[13][0],ModRangeType[13][1],ModValues[13]);
        ModValues[14] = get_pvar(SPVAR_14,ModRangeType[14][0],ModRangeType[14][1],ModValues[14]);
        ModValues[15] = get_pvar(SPVAR_15,ModRangeType[15][0],ModRangeType[15][1],ModValues[15]);
        ModValues[16] = get_pvar(SPVAR_16,ModRangeType[16][0],ModRangeType[16][1],ModValues[16]);
        ModValues[17] = get_pvar(SPVAR_17,ModRangeType[17][0],ModRangeType[17][1],ModValues[17]);
        ModValues[18] = get_pvar(SPVAR_18,ModRangeType[18][0],ModRangeType[18][1],ModValues[18]);
        ModValues[19] = get_pvar(SPVAR_19,ModRangeType[19][0],ModRangeType[19][1],ModValues[19]);
        ModValues[20] = get_pvar(SPVAR_20,ModRangeType[20][0],ModRangeType[20][1],ModValues[20]);
        ModValues[21] = get_pvar(SPVAR_21,ModRangeType[21][0],ModRangeType[21][1],ModValues[21]);
        ModValues[22] = get_pvar(SPVAR_22,ModRangeType[22][0],ModRangeType[22][1],ModValues[22]);
        ModValues[23] = get_pvar(SPVAR_23,ModRangeType[23][0],ModRangeType[23][1],ModValues[23]);
        ModValues[24] = get_pvar(SPVAR_24,ModRangeType[24][0],ModRangeType[24][1],ModValues[24]);
        ModValues[25] = get_pvar(SPVAR_25,ModRangeType[25][0],ModRangeType[25][1],ModValues[25]);
        ModValues[26] = get_pvar(SPVAR_26,ModRangeType[26][0],ModRangeType[26][1],ModValues[26]);
        ModValues[27] = get_pvar(SPVAR_27,ModRangeType[27][0],ModRangeType[27][1],ModValues[27]);
        ModValues[28] = get_pvar(SPVAR_28,ModRangeType[28][0],ModRangeType[28][1],ModValues[28]);
        ModValues[29] = get_pvar(SPVAR_29,ModRangeType[29][0],ModRangeType[29][1],ModValues[29]);
	    ModValues[30] = get_pvar(SPVAR_30,ModRangeType[30][0],ModRangeType[30][1],ModValues[30]);
	    ModValues[31] = get_pvar(SPVAR_31,ModRangeType[31][0],ModRangeType[31][1],ModValues[31]);
	    ModValues[32] = get_pvar(SPVAR_32,ModRangeType[32][0],ModRangeType[32][1],ModValues[32]);
	    ModValues[33] = get_pvar(SPVAR_33,ModRangeType[33][0],ModRangeType[33][1],ModValues[33]);
	    ModValues[34] = get_pvar(SPVAR_34,ModRangeType[34][0],ModRangeType[34][1],ModValues[34]);
	    ModValues[35] = get_pvar(SPVAR_35,ModRangeType[35][0],ModRangeType[35][1],ModValues[35]);
	    ModValues[36] = get_pvar(SPVAR_36,ModRangeType[36][0],ModRangeType[36][1],ModValues[36]);
	    ModValues[37] = get_pvar(SPVAR_37,ModRangeType[37][0],ModRangeType[37][1],ModValues[37]);
	    ModValues[38] = get_pvar(SPVAR_38,ModRangeType[38][0],ModRangeType[38][1],ModValues[38]);
	    ModValues[39] = get_pvar(SPVAR_39,ModRangeType[39][0],ModRangeType[39][1],ModValues[39]);
		ModValues[40] = get_pvar(SPVAR_40,ModRangeType[40][0],ModRangeType[40][1],ModValues[40]);
		ModValues[41] = get_pvar(SPVAR_41,ModRangeType[41][0],ModRangeType[41][1],ModValues[41]);
		ModValues[42] = get_pvar(SPVAR_42,ModRangeType[42][0],ModRangeType[42][1],ModValues[42]);
		ModValues[43] = get_pvar(SPVAR_43,ModRangeType[43][0],ModRangeType[43][1],ModValues[43]);
		ModValues[44] = get_pvar(SPVAR_44,ModRangeType[44][0],ModRangeType[44][1],ModValues[44]);
		ModToggleT[1] = get_pvar(SPVAR_45,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[1]);
		ModToggleT[2] = get_pvar(SPVAR_46,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[2]);
		ModToggleT[3] = get_pvar(SPVAR_47,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[3]);
		ModToggleT[4] = get_pvar(SPVAR_48,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[4]);
		ModToggleT[5] = get_pvar(SPVAR_49,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[5]);
		ModToggleT[6] = get_pvar(SPVAR_50,ModRangeType[0] [0],ModRangeType[0] [1],ModToggleT[6]);
}

function Save() {          
							
	set_pvar(SPVAR_1,ModValues[1]); 
	set_pvar(SPVAR_2,ModValues[2]);
	set_pvar(SPVAR_3,ModValues[3]);
	set_pvar(SPVAR_4,ModValues[4]);
	set_pvar(SPVAR_5,ModValues[5]);
	set_pvar(SPVAR_6,ModValues[6]);
	set_pvar(SPVAR_7,ModValues[7]);
	set_pvar(SPVAR_8,ModValues[8]);
	set_pvar(SPVAR_9,ModValues[9]);
	set_pvar(SPVAR_10,ModValues[10]);
	set_pvar(SPVAR_11,ModValues[11]);
	set_pvar(SPVAR_12,ModValues[12]);
	set_pvar(SPVAR_13,ModValues[13]);
	set_pvar(SPVAR_14,ModValues[14]);
	set_pvar(SPVAR_15,ModValues[15]);
	set_pvar(SPVAR_16,ModValues[16]);
	set_pvar(SPVAR_17,ModValues[17]);
	set_pvar(SPVAR_18,ModValues[18]);
	set_pvar(SPVAR_19,ModValues[19]);
	set_pvar(SPVAR_20,ModValues[20]);
	set_pvar(SPVAR_21,ModValues[21]);
	set_pvar(SPVAR_22,ModValues[22]);
	set_pvar(SPVAR_23,ModValues[23]);
	set_pvar(SPVAR_24,ModValues[24]);
	set_pvar(SPVAR_25,ModValues[25]);
	set_pvar(SPVAR_26,ModValues[26]);
	set_pvar(SPVAR_27,ModValues[27]);
	set_pvar(SPVAR_28,ModValues[28]);
	set_pvar(SPVAR_29,ModValues[29]);
	set_pvar(SPVAR_30,ModValues[30]);
	set_pvar(SPVAR_31,ModValues[31]);
	set_pvar(SPVAR_32,ModValues[32]);
	set_pvar(SPVAR_33,ModValues[33]);
	set_pvar(SPVAR_34,ModValues[34]);
	set_pvar(SPVAR_35,ModValues[35]);
	set_pvar(SPVAR_36,ModValues[36]);
	set_pvar(SPVAR_37,ModValues[37]);
	set_pvar(SPVAR_38,ModValues[38]);				
	set_pvar(SPVAR_39,ModValues[39]);               
	set_pvar(SPVAR_40,ModValues[40]);               
	set_pvar(SPVAR_41,ModValues[41]);               
	set_pvar(SPVAR_42,ModValues[42]);               
	set_pvar(SPVAR_43,ModValues[43]);               
	set_pvar(SPVAR_44,ModValues[44]);               
	set_pvar(SPVAR_45,ModToggleT[1]);               
	set_pvar(SPVAR_46,ModToggleT[2]);               
	set_pvar(SPVAR_47,ModToggleT[3]);               
	set_pvar(SPVAR_48,ModToggleT[4]);               
	set_pvar(SPVAR_49,ModToggleT[5]);               
	set_pvar(SPVAR_50,ModToggleT[6]);               
}                                                   
									                
function Reset() { 					                
													
	AimAssist       = On;                           
	AATimed         = Off;                          
	AimAssistHip    = On;                           
	HeadAssist      = Off;                          
	HeadHipAssist   = On;                           
	Power           = 2;                            
	AATime          = 2000;                         
    HeadStep        = 2;                            
    HeadMax         = 30;                           
	DoGzSmartAR     = On;	                        
	TimedRecoil     = On;                           
	RumbleRecoil    = Off;                          
	RecoilHipFire   = Off;                          
	DoGzARVertical  = 47;                           
	DoGzARPullPower = 40;                           
	DoGzARTime      = 60;                           
	RapidFire       = Off;		                    
	DynamicFire     = Off;                          
	BurstFire       = Off;                          
	FireModHipFire  = On;                           
	RapidHold       = 30;                           
	RapidWait       = 30;                           
	DynamicHold     = 40;                           
	DynamicWait     = 33;                           
	BurstHold       = 510;                          
	SlideShot       = Off;	                        
	CrouchShot      = Off;	                        
	StrafeShot      = Off;	                        
	JumpShot        = Off;	                        
	ShotModHipFire  = Off;	                        
	SlideTime       = 110;	                        
	CrouchWait      = 100;	                        
	StrafeTime      = 1500;                         
	JumpShotWait    = 550;                          
	QuickScope      = Off;                          
	PumpShot        = PumpWall;                     
	BunnyHop        = Off;                          
	PumpSMG         = Off;		                    
	GhostPeek       = Off;                          
	ScopeTime       = 360;		                    
	PumpTime        = 50;		   
	JumpSpeed       = 600;		   
	PumpSmgTime     = 15;         
	PeekTime        = 200;        
	AntiRecoilMod   = On;          
	FireMod         = On;          
	ShotMod         = On;          
	BunnyHopMod     = On;          
	QuickScopeMod   = On;          
	PumpSmgMod      = On;          
	Save();                          
}   