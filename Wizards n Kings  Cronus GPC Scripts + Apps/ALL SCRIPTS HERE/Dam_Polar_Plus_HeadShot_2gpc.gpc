define Fire = PS4_R2;
define ADS = PS4_L2;
define X = XB1_RX;
define Y = XB1_RY;
define STEP_INTERVAL = 1;
define VM_INTERVAL = -2;
int time,angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Shot;


// AIM ASSIST
define ACTIVE_WHEN_ADS = TRUE;
define ACTIVE_WHEN_FIRING = TRUE;
define RADIUS = 20;
define STEPS = 15;
// HEADSHOT ASSIST
define HeadshotAssist = TRUE;
define PushPower = -70;
define PushTime = 40;

main {
  
	vm_tctrl(VM_INTERVAL);
  
    actual_X = get_val(X);
    actual_Y = get_val(Y);
    actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));
    max_Magnitude = (actual_Magnitude < 100);
    
    if (!(time++ % STEP_INTERVAL)) {
      	
      	angle += STEPS;
    }
    
    angle = angle % 360;
    sin_angle = Polar_Array[angle % 360];
    cos_angle = Polar_Array[(angle + 270) % 360];
    cos_angle = (cos_angle * RADIUS) / 100;
    sin_angle = (sin_angle * RADIUS) / 100;
    
    if((ACTIVE_WHEN_ADS && get_ival(XB1_LT)) || (ACTIVE_WHEN_FIRING && get_ival(XB1_RT))){
      	
      	if(actual_Magnitude <= 8){
        	sin_angle -= actual_Y;
        	cos_angle -= actual_X;
      	
      	}else {
        	
        	sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
        	cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
      }
      
      set_val(X,clamp(actual_X + cos_angle, -100, 100));
      set_val(Y,clamp(actual_Y + sin_angle, -100, 100));
    }
    
    if (HeadshotAssist) {
    	
    	if (event_press(Fire) || event_press(ADS)) {
		
		
			if (!Shot)
			
				combo_run(Head);
		}
		
		if (!get_ival(ADS) && !get_ival(Fire)) 
		
			Shot = FALSE;
	}
}

combo Head {

    set_val(Fire,100);
    set_val(PS4_RY,PushPower);
    wait(PushTime);
    Shot = TRUE;
}

const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};