/*
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________ 
 

  / @@@@@@@@
  |	@@  | @@							    /@@@@@@  /@@
  |	@@  | @@							   /@@__  @@| @@              
  |	@@@@@@@@							  | @@  \__/| @@            /@@    @@
  |	@@_____//@@@@@@	   /@@@@@@  /@@@@@@  | @@@@|    | @@  /@@@@@@   \ @@  @@ 
  |	@@	   |____  @@| /@@__  @@|____  @@|| @@_/     | @@ |____  @@|  \  @@  
  |	@@      /@@@@@@@|| @@  \__/ /@@@@@@@|| @@       | @@  /@@@@@@@|   | @@  
  |	@@     /@@__  @@|| @@      /@@__  @@|| @@       | @@ /@@__  @@|  / @@ @@
  |__/     \ @@@@@@@|| @@      \ @@@@@@@|| @@       | @@|\ @@@@@@@| / @@ _ @@
		    \______/  |__/	    \______/|__/        __/   \______/  \__/ \__/ 	Paladins Champion
		   																			Edition
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________
		   
**Champion Selector - Choose Role and Champion in Menu. Automatically Champions will have certain mods enabled. - With options to add more!
**Custom Combo Champions in the Selector
**Standard Anti-Recoil [Legacy]
**Progression Anti-Recoil
**Polar Aim Assist + Steady AIM
**Sticky Aim Assist
**Sweet Evil Aim Assist
**RapidFire - Automatically added on certain champions in the Selector.
**User Define Button Layouts
**Quick Scope with Adjustable times - Enabled by default for Strix in the Champion Selector
**Auto Healers activated from Support Class in the Champion Selector. 
**MISC MOD Category -Auto Reload -Bunnyhop -Jump Shot -Strafe Shot -Auto Run
**PALADIN MODS Category -AutoKinessa -AutoShalin -Ability L1/LB Shot -Ability L2/LT Shot -Ability R1/RB Shot

-For Discussions, Updates, Downloads, Plans and Support join the discord! - https://discord.gg/wGscAaYghn

-If using custom keybinds or different button layout other than Default. Change buttons under the instructions section.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                         				 INSTRUCTIONS
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Open ChampionMenu (More Info on the Zen Screen Below)  ===== 		Hold L2/LT and Press XBOX/PS Button             	===
==== ChampionMenu will show up first when loading script																	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Navigate between Champion Class or Names   		    ===== 		Tap LEFT or RIGHT on the D-PAD                  	===
==== (If do not want a selection, Navigate to Blank screen)																	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Switch between Champion Class or Champion Name    	    ===== 		Tap UP or DOWN on the D-PAD        		          	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Open modMenu from ChampionMenu				           	===== 				Tap CIRCLE/B			        	    	===
==== Open ChampionMenu from modMenu							=====				Tap SQUARE/X								===                                          
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Open modMenu											===== 		Hold L2/LT and tap OPTIONS/MENU                 	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To edit the mods in the modMenu                        ===== 			Press CROSS/A to EDIT                           ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Navigate between all mods                              ===== 		Tap LEFT or RIGHT on the D-PAD                  	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Enable or Disable the diplayed mod                     ===== 		Tap UP for ON == Tap DOWN for OFF               	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Switch Profile In Mod Menu 	                        ===== 				Tap Triangle/Y                              ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Switch Profile In Game                                 =====	 	USER DEFINED BUTTONS (Chosen Below)             	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Edit availble Mods or Enter Mod Caregory               ===== 		Press CROSS/A OR Press CIRCLE/B to Exit Mod     	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Edit Values In available Mods                          ===== 	Hold L2/LT & Tap RIGHT to increase + 1          		===
====                                                        =====              Tap LEFT to decrease  - 1          			===
====                                                        =====              Tap UP   to increase  + 10         			===
====                                                        =====              Tap DOWN to decrease  - 10         			===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
==== Navigate between values available in the editable mods ===== 			Tap LEFT Or RIGHT                               ===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To SAVE all mods that have been edited & enabled       ===== 		Press XBOX/PS Button == "SAVED"   			  		===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== To exit Mod Menu once you have saved it                ===== 		Hold L2/LT and Tap OPTIONS/MENU                 	===
====																														===
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
==== Kill Switch (Disable Everything)                       ===== 		Hold LT/L2 & Double Tap SHARE/VIEW              	===
====																														===	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

IF THERE ARE ANY ISSUES OR NEED OF SUPPORT PLEASE REPORT TO THE PARAFLAX DISCORD

            
  PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ - PLEASE READ
/*=============================================================================================================================                                          
|                       PLEASE READ BELOW - BEFORE PROGRAMMING THE SCRIPT YOU NEED TO CHECK BELOW FIRST                       |                 
|==============================================================================================================================   
| Enable Or Disable If you want to use only 1 button to switch profile 1 or 2 |*/  define one_button_press = TRUE;          /*|  <--- 1 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Enable or Disable If you want to use 2 buttons to switch profiles 1 or 2    |*/  define two_button_press = FALSE;         /* |  <--- 2 BUTTON PRESS FOR SWITCHING PROFILES
===============================================================================================================================
| Choose your button for 1 button to switch profiles             	  |*/ define profile_switch_button1 = PS4_R3;         /* |  <--- ONLY 1 BUTTON, CHOOSE YOUR BUTTON
===============================================================================================================================
| Choose your buttons for 2 buttons to switch profiles                |*/  define profile_switch_button2 = PS4_L2;         /* |  <--- 2 BUTTONS TO SWITCH PROFILES & CHOOSE YOUR BUTTONS
=======================================================================
|                                                                     |*/define profile_switch_button3 = PS4_DOWN;         /* |  <--- CHOOSE YOUR BUTTONS 
                                                                      =========================================================
| Extra Profile is an additional profile (profile 3) below you can choose the buttons to switch without interfering with game  |
===============================================================================================================================
| HOLD L2 & tap TRIANGLE to get in Extra profile                            |*/ define profile3_switch_button  = PS4_L2;        /* |  <--- PROFILE 3 IS A SEPERATE PROFILE BUTTON CAN NOT BE THE SAME
| HOLD L2 & tap TRIANGLE to get back out of Extra profile                   |*/define profile3_switch_button1 = PS4_R3;   /* |  <--- CHOOSE YOUR 2 BUTTONS TO ACTIVATE 

To change Button Layouts to match in-game change button below. XB1_A is also PS4_CROSS & SWI_B. No need to change this unless it is a different button.  */
		
	define JUMP_BTN      = PS4_CROSS;     define TAC_BTN  	   = PS4_L1;   
	define CROUCH_BTN    = PS4_CIRCLE;    define LETHAL_BTN    = PS4_R1; 
	define RELOAD_BTN    = PS4_SQUARE;    define AIM_BTN       = PS4_L2;
	define SWITCH_BTN    = PS4_TRIANGLE;  define FIRE_BTN      = PS4_R2;
	define SPRINT_BTN    = PS4_L3;		  define MELEE_BTN     = PS4_R3;


//Auto Mod Section ENABLE = TRUE and DISABLE = FALSE. IF you DO NOT want mods automatically Enabled when using script... Write FALSE. 

	define  AutoMods_On			= TRUE; //Automatic Mods Enabled when selecting a Champion
	int     AutoMod_heal_spam 	= TRUE; //QUICK TOGGLE ON/OFF - L2/LT + LEFT - Auto Healing for Champion in Support Role when selected
	define 	AutoMod_RapidFire   = TRUE; //Automatic Rapid Fire Enabled on selected Champion
	int 	AutoMod_Kinessa 	= TRUE; //Auto Kinessa Auto Toggle ON when Champion is selected
	int 	AutoMod_Shalin		= TRUE; //Auto Shalin Auto Toggle ON when Champion is selected
	int 	AutoMod_Ultimate	= TRUE; //Ultimate Activated when Firing for Certain Champions Selected
	int 	AutoMod_StrixQS		= TRUE; //Strix QuickScope Auto Toggle ON - Automatically Toggled when Selected
	
//Ultimate Shot on Fire Champions - Cassie, Dredge, Strix, Vivian, Buck, Evie, Koga, Zhin, Furia and IO	

//Mod information per champion is located below the extra detailed information. 

/*=============================================================================================================================                                          
|                      					ADJUSTABLES ADJUSTABLES ADJUSTABLES                 					      		  |                 
|==============================================================================================================================  
===============================================================================================================================
| Choose your Strafe Delay	(Delay before Strafe begins)              |*/ int strafeDelay =	400;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Strafe Time   (Time Strafe is held in Direction)        |*/ int strafeTime = 500;   						   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Jump Delay    (Delay before Jump begins)         	  	  |*/ int jumpDelay = 300;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ability Delay	(Delay before Ability Shot)               |*/ int abilityDelay = 300;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ability Wait	(Time that Ability press Rests)		      |*/ int abilityWaitTime = 1500;   				   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ultimate Delay	(Delay before Ultimate Shot)          |*/ int ultimateDelay = 500;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ultimate Wait	 (Time that Ultimate press Rests)		  |*/ int ultimateWaitTime = 3000;   				   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Bomb King Delay	(Delay before Bomb King Detonates)    |*/ int BKdetonateDelay = 500;				       /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================

/*===============================================================================================================================
◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺		
____________________________________________________________________________________________________________________________________________________

			MORE DETAILED INFORMATION ON INSTRUCTIONS IF NEEDED - If you understand the instruction, this is optional.
____________________________________________________________________________________________________________________________________________________

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸											
	
	OLED screen indications: 
                              ———————————————————————————————
		                      |        G   A   M   E        |
		                      |      T   I   T   L   E      |  
		                      |       Current profile       | 
		                      |     Current Champion Name   |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModMenu: 
                              ———————————————————————————————
		- First line:         |       Active Mod Name       |
		- Second line:        |       Current profile       | ▻▻▻  This shows you which profile you are on in mod menu 
		- Third line          |       ON / OFF status       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModEdit: Can 
                              ———————————————————————————————
		- First line:         |      Active Value Name      |
		- Second line:        |       Current profile       | ▻▻▻  This shows which profile you are on, Primary,Secondary, Extra  
		- Third line          |       Editable  Value       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModWeapon: To Enter WeaponMod Hold L2 & Press XBOX/PS button to enter
                              ———————————————————————————————
		- First line:         |       Current profile       | ▻▻▻  indicates which profile you are on
		- Second line:        |   Current Champion Class    | ▻▻▻  indicates which Champion Class you are on 
		- Third line          |     Current Champion Name   | ▻▻▻  indicate which Champion you are on
                              ———————————————————————————————
                     ⬅⬅⬅ PRESS DPAD LEFT OR RIGHT to Navigate ➨➨➨
                      
                       ⬆    PRESS DPAD UP OR DOWN  to Navigate  ⬇
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜		

	OLED screen indications in KillSwitch: 
                              ———————————————————————————————
                              |         SCRIPT OFF          | ▻▻▻  indicate that the script is muted
                              |                             | 
                              |   Hold CIRCLE/B to turn ON  | 
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the Champion Selector:
	
	Open Champion Selector (L2/LT + PS/XBOX to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Extra Profile) by tapping TRIANGLE/Y
		To switch between Champion Class and Champion Name, press UP or DOWN
		When the second line (Champion Class) is in large text, you can only navigate between the different categories with LEFT or RIGHT.
		When the third line (Champion Name) is in large text, you can only navigate between the different weapons of the active category with LEFT or RIGHT.
		Tap CROSS/B to close Champion Selector and go to ModMenu
		Tap SQUARE/X to go back to Champion Selector if you are in ModMenu
		Hold L2/LT and tap PS/XBOX to close Champion Selector
		
		If you do not want to use the Champion Selector temporarily. There is a category in the Champion Selector that is BLANK. This will disable any mods on any champion.
		
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModMenu:

	Open ModMenu (L2/LT + OPTIONS/MENU to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Extra) by tapping TRIANGLE/Y
		Navigate between the different MODS with L1/LB or R1/RB
			- tap UP to turn ON
			- tap DOWN to turn OFF 
		
		Activate the mods you want on each profile...
		
	If the mod displayed has one or more editable values, pressing CROSS/A will open the ModEdit
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModEdit:

		Navigate between the different value with LEFT or RIGHT
		Change/edit the value by holding down R1/RB then tap UP or RIGHT to increase value and tap DOWN or LEFT to decrease value
		
		To exit ModEdit and go back to ModMenu, tap CIRCLE/B

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
				           
	Save every values (only available if you are in ModMenu or ModEdit or ModWeapon)		
		- Tap PS/XBOX to save EVERY values, toggles, weapon category and weapon name, independently for EACH profiles 

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Speed toggles (outside Mod Menu/Edit/Weapon)
		- Hold aiming button and hold 300ms UP, DOWN, RIGHT or LEFT
			- UP: Rapid Fire
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
	
	Switch profiles
		- In Game:
			- Tap USER DEFINED BUTTON to switch profile 1 and 2 (primary and secondary)
		
		- In Game:
			- Hold L2/LT and Tap USER DEFINED BUTTON to switch profile 3 (Extra profile)
		
		- In Mod Menu/Edit/Weapon
			- Tap TRIANGLE/Y to loop profile 1, 2, 3, 1, 2, 3 ...

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Kill Switch (disable everything)
		- Turn ON to OFF or OFF to ON
			- Hold L2/LT and tap SHARE/VIEW 
			- Tap PS/XBOX 
		- Turn ON (disable everything)
			- Tap OPTIONS/MENU
			- Tap Map button
		- Turn OFF (enable everything)
			- Double tap CIRCLE/B
			- Hold CIRCLE/B more than 600ms
			- Hold SQUARE/X more than 1000ms while on the map only (for fast travel)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//Champion Modifier Information [Compatablity]

//Some Champions will only have one active ability activated on default. If you want to activate more like L1/LB AND L2/LT then go to PaladinMods in the Menu to toggle it on
//This was done to make it simple when choosing a champion and not having too much going on when firing. Tyra for example can have all three abilities go off and cause chaos
//I will be adding in good combos that use 2 or more abilities into the Custom Category. Please let me know what Champion combos you would like to be added
//If there are any complications with Champions and abilities please provide as much detail on our discord. You will find it in the Version Notes.
//Also, please provide cards and loadout for your Champion so I can replicate the issue if possible. Thanks!

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

	* Mod 1 Champions:
	
	* Androxus 	- Reversal when shooting.
	* Ash 		- Use shield when shooting.
	* Atlas 	- Drop shield when shooting.
	* Barik		- Place turret down when shooting.
	* Cassie 	- Blast shot at enemy when shooting.
	* Dredge 	- Hurl spear when shooting. Hurl Talent recommended.
	* Fernando 	- Shoot fire ball when flamethrowing.
	* Furia 	- Lay down pyre strike when shooting.
	* Grohk 	- Place totem when shooting. - Totem will land between you and enemy.
	* Grover 	- Heal teammates when axe throwing.
	* Jenos 	- Use void grip on enemy when shooting.
	* Khan		- Battle shout (HEAL) when shooting.
	* Koga 		- Use Dragon stance when shooting.
	* Lian 		- Fire prescence shot when shooting.
	* Raum 		- Use Soul Harvest when shooting.
	* Ruckus 	- Apply shield when shooting enemy.
	* Seris 	- Rend Soul when shooting enemies.
	* Shalin 	- Use Rapid shot when shooting.
	* Skye 		- Throw smoke screen when shooting. - Smoke will land between you and enemy.
	* Talus 	- Use Overcharge when shooting enemy.
	* Terminus	- Power Siphon when swinging axe.
	* Tiberius 	- Use Combat trance when shooting.
	* Tyra 		- Throw Fire bomb when shooting.
	* Viktor 	- Throw Grenade when shooting enemies.
	* Vivian 	- Shield up when shooting. - Shield will cancel after a bit (work in progress)
	* Vora		- Use Dark siphon when reaping.
	* Willow 	- Throw Seedling when shooting.
	* Ying 		- Place illusion down. - Resonance Talent recommended.
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

* Mod 2 Champions:

	* Atlas		- Stun enemy when shooting.
	* Androxus	- Punches enemy when shooting.
	* Barik		- Places shield down when firing.
	* Buck		- Launches Net when blasting.
	* Dredge	- Fires Broadside when shooting chaos everywhere.
	* Drogoz	- Spits fire at enemies while shooting.
	* Grohk		- Uses Shock pulse while zapping enemy.
	* Grover	- Hurls Root axe when throwing.
	* Imani		- Frost bomb & Inferno when shooting.
	* Inara		- Puts up Earthen Guard when firing.
	* Lex		- Uses In Pursuit when shooting. - Shooting while In Pursuit active cancels ability.
	* Lian		- Shoots off Valor when firing main gun.
	* Maeve		- Pounces on enemy when slinging knives.
	* Makoa		- Launches Dredge anchor at enemy when firing.
	* Mal'damba	- Mending spirits (Heal) when firing. - Look at team mate when shooting.
	* Moji		- Spits while you spray!
	* Pip		- Launches Explosive flask when shooting.
	* Raum		- Uses Ignition while shooting.
	* Ruckus	- Fires off a missle when shooting.
	* Seris		- Restores souls when orbing!
	* Shalin	- Uses Crippling arrow when firing.
	* Skye		- Shoots Poison bolts while being a bastard.
	* Strix		- Launches Flare from Pistol when shooting. - Cannot while Sniper is active.
	* Talus		- Blitz upper cut when firing at enemy.
	* Terminus	- Use Calamity blast when swinging your giant axe.
	* Tiberius	- Throw Heavy blade at enemy when slinging blades.
	* Torvald	- Use Nullify on enemy while firing.
	* Tyra		- Shoot Nade launcher while shooting. - Best with the 3 nade launcher talent!!
	* Willow	- Fire Deadzone when shooting enemy.
	* Ying		- Shatter illusions while lasering. 
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
* Mod 3 Champions:

	* Cassie	- Dodges in the direction your moving while firing.
	* Drogoz	- Thrust into the air while shooting.
	* Furia		- Use Wings of wrath while firing.
	* Io		- Leap into the air backwards when shooting.
	* Khan		- Charge into enemies while firing.
	* Koga		- Uses Agility while shooting.
	* Lex		- Slides forward while shooting. (This is tough to play with but worth mentioning.)
	* Lian		- Uses Grace when shooting. - Best with Alacrity Talent!
	* Pip		- Become Weightless while shooting.
	* Shalin	- Go invisible when sniping. - TIP: Charge up shot on cooldown and release when CD is up.
	* Terminus	- Launch with Shatterfall when swing. - Mind your distance, this might mess you up!
	* Torvald	- Recharge Shield when firing gauntlet.
	* Tyra		- Uses Hunter mark when shooting enemies.
	* Vivian	- Throw drone when firing gun. - Best with Booby Trap talent!
	* Zhin 		- Unleashes Whirlwind while be a flame boy.
	* Yagorath  - When Plant or Roll - Use Secondary ability.
	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	FUTURE MODS:
	
	To add into the Custom Category -

		
	Message in the Discord for any more champion ideas or combos that we can add into the script!
	
				NO NEED TO CHANGE ANYTHING BELOW
/*____________________________________________________________________________________________________________________________________________________
*/	
 



const int8 data1[]={-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91, -90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16, -14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49, 51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92, 92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99, 99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71, 70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14, 13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40, -42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77, -78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97, -98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100}; const string TITLE = "PALADINSPRO"; const string OFF = "OFF"; const string ON = "ON"; const string SAVE= "SAVED"; const string PROFILE_1 = " Profile 1 "; const string PROFILE_2 = " Profile 2 "; const string PROFILE_3 = " Profile 3 "; const string ALL = " All Profiles "; const string MUTE = "Script OFF"; const string HOLD = "Hold CIRCLE/B"; const string ACTIVE = "to turn ON" const string STANDARD = "Legacy"; const string PROGRESS = "Progressive"; const string ANTIRECOIL_VERTICAL = "AR Vertical" const string PRESS_A_TO_CONTINUE = "Press Cross/A " const string ANTIRECOIL = "A-R Type"; const string RAPIDFIRE = "RapidFire"; const string POLARAIM = "Polar Aim"; const string STICKYAIM = "Sticky Aim"; const string SWEETEVIL = "Sweet Evil"; const string QUICKSCOPE = "QuickScope" const string MISC_MODS = "Misc Mods"; const string PALADINMODS = "PaladinMods"; const string SWAP = "Flipped/Tr"; int modName_idx; define LAST_MODNAME_STRING = 8; define LAST_EDITABLE_STRING = 7; const string ANTIRECOIL_START = "AR Start"; const string ANTIRECOIL_END = "AR End"; const string ANTIRECOIL_TIME = "AR Time"; const string ANTIRECOIL_HORIZONTAL = "AR Horiz"; const string RATE_OF_FIRE = "Rounds/sec"; const string POLAR_RADIUS = "Radius"; const string POLAR_STEPS = "Steps"; const string STEADYAIMING = "SteadyAim"; const string STICKYAIM_SIZE = "Sticky Size"; const string STICKYAIM_TIME = "Sticky Time"; const string QUICKSCOPESPEED = "Scope Delay"; const string AUTO_RUN = "Auto Run"; const string BUNNYHOP = "Bunny Hop"; const string AUTO_RELOAD = "Auto Reload"; const string JUMPSHOT = "Jump Shot"; const string STRAFESHOT = "Strafe Shot"; const string ABILITY1 = "Mod L1/LB"; const string ABILITY2 = "Mod L2/LT"; const string ABILITY3 = "Mod R1/RB"; const string AUTOSHALIN = "Auto Shalin"; const string AUTOKINESSA = "AutoKinessa"; const string AIMBOOST = "Aim Boost"; const string AIMCORRECTION = "Aim Correct"; int valName_idx; define AMOUNT_OF_VALNAME_IDX = 22; const string DAMAGE_LABEL = "Damage"; const string FLANK_LABEL = "Flank"; const string SUPP_LABEL = "Support"; const string TANK_LABEL = "Tank"; const string CUSTOM_LABEL = "Custom"; define amount_fullauto_category = 5; int champion_category[3]; int champion_name[3]; define amount_champion_category = 5; define max_stored = 13; const int16 DAMAGE[][] = { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 15, 15, 10, 0, 24 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 14, 14, 20, 0, 0 }, { 15, 13, 30, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_DAMAGE = 13; const string DAMAGE_1 = "Cassie"; const string DAMAGE_2 = "Dredge"; const string DAMAGE_3 = "Drogoz"; const string DAMAGE_4 = "Imani"; const string DAMAGE_5 = "Kinessa"; const string DAMAGE_6 = "Lian"; const string DAMAGE_7 = "Shalin"; const string DAMAGE_8 = "Strix"; const string DAMAGE_9 = "Tiberius"; const string DAMAGE_10 = "Tyra"; const string DAMAGE_11 = "Viktor"; const string DAMAGE_12 = "Vivian"; const string DAMAGE_13 = "Willow"; const int16 FLANK[][] = { { 0, 0, 0, 0, 24 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 24 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_FLANK = 11; const string FLANK_1 = "Androxus"; const string FLANK_2 = "Buck"; const string FLANK_3 = "Evie"; const string FLANK_4 = "Koga"; const string FLANK_5 = "Lex"; const string FLANK_6 = "Maeve"; const string FLANK_7 = "Moji"; const string FLANK_8 = "Skye"; const string FLANK_9 = "Talus"; const string FLANK_10 = "Vora"; const string FLANK_11 = "Zhin"; const int16 SUPP[][] = { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_SUPP = 10; const string SUPP_1 = "Corvus"; const string SUPP_2 = "Furia"; const string SUPP_3 = "Grohk"; const string SUPP_4 = "Grover"; const string SUPP_5 = "IO"; const string SUPP_6 = "Jenos"; const string SUPP_7 = "Mal'Damba"; const string SUPP_8 = "PIP"; const string SUPP_9 = "Seris"; const string SUPP_10 = "Ying"; const int16 TANK[][] = { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_TANK = 12; const string TANK_1 = "ASH"; const string TANK_2 = "Atlas"; const string TANK_3 = "BARIK"; const string TANK_4 = "Fernando"; const string TANK_5 = "Inara"; const string TANK_6 = "Khan"; const string TANK_7 = "Makoa"; const string TANK_8 = "Raum"; const string TANK_9 = "Ruckus"; const string TANK_10 = "Terminus"; const string TANK_11 = "Torvald"; const string TANK_12 = "Yagorath"; const int16 CUSTOM[][] = { { 0, 0, 0, 0, 24 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 14, 14, 20, 0, 0 }, { 15, 13,30, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_CUSTOM = 9; const string CUSTOM_1 = "AutoAndrox"; const string CUSTOM_2 = "BombKing EZ"; const string CUSTOM_3 = "BuckHealing"; const string CUSTOM_4 = "LianWombo"; const string CUSTOM_5 = "MaeveCombo"; const string CUSTOM_6 = "TyraWombo"; const string CUSTOM_7 = "VikGrenade"; const string CUSTOM_8 = "VivianDEF"; const string CUSTOM_9 = "VoraCombo"; int antirecoil_start[3]; int antirecoil_end[3]; int antirecoil_time[3]; int antirecoil_horizontal[3]; int rate_of_fire[3]; int AMOUNT_OF_VAL_IN_ARRAY = 5; int final_antirecoil_start; int final_antirecoil_end; int final_antirecoil_time; int final_antirecoil_horizontal; int final_rate_of_fire; int profile_idx; int toggle_antirecoil[3]; int toggle_rapidfire[3]; int toggle_polaraim[3]; int toggle_quickscope[3]; int toggle_sweetevil[3]; int toggle_stickyaim[3]; define AMOUNT_OF_PROFILES = 3; define AMOUNT_OF_MULTI_TOGGLE = 6; int quickscopedelay; int strafeshot; int ability1; int ability2; int ability3; int autoshalin; int autokinessa; int jumpshot; int auto_reload; int toggle_bunnyhop; int auto_run; int swap_on; int SCREENSAVER; define SSA1 = 80; define SSA2 = 65; define SSA3 = 82; define SSA4 = 65; define SSA5 = 70; define SSA6 = 76; define SSA7 = 65; define SSA8 = 88; define SAVER = 5000; define SAVER1 = 10; int SSMU1 = 1; int SSMU2 = 8; int SSMU3 = 15; int SSMU4 = 22; int SSMU5 = 29; int SSMU6 = 36; int SSMU7 = 43; int SSMU8 = 50; int Aim_Boost = 20; int Aim_Correction = 25; define Sampling_Time = 10; define Aim_Perfection_Limit = 30; define POS_Aim_Limit = 70; define NEG_Aim_Limit = -70; define POS_Micro_MVT_Limit = 25; define NEG_Micro_MVT_Limit = -25; int X_Last_Value = 0; int Y_Last_Value = 0; int X_Current_Value = 0; int Y_Current_Value = 0; int Sampling_Done = FALSE; int spiroide_pulse = 0; int fine_pulse = 0; const uint8 ASCII_NUM[] = {48,49,50,51,52,53,54,55,56,57}; int i; int c,c_val; data( 1,0,0,0, 0,0,0,1, 1,0,1,0, 0,0,1,0, 0,1,1,0, 1,1,1,0, 0,1,0,0, 0,0,0,0 ); int display_title = TRUE; int display_new = TRUE; int display_black; int profile_3; int profile_1or2; int active_name; int name_width; int name_font; int name_y; int cat_width; int cat_font; int profile_width; int profile_font; int profile_y; int ModMenu; int ModEdit; int ModWeapon; int KillSwitch; int i_val; int i_pnt; int i_num; int i_cnt; int v,ar_y; int x_ref; int hold_time; int rest_time; int led_on; int led_off; int count_black; int double_tap; int stickyaim_size; int stickyaim_time; define X = XB1_RX; define Y = XB1_RY; define ACTIVE_WHEN_ADS = TRUE; define ACTIVE_WHEN_FIRING = TRUE; int RADIUS; int STEPS; int STEADY_AIM; define STEP_INTERVAL = 1; define VM_INTERVAL = -2; int time; int angle, cos_angle, sin_angle; int actual_X, actual_Y, actual_Magnitude, max_Magnitude,angle_Out; int STEADY_VALUE; const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58, -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; init{ STEADY_AIM = (360 / STEADY_AIM) / 2; toggle_antirecoil[0] = get_pvar(SPVAR_1, 0, 2, 0 ); antirecoil_start[0] = get_pvar(SPVAR_7, -99, 99, 0 ); toggle_rapidfire[0] = get_pvar(SPVAR_2, 0, 1, 0 ); antirecoil_end[0] = get_pvar(SPVAR_8, -99, 99, 0 ); toggle_polaraim[0] = get_pvar(SPVAR_3, 0, 3, 0 ); antirecoil_time[0] = get_pvar(SPVAR_9, -99, 99, 0 ); toggle_stickyaim[0] = get_pvar(SPVAR_4, 0, 2, 0 ); antirecoil_horizontal[0] = get_pvar(SPVAR_10, -99, 99, 0 ); toggle_quickscope[0] = get_pvar(SPVAR_5, 0, 1, 0 ); rate_of_fire[0] = get_pvar(SPVAR_11, 1, 25, 1 ); toggle_sweetevil[0] = get_pvar(SPVAR_6, 0, 2, 0 ); toggle_antirecoil[1] = get_pvar(SPVAR_12, 0, 2, 0 ); antirecoil_start[1] = get_pvar(SPVAR_18, -99, 99, 0 ); toggle_rapidfire[1] = get_pvar(SPVAR_13, 0, 1, 0 ); antirecoil_end[1] = get_pvar(SPVAR_19, -99, 99, 0 ); toggle_polaraim[1] = get_pvar(SPVAR_13, 0, 3, 0 ); antirecoil_time[1] = get_pvar(SPVAR_20, -99, 99, 0 ); toggle_stickyaim[1] = get_pvar(SPVAR_15, 0, 2, 0 ); antirecoil_horizontal[1] = get_pvar(SPVAR_21, -99, 99, 0 ); toggle_quickscope[1] = get_pvar(SPVAR_16, 0, 1, 0 ); rate_of_fire[1] = get_pvar(SPVAR_22, 1, 25, 1 ); toggle_sweetevil[1] = get_pvar(SPVAR_17, 0, 2, 0 ); toggle_antirecoil[2] = get_pvar(SPVAR_23, 0, 2, 0 ); antirecoil_start[2] = get_pvar(SPVAR_29, -99, 99, 0 ); toggle_rapidfire[2] = get_pvar(SPVAR_24, 0, 1, 0 ); antirecoil_end[2] = get_pvar(SPVAR_30, -99, 99, 0 ); toggle_polaraim[2] = get_pvar(SPVAR_25, 0, 3, 0 ); antirecoil_time[2] = get_pvar(SPVAR_31, -99, 99, 0 ); toggle_stickyaim[2] = get_pvar(SPVAR_26, 0, 2, 0 ); antirecoil_horizontal[2] = get_pvar(SPVAR_32, -99, 99, 0 ); toggle_quickscope[2] = get_pvar(SPVAR_27, 0, 1, 0 ); rate_of_fire[2] = get_pvar(SPVAR_33, 1, 25, 1 ); toggle_sweetevil[2] = get_pvar(SPVAR_28, 0, 2, 0 ); swap_on = get_pvar(SPVAR_34, 0, 1, 0 ); stickyaim_size = get_pvar(SPVAR_35, 1, 50, 24 ); stickyaim_time = get_pvar(SPVAR_36, 1, 99, 40 ); RADIUS = get_pvar(SPVAR_37, 1, 99, 21 ); STEPS = get_pvar(SPVAR_38, 1, 99, 25 ); STEADY_AIM = get_pvar(SPVAR_39, 1, 90, 40 ); quickscopedelay = get_pvar(SPVAR_40, 50, 1200,600); Aim_Boost = get_pvar(SPVAR_41, 1, 30, 20); Aim_Correction = get_pvar(SPVAR_42, 1, 30, 25); champion_category[0] = get_pvar(SPVAR_43, 0,(amount_champion_category - 1), 0 ); champion_name[0] = get_pvar(SPVAR_46, 0, (max_stored - 1), 0 ); champion_category[1] = get_pvar(SPVAR_44, 0,(amount_champion_category - 1), 0 ); champion_name[1] = get_pvar(SPVAR_47, 0, (max_stored - 1), 0 ); champion_category[2] = get_pvar(SPVAR_45, 0,(amount_champion_category - 1), 0 ); champion_name[2] = get_pvar(SPVAR_48, 0, (max_stored - 1), 0 ); jumpshot = get_pvar(SPVAR_49, 0, 1, 0); ability1 = get_pvar(SPVAR_53, 0, 1, 0 ); ability2 = get_pvar(SPVAR_50, 0, 1, 0 ); ability3 = get_pvar(SPVAR_54, 0, 1, 0 ); toggle_bunnyhop = get_pvar(SPVAR_51, 0, 1, 0); auto_run = get_pvar(SPVAR_55, 0, 1, 0 ); strafeshot = get_pvar(SPVAR_52, 0, 1, 0); auto_reload = get_pvar(SPVAR_56, 0, 1, 0 ); } main { set_val(TRACE_1, profile_idx); set_val(TRACE_2, champion_category[profile_idx]); set_val(TRACE_3, champion_name[profile_idx]); set_val(TRACE_4, toggle_rapidfire[profile_idx]); set_val(TRACE_5, ModMenu); set_val(TRACE_6, ModWeapon); set_val(TRACE_1, valName_idx); set_val(TRACE_2, toggle_antirecoil[profile_idx]); set_val(TRACE_4, toggle_rapidfire[profile_idx]); set_val(TRACE_5, rate_of_fire[profile_idx]); set_val(TRACE_6, final_rate_of_fire); if(double_tap) double_tap -= get_rtime(); if(get_controller() != PIO_PS4) { if(get_console() == PIO_PS4) { swap(PS4_SHARE,PS4_TOUCH); if(get_val(PS4_R3) && event_press(PS4_TOUCH)) { set_val(PS4_SHARE,100); set_val(PS4_TOUCH,0); set_val(PS4_R3,0); } } } if(!ModMenu && !ModEdit && !ModWeapon) { if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || !get_ival(PS4_L2) && event_press(PS4_PS) ) { KillSwitch = !KillSwitch; if(KillSwitch) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); display_title = TRUE; SCREENSAVER = FALSE; } if(KillSwitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) { KillSwitch = FALSE; combo_run(RUMBLE_ON); display_title = TRUE; } } if(!KillSwitch) { if(get_ival(PS4_L2)) { if(event_release(PS4_PS)) { if(!ModMenu) ModWeapon = !ModWeapon; else ModMenu = FALSE; if(!ModWeapon) { combo_run(RUMBLE_OFF); display_title = TRUE; } if(ModWeapon) { ModMenu = FALSE; ModEdit = FALSE; combo_run(RUMBLE_ON); display_new = TRUE; SCREENSAVER = FALSE; } } if(event_release(PS4_OPTIONS)) { if(!ModWeapon) ModMenu = !ModMenu; else ModWeapon = FALSE; if(!ModMenu) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_title = TRUE; } if(ModMenu) { ModWeapon = FALSE; modName_idx = 0; combo_run(RUMBLE_ON); display_new = TRUE; } } set_val(PS4_SHARE, 0); set_val(PS4_OPTIONS, 0); set_val(PS4_PS, 0); } if(ModWeapon) { if(event_press(PS4_CIRCLE)) { ModMenu = TRUE; ModWeapon = FALSE; display_new = TRUE; SCREENSAVER = FALSE; } if(event_press(PS4_UP) || event_press(PS4_DOWN)) { active_name = !active_name; display_new = TRUE; } if(event_press(PS4_RIGHT)) { if(!active_name) champion_category[profile_idx] += 1; else champion_name[profile_idx] += 1; display_new = TRUE; } if(event_press(PS4_LEFT)) { if(!active_name) champion_category[profile_idx] -= 1; else champion_name[profile_idx] -= 1; display_new = TRUE; } if(champion_category[profile_idx] > amount_champion_category) champion_category[profile_idx] = 0; else if(champion_category[profile_idx] < 0) champion_category[profile_idx] = amount_champion_category; champion_name_limits(0, amount_DAMAGE); champion_name_limits(1, amount_FLANK ); champion_name_limits(2, amount_SUPP ); champion_name_limits(3, amount_TANK ); champion_name_limits(4, amount_CUSTOM); if(get_ival(PS4_CROSS) && get_ptime(PS4_CROSS) == 500) { antirecoil_start[profile_idx] = 0; antirecoil_end[profile_idx] = 0; antirecoil_time[profile_idx] = 0; antirecoil_horizontal[profile_idx] = 0; rate_of_fire[profile_idx] = 0; combo_run(RUMBLE_ON); display_new = TRUE; SCREENSAVER = FALSE; } } if(ModMenu) { if(modName_idx <= LAST_EDITABLE_STRING) { if(event_press(PS4_CROSS) && !ModEdit) { valName_idx = AMOUNT_OF_VALNAME_IDX + 1; ModEdit = TRUE; combo_run(RUMBLE_ON); display_new = TRUE; } if(event_press(PS4_CIRCLE) && ModEdit) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_new = TRUE; } } if(ModEdit) { if(get_ival(PS4_L2)) { antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_end[profile_idx] = edit_val( 1 , antirecoil_end[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_time[profile_idx] = edit_val( 2 , antirecoil_time[profile_idx] , 0 , 99 , 1 , 10 ); antirecoil_horizontal[profile_idx] = edit_val( 3 , antirecoil_horizontal[profile_idx], 99 , 99 , 1 , 10 ); rate_of_fire[profile_idx] = edit_val( 4 , rate_of_fire[profile_idx] , 0 , 25 , 1 , 10 ); RADIUS = edit_val( 5 , RADIUS , 0 , 99 , 1 , 10 ); STEPS = edit_val( 6 , STEPS , 0 , 99 , 1 , 10 ); STEADY_AIM = edit_val( 7 , STEADY_AIM , 0 , 90 , 1 , 10 ); stickyaim_size = edit_val( 8 , stickyaim_size , 0 , 50 , 1 , 10 ); stickyaim_time = edit_val( 9 , stickyaim_time , 0 , 990, 1 , 10 ); quickscopedelay = edit_val( 10 , quickscopedelay , 0 , 1200, 1 , 10 ); Aim_Boost = edit_val( 21 , Aim_Boost , 0 , 30 , 1 , 10 ); Aim_Correction = edit_val( 22 , Aim_Correction , 0 , 30 , 1 , 10 ); } else { if(event_press(PS4_RIGHT)) { valName_idx += 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 3; if(valName_idx > 3) valName_idx = 1; } display_new = TRUE; } if(event_press(PS4_LEFT)) { valName_idx -= 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 1; if(valName_idx < 1) valName_idx = 3; } display_new = TRUE; } auto_run = toggle(valName_idx, 11, auto_run ); toggle_bunnyhop = toggle(valName_idx, 12, toggle_bunnyhop ); auto_reload = toggle(valName_idx, 13, auto_reload ); jumpshot = toggle(valName_idx, 14, jumpshot ); strafeshot = toggle(valName_idx, 15, strafeshot ); ability1 = toggle(valName_idx, 16, ability1 ); ability2 = toggle(valName_idx, 17, ability2 ); ability3 = toggle(valName_idx, 18, ability3 ); autoshalin = toggle(valName_idx, 19, autoshalin ); autokinessa = toggle(valName_idx, 20, autokinessa ); if(modName_idx == 0) { if(toggle_antirecoil[profile_idx] == 2) vals_available( 1 , 3 ); else vals_available( 0 , 3 ); } if(modName_idx == 1) vals_available( 4 , 4 ); if(modName_idx == 2) vals_available( 5 , 7 ); if(modName_idx == 3) vals_available( 8 , 9 ); if(modName_idx == 4) vals_available( 21, 22 ); if(modName_idx == 5) vals_available( 10, 10 ); if(modName_idx == 6) vals_available( 11, 15 ); if(modName_idx == 7) vals_available( 16, 20 ); } } else { if(event_press(PS4_SQUARE)) { ModMenu = FALSE; ModWeapon = TRUE; display_new = TRUE; SCREENSAVER = FALSE; } if(event_press(PS4_RIGHT)) { modName_idx += 1; display_new = TRUE; } if(event_press(PS4_LEFT)) { modName_idx -= 1; display_new = TRUE; } if(event_release(PS4_TRIANGLE)) { display_new = TRUE; } if(modName_idx > LAST_MODNAME_STRING) modName_idx = 0; if(modName_idx < 0) modName_idx = LAST_MODNAME_STRING; toggle_antirecoil[profile_idx] = toggle(modName_idx, 0, toggle_antirecoil[profile_idx] ); toggle_rapidfire[profile_idx] = toggle(modName_idx, 1, toggle_rapidfire[profile_idx] ); toggle_polaraim[profile_idx] = toggle(modName_idx, 2, toggle_polaraim[profile_idx] ); toggle_stickyaim[profile_idx] = toggle(modName_idx, 3, toggle_stickyaim[profile_idx] ); toggle_sweetevil[profile_idx] = toggle(modName_idx, 4, toggle_sweetevil[profile_idx] ); toggle_quickscope[profile_idx] = toggle(modName_idx, 5, toggle_quickscope[profile_idx] ); swap_on = toggle(modName_idx, 8, swap_on ); } } if(ModMenu || ModWeapon) { if(!get_val(PS4_L2) && event_press(PS4_PS)) save(); block_btn(); if(event_press(PS4_R3) && !ModEdit) { profile_idx += 1; display_new = TRUE; } if(profile_idx > (AMOUNT_OF_PROFILES - 1)) profile_idx = 0; } if(toggle_sweetevil){ if(get_val(FIRE_BTN) || get_val(AIM_BTN)){ if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit){ if(abs(X_Last_Value - X_Current_Value) < 15){ combo_stop(Aim_Assist_Perfection); Sampling_Done = FALSE; if(get_val(FIRE_BTN) > 200){ combo_stop(Fine_Tune_Aim); fine_pulse = 0; combo_run(spiroide_Aim_Assit); } else{ combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; combo_run(Fine_Tune_Aim); } } } else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit){ combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; fine_pulse = 0; combo_run(Aim_Assist_Perfection); } } else { combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); combo_stop(Aim_Assist_Perfection); spiroide_pulse = 0; fine_pulse = 0; Sampling_Done = FALSE; } } if(toggle_polaraim) { actual_X = get_val(X); actual_Y = get_val(Y); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if (!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Array[angle % 360]; cos_angle = Polar_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN)))) { vm_tctrl(VM_INTERVAL); if (actual_Magnitude <= RADIUS) { sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(X, calculate(actual_X + cos_angle, -100, 100)); set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); } else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) { vm_tctrl(0); } if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) { STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256); if (get_val(POLAR_RY) > 0) STEADY_VALUE = map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180); else STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180)); Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE); } } if(toggle_stickyaim) { if(get_val(FIRE_BTN) || get_val(AIM_BTN) || get_val(PS4_LX) || get_val(PS4_LY)) combo_run(STICKY_AIM); else combo_stop(STICKY_AIM); } if(champion_category[profile_idx] == 0) { final_antirecoil_start = DAMAGE[champion_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = DAMAGE[champion_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = DAMAGE[champion_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = DAMAGE[champion_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = DAMAGE[champion_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(champion_category[profile_idx] == 1) { final_antirecoil_start = FLANK[champion_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = FLANK[champion_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = FLANK[champion_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = FLANK[champion_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = FLANK[champion_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(champion_category[profile_idx] == 2) { final_antirecoil_start = SUPP [champion_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = SUPP [champion_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = SUPP [champion_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = SUPP [champion_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = SUPP [champion_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(champion_category[profile_idx] == 3) { final_antirecoil_start = TANK [champion_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = TANK [champion_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = TANK [champion_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = TANK [champion_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = TANK [champion_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(champion_category[profile_idx] == 4) { final_antirecoil_start = CUSTOM [champion_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = CUSTOM [champion_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = CUSTOM [champion_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = CUSTOM [champion_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = CUSTOM [champion_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(!ModMenu && !ModWeapon) { if(swap_on) { swap(LETHAL_BTN, FIRE_BTN); swap(TAC_BTN, AIM_BTN); } deadzone(AIM_BTN,FIRE_BTN,99,99); if(get_val(profile3_switch_button) && event_release(profile3_switch_button1)) { profile_idx = 2; profile_3 = !profile_3; display_title = TRUE; } toggle_rapidfire[profile_idx] = speed_toggle( AIM_BTN, PS4_UP, toggle_rapidfire[profile_idx] , 1 ); toggle_quickscope[profile_idx] = speed_toggle( AIM_BTN, PS4_DOWN, toggle_quickscope[profile_idx] , 5 ); if(toggle_quickscope) { if(event_press(AIM_BTN) && get_ptime(AIM_BTN) < 140) combo_run(Quick_Scope); } if(jumpshot) { if(get_val(FIRE_BTN)) combo_run (jump_shot) } if(ability1) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(ability2) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(ability3) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(autokinessa || AutoMod_Kinessa == TRUE) { if(get_val(AIM_BTN)) combo_run(AUTOKINESSA); } if(autoshalin || AutoMod_Shalin == TRUE) { if(get_val(FIRE_BTN)) combo_run(AUTOSHALIN); } if(toggle_bunnyhop) { if (get_val(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) combo_run(BUNNYHOP); } if(strafeshot) { if(get_val(FIRE_BTN)) combo_run(strafe_shot); } if(auto_reload) { if(event_release(FIRE_BTN)) combo_run(AUTORELOAD); } if(auto_run) { if(get_val(PS4_LY) < -60) { set_val(SPRINT_BTN, 100); } } if(one_button_press) { if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(two_button_press) { if(get_ival(profile_switch_button2) && (event_press(profile_switch_button3))) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(!profile_3) { if(profile_1or2) profile_idx = 1; else profile_idx = 0; } if(AutoMods_On) { if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 0) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 12) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 3) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 6) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 9) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 9) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 11) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 12) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 3) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 9) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 6) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 10) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 2) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 3) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 7) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 9) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 0) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 1) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 3) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 4) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 5) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 6) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(DAMBASPAM); if(get_val(FIRE_BTN)) combo_stop(DAMBASPAM); } } if(champion_category [profile_idx] == 2 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 8) { if(AutoMod_heal_spam == FALSE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; } else if(AutoMod_heal_spam == TRUE) { if(get_val(PS4_L2) && event_press(PS4_LEFT)) AutoMod_heal_spam = !AutoMod_heal_spam; if (AutoMod_heal_spam) combo_run(HEALSPAM); if(get_val(FIRE_BTN)) combo_stop(HEALSPAM); } } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 0) { if(event_press(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 0) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 3) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 9) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 0) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 1) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 4) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 6) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 8) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 9) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 10) { if(get_val(FIRE_BTN)) combo_run(HERO2); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 10) { if(get_val(FIRE_BTN)) combo_run(HERO3); } if(champion_category[profile_idx] == 3 && champion_name[profile_idx] == 11) { if(get_val(PS4_R1)) combo_run(HERO2); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 1) { if(event_release(FIRE_BTN)) combo_run(BK); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 3) { if(event_press(LETHAL_BTN)) combo_run(LIAN); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 0) { if(event_press(AIM_BTN)) combo_run(AUTOANDRO); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(BUCKHEAL); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 4) { if(event_press(LETHAL_BTN)) combo_run(MAEVE); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 5) { if(get_val(FIRE_BTN)) combo_run(TYRA); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 6) { if(get_val(FIRE_BTN)) combo_run(HERO1); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 7) { if(get_val(FIRE_BTN)) combo_run(VIVIAN); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 8) { if(event_press(TAC_BTN)) combo_run(VORA); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 2) { if(get_val(AIM_BTN)) combo_run(EVIE); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 2) { if(get_val(PS4_LY) < -60) set_val(JUMP_BTN, 100); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 5) { if(event_press(JUMP_BTN)) combo_run(JUMPY); } if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 4) { if(event_press(JUMP_BTN)) combo_run (JUMPY); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 0 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 1 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 7 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 11 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 1 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 2 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 3 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 10 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 1 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } if(champion_category[profile_idx] == 2 && champion_name[profile_idx] == 4 && AutoMod_Ultimate == TRUE) { if(get_val(FIRE_BTN)) combo_run(HERO4); } } } if(!ModWeapon) { if(toggle_antirecoil[profile_idx]) { if(toggle_antirecoil[profile_idx] == 2) final_antirecoil_start = final_antirecoil_end; if(final_antirecoil_start < final_antirecoil_end) i_val = 1; else i_val = -1; i_pnt = (final_antirecoil_time * 10) / (abs(final_antirecoil_start - final_antirecoil_end)); if(!get_val(FIRE_BTN)) { ar_y = final_antirecoil_start; i_cnt = 0; i_num = 0; } if(get_val(FIRE_BTN)) { if(!p_complete()) ar_y = p_val(); else ar_y = final_antirecoil_end; if(y_val() < 100) set_val(PS4_RY,y_val()); combo_run(X_VAL); } if(abs(get_val(PS4_RX)) > abs(final_antirecoil_horizontal) + 5) combo_stop(X_VAL); } if(toggle_rapidfire[profile_idx] == 1) { hold_time = 500 / final_rate_of_fire; rest_time = hold_time - 20; if(rest_time < 0) rest_time = 0; if(get_val(FIRE_BTN)) combo_run(RAPIDFIRE); else combo_stop(RAPIDFIRE); led_on = 150; led_off = 300; combo_run(BLINK); } } if(display_new) { SCREENSAVER = FALSE; cls_oled(0); rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; if(ModEdit) { display_edit( 0 , center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0] , antirecoil_start[profile_idx] ); if(toggle_antirecoil[profile_idx] == 2) display_edit( 1 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_VERTICAL[0] , antirecoil_end[profile_idx] ); else display_edit( 1 , center_x(sizeof(ANTIRECOIL_END) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_END[0] , antirecoil_end[profile_idx] ); display_edit( 2 , center_x(sizeof(ANTIRECOIL_TIME) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_TIME[0] , antirecoil_time[profile_idx] ); display_edit( 3 , center_x(sizeof(ANTIRECOIL_HORIZONTAL)- 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] ); display_edit( 4 , center_x(sizeof(RATE_OF_FIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RATE_OF_FIRE[0] , rate_of_fire[profile_idx] ); display_edit( 5 , center_x(sizeof(POLAR_RADIUS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_RADIUS[0] , RADIUS ); display_edit( 6 , center_x(sizeof(POLAR_STEPS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_STEPS[0] , STEPS ); display_edit( 7 , center_x(sizeof(STEADYAIMING) - 1, OLED_FONT_MEDIUM_WIDTH) , STEADYAIMING[0] , STEADY_AIM ); display_edit( 8 , center_x(sizeof(STICKYAIM_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_SIZE[0] , stickyaim_size ); display_edit( 9 , center_x(sizeof(STICKYAIM_TIME) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM_TIME[0] , stickyaim_time ); display_edit( 10 , center_x(sizeof(QUICKSCOPESPEED) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPESPEED[0] , quickscopedelay ); display_mod1( 11 , center_x(sizeof(AUTO_RUN) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTO_RUN[0] , auto_run ); display_mod1( 12 , center_x(sizeof(BUNNYHOP) - 1, OLED_FONT_MEDIUM_WIDTH) , BUNNYHOP[0] , toggle_bunnyhop ); display_mod1( 13 , center_x(sizeof(AUTO_RELOAD) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTO_RELOAD[0] , auto_reload ); display_mod1( 14 , center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH) , JUMPSHOT[0] , jumpshot ); display_mod1( 15 , center_x(sizeof(STRAFESHOT) - 1, OLED_FONT_MEDIUM_WIDTH) , STRAFESHOT[0] , strafeshot ); display_mod1( 16 , center_x(sizeof(ABILITY1) - 1, OLED_FONT_MEDIUM_WIDTH) , ABILITY1[0] , ability1 ); display_mod1( 17 , center_x(sizeof(ABILITY2) - 1, OLED_FONT_MEDIUM_WIDTH) , ABILITY2[0] , ability2 ); display_mod1( 18 , center_x(sizeof(ABILITY3) - 1, OLED_FONT_MEDIUM_WIDTH) , ABILITY3[0] , ability3 ); display_mod1( 19 , center_x(sizeof(AUTOSHALIN) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTOSHALIN[0] , autoshalin ); display_mod1( 20 , center_x(sizeof(AUTOKINESSA) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTOKINESSA[0] , autokinessa ); display_edit( 21 , center_x(sizeof(AIMBOOST) - 1,OLED_FONT_MEDIUM_WIDTH) , AIMBOOST[0] , Aim_Boost ); display_edit( 22 , center_x(sizeof(AIMCORRECTION) - 1,OLED_FONT_MEDIUM_WIDTH) , AIMCORRECTION[0] , Aim_Correction ); if(valName_idx < AMOUNT_OF_VAL_IN_ARRAY) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } else if(ModWeapon) { display_profile (); display_weapon(); } else { display_mod ( 0 , center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]); display_mod ( 1 , center_x(sizeof(RAPIDFIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RAPIDFIRE[0] , toggle_rapidfire[profile_idx] ); display_mod ( 2 , center_x(sizeof(POLARAIM) - 1, OLED_FONT_MEDIUM_WIDTH) , POLARAIM[0] , toggle_polaraim[profile_idx] ); display_mod ( 3 , center_x(sizeof(STICKYAIM) - 1, OLED_FONT_MEDIUM_WIDTH) , STICKYAIM[0] , toggle_stickyaim[profile_idx] ); display_mod ( 4 , center_x(sizeof(SWEETEVIL) - 1, OLED_FONT_MEDIUM_WIDTH) , SWEETEVIL[0] , toggle_sweetevil[profile_idx] ); display_mod ( 5 , center_x(sizeof(QUICKSCOPE) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPE[0] , toggle_quickscope[profile_idx]); display_mod2( 6 , center_x(sizeof(MISC_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , MISC_MODS[0] ); display_mod2( 7 , center_x(sizeof(PALADINMODS) - 1, OLED_FONT_MEDIUM_WIDTH) , PALADINMODS[0] ); display_mod ( 8 , center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH) , SWAP[0] , swap_on ); if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } display_black = TRUE; display_new = FALSE; } } if(display_title) { cls_oled(0); SCREENSAVER = FALSE; rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; active_name = FALSE; if(KillSwitch) { printf(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8 ,OLED_FONT_MEDIUM,OLED_WHITE,MUTE [0]); printf(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH) ,38,OLED_FONT_SMALL ,OLED_WHITE,HOLD [0]); printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH) ,50,OLED_FONT_SMALL ,OLED_WHITE,ACTIVE[0]); } else { printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]); display_weapon(); if(profile_3) { printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); } else display_profile (); display_black = TRUE; } display_title = FALSE; } if(display_black && !ModMenu && !KillSwitch && !ModWeapon) { count_black += get_rtime(); if(count_black >= 5000) { cls_oled(0); count_black = 0; display_black = FALSE; SCREENSAVER = TRUE; } } if (SCREENSAVER) { DGT += get_rtime(); if (DGT >= 100) { SD1 += 2; TP1 += 1; TP2 -= 1; DGT = 0; } DGR += get_rtime(); if (DGR >= 30) { Y_1 += 1; Y_2 += 2; Y_3 += 3; Y_4 += 4; Y_5 += 5; Y_6 += 6; Y_7 += 7; Y_8 += 8; DGR = 0; } NAME(); MSC += get_rtime(); if(MSC >= 1000) { MSC = 0; RT += 1; } if(RT == 90) { SCREENSAVER = 0; RT = 0; cls_oled(0); } } if(KillSwitch) led(7); else led(profile_idx); } combo STICKY_AIM { set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size)); wait(stickyaim_time); set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size)); set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size)); wait(stickyaim_time); set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1)); wait(stickyaim_time); set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1)); set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1)); wait(stickyaim_time); } combo RUMBLE_ON { set_ledx(2, 2); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); wait(100); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); } combo RUMBLE_OFF { set_ledx(1, 1); set_rumble(RUMBLE_A, 50); wait(300); reset_rumble(); wait(400); } combo RACE { X_1 = random(0,127); wait(SAVER1); X_2 = random(0,127); wait(SAVER1); X_3 = random(0,127); wait(SAVER1); X_4 = random(0,127); wait(SAVER1); X_5 = random(0,127); wait(SAVER1); X_6 = random(0,127); wait(SAVER1); X_7 = random(0,127); wait(SAVER1); X_8 = random(0,127); wait(SAVER1); } combo RN { RN1 = random(65,90); RN2 = random(60,90); RN3 = random(65,90); RN4 = random(65,90); RN5 = random(65,90); RN6 = random(65,90); RN7 = random(65,90); RN8 = random(65,90); wait(SAVER); } combo SAVE { cls_oled(0); printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); wait(10) call(RUMBLE_ON); wait(150); call(RUMBLE_ON); wait(1000); display_new = TRUE; } combo BLINK { led(profile_idx); wait(led_on); led(7); wait(led_off); } combo RAPIDFIRE { wait(hold_time); set_val(FIRE_BTN, 0); wait(rest_time); } combo X_VAL { x_ref = get_val(PS4_RX) + final_antirecoil_horizontal; if(x_ref > 100) x_ref = 100; set_val(PS4_RX, x_ref); } combo BUNNYHOP { set_val(JUMP_BTN, 100); wait(30); set_val(JUMP_BTN, 0); wait(30); set_val(JUMP_BTN, 100); wait(30); set_val(JUMP_BTN, 0); wait(30); } combo Quick_Scope { set_val(AIM_BTN,100); wait(quickscopedelay); set_val(AIM_BTN,100); set_val(FIRE_BTN,100); wait(200); set_val(AIM_BTN,100); wait(200); } combo HERO1 { wait(abilityDelay); set_val(TAC_BTN, 100); wait(50); set_val(TAC_BTN, 0); wait(abilityWaitTime); } combo HERO2 { wait(abilityDelay); set_val(AIM_BTN, 100); wait(50); set_val(AIM_BTN, 0); wait(abilityWaitTime); } combo HERO3 { wait(abilityDelay); set_val(LETHAL_BTN, 100); wait(50); set_val(LETHAL_BTN, 0); wait(abilityWaitTime); } combo AUTOSHALIN { set_val(FIRE_BTN, 100); wait(980); set_val(FIRE_BTN, 0); wait(980); } combo AUTOKINESSA { set_val(AIM_BTN, 100); wait(1000); set_val(FIRE_BTN, 100); wait(40); set_val(FIRE_BTN, 0); wait(500); } combo jump_shot { wait(jumpDelay); set_val(JUMP_BTN,100); wait(40); set_val(JUMP_BTN,0); } combo strafe_shot { wait(strafeDelay); set_val(PS4_LX, 100); wait(strafeTime); set_val(PS4_LX, -100); wait(strafeTime); } combo AUTORELOAD { set_val(RELOAD_BTN,100); wait(200); set_val(RELOAD_BTN,0); wait(200); } combo BK { wait(BKdetonateDelay); set_val(AIM_BTN, 100); wait(100); set_val(AIM_BTN, 0); wait(100); } combo LIAN { wait(600); set_val(AIM_BTN, 100); wait(40); set_val(AIM_BTN, 0); wait(200); set_val(SWITCH_BTN, 100); wait(40); set_val(SWITCH_BTN, 0); wait(100); set_val(TAC_BTN, 100); wait(40); set_val(TAC_BTN, 0); } combo JUMPY{ wait(100); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(40); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); } combo HEALSPAM { set_val(AIM_BTN, 100); } combo DAMBASPAM { set_val(AIM_BTN, 0); wait(1500); set_val(AIM_BTN, 100); } combo HERO4 { wait(ultimateDelay); set_val(SWITCH_BTN, 100); wait(40); set_val(SWITCH_BTN, 0); wait(ultimateWaitTime); } combo AUTOANDRO { set_val(AIM_BTN, 100); wait(140); set_val(AIM_BTN, 0); wait(350); set_val(FIRE_BTN, 100); wait(150); set_val(FIRE_BTN, 0); wait(40); set_val(FIRE_BTN, 100); wait(120); set_val(FIRE_BTN, 0); wait(40); set_val(FIRE_BTN, 100); wait(120); set_val(FIRE_BTN, 0); wait(100); set_val(AIM_BTN, 100); wait(100); set_val(AIM_BTN, 0); wait(200); set_val(AIM_BTN, 100); wait(80); } combo EVIE { set_val(AIM_BTN, 100); wait(2900); set_val(AIM_BTN, 0); wait(40); set_val(TAC_BTN, 100); wait(40); } combo MAEVE { set_val(SWITCH_BTN, 100); wait(40); set_val(SWITCH_BTN, 0); wait(60); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(LETHAL_BTN, 100); wait(40); set_val(LETHAL_BTN, 0); wait(40); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(60); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(AIM_BTN, 100); wait(40); set_val(AIM_BTN, 0); wait(60); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(TAC_BTN, 100); wait(40); set_val(TAC_BTN, 0); wait(100); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(AIM_BTN, 100); wait(40); set_val(AIM_BTN, 0); wait(60); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(40); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(40); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(60); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(60); set_val(LETHAL_BTN, 100); wait(40); set_val(LETHAL_BTN, 0); wait(60); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(40); set_val(JUMP_BTN, 100); wait(40); set_val(JUMP_BTN, 0); wait(60); } combo TYRA { set_val(LETHAL_BTN, 100); wait(40); set_val(LETHAL_BTN, 0); wait(100); set_val(TAC_BTN, 100); wait(40); set_val(TAC_BTN, 0); wait(100); set_val(AIM_BTN, 100); wait(40); set_val(AIM_BTN, 0); wait(100); set_val(SWITCH_BTN, 100); wait(40); set_val(SWITCH_BTN, 0); } combo VIVIAN { set_val(SWITCH_BTN, 100); wait(40); set_val(SWITCH_BTN, 0); wait(100); set_val(TAC_BTN, 100); wait(6000); set_val(TAC_BTN, 0); wait(40); } combo VORA { set_val(TAC_BTN, 100); wait(40); set_val(TAC_BTN, 0); set_val(FIRE_BTN, 100); wait(60); set_val(FIRE_BTN, 0); wait(800); set_val(LETHAL_BTN, 100); wait(40); set_val(LETHAL_BTN, 0); wait(20); set_val(AIM_BTN, 100); wait(40); set_val(AIM_BTN, 0); wait(50); } combo BUCKHEAL { set_val(TAC_BTN, 100); wait(1400); set_val(TAC_BTN, 0); } combo Aim_Assist_Perfection{ X_Last_Value = X_Current_Value Y_Last_Value = Y_Current_Value wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- 0; Y_Current_Value = get_lval(PS4_RY)- 0; if (Sampling_Done == TRUE ){ Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 );} X_Last_Value = X_Current_Value; Y_Last_Value = Y_Current_Value; wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- 0; Y_Current_Value = get_lval(PS4_RY)- 0; if (Sampling_Done == TRUE ){ Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 );} Sampling_Done = TRUE; wait(Sampling_Time); } combo Fine_Tune_Aim { set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_LX,(-15 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(10 - fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time) wait(Sampling_Time) set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_LX,(15 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(-10 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); fine_pulse = fine_pulse + 2; if ( fine_pulse >10){ fine_pulse = 0;} } combo spiroide_Aim_Assit { set_val(PS4_RX,(4 + spiroide_pulse)); set_val(PS4_LX,(-15+ spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-4 - spiroide_pulse)); set_val(PS4_LX,15 - spiroide_pulse ); wait(Sampling_Time); wait(Sampling_Time) set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); spiroide_pulse = spiroide_pulse + 2; if ( spiroide_pulse >10){ spiroide_pulse = 0;} } function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) { if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit){ if(Last_Value < Current_Value){ if (Boost){ if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Boost));} else if(Correction){ if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Correction));}} else{ if (Boost){ if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Boost));} else if(Correction){ if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Correction));}}} } function xy_val(f_axis,f_val) { if(abs(get_val(f_axis)) < stickyaim_size + 1) return f_val; return get_val(f_axis); } int sin_angle1,cos_angle1; function Set_polar1(stick,angle,radius,offset) { if (angle < 0) angle = 360 + (angle % 360); angle = (angle + 90) % 360; sin_angle1 = data1[angle]; cos_angle1 = data1[(angle + 90) % 360]; if (offset) { offset1(7 + stick, (cos_angle1 * radius) / 100); offset1(8 + stick, (sin_angle1 * radius) / 100); } else { set_val(7 + stick, (cos_angle1 * radius) / 100); set_val(8 + stick, (sin_angle1 * radius) / 100); } return; } function atan2(y, x) { if (x >= 0 && y > 0) angle_Out = -90; else if (x < 0 && y >= 0) angle_Out = 90; else if (x <= 0 && y < 0) angle_Out = -270; else angle_Out = 270; x = abs(x); y = abs(y); if (x < y) angle_Out += (x * 45 / y); else if (x > y) angle_Out += 90 - (y * 45 / x); else angle_Out += 45; angle_Out = abs(angle_Out % 360); return (angle_Out); } function offset1(axis,offset_val) { set_val(axis,clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100)); return; } function map (inMin,inMax,outMin,outMax,x) { return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin; } function calculate(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function p_complete() { i_cnt++; if(i_cnt > final_antirecoil_time * 10) { i_cnt = final_antirecoil_time * 10; return 1; } return 0; } function p_val() { i_num++; if(i_num == i_pnt) { i_num = 0; ar_y += i_val; } return ar_y; } function y_val() { v = get_val(PS4_RY); if(abs(v) < 10) v = 0; if(abs(v) > abs(ar_y + 5)) return v; return v + ar_y; } function champion_name_limits(f_cat, f_limit) { if(champion_category[profile_idx] == f_cat) { if(champion_name[profile_idx] >= f_limit) champion_name[profile_idx] = 0; if(champion_name[profile_idx] < 0) champion_name[profile_idx] = f_limit - 1; } } function vals_available(f_min, f_max) { if(valName_idx < f_min) valName_idx = f_max; if(valName_idx > f_max) valName_idx = f_min; } function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) { if(valName_idx == f_idx) { f_val = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); f_val = value_change( f_val ,PS4_RIGHT, f_inc1 , f_min, f_max ); f_val = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); f_val = value_change( f_val ,PS4_UP , f_inc2 , f_min, f_max ); } if(champion_category[profile_idx] == 0 && (rate_of_fire[profile_idx] < inv(DAMAGE[champion_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(DAMAGE[champion_name[profile_idx]][4]) + 1; if(champion_category[profile_idx] == 1 && (rate_of_fire[profile_idx] < inv(FLANK[champion_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(FLANK[champion_name[profile_idx]][4]) + 1; if(champion_category[profile_idx] == 2 && (rate_of_fire[profile_idx] < inv(SUPP[champion_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(SUPP[champion_name[profile_idx]][4]) + 1; if(champion_category[profile_idx] == 3 && (rate_of_fire[profile_idx] < inv(TANK[champion_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(TANK[champion_name[profile_idx]][4]) + 1; if(champion_category[profile_idx] == 4 && (rate_of_fire[profile_idx] < inv(CUSTOM[champion_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(CUSTOM[champion_name[profile_idx]][4]) + 1; return f_val; } function toggle(f_var, f_idx, f_val) { if(event_press(PS4_UP)) { if(f_var == f_idx) { if(modName_idx == 0 || modName_idx == 2) { f_val += 1; if(f_val > 2) f_val = 0; if(f_val < 0) f_val = 2; } else f_val = 1; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } if(event_press(PS4_DOWN)) { if(f_var == f_idx) { if(modName_idx == 0 || modName_idx == 2) { f_val -= 1; if(f_val > 2) f_val = 0; if(f_val < 0) f_val = 2; } else f_val = 0; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } return f_val; } function speed_toggle(f_hold, f_press, f_val, f_string) { if(get_val(f_hold)) { if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 50)) { modName_idx = f_string; if(f_val == 0) { f_val = 1; combo_run(RUMBLE_ON); } else { f_val = 0; combo_run(RUMBLE_OFF); } display_new = TRUE; } set_val(f_press, 0) } return f_val; } function display_profile() { if(display_title) { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 34; } if(display_new) { if(ModWeapon) { profile_width = OLED_FONT_MEDIUM_WIDTH; profile_font = OLED_FONT_MEDIUM; profile_y = 3; } else { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 23; } } if(profile_idx == 0) printf(center_x(sizeof(PROFILE_1) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_1[0]); else if(profile_idx == 1) printf(center_x(sizeof(PROFILE_2) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_2[0]); else if(profile_idx == 2) printf(center_x(sizeof(PROFILE_3) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_3[0]); } function display_edit(f_idx, f_string, f_print, f_val) { if(valName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_idx < AMOUNT_OF_VAL_IN_ARRAY) { if(champion_category[profile_idx] == 0) { if(f_idx == 2) number_to_string((DAMAGE[champion_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((DAMAGE[champion_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(DAMAGE[champion_name[profile_idx]][valName_idx] + f_val, find_digits(DAMAGE[champion_name[profile_idx]][valName_idx] + f_val)); } if(champion_category[profile_idx] == 1) { if(f_idx == 2) number_to_string((FLANK[champion_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((FLANK[champion_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(FLANK[champion_name[profile_idx]][valName_idx] + f_val, find_digits(FLANK[champion_name[profile_idx]][valName_idx] + f_val)); } if(champion_category[profile_idx] == 2) { if(f_idx == 2) number_to_string((SUPP[champion_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SUPP[champion_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(SUPP[champion_name[profile_idx]][valName_idx] + f_val, find_digits(SUPP[champion_name[profile_idx]][valName_idx] + f_val)); } if(champion_category[profile_idx] == 3) { if(f_idx == 2) number_to_string((TANK[champion_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((TANK[champion_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(TANK[champion_name[profile_idx]][valName_idx] + f_val, find_digits(TANK[champion_name[profile_idx]][valName_idx] + f_val)); } if(champion_category[profile_idx] == 4) { if(f_idx == 2) number_to_string((CUSTOM[champion_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((CUSTOM[champion_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(CUSTOM[champion_name[profile_idx]][valName_idx] + f_val, find_digits(CUSTOM[champion_name[profile_idx]][valName_idx] + f_val)); } } else number_to_string(f_val, find_digits(f_val)); } } function NAME(){ cls_oled(0); combo_run(RACE); combo_run(RN); if (Y_1 > 64) Y_1 = 0; if (Y_2 > 64) Y_2 = 0; if (Y_3 > 64) Y_3 = 0; if (Y_4 > 64) Y_4 = 0; if (Y_5 > 64) Y_5 = 0; if (Y_6 > 64) Y_6 = 0; if (Y_7 > 64) Y_7 = 0; if (Y_8 > 64) Y_8 = 0; if (SD1 > 105) SD1 = -50; if (TP1 > 45) TP1 = 0; if (TP2 < 0) TP2 = 55; putc_oled(1,RN1); puts_oled(X_1,Y_1,0,1,1); putc_oled(1,RN2); puts_oled(X_2,Y_2,0,1,1); putc_oled(1,RN3); puts_oled(X_3,Y_3,0,1,1); putc_oled(1,RN4); puts_oled(X_4,Y_4,0,1,1); putc_oled(1,RN5); puts_oled(X_5,Y_5,0,1,1); putc_oled(1,RN6); puts_oled(X_6,Y_6,0,1,1); putc_oled(1,RN7); puts_oled(X_7,Y_7,0,1,1); putc_oled(1,RN8); puts_oled(X_8,Y_8,0,1,1); putc_oled(1,SSA1); puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1); putc_oled(1,SSA2); puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1); putc_oled(1,SSA3); puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1); putc_oled(1,SSA4); puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1); putc_oled(1,SSA5); puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1); putc_oled(1,SSA6); puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1); putc_oled(1,SSA7); puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1); putc_oled(1,SSA8); puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1); } function display_weapon () { if(!active_name) { name_width = OLED_FONT_SMALL_WIDTH; name_font = OLED_FONT_SMALL; name_y = 50; cat_width = OLED_FONT_MEDIUM_WIDTH; cat_font = OLED_FONT_MEDIUM; } else { name_width = OLED_FONT_MEDIUM_WIDTH; name_font = OLED_FONT_MEDIUM; name_y = 43; cat_width = OLED_FONT_SMALL_WIDTH; cat_font = OLED_FONT_SMALL; } if(champion_category[profile_idx] == 0) { if(display_new) printf(center_x(sizeof(DAMAGE_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,DAMAGE_LABEL[0]); if(champion_name[profile_idx] == 0) printf(center_x(sizeof(DAMAGE_1) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_1[0]); if(champion_name[profile_idx] == 1) printf(center_x(sizeof(DAMAGE_2) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_2[0]); if(champion_name[profile_idx] == 2) printf(center_x(sizeof(DAMAGE_3) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_3[0]); if(champion_name[profile_idx] == 3) printf(center_x(sizeof(DAMAGE_4) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_4[0]); if(champion_name[profile_idx] == 4) printf(center_x(sizeof(DAMAGE_5) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_5[0]); if(champion_name[profile_idx] == 5) printf(center_x(sizeof(DAMAGE_6) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_6[0]); if(champion_name[profile_idx] == 6) printf(center_x(sizeof(DAMAGE_7) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_7[0]); if(champion_name[profile_idx] == 7) printf(center_x(sizeof(DAMAGE_8) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_8[0]); if(champion_name[profile_idx] == 8) printf(center_x(sizeof(DAMAGE_9) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_9[0]); if(champion_name[profile_idx] == 9) printf(center_x(sizeof(DAMAGE_10) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_10[0]); if(champion_name[profile_idx] == 10) printf(center_x(sizeof(DAMAGE_11) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_11[0]); if(champion_name[profile_idx] == 11) printf(center_x(sizeof(DAMAGE_12) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_12[0]); if(champion_name[profile_idx] == 12) printf(center_x(sizeof(DAMAGE_13) - 1, name_width),name_y,name_font,OLED_WHITE,DAMAGE_13[0]); } if(champion_category[profile_idx] == 1) { if(display_new) printf(center_x(sizeof(FLANK_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,FLANK_LABEL[0]); if(champion_name[profile_idx] == 0) printf(center_x(sizeof(FLANK_1) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_1[0]); if(champion_name[profile_idx] == 1) printf(center_x(sizeof(FLANK_2) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_2[0]); if(champion_name[profile_idx] == 2) printf(center_x(sizeof(FLANK_3) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_3[0]); if(champion_name[profile_idx] == 3) printf(center_x(sizeof(FLANK_4) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_4[0]); if(champion_name[profile_idx] == 4) printf(center_x(sizeof(FLANK_5) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_5[0]); if(champion_name[profile_idx] == 5) printf(center_x(sizeof(FLANK_6) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_6[0]); if(champion_name[profile_idx] == 6) printf(center_x(sizeof(FLANK_7) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_7[0]); if(champion_name[profile_idx] == 7) printf(center_x(sizeof(FLANK_8) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_8[0]); if(champion_name[profile_idx] == 8) printf(center_x(sizeof(FLANK_9) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_9[0]); if(champion_name[profile_idx] == 9) printf(center_x(sizeof(FLANK_10) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_10[0]); if(champion_name[profile_idx] == 10) printf(center_x(sizeof(FLANK_11) - 1, name_width),name_y,name_font,OLED_WHITE,FLANK_11[0]); } if(champion_category[profile_idx] == 2) { if(display_new) printf(center_x(sizeof(SUPP_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SUPP_LABEL[0]); if(champion_name[profile_idx] == 0) printf(center_x(sizeof(SUPP_1) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_1[0]); if(champion_name[profile_idx] == 1) printf(center_x(sizeof(SUPP_2) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_2[0]); if(champion_name[profile_idx] == 2) printf(center_x(sizeof(SUPP_3) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_3[0]); if(champion_name[profile_idx] == 3) printf(center_x(sizeof(SUPP_4) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_4[0]); if(champion_name[profile_idx] == 4) printf(center_x(sizeof(SUPP_5) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_5[0]); if(champion_name[profile_idx] == 5) printf(center_x(sizeof(SUPP_6) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_6[0]); if(champion_name[profile_idx] == 6) printf(center_x(sizeof(SUPP_7) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_7[0]); if(champion_name[profile_idx] == 7) printf(center_x(sizeof(SUPP_8) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_8[0]); if(champion_name[profile_idx] == 8) printf(center_x(sizeof(SUPP_9) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_9[0]); if(champion_name[profile_idx] == 9) printf(center_x(sizeof(SUPP_10) - 1, name_width),name_y,name_font,OLED_WHITE,SUPP_10[0]); } if(champion_category[profile_idx] == 3) { if(display_new) printf(center_x(sizeof(TANK_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,TANK_LABEL[0]); if(champion_name[profile_idx] == 0) printf(center_x(sizeof(TANK_1) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_1[0]); if(champion_name[profile_idx] == 1) printf(center_x(sizeof(TANK_2) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_2[0]); if(champion_name[profile_idx] == 2) printf(center_x(sizeof(TANK_3) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_3[0]); if(champion_name[profile_idx] == 3) printf(center_x(sizeof(TANK_4) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_4[0]); if(champion_name[profile_idx] == 4) printf(center_x(sizeof(TANK_5) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_5[0]); if(champion_name[profile_idx] == 5) printf(center_x(sizeof(TANK_6) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_6[0]); if(champion_name[profile_idx] == 6) printf(center_x(sizeof(TANK_7) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_7[0]); if(champion_name[profile_idx] == 7) printf(center_x(sizeof(TANK_8) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_8[0]); if(champion_name[profile_idx] == 8) printf(center_x(sizeof(TANK_9) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_9[0]); if(champion_name[profile_idx] == 9) printf(center_x(sizeof(TANK_10) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_10[0]); if(champion_name[profile_idx] == 10) printf(center_x(sizeof(TANK_11) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_11[0]); if(champion_name[profile_idx] == 11) printf(center_x(sizeof(TANK_12) - 1, name_width),name_y,name_font,OLED_WHITE,TANK_12[0]); } if(champion_category[profile_idx] == 4) { if(display_new) printf(center_x(sizeof(CUSTOM_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,CUSTOM_LABEL[0]); if(champion_name[profile_idx] == 0) printf(center_x(sizeof(CUSTOM_1) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_1[0]); if(champion_name[profile_idx] == 1) printf(center_x(sizeof(CUSTOM_2) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_2[0]); if(champion_name[profile_idx] == 2) printf(center_x(sizeof(CUSTOM_3) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_3[0]); if(champion_name[profile_idx] == 3) printf(center_x(sizeof(CUSTOM_4) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_4[0]); if(champion_name[profile_idx] == 4) printf(center_x(sizeof(CUSTOM_5) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_5[0]); if(champion_name[profile_idx] == 5) printf(center_x(sizeof(CUSTOM_6) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_6[0]); if(champion_name[profile_idx] == 6) printf(center_x(sizeof(CUSTOM_7) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_7[0]); if(champion_name[profile_idx] == 7) printf(center_x(sizeof(CUSTOM_8) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_8[0]); if(champion_name[profile_idx] == 8) printf(center_x(sizeof(CUSTOM_9) - 1, name_width),name_y,name_font,OLED_WHITE,CUSTOM_9[0]); } if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 7 && AutoMod_RapidFire == TRUE) toggle_rapidfire[profile_idx] = 1; if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 0 && AutoMod_RapidFire == TRUE) toggle_rapidfire[profile_idx] = 1; if(champion_category[profile_idx] == 1 && champion_name[profile_idx] == 4 && AutoMod_RapidFire == TRUE) toggle_rapidfire[profile_idx] = 1; if(champion_category[profile_idx] == 4 && champion_name[profile_idx] == 0 && AutoMod_RapidFire == TRUE) toggle_rapidfire[profile_idx] = 1; else if((champion_category[profile_idx] < amount_fullauto_category) && display_new) toggle_rapidfire[profile_idx] = 0; if(AutoMod_Kinessa == TRUE && champion_category[profile_idx] == 0 && champion_name[profile_idx] == 4) autokinessa[valName_idx] = 20; else if((champion_category[profile_idx] < amount_fullauto_category) && display_new) autokinessa[valName_idx] = 0; else AutoMod_Kinessa = FALSE; if(AutoMod_Shalin == TRUE && champion_category[profile_idx] == 0 && champion_name[profile_idx] == 6) autoshalin[valName_idx] = 19; else if((champion_category[profile_idx] < amount_fullauto_category) && display_new) autoshalin[valName_idx] = 0; else AutoMod_Shalin = FALSE; if(AutoMod_StrixQS == TRUE && champion_category[profile_idx] == 0 && champion_name[profile_idx] == 7) toggle_quickscope[profile_idx] = 5; else if((champion_category[profile_idx] < amount_fullauto_category) && display_new) toggle_quickscope[profile_idx] = 0; else AutoMod_StrixQS = FALSE; if(champion_category[profile_idx] == 0 && champion_name[profile_idx] == 10) auto_run[valName_idx] = 11; else if((champion_category[profile_idx] < amount_fullauto_category) && display_new) auto_run[valName_idx] = 0; } function display_mod(f_idx, f_string, f_print, f_toggle) { if(modName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_idx == 0) { if(f_toggle == 1) printf(center_x(sizeof(PROGRESS) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PROGRESS[0]); else if(f_toggle == 2) printf(center_x(sizeof(STANDARD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STANDARD[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else { if(f_toggle == 1) printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } } } int RT,MSC,SD1,DGT,DGR,TP1,TP2; function display_mod1(f_idx, f_string, f_print, f_toggle) { if(valName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_toggle == 1) printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } } function display_mod2(f_idx, f_string, f_print) { if(modName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]); } } int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8; function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { if(press_hold(f_btn)) { f_val += f_inc; if(valName_idx >= AMOUNT_OF_VAL_IN_ARRAY) { if(f_val < inv(f_rng_min)) f_val = inv(f_rng_min); if(f_val > f_rng_max) f_val = f_rng_max; } else { if(champion_category[profile_idx] == 0) { if((f_val + DAMAGE[champion_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + DAMAGE[champion_name[profile_idx]][valName_idx]); if((f_val + DAMAGE[champion_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - DAMAGE[champion_name[profile_idx]][valName_idx]; } if(champion_category[profile_idx] == 1) { if((f_val + FLANK[champion_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + FLANK[champion_name[profile_idx]][valName_idx]); if((f_val + FLANK[champion_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - FLANK[champion_name[profile_idx]][valName_idx]; } if(champion_category[profile_idx] == 2) { if((f_val + SUPP[champion_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + SUPP[champion_name[profile_idx]][valName_idx]); if((f_val + SUPP[champion_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - SUPP[champion_name[profile_idx]][valName_idx]; } if(champion_category[profile_idx] == 3) { if((f_val + TANK[champion_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + TANK[champion_name[profile_idx]][valName_idx]); if((f_val + TANK[champion_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - TANK[champion_name[profile_idx]][valName_idx]; } if(champion_category[profile_idx] == 4) { if((f_val + CUSTOM[champion_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + CUSTOM[champion_name[profile_idx]][valName_idx]); if((f_val + CUSTOM[champion_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - CUSTOM[champion_name[profile_idx]][valName_idx]; } } display_new = TRUE; } return f_val; } function number_to_string(f_val,f_digits) { i = 1; c_val = 10000; if(f_val < 0) { putc_oled(i,45); i += 1; f_val = abs(f_val); } for(c = 5; c >= 1; c--) { if(f_digits >= c) { putc_oled(i,ASCII_NUM[f_val / c_val]); f_val = f_val % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } if(display_title) puts_oled(120, 34, OLED_FONT_SMALL, i - 1, OLED_WHITE); else puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); } function find_digits(f_num) { f_num = abs(f_num); if(f_num / 10000 > 0) return 5; if(f_num / 1000 > 0) return 4; if(f_num / 100 > 0) return 3; if(f_num / 10 > 0) return 2; return 1; } function center_x(f_chars,f_font) { return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); } function center_y(f_size) { return (OLED_HEIGHT / 2) - (f_size / 2); } function press_hold(f_btn) { return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 && get_ptime(f_btn) % (get_rtime() * 8) == 0; } function led(f_color) { for(i = 0; i <= 3; i++) { set_led(i,duint8((f_color * 4) + i)); } } int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; function save () { combo_run(SAVE); set_pvar(SPVAR_1,toggle_antirecoil[0] ); set_pvar(SPVAR_7 ,antirecoil_start[0] ); set_pvar(SPVAR_2,toggle_rapidfire[0] ); set_pvar(SPVAR_8 ,antirecoil_end[0] ); set_pvar(SPVAR_3,toggle_polaraim[0] ); set_pvar(SPVAR_9,antirecoil_time[0] ); set_pvar(SPVAR_4,toggle_stickyaim[0] ); set_pvar(SPVAR_10,antirecoil_horizontal[0]); set_pvar(SPVAR_5,toggle_quickscope[0] ); set_pvar(SPVAR_11,rate_of_fire[0] ); set_pvar(SPVAR_6,toggle_sweetevil[0] ); set_pvar(SPVAR_12,toggle_antirecoil[1]); set_pvar(SPVAR_18,antirecoil_start[1] ); set_pvar(SPVAR_13,toggle_rapidfire[1] ); set_pvar(SPVAR_19,antirecoil_end[1] ); set_pvar(SPVAR_14,toggle_polaraim[1] ); set_pvar(SPVAR_20,antirecoil_time[1] ); set_pvar(SPVAR_15,toggle_stickyaim[1] ); set_pvar(SPVAR_21,antirecoil_horizontal[1]); set_pvar(SPVAR_16,toggle_quickscope[1] ); set_pvar(SPVAR_22,rate_of_fire[1] ); set_pvar(SPVAR_17,toggle_sweetevil[1] ); set_pvar(SPVAR_23,toggle_antirecoil[2]); set_pvar(SPVAR_29,antirecoil_start[2] ); set_pvar(SPVAR_24,toggle_rapidfire[2] ); set_pvar(SPVAR_30,antirecoil_end[2] ); set_pvar(SPVAR_25,toggle_polaraim[2] ); set_pvar(SPVAR_31,antirecoil_time[2] ); set_pvar(SPVAR_26,toggle_stickyaim[2] ); set_pvar(SPVAR_32,antirecoil_horizontal[2]); set_pvar(SPVAR_27,toggle_quickscope[2] ); set_pvar(SPVAR_33,rate_of_fire[2] ); set_pvar(SPVAR_28,toggle_sweetevil[2] ); set_pvar(SPVAR_34, swap_on ); set_pvar(SPVAR_35,stickyaim_size ); set_pvar(SPVAR_36,stickyaim_time ); set_pvar(SPVAR_37,RADIUS ); set_pvar(SPVAR_38,STEPS ); set_pvar(SPVAR_39,STEADY_AIM ); set_pvar(SPVAR_40,quickscopedelay); set_pvar(SPVAR_41,Aim_Boost); set_pvar(SPVAR_42,Aim_Correction); set_pvar(SPVAR_43, champion_category[0]); set_pvar(SPVAR_46, champion_name[0] ); set_pvar(SPVAR_44, champion_category[1]); set_pvar(SPVAR_47, champion_name[1] ); set_pvar(SPVAR_45, champion_category[2]); set_pvar(SPVAR_48, champion_name[2] ); set_pvar(SPVAR_52,ability1 ); set_pvar(SPVAR_53,jumpshot ); set_pvar(SPVAR_49,auto_run ); set_pvar(SPVAR_54,strafeshot ); set_pvar(SPVAR_50,toggle_bunnyhop ); set_pvar(SPVAR_55,ability2 ); set_pvar(SPVAR_51,ability3 ); set_pvar(SPVAR_56,auto_reload ); } function block_btn() { set_val(PS4_UP , 0 ); set_val(PS4_DOWN , 0 ); set_val(PS4_LEFT , 0 ); set_val(PS4_RIGHT , 0); set_val(PS4_CROSS , 0 ); set_val(PS4_CIRCLE, 0 ); set_val(PS4_SQUARE, 0 ); set_val(PS4_TRIANGLE, 0); set_val(PS4_L1 , 0 ); set_val(PS4_R1 , 0 ); set_val(PS4_L3 , 0 ); set_val(PS4_R3 , 0); set_val(PS4_OPTIONS, 0 ); set_val(PS4_SHARE , 0 ); set_val(PS4_TOUCH , 0 ); set_val(PS4_PS , 0); set_val(XB1_PL1 , 0 ); set_val(XB1_PL2 , 0 ); set_val(XB1_PR1 , 0 ); set_val(XB1_PR2 , 0); }