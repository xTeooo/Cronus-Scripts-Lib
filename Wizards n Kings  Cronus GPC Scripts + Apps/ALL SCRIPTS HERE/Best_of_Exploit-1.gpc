//Best of Exploit

//Binds
define Fire			= PS4_R2;
define Ads			= PS4_L2;
define Pickaxe		= PS4_L3;      
define N_Weapon		= PS4_R1;  
define P_Weapon		= PS4_L1; 
define Reload		= PS4_SQUARE;      
define Jump			= PS4_CROSS;    
define Edit			= PS4_L3;     
define Select		= PS4_R2;
define Confirm		= PS4_L3;
define Reset		= PS4_R1;
define Crouch		= PS4_R3;   
define Ping			= PS4_LEFT;      
define Wall			= PS4_R2;     
define Ramp			= PS4_L2;  
define Build		= PS4_CIRCLE;    
define Floor		= PS4_R1;     
define Roof			= PS4_L1;
define Trap			= PS4_SQUARE;
define Up			= PS4_UP;
define Left			= PS4_LEFT;   
define Down			= PS4_DOWN; 
define Right		= PS4_RIGHT;
define RX			= PS4_RX;
define RY			= PS4_RY;
define LX			= PS4_LX;
define LY			= PS4_LY; 
define aimX			= PS4_RX;
define aimY			= PS4_RY;    
define On			= TRUE;    
define Off			= FALSE;


//Deadzone
int deadZone   = 6; // Deazone in game       


//Aim Assist Linear - Semjases V2
int AimAssist_LINEAR  = FALSE; 
int Strength  = 15; //Examples 13-4, 17-5, 20-5, 10-3
int Increment = 5; 


//Aim Assist Stick Linear - Umbrella V2 
define AimStickLinear  = FALSE; // Help with aiming moving the jyostick linear
define Ads_Assist      = FALSE; // Aim Assist Ads only 
define Fire_Assist     = FALSE; // Aim Assist Fire only
define RADIUS          = 5;    // Radius/strength/value
define STEPS           = 30;   // Step/speed
define STEP_INTERVAL   = 1;    // time


// AIM ASSIST EXPLOIT LINEAR LEXICO - Lexicon V2
int Aim_Exploit_Linear = FALSE; // [(On) or (Off)] = {Aim Assist Linear Toggle On/Off By Default}
int Strength_Linear    = 150; // AIM ASSIST STRENGTH // THE MAXIMUM VALUE IS 150
int Wait_Linear        = 18;  // AIM ASSIST WAIT     //IF YOU SEE THE CHARACTER MOVES A LITTLE, YOU CAN LOWER THE VALUE.
    
    
//Aim Assist Expo                             
int AimAssist_EXPO  = TRUE;
int AimAssist_Strength  = 20; 


//Stick Movement Reducer
int Reducer =  TRUE;  // Reduces power on input (Stick movement)


// DoGz Smart AR 
define DoGzSmartAR     = TRUE;	// [(On) or (Off)] = Master Toggle For DoGz Smart Anti-Recoil 
define TimedRecoil     = FALSE;   // [(On) or (Off)] = Smart Using Time 							(TimedRecoil = Off + RumbleRecoil = Off ==== Legacy Recoil On)
define RumbleRecoil    = FALSE;   // [(On) or (Off)] = Smart Using Rumble Feedback				(TimedRecoil = Off + RumbleRecoil = Off ==== Legacy Recoil On)
define RecoilHipFire   = FALSE;   // [(On) or (Off)] = {Operates on Fire Alone}
define DoGzARVertical  = 20;    // [1 - 100] = Base Power RY Axis [Timed/Rumble] 
define DoGzARPullPower = 49;    // [1 - 100] = Pull Power RY Axis [Timed]  
define DoGzARTime      = 60;    // [10 - 1000] = Pull Time RY Axis [Timed]


//Legacy Anti Recoil
int LegacyARecoil = FALSE;
int ArLegacyRY    = 14;


// Progression Head Shot Assist
define HeadAssist    = FALSE; // Main Toggle ON/OFF
define HeadHipAssist = FALSE;  // Operate on Fire Only [If Off It Will Only Run On ADS & FIRE]

define HeadStep = 2;  // Step Increment Increasing Until Its Reached HeadMax
define HeadMax  = 30; // Max Head Assist Value
  
  
//RapidFire
int RapidFire = FALSE; // ADS+UP 
int Hold = 40;
int Release = 40;


// Instant Edit + Reset 
define InstaEditReset = FALSE; 	// [ON / OFF] Normal Instant Edit/Reset
define EditHold       = FALSE; 	// [ON / OFF] SET On WHEN USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP ) [Off = INSTANT PRESS]
define EditHoldTime   = 100;  	// Time If Using Hold to Edit In game [Setting To Be Matched To In Game Time]


// Fast Reset (One Button)
define InstaFastReset = FALSE;        // Fast Reset [ON / OFF]
define FastReset      = PS4_PS; // FAST RESET BUTTON [ MUST BE BLANK IN GAME / OR SOMETHING HARDLY USED!!! ]


// Quick Edit Assist
define QuickEditAssist = FALSE;   	 // [ON / OFF] Edit Assist
define EditDelay       = 20;     // Edit Assist Hold Delay On Select
define EditAssist      = PS4_RIGHT; // EDIT ASSIST + FAST RESET EDIT BUTTON (Edit In Game [ NO HOLD TIME!!! ])


//Build Tracker
int BuildTracker  =  TRUE;
int BuildSyncTime = 1000;
  
  
//Block Rumble
int BlockRumble     =  TRUE;


// Playstation On PC/Xbox
define PlayStationOnXbox = TRUE; // [ON / OFF] DS4/5 On PC/Xbox [Touchpad Button Fix]


// Hair Triggers
define HairTriggers = TRUE; // Instant Triggers [100%]


//Input Delay Reducer
int DelayBuster = -9;					// LEAVE AS (-0) FOR NORMAL; (-9) for 1ms Delay



//Mods/Values
define LegacyRumble = Off;
define LegacyInvert = Off;
define LegacyARHip  = Off;

int Edit1,Edit2,EditT,Shunt,BuildTrack,BuildCount;
int power,Ypower,Xpower,Power,CountPower,AxisXY;
int display_title = TRUE;
int display_black;      
int count_black;  
int Head;
int TimeValue,OutPut,RumValue,RecoilTimer,BoostAR,AxisCY,AxisLY;
int actual_X, actual_Y, actual_Magnitude, max_Magnitude,time,angle, cos_angle, sin_angle;


//Main
main {

vm_tctrl(DelayBuster);

block_rumble();

	if (PlayStationOnXbox && get_console() == PIO_XB360 && get_controller() == PIO_PS4) { 
	
		swap(PS4_TOUCH,PS4_SHARE);
	}
	
	if (HairTriggers) { 
   		
   		deadzone(PS4_L2,PS4_R2,100,100);
   	}

    if (QuickEditAssist) {
	 	
	 	if (get_ival(EditAssist)) {
			
			EditAssist();
			Edit1 = On;
		}

		if (event_release(EditAssist)) {
			
			EditT = 0;	
			Edit1 = Off;
		}
	}

    if (InstaFastReset) {
    	
    	if (event_press(FastReset)) { 
       	
    		combo_run(FastReset);
    	}
    }	

	if (InstaEditReset) {
        
        if (EditHold) {
        	
        	if (get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
            	Edit1 = On;
            	Edit2 = On;
			}
        }
        	
        else if (event_press(Edit)) {
        			
        		Edit1 = On;
            	Edit2 = On;
		}
		
		if (Edit2) {
            
            if (event_release(Select)) {  
                
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
            }
		}
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
            
            combo_run(InstantReset);
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
        }

        if (event_press(Pickaxe)) {
            
            Edit1 = Off;
            Edit2 = Off;
            BuildTrack = Off;
		}
    }


 	if (BuildTracker) {
        
        if (event_press(Build)) {
            
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                
                BuildTrack = FALSE;
                BuildCount = 0;
            }
            
            if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap)) 
                
                BuildCount = 0;
        }
    }

    if (!BuildTrack) {       
        
        if (AimAssist_EXPO) {   
         
           if (get_val(Ads)> 95 || get_val(Fire)> 95){ 
               combo_run(AimExpo);
           }
        
               if (abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
                   combo_stop(AimExpo);
      }
}

   if (Aim_Exploit_Linear) {

        if (get_ival(Ads)) {

            combo_run(Aim_Linear);
    }
}

if(AimStickLinear) {
  
       actual_X = get_val(RX);
       actual_Y = get_val(RY);
       actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));                                                                                                                                                                                              //CREATED BY EXPLOIT YT
       max_Magnitude = (actual_Magnitude < 100);
  
     if(!(time++ % STEP_INTERVAL)){
       
       angle += STEPS;
}
       angle = angle % 360;
       sin_angle = Polar_Array[angle % 360];
       cos_angle = Polar_Array[(angle + 270) % 360];                   
       cos_angle = (cos_angle * RADIUS) / 100;
       sin_angle = (sin_angle * RADIUS) / 100;
  
  if((Ads_Assist && get_val(Ads)) || (Fire_Assist && get_val(Fire))){
 
    if(actual_Magnitude <= RADIUS){
  
       sin_angle -= actual_Y;
       cos_angle -= actual_X;
       }else {
       sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
       cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
}
  
       set_val(RX, clamp(actual_X + cos_angle, -100, 100));
       set_val(RY, clamp(actual_Y + sin_angle, -100, 100));
      }
   } 

        
     if (AimAssist_LINEAR) {
	 
	    if (event_press(Ads)) { 
	    	
	    	Power = On;
}
	    
	    else if (!get_ival(Ads) && event_press(Fire)) {
	    	
	    	Power = On;
}
	    
	    if (get_ival(Ads) || get_ival(Fire)) {
	    	
	    	AxisXY = isqrt(abs(get_ival(aimX)) * abs(get_ival(aimX)) + abs(get_ival(aimY)) * abs(get_ival(aimY)));
	    	
	    	if (AssistProfile == 1)
	    		
	    		AimAssist(Strength,Increment);
	    		
         } else {
	    	
	    	CountPower = 0;
	    	power = Off;
        }
}
    
    if (HeadAssist) {
	        
	        if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire)) {
	        
	        	if (abs(get_ival(aimY)) < HeadMax) { 
	        		
	        		Head += HeadStep;
	        		combo_run(HeadAssist);
	        	}	
	        }
	        
	        if (!get_ival(Fire)) Head = 0;
	        	
	        if (Head >= HeadMax) combo_stop(HeadAssist);
	    }
	    
	    if (DoGzSmartAR) {
	    
	        if (get_ival(Ads) >= 95 && get_ival(Fire) || (RecoilHipFire && get_ival(Fire))) {
	        
            	TimeValue += get_rtime();
            	
            	if (TimeValue > 30) { 
            		
            		AxisLY = get_lval(aimY);
            		AxisCY = get_ival(aimY);
            	}
            	
            	if (abs(AxisCY) != abs(AxisLY)) BoostAR = ((AxisCY - AxisLY) * 4);
            	
            	if ((BoostAR != 0) && (TimeValue > 40)) {
            	
            		BoostAR = 0;
            		TimeValue = 0;
            	}
            	
            	if (RumbleRecoil) {
            	    
            	    if (get_rumble(RUMBLE_A)) {
                    
            	    	RumValue = get_rumble(RUMBLE_A) / 3;
            	    	
            	    } else {
	        	    	
	        	    	RumValue = 0;	
	        	    }
	        	}    
	        
            	if (TimedRecoil) {
            	   
            	   RecoilTimer += get_rtime();
            	   
            	   if (RecoilTimer > DoGzARTime) {
                    
            	    	RumValue = DoGzARPullPower;
            	    	RecoilTimer = 0;
            	    
            	    } else {
	        	    	
	        	    	RumValue = 0;	
	        	    }
	        	} 
	        	
	        	OutPut = (DoGzARVertical + RumValue + BoostAR);
	        	Set_Val(aimY,OutPut);
	        }
	    
	    	if (!get_ival(Fire)) {
	    		
	    		RecoilTimer = 0;
	    		TimeValue = 0;
	    		BoostAR = 0;
        	} 	
	    }
    

       
   if (LegacyARecoil){        
                    AR_Value = ArLegacyRY;  

                if ((((!LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire))) || 
                     ((!LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire))) {

                    LegacyAR();
                }
                    else if ((((LegacyRumble) && (LegacyARHip)) && (get_ival(Ads) || get_ival(Fire)) && get_rumble(RUMBLE_A)) || 
                              ((LegacyRumble) && (!LegacyARHip) && get_ival(Ads) && get_ival(Fire) && get_rumble(RUMBLE_A))) {

                            LegacyAR();
                    }
            }
       
       
     if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
            set_val (Shunt,Off);
         }
     }
   }
 
//Combos 
combo Aim_Linear {

    set_val(LX,inv(Strength_Linear));
    wait(Wait_Linear);
    set_val(LX,Strength_Linear);
    wait(Wait_Linear);
}
combo Rapid_Fire {
    
    set_val(Fire,100); 
    wait(Hold);        
    set_val(Fire,0);   
    wait(Release);    
}

combo HeadAssist{

	set_val(aimY,inv(Head) + get_val(aimY));
}

combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(10)
    combo_run(Confirm);
}

combo AimExpo{          
     
     set_val(10, (AimAssist_Strength)); wait(10)
     set_val(9, (AimAssist_Strength)); wait(10)
     set_val(10, AimAssist_Strength * -1); wait(10)
     set_val(9, AimAssist_Strength * -1); wait(10)
}



//Functions
int AR_Value;
function LegacyAR () {
    
    if(LegacyInvert) {
        set_Val(RY,AR_Value * -1);
    }
        else {    
            set_Val(RY,AR_Value);
        }
}

function EditAssist () {

    EditT += get_rtime();
        
        if (get_ival(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
           		Press(Select);
        }
}

function Press (Button) {

    if (get_ival(Button))
        
   		return;
            
            set_val(Button,100);
}

int AssistProfile = 1; 
function AimAssist (Strength,Step) {

	if (Power) {
		
		Ypower = Strength;
		Xpower = Strength * -1;
		Increment = Step;
		Power = Off;
	}
	
	if (!power) {
	
		Xpower += Increment;
		Ypower -= Increment;
	
	} else {
		
		Xpower -= Increment;
		Ypower += Increment;
	}
	
	CountPower ++;
	
	if (CountPower >= (Strength / Increment)) {
		
		power = !power;
		CountPower = 0;
	}	
	
	if (AxisXY > deadZone) {
	
		if (Reducer) {
		
			set_Val(aimY,(Ypower - Strength / 2));
			set_Val(aimX,(Xpower - Strength / 2 * -1));
		
		} else {
		
			set_val(aimY,(Ypower - Strength / 2) + get_ival(aimY));
			set_val(aimX,(Xpower - Strength / 2 * -1) + get_ival(aimX));	
		}
		
	} else {
		
		if (Reducer) {
				
			set_Val(aimY,(Ypower - Strength / 2));
			set_Val(aimX,(Xpower - Strength / 2 * -1));
			
		} else {
			
			set_val(aimY,(Ypower - Strength / 2));
			set_val(aimX,(Xpower - Strength / 2 * -1));
		}
	}
}


function set_Val(Input,Output) {

	set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
    return; 
}

function Set_Val(Input,Output) {
	
	set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
	
	return;
}

const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};//CREATED BY EXPLOIT YT
 ����������������