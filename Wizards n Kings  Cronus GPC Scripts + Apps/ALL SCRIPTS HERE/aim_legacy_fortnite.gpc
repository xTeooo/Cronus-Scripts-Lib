// GPC Online Library
// aim_legacy_fortnite.gpc

/*
  
 ███████╗██╗░░██╗██████╗░██╗░░░░░░█████╗░██╗████████╗  ██╗░░░██╗████████╗
 ██╔════╝╚██╗██╔╝██╔══██╗██║░░░░░██╔══██╗██║╚══██╔══╝  ╚██╗░██╔╝╚══██╔══╝
 █████╗░░░╚███╔╝░██████╔╝██║░░░░░██║░░██║██║░░░██║░░░  ░╚████╔╝░░░░██║░░░
 ██╔══╝░░░██╔██╗░██╔═══╝░██║░░░░░██║░░██║██║░░░██║░░░  ░░╚██╔╝░░░░░██║░░░
 ███████╗██╔╝╚██╗██║░░░░░███████╗╚█████╔╝██║░░░██║░░░  ░░░██║░░░░░░██║░░░
 ╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚══════╝░╚════╝░╚═╝░░░╚═╝░░░  ░░░╚═╝░░░░░░╚═╝░░░
                                 
 
  ________  ______  _______  ________ __    __ ______ ________ ________  
 |        \/      \|       \|        \  \  |  \      \        \        \ 
 | ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦¦¦¦¦¦\\¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦\¦¦¦¦¦¦\¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ 
 | ¦¦__   | ¦¦  | ¦¦ ¦¦__| ¦¦  | ¦¦  | ¦¦¦\| ¦¦ | ¦¦    | ¦¦  | ¦¦__     
 | ¦¦  \  | ¦¦  | ¦¦ ¦¦    ¦¦  | ¦¦  | ¦¦¦¦\ ¦¦ | ¦¦    | ¦¦  | ¦¦  \    
 | ¦¦¦¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦\  | ¦¦  | ¦¦\¦¦ ¦¦ | ¦¦    | ¦¦  | ¦¦¦¦¦    
 | ¦¦     | ¦¦__/ ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦ \¦¦¦¦_| ¦¦_   | ¦¦  | ¦¦_____ 
 | ¦¦      \¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦  \¦¦¦   ¦¦ \  | ¦¦  | ¦¦     \ 
  \¦¦       \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦   \¦¦   \¦¦\¦¦¦¦¦¦   \¦¦   \¦¦¦¦¦¦¦¦ 
                              
 
 ///////////////////////////////////////////////////////////////////////////////////////////////
 //FOLLOW ME ON MY YOUTUBE CHANNEL: https://www.youtube.com/channel/UCLPFWoE8Vngh4wuuwV4ItdQ  //
 ///////////////////////////////////////////////////////////////////////////////////////////////

   (Linear + Exponential) //Set Look Stick Deadzone to 0.9 - 0.12
   
   ˜ ”*°•.˜”*°• 𝐿𝐸𝒢𝒜𝒞𝒴 𝒱.𝟣 •°*”˜.•°*”˜
  
  ///////////////MODS///////////////
  // -Aim Assist Legacy Exploit   //
  // -Fire Assist Legacy Exploit  //
  // -Anti-Recoil                 //
  // -DropShot                    //    
  // -RapidFire                   //   
  // -GhostPeek                   //
  // -PumpSmg                     //
  // -BuildTracker                // 
  // -BlockRumble                 //   
  //////////////////////////////////
 
 
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| INGLISH ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

//*****************!!!!!!PLEASE READ CAREFULLY THE INSTRUCTIONS ON HOW THE MENU WORKS!!!!!!********************************************************************************
//*****************!!!!!!************************************************************!!!!!!********************************************************************************
              
!!!!!!!!!!!!!!!!!!!!!!!!!! // MENU ON = (L2 / LT + OPTIONS / MENU) !!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!
!!!PRESS THE TRIANGLE TO EXIT THE MENUS AT ANY TIME OR IT WILL TURN OFF ONLY AFTER 25 SECONDS !!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// (MENU 1 VALUES AND SCHEDULES)
// PRESS LEFT TO SWITCH TO PREVIOUS MODE (-).
// PRESS RIGHT TO SWITCH TO THE NEXT MOD (+).
// WHILE IN THE MENUS, PRESS UP OR DOWN TO CHANGE THE VALUE / TIME OR HOLD TO QUICK SCROLL OR CHANGE MODS ON / OFF.

// MENU 2 = PRESS XBOX / RS PS4 / R3 TO CHANGE MENUS WHILE IN MENU MODE.
// PRESS LEFT TO SWITCH TO PREVIOUS MODE (-).
// PRESS RIGHT TO SWITCH TO THE NEXT MOD (+).
// WHILE IN THE MENUS, PRESS UP OR DOWN // ACTIVATE OR DEACTIVATE THE MODS.
       

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ESPAÑOL |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

// ***************** !!!!!! POR FAVOR LEA DETENIDAMENTE LAS INSTRUCCIONES SOBRE CÓMO FUNCIONA EL MENÚ !!!!!! *****************************************************************
// ***************** !!!!!! ************************************************************************* !!!!!! *****************************************************************
              
!!!!!!!!!!!!!!!!!!!!!!!!! // MENU ON = (L2 / LT + OPTIONS / MENU) !!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
¡¡¡PRESIONE EL TRIÁNGULO PARA SALIR DE LOS MENÚS EN CUALQUIER MOMENTO O SE APAGARÁ SOLO DESPUÉS DE 25 SEGUNDOS !!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// (MENÚ 1 VALORES Y HORARIOS)
// PULSE IZQUIERDA PARA CAMBIAR AL MODO ANTERIOR (-).
// PULSE DERECHA PARA CAMBIAR AL SIGUIENTE MOD (+).
// MIENTRAS ESTÉ EN LOS MENÚS, PULSE HACIA ARRIBA O HACIA ABAJO PARA CAMBIAR EL VALOR / HORA O MANTENGA PRESIONADO PARA DESPLAZAR RÁPIDAMENTE O CAMBIAR MODS ENCENDIDO / APAGADO.

// MENÚ 2 = PRESIONE XBOX/RS PS4/R3 PARA CAMBIAR MENÚS MIENTRAS ESTÁ EN MODO MENÚ.
// PULSE IZQUIERDA PARA CAMBIAR AL MODO ANTERIOR (-).
// PULSE DERECHA PARA CAMBIAR AL SIGUIENTE MOD (+).
// MIENTRAS ESTÉ EN LOS MENÚS, PULSE HACIA ARRIBA O HACIA ABAJO// ACTIVAR O DESACTIVAR LOS MODS.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
               ON-OFF

// DropShot   = LT/L2 & RS/R3 
// GhostPeek  = LT/L2 & DOWN 
// RapidFire  = LT/L2 & UP

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*

*/
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","Exploit YT","LEGACY V1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {""  , "Legacy Aim Assist"  , "ProgressionRecoil" , "    Drop Shot" , "   Rapid Fire"  , "    Ghost Peek"  , "     Pump SMG"  , "   Build Track"  , "   Block Rumble"  , "LED Rainbow Flow" };
const string ModValue [] = {""   , "Legacy RX Assist"  , "Legacy RY Assist"  , "   Legacy Wait"  , "Legy+BattsRelease"  , "Prog AR RY Start"  , "Prog AR RY Finish"  , "  Drop Shot Wait"  , " Rapid Fire Hold"  , " Rapid Fire Wait"  , "Ghost Peek Wait"  , " Pump Hold Time"  , "BuildTrackSynTime" , " LED Brightness" };
const int16 ModDigitMin [] = {  0  , 1  , 1  , 10  , 1  , 1  , 1  , 40  , 30  , 30  , 50  , 20  , 1000  , 1 };
const int16 ModDigitMax [] = {  0  , 40  , 40  , 150  , 80  , 100  , 100  , 1500  , 1000  , 1000  , 250  , 250  , 9000  , 50 };

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const string DropShotL   = "  Drop Shot Mod";
const string FireModL    = " Master Fire Mod";

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

//English= Change the definitions as you have the settings in the game.
//Español= Cambia las definiciones como tengas la configuración en el juego.

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CIRCLE;
define Crouch   = PS4_CROSS;
define Ping     = PS4_RIGHT;
define Edit     = PS4_L3;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;
define Build    = PS4_CIRCLE;
define Switch   = PS4_LEFT;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Roof     = PS4_L1;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define GhostPeekHold  = PS4_L2;
define GhostPeekPress = PS4_DOWN;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define FireModHold     = PS4_L2;
define FireModPress    = PS4_UP;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RecoilHoldOnFly = PS4_CROSS;
define RecoilUpPress   = PS4_UP;
define RecoilDownPress = PS4_DOWN;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_R3;
define FindSlotHold    = PS4_CROSS;
define FindSlotPress   = PS4_LEFT;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 9;
define IndexMinValues   = 1;
define IndexMaxValues   = 13;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int LedDec,Rgb,LedInc,Colour[3];
int ToggleT,ToggleTime,ToggleName,Modled,DropShotMod,FireMod,PumpSmgMod;
int BuildTrack,BuildCount;
int PumpSwap,Bumper;
int DoGzARVal,DoGzProgressionV2,DoGzARPos = 1;
int Saver,Ms,Sec,Min,ScreenTime;
int A1T,A2T,B1T,B2T,X1T,X2T,Y1T,Y2T,U1T,U2T,D1T,D2T,L1T,L2T,R1T,R2T,M1T,M2T,Symbol;
int A1 = 4,A2 = 30,B1 = 60,B2 = 15,X1 = 36,X2 = 1,Y1 = 50,Y2 = 5,U1 = 40,U2 = 9:
int D1 = 49,D2 = 7,L1 = 33,L2 = 63,R1 = 18,R2 = 22,M1 = 45,M2 = 55:

define ScreenSaver  =  On;
define StandardAHip = Off;
define ProgARInvert = Off;
define ProgARHip    = Off;
define RapidFireHip = Off;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int N_DiV 	      = 19;	
int LegacyAARX    = 30;
int LegacyAARY    = 30;
int LegacyAASWait = 10;
int LegacyBattRel = 20;
int ArProgStart   = 15;
int ArProgFinish  = 20;
int RapidFireHold = 30;
int RapidFireWait = 30;
int GhostPeekWait = 125;
int PumpSmgHold   = 30;
int BuildSyncTime = 4000;
int LedBrightness = 10;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

//////////////////////////////////INGLISH///////////////////////////////////////////////
//SEVERAL OF THE MODS COME DEACTIVATED BY DEFAULT.                                    //
//FOR PEOPLE WHO DO NOT KNOW HOW TO CONFIGURE IT, I HAVE LEFT THE MOST ESSENTIAL ONES.//
//IN CASE YOU WANT TO HAVE THE MODS ACTIVATED, YOU MUST SWITCH IT TO ON.              //
////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////ESPAÑOL/////////////////////////////////////////
//VARIOS DE LOS MODS VIENEN POR DEFECTO DESACTIVADOS.                          // 
//PARA LA GENTE QUE NO SABE CONFIGURARLO HE DEJADO ACTIVADO LOS MAS ESENCIALES.// 
//EN CASO DE QUE QUIERA TENER LOS MODS ACTIVADOS DEBE CAMBIARLO EN On.         //
/////////////////////////////////////////////////////////////////////////////////

//INGLISH//
// ON = MOD ON //
// OFF = MOD OFF //

//ESPAÑOL//
// ON = MOD ACTIVADO     //
// OFF = MOD DESACTIVADO //
//   |             |     // 
//   |             |     //
//   |             |     //
//   V             V     //

int ModSwitch;
int LegacyFire      =  On;
int LegacyAssist    =  On;
int ProgressionAR   =  On;
int RapidFire       =  On;
int GhostPeek       =  On;
int PumpSmg         = Off;
int BuildTracker    =  On;
int BlockRumble     =  On;
int LEDRainbowFlow  =  On;
int DropShot_AntiBloom  = TRUE;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    combo_run(Boot);
    LedInc = 1
    Colour = 150;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {

    if (BlockRumble) {
        block_rumble();
    }

    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
                    BuildCount = Off;
        }
    }

   
    }

    if (get_ival(FireModHold) && event_press(FireModPress)) {
        Shunt = FireModPress;
        FireMod = !FireMod;
        ToggleName = On;
        Toggle(FireMod,FireModL[0]);
    }

    if (!BuildTrack) { 

    if(LegacyFire) { 
                if(get_val(Fire)){  
                   combo_run(TrackFire);}  
                       if(get_val(RX)<-38  
                                ||get_val(RX)> 37){  
                                      combo_stop(TrackFire);
                      }
                }
    
    
    if (LegacyAssist){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= LegacyBattRel && abs(get_ival(RY)) <= LegacyBattRel) {
                
                    combo_run(Legacy);
                }
            }
                    else {
                        combo_stop(Legacy);
                    }
    if(DropShot_AntiBloom){
    if(get_val(Ads) && get_val(Fire)) {  
        combo_run(AntiBloom);
 }
 }

    
 }
        }
   combo AntiBloom {
set_val(Crouch, 100);
wait(15);
set_val(Crouch,0);
wait(25);
}         
    
    }

    if (!FireMod) {
    
        if ((RapidFire && RapidFireHip && get_ival(Ads) && get_ival(Fire)) || (RapidFire && !RapidFireHip && get_ival(Fire))) {
            combo_run(RapidFire);
        }    
            else {
                combo_stop(RapidFire);
            }

    }
    
        if (GhostPeek && get_ival(GhostPeekHold) && get_ival(GhostPeekPress)) {
            BlockButton(GhostPeekPress);
            combo_run(GhostPeek);
        }

    if (!PumpSmgMod) {
        
        if (PumpSmg) {
            if (event_press(Reload)) {
                PumpSwap = On;
            }
    
                if (PumpSwap) {
                    if (event_release(Fire)) {
                        Bumper = !Bumper;    
                        
                        if (Bumper){
                            combo_run(LeftBumper);
                        }
                            else {
                                combo_run(RightBumper);  
                            }
                    }
                    
                    if (event_press(Edit) || event_press(Build) || get_ival(N_Weapon) && get_ival(P_Weapon)) {
                        PumpSwap = Off;
                    }        
                }
        }
    }

            if (ProgressionAR){        

                if (((ProgARHip) && get_ival(Fire)) || ((!ProgARHip) && get_ival(Ads) && get_ival(Fire))) {
                    DoGzProgressionV2 = On;
                    DoGzProgressionV2();
                }

                    if (event_release(Ads) || event_release(Fire)) {
                        DoGzARVal = ArProgStart;
                        DoGzProgressionV2 = Off;
                        DoGzARPos = On;
                    }

            }

            if ((get_ival(RecoilHoldOnFly)) && ((ProgressionAR))) { 

                if (event_press(RecoilDownPress)) {
                    if (ProgressionAR) 
                        ArProgFinish += 1;

                    combo_run(Rumble);
                }

                if (event_press(RecoilUpPress)) {
                    if (ProgressionAR) 
                        ArProgFinish -= 1;

                    combo_run(Rumble);
                            }

                    if ((ProgressionAR) && (ArProgFinish < ArProgStart + 5 || ArProgFinish > 98)) {
                        DoGzARVal = ArProgStart;
                        DoGzProgressionV2 = Off;
                        DoGzARPos = On;
                        ArProgFinish = ArProgStart + 12;
                     }    

                set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
            }
    }

	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],1,IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	 Saver (); 
	   } 

    if (!MainMenu) { 
        LedFlow();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime) {
        TimeToggle();
    }

    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo TrackFire {             
set_val(RY, N_DiV);	
wait(10);		   		
set_val(RY, -18);  
wait(10);		   		
set_val(RX, 18);   	
wait(10);		 		
set_val(RX, -18); 	
wait(10);		 		
set_val(RY, 18); 	
wait(10);				
set_val(RY, -18); 	
wait(10);		 		
set_val(RX, 18); 	
wait(10);		 		
set_val(RX, -18); 	
wait(10);
}

combo Legacy {
    
    set_val(RY,LegacyAARY * -1);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX);
    wait(LegacyAASWait);
    set_val(RY,LegacyAARY);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX * -1);
    wait(LegacyAASWait);
}

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(DropShotWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo GhostPeek {
    
    set_val(Crouch,100);
    wait(45);
    set_val(Crouch,0);
    wait(65);
    set_val(Fire,100);
    wait(15); 
    wait(10);
    set_val(Crouch,100);
    wait(15);
    set_val(Crouch,0); 
    wait(GhostPeekWait);
}

combo LeftBumper {

    wait(50);
    set_val(P_Weapon,100);
    wait(PumpSmgHold);
}    
    
combo RightBumper {
 
    wait(50);
    set_val(N_Weapon,100);
    wait(PumpSmgHold);
    PumpSwap = Off;
}    


combo Rumble {
    
    if (event_press(RecoilUpPress))
        set_rumble(RUMBLE_A,35);
        
        else if (event_press(RecoilDownPress))
            set_rumble(RUMBLE_B,70);
    
    wait(250);
    reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,70);
    }    
        else {
            set_rgb(0,255,0);
            set_rumble(RUMBLE_A,35);
        }
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        set_rgb(255,0,0);
    
        else
            set_rgb(0,255,0);

    reset_rumble();
    reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function DoGzProgressionV2() {
    
    if (DoGzProgressionV2) {
        if (DoGzARPos) {
            DoGzARVal += 1;
        }
            else {
                DoGzARVal -= 1;
            }

        if (DoGzARPos && DoGzARVal == ArProgFinish) 
            DoGzARPos = Off;

            if (!DoGzARPos && DoGzARVal == ArProgStart)
                DoGzARPos = On;

                    if(ProgARInvert) {
                        Set_Val(RY,DoGzARVal * -1);
                    }
                        else {
                            Set_Val(RY,DoGzARVal);
                        }
    }
}

function Toggle(ModT,ModP) {
    
    Modled = ModT;
    ToggleT = 0;
    ToggleTime = On;
    combo_run(VibrateBlink);
    
    if (ToggleName) {
        Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            printf(36,38,0,1,MiscString[7]);    
        }
            else {
                printf(41,38,0,1,MiscString[6]);
            }
                ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
        if (ToggleT >= 3500) {
            cls_oled(0);
            ToggleTime = Off;
            ToggleT = 0;
    }
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

        putc_oled(1,CROSS);
        puts_oled(5,Symbol[1],0,1,1);
        puts_oled(35,Symbol[5],0,1,1);
    
        putc_oled(1,CIRCLE);
        puts_oled(14,Symbol[2],0,1,1);
        puts_oled(44,Symbol[6],0,1,1);
    
        putc_oled(1,SQUARE);
        puts_oled(23,Symbol[3],0,1,1);    
        puts_oled(53,Symbol[7],0,1,1);
    
        putc_oled(1,TRIANGLE);
        puts_oled(37,Symbol[4],0,1,1);
        puts_oled(61,Symbol[8],0,1,1);
    
        putc_oled(1,UP);
        puts_oled(49,Symbol[9],0,1,1);
        puts_oled(95,Symbol[11],0,1,1);
    
        putc_oled(1,DOWN);
        puts_oled(30,Symbol[10],0,1,1);
        puts_oled(82,Symbol[12],0,1,1);
    
        putc_oled(1,LEFT);
        puts_oled(67,Symbol[13],0,1,1);
        puts_oled(101,Symbol[16],0,1,1);    
    
        putc_oled(1,RIGHT);
        puts_oled(76,Symbol[14],0,1,1);
        puts_oled(110,Symbol[17],0,1,1);
    
        putc_oled(1,MENU);
        puts_oled(85,Symbol[15],0,1,1);
        puts_oled(119,Symbol[18],0,1,1);
    
    if (Symbol[1] == 0) A1T = 1; if (A1T == 1) Symbol[1] +=2;
    if (Symbol[1] == 64) A1T = 0; if (A1T == 0) Symbol[1] --;
    if (Symbol[2] == 0) B1T = 1; if (B1T == 1) Symbol[2] ++;
    if (Symbol[2] == 64) B1T = 0; if (B1T == 0) Symbol[2] --;
    if (Symbol[3] == 0) X1T = 1; if (X1T == 1) Symbol[3] ++;
    if (Symbol[3] == 64) X1T = 0; if (X1T == 0) Symbol[3] -=2;
    if (Symbol[4] == 0) Y1T = 1; if (Y1T == 1) Symbol[4] ++;
    if (Symbol[4] == 64) Y1T = 0; if (Y1T == 0) Symbol[4] --;
    if (Symbol[5] == 0) A2T = 1; if (A2T == 1) Symbol[5] ++;
    if (Symbol[5] == 64) A2T = 0; if (A2T == 0) Symbol[5] --;
    if (Symbol[6] == 0) B2T = 1; if (B2T == 1) Symbol[6] ++;
    if (Symbol[6] == 64) B2T = 0; if (B2T == 0) Symbol[6] --;
    if (Symbol[7] == 0) X2T = 1; if (X2T == 1) Symbol[7] ++;
    if (Symbol[7] == 64) X2T = 0; if (X2T == 0) Symbol[7] --;
    if (Symbol[8] == 0) Y2T = 1; if (Y2T == 1) Symbol[8] ++;
    if (Symbol[8] == 64) Y2T = 0; if (Y2T == 0) Symbol[8] --;
    if (Symbol[9] == 0) U1T = 1; if (U1T == 1) Symbol[9] ++;
    if (Symbol[9] == 64) U1T = 0; if (U1T == 0) Symbol[9] --;
    if (Symbol[10] == 0) D1T = 1; if (D1T == 1) Symbol[10] ++;
    if (Symbol[10] == 64) D1T = 0; if (D1T == 0) Symbol[10] --;
    if (Symbol[11] == 0) U2T = 1; if (U2T == 1) Symbol[11] ++;
    if (Symbol[11] == 64) U2T = 0; if (U2T == 0) Symbol[11] --;
    if (Symbol[12] == 0) D2T = 1; if (D2T == 1) Symbol[12] ++;
    if (Symbol[12] == 64) D2T = 0; if (D2T == 0) Symbol[12] --;
    if (Symbol[13] == 0) L1T = 1; if (L1T == 1) Symbol[13] ++;
    if (Symbol[13] == 64) L1T = 0; if (L1T == 0) Symbol[13] --;
    if (Symbol[14] == 0) R1T = 1; if (R1T == 1) Symbol[14] ++;
    if (Symbol[14] == 64) R1T = 0; if (R1T == 0) Symbol[14] --;
    if (Symbol[15] == 0) M1T = 1; if (M1T == 1) Symbol[15] ++;
    if (Symbol[15] == 64) M1T = 0; if (M1T == 0) Symbol[15] -=2;
    if (Symbol[16] == 0) L2T = 1; if (L2T == 1) Symbol[16] ++;
    if (Symbol[16] == 64) L2T = 0; if (L2T == 0) Symbol[16] -=2;
    if (Symbol[17] == 0) R2T = 1; if (R2T == 1) Symbol[17] ++;    
    if (Symbol[17] == 64) R2T = 0; if (R2T == 0) Symbol[17] --;
    if (Symbol[18] == 0) M2T = 1; if (M2T == 1) Symbol[18] ++;
    if (Symbol[18] == 64) M2T = 0; if (M2T == 0) Symbol[18] --;
    }
    
    if (!Saver)
        cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;

            if (ModVal >= ModValMax){ 
                ModMonitor(ModValLbl);
                    return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;

				if (ModVal <= ModValMin){
					ModMonitor(ModValLbl);
						return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
 
function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
    }
    if (Mon == ModToggle[2]) {
    }
    if (Mon == ModToggle[4]) {
    }
} 
   
function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };