/*

██╗                                                                                                                                                                          ██╗
██║                                                                                                                                                                          ██║
██║    █████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗    ██║
██║    ╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝    ██║
██║                                                                                                                                                                          ██║
╚═╝                                                                                                                                                                          ╚═╝
                                                                                                                                                                                
██╗    ████████╗██╗  ██╗███████╗    ██████╗ ███████╗███████╗████████╗    ███████╗███╗   ██╗    ███████╗███████╗███╗   ██╗    ███████╗ ██████╗██████╗ ██╗██████╗ ████████╗    ██╗
██║    ╚══██╔══╝██║  ██║██╔════╝    ██╔══██╗██╔════╝██╔════╝╚══██╔══╝    ██╔════╝████╗  ██║    ╚══███╔╝██╔════╝████╗  ██║    ██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝    ██║
██║       ██║   ███████║█████╗      ██████╔╝█████╗  ███████╗   ██║       █████╗  ██╔██╗ ██║      ███╔╝ █████╗  ██╔██╗ ██║    ███████╗██║     ██████╔╝██║██████╔╝   ██║       ██║
██║       ██║   ██╔══██║██╔══╝      ██╔══██╗██╔══╝  ╚════██║   ██║       ██╔══╝  ██║╚██╗██║     ███╔╝  ██╔══╝  ██║╚██╗██║    ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║       ██║
██║       ██║   ██║  ██║███████╗    ██████╔╝███████╗███████║   ██║       ██║     ██║ ╚████║    ███████╗███████╗██║ ╚████║    ███████║╚██████╗██║  ██║██║██║        ██║       ██║
╚═╝       ╚═╝   ╚═╝  ╚═╝╚══════╝    ╚═════╝ ╚══════╝╚══════╝   ╚═╝       ╚═╝     ╚═╝  ╚═══╝    ╚══════╝╚══════╝╚═╝  ╚═══╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝       ╚═╝
                                                                                                                                                                                
██╗                                                                                                                                                                          ██╗
██║                                                                                                                                                                          ██║
██║    █████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗    ██║
██║    ╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝    ██║
██║                                                                                                                                                                          ██║
╚═╝                                                                                                                                                                          ╚═╝
        --'''''''''--.
     .'      .---.      '.
    /    .-----------.    \
   /        .-----.        \
   |       .-.   .-.       |
   |      /   \ /   \      |
    \    | .-. | .-. |    /
     '-._| | | | | | |_.-'
         | '-' | '-' |
          \___/ \___/
       _.-'  /   \  `-._
     .' _.--|     |--._ '.
     ' _...-|     |-..._ '
            |     |
            '.___.'
      
       
 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
                                             
   _____ _____  _____  _____ ____  _____  _____                                                                   
 |  __ \_   _|/ ____|/ ____/ __ \|  __ \|  __ \ _                                                                
 | |  | || | | (___ | |   | |  | | |__) | |  | (_)                                                               
 | |  | || |  \___ \| |   | |  | |  _  /| |  | |                                                                 
 | |__| || |_ ____) | |___| |__| | | \ \| |__| |_                                                                
 |_____/_____|_____/ \_____\____/|_|  \_\_____/(_) 
                                                                                                                       
                                                                                                                                                                          
██████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████  
                                                                                                                                                                          
                                                                                                                                                                          
                                                                           
                                     
█████╗█████╗█████╗█████╗█████╗█████╗ 
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝ 
                                     
                                     
                                     
██████╗ ██╗███╗   ██╗██████╗ ███████╗
██╔══██╗██║████╗  ██║██╔══██╗██╔════╝
██████╔╝██║██╔██╗ ██║██║  ██║███████╗
██╔══██╗██║██║╚██╗██║██║  ██║╚════██║
██████╔╝██║██║ ╚████║██████╔╝███████║
╚═════╝ ╚═╝╚═╝  ╚═══╝╚═════╝ ╚══════╝
                                     
                                     
                                     
█████╗█████╗█████╗█████╗█████╗█████╗ 
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                       
*/

define Fire = XB1_RT;
define Ads = XB1_LT;
define PickupB = XB1_X;
define N_Weapon = XB1_RB;
define P_Weapon = XB1_LB;
define Pickaxe = XB1_B;
define Jump = XB1_A;
define Crouch = XB1_RS
define Ping = XB1_RIGHT;
define Edit = XB1_Y; 
define Build = XB1_LS;           
define Wall = XB1_RT;
define Floor = XB1_RB;
define Ramp = XB1_LT
define Roof = XB1_LB;
define Select = XB1_RT;
define Confirm = XB1_LT;
define Reset = XB1_RS;

define FastResetB = XB1_RS; // MUST BE SOMETHING YOU DON'T USE IN GAME
define EditAssist = XB1_RS; // 

// | XB1 BINDS: https://cdn.discordapp.com/attachments/883329066013446164/908483667616210955/XB1.png | (COPY + PASTE INTO BROWSER)
// | PS4 BINDS: https://cdn.discordapp.com/attachments/883329066013446164/908483666408275978/PS4.png | (COPY + PASTE INTO BROWSER)

// CHANGE TO UR PLATFORM KEEP ANYTHING AFTER '_' THE SAME
define Up = XB1_UP; //PS4_UP
define Down = XB1_DOWN; //PS4_DOWN
define Left = XB1_LEFT; //PS4_LEFT
define Right = XB1_RIGHT;//PS4_RIGHT
define RX = XB1_RX;   //PS4_RX
define RY = XB1_RY;   //PS4_RY
define LX = XB1_LX;   //PS4_LX
define LY = XB1_LY;   //PS4_LY 

// MENU 
define MenuEnterHold = XB1_LT; //PS4_L2
define MenuEnterPress = XB1_MENU; //PS4_OPTONS
define MenuExitPress = XB1_Y; //PS4_TRIANGLE
define ChangeMenuPress = XB1_RS; //PS4_RS
define FindSlotHold = XB1_A; //PS4_CROSS
define FindSlotPress = XB1_LEFT; //PS4_LEFT

// IGNORE
define PY = POLAR_RY;
define PX = POLAR_RX;
define PS = POLAR_RS;
define On = TRUE;
define Off = FALSE;

/*
   ___  _____    
 .'/,-Y"     "~-.  
 l.Y             ^.           
 /\               _\_  
i            ___/"   "\ 
|          /"   "\   o !   
l         ]     o !__./   
 \ _  _    \.___./    "~\  
  X \/ \            ___./  
 ( \ ___.   _..--~~"   ~`-.  
  ` Z,--   /               \    
    \__.  (   /       ______) 
      \   l  /-----~~" /   
       Y   \          / 
       |    "x______.^ 
       |           \    
       |            \

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
                                             
 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████                                             
                                             
                                             

                                                                     
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                    
                                    
                                    
███╗   ███╗ ██████╗ ██████╗ ███████╗
████╗ ████║██╔═══██╗██╔══██╗██╔════╝
██╔████╔██║██║   ██║██║  ██║███████╗
██║╚██╔╝██║██║   ██║██║  ██║╚════██║
██║ ╚═╝ ██║╚██████╔╝██████╔╝███████║
╚═╝     ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝
                                    
                                    
                                    
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                      
*/
// IGNORE      
int ModSwitch;

// AA 
int AA1 = Off; // NORMAL AA
int PolarAA = On; // POLAR AA 1ST TYPE
int CircularPolarAA = Off; // POLAR AA 2ND TYPE

// CONTROLLER LAYOUTS
int InstantTriggers = Off; // TRIGGER STOPPERS (SLIGHT PRESS = FULL TOUCH)
int Headshot = Off; // WHEN SHOOTING ANALOG STICK GOES UP TO MAKE IT AIM FOR HEAD
int PickupM = Off; // PICKUP MACRO (PRESS USE BUTTON ONCE IT PRESSES 10 TIMES)
int CrouchM = Off; // SPAM CROUCH WHEN FIRE

// PS5 CONTROLLER
int PS5 = Off;

// WEAPONS
int ARecoil = Off; // ANTI-RECOIL LOL
int RapidFire = Off; // PRESS FIRE ONCE, HOLDS DOWN

// EDITING
int QuickEditAssist = Off;
int InstaEditReset = Off;
int InstaFastReset = Off;
int TimedReset = Off;

// EXTRAS
int LessInputDelay = On;
int InstantPickaxe = Off;
int AutoStrafe = Off; // WHEN SHOOTING IT MOVES YOU LEFT OR RIGHT
int BlockRumbles = On; //REDUCES SHAKE TURN ON VIBRATIONS IN GAME
int BuildTrack = On; //CANCELS SHAKE WHEN BUILDING

/*

      .--..--..--..--..--..--.
    .' \  (`._   (_)     _   \
  .'    |  '._)         (_)  |
  \ _.')\      .----..---.   /
  |(_.'  |    /    .-\-.  \  |
  \     0|    |   ( O| O) | o|
   |  _  |  .--.____.'._.-.  |
   \ (_) | o         -` .-`  |
    |    \   |`-._ _ _ _ _\ /
    \    |   |  `. |_||_|   |
    | o  |    \_      \     |     -.   .-.
    |.-.  \     `--..-'   O |     `.`-' .'
  _.'  .' |     `-.-'      /-.__   ' .-'
.' `-.` '.|='=.='=.='=.='=|._/_ `-'.'
`-._  `.  |________/\_____|    `-.'
   .'   ).| '=' '='\/ '=' |
   `._.`  '---------------'
           //___\   //___\
             ||       ||
             ||_.-.   ||_.-.
            (_.--__) (_.--__)
                   
 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
                                             
 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████                                             

                                                                                                                                 
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                  
                                                                  
                                                                  
███████╗███████╗████████╗████████╗██╗███╗   ██╗ ██████╗ ███████╗  
██╔════╝██╔════╝╚══██╔══╝╚══██╔══╝██║████╗  ██║██╔════╝ ██╔════╝  
███████╗█████╗     ██║      ██║   ██║██╔██╗ ██║██║  ███╗███████╗  
╚════██║██╔══╝     ██║      ██║   ██║██║╚██╗██║██║   ██║╚════██║  
███████║███████╗   ██║      ██║   ██║██║ ╚████║╚██████╔╝███████║  
╚══════╝╚══════╝   ╚═╝      ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝  
                                                                  
                                                                  
                                                                  
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝   

if you see this ghosty is better then u at fn :)))
lol

*/
 

// AA1
int AA1_Shake = 13;

// POLAR AA
int PolarAA_Style = PolarAA_Type;
int PolarAA_Speed = 30; // NUMBER OF STEPS OF ROTATION
int PolarAA_BoostPower =  20;  // POWER OF THE BOOST (STRENTGH)
int PolarAA_BoostSpeed =  22; // SPEED OF BOOST
int PolarAA_Deadzone =  10; // DEADZONE TO START IT

define PolarAA_Type = 6; //  [1] = BoostIncline | [2]BoostDecline | [3]BoostProgBoth | [4]BoostProgPower | [5]ProgSpeed | [6]AAWithBoostOff . PUT NUMBER YOU WANT
define BoostIncline   = 1;
define BoostDecline   = 2;
define BoostProgBoth  = 3;
define BoostProgPower = 4;
define BoostProgSpeed = 5;
define AAWithBoostOff = 6;

// INPUT DELAY
define InputDelay = 5; // change this number to whichever u want (look below)

/*	
0 = Default (10ms)
1 = 8ms delay
2 = 6ms delay
3 = 4ms delay
4 = 2ms deley
5 = 1ms delay
*/

// IGNORE FROM HERE 

// HEADSHOT
int HeadshotH = -10;

// AUTO-STRAFE 
int AutoStrafeTime = 100; 

// CrouchM
int CM_Cooldown = 25; 

// ANTI-RECOIL
int ARecoilMOD = 0; 
int ARecoilStrength = 25;
int ARecoilH = 0;

// Instant Pickaxe
int PickaxeHold = 30;

// RAPID-FIRE
int Rfire = 100; 

// BUILD-TRACKER
int BuildSyncTime = 100;

// EDTTING
define EditHold   = On; 
int EditHoldTime = 150;
int EditTime = 900;   // Once Edit Has Been Used Reset Can be (In Game Reset Can Be Used As Reset On One Button For This Length Of Time <--)
int EditDelay = 30;

//IGNORE (DO NOT TOUCH)
init
{
    combo_run(Boot);
    PolarAA_Radius  = get_pvar(SPVAR_2, 1,30, 10);
    PolarAA_Steps   = get_pvar(SPVAR_3,1,30, 15);
}

/*

   .    _  .     _____________
   |\_|/__/|    /             \
  / / \/ \  \  / Dm Ghosty,say \
 /__|O||O|__ \ \   small guy   /
|/_ \_/\_/ _\ | \  ___________/
| | (____) | ||  |/
\/\___/\__/  // _/
(_/         ||
 |          ||\
  \        //_/ 
   \______//
  __|| __||
 (____(____)

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
                                             
 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████                                             
                                             


█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                    
                                    
                                    
███╗   ███╗ █████╗ ██╗███╗   ██╗    
████╗ ████║██╔══██╗██║████╗  ██║    
██╔████╔██║███████║██║██╔██╗ ██║    
██║╚██╔╝██║██╔══██║██║██║╚██╗██║    
██║ ╚═╝ ██║██║  ██║██║██║ ╚████║    
╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝    
                                    
                                    
                                    
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                
*/

main
{

	if(LessInputDelay)
	{
		VM(InputDelay);  
	}
    if (BlockRumbles) 
    {
		block_rumble();
	}

	if (BuildTrack) 
	{
        
        if (event_press(Build)) 
        {
        	BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) 
        {
        	BuildCount += get_rtime();
        
        	if (event_press(Pickaxe) || BuildCount == BuildSyncTime) 
        	{
            	BuildTrack = Off;
            	BuildCount = Off;
        	}
        
            if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
            { 
                BuildCount = Off;
        	}
         }
       }
       
      if (QuickEditAssist) {
	 	
	 	if (get_ival(EditAssist)) {
			
			EditAssist();
			Edit1 = TRUE;
		}

		if (event_release(EditAssist)) {
			
			EditT = 0;	
			Edit1 = FALSE;
		}
	}

    if (InstaFastReset) {
    	
    	if (event_press(FastResetB)) { 
       	
    		combo_run(FastReset);
    	}
    }	

	if (InstaEditReset) {
        
        if (EditHold) {
        	
        	if (get_ival(Edit) && get_ptime(Edit) > EditHoldTime) {
        
            	Edit1 = TRUE;
            	Edit2 = TRUE;
			}
        }
        	
        else if (event_press(Edit)) {
        			
        		Edit1 = TRUE;
            	Edit2 = TRUE;
		}
		
		if (Edit2) {
            
            if (event_release(Select)) {  
                
                Edit1 = FALSE;
                Edit2 = FALSE;
                BuildTrack = FALSE;
            }
		}
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
            
            combo_run(InstantReset);
            Edit1 = FALSE;
            Edit2 = FALSE;
            BuildTrack = FALSE;
        }

        if (event_press(Pickaxe)) {
            
            Edit1 = FALSE;
            Edit2 = FALSE;
            BuildTrack = FALSE;
		}
    }
	
    	
		
	 
	if (!BuildTrack && !MainMenu && Edit1)
    {
    	if(AA1)
    	{   
			if(get_val(Ads))
			{ 
				combo_run(AA1s);
			} 
			if(event_release(Ads)) 
			{
				combo_stop(AA1s);
			}
		
	 	}
	 
	 
    if(CircularPolarAA)
    {
	                     
	        actual_X = get_val(RX);   
	        actual_Y = get_val(RY); 
	        
	        ActualMagnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
	        MaxMagnitude = (ActualMagnitude < 100);                      
	                                                              
	        if(!(time++ % STEP_INTERVAL))
	        {                                  
	         angle += PolarAA_Steps;                                                 
	        }                                                               
	        angle = angle % 360;                                            
	        SinAngleDrift = Polar_Array[angle % 360];                           
	        CosAngleDrift = Polar_Array[(angle + 270) % 360]; 
	                        
	        if(get_val(Ads))
	        { 
	            if(ActualMagnitude <= PolarAA_Radius)
	            {                                                      
	                SinAngleDrift -= actual_Y;                                                              
	                CosAngleDrift -= actual_X;                                                                 
	            }
	            else 
	            {                                                                                       
	                SinAngleDrift = (SinAngleDrift * (200 - ((abs(actual_Y) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
	                CosAngleDrift = (CosAngleDrift * (200 - ((abs(actual_X) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
	            }                                                  
	            GetShapes(PolarAA_Radius); 
	        } 
	    } 

	if (PolarAA)
    {
		 		if (PolarAA_Style <= 6) {
		        
		            if (get_ival(Ads)) {		
		            	
		            	AxisXY = isqrt(abs(get_ival(RX)) * abs(get_ival(RX)) + abs(get_ival(RY)) * abs(get_ival(RY)));
		            	
		            	Radius = (Power + rBoost);
		            	Angle = Step;
		                Step = (Step + PolarAA_Speed + RY);
		                
		                if (get_ival(Fire) && PolarAA_Style != 6) {
		                
		                	if (PolarAA_Style == BoostIncline) {
		                		
		                		rBoost = PolarAA_BoostPower;
		                	    sBoost = PolarAA_BoostSpeed;
		                	}
		                		
		                	else if (PolarAA_Style == BoostDecline) {
		                		
		                		if (PolarAA_BoostSpeed == PolarAA_Speed) {	
		                			
		                			PolarAA_BoostSpeed = PolarAA_Speed / 2;
		                		}
		                		
		                		if (PolarAA_BoostPower == Power) {	
		                			
		                			PolarAA_BoostPower = Power / 2;
		                		}
		                		
		                		rBoost = inv(PolarAA_BoostPower);
		                		sBoost = inv(PolarAA_BoostSpeed);
		                		
		                	}	        		
		                	
		                	else if (PolarAA_Style >= 3) {
		                		
		                		if (event_press(Fire)) {
		                		
		                			rBoost = PolarAA_BoostPower;
		                			sBoost = PolarAA_BoostSpeed;
		                			DirectionP = On;
		                			DirectionS = On;
		                		}
		                			
		                		if (PolarAA_Style == 3 || PolarAA_Style == 4) {
		                			
		                			if (DirectionP) {
		                			    
		                			    if (rBoost < (Power + PolarAA_BoostPower)) {
		                			    	
		                			    	rBoost++;
		                			    }
		                			    
		                			    if (rBoost >= (Power + PolarAA_BoostPower)) {
		                			    
		                			        DirectionP = Off;
		                			    }
		                			}
		                			
		                			if (!DirectionP) {
		                			
		                			    if (rBoost > (Power - PolarAA_BoostPower)) {
		                			    	
		                			    	rBoost--;
		                			    }	
		                			    
		                			    if (rBoost <= (Power - PolarAA_BoostPower)) {
		                			    
		                			        DirectionP = On;
		                			    }
		                			}
		                		}
		                		
		                		if (PolarAA_Style == 3 || PolarAA_Style == 5) {
		                		
		                			if (DirectionS) {
		                			    
		                			    if (RY < (PolarAA_Speed + PolarAA_BoostSpeed)) {
		                			    	
		                			    	RY++;
		                			    }
		                			    
		                			    if (RY >= (PolarAA_Speed + PolarAA_BoostSpeed)) {
		                			    
		                			        DirectionS = Off;
		                			    }
		                			}
		                		
		                			if (!DirectionS) {
		                			
		                				if (RY > (PolarAA_Speed - PolarAA_BoostSpeed)) {
		                				
		                					RY--;
		                				}	
		                			
		                				if (RY <= (PolarAA_Speed - PolarAA_BoostSpeed)) {
		                			
		                			    	DirectionS = On;
		                				}
		                			}
		                		}
		                	}
		                }
		                	else {
		                
		                		rBoost = Off;
		                		sBoost = Off;
		                	}
		                	
		                if (Step < 0) Step += 360;
		                	
		                	Step = Step % 360;
		                	
		                if (AxisXY < PolarAA_Deadzone) {
	            	    	
	            	    	set_polar(PS,Step,(Radius + AxisXY) * 327);
		        	    }
	   	        	    
		        	 }
		       }
		 
		  }
	
    if(ARecoil)
    {                               
			if(get_val(Ads) && get_val(Fire)) 
			{
				if(ARecoilMOD == 1)
				{
     				combo_run(ARecoilS);
     			}
     		}
	}
   
	if (PickupM)
    {
	    	if (event_press(PickupB)) 
	        {
	        	combo_run(Pickup);
	        }
	            if (event_release(PickupB))
	        { 
	            combo_stop(Pickup);
	        }
	     }       
   
	if (Headshot)
	{
	  	if (get_val(Ads) && get_val(Fire))
	  	{
	  		combo_run(HeadshotS);
	  	}
	  		if (event_release(Fire))
	  		{
	  			combo_stop(HeadshotS);
	  		}
	 
	  }
	  
	if (RapidFire)
	{
			if (get_val(Ads))
			{
				combo_run(RapidFireS);
			}
				if (event_release(Ads))
			{
				combo_stop(RapidFireS);
			}
		}

	if(AutoStrafe)
	{
				if(get_val(Ads) && get_val(Fire) || get_val(Fire))
				{        
					combo_run(AutoStrafeS);
				}
				if(abs(get_val(LX)) > 40 || abs(get_val(LY)) > 40)
				{
					combo_stop(AutoStrafeS);
				}
	
		}
	
	if (CrouchM)
	{
			if (get_val(Ads)) 
			{
				combo_run(CrouchMs);
				set_val(Crouch, 0);
			} 
				else 
			{
				combo_stop(CrouchMs);
			}
	}
   }
   
    if (InstantTriggers)
	{
	 	 deadzone(Ads,Fire,99,99)
	 }
	 
	if (PS5)
	{
	 	swap (PS4_TOUCH,PS4_SHARE);
	}
	 	

	// USELESS
	
    if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress))
    {
		MenuToggle(On, On, On, On, Off);
    }
    
    if (MainMenu)
    {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();
	
   if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress))
        {
            MenuTimeout = Off;
        }

   if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress))
        {
            MenuToggle(Off, Off, Off, Off, Off);
        }

   if (event_press(ChangeMenuPress))
        {

            MenuValues = !MenuValues;
            MenuSwitch = !MenuSwitch;
            ModIndex = On;
            Update = On;
        }
	
   if (MenuValues)
        {

            ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex], ModDigitMin[ModIndex], ModDigitMax[ModIndex], 1, IndexMinValues, IndexMaxValues, ModValue[ModIndex]);
        }

   if (MenuSwitch)
        {

            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex], Off, On, 1, IndexMinSwitches, IndexMaxSwitches, ModToggle[ModIndex]);
        }
        BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}    

    if (!MainMenu && Saver)
    {
        ScreenTime();
        Saver();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress))
    {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime)
    {
        TimeToggle();
    }

    if (Shunt)
    {
        if (event_release(Shunt))
        {
            Shunt = Off;
        }
        else
        {
            set_val(Shunt, Off);
        }
    }
    
 }


/*

          _ _
     _(,_/ \ \____________
     |`. \_@_@   `.     ,'
     |\ \ .        `-,-'
     || |  `-.____,-'
     || /  /
     |/ |  |
`..     /   \
  \\   /    |
  ||  |      \
   \\ /-.    |
   ||/  /_   |
   \(_____)-'_)
   

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
                                             
 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████                                             

 
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                      
                                                      
                                                      
 ██████╗ ██████╗ ███╗   ███╗██████╗  ██████╗ ███████╗ 
██╔════╝██╔═══██╗████╗ ████║██╔══██╗██╔═══██╗██╔════╝ 
██║     ██║   ██║██╔████╔██║██████╔╝██║   ██║███████╗ 
██║     ██║   ██║██║╚██╔╝██║██╔══██╗██║   ██║╚════██║ 
╚██████╗╚██████╔╝██║ ╚═╝ ██║██████╔╝╚██████╔╝███████║ 
 ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═════╝  ╚═════╝ ╚══════╝ 
                                                      
                                                      
                                                      
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                       
*/


combo AA1s 
{          
	set_val(RX, (AA1_Shake)); wait(10)
	set_val(RY, (AA1_Shake)); wait(10)
	set_val(RX, AA1_Shake * -1); wait(10)
	set_val(RY, AA1_Shake * -1); wait(10)
}

combo AutoStrafeS
{	
	set_val(LY,-30);
	wait(AutoStrafeTime);
	set_val(LY, 30);
	wait(AutoStrafeTime);
		if(AutoStrafeTime< 160){AutoStrafeTime = AutoStrafeTime + 10;
	}
		else 
	{
		AutoStrafeTime = 100;
	}
}

combo HeadshotS
{
	set_val(RY,HeadshotH);
	wait(100);
	set_val(RY, 0);
	wait(100);
	
}

combo CrouchMs 
{
	set_val(Crouch,100);
	wait(CM_Cooldown);
	set_val(Crouch,100);
	wait(CM_Cooldown);
	wait(200);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(20)
    set_val(Reset,100);        
    wait(20);
    combo_run(Confirm);
}

combo Confirm 
{
    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo PickaxeE 
{
    
    set_val(Pickaxe,100);
    wait(PickaxeHold + 10);
    set_val(Pickaxe,0);
    wait(20);
    set_val(Pickaxe,100);
    wait(PickaxeHold + 10);
    FastE = On;
}

combo RapidFireS
{
	set_val(Fire, 100)
	wait(75);
	set_val(Fire, 0);
	wait(100);
}

combo InstantReset 
{
    wait(20)
    combo_run(Confirm);
}


combo Pickup 
{
    set_val(PickupB,200); 
    wait(5);
    set_val(PickupB,200); 
    wait(5);
    set_val(PickupB,0);
    wait(1);
}

combo Boot
{

    wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
        cls_oled(0);
        printf(5, 10, 0, 1, Misc[3]);
        printf(5, 25, 0, 1, Misc[4]);
        printf(18, 45, 0, 1, Misc[5]);
        NumX = 32; NumY = 15; NumS = 0;
        FindDigit(get_slot(), DigitValue(get_slot()));
        Slot = Off;
    }

    wait(20000);
    cls_oled(0);
    Clear = On;
    Saver = On;
    ScreenTime = On;
}

combo ARecoilS 
{
 ARecoilV = get_val(RX) + ARecoilStrength;
 if(ARecoilV > 100)
  ARecoilV = 100;
 if(abs(get_val(RY)) < abs(ARecoilStrength) + 5)
  set_val(RY,ARecoilV);
 ARecoilH = get_val(RX) + ARecoilH;
 if(ARecoilH > 100)
  ARecoilH = 100;
 if(abs(get_val(RX)) < abs(ARecoilH) + 5)
  set_val(RY,ARecoilH);
}

combo VibrateBlink
{
    
    if (Modled) {
        set_rgb(255, 0, 0);
        set_rumble(RUMBLE_B, 70);
    }    
        else {
        set_rgb(0, 255, 0);
        set_rumble(RUMBLE_A, 35);
    }
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        set_rgb(255,0,0);
    
        else
            set_rgb(0,255,0);

    reset_rumble();
    reset_leds();
}

/*


             ,;) .';;;;',
 ;;,,_,-.-.,;;'_,|I\;;;/),,_
  `';;/:|:);{ ;;;|| \;/ /;;;\__
      L;/-';/ \;;\',/;\/;;;.') \
      .:`''` - \;;'.__/;;;/  . _'-._ 
    .'/   \     \;;;;;;/.'_7:.  '). \_
  .''/     | '._ );}{;//.'    '-:  '.,L
.'. /       \  ( |;;;/_/         \._./;\   _,
 . /        |\ ( /;;/_/             ';;;\,;;_,
. /         )__(/;;/_/                (;;'''''
 /        _;:':;;;;:';-._             );
/        /   \  `'`   --.'-._         \/
       .'     '.  ,'         '-,
      /    /   r--,..__       '.\
    .'    '  .'        '--._     ]
    (     :.(;>        _ .' '- ;/
    |      /:;(    ,_.';(   __.'
     '- -'"|;:/    (;;;;-'--'
           |;/      ;;(
           ''      /;;|
                   \;;|
                    \/
            
 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|


 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████  

                                                                                                                                                         
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                              
                                                                              
                                                                              
███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗    
██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝    
█████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗    
██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║    
██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║    
╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝    
                                                                              
                                                                              
                                                                              
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                                                                      
*/

function GetShapes(f_var) 
{     
   
    if(!SpiralPosition1)                                
    {
        InnerSpiral -= 1;
        if(InnerSpiral < MinRadius)
            SpiralPosition1 = TRUE;
    }
    else
    {
        InnerSpiral += 1;
        if(InnerSpiral > f_var)
            SpiralPosition1 = FALSE;
    }
    if(!SpiralPosition2)
    {
        OuterSpiral -= 1;
        if(OuterSpiral < MinRadius)
            SpiralPosition2 = TRUE;
    }
    else
    {
        OuterSpiral += 1;
        if(OuterSpiral >  f_var)
            SpiralPosition2 = FALSE;
    } 
    if( CircularPolarAA == 1)                    
    { 
        SinAngleDrift = (SinAngleDrift * f_var) /100;
        CosAngleDrift = (CosAngleDrift * f_var) /100;  
    } 
    if( CircularPolarAA == 2)        
    { 
        SinAngleDrift = (SinAngleDrift * f_var)/100;
        CosAngleDrift = (CosAngleDrift * MinRadius)/100; 
    }
    if( CircularPolarAA == 3)                     
    { 
        CosAngleDrift = (CosAngleDrift * f_var) /100;  
        SinAngleDrift = (SinAngleDrift * MinRadius)/100;  
    } 
    if( CircularPolarAA == 4)                  
    {
        SinAngleDrift = (SinAngleDrift * InnerSpiral) /100;
        CosAngleDrift = (CosAngleDrift * OuterSpiral) /100;  
    }
    if( CircularPolarAA == 5)
    {
        if(Position == 0 || Position == 1)
        {  
            actual_X = (get_val(RX)) + ((CosAngleDrift * f_var))/100;
        }
        if(Position == 2 || Position == 3)
        {  
            actual_Y = (get_val(RY)) + ((SinAngleDrift * f_var))/100;
        }
            Position++;        
            
        if(Position == 4)
        {
            Position = 0;
        }    
    }
    if(CircularPolarAA == 5 )
    {
           set_val(RX, actual_X);
           set_val(RY, actual_Y); 
    } 
    else
    {
        set_val(RX, calculate(actual_X + CosAngleDrift, -100, 100));
        set_val(RY, calculate(actual_Y + SinAngleDrift, -100, 100)); 
  
    }   
 }
 
 int MinRadius = 1


function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}  

function VM (f_speed)
{
    if     (f_speed == 0) vm_tctrl(-0);
    else if(f_speed == 1) vm_tctrl(-2);
    else if(f_speed == 2) vm_tctrl(-4);
    else if(f_speed == 3) vm_tctrl(-6);
    else if(f_speed == 4) vm_tctrl(-8);
    else if(f_speed == 5) vm_tctrl(-9);
}

function offset(int axis, int offset_val) 
{
	set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
	return
}

function Press(Button)
{

    if (get_ival(Button))
        return;
    set_val(Button, 100);
}

function Set_Val(Input, Output)
{

    set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
    return;
}

function Toggle(ModT, ModP)
{

    Modled = ModT;
    ToggleT = 0;
    ToggleTime = On;
    combo_run(VibrateBlink);

    if (ToggleName)
    {
        Saver = 0;
        cls_oled(0);
        printf(5, 2, 0, 1, Misc[8]);
        rect_oled(0, 11, 128, 20, 0, 1);
        rect_oled(2, 13, 124, 16, 0, 1);
        rect_oled(0, 32, 128, 20, 0, 1);
        rect_oled(2, 34, 124, 16, 0, 1);
        printf(5, 17, 0, 1, ModP);

        if (ModT)
        {
            printf(36, 38, 0, 1, Misc[7]);
        }
        else
        {
            printf(41, 38, 0, 1, Misc[6]);
        }
        ToggleName = Off;
    }
}

function TimeToggle()
{

    ToggleT += get_rtime();

    if (ToggleT >= 3500)
    {
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}

function Saver()
{
    if (Saver)
    {

        TimeS += get_rtime();

        for (ii = 0; ii <= 10; ii++)
        {
            putc_oled(1, Saver_Scroll[0][ii]);
            puts_oled(LineA + -30 + ii * 7, 2, 0, 1, 1);
        }

        for (jj = 0; jj <= 10; jj++)
        {
            putc_oled(1, Saver_Scroll[1][jj]);
            puts_oled(LineA + 100 + jj * 7, 15, 0, 1, 1);
        }

        for (ll = 0; ll <= 10; ll++)
        {
            putc_oled(1, Saver_Scroll[2][ll]);
            puts_oled(LineB + -50 + ll * 7, 28, 0, 1, 1);
        }

        for (oo = 0; oo <= 10; oo++)
        {
            putc_oled(1, Saver_Scroll[3][oo]);
            puts_oled(LineC + 10 + oo * 7, 41, 0, 1, 1);
        }

        for (xx = 0; xx <= 10; xx++)
        {
            putc_oled(1, Saver_Scroll[4][xx]);
            puts_oled(LineC + 127 + xx * 7, 53, 0, 1, 1);
        }

        if (TimeS == 50)
        {
            LineA += 2;
            LineB -= 2;
            LineC += 1;
            TimeS = 0;
        }
    }

    if (!Saver)
        cls_oled(0);
}

function ScreenTime()
{

    if (Clear)
    {
        Ms = 0; Sec = 0; Min = 0;
        Clear = Off;
    }

    if (ScreenTime)
    {
        Ms += get_rtime();

        if (Ms >= 1000)
        {
            Ms = 0;
            Sec += 1
        }
        if (Sec == 60)
        {
            Sec = 0;
            Min += 1;
        }
        if (Min == TimeoutLimit)
        {
            Saver = 0;
            Ms = 0;
            Sec = 0;
            Min = 0;
            ScreenTime = 0;
            cls_oled(0);
        }
    }
}

function BlockButton(Button)
{

    if (!get_ival(Button))
        return;
    set_val(Button, Off);
}

function MenuToggle(Main, Vals, Indx, Print, Toggle)
{

    cls_oled(0);
    MainMenu = Main;
    MenuValues = Vals;
    ModIndex = Indx;
    Update = Print;
    MenuSwitch = Toggle;
    MenuTimeout = Off;

    if (!MainMenu)
    {
        ScreenTime = 1;
        Saver = 1;
        Clear = On;
    }
}

function PrintMod(ModVal, ModValMin, ModValMax, ModValInc, IndexMin, IndexMax, ModValLbl)
{

    if (Update)
    {

        rect_oled(2, 2, 127, 46, 1, 0);
        Grid();
        printf(6, 25, 0, 1, Misc[0]);
        NumX = -43; NumY = 10; NumS = -1;
        FindDigit(ModIndex, DigitValue(ModIndex));
        printf(5, 8, 0, 1, ModValLbl);

        if (MenuValues)
        {

            NumX = 0; NumY = 0; NumS = 0;
            FindDigit(ModVal, DigitValue(ModVal));
        }
        if (MenuSwitch)
        {

            if (ModVal)
            {

                printf(51, 24, 1, 1, Misc[1]);
            }
            else
            {
                printf(46, 24, 1, 1, Misc[2]);
            }
        }
        Update = Off;
    }

    if (event_press(Up) || get_ival(Up) && get_ptime(Up) >= 450)
    {

        Update = On;
        ModVal += ModValInc;

        if (ModVal >= ModValMax)
        {
            ModMonitor(ModValLbl);
            return ModValMax;
        }
    }

    if (event_press(Down) || get_ival(Down) && get_ptime(Down) >= 450)
    {

        Update = On;
        ModVal -= ModValInc;

        if (ModVal <= ModValMin)
        {
            ModMonitor(ModValLbl);
            return ModValMin;
        }
    }

    if (event_press(Right))
    {

        Update = On;
        ModIndex += 1;

        if (ModIndex > IndexMax) ModIndex = IndexMin;
    }

    if (event_press(Left))
    {
        Update = On;
        ModIndex -= 1;

        if (ModIndex < IndexMin) ModIndex = IndexMax;
    }
    return ModVal;
}

function ModMonitor(Mon)
{

    if (Mon == ModToggle[1])
    {
    }
    if (Mon == ModToggle[2])
    {
    }
    if (Mon == ModToggle[3])
    {
    }
    if (Mon == ModToggle[7])
    {
    }
}

function Grid()
{

    line_oled(126, 20, 2, 20, 2, 1);
    rect_oled(1, 1, 127, 63, 0, 1);
    line_oled(126, 46, 2, 46, 2, 1);
    line_oled(28, 20, 28, 46, 2, 1);
}

function Scroll()
{

    ScrollTime += get_rtime();

    if (ScrollTime >= ScrollWait)
    {
        ScrollWait = ScrollSpeed;

        for (ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++)
        {

            if (ScrollIndex + ScrollLine >= sizeof(Scroll))
            {
                putc_oled(ScrollIndex, Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]);
            }
            else
            {
                putc_oled(ScrollIndex, Scroll[ScrollIndex + ScrollLine]);
            }
        }
        puts_oled(ScrollX, ScrollY, 0, ScrollIndex, 1);
        ScrollLine++;

        if (ScrollLine >= sizeof(Scroll))
        {
            ScrollLine = 0;
        }
        ScrollChar--;

        if (ScrollChar < 1)
        {
            ScrollChar = 17;
            ScrollWait = ScrollDelay;
        }
        ScrollTime = 0;
    }
}

function FindDigit(Digit, Digits)
{

    if (Digit < 0)
    {
        putc_oled(Number, 45);
        Number += 1;
        Digit = abs(Digit);
        Count = 1;
    }
    else
        Count = 0;

    if (Digits == 5)
    {
        putc_oled(Number, FontDigits[Digit / 10000]);
        Digit = Digit % 10000;
        Number += 1;
    }
    if (Digits >= 4)
    {
        putc_oled(Number, FontDigits[Digit / 1000]);
        Digit = Digit % 1000;
        Number += 1;
    }
    if (Digits >= 3)
    {
        putc_oled(Number, FontDigits[Digit / 100]);
        Digit = Digit % 100;
        Number += 1;
    }
    if (Digits >= 2)
    {
        putc_oled(Number, FontDigits[Digit / 10]);
        Digit = Digit % 10;
        Number += 1;
    }
    putc_oled(Number, FontDigits[Digit]);
    puts_oled(CenterMod(Digits + Count, 1) + NumX, 25 + NumY, 1 + NumS, Number, 1);
    Number = 1;
}

function EditAssist () {

    EditT += get_rtime();
        
        if (get_val(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
                  Press(Select);
        }
}

function RumbleToUse() 
{
 if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B))
  return RUMBLE_A;
 if(get_rumble(RUMBLE_A) == 100)
  return RUMBLE_B;
 if(get_rumble(RUMBLE_B) == 100)
  return RUMBLE_A;
 if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B))
  return RUMBLE_A;
 if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B))
  return RUMBLE_B;
 return 0;
}

function DigitValue(Number)
{

    Number = abs(Number);
    if (Number / 10000 > 0) return 5;
    if (Number / 1000 > 0) return 4;
    if (Number / 100 > 0) return 3;
    if (Number / 10 > 0) return 2;
    return 1;
}

function CenterMod(Character, Font)
{
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
    return Position;
}

/*

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|
 
 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████  

█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝
                              
                              
                              
 █████╗ ███████╗ ██████╗██╗██╗
██╔══██╗██╔════╝██╔════╝██║██║
███████║███████╗██║     ██║██║
██╔══██║╚════██║██║     ██║██║
██║  ██║███████║╚██████╗██║██║
╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝╚═╝
                              
                              
                              
█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝                                                           
*/

define SPACE = 32; /*¦¦       ¦¦*/	define _0 = 48, A = 65, K = 75, U = 85, e = 101, o = 111, y = 121;
define EXCLAMATION = 33; /*¦¦   !   ¦¦*/	define _1 = 49, B = 66, L = 76, V = 86, f = 102, p = 112, z = 122;
define QUOTE = 34; /*¦¦   "   ¦¦*/	define _2 = 50, C = 67, M = 77, W = 87, g = 103, q = 113;
define HASH = 35; /*¦¦   #   ¦¦*/	define _3 = 51, D = 68, N = 78, X = 88, h = 104, r = 114;
define DOLLAR = 36; /*¦¦   $   ¦¦*/	define _4 = 52, E = 69, O = 79, Y = 89, i = 105, s = 115;
define PERCENT = 37; /*¦¦   %   ¦¦*/	define _5 = 53, F = 70, P = 80, Z = 90, j = 106, t = 116;
define AND = 38; /*¦¦   &   ¦¦*/	define _6 = 54, G = 71, Q = 81, a = 97, k = 107, u = 117;
define APOSTROPHE = 39; /*¦¦       ¦¦*/	define _7 = 55, H = 72, R = 82, b = 98, l = 108, v = 118;
define O_BRACKET = 40; /*¦¦   (   ¦¦*/	define _8 = 56, I = 73, S = 83, c = 99, m = 109, w = 119;
define C_BRACKET = 41; /*¦¦   )   ¦¦*/	define _9 = 57, J = 74, T = 84, d = 100, n = 110, x = 120;
define ASTERISK = 42; /*¦¦   *   ¦¦*/
define PLUS = 43; /*¦¦   +   ¦¦*/
define COMMA = 44; /*¦¦   ,   ¦¦*/
define MINUS = 45; /*¦¦   -   ¦¦*/
define FULLSTOP = 46; /*¦¦   .   ¦¦*/
define F_SLASH = 47; /*¦¦   /   ¦¦*/
define COLON = 58; /*¦¦   :   ¦¦*/
define SEMICOLON = 59; /*¦¦   ;   ¦¦*/
define B_ARROW = 60; /*¦¦   <   ¦¦*/
define EQUAL = 61; /*¦¦   =   ¦¦*/
define F_ARROW = 62; /*¦¦   >   ¦¦*/
define QUESTION = 63; /*¦¦   ?   ¦¦*/
define AT = 64; /*¦¦   @   ¦¦*/
define O_SQUARE = 91; /*¦¦   [   ¦¦*/
define b_SLASH = 92; /*¦¦   \   ¦¦*/
define C_SQUARE = 93; /*¦¦   ]   ¦¦*/
define U_ARROW = 94; /*¦¦   ^   ¦¦*/
define UNDERSCORE = 95; /*¦¦   _   ¦¦*/
define TICK = 96; /*¦¦   `   ¦¦*/
define O_CURLY = 123; /*¦¦   {   ¦¦*/
define BAR = 124; /*¦¦   |   ¦¦*/
define C_CURLY = 125; /*¦¦   }   ¦¦*/
define WAVE = 126; /*¦¦   ~   ¦¦*/
define CROSS = 127; /*¦¦   PS  ¦¦*/
define CIRCLE = 128; /*¦¦   PS  ¦¦*/
define SQUARE = 129; /*¦¦   PS  ¦¦*/
define TRIANGLE = 130; /*¦¦   PS  ¦¦*/
define UP = 131; /*¦¦ PS+XB ¦¦*/
define DOWN = 132; /*¦¦ PS+XB ¦¦*/
define LEFT = 133; /*¦¦ PS+XB ¦¦*/
define RIGHT = 134; /*¦¦ PS+XB ¦¦*/
define VIEW = 135; /*¦¦   XB  ¦¦*/
define MENU = 136; /*¦¦   XB  ¦¦*/

/*

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____| 


 █████  ██ ███████  ██████  ██████  ██████  ██████          ██████   ██████          ██ ███████ ███████ ██    ██ ███████ ██████  ██   ██ ███████ ██████   █████  ██    ██ 
██   ██ ██ ██      ██      ██    ██ ██   ██ ██   ██        ██       ██              ██  ██         ███   ██  ██  ██      ██   ██ ██  ██  ██           ██ ██   ██ ██    ██ 
██   ██ ██ ███████ ██      ██    ██ ██████  ██   ██        ██   ███ ██   ███       ██   ███████   ███     ████   ███████ ██████  █████   █████    █████   █████  ██    ██ 
██   ██ ██      ██ ██      ██    ██ ██   ██ ██   ██        ██    ██ ██    ██      ██         ██  ███       ██         ██ ██   ██ ██  ██  ██      ██      ██   ██ ██    ██ 
██████  ██ ███████  ██████  ██████  ██   ██ ██████      ██  ██████   ██████      ██     ███████ ███████    ██    ███████ ██████  ██   ██ ███████ ███████  █████   ██████  
                                                                                             
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                                                
                                                                                                
                                                                                                
███████╗ ██████╗██████╗  ██████╗ ██╗     ██╗          █████╗ ██████╗ ██████╗  █████╗ ██╗   ██╗  
██╔════╝██╔════╝██╔══██╗██╔═══██╗██║     ██║         ██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝  
███████╗██║     ██████╔╝██║   ██║██║     ██║         ███████║██████╔╝██████╔╝███████║ ╚████╔╝   
╚════██║██║     ██╔══██╗██║   ██║██║     ██║         ██╔══██║██╔══██╗██╔══██╗██╔══██║  ╚██╔╝    
███████║╚██████╗██║  ██║╚██████╔╝███████╗███████╗    ██║  ██║██║  ██║██║  ██║██║  ██║   ██║     
╚══════╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝     
                                                                                                
                                                                                                
                                                                                                
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                                                                                                                                                                                               
*/

const string TITLE = "GhostAim V2.7"; // 11 char max 
const string OFF   = "OFF";    
const string ON    = "ON";   
define MAX_MODS_COUNT = -1;                          
                                               


const uint8 FontSize   [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits   [] = {48,49,50,51,52,53,54,55,56,57};

const string Misc[] = {"MOD","ON","OFF","MADE BY GHOSTY","FOLLOW GHOSTYFX_","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off" };

const string ModToggle[] = {"" , "AA1", "PolarAA", "CircularAA", "ARecoil", "PickupM", "CrouchM", "QuickEditAssist", "FastReset", "InstaEditReset", "TimedReset", "Headshot", "InstantTriggers", "InstantPickaxe", " AutoStrafe", "LessInputDelay", "BlockRumbles" ,"BuildTrack", "PS5"};
const string ModValue[] = {"" , " AA1_Shake", "  PolarAABoostPower", "  CircularAA", "    ARecoilStrentgh", " PickupM", "  CrouchMTime", "  QuickEditAssist", "   FastReset", "   InstaEditReset", "  TimedReset", "  HeadshotH", "  InstantTriggers", "  InstantPickaxe", "  AutoStrafeTime", "  InputDelay", "  BlockRumbles" ,"  BuildTrack", "  PS5"};
const char Polar_Array[]={
100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,
87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,
46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,
-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,
-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,
-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,
-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99
,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,
-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,
-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,
-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,
43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,
84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,
100,100,100};
const int16 ModDigitMin  [] = {  0 , 1  };
const int16 ModDigitMax  [] = {  0 , 50 };
const int16 ModIncrement [] = {  0 , 1  }
define TimeoutLimit = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 16;
define IndexMinValues = 1;
define IndexMaxValues = 16;
int Position, Update, MenuTimeout, Count, MainMenu, ModIndex, MenuValues, MenuSwitch, NumX, NumY, NumS, Clear, Shunt;
int Number = 1, Slot = 20000;
int ScrollTime, ScrollWait, ScrollLine, ScrollIndex, ScrollChar;
int ScrollSpeed = 70;
int ScrollDelay = 950;
int ScrollX = 8;
int ScrollY = 50;
int ToggleT, ToggleTime, ToggleName, Modled;
int LineA, LineB, LineC, ii, jj, ll, oo, xx, TimeS;

int Power, AxisXY, actual_X, actual_Y, time, SpiralPosition1, SpiralPosition2, InnerSpiral, OuterSpiral, ARecoilRumble;
int CosAngle, SinAngle, CosAngleDrift, SinAngleDrift, PolarAA_Radius, PolarAA_Steps, Edit1, Edit2, FastE, ARecoilStrength2;
int Saver, Ms, Sec, Min, ScreenTime, ActualMagnitude, MaxMagnitude, Step, DirectionP, DirectionS, ARecoilV;
int ModDigit, BuildCount, Angle,angle, rBoost, Radius, sBoost, EditT, Edit3, editTime, Fast;

define STEP_INTERVAL =  1;  
const int8 ExploitPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};


const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   ,
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   ,
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     ,
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const uint8 Saver_Scroll[][] = {/*
    ¦¦ 0 ¦¦  1 ¦¦  2 ¦¦  3 ¦¦  4 ¦¦  5 ¦¦  6 ¦¦  7 ¦¦  8  ¦¦  9  ¦¦  10 ¦¦ */
    { SPACE,  P  ,  S  ,SPACE,  v  ,SPACE,  X  ,  B  ,  O   ,  X   ,SPACE},
    { SPACE,  Z  ,  E  ,  N  ,SPACE,  v  ,SPACE,  M  ,  A   ,  X   ,SPACE},
    { F  ,  O  ,  R  ,  T  ,  N  ,  I  ,  T  ,  E  , HASH , _1   ,SPACE},
    { C  ,  O  ,  D  ,SPACE,  v  ,SPACE,  A  ,  P  ,  E   ,  X   ,SPACE},
    { A  ,  B  ,  X  ,  Y  ,SPACE,  v  ,SPACE,CROSS,CIRCLE,SQUARE,TRIANGLE}  
};

/*

 _____ ___  _     _     _____        __   ___  _   _   _______        _____ _____ _____ _____ ____    
|  ___/ _ \| |   | |   / _ \ \      / /  / _ \| \ | | |_   _\ \      / |_ _|_   _|_   _| ____|  _ \ _ 
| |_ | | | | |   | |  | | | \ \ /\ / /  | | | |  \| |   | |  \ \ /\ / / | |  | |   | | |  _| | |_) (_)
|  _|| |_| | |___| |__| |_| |\ V  V /   | |_| | |\  |   | |   \ V  V /  | |  | |   | | | |___|  _ < _ 
|_|   \___/|_____|_____\___/  \_/\_/     \___/|_| \_|   |_|    \_/\_/  |___| |_|   |_| |_____|_| \_(_)
                                                                                                      
                                                                                                      
  ____ _   _  ___  ____ _______   _________  __                                                       
 / ___| | | |/ _ \/ ___|_   _\ \ / |  ___\ \/ /                                                       
| |  _| |_| | | | \___ \ | |  \ V /| |_   \  /                                                        
| |_| |  _  | |_| |___) || |   | | |  _|  /  \                                                        
 \____|_| |_|\___/|____/ |_|   |_| |_|   /_/\______                                                   
                                             |_____|

*/