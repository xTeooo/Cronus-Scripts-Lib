// GPC Online Library
// modern_warfare/cold_war_pro_aim_ultimate_zen_edition_4.7.3.gpc

/* 

  _____               .___                          __      __                   _____                               /\  _________          .__       .___  __      __                 
  /     \    ____    __| _/  ____  _______   ____   /  \    /  \_____   _______ _/ ____\_____   _______   ____       / /  \_   ___ \   ____  |  |    __| _/ /  \    /  \_____   _______ 
 /  \ /  \  /  _ \  / __ | _/ __ \ \_  __ \ /    \  \   \/\/   /\__  \  \_  __ \\   __\ \__  \  \_  __ \_/ __ \     / /   /    \  \/  /  _ \ |  |   / __ |  \   \/\/   /\__  \  \_  __ \
/    Y    \(  <_> )/ /_/ | \  ___/  |  | \/|   |  \  \        /  / __ \_ |  | \/ |  |    / __ \_ |  | \/\  ___/    / /    \     \____(  <_> )|  |__/ /_/ |   \        /  / __ \_ |  | \/
\____|__  / \____/ \____ |  \___  > |__|   |___|  /   \__/\  /  (____  / |__|    |__|   (____  / |__|    \___  >  / /      \______  / \____/ |____/\____ |    \__/\  /  (____  / |__|   
        \/              \/      \/              \/         \/        \/                      \/              \/   \/              \/                    \/         \/        \/          
  
                                    __      __                                                  __________                     _____   .__          
                                   /  \    /  \_____   _______ ________  ____    ____    ____   \______   \_______   ____     /  _  \  |__|  _____  
                                   \   \/\/   /\__  \  \_  __ \\___   / /  _ \  /    \ _/ __ \   |     ___/\_  __ \ /  _ \   /  /_\  \ |  | /     \ 
                                    \        /  / __ \_ |  | \/ /    / (  <_> )|   |  \\  ___/   |    |     |  | \/(  <_> ) /    |    \|  ||  Y Y  \
                                     \__/\  /  (____  / |__|   /_____ \ \____/ |___|  / \___  >  |____|     |__|    \____/  \____|__  /|__||__|_|  /  Modern Warfare PRO AIM 4.7.3 ZEN ULTIMATE EDITION
                                          \/        \/               \/             \/      \/                                      \/           \/ 
 
 
                                        ____ ___ .__     __   .__                    __            ___________    .___.__   __   .__                 
                                       |    |   \|  |  _/  |_ |__|  _____  _____   _/  |_   ____   \_   _____/  __| _/|__|_/  |_ |__|  ____    ____  
                                       |    |   /|  |  \   __\|  | /     \ \__  \  \   __\_/ __ \   |    __)_  / __ | |  |\   __\|  | /  _ \  /    \ 
                                       |    |  / |  |__ |  |  |  ||  Y Y  \ / __ \_ |  |  \  ___/   |        \/ /_/ | |  | |  |  |  |(  <_> )|   |  \
                                       |______/  |____/ |__|  |__||__|_|  /(____  / |__|   \___  > /_______  /\____ | |__| |__|  |__| \____/ |___|  /
                                                                        \/      \/             \/          \/      \/                             \/             
 
                                          ___________                .__                       .___        .__   _____   __   ________   ____ 
                                          \__    ___/_____    ___.__.|  |    ____  _______   __| _/_______ |__|_/ ____\_/  |_ \_____  \ /_   |
                                            |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ / __ | \_  __ \|  |\   __\ \   __\ /  ____/  |   |
                                            |    |    / __ \_ \___  ||  |__(  <_> ) |  | \// /_/ |  |  | \/|  | |  |    |  |  /       \  |   |
                                            |____|   (____  / / ____||____/ \____/  |__|   \____ |  |__|   |__| |__|    |__|  \_______ \ |___|  Script Author
                                                          \/  \/                                \/                                    \/  
                                           
                                                          ___________                  __                  .__                  
                                                          \     ____/  ____  _____   _/  |_  __ __ _______ |__|  ____     ____  
                                                          |    __)  _/ __ \ \__  \  \   __\|  |  \\_  __ \|  | /    \   / ___\ 
                                                          |     \   \  ___/  / __ \_ |  |  |  |  / |  | \/|  ||   |  \ / /_/  >
                                                          \___  /    \___  >(____  / |__|  |____/  |__|   |__||___|  / \___  / 
                                                              \/         \/      \/                                \/ /_____/                                                                                                                                                                                                               
                          
                                     
 
             36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\||||||||||||||||||||||||||||||  TRIPLE AIM - POLAR - DOGZ ASSIST - PROGRESSION ASSIST ||||||||||||||||||||||||||||||
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936       36936
     36936   36936       36936
      369    36936         369
		   	  369	
 
 
 

❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤

Credits: 
I would like to thank everyone here who helped me get this script working as I wanted, all you guys have been amazing in helping me learn more and
support you give me, I really appreciate, you all inspire me to do more and learn more.. Once again Thank You ❤❤❤

Noozbar   < My Hero :D 
Batts     < The Reducer 
DoGz      < Absolute Creative Legend
DoNotAtMe < Jarvis ( Iron Man's Talking Computer.. Smart ) 
Swizzy    < Ruthless but honest and a really nice guy :) 
Fadexz    < Really Nice Guy, I use his Cancel Reload (Works Great) and he has helped me improve other mods too!!! 
WayneO    < Great guy... Massive SHOUTOUT to you bro for all the hard work you do for me... Much appreciated!!! <3 


WayneO does all the videos/tutorials on my script <<< PLEASE SUBSCRIBE to his Youtube Channel below... 

https://www.youtube.com/channel/UCAnFnTES_JDFILc7H5JbOOQ


/*--------------------------------------------------------------------------------------------------------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SCRIPT INSTRUCTIONS PLEASE READ!!! //////////////////////////////////////
----------------------------------------------------------------------------------------------------------------
| How to navigate Main Menu   
***********************************************

| CONTROLLER INPUTS                                    ===  WHAT HAPPENS WHEN YOU PRESS THE CORRECT BUTTONS 

| Hold L2 ( OR if Flipped L1 ) and Press OPTIONS       ===  Enter Main Menu                         
    
| Press Circle/B                                       ===  Exit Main Menu ( Automatically Saves )  

| Press Left OR Right dpad                             ===  Navigate Main Menu Categories

| Press Cross/A                                        ===  Enter Mod Menu ( This is where the mods display ) 

| How to navigate and toggle mods in mod menu
**********************************************

| Press Left OR Right dpad                             ===  Navigate Mod Menu 

| Press UP OR DOWN dpad                                ===  Turn Mods ON/OFF 

| Press TRIANGLE/Y                                     ===  Switch Profiles IN Mod Menu ONLY

| Press CROSS/A                                        ===  Enter Mod Edit 

| Press Circle/B                                       ===  Return Back To Main Menu

| How to Adjust Editable Mods in Mod Edit
*******************************************
| Press LEFT OR Right dpad                             ===  Change Between Editable Mods                                     

| HOLD L2 ( OR if Flipped L1) and Press Left and Right ===  Increase/Decrease values by + 1/- 1   

| HOLD L2 ( OR if Flipped L1) and Press UP OR Down     ===  Increase/Decrease Values by + 10/- 10 

| Press Circle/B                                       ===  Return Back To Mod Menu 
==================================================================================================================================
| SELECTING YOUR SWITCH PROFILE BUTTONS                ===  PLEASE READ THIS IS IMPORTANT                                        |
**********************************************************************************************************************************
| I will briefly explain, the switch profile buttons you can choose from the main menu under " Settings " Press CROSS/A to 
| enter...
|
| Profile Button                                       ===  Choose ONLY 1 button to switch from " Primary - Secondary " 
| Profile Buttons                                      ===  Choose 2 Buttons to switch from " Primary - Secondary "
| Warzone Profile                                      ===  Choose 2 Buttons to switch to " Warzone " profile
|================================================================================================================================
| How to Choose the Buttons On DISPLAY  " Profile Button OR Profile Buttons OR Warzone Profile "                                |
*********************************************************************************************************************************
| HOLD L2 ( IF Flipped USE L1 ) Press Left and Right   ===  Choose the button you wish ( DO NOT USE THE SAME BUTTONS ) 
|
| Press UP OR DOWN to Change ( Top OR Bottom Buttons ) ===  You Will know which one you are on a the < Select > gets BIGGER 
|
| That is all you need to do to change your buttons for the profiles, DO NOT USE the SAME buttons for each of these...
|
| NOTE* > The buttons you do choose ONLY switch PROFILES OUTSIDE OF THE MENU, Triangle Switches IN MOD MENU 
|
| Resync Profiles Without Changing Weapon In Game... Hold R3/RS and press TRIANGLE to return back to profile...
================================================================================================================================
| SELECTING QUICK TOGGLE BUTTONS                       === PLEASE READ THIS IS IMPORTANT                                       |
********************************************************************************************************************************
| Some people have asked "What are quick toggles? " Let me tell you... 
|
| When you are in game and in the heat of the moment and you need Rapid Fire Or Akimbo Fire instantly, well ??? 
|
| You can activate these by turning them ON or OFF WITHOUT going into the mod menu...
|
| And I am now going to tell you how you can activate the Quick Toggles, but first you need to choose your buttons...  
|
===============================================================================================================================
| How to Choose the Buttons On DISPLAY                 === PLEASE READ THIS IS IMPORTANT                                      |
|******************************************************************************************************************************
| HOLD L2 ( IF Flipped USE L1 ) Press Left and Right   ===  Choose the button you wish ( DO NOT USE THE SAME BUTTONS ) 
|
| Press UP OR DOWN to Change ( Top OR Bottom Buttons ) ===  You Will know which one you are on a the < Select > gets BIGGER 
|
| Once you have chosen your buttons... for example L2 & LEFT, to activate the toggle... HOLD L2 and HOLD Left for 200ms
|
| Same goes for any other buttons choose....
===============================================================================================================================
| FEATURES THAT WORK OUTSIDE THE MENU ALREADY PROGRAMMED TO THE SCRIPT...                                                     |
===============================================================================================================================
| Hold L2 ( IF Flipped USE L1 ) Press MENU/VIEW        === Activate KILLSWITCH , Deactivates everything in the script....
|
| Hold L2 ( IF Flipped USE L1 ) Double TAP LEFT        === Activate Driving Mode, Deactivates Aim Assist,Antirecoil,Rapid Fire
|
| Press SQUARE/X                                       === Deactivate Driving Mode ( Exiting the vehicle Will Deactivate it )
|
| Hold L2 ( IF Flipped USE L1 ) Double TAP RIGHT       === Activate/Deactivate Sniper Mode ( Turns Aim Assist OFF ) 
|==============================================================================================================================
*/
 const int8 polar_LUT[] = {  /// DoNotAtMe Steady Aim ARRAY
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
};

/*======================================================================================================================================================*/
const string MAINMENU[] ={ // MainMenu_idx \\ Total = 7;
/*======================================================================================================================================================*/
   "Antirecoil/Misc",   "Fire/Shot Mods",   "Aim Assists",   "DoGz Triple",   "Sniper Mods",   "Warzone Mods",   "Drop/Jump Mods",    "Settings",  ""};  
//       0                     1                  2                3                4                5                  6                  7	  
/*======================================================================================================================================================*/
/*======================================================================================================================================================*/
const string MODNAMES[] ={ // ModName_idx \\  Total = 30; 
/*=============================================================================================================================================================================================================*/
   "Legacy AR",         "Progressive AR",   "Cancel Reload", "Rapid Fire",    "Akimbo Fire",   "Burst Fire",     "StrafeShot",   "Taylor Assist",   "Batts Sticky Aim",    "DoGz Polar",   "DoGz Assist",
//      0                      1                   2               3                 4               5                6                      7                   8                   9               10 
/*=============================================================================================================================================================================================================*/   
   "DoGz Progression",  "QuickScope",    "HoldBreath",    "Enemy Fire Ping",    "Cancel Plates",   "Cancel Slide",   "Jump Shot",         "Drop Shot",       "Prone Shot",          "BunnyHop",     "Fast Melee",
//       11                  12                  13               14               15                16              17                   18                 19                     20               21 
/*=============================================================================================================================================================================================================*/
   "Profile Button",  "Profile Resync",  "Warzone Profile",  "Quick Toggles",  "Controller Layout", "Snack Sens", "Block Rumble","Weapon Names",  "Inverted", "Screen Saver","Profile Button", ""}; 
//       22                  23                 24                 25                 26                 27            28              29              30            31 
/*===================================================================================================================================*/
 const string VALNAMES[]={ // ValName_idx \\ Total = 42;  
/*==============================================================================================================================================================================================*/
   "AR Vertical",  "AR Horiz",  "Vertical Start",  "Vertical End",  "Vertical Time",  "Horizontal Start",  "Horizontal End",  "Horizontal Time",  "Reload Time",  "Rounds/Sec",  "Rounds/sec",
//       0             1               2                 3                 4                   5                  6                   7                 8          	    9             10  
/*==============================================================================================================================================================================================*/
   "Hold","Release",  "Strafeshot Time", "Radius",  "Steps",  "Steady Aim",  "Sticky Size",  "Sticky Time",  "Radius",  "Angle",  "Steady Aim",  "Boost",  "Shake",  "Input",  "Release",
//   11      12               13            14        15           16             17               18           19         20          21           22        23        24         25
/*==============================================================================================================================================================================================*/
   "DoGz High Value", "DoGz Low Value",  "Release",  "Positive Value",  "Negative Value",  "Wait",  "Release",  "QuickScope Delay", "Rapid Fire", "Akimbo Fire", "Fast Melee", "Prone Shot",  
//       26                 27              28              29                 30            31         32             33                34           35            36             37    
/*==============================================================================================================================================================================================*/
   "General Sens",  "ADS Sens",  "Fire Sens", "Ads & Fire Sens",  "Grenade Sens", "Single Button Only" ,""} 
//       38            39            40             41                  42
/*==============================================================================================================================================================================================*/
const string MISC[]={ // Misc Strings \\ Total = 29;
/*================================================================================================================================================================================================================*/
    "MW/Cold War",  "PRO AIM 4.7.3","Weapon", " Primary ", " Secondary ", " All Profiles ", "KillSwitch ON", "Hold Circle/B", "to turn OFF", "SAVED", "Sniper Mode", "Activated", "Deactivated", "Press X to edit",
//       0              1        2         3            4               5                 6                7                8           9          10            11             12              13       
/*================================================================================================================================================================================================================*/
    "KillSwitch OFF", "Press Cross/A", "Press Square/X" ,"Off", "ADS Only", "ADS & Fire", "KillSwitch OFF", " Press UP/DOWN ", "Warzone", "Driving Mode", "Activated", "Deactivated", "Sniper Mode", "  Choose Buttons  ",
//         14                15              16            17       18           19             20              21          22           23             24            25            26                27  
/*================================================================================================================================================================================================================*/
    "  Buttons  "," Warzone "," Default Press ","Button", ""}
//       28           29         30       31
/*================================================================================================================================================================================================================*/
const string CONTROLLER[]={ // Controller Layouts \\ Total = 16;
/*================================================================================================================================================================================================================*/
   "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", "Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped",
/*      0          1          2            3                 4                     5                   6                 7                    8                   9            10        11           12          
==================================================================================================================================================================================================================*/   
   "Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped", ""}
/*        13                   14                   15                   16
==================================================================================================================================================================================================================*/  
const string HOLD_BUTTONS []= { // Hold Buttons for Profiles/Quick Toggles \\ Total = 6;  
/*============================================================================================================*/
   "< Select >",  "L2/LT",  "R2/RT",  "L1/LB",  "R1/RB",  "L3/LS",  "R3/RS", ""};
/*      0            1         2         3         4         5         6    
==============================================================================================================*/ 
const string PRESS_BUTTONS []={  // Press Buttons For Profiles/Quick Toggles \\ Total 8; 
/*================================================================================================================================*/
   "Select",  "Dpad Down",   "Dpad UP",  "Dpad Left",  "Dpad Right",  "Cross/A",  "Circle/B",  "Square/X",  "Triangle/Y", ""};
/*      0              1             2            3             4             5           6             7             8 
=====================================================================================================================================================================================================*/
const string WEAPONS[]={ // Weapon Names Displayed On Title Screen \\ Total 40;  
"Ground Loot","AK-47","XM4","Krig 6","FFAR 1","Groza","QBZ-83","AN-94","FAL","Oden","FR 5.56","M4A1","FN Scar 17","M13","Kilo 141","AS VAL","RAM-7","Grau 5.56","CR-56 AMAX",

"MAC-10","Milano 821","KSP-45","BullFrog","AK-74u","Mp5","Fennec","Striker 45","AUG","PP19 Bizon","P90","Mp7","Uzi","ISO","ShotGun","LmG","M16","DMR-14","Type 63","Rifle","Sniper","Melee", ""} ; 
//====================================================================================================================================================================================================
// Toggles ON/OFF \\ 
const string _ON = "On"; 
const string _OFF = "Off"; 

// Variables for the script \\
int mainMenu_idx            // Index for the Mod Categories
int modName_idx;            // Index to ModNames in the Menu 
int valName_idx;            // Index to adjustable values
int profile_idx;            // Index to profiles 
int profile_1or2;           // Used to switch profiles
int warzone_loot_profile;   // This is for the warzone profile

// Defined variables used in the script 
int    amount_of_profiles              =  3; // Amount of Profiles on the script .. Primary - Secondary - Warzone
define amount_of_mainMenu_idx_max      =  7; // Amount of Main Menu Categories
define amount_of_editable_mainMenu_idx =  7; // Amount of Main Menu Categories Which Can Be Edited
define amount_of_modName_idx_max       = 32; // Amount of ModName_idx Available in the OLED Menu
define amount_of_editable_modName_idx  = 12; // Amount of ModName_idx Available To Be Edited
define amount_of_valName_idx           = 43; // Amount of ValName_idx Available To Be Edited


// Display Title Variable, defined as TRUE; because when the script loads it will display title screen \\
int display_title = TRUE;
int normalbutton; 
// Profile Buttons  \\
define PROFILE_IDX_COUNT = 2; 

int profile_hold[PROFILE_IDX_COUNT];
int profile_press[PROFILE_IDX_COUNT];

int profile_hold_idx[PROFILE_IDX_COUNT];
int profile_press_idx[PROFILE_IDX_COUNT]; 

// Quick Toggle Buttons \\
define QUICK_TOGGLE_COUNT = 4;

int qt_f_hold[QUICK_TOGGLE_COUNT];
int qt_s_hold[QUICK_TOGGLE_COUNT];

int quick_toggle_f_hold_idx[QUICK_TOGGLE_COUNT];
int quick_toggle_s_hold_idx[QUICK_TOGGLE_COUNT];


const int8 misc_hold_buttons []    = { -1,  PS4_L2,      PS4_R2,   PS4_L1  , PS4_R1   , PS4_L3   , PS4_R3 }; 
const int8 misc_press_buttons[]    = { -1, PS4_DOWN,     PS4_UP,   PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE, PS4_TRIANGLE }; 

// Toggles For Mods that can be used independantly on the 2 profiles  \\
int toggle_legacyar  [3];
int toggle_antirecoil[3];
int toggle_rapidfire [3];
int toggle_akimborf  [3];
int toggle_burstfire [3];
int toggle_quickscope[3];
int toggle_holdbreath[3];
int weapon_name_idx  [3]; 

// Adjustable Values that can have different values dependant on profile \\
int antirecoil_horizontal[3];
int antirecoil_vertical  [3];
int antirecoil_start     [3];
int antirecoil_end       [3];
int antirecoil_time      [3];
int antirecoilH_start    [3];
int antirecoilH_end      [3];
int antirecoilH_time     [3];
int rate_of_fire         [3];
int akimbo_rate_of_fire  [3]; 

// Toggles for mods \\
int toggle_taylorassist,toggle_batts_sticky; 
int toggle_cancel_plates,toggle_dropshot,toggle_proneshot,toggle_bunnyhop,toggle_cancel_reload,activate_cancel_plates;
int toggle_inverted_on,toggle_jump_shot,toggle_fastmelee; 
int toggle_cancel_slide,toggle_enemy_ping,toggle_strafeshot,toggle_block_rumble;
int cancel_plates_timer;

// Misc Variables \\ // Controller Layout Variables \\
int qt_active_name;
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping; 

// Adjustable Values for Drop Shot/Prone Shot
int Prone_Speed = 80; //Prone On Shot - How long before you prone
int DS_Speed    = 60; //Drop Shot

// Variables Used for switch profile buttons
int press = 0; 
int Buttons,singlebutton_idx,active_name;
int name_width,name_font,name_y,cat_width,cat_font;

// AR Variables
int AntirecoilVertical; 
int AntirecoilHorizontal;

// Anti-Recoil Variables
int i_val;                                                        
int i_pnt;                                                        
int i_num;                                                        
int i_cnt;                                                        
int v,ar_y;
int invert; // -1 for inverted, 1 for standard
// Horizontal
int i_val_h;
int i_pnt_h;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;  
// RapidFire / BurstFire / StrafeShot
int hold_time;                                                    
int rest_time;
int led_on;
int led_off;
int burstfire_hold,burstfire_release,strafeShot_time;

// Reload Cancel
int reloading;
int reloading_time;
int did_shoot_before_reload;
int max_reload_time_for_cancel;

// Sweet Evils Saving SPVAR Method (Brilliant Idea) 
int mask;
int ret;
int pval_data;
int i;
// ItzSnackz Custom Sens \\
int toggle_snacks_sens;
int GEN_SENS;
int ADS_SENS;
int FIRE_SENS;
int ADS_FIRE_SENS;
int GRENADE_SENS;
int USE_SENS;

// Batts Sticky Aim Variables
int stickyaim_size,stickyaim_time;

// DoGzTheFigherz Triple Aim
define PRX		  = POLAR_RX;
define PRY		  = POLAR_RY;
define RS         = POLAR_RS;
define VIB_A      = RUMBLE_A;
define X          = PS4_RX;                                    
define Y          = PS4_RY;
int toggle_dogz_assist;  
int toggle_dogz_progression;
int toggle_dogz_polar_assist; 

//PROGRESSION ASSIST SETTINGS
define AAMIN  = -6;// MINIMUM VALUE  
define AAMAX  =  6;// MAXIMUM VALUE  
define AAVAL  =  6;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS

// DON'T TOUCH THESE BELOW
int D_AS;
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;

//POLAR ASSIST SETTINGS
int RADIUS;
int ANGLE;
int POLAR_BOOST;
int POLAR_SHAKE;
int A_B_S;
int POLAR_RELEASE;
int POLAR_RADIUS,POLAR_ANGLE,SPEED;

//DoGz ASSIST VALUES
int DoGz_ASSIST_RELEASE;
define VMCR   =  0;// DEFAULT VM SPEED
int D__AS;  
int D__AS1    =  4; // INVERT DIRECTION VALUE
int D___AS    =  5;
int D_AS1     =  -5; 

//POLAR CONDITIONS
define ACTIVE_WHEN_ADS    =  TRUE;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  TRUE;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   =  TRUE;   
define POLAR_SHAKE_FIRE   =  TRUE;
int VM                    =  TRUE;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )   
int POSI          =   5;    
int NEGI          =   -5;        
int WA            =   1;          
int PROG_RELEASE  =   15;  

// DoNotAtMe Polar Aim
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2;
int RADIUS2,STEPS; 
int STEADY_AIM,STEADY_VALUE;
int SCREENSAVER;
int toggle_screensaver;
int time,angle;                                                                
int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
  
const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};   

// Variables Used In Various Parts of the Script \\
define SSA1 = 84; define SSA2 = 65; define SSA3 = 89; define SSA4 = 76; define SSA5 = 79;define SSA6 = 82; define SSA7 = 68; define SSA8 = 82; define SSA9 = 73;define SSA10 = 70;
define SSA11 = 82;define SSA13 = 50;define SSA14 = 49;define SAVER = 5000;define SAVER1 = 10; int SSMU1 = 1;int SSMU2 = 8;int SSMU3 = 15;int SSMU4 = 22;int SSMU5 = 29;int SSMU6 = 36;
int SSMU7 = 43;int SSMU8 = 50;int SSMU9 = 57;int SSMU10 = 64;int SSMU11 = 71;int SSMU12 = 78;int SSMU13 = 85;int SSMU14 = 92;
int killswitch,display_screen,count_black,quickscopedelay;

init {
/*==== Load Title Screen Display Function == */
          ScreenActive(TITLE_SCREEN);
          
  /*=======  Initialize Steady Aim ========*/
      STEADY_AIM = (360 / STEADY_AIM) / 2;
  
     /*=== Initalise Values For Mods ===*/
                   Load();                                                            		                                                    			                                                    												
} 
main {

set_val(TRACE_1,profile_idx); 
/*--- Functions For Changeable Buttons In The Menu --- */
	           Buttons(Buttons);
    
               profile_buttons(); 
    
                 QT_function(); 
                 

    
    if(activeScreen == TITLE_SCREEN) 
    {
	    TitleScreen();
	}
	
/*========================================================================================================
////////////////////////////////////// Enter Mod Menu \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
========================================================================================================*/
    if(get_val(Ads))
	{
        if(get_ival(PS4_OPTIONS))
        { 
	        ScreenActive(MAIN_MENU);
	        combo_run(RUMBLE_ON); 
	     	mainMenu_idx = 0;   
	       
        }
        set_val(PS4_OPTIONS, 0);
    } 
    if(activeScreen == MAIN_MENU)
    {   
		MainMenu();
		
        if(mainMenu_idx <= amount_of_editable_mainMenu_idx) 
        {
            if(event_press(PS4_CROSS))
            { 
               modName_idx = amount_of_modName_idx_max + 1; 
               ScreenActive(MOD_MENU);   
            }
        } 
	    if(!get_val(Ads))
		{ 
	        if(event_press(PS4_RIGHT))
	        { 
	            mainMenu_idx ++;
	            
	            if(mainMenu_idx > amount_of_mainMenu_idx_max)
	            mainMenu_idx = 0;    
	        } 
	        if(event_press(PS4_LEFT))
	        { 
	            mainMenu_idx --; 
	            if(mainMenu_idx < 0) 
			    mainMenu_idx = amount_of_mainMenu_idx_max;
	        }
	    }
        if(event_release(PS4_CIRCLE)) 
        {
	        if(SCREEN_DATA[activeScreen][PARENT]) 
	        {
	                ScreenActive(TITLE_SCREEN);
	                display_title = TRUE;
                    Save();
	               
	        } 
	    } 
	  block_function(); 
	}
	if(activeScreen == MOD_MENU)
    {   
	  ModMenu();
		
        if(modName_idx <= amount_of_editable_modName_idx || modName_idx == 25 || modName_idx == 27) 
        {
            if(event_press(PS4_CROSS))
            { 
               valName_idx = amount_of_valName_idx + 1;
               ScreenActive(EDIT_MENU);
              
            }
        } 
	    if(!get_ival(Ads))
		{ 
	        if(event_press(PS4_RIGHT))
	        { 
	            modName_idx += 1;    
	        } 
	        if(event_press(PS4_LEFT))
	        { 
	            modName_idx -= 1;     
	    }
	    if(event_press(PS4_TRIANGLE))
        {
                profile_idx += 1;
                
                if(profile_idx > amount_of_profiles - 1) 
                profile_idx = 0;
        }
        
        	   if(mainMenu_idx == 0) menu_limits (0,2); 
               if(mainMenu_idx == 1) menu_limits (3,6);
               if(mainMenu_idx == 2) menu_limits (7,8);
               if(mainMenu_idx == 3) menu_limits (9,11); 
               if(mainMenu_idx == 4) menu_limits (12,13); 
               if(mainMenu_idx == 5) menu_limits (14,15);
               if(mainMenu_idx == 6) menu_limits (16,21);
               if(mainMenu_idx == 7) menu_limits (22,32);
              
        }      
        if(event_release(PS4_CIRCLE)) 
        {
	        if(SCREEN_DATA[activeScreen][PARENT]) 
	        {
	                ScreenActive(MAIN_MENU); 
	                
	        }
	    }
	  block_function(); 
	}
    if(activeScreen == EDIT_MENU)
    {
    	EditMenu();
    
           if(!get_ival(Ads))
	       { 
	           if(event_press(PS4_RIGHT))
	           { 
	                valName_idx += 1;   
	           } 
	           if(event_press(PS4_LEFT))
	           { 
	                valName_idx -= 1;
	           }
	           if(modName_idx == 0)  mod_limits (0,1);     
               if(modName_idx == 1)  mod_limits (2,7);
               if(modName_idx == 2)  mod_limits (8,8);
               if(modName_idx == 3)  mod_limits (9,9); 
               if(modName_idx == 4)  mod_limits (10,10); 
               if(modName_idx == 5)  mod_limits (11,12);
               if(modName_idx == 6)  mod_limits (13,13);
               if(modName_idx == 7)  mod_limits (14,16); 
               if(modName_idx == 8)  mod_limits (17,18);
               if(modName_idx == 9)  mod_limits (19,25);  
               if(modName_idx == 10) mod_limits (26,28); 
               if(modName_idx == 11) mod_limits (29,32);
               if(modName_idx == 12) mod_limits (33,33); 
               if(modName_idx == 25) mod_limits (34,37);
               if(modName_idx == 27) mod_limits (38,42);
              
            
	      } 
	      if(event_release(PS4_CIRCLE))
	      {
	          if(SCREEN_DATA[activeScreen][PARENT])
	          {
	               ScreenActive(MOD_MENU);   
	          } 
	      }  
	 block_function();    
    }
   /*====================== KillSwitch ========================*/
	if(!activeScreen == MAIN_MENU)
	{
	   if(get_ival(Ads)) 
	   { 
	         if(event_press(PS4_SHARE))
	         { 
	             killswitch = TRUE; 
	             combo_run(KILLSWITCH);   
	         }
	       set_val(PS4_SHARE,0); 
	   } 
	   if(killswitch)
	   {     
	         if(get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500) 
	         {
	               killswitch = FALSE; 
	               combo_run(KILLSWITCH_OFF);          
	         }
	 
       }  
       /*=========================================================================================================|
       |/////////////////////////////////////// Switch Profiles \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|
       ==========================================================================================================*/
	  
	   
	          if(press && event_release(press)&& get_ptime(press)< 150 && !normalbutton || normalbutton && press && event_press(press) ||  profile_hold[0] && get_ival(profile_hold[0]) && event_release(profile_press[0]))
	          {
	  
			       profile_1or2=!profile_1or2;
			       warzone_loot_profile = FALSE;
			        
			        	
			       if(activeScreen == MOD_MENU)
			           ScreenActive(MOD_MENU); 
    		       else
    				   ScreenActive(TITLE_SCREEN);
			        	       display_title = TRUE; 
			  
			   
	    	       if(profile_hold[0] &&  get_ival(profile_hold[0]))
	    	               set_val(profile_press[0], 0);
	          }       
	          if(!warzone_loot_profile) 
	          { 
	                 // If Profile 2
	                if(profile_1or2)
	                    profile_idx = 1;
	     
	                // If Profile 1
	                  else	
	                	profile_idx = 0;
	        	
	          
	          
	  }     
	  if(profile_hold[1])
      {
              if(get_ival(profile_hold[1]) && get_ival(profile_press[1]))
              {
                      profile_idx = 2; 
	       	          warzone_loot_profile = TRUE;
	       	          
	       	      
	       	        set_val(profile_press[1],0);   
	       	        
	       	          if(activeScreen == MOD_MENU)
			        	      ScreenActive(MOD_MENU); 
    				  else
    				      ScreenActive(TITLE_SCREEN);
			        	        display_title = TRUE; 
			  } 
       	  	     
      }    		    		
	/*=== When we are NOT in ModMenu OR WeaponMenu.. Activate/Deactivate Driving Mode OR Sniper Mode ===*/
	
			        if(get_ival(Ads)) 
			        { 
			           if(event_press(PS4_LEFT) && get_brtime(PS4_LEFT) <= 200)
			           {
			                driving_mode = TRUE;
			                combo_run(DRIVING_MODE);
			           } 
			           
			          set_val(PS4_LEFT, 0);
			        }
			        if(driving_mode)
			        {
			           if(event_press(Reload)) 
			           {
			               driving_mode = FALSE;
			               combo_run(DRIVING_OFF); 
			           }
			        }  
			        if(get_ival(Ads))
			        {
			           if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200)
			           {
			                  sniper_mode =!sniper_mode; 
			             
			                  combo_run(SNIPER_MODE); 
			           
			              if(!sniper_mode)
			              {
			                 combo_run(SNIPER_OFF); 
			                 
			                 toggle_holdbreath = FALSE; 
			              } 
			              if(sniper_mode) 
			              { 
			                toggle_holdbreath = TRUE;                
			              }          
			           } 
			           set_val(PS4_RIGHT,0); 
			       } 
			       if(!killswitch)
	               {
			       /*================== Quick Toggles Within The Menu, this is where users choose their buttons ===============*/
			       toggle_rapidfire[profile_idx]  = Quick_Toggle( qt_f_hold[0] , qt_s_hold[0]   , toggle_rapidfire[profile_idx] , 3  );
			       toggle_akimborf[profile_idx]   = Quick_Toggle( qt_f_hold[1] , qt_s_hold[1]   , toggle_akimborf[profile_idx]  , 4  );
			       toggle_fastmelee               = Quick_Toggle( qt_f_hold[2] , qt_s_hold[2]   , toggle_fastmelee              , 21 );
			       toggle_proneshot               = Quick_Toggle( qt_f_hold[3] , qt_s_hold[3]   , toggle_proneshot              , 19 );
			     
			      
			      
			       if(toggle_block_rumble) 
			       { 
			           block_rumble();
			       } 
			       
			       deadzone(PS4_L2,PS4_R2,99,99);
			       
			       
			       
			       if(toggle_inverted_on)
					  invert = -1;
				   else
					   invert = 1;
						
			      if(toggle_legacyar[profile_idx] == 1 && !driving_mode)
			      {
					 if(get_val(Fire))
						combo_run(ANTIRECOIL);
					  else
						combo_stop(ANTIRECOIL);
				     
				  }
			      // If Anti-Recoil is enable for the active profile , Made by Batts & Noozbar 
				  if(toggle_antirecoil[profile_idx] == 1 && !driving_mode)
				  {
				    // Antirecoil by Batts	
					// Vertical
			    	 if( antirecoil_start[profile_idx] < antirecoil_end[profile_idx])
			    	    i_val = 1; 
			    	 else
			    	    i_val = -1;
			        
			    	i_pnt = (antirecoil_time[profile_idx] * 10) / (abs(antirecoil_start[profile_idx] - antirecoil_end[profile_idx])); 
			    	
			    	// Horizontal		
			    	if(antirecoilH_start[profile_idx] < antirecoilH_end[profile_idx])
			    	    i_val_h = 1; 
			    	else
			    	    i_val_h = -1;
			        
			    	i_pnt_h = (antirecoilH_time[profile_idx] * 10) / (abs(antirecoilH_start[profile_idx] - antirecoilH_end[profile_idx])); 
			    	
			    	if(!get_val(Fire)) 
			   		{
			   			// Vertical
			   			ar_y = antirecoil_start[profile_idx];
			   			i_cnt = 0;
			   			i_num = 0;
			   			
			   			// Horizontal
			   			ar_x = antirecoilH_start[profile_idx];
			   			i_cnt_h = 0;
			   			i_num_h = 0;
			   		}   
			    	
			    	if(get_val(Ads) && get_val(Fire))
			    	{
			   		    // Vertical
			   		    if(!p_complete())  
			   		        ar_y = p_val();
			   		    else
			   		        ar_y = antirecoil_end[profile_idx];
			            
						if(y_val() < 100)
			    	   		set_val(PS4_RY,y_val()); 
			    	   		
			    	   	// Horizontal	
			   		    if(!p_complete_x())  
			   		        ar_x = p_val_x();
			   		    else
			   		        ar_x = antirecoilH_end[profile_idx];
			            
						if(x_val() < 100)
			    	   		set_val(PS4_RX,x_val()); 
			   	    }
			   	}
				// If RapidFire is enable for the active profile // This Rapid Fire was From NoozBar
				if(toggle_rapidfire[profile_idx] == 1 && !driving_mode)
				{
				        hold_time = 500 / rate_of_fire[profile_idx]; 
   		                rest_time = hold_time - 20;
    	                if(rest_time < 0) rest_time = 0;
			    
			    // Run combo
			    	if(get_val(Fire))
			    	    
			    		combo_run(RAPIDFIRE);
			    	else
			    		combo_stop(RAPIDFIRE);
			    		
			    	led_on = 150;
			    	led_off = 300;
			    	combo_run(BLINK);
				}
				if(toggle_akimborf[profile_idx] == 1 && !driving_mode) 
                { 	
                    if(get_val(Fire))
                        combo_run(ARF);
                    else 
                        combo_stop(ARF);
   
                    led_on = 150;
    	            led_off = 300;
    	            combo_run(BLINK);        
                }
				// If BurstFire is enable for the active profile 
	            if(toggle_burstfire[profile_idx] == 1 && !driving_mode)
            	{
                   // Hold and Release
		           hold_time = burstfire_hold;
		           rest_time = burstfire_release;
			
                   // Run combo
                   if(get_val(Fire))	
    		          combo_run(BURSTFIRE);
    	           else
    	            	combo_stop(BURSTFIRE);

		           led_on = 200;
    	           led_off = 1000;
    	           combo_run(BLINK);
             	}
				/// The ORIGINAL CREATOR of this is DoNotAtMe, He created the Polar Aim and Steady Aim... I just put them both together to create a great Aim Assist hence why I called it by my name :) 
				if(toggle_taylorassist && !driving_mode && !sniper_mode)
				{
			    
			      vm_tctrl(VM_INTERVAL); 
			                         
			      actual_X = get_val(X);   
			      actual_Y = get_val(Y);           
			      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
			      max_Magnitude = (actual_Magnitude < 100);                      
			                                                                  
			      if(!(time++ % STEP_INTERVAL)){                                  
				         angle += STEPS;                                                 
			      }                                                               
			      angle = angle % 360;                                            
			      sin_angle = Polar_Array[angle % 360];                           
			      cos_angle = Polar_Array[(angle + 270) % 360];                  
			      cos_angle = (cos_angle * RADIUS2) / 100;                         
			      sin_angle = (sin_angle * RADIUS2) / 100;                          
			                                                                         
			      if((ACTIVE_WHEN_ADS && get_val(Ads)) || (ACTIVE_WHEN_FIRING && get_val(Fire)))
			   	  { 
			    	 vm_tctrl(VM_INTERVAL);
			           if(actual_Magnitude <= RADIUS2){                                                      
			                sin_angle -= actual_Y;                                                              
			                cos_angle -= actual_X;                                                                 
			           }else {                                                                                       
			                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
			                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
			           }                                                  
			           set_val(X, calculate(actual_X + cos_angle, -100, 100));
			           set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
			     }
			     else if (!get_ival(Ads) && !get_ival(Fire)) {
			    			vm_tctrl(0); 
			  	 }
			  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
			  				{
			  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
								if (get_val(POLAR_RY) > 0) 
			  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
			   					else
			   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));
			
			  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
							}
						
				}
			    
			    POLAR_RADIUS = RADIUS;
			    POLAR_ANGLE  = ANGLE;
			if (toggle_dogz_polar_assist && !driving_mode && !sniper_mode && get_val(Ads) && abs(get_ival(PS4_RX)) <= POLAR_RELEASE && abs(get_ival(PS4_RY)) <= POLAR_RELEASE) 
			{
			    if (POLAR_BOOST_FIRE && get_val(Fire)) 
			    {
				    POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
				}
				else 
				{
				    POLAR_RADIUS = POLAR_RADIUS;
				}
			    if (POLAR_SHAKE_FIRE && get_val(Fire)) 
			    {
				    POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
				}
				else
				{
				    POLAR_ANGLE = POLAR_ANGLE;
				}    
			    set_polar(POLAR_RS,SPEED = (SPEED + POLAR_ANGLE) % 360,abs(get_ival(POLAR_RX)) / A_B_S + POLAR_RADIUS * 328);
			    }
			    else if (!get_ival(Ads) && !get_ival(Fire)) 
			    {
			    		       vm_tctrl(0); 
			  	     }
			  		 if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
			  		 {
			  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
								if (get_val(POLAR_RY) > 0) 
			  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
			   					else
			   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));
			
			  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				     }   
	           }
	}
	if(!killswitch) 
	{
	if (toggle_dogz_progression && !driving_mode && !sniper_mode && get_val(Ads) >= 80) 
	{
	    if (!combo_running(AAS)) 
	    {
		    AS = PROGRESSION(AS,AAMIN + NEGI,AAMAX + POSI,AAVAL,AAS,1);
	        AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
	        combo_run(AAS);
	    }
	    if (abs(get_val(PS4_RY))> PROG_RELEASE || abs(get_val(PS4_RX)) > PROG_RELEASE) {
		    combo_stop(AAS);
		}
	}
	if (toggle_dogz_assist && !driving_mode && !sniper_mode && abs(get_val(PS4_RX)) < DoGz_ASSIST_RELEASE && abs(get_val(PS4_RY)) < DoGz_ASSIST_RELEASE) {
	    if (get_val(Ads) > 80)
	    {
		    D_AS = TRUE;
		    AIM();
	    }
	    if (event_release(Ads) || event_release(Fire)){
		   D_AS = FALSE;
		   vm_tctrl(VMCR); 
		}
	}
	// Batts is the creator of Sticky Aim, we need this in any script :D  
	if(toggle_batts_sticky && !driving_mode && !sniper_mode) 
	{
	       if(get_ival(Fire))
	           combo_run(STICKY_AIM);
	       else 
	           combo_stop(STICKY_AIM); 
	}
	/*=========== StrafeShot =============*/
	if(toggle_strafeshot) 
	{
		// Run combo
	   if(get_val(Fire))
		   combo_run(STRAFESHOT);
	   else
		   combo_stop(STRAFESHOT);
	}
	 /*== QuickScope ==*/
	if(toggle_quickscope[profile_idx] == 1) 
    {
	   if(event_press(Ads) && get_ptime(Ads) < 140)
  	       combo_run(Quick_Scope);
    }
    /*== HoldBreath ==*/
    if(toggle_holdbreath[profile_idx] == 1) 
    {
	   if(get_val(Ads))
		   set_val(Sprint, 100);
	                      
	   if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       combo_stop(CH);       
	                    
	   if(event_press(Ads)) 
	       combo_run(CH);
	  
	   if(get_val(Ads) && get_lval(Sprint)) 
	       set_val(Sprint, 0);  
	}       
    /*== Jump Shot ==*/
    if(toggle_jump_shot && !driving_mode) 
    {
       if(get_val(Fire)) 
          combo_run(JUMP_ON_SHOT); 
    } 
    
    if(toggle_enemy_ping && !driving_mode) 
    {
        if(get_val(Fire))
	         combo_run(AUTO_PING); 
	      else
	         combo_stop(AUTO_PING); 
	     
    }
    
    /*== Cancel Slide ==*/
    if(toggle_cancel_slide && !driving_mode) 
    {                                                                                                  
	   if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
	   {
		  if(event_release(Crouch))
			   combo_run(CANCEL_SLIDE) 
	   }                                 
    }   
    if(toggle_proneshot && !driving_mode)  // Prone Shot 
	{ 
	    if(get_val(Fire) && get_ptime(Fire) > Prone_Speed)  
             set_val(Crouch,100);    
    }
    if(toggle_dropshot)  // Drop Shot
    {
        if(get_val(Fire))
             combo_run(DS);
    }  
    if(toggle_bunnyhop) // Bunny Hop
    {
        if (get_ival(Jump) && get_ptime(Jump) > 200) 
             combo_run(BUNNYHOP); 
    } 
    if(toggle_cancel_plates)
    {
        if(get_ival(Swap) && get_ptime(Swap) >= 400)
           activate_cancel_plates = TRUE;

        if(activate_cancel_plates)
        {
            cancel_plates_timer += get_rtime();
            
            if(cancel_plates_timer >= 3000) 
            {
                cancel_plates_timer = 0;
                activate_cancel_plates = FALSE;
            }
            if(event_press(Ads) || event_press(Fire))
                combo_run(Cancel_Plates);
        }
    } 
    if(toggle_fastmelee) 
    {
        if(get_val(Melee)) 
			combo_run(FAST_MELEE);
			
	    if(get_val(Ads) && event_press(Melee) < 500)
			combo_stop(FAST_MELEE);
    }
    if(toggle_snacks_sens)
    {
       if(!get_val(Ads) && !get_val(Fire)) 
       { 
           USE_SENS=GEN_SENS;
       }
       else if(get_val(Ads) && !get_val(Fire)) 
       { 
           USE_SENS=ADS_SENS;
       }    
       else if(!get_val(Ads) && get_val(Fire)) 
       { 
           USE_SENS=FIRE_SENS;
       }
       else if(get_val(Ads) && get_val(Fire))
       { 
           USE_SENS=ADS_FIRE_SENS;
       }
       else if(get_val(Lethal)) 
       { 
           USE_SENS=GRENADE_SENS;
       }
       sensitivity(PS4_RY,NOT_USE,USE_SENS);
       sensitivity(PS4_RX,NOT_USE,USE_SENS);
    }
    if(toggle_cancel_reload) 
    {   
       if(event_press(Fire))
       did_shoot_before_reload = TRUE;

       if(event_press(Reload) && did_shoot_before_reload) 
       {
          reloading = TRUE;
          did_shoot_before_reload = FALSE;
       }
       if(get_val(Reload) && get_ptime(Reload) >= 250) 
       {
          reloading = FALSE;
          combo_stop(Reload_Cancel);
       }
       if(reloading)
          reloading_time += get_rtime();
          else reloading_time = 0;

       if(reloading_time > max_reload_time_for_cancel)
          reloading = FALSE;

       if(reloading_time > 0 && reloading_time <= max_reload_time_for_cancel && event_press(Fire))
          combo_run(Reload_Cancel);
       }
     }
  }  
   
/*
============================================================================================================================
   Functions() for each of the screens
============================================================================================================================
*/        
function TitleScreen (){ 
if(display_title)
{ 
         cls_oled(0); 
         SCREENSAVER = FALSE; 
         rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
         printf(center_x(get_char(MISC_TXT, 0), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 0));
         printf(center_x(get_char(MISC_TXT, 1), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 1));
        // printf(center_x(get_char(MISC_TXT, 2), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 2));
         printf(center_x(get_weapon_chars(weapon_name_idx[profile_idx]), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,WEAPONS[weapon_name_idx[profile_idx]]);

         if(profile_idx == 0) 
              printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  
         if(profile_idx == 1)
              printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 
         if(warzone_loot_profile) 
              printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29)); 
         
         display_title = FALSE;
         display_screen = TRUE; 
 }
 if(display_screen)
 {
        count_black += get_rtime();
    	if(count_black >= 10000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_screen = FALSE;
    		if(!toggle_screensaver)
    		display_screen = TRUE;
    		else
    		SCREENSAVER = TRUE; 
    	}
} 
if(SCREENSAVER) 
{ 
		DGT += get_rtime();
		if (DGT >= 100) 
		{
			SD1 += 2;
			TP1 += 1;
			TP2 -= 1;
			DGT  = 0;
		}
			DGR += get_rtime();
				
		if (DGR >= 30) 
	    {
			Y_1 += 1;
			Y_2 += 2;
			Y_3 += 3;
			Y_4 += 4;
		    Y_5 += 5;
			Y_6 += 6;
			Y_7 += 7;
			Y_8 += 8;
			DGR  = 0;
	    }
			NAME();
			MSC += get_rtime();
			
	    if(MSC >= 1000) 
		{
			MSC = 0;
			RT += 1;
	    }
		if(RT == 90) 
		{
			SCREENSAVER = 0;
			RT = 0;
			cls_oled(0);		
		}
}
if(killswitch)
     led(7);
  else
   led(profile_idx); 
}

function MainMenu(){ 
if(activeScreen == MAIN_MENU) 
{ 
	
    	  cls_oled(0);
	      rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
	      rect_oled(3, 20, 122, 20, OLED_BLACK, OLED_WHITE);
	      led(profile_idx); 
          // display Main Menu Mods
  		  printf(center_x(get_mainMenu_chars(mainMenu_idx), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,MAINMENU[mainMenu_idx]);
  		  printf(center_x(get_char(MISC_TXT, 15), OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 15));
  		  if(profile_idx == 0) 
            printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
          else if(profile_idx == 1)
            printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4));
          else if(profile_idx == 2) 
            printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29)); 
  } 
}
/* ################################## Still under improvement #########################################################################
/*======================================================================================================================================
////////////////////////////////////////////// Mod Menu Display & Toggles \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
======================================================================================================================================*/
function ModMenu(){

	if(activeScreen == MOD_MENU) 
	{ 
    	  cls_oled(0);
	      rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	  line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
    	  led(profile_idx); 
    	  
    	  display_modsNtoogles();
    	
          // display mod names
  		  printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx]);
	      // mainMenu_idx == 0  
	      toggle_legacyar[profile_idx]     = toggle(modName_idx ==  0, toggle_legacyar[profile_idx]      , 0, 1); // toggle ON/OFF
	      toggle_antirecoil[profile_idx]   = toggle(modName_idx ==  1, toggle_antirecoil[profile_idx]    , 0, 1); // toggle ON/OFF
	      toggle_cancel_reload             = toggle(modName_idx ==  2, toggle_cancel_reload              , 0, 1); // Toggle ON/OFF
	      
	      // mainMenu_idx == 1
	      toggle_rapidfire[profile_idx]    = toggle(modName_idx ==  3, toggle_rapidfire[profile_idx]     , 0, 1); // toggle ON/OFF
	      toggle_akimborf[profile_idx]     = toggle(modName_idx ==  4, toggle_akimborf[profile_idx]      , 0, 1); // toggle ON/OFF
	      toggle_burstfire[profile_idx]    = toggle(modName_idx ==  5, toggle_burstfire[profile_idx]     , 0, 1); // toggle ON/OFF
	      toggle_strafeshot                = toggle(modName_idx ==  6, toggle_strafeshot                 , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 2
	      toggle_taylorassist              = toggle(modName_idx ==  7, toggle_taylorassist               , 0, 1); // Toggle ON/OFF
	      toggle_batts_sticky              = toggle(modName_idx ==  8, toggle_batts_sticky               , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 3
	      toggle_dogz_polar_assist         = toggle(modName_idx ==  9, toggle_dogz_polar_assist          , 0, 1); // Toggle ON/OFF
	      toggle_dogz_assist               = toggle(modName_idx == 10, toggle_dogz_assist                , 0, 1); // Toggle ON/OFF
	      toggle_dogz_progression          = toggle(modName_idx == 11, toggle_dogz_progression           , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 4
	      toggle_quickscope[profile_idx]   = toggle(modName_idx == 12, toggle_quickscope[profile_idx]    , 0, 1); // Toggle ON/OFF
	      toggle_holdbreath[profile_idx]   = toggle(modName_idx == 13, toggle_holdbreath[profile_idx]    , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 5
	      toggle_enemy_ping                = toggle(modName_idx == 14, toggle_enemy_ping                 , 0, 1); // Toggle OFF/ADS/ADS & Fire
	      toggle_cancel_plates             = toggle(modName_idx == 15, toggle_cancel_plates              , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 6
	      toggle_cancel_slide              = toggle(modName_idx == 16, toggle_cancel_slide               , 0, 1); // Toggle ON/OFF
	      toggle_jump_shot                 = toggle(modName_idx == 17, toggle_jump_shot                  , 0, 1); // Toggle ON/OFF
	      toggle_dropshot                  = toggle(modName_idx == 18, toggle_dropshot                   , 0, 1); // Toggle ON/OFF
	      toggle_proneshot                 = toggle(modName_idx == 19, toggle_proneshot                  , 0, 1); // Toggle ON/OFF
	      toggle_bunnyhop                  = toggle(modName_idx == 20, toggle_bunnyhop                   , 0, 1); // Toggle ON/OFF
	      toggle_fastmelee                 = toggle(modName_idx == 21, toggle_fastmelee                  , 0, 1); // Toggle ON/OFF
	      // mainMenu_idx == 7
	      singlebutton_idx                 = toggle(modName_idx == 22, singlebutton_idx                  , 0, 8); // Toggle Switch Profile Buttons
	      Buttons                          = toggle(modName_idx == 26, Buttons                           , 0,21); 
	      toggle_snacks_sens               = toggle(modName_idx == 27, toggle_snacks_sens                , 0, 1); // Toggle ON/OFF
	      toggle_block_rumble              = toggle(modName_idx == 28, toggle_block_rumble               , 0, 1); // Toggle ON/OFF
	      weapon_name_idx[profile_idx]     = toggle(modName_idx == 29, weapon_name_idx[profile_idx]      , 0, 40); 
	      toggle_inverted_on               = toggle(modName_idx == 30, toggle_inverted_on                , 0, 1); // Toggle ON/OFF
	      toggle_screensaver               = toggle(modName_idx == 31, toggle_screensaver                , 0, 1); 
	     
	      normalbutton                     = toggle(modName_idx == 32, normalbutton                      , 0, 1); 
   } 
   // ModNames that can be used independantly on each of the profiles
   if(modName_idx >= 0 && modName_idx <= 1 && modName_idx != 2 || modName_idx >= 3 && modName_idx <= 5 || modName_idx >= 12 && modName_idx <= 13 || modName_idx == 29) 
   {
        if(profile_idx == 0) 
            printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
        else if(profile_idx == 1)
            printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4));
        else if(profile_idx == 2) 
            printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29)); 
   }
   if(modName_idx == 2 || modName_idx >= 6  && modName_idx <= 11 || modName_idx >= 14 && modName_idx <= 21) 
   {
        printf(center_x(get_char(MISC_TXT, 5), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 5));
   }
   // These are the modNames that have additional information printed on screen
   if(modName_idx == 22)
   { 
          //printf(center_x(get_char(MISC_TXT, 15), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 15));
          printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
   }
   if(modName_idx == 25)
   {
             printf(center_x(get_char(MISC_TXT, 15), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 15));
   }
   // This modName is the switch profile buttons
   if(modName_idx == 23)
   { 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 active_name = !active_name; 	
     }
     if(!active_name)
     {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!active_name) 
             profile_hold_idx[0]  += 1; 
             else 
             profile_press_idx[0] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!active_name)
             profile_hold_idx[0]  -= 1;    
             else
             profile_press_idx[0] -= 1;
         } 
             if(profile_hold_idx [0]  > 6) profile_hold_idx [0]  = 0;
             if(profile_press_idx[0]  > 8) profile_press_idx[0]  = 0; 
             if(profile_hold_idx [0]  < 0) profile_hold_idx [0]  = 6;
             if(profile_press_idx[0]  < 0) profile_press_idx[0]  = 8; 
         }
     // This modName I print the buttons on display...
     if(modName_idx == 23)
     {
             printf(center_x(get_char(MISC_TXT, 28), OLED_FONT_SMALL_WIDTH),19,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 28));
             printf(center_x(get_hold_button_chars(profile_hold_idx[0]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[profile_hold_idx[0]]);
             printf(center_x(get_press_button_chars(profile_press_idx[0]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[profile_press_idx[0]]);
             
       }
     }
     if(modName_idx == 24)
     { 
       if(event_press(PS4_UP) || event_press(PS4_DOWN))
       {
		 active_name = !active_name; 	
       }
       if(!active_name)
       {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!active_name) 
             profile_hold_idx[1]  += 1; 
             else 
             profile_press_idx[1] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!active_name)
             profile_hold_idx[1]  -= 1;    
             else
             profile_press_idx[1] -= 1;
         } 
             if(profile_hold_idx [1]  > 6) profile_hold_idx [1]  = 0;
             if(profile_press_idx[1]  > 8) profile_press_idx[1]  = 0; 
             if(profile_hold_idx [1]  < 0) profile_hold_idx [1]  = 6;
             if(profile_press_idx[1]  < 0) profile_press_idx[1]  = 8; 
     }
     if(modName_idx == 24)
     { 
             printf(center_x(get_hold_button_chars(profile_hold_idx[1]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[profile_hold_idx[1]]);
             printf(center_x(get_press_button_chars(profile_press_idx[1]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[profile_press_idx[1]]);
     }  
   }
   if(modName_idx == 32)
   {
             printf(center_x(get_char(MISC_TXT, 30), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 30));
            // printf(center_x(get_char(MISC_TXT, 15), OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 15));
   }
   
 }

/*====================================================================================================================================
//////////////////////////////////////////// Display Edit Menu & Display Adjustable Values \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
====================================================================================================================================*/
function EditMenu(){ 
if(activeScreen == EDIT_MENU)
{
      cls_oled(0); 
      rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
      line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
      printf(center_x(get_valName_chars(valName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES[valName_idx]);
     

if(valName_idx == 0) {
      Display_Values(valName_idx,antirecoil_vertical[profile_idx]);
      antirecoil_vertical[profile_idx] = Edit_Values(antirecoil_vertical[profile_idx],0,99,1,10);    
}
if(valName_idx == 1) {
      Display_Values(valName_idx,antirecoil_horizontal[profile_idx]);
      antirecoil_horizontal[profile_idx] = Edit_Values(antirecoil_horizontal[profile_idx],-99,99,1,10);
}
if(valName_idx == 2) {
      Display_Values(valName_idx,antirecoil_start[profile_idx]);
      antirecoil_start[profile_idx] = Edit_Values(antirecoil_start[profile_idx],0,99,1,10);    
}
if(valName_idx == 3) {
      Display_Values(valName_idx,antirecoil_end[profile_idx]);
      antirecoil_end[profile_idx] = Edit_Values(antirecoil_end[profile_idx],0,99,1,10);
}
if(valName_idx == 4) {
      Display_Values(valName_idx,antirecoil_time[profile_idx]);
      antirecoil_time[profile_idx] = Edit_Values(antirecoil_time[profile_idx],0,99,1,10);
}
if(valName_idx == 5) { 
      Display_Values(valName_idx,antirecoilH_start[profile_idx]);
      antirecoilH_start[profile_idx] = Edit_Values(antirecoilH_start[profile_idx] ,-99 , 99 , 1 , 10); 
}
if(valName_idx == 6) { 
      Display_Values(valName_idx,antirecoilH_end[profile_idx]);
      antirecoilH_end[profile_idx] = Edit_Values(antirecoilH_end[profile_idx] ,-99 , 99 , 1 , 10); 
}      
if(valName_idx == 7) { 
      Display_Values(valName_idx,antirecoilH_time[profile_idx]);
      antirecoilH_time[profile_idx] = Edit_Values(antirecoilH_time[profile_idx] ,0 , 99 , 1 , 10); 
} 
if(valName_idx == 8) {
      Display_Values(valName_idx,max_reload_time_for_cancel);
      max_reload_time_for_cancel = Edit_Values(max_reload_time_for_cancel,0,5000,10,100);
}
if(valName_idx == 9) {
      Display_Values(valName_idx,rate_of_fire[profile_idx]);
      rate_of_fire[profile_idx] = Edit_Values(rate_of_fire[profile_idx],0,40,1,10);
}
if(valName_idx == 10) {
      Display_Values(valName_idx,akimbo_rate_of_fire );
      akimbo_rate_of_fire = Edit_Values(akimbo_rate_of_fire ,0,25,1,10);
}
if(valName_idx == 11) { 
      Display_Values(valName_idx,burstfire_hold); 
      burstfire_hold = Edit_Values(burstfire_hold , 0 , 990  , 10 , 100);
      }
if(valName_idx == 12) { 
      Display_Values(valName_idx,burstfire_release); 
      burstfire_release = Edit_Values(burstfire_release , 0 , 990  , 10 , 100);
      }
if(valName_idx == 13) { 
      Display_Values(valName_idx,strafeShot_time);
      strafeShot_time = Edit_Values(strafeShot_time , 0,  9990 , 10 , 100 );
     }
if(valName_idx == 14) { 
      Display_Values(valName_idx,RADIUS2);
      RADIUS2 = Edit_Values(RADIUS2,0,99,1,10);
}
if(valName_idx == 15) {
      Display_Values(valName_idx,STEPS);
      STEPS = Edit_Values(STEPS,0,99,1,10);
}
if(valName_idx == 16) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
} 
if(valName_idx == 17) { 
      Display_Values(valName_idx,stickyaim_size);
      stickyaim_size = Edit_Values(stickyaim_size,0,99,1,10);
}
if(valName_idx == 18) { 
      Display_Values(valName_idx,stickyaim_time);
      stickyaim_time = Edit_Values(stickyaim_time,0,99,1,10);
}
if(valName_idx == 19) {
      Display_Values(valName_idx,RADIUS);
      RADIUS = Edit_Values(RADIUS,0,99,1,10);    
}
if(valName_idx == 20) {
      Display_Values(valName_idx,ANGLE);
      ANGLE = Edit_Values(ANGLE,0,99,1,10);    
}
if(valName_idx == 21) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
}
if(valName_idx == 22) {
      Display_Values(valName_idx,POLAR_BOOST);
      POLAR_BOOST = Edit_Values(POLAR_BOOST,0,30,1,10);
}
if(valName_idx == 23) {
       Display_Values(valName_idx,POLAR_SHAKE);
       POLAR_SHAKE = Edit_Values(POLAR_SHAKE,0,50,1,10);    
}
if(valName_idx == 24) {
      Display_Values(valName_idx,A_B_S);
      A_B_S = Edit_Values(A_B_S,0,5,1,10);
}
if(valName_idx == 25) {
      Display_Values(valName_idx,POLAR_RELEASE);
      POLAR_RELEASE = Edit_Values(POLAR_RELEASE,0,50,1,10);
}
if(valName_idx == 26) {
      Display_Values(valName_idx,D___AS);
      D___AS = Edit_Values(D___AS,-35,35,1,10);
}
if(valName_idx == 27) {
      Display_Values(valName_idx,D_AS1);
      D_AS1 = Edit_Values(D_AS1,-35,35,1,10);
}     
if(valName_idx == 28) { 
      Display_Values(valName_idx,DoGz_ASSIST_RELEASE);
      DoGz_ASSIST_RELEASE = Edit_Values(DoGz_ASSIST_RELEASE,0,100,1,10);
}
if(valName_idx == 29) {
      Display_Values(valName_idx,POSI);
      POSI = Edit_Values(POSI,-30,30,1,10);
}
if(valName_idx == 30) {
      Display_Values(valName_idx,NEGI);
      NEGI = Edit_Values(NEGI,-30,30,1,10);
} 
if(valName_idx == 31) {
      Display_Values(valName_idx,WA);
      WA = Edit_Values(WA,2,99,1,10);
}
if(valName_idx == 32) {
      Display_Values(valName_idx,PROG_RELEASE);
      PROG_RELEASE = Edit_Values(PROG_RELEASE,8,90,1,10);
}
if(valName_idx == 33) { 
      Display_Values(valName_idx,quickscopedelay);
      quickscopedelay = Edit_Values(quickscopedelay,0,600,1,10);
}
if(valName_idx == 34 || valName_idx == 35 || valName_idx == 36 || valName_idx == 37) 
{
      printf(center_x(get_char(MISC_TXT, 27), OLED_FONT_SMALL_WIDTH),19,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 27)); 
} 
if(valName_idx == 34)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 qt_active_name = !qt_active_name; 	
     }
     if(!qt_active_name)
     {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_val(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!qt_active_name) 
             quick_toggle_f_hold_idx[0] += 1; 
             else 
             quick_toggle_s_hold_idx[0] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!qt_active_name)
             quick_toggle_f_hold_idx[0] -= 1;    
             else
             quick_toggle_s_hold_idx[0] -= 1;
         } 
         
             if(quick_toggle_f_hold_idx[0]  > 6) quick_toggle_f_hold_idx[0] = 0;
             if(quick_toggle_s_hold_idx[0]  > 8) quick_toggle_s_hold_idx[0] = 0; 
             if(quick_toggle_f_hold_idx[0]  < 0) quick_toggle_f_hold_idx[0] = 6;
             if(quick_toggle_s_hold_idx[0]  < 0) quick_toggle_s_hold_idx[0] = 8; 
       
     }
     if(valName_idx == 34)
     { 
             printf(center_x(get_hold_button_chars(quick_toggle_f_hold_idx[0]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[quick_toggle_f_hold_idx[0]]);
             printf(center_x(get_press_button_chars(quick_toggle_s_hold_idx[0]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[quick_toggle_s_hold_idx[0]]);
     }
}
if(valName_idx == 35)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 qt_active_name = !qt_active_name; 	
     }
     if(!qt_active_name)
     {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!qt_active_name) 
             quick_toggle_f_hold_idx[1] += 1; 
             else 
             quick_toggle_s_hold_idx[1] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!qt_active_name)
             quick_toggle_f_hold_idx[1] -= 1;    
             else
             quick_toggle_s_hold_idx[1] -= 1;
         } 
         
             if(quick_toggle_f_hold_idx[1]  > 6) quick_toggle_f_hold_idx[1] = 0;
             if(quick_toggle_s_hold_idx[1]  > 8) quick_toggle_s_hold_idx[1] = 0; 
             if(quick_toggle_f_hold_idx[1]  < 0) quick_toggle_f_hold_idx[1] = 6;
             if(quick_toggle_s_hold_idx[1]  < 0) quick_toggle_s_hold_idx[1] = 8; 
             
     }
     if(valName_idx == 35)
     { 
             printf(center_x(get_hold_button_chars(quick_toggle_f_hold_idx[1]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[quick_toggle_f_hold_idx[1]]);
             printf(center_x(get_press_button_chars(quick_toggle_s_hold_idx[1]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[quick_toggle_s_hold_idx[1]]);
     }
}  
if(valName_idx == 36)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 qt_active_name = !qt_active_name; 	
     }
     if(!qt_active_name)
     {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!qt_active_name) 
             quick_toggle_f_hold_idx[2] += 1; 
             else 
             quick_toggle_s_hold_idx[2] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!qt_active_name)
             quick_toggle_f_hold_idx[2] -= 1;    
             else
             quick_toggle_s_hold_idx[2] -= 1;
         }
         
             if(quick_toggle_f_hold_idx[2]  > 6) quick_toggle_f_hold_idx[2] = 0;
             if(quick_toggle_s_hold_idx[2]  > 8) quick_toggle_s_hold_idx[2] = 0; 
             if(quick_toggle_f_hold_idx[2]  < 0) quick_toggle_f_hold_idx[2] = 6;
             if(quick_toggle_s_hold_idx[2]  < 0) quick_toggle_s_hold_idx[2] = 8; 
             
     }
     if(valName_idx == 36)
     { 
             printf(center_x(get_hold_button_chars(quick_toggle_f_hold_idx[2]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[quick_toggle_f_hold_idx[2]]);
             printf(center_x(get_press_button_chars(quick_toggle_s_hold_idx[2]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[quick_toggle_s_hold_idx[2]]);
     }
   }
if(valName_idx == 37)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 qt_active_name = !qt_active_name; 	
     }
     if(!qt_active_name)
     {
		 name_width = OLED_FONT_SMALL_WIDTH;
		 name_font = OLED_FONT_SMALL;
		 name_y = 50;
		 cat_width = OLED_FONT_MEDIUM_WIDTH;
		 cat_font = OLED_FONT_MEDIUM;
	 }
	 else
	 {
		 name_width = OLED_FONT_MEDIUM_WIDTH;
		 name_font = OLED_FONT_MEDIUM;
		 name_y = 43;
		 cat_width = OLED_FONT_SMALL_WIDTH;
		 cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(Ads))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!qt_active_name) 
             quick_toggle_f_hold_idx[3]+= 1; 
             else 
             quick_toggle_s_hold_idx[3] += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!qt_active_name)
             quick_toggle_f_hold_idx[3] -= 1;    
             else
             quick_toggle_s_hold_idx[3] -= 1;
         } 
         
             if(quick_toggle_f_hold_idx[3]  > 6) quick_toggle_f_hold_idx[3] = 0;
             if(quick_toggle_s_hold_idx[3]  > 8) quick_toggle_s_hold_idx[3] = 0; 
             if(quick_toggle_f_hold_idx[3]  < 0) quick_toggle_f_hold_idx[3] = 6;
             if(quick_toggle_s_hold_idx[3]  < 0) quick_toggle_s_hold_idx[3] = 8; 
             
     }
     if(valName_idx == 37)
     { 
             printf(center_x(get_hold_button_chars(quick_toggle_f_hold_idx[3]), cat_width),30,cat_font,OLED_WHITE,HOLD_BUTTONS[quick_toggle_f_hold_idx[3]]);
             printf(center_x(get_press_button_chars(quick_toggle_s_hold_idx[3]), name_width),name_y,name_font,OLED_WHITE,PRESS_BUTTONS[quick_toggle_s_hold_idx[3]]);
     }  
}
if(valName_idx == 38) {
      Display_Values(valName_idx,GEN_SENS);
      GEN_SENS = Edit_Values(GEN_SENS,0,327,1,10);    
}
if(valName_idx == 39) {
      Display_Values(valName_idx,ADS_SENS);
      ADS_SENS = Edit_Values(ADS_SENS,0,327,1,10);    
}
if(valName_idx == 40) { 
      Display_Values(valName_idx,FIRE_SENS);
      FIRE_SENS = Edit_Values(FIRE_SENS,0,327,1,10);
}
if(valName_idx == 41) {
      Display_Values(valName_idx,ADS_FIRE_SENS);
      ADS_FIRE_SENS = Edit_Values(ADS_FIRE_SENS,0,327,1,10);
}
if(valName_idx == 42) {
      Display_Values(valName_idx,GRENADE_SENS);
      GRENADE_SENS = Edit_Values(GRENADE_SENS,0,327,1,10);    
    }
  }
} 

function display_modsNtoogles() {
 
SCREENSAVER = FALSE; 

if(activeScreen == TITLE_SCREEN)
{
 		  
 		  cls_oled(0); 
 		  rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	  line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
   		  printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx])
   		  
if(modName_idx >= 0 && modName_idx <= 1 && modName_idx != 2 || modName_idx >= 3 && modName_idx <= 5 || modName_idx >= 12 && modName_idx <= 13 || modName_idx == 29) 
{
        if(profile_idx == 0) 
            printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
        else if(profile_idx == 1)
            printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4));
        else if(profile_idx == 2) 
            printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29)); 
}
if(modName_idx == 2 || modName_idx >= 6  && modName_idx <= 11 || modName_idx >= 14 && modName_idx <= 21) 
{
        printf(center_x(get_char(MISC_TXT, 5), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 5));
       }
    }	  
 }
/*======== Function to limit values per mods ===========*/
function mod_limits(min_limit, max_limit) { 

	  if(valName_idx > max_limit) valName_idx = min_limit;
	  if(valName_idx < min_limit) valName_idx = max_limit; 		
}
function menu_limits(min_limit, max_limit) { 

	  if(modName_idx > max_limit) modName_idx = min_limit;
	  if(modName_idx < min_limit) modName_idx = max_limit; 		
}
/*================= Function to edit values ===========================*/
function Edit_Values(value,min,max,increase_value,increase_value_more) {  
if(get_ival(Ads))  
{
     if(event_press(PS4_RIGHT))
     {
	     value += increase_value;                           
	     if(value > max ) value = max;   	               	            
     }                                                                       
     if(event_press(PS4_LEFT)) 
     {
	     value -= increase_value;                           
	     if(value < min ) value = min; 	        
	 }
     if(event_press(PS4_UP))
	 {
		 value += increase_value_more;
		 if(value > max ) value = max; 
	 }
	 if(event_press(PS4_DOWN))
	 {
		 value -= increase_value_more;
		 if(value < min ) value = min;
	 }
   }
   return value;  
}
/*====== Display Values ======*/
function Display_Values(idx,value) {
  
   if(valName_idx == idx)
   {
      if(idx == 4 || idx == 7)
    	 number_to_string(value * 100, find_digits(value * 100) );
      else
         number_to_string(value, find_digits(value));             
   }
}
function toggle(f_idx, f_val, f_min, f_max) {
    if(f_idx)
    {
        if(event_press(PS4_UP))
        {
            f_val = cycle(f_val++, f_min, f_max);
            ScreenActive(MOD_MENU); 
        }
        
        if(event_press(PS4_DOWN))
        {
            f_val = cycle(f_val--, f_min, f_max);
            ScreenActive(MOD_MENU);    
        }
        if(modName_idx == 22) 
        {
             printf(center_x(get_press_button_chars(singlebutton_idx), OLED_FONT_MEDIUM_WIDTH),40,OLED_FONT_MEDIUM,OLED_WHITE,PRESS_BUTTONS[singlebutton_idx]);
        } 
        else if(modName_idx == 26)
        {
             printf(center_x(get_button_chars(Buttons), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER[Buttons]);
        } 
        else if(modName_idx == 29)
        {
             printf(center_x(get_weapon_chars(weapon_name_idx[profile_idx]), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,WEAPONS[weapon_name_idx[profile_idx]]);
        }
        else
        {
        // Display ON OFF
    	if(f_val == 1)
    		printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
   		else if(f_val == 0)
    		printf(center_x(sizeof(_OFF) - 1,OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM, OLED_WHITE, _OFF[0]);
        } 
     
    }    
    return f_val;
}
function cycle(f_val, f_lo, f_hi) {
    if(f_val > f_hi) return f_lo;
    if(f_val < f_lo) return f_hi;
    return f_val;
}
function Quick_Toggle(f_hold, f_press, f_val, f_string) {  
	
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			modName_idx = f_string;
			
			if(f_val == 0){
	
			f_val = 1;
			combo_run(RUMBLE_ON);
			
			}
			else
			{
			f_val = 0;
			
			combo_run(RUMBLE_OFF);
			
			}
		    display_modsNtoogles();
			combo_run(QUICK_TOGGLE); 
			if(f_val == 1)
    		    printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
   		    else if(f_val == 0)
    		     printf(center_x(sizeof(_OFF) - 1,OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM, OLED_WHITE, _OFF[0]);
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}
function AIM() {
	if (D_AS) 
	{
	   if (D_AS && VM) 
	   {
		   vm_tctrl(-2);
	   }
		   D__AS ++;
		   
	   if (D__AS >= D___AS)  D__AS = D__AS1;
	
		   D__AS1 --;
		
	   if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
	
		   D__AS ++;
		   
	   if (get_val(Ads)) 
	   {	
		   set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		   set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	   }
	   if (get_val(Fire)) 
	   {	
		   set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		   set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	   }
	}
	   else
	     vm_tctrl(0); 
} 
function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if (FLOW) 
{
    VALUE += INCREMENT;
    
    if (VALUE <= MAX)  
    return VALUE;
    
  if (VALUE > MAX) 
  {
        ID = 0;
    return VALUE - INCREMENT;
  }
	}
    else 
    {
       VALUE -= INCREMENT;    
    if (VALUE >= MIN)  
        return VALUE;
if (VALUE < MIN) 
{
   	 ID = 1;
     return VALUE + INCREMENT;
    }
   } 
   return FALSE;    
}
int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     	
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }

function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}
combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
function p_complete() { 

    i_cnt++;
    if(i_cnt > antirecoil_time[profile_idx] * 10) 
    {
        i_cnt = antirecoil_time[profile_idx] * 10;
        return 1;
    }    
    return 0;
}  
function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  
function y_val() { 

    v = get_val(10);
    
    if(abs(v) < 10)
        v = 0;
        
    if(abs(v) > ar_y + 5)
        return v;
        
    return v + (ar_y * invert);           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > antirecoilH_time[profile_idx] * 10) 
    {
        i_cnt_h = antirecoilH_time[profile_idx] * 10 ;
        return 1;
    }
    return 0;
}   
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) 
    {
    	i_num_h = 0;
    	ar_x += i_val_h;
    }
    return ar_x;
} 
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}  
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; 
define MISC_TXT = 0 
function get_mainMenu_chars(f_idx){
	if (MAINMENU[f_idx + 1] != -1) 
		return MAINMENU[f_idx + 1] - MAINMENU[f_idx] - 1;
	return sizeof(MAINMENU) - MAINMENU[f_idx];		
}
function get_modName_chars(f_idx){
	if (MODNAMES[f_idx + 1] != -1) 
		return MODNAMES[f_idx + 1] - MODNAMES[f_idx] - 1;
	return sizeof(MODNAMES) - MODNAMES[f_idx];		
}
function get_valName_chars(f_idx){
	if (VALNAMES[f_idx + 1] != -1) 
		return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
	return sizeof(VALNAMES) - VALNAMES[f_idx];		
}
function get_button_chars(f_idx){
	if (CONTROLLER[f_idx + 1] != -1) 
		return CONTROLLER[f_idx + 1] - CONTROLLER[f_idx] - 1;
	return sizeof(CONTROLLER) - CONTROLLER[f_idx];		
}
function get_char(f_array_idx1,f_idx){

  if(f_array_idx1 == MISC_TXT)
     {
        if(MISC[f_idx + 1] != -1) 
  	    return MISC[f_idx + 1] - MISC[f_idx] - 1;
  		return sizeof(MISC) - MISC[f_idx];
    }
  	return -1;
}
function get_strings(f_array_idx1,f_idx){
	if(f_array_idx1 >= 0 && f_array_idx1 <= 17)
		return MISC[f_idx];
    return -1;
}
function get_hold_button_chars(f_idx){
	if (HOLD_BUTTONS[f_idx + 1] != -1) 
		return HOLD_BUTTONS[f_idx + 1] - HOLD_BUTTONS[f_idx] - 1;
	return sizeof(HOLD_BUTTONS) - HOLD_BUTTONS[f_idx];		
}
 
 function get_press_button_chars(f_idx){
	if (PRESS_BUTTONS[f_idx + 1] != -1) 
		return PRESS_BUTTONS[f_idx + 1] - PRESS_BUTTONS[f_idx] - 1;
	return sizeof(PRESS_BUTTONS) - PRESS_BUTTONS[f_idx];		
}
function get_weapon_chars(f_idx){
	if (WEAPONS[f_idx + 1] != -1) 
		return WEAPONS[f_idx + 1] - WEAPONS[f_idx] - 1;
	return sizeof(WEAPONS) - WEAPONS[f_idx];		
}

function QT_function() {
    
    for (i = 0; i < QUICK_TOGGLE_COUNT; i++) 
    {
        qt_f_hold[i] = misc_hold_buttons[clamp(quick_toggle_f_hold_idx[i], 0, sizeof(misc_hold_buttons))];
        qt_s_hold[i] = misc_press_buttons[clamp(quick_toggle_s_hold_idx[i],0, sizeof(misc_press_buttons))];
    }
    return;
    
}

function profile_buttons() {
    for (i = 0; i < PROFILE_IDX_COUNT; i++){
    
        profile_hold[i]  = misc_hold_buttons[clamp(profile_hold_idx[i],  0, sizeof(misc_hold_buttons))];
        profile_press[i] = misc_press_buttons[clamp(profile_press_idx[i], 0, sizeof(misc_press_buttons))];}
        press        = misc_press_buttons[clamp(singlebutton_idx, 0, sizeof(misc_press_buttons))]; 
        
    return; 
} 

int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;

combo QUICK_TOGGLE { 
 wait(1500)
 ScreenActive(TITLE_SCREEN);
 display_title = TRUE; 
 reset_leds(); 
 }
combo KILLSWITCH {
    cls_oled(OLED_BLACK)
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 6));  
    printf(center_x(get_char(MISC_TXT, 7), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 7));  
    printf(center_x(get_char(MISC_TXT, 8), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 8));
    wait(1000)
    call(RUMBLE_ON);
    wait(130);
    call(RUMBLE_ON);
    set_ledx(1, 1);
    ScreenActive(TITLE_SCREEN);
    display_title = TRUE; 
} 
combo KILLSWITCH_OFF { 
    cls_oled(OLED_BLACK); 
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));  
    wait(2000)
    call(RUMBLE_OFF);
    wait(130)
    ScreenActive(TITLE_SCREEN); 
    display_title = TRUE; 
}
combo RUMBLE_ON {						
   set_ledx(2, 2);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   wait(100);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   reset_leds(); 
}
combo SAVE_RUMBLE_ON {
   set_ledx(2,profile_idx);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   wait(100);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   //reset_leds(); 
}
combo RUMBLE_OFF {						
   set_ledx(1, 1);
   set_rumble(RUMBLE_A, 50);
   wait(300);
   reset_rumble();
   wait(400);
   reset_leds(); 
}
combo SAVE { 
   cls_oled(0);						
   printf(center_x(get_char(MISC_TXT, 9), OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 9));  
   wait(2000);
   ScreenActive(TITLE_SCREEN);
   display_title = TRUE; 
   call(SAVE_RUMBLE_ON);
   wait(150);
   call(SAVE_RUMBLE_ON);
   }
   
   
combo DRIVING_MODE { 
   cls_oled(OLED_BLACK);
   printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
   printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
   wait(3000);
   call(RUMBLE_ON);
   wait(150);
   display_title = TRUE; 
}
combo DRIVING_OFF {
   cls_oled(OLED_BLACK);
   printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
   wait(3000);
   call(RUMBLE_OFF);
   wait(150); 
   display_title = TRUE; 
} 
combo SNIPER_MODE { 
   cls_oled(OLED_BLACK); 
   printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
   printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
   wait(3000);
   call(RUMBLE_ON);
   wait(150);
   display_title = TRUE; 
}
combo SNIPER_OFF { 
   cls_oled(OLED_BLACK); 
   printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
   wait(3000);
   call(RUMBLE_OFF);
   wait(150);
   display_title = TRUE; 
}	
combo ANTIRECOIL {
// Vertical
   AntirecoilVertical = get_val(PS4_RY) + antirecoil_vertical[profile_idx];  
   if(AntirecoilVertical > 100) AntirecoilVertical = 100;
   if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) +  5)
   set_val(PS4_RY, (AntirecoilVertical * invert));
// Horizontal
   AntirecoilHorizontal = get_val(PS4_RX) + antirecoil_horizontal[profile_idx];
   if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
   if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx])  + 5)
   set_val(PS4_RX, AntirecoilHorizontal);
}
combo Cancel_Plates { 
    set_val(Melee,100);
    wait(20);
    activate_cancel_plates = FALSE;
    cancel_plates_timer = 0; 
}
combo RAPIDFIRE { 
    wait(hold_time);
    set_val(Fire, 0);
    wait(rest_time);
    }	
combo BLINK {
   led(profile_idx);
   wait(led_on);
   led(7);
   wait(led_off);
}
combo BURSTFIRE { 
    wait(hold_time);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
    }
combo STRAFESHOT { // StrafeShot
    set_val(PS4_LX, 100);
    wait(strafeShot_time);
    wait(50);
    set_val(PS4_LX, -100);
    wait(strafeShot_time);
    wait(20);
}
    
combo ARF {
    set_val(Fire,100);
    set_val(Ads,100);
    wait(40);
    set_val(Fire,0);
    set_val(Ads,0);
    wait(akimbo_rate_of_fire);}
    
combo STICKY_AIM {
   set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
   wait(stickyaim_time);
   set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
   set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
   wait(stickyaim_time);
   set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
   wait(stickyaim_time);
   set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
   set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
   wait(stickyaim_time);
}
combo CANCEL_SLIDE {              
   set_val(Crouch, 100);          
   wait(120);                         
   set_val(Crouch, 0);            
   wait(60);                          
   set_val(Crouch, 100);          
   wait(50);                          
   set_val(Crouch, 100);          
   set_val(Jump, 100);           
   wait(60);                          
   set_val(Crouch, 0);            
   set_val(Jump, 100);          
   wait(10);                        
   set_val(Jump, 0);
   /*wait(23);
   set_val(Crouch, 100);
   wait(23);
   set_val(Crouch, 100);
   wait(21);
   set_val(Crouch, 0);
   wait(100);
   */
} 
combo AUTO_PING{
   set_val(Ping,100);
   wait(20)
   set_val(Ping,0);
   wait(20)
   set_val(Ping,100);
   wait(20)
   set_val(Ping,0); 
}
combo Quick_Scope {
   set_val(Ads,100);
   wait(quickscopedelay); 
   set_val(Ads,100);
   set_val(Fire,100);
   wait(40);
   set_val(Ads,100);
   wait(40); 
}         
 combo CH {
	set_val(Sprint,0);
	wait(60);
	set_val(Sprint,100);
	wait(110);
	set_val(Sprint,0);
	wait(110);}

combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}
combo AAS{
	set_val(PS4_RY, 1 * - AS);
	wait(AW);
	set_val(PS4_RX, 1 * - AS);
	wait(AW);
	set_val(PS4_RY,AS);
	wait(AW);
	set_val(PS4_RX,AS);
	wait(AW);
}
combo DS {
    set_val(Crouch,100);
    wait(40);
    set_val(Crouch,0);
    wait(DS_Speed);
}
combo BUNNYHOP{
    set_val(Jump, 100);
    wait(30);
    set_val(Jump, 0);
    wait(30);
    set_val(Jump, 100);
    wait(30);
    set_val(Jump, 0);
    wait(30);
}
combo FAST_MELEE {
    set_val(Melee, 100);
    wait(35);
    set_val(Melee, 0);
    wait(30);  
}
combo JUMP_ON_SHOT {
    set_val(Jump,100);
    wait(100);
}
combo Reload_Cancel {
 set_val(XB1_Y,100);
 wait(20);
 wait(20)
 set_val(XB1_Y,100);
 wait(20);
 reloading = FALSE; }
function block_function() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(Jump       , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(Reload    , 0 ); 	set_val(Swap        , 0);
set_val(Tactical   , 0 );   set_val(Lethal    , 0 ); 	set_val(Sprint    , 0 ); 	set_val(Melee       , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}
const uint8 BUTTONS[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19
	
	
function Buttons(Type) {
	
	Fire     = BUTTONS[Type][0];
	Ads      = BUTTONS[Type][1];
	Lethal   = BUTTONS[Type][2];
	Tactical = BUTTONS[Type][3];
	Jump     = BUTTONS[Type][4];
	Crouch   = BUTTONS[Type][5];
	Melee    = BUTTONS[Type][6];
	Sprint   = BUTTONS[Type][7];
	Reload   = BUTTONS[Type][8];
	Swap     = BUTTONS[Type][9];
	Ping     = BUTTONS[Type][10];
	
}

int driving_mode,sniper_mode;
/*
============================================================================================================================
   OLED SCREENS
============================================================================================================================
*/
define TITLE_SCREEN   = 0
define MAIN_MENU      = 1;
define MOD_MENU       = 2;
define EDIT_MENU      = 3;
//--defined names for columns makes it easier when writing the code
//--SCREEN_DATA[][] Columns
define ID          = 0;      	//--screen ID from list above
define TIMEOUT     = 1;        	//--screen times out if no activity 
define LED         = 2;       	//--cycle leds during this menu  
define PARENT      = 3;       	//--return to lastScreen when B/Circle pressed
define BLOCK_INPUT = 4;		    //--block all controler input 

//--common items for all screens
const int8 SCREEN_DATA[][] = {
//    ID              TIMEOUT        LED              PARENT	  BLOCK_INPUT	 
    {TITLE_SCREEN,       TRUE,		 TRUE,	          FALSE,		 FALSE},
    {MAIN_MENU,          TRUE,		 TRUE,	           TRUE,	      TRUE},
    {MOD_MENU,           TRUE,		 TRUE,	           TRUE,	      TRUE},
    {EDIT_MENU,          TRUE,		 TRUE,	           TRUE,	      TRUE}  
    
};
int activeScreen,lastScreen;
/*
============================================================================================================================
   ScreenActive()
      one function to set passed ID as the active screen
============================================================================================================================
*/
function ScreenActive(screenID) {
    lastScreen = activeScreen;
    activeScreen = screenID;
}
function  NAME(){
		cls_oled(0);
		combo_run(RACE);
		combo_run(RN);
	if (Y_1 > 64)  
		Y_1 =  0;
	if (Y_2 > 64)  
		Y_2 =  0;
	if (Y_3 > 64)  
		Y_3 =  0;
	if (Y_4 > 64)  
		Y_4 =  0;
	if (Y_5 > 64)  
		Y_5 =  0;
	if (Y_6 > 64)  
		Y_6 =  0;
	if (Y_7 > 64)  
		Y_7 =  0;
	if (Y_8 > 64)  
		Y_8 =  0;
	if (SD1 > 105) 
		SD1 = -50;
	if (TP1 > 45)  
		TP1 =  0;
	if (TP2 < 0)   
		TP2 = 55;
		putc_oled(1,RN1);
		puts_oled(X_1,Y_1,0,1,1);
		putc_oled(1,RN2);
		puts_oled(X_2,Y_2,0,1,1);
		putc_oled(1,RN3);
		puts_oled(X_3,Y_3,0,1,1);
		putc_oled(1,RN4);
		puts_oled(X_4,Y_4,0,1,1);
		putc_oled(1,RN5);
		puts_oled(X_5,Y_5,0,1,1);
		putc_oled(1,RN6);
		puts_oled(X_6,Y_6,0,1,1);
		putc_oled(1,RN7);
		puts_oled(X_7,Y_7,0,1,1);
		putc_oled(1,RN8);
		puts_oled(X_8,Y_8,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
		putc_oled(1,SSA2);
		puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
		putc_oled(1,SSA3);
		puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
		putc_oled(1,SSA4);
		puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
		putc_oled(1,SSA5);
		puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
		putc_oled(1,SSA6);
		puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
		putc_oled(1,SSA7);
		puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
		putc_oled(1,SSA8);
		puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1);
		putc_oled(1,SSA9);
		puts_oled(SSMU9 + SD1,TP1 + 18,0,1,1);
		putc_oled(1,SSA10);
		puts_oled(SSMU10 + SD1,TP2 + 20,0,1,1);
		putc_oled(1,SSA11);
		puts_oled(SSMU11 + SD1,TP1 + 22,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU12 + SD1,TP2 + 24,0,1,1);
		putc_oled(1,SSA13);
		puts_oled(SSMU13 + SD1,TP1 + 26,0,1,1);
		putc_oled(1,SSA14);
		puts_oled(SSMU14 + SD1,TP2 + 28,0,1,1);
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	//int i;
	int c,c_val;
	int RT,MSC,SD1,DGT,DGR,TP1,TP2;
// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
//position range [0..15]
function pack_usigned(int pvar, int ret, int position, int number_of_bits)
{
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}

//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits)
{
	mask = 0;
	ret = 0;
	
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}

//position range [0..1]   |  ret range = [-127..127]
function pack_int8_to_int16(int var1, int var2)
{
	ret = 0;
	
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}

	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
	
	return ret;
}
//position range [0..1]   |  ret range = [-127..127]
function unpack_int16_to_int8(int pvar, int var)
{
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	
	return ret;
}
function Load(){ 

    pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
    toggle_legacyar[0]           = unpack_usigned(pval_data, 0,  1);
    toggle_legacyar[1]           = unpack_usigned(pval_data, 1,  1);
    toggle_legacyar[2]           = unpack_usigned(pval_data, 2,  1);
    toggle_antirecoil[0]         = unpack_usigned(pval_data, 3,  1);
    toggle_antirecoil[1]         = unpack_usigned(pval_data, 4,  1);
    toggle_antirecoil[2]         = unpack_usigned(pval_data, 5,  1);
    toggle_rapidfire[0]          = unpack_usigned(pval_data, 6,  1);
    toggle_rapidfire[1]          = unpack_usigned(pval_data, 7,  1);
    toggle_rapidfire[2]          = unpack_usigned(pval_data, 8,  1);
    toggle_akimborf[0]           = unpack_usigned(pval_data, 9,  1);
    toggle_akimborf[1]           = unpack_usigned(pval_data, 10, 1);
    toggle_akimborf[2]           = unpack_usigned(pval_data, 11, 1);
    toggle_taylorassist          = unpack_usigned(pval_data, 12, 1);
    toggle_batts_sticky          = unpack_usigned(pval_data, 13, 1);
    
    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    toggle_quickscope[0]         = unpack_usigned(pval_data, 0,  1);
    toggle_quickscope[1]         = unpack_usigned(pval_data, 1,  1);
    toggle_quickscope[2]         = unpack_usigned(pval_data, 2,  1);
    toggle_holdbreath[0]         = unpack_usigned(pval_data, 3,  1);
    toggle_holdbreath[1]         = unpack_usigned(pval_data, 4,  1);
    toggle_holdbreath[2]         = unpack_usigned(pval_data, 5,  1);
    toggle_cancel_plates         = unpack_usigned(pval_data, 6,  1);
    toggle_cancel_slide          = unpack_usigned(pval_data, 7,  1);
    toggle_jump_shot             = unpack_usigned(pval_data, 8,  1);
    toggle_dropshot              = unpack_usigned(pval_data, 9,  1);
    toggle_proneshot             = unpack_usigned(pval_data, 10, 1);
    toggle_bunnyhop              = unpack_usigned(pval_data, 11, 1);
    toggle_fastmelee             = unpack_usigned(pval_data, 12, 1);
    toggle_dogz_polar_assist     = unpack_usigned(pval_data, 13, 1);
    
    pval_data = get_pvar(SPVAR_3, 1, 32767, 0);
    
    toggle_dogz_assist           = unpack_usigned(pval_data, 0,  1);
    toggle_dogz_progression      = unpack_usigned(pval_data, 1,  1);
    toggle_inverted_on           = unpack_usigned(pval_data, 2,  1);
    toggle_cancel_reload         = unpack_usigned(pval_data, 3,  1);
    toggle_burstfire[0]          = unpack_usigned(pval_data, 4,  1);
    toggle_burstfire[1]          = unpack_usigned(pval_data, 5,  1);
    toggle_burstfire[2]          = unpack_usigned(pval_data, 6,  1);
    toggle_strafeshot            = unpack_usigned(pval_data, 7,  1);
    toggle_screensaver           = unpack_usigned(pval_data, 8,  1);
    toggle_snacks_sens           = unpack_usigned(pval_data, 9,  1); 
    toggle_block_rumble          = unpack_usigned(pval_data,10,  1); 
    normalbutton                 = unpack_usigned(pval_data,11,  1); 
    
    pval_data = get_pvar(SPVAR_4, 1, 32767, 0);                                              
    antirecoil_vertical[0]       = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_vertical[1]       = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_5, -32767, 32767, 0);                                              
    antirecoil_horizontal[0]     = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_horizontal[1]     = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_6, 1, 32767, 0);                                              
    antirecoil_start[0]          = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_start[1]          = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_7, 1, 32767, 0);                                              
    antirecoil_end[0]            = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_end[1]            = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_8, 1, 32767, 0);                                              
    antirecoil_time[0]           = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_time[1]           = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_9,-32767, 32767, 0);                                              
    antirecoilH_start[0]         = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_start[1]         = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_10,-32767, 32767, 0);                                              
    antirecoilH_end[0]           = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_end[1]           = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_11,1, 32767, 0);                                              
    antirecoilH_time[0]          = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_time[1]          = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_12, 1, 32767, 0);                                              
    antirecoil_vertical[2]       = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_start[2]          = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_13, 1, 32767, 0);                                              
    antirecoil_end[2]            = unpack_int16_to_int8(pval_data, 0);  
    antirecoil_time[2]           = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_14,-32767, 32767, 0);                                              
    antirecoilH_start[2]         = unpack_int16_to_int8(pval_data, 0);   
    antirecoil_horizontal[2]     = unpack_int16_to_int8(pval_data, 1);
    
    antirecoilH_end[2]           = get_pvar(SPVAR_15, -99, 99, 0); 
    antirecoilH_time[2]          = get_pvar(SPVAR_16, -99, 99, 0);	
    
    pval_data = get_pvar(SPVAR_17, 1, 32767, pack_int8_to_int16(1,1));                                 
    rate_of_fire[0]              = unpack_int16_to_int8(pval_data, 0);                  
    rate_of_fire[1]              = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_18, 1, 32767, pack_int8_to_int16(1,1));                                 
    akimbo_rate_of_fire[1]       = unpack_int16_to_int8(pval_data, 0);                  
    akimbo_rate_of_fire[2]       = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_19, 1, 32767, pack_int8_to_int16(1,1));                                 
    rate_of_fire[2]              = unpack_int16_to_int8(pval_data, 0);                  
    akimbo_rate_of_fire[0]       = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_20, 1,32767,pack_int8_to_int16(20,30));
    RADIUS2                      = unpack_int16_to_int8(pval_data, 0);  
    STEPS                        = unpack_int16_to_int8(pval_data, 1);  
    
    pval_data = get_pvar(SPVAR_21, 1, 32767,pack_int8_to_int16(0,25));
    toggle_enemy_ping            = unpack_int16_to_int8(pval_data, 0);  
    STEADY_AIM                   = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_22, 1, 32767,pack_int8_to_int16(8,20));
    RADIUS                       = unpack_int16_to_int8(pval_data, 0);  
    ANGLE                        = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_23, 1, 32767,pack_int8_to_int16(5,20));
    POLAR_BOOST                  = unpack_int16_to_int8(pval_data, 0);  
    POLAR_SHAKE                  = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_24, 1, 32767,pack_int8_to_int16(2,15));
    A_B_S                        = unpack_int16_to_int8(pval_data, 0);  
    POLAR_RELEASE                = unpack_int16_to_int8(pval_data, 1); 
   
    pval_data = get_pvar(SPVAR_25,1, 32767,pack_int8_to_int16(22,30));        
    stickyaim_size               = unpack_int16_to_int8(pval_data, 0);                                  
    stickyaim_time               = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_26, 1, 32767,pack_int8_to_int16(0,50));        
    Buttons                      = unpack_int16_to_int8(pval_data, 0);                                  
    DoGz_ASSIST_RELEASE          = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_27, 1, 32767, pack_int8_to_int16(0,0));        
    quick_toggle_f_hold_idx[0]   = unpack_int16_to_int8(pval_data, 0);                                  
    quick_toggle_s_hold_idx[0]   = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_28, 1, 32767, pack_int8_to_int16(0,0));        
    quick_toggle_f_hold_idx[1]   = unpack_int16_to_int8(pval_data, 0);                                  
    quick_toggle_s_hold_idx[1]   = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_29, 1, 32767, pack_int8_to_int16(0,0));        
    quick_toggle_f_hold_idx[2]   = unpack_int16_to_int8(pval_data, 0);                                  
    quick_toggle_s_hold_idx[2]   = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_30, 1, 32767 ,pack_int8_to_int16(0,0));        
    quick_toggle_f_hold_idx[3]   = unpack_int16_to_int8(pval_data, 0);                                  
    quick_toggle_s_hold_idx[3]   = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_31, 1, 32767 ,pack_int8_to_int16(0,0));        
    profile_hold_idx[0]          = unpack_int16_to_int8(pval_data, 0);                                  
    profile_hold_idx[1]          = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_32, 1, 32767, pack_int8_to_int16(0,0));        
    profile_press_idx[0]         = unpack_int16_to_int8(pval_data, 0);                                  
    profile_press_idx[1]         = unpack_int16_to_int8(pval_data, 1);
    
    burstfire_hold             = get_pvar(SPVAR_33,   1,   999,  150); 
   	burstfire_release          = get_pvar(SPVAR_34,   1,   999,  150); 
   	strafeShot_time            = get_pvar(SPVAR_35,   1,   999,  500); 
   // D___AS                     = get_pvar(SPVAR_36, -35,    35,    5); 
   /// D_AS1                      = get_pvar(SPVAR_37, -35,    35,   -5): 
    quickscopedelay            = get_pvar(SPVAR_38,  50,   600,  350); 
    max_reload_time_for_cancel = get_pvar(SPVAR_39,   1,  5000, 2000);
    singlebutton_idx           = get_pvar(SPVAR_40,   0,     8,    0);
    GEN_SENS                   = get_pvar(SPVAR_41,  1, 327,100);
    ADS_SENS                   = get_pvar(SPVAR_42,  1, 327,100);
    FIRE_SENS                  = get_pvar(SPVAR_43,  1, 327,100);
    ADS_FIRE_SENS              = get_pvar(SPVAR_44,  1, 327,100);
    GRENADE_SENS               = get_pvar(SPVAR_45,  1, 327,100);
    pval_data = get_pvar(SPVAR_47, 1, 32767 ,pack_int8_to_int16(0,0));        
    weapon_name_idx[0]         = unpack_int16_to_int8(pval_data, 0);                                  
    weapon_name_idx[1]         = unpack_int16_to_int8(pval_data, 1);
    weapon_name_idx[2]         = get_pvar(SPVAR_48,  0,   40,  0); 
} 
function Save(){ 

  combo_run(SAVE)
   
  pval_data = pack_usigned(pval_data, toggle_legacyar[0],   0, 1);
  pval_data = pack_usigned(pval_data, toggle_legacyar[1],   1, 1);
  pval_data = pack_usigned(pval_data, toggle_legacyar[2],   2, 1);
  pval_data = pack_usigned(pval_data, toggle_antirecoil[0], 3, 1); 
  pval_data = pack_usigned(pval_data, toggle_antirecoil[1], 4, 1); 
  pval_data = pack_usigned(pval_data, toggle_antirecoil[2], 5, 1);  
  pval_data = pack_usigned(pval_data, toggle_rapidfire[0],  6, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[1],  7, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[2],  8, 1);
  pval_data = pack_usigned(pval_data, toggle_akimborf[0],   9, 1); 
  pval_data = pack_usigned(pval_data, toggle_akimborf[1],  10, 1); 
  pval_data = pack_usigned(pval_data, toggle_akimborf[2],  11, 1);
  pval_data = pack_usigned(pval_data, toggle_taylorassist, 12, 1);
  pval_data = pack_usigned(pval_data, toggle_batts_sticky,  13,1);
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_usigned(pval_data, toggle_quickscope[0],      0,1);
  pval_data = pack_usigned(pval_data, toggle_quickscope[1],      1,1);
  pval_data = pack_usigned(pval_data, toggle_quickscope[2],      2,1);
  pval_data = pack_usigned(pval_data, toggle_holdbreath[0],      3,1);
  pval_data = pack_usigned(pval_data, toggle_holdbreath[1],      4,1);
  pval_data = pack_usigned(pval_data, toggle_holdbreath[2],      5,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_plates,      6,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_slide,       7,1);
  pval_data = pack_usigned(pval_data, toggle_jump_shot,          8,1);
  pval_data = pack_usigned(pval_data, toggle_dropshot,           9,1);
  pval_data = pack_usigned(pval_data, toggle_proneshot,         10,1);
  pval_data = pack_usigned(pval_data, toggle_bunnyhop,          11,1);
  pval_data = pack_usigned(pval_data, toggle_fastmelee,         12,1);
  pval_data = pack_usigned(pval_data, toggle_dogz_polar_assist, 13,1);
  set_pvar(SPVAR_2,pval_data);
  
  pval_data = pack_usigned(pval_data, toggle_dogz_assist,       0,1);
  pval_data = pack_usigned(pval_data, toggle_dogz_progression,  1,1);
  pval_data = pack_usigned(pval_data, toggle_inverted_on,       2,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_reload,     3,1);
  pval_data = pack_usigned(pval_data, toggle_burstfire[0],      4,1);
  pval_data = pack_usigned(pval_data, toggle_burstfire[1],      5,1);
  pval_data = pack_usigned(pval_data, toggle_burstfire[2],      6,1);
  pval_data = pack_usigned(pval_data, toggle_strafeshot,        7,1);
  pval_data = pack_usigned(pval_data, toggle_screensaver,       8,1); 
  pval_data = pack_usigned(pval_data, toggle_snacks_sens,       9,1); 
  pval_data = pack_usigned(pval_data, toggle_block_rumble,     10,1);
  pval_data = pack_usigned(pval_data, normalbutton,            11,1);
  set_pvar(SPVAR_3,pval_data);
  
  // AR Temp Values                                                          
  pval_data = pack_int8_to_int16(antirecoil_vertical[0],antirecoil_vertical[1]);    
  set_pvar(SPVAR_4,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_horizontal[0],antirecoil_horizontal[1]);     
  set_pvar(SPVAR_5,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_start[0],antirecoil_start[1]);     
  set_pvar(SPVAR_6,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_end[0],antirecoil_end[1]);     
  set_pvar(SPVAR_7,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_time[0],antirecoil_time[1]);     
  set_pvar(SPVAR_8,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_start[0],antirecoilH_start[1]);     
  set_pvar(SPVAR_9,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_end[0],antirecoilH_end[1]);     
  set_pvar(SPVAR_10,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_time[0],antirecoilH_time[1]);     
  set_pvar(SPVAR_11,pval_data);
 
  pval_data = pack_int8_to_int16(antirecoil_vertical[2],antirecoil_start[2]);    
  set_pvar(SPVAR_12,pval_data);  
  
  pval_data = pack_int8_to_int16(antirecoil_end[2],antirecoil_time[2]);     
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_int8_to_int16(antirecoilH_start[2],antirecoil_horizontal[2]);     
  set_pvar(SPVAR_14,pval_data);  
  
  set_pvar(SPVAR_15 ,antirecoilH_end[2]);
  set_pvar(SPVAR_16 ,antirecoilH_time[2]);
  
  pval_data = pack_int8_to_int16(rate_of_fire[0],rate_of_fire[1]);         
  set_pvar(SPVAR_17,pval_data);
  
  pval_data = pack_int8_to_int16(akimbo_rate_of_fire[0],akimbo_rate_of_fire[1]);         
  set_pvar(SPVAR_18,pval_data);
  
  pval_data = pack_int8_to_int16(akimbo_rate_of_fire[2],rate_of_fire[2]);         
  set_pvar(SPVAR_19,pval_data);
  
  pval_data = pack_int8_to_int16(RADIUS2,STEPS);
  set_pvar(SPVAR_20,pval_data); 
  
  pval_data = pack_int8_to_int16(toggle_enemy_ping,STEADY_AIM);
  set_pvar(SPVAR_21,pval_data); 
  
  pval_data = pack_int8_to_int16(RADIUS,ANGLE);
  set_pvar(SPVAR_22,pval_data);
  
  pval_data = pack_int8_to_int16(POLAR_BOOST,POLAR_SHAKE);
  set_pvar(SPVAR_23,pval_data); 
  
  pval_data = pack_int8_to_int16(A_B_S,POLAR_RELEASE);
  set_pvar(SPVAR_24,pval_data); 
  
  pval_data = pack_int8_to_int16(stickyaim_size,stickyaim_time);
  set_pvar(SPVAR_25,pval_data); 
  
  pval_data = pack_int8_to_int16(Buttons,DoGz_ASSIST_RELEASE);
  set_pvar(SPVAR_26,pval_data); 
  
  pval_data = pack_int8_to_int16(quick_toggle_f_hold_idx[0],quick_toggle_s_hold_idx[0]);
  set_pvar(SPVAR_27,pval_data);
  
  pval_data = pack_int8_to_int16(quick_toggle_f_hold_idx[1],quick_toggle_s_hold_idx[1]);
  set_pvar(SPVAR_28,pval_data);
  
  pval_data = pack_int8_to_int16(quick_toggle_f_hold_idx[2],quick_toggle_s_hold_idx[2]);
  set_pvar(SPVAR_29,pval_data);
  
  pval_data = pack_int8_to_int16(quick_toggle_f_hold_idx[3],quick_toggle_s_hold_idx[3]);
  set_pvar(SPVAR_30,pval_data);
  
  pval_data = pack_int8_to_int16(profile_hold_idx[0],profile_hold_idx[1]);
  set_pvar(SPVAR_31,pval_data);
  
  pval_data = pack_int8_to_int16(profile_press_idx[0],profile_press_idx[1]);
  set_pvar(SPVAR_32,pval_data);
  
  set_pvar(SPVAR_33,burstfire_hold );   
  set_pvar(SPVAR_34,burstfire_release );                                                      
  set_pvar(SPVAR_35,strafeShot_time   ); 
 // set_pvar(SPVAR_36,D___AS);
  //set_pvar(SPVAR_37,D_AS1);
  set_pvar(SPVAR_38,quickscopedelay);
  set_pvar(SPVAR_39,max_reload_time_for_cancel); 
  set_pvar(SPVAR_40,singlebutton_idx); 
  set_pvar(SPVAR_41,GEN_SENS);
  set_pvar(SPVAR_42,ADS_SENS);
  set_pvar(SPVAR_43,FIRE_SENS);
  set_pvar(SPVAR_44,ADS_FIRE_SENS);
  set_pvar(SPVAR_45,GRENADE_SENS);
  pval_data = pack_int8_to_int16(weapon_name_idx[0],weapon_name_idx[1]);
  set_pvar(SPVAR_47,pval_data);
  set_pvar(SPVAR_48,weapon_name_idx[2]); 
 
} 