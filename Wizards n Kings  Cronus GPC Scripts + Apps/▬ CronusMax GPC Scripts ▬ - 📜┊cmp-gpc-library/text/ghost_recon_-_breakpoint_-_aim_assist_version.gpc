// GPC Online Library
// ghost_recon_-_breakpoint_-_aim_assist_version.gpc

/* 
  .,-:::::/    ::   .:      ...      .::::::.::::::::::::    :::::::..  .,::::::   .,-:::::     ...   :::.    :::.
,;;-'````'    ,;;   ;;,  .;;;;;;;.  ;;;`    `;;;;;;;;''''    ;;;;``;;;; ;;;;'''' ,;;;'````'  .;;;;;;;.`;;;;,  `;;;
[[[   [[[[[[/,[[[,,,[[[ ,[[     \[[,'[==/[[[[,    [[          [[[,/[[['  [[cccc  [[[        ,[[     \[[,[[[[[. '[[
"$$c.    "$$ "$$$"""$$$ $$$,     $$$  '''    $    $$          $$$$$$c    $$""""  $$$        $$$,     $$$$$$ "Y$c$$
 `Y8bo,,,o88o 888   "88o"888,_ _,88P 88b    dP    88,         888b "88bo,888oo,__`88bo,__,o,"888,_ _,88P888    Y88
   `'YMUP"YMM MMM    YMM  "YMMMMMP"   "YMmMY"     MMM         MMMM   "W" """"YUMMM "YUMMMMMP" "YMMMMMP" MMM     YM
   
       :::::::. :::::::..  .,::::::   :::.      :::  .  ::::::::::.    ...     ::::::.    :::.::::::::::::               
        ;;;'';;';;;;``;;;; ;;;;''''   ;;`;;     ;;; .;;,.`;;;```.;;;.;;;;;;;.  ;;;`;;;;,  `;;;;;;;;;;;''''               
        [[[__[[\.[[[,/[[['  [[cccc   ,[[ '[[,   [[[[[/'   `]]nnn]]',[[     \[[,[[[  [[[[[. '[[     [[                    
        $$""""Y$$$$$$$$c    $$""""  c$$$cc$$$c _$$$$,      $$$""   $$$,     $$$$$$  $$$ "Y$c$$     $$                    
       _88o,,od8P888b "88bo,888oo,__ 888   888,"888"88o,   888o    "888,_ _,88P888  888    Y88     88,                   
       ""YUMMMP" MMMM   "W" """"YUMMMYMM   ""`  MMM "MMP"  YMMMb     "YMMMMMP" MMM  MMM     YM     MMM   

Version: 1.3
Author: noozbar
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

    ______           __                           
   / ____/__  ____ _/ /___  __________  _____   _ 
  / /_  / _ \/ __ `/ __/ / / / ___/ _ \/ ___/  (_)
 / __/ /  __/ /_/ / /_/ /_/ / /  /  __(__  )  _   
/_/    \___/\__,_/\__/\__,_/_/   \___/____/  (_)  
                                                 

	3 independent weapon profiles with
		- AntiRecoil Vertical adjustable on the fly
		- AntiRecoil Horizontal adjustable on the fly
		- RapidFire with toggle ON/OFF on the fly (RapidFire can be activated for one of 3 weapons, 2 of 3, 3 weapons or none)
		- Rate of Fire adjustable on the fly
		- AIM Assist with toggle ON/OFF on the fly (AIM Abuse can be activated for one of 3 weapons, 2 of 3, 3 weapons or none)
		- Save edited values (Antirecoil Vertical and Horizontal, Rate of Fire) and RapidFire and AIM Abuse ON/OFF status of each profile
	Quick Swap Item
	Hair Trigger
	Swap Trigger/Bumper	/!\ if enable, every button combinations for the features are ALSO swapped /!\
	Battery warning: 3 small fast vibrations every 5 seconds if you have less than 10% battery left

 
																INSTRUCTIONS PS4/XBOX:

  
	Color indications:  
		Primary weapon = color Blue (if RapidFire is enable, LED should flash)
		Secondary weapon = color Green (if RapidFire is enable, LED should flash)
		Handgun = color Red (if RapidFire is enable, LED should flash)
	  
	  
	Rumble indications:
		* 2 small fast vibrations = mod is OFF
		* 1 big vibration = mod is ON
		* 3 small fast vibrations every 5 seconds = your controller have less than 10% battery left 
		* 3 big vibrations = you have save all values
		
		
	Switch between each profiles:
		* Tap TRIANGLE/Y to switch between Primary and Secondary
		* Double tap TRIANGLE/Y to switch to handgun (single tap to return to previous weapon)
		* Hold DOWN and tap UP to sync weapon with color


	Edit AntiRecoil values:
		* Hold L2/LT + Hold Cross/A to edit Antirecoil values 
			Tap UP to increase Vertical Antirecoil (+1 each tap on UP) (min val = 0, max val = 100, controller rumble at min/max values)
			Tap DOWN to decrease Vertical Antirecoil (-1 each tap on DOWN) (min val = 0, max val = 100, controller rumble at min/max values)
			Tap RIGHT to compensate Horizontal recoil to the right (+1 each tap on RIGHT) (min val = -100, max val = 100, controller rumble at min/max values)
			Tap LEFT to compensate Horizontal recoil to the left (+1 each tap on LEFT) (min val = -100, max val = 100, controller rumble at min/max values)
     
     
	RapidFire toggle ON/OFF for the current weapon (RapidFire can be activated for one of 3 weapons, 2 of 3, 3 weapons or none)
		* Hold L2/LT + Hold Circle/B
			Tap R2/RT to enable or disable RapidFire for the current weapon (1 big vibration = mod is ON, 2 small fast vibrations = mod is OFF)
        

	Edit Rate of Fire values (only if RapidFire is enable) :
		* Hold L2/LT + Hold Circle/B to edit Rate of Fire values
			Tap UP to increase Rate of Fire (+1 each tap on UP) (min val = 0, max val = 25, controller rumble at min/max values)
			Tap DOWN to decrease Rate of Fire (-1 each tap on DOWN) (min val = 0, max val = 25, controller rumble at min/max values)
    	        
    	        
	AIM Assist toggle ON/OFF for the current weapon (AIM Abuse can be activated for one of 3 weapons, 2 of 3, 3 weapons or none)
		* Hold L2/LT
			Double tap R3/RS to enable or disable AIM Abuse (1 big vibration = mod is ON, 2 small fast vibrations = mod is OFF)
  
	Save ALL
		* Hold L2/LT
			Tap OPTIONS/MENU (3 big vibrations and LED flash)
			
	Quick Swap Item
		* Hold R1/RB
			Tap UP for 12 o'clock item
			Tap DOWN for 6 o'clock item
			Tap SQUARE/X for 10 o'clock item
			Tap CROSS/A for 8 o'clock item
			Tap TRIANGLE/Y for 2 o'clock item
			Tap CIRCLE/B for 4 o'clock item
    	        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

// PRIMARY WEAPON:

// ANTIRECOIL:
int AR_Primary = 50; 			// Antirecoil Vertical
int ARH_Primary = 0; 			// AntiRecoil Horizontal

// RAPIDFIRE:
int RF_Primary_ON = FALSE;	    // Set TRUE to enable RapidFire by default on Primary else set FALSE
int RoF_Primary = 8;			// Range: 1 to 25 RPS (Round/s)

// AIM ASSIST:
int AA_Primary = 1;				// 1 = enable by defaut, 0 = disable by defaut

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// SECONDARY WEAPON:

// ANTIRECOIL:
int AR_Secondary = 20; 			// Antirecoil Vertical
int ARH_Secondary = 0; 			// AntiRecoil Horizontal

// RAPIDFIRE:
int RF_Secondary_ON = FALSE;	// Set TRUE to enable RapidFire by default on Secondary else set FALSE
int RoF_Secondary = 10;			// Range: 1 to 25 RPS (Round/s)

// AIM ASSIST:
int AA_Secondary = 0;			// 1 = enable by defaut, 0 = disable by defaut

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// HANDGUN:

// ANTIRECOIL:
int AR_Handgun = 30; 			// Antirecoil Vertical
int ARH_Handgun = 0; 			// AntiRecoil Horizontal

// RAPIDFIRE:
int RF_Handgun_ON = TRUE; 	// Set TRUE to enable RapidFire by default on Handgun else set FALSE
int RoF_Handgun = 6;			// Range: 1 to 25 RPS (Round/s)

// AIM ASSIST:
int AA_Handgun = 0;				// 1 = enable by defaut, 0 = disable by defaut

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// AntiRecoil Vertical Release 
int ARV_Release = 10;	// Minimum value = 10 (this value is added to the AntiRecoil value of the current weapon)

// AntiRecoil Horizontal Release
int ARH_Release = 10;	// Minimum value = 10 (this value is added to the AntiRecoil value of the current weapon)


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//AIM ASSIST values
int aa			= 20; // Decrease if shake
int aa_delay	= 40; // Increase if game lag

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Swap Trigger/Bumper
int Swapped_ON = FALSE;	// Set TURE if you want to swap trigger/bumper, else set FALSE

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
////////// Do not modify //////////

define Off       = 0;
define Blue      = 1;
define Red       = 2;
define Green     = 3;
define Pink      = 4;
define SkyBlue   = 5;
define Yellow    = 6;
define White     = 7;
 

int bit; 
int double_tap;
int weapon;
int handgun;
int ARV;
int ARH;
int arv;
int arh;
int idx;
int ms;
int wx_v; 
int wy_v;
int run_rumble;
int rumble_side;
int rumble_time;
int RATE_OF_FIRE;
int hold_time;
int rest_time;
 
init {
    AR_Primary = get_pvar(SPVAR_1, -100, 100, 0);      RoF_Primary = get_pvar(SPVAR_7, 1, 25, 1);        AA_Primary = get_pvar(SPVAR_13, 0, 1, 0);
    AR_Secondary = get_pvar(SPVAR_2, -100, 100, 0);    RoF_Secondary = get_pvar(SPVAR_8, 1, 25, 1);      AA_Secondary = get_pvar(SPVAR_14, 0, 1, 0);
    AR_Handgun = get_pvar(SPVAR_3, -100, 100, 0);      RoF_Handgun = get_pvar(SPVAR_9, 1, 25, 1);        AA_Handgun = get_pvar(SPVAR_15, 0, 1, 0);
	ARH_Primary = get_pvar(SPVAR_4, -100, 100, 0);     RF_Primary_ON = get_pvar(SPVAR_10, 0, 1, 0);   
	ARH_Secondary = get_pvar(SPVAR_5, -100, 100, 0);   RF_Secondary_ON = get_pvar(SPVAR_11, 0, 1, 0); 
	ARH_Handgun = get_pvar(SPVAR_6, -100, 100, 0);     RF_Handgun_ON = get_pvar(SPVAR_12, 0, 1, 0);
}
 
main { 
// Device Monitor
    set_val(TRACE_1, ARV);
    set_val(TRACE_2, ARH);
    set_val(TRACE_3, RATE_OF_FIRE);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//Rumble start and restart
	if(run_rumble && !combo_running(Vibrate))
    {
		run_rumble -= 1;
		combo_restart(Vibrate);
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
//Battery warning
    if(get_battery() <= 1) 
    {
        ms += get_rtime();
            if(ms == 5000)
            {
                Rumble(FALSE, 3);
                ms = 0;
            }
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Double tap 
    if(double_tap) 
        double_tap -= get_rtime();
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Hair Trigger
    deadzone(PS4_L2,PS4_R2,99,99);
    
// Swap Trigger/bumper
	if(Swapped_ON)
	{
		swap(PS4_R1, PS4_R2);
    	swap(PS4_L1, PS4_L2);
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   
// Switch
    if(!get_val(PS4_R1) && event_press(PS4_TRIANGLE))
    { 
        weapon=!weapon; 
        handgun = FALSE;
 
        if(double_tap) 
        { 
            handgun = TRUE ; 
            weapon = !weapon;
        }
            else
                double_tap = 200; 
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Panic
	if(!get_val(PS4_L2) && get_val(PS4_DOWN))
	{
	    set_val(PS4_TRIANGLE, 0);
	    
	    if(event_press(PS4_TRIANGLE))
	    	weapon=!weapon;
	}
	
    if(get_val(PS4_L2))
    {
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Save
    	if(event_press(PS4_OPTIONS))
    	{
        	set_pvar(SPVAR_1, AR_Primary);    set_pvar(SPVAR_7, RoF_Primary);         set_pvar(SPVAR_13, AA_Primary);
       		set_pvar(SPVAR_2, AR_Secondary);  set_pvar(SPVAR_8, RoF_Secondary);       set_pvar(SPVAR_14, AA_Secondary);
        	set_pvar(SPVAR_3, AR_Handgun);    set_pvar(SPVAR_9, RoF_Handgun);         set_pvar(SPVAR_15, AA_Handgun);
        	set_pvar(SPVAR_4, ARH_Primary);   set_pvar(SPVAR_10, RF_Primary_ON);
        	set_pvar(SPVAR_5, ARH_Secondary); set_pvar(SPVAR_11, RF_Secondary_ON);
        	set_pvar(SPVAR_6, ARH_Handgun);   set_pvar(SPVAR_12, RF_Handgun_ON);
        	Rumble(TRUE, 3);                     combo_run(Flash);                       
        }
        set_val(PS4_OPTIONS, 0);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~     
// AntiRecoil        
    	if(get_val(PS4_R2))
        	combo_run(AntiRecoil);
           		else 
                	combo_stop(AntiRecoil);       
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//RapidFire Calculation 
    hold_time = 500 / RATE_OF_FIRE;
    rest_time = hold_time - 20;
    if(rest_time < 0) rest_time = 0;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Quick Swap
    if(get_val(PS4_R1))
    {
    // TRIANGLE/Y for 2 o'clock item
		if(event_press(PS4_TRIANGLE))
		{
			wx_v = 75; 
			wy_v = -75;
        }
 
	// SQUARE/X for 10 o'clock weapon
		if(event_press(PS4_SQUARE))
		{
			wx_v = -75; 
			wy_v =  -75;
		}
 
	// CROSS/A for 8 o'clock item
		if(event_press(PS4_CROSS))
		{
			wx_v =  -75; 
			wy_v = 75;
		}
 
	// CIRCLE/B for 4 o'clock item
		if(event_press(PS4_CIRCLE))
		{
			wx_v = 75; 
			wy_v = 75;
		}
 
	// UP for 12 o'clock item
		if(event_press(PS4_UP))
		{
			wx_v = 0; 
			wy_v = -90;
		}
 
	// UP for 6 o'clock item
		if(event_press(PS4_DOWN))
		{
			wx_v = 0; 
			wy_v = 90;
		}
 
		if(wx_v || wy_v) 
			combo_run(Quick_Swap);
 
	// Block buttons
		set_val(PS4_SQUARE, 0); set_val(PS4_CROSS, 0);    set_val(PS4_UP, 0);
		set_val(PS4_CIRCLE, 0); set_val(PS4_TRIANGLE, 0); set_val(PS4_DOWN, 0);
    
    }
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Weapon
    if(handgun) 
    {
        AR_Handgun = edit_val (0, PS4_L2, PS4_CROSS, AR_Handgun, PS4_UP, PS4_DOWN, 0, 100); 
        ARH_Handgun = edit_val (1, PS4_L2, PS4_CROSS, ARH_Handgun, PS4_RIGHT, PS4_LEFT, -100, 100);
 
        if(get_val(PS4_L2) && get_val(PS4_CIRCLE) && event_press(PS4_R2))
        {
        	RF_Handgun_ON = !RF_Handgun_ON;
        	Rumble(RF_Handgun_ON, 0);
        }

        if(RF_Handgun_ON)
        {
            RoF_Handgun = edit_val (2, PS4_L2, PS4_CIRCLE, RoF_Handgun, PS4_UP, PS4_DOWN, 1, 25);  
            RF ();
        }
        
        if(AA_Toggle ())
        {
        	AA_Handgun = !AA_Handgun;
        	Rumble(AA_Handgun, 0);
        }
        
        if(AA_Handgun)
        	AA ();
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        else
		{
	    // Primary weapon
            if(!weapon) 
            {
                AR_Primary = edit_val (0, PS4_L2, PS4_CROSS, AR_Primary, PS4_UP, PS4_DOWN, 0, 100);
                ARH_Primary = edit_val (1, PS4_L2, PS4_CROSS, ARH_Primary, PS4_RIGHT, PS4_LEFT, -100, 100);

                if(get_val(PS4_L2) && get_val(PS4_CIRCLE) && event_press(PS4_R2))
                {
                    RF_Primary_ON = !RF_Primary_ON;
                    Rumble(RF_Primary_ON, 0);
                   }

                if(RF_Primary_ON)
                {
                    RoF_Primary = edit_val (2, PS4_L2, PS4_CIRCLE, RoF_Primary, PS4_UP, PS4_DOWN, 1, 25); 
                    RF ();
                }
        
        		if(AA_Toggle ())
        		{
        			AA_Primary = !AA_Primary;
        			Rumble(AA_Primary, 0);
        		}
        
        		if(AA_Primary)
        			AA ();   
            }
            //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	    // Secondary weapon
            if(weapon) 
            {
                AR_Secondary = edit_val (0, PS4_L2, PS4_CROSS, AR_Secondary, PS4_UP, PS4_DOWN, 0, 100);
                ARH_Secondary = edit_val (1, PS4_L2, PS4_CROSS, ARH_Secondary, PS4_RIGHT, PS4_LEFT, -100, 100);

                if(get_val(PS4_L2) && get_val(PS4_CIRCLE) && event_press(PS4_R2))
                {
                    RF_Secondary_ON = !RF_Secondary_ON;
                    Rumble(RF_Secondary_ON, 0);
                }

                if(RF_Secondary_ON)
                {
                    RoF_Secondary =  edit_val (2, PS4_L2, PS4_CIRCLE, RoF_Secondary, PS4_UP, PS4_DOWN, 1, 25); 
                    RF ();
               }
        
        		if(AA_Toggle ())
        		{
        			AA_Secondary = !AA_Secondary;
        			Rumble(AA_Secondary, 0);
        		}
        
        		if(AA_Secondary)
        			AA (); 
            }
		}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// AR Release        
	if(abs(get_val(PS4_RY)) > (ARV + ARV_Release) || abs(get_val(PS4_RX)) > (ARH + ARH_Release)) 
		combo_stop (AntiRecoil);
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Color
    if(handgun) LED(Red);
        else if(!weapon) LED(Blue);
            else LED(Green); 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           
} // main end


combo AA_XY {
    set_val(PS4_RY,xy_val(PS4_RY,aa));
    wait(aa_delay)
    set_val(PS4_RX,xy_val(PS4_RX,aa));
    set_val(PS4_LX,xy_val(PS4_LX,aa));
    wait(aa_delay)
    set_val(PS4_RY,xy_val(PS4_RY,inv(aa)));
    wait(aa_delay)
    set_val(PS4_RX,xy_val(PS4_RX,inv(aa)));
    set_val(PS4_LX,xy_val(PS4_LX,inv(aa)));
    wait(aa_delay)
}

combo Quick_Swap {
	set_val(PS4_R1, 100);
	wait(200);
	set_val(PS4_R1, 100);
    set_val(PS4_RX,wx_v);
    set_val(PS4_RY,wy_v);
    wait(100);
    wx_v = 0;
    wy_v = 0;
}
    
combo RAPID_FIRE {
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time);
}
 
combo Vibrate {
    set_rumble(rumble_side, 100);
    wait(rumble_time);
    reset_rumble();
    wait(100);
}
 
combo Flash {
    wait(300);
    LED(Off);
    wait(500);
}
 
combo AntiRecoil { 
    arv = get_val(10) + ARV;
    if(arv > 100) arv = 100;
    set_val(10, arv);
    arh = get_val(9) + ARH;
    if(arh > 100) arh = 100;
    set_val(9, arh);
}
 
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < aa + 1)
        return f_val;
    return get_val(f_axis); 
}

function edit_val (f_idx, f_btn1, f_btn2, f_var, f_inc, f_dec, f_min, f_max) { 
    idx = f_idx; 
 
    if(idx == 0)
        ARV = f_var; 
    if(idx == 1)
        ARH =  f_var; 
    if(idx == 2)
        RATE_OF_FIRE = f_var; 
 
    if(get_val(f_btn1) && get_lval(f_btn2))
    {
        if(event_press(f_inc))
            f_var += 1;        
        if(event_press(f_dec))
            f_var -= 1;
        set_val(f_inc, 0); set_val(f_dec, 0);

        if(f_var < f_min)
        {
            f_var = f_min;
            Rumble(1, 0);
        }
        if(f_var > f_max)
        {
            f_var = f_max;
            Rumble(1, 0);
        }
        set_val(f_btn2, 0);
    }
    return f_var;
}
 
function RF () {
    combo_run(Flash);
 
    if(get_val(PS4_R2))
        combo_run(RAPID_FIRE);
        else 
            combo_stop(RAPID_FIRE);
}

function AA_Toggle () {
    if(get_val(PS4_L2) && event_press(PS4_R3))
    {
        if (double_tap)
        	return TRUE;
        	
            else
                double_tap = 300;
    }
    return FALSE;
}  

function AA () {
	if(get_lval(PS4_L2) == 100 && get_ptime(PS4_L2) > 500)
		combo_run(AA_XY);
	if(get_lval(PS4_CIRCLE) || get_lval(PS4_CROSS))
			combo_stop(AA_XY);
	
}

function Rumble (f_var, f_num) {	
    if(f_var)						
 	{
 		if(!f_num)
			run_rumble = 1;
			else
				run_rumble = f_num;
		
		rumble_side = RUMBLE_A;
		rumble_time = 300;
	}
		else 
		{
 			if(!f_num)
				run_rumble = 2;
				else
					run_rumble = f_num;
				
    		rumble_side= RUMBLE_B;
    		rumble_time = 150;
    	}
}

function LED(color) {  //stimpson's LED colors
    for(bit=0;bit<3;bit++) {
        set_led(bit,test_bit(color,bit));
    }
}