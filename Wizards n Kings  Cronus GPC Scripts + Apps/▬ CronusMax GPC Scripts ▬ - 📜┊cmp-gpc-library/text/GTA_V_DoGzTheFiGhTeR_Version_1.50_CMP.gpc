/*
     _______            ______           ________ __                ________ __  ______  __       ________          _______  __          
    |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \|  \         
    | ▓▓▓▓▓▓▓\ ______ |  ▓▓▓▓▓▓\________ \▓▓▓▓▓▓▓▓ ▓▓____   ______ | ▓▓▓▓▓▓▓▓\▓▓  ▓▓▓▓▓▓\ ▓▓____  \▓▓▓▓▓▓▓▓ ______ | ▓▓▓▓▓▓▓\ ▓▓ _______ 
    | ▓▓  | ▓▓/      \| ▓▓ __\▓▓        \  | ▓▓  | ▓▓    \ /      \| ▓▓__   |  \ ▓▓ __\▓▓ ▓▓    \   | ▓▓   /      \| ▓▓__| ▓▓\▓ /       \
    | ▓▓  | ▓▓  ▓▓▓▓▓▓\ ▓▓|    \\▓▓▓▓▓▓▓▓  | ▓▓  | ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓  \  | ▓▓ ▓▓|    \ ▓▓▓▓▓▓▓\  | ▓▓  |  ▓▓▓▓▓▓\ ▓▓    ▓▓  |  ▓▓▓▓▓▓▓
    | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ \▓▓▓▓ /    ▓▓   | ▓▓  | ▓▓  | ▓▓ ▓▓    ▓▓ ▓▓▓▓▓  | ▓▓ ▓▓ \▓▓▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓    ▓▓ ▓▓▓▓▓▓▓\   \▓▓    \ 
    | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓__| ▓▓/  ▓▓▓▓_   | ▓▓  | ▓▓  | ▓▓ ▓▓▓▓▓▓▓▓ ▓▓     | ▓▓ ▓▓__| ▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓▓▓▓▓▓▓ ▓▓  | ▓▓   _\▓▓▓▓▓▓\
    | ▓▓    ▓▓\▓▓    ▓▓\▓▓    ▓▓  ▓▓    \  | ▓▓  | ▓▓  | ▓▓\▓▓     \ ▓▓     | ▓▓\▓▓    ▓▓ ▓▓  | ▓▓  | ▓▓   \▓▓     \ ▓▓  | ▓▓  |       ▓▓
     \▓▓▓▓▓▓▓  \▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓   \▓▓   \▓▓   \▓▓ \▓▓▓▓▓▓▓\▓▓      \▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓   \▓▓    \▓▓▓▓▓▓▓\▓▓   \▓▓   \▓▓▓▓▓▓▓ 
                                                                                                                                         
                                                  ______  ________  ______       __     __      
                                                 /      \|        \/      \     |  \   |  \     
                                                |  ▓▓▓▓▓▓\\▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\    | ▓▓   | ▓▓     
                                                | ▓▓ __\▓▓  | ▓▓  | ▓▓__| ▓▓    | ▓▓   | ▓▓     
                                                | ▓▓|    \  | ▓▓  | ▓▓    ▓▓     \▓▓\ /  ▓▓     
                                                | ▓▓ \▓▓▓▓  | ▓▓  | ▓▓▓▓▓▓▓▓      \▓▓\  ▓▓      
                                                | ▓▓__| ▓▓  | ▓▓  | ▓▓  | ▓▓       \▓▓ ▓▓       
                                                 \▓▓    ▓▓  | ▓▓  | ▓▓  | ▓▓        \▓▓▓        
                                                  \▓▓▓▓▓▓    \▓▓   \▓▓   \▓▓         \▓                                                                                                       
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/                                                

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Cover    = PS4_R1;
define Weapon   = PS4_L1;
define Look     = PS4_R3;
define Stealth  = PS4_L3;
define Enter    = PS4_TRIANGLE;
define Jump     = PS4_SQUARE;
define Sprint   = PS4_CROSS;
define Reload   = PS4_CIRCLE;
define Options  = PS4_OPTIONS;
define InvMenu  = PS4_TOUCH;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define KillSwitchHold     = PS4_L2;
define KillSwitchPress    = PS4_SHARE;
						   
define AssistHold         = PS4_LEFT;
define AssistPress        = PS4_L1;
						   
define AbuseSwitchHold    = PS4_LEFT;
define AbuseSwitchPress   = PS4_L2;
						   
define FireSwitchHold     = PS4_LEFT;
define FireSwitchPress    = PS4_R2;

define SprintAssistHold   = PS4_CROSS;
define SprintAssistPress  = PS4_DOWN;

define DriverAssistHold   = PS4_CROSS;
define DriverAssistPress  = PS4_UP;

define ChopperAssistHold  = PS4_CROSS;
define ChopperAssistPress = PS4_LEFT;

define PlaneAssistHold    = PS4_CROSS;
define PlaneAssistPress   = PS4_RIGHT;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define FastSnackHold      = PS4_CIRCLE;// Only Works Correctly When Your Not A Boss/Leader
define FastSnackPress     = PS4_LEFT;  // Only Works Correctly When Your Not A Boss/Leader
					      
define FastArmourHold     = PS4_CIRCLE;// Only Works Correctly When Your Not A Boss/Leader
define FastArmourPress    = PS4_RIGHT; // Only Works Correctly When Your Not A Boss/Leader

define InstaVehicleHold   = PS4_CIRCLE;// Only Works Correctly When Your Not A Boss/Leader
define InstaVehiclePress  = PS4_DOWN;  // Only Works Correctly When Your Not A Boss/Leader

define InstaAircraftHold  = PS4_CIRCLE;// Only Works Correctly When Your Not A Boss/Leader
define InstaAircraftPress = PS4_UP;    // Only Works Correctly When Your Not A Boss/Leader

define QuickRollPress     = PS4_L3;

int Run,Shunt,KillSwitch,RunTime,Sprinter,Driver,Chopper,Plane;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Default State                   ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

int AimAssistMod = On;
int FireMod      = Off;
int Abuse        = On;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int PolarRadius   = 15;
int PolarAngle    = 20;
int PolarRBoost   = 3;
int PolarABoost   = 10;
int AimAbuseHold  = 900;
int AimAbuseWait  = 20;
int RapidFireHold = 30;
int RapidFireWait = 30;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int AimAssist      =  On;
int RadiusBoost    =  On;
int AngleBoost     =  On;
int AimAbuse       =  On;
int RapidFire      =  On;
int AutoSprint     =  On;
int FastArmour     =  On;
int FastSnack      =  On;
int QuickRoll      =  On;
int InstaVehicle   =  On;
int SprintAssist   =  On;
int DriverAssist   =  On;
int ChopperAssist  =  On;
int PlaneAssist    =  On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	   
        if (get_val(KillSwitchHold) && event_press(KillSwitchPress)) {
            Shunt = KillSwitchPress;
            KillSwitch = !KillSwitch;
        }
        
	    if (!KillSwitch) {
	    
	    	if (AutoSprint) {
	    	
	    		if (get_val(LY) <= -60 && event_press(Sprint))
	    			Run = On;
	    	
	    		if (get_val(LY) > -60 || event_press(Ads) || event_press(Fire) || event_press(InvMenu) || event_press(Options)) 
	    			Run = Off;
	    		
	    			if (Run) 
	    				combo_run(AutoSprint);
	    					
	    				else if (!Run) {
	    				
	    					if (get_val(LY) <= -95 && RunTime < 950)
	    						RunTime += get_rtime();
	    					
	    						if (RunTime >= 950)
	    							set_val(Sprint,100);
	    				
	    							if (get_val(LY) > -95)
	    								RunTime = Off;
	    				}
	    	}//EOAS
	    
	    	if (AimAssist) {
    			
    			if (get_val(AssistHold) >= 90 && event_press(AssistPress)) {
        			Shunt = AssistPress;
        			AimAssistMod = !AimAssistMod;
        		}

    			if (AimAssistMod) {

        			if (get_val(Ads) >= 90) {
			            actual_X = get_val(RX);
			            actual_Y = get_val(RY);
			            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
			            max_Magnitude = (actual_Magnitude < 100);

						if (get_val(Fire)) {
		            		
		            		if (RadiusBoost) 
		                		Radius = PolarRadius + PolarRBoost;
		            		if (AngleBoost) 
		                        Angle = PolarABoost;
		            	}
		            		else {
		                    	Radius = PolarRadius;
		                		Angle = 0;
		                	}
		            
		            	angle += PolarAngle + Angle;
		                angle = angle % 360;
		                sin_angle = DamPolar[angle % 360];
		                cos_angle = DamPolar[(angle + 270) % 360];
		                cos_angle = (cos_angle * Radius) / 100;
		                sin_angle = (sin_angle * Radius) / 100;
		
		            	if (actual_Magnitude <= 7) { 
		                	sin_angle -= actual_Y; 
		                	cos_angle -= actual_X; 
		            	}
		                	else { 
		                    	sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
		                    	cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
		                	} 
		
		            	set_val(RX,Clamped(actual_X + cos_angle, -100,100));
		            	set_val(RY,Clamped(actual_Y + sin_angle, -100,100)); 
        			}
    			}
			}//EOAAS
	    			
	    	if (AimAbuse) {
	    		
	    		if (get_val(AbuseSwitchHold) >= 90 && event_press(AbuseSwitchPress)) {
            		Shunt = AbuseSwitchPress;
            		Abuse = !Abuse;
            	}
	    		
	    		if (Abuse && get_val(Ads) >= 90)
	            	combo_run(AimAbuse);
	            
	            	else 
	            		combo_stop(AimAbuse);
	        }//EOAAB
	    	
	    	if (RapidFire) {
	    		
	    		if (get_val(FireSwitchHold) >= 90 && event_press(FireSwitchPress)) {
            		Shunt = FireSwitchPress;
            		FireMod = !FireMod;
            	}
        		
	    		if (FireMod && get_val(Fire))
            		combo_run(RapidFire);
        	}
            
	    	if (FastSnack) {
	    	
	    		if (get_val(FastSnackHold) >= 90 && event_press(FastSnackPress)) {
	    			Shunt = FastSnackPress;
	    			combo_run(FastSnack);
	    		}
	    	}//EOFS
	    	
	    	if (FastArmour) {
	    	
	    		if (get_val(FastArmourHold) >= 90 && event_press(FastArmourPress)) {
	    			Shunt = FastArmourPress;
	    			combo_run(FastArmour);
	    		}
	    	}//EOFA
	    	
	    	if (QuickRoll) {
	    		
	    		if (get_val(QuickRollPress) && get_ptime(QuickRollPress) > 300) {
	    			combo_run(QuickRoll);
				}
	    	}//EOQR
	    		    		       	
	       	if (InstaVehicle) {
	       		    	
	    		if (get_val(InstaVehicleHold) >= 90 && event_press(InstaVehiclePress)) {
	    			Shunt = InstaVehiclePress;
	    			combo_run(InstaVehicle);
	    		}
	    	}//EOIV 
	       	
	       	if (SprintAssist) {	
	    		
	    		if (!get_val(Ads) &&  get_val(SprintAssistHold) && event_press(SprintAssistPress)) {
	    			Sprinter = !Sprinter;
	    			Shunt = SprintAssistPress;
	    		}	
	    			if (Sprinter) {
	    				
	    				Driver = Off;
	    				Chopper = Off;
	    				Plane = Off;
	    			    
	    			    if (!get_val(Fire) && !get_val(Ads)) {
	    			    	set_val(LY,-100);
	    			    	combo_run(AutoSprint);
	    			    }
	    			    
	    			    if (event_press(Enter)) {
	    			    	Sprinter = Off;
	    			    }
	    			}
	    	}//EOSA
	    	
	    	if (DriverAssist) {	
	    		
	    		if (!get_val(Ads) &&  get_val(DriverAssistHold) && event_press(DriverAssistPress)) {
	    			Driver = !Driver;
	    			Shunt = DriverAssistPress;
	    		}	
	    			if (Driver) {
	    			
	    				Sprinter = Off;
	    				Chopper = Off;
	    				Plane = Off;
	    			    
	    			    if (!get_val(Fire) && !get_val(Ads)) 
	    			    	set_val(Fire,100);
	    			    
	    			    if (event_press(Enter)) {
	    			    	Driver = Off;
	    			    }
	    			}
	    	}//EODA
	    	
	    	if (ChopperAssist) {	
	    		
	    		if (!get_val(Ads) &&  get_val(ChopperAssistHold) && event_press(ChopperAssistPress)) {
	    			Chopper = !Chopper;
	    			Shunt = ChopperAssistPress;
	    		}	
	    			if (Chopper) {
	    				
	    				Sprinter = Off;
	    				Driver = Off;
	    				Plane = Off;
	    			    
	    			    if (!get_val(Fire) && !get_val(Ads)) {
	    			    	set_val(Fire,100);
	    			    	combo_run(Chopper);
	    			    }
	    			    
	    			    if (event_press(Enter)) {
	    			    	Chopper = Off;
	    			    }
	    			}
	    	}//EOCA
	    	
	    	if (PlaneAssist) {	
	    		
	    		if (!get_val(Ads) &&  get_val(PlaneAssistHold) && event_press(PlaneAssistPress)) {
	    			Plane = !Plane;
	    			Shunt = PlaneAssistPress;
	    		}
	    			
	    			if (Plane) {
	    				
	    				Sprinter = Off;
	    				Driver = Off;
	    				Chopper = Off;	
	    			
	    				if (!get_val(Fire) && !get_val(Ads)) {
	    					set_val(Fire,100);
	    					combo_run(Plane);
	    				}
	    				
	    			    if (event_press(Enter)) {
	    			    	Plane = Off;
	    				}
	    		}
	    	}//EOPA
	    }//EOKS	
	
	if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            
            else {
                set_val(Shunt,Off);
            }
    }
    
}//EOM	

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/

combo AimAbuse {

	set_val(Ads,100);
	wait(AimAbuseHold);
	set_val(Ads,0);
	wait(AimAbuseWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo AutoSprint {

	set_val(Sprint,100);
	wait(40);
	set_val(Sprint,0);
	wait(40);
}
	    			
combo QuickRoll {	

	set_val(Ads,100);
	
	if (get_val(RX) <= 0)	
		set_val(LX,-100);
	if (get_val(RX) > 0)
		set_val(LX,100);
		
	set_val(LY,get_val(LY));	
	set_val(Jump,100);
	wait(80);
	
	if (get_val(RX) <= 0)
		set_val(LX,-100);
	if (get_val(RX) > 0)
		set_val(LX,100);
		
	set_val(LY,get_val(LY));	
	wait(600);
	wait(3200);
}

combo FastSnack {

	set_val(InvMenu,100);
	wait(400);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);	
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);	
	set_val(Sprint,100);
	wait(100);
	wait(350);
	set_val(InvMenu,100);
	wait(400);
}

combo FastArmour {
	
	set_val(InvMenu,100);
	wait(400);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(Up,100);
	wait(50);
	wait(50);
	set_val(Up,100);
	wait(50);
	wait(50);
	set_val(Up,100);
	wait(50);
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(InvMenu,100);
	wait(400);
}

combo InstaVehicle {

	set_val(InvMenu,100);
	wait(400);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);
	set_val(Down,100);
	wait(50);
	wait(50);	
	set_val(Sprint,100);
	wait(50);
	wait(50);
	set_val(Sprint,100);
	wait(50);
	wait(50);	
	set_val(InvMenu,100);
	wait(400);
}

combo Chopper {
	set_val(LY,-100);
	wait(250);
	set_val(LY,get_val(LY));
	wait(250);
}

combo Plane {
	set_val(LY,20);
	wait(250);
	set_val(LY,get_val(LY));
	wait(250); 
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                 Function/Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
 
 function Clamped(Val,Min,Max) {
  
  	if(Val < Min) return Min;
  	if(Val > Max) return Max;
  	return Val;
}

 const char DamPolar [] = {
	100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
	-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,
	-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};