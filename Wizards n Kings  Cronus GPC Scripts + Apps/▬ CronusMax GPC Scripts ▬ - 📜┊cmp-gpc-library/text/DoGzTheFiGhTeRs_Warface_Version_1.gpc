/*
         _______            ______                __       __  ______  _______  ________  ______   ______  ________ 
        |       \          /      \              |  \  _  |  \/      \|       \|        \/      \ /      \|        \
        | ▓▓▓▓▓▓▓\ ______ |  ▓▓▓▓▓▓\________     | ▓▓ / \ | ▓▓  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓\ ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓▓
        | ▓▓  | ▓▓/      \| ▓▓ __\▓▓        \    | ▓▓/  ▓\| ▓▓ ▓▓__| ▓▓ ▓▓__| ▓▓ ▓▓__   | ▓▓__| ▓▓ ▓▓   \▓▓ ▓▓__    
        | ▓▓  | ▓▓  ▓▓▓▓▓▓\ ▓▓|    \\▓▓▓▓▓▓▓▓    | ▓▓  ▓▓▓\ ▓▓ ▓▓    ▓▓ ▓▓    ▓▓ ▓▓  \  | ▓▓    ▓▓ ▓▓     | ▓▓  \   
        | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ \▓▓▓▓ /    ▓▓     | ▓▓ ▓▓\▓▓\▓▓ ▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓\ ▓▓▓▓▓  | ▓▓▓▓▓▓▓▓ ▓▓   __| ▓▓▓▓▓   
        | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓__| ▓▓/  ▓▓▓▓_     | ▓▓▓▓  \▓▓▓▓ ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓     | ▓▓  | ▓▓ ▓▓__/  \ ▓▓_____ 
        | ▓▓    ▓▓\▓▓    ▓▓\▓▓    ▓▓  ▓▓    \    | ▓▓▓    \▓▓▓ ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓     | ▓▓  | ▓▓\▓▓    ▓▓ ▓▓     \
         \▓▓▓▓▓▓▓  \▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓     \▓▓      \▓▓\▓▓   \▓▓\▓▓   \▓▓\▓▓      \▓▓   \▓▓ \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
        ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

  ¦¦¦¦ MOD MENU SYSTEM ¦¦¦¦

* Enter Menu   = L2/LT + OPTIONS/MENU
* Switch Menu  = CROSS/A
* Exit Menu    = CIRCLE/B

* Next Mod     = RIGHT
* Previous Mod = LEFT

* Adjust +     = UP
* Adjust -     = DOWN
* Toggle ON    = UP
* Toggle OFF   = DOWN
  
  ¦¦¦¦ SHOW CURRENT SLOT IN USE ¦¦¦¦
  
* Show Slot    = R3/RS + LEFT

	¦¦¦¦ KILL SWITCH TOGGLES ¦¦¦¦

* Kill Switch  = L2/LT + SHARE

	¦¦¦¦ SHOOTING MOD TOGGLES ¦¦¦¦ ( Defaults Can Be Edited Below In Mod Toggles )

* Rapid Fire   = L2/LT + UP 
* StrafeShot   = L2/LT + LEFT
* Hold Breath  = L2/LT + DOWN
* Rapid Melee  = L2/LT + RIGHT

   ¦¦¦¦¦ AIM ASSIST  ¦¦¦¦¦

* Aim Assist ON/OFF

* PolarPower  ( Holding Fire Or Ads ) 
* PolarSpeed  ( Holding Fire Or Ads ) 

* PolarRelease( Polar Release Limit )

   ¦¦¦¦¦ ANTI RECOIL ¦¦¦¦¦

* Vertical   = Axis Y 
* Horizontal = Axis X

* Rumble Mode OFF Hold Ads + Fire
* Rumble Mode ON Hold Ads + Fire (RUMBLE MUST BE ON IN GAME AND CONSOLE/PC SETTINGS)
* Inverted Axis ON Option For Inverted Players
* On The Fly Adjustable ON ( Setup Below )

¦¦¦¦ Anti-Recoil On The Fly Adjustment ¦¦¦¦ 

* Hold CROSS/A + Press In The Direction You Want The Crosshairs To Move
* DPAD -- UP or DOWN or LEFT or RIGHT
* The Zen Will Display The Current Value + Axis

* PS On Xbox -- PLAYSTATION CONTROLLER WILL SWAP TOUCHPAD AND SHARE WHEN ON PC Or XBOX
* Block Rumble -- Block The Controller Vibrating From In Game Signals
* LED Rainbow -- Zen Eyes Will Cycle Through All Colours

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.                                  
(                   Menu Arrays                      )                                 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*                                  
*/                                                                                     
const uint8 FontSize [][]  = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits []  = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","WARFACE Version 1","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Anti-Recoil","RY-Axis","RX-Axis","SAVED","LOADED"};
const string ModToggle []  = {"","Polar Aim Assist","   Anti-Recoil","  Rumble AR Mode","AR On The Fly Adj"," Strafe Shot Mod"," Rapid Fire Mod","   Hold Breath","    Fast Melee","LED Rainbow Flow","   Block Rumble"};
const string ModValue []   = {"","   Polar Power","   Polar Speed","   Vertical AR","  Horizontal AR","Strafe Shot Speed"," Rapid Fire Hold"," Rapid Fire Wait"," LED Brightness"};
const int16 ModDigitMin [] = {  0  , 1  , 1   , 0   , -100 , 250  , 30   , 30   , 1  };
const int16 ModDigitMax [] = {  0  , 50 , 200 , 100 ,  100 , 4000 , 1000 , 1000 , 50 };                     
const int16 ModIncrement[] = {  0  , 1  , 1   , 1   ,  1   , 50   , 10   , 10   , 1  };

/*																		
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.                  
(                   Toggle Strings                   )                 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*                  
*/                                                                     
const string ShotModL     = " Strafe Shot Mod";                        
const string FireModL     = "  Rapid Fire Mod";                        
const string RapidMeleeL  = " Rapid Melee Mod";                       
const string BreathModL   = "Sniper Breath Mod";                       
const string KillSwitchL  = "Master KillSwitch";                       
/*                                                                           
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.                        
(                    In Game Buttons                 )                 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*                           
*/                                                                                                              
define Fire     = PS4_R2;                                                                                       
define Ads      = PS4_L2;
define Melee    = PS4_R3;
define Breath   = PS4_L3;
define Walk     = PS4_LY;
define Strafe   = PS4_LX;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define On       = TRUE;
define Off      = FALSE;
define RumA     = RUMBLE_A;
define RumB     = RUMBLE_B;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RapidFireHold   = PS4_L2;	  // RAPID FIRE HOLD TOGGLE				Rapid Fire   = L2/LT + UP
define RapidFirePress  = PS4_UP;	  // RAPID FIRE PRESS TOGGLE

define StrafeShotHold  = PS4_L2;      // STRAFE FIRE HOLD TOGGLE            StrafeShot   = L2/LT + LEFT
define StrafeShotPress = PS4_LEFT;    // STRAFE FIRE PRESS TOGGLE			 
																			
define RapidMeleeHold  = PS4_L2;      // QUICK SNIPE HOLD TOGGLE            Rapid Melee  = L2/LT + RIGHT
define RapidMeleePress = PS4_RIGHT;   // QUICK SNIPE PRESS TOGGLE           

define BreathModHold   = PS4_L2;	  // HOLD BREATH HOLD TOGGLE            Hold Breath  = L2/LT + DOWN
define BreathModPress  = PS4_DOWN;    // HOLD BREATH PRESS TOGGLE

define KillSwitchHold  = PS4_L2;      // KILL SWITCH HOLD TOGGLE
define KillSwitchPress = PS4_SHARE;   // KILL SWITCH PRESS TOGGLE
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;
define RecoilRightPress = PS4_RIGHT;
define RecoilLeftPress  = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold     = PS4_L2;
define MenuEnterPress    = PS4_OPTIONS;
define MenuExitPress     = PS4_CIRCLE;
define ChangeMenuPress   = PS4_CROSS;

define FindSlotHold      = PS4_R3;
define FindSlotPress     = PS4_LEFT;

define LoadSettingsHold  = PS4_L2; // LOAD PREVIOUS SETTINGS ( WHEN THE ZEN IS LOADED ) 
define LoadSettingsPress = PS4_PS; // LOAD PREVIOUS SETTINGS ( WHEN THE ZEN IS LOADED )

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 1;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 10;
define IndexMinValues   = 1;
define IndexMaxValues   = 8;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int Saver,Ms,Sec,Min,ScreenTime,LedDec,Rgb,LedInc,Colour[3];
int TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2,Clear;
int KillSwitch,Shunt,ToggleT,ToggleTime,ToggleName,Modled,Save,Loaded,Saved;
int Time,Angle,CosAngle,SinAngle,ActualX,ActualY,ActualMagnitude,MaxMagnitude,RecoilValue,VibA,VibB;
define Step =  1;
//¦¦¦¦¦¦¦¦  DO NOT TOUCH ABOVE!!!  ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;

int PolarPower     = 18;   // Polar Power ( Not Holding Fire ) ( Aim Assist )
int PolarSpeed     = 18;   // Polar Speed ( Not Holding Fire ) ( Aim Assist ) 

int Vertical       = 20;   // Recoil Vertical Power
int Horizontal     = 0;    // Recoil Horizontal Power

int StrafeWait     = 1000; // Strafe Shot Time Before Changing Direction Ms

int RapidHoldTime  = 30;   // Rapid Fire Hold Time Ms
int RapidWaitTime  = 30;   // Rapid Fire Release Time Ms

int LedBrightness  = 10;   // Brightness Of The Zen Eyes
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*////////////////// (On or Off)  \\\\\\\\\\\\\\\\\\\\
int ModSwitch;
int AimAssist       =  On;  // Triple Threat Aim Assist
int AntiRecoil      =  On;  // Anti Recoil
int RumbleRecoil    = Off;  // Enable Rumble Mode With Anti-Recoil
int RecoilOnTheFly  =  On;  // Anti Recoil On The Fly Adjustment
int StrafeShot      =  On;  // Strafe Shot     (* Only Set One On In The Compiler Either >>¦¦ Jump Shot or Prone Shot or Strafe Shot  ¦¦<< *) (Crouch + Strafe Can Be On)
int RapidFire       =  On;  // Rapid Fire      (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int HoldBreath      =  On;  // Hold Breath
int FastMelee       =  On;  // Fast Melee
int LEDRainbowFlow  =  On;  // Led Rainbow ( Zen Eyes )
int BlockRumble     =  On;  // On = Block Controller Vibration |Or| Off = Vibration On Controller

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(               Default Toggle State                 ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//-- ADJUST HERE IF YOU WANT THE MOD ACTIVE WHEN THE SLOT FIRST LOADS ( On or Off ) (MASTER TOGGLE ABOVE MUST BE ON)

int RapidFireMod   =  On; // Rapid Fire 
int StrafeShotMod  =  On; // Strafe Shot     
int RapidMeleeMod  =  On; // QuickScope Shot
int BreathMod      =  On; // Hold Breath
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Recoil Inverted                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/
define RecoilInvert = Off; // Set On If You Play Inverted Look Control
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(          Playstation Controller On Xbox/PC         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/
define DS4onXboxPC = Off; // Enable If Using A Playstaion Controller On XBox/PC (Auto)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    
    //IF YOU WANT TO PROGRAM FROM THE ZEN REMOVE //  FROM IN FRONT OF  LoadSettings();  BELOW
    
    //LoadSettings(); //***     
    
    //All Toggles Will Be OFF On The First Boot
    
    /*Do Not Touch Below*/
	combo_run(Boot);
    LedInc = 1
    Colour = 150;
	/*Do Not Touch Above*/
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (get_ival(LoadSettingsHold)) {
		
		if (event_press(LoadSettingsPress)) {
			LoadSettings();
		}
			set_val(LoadSettingsPress,0);
	}
	
	if (BlockRumble)
		
		block_rumble();
	
	if (DS4onXboxPC) {
		
		if (get_console() == PIO_XB360 && get_controller() == PIO_PS4) {	
			
			swap (PS4_TOUCH,PS4_SHARE);
		}
	}
	
	if (!MainMenu && !get_ival(RecoilHoldOnFly)) {
	
	    if (get_ival(KillSwitchHold) && event_press(KillSwitchPress)) {
        	Shunt = KillSwitchPress;
        	KillSwitch = !KillSwitch;
        	ToggleName = On;
        	Toggle(KillSwitch,KillSwitchL[0]);
        }
	}
	
	if (!KillSwitch) {    
	
	if (!MainMenu && !get_ival(RecoilHoldOnFly)) {	    
	    
	    if (StrafeShot) {
	    
	    	if (get_ival(StrafeShotHold) && event_press(StrafeShotPress)) {
	       		
	       		Shunt = StrafeShotPress;
	       		StrafeShotMod = !StrafeShotMod;
	       		ToggleName = On;
	       		Toggle(StrafeShotMod,ShotModL[0]);
	    	}
	    }
	    
	    if (RapidFire) {
	    	
	    	if (get_ival(RapidFireHold) && event_press(RapidFirePress)) {
	       		
	       		Shunt = RapidFirePress;
	       		RapidFireMod = !RapidFireMod;
	       		ToggleName = On;
	       		Toggle(RapidFireMod,FireModL[0]);
	    	}
	    }
	    
	    if (HoldBreath) {
	    	
	    	if (get_ival(BreathModHold) && event_press(BreathModPress)) {
	    
	    		Shunt = BreathModPress;
	    		BreathMod = !BreathMod;
	    		ToggleName = On;
	    		Toggle(BreathMod,BreathModL[0]);
	    	}
	    }
	    
	    if (FastMelee) {
	    	
	    	if (get_ival(RapidMeleeHold) && event_press(RapidMeleePress)) {
	    
	    		Shunt = RapidMeleePress;
	    		RapidMeleeMod = !RapidMeleeMod;
	    		ToggleName = On;
	    		Toggle(RapidMeleeMod,RapidMeleeL[0]);
	    	}
		}
	}
	    	
    	if (AimAssist) {
            
            ActualX = get_val(AimX);   
            ActualY = get_val(AimY);           
            ActualMagnitude = isqrt(pow(ActualX, 2) + pow(ActualY, 2));  
            MaxMagnitude = (ActualMagnitude < 100);                      
	        
            if (!(Time++ % Step)) {                                  
            	
            	Angle += PolarSpeed;                                                 
            }                                                               
                
                Angle = Angle % 360;                                            
                SinAngle = DamPolar[Angle % 360];                           
                CosAngle = DamPolar[(Angle + 270) % 360];                  
                CosAngle = (CosAngle * PolarPower) / 100;                         
                SinAngle = (SinAngle * PolarPower) / 100;                          
            
            
            if (get_ival(Ads) || get_ival(Fire)) { 
                   
                if (ActualMagnitude <= 10) {                                                      
                    
                    SinAngle -= ActualY;                                                              
                    CosAngle -= ActualX;                                                                 
                }
                	else {
                
                    	SinAngle = (SinAngle * (200 - ((abs(ActualY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                    	CosAngle = (CosAngle * (200 - ((abs(ActualX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                	}                                                  
                
                set_val(AimX,clamp(ActualX + CosAngle,-100,100));
                set_val(AimY,clamp(ActualY + SinAngle,-100,100));    	
                	
            }
        }   
        
	    if (StrafeShotMod && StrafeShot) {
	    
	    	if (get_ival(Fire) && abs(get_ival(Strafe)) <= 35 && abs(get_ival(Walk)) <= 35) {
	        	
	        	combo_run(StrafeShot);
	        }	
	        	else {
	        		
	        		combo_stop(StrafeShot);
	        	}
	    }
        
        if (RapidFireMod && RapidFire) {
                
        	if (get_ival(Fire)) {
                
                combo_run(RapidFire);
            } 
            	else {
	        		combo_stop(RapidFire);
	        	}
        }
        
	    if (RapidMeleeMod && FastMelee) {
	       	
	       	if (!get_ival(Ads) && get_ival(Melee)) {
	    		
	    		combo_run(FastMelee);
	    	}
        }
        	
        if (HoldBreath && BreathMod) {
	       	
	       	if (get_ival(Ads))
	    	   		
	    	   	set_val(Breath,100);
	                          
	       	if (get_ival(Walk) <-90 && get_ival(Ads) && get_ptime(Ads) > 200)
	           		
	           	combo_stop(CH);       
	                        
	       	if (event_press(Ads)) 
	           		
	           	combo_run(CH);
	      
	       	if (get_ival(Ads) && get_ival(Breath)) 
	           		
	           	set_val(Breath,0);  
	    }       
    	
    	if (AntiRecoil) {        
        
        	if (!RumbleRecoil) {
        	
        	    if (get_ival(Ads) && get_ival(Fire)) { 
                	
                	AntiRecoil();
                }
			}
			
			if (RumbleRecoil) {
        	
        	    if (get_ival(Ads) && get_ival(Fire) && (get_rumble(RumA) || get_rumble(RumB)))  { 
                	
                	AntiRecoil();
                }
			}
		  
		    if (!MainMenu && RecoilOnTheFly && get_ival(RecoilHoldOnFly)) { 

                if (event_press(RecoilDownPress)) {
                    
                    	Vertical = clamp(Vertical++,0,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (event_press(RecoilUpPress)) {
                     
                    	Vertical = clamp(Vertical--,0,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }
                
                if (event_press(RecoilRightPress)) {
                    
                    	Horizontal = clamp(Horizontal++,-100,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (event_press(RecoilLeftPress)) {
                     
                    	Horizontal = clamp(Horizontal--,-100,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (combo_running(RecoilValue)) {
            		
            		if (event_press(RecoilUpPress) || event_press(RecoilDownPress) || event_press(RecoilLeftPress) || event_press(RecoilRightPress)) 
            			
            			combo_restart(RecoilValue);
            	}
            		set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);set_val(RecoilLeftPress,0); set_val(RecoilRightPress,0);
            }
		}
    }
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		Shunt = MenuEnterPress;
		MenuToggle(On,On,On,On,Off);
		VibB = On;
		combo_run(Rumble);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        combo_stop(RecoilValue);
        combo_stop(Settings);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
				VibB = On;
				combo_run(Rumble);
				SaveSettings();
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModIncrement[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	Saver (); 
	} 

    if (!MainMenu && LEDRainbowFlow) { 
        LedFlow();
    } 

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime) {
        TimeToggle();
    }
	
    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/

combo StrafeShot {

	set_val(Strafe,100);
	wait(StrafeWait);
	set_val(Strafe,-100);
	wait(StrafeWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidHoldTime);
    set_val(Fire,0);
    wait(RapidWaitTime);
}

combo CH {
	
	set_val(Breath,0);
	wait(60);
	set_val(Breath,100);
	wait(110);
	set_val(Breath,0);
	wait(110);
}

combo FastMelee {
    
    set_val(Melee,100);
    wait(50);
    set_val(Melee,0);
    wait(50);  
}

combo RecoilValue {
 	
 		Saver = Off;
 		combo_stop(Boot);
 	
 	if (RecoilValue) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	    line_oled(126,23,2,23,1,1);
	    line_oled(126,52,2,52,1,1);
	    printf(28,54,0,1,MiscString[9]);
	    
	    if (event_press(RecoilUpPress) || event_press(RecoilDownPress)) {
	    	
	    	printf(30,5,1,1,MiscString[10]);
	    	NumX = 0; NumY = 1; NumS = 1;
	    	FindDigit(Vertical,DigitValue(Vertical));
	    }
	
	    if (event_press(RecoilLeftPress) || event_press(RecoilRightPress)) {
	    	
	    	printf(30,5,1,1,MiscString[11]);
	    	NumX = 0; NumY = 1; NumS = 1;
	    	FindDigit(Horizontal,DigitValue(Horizontal));
	    }
	
		RecoilValue = Off;
	
	}
		wait(5000);
		VibB = On;
		combo_run(Rumble);
 		cls_oled(0);
 		SaveSettings();
 		Saver = On;
}

combo Settings {
 		
 		Save = On;
 		Saver = Off;
 		combo_stop(Boot);
 	
 	if (Save) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	
	if (Saved)
	    printf(39,25,1,1,MiscString[12]);
	
	if (Loaded)
	    printf(34,25,1,1,MiscString[13]);
	    Save = Off;
	}
		wait(3000);
		Saved = Off;
		Loaded = Off;
		cls_oled(0);
 		Saver = On;
}

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
        else if (VibB)
            
            set_rumble(RUMBLE_B,15);
    
    	wait(250);
    	VibA = Off;
    	VibB = Off;
    	reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    }    
        else {
            
            set_rgb(255,0,0);
            set_rumble(RUMBLE_B,15);
        }
     	
     	wait(150);
    	set_rgb(0,0,0);
    	wait(150);
    	reset_rumble();    
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
            set_rgb(255,0,0);
	
		wait(150);
		reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function AntiRecoil () {

	if (RecoilInvert) {
    		
		Set_Val(AimX,(Horizontal + get_val(AimX)));
		Set_Val(AimY,(Vertical * -1 + get_val(AimY)));
	}
		
		else {
    		
			Set_Val(AimX,(Horizontal + get_val(AimX)));
			Set_Val(AimY,(Vertical + get_val(AimY)));
		}
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
    
    if (combo_running(RecoilValue))    	
    	
    	combo_stop(RecoilValue);  
    
    if (combo_running(Settings))
    
    	combo_stop(Settings);  
        
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
	    combo_run(VibrateBlink);
    
    if (ToggleName) {
    	
    	Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        }
            else {
                
                printf(36,38,0,1,MiscString[7]);
            }
                ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
        if (ToggleT >= 5000) {
            cls_oled(0);
            ToggleTime = Off;
            ToggleT = 0;
    }
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;
            
            if (ModVal >= ModValMax){ 
            	return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;
				
				if (ModVal <= ModValMin){
					return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 

function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,   CIRCLE  ,   SPACE   ,     O     ,     r     ,   SPACE   ,     B     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100
};

function LoadSettings () {

    ModSwitch[1]  = get_pvar(SPVAR_1,0,1,ModSwitch[1]);
    ModSwitch[2]  = get_pvar(SPVAR_2,0,1,ModSwitch[2]);
    ModSwitch[3]  = get_pvar(SPVAR_3,0,1,ModSwitch[3]);
    ModSwitch[4]  = get_pvar(SPVAR_4,0,1,ModSwitch[4]);
    ModSwitch[5]  = get_pvar(SPVAR_5,0,1,ModSwitch[5]);
    ModSwitch[6]  = get_pvar(SPVAR_6,0,1,ModSwitch[6]);
    ModSwitch[7]  = get_pvar(SPVAR_7,0,1,ModSwitch[7]);
    ModSwitch[8]  = get_pvar(SPVAR_8,0,1,ModSwitch[8]);
    ModSwitch[9]  = get_pvar(SPVAR_9,0,1,ModSwitch[9]);
    ModSwitch[10] = get_pvar(SPVAR_10,0,1,ModSwitch[10]);
    ModDigit[1]   = get_pvar(SPVAR_11,ModDigitMin[1],ModDigitMax[1],ModDigit[1]);
    ModDigit[2]   = get_pvar(SPVAR_12,ModDigitMin[2],ModDigitMax[2],ModDigit[2]);
    ModDigit[3]   = get_pvar(SPVAR_13,ModDigitMin[3],ModDigitMax[3],ModDigit[3]);
    ModDigit[4]   = get_pvar(SPVAR_14,ModDigitMin[4],ModDigitMax[4],ModDigit[4]);
    ModDigit[5]   = get_pvar(SPVAR_15,ModDigitMin[5],ModDigitMax[5],ModDigit[5]);
    ModDigit[6]   = get_pvar(SPVAR_16,ModDigitMin[6],ModDigitMax[6],ModDigit[6]);
    ModDigit[7]   = get_pvar(SPVAR_17,ModDigitMin[7],ModDigitMax[7],ModDigit[7]);
    ModDigit[8]   = get_pvar(SPVAR_18,ModDigitMin[8],ModDigitMax[8],ModDigit[8]);
    ModDigit[9]   = get_pvar(SPVAR_19,ModDigitMin[9],ModDigitMax[9],ModDigit[9]);
    Loaded = On;
	combo_run(Settings);
}    
    
function SaveSettings () {

    set_pvar(SPVAR_1,ModSwitch[1]);
    set_pvar(SPVAR_2,ModSwitch[2]);
    set_pvar(SPVAR_3,ModSwitch[3]);
    set_pvar(SPVAR_4,ModSwitch[4]);
    set_pvar(SPVAR_5,ModSwitch[5]);
    set_pvar(SPVAR_6,ModSwitch[6]);
    set_pvar(SPVAR_7,ModSwitch[7]);
    set_pvar(SPVAR_8,ModSwitch[8]);
    set_pvar(SPVAR_9,ModSwitch[9]);
    set_pvar(SPVAR_10,ModSwitch[10]);
    set_pvar(SPVAR_11,ModDigit[1]);
    set_pvar(SPVAR_12,ModDigit[2]);
    set_pvar(SPVAR_13,ModDigit[3]);
    set_pvar(SPVAR_14,ModDigit[4]);
    set_pvar(SPVAR_15,ModDigit[5]);
    set_pvar(SPVAR_16,ModDigit[6]);
    set_pvar(SPVAR_17,ModDigit[7]);
    set_pvar(SPVAR_18,ModDigit[8]);
    set_pvar(SPVAR_19,ModDigit[9]);
    Saved = On;
	combo_run(Settings);
}    