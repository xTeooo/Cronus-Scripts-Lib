/* 

Zen OLED Menu Template ( Basic ) v1.00  

Made By = TaylorDrift21

Credits... Noozbar - Batts - Excalibur - Swizzy - DoGzTheFiGhTeR - LegitCloudzzz - XBL Jedi - DKGE - DontAtMe - MaxADMIN 

There are only a few people I use examples or code in this script, but the reason to mention everyone above is because of their 
outstanding support, I came here with NO knowledge and those above have given me their time of day to help me learn. I have learned a great deal in GPC... and look where I am now!!! 
Thank you all for your support, I appreciate it very much! 


Instructions... 

Enter Mod Menu             = Hold L2/LT & Press Options 
Exit Mod Menu              = Press Circle/B
Enter Edit Menu            = Press Cross/A
Exit Edit Menu             = Press Circle/B 
Enable/Disable KillSwitch  = Hold L2/LT & Press Share/View 


Button Layout , Change these buttons to suit your Controller Layout In Game 

Examples... PS4_L1 , PS4_L2 , PS4_L3 , PS4_R1 , PS4_R2 , PS4_R3 , PS4_CIRCLE ,PS4_CROSS, PS4_SQUARE ,PS4_TRIANGLE ,PS4_SHARE , PS4_OPTIONS , PS4_UP , PS4_DOWN , PS4_LEFT , PS4_RIGHT 

Do not worry if you use an XBOX Controller the Identifiers Above will work the same. However there are XBOX identifiers too. 

XB1_LB , XB1_LT , XB1_LS , XB1_RB , XB1_RT , XB1_RS ,XB1_Y ,XB1_A , XB1_B , XB1_X , XB1_UP ,XB1_DOWN ,XB1_LEFT, XB1_RIGHT ,XB1_VIEW ,XB1_MENU ,XB1_XBOX

*/

define AdsBtn		  = PS4_L2;
define FireBtn		  = PS4_R2;
define CrouchBtn 	  = PS4_R3;  
define JumpBtn  	  = PS4_L1;
define SprintBtn	  = PS4_L3;
define PingBtn		  = PS4_UP; 

/*
*** String Lists For Display ***

In order to save some space and have less repeated code... String Lists are the way forward. 
*/

const string Misc[] = { "Title Screen", "On", "Off","Menu Template","Made By","Taylordrift21","KillSwitch","Enabled","Disabled","" };  // Add More Strings for Misc Display Text, Example Add More to the Title Screen Display \\

const string ModNames[] = { "Mod1","Mod2", "Mod3",""};  // This is for the Mod Menu , this is where we display Mods that are added to the script \\
// ModName Number             0       1       2

const string ValNames[] = { "Val1","Val2","Val3",""}; // This for editable values in the script for Edit Menu, change the values \\
// ValName Number              0      1      2   

define AmountOfValues = 2;  // If You Add More Editable Values, You need To Increase The Value Here...

// Mixed Variables Needed For The Script To Function \\
 
int DisplayTitle = TRUE; // Display Title When The Script Loads, This Needs TO Be TRUE. 

int ScreenSaver,BlankScreen,ModMenu,DisplayMenu,ModNameIdx,Toggle,EditMenu,ValNameIdx,KillSwitch; // Menu Variables \\

int Mod1,Mod2,Mod3; // Mod Menu/Toggle Variables

int Val1,Val2,Val3; // Edit Menu /Editable Variables/Values


main { 
        
      /* Enter The Mod Menu */ 
        if(get_ival(AdsBtn))  // AdsBtn , This is so that if you play flipped and define your button above you can still enter the menu \\ 
        {
        	if(event_press(PS4_OPTIONS))
        	{
        		ModMenu     = TRUE;      // Mod Menu Will Activate \\
        		DisplayMenu = TRUE;      // Display The Mod Menu \\  
        		EditMenu    = FALSE;     // Make Sure We Don't Enter Edit Menu when  Entering Mod Menu \\
        		
        		if(!ModMenu)             // If NOT in the Mod Menu, Display Title \\
        	    	DisplayTitle = TRUE; 
        	}
        	if(event_press(PS4_SHARE)) 
        	{ 
        		KillSwitch =! KillSwitch;
        		combo_run(KillSwitch) 
        	} 	
        	set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); // We Block these Buttons from being Activated IN GAME \\ 
        }
        if(!DisplayTitle)                // If NOT on The Display Title, we are In Mod Menu Instead \\
        {
	        if(ModMenu)                  // If we are In Mod Menu \\
	        { 
	            // Menu Navigation Is One Function To Navigate The Menu , 0,2 < <  0 is the minimum Mods Available , 2 is the Maximum Mods Available \\
	            
	        	ModNameIdx        = MenuNavigation(ModNameIdx,0,2);   // ModNameIdx = Variable To Identify So The Script knows Which Menu We Are In \\
	        	
	        	// Toggles For Mods On/Off Press Up/Down , ModNameIdx == 0 , < < This is so we know which mod you are turning ON/OFF
	        	
	        	Mod1              = ToggleSwitch(ModNameIdx == 0,Mod1);
	        	Mod2              = ToggleSwitch(ModNameIdx == 1,Mod2);
	        	Mod3              = ToggleSwitch(ModNameIdx == 2,Mod3);
	        }
	        if(EditMenu)   // We are In Edit Menu \\
	        {
	            // Menu Navigation Is One Function To Navigate The Menu , 0,2 < <  0 is the minimum Editable Values Available , 2 is the Maximum Editble Values Available \\
	            
	        	ValNameIdx        = MenuNavigation(ValNameIdx,0,2); // ValNameIdx = Variable To Identify So The Script knows Which Menu We Are In \\
	        	
	        	// Edit Menu, This is where we Edit Values , 0 , 99 < < 0 Is the Minimum Editble Value , 99 < < Is the Maximum Value for That mod \\
	        	
	        	Val1              = EditValues(ValNameIdx , 0,Val1          , 0, 99); 
	            Val2              = EditValues(ValNameIdx , 1,Val2          , 0, 99); 
	            Val3              = EditValues(ValNameIdx , 2,Val3          , 0, 99); 
	            
	            // Limit Values Per Mods , For example AntiRecoil - Vertical - Horizontal , 0 , 1 which is used with the first ModNameIdx == 0 
	            
	            if(ModNameIdx == 0) ValNameIdx = cycle(ValNameIdx,0,1);	
	        }
	    } 
        if(DisplayMenu) // Display The Menu \\ 
        {
        	cls_oled(OLED_BLACK);  // Clear The OLED Display \\ 
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); // Display The Rectangle Around The Text 
        	line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE); // Display The Line In Between Text Top/Bottom 
        	
        	if(EditMenu)  // If EditMenu Display The Editable Mods \\ 
        	{
        		printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
        		
        		// 7 is the position of the text, 7 Pixels from the top of the OLED Screen, Change this value if you want the text lower or higher \\
        		
        		//printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ValNames[ValNameIdx]); If you want smaller Text \\
        	} 
        	else if(ModMenu) // If Mod Menu Display Mods
        	{
        		printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ModNames[ModNameIdx]); // Display ModNames ( Medium Text ) 
        		
        		// 7 is the position of the text, 7 Pixels from the top of the OLED Screen, Change this value if you want the text lower or higher \\
        		
        		//printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); // If you want smaller Text = Longer String Names \\
        	
        	    // While In Mod Menu Display On/Off Toggles For Mods \\
        	
        	    if(Toggle == 1) // If Toggle Is ON = Display ON 
        	    
        	         // 37 is the position of the text, 37 Pixels from the top of the OLED Screen, Change this value if you want the text lower or higher \\
        	         
    				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);	// Display ON Medium Text \\ // Misc[1] < This is number string in Misc String List
    				
    				//printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),46,OLED_FONT_SMALL,OLED_WHITE,Misc[1]);	// Display ON Small Text \\ // Misc[1] < This is number string in Misc String List
    				
           		else if(Toggle == 0) // If Toggle Is OFF =  Display OFF 
           		
           			// 37 is the position of the text, 37 Pixels from the top of the OLED Screen, Change this value if you want the text lower or higher \\
           			
            		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);  /// Display OFF Medium Text \\ // Misc[2] < This is number string in Misc String List
            		
            		//printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),46,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); // Display OFF Small Text \\ // Misc[2] < This is number string in Misc String List
        	}
        	Toggle = FALSE; 
            DisplayMenu = FALSE;
            
        } // End Of Display Menu \\
        
        if(!ModMenu && !EditMenu) // When NOT In Mod Menu And Edit Menu \\
        {
			if(DisplayTitle)  // We Are Displaying Title \\
			{
				cls_oled(OLED_BLACK);  // Clear OLED Display \\
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); // Display The Rectangle Around The Text 
				printf(center_x(get_misc_chars(0), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[0]);  // Display "Title Screen"  \\ Misc[0] = 1st String In The Misc String List \\
				printf(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[3]); // Display "Menu Template" \\ Misc[3] = 3rd String In The Misc String List \\
				printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Misc[4]); // Display "Made By"       \\ Misc[4] = 4th String In The Misc String List \\
				printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]); // Display "Taylordrift21" \\ Misc[5] = 5th String In The Misc String List \\
				
				DisplayTitle = FALSE;
        		ScreenSaver  = TRUE; 
			}
			if(ScreenSaver)  // ScreenSaver, After 10 seconds The Display Will Go Blank , THIS IS TO PREVENT SCREEN BURN \\ 
    		{
       			BlankScreen += get_rtime();
        	
    			if(BlankScreen >= 10000)
    			{
    				cls_oled(OLED_BLACK);
    				BlankScreen = 0;
    				ScreenSaver = TRUE; 
    				
        		}// End Of BlankScreen \\
        		
    		} // End of ScreenSaver \\
    		
    	} // End Of Display Title \\
    	
        if(!KillSwitch) // If KillSwitch IS NOT Active The Mods Will Be Active \\  
        { 
        	// Mods Input Here \\
        	// For Example \\
        	/*
        	if(AntiRecoil) 
        	{ 
        		if(get_ival(FireBtn) 
        		{
        			combo_run(LegacyRecoil) 
        		} 
        	} 
        	*/   	
        } // End Of Mods \\  
   	
}// End Of Script \\ 
    
// Menu Navigation Function For BOTH Menu's \\    
function MenuNavigation(f_modorval,f_min,f_max) { 

	if(!get_val(AdsBtn))
	{
		if(event_press(PS4_RIGHT))   // Press Right To See Next Mod/Value
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayMenu = TRUE;   
   		}     
		if(event_press(PS4_LEFT))    // Press Left To See Next Mod/Value 
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayMenu = TRUE;
		} 
        set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0);  
	}
	// Example \\
	
	//if(f_modorval <= AmountOfEditableValues)  At the Top Of The Script " define AmountOfEditbleValues = 4 " Example..
	
	if(f_modorval == 0)  // If ModNameIdx == 0  \\ IF You Have Mutiple Mods That Can Be Edited \\ You Could Do This... 
	{
		if(event_press(PS4_CROSS))  // Enter Edit Menu  \\
    	{ 
        	ValNameIdx  = AmountOfValues + 1; // Total Amount Of Values Available In Edit Menu \\ 
        	EditMenu    = TRUE;
        	ModMenu     = FALSE;
        	DisplayMenu = TRUE;
    	}
    	set_val(PS4_CROSS,0); 
    }
    if(ModMenu)  // When In Mod Menu  \\
    {
    	if(event_press(PS4_CIRCLE))  // Press Circle To Exit The Menu && Display The Title Screen \\  
    	{    
        	DisplayTitle = TRUE;
        	ModMenu      = FALSE; 
        	DisplayMenu  = FALSE; 
        	combo_run(RumbleOff);     
    	} 
    	set_val(PS4_CIRCLE,0); 
    }
    if(EditMenu) // When In Edit Menu \\
    {
    	if(event_press(PS4_CIRCLE))  // Press Circle To Exit The Edit Menu && Display The Mod Menu \\
    	{       
        	EditMenu     = FALSE; 
       		ModMenu      = TRUE;
        	DisplayMenu  = TRUE;   	
    	}
    	set_val(PS4_CIRCLE,0); 
    } 
    return f_modorval; 
} 
// Toggle Function \\ 
function ToggleSwitch(f_name,f_val) { 
	
    if(f_name) 
    {       
		if(event_press(PS4_UP) || event_press(PS4_DOWN)) // Press UP Or Down TO Turn Mods ON/OFF 
		{
			f_val =! f_val;
			DisplayMenu = TRUE;       // Display The Toggle Change 
			combo_run(ToggleVibrate); // Change Led Colour/Vibrate 
		}
		Toggle = f_val
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}
// Editable Values Function, Adjust & Display The Values \\ 
function EditValues(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(AdsBtn))  // Hold AdsBtn When Changing Values 
        {
            if(event_press(PS4_RIGHT))  // While Holding L2 Press Right To Increse The Value IN Edit Menu 
            {
                ValueIndex = cycle(ValueIndex + 1, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;     // Display The Value
            }
            if(event_press(PS4_LEFT))   // While Holding L2 Press Left To Increase The Value IN Edit Menu  
            {
                ValueIndex = cycle(ValueIndex - 1, ValueIndexMin,ValueIndexMax); 
                DisplayMenu = TRUE;     // Display The Value
            }
            set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); // Block The Buttons In The Menu 
        }
        number_to_string(ValueIndex,find_digits(ValueIndex));  // Display The Number On OLED Display  
    }
    return ValueIndex;                
 } 
// Used Combo's and other Functions In The Script \\
combo KillSwitch { 
cls_oled(OLED_BLACK); 
if(KillSwitch){  
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);}
if(!KillSwitch){ 
printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);} 
wait(1500);
DisplayTitle = TRUE;
} 
combo ToggleVibrate {
if(Toggle)
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
if(!Toggle) 
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
}

function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // Position/Size Of The Number Shown In Edit Menu \\ 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
