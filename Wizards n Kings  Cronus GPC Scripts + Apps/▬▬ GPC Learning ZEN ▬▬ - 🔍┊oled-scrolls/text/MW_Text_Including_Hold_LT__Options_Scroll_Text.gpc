

//--CALL OF DUTY MODERN WARFARE - WARZONE LOGO



int updateDisplay,updateText,flashText,scrollLogo,menuScroll;

main {
    
    if(event_press(PS4_CROSS)) {
        updateDisplay = TRUE;
        updateText = TRUE;
        cls_oled(OLED_BLACK);
        set_rgb(0,0,0);
    }
    if(updateDisplay) {
        if(updateText) {
            combo_run(DISPLAY_TEXT);
        }
        if(scrollLogo) {
            combo_run(SCROLL_LOGO);
            LedCycle();
        } 
        if(menuScroll) {
        	MenuScroll();
        }
                
    }
}
/*
============================================================================================================================
     DISPLAY_TEXT                                                                                                        
============================================================================================================================
*/
const uint8 TEXT[] = {_B, 15,  5, _R, 27,  5, _A, 39,  5, _V, 51,  5, _O,   63,  5,  _S,  80, 5,    _I, 92, 5, _X, 104, 5,
                      _G, 34, 25, _O, 46, 25, _I, 58, 25, _N, 70, 25, _G,   82, 25, 
                      _D, 27, 45, _A, 39, 45, _R, 51, 45, _K, 63, 45, _dot, 75, 45, _dot, 87, 45, _dot, 99, 45};
                      
int textIdx,loopCount,textColor;                      
                      
combo DISPLAY_TEXT {
    putc_oled(1,_space);
    puts_oled(TEXT[textIdx + 1],TEXT[textIdx + 2],OLED_FONT_MEDIUM,1,OLED_BLACK);
    wait(1);  
    wait(150)
	putc_oled(1,TEXT[textIdx]); 
    puts_oled(TEXT[textIdx + 1],TEXT[textIdx + 2],OLED_FONT_MEDIUM,1,OLED_WHITE);
    wait(1);  
    wait(150)
    textIdx += 3;
    if(textIdx == sizeof(TEXT) / sizeof(TEXT[0])) {
		updateText = FALSE;
		textIdx = 0;
		combo_run(DELAY);
    }
    
} 
combo DELAY {
    wait(1500);
    scrollLogo = TRUE;
}
/*
============================================================================================================================
     LED CYCLE                                                                                                       
============================================================================================================================
*/
int colorCycleTime,colorCycleRed;

function LedCycle() {
    colorCycleTime += get_rtime();
    if(colorCycleTime >= 50) {
    	colorCycleTime = 0;
      	colorCycleRed++;
        if(colorCycleRed > 255) {
            colorCycleRed = 255;
        }
    }
    set_rgb(colorCycleRed,0,0);
}
/*
============================================================================================================================
     SCROLL LOGO                                                                                                       
============================================================================================================================
*/
int scrollY = 106;

combo SCROLL_LOGO {
    cls_oled(OLED_BLACK);
	DrawLogo(0,scrollY, TRUE);
  	wait(1);
	wait(50);
	scrollY--;
	if(scrollY == 52) {
	    scrollLogo = FALSE;
	    scrollY = 106;
	    menuScroll = TRUE;
	}   
}
/*
============================================================================================================================
    DRAW LOGO                                                                                                      
============================================================================================================================
*/
int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData; 

function DrawLogo(x, y, invert) {                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) {         // Loop the Y axis 
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) {     // Loop the X axis 
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;             // Decrement the bit flag, we are moving to the next bit 
            if (!logoBit) {     // Check if we have just handled the last bit  
                logoBit = 16;     // Reset the bit flag     
                logoOffset++;     // Move to the next value 
            }  
        }   
    }    
} 
/*
============================================================================================================================
     IntroScroll()                                                                                                        
============================================================================================================================
*/

const uint8 INTRO_SCROLL_TEXT[] = {
//    1			2		3		4	   5		 6		 7		   8		  9		      10	     11		    12		  13		 14		     15		  16		17        18
     _space, _space,   _space, _H,	  _o,	    _l,		_d,	      _space,	 _L,	    _T, 	    _space,    _plus,	  _space,    _M,		 _E,      _N,	    _U,	     _space,
     _space, _space,   _o,	   _r,    _space,   _L,	    _2,	      _space,	 _plus,	    _space,     _O,		   _P,	      _T,		 _I, 	     _O,	  _N,		_S,	     _space,
     _space, _f,	   _o,     _r,    _space,   _G,		_a,	      _m,		 _e,		_P,	        _a,		   _c,		  _k,		 _space,	 _M,	  _e,		_n,      _u 
};     

int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function MenuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 30;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 18; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(INTRO_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, INTRO_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(INTRO_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, INTRO_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 52,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(INTRO_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 18;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
 const int16 BOOT_LOGO[] = { 
127, 53,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFF0,0xC119,0xF064,0x0067,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFCC,0x8233,0xE449,0x861F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF99,0x0464,0x4C93,0x9C3F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF3E,0x48C8,0x9927,0x387F,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFE7C,0x919F,0x324E,0x79FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFCC8,0x233E,0x649C,0xF3FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF990,0x467C,0x8839,0xE7FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF864,0x8438,0x3073,0xCFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xF9FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF0,0x780E,0x0700,0x7800,0x1E00,0x01E0,0x03C0,0xF030,0x0060,0xF01C,0x0C00,0xF000,0x0C00,0x0380,0x0181,0xE060,0x00C1,0xE038,
    0x1801,0xF000,0x1800,0x0600,0x0303,0xC0C0,0x0183,0xC030,0x3003,0xE000,0x3000,0x0C00,0x0603,0x8180,0x0303,0x0060,0x6007,0xC000,0x6000,0x1800,0x0C07,0x0300,0x0606,0x00C0,0xC00F,0x81C0,0xC000,0x3038,0x180E,0x0600,0x0C0C,0x0181,
    0x801F,0x0381,0xFFC0,0x6070,0x300C,0x0C0F,0xF818,0x0302,0x001E,0x0703,0xFF01,0xC0E0,0x6018,0x181F,0xF030,0x0604,0x003C,0x0E07,0xFE03,0x81C0,0xC030,0x303F,0xE060,0x0C18,0x3078,0x1C0F,0xF80F,0x0381,0x8020,0x607F,0xC0C0,0x1830,
    0x60F0,0x381F,0xF01E,0x0703,0x0060,0xC0FF,0x8180,0x3060,0xC1E0,0x703F,0xE07C,0x0E06,0x00C1,0x81FF,0x8308,0x60C1,0x83C0,0xE07F,0x80F8,0x1C0C,0x0003,0x000F,0x0410,0xC183,0x0380,0x00FF,0x03F0,0x3818,0x0006,0x001E,0x0821,0x8306,
    0x0700,0x01FC,0x07E0,0x7030,0x000C,0x003C,0x1042,0x040C,0x0E00,0x0FF8,0x1FC0,0xE060,0x0018,0x0078,0x2080,0x0818,0x1C00,0x1FE0,0x3F81,0xC0C0,0x0030,0x00F0,0x0300,0x3030,0x3800,0x3FC0,0xFF03,0x8183,0x0060,0x01E0,0x0600,0x6000,
    0x7020,0x3F01,0xFE07,0x0306,0x00C0,0xFFC0,0x0C00,0xC000,0xE040,0x7E07,0xFC0E,0x0604,0x0181,0xFFC0,0x1801,0x8000,0xC0C0,0xF80F,0xF81C,0x0C08,0x0303,0xFF80,0x3002,0x0001,0x8180,0xF01F,0xF038,0x1818,0x0607,0xFF00,0x6004,0x0003,
    0x0301,0xC07F,0xE070,0x3030,0x0C0F,0xFE00,0xC008,0x0006,0x0703,0x80FF,0xC0E0,0x6060,0x181F,0xFC01,0x8030,0x3C0C,0x0E02,0x0001,0x8080,0xC0E0,0x3000,0x7803,0x8060,0x7818,0x1C04,0x0003,0x0001,0x81C0,0x6000,0xF007,0x00C0,0xF030,
    0x3C08,0x0006,0x0003,0x0380,0xC001,0xF00E,0x0181,0xE060,0x7810,0x000C,0x0006,0x0781,0x8003,0xE01C,0x0303,0xC0C0,0xF020,0x001C,0x001C,0x0F03,0x0007,0xC078,0x0607,0x8181,0xF060,0x003C,0x0078,0x3E06,0x0000
 } // picture 
/*
============================================================================================================================
     ASCII CONSTANTS                                                                                                        
============================================================================================================================
*/
define  _0 = 48,   _A = 65,   _K = 75,   _U =  85,   _e = 101,   _o = 111,   _y       = 121,    _star      = 42,  _opensquare  =  91,   _lessthan    = 60;
define  _1 = 49,   _B = 66,   _L = 76,   _V =  86,   _f = 102,   _p = 112,   _z       = 122,    _plus      = 43,  _backslash   =  92,   _greaterthan = 62;
define  _2 = 50,   _C = 67,   _M = 77,   _W =  87,   _g = 103,   _q = 113,   _space   =  32,    _comma     = 44,  _closesquare =  93,   _closecurly  = 125;
define  _3 = 51,   _D = 68,   _N = 78,   _X =  88,   _h = 104,   _r = 114,   _bang    =  33,    _open      = 40,  _equals      =  61,   _tilda       = 126;
define  _4 = 52,   _E = 69,   _O = 79,   _Y =  89,   _i = 105,   _s = 115,   _quote   =  34,    _close     = 41,  _question    =  63,   _dot         =  46;
define  _5 = 53,   _F = 70,   _P = 80,   _Z =  90,   _j = 106,   _t = 116,   _hash    =  35,    _slash     = 47,  _tick1       =  96;
define  _6 = 54,   _G = 71,   _Q = 81,   _a =  97,   _k = 107,   _u = 117,   _dollar  =  36,    _colon     = 58,  _opencurly   = 123;
define  _7 = 55,   _H = 72,   _R = 82,   _b =  98,   _l = 108,   _v = 118,   _percent =  37,    _semicolon = 59,  _pipe        = 124;
define  _8 = 56,   _I = 73,   _S = 83,   _c =  99,   _m = 109,   _w = 119,   _and     =  38,    _hypen     = 45,  _hat         =  94;
define  _9 = 57,   _J = 74,   _T = 84,   _d = 100,   _n = 110,   _x = 120,   _tick    =  39,    _stop      = 46,  _underscore  =  95;

