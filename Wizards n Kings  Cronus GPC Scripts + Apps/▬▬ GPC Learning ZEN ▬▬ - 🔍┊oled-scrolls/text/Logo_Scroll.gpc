int scrollLogo;
int scrollX = 127;

main {
    if(event_press(XB1_A)) {
        scrollLogo = TRUE;
    }
    if(scrollLogo) {
        combo_run(SCROLL_LOGO);
    }
}
combo SCROLL_LOGO() {
 	DrawLogo(scrollX, 0, TRUE);
 	wait(1);
 	wait(10);
 	scrollX -= 5;
 	if(scrollX < 0) {
     	scrollLogo = FALSE;
 	}
}


/*
============================================================================================================================
     DrawLogo(x, y, invert)                                                                                                
============================================================================================================================
*/
int logoX,logoX2,logoY, logoY2;
int logoBit,logoOffset,logoData,logoOut;

function DrawLogo(x, y, invert) {
    cls_oled(OLED_BLACK);
    logoOffset = 2;
    logoBit = 16;
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) {         // Loop the Y axis
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) {     // Loop the X axis
            logoData = BOOT_LOGO[logoOffset]
            logoX2 = x + logoX;
            logoY2 = y + logoY;
            if (logoX2 < 0 || logoX2 >= 128) {
                logoOut = TRUE;
            }
            if (logoY2 < 0 || logoY2 >= 64) {
                logoOut = TRUE;
            }
            if(!logoOut) {
            	if (test_bit(logoData, logoBit - 1)) {
                	pixel_oled(logoX2, logoY2, !invert);
           		}else{
               		 pixel_oled(logoX2, logoY2, invert);
            	}
            }
            logoOut = FALSE;
            logoBit--;             // Decrement the bit flag, we're moving to the next bit
            if (!logoBit) {     // Check if we've just handled the last bit
                logoBit = 16;     // Reset the bit flag
                logoOffset++;     // Move to the next value
            }
        }
    }
}
 const int16 BOOT_LOGO[] = { 
127, 53,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFF0,0xC119,0xF064,0x0067,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFCC,0x8233,0xE449,0x861F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF99,0x0464,0x4C93,0x9C3F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFF3E,0x48C8,0x9927,0x387F,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFE7C,0x919F,0x324E,0x79FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFCC8,0x233E,0x649C,0xF3FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF990,0x467C,0x8839,0xE7FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF864,0x8438,0x3073,0xCFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xF9FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF0,0x780E,0x0700,0x7800,0x1E00,0x01E0,0x03C0,0xF030,0x0060,0xF01C,0x0C00,0xF000,0x0C00,0x0380,0x0181,0xE060,0x00C1,0xE038,
    0x1801,0xF000,0x1800,0x0600,0x0303,0xC0C0,0x0183,0xC030,0x3003,0xE000,0x3000,0x0C00,0x0603,0x8180,0x0303,0x0060,0x6007,0xC000,0x6000,0x1800,0x0C07,0x0300,0x0606,0x00C0,0xC00F,0x81C0,0xC000,0x3038,0x180E,0x0600,0x0C0C,0x0181,
    0x801F,0x0381,0xFFC0,0x6070,0x300C,0x0C0F,0xF818,0x0302,0x001E,0x0703,0xFF01,0xC0E0,0x6018,0x181F,0xF030,0x0604,0x003C,0x0E07,0xFE03,0x81C0,0xC030,0x303F,0xE060,0x0C18,0x3078,0x1C0F,0xF80F,0x0381,0x8020,0x607F,0xC0C0,0x1830,
    0x60F0,0x381F,0xF01E,0x0703,0x0060,0xC0FF,0x8180,0x3060,0xC1E0,0x703F,0xE07C,0x0E06,0x00C1,0x81FF,0x8308,0x60C1,0x83C0,0xE07F,0x80F8,0x1C0C,0x0003,0x000F,0x0410,0xC183,0x0380,0x00FF,0x03F0,0x3818,0x0006,0x001E,0x0821,0x8306,
    0x0700,0x01FC,0x07E0,0x7030,0x000C,0x003C,0x1042,0x040C,0x0E00,0x0FF8,0x1FC0,0xE060,0x0018,0x0078,0x2080,0x0818,0x1C00,0x1FE0,0x3F81,0xC0C0,0x0030,0x00F0,0x0300,0x3030,0x3800,0x3FC0,0xFF03,0x8183,0x0060,0x01E0,0x0600,0x6000,
    0x7020,0x3F01,0xFE07,0x0306,0x00C0,0xFFC0,0x0C00,0xC000,0xE040,0x7E07,0xFC0E,0x0604,0x0181,0xFFC0,0x1801,0x8000,0xC0C0,0xF80F,0xF81C,0x0C08,0x0303,0xFF80,0x3002,0x0001,0x8180,0xF01F,0xF038,0x1818,0x0607,0xFF00,0x6004,0x0003,
    0x0301,0xC07F,0xE070,0x3030,0x0C0F,0xFE00,0xC008,0x0006,0x0703,0x80FF,0xC0E0,0x6060,0x181F,0xFC01,0x8030,0x3C0C,0x0E02,0x0001,0x8080,0xC0E0,0x3000,0x7803,0x8060,0x7818,0x1C04,0x0003,0x0001,0x81C0,0x6000,0xF007,0x00C0,0xF030,
    0x3C08,0x0006,0x0003,0x0380,0xC001,0xF00E,0x0181,0xE060,0x7810,0x000C,0x0006,0x0781,0x8003,0xE01C,0x0303,0xC0C0,0xF020,0x001C,0x001C,0x0F03,0x0007,0xC078,0x0607,0x8181,0xF060,0x003C,0x0078,0x3E06,0x0000
 } // picture 
