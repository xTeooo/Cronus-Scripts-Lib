
/*
                  ___|         |  |              _|      __ \          |                    
                 |       _` |  |  |       _ \   |        |   |  |   |  __|  |   |           
                 |      (   |  |  |      (   |  __|      |   |  |   |  |    |   |           
                \____| \__,_| _| _|     \___/  _|       ____/  \__,_| \__| \__, |           
   \  |             |                        \ \        /              _|  ____/            
  |\/ |   _ \    _` |   _ \   __|  __ \       \ \  \   /  _` |   __|  |     _` |   __|  _ \ 
  |   |  (   |  (   |   __/  |     |   |       \ \  \ /  (   |  |     __|  (   |  |     __/ 
 _|  _| \___/  \__,_| \___| _|    _|  _|        \_/\_/  \__,_| _|    _|   \__,_| _|   \___| 
                 
 /*
 // SCRIPT FATTO DA ANDRY85
 //==============================================================*/	
//                    ISTRUZIONI
//==============================================================*/
// Script fatto per Layout tradizionale miro e sparo con L2 e R2 per play e LT e RT per xbox
 // RECOIL progressivo SEMPRE ATTIVO SU DUE ARMI,ARMA PRIMARIA VERDE ARMA SECONDARIA ROSSO
 // CAMBIO ARMA TRIANGOLO (LED VERDE PRIMARIA, LED ROSSO SECONDARIA)
 // Arma speciale doppio tap su triangolo colore giallo
 // RESET ARMA L2/LT + TRIANGOLO\Y  ( SE ARMA/LED NON E' GIUSTO)
 // RAPID FIRE PRIMARIA L1/Lb + LEFT (LED PINK) ( ATTIVAZIONE E FUNZIONAMENTO SOLO SU ARMA PRIMARIA LED verde)
 // RAPID FIRE Secondaria L2/LT + LEFT (LED PINK) ( ATTIVAZIONE E FUNZIONAMENTO SOLO SU ARMA SECONDARIA LED ROSSO)
 // RESPITO AUTO L2/LT + X (LED SKYBLUE)
 // slide cancel L2 + OPTIONS (LED BIANCO)
 // AIM ASSIST SU PRIMARIA E SECONDARIA
 // POLAR AIM
 // INVERSIONE ASSE Y
 // DOPPIO JUMP SINGOLO (ON/OFF PREMENDO A o X + SU)
 // DROP SHOT (ON/OFF PREMENDO L2/LT + GIU)
 // AUTOPING (L1+SU ON /OFF)


 // SE VI PIACE LO SCRIPT POTETE FARE UNA DONAZIONE SU: IF YOU LIKE A SCRIPT CAN DONATE AT:

 // https://www.paypal.com/paypalme/andry1985
 
 // PER ASSISTENZA:
 
 // https://www.facebook.com/groups/cronusmaxitaliaofficial
 // https://cronusmax.com/forums/forumdisplay.php/262-CronusMAX-Supporto-Italiano

 
//==============================================================*/	
//                   SETTAGGIO ANTIRECOIL
//==============================================================*/
 
// ARMA PRIMARIA VERTICALE
        define    P_Starting_Anti_Recoil_Value  = 48;    //--postive values only
        define    P_Mid_Point_Anti_Recoil_Value = 35;
        define    P_Ending_Anti_Recoil_Value    = 37;
        define    P_Total_Anti_Recoil_Time      = 4000;  //-- 10ms increments (min - 2000)
        define    P_Progression_Point_Percent   = 50;    //--percentage of total time to transition to mid to end values 10% increments
 // ARMA PRIMARIA ORIZZONTALE
    	define    antirecoil_HP_start  = 10;
    	define    antirecoil_HP_mid  = -10;
    	define    antirecoil_HP_end    = 10;
    	define    antirecoil_HP_time   = 4000;  //-- 10ms increments
//ARMA SECONDARIA VERTICALE    	        
        define    S_Starting_Anti_Recoil_Value  = 27;    //--postive values only
        define    S_Mid_Point_Anti_Recoil_Value = 18;
        define    S_Ending_Anti_Recoil_Value    = 20;
        define    S_Total_Anti_Recoil_Time      = 3000;  //-- 10ms increments (min - 2000)
        define    S_Progression_Point_Percent   = 50;    //--percentage of total time to transition to mid to end values 10% increments
//ARMA SECONDARIA ORIZZONTALE
    	define    antirecoil_HS_start  = -3;
    	define    antirecoil_HS_mid  = 0;
    	define    antirecoil_HS_end    = -3;
    	define    antirecoil_HS_time   = 3250;  //-- 10ms increments 
// Arma speciale verticale
 		define    spec_start  = 40;    //--postive values only
        define    spec_mid    = 40;
        define    spec_end    = 40;
        define    spec_time   = 2500;  //-- 10ms increments (min - 2000)
        define    spec_prog   = 50;    //--percentage of total time to transition to mid to end values 10% increments
//Arma speciale ORIZZONTALE
    	define    spec_H_start  = -3;
    	define    spec_H_mid  = 0;
    	define    spec_H_end    = -3;
    	define    spec_H_time   = 3250;  //-- 10ms increments 
 
//IMPOSTAZIONI AIM ASSIST ( SE TREMA DIMINUISCI ALTRIMENTI ALZA FINCHE NON TREMA) 
        int sticky = FALSE
        int sticky_size = 13;
        int sticky_time = 20;
       
//POLAR AIM ASSIST
        int polar_aim_assist = FALSE; //Attiva / Disattiva
        int RADIUS = 15; //( SE TREMA DIMINUISCI ALTRIMENTI ALZA FINCHE NON TREMA)
              
 // PER INVERTIRE I TASTI TRA L2 E L1 E R2 E R1       
  define SCOPE = 7 // METTERE 6 SE SI MIRA CON L1     
  define FIRE = 4  // METTERE 3 SE SI SPARA CON R1 
  
//INVERSIONE ASSE Y (Per invertire lasse mettere -1)
  
  int invertito = 1

// CONFIGURAZIONE TASTI

define PING= PS4_UP
define ABBASSARSI= PS4_CIRCLE
define SALTARE= PS4_CROSS

// ATTIVAZIONE DISATTIVAZIONE AUTO PING

int AUTOPING = ON //Se si vuole disabilitare mettere OFF


//==============================================================*/	
//                   VARIABILI
//==============================================================*/
                      
        
        define Switch_Weapon = 17; //  Y / TRIANGOLO        
 		define RF_SPEED = 30;
 		define ON  = TRUE;
		define OFF = FALSE;
	    define Blue       =  1; 
        define Red        =  2;                                     
        define Green      =  3; 
        define Pink       =  4; 
        define SkyBlue    =  5; 
        define Yellow     =  6; 
        define White      =  7;
        define Off        =  8;
 
        	
 		// NON TOCCARE
 		int    STEPS = 20;                                  
		int    POLAR_BOOST   =  2;
		int    POLAR_SHAKE   = 35;
        define X = XB1_RX;                                     
        define Y = XB1_RY;                                    
        define ACTIVE_WHEN_ADS    = ON;                     
        define ACTIVE_WHEN_FIRING = ON;                            
        define POLAR_BOOST_FIRE   = OFF;
		define POLAR_SHAKE_FIRE   = OFF;
		define STEP_INTERVAL =  1;                            
        define VM_INTERVAL   = -2;
        define STEPS2 = 0;
		int RADIUS1,RADIUS2 = 10,RADIUS3 = 100;
        int STEPS1
        int time;                                             
        int angle, cos_angle, sin_angle;                      
        int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
        const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
        80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
        6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
        -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
        -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
        -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
        -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
        9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
        82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};     
     
//------------------------------------------------------------------------------------------- 
data(1,
 
  2,0,0,0, //1. Blue
  0,2,0,0, //2. Red
  0,0,2,0, //3. Lime/Green
  0,0,0,2, //4. Fuchsia/Pink
  2,0,2,0, //5. SkyBlue
  0,2,2,0, //6. Yellow
  2,2,2,2,  //7. White
  0,0,0,0  //8. Off 
); 
 
        int    Starting_Anti_Recoil_Value;
        int    Mid_Point_Anti_Recoil_Value;
        int    Ending_Anti_Recoil_Value;
        int    Total_Anti_Recoil_Time;
        int    Progression_Point_Percent; 
   		int    antirecoil_H_start;
   		int    antirecoil_H_mid;
    	int    antirecoil_H_end;
    	int    antirecoil_H_time;  //-- 10ms increments 
        int double_tap;
		int spec;    	
       	int respiro = FALSE;
        int Col_ind;
        int rapidfire = FALSE;
        int autorun= FALSE:
		int colore;
        int weapon;
        int p,inc,inc_2,pr,pr_2,vm,vm_2; 
        int loops,loops_2,vm_count,p_count,v,ar_y;
        int vm_loops
        int pH,incH,inc_2H,prH,pr_2H,vmH,vm_2H; 
        int loopsH,loops_2H,vm_countH,p_countH,vH,ar_x;
        int vm_loopsH;
        int drop_onoff;
        int JUONOFF;
        
//==============================================================*/	
//                   SEZIONE MAIN
//==============================================================*/

main {

// JUMPSHOT
if(get_val(XB1_A) && event_press(PS4_UP)) {combo_run (vibrate); JUONOFF = !JUONOFF; } 
 
           if(JUONOFF) { 
           if(event_press(PS4_L2)) {
        	combo_run(Turbo_JUMP)
	}
}           
// DROPSHOT
if(get_val(PS4_L2) && event_press(PS4_DOWN))  {combo_run (vibrate); drop_onoff=!drop_onoff;}                             
            if(drop_onoff){        
            if(get_val(SCOPE) && event_press(FIRE)) { combo_run(DROPSHOT); }         
            }
 

//RESET ZONAMORTA
    if(abs(get_val(PS4_LY)) < 5 && abs(get_val(PS4_LX)) < 5 ){        
        set_val(PS4_LY,0);                                                
        set_val(PS4_LX,0); }                                           
    if(abs(get_val(PS4_RY)) < 5 && abs(get_val(PS4_RX)) < 5 ){         
        set_val(PS4_RY,0);                                                 
        set_val(PS4_RX,0); } 
        
//VALORE DEL TRIGGER SPARO IMPOSTATO A 100
if (get_val(FIRE)){set_val(FIRE,100);}        
if (get_val(SCOPE)){set_val(SCOPE,100);}



//ANTIRECOIL VERTIALE
{
    loops = (Total_Anti_Recoil_Time / 100) * (Progression_Point_Percent / 10);
    loops_2 = (Total_Anti_Recoil_Time / 10) - loops;
    if(Starting_Anti_Recoil_Value < Mid_Point_Anti_Recoil_Value)
        inc = 1;
    else
        inc = -1;
   if(Mid_Point_Anti_Recoil_Value < Ending_Anti_Recoil_Value)
     inc_2 = 1;
    else
      inc_2 = -1;
   if(Mid_Point_Anti_Recoil_Value < Ending_Anti_Recoil_Value)
     inc_2 = 1;
    else
      inc_2 = -1;
    pr = abs(Starting_Anti_Recoil_Value - Mid_Point_Anti_Recoil_Value);
    pr_2 = abs(Mid_Point_Anti_Recoil_Value - Ending_Anti_Recoil_Value);
    vm = loops / pr;
    vm_2 = loops_2 / pr_2;
}
//DEVICE MONITOR
    set_val(30,vm_count);
    set_val(31,p);
    set_val(32,ar_y);

//VERTICALE 
    if(!get_lval(FIRE)) {
        p = 0;
        vm_count = 0;
        p_count = 0;
        ar_y = Starting_Anti_Recoil_Value;
    }
 
//VERTICALE
    if(get_val(FIRE)&& get_val(SCOPE)) {
        p = p_cycle();
        if(p != -1)
            ar_y = p_val();
        else
            ar_y = Ending_Anti_Recoil_Value;
         set_val(10,y_val());
    }    



//ANTIRECOIL ORIZZONTALE
{
    loopsH = (antirecoil_H_time / 100) * (Progression_Point_Percent / 10);
    loops_2H = (antirecoil_H_time / 10) - loopsH;
    if(antirecoil_H_start < antirecoil_H_mid)
        incH = 1;
    else
        incH = -1;
   if(antirecoil_H_mid < antirecoil_H_end)
     inc_2H = 1;
    else
      inc_2H = -1;
   if(antirecoil_H_mid < antirecoil_H_end)
     inc_2H = 1;
    else
      inc_2H = -1;
    prH = abs(antirecoil_H_start - antirecoil_H_mid);
    pr_2H = abs(antirecoil_H_mid - antirecoil_H_end);
    vmH = loopsH / prH;
    vm_2H = loops_2H / pr_2H;
}
//DEVICE MONITOR
    set_val(33,vm_countH);
    set_val(34,pH);
    set_val(35,ar_x);

//ANTIRECOIL ORIZZONTALE 
    if(!get_lval(FIRE)) {
        pH = 0;
        vm_countH = 0;
        p_countH = 0;
        ar_x = antirecoil_H_start;
    }
 
//ANTIRECOIL ORIZZONTALE
    if(get_val(FIRE)&& get_val(SCOPE)) {
        pH = p_cycleh();
        if(pH != -1)
            ar_x = p_valH();
        else
            ar_x = antirecoil_H_end;
         set_val(9,y_valh());
    }    
//AUTOPING
if(get_val(PS4_L1) && event_press(PS4_UP)) { AUTOPING=!AUTOPING }
   if(AUTOPING){
    if(get_val(FIRE) && get_val(SCOPE)) {
       combo_run(Turbo_PNG)}} 	 

//POLAR AIM ASSIST
	
 	 	if(polar_aim_assist)
         {
 
          //vm_tctrl(VM_INTERVAL);  
          actual_X = get_val(X);   
          actual_Y = get_val(Y);           
          actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
          max_Magnitude = (actual_Magnitude < 100); 
          if (POLAR_BOOST_FIRE) {
			if (get_val(FIRE)) {	
   				RADIUS1 =  POLAR_BOOST * RADIUS2;
   				}
			else if (!get_val(FIRE)) {
    		RADIUS1 =  RADIUS3;
   				}
   				}
			if (POLAR_SHAKE_FIRE) {
			if (POLAR_SHAKE_FIRE && get_val(FIRE)) {
				STEPS1 = POLAR_SHAKE;
				}
				else if (!get_val(FIRE)) { 
				STEPS1 = STEPS2;
				}
				}   		
 
          if(!(time++ % STEP_INTERVAL)){                                  
                 angle += STEPS + STEPS1;                                                 
          }                                                               
          angle = angle % 360;                                            
          sin_angle = Polar_Array[angle % 360];                           
          cos_angle = Polar_Array[(angle + 270) % 360];                  
          cos_angle = (cos_angle * RADIUS) / 100;                         
          sin_angle = (sin_angle * RADIUS) / 100;                          
 
          if((ACTIVE_WHEN_ADS && get_val(SCOPE)) || (ACTIVE_WHEN_FIRING && get_val(FIRE))){ 
               if(actual_Magnitude <= RADIUS){                                                      
                    sin_angle -= actual_Y;                                                              
                    cos_angle -= actual_X;                                                                 
               }else {                                                                                       
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
               }                                                  
               set_val(X, calculate(actual_X + cos_angle, -100, 100));
               set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
          	}
         }

if(double_tap) 
        double_tap -= get_rtime(); 
        
        
    if (event_release(Switch_Weapon)&& get_ptime(Switch_Weapon) < 250){
        weapon = !weapon;
        spec = FALSE;
         
         if(double_tap) 
        { 
            spec = TRUE ; 
            weapon = !weapon;
            
            
        }
            else
                double_tap = 200; 
    }
    
     if(spec) 
    {		 
    		Starting_Anti_Recoil_Value  =  spec_start;
            Mid_Point_Anti_Recoil_Value =  spec_mid;
            Ending_Anti_Recoil_Value    = spec_end;  
            Total_Anti_Recoil_Time      = spec_time ;
            Progression_Point_Percent   = spec_prog;
            
            antirecoil_H_start = spec_H_start;
    		antirecoil_H_mid = spec_H_mid;
    		antirecoil_H_end = spec_H_end;
    		antirecoil_H_time = spec_H_time;
        
    }
        else
        {
        if(!weapon){
            Starting_Anti_Recoil_Value  = P_Starting_Anti_Recoil_Value;
            Mid_Point_Anti_Recoil_Value = P_Mid_Point_Anti_Recoil_Value
            Ending_Anti_Recoil_Value    = P_Ending_Anti_Recoil_Value;  
            Total_Anti_Recoil_Time      = P_Total_Anti_Recoil_Time;
            Progression_Point_Percent   = P_Progression_Point_Percent;
            
            antirecoil_H_start = antirecoil_HP_start;
    		antirecoil_H_mid = antirecoil_HP_mid;
    		antirecoil_H_end = antirecoil_HP_end;
    		antirecoil_H_time = antirecoil_HP_time;
        }else{
            Starting_Anti_Recoil_Value  = S_Starting_Anti_Recoil_Value;
            Mid_Point_Anti_Recoil_Value = S_Mid_Point_Anti_Recoil_Value
            Ending_Anti_Recoil_Value    = S_Ending_Anti_Recoil_Value;   
            Total_Anti_Recoil_Time      = S_Total_Anti_Recoil_Time;
            Progression_Point_Percent   = S_Progression_Point_Percent;
        	
        	antirecoil_H_start = antirecoil_HS_start;
        	antirecoil_H_mid = antirecoil_HS_mid;
    		antirecoil_H_end = antirecoil_HS_end;
    		antirecoil_H_time = antirecoil_HS_time;
        }
       
        }
 
   if (get_val(SCOPE)&& get_val(XB1_Y))
   		set_val(XB1_Y,0)
 
//RAPID FIRE
if (get_val(SCOPE) && event_press(PS4_LEFT) && weapon)rapidfire = !rapidfire;
                if ((rapidfire) && get_val(FIRE) && weapon)
                        combo_run(RAPIDFIRE);
                     else  
                        combo_stop(RAPIDFIRE);
                        
//SLIDE CANCEL
 
if (get_val (SCOPE) && event_press (PS4_OPTIONS)) autorun=!autorun;
         if (autorun){     
         if((get_val(PS4_LY) < -90) || (get_val(PS4_LY) > 90) || (get_val(PS4_LX) < -90) || (get_val(PS4_LX) > 90))
    	{
		      if(event_release (ABBASSARSI))
		         combo_run(CANCEL_SLIDE)                                            
	    }}                              
 

//AIM ASSIST
if(sticky){
if(get_val(SCOPE)&& !get_val(FIRE)) combo_run(STICKY);}
          
 
//RESPIRO AUTOMATICO SOTTO TRIGGER
if(get_val(SCOPE) && event_press(XB1_A))respiro = !respiro ;            
        if (respiro) {
        if(get_val(SCOPE) > 99 && get_ptime(SCOPE) > 500) {set_val(8, 100);}}   

//COLORI LED IN BASE A COSA ATTIVO E DISATTIVO
				if(spec) colourled(Yellow)
				else if(!weapon) colourled(Green);
            	else colourled(Red);            	                             
                if (rapidfire && weapon && !spec) {combo_run(lampeggio);
                colore = Pink;}
                if (autorun && !weapon && !spec) colourled(White);
                if ((autorun) && weapon && !spec) {combo_run(lampeggio);
                colore = White;}
                if (respiro && !weapon && !spec) colourled(SkyBlue);
                if ((respiro) && weapon && !spec) {combo_run(lampeggio);
                colore = SkyBlue;}           
}        

//==============================================================*/	
//                   FUNZIONI
//==============================================================*/

//FUNZIONE POLAR AIM
   function calculate(int v, int lo, int hi) {  
      if(v < lo) return lo;               
      if(v > hi) return hi;        
      return v;     
    }  
//FUNZIONE ANTIRECOIL VERTICALE 
function p_val() {
    p_count++;
    if(p_count == vm[p]) {
        p_count = 0;
        ar_y += inc[p];
    }
    return ar_y;
} 

function p_cycle() { 
    vm_count++;
    if (vm_count > loops[p]) { 
        if(!p) {
            vm_count = 0;
            return 1;
        }
        else{
            vm_count = loops_2; 
            return -1;
         } 
     }
     return p;
}   

function y_val() {
    v = get_val(10);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > ar_y + 5)
        return v;
    return v + ( ar_y * invertito);           
}

//FUNZIONE ANTIRECOIL ORIZZONTALE 
function p_valH() {
    p_countH++;
    if(p_countH == vmH[pH]) {
        p_countH = 0;
        ar_x += incH[pH];
    }
    return ar_x;
} 

function p_cycleh() { 
    vm_countH++;
    if (vm_countH > loopsH[pH]) { 
        if(!pH) {
            vm_countH = 0;
            return 1;
        }
        else{
            vm_countH = loops_2H; 
            return -1;
         } 
     }
     return p;
}   

function y_valh() {
    vH = get_val(9);
    if(abs(vH) < 10)
        vH = 0;
    if(abs(vH) > abs(ar_x + 5))
        return vH;
    return vH + ar_x;           
}
    
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < sticky_size + 1) 
        return f_val;
    return get_val(f_axis); 
}

//==============================================================*/	
//                   COMBO
//==============================================================*/
 combo vibrate { 
                set_rumble(RUMBLE_A, 50);
                wait(300);
                reset_rumble();
                }    

combo DROPSHOT {
                set_val(ABBASSARSI, 100);
                wait(500);//Time To Go Prone
                } 
 combo Turbo_JUMP {
    			set_val(SALTARE, 100);
    			wait(150);
    			set_val(SALTARE, 0);
    			wait(400);
    			set_val(SALTARE, 100);
    			wait(150);
    			
} 
 combo lampeggio {
             colourled(colore)
             wait(500)
             colourled(Off)
             wait(500)
             reset_leds();
             }
              
combo Turbo_PNG {
        set_val(PING, 100);
       wait(40);
       set_val(PING, 0);
       wait(3000);
        set_val(PING, 0);
				}       
  

combo RAPIDFIRE {
            wait(RF_SPEED);
            set_val(FIRE,0);
            wait(RF_SPEED);
            }


 combo STICKY { 
    set_val(PS4_RY,xy_val(PS4_RY, sticky_size));
   	wait(sticky_time);
    set_val(PS4_RX,xy_val(PS4_RX, sticky_size));
    set_val(PS4_LX,xy_val(PS4_LX, sticky_size));
    wait(sticky_time);
    set_val(PS4_RY,xy_val(PS4_RY, sticky_size * -1));
    wait(sticky_time);
    set_val(PS4_RX,xy_val(PS4_RX, sticky_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, sticky_size * -1));
    wait(sticky_time);}
 

 

combo CANCEL_SLIDE {              
    set_val(ABBASSARSI, 100);          
    wait(120);                         
    set_val(ABBASSARSI, 0);            
    wait(60);                          
    set_val(ABBASSARSI, 100);          
    wait(50);                          
    set_val(ABBASSARSI, 100);          
    set_val(SALTARE, 100);           
    wait(60);                          
    set_val(ABBASSARSI, 0);            
    set_val(SALTARE, 100);          
    wait(10);                        
    set_val(SALTARE, 0); 
}

// COLOR LED function
//--------------------------------------------------------------
function colourled(Colour) {
    Col_ind=(Colour*4)- 3;
    set_led(LED_1,dbyte(Col_ind  ));
    set_led(LED_2,dbyte(Col_ind+ 1));
    set_led(LED_3,dbyte(Col_ind+ 2));
    set_led(LED_4,dbyte(Col_ind+ 3));
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E N D | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/