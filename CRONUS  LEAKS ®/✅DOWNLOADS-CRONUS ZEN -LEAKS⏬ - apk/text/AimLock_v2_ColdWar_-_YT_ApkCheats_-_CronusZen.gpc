/*

         ░█████╗░██████╗░██╗░░██╗░█████╗░██╗░░██╗███████╗░█████╗░████████╗░██████╗
         ██╔══██╗██╔══██╗██║░██╔╝██╔══██╗██║░░██║██╔════╝██╔══██╗╚══██╔══╝██╔════╝
         ███████║██████╔╝█████═╝░██║░░╚═╝███████║█████╗░░███████║░░░██║░░░╚█████╗░
         ██╔══██║██╔═══╝░██╔═██╗░██║░░██╗██╔══██║██╔══╝░░██╔══██║░░░██║░░░░╚═══██╗
         ██║░░██║██║░░░░░██║░╚██╗╚█████╔╝██║░░██║███████╗██║░░██║░░░██║░░░██████╔╝
         ╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝░░░╚═╝░░░╚═════╝░
Subscribe to ApkCheats on YouTube, make sure to visit the website aswell www.apkfreecheats.co.uk

   AimLock v2 Cold War Toggle Menu
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
 ᥊᥊᥊ RapidFire = L2/LT + LEFT      ᥊᥊᥊
 ᥊᥊᥊ Anti Recoil = L2/LT + OPTIONS ᥊᥊᥊
 ᥊᥊᥊ Jump On Shot = OPTIONS + LEFT ᥊᥊᥊
 ᥊᥊᥊ Drop Shot = OPTIONS + DOWN    ᥊᥊᥊
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊

                 AimLock v2 Cold War in-game AntiRecoil Adjustments
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
 ᥊᥊᥊ Hold L1/LB And Press UP For +1 to Increase AntiRecoil and DOWN to Decrease by -1 ᥊᥊᥊
 ᥊᥊᥊ Hold L1/LB And Press RIGHT For +1 to Horizontal and LEFT For -1                  ᥊᥊᥊
 ᥊᥊᥊ Heavy Rumble = Increase  -  Light Rumble = Decrease                              ᥊᥊᥊
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊*/
 
//᥊᥊᥊ Change The Buttons Layout Number To A Layout That Suits You ᥊᥊᥊\\
    define BTN_FIRE      = PS4_R2;
    define BTN_ADS       = PS4_L2;
    define BTN_TACTICAL  = PS4_L1;
    define BTN_LETHAL    = PS4_R1;
    define BTN_SPRINT    = PS4_L3;
    define BTN_MELEE     = PS4_R3;
	define BTN_SWAP      = PS4_TRIANGLE;
    define BTN_PRONE     = PS4_CIRCLE;
    define BTN_JUMP      = PS4_CROSS;
    define BTN_RELOAD    = PS4_SQUARE;

//᥊᥊᥊ Change FALSE TO TRUE If you want Hold Breath ON By Default ᥊᥊᥊\\
	define hold_breath = FALSE;

//᥊᥊᥊ Change FALSE TO TRUE If you want Jump On Shot ON By Default ᥊᥊᥊\\
    int JOS_Toggle = FALSE;

//᥊᥊᥊ Change FALSE TO TRUE If you want Drop Shot ON By Default ᥊᥊᥊\\
    int PS_Toggle = FALSE;
    int Prone_Speed = 80; //Drop Shot - How long before you Prone

//᥊᥊᥊ Change FALSE TO TRUE If you want Quick Scope ON By Default ᥊᥊᥊\\
	int Q_Scope = FALSE;

//᥊᥊᥊ Change TRUE TO FALSE If you want Slide Cancel OFF By Default ᥊᥊᥊\\
	int Slide_Cancel = FALSE;

//᥊᥊᥊ Change FALSE TO TRUE If you want Rapid Fire ON By Default ᥊᥊᥊\\
	int Rapid_Fire = FALSE;
    int rounds_per_second = 17;
 
//᥊᥊᥊ Change FALSE TO TRUE If you want AutoRun-Tactical Sprint ON By Default ᥊᥊᥊\\
	define AUTORUN = FALSE;
	define RUN_TRIGGER = 80;  // VALUE TO PUSH UP BEFORE AUTORUN STARTS
	define TACTICAL_SPRINT_WAIT = 80;  // TIME BETWEEN BUTTON PRESS
 
//᥊᥊᥊ Sticky Aim Assist - If your screen shakes whilst using aim assist - lower the Sticky Aim Assist Value ᥊᥊᥊\\
	int sticky_aim_assist    = TRUE;
    define AA                = 21;   // STICKY AIM ASSIST STRENGTH
  
//᥊᥊᥊ Change TRUE TO FALSE If you want Anti Recoil OFF By Default ᥊᥊᥊\\
	int antirecoil_         =  TRUE; 
	int DEFAULT_VERTICAL    =    26;   // VERTICAL RECOIL
	int DEFAULT_HORIZONTAL  =     3;   // HORIZONTAL RECOIL
	int INTVERTED_RECOIL    =     1;   // INVERTED RECOIL METHOD ( IF INVERTED SET TO  -1  INSTEAD OF  1 )

//᥊᥊᥊ AimLock v2 Polar Aim Assist ᥊᥊᥊\\
	define Aim_Lock_Polar	  = TRUE;
	define ACTIVE_WHEN_ADS    = TRUE; //᥊᥊᥊  TRUE = AIM ASSIST WHEN AIM DOWN SIGHTS ᥊᥊᥊\\
	define ACTIVE_WHEN_FIRING = TRUE; //᥊᥊᥊  TRUE = AIM ASSIST WHEN FIRING ᥊᥊᥊\\
	define RADIUS             =   21; //᥊᥊᥊ STRENGTH ᥊᥊᥊\\
	define STEPS              =   25; //᥊᥊᥊ SPEED ᥊᥊᥊\\

//===================================================================================================================================\\

//᥊᥊᥊ Leave The Rest Alone ᥊᥊᥊\\
	define Blue          =  1;                 
	define Red           =  2;                 
	define Green         =  3;                 
	define Pink          =  4;                 
	define SkyBlue       =  5;                 
	define Black         =  6;                 
	define White         =  7;                 
	
	data ( 1,                 
	2,0,0,0 , //1. Blue                  
	0,2,0,0 , //2. Red                   
	0,0,2,0 , //3. Green                 
	0,0,0,2 , //4. Pink                  
	2,0,2,0 , //5. SkyBlue               
	0,0,0,0 , //6. Black                
	2,2,2,2 ) //7. White

	define STEP_INTERVAL =  1;
	int time;
	int angle, cos_angle, sin_angle;
	int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
    int T_tog;
	int ARS;
    int rapidfire_hold;
    int rapidfire_release;
	const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/   	
   	main {
  vm_tctrl(-1);

 if(Aim_Lock_Polar) {
  if((ACTIVE_WHEN_ADS && get_val(BTN_ADS)) || (ACTIVE_WHEN_FIRING && get_val(BTN_FIRE))) {
  actual_X = get_val(PS4_RX);
  actual_Y = get_val(PS4_RY);
  actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));
  max_Magnitude = (actual_Magnitude < 100);
  
  if(!(time++ % STEP_INTERVAL)) {
    angle += STEPS;
  }
  angle = angle % 360;
  sin_angle = Polar_Array[angle % 360];
  cos_angle = Polar_Array[(angle + 270) % 360];
  cos_angle = (cos_angle * RADIUS) / 100;
  sin_angle = (sin_angle * RADIUS) / 100;
  
    if(actual_Magnitude <= RADIUS) {
      sin_angle -= actual_Y;
      cos_angle -= actual_X;
    } else {
      sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
      cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
    }
    set_val(PS4_RX, clamp(actual_X + cos_angle, -100, 100));
    set_val(PS4_RY, clamp(actual_Y + sin_angle, -100, 100));
	}
}
	if (sticky_aim_assist) {
   if(get_val(BTN_ADS)) combo_run(STICKY_AIM);
        else combo_stop(STICKY_AIM);}
	if(Slide_Cancel) {
			if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) {
		if(event_release(BTN_PRONE))
			combo_run(CANCEL_SLIDE); }
			}
if(hold_breath) {
		if(get_val(BTN_ADS))
			set_val(BTN_SPRINT,100);

		if(get_val(PS4_LY) <-90 && get_val(BTN_ADS) && get_ptime(BTN_ADS) > 200)
			combo_stop(CH);       

		if(event_press(BTN_ADS)) 
			combo_run(CH);

		if(get_val(BTN_ADS) && get_lval(BTN_SPRINT)) 
			set_val(BTN_SPRINT,0);
		}
		if (AUTORUN ) {    
if (get_val(PS4_LY) >= -80 && get_val(PS4_LY) <= -60) {
    combo_run(TACTICAL);
    }
if (get_val(PS4_LY) < -80) {    
    PRESS(BTN_SPRINT);
    }
if (get_val(BTN_SPRINT)) {
	combo_run(TACTICAL); }
	}
    if(get_val(PS4_OPTIONS) && event_press(PS4_LEFT)) {
        combo_run (vibrate);
   		JOS_Toggle = !JOS_Toggle;}
	if(JOS_Toggle) {
	if (get_val(BTN_FIRE))
    combo_run(JOS); }
if(get_val(PS4_OPTIONS) && event_press(PS4_DOWN)) {
        combo_run (vibrate);
   		PS_Toggle = !PS_Toggle;}
	if(PS_Toggle) {
	if(get_val(BTN_FIRE) && get_ptime(BTN_FIRE) > Prone_Speed)
    set_val(BTN_PRONE,100);}
	if(get_val(BTN_ADS) && event_press(PS4_LEFT)) {
        combo_run (vibrate);
   		Rapid_Fire=!Rapid_Fire;}
	if (Rapid_Fire) { 
	rapidfire_hold = 500 / rounds_per_second;
	rapidfire_release = rapidfire_hold - 20;
	if(rapidfire_hold < 0)
	rapidfire_hold = 0;
	if(get_val(BTN_FIRE))
	combo_run(RAPIDFIRE); }
   if(Q_Scope) {
	if(event_press(BTN_ADS)) {
		T_tog = TRUE; 
		} else if(get_ival(BTN_ADS) && get_ptime(BTN_ADS) > 140) { 
	set_val(BTN_SPRINT, 100); 
		} else if(T_tog == TRUE && event_release(BTN_ADS)) { 
			combo_run(QuickScopee); }
	}
if(get_val(BTN_ADS) && event_press(PS4_OPTIONS)) {
        combo_run (vibrate);
        antirecoil_=!antirecoil_;}
      if (antirecoil_) {
		if(get_val(BTN_ADS) && get_val(BTN_FIRE))
	combo_run(AntiRecoil);
		if(abs(get_val(PS4_RY)) > DEFAULT_VERTICAL + 4 || abs(get_val(PS4_RX)) > DEFAULT_VERTICAL + 4) {
			combo_stop(AntiRecoil); } }
		if(get_val(PS4_L1)){
        if(event_press(PS4_UP)){
            DEFAULT_VERTICAL = DEFAULT_VERTICAL + 1;
            combo_run(Increase);  }
        if(event_press(PS4_DOWN)) {
            DEFAULT_VERTICAL = DEFAULT_VERTICAL - 1;
            combo_run(Decrease); }
        set_val(PS4_UP, 0); set_val(PS4_DOWN, 0);
        if(event_press(PS4_LEFT)){
            DEFAULT_HORIZONTAL = DEFAULT_HORIZONTAL + 1;
            combo_run(Increase); }
        if(event_press(PS4_RIGHT)) {
            DEFAULT_HORIZONTAL = DEFAULT_HORIZONTAL - 1;
            combo_run(Decrease); }
        set_val(PS4_LEFT, 0); set_val(PS4_RIGHT, 0); }
    }
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
combo Increase {
set_rumble(RUMBLE_A,100);
wait(250);
reset_rumble();
}
combo Decrease {
set_rumble(RUMBLE_B,100);
wait(150);
reset_rumble();
}
combo RAPIDFIRE {
wait(rapidfire_hold);
set_val(BTN_FIRE, 0);
wait(rapidfire_release);
}
combo TACTICAL {
set_val(BTN_SPRINT,0);
wait(TACTICAL_SPRINT_WAIT);
set_val(BTN_SPRINT,100);
wait(TACTICAL_SPRINT_WAIT);
set_val(BTN_SPRINT,0);
wait(TACTICAL_SPRINT_WAIT);
}
combo JOS {
set_val(BTN_JUMP,100);
wait(100);
}	
combo CANCEL_SLIDE {
set_val(BTN_PRONE, 100);
wait(21);
set_val(BTN_PRONE, 0);
wait(21);
set_val(BTN_PRONE, 100);
wait(18);
set_val(BTN_PRONE, 0);
wait(18);
}
combo QuickScopee { 
set_val(BTN_ADS, 100); 
set_val(BTN_SPRINT, 100);
set_val(BTN_FIRE, 100); 
wait(50); 
set_val(BTN_ADS, 100); 
wait(50); 
} 
combo CH {
set_val(BTN_SPRINT,0);
wait(60);
set_val(BTN_SPRINT,100);
wait(110);
set_val(BTN_SPRINT,0);
wait(110);
}
combo STICKY_AIM {
set_val(PS4_RY,xy_val(PS4_RY, AA));
wait(22);
set_val(PS4_RX,xy_val(PS4_RX, AA));
set_val(PS4_LX,xy_val(PS4_LX, AA));
wait(22);
set_val(PS4_RY,xy_val(PS4_RY, AA * -1));
wait(22);
set_val(PS4_RX,xy_val(PS4_RX, AA * -1));
set_val(PS4_LX,xy_val(PS4_LX, AA * -1));
wait(22);
}
combo vibrate {
set_rumble(RUMBLE_A, 85);
wait(225);
reset_rumble();
}
combo AntiRecoil {
ARS = get_val(PS4_RY) + DEFAULT_VERTICAL;
if(ARS > 100) ARS = 100;
set_val(PS4_RY,ARS * INTVERTED_RECOIL);
ARS = get_val(PS4_RX) + DEFAULT_HORIZONTAL;
if(ARS > 100) ARS = 100;
set_val(PS4_RX,ARS);
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < (AA + 1))  
return f_val;    
return get_val(f_axis);
}
function PRESS (btn) {
if (get_val(btn))
		return;
	set_val(btn, 100);
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | A | P | K | | C | H | E | A | T | S | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/