// GPC Online Library
// fort_aim.gpc

𝓒𝓡𝓞𝓝𝓤𝓢𝓜𝓐𝓧 𝓐𝓝𝓓 𝓩𝓔𝓝
                                                  
  
  ///////////////MODS///////////////
  // -Aim Assist V5               //
  // -Anti-Recoil V2              //
  // -DropShot                    //    
  // -RapidFire                   //   
  // -GhostPeek V2                //
  // -Strafe                      //
  // -BuildTracker                // 
  //////////////////////////////////
 



//English= Change the definitions as you have the settings in the game.
//Español= Cambia las definiciones como tengas la configuración en el juego. 

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_L3;
define Reload   = PS4_SQUARE;
define Jump     = PS4_R3;
define Crouch   = PS4_LEFT;
define Ping     = PS4_;
define Edit     = PS4_RIGHT;
define Select   = PS4_R2;
define Confirm  = PS4_R1;
define Reset    = PS4_L1;
define Build    = PS4_R2;
define Switch   = PS4_DOWN;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Roof     = PS4_L1;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;

//LED
int a; int b;

//Leave Alone
define Blue          =  1;                 
define Red           =  2;                 
define Green         =  3;                 
define Pink          =  4;                 
define SkyBlue       =  5;                 
define Black         =  6;                 
define White         =  7;                 
data( 1,                 
  2,0,0,0 , //1. Blue                  
  0,2,0,0 , //2. Red                   
  0,0,2,0 , //3. Green                 
  0,0,0,2 , //4. Pink                  
  2,0,2,0 , //5. SkyBlue               
  0,0,0,0 , //6. Black                
  2,2,2,2   //7. White                  
)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

//AIM ASSIST (Leave Alone)
int AimAssistV5 = On;  //(Linear + Exponential) //Set Look Stick Deadzone to 0.9 - 0.12          

//Rapid Fire (ADS + LEFT) ON/OFF
int Rapid_Fire  = Off;

//STRAFE (Leave Alone)
int Strafe      = On;

//DROPSHOT (ADS + R3) ON/OFF
int Dropshot    = On;

//Antirecoil (Leave Alone)
int Antirecoil  = On;

//Ghost Peek V2 ADS)+(RIGHT) 
int GhostPeek   = On;

//BuildTracker (Leave Alone) When building the mod, it is suspended, when leaving the construction mode the mods will be activated again, this serves so that when building no mod interferes.
int BuildTracker    =  On;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
 //AimAssistV5 Values/Times 
 int N_DiV   = 24;	
 
 //Strafe Values/Times  
 int ast     = 100;// store auto strafe time (200ms-360ms).
 
 //Dropshot Values/Times
 int Dropshot_Crouching = 95;
 int Dropshot_Standing = 45;

 //Anti Recoil V2 Values/Times
 int ADSPos = On;
 int AntiRecoil = 8;

 //Ghost Peek V2 Values/Times
 int GPCooldown = 25;
 
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
 int Anti_Recoil;
 int BuildTrack;

main{

//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ BuildTracker ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(BuildTracker){
if(event_press(Build)){
 BuildTrack = !BuildTrack;
 }
 if (!BuildTrack) {

//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ AimAssist V5 ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(AimAssistV5) { 
if(get_val(Fire)){  
combo_run(TrackFire);}  
if(get_val(RX)<-38  
||get_val(RX)> 37){  
combo_stop(TrackFire);
}
}
//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ Antirecoil V2 ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(Antirecoil){                               
if( get_val(Ads) && get_val(Fire)) {      
combo_run(AntiRecoil); }               
if( abs(get_val(RY)) > 36 || abs(get_val(RX)) > 36) { 
combo_stop (AntiRecoil); }               
}
//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ Rapid Fire ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(get_val(Ads) && event_press(Left)) {
combo_run (vibrate);
combo_restart(BLIINK);
Rapid_Fire=!Rapid_Fire;}
if (Rapid_Fire) {
if(get_val(Fire)) {
combo_run (Rapiid_Fire);
}
//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ Strafe ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(Strafe){
if(get_val(Ads) && get_val(Fire) || get_val(Fire)){        
combo_run(Auto_Strafe);}
if(abs(get_val(LX)) > 40 || abs(get_val(LY)) > 40){
combo_stop(Auto_Strafe);
}
}
//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ Ghost Peek V2 ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if (get_val(Ads) && get_val(Right)) {
GhostPeek =! GhostPeek;
combo_run(GhostPeek);
set_val(Right, 0);
} else {
combo_stop(GhostPeek);
}
}
//∙∙·▫▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ Dropshot ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫ₒₒ▫ᵒᴼᵒ▫▫·∙∙
if(get_val(Ads) && event_press(Crouch)){
Dropshot =! Dropshot;
if(Dropshot == TRUE){combo_run(Notify);a=0;b=2;} 
if(Dropshot == FALSE){combo_run(Notify);a=2;b=0;}}
if(Dropshot){
if(get_val(Ads)&&get_val(Fire)){combo_run(Dropshot);}
if(event_press(18)){ Dropshot = FALSE; 
}
}
}
}
}
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
combo TrackFire {             
set_val(RY, N_DiV);	
wait(10);		   		
set_val(RY, -18);  
wait(10);		   		
set_val(RX, 18);   	
wait(10);		 		
set_val(RX, -18); 	
wait(10);		 		
set_val(RY, 18); 	
wait(10);				
set_val(RY, -18); 	
wait(10);		 		
set_val(RX, 18); 	
wait(10);		 		
set_val(RX, -18); 	
wait(10);
}
combo AntiRecoil { 
if(get_val(Fire)) {
Anti_Recoil = get_val(10) + AntiRecoil;
if(Anti_Recoil > 100) Anti_Recoil = 100;
set_val(10, Anti_Recoil);
}}
combo Rapiid_Fire {
set_val(Fire, 100); 
wait(35);
set_val(Fire, 0); 
wait(25);
}
combo Auto_Strafe {	
set_val(LX,-30);
wait(ast);
set_val(LX, 30);
wait(ast);
if(ast < 160){ast = ast + 10;}
else {ast = 100;
}
}
combo Dropshot {
set_val(5,100);
wait(Dropshot_Crouching);
wait(Dropshot_Standing);
set_val(5,100);
}
combo GhostPeek {
set_val(Crouch,100);
wait(30);
wait(30);
set_val(Fire,100);
wait(30);
set_val(Crouch,100);
wait(GPCooldown);
wait(200);
}
combo BLIINK {                                       
if(Rapid_Fire) LED_CM (Green); 
else  LED_CM (Red);
wait(2000);
LED_CM (Black)
}
combo Notify {
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}
combo vibrate {     
set_rumble(RUMBLE_A, 85);      
wait(225);                         
reset_rumble();                    
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
function LED_CM(Colour) {            
    set_led(LED_1,dbyte(( Colour * 4)- 3     )); 
    set_led(LED_2,dbyte(((Colour * 4)- 3) + 1)); 
    set_led(LED_3,dbyte(((Colour * 4)- 3) + 2)); 
    set_led(LED_4,dbyte(((Colour * 4)- 3) + 3)); 
}
function offset(int axis, int offset_val) {
      set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
    return 
}

