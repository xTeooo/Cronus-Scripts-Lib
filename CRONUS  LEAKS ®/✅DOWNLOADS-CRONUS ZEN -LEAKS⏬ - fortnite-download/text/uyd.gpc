const int8 ANGLEVAL[] = { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8 POLAR_RADIUSVAL[] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};   

int DZ = 100;
int TargetList[2];
int targetLoop;
int index;
int i;
int angle;
int power;
int TIME = 12;
int RIZ = 8;
int deltax,deltay;
int hyp;
int anglesx,anglesy;
int B = 428;
int A = 459;
int rnd;
int SHAKEX = -12; 
int STRAFEX = -12; 
int SHAKEY = -12;  
int STRAFEY = -12; 
int RIGHTOFFSETY,RIGHTOFFSETX;
int LEFTOFFSETX,LEFTOFFSETY;
int LX = PS4_LX;
int LY = PS4_LY;
int RY = PS4_RY;
int RX = PS4_RX;
int ry;
int rx; 
int lx; 
int ly; 
int RAXIS;
int radius;
main {
	power = POLAR_RS;{

    if(power >= 0 && power <= 100 )
        power = power;
    else
        power = random(0,100);}
radius = POLAR_RADIUS;{
    if(radius >= -32768 && radius <= 32767 )
      radius = radius;
    else
       radius = random(-32768,32767);}

angle = POLAR_ANGLE;{
    if(angle >= 0 && angle <= 359 )
      angle = angle;
    else
       angle = random(0, 359);}
    block_rumble();
	Aimbot();
	CalcAngle()
	valuefinder()
	Ais();
	combo_run(Ais)
	RAXIS = get_polar(POLAR_RS, POLAR_ANGLE);
	combo_run(u);
	combo_run(w);
	combo_run(A);
	combo_run(c)

rnd = random(A, B);
set_polar(POLAR_LS, DZ, (100 * rnd));	
	}
function Ais () {

		Y(RX,RIZ)
		}   	
combo u {
	Y(RX,rx)wait(TIME)Y(RX,0)wait(TIME)Y(RX,-rx)wait(TIME)Y(RX,0)wait(TIME)
}
combo w {
	Y(RY,0)wait(TIME)Y(RY,ry)wait(TIME)Y(RY,0)wait(TIME)Y(RY,-ry)wait(TIME)
}
combo A{
	Y(LX,lx)wait(TIME)Y(LX,0)wait(TIME)Y(LX,-lx)wait(TIME)Y(LX,0)wait(TIME)
}
combo c{
	Y(LY,0)wait(TIME)Y(LY,ly)wait(TIME)Y(LY,0)wait(TIME)Y(LY,-ly)wait(TIME)
}
combo Ais {
		Y(RY,RIZ)
		Y(RX,-RIZ)
		wait(1)
		Y(RY,-RIZ)
		Y(RX,RIZ)
		wait(1)
		} 
	function valuefinder(){
RIGHTOFFSETX = -1
RIGHTOFFSETY = -1
if ( RX > 0 ) {
RIGHTOFFSETX = 1
}
if ( RY > 0 ) {
RIGHTOFFSETY = 1
}
rx = (RX + SHAKEX) * RIGHTOFFSETX
ry = (RY + SHAKEY) * RIGHTOFFSETY
LEFTOFFSETX = -1
LEFTOFFSETY = -1
if ( LX > 0 ) {
LEFTOFFSETX = 1
}
if ( LY > 0 ) {
LEFTOFFSETY = 1
}
lx =  (LX + STRAFEX) * LEFTOFFSETX
ly =  (LY + STRAFEY) * LEFTOFFSETY

}
function Y( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}	
function atan(i){
	if (anglesx != anglesx){
		anglesx = 0;
			}
	if (anglesy != anglesy){
		anglesy = 0;
			}
	if (anglesx > 89){
		anglesx = 89;
			}
	if (anglesx < -89){
		anglesx = -89;
			}
	if (anglesy > 180){
		anglesy -= 360;
			}
	if (anglesy < -180){
		anglesy += 180;
			}
	return i;
	return anglesx;
	return anglesy;
	   	return rad2deg(atan(lookAt * tan(deg2rad(POLAR_ANGLE / 2))) * POLAR_ANGLE)
     return rad2deg(atan(((delta << 1 )/ POLAR_ANGLE)* tan(deg2rad(POLAR_ANGLE / 2))))
    return tan(deg2rad(POLAR_ANGLE / 2)* tan(deg2rad(delta)))  
	}
	int delta;
define fov = POLAR_RADIUS;
int radianval
function tan(tanValue){
  radianval = atan(1) * (POLAR_ANGLE / 180);
  tanValue = atan (1);
  return   ANGLEVAL[(radianval/tanValue)];
  return   POLAR_RADIUSVAL[(radianval/tanValue)];
  return 0;
}
int val;

function sin (x){
delta = isqrt(deltax * deltax + deltay * deltay);
lookAt = delta * 2 / POLAR_ANGLE
   x = atan(1);
   val = delta / 180;
   return   ANGLEVAL[(x * val)];
   return   POLAR_RADIUSVAL[(x * val)];
   return 0;
}

int sign,sum,PI;	
int n;
function PI(){
sign = sign*(-1) 
n = n + 2;
sum = sum +(sign *(4 / ((n) * (n + 1)*(n + 2))))
PI = sum;
   return sum;
   return ANGLEVAL[POLAR_RADIUS];}
function Get3dDistance(){
	return isqrt(pow(get_ival(RY), 2) + pow(get_ival(RX), 2));
}
function Aimbot(){
	TargetList = targetLoop * TargetList;
	targetLoop = 0;
	for( i = 0;
	i < PI();
	i ++){
		if (index == -1 || i < POLAR_RADIUS) {
			index = i;
					}
		continue;
	
		CalcAngle();
		targetLoop = Get3dDistance();
		targetLoop++;
			}
	if(targetLoop > 0){
				targetLoop = 0;
				TargetList = 0;
							}
					}
		function deg2rad(degrees) {
	return POLAR_ANGLE * (( 4 ) / 180)
	return degrees;
}
function rad2deg(radians) {
	return POLAR_RADIUS * (180 / (4*atan(1)))
	return radians;
}
int lookAt;	
function CalcAngle(){
	deltax = RX;
	deltay = RY;
	hyp = isqrt(deltax * deltax + deltay * deltay);
	anglesx = rad2deg(sin(deltax / hyp));
    anglesy    =    deg2rad(tan(deltay * deltay));
if(RAXIS < 45) {
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  POLAR_ANGLE; // / 
		    anglesy = ( deltay * sin(135 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		} 
		else if(RAXIS <  89) { 
			anglesx = ( deltax/2 * tan(deltax / hyp)) * 57 +  POLAR_ANGLE; // | 
		    anglesy = ( deltay   * sin(deltay / hyp)) * 57 +  POLAR_ANGLE;
		} 
		else if(RAXIS < 135) { 
			anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		    anglesy = ( deltay * sin(225 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		}  
		else if(RAXIS < 180) {
		    anglesx = ( deltax * tan(deltax / hyp))  * 57 +  POLAR_ANGLE;
		    anglesy = ( deltay/2 * sin(deltay / hyp)) * 57 +  POLAR_ANGLE; 
		}
		else if(RAXIS < 225) { 
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  POLAR_ANGLE;  
		    anglesy = ( deltay * sin(135 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		}  
		else if(RAXIS < 270) { 
		    anglesx = ( deltax/2 * tan(deltax / hyp)) * 57 +  POLAR_ANGLE;
		    anglesy = ( deltay * sin(deltay / hyp))* 57 +  POLAR_ANGLE; 
		}
		else if(RAXIS < 315) { 
		    anglesx = ( deltax * tan(180 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		    anglesy = ( deltay * sin(225 + deltax / hyp)) * 57 +  POLAR_ANGLE; 
		}
		else { 
		  	anglesx = ( deltax *   tan(deltax / hyp)) * 57 +  POLAR_ANGLE;
		    anglesy = ( deltay/2 * sin(deltay / hyp)) * 57 +  POLAR_ANGLE; 
		}}
 ú¸Œ½‹¿†µ…´…À÷ÂóÂ