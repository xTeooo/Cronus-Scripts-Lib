
                                                                                                                                                                                                                                                        
                                                                              
     ██████╗ ██╗  ██╗ ██████╗ ███████╗████████╗ █████╗ ██╗███╗   ███╗         
    ██╔════╝ ██║  ██║██╔═══██╗██╔════╝╚══██╔══╝██╔══██╗██║████╗ ████║         
    ██║  ███╗███████║██║   ██║███████╗   ██║   ███████║██║██╔████╔██║         
    ██║   ██║██╔══██║██║   ██║╚════██║   ██║   ██╔══██║██║██║╚██╔╝██║         
    ╚██████╔╝██║  ██║╚██████╔╝███████║   ██║   ██║  ██║██║██║ ╚═╝ ██║         
     ╚═════╝ ╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚═╝     ╚═╝ 
     
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝

*/
 
define LTrigger = XB1_LT;
define RTrigger = XB1_RT; 
define Fire = XB1_RT;
define ADS = XB1_LT;
define PickupB = XB1_X;
define N_Weapon = XB1_RB;
define P_Weapon = XB1_LB;
define Pickaxe = XB1_B;
define Jump = XB1_A;
define Crouch = XB1_RS;
define Ping = XB1_RIGHT;
define Edit = XB1_Y; 
define Switch = XB1_B;
define Build = XB1_LS;           
define Wall = XB1_RT;
define Floor = XB1_RB;
define Ramp = XB1_LT
define Roof = XB1_LB;
define Select = XB1_RT;
define Confirm = XB1_LT;
define Reset = XB1_RS;
 
define InstantResetB = XB1_RS; // IF Y0U PRESS THIS BIND, ZEN WILL EDIT THEN RESET THEN CONFIRM FOR YOU
define EditAssist = XB1_RS; // IF YOU PRESS THE BIND, ZEN WILL EDIT AND THEN CONFIRM FOR YOU

 /* 𝗖𝗛𝗔𝗡𝗚𝗘 𝗧𝗢 𝗬𝗢𝗨𝗥 𝗣𝗟𝗔𝗧𝗙𝗢𝗥𝗠 */
define Up = XB1_UP; 
define Down = XB1_DOWN; 
define Left = XB1_LEFT; 
define Right = XB1_RIGHT;
define RX = XB1_RX;   
define RY = XB1_RY;   
define LX = XB1_LX;   
define LY = XB1_LY;  

 /* 𝗠𝗘𝗡𝗨 */
define MenuEnterHold = XB1_LT; 
define MenuEnterPress = XB1_MENU; 
define MenuExitPress = XB1_Y; 
define ChangeMenuPress = XB1_RS; 
define FindSlotHold = XB1_A; 
define FindSlotPress = XB1_LEFT; 
 
 /* 𝗜𝗚𝗡𝗢𝗥𝗘 */
define PY = POLAR_RY;
define PX = POLAR_RX;
define PS = POLAR_RS;
define On = TRUE;
define Off = FALSE;
 
/*
 ___  ______________  _____ 
|  \/  |  _  |  _  \/  ___|
| .  . | | | | | | |\ `--. 
| |\/| | | | | | | | `--. \
| |  | \ \_/ / |/ / /\__/ /
\_|  |_/\___/|___/  \____/ 
                           
*/ 

int ModSwitch;
 
 /* 𝗖𝗢𝗡𝗦𝗢𝗟𝗘 𝗔𝗔 */
int ConsoleAA = Off; // AA FOR CONSOLE [SETTINGS ON LINE: 177]

 /* 𝗣𝗖 𝗔𝗔 */
int PolarAA =  On; // AA FOR PC [SETTINGS ON LINE: 181]
int PolarTimed = On; // AA THAT DISABLES AFTER A CERTAIN AMOUNT OF TIME [SETTINGS ON LINE: 182]
int PolarHipFire = On; // HIPFIRE AA FOR POLAR 

 /*  𝗖𝗢𝗡𝗧𝗥𝗢𝗟𝗟𝗘𝗥 𝗧𝗪𝗘𝗔𝗞𝗦 */
int LessInputDelay = On; // LESS INPUT DELAY [SETTINGS ON LINE: 186]
int InstantTriggers = On; // INSTANT TRIGGERS (SLIGHT TOUCH = FULL TOUCH)
int PSonXBOX = Off; // IF YOU HAVE PS4 CONTROLER ON XBOX

 /* 𝗠𝗔𝗖𝗥𝗢𝗦 */
int PickupM = Off; // PICKUP MACRO [SETTINGS ON LINE: 199 & 200]
int CrouchM = Off; // CROUCH SPAM [SETTINGS ON LINE: 202]

 /*  𝗪𝗘𝗔𝗣𝗢𝗡 𝗠𝗢𝗗𝗦 */
int Headshot = Off; // AIMS FOR THE HEAD [SETTINGS ON LINE: 190 & 191]
int HeadshotHipFire = Off; // AIMS FOR HEAD ON HIPFIRE

int AntiRecoil = Off; // ANTI RECOIL [SETTINGS ON LINE: 193 & 194]
int AntiRecoilHipFire = Off; // ANTI-RECOIL ON HIPFIRE
int AntiRecoilTimed = Off; // ANTI RECOIL WHICH DISABLES AFTER A CERTAIN AMOUNT OF TIME [SETTINGS ON LINE: 195]

int RapidFire = Off; // SPAM FIRE 

 /* 𝗘𝗗𝗜𝗧𝗜𝗡𝗚 */
int QuickEditAssist = Off; // PRESS ONE BUTTON AND IT EDITS AND CONFIRMS FOR YOU [SETTINGS ON LINE: 203]
int InstantReset = Off; // PRESS ONE BUTTON AND IT EDITS THEN RESETS THEN CONFIRMS FOR YOU [SETTINGS ON LINE: 204]

 /* 𝗣𝗦𝟱 𝗙𝗜𝗫 */
int PS5 = On; // PS5 CONTROLLER COMPATABILTY 
 
/* 𝗘𝗫𝗧𝗥𝗔𝗦 */ 
define BlockRumbles = On; // BLOCKS VIBRATIONS INGAME | TURN ON VIBRATIONS IN GAME (THIS REDUCES SHAKE)
define BuildTracker = On; // DISABLES SHAKE WHEN SWITCHED TO BUILDING [SETTINGS ON LINE: 208]
define BuilderPro = Off; // PRESS ONE BUTTON TO PLACE (ONLY FOR BUILDERPRO) 
define LED = Off; // COOL LED LIGHTS ON ZEN [SETTINGS ON LINE: 209]
 
/*
 _____ _____ _____ _____ _____ _   _ _____  _____ 
/  ___|  ___|_   _|_   _|_   _| \ | |  __ \/  ___|
\ `--.| |__   | |   | |   | | |  \| | |  \/\ `--. 
 `--. \  __|  | |   | |   | | | . ` | | __  `--. \
/\__/ / |___  | |   | |  _| |_| |\  | |_\ \/\__/ /
\____/\____/  \_/   \_/  \___/\_| \_/\____/\____/    
 
*/
 
 /* 𝗖𝗢𝗡𝗦𝗢𝗟𝗘 𝗔𝗔 */
﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋
int ConsoleShake = 13; // AA STRENGTH [HIGHER VALUE = MORE SHAKE] 
 
 /* 𝗣𝗖 𝗔𝗔 */
﹋﹋﹋﹋﹋﹋﹋﹋
int PolarPower = 1; // AIM ASSIST POWER [ 1 = 5 || 2 = 10 || 3 = 15 || 4 = 20 || 5 = 25 ] IF LINEAR PUT [1] 
int PolarTime = 3000; // [!ONLY WORKS IF POLARTIMED IS ON!] THE AMOUNT OF TIME IT TAKES FOR POLARAA TO DISABLE  | [1000 = 1 SEC]

 /* 𝗜𝗡𝗣𝗨𝗧 𝗗𝗘𝗟𝗔𝗬 */
﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋
define InputDelay = 5; // CHANGE 5 TO ANY NUMBER IN [] [0] 10ms delay | [1] = 8ms delay | [2] = 6ms delay | [3] = 4ms delay | [4] = 2ms delay | [5] = 1ms delay
 
 /* 𝗖𝗢𝗡𝗧𝗥𝗢𝗟𝗟𝗘𝗥 𝗧𝗪𝗘𝗔𝗞𝗦 */
﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋﹋
int HeadshotSteps = 2; // THE AMOUNT YOUR CROSSHAIR WILL GO UP
int HeadshotMax = 30; // THE MAX AMOUNT YOUR CROSSHAIR WILL GO UP

int AntiRecoilPower = 40; // THE STRENGTH OF ANTI-RECOIL (HOW FAR IT WILL GO DOWN)
int AntiRecoilVertical = 47; // THE MAX AMOUNT YOUR CROSSHAIR WILL GO DOWN
int AntiRecoilTime = 60; // [!ONLY WORKS IF ANTI RECOIL TIMED IS ON!] THE AMOUNT OF TIME IT WILL TAKE FOR ANTI-RECOIL TO DISABLE

 /* 𝗠𝗔𝗖𝗥𝗢𝗦 */
﹋﹋﹋﹋﹋﹋﹋﹋﹋ 
int PickupTime = 1000; // THE AMOUNT OF TIME IT WILL TAKE FOR PICKUPM TO DISABLE [1000 = 1 SEC]
int PickupDelay = 20; // THE AMOUNT OF TIME IT WILL TAKE FOR PICKUPM TO START [1000 = 1 SEC]

int CrouchDelay = 25; // THE AMOUNT OF TIME IT WILL TAKE FOR CROUCHM TO START [1000 = 1 SEC]
int EditDelay = 12; // THE AMOUNT OF TIME IT WILL TAKE FOR QUICKEDITS TAKES TO EDIT [1000 = 1 SEC]
int InstantResetDelay = 20; // THE AMOUNT OF TIME IT WILL TAKE TO CONFIRM THE RESET [1000 = 1 SEC]
 
 /* 𝗘𝗫𝗧𝗥𝗔𝗦 */
﹋﹋﹋﹋﹋﹋﹋﹋﹋
int BuildSyncTime = 2000; // HOW QUICK BUILD TRACKER ACTIVATES [1000 = 1 SEC]
int LedBrightness  = 10; // BRIGHTNESS OF LED LIGHTS ON ZEN 
 
 
/*
_  ___  ___  _____ _   _ 
|  \/  | / _ \|_   _| \ | |
| .  . |/ /_\ \ | | |  \| |
| |\/| ||  _  | | | | . ` |
| |  | || | | |_| |_| |\  |
\_|  |_/\_| |_/\___/\_| \_/
                            
 */
 init { combo_run(Boot); LedFlow(); }
main { if(LessInputDelay) { VM(InputDelay); } if (BlockRumbles) { block_rumble(); } if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) { swap (PS4_TOUCH,PS4_SHARE); } if (BuilderPro) { if (get_ival(Build)) { BuildPro = On; if (BuildTracker) BuildTrack = On; } if (BuildPro && event_release(Build)) { combo_run(BuildPro); BuildPro = Off; if (BuildTracker) BuildTrack = Off; } } if (BuildTracker) { if (event_press(Build)) { BuildTrack = !BuildTrack; } if (BuildTrack && !BuildPro) { BuildCount += get_rtime(); if (event_press(Pickaxe) || BuildCount == BuildSyncTime) { BuildTrack = Off; BuildCount = 0; } if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) BuildCount = 0; } } if (QuickEditAssist) { if(!get_ival(ADS) && get_ival(EditAssist)) { EditAssist(); Edit1 = On; } if (event_release(EditAssist)) { combo_run(Confirm); EditT = Off; Edit1 = Off; } } if (InstantReset) { if (event_press(InstantResetB)) { combo_run(FastReset); } } if (!BuildTrack) { if(ConsoleAA) { if(get_val(ADS)) { LedFlow(); combo_run(ConsoleAAs); } if(event_release(ADS)) { combo_stop(ConsoleAAs); } } 
if (PolarAA) { if (PolarTimed) { if (get_ival(ADS) && get_ptime(ADS) <= PolarTime || PolarHipFire && get_ival(Fire) && get_ptime(Fire) <= PolarTime) { LedFlow(); AimAssist(); } } else if (get_ival(ADS)|| PolarHipFire && get_ival(Fire)) { LedFlow(); AimAssist(); } if (!get_ival(ADS) && !get_ival(Fire)) { AAT = 0; Axis = 0; } } if (AntiRecoil) { if (get_ival(ADS) >= 95 && get_ival(Fire) || (AntiRecoilHipFire && get_ival(Fire))) { LedFlow(); TimeValue += get_rtime(); if (TimeValue > 30) { AxisLY = get_lval(RY); AxisCY = get_ival(RY); } if (abs(AxisCY) != abs(AxisLY)) BoostAR = ((AxisCY - AxisLY) * 4); if ((BoostAR != 0) && (TimeValue > 40)) { BoostAR = 0; TimeValue = 0; } if (AntiRecoilTimed) { RecoilTimer += get_rtime(); if (RecoilTimer > AntiRecoilTime) { ARValue = AntiRecoilPower; RecoilTimer = 0; } else { ARValue = 0; } } AROutPut = (AntiRecoilVertical + ARValue + BoostAR); Set_Val(RY,AROutPut); } if (!get_ival(Fire)) { RecoilTimer = 0; TimeValue = 0; BoostAR = 0; } } if (PickupM) { if (get_val(PickupB) && get_ptime(PickupB) <= PickupTime) { LedFlow(); combo_run(Pickup); } } if (Headshot) { if (get_ival(ADS) 
&& get_ival(Fire) || HeadshotHipFire && get_ival(Fire)) { LedFlow(); if (abs(get_ival(RY)) < HeadshotMax) { Head += HeadshotSteps; combo_run(HeadshotS); } } if (!get_ival(Fire)) Head = 0; if (Head >= HeadshotMax) combo_stop(HeadshotS); } if (RapidFire) { if (get_val(Fire)) { LedFlow(); combo_run(RapidFireS); } if (event_release(ADS)) { combo_stop(RapidFireS); } } if (CrouchM) { if (get_val(ADS)) { combo_run(CrouchMs); set_val(Crouch, 0); } else { combo_stop(CrouchMs); } } } if (InstantTriggers) { deadzone(LTrigger,RTrigger,100,100); } if (PS5) { swap (PS4_TOUCH,PS4_SHARE); } if (MainMenu) { Scroll(); combo_stop(Boot); MenuTimeout += get_rtime(); if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) { MenuTimeout = Off; } if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) { if (event_press(MenuExitPress)) Shunt = MenuExitPress; MenuToggle(Off,Off,Off,Off,Off); VibB = On; combo_run(Rumble); } if (event_press(ChangeMenuPress)) { MenuValues = !MenuValues; MenuSwitch = !MenuSwitch; ModIndex = On; Update = On; } if (MenuValues) { ModDigit[ModIndex] = 
PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModIncrement[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]); } if (MenuSwitch && ModIndex > 1) { ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]); } else if (MenuSwitch && ModIndex == 1){ ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],1,7,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]); } BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress); } if (!MainMenu && Saver) { ScreenTime (); Saver (); } if (!MainMenu && LED) { LedFlow(); } if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) { Shunt = FindSlotPress; Saver = Off; ScreenTime = Off; Slot = On; combo_run(Boot); } if (ToggleTime) { TimeToggle(); } if (Shunt) { if (event_release(Shunt)) { Shunt = Off; } else { set_val (Shunt,Off); } } } combo ConsoleAAs {set_val(10, (ConsoleShake)); wait(10) set_val(9, (ConsoleShake)); wait(10) set_val(10, ConsoleShake * -1); wait(10) set_val(9, ConsoleShake * -1); wait(10) } combo AntiRecoilS 
{ if(get_val(Fire)) { Anti_Recoil = get_val(10) + AntiRecoilStrength; if(Anti_Recoil > 100) Anti_Recoil = 100; set_val(10, Anti_Recoil); } } combo HeadshotS { set_val(RY,inv(Head) + get_val(RY)); } combo CrouchMs { set_val(Crouch,100); wait(CrouchDelay); set_val(Crouch,100); wait(CrouchDelay); wait(200); } combo FastReset { set_val(EditAssist,100); wait(InstantResetDelay); set_val(Edit,100); wait(InstantResetDelay); set_val(Reset,100); wait(InstantResetDelay); combo_run(Confirm);  } combo Confirm { set_val(Confirm,100); wait(100); set_val(Confirm,0); wait(10); set_val(Reset,0); wait(10); } combo RapidFireS { set_val(Fire, 100) wait(200); set_val(Fire, 0); wait(100); } combo Pickup { set_val(PickupB,200); wait(PickupDelay); set_val(PickupB,0); } combo Boot { LedFlow(); wait(Slot); if (Slot == 20000) cls_oled(0); if (Slot) { cls_oled(0); printf(5, 10, 0, 1, Misc[3]); printf(5, 25, 0, 1, Misc[4]); printf(18, 45, 0, 1, Misc[5]); NumX = 32; NumY = 15; NumS = 0; FindDigit(get_slot(), DigitValue(get_slot())); Slot = Off; } wait(20000); cls_oled(0); Clear = On; Saver = On; ScreenTime = On; } combo VibrateBlink { if (Modled) { set_rgb(255, 0, 0); set_rumble(RUMBLE_B, 70); } 
else { set_rgb(0, 255, 0); set_rumble(RUMBLE_A, 35); } wait(150); set_rgb(0,0,0); wait(250); if (Modled) set_rgb(255,0,0); else set_rgb(0,255,0); reset_rumble(); reset_leds(); } combo BuildPro { set_val(Build,0); wait(50); set_val(Build,100); wait(50); } combo Rumble { if (VibA) set_rumble(RUMBLE_A,15); else if (VibB) set_rumble(RUMBLE_B,15); wait(250); VibA = Off; VibB = Off; reset_rumble(); } function AimAssist() { AAT += get_rtime(); if (!Axis) set_Val(RY,AAT * PolarPower / 10); if (Axis == 1) set_Val(RX,AAT * PolarPower / 10); if (Axis == 2) set_Val(RY,inv(AAT * PolarPower / 10)); if (Axis == 3) { set_Val(RX,inv(AAT * PolarPower / 10)); if (AAT > 50) { AAT = 0; Axis = 0; } } else if (AAT > 50) { AAT = 0; Axis += 1; } } function set_Val(Input,Output) { set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100)); return; } function Set_Val(Input,Output) { set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100)); return; } function calculate(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function VM (f_speed) 
{ if (f_speed == 0) vm_tctrl(-0); else if(f_speed == 1) vm_tctrl(-2); else if(f_speed == 2) vm_tctrl(-4); else if(f_speed == 3) vm_tctrl(-6); else if(f_speed == 4) vm_tctrl(-8); else if(f_speed == 5) vm_tctrl(-9); } function offset(int axis, int offset_val) { set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100)); return } function Press (Button) { if (get_ival(Button)) return; set_val(Button, 100); } function Toggle(ModT, ModP) { Modled = ModT; ToggleT = 0; ToggleTime = On; combo_run(VibrateBlink); if (ToggleName) { Saver = 0; cls_oled(0); printf(5, 2, 0, 1, Misc[8]); rect_oled(0, 11, 128, 20, 0, 1); rect_oled(2, 13, 124, 16, 0, 1); rect_oled(0, 32, 128, 20, 0, 1); rect_oled(2, 34, 124, 16, 0, 1); printf(5, 17, 0, 1, ModP); if (ModT) { printf(36, 38, 0, 1, Misc[7]); } else { printf(41, 38, 0, 1, Misc[6]); } ToggleName = Off; } } function TimeToggle() { ToggleT += get_rtime(); if (ToggleT >= 3500) { cls_oled(0); ToggleTime = Off; ToggleT = 0; } } function Saver() { if (Saver) { TimeS += get_rtime(); for (ii = 0; ii <= 10; ii++) { putc_oled(1, Saver_Scroll[0][ii]); puts_oled
(LineA + -30 + ii * 7, 2, 0, 1, 1); } for (jj = 0; jj <= 10; jj++) { putc_oled(1, Saver_Scroll[1][jj]); puts_oled(LineA + 100 + jj * 7, 15, 0, 1, 1); } for (ll = 0; ll <= 10; ll++) { putc_oled(1, Saver_Scroll[2][ll]); puts_oled(LineB + -50 + ll * 7, 28, 0, 1, 1); } for (oo = 0; oo <= 10; oo++) { putc_oled(1, Saver_Scroll[3][oo]); puts_oled(LineC + 10 + oo * 7, 41, 0, 1, 1); } for (xx = 0; xx <= 10; xx++) { putc_oled(1, Saver_Scroll[4][xx]); puts_oled(LineC + 127 + xx * 7, 53, 0, 1, 1); } if (TimeS == 50) { LineA += 2; LineB -= 2; LineC += 1; TimeS = 0; } } if (!Saver) cls_oled(0); } function ScreenTime() { if (Clear) { Ms = 0; Sec = 0; Min = 0; Clear = Off; } if (ScreenTime) { Ms += get_rtime(); if (Ms >= 1000) { Ms = 0; Sec += 1 } if (Sec == 60) { Sec = 0; Min += 1; } if (Min == TimeoutLimit) { Saver = 0; Ms = 0; Sec = 0; Min = 0; ScreenTime = 0; cls_oled(0); } } } function BlockButton(Button) { if (!get_ival(Button)) return; set_val(Button, Off); } function MenuToggle(Main, Vals, Indx, Print, Toggle) { cls_oled(0); MainMenu = Main; MenuValues = Vals; ModIndex = Indx; Update = Print; MenuSwitch = Toggle; MenuTimeout = 
Off; if (!MainMenu) { ScreenTime = 1; Saver = 1; Clear = On; } } function LedFlow() { Rgb += get_rtime(); if (Rgb == 120) { set_rgb(Colour,Colour[1],Colour[2]); Colour[LedDec] -= 2; Colour[LedInc] += 2; if (!Colour[LedDec]) { LedInc = (LedInc + 1) % 3; LedDec = (LedDec + 1) % 3; } Rgb = 0; } } function PrintMod(ModVal, ModValMin, ModValMax, ModValInc, IndexMin, IndexMax, ModValLbl) { if (Update) { rect_oled(2, 2, 127, 46, 1, 0); Grid(); printf(6, 25, 0, 1, Misc[0]); NumX = -43; NumY = 10; NumS = -1; FindDigit(ModIndex, DigitValue(ModIndex)); printf(5, 8, 0, 1, ModValLbl); if (MenuValues) { NumX = 0; NumY = 0; NumS = 0; FindDigit(ModVal, DigitValue(ModVal)); } if (MenuSwitch) { if (ModVal) { printf(51, 24, 1, 1, Misc[1]); } else { printf(46, 24, 1, 1, Misc[2]); } } Update = Off; } if (event_press(Up) || get_ival(Up) && get_ptime(Up) >= 450) { Update = On; ModVal += ModValInc; if (ModVal >= ModValMax) { ModMonitor(ModValLbl); return ModValMax; } } if (event_press(Down) || get_ival(Down) && get_ptime(Down) >= 450) { Update = On; ModVal -= ModValInc; if (ModVal <= ModValMin) { ModMonitor(ModValLbl); return ModValMin; } } 
if (event_press(Right)) { Update = On; ModIndex += 1; if (ModIndex > IndexMax) ModIndex = IndexMin; } if (event_press(Left)) { Update = On; ModIndex -= 1; if (ModIndex < IndexMin) ModIndex = IndexMax; } return ModVal; } function ModMonitor(Mon) { if (Mon == ModToggle[1]) { } if (Mon == ModToggle[2]) { } if (Mon == ModToggle[3]) { } if (Mon == ModToggle[7]) { } } function Grid() { line_oled(126, 20, 2, 20, 2, 1); rect_oled(1, 1, 127, 63, 0, 1); line_oled(126, 46, 2, 46, 2, 1); line_oled(28, 20, 28, 46, 2, 1); } function Scroll() { ScrollTime += get_rtime(); if (ScrollTime >= ScrollWait) { ScrollWait = ScrollSpeed; for (ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { if (ScrollIndex + ScrollLine >= sizeof(Scroll)) { putc_oled(ScrollIndex, Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); } else { putc_oled(ScrollIndex, Scroll[ScrollIndex + ScrollLine]); } } puts_oled(ScrollX, ScrollY, 0, ScrollIndex, 1); ScrollLine++; if (ScrollLine >= sizeof(Scroll)) { ScrollLine = 0; } ScrollChar--; if (ScrollChar < 1) { ScrollChar = 17; ScrollWait = ScrollDelay; } ScrollTime = 0; } } function FindDigit(Digit, Digits) { 
if (Digit < 0) { putc_oled(Number, 45); Number += 1; Digit = abs(Digit); Count = 1; } else Count = 0; if (Digits == 5) { putc_oled(Number, FontDigits[Digit / 10000]); Digit = Digit % 10000; Number += 1; } if (Digits >= 4) { putc_oled(Number, FontDigits[Digit / 1000]); Digit = Digit % 1000; Number += 1; } if (Digits >= 3) { putc_oled(Number, FontDigits[Digit / 100]); Digit = Digit % 100; Number += 1; } if (Digits >= 2) { putc_oled(Number, FontDigits[Digit / 10]); Digit = Digit % 10; Number += 1; } putc_oled(Number, FontDigits[Digit]); puts_oled(CenterMod(Digits + Count, 1) + NumX, 25 + NumY, 1 + NumS, Number, 1); Number = 1; } function EditAssist () { EditT += get_rtime(); if (get_ival(EditAssist)) { if (EditT >= EditDelay) Press(Select); } } function DigitValue(Number) { Number = abs(Number); if (Number / 10000 > 0) return 5; if (Number / 1000 > 0) return 4; if (Number / 100 > 0) return 3; if (Number / 10 > 0) return 2; return 1; } function CenterMod(f_chars,f_font) { return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); } 
const uint8 FontSize[][] = { { 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 } }; const uint8 FontDigits[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }; const string Misc[] = {"MOD","ON","OFF","MADE BY GHOSTY","GHOSTAIM V3","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off" }; const string ModToggle[] = {"" , "ConsoleAA", "PolarAA", "AntiRecoil", "PickupM", "CrouchM", "QuickEditAssist", "InstantReset", "HeadShot", "InstantTriggers", "LessInputDelay", "BlockRumbles" ,"BuildTrack", "PS5"}; const string ModValue[] = {"" , "ConsoleShake","PolarAA","AntiRecoilPower", "PickupDelay", " CrouchMTime", " QuickEditAssist", "InstantReset" , " HeadShotH", " InstantTriggers", " InputDelay", " BlockRumbles" ," BuildTrack", " PS5"}; const char Polar_Array[]={ 100,100,100,100,100,100,
100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88, 87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47, 46,44,43,41,40,38,
36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10, -12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50, -51,-53,-54,-55,
-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80, -81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97, -98,-98,-99,-99,
-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99 ,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84, -83,-82,-81,-80,
-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55, -53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16, -14,-13,-11,-9,-7,
-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41, 43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83, 84,85,86,87,88,89,89,
90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100, 100,100,100}; const int16 ModDigitMin [] = { 0 , 1 , 1 , -100 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 }; 
const int16 ModDigitMax [] = { 0 , 100 , 6 , 100 , 1000 , 10 , 10, 10 ,10 , 10 , 10 , 10 , 10 , 10 , 10 , 10 }; const int16 ModIncrement [] = { 0 , 1 , 1 , 10 , 100 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 
, 1 , 1 , 1 , 1 , 1 }; define TimeoutLimit = 2; define TimeoutLimitM = 20000; define IndexMinSwitches = 1; define IndexMaxSwitches = 16; define IndexMinValues = 1; define IndexMaxValues = 16; 
int Position, Update, MenuTimeout, Count, MainMenu, ModIndex, MenuValues, MenuSwitch, NumX, NumY, NumS, Clear, Shunt; int Number = 1, Slot = 20000; int ScrollTime, ScrollWait, ScrollLine, ScrollIndex,
ScrollChar; int ScrollSpeed = 70; int ScrollDelay = 950; int ScrollX = 8; int ScrollY = 50; int ToggleT, ToggleTime, ToggleName, Modled; int LineA, LineB, LineC, ii, jj, ll, oo, xx, TimeS; int AxisXY,
actual_X, actual_Y, time, SpiralPosition1, SpiralPosition2, InnerSpiral, OuterSpiral, BuildPro, BuildTrack, Anti_Recoil; int CosAngle, SinAngle, CosAngleDrift, SinAngleDrift, Edit1, Edit2, FastE, 
ARecoilStrength2, VibA, VibB, Actual_X, Actual_Y, SmartRumble; int Saver, Ms, Sec, Min, ScreenTime, ActualMagnitude, MaxMagnitude, Rgb, LedDec, LedInc, Head, AxisLY, AxisCY, ARValue, AROutPut; 
int ModDigit, BuildCount, angle, Angle, Colour[3], PolarStrength, EditT, AAT, Axis, TimeValue, BoostAR, RecoilTimer; define STEP_INTERVAL = 1; const int8 ExploitPolar[]={100,100,100,100,100,100,
100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,
35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; const uint8 Scroll[] = {/* ¦¦> 0 < ¦¦ ¦¦> 1 < ¦¦ ¦¦> 2 < ¦¦ ¦¦> 3 < ¦¦ ¦¦> 4 < ¦¦ ¦¦> 5 < ¦¦ ¦¦> 6 < ¦¦ ¦¦> 7 < ¦¦ ¦¦> 8 < ¦¦ ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/ SPACE , SPACE , TRIANGLE , SPACE , O , r , SPACE , Y , SPACE , T , o , SPACE , E , x , i , t , SPACE , SPACE , CROSS , SPACE , O , r , SPACE , A , SPACE , T , o , SPACE , N , e , x , t , SPACE , MENU , SPACE , UP , SPACE , O , r , SPACE , DOWN , SPACE , T , o , SPACE , A , d , j , u , s , t , SPACE , LEFT , SPACE , O , r , SPACE , RIGHT , SPACE , N , e , x , t , SPACE , M , o , d , SPACE }; const uint8 Saver_Scroll[][] = {/* ¦¦ 0 ¦¦ 1 ¦¦ 2 ¦¦ 3 ¦¦ 4 ¦¦ 5 ¦¦ 6 ¦¦ 7 ¦¦ 8 ¦¦ 9 ¦¦ 10 ¦¦ */ { SPACE, P , S ,SPACE, v ,SPACE, X , B , O , X ,SPACE}, { SPACE, Z , E , N ,SPACE, v ,SPACE, M , A , X ,SPACE}, { F , O , R , T , N , I , T , E , HASH , _1 ,SPACE}, { C , O , D ,SPACE, v ,SPACE, A , P , E , X ,SPACE}, { A , B , X , Y ,SPACE, v ,SPACE,CROSS,CIRCLE,SQUARE,TRIANGLE} }; 
define SPACE = 32; define _0 = 48, A = 65, K = 75, U = 85, e = 101, o = 111, y = 121; define EXCLAMATION = 33; define _1 = 49, B = 66, L = 76, V = 86, f = 102, p = 112, z = 122; define QUOTE = 34; 
define _2 = 50, C = 67, M = 77, W = 87, g = 103, q = 113; define HASH = 35; define _3 = 51, D = 68, N = 78, X = 88, h = 104, r = 114; define DOLLAR = 36; define _4 = 52, E = 69, O = 79, Y = 89, i = 
105, s = 115; define PERCENT = 37; define _5 = 53, F = 70, P = 80, Z = 90, j = 106, t = 116; define AND = 38; define _6 = 54, G = 71, Q = 81, a = 97, k = 107, u = 117; define APOSTROPHE = 39; define _7 = 55, H = 72, R = 82, b = 98, l = 108, v = 118; define O_BRACKET = 40; define _8 = 56, I = 73, S = 83, c = 99, m = 109, w = 119; define C_BRACKET = 41; define _9 = 57, J = 74, T = 84, d = 100, n = 110, x = 120; define ASTERISK = 42; define PLUS = 43; define COMMA = 44; define MINUS = 45; define FULLSTOP = 46; define F_SLASH = 47; define COLON = 58; define SEMICOLON = 59; define B_ARROW = 60; define EQUAL = 61; define F_ARROW = 62; define QUESTION = 63; define AT = 64; define O_SQUARE = 91; define b_SLASH = 92; define C_SQUARE = 93; define U_ARROW = 94; define UNDERSCORE = 95; define TICK = 96; define O_CURLY = 123; define BAR = 124; define C_CURLY = 125; define WAVE = 126; define CROSS = 127; define CIRCLE = 128; define SQUARE = 129; define TRIANGLE = 130; define UP = 131; define DOWN = 132; define LEFT = 133; define RIGHT = 134; define VIEW = 135; define MENU = 136; 


