// GPC Online Library
// apk_cheats_warzone_advanced_aim_v2.gpc

/*
░█████╗░██████╗░██╗░░██╗███████╗██████╗░███████╗███████╗
██╔══██╗██╔══██╗██║░██╔╝██╔════╝██╔══██╗██╔════╝██╔════╝
███████║██████╔╝█████═╝░█████╗░░██████╔╝█████╗░░█████╗░░
██╔══██║██╔═══╝░██╔═██╗░██╔══╝░░██╔══██╗██╔══╝░░██╔══╝░░
██║░░██║██║░░░░░██║░╚██╗██║░░░░░██║░░██║███████╗███████╗
╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝╚═╝░░░░░╚═╝░░╚═╝╚══════╝╚══════╝
Subscribe to ApkFree on YouTube, make sure to visit the website aswell www.apkfreecheats.co.uk


                                ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
                                ᥊᥊ Ｗａｒｚｏｎｅ Ａｄｖａｎｃｅｄ Ａｉｍ ｖ2 ᥊᥊
                                ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
                                

 IMPORTANT BELOW FOR WARZONE ADVANCED AIM ANTI RECOIL ADJUSTMENTS WHILE IN-GAME
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊
 ᥊᥊᥊ Hold L1 And Press UP For +1 to Vertical and DOWN For -1        ᥊᥊᥊
 ᥊᥊᥊ Hold L1 And Press RIGHT For +1 to Horizontal and LEFT For -1   ᥊᥊᥊
 ᥊᥊᥊ Heavy Rumble = Increase  -  Light Rumble = Decrease            ᥊᥊᥊
 ᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊*/

        //BUTTON ASSIGNMENTS\\
//᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊\\                       
    define FIRE      = PS4_R2;                      
    define ADS       = PS4_L2;                        
    define SPRINT    = PS4_L3;                
    define TACTICAL  = PS4_L1;                
    define LETHAL    = PS4_R1;                   
    define PRONE     = PS4_CIRCLE;                              
    define MELEE     = PS4_R3;
    define JUMP      = PS4_CROSS;
    define RELOAD    = PS4_SQUARE;
//᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊᥊\\ 

//᥊᥊Rapid Fire (L2 + LEFT)
    int Rapid_Fire = FALSE; //Change FALSE to TRUE if you want Rapid Fire ON by default
    int RapidFire_Speed = 30; //Rapid Fire Speed - Higher Value = Slower , Lower Value = Faster

//᥊᥊ProneShot (L2 + DOWN)
	int ProneShot = FALSE; //Change FALSE to TRUE if you want ProneShot ON by default
 
//᥊᥊Jump Shot (L2 + UP)
	int JumpShot = FALSE;  //Change to TRUE if you want TRUE by default

//᥊᥊Auto Ping (L2 + R3)
	int AutoPing = FALSE;  //Change to TRUE if you want TRUE by default

//᥊᥊Akimbo Rapid Fire (L2 + RIGHT)
    int Akimbo_Rapid =  FALSE; //Change to TRUE if you want TRUE by default
    int ARF_Speed    =     40; //Akimbo Rapid Fire

//᥊᥊Aim Corrections
	int aim_sens_corrections =  1;  // [0 = OFF / 1 = ON / 2 = ON + ZOOM SENS IS ALSO ON - ZOOM SENS DOES NOT WORK WITH BUMPERS - TRIGGERS FLIPPED]
	int in_game_menu_sens    = 7;  // Must Be 3 HIGHER Then your in-game sensitivity [ Read Below For Better Understanding ]
                                                                                                                                                                                                /*
    THE IDEA BEHIND AIM CORRECTIONS IS THAT YOU HIGHER YOUR IN-GAME SENSITIVITY WITH 2 OR 3
    CLICKS. THIS WILL ALLOW YOU TO TURN AROUND FAST WITHOUT LOSING CONTROL OVER YOUR AIM:
    THE SCRIPT WILL LOWER YOUR SENSITIVITY WHEN YOU AIM AND EVEN MORE WHEN YOU AIM & FIRE 
    SO THAT YOU CAN LOCK ON TARGET. SO FOR EXAMPLE: IF YOU PLAY NORMALLY WITH SENS 8 IN THE 
    GAME, SET YOUR SENSITIVITY TO 11 IN THE GAME MENU AND FOLLOW THE STEPS BELOW.  

	1) FILL OUT THE IN_GAME_MENU_SENS STICK SENSITIVITY UP ABOVE
    2) THAT`S IT! YOU`RE ALL SET AND GOOD TO GO!                                                                                                                                                */

//᥊᥊Advanced Aim Anti Recoil (L2 + OPTIONS) - Change TRUE to FALSE if you want Anti Recoil OFF by default
	int recoil_onoff = TRUE;
	int V_Recoil     =   28; //Vertical Recoil Of Weapon
	int H_Recoil     =   -7; //Horizontal Recooil Of Weapon 

//᥊᥊Change TRUE To FALSE If You  Don't Want Advanced Polar Aim Assist
	define Advanced_Aim_Polar = TRUE;
	define RADIUS			  =   20; /* Polar Aim Strength */
	define STEPS  			  =   20; /* Polar Aim Speed */
	define ACTIVE_WHEN_ADS    = TRUE; /* Polar Will Be On When ADS If Set To True */
	define ACTIVE_WHEN_FIRING = TRUE; /* Polar Will Be On When Firing If Set To True */

//᥊᥊Leave Alone
	define Blue          =  1;                 
	define Red           =  2;                 
	define Green         =  3;                 
	define Pink          =  4;                 
	define SkyBlue       =  5;                 
	define Black         =  6;                 
	define White         =  7;                 
	
	data ( 1,                 
	2,0,0,0 , //1. Blue                  
	0,2,0,0 , //2. Red                   
	0,0,2,0 , //3. Green                 
	0,0,0,2 , //4. Pink                  
	2,0,2,0 , //5. SkyBlue               
	0,0,0,0 , //6. Black                
	2,2,2,2 ) //7. White


//᥊᥊Variable Just Leave Alone
	define STEP_INTERVAL = 1;
	int n,o,n1,o2;
	int time;
	int angle, cos_angle, sin_angle;
	int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
	int ads_grenade_sens, ads_fire_sens, Sens;
	const int Polar_Aim_Array[] = { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/   	
   	main {
	if (Advanced_Aim_Polar) {
  if((ACTIVE_WHEN_ADS && get_val(ADS)) || (ACTIVE_WHEN_FIRING && get_val(FIRE))){
  actual_X = get_val(PS4_RX);
  actual_Y = get_val(PS4_RY);
  actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));
  max_Magnitude = (actual_Magnitude < 100);
  
  if(!(time++ % STEP_INTERVAL)){
    angle += STEPS;
  }
  angle = angle % 360;
  sin_angle = Polar_Aim_Array[angle % 360];
  cos_angle = Polar_Aim_Array[(angle + 270) % 360];
  cos_angle = (cos_angle * RADIUS) / 100;
  sin_angle = (sin_angle * RADIUS) / 100;
  
    if(actual_Magnitude <= RADIUS){
      sin_angle -= actual_Y;
      cos_angle -= actual_X;
    } else {
      sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
      cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
    }
    set_val(PS4_RX, clamp(actual_X + cos_angle, -100, 100));
    set_val(PS4_RY, clamp(actual_Y + sin_angle, -100, 100));
		}
	}
if(get_val(PS4_L2) && event_press(PS4_LEFT)) {
        combo_run (vibrate);
        combo_restart (BLINK);
   		Rapid_Fire = !Rapid_Fire;}
    if(Rapid_Fire) {
	if(get_val(FIRE))
    combo_run(Rapid); }
		if(aim_sens_corrections) {
			ads_grenade_sens=100-(in_game_menu_sens); ads_fire_sens=99-(in_game_menu_sens); 
			if (get_val (ADS))  {
				if(get_val(FIRE) && get_val(ADS)) { 
				Sens = ads_fire_sens; 
				}
			if(!get_val(FIRE) && !get_val(ADS) || get_val (FIRE) &&!get_val(ADS)) {
				Sens = 100; 
			}  //--general sens & hip fire sens 
			if(!get_val(FIRE) && get_val(ADS) || get_val (LETHAL) && !get_val (ADS) || get_val (TACTICAL) && !get_val (ADS)) {
				Sens = ads_grenade_sens; 
			}
			if(Sens > 100) Sens = 100;  
				sensitivity(PS4_RX, NOT_USE, Sens);
				sensitivity(PS4_RY, NOT_USE, Sens);  }
		}
	if(get_val(PS4_L2) && event_press(PS4_DOWN)) {
        combo_run (vibrate);
        combo_restart (BLIINK);
		ProneShot = !ProneShot; }
        if (ProneShot) {
   if(get_val(FIRE)) {
        combo_run (Prone_Shot); } }
	if(get_val(PS4_L2) && event_press(PS4_UP)) {
        combo_run (vibrate);
        combo_restart (BLIIINK);
		JumpShot = !JumpShot; }
	if(JumpShot) {  
	if(get_val(FIRE)) combo_run(JS); }
	if(get_val(PS4_L2) && event_press(PS4_RIGHT)) {
        combo_run (vibrate);
        combo_restart (BLiIIINK);
		Akimbo_Rapid = !Akimbo_Rapid; }
    if(Akimbo_Rapid) {
	if(get_val(FIRE))
    combo_run(ARF); }
	if(get_val(PS4_L2) && event_press(PS4_R3)) {
        combo_run (vibrate);
        combo_restart (BLiiIIINK);
		AutoPing = !AutoPing; }
	if (AutoPing) {
	if(get_val(ADS) && event_press(FIRE)) {
	combo_run(AutoPingC); } }
    if(get_val(PS4_L2) && event_press(PS4_OPTIONS))  {
        combo_run (vibrate); 
        combo_restart (BLIIINK);
        recoil_onoff = !recoil_onoff; }
		if (recoil_onoff) {
    if (get_val(FIRE) && get_ptime(FIRE) >= 1)
        if (get_val(ADS) && get_val(FIRE)) {
            anti__recoil(PS4_RY, V_Recoil);
            anti__recoil(PS4_RX, H_Recoil); }
	}
		if(get_val(PS4_L1)) {
        if(event_press(PS4_UP)) {
            V_Recoil = V_Recoil + 1;
            combo_run(Increase);  }
        if(event_press(PS4_DOWN)) {
            V_Recoil = V_Recoil - 1;
            combo_run(Decrease); }
        set_val(PS4_UP, 0); set_val(PS4_DOWN, 0);
        if(event_press(PS4_LEFT)){
            H_Recoil = H_Recoil + 1;
            combo_run(Increase); }
        if(event_press(PS4_RIGHT)) {
            H_Recoil = H_Recoil - 1;
            combo_run(Decrease); }
        set_val(PS4_LEFT, 0); set_val(PS4_RIGHT, 0); 
	}
	if(abs(get_val(PS4_LX))<= 10)  set_val(PS4_LX,0); if(abs(get_val(PS4_LY))<= 10)  set_val(PS4_LY,0);
    if(abs(get_val(PS4_RX))<= 10)  set_val(PS4_RX,0); if(abs(get_val(PS4_RY))<= 10)  set_val(PS4_RY,0);
    }
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
combo Increase {
set_rumble(RUMBLE_A,100);
wait(250);
reset_rumble();
}
combo Decrease {
set_rumble(RUMBLE_B,100);
wait(150);
reset_rumble();
}
combo Prone_Shot {
set_val(PRONE, 100);
wait(560);
set_val(PRONE, 0);
wait(150);
set_val(JUMP, 100);
wait(560);
set_val(JUMP, 0);
wait(150);
}
combo JS {
set_val(PS4_CROSS,100);
wait(100);
set_val(PS4_CROSS,0);
wait(100);
}
combo AutoPingC {
set_val(PS4_UP,100);
wait(25);
set_val(PS4_UP,0);
wait(25);
set_val(PS4_UP,100);
wait(25);
set_val(PS4_UP,0);
wait(25);
}
combo ARF {
set_val(PS4_R2,100);
set_val(PS4_L2,100);
wait(40);
set_val(PS4_R2,0);
set_val(PS4_L2,0);
wait(ARF_Speed);
}
combo BLINK {                                       
if(Rapid_Fire) LED_CM (Green); 
else  LED_CM (Red);
wait(1000);
LED_CM (Black)
}
combo BLIINK {                                       
if(ProneShot) LED_CM (Green); 
else  LED_CM (Red);
wait(1000);
LED_CM (Black)
}
combo BLIIINK {                                       
if(recoil_onoff) LED_CM (Green); 
else  LED_CM (Red);
wait(1000);
LED_CM (Black)
}
combo BLiIIINK {                                       
if(Akimbo_Rapid) LED_CM (Green); 
else  LED_CM (Red);
wait(1000);
LED_CM (Black)
}
combo BLiiIIINK {                                       
if(AutoPing) LED_CM (Green); 
else  LED_CM (Red);
wait(1000);
LED_CM (Black)
}
combo Rapid {
set_val(FIRE,100);
wait(40);
set_val(FIRE,0);
wait(RapidFire_Speed);
}
combo vibrate {
set_rumble(RUMBLE_A, 85);
wait(225);
reset_rumble();
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function anti__recoil(int axis, int Value) {
  n = get_val(axis) + Value;
  o = (Value) / 100;
  n1 = 1 + (o);
  o2 = 1 - (o); 
  if(n == (get_val(axis) > 0)){ 
      n = n * o2 + Value - sq(10) * (o2 * (n1 - 1));
  } else {
      n = n *  n1 - Value * (1 - o2);
  }
  set_val(axis, clamp(n, -100, 100));  
  return;
}
function sq(v) {
    return v * v;
}
/*function clamp(int v, int lo, int hi) {
	if(v < lo) return lo;
	if(v > hi) return hi;
	return v;
}*/
function LED_CM(Colour) {            
    set_led(LED_1,dbyte(( Colour * 4)- 3     )); 
    set_led(LED_2,dbyte(((Colour * 4)- 3) + 1)); 
    set_led(LED_3,dbyte(((Colour * 4)- 3) + 2)); 
    set_led(LED_4,dbyte(((Colour * 4)- 3) + 3)); 
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | A | P | K | | F | R | E | E | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/