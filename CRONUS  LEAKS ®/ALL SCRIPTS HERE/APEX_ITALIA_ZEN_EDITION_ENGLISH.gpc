/*
 **** APEX ITALIA ZEN EDITION ****
                               
                               Ver 2.1
                               
              MADE BY ANDRY 85
   
   IF YOU LIKE A SCRIPT CAN DONATE AT:

  https://www.paypal.com/paypalme/andry1985
 
  FOR ASSISTANCE:
  DISCORD: https://discord.gg/rR3nAWSpKQ
  
  
  FACEBOOK: https://www.facebook.com/groups/cronusmaxitaliaofficial
  FORUM: https://cronusmax.com/forums/forumdisplay.php/262-CronusMAX-Supporto-Italiano
          
          ***** FEATURES *****
                  
 This script contains 3 weapon profiles, for each profile you can set the standard recoil or the 3 step progressive one
 both vertical and horizontal (the standard recoil only works when firing without aiming while the progressive only works when aiming and firing),
 Rapid fire, TBag, Jumpshot, Slide Cancel, Aim abuse can be activated on three profiles - Aim Assist and polar can be enabled and set on a single profile,
 strafe - autoping and change weapon name directly from the zen menu, guide mode where it disables part of the script, possibility from the zen menu to change slots quickly,
 possibility to select pad layout directly from the menu
 
 PROFILE COLORS

GREEN PRIMARY PROFILE
RED SECONDARY PROFILE
LIGHT BLUE WARZONE PROFILE

 FAST ENABLES

rapidfire = HOLD Ads and PRESS FOR MORE THAN 0.3s PS4_LEFT Profile color flash
strafe = HOLD Ads and PRESS FOR MORE THAN 0.3s PS4_RIGHT flash profile color + BLUE
AIM abuse = HOLD Ads and PRESS FOR MORE THAN 0.3s PS4_DOWN profile color blink + PINK
TBAG = HOLD BUTTON TO DOWN and PRESS FOR MORE THAN 0.3s PS4_DOWN profile color flashing + YELLOW
jumpshot = HOLD BUTTON TO JUMP and PRESS FOR MORE THAN 0.3s PS4_RIGHT flash profile color + WHITE

FAST TREATMENTS:

PRESS X (xbox) or SQUARE (PLAY) / E D-PAD UP: KIT FENICE
PRESS X (xbox) or SQUARE (PLAY) AND D-PAD DOWN: SYRINGE KIT
PRESS X (xbox) or SQUARE (PLAY) AND D-PAD LEFT: MEDIKIT KIT
PRESS X (xbox) or SQUARE (PLAY) AND D-PAD RIGHT: BATTERY KIT

/ * =============================================== ================================================= ============================|
| Please read the instructions before programming the script on zen. READ INSTRUCTIONS - READ INSTRUCTIONS                        |
| In the following section you can change some buttons according to your personal preferences.                                    |
| REAL; means ON FALSE means OFF                                                                                                  |
| ================================================ ================================================= =============================|
| Change Profile Button Weapon Change                                                                                             |
================================================= ================================================= ==============================|
| PANIC BUTTON BUTTONS HOLD AIM AND SWITCH SHIFT                                                                                  |
================================================= ================================================= ==============================|
| GUIDE MODE Press AIM + two quick taps right arrow to ENABLE                                                                     |
| To disable SQUARE (for PS) or X (for XBOX)                                                                                      |
================================================= ================================================= ==============================|
| Warzone Loot is an additional profile (3) below you can choose the buttons to select it without interfering with the game       |
| TO ENTER IN THE GAME Generic PROFILE, PRESS THE FISTING KEY AND DOWN ARROW                                                      |
| To exit GEnerica mode press and hold Fists for 1 second | */ define warzone_generico_2 = PS4_DOWN;                        /*    |
| ================================================ ================================================= =============================|
| IN THIS SCRIPT, THE AUTOMATIC PING WORKS WHEN YOU DISAPPEAR AND ACTIVATES IN THE ZEN MENU IF YOU WANT TO ENABLE PING            |
| AUTOMATIC EVEN WHEN AIMS PUT TRUE */ define ping_automatico_in_mira = FALSE;                                               /*   |
================================================= ================================================= ==============================|
/*
 
 Read the instructions below for how to use the Zen menu
================================================= ================================================= ========================
==== Enter menu mode ===== Press AIM and Press OPTIONS / MENU ===
================================================= ================================================= ========================
==== To edit any mod in the menu ===== Press CROSS / A to edit ===
================================================= ================================================= ========================
==== Navigate between the mods in the zen menu ===== press right or left using the arrows on the D-PAD ===
================================================= ================================================= ========================
==== Enable or disable mods ===== Press UP ACTIVATE press DOWN DEACTIVATE ===
================================================= ================================================= ========================
==== Switch primary and secondary weapon in the menu ===== Press Y / TRIANGLE ===
================================================= ================================================= ========================
==== Switch primary and secondary weapon in game ===== DEFINED KEY ABOVE ===
================================================= ================================================= ========================
==== Modify mods mode in the zen menu ===== Press CROSS / A or Press CIRCLE / B to exit ===
================================================= ================================================= ========================
==== HOW TO MODIFY PARAMETERS ===== HOLD L2 / LT and CLICK RIGHT to increase +1 ===
                                                            ===== LEFT CLICK to decrease -1 ===
                                                            ===== CLICK UP to increment +10 ===
                                                            ===== CLICK DOWN to decrease -10 ===
================================================= ================================================= ========================
==== Navigate between editable values ​​in edit mode ===== CLICK RIGHT OR LEFT ===
================================================= ================================================= ========================
==== TO SAVE ALL MODS THAT HAVE BEEN CHANGED OR ACTIVATED ===== PRESS XBOX / PS Button ON THE DISPLAY WILL BE WRITTEN ===
=== SAVED
================================================= ================================================= ========================
==== TO EXIT MENU MODE ONCE SAVED ===== HOLD AIM AND PRESS OPTIONS / MENU ===
================================================= ================================================= ========================
==== DISABLE SCRIPT ===== HOLD AND HOLD AIM AND CLICK ON SHARE / VIEW ===

									
											END OF INSTRUCTIONS

DON'T TOUCH FROM HERE DOWN // DON'T TOUCH FROM HERE DOWN // DON'T TOUCH FROM HERE DOWN // DON'T TOUCH FROM HERE DOWN //

*/
// STIKY BOOST

     define Boost = 5
     
// Text to display 
	const string TITLE = "x ANDRY85 x";
	const string NAME = "APEX LEGEND";
	const string VERSIONE = "ver 3.0";
	const string PRESS_A_TO_CONTINUE = "Premi A per modif";
	const string PRESS_A_TO_GO =       " A per cambiare";
	const string TOGGLEONLY = "Solo on off ";
	const string ALLPROFILES = "Tutti i profili"; 
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE= "SALVATO";
	const string GUIDAON= "GUIDA ON";
	const string GUIDAOFF= "GuidaOff";
	const string ControllerLayouts[] = { "Predefinito", "Saltodorsale", "Lottatore", "Evoluto", "Granatiere", "Ninja","Pred inv","Special",""}
	
	const string Weapons[]={ // Weapon Names Displayed On Title Screen \ Total 20;
		"Generico","Volt","R-99","VK-47 Flat","CAR-301","Havoc","Alternator","Hemlok","Prowler","Spitfire","Rampage","Devotion","G7 Scout",
		"Longbow","Sentinel","Triple Take","Kraber","RE-45","Wingman","EVA-8",""} ;
	
	const string Cambiaslot[] =  {"Slot1", "slot2", "Slot3", "Slot4", "Slot5", "Slot6", "Slot7", "Slot8",""	};
	
	const string PROFILE_1 = "Primaria": 
	const string PROFILE_2 = "secondaria": 
	const string PROFILE_3 = "terza";  
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mod Name // Profile 1 
	const string ANTIRECOIL1  = "STANDARD AR";       // modName_idx = 0
	const string ANTIRECOIL   = "Progressivo";		 // modName_idx = 1
    const string RAPIDFIRE    = "RapidFire";         // modName_idx = 2 
    const string AIMABUSE     = "Aim ABuse";         // modName_idx = 3 
    const string STRAFE       = "Strafe";            // modName_idx = 4
    const string POLARAIM     = "Polar Aim";         // modName_idx = 5
    const string STICKYAIM    = "AIM ASSIST";        // modName_idx = 6
    const string TBAG         = "TBag"               // modName_idx = 7
    const string JUMPSHOT     = "Jump Shot"          // modName_idx = 8
 	const string CANCELSLIDE  = "CancelSlide";       // modName_idx = 9
	const string AUTO_PING    = "Ping Nemico";       // modName_idx = 10
 	const string DOPPIOJUMP   = "Doppio Jump";       // modName_idx = 11
	const string INVERTED     = "Inverted Y";        // modName_idx = 12
	const string ARMI         = "ARMI";       		 // modName_idx = 13
	const string CONTROLLER   = "Controller";        // modName_idx - 14
	const string CAMBIOSLOT   = "Cambio Slot";       // modName_idx - 15
// Index to find Mod Name string - switchable in game with left/right in ModMenu 
	int modName_idx;
    
// modName # of the last Mod Name string - Used for cycle modName_idx
	define LAST_MODNAME_STRING = 15;

// # of the last modName_idx that has a value that can be edited
	define LAST_EDITABLE_STRING = 2;

    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Value Name
	// modName_idx = 0 = ANTIRECOIL string
	const string ANTIRECOIL_VERTICAL      = "AR Vertical"; 		 // valName_idx = 0  
	const string ANTIRECOIL_HORIZONTAL    = "AR Horiz";		     // valName_idx = 1
	const string ANTIRECOIL_START         = "ARV Start"; 		 // valName_idx = 2  
	const string ANTIRECOIL_MID           = "ARV mid"; 		     // valName_idx = 2
	const string ANTIRECOIL_END           = "ARV End";			 // valName_idx = 3
	const string ANTIRECOIL_TIME          = "ARV Time";			 // valName_idx = 4
    const string ANTIRECOILH_START        = "ARH Start"; 	     // valName_idx = 5 
	const string ANTIRECOILH_MID          = "ARH mid"; 	         // valName_idx = 6 
	const string ANTIRECOILH_END          = "ARH End";			 // valName_idx = 7
	const string ANTIRECOILH_TIME         = "ARH Time";			 // valName_idx = 8
	const string RATE_OF_FIRE             = "Rounds/sec";	     // valName_idx = 9
    const string AMP_STRAFE               = "Amp strafe";        // valName_idx = 10
    const string VELO_STRAFE              = "Vel strafe";        // valName_idx = 11
    const string POLAR_RADIUS             = "Radius";            // valName_idx = 12
    const string POLAR_STEPS              = "Steps";             // valName_idx = 13
    const string STICKYAIM_SIZE           = "Sticky Size";       // valName_idx = 14
    const string STICKYAIM_TIME           = "Sticky Time";       // valName_idx = 15
   
	
// Index to find Value Name string - switchable in game with left/right in ModEdit 
	int valName_idx;
	
	define AMOUNT_OF_VALNAME_IDX = 15;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Values for [3] profiles/weapons
	int antirecoil_start[3]; // antirecoil start value for 3 profiles: profile_idx = 0, 1 and 2 
	int antirecoil_mid[3];
	int antirecoil_end[3];
	int antirecoil_time[3];
	int antirecoilH_start[3];
	int antirecoilH_mid[3];
	int antirecoilH_end[3];
	int antirecoilH_time[3];
	int rate_of_fire[3];
	int antirecoil_vertical[3];  
	int antirecoil_horizontal[3];
	int nomearmi[3]  ;
	//int quickscopedelay;
/* Used to define Profiles and also define # of profile to find, edit, and display the right index */
	int profile_idx; 
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
    int MAX_TIME_TO_CHECK = 5000;
// Multi toggles
	int toggle_antirecoil[3];  // for 3 Profiles: profile_idx = 0, 1 and 2
    int toggle_rapidfire[3]; 
    int aimabuse_on[3];
	int toggle_jumpshot[3];
	int toggle_legacyar[3]; 
	 
// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 3;  
	
// Amount of multi toggle - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 4;
	 //define per_profile_idx = 4; 
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};

// Variables for function number_to_string() 
	int i;
	int c,c_val;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

data(
//    Green     Red    SkyBlue    Blue         
    0,0,1,0,  0,1,0,0,  1,0,1,0,  1,0,0,0,
//   Yellow    White      Pink       OFF        
    0,3,3,0,  3,3,3,0,  0,0,0,1,  0,0,0,0 );     
     
// Refresh OLED
	int display_title = TRUE;
	int display_new; 
	int display_black;
	int warzone_loot_profile; // Special weapon
    
// ModMenu / ModEdit / KillSwitch
	int ModMenu;	
	int ModEdit;
	int KillSwitch;
    int count_black; // for screen saver
    int profile_1or2;
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// Anti Recoil values   
    int AntirecoilVertical; 
	int AntirecoilHorizontal;
	int p,inc,inc_2,pr,pr_2,vm,vm_2; 
    int vm_count,vm_loops,p_count,v,ar_y;
   // Horizontal
    int ph,inch,inc_2h,prh,pr_2h,vmh,vm_2h; 
    int vm_counth,vm_loopsh,p_counth,vh,ar_x;
    int invert; // -1 for inverted, 1 for standard	
    int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping,movx,movy,adsx,adsy,Buttons;   
// Variables Used for all mods 
   int sticky_aim[3];
   int stickyaim_size[3];
   int stickyaim_time[3];
// DROPSHOT   
   int tbag_on[3];
   int tbag;
// CANCEL SLIDE   
   int cancel_slide[3]; 
// STRAFE 
   int strafe_on
   int STEPS[3];          
   int Amp_strafe
   int Vel_strafe
   //CAMBIO ARMA 1 o 2 
   define cambio_arma = TRUE;
   define two_button_press = TRUE; 
  // DoNotAtMe Polar Aim Assist
  // define X = adsx;                                    
  // define Y = adsy;                                    
   define ACTIVE_WHEN_ADS    = TRUE;                     
   define ACTIVE_WHEN_FIRING = TRUE;                     
   int RADIUS[3];        
   define STEP_INTERVAL =  1;                            
   define VM_INTERVAL   = -2; 
   int time;                                             
   int angle, cos_angle, sin_angle;                      
   int actual_X, actual_Y, actual_Magnitude, max_Magnitude,SpiralPosition1,InnerSpiral,SpiralPosition2,OuterSpiral;
   int polar_aim[3];
   const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
   80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
   6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
   -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
   -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
   -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
   -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
   9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
   82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 
   // EnemyPing & Easy Plates // Credit to who done these codes :) 
   int enemy_ping;
   
//AKIMBO MODE
// Sweet Evils Saving SPVAR Method (Brilliant Idea) 
int mask;
int ret;
int pval_data;
int z;

//Cambio Slot   
   int slot_on;

// Toggles
   int doppiojump_on;
   int swap_on;
   int inverted_on;
    
   int hold_time;                                                    
   int rest_time;
   int led_on;
   int led_off;
   int DriveMode;
   // rainbow led
   int incled = 1, decled, colorledx[3];
   
	int double_tap;
   int q;											
   int double__tap[30];
   init {
   while(q < 30) 
   {double__tap[q] = -1;       
   q++;}}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 
init{
 colorledx = 255;
 Load();
 }

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                                     MAIN SECTION                                                      |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
main {
Buttons(Buttons);

//colorledx = 255;
	set_val(TRACE_1, profile_idx);
	set_val(TRACE_2, modName_idx);
	set_val(TRACE_3, Buttons);
	set_val(TRACE_4, slot_on);
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Crossover
  if(double_tap) 
        double_tap -= get_rtime(); 
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     DISPLAY TITLE                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
if(abs(get_val(XB1_RY)) < 5 && abs(get_val(XB1_RX)) < 5 ){         
        set_val(XB1_RY,0);                                                 
        set_val(XB1_RX,0); }  
  
  if (get_val(XB1_X)){ 
  
  set_val(XB1_DOWN,0);
  set_val(XB1_UP,0);
  set_val(XB1_RIGHT,0); 
  set_val(XB1_LEFT,0);
   
  if(event_press(XB1_UP)){
   			combo_run(fenice);}
  if(event_press(XB1_DOWN)){
   			combo_run(siringa);}
  if(event_press(XB1_LEFT)){
   			combo_run(MEDIKIT)}
  if(event_press(XB1_RIGHT)){
   			combo_run(BATTERY)}
   }
// Display Script Title    
    if(display_title)
    {
    	cls_oled(0);	// clear OLED screen
    	count_black = 0;// reset screen saver counter
    	
    	if(KillSwitch)
    	{
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	// display OFF centered in X 
	
    		}
    	else
    	{
    	   printf(5, 5, 1, 1, TITLE[0]);
   
              printf(27, 27, 0, 1, NAME[0]);

                  printf(38, 38, 0, 1, VERSIONE[0]);
           
    		                      if(warzone_loot_profile)

    		                        //printf(25, 47, 1, 0, Weapons[nomearmi[profile_idx]]);
    		                        printf(center_x(get_weapon_chars(nomearmi[profile_idx]), OLED_FONT_MEDIUM_WIDTH),48,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[nomearmi[profile_idx]]);
        else
        { 
    		            if(profile_idx == 0)
    		     printf(center_x(get_weapon_chars(nomearmi[profile_idx]), OLED_FONT_MEDIUM_WIDTH),48,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[nomearmi[profile_idx]]);          
    		     //printf(16, 47, 1, 0, Weapons[nomearmi[profile_idx]]);
    		               
    	     if(profile_idx == 1)
    	printf(center_x(get_weapon_chars(nomearmi[profile_idx]), OLED_FONT_MEDIUM_WIDTH),48,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[nomearmi[profile_idx]]);
    	 // printf(16, 47, 1, 0, Weapons[nomearmi[profile_idx]]);
    	  
  }
    		
    		display_black = TRUE;	
    		display_title = FALSE;
    	}
     
   }
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Screen saver (OLED off)
    if(display_black && !ModMenu && !KillSwitch && !DriveMode)
    {
    	count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_black = FALSE;
    	}
    }
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                      KILL SWITCH                                                      |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
  
if(get_val(Ads))
	{
	// Kill Switch	
if(event_release(PS4_SHARE))
		{
			KillSwitch = !KillSwitch;
			
			if(KillSwitch)        
				combo_run(RUMBLE_OFF);	// rumble and LED blink
			else
				combo_run(RUMBLE_ON);	// rumble and LED blink
			
    		//display_black = FALSE;
			display_title = TRUE;
		}
if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModMenu && !ModEdit)
	        {
	        	DriveMode = TRUE;
	        	combo_run(DriveModeOn);
	        	
	        }
  
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       MOD MENU                                                        |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

	// toggle ModMenu ON/OFF
		if(event_release(PS4_OPTIONS) && !KillSwitch && !DriveMode)
		{
			ModMenu = !ModMenu;
			
			if(!ModMenu)
			{
				ModEdit = FALSE; 		// close ModEdit too
				//save ();				// save function
				//combo_run(EXIT_SAVE);	// rumble, blink and display SAVED then display TITLE
				combo_run(RUMBLE_OFF);  // rumble and LED blink
				display_title = TRUE;   // display Title
			}
			
			if(ModMenu)
			{
				modName_idx = 0;        // start to the first adjustable value
				combo_run(RUMBLE_ON);	// rumble and LED blink
				display_new = TRUE;		// display mod name, profile, ON/OFF and value
			}
		}
		set_val(PS4_SHARE, 0);		    // block
		set_val(PS4_OPTIONS, 0);		// block
	} // L2 end

if(DriveMode) 
	{
	       	if(event_release(PS4_SQUARE))
	       		{
	       		
	       				DriveMode = FALSE;	       				
	       				combo_stop(DriveModeOn);
	       				combo_run(DriveModeOff);
	       				
	       		}
	       		combo_run(rgb);
	       	}	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
if(!KillSwitch)
{
if(!DriveMode)
{
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// ModMenu

 
	if(ModMenu) 
	{
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            MOD EDIT                                               |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

	// toggle ModEdit ON/OFF - only for mods who have adjustable value(s)
		if(modName_idx <= LAST_EDITABLE_STRING || modName_idx == 4 || modName_idx == 5 || modName_idx == 6 )	// if ANTIRECOIL (so modName_idx = 0) or AA or RAPIDFIRE or BURSTFIRE or StrafeShot is diplayed 
		{
			if(event_press(PS4_CROSS) && !ModEdit) // Turn ModEdit ON
			{
				valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // always display first val names available when enter in edition mod
				ModEdit = TRUE;
				combo_run(RUMBLE_ON);
				display_new = TRUE;
			}
			
			if(event_press(PS4_CIRCLE) && ModEdit) // Turn ModEdit OFF
			{
				ModEdit = FALSE;
				combo_run(RUMBLE_OFF);
				display_new = TRUE;
			}
		}
	   if (modName_idx == 15)
	     { 
	     if(event_press(PS4_CROSS) && !ModEdit) // Turn ModEdit ON
			{
				 // always display first val names available when enter in edition mod
				if(slot_on == 0)
				{load_slot(1) }
				if(slot_on == 1)
				{load_slot(2)}
				if(slot_on == 2)
				{load_slot(3) }
				if(slot_on == 3)
				{load_slot(4)}
				if(slot_on == 4)
				{load_slot(5) }
				if(slot_on == 5)
				{load_slot(6)}
				if(slot_on == 6)
				{load_slot(7) }
				if(slot_on == 7)
				{load_slot(8)}
			}
	}
           /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
           |                                          EDIT VALUES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
            
	// ModEdit ON
		if(ModEdit)
		{
			if(get_val(Ads)) // Edit value: hold L2 + UP (+1) or DOWN (-1) or RIGHT (+10) or LEFT (-10)
			{
			// Mods that can have different values depending the active Profile
			
    		  //val_I_want_to_edit[profile] = edit_val( corresponding valName_idx , val_I_want_to_edit[profile], abs(range min) , range max ); 	
			    antirecoil_vertical[profile_idx]   = edit_val( 0 , antirecoil_vertical[profile_idx]  , 0 , 99 , 1 , 10   ); 
				antirecoil_horizontal[profile_idx] = edit_val( 1 , antirecoil_horizontal[profile_idx], 99, 99 , 1 , 10   );
				antirecoil_start[profile_idx]      = edit_val( 2 , antirecoil_start[profile_idx]     , 0 , 99 , 1 , 10   );
				antirecoil_mid[profile_idx]        = edit_val( 3 , antirecoil_mid[profile_idx]       , 0 , 99 , 1 , 10   );// the first 0 define valName_idx so in this case, AR Start
				antirecoil_end[profile_idx]        = edit_val( 4 , antirecoil_end[profile_idx]       , 0 , 99 , 1 , 10   ); // the 2 last numbers are range min and range max
				antirecoil_time[profile_idx]       = edit_val( 5 , antirecoil_time[profile_idx]      , 0 , 99 , 1 , 10   ); // only ar_t display value x100 (real time in ms) - so 99 display 9,900 so 9.9 seconds 
			    antirecoilH_start[profile_idx]     = edit_val( 6 , antirecoilH_start[profile_idx]    ,99 , 99 , 1 , 10   ); 
				antirecoilH_mid[profile_idx]       = edit_val( 7 , antirecoilH_mid[profile_idx]      ,99 , 99 , 1 , 10   );
				antirecoilH_end[profile_idx]       = edit_val( 8 , antirecoilH_end[profile_idx]      ,99 , 99 , 1 , 10   ); 
				antirecoilH_time[profile_idx]      = edit_val( 9 , antirecoilH_time[profile_idx]     , 0 , 99 , 1 , 10   );
			    rate_of_fire[profile_idx]          = edit_val( 10 , rate_of_fire[profile_idx]        ,  1, 25 , 1 , 10   );
			    Amp_strafe                         = edit_val( 11 , Amp_strafe                       , 0 , 990, 1 , 10   ); 
                Vel_strafe                         = edit_val( 12 , Vel_strafe                       , 0 , 990, 1 , 10   ); 
			    RADIUS [profile_idx]               = edit_val( 13 , RADIUS[profile_idx]              , 0 , 99 , 1 , 10   );
                STEPS [profile_idx]                = edit_val( 14 , STEPS[profile_idx]               , 0 , 99 , 1 , 10   ); 
                stickyaim_size [profile_idx]       = edit_val( 15 , stickyaim_size[profile_idx]      , 0 , 50 , 1 , 10   );
                stickyaim_time  [profile_idx]      = edit_val( 16 , stickyaim_time [profile_idx]     , 0 , 990, 1 , 10   );
               
			}

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        VALUES AVAILABLE                                           |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

			else // NOT L2 (if not editing value)
			{
			
			// Navigate value name
				if(event_press(PS4_RIGHT))
				{
					valName_idx += 1;
					display_new = TRUE; // Display value name and value
				}
				if(event_press(PS4_LEFT))
				{
					valName_idx -= 1;
					display_new = TRUE;
				}
			
			// Adjustable values available for each of the mods (exemple: Anti-Recoil have 4 values per profile: 0 = antirecoil_start[<active profile>], 1 = antirecoil_end[], 2 = at_t, 3 = at_h  
			 // if(modName_idx == 0) <so if I display Anti-Recoil>  vals_available( 0 , 3  ); <vals_available are valName_idx 0, 1, 2 or 3>
				
				if(modName_idx == 0) vals_available(0  , 1 ); 
				if(modName_idx == 1) vals_available(2  , 9 );		
				if(modName_idx == 2) vals_available(10 ,10 ); 
				if(modName_idx == 4) vals_available(11 ,12 );
				if(modName_idx == 5) vals_available(13, 14 ); 
				if(modName_idx == 6) vals_available(15, 16 );
				
				
			} // NOT SQUARE (if not editing value) end
		} // ModEdit end

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            TOGGLES                                                |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

		else // if NOT ModEdit BUT if ModMenu
		{
	
	// Navigate mods name
	     	if(event_press(PS4_RIGHT))
			{
				modName_idx += 1;
				display_new = TRUE;
			}
			if(event_press(PS4_LEFT))
			{
				modName_idx -= 1;
				display_new = TRUE;
			}
			
		// Cycle mods name
			if(modName_idx > LAST_MODNAME_STRING) // max column for displaying mod name  
				modName_idx = 0;
			if(modName_idx < 0)
				modName_idx = LAST_MODNAME_STRING;
			
			
		// Switch profiles	
			if(event_press(Swap))
			{
				profile_idx += 1;
				display_new = TRUE;
			}
		// Cycle profiles	
			if(profile_idx > (AMOUNT_OF_PROFILES - 1))
				profile_idx = 0;
			
		// Toggles (UP to turn ON, DOWN to turn OFF)
    		// Mods that can have different ON/OFF status depending the active Profile
    		
		  //toggle_I_want_to_edit[profile]  = toggle( corresponding modName_idx, toggle_I_want_to_edit[profile] );
			toggle_legacyar[profile_idx]   = toggle( 0, toggle_legacyar[profile_idx] ); 
			toggle_antirecoil[profile_idx] = toggle( 1, toggle_antirecoil[profile_idx] );
			toggle_rapidfire[profile_idx]  = toggle( 2, toggle_rapidfire[profile_idx] ); 
			aimabuse_on [profile_idx]	   = toggle( 3, aimabuse_on [profile_idx]);
			strafe_on                      = toggle( 4, strafe_on                     );
			polar_aim [profile_idx]        = toggle( 5, polar_aim [profile_idx]        );
			sticky_aim [profile_idx]       = toggle( 6, sticky_aim  [profile_idx]     );
			tbag_on [profile_idx]          = toggle( 7, tbag_on  [profile_idx]     ); 
			toggle_jumpshot[profile_idx]   = toggle( 8, toggle_jumpshot [profile_idx]   );
            cancel_slide[profile_idx]      = toggle( 9, cancel_slide[profile_idx] ); 
            enemy_ping                     = toggle( 10, enemy_ping );
            doppiojump_on                  = toggle( 11, doppiojump_on );
			inverted_on                    = toggle( 12, inverted_on );
			nomearmi[profile_idx]		   = toggle( 13, nomearmi[profile_idx] );
			Buttons                        = toggle( 14, Buttons);
			slot_on						   = Rtoggle(15, slot_on);
			// Mods that have same ON/OFF status on every Profiles
    		
		  //toggle_I_want_to_edit = toggle( corresponding modName_idx, toggle_I_want_to_edit );
		
		} // if NOT ModEdit BUT if ModMenu end
		
	// If ModMenu AND ModEdit
		if(event_press(PS4_PS))
			save ();
			
		//block_btn (); // block ALL btn (exept L2_R2_RX_RY_LX_LY to test antirecoil, rapidfire and burstfire against a wall without leaving ModEdit and ModMenu)
		block_all_inputs();

	} // ModMenu ON end


							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                              NOT MOD MENU AND NOT MOD EDIT                                             |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — */	 
	if(!ModMenu)
	{
	
	
	 if(tbag_on[profile_idx])
	 {  
	  
	  
	if(get_val(Fire)) 
	   { combo_run(TBAG);}
	   
	    
	    led_on = 400;
    	led_off = 400;
    	combo_run(BLINKTBAG);
	} 

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        SPEED TOGGLES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	// Speed Toggles
	
	  //toggle_I_want_to_edit[profile]  = speed_toggle( hold BTN1, hold BTN2 300ms   , toggle_I_want_to_edit[profile] , corresponding modName_idx );
		toggle_rapidfire[profile_idx]  = speed_toggle( Ads, PS4_LEFT   , toggle_rapidfire[profile_idx] , 2 );
	    strafe_on					   = speed_toggle( Ads, PS4_RIGHT   ,  strafe_on , 4 );
		aimabuse_on[profile_idx]	   = speed_toggle( Ads, PS4_DOWN   ,  aimabuse_on[profile_idx] , 3 );
		toggle_jumpshot[profile_idx]   = speed_toggle( Jump, PS4_RIGHT   ,  toggle_jumpshot [profile_idx] 	 , 8 );
		tbag_on[profile_idx]	       = speed_toggle( Crouch, PS4_DOWN  ,  tbag_on[profile_idx] , 7 );
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	// Hair Trigger
   	 	deadzone(Ads,Fire,99,99);
   	 	
   	  if(get_val(Melee) && event_press(warzone_generico_2))
    {
        profile_idx = 2; 
        warzone_loot_profile = TRUE; 
        display_title = TRUE; 
        }
       
      
       if(warzone_loot_profile && get_val(Melee) && get_ptime(Melee) > 1000)     
           warzone_loot_profile = FALSE;
           
           
           
           
     if (strafe_on) 
     { 
           if(get_val(Fire)) {
    				combo_run(strafe);
    			} else {
        			combo_stop(strafe);
        		}
        led_on = 200;
    	led_off = 400;
    	combo_run(BLINKSTRAFE);  
    
 	 } 	 
   	 	
  if(polar_aim[profile_idx] == 1){
    
                      
      actual_X = get_val(adsx);   
      actual_Y = get_val(adsy);
      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
      max_Magnitude = (actual_Magnitude < 100);                      
                                                                  
      if(!(time++ % STEP_INTERVAL)){                                  
	         angle += STEPS[profile_idx];                                                 
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * RADIUS[profile_idx]) / 100;                         
      sin_angle = (sin_angle * RADIUS[profile_idx]) / 100;                          
      //GetShapes(RADIUS[profile_idx]);
      
      if((ACTIVE_WHEN_ADS && get_val(Ads)) || (ACTIVE_WHEN_FIRING && get_val(Fire)))
      { 
           if(actual_Magnitude <= RADIUS[profile_idx]){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
           }
           
           set_val(adsx, calculate(actual_X + cos_angle, -100, 100));
           set_val(adsy, calculate(actual_Y + sin_angle, -100, 100)); 
      }
     
  } 
  
  
 	
    if(sticky_aim[profile_idx] == 1){
    
    if(get_val(Ads))
    combo_run(STICKY_AIM);
    else 
    combo_stop(STICKY_AIM); 

    if(get_val(Ads)&& get_val(Fire) || get_val(Fire))
    combo_run(STICKY_AIM2);
    else 
    combo_stop(STICKY_AIM2); 
    }
  if(enemy_ping)
  {
	  if(get_val(Fire) && get_val(Ads))
	      combo_run(auto_ping);
	  if(!get_val(Fire))
    	combo_stop(auto_ping);
      
  }
  if(enemy_ping && ping_automatico_in_mira)
  { 
     if(event_press(Ads))
        combo_run(auto_ping); 
        if(!get_val(Ads))
    		combo_stop(auto_ping);
  }     
if(toggle_jumpshot[profile_idx])
  {
     if(get_val(Fire)) {
        	combo_run(Turbo_JUMP)
	}
  		led_on = 400;
    	led_off = 600;
    	combo_run(BLINKJUMP);
 }	
  
  
		if(doppiojump_on) // (5)
		{
    		if(event_press(Ads)) {
        	combo_run(DOPPIO_JUMP)
	}
		}
		
  if(cancel_slide[profile_idx] == 1)  
  {                                                                                                  
    	if((get_val(movy) < -95) || (get_val(movy) > 95) || (get_val(movx) < -95) || (get_val(movx) > 95))
    	{
		      if(event_release (Crouch))
		         combo_run(CANCEL_SLIDE)                                            
	    }                                               
                                               
	} 	
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		if(inverted_on) // (7)
			invert = -1;
		else
			invert = 1;
	
  	/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  	|                                                     SWITCH PROFILE                                                    |
  	◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
  
	// Switch Profiles - tap TRIANGLE/Y to switch profile 1 or 2 - double tap for profile 3 - hold R3/RS + tap for sync color
			if(cambio_arma) 
			{ 
				if(event_release(Swap)&& get_ptime(Swap)<250)
        		{
        	    	profile_1or2=!profile_1or2; 
        	    	
     
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	if(event_release(Swap) && get_ptime(Swap)>700 && get_ptime(Swap) < MAX_TIME_TO_CHECK ){
    			
    				profile_1or2=!profile_1or2;
    				
    				double_click(PS4_TRIANGLE)
        	}} 
     
           	  if(two_button_press) 
           	  { 
           		if(get_val(Ads) && (get_val(Swap)))
        		{
        	    	//profile_1or2=!profile_1or2;
					 set_val(Swap,0);
        	    
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    				
    			}
        	} 
    	
            if(!warzone_loot_profile)
             {
               
    				if(profile_1or2)
	    				profile_idx = 1;
	    		
	    			// If Profile 1
	    			else 	
	    				profile_idx = 0; 
         }      
    
	} // ModMenu OFF end

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
						|                                   FEATURES THAT WORK EVERYTIME (MOD MENU/EDIT OR NOT)                                 |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    ANTI RECOIL (0)                                                    |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

// If Anti-Recoil is enable for the active profile
	if(toggle_antirecoil[profile_idx] == 1)
	{
	// Antirecoil by Batts	
		// Vertical
		vm_loops = (antirecoil_time[profile_idx] * 10) / 2;
    if(antirecoil_start[profile_idx] < antirecoil_mid[profile_idx])
        inc = 1;
    else
        inc = -1;
    if(antirecoil_mid[profile_idx]<antirecoil_end[profile_idx])
        inc_2 = 1;
    else
        inc_2 = -1;
    pr = abs(antirecoil_start[profile_idx] - antirecoil_mid[profile_idx]);
    pr_2 = abs(antirecoil_mid[profile_idx] - antirecoil_end[profile_idx]);
    vm = vm_loops / pr;
    vm_2 = vm_loops / pr_2;
		
    	 
    	
    	// Horizontal		
   	vm_loopsh = (antirecoilH_time[profile_idx] * 10) / 2;
    if(antirecoilH_start[profile_idx] < antirecoilH_mid[profile_idx])
        inch = 1;
    else
        inch = -1;
    if(antirecoilH_mid[profile_idx]<antirecoilH_end[profile_idx])
        inc_2h = 1;
    else
        inc_2h = -1;
    prh = abs(antirecoilH_start[profile_idx] - antirecoilH_mid[profile_idx]);
    pr_2h = abs(antirecoilH_mid[profile_idx] - antirecoilH_end[profile_idx]);
    vmh = vm_loopsh / prh;
    vm_2h = vm_loopsh / pr_2h;
    	
    	if(!get_val(Fire)) 
   		{
   			// Vertical
   			p = 0;
       		vm_count = 0;
        	p_count = 0;
        	ar_y = antirecoil_start[profile_idx];
   			
   			// Horizontal
   			ph = 0;
       		vm_counth = 0;
        	p_counth = 0;
        	ar_x = antirecoilH_start[profile_idx];
   		}   
    	
    	 if(get_val(Ads) && get_val(Fire))
    	{
   		    // Vertical
   		     p = p_cycle();
        if(p != -1)
            ar_y = p_val();
        else
            ar_y = antirecoil_end[profile_idx];
          OffsetAR(adsy,ar_y);
    	   		
    	   	// Horizontal	
   		    ph = p_cycleh();
        if(ph != -1)
            ar_x = p_valh();
        else
            ar_x = antirecoilH_end[profile_idx];
         OffsetAR(adsx,ar_x);
   		}		
	}
    if(toggle_legacyar[profile_idx] == 1)
	{
		if(get_val(Fire) && !get_val(Ads) )
			 combo_run(ANTIRECOIL);
		    else
			 combo_stop(ANTIRECOIL);
	}
 



  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    RAPID FIRE (1)                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/  
  if(toggle_rapidfire[profile_idx] == 1)
	{
	// Rate of Fire Calculation
    	hold_time = 500 / rate_of_fire[profile_idx]; 
   		rest_time = hold_time - 20;
    	if(rest_time < 0) rest_time = 0;
    
    // Run combo
    	if(get_val(Fire))
    		combo_run(RAPIDFIRE);
    	else
    		combo_stop(RAPIDFIRE);
    		
    	led_on = 400;
    	led_off = 400;
    	combo_run(BLINKRAPID);
	}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    AKIMBO (1)                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/ 

if (aimabuse_on[profile_idx])
   
      {if(get_val(Fire))
     
     combo_run(aimABUSE_on);
     else
     combo_stop(aimABUSE_on);
        
        led_on = 400;
    	led_off = 400;
    	combo_run(BLINKABUSE);
     
     }
     
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    REFRESH DISPLAY                                                    |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
	if(display_new) 
	{
	// Clear OLED screen	
		cls_oled(0);
    	count_black = 0;// reset screen saver counter
		
		if(ModEdit)
		{
	    // Display Value Name and value
    		// Mods that can have different values depending the active Profile
    		
		  //display_edit( corresponding valName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , val_I_want_to_be_displayed[profile] );
			display_edit( 0 , center_x(sizeof(ANTIRECOIL_VERTICAL)  - 1, OLED_FONT_MEDIUM_WIDTH)   , ANTIRECOIL_VERTICAL[0]   , antirecoil_vertical[profile_idx]   );
			display_edit( 1 , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] );	
			display_edit( 2 , center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH)      , ANTIRECOIL_START[0]      , antirecoil_start[profile_idx]      );
			display_edit( 3 , center_x(sizeof(ANTIRECOIL_MID) - 1, OLED_FONT_MEDIUM_WIDTH)        , ANTIRECOIL_MID[0]        , antirecoil_mid[profile_idx]      );
			display_edit( 4 , center_x(sizeof(ANTIRECOIL_END) - 1, OLED_FONT_MEDIUM_WIDTH)        , ANTIRECOIL_END[0]        , antirecoil_end[profile_idx]        );
			display_edit( 5 , center_x(sizeof(ANTIRECOIL_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)       , ANTIRECOIL_TIME[0]       , antirecoil_time[profile_idx]       );
			display_edit( 6 , center_x(sizeof(ANTIRECOILH_START) - 1, OLED_FONT_MEDIUM_WIDTH)     , ANTIRECOILH_START[0]     , antirecoilH_start[profile_idx]     );
			display_edit( 7 , center_x(sizeof(ANTIRECOILH_MID) - 1, OLED_FONT_MEDIUM_WIDTH)       , ANTIRECOILH_MID[0]       , antirecoilH_mid[profile_idx]       );
			display_edit( 8 , center_x(sizeof(ANTIRECOILH_END) - 1, OLED_FONT_MEDIUM_WIDTH)       , ANTIRECOILH_END[0]       , antirecoilH_end[profile_idx]       );
			display_edit( 9 , center_x(sizeof(ANTIRECOILH_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)      , ANTIRECOILH_TIME[0]      , antirecoilH_time[profile_idx]      );
			display_edit( 10 , center_x(sizeof(RATE_OF_FIRE)      - 1, OLED_FONT_MEDIUM_WIDTH)     , RATE_OF_FIRE[0]      , rate_of_fire[profile_idx]    );
		    display_edit( 11 , center_x(sizeof(AMP_STRAFE)          - 1, OLED_FONT_MEDIUM_WIDTH)  , AMP_STRAFE[0]          , Amp_strafe                    );
            display_edit( 12 , center_x(sizeof(VELO_STRAFE)        - 1, OLED_FONT_MEDIUM_WIDTH)   , VELO_STRAFE[0]        , Vel_strafe               );
            display_edit( 13 , center_x(sizeof(POLAR_RADIUS)      - 1,OLED_FONT_MEDIUM_WIDTH)     , POLAR_RADIUS[0]      , RADIUS[profile_idx]                        );
            display_edit( 14 , center_x(sizeof(POLAR_STEPS)       - 1, OLED_FONT_MEDIUM_WIDTH)    , POLAR_STEPS[0]       , STEPS[profile_idx]                         );
            display_edit( 15 , center_x(sizeof(STICKYAIM_SIZE)    - 1, OLED_FONT_MEDIUM_WIDTH)    , STICKYAIM_SIZE[0]    , stickyaim_size [profile_idx]               );
            display_edit( 16 , center_x(sizeof(STICKYAIM_TIME)    - 1, OLED_FONT_MEDIUM_WIDTH)    , STICKYAIM_TIME[0]    , stickyaim_time [profile_idx]               );
           // display_edit( 16 , center_x(sizeof(DRIFTVALUE)        - 1, OLED_FONT_MEDIUM_WIDTH)    , DRIFTVALUE[0]          , drift_value                   );
           //display_edit( 17 , center_x(sizeof(QUICKSCOPESPEED)   - 1, OLED_FONT_MEDIUM_WIDTH)  , QUICKSCOPESPEED[0]   , quickscopedelay              );
			// Mods that have same value on every Profile
		}
		else
		{
	    // Display Mod Name and ON/OFF
    		// Mods that can have different ON/OFF status depending the active Profile
    		
		  //display_mod( corresponding modName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , toggle_I_want_to_be_displayed[profile]);
		    display_mod( 0 ,  center_x(sizeof(ANTIRECOIL1) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL1[0] , toggle_legacyar[profile_idx]);
			display_mod( 1 ,  center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]);
			display_mod( 2 ,  center_x(sizeof(RAPIDFIRE)   - 1, OLED_FONT_MEDIUM_WIDTH)  , RAPIDFIRE[0] , toggle_rapidfire[profile_idx]);
		    display_mod1(3 ,  center_x(sizeof(AIMABUSE) - 1, OLED_FONT_MEDIUM_WIDTH), AIMABUSE[0], aimabuse_on[profile_idx]);
		    display_mod( 4 ,  center_x(sizeof(STRAFE)   - 1, OLED_FONT_MEDIUM_WIDTH)  , STRAFE[0]     , strafe_on );
		    display_mod( 5 ,  center_x(sizeof(POLARAIM)    - 1, OLED_FONT_MEDIUM_WIDTH)  , POLARAIM[0]      , polar_aim[profile_idx] );
            display_mod( 6 ,  center_x(sizeof(STICKYAIM)   - 1, OLED_FONT_MEDIUM_WIDTH)  , STICKYAIM[0]     , sticky_aim[profile_idx]  ); 
            display_mod1( 7 ,  center_x(sizeof(TBAG)   - 1, OLED_FONT_MEDIUM_WIDTH)  , TBAG[0]     , tbag_on[profile_idx]); 
		    display_mod1( 8 , center_x(sizeof(JUMPSHOT)   - 1, OLED_FONT_MEDIUM_WIDTH) , JUMPSHOT[0]     ,toggle_jumpshot[profile_idx] );
            display_mod1( 9 , center_x(sizeof(CANCELSLIDE) - 1, OLED_FONT_MEDIUM_WIDTH) , CANCELSLIDE[0]    , cancel_slide[profile_idx] ); 
            display_mod1( 10 , center_x(sizeof(AUTO_PING)   - 1, OLED_FONT_MEDIUM_WIDTH)  , AUTO_PING[0]     , enemy_ping); 
		    display_mod1( 11 ,  center_x(sizeof(DOPPIOJUMP) - 1, OLED_FONT_MEDIUM_WIDTH) , DOPPIOJUMP[0] , doppiojump_on);
			display_mod1( 12 ,  center_x(sizeof(INVERTED) - 1, OLED_FONT_MEDIUM_WIDTH), INVERTED[0], inverted_on);
			display_mod3( 13 ,  center_x(sizeof(ARMI) - 1, OLED_FONT_MEDIUM_WIDTH)    , ARMI [0]   , nomearmi[profile_idx]);
			display_mod2( 14 ,  center_x(sizeof(CONTROLLER) - 1, OLED_FONT_MEDIUM_WIDTH)    , CONTROLLER[0]    , Buttons);
			display_mod4( 15 ,  center_x(sizeof(CAMBIOSLOT) - 1, OLED_FONT_MEDIUM_WIDTH)    , CAMBIOSLOT[0]    , slot_on);
	} 	
	// Display Profile only on mods that may have a different value depending on the Profile

		if(modName_idx < AMOUNT_OF_MULTI_TOGGLE || modName_idx == 5 || modName_idx == 6 || modName_idx == 9 || modName_idx == 7 || modName_idx == 8 || modName_idx == 13)  // idx from 0 to 4 are mods that can have different values depending the active Profile
		{
			    if(profile_idx == 0)
			   // display_mod( 0 ,  center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]); // profile_idx = profile_idx = Profile
    			printf(center_x(sizeof(PROFILE_1) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); // print Profile 1
    			//line_oled(0, 26, 39, 26, 5, 1); // print a line to the left to say profile 1
    			
    		else if(profile_idx == 1)
    				printf(center_x(sizeof(PROFILE_2) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]); // print Profile 2
    				
    			//line_oled(44, 26, 83, 26, 5, 1); // print a line in the middle to say Profile 2
    		      else if(profile_idx == 2)
    				printf(center_x(sizeof(PROFILE_3) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); // print Profile 3
         }
		else // Mods that work on every profiles print the 3 lines (disable this if you prefer display the text Profile X
    	{
    	    printf(center_x(sizeof(ALLPROFILES) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,ALLPROFILES[0]); // print All profiles
    		//line_oled(0, 26, 39, 26, 5, 1);ANDRY85
    		//line_oled(44, 26, 83, 26, 5, 1);ANDRY85
    		//line_oled(88, 26, 127, 26, 5, 1);ANDRY85
    	}
    	
    	
    	
    	
		display_black = TRUE;
        display_new = FALSE;
    } // display_new end
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
led(profile_idx);
} // NOT KillSwitch end

}

} // main end
 
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     COMBO SECTION                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	

combo DOPPIO_JUMP {
    			set_val(Jump, 100);
    			wait(150);
    			set_val(Jump, 0);
    			wait(400);
    			set_val(Jump, 100);
    			wait(150);
 
}

combo strafe {
        		set_val(11, 100);
        		wait(Amp_strafe);    
        		wait(Vel_strafe);
        		set_val(11,-100);
        		wait(Amp_strafe);
        		wait(Vel_strafe);    
    }
 combo TBAG {
        set_val(Crouch, 100);
        wait(100);
        wait(100);
               
                } 
combo STICKY_AIM {
    set_val(adsy,xy_val(adsy, stickyaim_size[profile_idx]));
    wait(stickyaim_time[profile_idx]);
    set_val(adsx,xy_val(adsx, stickyaim_size[profile_idx]));
    set_val(movx,xy_val(movx, stickyaim_size[profile_idx]));
    wait(stickyaim_time[profile_idx]);
    set_val(adsy,xy_val(adsy, stickyaim_size[profile_idx] * -1));
    wait(stickyaim_time[profile_idx]);
    set_val(adsx,xy_val(adsx, stickyaim_size[profile_idx] * -1));
    set_val(movx,xy_val(movx, stickyaim_size[profile_idx] * -1));
    wait(stickyaim_time[profile_idx]);
    }   
combo STICKY_AIM2 {
    set_val(adsy,xy_val(adsy, stickyaim_size[profile_idx] + Boost));
    wait(stickyaim_time[profile_idx]);
    set_val(adsx,xy_val(adsx, stickyaim_size[profile_idx] + Boost));
    set_val(movx,xy_val(movx, stickyaim_size[profile_idx]));
    wait(stickyaim_time[profile_idx]);
    set_val(adsy,xy_val(adsy, (stickyaim_size[profile_idx] + Boost) * -1));
    wait(stickyaim_time[profile_idx]);
    set_val(adsx,xy_val(adsx, (stickyaim_size[profile_idx] + Boost) * -1));
    set_val(movx,xy_val(movx, stickyaim_size[profile_idx] * -1));
    wait(stickyaim_time[profile_idx]);
    }   
        
combo RAPIDFIRE { 
    wait(hold_time);
    set_val(Fire, 0);
    wait(rest_time);
    }
combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(adsy) + (antirecoil_vertical[profile_idx]);  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(adsy)) < abs(antirecoil_vertical[profile_idx]) + 5)
    set_val(adsy, (AntirecoilVertical * invert));
// Horizontal
    AntirecoilHorizontal = get_val(adsx) +  (antirecoil_horizontal[profile_idx]);
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(adsx)) < abs(antirecoil_horizontal[profile_idx]) + 5)
    set_val(adsx, AntirecoilHorizontal);
}
combo CANCEL_SLIDE {              
    set_val(Crouch, 100);          
    wait(120);                         
    set_val(Crouch, 0);            
    wait(60);                          
    set_val(Crouch, 100);          
    wait(50);                          
    set_val(Crouch, 100);          
    set_val(Jump, 100);           
    wait(60);                          
    set_val(Crouch, 0);            
    set_val(Jump, 100);          
    wait(10);                        
    set_val(Jump, 0);         
}                             


combo Turbo_JUMP {
    			set_val(Jump, 100);
    			wait(60);
    			set_val(Jump, 0);
    			wait(40);
    			set_val(Jump, 0);
}  
   
 
//ANDRY85ANDRY85
combo auto_ping{
		set_val(Ping, 100);
        wait(40);
        set_val(Ping, 0);
        wait(2500);
        set_val(Ping, 0);
        }
 combo aimABUSE_on {
 		wait(10)
        set_val(Ads,100);
        wait(10)
        set_val(Ads,0);
        wait(10);
        }
        		

  
   
combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				   // display mods
}

combo DriveModeOn { 
	cls_oled(0);
	printf(center_x(sizeof(GUIDAON) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,GUIDAON[0]); 	// display SAVED... centered in X Y
	//call(rgb)
}// display mods
combo DriveModeOff { 
	cls_oled(0);
	printf(center_x(sizeof(GUIDAOFF) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,GUIDAOFF[0]); 				// 2 high rumbles + green blink 2 times	
	wait(2000);
	display_title = TRUE;
	}// display mods

combo rgb {
	wait(1);
  set_rgb(colorledx, colorledx[1], colorledx[2]);
  colorledx[decled] -= 5; colorledx[incled] += 5;
  if(!colorledx[decled]) { incled = (incled + 1) % 3; decled = (decled + 1) % 3; }
  }

	
combo BLINKRAPID {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}
combo BLINKABUSE {
	led(profile_idx);
    wait(led_on);
    led(6);
    wait(led_off);
}
combo BLINKSTRAFE {
	led(profile_idx);
    wait(led_on);
    led(3);
    wait(led_off);
} 
combo BLINKTBAG {
	led(profile_idx);
    wait(led_on);
    led(4);
    wait(led_off);
} 
combo BLINKJUMP {
	led(profile_idx);
    wait(led_on);
    led(5);
    wait(led_off);
} 
combo fenice {
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_RY, 0);
	wait(350);
	set_val(XB1_RY, -50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, -100);
	set_val(XB1_UP, 100);
	wait(200);
	set_val(XB1_RY, -50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, 0);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 100);
	wait(150);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(90);
	set_val(XB1_UP, 0);
	wait(10);
}

combo siringa {
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_RY, 0);
	wait(350);
	set_val(XB1_RY, 50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, 100);
	set_val(XB1_UP, 100);
	wait(200);
	set_val(XB1_RY, 50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, 0);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 100);
	wait(150);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(90);
	set_val(XB1_UP, 0);
	wait(10);
}
combo MEDIKIT {
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_RY, 0);
	wait(350);
	set_val(XB1_RY, -50);
	set_val(XB1_RX, -50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RX, -100);
	set_val(XB1_UP, 100);
	wait(200);
	set_val(XB1_RY, -50);
	set_val(XB1_RX, -50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, 0);
	set_val(XB1_RX, 0);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 100);
	wait(150);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(90);
	set_val(XB1_UP, 0);
	wait(10);
}
combo BATTERY {
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_RY, 0);
	wait(350);
	set_val(XB1_RY, -50);
	set_val(XB1_RX, 50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RX, 100);
	set_val(XB1_UP, 100);
	wait(200);
	set_val(XB1_RY, -50);
	set_val(XB1_RX, 50);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_RY, 0);
	set_val(XB1_RX, 0);
	set_val(XB1_UP, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 100);
	wait(150);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(90);
	set_val(XB1_UP, 0);
	wait(10);
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
    	        
//FUNZIONE POLAR AIM
function calculate(int v, int lo, int hi) {  
      if(v < lo) return lo;               
      if(v > hi) return hi;        
      return v;     
    }    
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size[profile_idx]+Boost+ 1) 
        return f_val;
    return get_val(f_axis); 
}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       FUNCTIONS                                                       |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods

	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;	
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )
					
	if(valName_idx == f_idx)
	{
    // +1 or -1															 
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
	
	}

	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function speed_toggle(f_hold, f_press, f_val, f_string) {  // toggle_aimassist[profile_idx] = speed_toggle(PS4_R3, PS4_UP, toggle_aimassist[profile_idx], #cons_string for this toggle);
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == 300)  // Hold second button 300ms or more	if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 30))  // Hold second button 300ms or more
		{
			modName_idx = f_string;
			
			if(f_val == 0)
			{
			f_val = 1;
			combo_run(RUMBLE_ON);
			}
			else if(f_val == 1)
			{f_val = 0;
			combo_run(RUMBLE_OFF);
			}
 			display_new = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function toggle(f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, PS4_UP, toggle_antirecoil[profile_idx]);
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
			if(modName_idx == 14)
			{
			// Increase
				f_val += 1;
			// Limits
				if(f_val > 7)
					f_val = 0;
				if(f_val < 0)
					f_val = 7;
			}
				else if(modName_idx == 13)
			{
			// Increase
				f_val += 1;
			// Limits
				if(f_val > 19)
					f_val = 0;
				if(f_val < 0)
					f_val =19;
			}
			 
			else 
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(modName_idx == f_idx)
		
		{
		if(modName_idx == 14)
			{
			// Decrease
				f_val -= 1;
			// Limits
				if(f_val > 7)
					f_val = 0;
				if(f_val < 0)
					f_val = 7;
			}
		else if(modName_idx == 13)
			{
			// Decrease
				f_val -= 1;
			// Limits
				if(f_val > 19)
					f_val = 0;
				if(f_val < 0)
					f_val = 19;
			}	
		else	f_val = 0;
			combo_run(RUMBLE_OFF);
			
		}		
		display_new = TRUE;
	}
	return f_val;
}
function Rtoggle(f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, toggle_antirecoil[profile_idx]);
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
		// Increase
				f_val += 1;
			// Limits
				if(f_val > 7)
					f_val = 0;
				if(f_val < 0)
					f_val =7;
		
			combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(modName_idx == 15)
		
		{
			// decrease
				f_val -= 1;
			// Limits
				if(f_val > 7)
					f_val = 0;
				if(f_val < 0)
					f_val =7;
			
			combo_run(RUMBLE_ON);	
		}		
		display_new = TRUE;
	}
	return f_val;
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_edit(f_idx, f_string, f_print, f_val) { // display_edit(0, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0], antirecoil_start[profile_idx]);

    	if(valName_idx == f_idx)
    	{
		// Display value name and value
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    		
    	// Display AntiRecoil Time value x 100 so 1,000 (displayed) = 1 second - script value is 10
    		if(f_idx == 5 || f_idx == 9)
    			number_to_string(f_val * 100, find_digits(f_val * 100) );
    	
    	// Display editable values 
    		else 
    			number_to_string(f_val, find_digits(f_val));
    	}
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_mod(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		// Display ON OFF
    			if(f_toggle == 1)
    				printf(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    			else if(f_toggle == 0)
    				printf(center_x(sizeof(OFF) - 13,OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);		
        	        printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]);
    	}
}
function display_mod1(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		// Display ON OFF
    			if(f_toggle == 1)
    				printf(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    			else if(f_toggle == 0)
    				printf(center_x(sizeof(OFF) - 13,OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);		
        	        printf(center_x(sizeof(TOGGLEONLY) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,TOGGLEONLY[0]);
    	}
}
function display_mod2(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		
        	if(f_toggle)
					printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
			else if(f_toggle == 0)
					printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
		}
}
function display_mod3(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		
        	if(f_toggle)
					printf(center_x(get_weapon_chars(nomearmi[profile_idx]), OLED_FONT_MEDIUM_WIDTH),48,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[nomearmi[profile_idx]]);
			else if(f_toggle == 0)
					printf(center_x(get_weapon_chars(nomearmi[profile_idx]), OLED_FONT_MEDIUM_WIDTH),48,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[nomearmi[profile_idx]]);
		}
}
function display_mod4(f_idx, f_string, f_print, f_Rtoggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		// Display ON OFF
    			if(f_Rtoggle)
    				printf(center_x(cambia_slot(slot_on), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Cambiaslot[slot_on]);
    			else if(f_Rtoggle == 0)
    				printf(center_x(cambia_slot(slot_on),OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, Cambiaslot[slot_on]);		
        	        printf(center_x(sizeof(PRESS_A_TO_GO) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_GO[0]);
    	}
}


function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function get_weapon_chars(f_idx){
	if (Weapons[f_idx + 1] != -1) 
		return Weapons[f_idx + 1] - Weapons[f_idx] - 1;
	return sizeof(Weapons) - Weapons[f_idx];		
}
function cambia_slot(f_idx){
	if (Cambiaslot[f_idx + 1] != -1) 
		return Cambiaslot[f_idx + 1] - Cambiaslot[f_idx] - 1;
	return sizeof(Cambiaslot) - Cambiaslot[f_idx];		
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
      
    // Substract    
        if(f_val < inv(f_rng_min)) 
        	f_val = inv(f_rng_min); 
   	// Add   
       	if(f_val > f_rng_max) 
        	f_val = f_rng_max;

        display_new = TRUE;
    }
    return f_val; 
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_val() {
    p_count++;
    if(p_count == vm[p]) {
        p_count = 0;
        ar_y += inc[p];
    }
    return ar_y;
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_cycle() { 
    vm_count++;
    if (vm_count > vm_loops) { 
        if(!p) {
            vm_count = 0;
            return 1;
        }
        else{
            vm_count = vm_loops; 
            return -1;
         } 
     }
     return p;
}        

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 




// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
//HORIZZONTAL

function p_valh() {
    p_counth++;
    if(p_counth == vmh[ph]) {
        p_counth = 0;
        ar_x += inch[ph];
    }
    return ar_x;
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_cycleh() { 
    vm_counth++;
    if (vm_counth > vm_loopsh) { 
        if(!ph) {
            vm_counth = 0;
            return 1;
        }
        else{
            vm_counth = vm_loopsh; 
            return -1;
         } 
     }
     return ph;
}        

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 



function OffsetAR( axis,  offset_val) {
  set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function number_to_string(f_val,f_digits) {
/***********************************************************
 *  number_to_string(value to convert, # of digits in value)
 *
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
 *   
 *      Convert digits to ASCII ANDRY85
 *      Add ASCII character to print buffer
 *      Print string centered X & Y on OLED
 *  
***********************************************************/
    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // adjustable value centered in X
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_x(f_chars,f_font) {
//  center_x(number of chars,font size);  
//	    return X for Centering String Horizontally

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
function pack_usigned(int pvar, int ret, int position, int number_of_bits)
{
	for(z = position; z< (number_of_bits + position); z++)
	{
		pvar = pvar & (~(1 << z));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}

//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits)
{
	mask = 0;
	ret = 0;
	
	for(z = 0; z< number_of_bits ; z++)
	{
		mask = mask | (1 << z);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}

//position range [0..1]   |  ret range = [-127..127]
function pack_int8_to_int16(int var1, int var2)
{
	ret = 0;
	
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}

	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
	
	return ret;
}
//position range [0..1]   |  ret range = [-127..127]
function unpack_int16_to_int8(int pvar, int var)
{
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	
	return ret;
}
function Load(){ 

 pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
    toggle_legacyar[0]           = unpack_usigned(pval_data, 0,  1);
    toggle_legacyar[1]           = unpack_usigned(pval_data, 1,  1);
    toggle_legacyar[2]           = unpack_usigned(pval_data, 2,  1);
    toggle_antirecoil[0]         = unpack_usigned(pval_data, 3,  1);
    toggle_antirecoil[1]         = unpack_usigned(pval_data, 4,  1);
    toggle_antirecoil[2]         = unpack_usigned(pval_data, 5,  1);
    toggle_rapidfire[0]          = unpack_usigned(pval_data, 6,  1);
    toggle_rapidfire[1]          = unpack_usigned(pval_data, 7,  1);
    toggle_rapidfire[2]          = unpack_usigned(pval_data, 8,  1);
    aimabuse_on[0]          		 = unpack_usigned(pval_data, 9,  1);
    aimabuse_on[1]      		     = unpack_usigned(pval_data, 10, 1);
    aimabuse_on[2]      		     = unpack_usigned(pval_data, 11, 1);
    polar_aim [0]                = unpack_usigned(pval_data, 12, 1);
    sticky_aim [0]		         = unpack_usigned(pval_data, 13, 1);

 pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    polar_aim [1]       		 = unpack_usigned(pval_data, 0,  1);
    polar_aim [2]       		 = unpack_usigned(pval_data, 1,  1);
    sticky_aim[1]                = unpack_usigned(pval_data, 2,  1);
    sticky_aim[2]                = unpack_usigned(pval_data, 3,  1);
    cancel_slide[0]              = unpack_usigned(pval_data, 4,  1);
    cancel_slide[1]              = unpack_usigned(pval_data, 5,  1);
    cancel_slide[2]              = unpack_usigned(pval_data, 6,  1);
    tbag_on[0]               = unpack_usigned(pval_data, 7,  1);
    tbag_on[1]               = unpack_usigned(pval_data, 8,  1);
    tbag_on[2]               = unpack_usigned(pval_data, 9,  1);
    toggle_jumpshot[0]            = unpack_usigned(pval_data, 10, 1);
    toggle_jumpshot[1]            = unpack_usigned(pval_data, 11, 1);
    toggle_jumpshot[2]            = unpack_usigned(pval_data, 12, 1);
   /* toggle_dogz_polar_assist     = unpack_usigned(pval_data, 13, 1);*/

// Profile 1
	// Toggles 
	// Values
	/*toggle_legacyar[0]       = get_pvar(SPVAR_1, 0, 1, 0 );*/     antirecoil_vertical[0]   = get_pvar(SPVAR_4, 1, 99, 0);
	/*toggle_antirecoil[0]     = get_pvar(SPVAR_2, 0, 1, 0 );*/     antirecoil_horizontal[0] = get_pvar(SPVAR_5, 1, 99, 0);
    /*toggle_rapidfire[0]      = get_pvar(SPVAR_3, 0, 1, 0 );*/     antirecoil_start[0]      = get_pvar(SPVAR_6,  1, 99, 0);
   /* akimbo_on[0]             = get_pvar(SPVAR_58, 0, 1, 0 );*/	antirecoil_mid[0]        = get_pvar(SPVAR_62, 1, 99, 0);
	                                                            antirecoil_end[0]        = get_pvar(SPVAR_7,  1, 99, 0);         
                                                                antirecoil_time[0]       = get_pvar(SPVAR_8,  1, 99, 0);
                                                                antirecoilH_start[0]     = get_pvar(SPVAR_9,  -99, 99, 0);
	                                                            antirecoilH_mid[0]       = get_pvar(SPVAR_37, -99, 99, 0);
	                                                            antirecoilH_end[0]       = get_pvar(SPVAR_10, -99, 99, 0);
	                                                            antirecoilH_time[0]      = get_pvar(SPVAR_11, 1, 99, 0);	
	                                                            rate_of_fire[0]          = get_pvar(SPVAR_12,  1, 25, 15);
// Profile 2 ===================================================================================================================
	// Toggles                                                  // Values
   RADIUS[1]                  = get_pvar(SPVAR_13,  1, 99, 15);    antirecoil_vertical[1]   = get_pvar(SPVAR_16, 1, 99, 0);
   STEPS[1]                   = get_pvar(SPVAR_14,  1, 99, 15);  antirecoil_horizontal[1] = get_pvar(SPVAR_17, 1, 99, 0);
   stickyaim_size [1]         = get_pvar(SPVAR_15,  1, 50, 20);   antirecoil_start[1]      = get_pvar(SPVAR_18,  1, 99, 0); 
   stickyaim_time [1]         = get_pvar(SPVAR_50,  1, 99, 30); antirecoil_mid[1]        = get_pvar(SPVAR_60,  1, 99, 0);
	                                                            antirecoil_end[1]        = get_pvar(SPVAR_19,  1, 99, 0);         
                                                                antirecoil_time[1]       = get_pvar(SPVAR_20,  1, 99, 0);
                                                                antirecoilH_start[1]     = get_pvar(SPVAR_21,  -99, 99, 0);
	                                                            antirecoilH_mid[1]       = get_pvar(SPVAR_40, -99, 99, 0);
	                                                            antirecoilH_end[1]       = get_pvar(SPVAR_22, -99, 99, 0);
	                                                            antirecoilH_time[1]      = get_pvar(SPVAR_23, -99, 99, 0);	
	                                                            rate_of_fire[1]          = get_pvar(SPVAR_24,  1, 25, 13);
	                                                       
																
// Profile 3 ===================================================================================================================                                                         
  RADIUS[2]                  = get_pvar(SPVAR_25,  1, 99, 15);  antirecoil_vertical[2]   = get_pvar(SPVAR_28, 1, 99, 0);
  STEPS[2]                    = get_pvar(SPVAR_26,  1, 99, 15); antirecoil_horizontal[2] = get_pvar(SPVAR_29, 1, 99, 0);
  stickyaim_size [2]          = get_pvar(SPVAR_27,  1, 50, 20); antirecoil_start[2]      = get_pvar(SPVAR_30,  1, 99, 0);
  stickyaim_time [2]          = get_pvar(SPVAR_59,  1, 99, 30);	antirecoil_mid[2]        = get_pvar(SPVAR_61,  1, 99, 0);
	                                                            antirecoil_end[2]        = get_pvar(SPVAR_31,  1, 99, 0);         
                                                                antirecoil_time[2]       = get_pvar(SPVAR_32,  1, 99, 0);
                                                                antirecoilH_start[2]     = get_pvar(SPVAR_33,  -99, 99, 0);
	                                                            antirecoilH_mid[2]       = get_pvar(SPVAR_41, -99, 99, 0);
	                                                            antirecoilH_end[2]       = get_pvar(SPVAR_34, -99, 99, 0);
	                                                            antirecoilH_time[2]      = get_pvar(SPVAR_35, 1, 99, 0);	
	                                                            rate_of_fire[2]          = get_pvar(SPVAR_36,  1, 25, 13);	
	                                                            
// All Profiles ================================================================================================================                                                         
	                                                      
	//toggle_holdbreath    = get_pvar(SPVAR_38, 0, 1, 0 );                                                                                                           
	nomearmi[0]    		 = get_pvar(SPVAR_3, 0, 19, 0 );                                  
    nomearmi[1]          = get_pvar(SPVAR_47, 0, 19, 0 );                                            
	nomearmi[2]       	 = get_pvar(SPVAR_56, 0, 19, 0 );
                                                                RADIUS[0]                   = get_pvar(SPVAR_51,  1, 99, 15);
	                                                            STEPS[0]                    = get_pvar(SPVAR_52,  1, 99, 15);
	doppiojump_on          = get_pvar(SPVAR_42, 0, 1, 0);	    stickyaim_size [0]          = get_pvar(SPVAR_53,  1, 50, 20);
	Buttons               = get_pvar(SPVAR_43, 0, 7, 0);	    stickyaim_time [0]          = get_pvar(SPVAR_54,  1, 99, 30); 
	inverted_on           = get_pvar(SPVAR_44, 0, 1, 0);       
	enemy_ping            = get_pvar(SPVAR_45, 0, 1, 0);        
	Amp_strafe              = get_pvar(SPVAR_48, 1, 99, 300);
	Vel_strafe              = get_pvar(SPVAR_49, 1 , 99, 100);
}

function save () {
	combo_run(SAVE);
	
  pval_data = pack_usigned(pval_data, toggle_legacyar[0],   0, 1);
  pval_data = pack_usigned(pval_data, toggle_legacyar[1],   1, 1);
  pval_data = pack_usigned(pval_data, toggle_legacyar[2],   2, 1);
  pval_data = pack_usigned(pval_data, toggle_antirecoil[0], 3, 1); 
  pval_data = pack_usigned(pval_data, toggle_antirecoil[1], 4, 1); 
  pval_data = pack_usigned(pval_data, toggle_antirecoil[2], 5, 1);  
  pval_data = pack_usigned(pval_data, toggle_rapidfire[0],  6, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[1],  7, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[2],  8, 1);
  pval_data = pack_usigned(pval_data, aimabuse_on[0],   9, 1); 
  pval_data = pack_usigned(pval_data, aimabuse_on[1],  10, 1); 
  pval_data = pack_usigned(pval_data, aimabuse_on[2],  11, 1);
  pval_data = pack_usigned(pval_data, polar_aim [0],  12, 1); 
  pval_data = pack_usigned(pval_data, sticky_aim [0],  13, 1); 
  
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_usigned(pval_data, polar_aim [1],      0,1);
  pval_data = pack_usigned(pval_data, polar_aim [2],      1,1);
  pval_data = pack_usigned(pval_data, sticky_aim [1],      2,1);
  pval_data = pack_usigned(pval_data, sticky_aim [2],      3,1);
  pval_data = pack_usigned(pval_data, cancel_slide[0],      4,1);
  pval_data = pack_usigned(pval_data, cancel_slide[1],      5,1);
  pval_data = pack_usigned(pval_data, cancel_slide[2],      6,1);
  pval_data = pack_usigned(pval_data, tbag_on[0],       7,1);
  pval_data = pack_usigned(pval_data, tbag_on[1],       8,1);
  pval_data = pack_usigned(pval_data, tbag_on[2],       9,1);
  pval_data = pack_usigned(pval_data, toggle_jumpshot[0],  10,1);
  pval_data = pack_usigned(pval_data, toggle_jumpshot[1],  11,1);
  pval_data = pack_usigned(pval_data, toggle_jumpshot[2],  12,1);
  
  set_pvar(SPVAR_2,pval_data);

// Profile 1
	// Toggles                                       // Values
	           										set_pvar(SPVAR_4,antirecoil_vertical[0]); 
	        										set_pvar(SPVAR_5,antirecoil_horizontal[0]);
            										set_pvar(SPVAR_6 ,antirecoil_start[0]);         
	               									set_pvar(SPVAR_62, antirecoil_mid[0]);
	     											set_pvar(SPVAR_7 ,antirecoil_end[0]); 
	                                                set_pvar(SPVAR_8 ,antirecoil_time[0]);  
	                                                set_pvar(SPVAR_9 ,antirecoilH_start[0]);
	                                                set_pvar(SPVAR_37 ,antirecoilH_mid[0]);
	                                                set_pvar(SPVAR_10 ,antirecoilH_end[0]);
	                                                set_pvar(SPVAR_11 ,antirecoilH_time[0]);
                                                    set_pvar(SPVAR_12,rate_of_fire[0]);
	                                               
// Profile 2
	// Toggles                                       // Values
	set_pvar(SPVAR_13,RADIUS[1]);         			set_pvar(SPVAR_16,antirecoil_vertical[1]); 
	set_pvar(SPVAR_14,STEPS[1]);        			set_pvar(SPVAR_17,antirecoil_horizontal[1]);
    set_pvar(SPVAR_15,stickyaim_size[1]);         	set_pvar(SPVAR_18 ,antirecoil_start[1]     );
    set_pvar(SPVAR_50,stickyaim_time[1]);			set_pvar(SPVAR_60, antirecoil_mid[1]      );
	       										    set_pvar(SPVAR_19 ,antirecoil_end[1]       );        
	                                                set_pvar(SPVAR_20 ,antirecoil_time[1]      );  
	                                                set_pvar(SPVAR_21 ,antirecoilH_start[1]);
	                                                set_pvar(SPVAR_40 ,antirecoilH_mid[1]);
	                                                set_pvar(SPVAR_22 ,antirecoilH_end[1]);
	                                                set_pvar(SPVAR_23 ,antirecoilH_time[1]);
                                                    set_pvar(SPVAR_24,rate_of_fire[1]);
// Profile 3
	// Toggles                                       // Value
	set_pvar(SPVAR_25,RADIUS[2]);         			set_pvar(SPVAR_28,antirecoil_vertical[2]); 
	set_pvar(SPVAR_26,STEPS[2]);       				set_pvar(SPVAR_29,antirecoil_horizontal[2]);
    set_pvar(SPVAR_27,stickyaim_size[2]);         	set_pvar(SPVAR_30 ,antirecoil_start[2]     );
    set_pvar(SPVAR_59,stickyaim_time[2]);			set_pvar(SPVAR_61, antirecoil_mid[2]      );
	                                                set_pvar(SPVAR_31 ,antirecoil_end[2]       );        
	                                                set_pvar(SPVAR_32,antirecoil_time[2]      );  
	                                                set_pvar(SPVAR_33 ,antirecoilH_start[2]);
	                                                set_pvar(SPVAR_41 ,antirecoilH_mid[2]);
	                                                set_pvar(SPVAR_34 ,antirecoilH_end[2]);
	                                                set_pvar(SPVAR_35 ,antirecoilH_time[2]);
                                                    set_pvar(SPVAR_36,rate_of_fire[2]);

	       
	set_pvar(SPVAR_48,Amp_strafe);              
    set_pvar(SPVAR_39,strafe_on);                  
    set_pvar(SPVAR_43,Buttons);               
	set_pvar(SPVAR_51,RADIUS[0]);  
	set_pvar(SPVAR_52,STEPS[0]);
	set_pvar(SPVAR_42,doppiojump_on);
	set_pvar(SPVAR_53,stickyaim_size[0]);
	set_pvar(SPVAR_54,stickyaim_time[0]);
    set_pvar(SPVAR_44,inverted_on);                  
    set_pvar(SPVAR_45,enemy_ping);                   
    set_pvar(SPVAR_49,Vel_strafe);
    set_pvar(SPVAR_3 ,nomearmi[0] );
	set_pvar(SPVAR_47,nomearmi[1] );
	set_pvar(SPVAR_56,nomearmi[2] );
}
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal   Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	movX  	movY    adsx	adsy
	{ XB1_RT, XB1_LT, XB1_RIGHT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_RB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RIGHT, XB1_A , XB1_LB,  XB1_B, XB1_RS,  XB1_LS ,XB1_X, XB1_Y, XB1_RB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // SALTO DORSALE = 1
	{ XB1_RT, XB1_LT, XB1_RIGHT, XB1_LB, XB1_A,  XB1_RS,  XB1_B, XB1_LS ,XB1_X, XB1_Y, XB1_RB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // LOTTATORE = 2
	{ XB1_RT, XB1_LT, XB1_RIGHT, XB1_A , XB1_LB,  XB1_RS,  XB1_B, XB1_LS ,XB1_X, XB1_Y, XB1_RB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // EVOLUTO = 3
	{ XB1_RT, XB1_LT, XB1_RB   , XB1_LB, XB1_A,  XB1_B, XB1_RS,  XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // GRANATIERE = 4
	{ XB1_RT, XB1_LT, XB1_RIGHT, XB1_B,  XB1_LB,  XB1_RB,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_A, XB1_RX, XB1_RY, XB1_LX, XB1_LY }, // NINJA = 5
	{ XB1_RB, XB1_LB, XB1_RIGHT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_RT, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // DEFAULT inv = 6 
	{ XB1_RB, XB1_LB, XB1_RIGHT, XB1_Y,  XB1_RT, XB1_LT, XB1_B,  XB1_LS ,XB1_X, XB1_RS, XB1_A, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // SPECIAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT, XB1_LX, XB1_LY, XB1_RX, XB1_RY }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT, XB1_LX, XB1_LY, XB1_RX, XB1_RY }}; //BUMPER PING TACTICAL = 19		

function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	movx	 = Layouts[Type][11];
	movy	 = Layouts[Type][12];
	adsx	 = Layouts[Type][13];
	adsy	 = Layouts[Type][14];
	
} 


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
/*
function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(Tactical     , 0 ); 	set_val(Lethal    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
//set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
//set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);  ANDRY85ANDRY85ANDRY85ANDRY85ANDRY85ANDRY85ANDRY85ANDRY85ANDRY85
}   */