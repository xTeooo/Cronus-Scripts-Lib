																																											/*
						Note From SUPREME
					- UP & DOWN to select the value to edit.
					- LEFT & RIGHT to increase or decrease selected value
					- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 					Supreme Aim Lock V1 Features:
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Mod Menu Screen & Optimized Double Sticky
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Save & Load Values Properly Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Strafe, Drop Shot & Rapid Fire
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Chicken Mod, Fast Reload, Bunny Hop, Smart AR & Grenade & Double Sticky
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Polar Aim Assist & Polar Strafe idea
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Optimized Strafe
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Aim Sensitivity Corrections
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Smart Slide Cancel
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Zen Eye Colour Pulsing & Polar
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Recoil Info :
 - If your weapon when firing goes up = decrease Strength.
 - if your weapon when firing goes down = increase Strength.
 - Basic value for Vertical is 60.
 - Strength set to 100 which is 100% will equal to 0 addition to Vertical power.
 - Adjust Horizontal as well. 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   SMART    = Slide Cancel That Uses In-Game Vibrations ( NOT WORKING RIGHT NOW )
   STANDARD = Slide Cancel That Activates When Releasing PRONE Button And SPRINT BUTTON Is Pushed 65%
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   TAP     = Auto Ping Whenever You Double Tap ADS
   ADSFIRE = Auto Ping Whenever You ADS + Fire
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Choose Your Own Quick Toggle's   @ Line 87
	Block In-Game Rumble             @ Line 84 ( In-Game Vibrations Must Be Enabled Still For Some Mods To Work )
	Customize Buttons To Your Layout @ Line 72
	Choose Your Quick Scope Mode     @ Line 69
	Choose Your Rapid Fire Mode		 @ Line 66
	Choose Your Auto Ping Mode       @ Line 63
	Choose Your Slide Cancel Mode    @ Line 60
	Choose If You Want Hair Triggers @ Line 57
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																																							*/

//--Leave Alone
	define SMART = 0, STANDARD = 1, TAP = 2, ADSFIRE = 3, SMART_RAPID = 4, STANDARD_RAPID = 5, AIM_FIRE = 6, DBL_TAP = 7;

//--Hair Triggers ( IF L2/LT OR R2/RT IS HELD MORE THEN 10% IT'LL REGISTER AS 100% IN THE GAME )
	define Hair_Triggers = TRUE;

//--Slide Cancel Mode ( STANDARD or SMART )
	define Slide_Cancel_Mode    = SMART;

//--Auto Ping Mode ( TAP or ADSFIRE )
	define Auto_Ping_Mode = TAP;

//--Rapid Fire Mode ( SMART_RAPID or STANDARD_RAPID
	int Rapid_Fire_Mode = SMART_RAPID;

//--Quick Scope Mode ( AIM_FIRE or DBL_TAP
	int QuickScope_Mode = DBL_TAP;

//--BUTTONS ( Customize To Your Layout )
    define FIRE      = PS4_R2;
    define ADS       = PS4_L2;
    define TACTICAL  = PS4_L1;
    define LETHAL    = PS4_R1;
    define SPRINT    = PS4_L3;
    define MELEE     = PS4_R3;
	define SWAP      = PS4_TRIANGLE;
    define PRONE     = PS4_CIRCLE;
    define JUMP      = PS4_CROSS;
    define RELOAD    = PS4_SQUARE;

//--Set to TRUE if you want to block all controller vibrations ( IN-GAME VIBRATIONS MUST STILL BE ENABLED THOUGH )
	define Rumble_Block = FALSE;

//--Quick Toggle Button Combos
	define QUICK_TOGGLES	 = 		 FALSE; // Make TRUE If You Want The Ability To Turn On Mods Without Entering Menu
	define AA_SPEED_BUTTON   =      PS4_PS;	// ADS + This Button To Change AA Speed
	define RAPID_FIRE_BUTTON =    PS4_LEFT;	// ADS + This Button To Activate Rapid Fire
	define DROP_SHOT_BUTTON  =    PS4_DOWN;	// ADS + This Button To Activate Drop Shot
	define STRAFE_BUTTON     =   PS4_RIGHT;	// ADS + This Button To Activate Strafe
	define PRONE_RISE_BUTTON =      PS4_UP;	// ADS + This Button To Activate Prone Rise
	define MENU_OPEN_BUTTON  = PS4_OPTIONS;	// ADS + This Button To Open Menu

//--DNAM Polar Stuff
	define ACTIVE_WHEN_ADS    = TRUE;  // If TRUE Aim Assist Will Be Enabled When ADS Only
	define ACTIVE_WHEN_FIRING = TRUE;  // If TRUE Aim Assist Will Be Enabled When Firing Only

//--LeGiTDoGz Polar
	int ADS_ASSIST      = TRUE; 	//	<---- ADS Aim Assist <---- TRUE  or  FALSE
	int ADS_PATTERN     = Circle; 	//	<---- Pattern == Circle  or  Tall_Oval  or  Wide_Oval  or  Ellipse

	int ADSFIRE_ASSIST  = TRUE; 	//	<---- ADS + FIRE Aim Assist <---- TRUE  or  FALSE 
	int ADSFIRE_PATTERN = Tall_Oval;//	<---- Pattern == Circle  or  Tall_Oval  or  Wide_Oval  or  Ellipse

	int HIPFIRE_ASSIST  = TRUE; 	//	<---- Hipfire Pattern <---- TRUE  or  FALSE
	int HIPFIRE_PATTERN = Wide_Oval;//	<---- Pattern == Circle  or  Tall_Oval  or  Wide_Oval  or  Ellipse

	int DRIFT_ASSIST    = TRUE; 	//	<---- Drift Aim Assist <----  TRUE  or  FALSE
	int DRIFT_PATTERN   = Ellipse; 	//	<---- Pattern == Circle  or  Tall_Oval  or  Wide_Oval  or  Ellipse

	int ASSIST      = 19;	// <---- AA Polar Value (Circluar Shake)
	int OVAL_BIG    = 15;	// <---- AA Oval Big Value 
	int OVAL_SMALL  = 13;	// <---- AA Oval Small Value 
	
	define UNDER_BOOST =  3;	// <---- AA FIRE Under Boost
	define OVER_BOOST  =  2;	// <---- AA FIRE Over Boost
	define SIDE_BOOST  =  1;	// <---- AA Side Drift Boost

	define AA_SPEED = 10;	// <---- ONLY USE VALUES, 8 , 10 , 20 ANYTHING ELSE WON'T WORK !!

//--Values
	int in_game_menu_sens        =      7;	 // Make This Value Your Exact In-Game Sens
	define rapid_fire_speed      =      1;   // Increasing the number will multiply the time per tap making it slower
	define Invert_Recoil         =      1;   // SUPREME'S INVERTED RECOIL METHOD ( IF INVERTED SET TO  -1  INSTEAD OF  1 )
	define smartrecoil_vertical  =     60;   // VERTICAL RECOIL
    define Strafe_Wait 		     =	  500;	 // How long to before switching left to right
	define Auto_Ping_Press_Value =	   25;   // Rate At Which Ping Is Pressed
	define Time_Blow 			 =    825;   // Every 1000 = 1 Second
	define Wait_Val_1 			 =     21;	 // ADS Sticky Wait Value
	define Wait_Val_2 			 =     21;	 // ADS + FIRE Sticky Wait Value
	define Wait_Val_3 			 =     21;	 // HIPFIRE Sticky Wait Value
																																																																												/*
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY 																																																														*/

int Aim_Val_1; int Aim_Val_2; int Aim_Val_3; int smartrecoil_horizontal; int smartrecoil_str; int DropShotSpeed; int LEGITRADIUS; int LEGITSTEPS; int RADIUS; int STEPS; int LEGITangle; int wait_time_correction; int actual_X, actual_Y, actual_Magnitude, max_Magnitude,time,angle; int Jump_Shot; int Aim_Val, Wait_Val; int Strafe; int ads_grenade_sens, ads_fire_sens, Sens, actual_sens; define STEPSS = 8; define Tall_Oval = 1; define Wide_Oval = 2; define Ellipse = 3; define Circle = 4; int pistol_chosen = FALSE; int ANGLE,DIRECTION,INVERT; int x_Out,y_Out,angle_Out,x_Out9,y_Out9,angle_Out9,angle9,xx9[2],y9[2],angle2,xaa,yaa; int sin_angle, cos_angle; define smartrecoil_base = 100; int smartrecoil_add,smartrecoil_x,smartrecoil_y; int smartrecoil_rumble; int ptime; int trigger_toggle; int INC = 1,DEC,COLOUR[3]; define STEP_INTERVAL = 1; int color = 1; define LEGITRADIUS1 = 100; define LEGITSTEPS1 = 3; int time1; int cos_angle3, sin_angle3; int actual_X1, actual_Y1, actual_Magnitude1, max_Magnitude1; define smartgrenade_throwdelay = 2600; define smartgrenade_safedelay = 3200; int cooktime; int slide_enable = FALSE; int q; int double__tap[30]; int Smart_AR; int LegitCloudzzzPolar; int DNAM_Polar; int LeGiTDoGz_Polar; int Triple_Sticky; int Rapid_Fire_Toggle; int Slide_Cancel; int JumpShot; int ScopeShot; int QuickScope; int Strafe_Toggle; int DropShot; int holdbreath; int AutoPing; int Prone_Rise; int AimSensCorrections; int Chicken_Mode; int Strafe_Jump; int Smart_Grenade; int Polar_Strafe; int Auto_Blow; int c_b; int ss = TRUE; int ZS; int sel = 1; int mod = 2; define NumofMods = 21; int display = TRUE; int KS; const string t_text[] = { "Hold L2 + OPTIONS", "Smart Recoil", "LeGiTz Polar", "DNAM Polar", "LeGiTDoGz Polar", "Triple Sticky", "Rapid Fire", "Slide Cancel", "Jump Shot", "Scope Shot", "Quick Scope", "Strafe", "Dropshot", "Snipers Breath", "Auto Ping", "Prone Rise", "Aim Corrections", "Chicken Mode", "Strafe Jump", "Smart Grenade", "Polar Strafe", "Smart C4", "OFF", "ON", "Width", "Height", "Vertical", "Horizontal", "RPS", "Kill Switch" }; init { if(get_pvar(SPVAR_64, 0, 9999, 0) != 1486) { set_pvar(SPVAR_64, 1486): reset_script_var(); save(); } load_pvar(); COLOUR = 255; combo_run(niko); if(rapid_fire_speed > 1) wait_time_correction = -10; while(q < 30) { double__tap[q] = -1; q++; } } main { if(double_click(PS4_OPTIONS)) { KS = !KS frame = -1; combo_restart(niko); display = TRUE; } if(!KS) { if(ZS == 0) { if(QUICK_TOGGLES) { if(get_val(ADS) && event_press(RAPID_FIRE_BUTTON)) { combo_run (vibrate); combo_restart(BLINK); Rapid_Fire_Toggle = !Rapid_Fire_Toggle; } } if(Rapid_Fire_Toggle) { if(Rapid_Fire_Mode == SMART_RAPID) { if((get_rumble(RUMBLE_A) == 76) || (get_rumble(RUMBLE_A) == 69) && (get_rumble(RUMBLE_B)) == 89) { pistol_chosen = TRUE } if((get_rumble(RUMBLE_A) < 50) && (get_rumble(RUMBLE_B)) < 59) { pistol_chosen = FALSE } if(pistol_chosen) { if(get_val(FIRE)) { combo_run(Rapid_Fire); } } } else if(Rapid_Fire_Mode == STANDARD_RAPID) { if(get_val(FIRE)) combo_run(Rapid_Fire); } } if(LegitCloudzzzPolar) { if(get_val(ADS)) { if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= LEGITRADIUS) { LEGITangle = (LEGITangle + LEGITSTEPS) % 360; set_polar(POLAR_RS, LEGITangle, LEGITRADIUS * random(326,328)); } } } if(QUICK_TOGGLES) { if(get_val(ADS) && event_press(STRAFE_BUTTON)) { combo_run (vibrate); combo_restart(BLIIINK); Strafe_Toggle = !Strafe_Toggle; } } if(Strafe_Toggle) { if(get_val(FIRE))combo_run(Strafe); else combo_stop(Strafe); } if(QUICK_TOGGLES) { if(get_val(ADS) && event_press(DROP_SHOT_BUTTON)) { combo_run (vibrate); combo_restart(BLIINK); DropShot = !DropShot; } } if (DropShot) { if(get_val(FIRE))combo_run(DroppShott); } if(Triple_Sticky) { if(get_val(ADS) && !get_val(FIRE)){ combo_run(sticky_aim); Aim_Val = Aim_Val_1; Wait_Val = Wait_Val_1; } else if(get_val(ADS) && get_val(FIRE)){ combo_run(sticky_aim); Aim_Val = Aim_Val_2; Wait_Val = Wait_Val_2; } else if(!get_val(ADS) && get_val(FIRE)){ combo_run(sticky_aim); Aim_Val = Aim_Val_3; Wait_Val = Wait_Val_3; } else { combo_stop(sticky_aim); } } if(DNAM_Polar) { vm_tctrl(2); if((ACTIVE_WHEN_ADS && get_val(ADS)) || (ACTIVE_WHEN_FIRING && get_val(FIRE))) { actual_X = get_val(PS4_RX); actual_Y = get_val(PS4_RY); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if(!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Array[angle % 360]; cos_angle = Polar_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if(actual_Magnitude <= RADIUS) { sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(PS4_RX, clamp(actual_X + cos_angle, -100, 100)); set_val(PS4_RY, clamp(actual_Y + sin_angle, -100, 100)); } } if(LeGiTDoGz_Polar) { AIMASSIST(); } if(Smart_Grenade) { if(combo_running(Cook_And_Release_Grenade) && (cooktime == smartgrenade_throwdelay) && (main_button_pressed(LETHAL) || double_click(LETHAL))){ combo_stop(Cook_And_Release_Grenade); } if(get_ival(LETHAL) && get_ptime(LETHAL) < 200) { cooktime = smartgrenade_throwdelay; combo_run(Cook_And_Release_Grenade); } if(get_ival(LETHAL) && get_ptime(LETHAL) > 200) { cooktime = smartgrenade_safedelay; combo_run(Cook_And_Release_Grenade); } } if(Polar_Strafe) { if(get_val(FIRE)) { actual_X1 = get_val(PS4_LX); actual_Y1 = get_val(PS4_LY); actual_Magnitude1 = isqrt(pow(actual_X1, 2) + pow(actual_Y1, 2)); max_Magnitude1 = (actual_Magnitude1 < 100); if(!(time1++ % STEP_INTERVAL)) { angle2 += LEGITSTEPS1; } angle2 = angle2 % 360; sin_angle3 = Polar_Array[angle2 % 360]; cos_angle3 = Polar_Array[(angle2 + 270) % 360]; cos_angle3 = (cos_angle3 * LEGITRADIUS1) / 100; sin_angle3 = (sin_angle3 * LEGITRADIUS1) / 100; if(actual_Magnitude1 <= LEGITRADIUS1) { sin_angle3 -= actual_Y1; cos_angle3 -= actual_X1; } else { sin_angle3 = (sin_angle3 * (200 - ((abs(actual_Y1) + actual_Magnitude1) / 10) * 10) / 200) * max_Magnitude1; cos_angle3 = (cos_angle3 * (200 - ((abs(actual_X1) + actual_Magnitude1) / 10) * 10) / 200) * max_Magnitude1; } set_val(PS4_LX, clamp(actual_X1 + cos_angle3, -100, 100)); set_val(PS4_LY, clamp(actual_Y1 + sin_angle3, -100, 100)); } } if(QuickScope) { if(QuickScope_Mode == AIM_FIRE) { if(trigger_toggle == TRUE && get_ival(RELOAD) || trigger_toggle == TRUE && get_ival(LETHAL)) { set_val(RELOAD, 0); set_val(LETHAL, 0); } else if(event_release(RELOAD) || event_release(LETHAL)) { trigger_toggle = FALSE; } if(event_press(ADS)) { trigger_toggle = TRUE; } else if(get_ival(ADS) && get_ptime(ADS) > 140) { set_val(SPRINT, 100); } else if(trigger_toggle == TRUE && event_release(ADS)) { combo_run(QuickScopee); } if(event_press(SPRINT)) { combo_run(Hold_Breath); } } else if(QuickScope_Mode == DBL_TAP) { if(event_release(ADS) && get_ptime(ADS) <= 150) { combo_run(QUICK_SCOPE); } } } if(ScopeShot) { if(get_val(FIRE) && !get_val(ADS)) { set_val(ADS,100); } } if(QUICK_TOGGLES) { if(get_val(ADS) && event_press(PRONE_RISE_BUTTON)) { combo_run (vibrate); combo_restart(BLINK1); Prone_Rise = !Prone_Rise; } } if(Prone_Rise) { if (get_val(FIRE)) combo_run(ProneRise); } if(Strafe_Jump) { Jump_Shot = TRUE; Strafe = TRUE; } else { if(Strafe_Jump == FALSE) Jump_Shot = FALSE; Strafe = FALSE; } if(Jump_Shot) { if(get_val(FIRE)) combo_run(JumpyShot); } if(Strafe) { if(get_val(FIRE)) combo_run(Strafey); else combo_stop(Strafey); } if (Chicken_Mode) { if(get_val(FIRE)) { combo_run(Strafe_Shot); combo_run(Dropping_Shot); } } else { combo_stop(Strafe_Shot); combo_stop(Dropping_Shot); } if(holdbreath) { if(get_val(ADS)) set_val(SPRINT,100); if(get_val(PS4_LY) <-90 && get_val(ADS) && get_ptime(ADS) > 200) combo_stop(CH); if(event_press(ADS)) combo_run(CH); if(get_val(ADS) && get_lval(SPRINT)) set_val(SPRINT,0); } if(Hair_Triggers) { if(get_val(PS4_R2) > 10) set_val(PS4_R2, 100); if(get_val(PS4_L2)> 10) set_val(PS4_L2, 100); } if(Slide_Cancel) { if (Slide_Cancel_Mode == STANDARD) { if((get_val(PS4_LY) < -65) || (get_val(PS4_LY) > 65) || (get_val(PS4_LX) < -65) || (get_val(PS4_LX) > 65)) { if(event_release(PRONE)) combo_run(CANCEL_SLIDE); } } else if (Slide_Cancel_Mode == SMART) { if((get_val(PS4_LY) < -65) || (get_val(PS4_LY) > 65) || (get_val(PS4_LX) < -65) || (get_val(PS4_LX) > 65)) if(get_rumble(RUMBLE_A) == 100) { slide_enable = TRUE; } if(get_rumble(RUMBLE_A) == 0) { slide_enable = FALSE; } if(slide_enable) { if(event_release (PRONE)) { combo_run(CANCEL_SLIDE); } } } } if(AutoPing) { if (Auto_Ping_Mode == TAP) { if(double_click(ADS)) combo_run(AutoPingC); } else if (Auto_Ping_Mode == ADSFIRE) { if(get_val(ADS) && event_press(FIRE)) combo_run(AutoPingC); } } if(AimSensCorrections) { ads_grenade_sens = 100 - (in_game_menu_sens); ads_fire_sens = 96 - (in_game_menu_sens); actual_sens = 100; if(!get_ival(ADS) && !get_ival(FIRE) && !get_ival(LETHAL) && !get_ival (TACTICAL)) { Sens = actual_sens; } else if(get_ival(ADS) && !get_ival(FIRE)) { Sens = ads_grenade_sens; } else if(!get_ival(ADS) && get_ival(FIRE)) { Sens = actual_sens; } else if(get_ival(ADS) && get_ival(FIRE)) { Sens = ads_fire_sens; } else if(get_ival(TACTICAL) || get_ival (LETHAL)) { Sens = ads_grenade_sens; } if(Sens > 100) Sens = 100; sensitivity(PS4_RX, NOT_USE, Sens); sensitivity(PS4_RY, NOT_USE, Sens); } if(Auto_Blow) { if(event_release(LETHAL)) combo_run(BOOM); } if(Smart_AR) { smartrecoil_y = smartrecoil_vertical * Invert_Recoil * -1; smartrecoil_x = smartrecoil_horizontal; smartrecoil_add = (smartrecoil_str - smartrecoil_base) * Invert_Recoil; if(get_val(ADS) && get_val(FIRE) && get_rumble(RumbleToUse())) { smartrecoil_rumble = get_rumble(RumbleToUse()); if (smartrecoil_rumble > 10 && smartrecoil_rumble < 90) { if(abs(get_val(PS4_RY)) < (smartrecoil_rumble + smartrecoil_add + smartrecoil_y) && abs(get_val(PS4_RX)) < (smartrecoil_rumble + smartrecoil_add + smartrecoil_x)) { set_val(PS4_RY, (smartrecoil_rumble + smartrecoil_add + smartrecoil_y)); } } offset(PS4_RX, smartrecoil_x); } } if(JumpShot) { if(get_val(FIRE)) combo_run(JS); } if(Rumble_Block) { block_rumble(); } if(get_ival(ADS) && event_press(MENU_OPEN_BUTTON)) { ZS = 1; combo_stop(RGB); display = TRUE; } combo_run(RGB); } niko_check(); if(ZS == 1) { block_all_inputs(); block_all_outputs(); if(event_press(PS4_CROSS) && (mod == 1))Smart_AR = !Smart_AR if(event_press(PS4_CROSS) && (mod == 2))LegitCloudzzzPolar = !LegitCloudzzzPolar if(event_press(PS4_CROSS) && (mod == 3))DNAM_Polar = !DNAM_Polar if(event_press(PS4_CROSS) && (mod == 4))LeGiTDoGz_Polar = !LeGiTDoGz_Polar if(event_press(PS4_CROSS) && (mod == 5))Triple_Sticky = !Triple_Sticky if(event_press(PS4_CROSS) && (mod == 6))Rapid_Fire_Toggle = !Rapid_Fire_Toggle if(event_press(PS4_CROSS) && (mod == 7))Slide_Cancel = !Slide_Cancel if(event_press(PS4_CROSS) && (mod == 8))JumpShot = !JumpShot if(event_press(PS4_CROSS) && (mod == 9))ScopeShot = !ScopeShot if(event_press(PS4_CROSS) && (mod == 10))QuickScope = !QuickScope if(event_press(PS4_CROSS) && (mod == 11))Strafe_Toggle = !Strafe_Toggle if(event_press(PS4_CROSS) && (mod == 12))DropShot = !DropShot if(event_press(PS4_CROSS) && (mod == 13))holdbreath = !holdbreath if(event_press(PS4_CROSS) && (mod == 14))AutoPing = !AutoPing if(event_press(PS4_CROSS) && (mod == 15))Prone_Rise = !Prone_Rise if(event_press(PS4_CROSS) && (mod == 16))AimSensCorrections = !AimSensCorrections if(event_press(PS4_CROSS) && (mod == 17))Chicken_Mode = !Chicken_Mode if(event_press(PS4_CROSS) && (mod == 18))Strafe_Jump = !Strafe_Jump if(event_press(PS4_CROSS) && (mod == 19))Smart_Grenade = !Smart_Grenade if(event_press(PS4_CROSS) && (mod == 20))Polar_Strafe = !Polar_Strafe if(event_press(PS4_CROSS) && (mod == 21))Auto_Blow = !Auto_Blow if(event_press(PS4_SQUARE) && mod == 16) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 12) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 5) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 4) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 3) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 2) { ZS = 2; display = TRUE; } if(event_press(PS4_SQUARE) && mod == 1) { ZS = 2; display = TRUE; } if(mod == 1) { if(Smart_AR) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 2) { if(LegitCloudzzzPolar) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 3) { if(DNAM_Polar) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 4) { if(LeGiTDoGz_Polar) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 5) { if(Triple_Sticky) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 6) { if(Rapid_Fire_Toggle) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 7) { if(Slide_Cancel) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 8) { if(JumpShot) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 9) { if(ScopeShot) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 10) { if(QuickScope) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 11) { if(Strafe_Toggle) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 12) { if(DropShot) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 13) { if(holdbreath) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 14) { if(AutoPing) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 15) { if(Prone_Rise) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 16) { if(AimSensCorrections) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 17) { if(Chicken_Mode) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 18) { if(Strafe_Jump) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 19) { if(Smart_Grenade) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 20) { if(Polar_Strafe) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(mod == 21) { if(Auto_Blow) { set_rgb(0,255,0) } else { set_rgb(255,0,0) } } if(event_press(PS4_UP)) { mod --; display = TRUE; } if(event_press(PS4_DOWN)) { mod ++; display = TRUE; } if(mod > NumofMods) mod = 1 if(mod < 1) mod = NumofMods if(event_press(PS4_CIRCLE)) { ZS = 0; save(); frame = -1; combo_restart(niko); display = TRUE; } } if(ZS == 2) { block_all_inputs(); block_all_outputs(); if(ptime != 100) ptime += get_rtime(); if(event_press(PS4_CIRCLE) && (mod == 16 || 12 || 5 || 4 || 3 || 2 || 1)) { ZS = 1; display = TRUE; } if(event_press(PS4_UP)) { sel ++ ; display = TRUE; } if(event_press(PS4_DOWN)) { sel -- ; display = TRUE; } if(sel < 0) sel = 0 if(sel > 2) sel = 2 if(mod == 1) { if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smartrecoil_horizontal = smartrecoil_horizontal + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smartrecoil_horizontal = smartrecoil_horizontal - 1; display = TRUE; } if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smartrecoil_str = smartrecoil_str + 1; display = TRUE; } if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smartrecoil_str = smartrecoil_str - 1; display = TRUE; } } if(mod == 2) { if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { LEGITRADIUS = LEGITRADIUS + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { LEGITRADIUS = LEGITRADIUS - 1; display = TRUE; } if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { LEGITSTEPS = LEGITSTEPS + 1; display = TRUE; } if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { LEGITSTEPS = LEGITSTEPS - 1; display = TRUE; } } if(mod == 3) { if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { RADIUS = RADIUS + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { RADIUS = RADIUS - 1; display = TRUE; } if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { STEPS = STEPS + 1; display = TRUE; } if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { STEPS = STEPS - 1; display = TRUE; } } if(mod == 4) { if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { ASSIST = ASSIST + 1; display = TRUE; } if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { ASSIST = ASSIST - 1; display = TRUE; } if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { OVAL_BIG = OVAL_BIG + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { OVAL_BIG = OVAL_BIG - 1; display = TRUE; } if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { OVAL_SMALL = OVAL_SMALL + 1; display = TRUE; } if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { OVAL_SMALL = OVAL_SMALL - 1; display = TRUE; } } if(mod == 5) { if(sel == 2 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { Aim_Val_1 = Aim_Val_1 + 1; display = TRUE; } if(sel == 2 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { Aim_Val_1 = Aim_Val_1 - 1; display = TRUE; } if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { Aim_Val_2 = Aim_Val_2 + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { Aim_Val_2 = Aim_Val_2 - 1; display = TRUE; } if(sel == 0 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { Aim_Val_3 = Aim_Val_3 + 1; display = TRUE; } if(sel == 0 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { Aim_Val_3 = Aim_Val_3 - 1; display = TRUE; } } if(mod == 12) { if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { DropShotSpeed = DropShotSpeed + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { DropShotSpeed = DropShotSpeed - 1; display = TRUE; } } if(mod == 16) { if(sel == 1 && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { in_game_menu_sens = in_game_menu_sens + 1; display = TRUE; } if(sel == 1 && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { in_game_menu_sens = in_game_menu_sens - 1; display = TRUE; } } } } if(ss) { if(ZS == 0) text1() if(ZS == 1) text2() rect_oled(0,0,128,64,0,1); c_b += get_rtime(); ssaver() if(c_b >= 9000) { cls_oled(0); c_b = 0; ss = FALSE; } } if(display) { cls_oled(0); c_b = 0; if(!KS){ if(ZS == 0) { printf (center_x(get_chars(0), OLED_FONT_SMALL_WIDTH),18,0,1,t_text[0]); } if(ZS == 1) { printf (center_x(get_chars(mod), OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL_HEIGHT),0,1,t_text[mod]); } if(ZS == 2) { printf (center_x(get_chars(mod), OLED_FONT_SMALL_WIDTH),3,0,1,t_text[mod]); if(mod == 16) { number_to_string(clamp(in_game_menu_sens, 0, 20),FindDigits(clamp(in_game_menu_sens, 0, 20))); } if(mod == 12) { number_to_string(clamp(DropShotSpeed, 0, 100),FindDigits(clamp(DropShotSpeed, 0, 100))); } if(mod == 5) { number_to_stringX(clamp(Aim_Val_1, 0, 50),FindDigits(clamp(Aim_Val_1, 0, 50))); number_to_stringY(clamp(Aim_Val_2, 0, 50),FindDigits(clamp(Aim_Val_2, 0, 50))); number_to_stringZ(clamp(Aim_Val_3, 0, 50),FindDigits(clamp(Aim_Val_3, 0, 50))); } if(mod == 4) { number_to_stringX(clamp(ASSIST, 0, 50),FindDigits(clamp(ASSIST, 0, 50))); number_to_stringY(clamp(OVAL_BIG, 0, 50),FindDigits(clamp(OVAL_BIG, 0, 50))); number_to_stringZ(clamp(OVAL_SMALL, 0, 50),FindDigits(clamp(OVAL_SMALL, 0, 50))); } if(mod == 3) { number_to_string(clamp(RADIUS, 0, 60),FindDigits(clamp(RADIUS, 0, 60))); number_to_string1(clamp(STEPS, 0, 60),FindDigits(clamp(STEPS, 0, 60))); } if(mod == 2) { number_to_string(clamp(LEGITRADIUS, 0, 60),FindDigits(clamp(LEGITRADIUS, 0, 60))); number_to_string1(clamp(LEGITSTEPS, 0, 60),FindDigits(clamp(LEGITSTEPS, 0, 60))); } if(mod == 1) { number_to_string(clamp(smartrecoil_horizontal, -100, 100),FindDigits(clamp(smartrecoil_horizontal, -100, 100))); number_to_string1(clamp(smartrecoil_str, -200, 200),FindDigits(clamp(smartrecoil_str, -200, 200))); } if(sel == 2)line_oled(30,20,40,20,3,1) if(sel == 1)line_oled(30,33,40,33,3,1) if(sel == 0)line_oled(30,46,40,46,3,1) } } else { rect_oled(0,0,128,64,0,1); printf (center_x(get_chars(29), OLED_FONT_SMALL_WIDTH),34,0,1,t_text[29]); } rect_oled(0,0,128,64,0,1); ss = TRUE; display = FALSE; } } combo RGB { wait(10); set_rgb(COLOUR, COLOUR[1], COLOUR[2]); COLOUR[DEC] -= 1; COLOUR[INC] += 1; if (!COLOUR[DEC]) { INC = (INC + 1) % 3; DEC = (DEC + 1) % 3; } } combo Cook_And_Release_Grenade() { if (cooktime == smartgrenade_throwdelay) set_val(LETHAL, 100); wait(cooktime); set_val(LETHAL, 0); wait(100); } combo AutoPingC { set_val (PS4_LEFT,100); wait(Auto_Ping_Press_Value); set_val(PS4_LEFT,0); wait(Auto_Ping_Press_Value); set_val(PS4_LEFT,100); wait(Auto_Ping_Press_Value); set_val(PS4_LEFT,0); wait(Auto_Ping_Press_Value); } combo sticky_aim{ set_val(PS4_RY,xy_val(PS4_RY, Aim_Val)); wait(Wait_Val); set_val(PS4_RX,xy_val(PS4_RX, Aim_Val)); set_val(PS4_LX,xy_val(PS4_LX, 15 * -1)); wait(Wait_Val); set_val(PS4_RY,xy_val(PS4_RY, Aim_Val * -1)); wait(Wait_Val); set_val(PS4_RX,xy_val(PS4_RX, Aim_Val * -1)); set_val(PS4_LX,xy_val(PS4_LX, 15 * -1)); wait(Wait_Val); } combo Rapid_Fire { set_val(FIRE, 100); wait(20 * rapid_fire_speed); set_val(FIRE, 0); wait(10 * rapid_fire_speed - wait_time_correction); set_val(FIRE, 0); } combo BOOM { wait(Time_Blow); set_val(RELOAD, 100); wait(60); set_val(RELOAD, 0); wait(60); set_val(RELOAD, 100); wait(60); set_val(RELOAD, 0) } combo vibrate { set_rumble(RUMBLE_A, 85); wait(225); reset_rumble(); } combo BLINK1 { if(Prone_Rise) set_rgb (0,255,0); else set_rgb (255,0,0); wait(2000); set_rgb (0,0,0); } combo ProneRise { set_val(PRONE, 100); wait(560); set_val(PRONE, 0); wait(150); set_val(JUMP, 100); wait(560); set_val(JUMP, 0); wait(150); } combo BLINK { if(Rapid_Fire_Toggle) set_rgb (0,255,0); else set_rgb (255,0,0); wait(2000); set_rgb (0,0,0); } combo Strafe { set_val(PS4_LX, xy_val (PS4_LX, 100)); wait(Strafe_Wait); wait(50); set_val(PS4_LX, xy_val (PS4_LX, 100 * -1)); wait(Strafe_Wait); wait(50); } combo BLIINK { if(DropShot) set_rgb (0,255,0); else set_rgb (255,0,0); wait(2000); set_rgb (0,0,0); } combo Strafe_Shot { set_val(PS4_LX, 100); wait(300); wait(10); set_val(PS4_LX, -100); wait(300); wait(10); } combo Dropping_Shot { set_val(PRONE,100); wait(random(30,100)); wait(random(60,250)); set_val(PRONE,100); } combo BOOST { offset2(PS4_RX,ASSIST + SIDE_BOOST); wait(30); offset2(PS4_RX,(ASSIST + SIDE_BOOST) * -1); wait(30); } combo UNDER { offset2(PS4_RX,ASSIST + UNDER_BOOST); wait(30); offset2(PS4_RY,ASSIST + UNDER_BOOST + 1); wait(30); offset2(PS4_RX,(ASSIST + UNDER_BOOST) * -1); wait(30); offset2(PS4_RY,(ASSIST + UNDER_BOOST + 1) * -1); wait(30); } combo OVER { offset2(PS4_RX,ASSIST + OVER_BOOST); wait(40); offset2(PS4_RY,ASSIST + OVER_BOOST + 1); wait(40); offset2(PS4_RX,(ASSIST + OVER_BOOST) * -1); wait(40); offset2(PS4_RY,(ASSIST + OVER_BOOST + 1) * -1); wait(40); } combo JumpyShot { set_val(JUMP, 100); wait(100); set_val(JUMP, 0); wait(100); } combo Strafey { set_val(PS4_LX, 100); wait(610); set_val(PS4_LX, -100); wait(610); } combo QuickScopee { set_val(ADS, 100); set_val(SPRINT, 100); set_val(FIRE, 100); wait(50); set_val(ADS, 100); wait(50); } combo QUICK_SCOPE { set_val(FIRE,0); set_val(SPRINT,100); set_val(ADS,100); wait(420); set_val(SPRINT,100); set_val(ADS,100); set_val(FIRE, 100); wait(50); } combo Hold_Breath { set_val(SPRINT, 0); wait(80); set_val(SPRINT, 100); wait(100); set_val(SPRINT, 0); wait(80); } combo BLIIINK { if(Strafe_Toggle) set_rgb (0,255,0); else set_rgb (255,0,0); wait(2000); set_rgb (0,0,0); } combo CH { set_val(SPRINT,0); wait(60); set_val(SPRINT,100); wait(110); set_val(SPRINT,0); wait(110); } combo DroppShott { set_val(PRONE,100); wait(40); wait(DropShotSpeed); set_val(PRONE,100); } combo CANCEL_SLIDE { wait(26); set_val(PRONE, 100); wait(26); set_val(PRONE, 100); wait(20); set_val(PRONE, 0); wait(100); } combo JS { set_val(JUMP,100); wait(100); set_val(JUMP,0); wait(100); } combo niko{ wait(20); image_oled(0, 10, color, FALSE, frames[frame]); frame ++; } int frame; function niko_check() { if(!combo_running(niko) && frame <= 15) combo_restart(niko); } function save() { set_pvar(SPVAR_1, Smart_AR); set_pvar(SPVAR_2, LegitCloudzzzPolar); set_pvar(SPVAR_3, DNAM_Polar); set_pvar(SPVAR_4, LeGiTDoGz_Polar); set_pvar(SPVAR_5, Triple_Sticky); set_pvar(SPVAR_6, Rapid_Fire_Toggle); set_pvar(SPVAR_7, Slide_Cancel); set_pvar(SPVAR_8, JumpShot); set_pvar(SPVAR_9, ScopeShot); set_pvar(SPVAR_10, QuickScope); set_pvar(SPVAR_11, Strafe_Toggle); set_pvar(SPVAR_12, DropShot); set_pvar(SPVAR_13, holdbreath); set_pvar(SPVAR_14, AutoPing); set_pvar(SPVAR_15, Prone_Rise); set_pvar(SPVAR_16, AimSensCorrections); set_pvar(SPVAR_17, Chicken_Mode); set_pvar(SPVAR_18, Strafe_Jump); set_pvar(SPVAR_19, Smart_Grenade); set_pvar(SPVAR_20, Polar_Strafe); set_pvar(SPVAR_21, Auto_Blow); set_pvar(SPVAR_22, LEGITRADIUS); set_pvar(SPVAR_23, LEGITSTEPS); set_pvar(SPVAR_24, RADIUS); set_pvar(SPVAR_25, STEPS); set_pvar(SPVAR_26, ASSIST); set_pvar(SPVAR_27, OVAL_BIG); set_pvar(SPVAR_28, OVAL_SMALL); set_pvar(SPVAR_29, smartrecoil_horizontal); set_pvar(SPVAR_30, smartrecoil_str); set_pvar(SPVAR_31, DropShotSpeed); set_pvar(SPVAR_32, Aim_Val_1); set_pvar(SPVAR_33, Aim_Val_2); set_pvar(SPVAR_34, Aim_Val_3); set_pvar(SPVAR_35, in_game_menu_sens); } function load_pvar() { Smart_AR = get_pvar(SPVAR_1, 0, 1, 0); LegitCloudzzzPolar = get_pvar(SPVAR_2, 0, 1, 0); DNAM_Polar = get_pvar(SPVAR_3, 0, 1, 0); LeGiTDoGz_Polar = get_pvar(SPVAR_4, 0, 1, 0); Triple_Sticky = get_pvar(SPVAR_5, 0, 1, 0); Rapid_Fire_Toggle = get_pvar(SPVAR_6, 0, 1, 0); Slide_Cancel = get_pvar(SPVAR_7, 0, 1, 0); JumpShot = get_pvar(SPVAR_8, 0, 1, 0); ScopeShot = get_pvar(SPVAR_9, 0, 1, 0); QuickScope = get_pvar(SPVAR_10, 0, 1, 0); Strafe_Toggle = get_pvar(SPVAR_11, 0, 1, 0); DropShot = get_pvar(SPVAR_12, 0, 1, 0); holdbreath = get_pvar(SPVAR_13, 0, 1, 0); AutoPing = get_pvar(SPVAR_14, 0, 1, 0); Prone_Rise = get_pvar(SPVAR_15, 0, 1, 0); AimSensCorrections = get_pvar(SPVAR_16, 0, 1, 0); Chicken_Mode = get_pvar(SPVAR_17, 0, 1, 0); Strafe_Jump = get_pvar(SPVAR_18, 0, 1, 0); Smart_Grenade = get_pvar(SPVAR_19, 0, 1, 0); Polar_Strafe = get_pvar(SPVAR_20, 0, 1, 0); Auto_Blow = get_pvar(SPVAR_21, 0, 1, 0); LEGITRADIUS = get_pvar(SPVAR_22, 0, 0, 21); LEGITSTEPS = get_pvar(SPVAR_23, 0, 0, 20); RADIUS = get_pvar(SPVAR_24, 0, 0, 21); STEPS = get_pvar(SPVAR_25, 0, 0, 20); ASSIST = get_pvar(SPVAR_26, 0, 50, 19); OVAL_BIG = get_pvar(SPVAR_27, 0, 50, 14); OVAL_SMALL = get_pvar(SPVAR_28, 0, 50, 12); smartrecoil_horizontal = get_pvar(SPVAR_29, -100, 100, 0); smartrecoil_str = get_pvar(SPVAR_30, -200, 200, 110); DropShotSpeed = get_pvar(SPVAR_31, 0, 100, 30); Aim_Val_1 = get_pvar(SPVAR_32, 0, 50, 22); Aim_Val_2 = get_pvar(SPVAR_33, 0, 50, 27); Aim_Val_3 = get_pvar(SPVAR_34, 0, 50, 20); in_game_menu_sens = get_pvar(SPVAR_35, 0, 20, 7); } function reset_script_var() { Smart_AR = 0; LegitCloudzzzPolar = 0; DNAM_Polar = 0; LeGiTDoGz_Polar = 0; Triple_Sticky = 0; Rapid_Fire_Toggle = 0; Slide_Cancel = 0; JumpShot = 0; ScopeShot = 0; QuickScope = 0; Strafe_Toggle = 0; DropShot = 0; holdbreath = 0; AutoPing = 0; Prone_Rise = 0; AimSensCorrections = 0; Chicken_Mode = 0; Strafe_Jump = 0; Smart_Grenade = 0; Polar_Strafe = 0; LEGITRADIUS = 21; LEGITSTEPS = 20; RADIUS = 21; STEPS = 20; ASSIST = 19; OVAL_BIG = 14; OVAL_SMALL = 12; smartrecoil_horizontal = 0; smartrecoil_str = 110; DropShotSpeed = 30; Aim_Val_1 = 22; Aim_Val_2 = 27; Aim_Val_3 = 20; in_game_menu_sens = 7; } function block_all_outputs() { set_val(PS4_UP , 0 ); set_val(PS4_DOWN , 0 ); set_val(PS4_LEFT , 0 ); set_val(PS4_RIGHT , 0); set_val(PS4_CROSS , 0 ); set_val(PS4_CIRCLE, 0 ); set_val(PS4_SQUARE, 0 ); } function xy_val(f_axis,f_val) { if(abs(get_val(f_axis)) < (13 + 1)) return f_val; return get_val(f_axis); } function main_button_pressed(except) { if(except != -1 && event_press(except)) return FALSE; if (event_press(LETHAL)) return TRUE; return FALSE; } function RumbleToUse() { if (get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) == 100) { return RUMBLE_B; } if (get_rumble(RUMBLE_B) == 100) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) { return RUMBLE_A; } if (get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) { return RUMBLE_B; } return 0; } function offset(axis, offset_val) { set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100)); } function double_click(button) { if (double__tap[button] >= 0) { double__tap[button] += get_rtime(); if (double__tap[button] > 450) double__tap[button] = -1; } if (event_release(button) && get_ptime(button) <= 200) { if (double__tap[button] < 0) { double__tap[button] = 0; } else { double__tap[button] = -1; return 1; } } return 0; } const uint8 ASCII_NUM[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }; int i; int c,c_val; function AIMASSIST() { angle9 = (angle9 + AA_SPEED + DIRECTION) % 360; if ((get_ival(PS4_RX) > ASSIST) && !INVERT) { INVERT = TRUE; } if ((get_ival(PS4_RX) < -ASSIST) && INVERT) { INVERT = FALSE; } if (INVERT) { DIRECTION = 344; } if (!INVERT) { DIRECTION = 0; } if (ADS_ASSIST) { if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= ASSIST) { if (get_val(ADS) && !get_val(FIRE)) { if (ADS_PATTERN == 1) { TALL(); } if (ADS_PATTERN == 2) { WIDE(); } if (ADS_PATTERN == 3) { set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL); } if (ADS_PATTERN == 4) { Shake(); } } } } if (DRIFT_ASSIST){ if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= ASSIST) { if (get_val(ADS) && !get_val(FIRE)) { if (DRIFT_PATTERN == 1) { TALL_OVAL(); } if (DRIFT_PATTERN == 2) { WIDE_OVAL(); } if (DRIFT_PATTERN == 3) { set_ellipse(POLAR_RS,angle9,OVAL_BIG,OVAL_SMALL); } if (DRIFT_PATTERN == 4){ combo_run(BOOST); } } } if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= ASSIST) { if (get_val(ADS) && !get_val(FIRE)) { if (DRIFT_PATTERN == 1) { TALL_OVAL(); } if (DRIFT_PATTERN == 2) { WIDE_OVAL(); } if (DRIFT_PATTERN == 3) { set_ellipse(POLAR_RS,angle9,OVAL_BIG,OVAL_SMALL); } if (DRIFT_PATTERN == 4){ combo_run(BOOST); } } } } if (ADSFIRE_ASSIST) { if ((get_ival(ADS) && (get_val(FIRE)))) { if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= ASSIST) { if (ADSFIRE_PATTERN == 1) { TALL(); } if (ADSFIRE_PATTERN == 2) { WIDE(); } if (ADSFIRE_PATTERN == 3) { set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL); } if (ADSFIRE_PATTERN == 4) { combo_run(UNDER); } } if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) > ASSIST) { if (ADSFIRE_PATTERN == 1) { TALL_OVAL(); } if (ADSFIRE_PATTERN == 2) { WIDE_OVAL(); } if (ADSFIRE_PATTERN == 3) { set_ellipse(POLAR_RS, angle9, OVAL_BIG,OVAL_SMALL); } if (ADSFIRE_PATTERN == 4) { combo_run(OVER); } } } } if (HIPFIRE_ASSIST) { if ((!get_ival(ADS) && (get_val(FIRE)))) { if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= ASSIST) { if (HIPFIRE_PATTERN == 1) { TALL(); } if (HIPFIRE_PATTERN == 2){ WIDE(); } if (HIPFIRE_PATTERN == 3) { set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL); } if (HIPFIRE_PATTERN == 4) { combo_run(UNDER); } } if (isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) > ASSIST) { if (HIPFIRE_PATTERN == 1) { TALL_OVAL(); } if (HIPFIRE_PATTERN == 2) { WIDE_OVAL(); } if (HIPFIRE_PATTERN == 3) { set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL); } if (HIPFIRE_PATTERN == 4) { combo_run(OVER); } } } } } function TALL() { angle2 = (angle2 + AA_SPEED + DIRECTION) % 360; set_polar(POLAR_RS,angle2,OVAL_SMALL * 327); xaa = get_val(POLAR_RX); set_polar(POLAR_RS,angle2,OVAL_BIG * 327); yaa = get_val(POLAR_RY); set_val(POLAR_RX, get_ival(POLAR_RX)); set_val(POLAR_RY, get_ival(POLAR_RY)); set_val(POLAR_RY, yaa); set_val(POLAR_RX, xaa); } function WIDE() { angle2 = (angle2 + AA_SPEED + DIRECTION) % 360; set_polar(POLAR_RS,angle2,OVAL_BIG * 327); xaa = get_val(POLAR_RX); set_polar(POLAR_RS,angle2,OVAL_SMALL * 327); yaa = get_val(POLAR_RY); set_val(POLAR_RX,get_ival(POLAR_RX)); set_val(POLAR_RY,get_ival(POLAR_RY)); set_val(POLAR_RY, yaa); set_val(POLAR_RX, xaa); } function TALL_OVAL() { ANGLE = (ANGLE + STEPSS + DIRECTION) % 360; f_set_polar(2,ANGLE, OVAL_SMALL); xaa = get_val(PS4_RX); f_set_polar(2, ANGLE, OVAL_BIG); yaa = get_val(PS4_RY); set_val(PS4_RX, get_ival(PS4_RX)); set_val(PS4_RY, get_ival(PS4_RY)); set_val(PS4_RY, yaa); set_val(PS4_RX, xaa); } function WIDE_OVAL() { ANGLE = (ANGLE + STEPSS + DIRECTION) % 360; f_set_polar(2,ANGLE, OVAL_BIG); xaa = get_val(PS4_RX); f_set_polar(2, ANGLE, OVAL_SMALL); yaa = get_val(PS4_RY); set_val(PS4_RX, get_ival(PS4_RX)); set_val(PS4_RY, get_ival(PS4_RY)); set_val(PS4_RY, yaa); set_val(PS4_RX, xaa); } function Shake() { angle2 = (angle2 + AA_SPEED + DIRECTION) % 360; set_polar(POLAR_RS,angle2, ASSIST * 327); xaa = get_val(POLAR_RX); yaa = get_val(POLAR_RY); set_val(POLAR_RX, get_ival(POLAR_RX)); set_val(POLAR_RY, get_ival(POLAR_RY)); set_val(POLAR_RX, xaa); set_val(POLAR_RY, yaa); } function set_ellipse(stick,angle9,width,height) { Set_polar(stick, angle9, width); xx9[stick/4] = get_val(stick + 7); Set_polar(stick, angle9, height); y9[stick/4] = get_val(stick + 8); set_val(stick + 7,offset3(stick + 7, xx9[stick/4])); set_val(stick + 8,offset3(stick + 8, y9[stick/4])); } function Set_polar(stick,angle9,radius) { set_val(7 + stick, (cos(angle9) * radius) / 100); set_val(8 + stick, (sin(angle9) * radius) / 100); return; } function f_set_polar(stick, angle, radius) { offset2(7 + stick, f_clamp((f_cos(angle) * radius) / 100,-100, 100)); offset2(8 + stick, f_clamp((f_sin(angle) * radius) / 100,-100, 100)); return; } function cos (angle9) { if (angle9 < 0) angle9 = (angle9 % 360) + 360; angle9 = (angle9 % 360); x_Out9 = 100; y_Out9 = 100; angle_Out9 = angle9 % 45; if (angle9 < 45) { y_Out9 = (100 * angle_Out9) / 45; } else if (angle9 < 90) { x_Out9 = (100 * (45 - angle_Out9)) / 45; } else if (angle9 < 135) { x_Out9 = (-100 * angle_Out9) / 45; } else if (angle9 < 180) { y_Out9 = (100 * (45 - angle_Out9)) / 45; x_Out9 = -100; } else if (angle9 < 225) { y_Out9 = (100 * angle_Out9) / 45; x_Out9 = -100; } else if (angle9 < 270) { x_Out9 = (-100 * (45 - angle_Out9)) / 45; y_Out9 = -100; } else if (angle9 < 315) { x_Out9 = (100 * angle_Out9) / 45; y_Out9 = -100; } else { y_Out9 = ( 100 * (45 - angle_Out9)) / 45; } angle_Out9 = abs(y_Out9); if (abs(x_Out9) > angle_Out9) angle_Out9 = abs(x_Out9); return (x_Out9 * angle_Out9 / isqrt((pow(x_Out9, 2) + pow(y_Out9,2)))); } function f_cos(angle) { if (angle < 0) angle = (angle % 360) + 360; angle = (angle % 360); x_Out = 100; y_Out = 100; angle_Out = angle % 45; if (angle < 45) { y_Out = (100 * angle_Out) / 45; } else if (angle < 90) { x_Out = (100 * (45 - angle_Out)) / 45; } else if (angle < 135) { x_Out = (-100 * angle_Out) / 45; } else if (angle < 180) { y_Out = (100 * (45 - angle_Out)) / 45; x_Out = -100; } else if (angle < 225) { y_Out = (100 * angle_Out) / 45; x_Out = -100; } else if (angle < 270) { x_Out = (-100 * (45 - angle_Out)) / 45; y_Out = -100; } else if (angle < 315) { x_Out = (100 * angle_Out) / 45; y_Out = -100; } else { y_Out = ( 100 * (45 - angle_Out)) / 45; } angle_Out = abs(y_Out); if (abs(x_Out) > angle_Out) angle_Out = abs(x_Out); return (x_Out * angle_Out / isqrt((pow(x_Out, 2) + pow(y_Out, 2)))); } function offset2(axis,offset_val) { set_val(axis,clamp13(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100)); return; } function offset3(axis, offset_val) { return clamp13(offset_val * (100 - abs(get_ival(axis))) / 100 + get_ival(axis),-100,100); } function f_clamp(v, lo, hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function clamp13(v, lo, hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function f_sin(angle) { return (f_cos(angle - 90)); } function sin (angle9) { return (cos(angle9 - 90)); } function number_to_string(f_val,f_digits) { i = 1; c_val = 10000; if(f_val < 0) { putc_oled(i,45); i += 1; f_val = abs(f_val); } for(c = 5; c >= 1; c--) { if(f_digits >= c) { putc_oled(i,ASCII_NUM[f_val / c_val]); f_val = f_val % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); } function number_to_string1(f_val1,f_digits1) { i = 1; c_val = 10000; if(f_val1 < 0) { putc_oled(i,45); i += 1; f_val1 = abs(f_val1); } for(c = 5; c >= 1; c--) { if(f_digits1 >= c) { putc_oled(i,ASCII_NUM[f_val1 / c_val]); f_val1 = f_val1 % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),40,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); } function number_to_stringX(f_val,f_digits) { i = 1; c_val = 10000; if(f_val < 0) { putc_oled(i,45); i += 1; f_val = abs(f_val); } for(c = 5; c >= 1; c--) { if(f_digits >= c) { putc_oled(i,ASCII_NUM[f_val / c_val]); f_val = f_val % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,i - 1,OLED_WHITE); } function number_to_stringY(f_val1,f_digits1) { i = 1; c_val = 10000; if(f_val1 < 0) { putc_oled(i,45); i += 1; f_val1 = abs(f_val1); } for(c = 5; c >= 1; c--) { if(f_digits1 >= c) { putc_oled(i,ASCII_NUM[f_val1 / c_val]); f_val1 = f_val1 % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),33,OLED_FONT_SMALL,i - 1,OLED_WHITE); } function number_to_stringZ(f_val1,f_digits1) { i = 1; c_val = 10000; if(f_val1 < 0) { putc_oled(i,45); i += 1; f_val1 = abs(f_val1); } for(c = 5; c >= 1; c--) { if(f_digits1 >= c) { putc_oled(i,ASCII_NUM[f_val1 / c_val]); f_val1 = f_val1 % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),46,OLED_FONT_SMALL,i - 1,OLED_WHITE); } function FindDigits( f_number) { f_number = abs(f_number); if (f_number / 10000 > 0) return 5; if (f_number / 1000 > 0) return 4; if (f_number / 100 > 0) return 3; if (f_number / 10 > 0) return 2; return 1; } const int8 Polar_Array[] = { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; const image frames[] = { {23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 0x80, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 0x80, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 0x80, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x80, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 0x80, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xA0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x80, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x80, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x80, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0x80, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 0x80, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 0x80, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 0x80, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 0x80}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 0x80, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 0x80, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x80, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 0x80}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 0x80, 0x3C, 0xE3, 0x80, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 0x80, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00} } define yy = 2; int x1 = 60, x2 = 68, x3 = 76, x4 = 84, x5 = 92, x6 = 100, x7 = 108, x8 = 116, x9 = 124, x10 = 132, x11 = 140, x12 = 148, x13 = 156, x14 = 164, x15 = 172, x16 = 180, x17 = 188, x18 = 196, x19 = 204, x20 = 212, x21 = 220, x22 = 228, x23 = 236, x24 = 244, x25 = 252, x26 = 260, x27 = 268, x28 = 276; function text1() { putc_oled(1,ASCII_UPPER_C); puts_oled(x1,yy,0,1,1); putc_oled(1,ASCII_UPPER_O); puts_oled(x2,yy,0,1,1); putc_oled(1,ASCII_UPPER_L); puts_oled(x3,yy,0,1,1); putc_oled(1,ASCII_UPPER_D); puts_oled(x4,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x5,yy,0,1,1); putc_oled(1,ASCII_UPPER_W); puts_oled(x6,yy,0,1,1); putc_oled(1,ASCII_UPPER_A); puts_oled(x7,yy,0,1,1); putc_oled(1,ASCII_UPPER_R); puts_oled(x8,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x9,yy,0,1,1); putc_oled(1,ASCII_UPPER_B); puts_oled(x10,yy,0,1,1); putc_oled(1,ASCII_UPPER_Y); puts_oled(x11,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x12,yy,0,1,1); putc_oled(1,ASCII_UPPER_S); puts_oled(x13,yy,0,1,1); putc_oled(1,ASCII_UPPER_S); puts_oled(x14,yy,0,1,1); putc_oled(1,ASCII_UNDERSCORE); puts_oled(x15,yy,0,1,1); putc_oled(1,ASCII_UPPER_N); puts_oled(x16,yy,0,1,1); putc_oled(1,ASCII_LOWER_I); puts_oled(x17,yy,0,1,1); putc_oled(1,ASCII_LOWER_K); puts_oled(x18,yy,0,1,1); putc_oled(1,ASCII_LOWER_O); puts_oled(x19,yy,0,1,1); putc_oled(1,ASCII_LOWER_L); puts_oled(x20,yy,0,1,1); putc_oled(1,ASCII_LOWER_A); puts_oled(x21,yy,0,1,1); putc_oled(1,ASCII_LOWER_I); puts_oled(x22,yy,0,1,1); fall(); } function text2() { putc_oled(1,ASCII_UPPER_P); puts_oled(x1,yy,0,1,1); putc_oled(1,ASCII_UPPER_R); puts_oled(x2,yy,0,1,1); putc_oled(1,ASCII_UPPER_E); puts_oled(x3,yy,0,1,1); putc_oled(1,ASCII_UPPER_S); puts_oled(x4,yy,0,1,1); putc_oled(1,ASCII_UPPER_S); puts_oled(x5,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x6,yy,0,1,1); putc_oled(1,ASCII_UPPER_X); puts_oled(x7,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x8,yy,0,1,1); putc_oled(1,ASCII_UPPER_T); puts_oled(x9,yy,0,1,1); putc_oled(1,ASCII_UPPER_O); puts_oled(x10,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x11,yy,0,1,1); putc_oled(1,ASCII_UPPER_T); puts_oled(x12,yy,0,1,1); putc_oled(1,ASCII_UPPER_O); puts_oled(x13,yy,0,1,1); putc_oled(1,ASCII_UPPER_G); puts_oled(x14,yy,0,1,1); putc_oled(1,ASCII_UPPER_G); puts_oled(x15,yy,0,1,1); putc_oled(1,ASCII_UPPER_L); puts_oled(x16,yy,0,1,1); putc_oled(1,ASCII_UPPER_E); puts_oled(x17,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x18,yy,0,1,1); putc_oled(1,ASCII_UPPER_T); puts_oled(x20,yy,0,1,1); putc_oled(1,ASCII_UPPER_O); puts_oled(x21,yy,0,1,1); putc_oled(1,ASCII_SPACE); puts_oled(x22,yy,0,1,1); putc_oled(1,ASCII_UPPER_E); puts_oled(x23,yy,0,1,1); putc_oled(1,ASCII_UPPER_D); puts_oled(x24,yy,0,1,1); putc_oled(1,ASCII_UPPER_I); puts_oled(x25,yy,0,1,1); putc_oled(1,ASCII_UPPER_T); puts_oled(x26,yy,0,1,1); rect_oled(x19 - 4,yy,9,9,0,1) rect_oled(x19 - 3,yy + 1,7,7,0,0) rect_oled(x19 + 5,yy,1,9,1,0) fall(); } function fall() { x1--;x2--;x3--;x4--;x5--;x6--;x7--;x8--;x9--;x10--; x11--;x12--;x13--;x14--;x15--;x16--;x17--;x18--;x19--;x20--; x21--;x22--;x23--;x24--;x25--;x26--;x27--;x28--; } function center_x(f_chars,f_font) { return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); } function center_y(f_size) { return (OLED_HEIGHT / 2) - (f_size / 2); } function get_chars(x) { if (t_text[x + 1] != -1) return t_text[x + 1] - t_text[x] - 1; return sizeof(t_text) - t_text[x]; } function ssaver() { line_oled(0,13,127,13,1,1) rect_oled(0,0,15,14,1,0) rect_oled(0,0,15,14,0,1) if(c_b < 1000) { putc_oled(1,ASCII_DIGIT9); puts_oled(4,3,0,1,1); } if(c_b > 1000) { putc_oled(1,ASCII_DIGIT8); puts_oled(4,3,0,1,1); } if(c_b > 2000) { putc_oled(1,ASCII_DIGIT7); puts_oled(4,3,0,1,1); } if(c_b > 3000) { putc_oled(1,ASCII_DIGIT6); puts_oled(4,3,0,1,1); } if(c_b > 4000) { putc_oled(1,ASCII_DIGIT5); puts_oled(4,3,0,1,1); } if(c_b > 5000) { putc_oled(1,ASCII_DIGIT4); puts_oled(4,3,0,1,1); } if(c_b > 6000) { putc_oled(1,ASCII_DIGIT3); puts_oled(4,3,0,1,1); } if(c_b > 7000) { putc_oled(1,ASCII_DIGIT2); puts_oled(4,3,0,1,1); } if(c_b >= 8000) { putc_oled(1,ASCII_DIGIT1); puts_oled(4,3,0,1,1); } }