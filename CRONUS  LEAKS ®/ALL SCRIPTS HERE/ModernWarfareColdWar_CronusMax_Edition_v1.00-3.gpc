/*
   _____               .___                          __      __                   _____                              /\ _________          .__       .___  __      __                 
  /     \    ____    __| _/  ____  _______   ____   /  \    /  \_____   _______ _/ ____\_____   _______   ____      / / \_   ___ \   ____  |  |    __| _/ /  \    /  \_____   _______ 
 /  \ /  \  /  _ \  / __ | _/ __ \ \_  __ \ /    \  \   \/\/   /\__  \  \_  __ \\   __\ \__  \  \_  __ \_/ __ \    / /  /    \  \/  /  _ \ |  |   / __ |  \   \/\/   /\__  \  \_  __ \
/    Y    \(  <_> )/ /_/ | \  ___/  |  | \/|   |  \  \        /  / __ \_ |  | \/ |  |    / __ \_ |  | \/\  ___/   / /   \     \____(  <_> )|  |__/ /_/ |   \        /  / __ \_ |  | \/
\____|__  / \____/ \____ |  \___  > |__|   |___|  /   \__/\  /  (____  / |__|    |__|   (____  / |__|    \___  > / /     \______  / \____/ |____/\____ |    \__/\  /  (____  / |__|   
        \/              \/      \/              \/         \/        \/                      \/              \/  \/             \/                    \/         \/        \/         
 ___________                __                        ___         __   _____   __   ________   ____ 
\__    ___/_____    ___.__.|  |    ____  _______   __| _/_______ |__|_/ ____\_/  |_ \_____  \ /_   |
  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ / __ | \_  __ \|  |\   __\ \   __\ /  ____/  |   |
  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \// /_/ |  |  | \/|  | |  |    |  |  /       \  |   |
  |____|   (____  / / ____||____/ \____/  |__|   \____ |  |__|   |__| |__|    |__|  \_______ \ |___|   Script Author  v1.00 
                \/  \/                                \/                                    \/      
 _________                                            _____                    ___________    .___.__   __   .__                 
 \_   ___ \ _______   ____    ____   __ __   ______  /     \  _____   ___  ___ \_   _____/  __| _/|__|_/  |_ |__|  ____    ____  
 /    \  \/ \_  __ \ /  _ \  /    \ |  |  \ /  ___/ /  \ /  \ \__  \  \  \/  /  |    __)_  / __ | |  |\   __\|  | /  _ \  /    \ 
 \     \____ |  | \/(  <_> )|   |  \|  |  / \___ \ /    Y    \ / __ \_ >    <   |        \/ /_/ | |  | |  |  |  |(  <_> )|   |  \
  \______  / |__|    \____/ |___|  /|____/ /____  >\____|__  /(____  //__/\_ \ /_______  /\____ | |__| |__|  |__| \____/ |___|  /
         \/                      \/             \/         \/      \/       \/         \/      \/                             \/ 
 
 Credits... DoNotAtMe (Polar Aim Assist) ItzSnackz - Batts - Noozbar - DoGzTheFiGhTeR - Credits To ALL Developers ( Great Team ) 

      Intructions before programming the script to CMP.....
      
      Activate Mods - Polar Aim - Sticky Aim - Standard Anti-Recoil - Rapid Fire - HoldBreath  - Enemy Ping - Slide Cancel - Flipped Triggers
      
      Enter/Exit Mod Menu - HOLD L2 & press OPTIONS  - CMP will FLASH RGB Colour & RUMBLE - When not in Mod Menu the LED is be OFF
      
      Turn MODS ON/OFF 
      ===================================================================================================================
      HOLD L2 & press UP         = TURNS ON/OFF Polar Aim
      ===================================================================================================================
      HOLD L2 & press DONW       = TURNS ON/OFF Sticky Aim
      ===================================================================================================================
      HOLD L2 & press LEFT       = TURNS ON/OFF Standard Antirecoil
      ===================================================================================================================
      HOLD L2 & press RIGHT      = TURNS ON/OFF Rapid Fire
      ===================================================================================================================
      HOLD L2 & press TRIANGLE/Y = TURNS ON/OFF HoldBreath
      ===================================================================================================================
      HOLD L2 & press CIRCLE/B   = TURNS ON/OFF Enemy Ping    
      ===================================================================================================================
      EDIT VALUES WHILE IN MOD MENU
      ===================================================================================================================
      EDIT POLAR AIM RADIUS      = HOLD CIRCLE/B & Press UP to INCREASE & DOWN to DECREASE RADIUS (more shake)
      ===================================================================================================================
      EDIT ANTIRECOIL            = HOLD CROSS/A & Press UP to INCREASE & DOWN to DECREASE Values
                                 = HOLD CROSS/A & Press LEFT & RIGHT To increase/decrease horizontal
      ===================================================================================================================
      BEFORE YOU PROGRAM THIS TO THE CMP BELOW YOU CAN ACTIVATE MODS TO BE ON BY DEFAULT AND CHANGE THE VALUES
      ===================================================================================================================
      */
     
      // Toggles \\ // Change OFF to ON if you want them enabled before programmed to CMP...
      
      // Polar Aim Assist
      	int PolarAimAssist  = OFF;
      	
      // Sticky Aim Assist
        int StickyAimAssist = OFF;
        
      // Legacy Antirecoil
        int LegacyAR        = OFF;
        
      // Rapid Fire
        int RapidFire       = OFF;
        
      // Hold Breath 
        int HoldBreath      = OFF; 
        
      // Enemy Ping
        int EnemyPing       = OFF;
      
      // Slide Cancel Types MW or CW  
	    int SlideCancelMW   = ON;
	    int SlideCancelCW   = OFF;
        
      // Flipped Triggers
        int FlippedTriggers = OFF;                                       
      
      // Change the values for each mods that have adjustable values \\
      
      // Polar Aim Assist 
        int Radius          = 20; 
        int Steps           = 15;
        
      // Sticky Aim Assist
        int StickyAimSize   = 20;
        int StickyAimTime   = 15;
        
      // Legacy AR 
        int Vertical        = 20; 
        int Horizontal      =  0;
        int Inverted        =  1;
        
      // Rapid Fire
        int RapidFireSpeed  = 10;
      
      // Change The buttons to suit your controller Layout In Game \\
        define Jump         = PS4_CROSS; 
        define Crouch       = PS4_R3; 
        define Sprint       = PS4_L3; 
      
      //================================================================================================================= 
      // DO NOT TOUCH ANY WHERE BELOW THIS LINE... THE REST IS REFERENCE FOR THE SCRIPT!!!
      //=================================================================================================================
     
      // VARIABLES USED IN THE SCRIPT = DO NOT TOUCH!!!
        int MainMenu;
        int LegacyAntirecoil;
  
        define ON = TRUE;
        define OFF = FALSE;
        
      // DoNotAtMe Polar Aim Assist
      
        define X = XB1_RX;                                    
        define Y = XB1_RY;                                    
        define ACTIVE_WHEN_ADS    = TRUE;                     
        define ACTIVE_WHEN_FIRING = TRUE;                            
        define STEP_INTERVAL =  1;                            
        define VM_INTERVAL   = -2; 
        int time;                                             
        int angle, cos_angle, sin_angle;                      
        int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
        const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
        80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
        6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
        -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
        -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
        -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
        -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
        9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
        82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 	
       

//=========================================================================== 

// Start Of the Main Section \\
         
main{ 

// Enter Menu On Fly \\ 

	if(get_val(PS4_L2))
	{
		if(event_press(PS4_OPTIONS))
		{
			MainMenu =! MainMenu;
			combo_run(Rgb); 
	    } 
	    if(MainMenu)                      // If We Are In The Menu, Toggle Mods \\
	    {
	    	if(event_press(PS4_UP))       // Toggle Polar Aim Assist \\ 
	    	{
	    		PolarAimAssist =! PolarAimAssist;
	    		
	    		if(PolarAimAssist) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        }
	        if(event_press(PS4_DOWN))     // Toggle Sticky Aim Assist \\ 
	        {
	            StickyAimAssist =! StickyAimAssist;
	            
	            if(StickyAimAssist) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        } 
	        if(event_press(PS4_LEFT))     // Toggle Legacy AR \\ 
	        {
	            LegacyAR =! LegacyAR;
	            
	            if(LegacyAR) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        } 
	        if(event_press(PS4_RIGHT))    // Toggle Rapid Fire \\ 
	        {
	            RapidFire =! RapidFire
	            
	            if(RapidFire) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        } 
	        if(event_press(PS4_TRIANGLE)) // Toggle HoldBreath \\
	        {
	            HoldBreath =! HoldBreath;
	            
	            if(HoldBreath) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        } 
	        if(event_press(PS4_CIRCLE))   // Toggle Enemy Ping \\
	        {
	            EnemyPing =! EnemyPing;
	            
	            if(EnemyPing) 
	    			combo_run(LedOn)
	    	    else
	    	        combo_run(LedOff)
	        }                             // Block The Button Inputs From IN GAME \\
	        set_val(PS4_UP,0);set_val(PS4_DOWN,0);set_val(PS4_LEFT,0);set_val(PS4_RIGHT,0);set_val(PS4_CIRCLE,0);set_val(PS4_TRIANGLE,0);set_val(PS4_OPTIONS,0);
	    }
	}                                     // End Of First Block/End Of Menu \\ 
	
	if(!MainMenu)                         // OutSide The Menu ONLY, Mods Only Work Outside Menu \\
	{
    	if(FlippedTriggers)
    	{ 
        	swap(PS4_R1,PS4_R2);
            swap(PS4_L1,PS4_L2);
        }
        if(StickyAimAssist)
        {
        	if(get_val(PS4_L2)) 
            	combo_run(AimAssist);
        }
        if(LegacyAR)
        {
        	if(get_val(PS4_R2)) 
                combo_run(Antirecoil);
                
            if(abs(get_val(PS4_RY)) > Vertical + 2 || abs(get_val(PS4_RX)) > Vertical + 2) 
                combo_run(Antirecoil);
             
        }
        if(RapidFire)
        {
        	if(get_val(PS4_R2)) 
                combo_run(Rapidfire);
        }
        if(HoldBreath)
        {
            if(get_val(PS4_L2))
                set_val(PS4_L3,100);
     
            if(get_val(PS4_LY) <-90 && get_val(PS4_L2) && get_ptime(PS4_L2) > 200)
                combo_stop(Holdbreath);       
     
            if(event_press(PS4_L2)) 
                combo_run(Holdbreath);
     
            if(get_val(PS4_L2) && get_lval(PS4_L3)) 
                set_val(PS4_L3,0);  
       }
       if(EnemyPing)
       {
       	   if(event_press(PS4_R2))
               combo_run(Autoping);
       }
       if(PolarAimAssist)
       {
       	  actual_X = get_val(X);   
          actual_Y = get_val(Y);           
          actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
          max_Magnitude = (actual_Magnitude < 100);                      
     
          if(!(time++ % STEP_INTERVAL))
          {                                  
    	         angle += Steps;                                                 
          }                                                               
          angle = angle % 360;                                            
          sin_angle = Polar_Array[angle % 360];                           
          cos_angle = Polar_Array[(angle + 270) % 360];                  
          cos_angle = (cos_angle * Radius) / 100;                         
          sin_angle = (sin_angle * Radius) / 100;                          
     
          if((ACTIVE_WHEN_ADS && get_val(PS4_L2)) || (ACTIVE_WHEN_FIRING && get_val(PS4_R2)))
          { 
          	if(actual_Magnitude <= Radius)
          	{                                                      
            	sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X; 
                
            }
            else 
            {     
            	
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
            }                                                  
                set_val(X, calculate(actual_X + cos_angle, -100, 100));
                set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
     
            } 
        }
        if (SlideCancelMW || SlideCancelCW) 
        {		
			if ((abs(get_val(PS4_LY)) > 70) || (abs(get_val(PS4_LX)) > 40)) 
			{
					
				if(event_release(Crouch)) 
				{
					if(SlideCancelMW) 
					{
						combo_run(SlideCancelMW);
				    }
					else if(SlideCancelCW) 
					{
						combo_run(SlideCancelCW);
		            }
		        } 
            } 
        }                             
        if(get_val(PS4_CROSS)) 
        {
        	if(event_press(PS4_UP)) 
        	{
        		Vertical = Vertical + 1;
                combo_run(Increase);
            }
            if(event_press(PS4_DOWN)) 
            {
                Vertical = Vertical - 1;
                combo_run(Decrease);
            }
            if(event_press(PS4_RIGHT)) 
            {
                Horizontal = Horizontal + 1;
                combo_run(Increase);
            }
            if(event_press(PS4_LEFT)) 
            {
                Horizontal = Horizontal - 1;
                combo_run(Decrease);
            }
            set_val(PS4_UP,0);set_val(PS4_DOWN,0);set_val(PS4_RIGHT,0);set_val(PS4_LEFT,0);
        }
        if(get_val(PS4_CIRCLE)) 
        {                          
        	if(event_press(PS4_UP)) 
        	{
                Radius = Radius + 1;
                combo_run(Increase);
            }
            if(event_press(PS4_DOWN))
            {
                Radius = Radius - 1;
                combo_run(Decrease);
            }
            set_val(PS4_UP,0);set_val(PS4_DOWN,0)
        }     
	}
}
           
combo Antirecoil {
LegacyAntirecoil = get_val(PS4_RY) + Vertical;
if(LegacyAntirecoil > 100) LegacyAntirecoil = 100;
set_val(PS4_RY,LegacyAntirecoil * Inverted);
LegacyAntirecoil = get_val(PS4_RX) + Horizontal;
if(LegacyAntirecoil > 100) LegacyAntirecoil = 100;
set_val(PS4_RX,LegacyAntirecoil);
} 
combo AimAssist {
set_val(PS4_RY,xy_val(PS4_RY, StickyAimSize));
wait(StickyAimTime);
set_val(PS4_RX,xy_val(PS4_RX, StickyAimSize));
set_val(PS4_LX,xy_val(PS4_LX, StickyAimSize));
wait(StickyAimTime);
set_val(PS4_RY,xy_val(PS4_RY, StickyAimSize * -1));
wait(StickyAimTime);
set_val(PS4_RX,xy_val(PS4_RX, StickyAimSize * -1));
set_val(PS4_LX,xy_val(PS4_LX, StickyAimSize * -1));
wait(StickyAimTime);
}
combo Rapidfire {
set_val(PS4_R2,100);
wait(40);
set_val(PS4_R2,0);
wait(RapidFireSpeed);
}   
combo Holdbreath {
set_val(PS4_L3,0);
wait(60);
set_val(PS4_L3,100);
wait(110);
set_val(PS4_L3,0);
wait(110);
}
combo Autoping { 
set_val(PS4_UP,100);
wait(20)
set_val(PS4_UP,0);
wait(20)
set_val(PS4_UP,100);
wait(20)
set_val(PS4_UP,0);
}
combo Increase {
set_rumble(RUMBLE_A,100);
wait(100);
reset_rumble();
}    
combo Decrease {
set_rumble(RUMBLE_B,100);
wait(50);
reset_rumble();
}
combo SlideCancelMW {           
set_val(Crouch,100);          
wait(120);                         
set_val(Crouch,0);            
wait(60);                          
set_val(Crouch,100);          
wait(50);                          
set_val(Crouch,100);          
set_val(Jump,100);           
wait(60);                          
set_val(Crouch,0);            
set_val(Jump,100);          
wait(10);                        
set_val(Jump,0);
}
combo SlideCancelCW {
set_val(Crouch,100);
wait(80);
set_val(Crouch,0);
wait(20);
set_val(Sprint,0);
set_val(Crouch,100);
set_val(Sprint,100);
wait(20);
set_val(Crouch,0);
set_val(Sprint,0);
wait(20);
}    
combo Rgb {
LED(2,0,2,0);
wait(100);
LED(0,0,0,0);
wait(100);
LED(0,0,0,2);
wait(100);
LED(0,0,0,0);
wait(100);
LED(0,2,2,0);
wait(100);
LED(0,0,0,0);
wait(100);
}
combo LedOn {
LED(0,0,2,0);
set_rumble(RUMBLE_A,100);
wait(400);
reset_rumble();
reset_leds();}
     
combo LedOff {
LED(0,2,0,0);
set_rumble(RUMBLE_B,100);
wait(200);
reset_rumble();
LED(0,0,0,0);
wait(100);
set_rumble(RUMBLE_B,100);
LED(0,2,0,0);
wait(200);
reset_rumble();
reset_leds();}  
     
function LED(a,b,c,d) {
set_led(LED_1,a);
set_led(LED_2,b);
set_led(LED_3,c);
set_led(LED_4,d);
}   
function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < StickyAimSize + 1) 
return f_val;
return get_val(f_axis); 
}     
function calculate(int v, int lo, int hi) { 
if(v < lo) return lo;               
if(v > hi) return hi;        
return v;     
}  
    