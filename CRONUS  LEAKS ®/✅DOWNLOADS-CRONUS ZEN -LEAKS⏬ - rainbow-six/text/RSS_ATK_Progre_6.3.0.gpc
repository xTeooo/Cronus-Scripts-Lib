/*
VVVVVVVV           VVVVVVVV                                     iiii          tttt                                            
V::::::V           V::::::V                                    i::::i      ttt:::t                                            
V::::::V           V::::::V                                     iiii       t:::::t                                            
V::::::V           V::::::V                                                t:::::t                                            
 V:::::V           V:::::V eeeeeeeeeeee    rrrrr   rrrrrrrrr  iiiiiiittttttt:::::ttttttt      aaaaaaaaaaaaa      ssssssssss   
  V:::::V         V:::::Vee::::::::::::ee  r::::rrr:::::::::r i:::::it:::::::::::::::::t      a::::::::::::a   ss::::::::::s  
   V:::::V       V:::::Ve::::::eeeee:::::eer:::::::::::::::::r i::::it:::::::::::::::::t      aaaaaaaaa:::::ass:::::::::::::s 
    V:::::V     V:::::Ve::::::e     e:::::err::::::rrrrr::::::ri::::itttttt:::::::tttttt               a::::as::::::ssss:::::s
     V:::::V   V:::::V e:::::::eeeee::::::e r:::::r     r:::::ri::::i      t:::::t              aaaaaaa:::::a s:::::s  ssssss 
      V:::::V V:::::V  e:::::::::::::::::e  r:::::r     rrrrrrri::::i      t:::::t            aa::::::::::::a   s::::::s      
       V:::::V:::::V   e::::::eeeeeeeeeee   r:::::r            i::::i      t:::::t           a::::aaaa::::::a      s::::::s   
        V:::::::::V    e:::::::e            r:::::r            i::::i      t:::::t    tttttta::::a    a:::::assssss   s:::::s 
         V:::::::V     e::::::::e           r:::::r           i::::::i     t::::::tttt:::::ta::::a    a:::::as:::::ssss::::::s
          V:::::V       e::::::::eeeeeeee   r:::::r           i::::::i     tt::::::::::::::ta:::::aaaa::::::as::::::::::::::s 
           V:::V         ee:::::::::::::e   r:::::r           i::::::i       tt:::::::::::tt a::::::::::aa:::as:::::::::::ss  
            VVV            eeeeeeeeeeeeee   rrrrrrr           iiiiiiii         ttttttttttt    aaaaaaaaaa  aaaa sssssssssss  
            
		╔═══════Rainbow Six Siege═══════════════════════════════════════════════════════════════════════════════╗
		║	Version: 	Progressive 6.3.0 - Attackers		 													║
		║	Cronus: 	Zen only																				║
		║	Platform: 	Multi																					║
		║	Controller: Multi																					║
		║	Game: 		Rainbow Six Siege																		║
		║	Author: 	Veritas																					║
		║	Discord:	https://discord.gg/tkGPX8HaNs															║
		║	NOTE:		You need to load the 2 scripts in order to work between defenders and attacker			║
		║				RSS_DEF and RSS_ATK																		║		
		║   All Scripts Are Free. If you paid for a script, file a chargeback because you have been scammed.	║		
		╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
*/
//══════════════════════════════════════════════════════════════════════════════════════════════
//Script Specific 
//══════════════════════════════════════════════════════════════════════════════════════════════
const string L85A2			= "L85A2";
const string M590A1			= "M590A1";
const string P226MK25		= "P226 MK 25";
const string SMG11			= "SMG-11";
const string USP40			= "USP40";
const string ARX200			= "ARX200";
const string G36C			= "G36C";
const string MK19MM			= "MK1 9MM";
const string AUGA2			= "AUG A2";
const string P12			= "P12";
const string CSRX300		= "CSRX 300";
const string C75AUTO		= "C75 AUTO";
const string G8A1 			= "G8A1";
const string SUPERNOVA 		= "SUPERNOVA";
const string P229RC			= "P229 RC";
const string FMG9			= "FMG-9";
const string SIX12SD		= "SIX12 SD";
const string a57USG			= "5.7 USG";
const string D50			= "D-50";
const string SMG12			= "SMG-12";
const string SUPERSHORTY	= "SUPER SHO..";
const string R4C			= "R4-C";
const string M45MEUSOC		= "M45 MEUSOC";
const string M1014			= "M1014";
const string P9				= "P9";
const string LFP586			= "LFP586";
const string MP7			= "MP7";
const string PMM			= "PMM";
const string GSH18			= "GSH-18";
const string a556XI			= "556XI";
const string AR33			= "AR33";
const string F2				= "F2";
const string a417			= "417";
const string SGCQB			= "SGCQB";
const string CAMRS			= "CAMRS";
const string C8SFW			= "C8-SFW";
const string M249			= "M249";
const string PARA308		= "PARA-308";
const string PRB92			= "PRB92";
const string a552COMMANDO	= "552COMMANDO";
const string OTS03			= "OTS-03";
const string AK12			= "AK-12";
const string a6P41			= "6P41";
const string SR25			= "SR-25";
const string MK17CQB		= "MK17 CQB";
const string TYPE89			= "TYPE-89";
const string C7E			= "C7E";
const string ITA12S			= "ITA12S";
const string ITA12L			= "ITA12L";
const string PDW9			= "PDW9";
const string a44MAGSEMIAUTO = ".44MAG SEMI";
const string Q929			= "Q-929";
const string T95LSW			= "T-95 LSW";
const string BEARING9		= "BEARING 9";
const string SIX12			= "SIX12";
const string RG15			= "RG15";
const string BOSG			= "BOSG.12.2";
const string SPSMG9			= "SPSMG9";
const string LMGE			= "LMG-E";
const string M762			= "M762";
const string MK14EBR		= "MK 14 EBR";
const string V308			= "V308";
const string SPEAR308		= "SPEAR .308";
const string AR1550			= "AR-15.50";
const string M4GS			= "M4 GS";
const string a1911TACOPS	= "1911 TACOPS";
const string AK74M			= "AK-74M";
const string F90			= "F90";
const string SC3000K		= "SC3000K";
const string SHIELD			= "Shield";
const string Gonne6			= "Gonne-6";
const string SASG12			= "SASG-12";

const string operatorName[] 	= {
	/*------------------------------------------------Original Operators Atakers------------------------------------------------*/
	"SLEDGE",		"THATCHER",		"ASH", 			"THERMITE",	"TWITCH",	"MONTAGNE",	"GLAZ",		"FUZE",		"BLITZ",	"IQ",
	//Black Ice		Dust Line		kull Rain		Red Crow
	"BUCK",			"BLACKBEARD",	"CAPITAO",		"HIBANA",
	//Velvet Shell	Health			Blood Orchid					White Noise
	"JACKAL",	   /*No Operator*/	"YING",			"ZOFIA",		"DOKKAEBI",	
	//Chimera		Chimera			Para Bellum		Grim Sky		Wind Bastion
	"LION",			"FINKA",	   /*No Operator*/	"MAVERICK",		"NOMAD",
	//Burnt Horizon	Phantom Sight	Ember Rise		Shifting Tides
	"GRIDLOCK", 	"NOKK",			"AMARU",		"KALI",
	//Void Edge 	Steel Wave		Shadow Legacy	Neon Dawn
	"IANA",			"ACE",			"ZERO",		  /*No Operator*/
	//Void Edge 	Steel Wave		Shadow Legacy	Neon Dawn
	"FLORES",		"OSA",			""};
const int16  operatorsByYear[] 	= {0,10,14,18,22,26,29};
int operatorsCount				= 30; 	
const string avilityName[] 		= {"ELECTRONICS", "DETECTOR", "KS79", "LIFELNE", "BREACHING", "TORCH", "GEMINI", "REPLICATOR",	"RCE-RATERO", "CHARGE", "BREACHING", "ROUNDS",""};
								//IQ						ZOFIA			   MAVERICK				IANA					FLORES
const string enterSlotMsg[]		= {"Enter slot number", "for the", "Defenders script", ""};	
define OPERERATOR_TYPE_ATTACKERS= 1;
define OPERERATOR_TYPE_DEFENDERS= 0;
define FRAG_COOK_TIME 			= 3000;
int operatorWithFrags			= FALSE;
const string cooking			= "Cooking...";	
int operatorType				= OPERERATOR_TYPE_ATTACKERS;
//══════════════════════════════════════════════════════════════════════════════════════════════
//--LED
define BLUE      = 1;
define RED       = 2;
define GREEN     = 3;
define PINK      = 4;
define SKYBLUE	 = 5;
define YELLOW    = 6;
define WHITE     = 7;
	 
data(
	0,0,0,0, //0. Off
	2,0,0,0, //1. Blue
  	0,2,0,0, //2. Red
  	0,0,2,0, //3. Lime/Green
  	0,0,0,2, //4. Fuchsia/Pink
  	2,0,2,0, //5. SkyBlue
  	0,2,2,0, //6. Yellow
  	2,2,2,2  //7. White
);

const string attackers 			= " Attackers";
const string defenders			= " Defenders";
const string configurationText	= "Configure";
const string operationYear[] 	= {"",		  	"Year 1",	"Year 2", 	"Year 3",	"Year 4",	"Year 5",	"Year 6",	""};
const string operationName[] 	= {"Original",	"Black",	"Velvet", 	"Chimera",	"Burnt", 	"Void", 	"Crimson",	""};
const string operationName2[] 	= {"Operators",	"Ice",		"Shell",	"",			"Horizon",	"Edge", 	"Heist",	""};

const string gunType[]			= {"ASSAULT RIFLE","SHOTGUN","HANDGUN","SUBMACHINE GUN","MACHINE PISTOL","MARKSMAN RIFLE","LIGHT MACHINE GUN","HAND GONNE",""};
const int16 operatorTypeMsg[] 	= {80,114,101,115,115,32,65,47,127,32,116,111,32,115,101,108,101,99,116,46,32};										
const int16 operatorSelMsg[] 	= {80,114,101,115,115,32,65,47,127,32,116,111,32,115,101,108,101,99,116,46,
									32,72,111,108,100,32,76,84,47,76,50,32,43,32,133,32,134,32,84,111,32,
									110,97,118,105,103,97,116,101,32,116,104,114,111,117,103,104,32,115,101,97,115,111,110,115,46,32};									
const string gunIndexMsg[]		= {"Primary", "Secondary", ""}
const string configuration[]	= {"Anti-recoil", "Guns", "Mods Values", "Reset", "QT On/Off", ""};
const string toggleMessage[]	= {"Crouch Spam", "Auto Lean", "Fast Pick", "Strafe", "Prone Shot", "Lean Spam", "RF for All", "Rapid Fire", ""};
const string toggleValuesMsg[]	= {"Crouch Spam", "Auto Lean", "Strafe", "Lean Spam", "tBag LOL", "RF Speed", ""};
const string antirecoildMenu[]	= {"AR Start", "AR End", "Vert. Time", "Horiz. Time", ""};
const string toggleStatus[]		= {"OFF", "ON", ""};
const string saveMessage		= "SAVED";
const string saveChanges 		= "Save";
const string saveChanges02 		= "Changes?";
const string yes 				= "Yes";
const string no  				= "No";	
int yesNoIndex					= TRUE;
int antirecoilMenuIndex			= 0;
int VerticalStart[2];
int VerticalEnd[2];
int VerticalTime[2];
int HorizontalStart[2];
int HorizontalEnd[2];
int HorizontalTime[2];

int toggleValue					= 0;
int toggleIndex					= 0;
int forIndex 					= 1;	

define ASSAULTRIFLE				= 0;
define SHOTGUN					= 1;
define HANDGUN					= 2;
define SUBMACHINEGUN			= 3;
define MACHINEPISTOL 			= 4;
define MARKSMANRIFLE			= 5;	
define LIGHTMACHINEGUN			= 6;
define HANDGONNE				= 7;
define NO_GUN					= 8;

define GUN_PRIMARY				= 0;
define GUN_SECONDARY			= 1;

define DEFAULT 					= 0;
define OPERERATOR_TYPE_MOD 		= 1;
define OPERATOR_SELECTION_MOD 	= 2;
define OPERATOR_BY_YEAR_MOD 	= 3;
define GAME_MOD					= 4;
define ANTIRECOIL_MOD			= 5;
define GUN_SELECTION_MOD		= 6;
define RESET_MOD				= 7;
define CHANGE_SLOT_MOD			= 8;
define SAVE_AR_MOD				= 9;
define CONFIG_MOD				= 10;
define QUICK_TOGGLE_MOD			= 11;
define QUICK_TOGGLE_EDIT_MOD	= 12;

int currentMod					= DEFAULT;
int activeGun					= 0;
int displayOperatorTypeScrollOn	= FALSE;
int displayOperatorScrollOn		= FALSE;
int operatorsByYearIndex		= 0;	
int currentConfigModIndex		= 0;
int activeGunRF;
int operatorIndex				= 0;
int LINE_TOP					= 7;
int LINE_CENTER					= 25;
int LINE_BOTTOM					= 45;
int messageColumCount 			= 127;
int messageArrayLine			= 0;
int messageSize;

int slotNumber, secondScriptSlot;

int rapidFireSpeed 				= 30;
int tBagSpeed					= 30;
int crouchSpamSpeed				= 60;
int leanSpamSpeed				= 80;
int autoLeanSpeed				= 30;
int strafeSpeed 				= 200;
int tBagOn						= TRUE;
int crouchSpamOn				= FALSE;
int leanSpamOn					= FALSE;
int pronShotOn					= FALSE;
int rf4AllOn					= FALSE;
int autoLeanOn					= FALSE;
int rapidFireOn					= TRUE;
int strafeOn					= FALSE;
int fastPickOn					= FALSE;
	//Game buttons
int FireButton					= XB1_RT;
int AdsButton   				= XB1_LT;
int AbilityButton  				= XB1_RB;
int TacticalButton				= XB1_LB;
int SelectButton    			= XB1_A;
int CrouchButton    			= XB1_B;
int MeleeButton     			= XB1_RS;
int SprintButton    			= XB1_LS;
int ReloadButton  				= XB1_X;
int SwapButton      			= XB1_Y;
    //Special buttons
int ForceSwapButton 			= XB1_A;
	//Navigation buttons
int UpButton					= XB1_UP;
int RightButton					= XB1_RIGHT;
int DownButton					= XB1_DOWN;
int LeftButton					= XB1_LEFT;
int MenuButton					= XB1_MENU;
int ModsButton					= XB1_VIEW;
int LxButton					= XB1_LX;
int LyButton					= XB1_LY;
	
int tempPack[2];
int saveMatix[9];
int saveVar;
int saveIndex;
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main block					║
╚═══════════════════════════════════╝
*/	
int abilityReleasingTime 	= 0;
int abilityCountDown		= 0;
int abilityCoolDown			= FALSE;
int abilityTimeCheck		= FALSE;
int abilityReleasing		= FALSE;
int abilityActive			= FALSE;
int abilityFocus			= FALSE;
int abilityDeployCount		= 0;
int AREnabled 				= TRUE;
int QTEnabled				= TRUE;
int autoLeanDelay			= FALSE;
int i_val, i_pnt, i_val_h, i_pnt_h, 
	ar_y, i_cnt, i_num, ar_x, i_cnt_h, 
	i_num_h, v_x;
int selectedGunRF[2], gunIndex[2],  gunCount[2];
int autoLeanDelayCountDown = 0;
//Clean up for better speed
int FncBlockButton	= 0;
int BlockButton		= 0;
int VmSpeed;			
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main block					║
╚═══════════════════════════════════╝
*/	
init{
	LoadSlotNumber();
	LoadSettings();
	LoadSaveMatrix();
	DisplayMod(OPERATOR_SELECTION_MOD);
	if(get_console() == PIO_PS4) VmSpeed = -6;
	if(get_console() == PIO_XB1) VmSpeed = -2;
}
main {	   
	vm_tctrl(VmSpeed);
	if(autoLeanDelay){                            
        autoLeanDelayCountDown += get_rtime();
        if(autoLeanDelayCountDown >= 3000){
        	autoLeanDelay	= FALSE;
        }
	}
	
	//This will turn Heir Trigger on
	if(get_ival(AdsButton) 	> 10) 	Set(AdsButton, 	100);
	if(get_ival(FireButton) > 10)	Set(FireButton, 100);	
	if(ButtonHold(AdsButton) && ButtonPress(MenuButton)) DisplayMod(OPERATOR_SELECTION_MOD);
	if(ButtonHold(AdsButton) && ButtonPress(ModsButton)) DisplayMod(CONFIG_MOD);
	
	if(currentMod == GAME_MOD){
		if(!abilityActive){			
			//Gun switch 	
			if(ButtonRelease(SwapButton) && get_ptime(SwapButton) < 500){
				if(!ButtonHold(TacticalButton) && !ButtonHold(AbilityButton) && !ButtonHold(LeftButton)){
					activeGun = !activeGun;
				}
				DisplaySwitchGun();	
			}
			//Force Gun switch    	
			if(ButtonHold(AdsButton) && DoubleTab(ForceSwapButton)){ 
				activeGun 	= !activeGun;
				DisplaySwitchGun();
				BlockButton	= ForceSwapButton;
			}			
			//Pron Shot
			if(ButtonPress(FireButton) && pronShotOn) Set(CrouchButton, 100);  
			//Crouch Spam
			if(crouchSpamOn && ButtonHold(FireButton) 	&& get_ptime(FireButton) > 200) combo_run(CrouchSpam);
			if(crouchSpamOn && !ButtonHold(FireButton) 	&& combo_running(CrouchSpam)) 	combo_stop(CrouchSpam);
			//Lean Spam
			if(leanSpamOn 	&& ButtonHold(AdsButton) 	&& ButtonHold(FireButton)) 		combo_run(LeanSpam);
			if(leanSpamOn	&& !ButtonHold(FireButton)	&& combo_running(LeanSpam)) 	combo_stop(LeanSpam);
			//Teabugging LOL
			if(tBagOn && ButtonHold(DownButton) && get_ptime(DownButton) >= 250) 		combo_run(TeaBag);	
			// Run AutoLean
			if(autoLeanOn && ButtonPress(ReloadButton)){
				autoLeanDelayCountDown = 0;
				autoLeanDelay = TRUE;
			}
			if(autoLeanOn && !ButtonHold(FireButton)){
				if(ButtonHold(AdsButton) && abs(get_val(LxButton)) > autoLeanSpeed){
					if(get_val(LxButton) < 0){
						if(!get_val(SprintButton)){
							Set(SprintButton, 100);
						}
					}else{
						if(!get_val(MeleeButton)){
							if(!autoLeanDelay){								
								Set(MeleeButton, 100);
							}
						}
					}
				}
			}
			//Strafe
			if(strafeOn && ButtonHold(FireButton)) combo_run(Strafe);
			if(strafeOn && !ButtonHold(FireButton) && combo_running(Strafe)) combo_stop(Strafe);
			if(strafeOn && ((get_val(LyButton) <= -70) || (get_val(LyButton) >= 70) || 
						    (get_val(LxButton) <= -70) || (get_val(LxButton) >= 70))) combo_stop(Strafe);
			//FastPick			
			if(fastPickOn && ButtonHold(AdsButton)){
				if(ButtonPress(RightButton)){
					combo_run(FastPickRight);
				}
				if(ButtonPress(LeftButton)){
					combo_run(FastPickLeft);
				}
				if(ButtonPress(UpButton)){
					combo_run(FastPickUp);
				}
				Unset(RightButton);
				Unset(LeftButton);
				Unset(UpButton);
			}						
			//Attackers Only GRENADE SCRIPT
			if(operatorWithFrags) ReleaseFrag();
			if(operatorWithFrags && ButtonRelease(TacticalButton)) DisplaySwitchGun();
		}
		if(abilityFocus || !abilityActive){
			if(AREnabled) {
		    	//Antirecoil by Batts				
				// Vertical
	    		// Adding or subtracting
				if(VerticalStart[activeGun] < VerticalEnd[activeGun])
					i_val = 1;
				else
					i_val = -1;
	    		// Iteration point for progression 
	    		i_pnt = (VerticalTime[activeGun] * 10) / (abs(VerticalStart[activeGun] - VerticalEnd[activeGun])); 
	
				// Horizontal
	    		// Adding or subtracting
				if(HorizontalStart[activeGun] < HorizontalEnd[activeGun])
					i_val_h = 1;
				else
					i_val_h = -1;
	    		// Iteration point for progression 
	    		i_pnt_h = (HorizontalTime[activeGun] * 10) / (abs(HorizontalStart[activeGun] - HorizontalEnd[activeGun]));
	    				
				// Reset counters/pointers
				if(!get_ival(FireButton)){
					// Vertical
					ar_y = VerticalStart[activeGun];
					i_cnt = 0;
					i_num = 0;
					// Horizontal
					ar_x = HorizontalStart[activeGun];
					i_cnt_h = 0;
					i_num_h = 0;
				}
				// If Fire button is held
	    		if(get_ival(FireButton)){
			        // Vertical
        			if(!p_complete())  
    	   				ar_y = p_val();
    				else
           			    ar_y = VerticalEnd[activeGun];
           			    
           			if(y_val() < 100)
			    	   	set_val(PS4_RY,y_val()); 
		
	          		// Horizontal
       			 	if(!p_complete_x())
    	            	ar_x = p_val_x();
    	         	else
                    	ar_x = HorizontalEnd[activeGun];
         
    	  			 if(x_val() < 100)
			    	   	set_val(PS4_RX,x_val()); 
					
    			}
			}
			//Rapid Fire for all
			if((rf4AllOn || activeGunRF) && rapidFireOn){
				if(ButtonHold(FireButton))	combo_run(RapidFire);
				else						combo_stop(RapidFire);    	
			}
		}
		if(QTEnabled){
			//Quick Toggle		
			if(ButtonHold(AdsButton)){
				if(DoubleTab(UpButton)){
					crouchSpamOn 	= !crouchSpamOn;
					toggleIndex 	= 0;
					toggleValue		= crouchSpamOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);					
				}
				if(DoubleTab(RightButton)){
					strafeOn 		= !strafeOn;
					toggleIndex 	= 3;
					toggleValue		= strafeOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				if(DoubleTab(LeftButton)){			
					fastPickOn 		= !fastPickOn;
					toggleIndex 	= 2;
					toggleValue		= fastPickOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				if(DoubleTab(DownButton)){
					autoLeanOn 		= !autoLeanOn;
					toggleIndex 	= 1;
					toggleValue		= autoLeanOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				Unset(UpButton);
				Unset(RightButton);				
				Unset(DownButton);
				if(ButtonHold(LeftButton)){
					Unset(LeftButton);
					if(ButtonPress(ReloadButton)){
						pronShotOn 		= !pronShotOn;
						toggleIndex 	= 4;
						toggleValue		= pronShotOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(SwapButton)){
						leanSpamOn 		= !leanSpamOn;
						toggleIndex 	= 5;
						toggleValue		= leanSpamOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(CrouchButton)){
						rf4AllOn 		= !rf4AllOn;
						toggleIndex 	= 6;
						toggleValue		= rf4AllOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(SelectButton)){
						rapidFireOn 	= !rapidFireOn;
						toggleIndex 	= 7;
						toggleValue		= rapidFireOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					Unset(SwapButton);
					Unset(SelectButton);
					Unset(CrouchButton);
					Unset(ReloadButton);
				}				
			}
		}
		//Enter/Exit the operator avility
		if(abilityActive){			
			CheckAbilityOff();
		}else{
			DisplayAbility();
		}	
	}
	else if(currentMod == CONFIG_MOD){	
		if(ButtonPress(LeftButton)){
			currentConfigModIndex --;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonPress(RightButton)){
			currentConfigModIndex ++;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonRelease(SelectButton)){ 			
			if(currentConfigModIndex == 0) DisplayMod(ANTIRECOIL_MOD);
			if(currentConfigModIndex == 1) DisplayMod(GUN_SELECTION_MOD);
			if(currentConfigModIndex == 2) DisplayMod(QUICK_TOGGLE_MOD);	
			if(currentConfigModIndex == 3) DisplayMod(RESET_MOD);
			if(currentConfigModIndex == 4){
				QTEnabled = !QTEnabled; 
				DisplayConfiguration();
				SaveSettings();
			}
		}
		if(ButtonPress(CrouchButton)){ 
			DisplayMod(GAME_MOD);
		}
		UnsetAllButtons();		
	}		    
	else if(currentMod == OPERATOR_SELECTION_MOD){  
		DisplayScrollMode();
		if(ButtonPress(CrouchButton)) DisplayMod(OPERERATOR_TYPE_MOD);
		if(ButtonPress(LeftButton)	&&	!ButtonHold(AdsButton)){
			operatorIndex = VerifyMinMax(operatorIndex --, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonPress(RightButton)	&&	!ButtonHold(AdsButton)){
			operatorIndex = VerifyMinMax(operatorIndex ++, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonPress(LeftButton) 	&&	ButtonHold(AdsButton)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex --, 0, 6)
			DisplayOperatorByYear();
		}
		if(ButtonPress(RightButton)	&&	ButtonHold(AdsButton)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex ++, 0, 6)
			DisplayOperatorByYear();
		}
		if(ButtonRelease(AdsButton)) DisplayOperatorSelection();			
		if(ButtonPress(SelectButton)){
			activeGun = GUN_PRIMARY;
			gunIndex[GUN_PRIMARY] = 1;
			gunIndex[GUN_SECONDARY] = 1;
			ActivateOperator();
		}
		UnsetAllButtons();
	}     
	else if(currentMod == OPERERATOR_TYPE_MOD){	 
		DisplayScrollMode();
		if(ButtonPress(UpButton) || ButtonPress(DownButton)){
			operatorType 	= !operatorType;
			DisplayMod(OPERERATOR_TYPE_MOD);
			BlockButton = UpButton;
			FncBlockButton = DownButton;
		}		    
		if(ButtonRelease(SelectButton)) { 	  		
			DisplayMod(OPERATOR_SELECTION_MOD);
			BlockButton = SelectButton;
		}	
		UnsetAllButtons();
	}		
	else if(currentMod == ANTIRECOIL_MOD){	
    	//Antirecoil by Batts				
		// Vertical
		// Adding or subtracting
		if(VerticalStart[activeGun] < VerticalEnd[activeGun])
			i_val = 1;
		else
			i_val = -1;
		// Iteration point for progression 
		i_pnt = (VerticalTime[activeGun] * 10) / (abs(VerticalStart[activeGun] - VerticalEnd[activeGun])); 

		// Horizontal
		// Adding or subtracting
		if(HorizontalStart[activeGun] < HorizontalEnd[activeGun])
			i_val_h = 1;
		else
			i_val_h = -1;
		// Iteration point for progression 
		i_pnt_h = (HorizontalTime[activeGun] * 10) / (abs(HorizontalStart[activeGun] - HorizontalEnd[activeGun]));
				
		// Reset counters/pointers
		if(!get_ival(FireButton)){
			// Vertical
			ar_y = VerticalStart[activeGun];
			i_cnt = 0;
			i_num = 0;
			// Horizontal
			ar_x = HorizontalStart[activeGun];
			i_cnt_h = 0;
			i_num_h = 0;
		}
		// If Fire button is held
		if(get_ival(FireButton)){
	        // Vertical
			if(!p_complete())  
   				ar_y = p_val();
			else
   			    ar_y = VerticalEnd[activeGun];
   			    
   			if(y_val() < 100)
	    	   	set_val(PS4_RY,y_val()); 

      		// Horizontal
			 	if(!p_complete_x())
            	ar_x = p_val_x();
         	else
            	ar_x = HorizontalEnd[activeGun];
 
  			 if(x_val() < 100)
	    	   	set_val(PS4_RX,x_val()); 
			
		}
	
		//Rapid Fire for all
		if((rf4AllOn || activeGunRF) && rapidFireOn){
			if(ButtonHold(FireButton))	combo_run(RapidFire);
			else						combo_stop(RapidFire);    	
		}

		if(	ButtonRelease(LeftButton) || ButtonRelease(RightButton) ||
			ButtonRelease(DownButton) || ButtonRelease(UpButton) ){
			DisplayAntiRecoilMenu(0);
		}
		if(ButtonPress(SwapButton)){
			if(get_ival(AdsButton)){
				antirecoilMenuIndex = VerifyMinMax(antirecoilMenuIndex - 1, 0, 3);
			}else{
				antirecoilMenuIndex = VerifyMinMax(antirecoilMenuIndex + 1, 0, 3);
			}
			DisplayAntiRecoilMenu(0);
		}
		if(ButtonPress(LeftButton)){
			AdjustRecoilValue(1);
		}
		if(ButtonPress(RightButton)){
			AdjustRecoilValue(2);
		}
		if(ButtonPress(UpButton)){
			AdjustRecoilValue(3);
		}
		if(ButtonPress(DownButton)){
			AdjustRecoilValue(4);	
		}
		if(ButtonPress(CrouchButton)){
			DisplayMod(CONFIG_MOD);				
		}
		if(ButtonRelease(SelectButton)){
			saveIndex = FindSaveBucket();
			if(saveIndex == 99) saveIndex = FindOpenBucket();
			if(saveIndex == 99){
				DisplayMod(GAME_MOD);
			}else{
				yesNoIndex = TRUE;
				currentMod = SAVE_AR_MOD;
			}			
		}
		Unset(UpButton);
		Unset(DownButton);
		Unset(LeftButton);
		Unset(RightButton);
		Unset(SelectButton);
		Unset(CrouchButton);
	}
	else if(currentMod == SAVE_AR_MOD){
		DisplaySaveAR();
		if(ButtonPress(LeftButton) || ButtonPress(RightButton) ){
			yesNoIndex = !yesNoIndex;
		}
		if(ButtonRelease(SelectButton)){
			if(yesNoIndex) SaveAR();
			DisplayMod(GAME_MOD);				
		}
		if(ButtonRelease(CrouchButton)){
			DisplayMod(GAME_MOD);
		}
	}
	else if(currentMod == GUN_SELECTION_MOD){	
		if(ButtonPress(LeftButton)){
			gunIndex[activeGun] --;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
			if(activeGun == GUN_PRIMARY){
				LoadPrimaryGunInfo();
			}else{
				LoadSecondaryGunInfo();
			}
		}
		if(ButtonPress(RightButton)){
			gunIndex[activeGun] ++;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
			if(activeGun == GUN_PRIMARY){
				LoadPrimaryGunInfo();
			}else{
				LoadSecondaryGunInfo();
			}
		}
		if(ButtonRelease(SelectButton)){
			saveIndex = FindSaveBucket();
			if(saveIndex == 99) saveIndex = FindOpenBucket();
			if(saveIndex == 99){
				DisplayMod(GAME_MOD);
			}else{
				yesNoIndex = TRUE;
				currentMod = SAVE_AR_MOD;
			}			
		}
		if(ButtonPress(CrouchButton)) DisplayMod(CONFIG_MOD);	
		UnsetAllButtons();
	}	
	else if(currentMod == CHANGE_SLOT_MOD){
		if(slotNumber == 0){
			if(ButtonPress(LeftButton)){
				secondScriptSlot--;
				if(secondScriptSlot == get_slot()) secondScriptSlot --;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
			}
			if(ButtonPress(RightButton)){
				secondScriptSlot ++;
				if(secondScriptSlot == get_slot()) secondScriptSlot ++;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
			}
			if(ButtonPress(SelectButton)){
				slotNumber = secondScriptSlot;
				set_pvar(SPVAR_63, 	secondScriptSlot);
			}	
			if(ButtonPress(CrouchButton)){
				DisplayMod(OPERERATOR_TYPE_MOD);
			}
		}else{				
			load_slot(slotNumber);
		}
		UnsetAllButtons();
	}	
	else if(currentMod == QUICK_TOGGLE_MOD){		
		if(ButtonPress(LeftButton)){
			toggleIndex --;
			toggleIndex =  VerifyMinMax(toggleIndex, 0, 5);
			DisplayQuickToggles();
		}
		if(ButtonPress(RightButton)){
			toggleIndex ++;
			toggleIndex =  VerifyMinMax(toggleIndex, 0, 5);
			DisplayQuickToggles();
		}
		if(ButtonRelease(SelectButton)){
			Unset(SelectButton);
			DisplayMod(QUICK_TOGGLE_EDIT_MOD);
		}
		if(ButtonPress(CrouchButton)){ 
			DisplayMod(CONFIG_MOD);
		}
		UnsetAllButtons();
		
	}
	else if(currentMod == QUICK_TOGGLE_EDIT_MOD){
		if(ButtonPress(LeftButton) || ButtonPress(RightButton)){
			if(toggleIndex == 0) crouchSpamSpeed = EditQTValues(crouchSpamSpeed, 5, 200);
			if(toggleIndex == 1) autoLeanSpeed = EditQTValues(autoLeanSpeed, 5, 200);
			if(toggleIndex == 2) strafeSpeed = EditQTValues(strafeSpeed, 5, 200);
			if(toggleIndex == 3) leanSpamSpeed = EditQTValues(leanSpamSpeed, 5, 200);
			if(toggleIndex == 4) tBagSpeed = EditQTValues(tBagSpeed, 5, 100);
			if(toggleIndex == 5) rapidFireSpeed = EditQTValues(rapidFireSpeed, 5, 200);
			DisplayQuickTogglesEdit();
		}
		if(ButtonRelease(SelectButton)){
			SaveSettings();
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(CrouchButton)) DisplayMod(QUICK_TOGGLE_MOD);
		UnsetAllButtons();	
	}
	else DisplayScrollMode();	
	ButtonClear();
}
/*
╔═══════Rainbow Six Siege═══════════╗
║		 Script Specific 			║
╚═══════════════════════════════════╝
*/	
function CheckAbilityOff(){	
	if(abilityTimeCheck){				
		abilityCountDown += get_rtime();
		if(abilityCountDown >= abilityReleasingTime) {
			if(operatorIndex == 19)/*FINKA*/{
				abilityTimeCheck = FALSE;
				LoadPrimaryGunInfo();
				LoadSecondaryGunInfo();
				saveIndex = FindSaveBucket();
				if(saveIndex != 99) LoadARInfo();
				LoadGunRF();
			}
			CloseAvility();
			if(operatorIndex == 26)/*IANA*/{
				abilityReleasingTime 	= 9000;
				abilityCountDown		= 0;
				abilityCoolDown			= TRUE;
			}
			
			return;
		}
	}
	if(operatorIndex == 9)/*IQ*/{
		if(ButtonRelease(SwapButton)){ 
			abilityReleasing = TRUE;
			CloseAvility();
		}
		if(ButtonRelease(AbilityButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
	}
	else if(operatorIndex == 16)/*SOFIA*/{
		if(ButtonRelease(SwapButton)){
			abilityReleasing = TRUE;
			DisplaySwitchGun();
			CloseAvility();
		}
		if(ButtonRelease(AbilityButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
	}
	else if(operatorIndex == 20)/*MAVERICK*/{
		if(ButtonRelease(AbilityButton) || ButtonRelease(SwapButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
	}
	else if(operatorIndex == 26)/*IANA*/{
		if(ButtonRelease(AbilityButton)){
			abilityReleasing = TRUE;
			CloseAvility();
			abilityReleasingTime 	= 8000;
			abilityCountDown		= 0;
			abilityCoolDown			= TRUE;
		}
	}
	else if(operatorIndex == 29)/*FLORES*/{
		if(ButtonRelease(ReloadButton) && get_ptime(ReloadButton) > 1000){
			abilityActive = TRUE;
			abilityReleasingTime 	= 10000;
			abilityCountDown		= 0;
			abilityTimeCheck		= TRUE;
			abilityDeployCount ++;
		}
		if(ButtonRelease(FireButton)){    		
			CloseAvility();
		}
		if(abilityDeployCount > 0 && ButtonRelease(DownButton)){
			abilityReleasing = TRUE;
			abilityDeployCount = 0;
			CloseAvility();
		}
		if(abilityDeployCount > 0 && ButtonRelease(CrouchButton)){
			abilityReleasing = TRUE;
			abilityDeployCount = 0;
			CloseAvility();
		}
		if(ButtonRelease(SwapButton)){
			abilityReleasing = TRUE;
			CloseAvility();
			activeGun	= !activeGun;
			DisplaySwitchGun();
		}
		if(ButtonRelease(RightButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
		if(abilityDeployCount == 0 && ButtonRelease(AbilityButton)){
			abilityReleasing = TRUE;
			CloseAvility();			
		}
	}
}
function CookingGranadeMsg(timeLeft){
	DisplayFrame();
	printf(CenterText(sizeof(cooking) - 1, OLED_FONT_MEDIUM_WIDTH), 15, OLED_FONT_MEDIUM, OLED_WHITE, cooking[0]);
	NumberToString(timeLeft, FindDigits(timeLeft), CenterText(sizeof(timeLeft) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
}
function DisplayAbility(){
	if(abilityReleasing){
		abilityReleasing = FALSE;
		return;
	}
	if(abilityCoolDown){
		abilityCountDown += get_rtime();
		if(abilityCountDown < abilityReleasingTime) {
			return;
		}
		abilityCoolDown = FALSE
	}
	if(operatorIndex == 9)/*IQ*/{
		if(ButtonRelease(AbilityButton)){			
			if(activeGun != GUN_SECONDARY){
				 activeGun	= !activeGun;
				 DisplaySwitchGun();
			}
			PrintAvilityName(0);
			abilityActive = TRUE;
			abilityFocus = TRUE;
		}
	}
	else if(operatorIndex == 16)/*ZOFIA*/{	
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(2);
			abilityActive = TRUE;
		}
	}
	else if(operatorIndex == 19)/*FINKA*/{
		if(ButtonRelease(AbilityButton) && abilityDeployCount < 3){			
			abilityTimeCheck		= TRUE;
			abilityReleasingTime	= 10000;
			abilityDeployCount ++;
			LoadPrimaryGunInfo();
			LoadSecondaryGunInfo();
			saveIndex = FindSaveBucket();
			if(saveIndex != 99) LoadARInfo();
			LoadGunRF();
			activeGunRF	= selectedGunRF[activeGun];
		}
	}
	else if(operatorIndex == 20)/*MAVERICK*/{			
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(4);
			abilityActive = TRUE;
		}
	}	
	else if(operatorIndex == 26)/*IANA*/{
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(6);
			abilityActive = TRUE;
			abilityReleasingTime 	= 17000;
			abilityCountDown		= 0;
			abilityTimeCheck		= TRUE;
		}
	}
	else if(operatorIndex == 29)/*FLORES*/{
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(8);
			abilityActive = TRUE;
		}
	}
}
function DisplayGunType(){
	if(operatorIndex == 0)/*SLEDGE*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}
		}else{
			PrintGunType(HANDGUN);	
		}		
		return;
	}
	if(operatorIndex == 1)/*THATCHER*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 					
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunType(ASSAULTRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(SHOTGUN); 				
			}
			
		}else{				
			PrintGunType(HANDGUN);			
		}
		return;
	}
	if(operatorIndex == 2)/*Ash*/{ 
		if(activeGun == GUN_PRIMARY){
			PrintGunType(ASSAULTRIFLE);				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 3)/*THERMITE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}
			
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 4)/*TWITCH*/{  
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 2){				
				PrintGunType(MARKSMANRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(SHOTGUN); 				
			}
		}else{
			PrintGunType(HANDGUN);
		}		
		return;
	}
	if(operatorIndex == 5)/*MONTAGNE*/{  
		if(activeGun == GUN_PRIMARY)
			PrintGunType(NO_GUN);
		else
			PrintGunType(HANDGUN);		
		return;
	}
	if(operatorIndex == 6)/*GLAZ*/{  
		if(activeGun == GUN_PRIMARY){
			PrintGunType(MARKSMANRIFLE); 
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN); 
			}else{
				PrintGunType(HANDGONNE);
			}
		}		
		return;
	} 
	if(operatorIndex == 7)/*FUZE*/{
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 													
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunType(SUBMACHINEGUN); 
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(NO_GUN); 
			}
			
		}else{				
			PrintGunType(HANDGUN);
		}	
		return;			
	} 
	if(operatorIndex == 8)/*BLITZ*/{  
		if(activeGun == GUN_PRIMARY)
			PrintGunType(NO_GUN);
		else
			PrintGunType(HANDGUN);		
		return;
	}
	if(operatorIndex == 9)/*IQ*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(LIGHTMACHINEGUN); 			
			}else{						
				PrintGunType(ASSAULTRIFLE); 
			}
			
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	//══▶attackerss Year 1
	if(operatorIndex == 10)/*BUCK*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(MARKSMANRIFLE); 				
			}
		}else{			
			PrintGunType(HANDGUN);
		}	
		return;	
	}
	if(operatorIndex == 11)/*BLACKBEARD*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE);
			}else{
				PrintGunType(MARKSMANRIFLE); 			
			}				
		}else{				
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAPITÃO*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);	
		}		
		return;		
	}
	if(operatorIndex == 13)/*HIBANA*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1)
				PrintGunType(MACHINEPISTOL);
			else
				PrintGunType(HANDGUN);
		}
		return;	
	}
	//══▶attackerss Year 2
	if(operatorIndex == 14)/*JACKAL*/{  
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunType(SUBMACHINEGUN); 				
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(SHOTGUN); 				
			}				
		}else{			
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN);
			}else{
				PrintGunType(SHOTGUN); 
			}				
		}
		return;
	}
	if(operatorIndex == 15)/*YING*/{ 
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){		
				PrintGunType(LIGHTMACHINEGUN); 
			}else{
				PrintGunType(SHOTGUN); 		
			}				
		}else{			
			PrintGunType(HANDGUN);
		}		
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 		
			}else{					
				PrintGunType(SUBMACHINEGUN); 
			}			
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 17)/*DOKKAEBI */{   					
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(MARKSMANRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(HANDGONNE); 				
			}
		}		
		return;
	}
	//══▶attackerss Year 3
	if(operatorIndex == 18)/*LION*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunType(MARKSMANRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(SHOTGUN); 				
			}		
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN); 
			}else{
				PrintGunType(HANDGONNE);
			}		
		}		
		return;
	}
	if(operatorIndex == 19)/*FINKA*/{   			
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunType(ASSAULTRIFLE); 
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunType(SHOTGUN); 				
			}			
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN);
			}else{
				PrintGunType(HANDGONNE); 				
			}
		}	
		return;
	}
	if(operatorIndex == 20)/*MAVERICK */{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(ASSAULTRIFLE); 				
			}					
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 21)/*NOMAD*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(ASSAULTRIFLE); 				
			}			
		}else{
			PrintGunType(HANDGUN);		
		}		
		return;
	}
	//══▶attackerss Year 4
	if(operatorIndex == 22)/*GRIDLOCK*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(SUBMACHINEGUN); 
			}else{
				PrintGunType(ASSAULTRIFLE); 
			}			
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(HANDGONNE);
			}				
		}
		return;	
	}
	if(operatorIndex == 23)/*NOKK*/{  			
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 24)/*Amaru */{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunType(SUBMACHINEGUN); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(HANDGONNE); 				
			}
		}
		return;
	}
	if(operatorIndex == 25)/*KALI*/{   
		if(activeGun == GUN_PRIMARY){
			PrintGunType(MARKSMANRIFLE); 			
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(MACHINEPISTOL); 					
			}else{
				PrintGunType(MACHINEPISTOL);
			}
		}	
		return;
	}
	//══▶attackerss Year 5
	if(operatorIndex == 26)/*IANA*/{			
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{ 
				PrintGunType(ASSAULTRIFLE); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN);
			}else{
				PrintGunType(HANDGONNE); 				
			}
		}	
		return;
	}
	if(operatorIndex == 27)/*ACE*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}	
	if(operatorIndex == 28)/*ZERO*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunType(HANDGUN);
			}else{
				PrintGunType(HANDGONNE); 				
			}
		}	
		return;
	}	
	//══▶attackerss Year 6
	if(operatorIndex == 29)/*FLORES*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(MARKSMANRIFLE); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 30)/*OSA*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN); 				
			}
			
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
}
function DisplayGunName(){
	if(operatorIndex == 0)/*SLEDGE*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(L85A2), L85A2[0]);
			}else{
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{
			PrintGunName(sizeof(P226MK25), P226MK25[0]);
		}		
		return;
	}
	if(operatorIndex == 1)/*THATCHER*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(AR33), AR33[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunName(sizeof(L85A2), L85A2[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{				
			PrintGunName(sizeof(P226MK25), P226MK25[0]);
		}
		return;
	}
	if(operatorIndex == 2)/*Ash*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){					
				PrintGunName(sizeof(R4C), R4C[0]);
			}else{
				PrintGunName(sizeof(G36C), G36C[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){					
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}else{					
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
			}				
		}
		return;
	}
	if(operatorIndex == 3)/*THERMITE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a556XI), a556XI[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}else{
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
			}
		}
		return;
	}
	if(operatorIndex == 4)/*TWITCH*/{  
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(F2), F2[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){				
				PrintGunName(sizeof(a417), a417[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(P9), P9[0]);
			}else{
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}		
		return;
	}
	if(operatorIndex == 5)/*MONTAGNE*/{  
		if(activeGun == GUN_PRIMARY){
			PrintGunName(sizeof(SHIELD), SHIELD[0]);
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P9), P9[0]);
			}else if(gunIndex[GUN_SECONDARY] == 2){	
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}
		return;
	}
	if(operatorIndex == 6)/*GLAZ*/{  
		if(activeGun == GUN_PRIMARY){
			PrintGunName(sizeof(OTS03), OTS03[0]);
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}		
		return;	
	} 
	if(operatorIndex == 7)/*FUZE*/{
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(AK12), AK12[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunName(sizeof(a6P41), a6P41[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunName(sizeof(SHIELD), SHIELD[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{	
				PrintGunName(sizeof(GSH18), GSH18[0]);
			}
		}	
		return;	
	} 
	if(operatorIndex == 8)/*BLITZ*/{  
		if(activeGun == GUN_PRIMARY)
			PrintGunName(sizeof(SHIELD), SHIELD[0]);
		else
			PrintGunName(sizeof(P12), P12[0]);
		return;
	}
	if(operatorIndex == 9)/*IQ*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(G8A1), G8A1[0]);
			}else if (gunIndex[GUN_PRIMARY] == 2){	
				PrintGunName(sizeof(AUGA2), AUGA2[0]);
			}else if (gunIndex[GUN_PRIMARY] == 3){						
				PrintGunName(sizeof(a552COMMANDO), a552COMMANDO[0]);
			}
		}else{
			PrintGunName(sizeof(P12), P12[0]);
		}
		return;
	}
	//══▶attackerss Year 1
	if(operatorIndex == 10)/*BUCK*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(C8SFW), C8SFW[0]);
			}else{
				PrintGunName(sizeof(CAMRS), CAMRS[0]);
			}
		}else{			
			PrintGunName(sizeof(MK19MM), MK19MM[0]);
		}	
		return;	
	}
	if(operatorIndex == 11)/*BLACKBEARD*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(MK17CQB), MK17CQB[0]);
			}else{
				PrintGunName(sizeof(SR25), SR25[0]);
			}
		}else{				
			PrintGunName(sizeof(D50), D50[0]);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAPITÃO*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(PARA308), PARA308[0]);
			}else{
				PrintGunName(sizeof(M249), M249[0]);
			}
		}else{
			PrintGunName(sizeof(PRB92), PRB92[0]);
		}		
		return;		
	}
	if(operatorIndex == 13)/*HIBANA*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(TYPE89), TYPE89[0]);
			}else{
				PrintGunName(sizeof(SUPERNOVA), SUPERNOVA[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(BEARING9), BEARING9[0]);
			}else{
				PrintGunName(sizeof(P229RC), P229RC[0]);
			}
		}
		return;	
	}
	//══▶attackerss Year 2
	if(operatorIndex == 14)/*JACKAL*/{  
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(C7E), C7E[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunName(sizeof(PDW9), PDW9[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunName(sizeof(ITA12L), ITA12L[0]);
			}
		}else{			
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(USP40), USP40[0]);
			}else{
				PrintGunName(sizeof(ITA12S), ITA12S[0]);
			}
		}
		return;
	}
	if(operatorIndex == 15)/*YING*/{ 
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){		
				PrintGunName(sizeof(T95LSW), T95LSW[0]);
			}else{
				PrintGunName(sizeof(SIX12), SIX12[0]);
			}
		}else{			
			PrintGunName(sizeof(Q929), Q929[0]);
		}		
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(M762), M762[0]);
			}else{					
				PrintGunName(sizeof(LMGE), LMGE[0]);
			}
		}else{
			PrintGunName(sizeof(RG15), RG15[0]);
		}	
		return;
	}
	if(operatorIndex == 17)/*DOKKAEBI */{   		
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(MK14EBR), MK14EBR[0]);
			}else{
				PrintGunName(sizeof(BOSG), BOSG[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(SMG12), SMG12[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}		
		return;
	}
	//══▶attackerss Year 3
	if(operatorIndex == 18)/*LION*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(V308), V308[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunName(sizeof(a417), a417[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}		
		return;
	}
	if(operatorIndex == 19)/*FINKA*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(a6P41), a6P41[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){	
				PrintGunName(sizeof(SPEAR308), SPEAR308[0]);
			}else if(gunIndex[GUN_PRIMARY] == 3){	
				PrintGunName(sizeof(SASG12), SASG12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 20)/*MAVERICK */{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(AR1550), AR1550[0]);
			}else{
				PrintGunName(sizeof(M4GS), M4GS[0]);
			}	
		}else{
			PrintGunName(sizeof(a1911TACOPS), a1911TACOPS[0]);
		}	
		return;
	}
	if(operatorIndex == 21)/*NOMAD*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(AK74M), AK74M[0]);
			}else{
				PrintGunName(sizeof(ARX200), ARX200[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(PRB92), PRB92[0]);
			}else{
				PrintGunName(sizeof(a44MAGSEMIAUTO), a44MAGSEMIAUTO[0]);
			}
		}		
		return;
	}
	//══▶attackerss Year 4
	if(operatorIndex == 22)/*GRIDLOCK*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(M249), M249[0]);
			}else{
				PrintGunName(sizeof(F90), F90[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(SUPERSHORTY), SUPERSHORTY[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 23)/*NOKK*/{  
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(FMG9), FMG9[0]);
			}else{
				PrintGunName(sizeof(SIX12SD), SIX12SD[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(D50), D50[0]);
			}else{
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}
		}
		return;
	}
	if(operatorIndex == 24)/*Amaru */{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){	
				PrintGunName(sizeof(G8A1), G8A1[0]);
			}else{
				PrintGunName(sizeof(SUPERNOVA), SUPERNOVA[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(SMG11), SMG11[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}
		return;
	}
	if(operatorIndex == 25)/*KALI*/{   
		if(activeGun == GUN_PRIMARY){
			PrintGunName(sizeof(CSRX300), CSRX300[0]);
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(SPSMG9), SPSMG9[0]);
			}else{
				PrintGunName(sizeof(C75AUTO), C75AUTO[0]);
			}
		}	
		return;
	}
	//══▶attackerss Year 5
	if(operatorIndex == 26)/*IANA*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(ARX200), ARX200[0]);
			}else{ 
				PrintGunName(sizeof(G36C), G36C[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(MK19MM), MK19MM[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 27)/*ACE*/{   
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AK12), AK12[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			PrintGunName(sizeof(P9), P9[0]);
		}	
		return;
	}	
	if(operatorIndex == 28)/*ZERO*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP7), MP7[0]);
			}else{
				PrintGunName(sizeof(SC3000K), SC3000K[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){	
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}else{
				PrintGunName(sizeof(Gonne6), Gonne6[0]);
			}
		}	
		return;
	}
	//══▶attackerss Year 6
	if(operatorIndex == 29)/*FLORES*/{   
		if(activeGun == GUN_PRIMARY){			
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AR33), AR33[0]);
			}else{
				PrintGunName(sizeof(SR25), SR25[0]);
			}
		}else{
			PrintGunName(sizeof(GSH18), GSH18[0]);
		}				
		return;
	}
	if(operatorIndex == 30)/*OSA*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a556XI), a556XI[0]);
			}else{
				PrintGunName(sizeof(PDW9), PDW9[0]);
			}
		}else{
			PrintGunName(sizeof(PMM), PMM[0]);
		}
		return;
	}
}
function LoadGunRF(){
	if(operatorIndex == 0)/*SLEDGE*/{
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		
		selectedGunRF[1] = 1; 
		return;
	}
	if(operatorIndex == 1)/*THATCHER*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1; 
		return;
	}
	if(operatorIndex == 2)/*Ash*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){					
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){					
			selectedGunRF[1] = 1;
		}else{					
			selectedGunRF[1] = 1;
		}
		return;
	}	
	if(operatorIndex == 3)/*THERMITE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1;
		}				
		return;
	}
	if(operatorIndex == 4)/*TWITCH*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){				
			selectedGunRF[0] = 1;
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 5)/*MONTAGNE*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else if(gunIndex[GUN_SECONDARY] == 2){	
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 6)/*GLAZ*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{	
			selectedGunRF[1] = 1; 
		}
		return;
	} 
	if(operatorIndex == 7)/*FUZE*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else if(gunIndex[GUN_PRIMARY] == 2){
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 3){
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{	
			selectedGunRF[1] = 1; 
		}
		return;			
	} 
	if(operatorIndex == 8)/*BLITZ*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 9)/*IQ*/{   
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else if (gunIndex[GUN_PRIMARY] == 2){	
			selectedGunRF[0] = 0;
		}else if (gunIndex[GUN_PRIMARY] == 3){						
			selectedGunRF[0] = 0;
		}
		selectedGunRF[1] = 1; 
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*BUCK*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1;
		return;	
	}
	if(operatorIndex == 11)/*BLACKBEARD*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1;
		return;
	}
	if(operatorIndex == 12)/*CAPITÃO*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0;
		}
		selectedGunRF[1] = 1;
		return;		
	}
	if(operatorIndex == 13)/*HIBANA*/{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 1; 
		}			
		return;	
	}
	//══▶Year 2
	if(operatorIndex == 14)/*JACKAL*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}				
		return;
	}
	if(operatorIndex == 15)/*YING*/{ 	
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{   
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{					
			selectedGunRF[0] = 0;
		}
		selectedGunRF[1] = 1;				
		return;
	}
	if(operatorIndex == 17)/*DOKKAEBI */{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 1;
		}else{
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 0;
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*LION*/{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			selectedGunRF[0] = 1;   
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	if(operatorIndex == 19)/*FINKA*/{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	if(operatorIndex == 20)/*MAVERICK */{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 1;
		}else{
			selectedGunRF[0] = 0;
		}	
		selectedGunRF[1] = 1;
		return;
	}
	if(operatorIndex == 21)/*NOMAD*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1;
		}
		
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*GRIDLOCK*/{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0;
		}
		return;
	}
	if(operatorIndex == 23)/*NOKK*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 24)/*Amaru */{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 0; 
		}else{
			selectedGunRF[1] = 0;
		}
		return;
	}
	if(operatorIndex == 25)/*KALI*/{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			selectedGunRF[0] = 1;		
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*IANA*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{ 
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	if(operatorIndex == 27)/*ACE*/{   
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1;
		return;
	}	
	if(operatorIndex == 28)/*ZERO*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){	
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}	
	//══▶Year 6
	if(operatorIndex == 29)/*FLORES*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1;
		return;
	}
	if(operatorIndex == 30)/*OSA*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0;
		}
		selectedGunRF[1] = 1;
		
		return;
	}
}
function LoadPrimaryGunInfo(){
	gunCount[0] 			= 2;
	operatorWithFrags 		= FALSE;
	
	if(operatorIndex == 0)/*SLEDGE*/{
		operatorWithFrags = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(37,37, 10, 11,11, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 1)/*THATCHER*/{
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(54,54, 30, -9,-7, 30);
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(43,43, 30, 7,14, 10);
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		
		return;
	}
	if(operatorIndex == 2)/*Ash*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){					
			ConfigurePrimary(37,37, 30, -10,-6 , 10);
		}else{
			ConfigurePrimary(47,47, 30, -11,-11, 10);
		}
		return;
	}		
	if(operatorIndex == 3)/*THERMITE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(44,44, 20, 6, 7, 20);
		}else{
			ConfigurePrimary(45,45, 30, -3,-3, 30);
		}			
		return;
	}
	if(operatorIndex == 4)/*TWITCH*/{  
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(59,59, 30, -4,-2, 10);
		}else if(gunIndex[GUN_PRIMARY] == 2){				
			ConfigurePrimary(38,38, 30, -3,-1, 30);
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 5)/*MONTAGNE*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(25,25, 30, 2,2, 30);
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(25,25, 30, 2,2, 30);
		}
		return;
	}
	if(operatorIndex == 6)/*GLAZ*/{  
		gunCount[0] = 1;
		operatorWithFrags = TRUE;
		ConfigurePrimary(35,35, 30, -3,-3, 30);
		return;
	} 
	if(operatorIndex == 7)/*FUZE*/{  
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(54,54, 30, -13,-9, 10);
		}else if(gunIndex[GUN_PRIMARY] == 2){
			ConfigurePrimary(52,52, 30, -1,-3, 10);
		}else if(gunIndex[GUN_PRIMARY] == 3){
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;			
	} 
	if(operatorIndex == 8)/*BLITZ*/{  
		gunCount[0] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(25,25, 30, 0,0, 30);
		}
		return;
	}
	if(operatorIndex == 9)/*IQ*/{   
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(39,39, 30, -5,-7, 10);
		}else if (gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(51,51, 30, -3,1, 10);
		}else if (gunIndex[GUN_PRIMARY] == 3){						
			ConfigurePrimary(50,50, 30, -8,-6, 10);
		}
		
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*BUCK*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(40,40, 30, -5,-5, 10);
		}else{
			ConfigurePrimary(41,41, 30, 0,-4, 10);
		}
		return;	
	}
	if(operatorIndex == 11)/*BLACKBEARD*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(46,46, 30,9,11, 10);
		}else{
			ConfigurePrimary(52,52, 30, -5,1, 10);
		}		
		return;
	}
	if(operatorIndex == 12)/*CAPITÃO*/{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(38,38, 30, -2,-2, 10);
		}else{
			ConfigurePrimary(42,42, 30, -4,-3, 10);
		}		
		return;		
	}
	if(operatorIndex == 13)/*HIBANA*/{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(58,59, 30, -16,-14, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}			
		return;	
	}
	//══▶Year 2
	if(operatorIndex == 14)/*JACKAL*/{ 
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(50,50, 30, -5,-6, 10);
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}			
		return;
	}
	if(operatorIndex == 15)/*YING*/{ 	
		if(gunIndex[GUN_PRIMARY] == 1){		
			ConfigurePrimary(48,48, 30, 3,5, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}		
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(52,52, 30, -4,-2, 10);
		}else{					
			ConfigurePrimary(44,44, 30, -3,-2, 10);
		}		
		return;
	}
	if(operatorIndex == 17)/*DOKKAEBI */{  
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(43,43, 30, -8,-9, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*LION*/{  
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(49,49, 30, 9,-3, 10);
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(36,36, 30, -3,-2, 10);
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 19)/*FINKA*/{   
		gunCount[0] = 3;
		operatorWithFrags = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(41, 41, 30, -3, -1, 10);
		}else if(gunIndex[GUN_PRIMARY] == 2){	
			ConfigurePrimary(45,45, 30, -7,-6, 10);
		}else if(gunIndex[GUN_PRIMARY] == 3){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 20)/*MAVERICK */{   
		operatorWithFrags = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(40,40, 30, -3,-2, 10);
		}else{
			ConfigurePrimary(50,50, 30, -11,-8, 10);
		}	
		return;
	}
	if(operatorIndex == 21)/*NOMAD*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(50,50, 30, -3,-6, 10);
		}else{
			ConfigurePrimary(49,49, 30, -4,-8, 10);
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*GRIDLOCK*/{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(42,42, 30, 2,-5, 10);
		}else{
			ConfigurePrimary(44,44, 30, -3,-5, 10);
		}
		return;
	}
	if(operatorIndex == 23)/*NOKK*/{ 
		operatorWithFrags = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(46,46, 30, 9,8, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 24)/*Amaru */{   
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(54,54, 30, -10,-10, 10);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 25)/*KALI*/{   
		gunCount[0] 			= 1;
		if(gunIndex[GUN_PRIMARY] == 1){	
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*IANA*/{
		operatorWithFrags = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(46,46, 30, -5,-7, 10);
		}else{ 
			ConfigurePrimary(51,51, 30, -11,-14, 10);
		}
		
		return;
	}
	if(operatorIndex == 27)/*ACE*/{   
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(43,43, 15, -2,-1, 15);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}	
		return;
	}	
	if(operatorIndex == 28)/*ZERO*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(51, 51, 30, 5, 12, 10);
		}else{
			ConfigurePrimary(52, 52, 30, -4,-9, 10);
		}
		return;
	}	
	//══▶Year 6
	if(operatorIndex == 29)/*FLORES*/{  
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}
		return;
	}	
	if(operatorIndex == 30)/*OSA*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(44,44, 20, 6, 7, 20);
		}else{
			ConfigurePrimary(35,35, 30, -3,-3, 30);
		}			
		return;
	}
}
function LoadSecondaryGunInfo(){
	gunCount[1] 			= 2;
	
	if(operatorIndex == 0)/*SLEDGE*/{
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(45,45, 30, 4,4, 30);
		}else{ 
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 1)/*THATCHER*/{
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 2)/*Ash*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){					
			ConfigureSecondary(25,25, 30, 2,2, 30);
		}else{					
			ConfigureSecondary(31,31, 30, -3,-3, 30);
		}
		return;
	}		
	if(operatorIndex == 3)/*THERMITE*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(28,28, 30, 0,0, 30);
		}else{
			ConfigureSecondary(24,24, 30, 0,0, 30);
		}				
		return;
	}
	if(operatorIndex == 4)/*TWITCH*/{  
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(25,25, 30, 0,0, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 5)/*MONTAGNE*/{  
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else if(gunIndex[GUN_SECONDARY] == 2){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 6)/*GLAZ*/{  
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	} 
	if(operatorIndex == 7)/*FUZE*/{  
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;			
	} 
	if(operatorIndex == 8)/*BLITZ*/{  
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 9)/*IQ*/{   
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*BUCK*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;	
	}
	if(operatorIndex == 11)/*BLACKBEARD*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 12)/*CAPITÃO*/{  
		gunCount[1] = 1;
		ConfigureSecondary(28,28, 30, 3,3, 30);
		return;		
	}
	if(operatorIndex == 13)/*HIBANA*/{  
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}			
		return;	
	}
	//══▶Year 2
	if(operatorIndex == 14)/*JACKAL*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}				
		return;
	}
	if(operatorIndex == 15)/*YING*/{ 	
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{   
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 17)/*DOKKAEBI */{  
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*LION*/{  
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 19)/*FINKA*/{   
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(32, 32, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 20)/*MAVERICK */{   
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}
	if(operatorIndex == 21)/*NOMAD*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*GRIDLOCK*/{   
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 23)/*NOKK*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 24)/*Amaru */{   
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 25)/*KALI*/{   
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*IANA*/{
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	if(operatorIndex == 27)/*ACE*/{   
		gunCount[1] = 1;
		ConfigureSecondary(26,26, 30, 3, 2, 30);
		return;
	}	
	if(operatorIndex == 28)/*ZERO*/{  
		if(gunIndex[GUN_SECONDARY] == 1){	
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}else{
			ConfigureSecondary(35,35, 30, -3,-3, 30);
		}
		return;
	}
	//══▶Year 6
	if(operatorIndex == 29)/*FLORES*/{  
		gunCount[1] = 1;
		ConfigureSecondary(35,35, 30, -3,-3, 30);
		return;
	}	
	if(operatorIndex == 30)/*OSA*/{ 
		gunCount[1] = 1;
		ConfigurePrimary(35,35, 30, -3,-3, 30);			
		return;
	}
}
function RefresAbility(){
	if(operatorIndex == 5)/*IQ*/PrintAvilityName(0);
	if(operatorIndex == 16)/*ZOFIA*/PrintAvilityName(2);
	if(operatorIndex == 20)/*MAVERICK*/PrintAvilityName(4);	
	if(operatorIndex == 26)/*IANA*/PrintAvilityName(6);
	if(operatorIndex == 29)/*FLORES*/PrintAvilityName(8);
}
function ReleaseFrag(){ 
	if(ButtonHold(TacticalButton) && get_ptime(TacticalButton) < FRAG_COOK_TIME){
		CookingGranadeMsg(abs(get_ptime(TacticalButton)-FRAG_COOK_TIME));
	}
	if(ButtonHold(TacticalButton) && get_ptime(TacticalButton) >= FRAG_COOK_TIME){
		BlockButton = TacticalButton;
		if(abilityActive)RefresAbility();
		else DisplaySwitchGun();
	}
}
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main Functions				║
╚═══════════════════════════════════╝
*/
function ActivateOperator(){
	combo_run(ToggleOn);
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;
	LoadPrimaryGunInfo();
	LoadSecondaryGunInfo();
	saveIndex = FindSaveBucket();
	if(saveIndex != 99) LoadARInfo();
	LoadGunRF();
	activeGunRF	= selectedGunRF[activeGun];
	DisplayMod(GAME_MOD);
	abilityDeployCount = 0;
	UnsetAllButtons();
}
function AdjustRecoilValue(value){
	if(antirecoilMenuIndex == 0){
		if(value == 1 || value == 2) HorizontalStart[activeGun] = EditARValues(HorizontalStart[activeGun]);
		if(value == 3 || value == 4) VerticalStart[activeGun] = EditARValues(VerticalStart[activeGun]);
		HorizontalEnd[activeGun] = HorizontalStart[activeGun];
		VerticalEnd[activeGun] = VerticalStart[activeGun];
	}else if(antirecoilMenuIndex == 1){
		if(value == 1 || value == 2) HorizontalEnd[activeGun] = EditARValues(HorizontalEnd[activeGun]);
		if(value == 3 || value == 4) VerticalEnd[activeGun] = EditARValues(VerticalEnd[activeGun]);
	}else if(antirecoilMenuIndex == 2){
		if(value == 1 || value == 2) VerticalTime[activeGun] = EditARValues(VerticalTime[activeGun]);
	}else if(antirecoilMenuIndex == 3){
		if(value == 1 || value == 2) HorizontalTime[activeGun] = EditARValues(HorizontalTime[activeGun]);
	}
	DisplayAntiRecoilMenu(value);
}
function ConfigurePrimary(vStart, vEnd, vDuration, hStart, hEnd, hDuration){
	VerticalStart[0] 	= vStart;
	VerticalEnd[0] 		= vEnd;
	VerticalTime[0] 	= vDuration;
	HorizontalStart[0] 	= hStart;
	HorizontalEnd[0] 	= hEnd;
	HorizontalTime[0] 	= hDuration;
}
function ConfigureSecondary(vStart, vEnd, vDuration, hStart, hEnd, hDuration){
	VerticalStart[1] 	= vStart;
	VerticalEnd[1] 		= vEnd;
	VerticalTime[1] 	= vDuration;
	HorizontalStart[1] 	= hStart;
	HorizontalEnd[1] 	= hEnd;
	HorizontalTime[1] 	= hDuration;
}
function CloseAvility(){
	abilityReleasingTime 	= 0;
	abilityCountDown		= 0;
	abilityTimeCheck		= FALSE;
	abilityActive			= FALSE;
	DisplaySwitchGun();	
}
function DisplayAntiRecoilMenu(charIndex){
	ClearScroll(LINE_TOP);
	DisplayFrame();
	
	if(charIndex == 0) DisplayAntiRecoilDirectionMenu();
	else DisplayAntiRecoilMenuAction(charIndex);

	if(antirecoilMenuIndex < 2){
		putc_oled(1, 86);
		puts_oled(20, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
		putc_oled(1, 72);
		puts_oled(100, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
	}
	
	printf(CenterText(antirecoildMenu[antirecoilMenuIndex + 1] - antirecoildMenu[antirecoilMenuIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, antirecoildMenu[antirecoilMenuIndex]);
	if(antirecoilMenuIndex == 0){
		NumberToString(VerticalStart[activeGun], FindDigits(VerticalStart[activeGun]), 15, LINE_CENTER);
		NumberToString(HorizontalStart[activeGun], FindDigits(HorizontalStart[activeGun]), 90, LINE_CENTER);
	}else if(antirecoilMenuIndex == 1){
		NumberToString(VerticalEnd[activeGun], FindDigits(VerticalEnd[activeGun]), 15, LINE_CENTER);
		NumberToString(HorizontalEnd[activeGun], FindDigits(HorizontalEnd[activeGun]), 90, LINE_CENTER);
	}else if(antirecoilMenuIndex == 2){
		DisplayAntiRecoilValue(VerticalTime[activeGun] * 100, FindDigits(VerticalTime[activeGun] * 100));
	}else if(antirecoilMenuIndex == 3){
		DisplayAntiRecoilValue(HorizontalTime[activeGun] * 100, FindDigits(HorizontalTime[activeGun] * 100));
	}
}	
function DisplayAntiRecoilMenuAction(charIndex){
	if(charIndex == 1){
		putc_oled(1, 32); //LEFT
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		if(antirecoilMenuIndex > 1) return;
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 2){ //RIGHT
		putc_oled(1, 32);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		if(antirecoilMenuIndex > 1) return;
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);			
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 3){ //UP
		putc_oled(1, 32);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 4){//DOWN
		putc_oled(1, 32);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
	}
}
function DisplayAntiRecoilDirectionMenu(){
	
	putc_oled(1, 133);
	puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 134);
	puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	if(antirecoilMenuIndex > 1) return;
	putc_oled(1, 131);
	puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 132);
	puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
}
function DisplayAntiRecoilValue(value,f_digits){
	        
	i_val = 1;  chr_val = 10000;
    
	if(value < 0){          
         putc_oled(i_val,45);    
         i_val += 1;
         value = abs(value);
	} 
	for(c_val = 5; c_val >= 1; c_val--){
	    if(f_digits >= c_val){
            putc_oled(i_val, (value / chr_val) + 48);
            value = value % chr_val;
            i_val +=  1; 
            if(c_val == 4){
                putc_oled(i_val,44);   
                i_val += 1;
            }
        }
        chr_val /= 10;
    }
    puts_oled(CenterText(i_val - 1,OLED_FONT_MEDIUM_WIDTH),47,OLED_FONT_MEDIUM,i_val - 1,OLED_WHITE); 
}
function DisplayConfiguration(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;

	DisplayFrame();	
	if(currentConfigModIndex == 4){
		printf(CenterText(configuration[currentConfigModIndex + 1] - configuration[currentConfigModIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
		printf(CenterText(toggleStatus[QTEnabled + 1] - toggleStatus[QTEnabled] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 5, OLED_FONT_MEDIUM, OLED_WHITE, toggleStatus[QTEnabled]);
	}else{
		printf(CenterText(sizeof(configurationText) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configurationText[0]);
		printf(CenterText(configuration[currentConfigModIndex + 1] - configuration[currentConfigModIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER , OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	}
	
	DisplayLeftRight();		    	
	LED(RED);
}
function DisplayEnterSlotNumber(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;
	DisplayFrame();
	
	printf(CenterText(enterSlotMsg[0 + 1] - enterSlotMsg[0] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP, 		OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[0]);
	printf(CenterText(enterSlotMsg[1 + 1] - enterSlotMsg[1] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 10, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[1]);
	printf(CenterText(enterSlotMsg[2 + 1] - enterSlotMsg[2] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 20, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[2]);
	
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, 45);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, secondScriptSlot + 48);
	puts_oled(55,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 43);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayGameMode(){
	DisplaySwitchGun();
}			
function DisplayGunSelection(){	
	DisplayFrame();
	DisplayGunIndex();
	DisplayLeftRight();
	DisplayGunName(); 
}
function DisplayGunIndex(){
	ClearScroll(LINE_TOP);
	if(activeGun == GUN_PRIMARY){
		printf(CenterText(gunIndexMsg[0 + 1] - gunIndexMsg[0] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, gunIndexMsg[0]);
	}else{
		printf(CenterText(gunIndexMsg[1 + 1] - gunIndexMsg[1] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, gunIndexMsg[1]);
	}
}
function DisplayMod(modIndex){	
   	currentMod 	 =  modIndex;
	UnsetAllButtons();
   	if(modIndex == OPERERATOR_TYPE_MOD) 	DisplayOperatorType();
   	if(modIndex == OPERATOR_SELECTION_MOD) 	DisplayOperatorSelection();
   	if(modIndex == ANTIRECOIL_MOD)			DisplayAntiRecoilMenu(0);
   	if(modIndex == GUN_SELECTION_MOD)		DisplayGunSelection();
   	if(modIndex == CONFIG_MOD)				DisplayConfiguration();
   	if(modIndex == RESET_MOD)				ResetOperator(); 	
   	if(modIndex == GAME_MOD)				DisplayGameMode(); 
   	if(modIndex == QUICK_TOGGLE_EDIT_MOD)	DisplayQuickTogglesEdit();    	
    if(modIndex == QUICK_TOGGLE_MOD){
    	toggleIndex = 0;
    	DisplayQuickToggles();
    }
}
function DisplayOperatorType(){
	displayOperatorTypeScrollOn	= TRUE;
	displayOperatorScrollOn		= FALSE;
	ClearScroll(LINE_TOP);
	DisplayFrame();
 	printf(5,25,OLED_FONT_MEDIUM, !operatorType, attackers[0]);		
	putc_oled(1,131);
	puts_oled(5,25,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, !operatorType);	
	printf(5,45,OLED_FONT_MEDIUM, operatorType, defenders[0]);	
	putc_oled(1,132);
	puts_oled(5,45,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, operatorType);
	ClearScroll(LINE_TOP);
} 	
function DisplayOperatorSelection(){
	if(operatorType == OPERERATOR_TYPE_DEFENDERS){
		currentMod = CHANGE_SLOT_MOD;
		DisplayEnterSlotNumber();
	}else{
		displayOperatorTypeScrollOn	= FALSE;
		displayOperatorScrollOn		= TRUE;
		DisplayFrame();	
		DisplayLeftRight();
		PrintOperatorName(LINE_CENTER);
		ClearScroll(LINE_TOP);
	}
}
function DisplayOperatorByYear(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;	
	DisplayFrame();
	operatorIndex				= operatorsByYear[operatorsByYearIndex];
	
	printf(CenterText(operationName[operatorsByYearIndex + 1] - operationName[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, operationName[operatorsByYearIndex]);
	printf(CenterText(operationName2[operatorsByYearIndex + 1] - operationName2[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, operationName2[operatorsByYearIndex]);
	printf(CenterText(operationYear[operatorsByYearIndex + 1] - operationYear[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_WHITE, operationYear[operatorsByYearIndex]);	
}
function DisplaySaveAR(){
	DisplayFrame();
	DisplayYesNo();
	printf(CenterText(sizeof(saveChanges)  - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_WHITE, saveChanges[0]);
	printf(CenterText(sizeof(saveChanges02)  - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 5, OLED_FONT_MEDIUM, OLED_WHITE, saveChanges02[0]);
}
function DisplaySwitchGun(){
	DisplayFrame();	
	printf(CenterText(operatorName[operatorIndex + 1] - operatorName[operatorIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);		
	DisplayGunName();
	DisplayGunType();
	activeGunRF	= selectedGunRF[activeGun];
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
function DisplayScrollMode(){
	if(displayOperatorTypeScrollOn)	DisplayOperatorTypeScroll();
	if(displayOperatorScrollOn)		DisplayOperatorSelectionScroll();
}
function DisplayOperatorTypeScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorTypeMsg)/sizeof(operatorTypeMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorTypeMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);		
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayOperatorSelectionScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorSelMsg)/sizeof(operatorSelMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorSelMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayQuickToggles(){
	DisplayFrame();
	printf(CenterText(toggleValuesMsg[toggleIndex + 1] - toggleValuesMsg[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleValuesMsg[toggleIndex]);
	DisplayLeftRight();		    	
	LED(RED);
}
function DisplayQuickTogglesEdit(){
	DisplayFrame();
	printf(CenterText(toggleValuesMsg[toggleIndex + 1] - toggleValuesMsg[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, toggleValuesMsg[toggleIndex]);
	
	if(toggleIndex == 0) NumberToString(crouchSpamSpeed, 	FindDigits(crouchSpamSpeed), 	CenterText(sizeof(crouchSpamSpeed) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 1) NumberToString(autoLeanSpeed, 		FindDigits(autoLeanSpeed), 		CenterText(sizeof(autoLeanSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 2) NumberToString(strafeSpeed, 		FindDigits(strafeSpeed), 		CenterText(sizeof(strafeSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 3) NumberToString(leanSpamSpeed, 		FindDigits(leanSpamSpeed), 		CenterText(sizeof(leanSpamSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 4) NumberToString(tBagSpeed, 			FindDigits(tBagSpeed), 			CenterText(sizeof(tBagSpeed) - 1, 		OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 5) NumberToString(rapidFireSpeed, 	FindDigits(rapidFireSpeed), 	CenterText(sizeof(rapidFireSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);	
		
	LED(RED);
}
function DisplayLeftRight(){
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, 133);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 134);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayFrame(){
	cls_oled(0);
	rect_oled(1,1,127,63,0,1);
}
function DisplayYesNo(){
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, 131);
	puts_oled(50, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 132);
	puts_oled(70,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
	printf(10, 40, OLED_FONT_MEDIUM, !yesNoIndex, yes[0]);
	printf(95, 40, OLED_FONT_MEDIUM, yesNoIndex, no[0]);
}
function LoadARInfo(){
	if(saveIndex == 99) return;
	//Vertical Primary
	saveVar = (-32768 - (6 * saveIndex)) * -1;	
	pval_data = get_pvar(saveVar, -32767, 32767, 0);
	VerticalStart[0] 	= unpack_int16_to_int8(pval_data, 0)
	VerticalEnd[0]   	= unpack_int16_to_int8(pval_data, 1)
	//Horizontal Primary
	saveVar = (-32768 - (6 * saveIndex) - 1) * -1;	
    pval_data = get_pvar(saveVar, -32767, 32767, 0);
    HorizontalStart[0] 	= unpack_int16_to_int8(pval_data, 0)
	HorizontalEnd[0]   	= unpack_int16_to_int8(pval_data, 1)
    //Horizontal Primary
    saveVar = (-32768 - (6 * saveIndex) - 2) * -1;
	pval_data = get_pvar(saveVar, -32767, 32767, 0);
  	VerticalStart[1] 	= unpack_int16_to_int8(pval_data, 0)
	VerticalEnd[1]   	= unpack_int16_to_int8(pval_data, 1)
  	//Horizontal Secondary
  	saveVar = (-32768 - (6 * saveIndex) - 3) * -1;
	pval_data = get_pvar(saveVar, -32767, 32767, 0);
	HorizontalStart[1] 	= unpack_int16_to_int8(pval_data, 0)
	HorizontalEnd[1]   	= unpack_int16_to_int8(pval_data, 1)
    //Vertical Time, Horizontal Time, Gun Index --- Primary	    
	saveVar = (-32768 - (6 * saveIndex) - 4) * -1;
    pval_data = get_pvar(saveVar, -32767, 32767, 0);
    VerticalTime[0]  	= (pval_data / 100) % 100;
	HorizontalTime[0] 	= pval_data % 100;
	gunIndex[0]			= (pval_data / 10000) + 1;
	Set(TRACE_1, VerticalTime[0]);
	
    //Vertical Time, Horizontal Time, Gun Index --- Secondary
    saveVar = (-32768 - (6 * saveIndex) - 5) * -1;
	pval_data = get_pvar(saveVar, -32767, 32767, 0);
  	VerticalTime[1]  	= (pval_data / 100) % 100;
	HorizontalTime[1] 	= pval_data % 100;
	gunIndex[1]			= (pval_data / 10000) + 1;
}
function SaveAR(){
	if(saveIndex == 99) return;
	combo_run(SAVE)
	
	//Vertical Primary
	saveVar = (-32768 - (6 * saveIndex)) * -1;	
	pval_data = pack_int8_to_int16(VerticalStart[0], VerticalEnd[0]);
	set_pvar(saveVar, pval_data); 
	//Horizontal Primary
	saveVar = (-32768 - (6 * saveIndex) - 1) * -1;	
	pval_data = pack_int8_to_int16(HorizontalStart[0], HorizontalStart[0]);
	set_pvar(saveVar, pval_data); 
	//Vertical Secondary
	saveVar = (-32768 - (6 * saveIndex) - 2) * -1;	
	pval_data = pack_int8_to_int16(VerticalStart[0], VerticalEnd[0]);
	set_pvar(saveVar, pval_data); 
	//Horizontal Secondary
	saveVar = (-32768 - (6 * saveIndex) - 3) * -1;	
	pval_data = pack_int8_to_int16(HorizontalStart[0], HorizontalStart[0]);
	set_pvar(saveVar, pval_data); 
	//Vertical Time, Horizontal Time, Gun Index --- Primary
	tempPack[0] = (gunIndex[GUN_PRIMARY] - 1) * pow(10, 2) + VerticalTime[0];
	tempPack[0] = tempPack[0] * pow(10, 2) + HorizontalTime[0];
	saveVar = (-32768 - (6 * saveIndex) - 4) * -1;
	set_pvar(saveVar, tempPack[0]); 
	//Vertical Time, Horizontal Time, Gun Index --- Secondary
	tempPack[1] = (gunIndex[GUN_SECONDARY] - 1) * pow(10, 2) + VerticalTime[1];
	tempPack[1] = tempPack[1] * pow(10, 2) + HorizontalTime[1];
	saveVar = (-32768 - (6 * saveIndex) - 5) * -1;	
	set_pvar(saveVar, tempPack[1]);

	saveMatix[saveIndex] = operatorIndex + 1;
	//Build matix
	pval_data = pack_int8_to_int16(saveMatix[0], saveMatix[1]);
	set_pvar(SPVAR_55, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[2], saveMatix[3]);
	set_pvar(SPVAR_56, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[4], saveMatix[5]);
	set_pvar(SPVAR_57, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[6], saveMatix[6]);
	set_pvar(SPVAR_58, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[8], saveMatix[9]);
	set_pvar(SPVAR_59, pval_data);
}
function LoadSaveMatrix(){
	//Build matix
	
	pval_data = get_pvar(SPVAR_55, -32767, 32767, 0);  
	saveMatix[0]     = unpack_int16_to_int8(pval_data, 0);    
    saveMatix[1]     = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_56, -32767, 32767, 0);  
	saveMatix[2]     = unpack_int16_to_int8(pval_data, 0);    
    saveMatix[3]     = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_57, -32767, 32767, 0);  
	saveMatix[4]     = unpack_int16_to_int8(pval_data, 0);    
    saveMatix[5]     = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_58, -32767, 32767, 0);  
	saveMatix[6]     = unpack_int16_to_int8(pval_data, 0);    
    saveMatix[7]     = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_59, -32767, 32767, 0);  
	saveMatix[8]     = unpack_int16_to_int8(pval_data, 0);    
    saveMatix[9]     = unpack_int16_to_int8(pval_data, 1); 
}
function FindSaveBucket(){
	for(forIndex = 0; forIndex < 9 ; forIndex++)
	{
		if(saveMatix[forIndex] == operatorIndex + 1) return forIndex;
	}
	return 99;
}
function FindOpenBucket(){
	for(forIndex = 0; forIndex < 9 ; forIndex++)
	{
		if(saveMatix[forIndex] == 0){
			return forIndex;
		}
	}
	return 99;
}
function LoadSlotNumber(){
	pval_data      	= get_pvar(SPVAR_63, -32767, 32767, 0); 
	tempPack[0]  	= unpack_int16_to_int8(pval_data, 0);    
    if(tempPack[0] != 0){
    	slotNumber = tempPack[0];    	    
    }
}
function LoadSettings(){
	pval_data		= get_pvar(SPVAR_62, -32767, 32767, 0);
	if(pval_data == 0) return;
    tBagOn 			= unpack_usigned(pval_data, 0, 1);
	crouchSpamOn	= unpack_usigned(pval_data, 1, 1);
	leanSpamOn 		= unpack_usigned(pval_data, 2, 1);
	pronShotOn 		= unpack_usigned(pval_data, 3, 1);	
	rf4AllOn 		= unpack_usigned(pval_data, 4, 1);
	autoLeanOn 		= unpack_usigned(pval_data, 5, 1);
	rapidFireOn 	= unpack_usigned(pval_data, 6, 1);
	QTEnabled 		= unpack_usigned(pval_data, 7, 1);
}
function PrintAvilityName(position){
	DisplayFrame();
	printf(CenterText(avilityName[position + 1] - avilityName[position] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, avilityName[position]);
	printf(CenterText(avilityName[position + 2] - avilityName[position + 1] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10, OLED_FONT_MEDIUM, OLED_WHITE, avilityName[position + 1]);
}
function PrintOperatorName(line){
	printf(CenterText(operatorName[operatorIndex + 1] - operatorName[operatorIndex] - 1, OLED_FONT_MEDIUM_WIDTH), line, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);
}
function PrintGunName(position, gunName){
	printf(CenterText(position - 1 , OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, gunName);
}
function PrintGunType(gunIndex){
	printf(CenterText(gunType[gunIndex + 1] - gunType[gunIndex] - 1, OLED_FONT_SMALL_WIDTH), LINE_BOTTOM, OLED_FONT_SMALL, OLED_WHITE, gunType[gunIndex]);
}
function ResetOperator(){
	saveIndex = FindSaveBucket();
	if(saveIndex == 99) return;
	saveMatix[saveIndex] = 0;
	
	//Build matix
	pval_data = pack_int8_to_int16(saveMatix[0], saveMatix[1]);
	set_pvar(SPVAR_55, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[2], saveMatix[3]);
	set_pvar(SPVAR_56, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[4], saveMatix[5]);
	set_pvar(SPVAR_57, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[6], saveMatix[6]);
	set_pvar(SPVAR_58, pval_data); 
	pval_data = pack_int8_to_int16(saveMatix[8], saveMatix[9]);
	set_pvar(SPVAR_59, pval_data);
	saveIndex = 99;
	gunIndex[0] = 1;
	gunIndex[1] = 1;
	ActivateOperator();
	DisplayMod(GAME_MOD);
}
function SaveSettings(){
  	pval_data = pack_usigned(pval_data, tBagOn,   		0, 1);
	pval_data = pack_usigned(pval_data, crouchSpamOn,   1, 1);
	pval_data = pack_usigned(pval_data, leanSpamOn,   	2, 1);
	pval_data = pack_usigned(pval_data, pronShotOn,   	3, 1);	
	pval_data = pack_usigned(pval_data, rf4AllOn,   	4, 1);
	pval_data = pack_usigned(pval_data, autoLeanOn,   	5, 1);
	pval_data = pack_usigned(pval_data, rapidFireOn,   	6, 1);
	pval_data = pack_usigned(pval_data, QTEnabled,   	7, 1);
	set_pvar(SPVAR_62,	pval_data);  	
	
	pval_data = pack_int8_to_int16(secondScriptSlot, 0);
  	set_pvar(SPVAR_63, 	pval_data);
}
function VerifyMinMax(value, min, max){
	if(value > max){
		value = min;
	}
	if(value < min){
		value = max;
	}
	return value;
}
	//Progressive AR functions
function p_complete() { 

    i_cnt++;
    if(i_cnt > VerticalTime[activeGun] * 10) 
    {
        i_cnt = VerticalTime[activeGun] * 10;
        return 1;
    }    
    return 0;
}  
function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  
int tempv;
function y_val() { 

    tempv = get_val(10);
    
    if(abs(tempv) < 10)
        tempv = 0;
        
    if(abs(tempv) > ar_y + 5)
        return tempv;
        
    return tempv + ar_y;           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > HorizontalTime[activeGun] * 10) 
    {
        i_cnt_h = HorizontalTime[activeGun] * 10 ;
        return 1;
    }
    return 0;
}   
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) 
    {
    	i_num_h = 0;
    	ar_x += i_val_h;
    }
    return ar_x;
} 
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}
/*
╔═══════Rainbow Six Siege═══════════╗
║			Combos					║
╚═══════════════════════════════════╝
*/
combo RapidFire {
    set_val(FireButton, 100);
    wait(40);
    set_val(FireButton, 0);
    wait(40);
    set_val(FireButton, 0);
    wait(rapidFireSpeed);
} 
combo TeaBag(){ 
    Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(tBagSpeed);
	Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(tBagSpeed);
}
combo CrouchSpam{
    Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(crouchSpamSpeed);
	Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(crouchSpamSpeed);
}
combo LeanSpam{
	set_val(MeleeButton, 100);
	wait(100);
	set_val(MeleeButton, 0);
	wait(leanSpamSpeed);
	set_val(SprintButton, 100);
	wait(100);
	set_val(SprintButton, 0);
	wait(leanSpamSpeed);
}
combo ToggleOn{
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait(150);
	reset_rumble();
}
combo ToggleOff {
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait (150);
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait(150);
    reset_rumble();
}
combo QuickToggleNotify{ 	
   	cls_oled(0);	
   	printf(CenterText(toggleMessage[toggleIndex + 1] - toggleMessage[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleMessage[toggleIndex]);
   	printf(CenterText(toggleStatus[toggleValue + 1] - toggleStatus[toggleValue] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleStatus[toggleValue]);
   	wait(450);
   	SaveSettings();
   	DisplaySwitchGun();
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
combo SAVE { 	
   	cls_oled(0);						
   	printf(CenterText(sizeof(saveMessage) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER , OLED_FONT_MEDIUM, OLED_WHITE, saveMessage[0]);
   	call(ToggleOn);
   	wait(250);
   	DisplaySwitchGun();
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
combo Strafe{
	set_val(LxButton, -40); 
	wait(strafeSpeed); 
	set_val(LxButton, 40);
	wait(strafeSpeed);
}
combo FastPickLeft{
	Set(SprintButton, 100);
	wait(100);
	Set(LxButton, -100); 
	wait(200);
	Set(LxButton, 0);
	wait(10);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(LxButton, 100);	
	wait(249);
	Set(LxButton, 0);
	wait(10);
	Set(SprintButton, 100);
	wait(100);
}
combo FastPickRight{
	Set(MeleeButton, 100);
	wait(100);
	Set(LxButton, 100); 
	wait(200);
	Set(LxButton, 0);
	wait(10);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(LxButton, -100);	
	wait(249);
	Set(LxButton, 0);
	wait(10);
	Set(MeleeButton, 100);
	wait(100);
}
combo FastPickUp{
	Set(CrouchButton, 100);
	wait(100);
	Set(CrouchButton, 0); 
	wait(200);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(CrouchButton, 100);
	wait(50);
	Set(CrouchButton, 0); 
	wait(5);
}
/*
╔═══════Rainbow Six Siege═══════════╗
║	    Utilities functions			║
╚═══════════════════════════════════╝
*/
	//Information functions	
int c_val, chr_val;
function EditQTValues(value, min, max){
	if(get_ival(AdsButton)){
		if(event_press(RightButton)){
	 		value += 1;                           
	 		if(value > max ) value = max;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 1;                           
			if(value < min) value = min; 	        
		}
	}else{
		if(event_press(RightButton)){
	 		value += 10;                           
	 		if(value > max ) value = max;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 10;                           
			if(value < min) value = min; 	        
		}
	}
	return value;
}
function EditARValues(value){
	if(get_ival(AdsButton)){
		//Vertical Adjustments
		if(event_press(UpButton)){
	 		value -= 1;                           
	 		if(value < 0) value = 0;   	               	            
		}
		if(event_press(DownButton)){
			value += 1;                           
			if(value > 99) value = 99; 	        
		}
		//Horizontal Adjustments
		if(event_press(RightButton)){
	 		value += 1;                           
	 		if(value > 99 ) value = 99;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 1;                           
			if(value < -99) value = -99; 	        
		}
	}
	if(!get_ival(AdsButton)){
		//Vertical Adjustments
		if(event_press(UpButton)){
	 		value -= 10;                           
	 		if(value < 0) value = 0;   	               	            
		}
		if(event_press(DownButton)){
			value += 10;                           
			if(value > 99) value = 99; 	        
		}
		//Horizontal Adjustments
		if(event_press(RightButton)){
	 		value += 10;                           
	 		if(value > 99) value = 99;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 10;                           
			if(value < -99) value = -99; 	        
		}
	}
	return value;
}
function ClearScroll(scrollLine){
	for (forIndex = 0; forIndex < 127; forIndex++) {		 
		PrintCharacter(32, forIndex, scrollLine);
	}
}	
	//Buttons funntions
function UnsetAllButtons(){
	Unset(MenuButton);
	Unset(ReloadButton);
    Unset(SwapButton);
    Unset(UpButton);
	Unset(DownButton);
	Unset(CrouchButton);
    Unset(SelectButton);
    Unset(LeftButton);
    Unset(RightButton);
    Unset(AdsButton);
    Unset(TacticalButton);
    Unset(ModsButton);
}
function ButtonClear(){
	if(BlockButton){
		Unset(BlockButton);
		BlockButton = 0;
	}
	if(FncBlockButton){
		Unset(FncBlockButton);
		FncBlockButton = 0;
	}
}
function ButtonPress(button){
	return event_press(button);
} 
function ButtonRelease(button){return event_release(button);}
function ButtonHold(button){
	return get_val(button);
} 	
function DoubleTab(button) { 
	if(event_press(button) && get_brtime(button) < 300) return TRUE;                                     
	return 0;                                        
}  
function Set(id,val){set_val(id, val);} 
function Unset(id){set_val(id, 0);}
	//Utilities functions
function CenterText(f_chars,f_font) {                                                         
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}   
function NumberToString(f_val,f_dgts, x_val,y_val) {
 
	i_val = 1;  chr_val = 10000;
    
	if(f_val < 0){          
         putc_oled(i_val,45);    
         i_val += 1;
         f_val = abs(f_val);
	} 
	for(c_val = 5; c_val >= 1; c_val--){
	    if(f_dgts >= c_val) {
            putc_oled(i_val, (f_val / chr_val) + 48);
            f_val = f_val % chr_val;
            i_val +=  1; 
            if(c_val == 4){
                putc_oled(i_val,44);   
                i_val += 1;
            }
        }
        chr_val /= 10;
    }  

    puts_oled(x_val, y_val, 1,i_val - 1, 1);    
} 
function PrintCharacter(character, column, scrollLine){
	if(column > 0 && column < 127){
		putc_oled(1,character);
		puts_oled(column, scrollLine, 0, 1, 1);
	}
}	
function FindDigits(digits) {                         
	//  FindDigits(value)                                
	//        return Number of Digits in Value Passed     		                                                      
    digits = abs(digits);                               
    if(digits / 10000 > 0) return 5;                   
    if(digits /  1000 > 0) return 4;                   
    if(digits /   100 > 0) return 3;                   
    if(digits /    10 > 0) return 2;                   
                          return 1;                  
}
function LED(Colour) {

    set_led(LED_1,duint8(Colour*4));
    set_led(LED_2,duint8((Colour*4) + 1));
    set_led(LED_3,duint8((Colour*4) + 2));
    set_led(LED_4,duint8((Colour*4) + 3));
}
int pval_data, ret, mask;
//position range [0..1]   |  ret range = [-127..127]
function pack_int8_to_int16(int var1, int var2){
	ret = 0;
	
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}

	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
	
	return ret;
}
//position range [0..1]   |  ret range = [-127..127]
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	
	return ret;
}
//position range [0..15]
function pack_usigned(int pvar, int ret, int position, int number_of_bits){
	for(i_val = position; i_val< (number_of_bits + position); i_val++)
	{
		pvar = pvar & (~(1 << i_val));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}
//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	
	for(i_val = 0; i_val< number_of_bits ; i_val++)
	{
		mask = mask | (1 << i_val);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}