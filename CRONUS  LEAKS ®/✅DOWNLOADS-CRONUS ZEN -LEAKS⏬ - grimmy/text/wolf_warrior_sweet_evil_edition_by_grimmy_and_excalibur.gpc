// GPC Online Library
// wolf_warrior_sweet_evil_edition_by_grimmy_and_excalibur.gpc

// GPC Online Library
// wolf_warrior_v2_sweet_evil_edition_by_grimmy_&_excalibur.gpc

/* 
                                                                                                                                                               
$$\      $$\  $$$$$$\  $$\       $$$$$$$$\       $$\      $$\  $$$$$$\  $$$$$$$\  $$$$$$$\  $$$$$$\  $$$$$$\  $$$$$$$\         $$$$$$\      $$$$$$\  
$$ | $\  $$ |$$  __$$\ $$ |      $$  _____|      $$ | $\  $$ |$$  __$$\ $$  __$$\ $$  __$$\ \_$$  _|$$  __$$\ $$  __$$\       $$  __$$\    $$$ __$$\ 
$$ |$$$\ $$ |$$ /  $$ |$$ |      $$ |            $$ |$$$\ $$ |$$ /  $$ |$$ |  $$ |$$ |  $$ |  $$ |  $$ /  $$ |$$ |  $$ |      \__/  $$ |   $$$$\ $$ |
$$ $$ $$\$$ |$$ |  $$ |$$ |      $$$$$\          $$ $$ $$\$$ |$$$$$$$$ |$$$$$$$  |$$$$$$$  |  $$ |  $$ |  $$ |$$$$$$$  |       $$$$$$  |   $$\$$\$$ |
$$$$  _$$$$ |$$ |  $$ |$$ |      $$  __|         $$$$  _$$$$ |$$  __$$ |$$  __$$< $$  __$$<   $$ |  $$ |  $$ |$$  __$$<       $$  ____/    $$ \$$$$ |
$$$  / \$$$ |$$ |  $$ |$$ |      $$ |            $$$  / \$$$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |  $$ |  $$ |  $$ |$$ |  $$ |      $$ |         $$ |\$$$ |
$$  /   \$$ | $$$$$$  |$$$$$$$$\ $$ |            $$  /   \$$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$$$$$\  $$$$$$  |$$ |  $$ |      $$$$$$$$\ $$\\$$$$$$  /
\__/     \__| \______/ \________|\__|            \__/     \__|\__|  \__|\__|  \__|\__|  \__|\______| \______/ \__|  \__|      \________|\__|\______/ 
                                                                                                                                                     
                                                                                                                                                     
                                                                                                                                                     
                                 ╔╗ ╦ ╦  ╔═╗╦═╗╦╔╦╗╔╦╗╦ ╦  ╔═╗╔╗╔╔╦╗  ╔═╗═╗ ╦╔═╗╔═╗╦  ╦╔╗ ╦ ╦╦═╗
                                 ╠╩╗╚╦╝  ║ ╦╠╦╝║║║║║║║╚╦╝  ╠═╣║║║ ║║  ║╣ ╔╩╦╝║  ╠═╣║  ║╠╩╗║ ║╠╦╝
                                 ╚═╝ ╩   ╚═╝╩╚═╩╩ ╩╩ ╩ ╩   ╩ ╩╝╚╝═╩╝  ╚═╝╩ ╚═╚═╝╩ ╩╩═╝╩╚═╝╚═╝╩╚═
								
								
 /$$      /$$  /$$$$$$  /$$$$$$$  /$$$$$$$$  /$$$$$$  /$$   /$$ /$$$$$$$$       /$$      /$$ /$$      /$$       /$$ /$$$$$$  /$$      /$$
| $$  /$ | $$ /$$__  $$| $$__  $$|_____ $$  /$$__  $$| $$$ | $$| $$_____/      | $$$    /$$$| $$  /$ | $$      /$$//$$__  $$| $$  /$ | $$
| $$ /$$$| $$| $$  \ $$| $$  \ $$     /$$/ | $$  \ $$| $$$$| $$| $$            | $$$$  /$$$$| $$ /$$$| $$     /$$/| $$  \__/| $$ /$$$| $$
| $$/$$ $$ $$| $$$$$$$$| $$$$$$$/    /$$/  | $$  | $$| $$ $$ $$| $$$$$         | $$ $$/$$ $$| $$/$$ $$ $$    /$$/ | $$      | $$/$$ $$ $$
| $$$$_  $$$$| $$__  $$| $$__  $$   /$$/   | $$  | $$| $$  $$$$| $$__/         | $$  $$$| $$| $$$$_  $$$$   /$$/  | $$      | $$$$_  $$$$
| $$$/ \  $$$| $$  | $$| $$  \ $$  /$$/    | $$  | $$| $$\  $$$| $$            | $$\  $ | $$| $$$/ \  $$$  /$$/   | $$    $$| $$$/ \  $$$
| $$/   \  $$| $$  | $$| $$  | $$ /$$$$$$$$|  $$$$$$/| $$ \  $$| $$$$$$$$      | $$ \/  | $$| $$/   \  $$ /$$/    |  $$$$$$/| $$/   \  $$
|__/     \__/|__/  |__/|__/  |__/|________/ \______/ |__/  \__/|________/      |__/     |__/|__/     \__/|__/      \______/ |__/     \__/
                                                                                                                                         
                                                                                                                                        
KKKKKKKKKK0x:;xKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk;:x0KKKKKKKKKKKKKKKK
MMMMMMMMW0l'..cKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl...cOWMMMMMMMMMMMMMM
MMMMMMMXo'.....;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0:......lKMMMMMMMMMMMMM
MMMMMWO;........'lKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKo'........;OWMMMMMMMMMMM
MMMMWk'...........,dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd,...........'xWMMMMMMMMMM
MMMWx'...ox;........,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKd,........,xd....xWMMMMMMMMM
MMMO,...dNW0:.........'l0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0o,.........;0WWx...'kWMMMMMMMM
MMK:...lNMMMKc...........ckNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOc'..........cKMMMNo...;KMMMMMMMM
MWx...;0MMWMMNd............;dKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx;............oXMMWWMK:...dWMMMMMMM
MXc...oWM0xXMMWk,............'lONMWNK0kxdollllclllllodxk0KNWMNOl,............,kWMMNdxWWx...:XMMMMMMM
MK;..'kMWd'dWMMWKc..............:lc,'....................',cl:..............:0WMMWx.,0MO,..,0MMMMMMM
X0;..,0MXc.'kWMMMNx,......................................................'dNMMMMO,..oWK;..,0NXWMMMM
cxc..,0MX:..,OWMMMWKl....................................................c0WMMMM0;...:K0;..:xcoNMMMM
:''..'OMXc...,OWMMMMWOc................................................:OWMMMMW0;....'OO'..'..dWMMMM
K:....xMWo....'xNMMMMMNOc'...........................................cONMMMMMMO,......do.....,0MMMMM
MNx,..lNM0,.....lKWMMMMMK:..........................................;0MMMMMMMMK:......;'.....xWMMMMM
MMMXx::0MWx......xWMMMXx,............................................,dXMMMMMMMXo...........dNMMMMMM
MMMMMWKNMMK;...'dNMW0o,......,:clodol;'................................,o0WMMNOO0x;.......;OWMMMMMMM
MMMMMMMMW0:...;ON0d:....,cdOKNWN0dc;'.....................................:d0NO:',,......'kWMMMMMMMM
MMMMMMMWx'...:do:....;oOXWMMMMXkoc:;.........................................:odc'........'xWMMMMMMM
MMMMMMNd.....'.....;xXMMMMMMMMWKOdl;............................................''..........oNMMMMMM
MMMMMNd...........oXMMMMMMMNOo:'.............................................................lXMMMMM
MMMMWx...........dNMMMMMWKo;..................................................................cXMMMM
MMMMO,..........lNMMMMMNx,..;l;................................;l;...,,........................cXMMM
MMMX:...........dMMMMMMWX0OdoONOl'...........................lON0odOOd;.........................lXMM
MMWx............cXMMMMMMMMMMWNWMWO;........................;kWMWNWMMXkdolc;'.....................dNM
MMNc...'.........c0WNOxxkkOKNMMMMM0;......................,OMMMMMWNXKKKKXNNKx:...................'kW
MMK;.;xo..........'cd:.....';lOWMMWk'.....................xWMMWKxc;''..'cxd:,.....................:K
MM0;:KX:.........'.......',...;oXMMNl....................lNMMNd:'..,'.......,......................d
MMKd0M0,.........;do,....;xdoxc.cXMMXc..................:KMMNo.:xodx;....,lx:......................,
MMWWWM0,..........;kKOdlc:okkd:;,xWMMXd,...............cKMMWk;;:dOko:cldOKO:....................:lll
MMMMMMNl............:x0XWWWWWWWNKKWMMMWKx:'..........,oOXWMWXKNWWWWWWWX0xc'.....................:KMM
MMMMMMM0;..,,........,lOWMMMMWMMMMMMMMMMMWKkl,.......''.,dXMMMMMMMMMMW0o;........';..............lNM
MMMMMMMWKc.lOc......'cdxxxdoo0WWXOONMMMMMMMMMXc...........,oOXWWKdodxxxdl'......cOo..............'kW
MMMMMMMMMNkxXNk:............,llc,..lXMMMMMMMMMd..............,cll,............:kN0;...............cX
MMMMMMMMMMMMMMMNOl,.................xMMMMMMMMWd............................,lONMXc................'k
MMMMMMMMMMMMMMMMMWXOdl:;,''.........oWMMMMMMMMd........;l'.........'',;:ldOXWMMXl..................d
MMMMMMMMMMMMMMMMMMMMMMWNXKKO;......'kMMMMMMMMMd........:0k'......,kKKXNWMMMMMWO:...................c
MMMMMMMMMMMMMMMMMMMMMMMMMMMO';x:...oNMMMMMMMMMd........,0W0:..,d:;0MMMMMMMMWKo'....................;
MMMMMMMMMMMMMMMMMMMMMMMMMMWkoK0;.,xNMMMMMMMMMMd.........xWMNx'.xN0XMMMMMMW0o'......................;
MMMMMMMMMMMMMMMMMMMMMMMMMMWWWWx:dXMMMMMMMMMMMWd.........cXMMWKloNMMMMMMXkc'.';ll,.............:l'..:
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKXMMMMMMMMMMMMXkc'........'OMMMMWXNMMMMMNOddk0KKx;..............oNk,.c
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNXXKOdo:.....oNMMMMMMMMMMMMMMWKko,................xMWO;d
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOxooooddl'...;0MMMMMMMMMMNOdl:'..................'OMMWKK
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkOOOxol:'.....kMMWWMMMMWO:.......................;KMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNK00O00KXKOl....oWNxOMMMWk'........................oWMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0dc;'.....'',:c,...lXx.cXMMK;..............,:........,OMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl...................;c'.,0MWd...............dd........oNMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'.......................'OMX:..............cXd.......;0MMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd'......................,0MO'.............;0Xc......'kWMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWO,.....................lNNo.............,OWO'......dWMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXxxKNWWWNO;....................,0WO,............,kWNl......dNMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXc..;:::;.....................;OW0;............,OWWx.....'xWMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXx:,.......................;dXXx,............:0WM0,....:0WMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0OOkxoooolc,......,oxO0KOo;............'dXMMK:...'oXMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXkl:,'..',:clkXMKd:,..............c0WMMK:...c0WMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXKKKKXWWMMMM0,..............cONMMW0;..:ONMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK;...........'lOWMMMWO,.cONMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'.........:dKWMMMMNd:l0WMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:.......,lONMMMMMWXkkKWMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXl......:xXWMMMMMMMWNNMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMk'...'lOWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd..,oKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWd,dXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK0dd0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK                          
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 /$$      /$$  /$$$$$$   /$$$$$$   /$$$$$$  /$$$$$$ /$$    /$$ /$$$$$$$$       /$$$$$$$$ /$$   /$$  /$$$$$$  /$$   /$$ /$$   /$$ /$$     /$$ /$$$$$$  /$$   /$$
| $$$    /$$$ /$$__  $$ /$$__  $$ /$$__  $$|_  $$_/| $$   | $$| $$_____/      |__  $$__/| $$  | $$ /$$__  $$| $$$ | $$| $$  /$$/|  $$   /$$//$$__  $$| $$  | $$
| $$$$  /$$$$| $$  \ $$| $$  \__/| $$  \__/  | $$  | $$   | $$| $$               | $$   | $$  | $$| $$  \ $$| $$$$| $$| $$ /$$/  \  $$ /$$/| $$  \ $$| $$  | $$
| $$ $$/$$ $$| $$$$$$$$|  $$$$$$ |  $$$$$$   | $$  |  $$ / $$/| $$$$$            | $$   | $$$$$$$$| $$$$$$$$| $$ $$ $$| $$$$$/    \  $$$$/ | $$  | $$| $$  | $$
| $$  $$$| $$| $$__  $$ \____  $$ \____  $$  | $$   \  $$ $$/ | $$__/            | $$   | $$__  $$| $$__  $$| $$  $$$$| $$  $$     \  $$/  | $$  | $$| $$  | $$
| $$\  $ | $$| $$  | $$ /$$  \ $$ /$$  \ $$  | $$    \  $$$/  | $$               | $$   | $$  | $$| $$  | $$| $$\  $$$| $$\  $$     | $$   | $$  | $$| $$  | $$
| $$ \/  | $$| $$  | $$|  $$$$$$/|  $$$$$$/ /$$$$$$   \  $/   | $$$$$$$$         | $$   | $$  | $$| $$  | $$| $$ \  $$| $$ \  $$    | $$   |  $$$$$$/|  $$$$$$/
|__/     |__/|__/  |__/ \______/  \______/ |______/    \_/    |________/         |__/   |__/  |__/|__/  |__/|__/  \__/|__/  \__/    |__/    \______/  \______/ 
 
 ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

🅴🆇🅲🅰🅻🅸🅱🆄🆁 - HELPING ME UNDERSTAND THE RULES OF THE CODE + HELPING ME WITH ANYTHING I NEEDED SO HUGE THANKYOU 

🆂🆆🅴🅴🆃 🅴🆅🅸🅻 𝟏𝟒 HELPING ME UNDERSTAND THE MODS AND HOW THEY WORK + HELPIMG ME CREATE A FANTASTIC TRACKER 

🅰🅽🆄🆂 🅿🅾🆆🅴🆁🆂HELPING ME UNDERSTAND THE PROFILE INDEXING AND KILLSWICH  

🅲🆁🅴🆂🅲🅴🅽🆂 FOR ALOWING ME TO USE HIS AWESOME POLAR AIM

🅱🅰🆃🆃🆂 FOR HIS STICKY AIM

🆉🅴🅽 🅵🅾🆁🆄🅼 FOR PROGRESSIVE AR
						
===========================================================================================================================================================================================================================================================================

 __  __  ___ ___  ___     ___ ___ _  ___ _  _ _   _    __  _ _  _
|__]|__|  |   |  [__     [__   |  | |    |_/   \_/    |__| | |\/|
|__]|  |  |   |  ___]    ___]  |  | |___ | \_   |     |  | | |  |
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Every person in the game has an invisible-rectangular box around them. The reticule of each player will become 'stuck' once it has landed inside of this area and slightly follow the box.

This is designed to aid in the aiming of a target.But, is not the same as 'auto-aim' or 'aim-assist' where the reticule automatically targets the nearest box.

The sticky aim function only works once you have actually moved your reticule inside the area of the box. Once 'there,' the sticky aim is activated. However, it will not do all the work on its own.

In most games, If you don't move with it or if you move against it, you cancel the sticky assist. However, if moving with it--it makes it easier to track a moving player while shooting at them.

In addition to "Aim-Assist" and "Sticky-Aim." There is also "Bullet-Assist" (not a technical term) -- Basically this means that you can shoot in a designated area of the 'box' around a player and get a hit maker even if your not exactly centered over the player.

===========================================================================================================================================================================================================================================================================



 _  __  ___  __   _  ___        __    __    _        _  __ 
/ ` )_) )_  (_   / ` )_   )\ ) (_     )_)  / )  )   /_/ )_)
(_  / \ (__  __) (_  (__  (  (  __)   /    (_/  (__ / / / \ 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                                            


Polar Radius: The distance/radius/reach of the Aim Assist pattern from the center point. The larger the circle, the more strength over larger
'''''''''''''
distances. Once you are locked on to an enemy, increasing this value will therefore add more strength. This is what we achieve with the

PRBoost: The amount we add is the value behind PolaRBoost.
''''''''
Polar Steps: The amount that the angle is changed in each pattern cycle. The angle starts at 0 and ends at 359 (360 degrees). Setting the Polar
''''''''''''
Angle to 10 means that the angle is increased by 10 degrees each cycle until reaching 359. A larger value means that the aim assist pattern is

completed faster then with a lower value. By adding to this value once we are locked on to an enemy using the AngleBoost we increase the

stickiness because it preserves the Aim Bubble better.


==========================================================================================================================================================================================================================================================================


 __     __ _____   __                    ___ __      __    __ __ 
(_ |  ||_ |_  |   |_ \  /||     /| |__|   | |__) /\ /  |_/|_ |__)
__)|/\||__|__ |   |__ \/ ||__    |    |   | | \ /--\\__| \|__| \ 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''       
Enhanced Tracking Strength is for how strong the tracking is on a target to high and the screen will shake a little 

Enhanced Tracking Speed  = Speed of the rotation of the Tracking 


==========================================================================================================================================================================================================================================================================

 /$$      /$$  /$$$$$$  /$$$$$$$   /$$$$$$ 
| $$$    /$$$ /$$__  $$| $$__  $$ /$$__  $$
| $$$$  /$$$$| $$  \ $$| $$  \ $$| $$  \__/
| $$ $$/$$ $$| $$  | $$| $$  | $$|  $$$$$$ 
| $$  $$$| $$| $$  | $$| $$  | $$ \____  $$
| $$\  $ | $$| $$  | $$| $$  | $$ /$$  \ $$
| $$ \/  | $$|  $$$$$$/| $$$$$$$/|  $$$$$$/
|__/     |__/ \______/ |_______/  \______/ 
'''''''''''''''''''''''''''''''''''''''''''                                           


① LEGACY RECOIL, 

② PROGRESSIVE RECOIL, (START) (END) (TIME)

③ SWEET EVIL RECOILS, (RUMBLE RECOIL) USE HIGHER NUMBERS FOR THIS RECOIL  ,(DYNAMIC RECOIL) USE MINUS(-)NUMBER TO USE THIS RECOIL

④ CRESCENS POLAR

⑤ BATTS STICKY AIM

⑥ WOLF WARRIOR TRACKER

⑦ TURBO MELEE

⑧ SLIDE CANCEL OPTIONS (MW/WARZONE)+ (COLD WAR)

⑨ STEADY AIM (GREAT FOR SNIPING )

①⓪ HOLD BREATH

①① RAPID FIRE (ALSO HAS A QUICK TOGGLE AVAILABLE (HOLD)LT/L2) + (DPAD RIGHT) COLOR INDICATOR (GREEN) AND (RED)

①② ADJUSTABLE SENSES

①③ QUICK SCOPING 

①④ BOOSTS (PR BOOST = POLAR RADIUS BOOST )(SENSE BOOST = BOOSTS SENSITIVITY)

①⑤ BUNNY HOP QUICK TOGGLE ACCESS (HOLD)LT/L2+ TAP (DPAD DOWN) COLOR INDICATOR  (GREEN) AND (BLUE)
						
①⑥ AKIMBO RAPID FIRE (ONLY QUICK TOGGLE AVAILABLE (HOLD)LT/L2) + (DPAD LEFT) COLOR INDICATOR (PURPLE) AND (RED)

①⑦ ALL BUTTON LAYLOUTS 

①⑧ MASTER KILL SWITCH(QUICK TOGGLE KILL SWITCH/DRIVE MODE (HOLD LT/L2  + (DPAD UP) THIS WILL DEACTIVATE ALL MODS 

①⑨ PRIMARY(BLUE) AND SECONDARY(GREEN) PROFILES U CAN ADJUST (LEGACY RECOIL) (POLAR AIM) (STICKY AIM) (TRACKER) 

 TO SWITCH TO PRIMARY PROFILE PRESS (TRIANGLE/Y) TO SWITCH TO SECONDARY HOLD LT AND TAP(TRIANGLE/Y) TO RETURN TO PRIMARY PRESS(TRIANGLE/Y) 
     


*/
define dash_board            = 0;
define Rapid_Fire_menu       = 1;
define Slide_Cancel_Mod_Menu = 2;
define Polar_Aim_Menu        = 3;
define Batts_Sticky_Menu     = 4;
define Sniper_menu           = 5;
define Sweet_Evil_Recoil_menu = 6;
define Inverted_Menu         = 7;
define Enhanced_Menu         = 8;
define Drop_Shot_Menu        = 9;
define Senses_Menu           = 10;
define Boosts_Menu           = 11;
define ButtonLayout          = 12;
define StickLayout           = 13;
define Legacy                = 14;
define Steady_Aim_Menu       = 15;
define Progressive_Menu      = 16;
define Rumble_Menu           = 17;
define Melee_Menu            = 18;
define Bunny_Menu            = 19;
define QuickScope_Menu       = 20;

define cycle_limit  = 20;
define cycle_return = 1;


int rapid_Fire_option;
int construct = 2,screen_saver = 1, clear,strobing_a,strobing_b,menu;
int EditMenu;
int refresh_edit;
int stick_input
int edit_idx;


define EDIT_VAL_PRINT_Y = 18; // Y coordinate for print Edit Value
const string dash_idx[] = { "Wolf Warior", "Grimmy & Excalibur" };

const string instruction_idx[] = { " OPEN MENU ", "CLOSE MENU", "NAVIGATION","PRIMARY", "SECONDARY"};

const string submenu_idx[] = {
	"DASH BOARD",   // 0. 
	"RAPID FIRE",   // 1.
	"SLIDE CANCEL", // 2.
	"POLAR AIM",    // 3.
	"BATTS STICKY", // 4.
	"HOLD BREATH",  // 5. 
	"SWEET EVIL RECOIL",// 6.
	"INVERTED",     // 7.
	"TRACKER",      // 8.
	"DROP SHOT",    // 9.
	"SENSES",       // 10.
	"BOOSTS",       // 11.
	"BUTTON LAYOUT",// 12.
	"STICK LAYOUT", // 13. 
	"LEGACY RECOIL",// 14.
	"STEADY AIM",   // 15.
	"PROGRESSIVE",  // 16.
	"RUMBLE",       // 17.
	"TURBO MELEE",  // 18. 
	"BUNNY HOP",    // 19.
	"QUICKSCOPE"    // 20.
	

};
const uint8 ModNames_char_count [] ={

	0, // "DASH BOARD"
	10,// "RAPID FIRE" 
	12,// "SLIDE CANCEL" 
	9, // "POLAR AIM " 
	12,// "BATTS STICKY" 
	11,// "AUTO Hold Breath" 
	17,// "RECOIL"
	8, // "INVERTED"
	7, // "TRACKER"
	9, // "DROP SHOT"
	6, // "SENSES"
	6, // "BOOSTS"
	13,// "BUTTON LAYOUT", 
	12,// "STICK LAYOUT"
	13,// "RECOIL"
	10,// "STEADY AIM"
	11,// "PROGRESSIVE"
	6, //  RUMBLE
	11,//  MELEE
	9, //  BUNNY
	10//  QUICKSCOPE
	

}
const uint8 Edit_ind []={
	0,//1
	0,//2
	1,//3
	1,//4
	1,//5
	0,//6
	1,//7
	0,//8
	1,//9
	0,//10
	1,//11
	1,//12
	0,//13
	0,//14
	1,//15
	1,//16
	1,//17 
	0,//18
	0,//19
	0 //20	
}
const string option_idx[] = {
	"OFF", "ON",
	"STANDARD", "DOUBLE", "REALISTIC",
	"SLIDE_MW", "SLIDE_CW",
	"STICKY AIM", "POLAR AIM",
	"RUMBLE E AR",
	"DYNAMIC  AR"    
};
//--- BUTTON LAYOUT
const string BL_str [] = {

	"DEFAULT",          // 0
	"TACTICAL",         // 1
	"LEFTY",            // 2
	"N0M4D/CHARLIE",    // 3
	"NOM4D/CH TACTICAL",// 4
	"NOM4D/CHARL L3F7Y",// 5
	"BUMPER JUMPER",    // 6
	"BUMP/JUM TACTICAL",// 7
	"ONE-HAND GUNSLING",// 8
	"STICK AND MOVE",   // 9
	"BRAWLER",          // 10
	"BEAST",            // 11
	"DEFAULT SWAPPED",  // 12
	"BUMP/J SWAPPED",   // 13 
	"BUMP/J TACT SWAPP",// 14
	"STICK & MOVE SWAP",// 15
	"TACTICAL SWAPPED"  // 16
};
//--- STICK LAYOUT
const string SL_str [] = {
	"DEFAULT",          // 0
	"SOUTHPAW",         // 1
	"LEGACY",           // 2
	"LEGACY SOUTHPAW",  // 3
	
	"SOUTHPAW",         // 4
	"NO CLICK SWAP",    // 5
	
	"LEGACY SOUTHPAW",  // 6
	"NO CLIC SWAP"      // 7
}; 

//=========================================
// EDIT VALUES STRINGS
//=========================================
const string EditValuesNames [] ={
	"RADIUS",    //0
	"STEPS" ,    //1 
	"STICKY SIZE",//2
	"STICKY TIME",//3
	"CW SLIDE DELAY",//4
	"MW SLIDE DELAY", //5
	"E SCAN STRENGTH",//6
	"E SCAN SPEED",  //7
	"AR STRENGTH",   //8
	"GEN SENS",       //9   
	"ADS SENS",  //10
	"FIRE SENS", //11
	"ADS FIRE SENS",//12
	"GRENADE SENS" ,//13
	"PR_BOOST",    //14
	"BOOST_SENSES",//15
	"VERTICAL",   //16
	"HORIZONTAL", //17
	"STEADY AIM VAL", //18
	//PROGRESSIVE
	"VERTICAL START",//19
	"VERTICAL END",//20
	"VERTICAL TIME",//21
	"HORIZOTAL START",//22
	"HORIZONTAL END",//23
	"HORIZONTAL TIME "//24

}

//=========================================
// Characters Count for  VALUES STRINGS
//=========================================
const uint8 CharCount [] ={
	6,//RADIUS
	5,//STEPS
	11,//Sticky Size
	11,//Sticky Tim
	14,//CW Slide Delay
	14,//MW Slide Delay
	16,//E Scan Strength
	12,//E Scan Speed
	11,//AR Strength
	8,//GEN SENS
	8,//ADS SENS
	9,//FIRE SENS
	13,//ADS FIRE SENS
	12,//GRENADE SENS
	8,//PR_BOOST
	11,//BOOST_SENSES
	8,//VERTICAL
	10,//HORIZONTAL
	13,//STEADY AIM VAL
	14,//VERTICAL START
	11,//VERTICAL END
	13,//VERTICAL TIME
	16,//HORIZOTAL START
	14,//HORIZONTAL END
	15//HORIZONTAL TIME	
}
const uint8 Min_Max [][] = {
	{0, 0 },// DASH BOARD   
	{0, 0 },// RAPID FIRE   
	{4, 5 },// SLIDE CANCEL 
	{0, 1 },// POLAR  AIM   
	{2, 3 },// STICKY AIM    
	{0, 0 },// HOLD BREATH 
	{8, 8 },// ANTI RECOIL
	{0, 0 },// INVERTED
	{6, 7 },// ENHAN SCANING
	{0, 0 },// DROP SHOT
	{9,13 },// SENSES
	{15,15},// BOOSTS
	{0, 0 },// BUTTON LAYOUT
	{0, 0 },// STICK LAYOUT
	{16,17},// LEGACY RECOIL
	{18,18},// STEADY AIM     
	{19,24},// PROGRESSIVE
	{25,25},// RUMBLE
	{26,26},// MELEE
	{27,27},// BUNNY
	{0 ,0} // QUICKSCOPE
} 
//=====QUICKSCOPE===============
int USE_QUICKSCOPE; 
int SCOPE_VAL = 100;

//=====RAPID FIRE MOD OPTIONS=====
int Double; 
int Realistic;
int KS_Rapid_Fire;

int hold_time;                                                    
int rest_time;
int led_on;
int led_off; 

int Standard;
define Akimbo_Toggle      	 =   PS4_LEFT;	
int Akimbo;
//=====SLIDE CANCEL MOD OPTIONS===== 
int SLIDE_MW; 
int SLIDE_CW;
int CW_SLIDE_DELAY; 
int MW_SLIDE_DELAY;

int KillSwitch;
int Sticky_Value                    =-2 ; 
int Hold_Value                      =-3
define USE_RUMBLE_EVIL_AR           = 1;
define USE_DYNAMIC_EVIL_AR          = 2;
int MIN_Radius						= 8;
int MAX_Radius						= 20;
int MIN_ANGLE						= 12;
int MAX_ANGLE						= 20;
define MAGNITUDE					= 80;//80
int REFRESH_RATE					= TIME_BASE * 10;
int USE_CORRECTION;
int USE_SENS;
int GEN_SENS ;
int ADS_SENS;
int FIRE_SENS;
int ADS_FIRE_SENS;
int GRENADE_SENS;
int ads_grenade_sens;
int ads_fire_sens;
int Sens;
int Radius;
int anti_recoil;       
int anti_recoil_H; 
define AR_Release = 50;
int DS_Speed = 80;

//TOGGLES
int USE_STEADY_AIM;
int USE_LEGACY[2]
int SENSES_BOOST;
int POLARBOOSTER     = TRUE;
int USE_WOLF_SENS;
int USE_DROPSHOT;
int USE_MELEE;
 int USE_SLIDE_CANCEL
int USE_HAIR_TRIGGER = TRUE;
int USE_HOLD_BREATH ;
int	USE_RUMBLE       = TRUE;
int PROGRESSIVE_RECOIL;
int TRACKING;
int USE_POLAR_AIM[2];
int USE_STICKY_AIM[2];
int AR_TYPE;
int RADIUS_BOOST = 6;
int USE_BUNNY_HOP;

const string PROFILES[] = { "PRIMARY", "SECONDARY", "" }

//
///PROFILE VARIABLES 

int INDEXER;
int RESOLUTION[2];
int ANTI_RECOIL[2]; 
int ANTI_RECOIL_H[2]; 
int ENHANCED_SCANNING_STRENGTH[2];
int ENHANCED_SCANNING_SPEED[2];
int ANTIRECOIL_START[2];
int ANTIRECOIL_END[2];
int ANTIRECOIL_TIME[2];

int ANTIRECOIL_H_START[2];
int ANTIRECOIL_H_END[2];
int ANTIRECOIL_H_TIME[2];

int STICKY_AIM_SIZE[2];
int STICKY_AIM_TIME[2];
int POLAR_STEPS[2];
int POLAR_RADIUS[2];
int AR_STRENGTH[2];
data(1,// begin of data segment--------              
2,0,0,0, //1. Blue                                 
0,2,0,0, //2. Red                                  
0,0,2,0, //3. Green                                
0,0,0,2, //4. Pink                                 
2,0,2,0, //5. SkyBlue                              
0,2,2,0, //6. Yellow                               
2,2,2,2, //7. White 
0,0,0,0  //8. OFF
); // end of data

define Purple        =  1;                           
define Red           =  2;                           
define Blue          =  3;                           
define Pink          =  4;                           
define SkyBlue       =  5;                           
define Yellow        =  6;                           
define White         =  7;                           
define OFF_Color     =  8;                                                     

const int16 TRACKER[] 		= {
	0, 	 17,  34,  52,  69,  87,  104, 121, 139, 156,173, 190, 207, 224, 241, 258, 275, 292, 309, 325,342, 358, 374, 390, 406, 422, 438, 453, 469, 484,500, 515, 529, 544, 559, 573, 587, 601, 615, 629,642, 656, 669, 682, 694, 707, 719, 731, 743, 754,766, 777, 788, 798, 809, 819, 829, 838, 848, 857,866, 874, 882, 891, 898, 906, 913, 920, 927, 933, 939, 945, 951, 956, 961, 965, 970, 974, 978, 981,984, 987, 990, 992, 994, 996, 997, 998, 999, 999,1000
}     

define TIME_BASE			        = 4;	
define MAX_DRIFT			        = 15;
define timelimit 					= 75;
int INVERTED; 

int update_timer,C_RX,C_RY,C_LX,C_LY, L_RX,L_RY,AR_RY;
int ar_strength, angle,inverted,_ret,enhanced_scanning_angle ;
int mvt_direction,rx_drift,ry_drift,lx_drift,ly_drift,drift_calib;
int i;


//OLED
define ofmw = OLED_FONT_MEDIUM_WIDTH;
define ofsw = OLED_FONT_SMALL_WIDTH;
define ofs  = OLED_FONT_SMALL;
define ofm  = OLED_FONT_MEDIUM;
define ofl  = OLED_FONT_LARGE;

int RS_gr;
int mn=326, mx=328; 
define RS=POLAR_RS; 
int rnd;

init{
    LOAD_PVARS()
	
	mvt_direction = 1;
	
	update_timer = REFRESH_RATE;
	
	if(INVERTED == 1)
	inverted = -1;
	else
	inverted = 1;
	
	angle = 90 * inverted;
	enhanced_scanning_angle = 90 * inverted;
	
	drift_calib = 100;	
	
	led(6);
	
}

//==============================================================
//       MAIN BLOCK
//==============================================================
main
{

	set_val(TRACE_1,menu);
	set_val(TRACE_2,INDEXER);
	set_val(TRACE_3,USE_LEGACY[INDEXER]);
	set_val(TRACE_4,PROGRESSIVE_RECOIL[INDEXER]);
	//set_val(TRACE_4,weapon_idx);
	
    Run_Button_Configs()

	//--- TURN SCRIPT ON/OFF  KillSwitch
	
	
	if((get_ival(PS4_L2) > 50 && event_release(PS4_SHARE))){
		
		KillSwitch = !KillSwitch;
		display_QT(1);
		set_val(PS4_SHARE, 0);
		
		combo_run(RUMBLE_ON);
	}

	if( construct  ) { 
		cls_oled( 1 );
		
		if( menu == dash_board ) { 
			rect_oled( 1, 1, 126, 22, 1, 0 ); led( SkyBlue );
			printf( center_x( 11, ofmw ), 4, 1, 1, dash_idx[ 0 ] );
			printf( center_x( 18, ofsw ), 26, 0, 0, dash_idx[ 1 ] );
			clear = 0; screen_saver = 1;
		}
		
		else if( menu ) { 
			rect_oled( 1, 1, 126, 17, 1, 0 );
			create_dpad( 1, 36, 0 ); 
			create_dpad( 112, 36, 0 );
			printf( center_x( 10, ofsw ), 38, 0, 0, instruction_idx[ 2 ] );
			
			
			//--- RAPID FIRE  1.
			if( menu ==Rapid_Fire_menu ) { 
				print_mod_name();
				printf( center_x( 13, ofsw ), 4, 0, 1, submenu_idx[22] );
				if( rapid_Fire_option == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red);  Standard = 0 ; Double = 0;Realistic = 0;   } 
				if( rapid_Fire_option == 1 ) { printf( center_x( 8, ofmw ), 20, 1, 0, option_idx[ 2 ] ); led( SkyBlue ); Standard = 1; combo_run(RUMBLE_ON)}
				if( rapid_Fire_option == 2 ) { printf( center_x( 6, ofmw ), 20, 1, 0, option_idx[ 3 ] ); led( SkyBlue ); Double = 1;  }
				if( rapid_Fire_option == 3 ) { printf( center_x( 9, ofmw ), 20, 1, 0, option_idx[ 4 ] ); led( SkyBlue ); Realistic = 1; }
			}
			//--- SLIDE CANCEL  2.
			if( menu == Slide_Cancel_Mod_Menu ) { 
				print_mod_name();
				
				if( USE_SLIDE_CANCEL == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red ); SLIDE_MW = 0; SLIDE_CW = 0; }
				if( USE_SLIDE_CANCEL == 1 ) { printf( center_x(8, ofmw ), 20, 1, 0, option_idx[ 5 ] ); led( SkyBlue ); SLIDE_MW = 1; SLIDE_CW = 0; }
				if( USE_SLIDE_CANCEL == 2 ) { printf( center_x(8, ofmw ), 20, 1, 0, option_idx[ 6 ] ); led(SkyBlue); SLIDE_MW = 0; SLIDE_CW = 1; combo_run (RUMBLE_ON)}
			}
			//--- AIM ASSIST   3.
			
			
			if( menu ==Polar_Aim_Menu ) { 
				print_mod_name();
				if( USE_POLAR_AIM == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red  ); USE_POLAR_AIM = 0}
				if( USE_POLAR_AIM == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led(SkyBlue ); USE_POLAR_AIM = 1combo_run (RUMBLE_ON)}
				
			}
			//--- sticky    4.
			if( menu == Batts_Sticky_Menu ) { 
				print_mod_name();
				if( USE_STICKY_AIM == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led(Red );USE_STICKY_AIM = 0 }
				if( USE_STICKY_AIM == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led(SkyBlue); USE_STICKY_AIM = 1combo_run(RUMBLE_ON)}
			}
			//--- HOLD Hold Breath  5.
			if( menu == Sniper_menu ) { 
				print_mod_name();
				if( USE_HOLD_BREATH == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red );  }
				if( USE_HOLD_BREATH == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led( SkyBlue ); combo_run(RUMBLE_ON) }
			}
			//--- SWEET EVIL RECOIL     6.
			if( menu == Sweet_Evil_Recoil_menu ) { 
				print_mod_name();
				if( AR_TYPE == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( AR_TYPE == 1 ) { printf( center_x(11, ofmw ), 20, 1, 0, option_idx[ 9 ]  ); led( SkyBlue );  }
				if( AR_TYPE == 2 ) { printf( center_x(11, ofmw ), 20, 1, 0, option_idx[ 10]  ); led( SkyBlue);  combo_run(RUMBLE_ON) }
				set_val(TRACE_5, AR_TYPE);
			}
			//--- INVERTED   7.
			if( menu == Inverted_Menu){
				print_mod_name();
				if( INVERTED == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red ); }
				if( INVERTED == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led(SkyBlue );combo_run  (RUMBLE_ON)}
			}//DEFAULT
			
			//--- ENCHACED SCANING
			if( menu == Enhanced_Menu){
				print_mod_name();
				if( TRACKING == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led(Red); }
				if( TRACKING == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue ); combo_run(RUMBLE_ON)}
			}
			//--- DROP SHOT
			if( menu == Drop_Shot_Menu) {
				print_mod_name();
				if( USE_DROPSHOT == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red); USE_DROPSHOT  = 0 }
				if( USE_DROPSHOT == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue ); USE_DROPSHOT = 1;combo_run(RUMBLE_ON) }
			}
			
			//--- 
			if( menu == Senses_Menu) {
				print_mod_name();
				if( USE_WOLF_SENS == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );}
				if( USE_WOLF_SENS == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue);combo_run(RUMBLE_ON) }
			}
			//--- Boosts_Menu
			if( menu == Boosts_Menu) {
				print_mod_name();
				if( USE_CORRECTION == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red ); }
				if( USE_CORRECTION == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue ); combo_run(RUMBLE_ON) }
			    //if( Aim_Boosts_MOD == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue );USE_CORRECTION = 1 combo_run(RUMBLE_ON) }
			}
			//-- BUTTON LAYOUT
			if( menu == ButtonLayout ) { 
				printf( center_x( 13, ofsw ), 4, 0, 1, submenu_idx[ 12 ] );
				if( BUTTON_LAYLOUT >= 0 && BUTTON_LAYLOUT < 17) OptionMenu_BL ( Opt_BL [ BUTTON_LAYLOUT ], BUTTON_LAYLOUT ) led( SkyBlue );combo_run(RUMBLE_ON);
	
			}
			//--- STICK LAYOUT
			if( menu == StickLayout ) { 
				printf( center_x( 12, ofsw ), 4, 0, 1, submenu_idx[ 13 ]
				) 
				if(STICK_LAYLOUT == 0) {printf( center_x( 7, ofsw ), 20, ofs, 0, SL_str[ 0 ] ); led( SkyBlue );  STICK_LAYLOUT = 0; }// DEFAULT
				if(STICK_LAYLOUT == 1) {printf( center_x( 8, ofsw ), 20, ofs, 0, SL_str[ 1 ] ); led( SkyBlue );  STICK_LAYLOUT = 1; }// SOUTHPAW
				if(STICK_LAYLOUT == 2) {printf( center_x( 6, ofsw ), 20, ofs, 0, SL_str[ 2 ] ); led( SkyBlue );  STICK_LAYLOUT = 2; }// LEGACY
				if(STICK_LAYLOUT == 3) {printf( center_x(15, ofsw ), 20, ofs, 0, SL_str[ 3 ] ); led( SkyBlue );  STICK_LAYLOUT = 3; }// LEGACY SOUTHPAW
				
				if(STICK_LAYLOUT == 4) {printf( center_x( 8, ofsw ), 20, ofs, 0, SL_str[ 4 ] ); led( SkyBlue );  STICK_LAYLOUT = 4; }// SOUTHPAW (SOUTHPAW NO CLICK SWAP)
				if(STICK_LAYLOUT == 4) {printf( center_x(13, ofsw ), 30, ofs, 0, SL_str[ 5 ] ); led( SkyBlue );  STICK_LAYLOUT = 4; }// NO CLICK SWAP (SOUTHPAW NO CLICK SWAP)
				
				if(STICK_LAYLOUT == 5) {printf( center_x(15, ofsw ), 20, ofs, 0, SL_str[ 6 ] ); led( SkyBlue );  STICK_LAYLOUT = 5; }// LEGACY SOUTHPAW (LEGACY SOUTHPAW NO CLICK SWAP)
				if(STICK_LAYLOUT == 5) {printf( center_x(12, ofsw ), 30, ofs, 0, SL_str[ 7 ] ); led( SkyBlue  );  STICK_LAYLOUT = 5; }// NO CLIC SWAP (LEGACY SOUTHPAW NO CLICK SWAP)
			}
			//LEGACY RECOIL
			if(menu == Legacy){
				printf( center_x( 13, ofsw ), 4, 0, 1, submenu_idx[ 14] );
		        weaponmenu();
			}
			
			if(menu == Steady_Aim_Menu){
				printf( center_x( 10, ofsw ), 4, 0, 1, submenu_idx[ 15 ] );
				if( USE_STEADY_AIM  == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( USE_STEADY_AIM  == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led(SkyBlue ) ;combo_run(RUMBLE_ON)  }
			}
			if(menu ==Progressive_Menu){
				printf( center_x( 11, ofsw ), 4, 0, 1, submenu_idx[ 16 ] );
				weaponmenuPRO()
			
			}
			if(menu == Rumble_Menu){
				printf( center_x( 6, ofsw ), 4, 0, 1, submenu_idx[ 17 ] );
				if( USE_RUMBLE  == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( USE_RUMBLE  == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue );  }
			}
			if(menu == Melee_Menu){
				printf( center_x( 10, ofsw ), 4, 0, 1, submenu_idx[ 18 ] );
				if( USE_MELEE  == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  USE_MELEE = 0}
				if( USE_MELEE  == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue );USE_MELEE = 1  }	
			}
			if(menu == Bunny_Menu){
				printf( center_x( 10, ofsw ), 4, 0, 1, submenu_idx[ 19] );
				if( USE_BUNNY_HOP == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ]  ); led( Red );  }
				if( USE_BUNNY_HOP  == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ]  ); led( SkyBlue );  }
			}
			if( menu == QuickScope_Menu ) { 
				print_mod_name();
				printf( center_x( 10, ofsw ), 4, 0, 1, submenu_idx[ 20] );
				if( USE_QUICKSCOPE == 0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, option_idx[ 0 ] ); led( Red);} 
				if( USE_QUICKSCOPE == 1 ) { printf( center_x( 2, ofmw ), 20, 1, 0, option_idx[ 1 ] ); led( SkyBlue );  combo_run(RUMBLE_ON)}
			}
	
			screen_saver = 0;
		}
		//--- print PROFILE with White Background
		print_profile_text(INDEXER, 1);
		construct = 0;
	}
	
	//=================================
	//   ALL CODE FOR MODS ARE HERE
	//=================================
	
		
	vm_tctrl(-6);
	if(drift_calib)
	{
		rx_drift = max(rx_drift, abs(get_ival(aim_x))+ 2);
		ry_drift = max(ry_drift, abs(get_ival(aim_y))+ 2);
		
		lx_drift = max(lx_drift, abs(get_ival(strafe))+ 2);
		ly_drift = max(ly_drift, abs(get_ival(walk))+ 2);
		
		rx_drift = min(rx_drift, MAX_DRIFT);
		ry_drift = min(ry_drift, MAX_DRIFT);
		
		lx_drift = min(lx_drift, MAX_DRIFT);
		ly_drift = min(ly_drift, MAX_DRIFT);
		
		drift_calib--;
		
		rx_drift = max(rx_drift, ry_drift);
		lx_drift = max(lx_drift, ly_drift);
		
	}
	else
	{	
		if( menu == dash_board && !EditMenu && !KillSwitch) { 
			//--- OPEN MENU 
			if( get_val( XB1_LT )){
				if(event_press( XB1_MENU ) ) { 
					menu = Legacy; 
					construct = 1; 
					EditMenu  = FALSE; 
					set_val(XB1_MENU,0);
					KS_Rapid_Fire = FALSE	
				}
			}
			if( event_release(SWITCH)){
				INDEXER =!INDEXER;
				if(INDEXER) led( Yellow );
				else led(SkyBlue);
				if( !screen_saver) {
					print_profile_text(INDEXER, 0);
					combo_run(WAIT_MESSAGE);
				}
			}		
			//--- RAPID FIRE
			{
				
				if( Standard )  
				{ 
					if( get_val( FIRE )) { combo_run( rapid_Fire_Standard );}}
				
				if( Double )    
				{ 
					if( get_val( FIRE ) ) { combo_run( rapid_Fire_double );}}
				
				if( Realistic ) 
				{
					if( get_val( FIRE ) ) { combo_run( rapid_Fire_realistic );}}
				
				//--- SLIDE CANCEL
				if(USE_SLIDE_CANCEL)
				{
					if( abs(get_val(PS4_LY)) > 80 || abs(get_val(PS4_LX)) > 80 )
					{
						if(event_release(CROUCH))
						{
							if (SLIDE_MW) combo_run(MW);
							
							if (SLIDE_CW) combo_run (CW);
						} 
					}
				}
			}
	
			if(USE_STICKY_AIM)
			{
				if(get_ival(ADS) && get_ival(FIRE))
				{
					combo_run(Sticky_Aim);
				 	Sticky_Value = STICKY_AIM_SIZE[INDEXER];
					Hold_Value = STICKY_AIM_TIME[INDEXER];
				} 
				else if(get_ival(ADS) && !get_ival(FIRE)) {
					combo_stop(Sticky_Aim);
					Sticky_Value  = STICKY_AIM_SIZE[INDEXER];
					Hold_Value = STICKY_AIM_TIME[INDEXER];
				}
				else if(!get_ival(ADS) && get_ival(FIRE)){
					combo_run(Sticky_Aim);
					Sticky_Value  += STICKY_AIM_SIZE[INDEXER];
					Hold_Value -= STICKY_AIM_TIME[INDEXER];
				} 
				else 
				{
					combo_stop(Sticky_Aim);
				}
			}
				
			if(USE_CORRECTION )	
			{
				ads_grenade_sens=100-(SENSES_BOOST); ads_fire_sens=96-(SENSES_BOOST); 
				if (get_val (ADS))
				{
					if(get_val(FIRE) && get_val(ADS))                              
					{ 
						Sens = ads_fire_sens;                                              
					}
					if(!get_val(FIRE) && !get_val(ADS) || get_val (FIRE) &&!get_val(ADS)) 
					{
						Sens = 100; 
					}   
					if(!get_val(FIRE) && get_val(ADS))
					{
						Sens = ads_grenade_sens;
					}
					if (stick_input > Radius)/*cut_off_polar*/
					{
						if(Sens > 100) Sens = 100;
						
						sensitivity(PS4_RX, NOT_USE, Sens);
						
						sensitivity(PS4_RY, NOT_USE, Sens);
					}
				}  
			}
			stick_input = (isqrt(pow(get_ival(PS4_RX),2) + pow(get_ival(PS4_RY),2)));
	
			if(USE_POLAR_AIM)
			{
				if (POLARBOOSTER && get_ival(FIRE)) 
				{
					Radius = POLAR_RADIUS[INDEXER] + RADIUS_BOOST;
				}
				else 
				{
					Radius = POLAR_RADIUS[INDEXER];
				}
				if (get_ival(ADS) && (get_ival(FIRE)))
				//if (get_ival(ADS) || (get_ival(FIRE)))
				{
					if (stick_input <= Radius)
					{ 
						rnd = random(mn, mx);
						
						RS_gr = (RS_gr + POLAR_STEPS[INDEXER]) % 360;
						
						set_polar(RS, RS_gr, (Radius * rnd));
					} 									
				} 
			}
			
			if(USE_RUMBLE == FALSE)
			{
				block_rumble();
			}
			
			if(USE_HAIR_TRIGGER)
			{
				if(get_ival(FIRE) > 10)
				set_val(FIRE, 100);
				
				if(get_ival(ADS)> 10)
				set_val(ADS, 100);
			}		
			
			C_RX = get_ival(aim_x);
			C_RY = get_ival(aim_y);
			
			C_LX = get_ival(strafe);
			C_LY = get_ival(walk);
			
			if(isqrt(pow(C_RX, 2) + pow(C_RY, 2)) <= rx_drift)
			{
				C_RX = 0;
				C_RY = 0;
			}
	
			if(isqrt(pow(C_LX, 2) + pow(C_LY, 2)) <= lx_drift)
			{
				C_LX = 0;
				C_LY = 0;
			}
			
			{
			if(get_val(ADS) > 50 || get_val(FIRE) > 50  )
			{									
				if(update_timer >= REFRESH_RATE)
				{					
					block(aim_x, REFRESH_RATE);
					block(aim_y, REFRESH_RATE);
					
					_ret = get_mvt_direction(C_RX, L_RX);
					
					if(_ret != 0)
					mvt_direction = _ret;
					
					update_timer = 0;	
					
					L_RX = C_RX;
					L_RY = C_RY;
				}	
				
				if(USE_LEGACY[INDEXER])
				{ 
					if( get_val(ADS) && get_val(FIRE )) {  
						
						combo_run(AntiRecoil);                 
					}                                          
					
					if( abs(get_val(10)) > AR_Release || abs(get_val(9)) > AR_Release) {
						
						combo_stop (AntiRecoil);               
					}                                
				}    
				
				if((AR_TYPE) && ((((get_val(ADS) > 50) && (get_val(FIRE)> 50))) 
							
							|| combo_running(rapid_Fire_realistic) || combo_running(rapid_Fire_double )) && check_magnitude(MAGNITUDE, C_RX, L_RX, C_RY, L_RY))
				{
					if(AR_TYPE == USE_RUMBLE_EVIL_AR)
					{
						AR_RY = get_rumble_evil_ar();
					}
					else
					{
						AR_RY = (get_ptime(FIRE)/ (160));
						set_val(TRACE_2, AR_RY);
						
						ar_strength = (AR_STRENGTH[INDEXER]/2) + AR_STRENGTH[INDEXER]
						
						if(AR_RY > ar_strength)
						AR_RY = ar_strength ;
						
						AR_RY = AR_RY +  AR_STRENGTH[INDEXER] - ((abs(C_RX * C_RX) + abs(C_RY * C_RY))/1000) ;
						//set_val(TRACE_1, AR_RY);
					}
					
					if(inverted == 1)
					
					C_RY += inv(AR_RY);
					else
					C_RY += AR_RY;
				}
				{		
					if(TRACKING)
					{			
						if(mvt_direction == 1)
						{
							C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH[INDEXER], sin(enhanced_scanning_angle));
							C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH[INDEXER], cos(enhanced_scanning_angle));
						}
						else
						{
							C_RX += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH[INDEXER], cos(enhanced_scanning_angle));
							C_RY += get_polar_coordinate(ENHANCED_SCANNING_STRENGTH[INDEXER], sin(enhanced_scanning_angle));
						}
						enhanced_scanning_angle = ((enhanced_scanning_angle + ENHANCED_SCANNING_SPEED[INDEXER])%360);
					}
					
					if(mvt_direction == 1)
					{
						C_RX += get_polar_coordinate(random(MIN_Radius,MAX_Radius), sin(angle));
						C_RY += get_polar_coordinate(random(MIN_Radius,MAX_Radius), cos(angle));
					}
					else
					{
						C_RX += get_polar_coordinate(random(MIN_Radius,MAX_Radius), cos(angle));
						C_RY += get_polar_coordinate(random(MIN_Radius,MAX_Radius), sin(angle));
					}
					angle = ((angle + random(MIN_ANGLE,MAX_ANGLE))%360);
				}
				
				if(USE_STEADY_AIM)
				{
					C_RX = get_steady_aim(C_RX, RESOLUTION[INDEXER]);
					C_RY = get_steady_aim(C_RY, RESOLUTION[INDEXER]);	
				}
				set_val(PS4_RX, clamp(C_RX, -100, 100));
				set_val(PS4_RY, clamp(C_RY, -100, 100));
				
				update_timer += get_rtime();
			}
			else
			{
				update_timer = 0;
				update_timer = REFRESH_RATE;
				
				angle = 90 * inverted;
				enhanced_scanning_angle = 90 * inverted;
				
				set_val(aim_x, C_RX);
				set_val(aim_y, C_RY);
				
				
				
				set_val(strafe, C_LX);
				set_val(walk, C_LY);
				
			}
			
			if(USE_HOLD_BREATH)
			{
				if(get_val(ADS))
				set_val(SPRINT,100);
				
				if(get_val(walk) <-90 && get_val(ADS) && get_ptime(ADS) > 200 && combo_running(HOLD_BREATH))
				combo_stop(HOLD_BREATH);
				
				if(event_press(ADS))
				combo_run(HOLD_BREATH);
				
				if(get_val(ADS) && get_lval(SPRINT))
				set_val(SPRINT,0);
			}	
			}
			if(USE_WOLF_SENS)
			{
				if(!get_val(ADS) && !get_val(FIRE)) 
				{ 
					USE_SENS=GEN_SENS;
				}
				else if(get_val(ADS) && !get_val(FIRE))
				{ 
					USE_SENS=ADS_SENS;
				}    
				else if(!get_val(ADS) && get_val(FIRE))
				{ 
					USE_SENS=FIRE_SENS;
				}
				else if(get_val(ADS) && get_val(FIRE))
				{ 
					USE_SENS=ADS_FIRE_SENS;
				}
				else if(get_val(LETHAL))
				{ 
					USE_SENS=GRENADE_SENS;
				}
				sensitivity(PS4_RY,NOT_USE,USE_SENS);
				sensitivity(PS4_RX,NOT_USE,USE_SENS);			
			}
	
			if(USE_DROPSHOT) 
			{ 
				if(get_val(CROUCH) && !get_val(CROUCH) ) 
				combo_run(DROP); 
				
				if(USE_MELEE)
				{
					if(get_val(MELEE))
					combo_run(Turbo_Melee);
					
					if(get_val(ADS) && event_press(FIRE) < 100)
					combo_stop(Turbo_Melee);
				}
			}
		} 
		
		if(PROGRESSIVE_RECOIL )
		{
			if(ANTIRECOIL_START[INDEXER] < ANTIRECOIL_END[INDEXER])
			i_val = 1;
			else
			i_val = -1;
			
			
			i_pnt = (ANTIRECOIL_TIME[INDEXER] * 10) / (abs(ANTIRECOIL_START[INDEXER] - ANTIRECOIL_END[INDEXER])); 
			
			// Horizontal
			
			if(ANTIRECOIL_H_START[INDEXER] < ANTIRECOIL_H_END[INDEXER])
			i_val_h = 1;
			else
			i_val_h = -1;
			
			i_pnt_h = (ANTIRECOIL_H_TIME[INDEXER] * 10) / (abs(ANTIRECOIL_H_START[INDEXER] - ANTIRECOIL_H_END[INDEXER]));
			
			
			if(!get_ival(FIRE))  
			{
				// Vertical
				ar_y = ANTIRECOIL_START[INDEXER];
				i_cnt = 0;
				i_num = 0;
				// Horizontal
				ar_x = ANTIRECOIL_H_START[INDEXER];
				i_cnt_h = 0;
				i_num_h = 0;
			}
			// If Fire button is held
			if(get_ival(FIRE)) 
			{
				// Vertical
				if(!p_complete())  
				ar_y = p_val();
				else
				ar_y = ANTIRECOIL_END[INDEXER];
				
				if(y_val() < 100)
				set_val(PS4_RY,y_val()); 
				
				// Horizontal
				if(!p_complete_x())
				ar_x = p_val_x();
				else
				ar_x = ANTIRECOIL_H_END[INDEXER];
				
				if(x_val() < 100)
				set_val(PS4_RX,x_val()); 
				
			}
		}
	
		if(get_ival(ADS) && event_release(PS4_DOWN)){
			
			USE_BUNNY_HOP =!USE_BUNNY_HOP;
			combo_run(Menu_Rumble);
			
			if(!USE_BUNNY_HOP)
			{		
				combo_stop(BLINK_2);
				set_led(Yellow, Blue);
				set_led (Blue, Red);
			}
			else 
			{
				set_led(1,2);
			}
		}
		
		if(USE_BUNNY_HOP){
			
			if(get_ival(JUMP) && get_ptime(JUMP) > 200) 
			combo_run(Bunnyhop); 	
			
			led_on  = 150;
			led_off = 300;
			combo_run(BLINK_2);
		}
		if(!KS_Rapid_Fire){
			if(get_ival(ADS) && event_release(PS4_RIGHT)){
				
				Standard =!Standard;
				combo_run(Menu_Rumble);
				
				if(!Standard)
				{		
					combo_stop(BLINK);
					set_led(Red, 1);
					set_led (0, 3);
				}
			 
				
			}
			//AKIMBO
			if(get_ival(ADS) && event_press(Akimbo_Toggle)) {
				combo_run (RUMBLE_ON);
				combo_restart(BLINK_3);
				
				Akimbo = !Akimbo;
			}
		}
		if (Akimbo) {
			if(get_ival(FIRE))
			combo_run(Akimbo);
			led_on  = 150;
			led_off = 300;
			combo_run(BLINK_3);
		}
	
		//--- RAPID FIRE
		if(Standard){
			
			hold_time = 500 ; 
			rest_time = hold_time - 20;
			if(rest_time < 0) rest_time = 0;
			
			if(get_val(FIRE))combo_run(rapid_Fire_Standard );
			else combo_stop(rapid_Fire_Standard  );	
			
			led_on  = 150;
			led_off = 300;
			combo_run(BLINK);
		}

		if (USE_QUICKSCOPE) { 
		
			if (event_release(ADS) && (get_ptime(ADS) < 140)) {
				combo_run(QUICKSCOPE);                
			}             		
		}
	}//==============================================
 
	if( menu && !EditMenu) { 
	
		//===========================================================
		//       SWITCH PROFILES  Y/TRIANGLE  
		//===========================================================
		if( event_press(SWITCH))  {
	        INDEXER = !INDEXER;
			
	        print_profile_text(INDEXER, 1);
	        construct = 1;
		}      
		
		//--- EXIT from OLED MENU
		if( event_press( PS4_CIRCLE )) { Save_Exit()}
		//--- ENTER in EDIT MENU
		if( event_press( PS4_CROSS  )) { EditMenu = TRUE;refresh_edit = TRUE; edit_idx = Min_Max [menu][0]; construct = 0;  }
		//--- BLOCK ALL INPUTS when we in OLED MENU
		block_all_inputs();
		
			
		if( event_press( PS4_RIGHT ) ) { 
			menu++; 
			if( menu > cycle_limit )  menu = cycle_return;  
			construct = 1;
		}
		if( event_press( PS4_LEFT  ) ){ 
			menu--; 
			if( menu < cycle_return )  menu = cycle_limit ; 
			construct = 1;
			
		}
		
		//--- RAPID FIRE
		if( menu == Rapid_Fire_menu ) {
			rapid_Fire_option = change_options(rapid_Fire_option, 3,0 );
		}
		//--- SLIDE CANCEL
		if( menu == Slide_Cancel_Mod_Menu ) {
			USE_SLIDE_CANCEL = change_options(USE_SLIDE_CANCEL, 2,0 );
		}
		//--- POLAR ASSIST
		if( menu ==Polar_Aim_Menu ) {
			USE_POLAR_AIM = change_options(USE_POLAR_AIM, 1,0 );
		}
		//--- BATTS STICKY
		if( menu == Batts_Sticky_Menu ) {
			USE_STICKY_AIM = change_options(USE_STICKY_AIM, 1,0 );
		}
		//---HOLD BREATH
		if( menu == Sniper_menu ) {
			USE_HOLD_BREATH = change_options(USE_HOLD_BREATH, 1,0 );
		}
		//--- RECOIL 
		if( menu == Sweet_Evil_Recoil_menu ) {
			AR_TYPE = change_options(AR_TYPE, 2,0 );
			
		}
		//--- INVERTED
		if( menu == Inverted_Menu){
			
			INVERTED = change_options(INVERTED, 1,0 );	
		}
		//--- ENHANCED SCANING
		if( menu == Enhanced_Menu){
			print_mod_name();
			
			TRACKING = change_options(TRACKING, 1,0 );
		}
		//--- DROP SHOT
		if( menu == Drop_Shot_Menu ){
			USE_DROPSHOT = change_options(USE_DROPSHOT, 1,0 ); 
		}
		
		//--- SENSES
		if( menu == Senses_Menu) {
			USE_WOLF_SENS = change_options(USE_WOLF_SENS, 1,0 );
			
		}
		
		//--- BOOSTS
		if( menu == Boosts_Menu) {
			USE_CORRECTION = change_options(USE_CORRECTION, 1,0 );
			
		}
		
		//--- BUTTON LAYOUT
		if( menu == ButtonLayout ) {
			BUTTON_LAYLOUT = change_options(BUTTON_LAYLOUT,16,0) ; 
		}
		//--- STICK LAYOUT
		if( menu == StickLayout ) {
			STICK_LAYLOUT = change_options(STICK_LAYLOUT,5,0) ; 
		}
		
		//LEGACY
		if( menu == Legacy) {
			USE_LEGACY[INDEXER]  = change_options(USE_LEGACY[INDEXER] , 92,0 ); 
		}
		//STEADY AIM
		if( menu == Steady_Aim_Menu) {
			USE_STEADY_AIM  = change_options(USE_STEADY_AIM , 1,0 ); 
		}
		//PROGRESSIVE
		if( menu == Progressive_Menu) {
			PROGRESSIVE_RECOIL[INDEXER]  = change_options(PROGRESSIVE_RECOIL[INDEXER] , 92,0 ); 
		}
		
		//RUMBLE 
		if( menu == Rumble_Menu) {
			USE_RUMBLE  = change_options(USE_RUMBLE , 1,0 ); 
		}
		//TURBO MELEE
		if( menu == Melee_Menu) {
			USE_MELEE  = change_options(USE_MELEE , 1,0 ); 
		}
		if( menu == Bunny_Menu) {
			USE_BUNNY_HOP  = change_options(USE_BUNNY_HOP  , 1,0 ); 
		}
		if( menu == QuickScope_Menu ) {
			USE_QUICKSCOPE = change_options(USE_QUICKSCOPE, 1,0 );
		}
		
	}
	
	if( menu &&  EditMenu){
		
		//--- Exit Edit Menu --> back to OLED MENU
		if(event_press(PS4_CIRCLE)){  construct = 1; EditMenu = FALSE; }
		
		block_all_inputs();
		if(event_press(PS4_RIGHT)) {
			edit_idx++;
			if(edit_idx > Min_Max [menu][1]) edit_idx = Min_Max [menu][0];
			if(edit_idx < Min_Max [menu][0]) edit_idx = Min_Max [menu][0];
			
			refresh_edit = TRUE;
		}
		//--- GO LEFT
		block_all_inputs();
		if(event_press(PS4_LEFT)) {
			edit_idx--;
			if(edit_idx < Min_Max [menu][0]) edit_idx = Min_Max [menu][1] ;
			
			refresh_edit = TRUE;
		}
		//--- REFRESH EDIT MENU
		if(refresh_edit){
			cls_oled( 1 );
			rect_oled( 1, 1, 126, 14, 1, 0 );
		
			//--- There is no Edit variables for this MOD
			if(Edit_ind[ menu ] == 0 ){
				print_mod_name();
				//--- print label 
				line_oled(1,45,127,45,1,0);
				printf( center_x( 17, ofsw ), 20, ofs, 0, NO_EDIT_VAR1[0] );  
				printf( center_x( 12, ofsw ), 33, ofs, 0, NO_EDIT_VAR2[0] ); 
			}
			//display_edit(f_val, max, min);
			//--- SLIDE CANCEL
			if( menu == Slide_Cancel_Mod_Menu ) {
				print_mod_name();
				//                   val, min,  max, indx     
				if(edit_idx == 4) {display_edit( CW_SLIDE_DELAY,  10,   80, 4  ) ;}
				if(edit_idx == 5) {display_edit( MW_SLIDE_DELAY,  10,   80, 5  ) ;}			
				
			}
			//--- POLAR AIM
			else if( menu == Batts_Sticky_Menu ) {
				print_mod_name();
				//                   val, min,  max, indx     
				
				if(edit_idx == 2) {display_edit( STICKY_AIM_SIZE[INDEXER],   0,   30, 2 ) ;}		
				if(edit_idx == 3) {display_edit( STICKY_AIM_TIME[INDEXER],   0,   30, 3 ) ;}		
			}
			//---- POLAR
			else if( menu ==Polar_Aim_Menu ) {
				print_mod_name();
				if(edit_idx == 0) {display_edit(POLAR_RADIUS[INDEXER],      0, 50, 0); }
				if(edit_idx == 1) {display_edit(POLAR_STEPS[INDEXER] ,      0, 50, 1); }
				
				
			}
			//----TRACKER
			else if( menu == Enhanced_Menu ) {
				print_mod_name();
				
				if(edit_idx == 6) {display_edit(ENHANCED_SCANNING_STRENGTH[INDEXER], 0 , 26, 6); }
				if(edit_idx == 7) {display_edit(ENHANCED_SCANNING_SPEED[INDEXER]   , 0 , 18, 7); }
				
				
			} //----SWEET EVIL RECOIL
			else if( menu == Sweet_Evil_Recoil_menu ) {
				print_mod_name();
				
				if(edit_idx == 8) {display_edit(AR_STRENGTH[INDEXER], -50 , 70, 8); }

			}
			//---  SENSES
			else if( menu == Senses_Menu ) {
				print_mod_name();
				//                                  var,    min, max, 
				if(edit_idx == 9) {display_edit(GEN_SENS,        0 , 327, 9); }
				if(edit_idx == 10) {display_edit(ADS_SENS,       0 , 327, 10); }
				if(edit_idx == 11) {display_edit(FIRE_SENS,      0 , 327, 11); }
				if(edit_idx == 12) {display_edit(ADS_FIRE_SENS,  0 , 327, 12); }
				if(edit_idx == 13) {display_edit(GRENADE_SENS,   0 , 327, 13); }
			}
			//------LEGACY
			else if( menu == Legacy ) {
				print_mod_name();
				
				if(edit_idx == 16) {display_edit(ANTI_RECOIL[INDEXER],     0 , 70, 16); }
				if(edit_idx == 17) {display_edit(ANTI_RECOIL_H[INDEXER], -30 , 70, 17); }

			}
			//-----BOOSTS
			else if( menu == Boosts_Menu ) {
				print_mod_name();
				//                                  var,    min, max, 
				//if(edit_idx == 14) {display_edit(RADIUS_BOOST ,     0 , 12, 14); }
				if(edit_idx == 15) {display_edit(SENSES_BOOST ,     0 , 20, 15); }
				
			}
			// ----STEADY AIM
			else if( menu == Steady_Aim_Menu ) {
				print_mod_name();
				
				if(edit_idx == 18) {display_edit(RESOLUTION,   6 , 90, 18); }
				

			}
			//------PROGRESSIVE RECOIL
			else if( menu == Progressive_Menu ) {
				print_mod_name();
				//                                  var,    min, max, 
				if(edit_idx == 19) {display_edit(ANTIRECOIL_START[INDEXER],      -30 , 70, 19); }
				if(edit_idx == 20) {display_edit( ANTIRECOIL_END[INDEXER] ,      -30 , 70, 20); }
				if(edit_idx == 21) {display_edit( ANTIRECOIL_TIME[INDEXER],      1500 , 6000, 21); }
				
				if(edit_idx == 22) {display_edit(ANTIRECOIL_H_START[INDEXER],      -25 , 50, 22); }
				if(edit_idx == 23) {display_edit( ANTIRECOIL_H_END[INDEXER]  ,      -25 , 50, 23); }
				if(edit_idx == 24) {display_edit( ANTIRECOIL_H_TIME[INDEXER] ,      1500 , 6000, 24); }
				
			}
			
			
			refresh_edit = FALSE;
			
		}
		//--- SLIDE CANCEL
		if( menu == Slide_Cancel_Mod_Menu ) {
			print_mod_name();
			//                   val,min,  max, indx    
			if(edit_idx == 4) { CW_SLIDE_DELAY  = edit_val( CW_SLIDE_DELAY , 10,   80,  1  ) ;}
			if(edit_idx == 5) { MW_SLIDE_DELAY  = edit_val( MW_SLIDE_DELAY , 10,   80,  1  ) ;}	
			
			
		}
		//POLAR
		else if( menu ==Polar_Aim_Menu ) { 
			print_mod_name();
			
			//                                        val,min,  max, step     
			if(edit_idx == 0) { POLAR_RADIUS[INDEXER]      = edit_val( POLAR_RADIUS[INDEXER],       0,   50,  1  ) ;}
			if(edit_idx == 1) { POLAR_STEPS[INDEXER]  = edit_val( POLAR_STEPS[INDEXER] ,  0,   50,  1  ) ;}	
		}
		//---  -- Batts_Sticky_
		else if( menu == Batts_Sticky_Menu ) {
			print_mod_name();
			//                         val          ,min,  max, step     
			
			if(edit_idx == 2) { STICKY_AIM_SIZE[INDEXER]  = edit_val( STICKY_AIM_SIZE[INDEXER] ,  0,   30,  1  ) ;}			
			if(edit_idx == 3) { STICKY_AIM_TIME[INDEXER]  = edit_val( STICKY_AIM_TIME[INDEXER] ,  0,   30,  1  ) ;}		
		}
		// TRACKER
		else if( menu == Enhanced_Menu ) {
			print_mod_name();
			//                         val          ,min,  max, step     
			if(edit_idx == 6) { ENHANCED_SCANNING_STRENGTH[INDEXER]  = edit_val( ENHANCED_SCANNING_STRENGTH[INDEXER] ,  0,   26,  1  ) ;}
			if(edit_idx == 7) { ENHANCED_SCANNING_SPEED[INDEXER]     = edit_val( ENHANCED_SCANNING_SPEED[INDEXER]    ,  0,   18,  1  ) ;}				
			
		}
		//SWEET EVIL RUMBLE & DYNAMIC RECOIL
		else if( menu == Sweet_Evil_Recoil_menu ) {
			print_mod_name();
			
			if(edit_idx == 8) {AR_STRENGTH[INDEXER] = edit_val( AR_STRENGTH[INDEXER] , -50,  70,  1  ) ;}	
			
		}
		//WOLF SENSES
		else if( menu == Senses_Menu ) {
			print_mod_name();
			//                                  var,    min, max, 
			if(edit_idx == 9) {GEN_SENS      = edit_val( GEN_SENS       ,  50,  327,  1  ) ;}
			if(edit_idx == 10) {ADS_SENS      = edit_val( ADS_SENS      ,  50,  327,  1  ) ;}
			if(edit_idx == 11) {FIRE_SENS     = edit_val( FIRE_SENS     ,  50,  327,  1  ) ;}
			if(edit_idx == 12) {ADS_FIRE_SENS = edit_val( ADS_FIRE_SENS ,  50,  327,  1  ) ;}
			if(edit_idx == 13) {GRENADE_SENS  = edit_val( GRENADE_SENS  ,  50,  327,  1  ) ;}
		}
		//LEGACY AR
		else if( menu == Legacy) {
			print_mod_name();
			if(edit_idx == 16) {ANTI_RECOIL[INDEXER]   = edit_val( ANTI_RECOIL[INDEXER] ,     0, 70, 1  ) ;}
			if(edit_idx == 17) {ANTI_RECOIL_H[INDEXER] = edit_val( ANTI_RECOIL_H[INDEXER] , -30, 70, 1  ) ;}
		}
		//BOOSTS
		else if( menu == Boosts_Menu ) {
			print_mod_name();
			//                                  var,    min, max, 
			
			//if(edit_idx == 14){RADIUS_BOOST               = edit_val( RADIUS_BOOST            ,  0,  15,  1  ) ;}
			if(edit_idx == 15){SENSES_BOOST                 = edit_val( SENSES_BOOST            ,  0,  20,  1  ) ;}
			
			
		}
		//STEADY AIM
		else if( menu == Steady_Aim_Menu) {
			print_mod_name();
			
			if(edit_idx == 18) {RESOLUTION[INDEXER] = edit_val( RESOLUTION[INDEXER] ,6,  90,  1  ) ;}	
			
		}
		//PROGRESSIVE AR
		else if( menu == Progressive_Menu) {
			print_mod_name();
			//                                  var,    min, max, 
			if(edit_idx == 19) {ANTIRECOIL_START[INDEXER]        = edit_val( ANTIRECOIL_START[INDEXER]      ,  -30,  70,   1  ) ;}
			if(edit_idx == 20) {ANTIRECOIL_END[INDEXER]          = edit_val(  ANTIRECOIL_END[INDEXER]       ,  -30,  70,    1  ) ;}
			if(edit_idx == 21) {ANTIRECOIL_TIME[INDEXER]         = edit_val(  ANTIRECOIL_TIME[INDEXER]      ,  1500,  6000,  10 ) ;}
			
			if(edit_idx == 22) {ANTIRECOIL_H_START[INDEXER]      = edit_val( ANTIRECOIL_H_START[INDEXER]    ,  -30,  50,   1  ) ;}
			if(edit_idx == 23) {ANTIRECOIL_H_END[INDEXER]        = edit_val(  ANTIRECOIL_H_END[INDEXER]     ,  -30,  50,    1  ) ;}
			if(edit_idx == 24) {ANTIRECOIL_H_TIME[INDEXER]       = edit_val(  ANTIRECOIL_H_TIME[INDEXER]    ,  1500,  6000,  10 ) ;}
			
			
			
		}
		
	}
	//--- SCREEN SAVER
	if( screen_saver ) {
		if( menu == dash_board ) { strobing_a1(); }
		clear += get_rtime();
		if( clear >= 12000 ) { cls_oled( 0 ); clear = 0; screen_saver = 0; }
	}
}

//--- END OF MAIN BLOCK
//==================================================


//==========COMBOS============================
combo HOLD_BREATH
{
	set_val(SPRINT,0);
	wait(64);
	set_val(SPRINT,100);
	wait(112);
	set_val(SPRINT,0);
	wait(112);
}

combo MW {
	set_val(CROUCH, 100);
	wait(MW_SLIDE_DELAY); 
	set_val(CROUCH, 0);
	wait(60);
	set_val(CROUCH, 100);
	wait(50);
	set_val(CROUCH, 100);
	set_val(JUMP, 100);
	wait(60);
	set_val(CROUCH, 0);
	set_val(JUMP, 100);
	wait(10);
	set_val(JUMP, 0);
}

combo CW {
	set_val(CROUCH, 100);
	wait(CW_SLIDE_DELAY);
	set_val(CROUCH, 0);
	wait(20);
	set_val(SPRINT, 0);
	set_val(ADS, 100);
	wait(10);
	set_val(ADS, 0);
	set_val(CROUCH, 100);
	set_val(SPRINT, 100);
	wait(20);
	set_val(CROUCH, 0);
	set_val(SPRINT, 0);
	wait(20);
}
combo DROP {
	set_val(CROUCH,100);
	wait(40);
	set_val(CROUCH,0);
	wait(DS_Speed);
}
combo Bunnyhop{
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
	set_val(JUMP, 100);
	wait(30);
	set_val(JUMP, 0);
	wait(30);
}


combo AntiRecoil {  
	anti_recoil = get_val(aim_y) + ANTI_RECOIL[INDEXER] * inverted      
	if(anti_recoil > 100) anti_recoil = 100;      
	set_val(aim_y, anti_recoil);                     
	anti_recoil_H = get_val(aim_x) + ANTI_RECOIL_H[INDEXER] * inverted  
	if(anti_recoil_H > 100) anti_recoil_H = 100;  
	set_val(aim_x, anti_recoil_H);   
}           


combo RUMBLE_ON {
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
}


combo Menu_Rumble {
	set_rumble(RUMBLE_B,100);
	wait(200);
	reset_rumble();

}


combo BLINK {
	led(Yellow);
	wait(led_on);
	led(Red);
	wait(led_off);
}
combo BLINK_2 {
	led(Yellow);
	wait(led_on);
	led(Purple);
	wait(led_off);
}
combo BLINK_3 {
	led(Red);
	wait(led_on);
	led(Pink);
	wait(led_off);
}

combo rapid_Fire_Standard {
	set_val( FIRE, 100 );
	wait( 12 );
	set_val( FIRE, 0 );
	wait( 10 );
	set_val( FIRE, 0 );
}
combo rapid_Fire_double {
	set_val( FIRE, 100 );
	wait( 12 );
	set_val( FIRE, 0 );
	wait( 12 );
	set_val( FIRE, 0 );
}
combo QUICKSCOPE {  
	set_val(FIRE, 0); 
	set_val(ADS, 100); 
	set_val(SPRINT, 100); 
	wait(SCOPE_VAL);    
	set_val(FIRE, 100);
	set_val(ADS, 100); 
	set_val(SPRINT, 100); 
	wait(40);                        
}
combo rapid_Fire_realistic {
	set_val( FIRE, 100 );
	wait( random( 12, 37 ) );
	set_val( FIRE, 0 );
	wait( random( 10, 37 ));
	set_val( FIRE, 0 );
}
combo Akimbo {
	set_val(FIRE, 100);
	set_val(ADS, 100);
	wait(100);
	set_val(FIRE,0);
	set_val(ADS,0);
	wait(100);
}
combo Sticky_Aim {
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE[INDEXER]));
	wait(STICKY_AIM_TIME[INDEXER]);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE[INDEXER]));
	set_val(strafe,xy_val(strafe, STICKY_AIM_SIZE[INDEXER]));
	wait(STICKY_AIM_TIME[INDEXER]);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE[INDEXER] * -1));
	wait(STICKY_AIM_TIME[INDEXER]);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE[INDEXER] * -1));
	wait(STICKY_AIM_TIME[INDEXER]);
	set_val(aim_y,xy_val(aim_y, STICKY_AIM_SIZE[INDEXER] * -1));
	set_val(strafe,xy_val(strafe, STICKY_AIM_SIZE[INDEXER] * -1));
	wait(STICKY_AIM_TIME[INDEXER]);
}
combo Turbo_Melee {
	set_val(MELEE, 100);
    wait(35);
    set_val(MELEE, 0);
    wait(30);  
} 

//==========COMBO END==============================
function display_edit(f_val,f_min ,f_max , f_ind){	
	
	// on the left: min value
	number_to_string(f_min ,find_digits(f_min) ,4 , 18 , OLED_FONT_SMALL);
	// on the right: max value
	number_to_string(f_max ,find_digits(f_max) ,97 , 18 , OLED_FONT_SMALL);
	
	// print edit value on oled                                                           
	if( ((find_digits(f_val)/ 2) * OLED_FONT_MEDIUM_WIDTH == 0 )) horiz_X_center_sufix = 54;
	else horiz_X_center_sufix = 57 - ((find_digits(f_val)/ 2) * OLED_FONT_MEDIUM_WIDTH);     
	// number_to_string(f_val,f_digits ,print_s_x , print_s_y , f_font)                          
	number_to_string(f_val ,find_digits(f_val) ,horiz_X_center_sufix , EDIT_VAL_PRINT_Y , OLED_FONT_MEDIUM);// 45 
	
	//--- print label 
	line_oled(1,45,127,45,1,0);
		
	printf( center_x( CharCount[f_ind], ofsw ), 50, ofs, 0, EditValuesNames[f_ind] );   
}

function edit_val( f_val, f_min, f_max, f_inc1) {  // 
	
	f_val    = value_change( f_val ,XB1_UP , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
	f_val    = value_change( f_val ,XB1_DOWN, f_inc1     , f_min, f_max ); // f_inc1
	
	return f_val;                        
}

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

	if(press_hold(f_btn)) 
	{
		f_val += f_inc;
		
		if (f_val > f_rng_max) f_val = f_rng_max;
		else if(f_val < f_rng_min) f_val = f_rng_min;
		
		refresh_edit  = TRUE;
	}
	return f_val; 
} 
function press_hold(f_btn) { 
	//  return TRUE - event_press()   
	//  - every 250 ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	&& get_ptime(f_btn) % (get_rtime() * 8) == 0;
}
const uint8 Opt_BL [] = {
	7 , 8, 5, 13, 17, 17,13, 17, 17, 14, 7, 5, 15, 14, 17, 17,16 
};

function OptionMenu_BL ( str_char , f_indx ) {

	printf( center_x( str_char, ofsw ), 20, ofs, 0, BL_str[ f_indx ] );   

}


function print_mod_name (){
	printf( center_x( ModNames_char_count[menu], ofsw ), 4, 0, 1, submenu_idx[ menu  ] )
}

function change_options (f_var, max_val, min_val) {

	if( event_press( XB1_DOWN ) )   { 
		f_var++;
		construct = 1;
		if( f_var > max_val ) f_var =  min_val; 
		return f_var;
	}
	else if( event_press( XB1_UP ) )   { 
		f_var--; 
		construct = 1;
		if( f_var < min_val ) f_var =  max_val; 
		return f_var;
	}
	return f_var;
}
function center_x( menu_chars, menu_font ) {
	return( OLED_WIDTH / 2 ) - ( ( menu_chars * menu_font ) / 2 );
}

function led( f_color ) {
	for( i = 0; i <= 3; i++ ) {
		set_led( i, duint8( ( (f_color * 4) - 3 ) + i ) );
	}
}


function strobing_a1() {
	strobing_a = strobing_a + get_rtime();

	//printf( center_x( 10, ofsw ), 35, 0, 0, instruction_idx[ 0 ] );
	//rect_oled(20, 38, 90, 33, 1,0 );
	if(strobing_a <= 3000){
		show_OPEN_MENU( 1 )
	}else{
		show_Edit_Menu ( 1 );
	}
	
	if( strobing_a > 6000 ) {
		strobing_a = 0;
	}
}

function strobing_b1() {
	strobing_b = strobing_b + get_rtime();
	if( strobing_b < 500 ) {
		l_active( 25, 49, 0 );
		u_active( 46, 49, 0 );
		r_active( 88, 49, 0 );
		d_active( 67, 49, 0 );
	}
	if( strobing_b > 500 ) {
		l_active( 25, 49, 1 );
		u_active( 46, 49, 1 );
		r_active( 88, 49, 1 );
		d_active( 67, 49, 1 );
	}
	if( strobing_b > 1000 ) {
		strobing_b = 0;
	}
}
function create_dpad( x, y, c ) {
	pixel_oled( 6  + x, 1  + y, c ); pixel_oled( 7  + x, 1  + y, c ); pixel_oled( 8  + x, 1  + y, c );
	pixel_oled( 5  + x, 2  + y, c ); pixel_oled( 9  + x, 2  + y, c ); pixel_oled( 5  + x, 3  + y, c );
	pixel_oled( 9  + x, 3  + y, c ); pixel_oled( 6  + x, 4  + y, c ); pixel_oled( 8  + x, 4  + y, c );
	pixel_oled( 2  + x, 5  + y, c ); pixel_oled( 3  + x, 5  + y, c ); pixel_oled( 7  + x, 5  + y, c );
	pixel_oled( 11 + x, 5  + y, c ); pixel_oled( 12 + x, 5  + y, c ); pixel_oled( 1  + x, 6  + y, c );
	pixel_oled( 4  + x, 6  + y, c ); pixel_oled( 10 + x, 6  + y, c ); pixel_oled( 13 + x, 6  + y, c );
	pixel_oled( 1  + x, 7  + y, c ); pixel_oled( 5  + x, 7  + y, c ); pixel_oled( 9  + x, 7  + y, c );
	pixel_oled( 13 + x, 7  + y, c ); pixel_oled( 1  + x, 8  + y, c ); pixel_oled( 4  + x, 8  + y, c );
	pixel_oled( 10 + x, 8  + y, c ); pixel_oled( 13 + x, 8  + y, c ); pixel_oled( 2  + x, 9  + y, c );
	pixel_oled( 3  + x, 9  + y, c ); pixel_oled( 7  + x, 9  + y, c ); pixel_oled( 11 + x, 9  + y, c );
	pixel_oled( 12 + x, 9  + y, c ); pixel_oled( 6  + x, 10 + y, c ); pixel_oled( 8  + x, 10 + y, c );
	pixel_oled( 5  + x, 11 + y, c ); pixel_oled( 9  + x, 11 + y, c ); pixel_oled( 5  + x, 12 + y, c );
	pixel_oled( 9  + x, 12 + y, c ); pixel_oled( 6  + x, 13 + y, c ); pixel_oled( 7  + x, 13 + y, c );
	pixel_oled( 8  + x, 13 + y, c );
}
function l_active( x, y, c ) {
	pixel_oled(2 + x, 6 + y, c ); pixel_oled(3 + x, 6 + y, c ); pixel_oled(2 + x, 7 + y, c );
	pixel_oled(3 + x, 7 + y, c ); pixel_oled(4 + x, 7 + y, c ); pixel_oled(2 + x, 8 + y, c );
	pixel_oled(3 + x, 8 + y, c );
}
function u_active( x, y, c ) {
	pixel_oled( 6 + x, 2 + y, c ); pixel_oled( 7 + x, 2 + y, c ); pixel_oled( 8 + x, 2 + y, c );
	pixel_oled( 6 + x, 3 + y, c ); pixel_oled( 7 + x, 3 + y, c ); pixel_oled( 8 + x, 3 + y, c );
	pixel_oled( 7 + x, 4 + y, c );
}
function r_active( x, y, c ) {
	pixel_oled( 11 + x, 6 + y, c ); pixel_oled( 12 + x, 6 + y, c ); pixel_oled( 10 + x, 7 + y, c );
	pixel_oled( 11 + x, 7 + y, c ); pixel_oled( 12 + x, 7 + y, c ); pixel_oled( 11 + x, 8 + y, c );
	pixel_oled( 12 + x, 8 + y, c );
}
function d_active( x, y, c ) {
	pixel_oled( 7 + x, 10 + y, c ); pixel_oled( 6 + x, 11 + y, c ); pixel_oled( 7 + x, 11 + y, c );
	pixel_oled( 8 + x, 11 + y, c ); pixel_oled( 6 + x, 12 + y, c ); pixel_oled( 7 + x, 12 + y, c );
	pixel_oled( 8 + x, 12 + y, c );
}
//========MENU EDITS ================================
const string NO_EDIT_VAR1  = "No Edit Variables";  //
const string NO_EDIT_VAR2  = "for this MOD";       //
const string LT_MENU    = "   OPEN MENU  ";        //
const string L2_OPTIONS = " L2 + OPTIONS ";        //
const string EDIT_MENU1 = "  KILLSWITCH  ";      //
const string EDIT_MENU2 = " L2  +  SHARE ";      //
//===================================================

function print_profile_text ( indx,print_color ){
                                               
    if(indx){// Secondary
		rect_oled(2,50,110,20,1,print_color);
		printf(30, 50, 0, !print_color, PROFILES[1])
		led( Yellow );
	}else{   // Primary
		//rect_oled( <x> , <y>, <width>, <height>, <fill>, <color> );
		rect_oled(2,50,110,20,1,print_color);
		printf(40, 50, 0, !print_color, PROFILES[0]);
		led(SkyBlue)
	}
}
function show_OPEN_MENU( color ) {

	printf(center_x(14, ofsw ), 40, ofs, color, LT_MENU[0]    );  
	printf(center_x(14, ofsw ), 50, ofs, color, L2_OPTIONS[0] );  
	
}
function show_Edit_Menu( color ) {

	printf(center_x(15, ofsw ), 40, ofs, color, EDIT_MENU1[0] );  
	printf(center_x(15, ofsw ), 50, ofs, color, EDIT_MENU2[0] );  
	
}


function get_steady_aim( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}
int i_val ;
int i_num;
int i_cnt;
int v,ar_y;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;
int i_pnt
int i_val_h
int  i_pnt_h

function LOAD_PVARS(){///NON TOGGLES
    BUTTON_LAYLOUT             = get_pvar(SPVAR_1 ,   0,  16,  0); 
	STICK_LAYLOUT              = get_pvar(SPVAR_2 ,   0,   5,  0); 
	CW_SLIDE_DELAY             = get_pvar(SPVAR_3 ,  10,  80, 80);  	            	
	MW_SLIDE_DELAY             = get_pvar(SPVAR_4 ,  10,  80, 80);
	//RADIUS_BOOST               = get_pvar(SPVAR_5,    1,  12,  5);
	SENSES_BOOST               = get_pvar(SPVAR_6,    1,  20,  4); 
	GEN_SENS                   = get_pvar(SPVAR_7,    1, 327,100);
	ADS_SENS                   = get_pvar(SPVAR_8,    1, 327,100);
	FIRE_SENS                  = get_pvar(SPVAR_9,    1, 327,100);
	ADS_FIRE_SENS              = get_pvar(SPVAR_10,   1, 327,100);
	GRENADE_SENS               = get_pvar(SPVAR_11,   1, 327,100); 
	
	//toggles
	USE_LEGACY [0]             = get_pvar(SPVAR_12,   0,   100,  0); 
	USE_STEADY_AIM             = get_pvar(SPVAR_13,   0,   1,  0);
	USE_WOLF_SENS              = get_pvar(SPVAR_14,   0,   1,  0);
	USE_CORRECTION             = get_pvar(SPVAR_15,   0,   1,  0);
	USE_POLAR_AIM              = get_pvar(SPVAR_16,   0,   1,  0);   
	AR_TYPE                    = get_pvar(SPVAR_17,   0,   1,  0); 
	USE_DROPSHOT               = get_pvar(SPVAR_18,   0,   1,  0);
	USE_BUNNY_HOP              = get_pvar(SPVAR_19,   0,   1,  0);
	USE_STICKY_AIM             = get_pvar(SPVAR_20,   0,   1,  0);
	TRACKING                   = get_pvar(SPVAR_21 ,  0,   1,  0);
	INVERTED                   = get_pvar(SPVAR_22 ,  0,   1,  0);
	USE_RUMBLE                 = get_pvar(SPVAR_23,   0,   1,  0);
	USE_MELEE                  = get_pvar(SPVAR_24,   0,   1,  0);
	USE_QUICKSCOPE             = get_pvar(SPVAR_25,   0,   1,  0);
	PROGRESSIVE_RECOIL         = get_pvar(SPVAR_59,   0,   100,  0);
	USE_HOLD_BREATH            = get_pvar(SPVAR_60,   0,   1,  0);
	
	
	
	//profile1 
	ENHANCED_SCANNING_STRENGTH[0] = get_pvar(SPVAR_26 , 1,  26,  8);
	ENHANCED_SCANNING_SPEED[0]    = get_pvar(SPVAR_27 , 1,  18,  2);
	RESOLUTION[0]                = get_pvar(SPVAR_28,   1,   6, 18);
	ANTIRECOIL_START[0]          = get_pvar(SPVAR_29,   1, 100, 26);
	ANTIRECOIL_END[0]            = get_pvar(SPVAR_30,   1, 100, 26);
	ANTIRECOIL_TIME[0]           = get_pvar(SPVAR_31,   1,6500,3000);
	ANTIRECOIL_H_START[0]        = get_pvar(SPVAR_32,   1, -30,  0);
	ANTIRECOIL_H_END[0]          = get_pvar(SPVAR_33,   1, -30,  0);
	ANTIRECOIL_H_TIME[0]         = get_pvar(SPVAR_34,   1,6500,1500);
	ANTI_RECOIL[0]               = get_pvar(SPVAR_35,   1,  70, 30);
	ANTI_RECOIL_H[0]             = get_pvar(SPVAR_36,   1,  -30, 0); 
	POLAR_RADIUS[0]              = get_pvar(SPVAR_37,   1,  50, 26);
	POLAR_STEPS[0]               = get_pvar(SPVAR_38,   1,  50, 18);
	STICKY_AIM_SIZE[0]           = get_pvar(SPVAR_39,   1,  30, 21);
	STICKY_AIM_TIME[0]           = get_pvar(SPVAR_40,   1,  30, 18);
	AR_STRENGTH[0]               = get_pvar(SPVAR_41,   1, 100,  40);
	
	//PROFILE 2
	
    ENHANCED_SCANNING_STRENGTH[1] = get_pvar(SPVAR_42,   1,  26,  6);
	ENHANCED_SCANNING_SPEED[1]    = get_pvar(SPVAR_43,   1,  18,  2);
	RESOLUTION[1]                 = get_pvar(SPVAR_44,   1,   6, 8);
	ANTIRECOIL_START[1]           = get_pvar(SPVAR_45,   1, 100, 30);
	ANTIRECOIL_END[1]             = get_pvar(SPVAR_46,   1, 100, 28);
	ANTIRECOIL_TIME[1]            = get_pvar(SPVAR_47,   1,6500,2900);
	ANTIRECOIL_H_START[1]         = get_pvar(SPVAR_48,   1, -30,  0);
	ANTIRECOIL_H_END[1]           = get_pvar(SPVAR_49,   1, -30,  0);
	ANTIRECOIL_H_TIME[1]          = get_pvar(SPVAR_50,   1,6500,1500);
	ANTI_RECOIL[1]                = get_pvar(SPVAR_51,   1,  70, 25);
	ANTI_RECOIL_H[1]              = get_pvar(SPVAR_52,   1,  -30, 0); 
	POLAR_RADIUS[1]               = get_pvar(SPVAR_53,   1,  50, 20);
	POLAR_STEPS[1]                = get_pvar(SPVAR_54,   1,  50, 18);
	STICKY_AIM_SIZE[1]            = get_pvar(SPVAR_55,   1,  30, 17);
	STICKY_AIM_TIME[1]            = get_pvar(SPVAR_56,   1,  30, 10);
	AR_STRENGTH[1]                = get_pvar(SPVAR_57,   1, 100,  40);
	USE_LEGACY [1]                = get_pvar(SPVAR_58,   0,   100,  0); 
	  
	
	
	
	}
function Save_Exit () {
	set_pvar(SPVAR_1 ,   BUTTON_LAYLOUT)
	set_pvar(SPVAR_2 ,   STICK_LAYLOUT); 
	set_pvar(SPVAR_3 ,   CW_SLIDE_DELAY);
	set_pvar(SPVAR_4 ,   MW_SLIDE_DELAY);  	            	
	set_pvar(SPVAR_5 ,   RADIUS_BOOST);
	set_pvar(SPVAR_6 ,   SENSES_BOOST);
	set_pvar(SPVAR_7 ,   GEN_SENS);
	set_pvar(SPVAR_8 ,   ADS_SENS);
	set_pvar(SPVAR_9 ,   FIRE_SENS );
	set_pvar(SPVAR_10,   ADS_FIRE_SENS);
	set_pvar(SPVAR_11,   GRENADE_SENS );
	
	
	set_pvar(SPVAR_12,   USE_LEGACY[0]);
	set_pvar(SPVAR_13,   USE_STEADY_AIM); 
	set_pvar(SPVAR_14,   USE_WOLF_SENS);
	set_pvar(SPVAR_15,   USE_CORRECTION);
	set_pvar(SPVAR_16,   USE_POLAR_AIM);
	set_pvar(SPVAR_17,   AR_TYPE);
	set_pvar(SPVAR_18,   USE_DROPSHOT);
	set_pvar(SPVAR_19,   USE_BUNNY_HOP);    
	set_pvar(SPVAR_20,   USE_STICKY_AIM);
	set_pvar(SPVAR_21,   TRACKING);
	set_pvar(SPVAR_22,   INVERTED);   
	set_pvar(SPVAR_23,   USE_RUMBLE);
	set_pvar(SPVAR_24,   USE_MELEE);
	set_pvar(SPVAR_25,   USE_QUICKSCOPE);
	set_pvar(SPVAR_59,   PROGRESSIVE_RECOIL);
	set_pvar(SPVAR_60,   USE_HOLD_BREATH);
	
	
	set_pvar(SPVAR_26,   ENHANCED_SCANNING_STRENGTH[0]);
	set_pvar(SPVAR_27,   ENHANCED_SCANNING_SPEED[0]);  
	set_pvar(SPVAR_28,   RESOLUTION[0]);
	set_pvar(SPVAR_29,   ANTIRECOIL_START[0]); 
	set_pvar(SPVAR_30,   ANTIRECOIL_END [0]); 
	set_pvar(SPVAR_31,   ANTIRECOIL_TIME[0]);
	set_pvar(SPVAR_32,   ANTIRECOIL_H_START[0] );
	set_pvar(SPVAR_33,   ANTIRECOIL_H_END[0]);
	set_pvar(SPVAR_34,   ANTIRECOIL_H_TIME[0] );
	set_pvar(SPVAR_35,   ANTI_RECOIL[0]);
	set_pvar(SPVAR_36,   ANTI_RECOIL_H[0]);
	set_pvar(SPVAR_37,   POLAR_RADIUS[0]);
	set_pvar(SPVAR_38,   POLAR_STEPS[0]);
	set_pvar(SPVAR_39,   STICKY_AIM_SIZE[0]);
	set_pvar(SPVAR_40,   STICKY_AIM_TIME[0]);
	set_pvar(SPVAR_41,   AR_STRENGTH [0]);
	
	set_pvar(SPVAR_42,   ENHANCED_SCANNING_STRENGTH[1]);
	set_pvar(SPVAR_43,   ENHANCED_SCANNING_SPEED[1]);  
	set_pvar(SPVAR_44,   RESOLUTION[1]);
	set_pvar(SPVAR_45,   ANTIRECOIL_START[1]); 
	set_pvar(SPVAR_46,   ANTIRECOIL_END[1]); 
	set_pvar(SPVAR_47,   ANTIRECOIL_TIME[1]);
	set_pvar(SPVAR_48,   ANTIRECOIL_H_START[1] );
	set_pvar(SPVAR_49,   ANTIRECOIL_H_END[1]);
	set_pvar(SPVAR_50,   ANTIRECOIL_H_TIME[1] );
	set_pvar(SPVAR_51,   ANTI_RECOIL[1]);
	set_pvar(SPVAR_52,   ANTI_RECOIL_H[1]);
	set_pvar(SPVAR_53,   POLAR_RADIUS[1]);
	set_pvar(SPVAR_54,   POLAR_STEPS[1]);
	set_pvar(SPVAR_55,   STICKY_AIM_SIZE[1]);
	set_pvar(SPVAR_56,   STICKY_AIM_TIME[1]);
	set_pvar(SPVAR_57,   AR_STRENGTH[1]);
	set_pvar(SPVAR_58,   USE_LEGACY[1]);
	

	
	combo_run(SAVE);

}

const string SAVE  = "SAVED";
combo SAVE { 
	cls_oled(0);						
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	wait(10)
	
	wait(300);
	cls_oled(0);
	wait(100);
	menu = dash_board; 
	construct = 1; 
	strobing_b1();
	
	
}
function get_rumble_evil_ar()
{	
	_ret = max(get_rumble(RUMBLE_A),get_rumble(RUMBLE_B));
	
	if (_ret > 10 && _ret < 90)
	{
		return (_ret - AR_STRENGTH[INDEXER]);
	}

	return 0;
}

function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{
	//set_val(TRACE_3,isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)));

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}

function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
	return 0;

	if (_val < _lval)
	return -1;

	if (_val > _lval)
	return 1;

	return 0;
}

function sin(angle)
{   
	if(angle <= 90)
	{             
		_ret = (TRACKER[angle]);
	}
	else if (angle <= 180)
	{      
		_ret = (TRACKER[180 - angle]);
	}
	else if (angle <= 270)
	{
		_ret = inv(TRACKER[angle - 180]);     
	}
	else 
	{
		_ret = inv(TRACKER[360 - angle]);      
	}
	
	return _ret;
}

function cos(angle)
{   
	if(angle <= 90)
	{             
		_ret = (TRACKER[90 - angle]);
	}
	else if (angle <= 180)
	{      
		_ret = inv(TRACKER[angle - 90]);
	}
	else if (angle <= 270)
	{
		_ret = inv(TRACKER[270 - angle]);       
	}
	else 
	{
		_ret = (TRACKER[angle - 270]);       
	}
	
	return _ret;
}


function get_polar_coordinate(Radius, coef)
{
	if(Radius > 32)
	{
		Radius = 32;
	}
	
	return((Radius * coef) / 1000);		
}
function p_complete()
{

	i_cnt++;
	if(i_cnt > ANTIRECOIL_TIME[INDEXER] * 10)
	{
		i_cnt = ANTIRECOIL_TIME[INDEXER] * 10;
		return 1;
	}
	return 0;
}
function p_complete_x()
{
	i_cnt_h++;
	if (i_cnt_h >  ANTIRECOIL_H_TIME[INDEXER] * 10)
	{
		i_cnt_h =  ANTIRECOIL_H_TIME[INDEXER] * 10 ;
		return 1;
	}
	return 0;
}
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) {
       
    	i_num_h = 0;
    	
    	ar_x += i_val_h;
    }
    return ar_x;
}
function y_val() { 
    v = get_val(PS4_RY);
    if(abs(v) < 10)
        v = 0;    
    if(abs(v) > abs(ar_y + 5))
        return v;   
    return v + ar_y;           
}
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        
    	i_num = 0;
    	 
    	ar_y += i_val ;
    }
    return ar_y;
}

function xy_val(f_axis,f_val) {
	if(abs(get_val(f_axis)) < STICKY_AIM_SIZE[INDEXER] + 4) 
	return f_val;
	return get_val(f_axis); 
}
function display_QT(togg_number){                           
	cls_oled(0);
	
	if( togg_number == 1){
		print_QT( sizeof(Add_QT_1 ) , Add_QT_1[0] );
		if(KillSwitch){                                                          
			printf( 36 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_OFF[0] ); 
			screen_saver = 0;
		}else{                                                                   
			printf( 45 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );
		}
	} 
	
	combo_run(WAIT_MESSAGE);  
} 
combo WAIT_MESSAGE {

	wait(1500);
	cls_oled(0);
	wait(100);
	}

function center_y(f_size) { 
	return (OLED_HEIGHT  / 2) - (f_size / 2);
}          
//====================================================================================== 
//   Quick Toggles                                    
//====================================================================================== 

const string  QT_ON  ="ON"; 
const string  QT_OFF ="OFF"; 

function print_QT (f_cheract_size ,  f_label ){                         
	rect_oled(1,1,127,63,0,1);                                          
	line_oled(1,20,127,20,1,1);                                         
	printf( center_x( f_cheract_size , OLED_FONT_MEDIUM_WIDTH)    , 2 , OLED_FONT_MEDIUM , OLED_WHITE, f_label); 
}                                                                           
const string Add_QT_1 = " SCRIPT";
//display_Add_QT (1 ); //  - add this code to the Quick Toggle : SCRIPT IS	

// Variables for function number_to_string()  
int n_str_;                            
int c,c_val; 
int horiz_X_center_sufix;
// f_val:value  | f_digits: 1 to 5 | print_s_x: X | print_s_y  | f_font  
function number_to_string(f_val,f_digits ,print_s_x , print_s_y , f_font) {                  

	n_str_ = 1;  c_val = 10000;                            
	
	if(f_val < 0)                     
	{                                                 
		putc_oled(n_str_,45);     
		n_str_ += 1;                                      
		f_val = abs(f_val);  
		
	}                                                 
	
	for(c = 5; c >= 1; c--)                           
	{                                                 
		if(f_digits >= c)                             
		{                                             
			putc_oled(n_str_,ASCII_NUM[f_val / c_val]);    
			f_val = f_val % c_val;                    
			n_str_ +=  1;                                  
			
		}                                             
		c_val /= 10;                                  
	}                                                
	puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_BLACK); // adjustable value centered in X 
}     
const uint8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
{48,49,50,51,52,53,54,55,56,57};  
function find_digits(f_num) {                         
	//  find_digits(value)                                
	//        return Number of Digits in Value Passed     
	
	f_num = abs(f_num);                               
	if(f_num / 10000 > 0) return 5;                   
	if(f_num /  1000 > 0) return 4;                   
	if(f_num /   100 > 0) return 3;                   
	if(f_num /    10 > 0) return 2;                   
	return 1;                  
}                         
int FIRE;
int ADS;
int LETHAL;
int TACTICAL;
int JUMP;
int SWITCH;
int RELOAD; 
int CROUCH;
int MELEE;
int SPRINT; 

const int16 BL[][] = {            
	//Fire    ads        LETHAL        TACTICAL          JUMP    SWITCH        RELOAD       CROUCH   MELEE   SPRINT
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // DEFAULT
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // TACTICAL
	{ XB1_LT,   XB1_RT,    XB1_LB,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_LS, XB1_RS  },     // LEFTY
	{ XB1_RT,   XB1_RB,    XB1_LT,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // N0M4D/CHARLIE
	{ XB1_RT,   XB1_RB,    XB1_LT,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // N0M4D/CHARLIE TACTIVAL
	{ XB1_LT,   XB1_LB,    XB1_RT,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_LS, XB1_RS  },     // N0M4D/CHARLIE L3F7Y
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BUMPER JUMPER
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // BUMPER JUMPER TACTICAL
	{ XB1_LB,   XB1_LT,    XB1_RT,        XB1_RB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // ONE-HAND GUNSLINGER
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,       XB1_RS,    XB1_Y,        XB1_X,     XB1_B,  XB1_A,  XB1_LS  },     // STICK AND MOVE
	{ XB1_RT,   XB1_LT,    XB1_RB,        XB1_LB,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BRAWLER
	{ XB1_RT,   XB1_LT,    XB1_RS,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RB, XB1_LS  },     // BEAST
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,        XB1_A,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // DEFAULT SWAPPED
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // TACTICAL SWAPPED 
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_B,  XB1_RS, XB1_LS  },     // BUMPER JUMPER SWAPPED 
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_A,        XB1_LB,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  },     // BUMPER JUMPER TACTICAL SWAPPED 
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,       XB1_RS,    XB1_Y,        XB1_X,     XB1_B,  XB1_A,  XB1_LS  },     // STICK AND MOVE SWAPPED
	{ XB1_RB,   XB1_LB,    XB1_RT,        XB1_LT,        XB1_A,    XB1_Y,        XB1_X,     XB1_RS, XB1_B,  XB1_LS  }};    // TACTICAL SWAPPED
	
	function Run_Button_Configs(){
	
	FIRE        = BL[BUTTON_LAYLOUT][0];
	ADS         = BL[BUTTON_LAYLOUT][1];
	
	LETHAL      = BL[BUTTON_LAYLOUT][2];
	TACTICAL    = BL[BUTTON_LAYLOUT][3];
	
	JUMP        = BL[BUTTON_LAYLOUT][4];
	SWITCH      = BL[BUTTON_LAYLOUT][5];
	RELOAD      = BL[BUTTON_LAYLOUT][6];
	CROUCH      = BL[BUTTON_LAYLOUT][7];
	MELEE       = BL[BUTTON_LAYLOUT][8];
	SPRINT      = BL[BUTTON_LAYLOUT][9];
	
	walk        = SL[STICK_LAYLOUT][0];
	strafe      = SL[STICK_LAYLOUT][1];
	aim_y       = SL[STICK_LAYLOUT][2];
	aim_x       = SL[STICK_LAYLOUT][3];}
	
const int16 SL[][] = {            
	//Walk,     Strafe, AimY,    AimX    
	{ XB1_LY,     XB1_LX, XB1_RY, XB1_RX },    // DEFAULT
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW
	{ XB1_LY,     XB1_RX, XB1_RY, XB1_LX },    // LEGACY
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX },    // LEGACY SOUTHPAW
	{ XB1_RY,     XB1_RX, XB1_LY, XB1_LX },    // SOUTHPAW NO CLICK SWAP
	{ XB1_RY,     XB1_LX, XB1_LY, XB1_RX }};   // LEGACY SOUTHPAW NO CLICK SWAP

int walk,strafe,aim_y,aim_x; 

int BUTTON_LAYLOUT,STICK_LAYLOUT;
const string weapon_idx[] = {
	//ASSAULT\\
	"OFF"         , "AK-47(CW)"       , "Krig 6"     , "QBZ-83"    , "FFAR 1"      , "Groza"       , "FARA 83"     ,                               
	"Kilo 141"    , "XM4"  , "FAL"        , "M4A1"   , "FR 5.56"   , "Oden"        , "M13"         , "PPSH"  , "AK-47(MW)"  , "C58"  , "RAM 7"  , "GRAU 5.56"  ,   
	"CR-56 AMAX"  , "CR-56 A E"   , "AN-94"      , "AN-94 E"   , "AS VAL"      , "AS VAL E"    ,
	//SMG\\         
	"MP5(CW)"         , "Milano 821"  , "AK-74u"     , "KSP 45"    , "Bullfrog"    , "MAC-10"      , "LC10"        , 
	"AUG"         , "P90"         , "MP5(MW)"     , "Uzi"       , " Bizon"      ,   "MP7"       , "Striker 45"  , "Fennec"      , "ISO"    , "OTs 9"    ,
	//SHOTGUNS\\
	"Hauer 77"    , "Gallo SA12"  , "St.sweeper" , 
	"Model 680"   , "R9-0"        , "725"        , "Origin 12" , "VLK Rogue"   , "JAK-12"      , "JAK-12 E"    ,
	//LMG\\
	"Stoner 63"   , "RPD"         , "M60"        ,                 
	"PKM"         , "SA87"        , "SmG1"        , "MG34"      , "Holger-26"   , "MG 82" , "Bruen Mk9"   , "Bruen Mk9 E" , "Finn"   ,
	//MARKSMAN RIFLES\\  
	"Type 63"     , "M16"         , "AUG"        , "DMR 14"    ,   
	"EBR-14"      , "MK2 Carbine" , "Kar98k"     , "Crossbow"  , "SKS"         , "SP-R 208"    ,
	//SNIPERS\\
	"Pelington"   , "LW3"         , "M82"        ,      
	"Dragunov"    , "HDR"         , "AX-50"      , "Rytec AMR" , "ZRG 20MM",
	//PISTOLS\
	"1911"        , "Magnum"      , "Diamatti"   , 
	"X16"         , ".357"       , "M19"       , ".50GS"      , "Renetti" ,	
	"Sykov"       , "Nail Gun", "CRX 9"   
};
function weaponmenu(){ 		
    //ASSAULT RIFLE
	if( USE_LEGACY[INDEXER] ==  0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  0 ] ); }//OFF
	if( USE_LEGACY[INDEXER] ==  1 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[  1 ] ); combo_run(RUMBLE_ON)}//"AK-47"CW
	if( USE_LEGACY[INDEXER] ==  2 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  2 ] ); }//"Krig 6" 
	if( USE_LEGACY[INDEXER] ==  3 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  3 ] ); }//"QBZ-83"
	if( USE_LEGACY[INDEXER] ==  4 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  4 ] ); }//"FFAR 1"
	if( USE_LEGACY[INDEXER] ==  5 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  5 ] ); }//"Groza"
	if( USE_LEGACY[INDEXER] ==  6 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[  6 ] ); }//"FARA 83"
	if( USE_LEGACY[INDEXER] ==  7 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[  7 ] ); }//"Kilo 141"
	if( USE_LEGACY[INDEXER] ==  8 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  8 ] ); }//"XM4"
	if( USE_LEGACY[INDEXER] ==  9 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  9 ] ); }//"FAL"
	if( USE_LEGACY[INDEXER] == 10 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 10 ] ); }//"M4A1"
	if( USE_LEGACY[INDEXER] == 11 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 11 ] ); }//"FR 5.56"
	if( USE_LEGACY[INDEXER] == 12 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 12 ] ); }//"Oden"
	if( USE_LEGACY[INDEXER] == 13 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 13 ] ); }//"M13"
	if( USE_LEGACY[INDEXER] == 14 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 14 ] ); }//"PPSH"
	if( USE_LEGACY[INDEXER] == 15 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 15 ] ); }//"AK-47MW"
	if( USE_LEGACY[INDEXER] == 16 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 16 ] ); }//"C58"
	if( USE_LEGACY[INDEXER] == 17 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 17 ] ); } //"RAM 7"
	if( USE_LEGACY[INDEXER] == 18 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 18 ] ); }//"GRAU 5.56"
	if( USE_LEGACY[INDEXER] == 19 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 19 ] ); }//"CR-56 AMAX"
	if( USE_LEGACY[INDEXER] == 20 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 20 ] ); }//"CR-56 A E"
	if( USE_LEGACY[INDEXER] == 21 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 21 ] ); }//"AN-94"
	if( USE_LEGACY[INDEXER] == 22 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 22 ] ); }//"AN-94 E"
	if( USE_LEGACY[INDEXER] == 23 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 23 ] ); }//"AS VAL"
	if( USE_LEGACY[INDEXER] == 24 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 24 ] ); }//"AS VAL E"
	//SMGs
	if( USE_LEGACY[INDEXER] == 25 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 25 ] ); }//"MP5 CW"
	if( USE_LEGACY[INDEXER] == 26 ) { printf( center_x( 10, ofmw ),20, 1, 0, weapon_idx[ 26 ] ); }//"Milano 821"
	if( USE_LEGACY[INDEXER] == 27 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 27 ] ); }//"AK-74u"
	if( USE_LEGACY[INDEXER] == 28 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 28 ] ); }//"KSP 45"
	if( USE_LEGACY[INDEXER] == 29 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 29 ] ); }//"Bullfrog"
	if( USE_LEGACY[INDEXER] == 30 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 30 ] ); }//"MAC-10"
	if( USE_LEGACY[INDEXER] == 31 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 31 ] ); }//"LC10"
	if( USE_LEGACY[INDEXER] == 32 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 32 ] ); }//"AUG"
	if( USE_LEGACY[INDEXER] == 33 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 33 ] ); }//"P90"
	if( USE_LEGACY[INDEXER] == 34 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 34 ] ); }//"MP5 MW"
	if( USE_LEGACY[INDEXER] == 35 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 35 ] ); }//"Uzi
	if( USE_LEGACY[INDEXER] == 36 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 36 ] ); }//Bizon
	if( USE_LEGACY[INDEXER] == 37 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 37 ] ); }//"MP7" 
	if( USE_LEGACY[INDEXER] == 38 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 38 ] ); }//"Striker 45"
	if( USE_LEGACY[INDEXER] == 39 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 39 ] ); }//"Fennec"
	if( USE_LEGACY[INDEXER] == 40 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 40 ] ); }//"ISO"
	if( USE_LEGACY[INDEXER] == 41 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 41 ] ); }//""OTs 9""
	//SHOTGUNS
	if( USE_LEGACY[INDEXER] == 42 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 42 ] ); }//"Hauer 77"	
	if( USE_LEGACY[INDEXER] == 43 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 43 ] ); }//"Gallo SA12"
	if( USE_LEGACY[INDEXER] == 44 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 44 ] ); }//"St.sweeper"
	if( USE_LEGACY[INDEXER] == 45 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 45 ] ); }//"Model 680"
	if( USE_LEGACY[INDEXER] == 46 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 46 ] ); }//"R9-0"
	if( USE_LEGACY[INDEXER] == 47 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 47 ] ); }//"725"
	if( USE_LEGACY[INDEXER] == 48 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 48 ] ); }//"Origin 12"
	if( USE_LEGACY[INDEXER] == 49 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 49 ] ); }//"VLK Rogue"
	if( USE_LEGACY[INDEXER] == 50 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 50 ] ); }//"JAK-12"
	if( USE_LEGACY[INDEXER] == 51 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 51 ] ); }//"JAK-12 E"
	//LMG
	if( USE_LEGACY[INDEXER] == 52 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 52 ] ); }//"Stoner 63"
	if( USE_LEGACY[INDEXER] == 53 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 53 ] ); }//"RPD"
	if( USE_LEGACY[INDEXER] == 54 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 54 ] ); }//"M60"
	if( USE_LEGACY[INDEXER] == 55 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 55 ] ); }//"PKM" 
	if( USE_LEGACY[INDEXER] == 56 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 56 ] ); }//"SA87"
	if( USE_LEGACY[INDEXER] == 57 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 57 ] ); }//"SmG1"
	if( USE_LEGACY[INDEXER] == 58 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 58 ] ); }//"MG34"
	if( USE_LEGACY[INDEXER] == 59 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 59 ] ); }//"Holger-26"
	if( USE_LEGACY[INDEXER] == 60 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 60 ] ); }//"MG 82"
	if( USE_LEGACY[INDEXER] == 61 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 61 ] ); }//"Bruen Mk9"
	if( USE_LEGACY[INDEXER] == 62 ) { printf( center_x( 11,ofmw ), 20, 1, 0, weapon_idx[ 62 ] ); }//"Bruen Mk9 E"
	if( USE_LEGACY[INDEXER] == 63 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 63 ] ); }//"Finn"
	//MARKSMAN
	if( USE_LEGACY[INDEXER] == 64 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 64 ] ); }//"Type 63"
	if( USE_LEGACY[INDEXER] == 65 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 65 ] ); }//"M16"
	if( USE_LEGACY[INDEXER] == 66 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 66 ] ); }//"AUG"
	if( USE_LEGACY[INDEXER] == 67 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 67 ] ); }//"DMR 14"
	if( USE_LEGACY[INDEXER] == 68 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 68 ] ); }//"EBR-14"
	if( USE_LEGACY[INDEXER] == 69 ) { printf( center_x( 11,ofmw ), 20, 1, 0, weapon_idx[ 69 ] ); }//"MK2 Carbine"
	if( USE_LEGACY[INDEXER] == 70 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 70 ] ); }//"Kar98k"
	if( USE_LEGACY[INDEXER] == 71 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 71 ] ); }//"Crossbow"
	if( USE_LEGACY[INDEXER] == 72 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 72 ] ); }//"SKS"
	//SNIPERS
	if( USE_LEGACY[INDEXER] == 73 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 73 ] ); }//"SP-R 208"
	if( USE_LEGACY[INDEXER] == 74 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 74 ] ); }//"Pelington"
	if( USE_LEGACY[INDEXER] == 75 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 75 ] ); }//"LW3"
	if( USE_LEGACY[INDEXER] == 76 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 76 ] ); } //"M82"
	if( USE_LEGACY[INDEXER] == 77 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 77 ] ); }//"Dragunov"
	if( USE_LEGACY[INDEXER] == 78 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 78 ] ); }//"HDR"
	if( USE_LEGACY[INDEXER] == 79 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 79 ] ); }//"AX-50"
	if( USE_LEGACY[INDEXER] == 80 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 80 ] ); }//"Rytec AMR"	
	if( USE_LEGACY[INDEXER] == 81 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 81 ] ); }// "ZRG 20MM"
	//PISTOLS
	if( USE_LEGACY[INDEXER] == 82 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 82 ] ); }//"1911"
	if( USE_LEGACY[INDEXER] == 83 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 83 ] ); }//"Magnum"
	if( USE_LEGACY[INDEXER] == 84 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 84 ] ); }//"Diamatti"
	if( USE_LEGACY[INDEXER] == 85 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 85 ] ); }//"X16"	
	if( USE_LEGACY[INDEXER] == 86 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 86 ] ); }//".357" 	
	if( USE_LEGACY[INDEXER] == 87 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 87 ] ); }//"M19"
	if( USE_LEGACY[INDEXER] == 88 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 88 ] ); }//".50GS"
	if( USE_LEGACY[INDEXER] == 89 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 89 ] ); }//"Renetti"
	if( USE_LEGACY[INDEXER] == 90 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 90 ] ); }//syklov
	if( USE_LEGACY[INDEXER] == 91 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 91 ] ); }//Nail Gun
	if( USE_LEGACY[INDEXER] == 92 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 92 ] ); }//CRX 9
}
function weaponmenuPRO(){ 		
    //ASSAULT RIFLE
	if( PROGRESSIVE_RECOIL[INDEXER] ==  0 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  0 ] ); }//OFF
	if( PROGRESSIVE_RECOIL[INDEXER] ==  1 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[  1 ] ); combo_run(RUMBLE_ON)}//"AK-47"CW
	if( PROGRESSIVE_RECOIL[INDEXER] ==  2 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  2 ] ); }//"Krig 6" 
	if( PROGRESSIVE_RECOIL[INDEXER] ==  3 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  3 ] ); }//"QBZ-83"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  4 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  4 ] ); }//"FFAR 1"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  5 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[  5 ] ); }//"Groza"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  6 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[  6 ] ); }//"FARA 83"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  7 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[  7 ] ); }//"Kilo 141"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  8 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  8 ] ); }//"XM4"
	if( PROGRESSIVE_RECOIL[INDEXER] ==  9 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[  9 ] ); }//"FAL"
	if( PROGRESSIVE_RECOIL[INDEXER] == 10 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 10 ] ); }//"M4A1"
	if( PROGRESSIVE_RECOIL[INDEXER] == 11 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 11 ] ); }//"FR 5.56"
	if( PROGRESSIVE_RECOIL[INDEXER] == 12 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 12 ] ); }//"Oden"
	if( PROGRESSIVE_RECOIL[INDEXER] == 13 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 13 ] ); }//"M13"
	if( PROGRESSIVE_RECOIL[INDEXER] == 14 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 14 ] ); }//"PPSH"
	if( PROGRESSIVE_RECOIL[INDEXER] == 15 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 15 ] ); }//"AK-47MW"
	if( PROGRESSIVE_RECOIL[INDEXER] == 16 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 16 ] ); }//"C58"
	if( PROGRESSIVE_RECOIL[INDEXER] == 17 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 17 ] ); } //"RAM 7"
	if( PROGRESSIVE_RECOIL[INDEXER] == 18 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 18 ] ); }//"GRAU 5.56"
	if( PROGRESSIVE_RECOIL[INDEXER] == 19 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 19 ] ); }//"CR-56 AMAX"
	if( PROGRESSIVE_RECOIL[INDEXER] == 20 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 20 ] ); }//"CR-56 A E"
	if( PROGRESSIVE_RECOIL[INDEXER] == 21 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 21 ] ); }//"AN-94"
	if( PROGRESSIVE_RECOIL[INDEXER] == 22 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 22 ] ); }//"AN-94 E"
	if( PROGRESSIVE_RECOIL[INDEXER] == 23 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 23 ] ); }//"AS VAL"
	if( PROGRESSIVE_RECOIL[INDEXER] == 24 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 24 ] ); }//"AS VAL E"
	//SMGs
	if( PROGRESSIVE_RECOIL[INDEXER] == 25 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 25 ] ); }//"MP5 CW"
	if( PROGRESSIVE_RECOIL[INDEXER] == 26 ) { printf( center_x( 10, ofmw ),20, 1, 0, weapon_idx[ 26 ] ); }//"Milano 821"
	if( PROGRESSIVE_RECOIL[INDEXER] == 27 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 27 ] ); }//"AK-74u"
	if( PROGRESSIVE_RECOIL[INDEXER] == 28 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 28 ] ); }//"KSP 45"
	if( PROGRESSIVE_RECOIL[INDEXER] == 29 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 29 ] ); }//"Bullfrog"
	if( PROGRESSIVE_RECOIL[INDEXER] == 30 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 30 ] ); }//"MAC-10"
	if( PROGRESSIVE_RECOIL[INDEXER] == 31 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 31 ] ); }//"LC10"
	if( PROGRESSIVE_RECOIL[INDEXER] == 32 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 32 ] ); }//"AUG"
	if( PROGRESSIVE_RECOIL[INDEXER] == 33 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 33 ] ); }//"P90"
	if( PROGRESSIVE_RECOIL[INDEXER] == 34 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 34 ] ); }//"MP5 MW"
	if( PROGRESSIVE_RECOIL[INDEXER] == 35 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 35 ] ); }//"Uzi
	if( PROGRESSIVE_RECOIL[INDEXER] == 36 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 36 ] ); }//Bizon
	if( PROGRESSIVE_RECOIL[INDEXER] == 37 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 37 ] ); }//"MP7" 
	if( PROGRESSIVE_RECOIL[INDEXER] == 38 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 38 ] ); }//"Striker 45"
	if( PROGRESSIVE_RECOIL[INDEXER] == 39 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 39 ] ); }//"Fennec"
	if( PROGRESSIVE_RECOIL[INDEXER] == 40 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 40 ] ); }//"ISO"
	if( PROGRESSIVE_RECOIL[INDEXER] == 41 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 41 ] ); }//""OTs 9""
	//SHOTGUNS
	if( PROGRESSIVE_RECOIL[INDEXER] == 42 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 42 ] ); }//"Hauer 77"	
	if( PROGRESSIVE_RECOIL[INDEXER] == 43 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 43 ] ); }//"Gallo SA12"
	if( PROGRESSIVE_RECOIL[INDEXER] == 44 ) { printf( center_x( 10,ofmw ), 20, 1, 0, weapon_idx[ 44 ] ); }//"St.sweeper"
	if( PROGRESSIVE_RECOIL[INDEXER] == 45 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 45 ] ); }//"Model 680"
	if( PROGRESSIVE_RECOIL[INDEXER] == 46 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 46 ] ); }//"R9-0"
	if( PROGRESSIVE_RECOIL[INDEXER] == 47 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 47 ] ); }//"725"
	if( PROGRESSIVE_RECOIL[INDEXER] == 48 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 48 ] ); }//"Origin 12"
	if( PROGRESSIVE_RECOIL[INDEXER] == 49 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 49 ] ); }//"VLK Rogue"
	if( PROGRESSIVE_RECOIL[INDEXER] == 50 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 50 ] ); }//"JAK-12"
	if( PROGRESSIVE_RECOIL[INDEXER] == 51 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 51 ] ); }//"JAK-12 E"
	//LMG
	if( PROGRESSIVE_RECOIL[INDEXER] == 52 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 52 ] ); }//"Stoner 63"
	if( PROGRESSIVE_RECOIL[INDEXER] == 53 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 53 ] ); }//"RPD"
	if( PROGRESSIVE_RECOIL[INDEXER] == 54 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 54 ] ); }//"M60"
	if( PROGRESSIVE_RECOIL[INDEXER] == 55 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 55 ] ); }//"PKM" 
	if( PROGRESSIVE_RECOIL[INDEXER] == 56 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 56 ] ); }//"SA87"
	if( PROGRESSIVE_RECOIL[INDEXER] == 57 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 57 ] ); }//"SmG1"
	if( PROGRESSIVE_RECOIL[INDEXER] == 58 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 58 ] ); }//"MG34"
	if( PROGRESSIVE_RECOIL[INDEXER] == 59 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 59 ] ); }//"Holger-26"
	if( PROGRESSIVE_RECOIL[INDEXER] == 60 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 60 ] ); }//"MG 82"
	if( PROGRESSIVE_RECOIL[INDEXER] == 61 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 61 ] ); }//"Bruen Mk9"
	if( PROGRESSIVE_RECOIL[INDEXER] == 62 ) { printf( center_x( 11,ofmw ), 20, 1, 0, weapon_idx[ 62 ] ); }//"Bruen Mk9 E"
	if( PROGRESSIVE_RECOIL[INDEXER] == 63 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 63 ] ); }//"Finn"
	//MARKSMAN
	if( PROGRESSIVE_RECOIL[INDEXER] == 64 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 64 ] ); }//"Type 63"
	if( PROGRESSIVE_RECOIL[INDEXER] == 65 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 65 ] ); }//"M16"
	if( PROGRESSIVE_RECOIL[INDEXER] == 66 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 66 ] ); }//"AUG"
	if( PROGRESSIVE_RECOIL[INDEXER] == 67 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 67 ] ); }//"DMR 14"
	if( PROGRESSIVE_RECOIL[INDEXER] == 68 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 68 ] ); }//"EBR-14"
	if( PROGRESSIVE_RECOIL[INDEXER] == 69 ) { printf( center_x( 11,ofmw ), 20, 1, 0, weapon_idx[ 69 ] ); }//"MK2 Carbine"
	if( PROGRESSIVE_RECOIL[INDEXER] == 70 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 70 ] ); }//"Kar98k"
	if( PROGRESSIVE_RECOIL[INDEXER] == 71 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 71 ] ); }//"Crossbow"
	if( PROGRESSIVE_RECOIL[INDEXER] == 72 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 72 ] ); }//"SKS"
	//SNIPERS
	if( PROGRESSIVE_RECOIL[INDEXER] == 73 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 73 ] ); }//"SP-R 208"
	if( PROGRESSIVE_RECOIL[INDEXER] == 74 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 74 ] ); }//"Pelington"
	if( PROGRESSIVE_RECOIL[INDEXER] == 75 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 75 ] ); }//"LW3"
	if( PROGRESSIVE_RECOIL[INDEXER] == 76 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 76 ] ); } //"M82"
	if( PROGRESSIVE_RECOIL[INDEXER] == 77 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 77 ] ); }//"Dragunov"
	if( PROGRESSIVE_RECOIL[INDEXER] == 78 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 78 ] ); }//"HDR"
	if( PROGRESSIVE_RECOIL[INDEXER] == 79 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 79 ] ); }//"AX-50"
	if( PROGRESSIVE_RECOIL[INDEXER] == 80 ) { printf( center_x( 9, ofmw ), 20, 1, 0, weapon_idx[ 80 ] ); }//"Rytec AMR"	
	if( PROGRESSIVE_RECOIL[INDEXER] == 81 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 81 ] ); }// "ZRG 20MM"
	//PISTOLS
	if( PROGRESSIVE_RECOIL[INDEXER] == 82 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 82 ] ); }//"1911"
	if( PROGRESSIVE_RECOIL[INDEXER] == 83 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 83 ] ); }//"Magnum"
	if( PROGRESSIVE_RECOIL[INDEXER] == 84 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 84 ] ); }//"Diamatti"
	if( PROGRESSIVE_RECOIL[INDEXER] == 85 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 85 ] ); }//"X16"	
	if( PROGRESSIVE_RECOIL[INDEXER] == 86 ) { printf( center_x( 4, ofmw ), 20, 1, 0, weapon_idx[ 86 ] ); }//".357" 	
	if( PROGRESSIVE_RECOIL[INDEXER] == 87 ) { printf( center_x( 3, ofmw ), 20, 1, 0, weapon_idx[ 87 ] ); }//"M19"
	if( PROGRESSIVE_RECOIL[INDEXER] == 88 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 88 ] ); }//".50GS"
	if( PROGRESSIVE_RECOIL[INDEXER] == 89 ) { printf( center_x( 7, ofmw ), 20, 1, 0, weapon_idx[ 89 ] ); } //"Renetti"
	if( PROGRESSIVE_RECOIL[INDEXER] == 90 ) { printf( center_x( 6, ofmw ), 20, 1, 0, weapon_idx[ 90 ] ); }//syklov
	if( PROGRESSIVE_RECOIL[INDEXER] == 91 ) { printf( center_x( 8, ofmw ), 20, 1, 0, weapon_idx[ 91 ] ); }//Nail Gun
	if( PROGRESSIVE_RECOIL[INDEXER] == 92 ) { printf( center_x( 5, ofmw ), 20, 1, 0, weapon_idx[ 92 ] ); }//CRX 9
	}
	
