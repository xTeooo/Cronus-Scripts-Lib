// GPC Online Library
// 32_bit_pedro's_nightmare_3.3.gpc

/*	Complete OLED Menu for Cronus ZEN
version: 1.0
Author: noozbar


				 ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄                                        
				▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌                                       
				▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀                                        
				▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌                                                 
				▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄                                        
				▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌                                       
				▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀█░█▀▀ ▐░▌       ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌                                       
				▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌       ▐░▌          ▐░▌                                       
				▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄█░▌ ▄▄▄▄▄▄▄▄▄█░▌                                       
				▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌                                       
				 ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀                                        
                                                                                                                     
 ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌░▌     ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌▐░▌    ▐░▌     ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     ▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          
▐░▌ ▐░▌   ▐░▌     ▐░▌     ▐░▌ ▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌  ▐░▌  ▐░▌     ▐░▌     ▐░▌▐░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌   ▐░▌ ▐░▌     ▐░▌     ▐░▌ ▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌     ▐░▌     ▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌    ▐░▌▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌          
▐░▌     ▐░▐░▌ ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌      ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌
 ▀        ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀       ▀       ▀         ▀  ▀         ▀  ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀ 
                                                                                                                     
****************************************************************************************************************************

												╔═╗┬─┐┌─┐┌┬┐┬┌┬┐
												║  ├┬┘├┤  │││ │ 
												╚═╝┴└─└─┘─┴┘┴ ┴ 


This script was a collaboration between JT0810 and myself Jbaze122.
Thanks To Myshotsfullwhite for the jackhammer and afk script.
Big thanks to Draka Traps for extensive testing he did.
I just want ot give credit to LegitCloudzzz for helping out with the simplified code and helping me out when I got stuck. 
Also to Noozbar's for have this awesome menu template on W&K that we were able to adapt to the script.

*****************************************************************************************************************************

											╦┌┬┐┌─┐┌─┐┬─┐┌┬┐┌─┐┌┐┌┌┬┐
											║│││├─┘│ │├┬┘ │ ├─┤│││ │ 
											╩┴ ┴┴  └─┘┴└─ ┴ ┴ ┴┘└┘ ┴ 

1) Join the discord  https://discord.gg/6wvvgJU4ZM
2) THIS SCRIPT IT 32 BIT.
   USE ZEN STUDIOS V1.2.1 BETA 88
   USE ZEN FIRMWARE v2.1.0-beta.22
3) This script has Hip fire Anti Recoil on at all times. This means what ever gun is active will use hipfire anti recoil when 
   holding R2/ RT. This effects when you drive a boat. If you are driving a boat use the kill switch quick toggle listed
   below in the quick toggle section.
4) Plug and play is the best option for people that dont want to put work into custom sens.
5) Custom sens you will have to put some work into and ammo. Read everything below.
6) READ EVERYTHING BELOW . IT EXPLAINS EVERYTHING




*****************************************************************************************************************************
									╦ ╦┌─┐┌┬┐┌─┐┌┬┐┌─┐  ╔╗╔┌─┐┌┬┐┌─┐┌─┐
									║ ║├─┘ ││├─┤ │ ├┤   ║║║│ │ │ ├┤ └─┐
									╚═╝┴  ─┴┘┴ ┴ ┴ └─┘  ╝╚╝└─┘ ┴ └─┘└─┘
3.1 Update
	-Added a menu screen so you can set the weapons you want on the profile. 
	-Changed the weapon quick toggle. It is no longer L2/LT + Triangle /Y. This was to avoid from accidental weapon change when when turning on the flash light or holo.
	-Added Additional Weapons. 
	-Please re-read all the instructions since there is an additional menu and new quick toggles.

3.2 Update
	-Added 4X Anti Recoil to All Guns that can use it.(If a gun cannot and the toggle is on It pulls Iron Sight Anti Recoil)
	-New Weapons Added
	-Some quality of life scripts were added such as Jack Hammer Tap Script and AFK mode. (NOW YOU CAN HOLD RT WHILE USING THE JACKHAMMER AND IT WILL TAP AUTOMATICALLY)
	-Quality of life can only be used by quick toggles. Please read below for more info.
	- Attachment quick toggle hold time on the dpad was increased so it wont interfere when dropping stuff out of your inventory.

3.3 Update
	-Custom Sensitivity Can be used. See Custome Sens Section Below
	-The script is still plug and play for 70,70,40,40,40. I will explain more below
	-Nailgun and Revolver no longer have the holo and 4x available. 
	-Jackhammer was removed as a toggle and added to the weapon list. 
	 This was done so you can add it to the weapon profiles and toggle it with the weapon quick toggle.
	-Deadzone can be changed in the menu for the script on the zen. 
	-Hip Fire antirecoil was added for every gun.
	-M249 Standing was added with Ironsight , Holo, Hipfire and 4X Antirecoil.
	-Attachment quick toggle dpad hold time was increased to prevent the bug when dropping stuff from your inventory.

3.4 Updated Bug with the anti recoil
******************************************************************************************************************************



								
							╔═╗┬  ┬ ┬┌─┐  ┌─┐┌┐┌┌┬┐  ╔═╗┬  ┌─┐┬ ┬  ╦┌┐┌  ╔═╗┌─┐┌┬┐┌─┐  ╔═╗┌─┐┌┬┐┌┬┐┬┌┐┌┌─┐┌─┐
							╠═╝│  │ ││ ┬  ├─┤│││ ││  ╠═╝│  ├─┤└┬┘  ║│││  ║ ╦├─┤│││├┤   ╚═╗├┤  │  │ │││││ ┬└─┐
							╩  ┴─┘└─┘└─┘  ┴ ┴┘└┘─┴┘  ╩  ┴─┘┴ ┴ ┴   ╩┘└┘  ╚═╝┴ ┴┴ ┴└─┘  ╚═╝└─┘ ┴  ┴ ┴┘└┘└─┘└─┘

	
	- FIRST Reset your in game values and match the ones that are listed below.
	- SECOND you have two options for plug and play values that work. You do not need to adjust anything besides ingame settings.
	- THIRD There are two different types of deadzones. Ingame deadzone and Script deadzone. 
		Ingame Deadzone must remain 1 and 1.
		Script deadzone acts as your ingame deadzone to stop stickdrift. SCRIPT DEADZONE is a default of 10 but can be changed. See below
	- LASTLY if you are using plug and play do not TOUCH the custom sens menu. Leave everything at 0 unless you are having issues with the semis
	  If you are having issues with the semi guns than read the Custom Sens Section.
	
	
	
	╔═╗┬┬─┐┌─┐┌┬┐  ╔═╗┬  ┬ ┬┌─┐  ╔═╗┌┐┌┌┬┐  ╔═╗┬  ┌─┐┬ ┬  ╔═╗┌─┐┌┬┐┬┌─┐┌┐┌
	╠╣ │├┬┘└─┐ │   ╠═╝│  │ ││ ┬  ╠═╣│││ ││  ╠═╝│  ├─┤└┬┘  ║ ║├─┘ │ ││ ││││
	╚  ┴┴└─└─┘ ┴   ╩  ┴─┘└─┘└─┘  ╩ ╩┘└┘─┴┘  ╩  ┴─┘┴ ┴ ┴   ╚═╝┴   ┴ ┴└─┘┘└┘

	1) If your playing the game in a different language please change the language to english since the setings menu is different in certain cases.
	2) Match all the setings below
		
		70 X
		70 Y
		40 ADS
		40 1X Zoom
		40 4x
		100 Digital Boost
		1 Dead Zone Left  (YES SET YOUR DEAD ZONE TO ONE) THE SCRIPT DEADZONE CAN BE ADJUSTED IN THE MENU TO ACT AS YOUR INGAME DEADZONE
		1 Dead Zone Right (YES SET YOUR DEAD ZONE TO ONE) THE SCRIPT DEADZONE CAN BE ADJUSTED IN THE MENU TO ACT AS YOUR INGAME DEADZONE
	
	3) Yes your deadzone needs to be 1 IN GAME. 
	4) The default script deadzone is 10. It can be changed in the main menu. See the Main menu section below  for details. 
	5) The lower the deadzone can be below , will mean for smoother Aiming.
	6) If you have stick drift see the Main Menu Section below for instructions on how to change the SCRIPT DEADZONE.	
	                                                                                                                                                                  


	╔═╗┌─┐┌─┐┌─┐┌┐┌┌┬┐  ╔═╗┬  ┬ ┬┌─┐  ┌─┐┌┐┌┌┬┐  ╔═╗┬  ┌─┐┬ ┬  ╔═╗┌─┐┌┬┐┬┌─┐┌┐┌
	╚═╗├┤ │  │ ││││ ││  ╠═╝│  │ ││ ┬  ├─┤│││ ││  ╠═╝│  ├─┤└┬┘  ║ ║├─┘ │ ││ ││││
	╚═╝└─┘└─┘└─┘┘└┘─┴┘  ╩  ┴─┘└─┘└─┘  ┴ ┴┘└┘─┴┘  ╩  ┴─┘┴ ┴ ┴   ╚═╝┴   ┴ ┴└─┘┘└┘

	1) If your playing the game in a different language please change the language to english since the setings menu is different in certain cases.
	2) Match all the setings below
	3) You will have to lower the Hipfire Vertical in the custom sens menu for this option. I would lower it by 1 for each gun till it stops shooting done
 	   Please see the custom sens section  on how to adjust do that.
		100 X
		100 Y
		25 ADS
		25 1X Zoom
		25 4x
		100 Digital Boost
		1 Dead Zone Left  (YES SET YOUR DEAD ZONE TO ONE) THE SCRIPT DEADZONE CAN BE ADJUSTED IN THE MENU TO ACT AS YOUR INGAME DEADZONE
		1 Dead Zone Right (YES SET YOUR DEAD ZONE TO ONE) THE SCRIPT DEADZONE CAN BE ADJUSTED IN THE MENU TO ACT AS YOUR INGAME DEADZONE
	
	3) Yes your deadzone needs to be 1 IN GAME. 
	4) The default script deadzone is 10. It can be changed in the main menu. See the Main menu section below  for details. 
	5) The lower the deadzone can be below , will mean for smoother Aiming.
	6) If you have stick drift see the Main Menu Section below for instructions on how to change the SCRIPT DEADZONE.

	

********************************************************************************************************************************
								

												╔╦╗┌─┐┬┌┐┌  ╔╦╗┌─┐┌┐┌┬ ┬  ╔═╗┌─┐┌─┐┌┬┐┬┌─┐┌┐┌
												║║║├─┤││││  ║║║├┤ ││││ │  ╚═╗├┤ │   │ ││ ││││
												╩ ╩┴ ┴┴┘└┘  ╩ ╩└─┘┘└┘└─┘  ╚═╝└─┘└─┘ ┴ ┴└─┘┘└┘

	
	1) Hold L2 / LT + OPTIONS to enter the main menu.
	   -If you do this and the menu doesn't open you are most likely having a controller or cable issue.

	2) While in the  Menu,
		- tap TRIANGLE / Y to switch weapon profiles / Jackhammer and Deadzone.
		- tap LEFT or RIGHT to navigate the attachments for that weapon. 
		- tap UP or DOWN to toggle ON/OFF  The attachment anti recoil  for that weapon.
		- tap Cross / A to access the Weapon Profile Menu. See Weapon Profile Menu Section below  for details. 
		- tap Square / X to access the custom sens menu for the gun listed on the top line. DO NOT MESS WITH THIS IF YOU ARE USING PLUG AND PLAY.
		
		
	3) When you press Y it changes the top line. You will notice there are mutiple different guns , Jackhammer and deadzone.
		-Lets talk about the guns now. When you press Y it changes the guns.
		-Each gun has a middle line that list the 3 attachments. Holo, Ironsight and 4x.
		-Each Attachment has its on ON/OFF on the bottom line for the gun listed on the topline.
		-Lets say you wanted to use AK with 4X. Make sure the top line says AK. Hit left or right on the dpad till you see
		 4X. Hit up on the dpad to turn it on. Now hit left on the dpad and turn HOLO and Iron sight off.
		-The main problem people have is they want to use AK with holo or Iron Sight. They sometimes have 4X turned on
		 This will cause the gun to shoot down if you are using Holo or Ironsight.
		-Please see the Weapon Profile Menu Section so you can set up 3 Profiles to quick toggle while not in the menu.
		 The Weapon Profile has a safety built in that only allows 1 attachment on at a time. This is the recomended way to change guns. 
		
	4)If you want to use a weapon that you do not have assigned to a quick toggle. First access the menu. Than hit Y to get to the weapon
	  that you want. Use Left and Right on the Dpad to choose your attachment. Use Up on the Dpad to toggle that attachment Anti Recoil On. 
	  Than Tap PS / XBOX to save and exit OLED Menu
	
	5)If you did this correctly the gun name will be at the bottom of the oled.	
	
	
	
	╔═╗┌─┐┬─┐┬┌─┐┌┬┐  ╔╦╗┌─┐┌─┐┌┬┐┌─┐┌─┐┌┐┌┌─┐
	╚═╗│  ├┬┘│├─┘ │    ║║├┤ ├─┤ ││┌─┘│ ││││├┤ 
	╚═╝└─┘┴└─┴┴   ┴   ═╩╝└─┘┴ ┴─┴┘└─┘└─┘┘└┘└─┘
	
	1) The default deadzone for the script is 10.
	2) If you wish to lower the script deadzone or increase it due to stick drift follow these instructions.
	3) Hold L2 / LT + OPTIONS to enter the main menu.
	4) tap TRIANGLE / Y till you see deadzone.
	5) Tap up to turn it on. By doing this you turn off the default deadzone of 10.
	6) Tap X to get to the edit value menu.
	7) Hold Crosss / A  and hitting up or down increases or decreases the value by 10.
	8) Hold Crosss / A  and hitting left  or right  increases or decreases the value by 1.
	9) Once you are down hit the PS or XBOX button to save. 
	
	
	
****************************************************************************************************************************************************************	

										╦ ╦┌─┐┌─┐┌─┐┌─┐┌┐┌  ╔═╗┬─┐┌─┐┌─┐┬┬  ┌─┐  ╔╦╗┌─┐┌┐┌┬ ┬  ╔═╗┌─┐┌─┐┌┬┐┬┌─┐┌┐┌
										║║║├┤ ├─┤├─┘│ ││││  ╠═╝├┬┘│ │├┤ ││  ├┤   ║║║├┤ ││││ │  ╚═╗├┤ │   │ ││ ││││
										╚╩╝└─┘┴ ┴┴  └─┘┘└┘  ╩  ┴└─└─┘└  ┴┴─┘└─┘  ╩ ╩└─┘┘└┘└─┘  ╚═╝└─┘└─┘ ┴ ┴└─┘┘└┘

	1) The weapon Profile menu is used to set up 3 profiles for you weapon quick toggles.
	2) You should set this up first. 
	3) Using the weapon quick toggle has a safety that only allows 1 attachment on your gun at a time.
	4) To enter the weapon profile menu first you have to enter the main menu.
	   - Hold L2 / LT + OPTIONS to enter the main menu.
	   - Than press Cross / A. This will open the profile menu.
	5) Triangle  / Y will cycle the profile  in the top line. 1,2,3. Each number is a different profile you can assign one weapon too.
	6) Hit Left or Right on the D-Pad to change the weapon. 
	8) The weapon that is on the middle line will be used for the profile number on the topline. 
	7) So if you want to use the MP5 hit left on the D-Pad until you see MP5 and leave it.
	8) Just hit up or down to choose Iron Sight or Holo or 4x for the gun that is listed on the middle line.
	9) Once your done with the first profile hit Triangle / Y to move onto the next and repeat the process.
	10)Once your done with all 3 just hit the save button. PS/Xbox
	11)To use the weapon quick toggle now just hold L2/LT and press the right thumb stick in also know as R3.
	12)As you click it you will see the gun on the bottom of your zen screen change.
	13)Every time you change your profiles and save it. Just use the quick toggle to cycle threw all guns once.
	
	See the quick toggle section below for all the quicktoggles.



****************************************************************************************************************************************************************							
							
							
											╔═╗ ┬ ┬┬┌─┐┬┌─  ╔╦╗┌─┐┌─┐┌─┐┬  ┌─┐  ╔═╗┌─┐┌─┐┌┬┐┬┌─┐┌┐┌
											║═╬╗│ │││  ├┴┐   ║ │ ││ ┬│ ┬│  ├┤   ╚═╗├┤ │   │ ││ ││││
											╚═╝╚└─┘┴└─┘┴ ┴   ╩ └─┘└─┘└─┘┴─┘└─┘  ╚═╝└─┘└─┘ ┴ ┴└─┘┘└┘


Weapon Quick toggle
	1)To use the weapon quick toggle now just hold L2/LT and press the right thumb stick in also know as R3.
	2)As you click it you will see the gun on the bottom of your zen screen change.
	3)Every time you change your profiles and save it. Just use the quick toggle to cycle threw all guns once.
								
								


ATTACHMENT Quick toggles are as follow. The attachment will say on / off depeneding on the previous state of the toggle.								
	
	The HOLD TIME FOR THE DPAD WAS INCREAD TO 3 Seconds to prevent the bug when dropping items from the inventory.
	
	1)Hold L2 / LT + Up On the  DPad.  ( This will toggle the Holo attachment per the gun you have on.)
	2)Hold L2 / LT + Right On the Dpad. ( This will toggle the Iron attachment per the gun you have on.)
	3)Hold L2 / LT + Down On the Dpad. ( This will toggle the 4X attachment per the gun you have on.)
	4)Hold L1 / LB + Up On the  DPad.     ( This will toggle AFK Mode on and off.)

Killswitch Quick Toggle
	1) This turns off all anti recoil but leaves the script deadzone on.
	2) It is recommened using this when you are driving a boat.
	3) Holt L2 / LT + PS / XBOX. This will turn the script off.
	4) Double Tap Circle / B to turn the script back on.

************************************************************************************************************************************************

											╔═╗┬ ┬┌─┐┌┬┐┌─┐┌┬┐  ╔═╗┌─┐┌┐┌┌─┐  ╔═╗┌─┐┌─┐┌┬┐┬┌─┐┌┐┌
											║  │ │└─┐ │ │ ││││  ╚═╗├┤ │││└─┐  ╚═╗├┤ │   │ ││ ││││
											╚═╝└─┘└─┘ ┴ └─┘┴ ┴  ╚═╝└─┘┘└┘└─┘  ╚═╝└─┘└─┘ ┴ ┴└─┘┘└┘

						First off if you are looking for plug and play do not mess with any of the settings for custom sens.
						   The only time it is recomended to change any of them for plug and play is if a semi shoots down.
							   This is not for people that dont want to put work into findingthe values for there sens.
									  Once you find one gun values it should be a good base point for the rest.
	
	1) AFTER YOU FIND THE VALUES FOR YOUR CUSTOM SENS WRITE THEM DOWN. This is due to us using 32 bit and bit packing. 
	   If the scipt is acting weird or you get an error where you have to reset your zen you will lose all the saved values.
	   Thats why we you need to write them down once you find them.
	2) You will have to put some time into finding the values that work for your sens. I will have a channel in the discord with values 
	   that work for custom sens as people find them.
	
	3) If you wish to do custom sens. Find what you like to play at and leave it. Leave in game deadzone at 1 and 1 .
	
	Now lets get into how it works.
	
	1) Each gun has 8 values.
	   -Iron Sight horizontal
	   -Iron Sight Vertical
	   -Holo Horizontal
	   -Holo Vertical   
	   -4X Horizontal
	   -4X Vertical
	   -Hip Fire  Horizontal
	   -Hip Fire  Vertical
	   
	Now lets talk about how to access the menu.
	
	1) Since each gun has 8 values  you need to choose the gun you are doing. 
	   Once you figure out one gun the rest of the guns should be pretty similar.
	2) First enter the main menu Hold L2 / LT + OPTIONS to enter the main menu.
	3) Hit Triangle / Y to get to the gun you are gonna start finding values for.
	4) Press Square / X to enter Custom Sens Menu.
	5) Press Left and Right to cycle the attachment  values listed above.
	6) Hold Crosss / A  and hitting up or down increases or decreases the value by 10.
	7) Hold Crosss / A  and hitting left  or right  increases or decreases the value by 1.
	
	Now since you figured that out. Lets talk about how you should do this.
	
	1) Find the sens you like playing at.
	2) Shoot the gun. Find out if the gun shoots up or down.
	3) Enter the main menu and hit Triangle / Y till you find the gun you are using.
	4) Enter the Custom Sens menus by hitting Square / X while on the gun.
	5) Hit left or right on the dpad till you find the attachment you are using for that gun.
	   Remember each attachment has a horzontal and vertical adjustment.
	6) If it shoots down read below.
       -Find the attachment you have on the gun using left or right on the dpad once in the custom sens menu. 
       -Lower the Horzontal and vertical value . I would do them in the same ammount.
       -Hit the save button PS / XBOX. 
       -Repeat this step until the gun starts to shoot level.
       -If the gun starts to shoot up you need to increase that value
       -Once you get it in the ball park you will need to fine tune you Horzontal and vertical value.
       -they may end up different. 
    7) If it shoots up read below.
       -Find the attachment you have on the gun using left or right on the dpad once in the custom sens menu. 
       -Raise  the Horzontal and vertical value . I would do them in the same ammount.
       -Hit the save button PS / XBOX. 
       -Repeat this step until the gun starts to shoot level.
       -If the gun starts to shoot down you need to decrease  that value
       -Once you get it in the ball park you will need to fine tune you Horzontal and vertical value.
       -they may end up different.
       
 Once you figure out one gun for all the attachment and hip fire Anti Recoil the rest of the guns should be similar.
 
 

	╔═╗┌─┐┌┬┐┬┌─┐  ╔═╗┬ ┬┌─┐┌─┐┌┬┐┬┌┐┌┌─┐  ╔╦╗┌─┐┬ ┬┌┐┌
	╚═╗├┤ ││││└─┐  ╚═╗├─┤│ ││ │ │ │││││ ┬   ║║│ │││││││
	╚═╝└─┘┴ ┴┴└─┘  ╚═╝┴ ┴└─┘└─┘ ┴ ┴┘└┘└─┘  ═╩╝└─┘└┴┘┘└┘
	
This section is mainly for plug and play when the semis are shooting down.
	
	1) Since each gun has 8 values  you need to choose the gun you are doing. 
	   Once you figure out one gun the rest of the guns should be pretty similar.
	2) First enter the main menu Hold L2 / LT + OPTIONS to enter the main menu.
	3) Hit Triangle / Y to find the semi that is shooting down.
	4) Press Square / X to enter Custom Sens Menu.
	5) Press Left and Right to cycle the attachment  values listed above.
	6) Hold Crosss / A  and hitting up or down increases or decreases the value by 10.
	7) Hold Crosss / A  and hitting left  or right  increases or decreases the value by 1.

    8) If it shoots down read below.
       -Find the attachment you have on the gun using left or right on the dpad once in the custom sens menu. 
       -Lower the  vertical value . 
       -Hit the save button PS / XBOX. 
       -Repeat this step until the gun starts to shoot level.
       -If the gun starts to shoot up you need to increase that value
       


************************************************************************************************************************************************

					╔═╗┬ ┬┌─┐┌┬┐┌─┐┌┬┐  ╔═╗┌─┐┌┐┌┌─┐  ╔╦╗┌─┐┌─┐┌─┐┬ ┬┬ ┌┬┐
					║  │ │└─┐ │ │ ││││  ╚═╗├┤ │││└─┐   ║║├┤ ├┤ ├─┤│ ││  │ 
					╚═╝└─┘└─┘ ┴ └─┘┴ ┴  ╚═╝└─┘┘└┘└─┘  ═╩╝└─┘└  ┴ ┴└─┘┴─┘┴ 
1) So this section is for the custom sens default.
2) Once you figure out your values for each weapon and attachments you can change the 0 to what ever the value you have for your custom sens.
3) To use the default fucntion open the main menu Hold L2 / LT + OPTIONS to enter the main menu.
4) Than hold L1/LB + R1/RB for FIVE SECONDS  to set all the values for the gun to the onee listed below.                                                            																*/



int   _0HAH   =  0; // AK HOL0 HORIZONTAL
int   _0HAV   =  0; // AK HOLO VERTICAL
int   _0HFAH  =  0; // AK HIP FIRE HORIZONTAL
int   _0HFAV  =  0; // AK HIP FIRE VERTICAL
int   _0IAH   =  0; // AK IRON SIGHT HORIZONTAL 
int   _0IAV   =  0; // AK IRON SIGHT VERTICAL
int   _0FAH   =  0; // AK 4X HORIZONTAL
int   _0FAV   =  0; // AK 4X VERTICAL

int   _1HAH   =  0; // MP5 HOL0 HORIZONTAL
int   _1HAV   =  0; // MP5 HOLO VERTICAL
int   _1HFAH  =  0; // MP5 HIP FIRE HORIZONTAL
int   _1HFAV  =  0; // MP5 HIP FIRE VERTICAL
int   _1IAH   =  0; // MP5 IRON SIGHT HORIZONTAL 
int   _1IAV   =  0; // MP5 IRON SIGHT VERTICAL
int   _1FAH   =  0; // MP5 4X HORIZONTAL
int   _1FAV   =  0; // MP5 4X VERTICAL

int   _2HAH   =  0; // TOMMY HOL0 HORIZONTAL
int   _2HAV   =  0; // TOMMY HOLO VERTICAL
int   _2HFAH  =  0; // TOMMY HIP FIRE HORIZONTAL
int   _2HFAV  =  0; // TOMMY HIP FIRE VERTICAL
int   _2IAH   =  0; // TOMMY IRON SIGHT HORIZONTAL 
int   _2IAV   =  0; // TOMMY IRON SIGHT VERTICAL
int   _2FAH   =  0; // TOMMY 4X HORIZONTAL
int   _2FAV   =  0; // TOMMY 4X VERTICAL

int   _3HAH   =  0; // LR HOL0 HORIZONTAL
int   _3HAV   =  0; // LR HOLO VERTICAL
int   _3HFAH  =  0; // LR HIP FIRE HORIZONTAL
int   _3HFAV  =  0; // LR HIP FIRE VERTICAL
int   _3IAH   =  0; // LR IRON SIGHT HORIZONTAL 
int   _3IAV   =  0; // LR IRON SIGHT VERTICAL
int   _3FAH   =  0; // LR 4X HORIZONTAL
int   _3FAV   =  0; // LR 4X VERTICAL

int   _4HAH   =  0; // CUSTOM HOL0 HORIZONTAL
int   _4HAV   =  0; // CUSTOM HOLO VERTICAL
int   _4HFAH  =  0; // CUSTOM HIP FIRE HORIZONTAL
int   _4HFAV  =  0; // CUSTOM HIP FIRE VERTICAL
int   _4IAH   =  0; // CUSTOM IRON SIGHT HORIZONTAL 
int   _4IAV   =  0; // CUSTOM IRON SIGHT VERTICAL
int   _4FAH   =  0; // CUSTOM 4X HORIZONTAL
int   _4FAV   =  0; // CUSTOM 4X VERTICAL

int   _5HAH   =  0; // M249 CROUCH HOL0 HORIZONTAL
int   _5HAV   =  0; // M249 CROUCH HOLO VERTICAL
int   _5HFAH  =  0; // M249 CROUCH HIP FIRE HORIZONTAL
int   _5HFAV  =  0; // M249 CROUCH HIP FIRE VERTICAL
int   _5IAH   =  0; // M249 CROUCH IRON SIGHT HORIZONTAL 
int   _5IAV   =  0; // M249 CROUCH IRON SIGHT VERTICAL
int   _5FAH   =  0; // M249 CROUCH 4X HORIZONTAL
int   _5FAV   =  0; // M249 CROUCH 4X VERTICAL

int   _6HAH   =  0; // M249 STANDING HOL0 HORIZONTAL
int   _6HAV   =  0; // M249 STANDING HOLO VERTICAL
int   _6HFAH  =  0; // M249 STANDING HIP FIRE HORIZONTAL
int   _6HFAV  =  0; // M249 STANDING HIP FIRE VERTICAL
int   _6IAH   =  0; // M249 STANDING IRON SIGHT HORIZONTAL 
int   _6IAV   =  0; // M249 STANDING IRON SIGHT VERTICAL
int   _6FAH   =  0; // M249 STANDING 4X HORIZONTAL
int   _6FAV   =  0; // M249 STANDING 4X VERTICAL

int   _7HAH   =  0; // SAR HOL0 HORIZONTAL
int   _7HAV   =  0; // SAR HOLO VERTICAL
int   _7HFAH  =  0; // SAR HIP FIRE HORIZONTAL
int   _7HFAV  =  0; // SAR HIP FIRE VERTICAL
int   _7IAH   =  0; // SAR IRON SIGHT HORIZONTAL 
int   _7IAV   =  0; // SAR IRON SIGHT VERTICAL
int   _7FAH   =  0; // SAR 4X HORIZONTAL
int   _7FAV   =  0; // SAR 4X VERTICAL

int   _8HAH   =  0; // PYTHON HOL0 HORIZONTAL
int   _8HAV   =  0; // PYTHON HOLO VERTICAL
int   _8HFAH  =  0; // PYTHON HIP FIRE HORIZONTAL
int   _8HFAV  =  0; // PYTHON HIP FIRE VERTICAL
int   _8IAH   =  0; // PYTHON IRON SIGHT HORIZONTAL 
int   _8IAV   =  0; // PYTHON IRON SIGHT VERTICAL
int   _8FAH   =  0; // PYTHON 4X HORIZONTAL
int   _8FAV   =  0; // PYTHON 4X VERTICAL

int   _9HAH   =  0; // M92 HOL0 HORIZONTAL
int   _9HAV   =  0; // M92 HOLO VERTICAL
int   _9HFAH  =  0; // M92 HIP FIRE HORIZONTAL
int   _9HFAV  =  0; // M92 HIP FIRE VERTICAL
int   _9IAH   =  0; // M92 IRON SIGHT HORIZONTAL 
int   _9IAV   =  0; // M92 IRON SIGHT VERTICAL
int   _9FAH   =  0; // M92 4X HORIZONTAL
int   _9FAV   =  0; // M92 4X VERTICAL

int   _10HAH   =  0; // SEMI PISTOL HOL0 HORIZONTAL
int   _10HAV   =  0; // SEMI PISTOL HOLO VERTICAL
int   _10HFAH  =  0; // SEMI PISTOL HIP FIRE HORIZONTAL
int   _10HFAV  =  0; // SEMI PISTOL HIP FIRE VERTICAL
int   _10IAH   =  0; // SEMI PISTOL IRON SIGHT HORIZONTAL 
int   _10IAV   =  0; // SEMI PISTOL IRON SIGHT VERTICAL
int   _10FAH   =  0; // SEMI PISTOL 4X HORIZONTAL
int   _10FAV   =  0; // SEMI PISTOL 4X VERTICAL

int   _11IAH   =  0; // REVOLVER IRON SIGHT HORIZONTAL 
int   _11IAV   =  0; // REVOLVER IRON SIGHT VERTICAL

int   _12HAH   =  0; // M39 HOL0 HORIZONTAL
int   _12HAV   =  0; // M39 HOLO VERTICAL
int   _12HFAH  =  0; // M39 HIP FIRE HORIZONTAL
int   _12HFAV  =  0; // M39 HIP FIRE VERTICAL
int   _12IAH   =  0; // M39 IRON SIGHT HORIZONTAL 
int   _12IAV   =  0; // M39 IRON SIGHT VERTICAL
int   _12FAH   =  0; // M39 4X HORIZONTAL
int   _12FAV   =  0; // M39 4X VERTICAL

int   _13IAH   =  0; // NAIL GUN IRON SIGHT HORIZONTAL 
int   _13IAV   =  0; // NAIL GUN IRON SIGHT VERTICAL 

int   _15DZLV  =  0; // DEADZONE LEFT STICK  	                
int   _15DZRV  =  0; // DEADZONE RIGHT STICK














/*************************************************************************************************************************************************
							╦ ╦┌─┐┌─┐┌─┐┌─┐┌┐┌  ╦  ┬┌─┐┌┬┐
							║║║├┤ ├─┤├─┘│ ││││  ║  │└─┐ │ 
							╚╩╝└─┘┴ ┴┴  └─┘┘└┘  ╩═╝┴└─┘ ┴ 


This is the current weapon list

-We recomend using HOLO and Gloves for all guns since they perform better.
-All weapons work with no attachments on or Tactitacal Gloves but we do recommend them. 
-As we update the script we will be adding more attachments and weapons. 
- THE AK IS A BEAMER WITH A HOLO AND TACTTICAL GLOVES.

1)  AK				Iron Sights ,Holo ,4X
2)  MP5				Iron Sights ,Holo ,4X
3)  Tommy			Iron Sights ,Holo ,4X
4)  LR				Iron Sights ,Holo ,4X
5)  Custom SMG		Iron Sights ,Holo ,4X
6)  M249 Crouching 	Iron Sights ,Holo ,4X
7)  M249 Standing 	Iron Sights ,Holo ,4X
8)  SAR				Iron Sights ,Holo ,4X
9)  Python			Iron Sights ,Holo ,4X
10)  M92		    Iron Sights ,Holo ,4X
11) Semi Pistol		Iron Sights ,Holo ,4X
12) Revolver		Iron Sights 
13) M39				Iron Sights ,Holo ,4X
14) Nailgun			Iron Sights 
15) Jack Hammer     Jack Hammer Tap
*************************************************************************************************************************************************


						╔╦╗╔═╗╔╗╔╔╦╗  ╔╦╗╔═╗╦ ╦╔═╗╦ ╦  ╔═╗╔╗╔╦ ╦╔╦╗╦ ╦╦╔╗╔╔═╗  ╔╗ ╔═╗╦  ╦  ╔═╗╦ ╦
						 ║║║ ║║║║ ║    ║ ║ ║║ ║║  ╠═╣  ╠═╣║║║╚╦╝ ║ ╠═╣║║║║║ ╦  ╠╩╗║╣ ║  ║  ║ ║║║║
						═╩╝╚═╝╝╚╝ ╩    ╩ ╚═╝╚═╝╚═╝╩ ╩  ╩ ╩╝╚╝ ╩  ╩ ╩ ╩╩╝╚╝╚═╝  ╚═╝╚═╝╩═╝╩═╝╚═╝╚╩╝
							IF YOU DO YOU HAVE A VERY GOOD CHANCE OF MESSING UP THE SCRIPT
											DONT CHANGE ANYTHING BELOW


**************************************************************************************************************************************************/
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	define DeadzoneLS = 10;
	define DeadzoneRS = 10;
	const string TITLE1 = "PEDROS"
	const string TITLE2 = "NIGHTMARE"
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE = "SAVED";
	const string ALL = "Every Profiles";
	const string MUTE = "Script OFF";
	const string HOLD = "Dbl-Tap CIRCLE/B";
	const string ACTIVE = "to turn ON"
	
	const string PROFILE[] = {
	"AK", "MP5", "Tommy", "LR-300","Custom SMG","M249 Crouch", "M249 Standing","SAR","Python","M92","Semi Pistol", "Revolver", "M39","Nailgun", "Jack Hammer", "Dead Zone" };
	
	const string INFO_MENU_PS[] = {
	"Switch Gun:", "tap TRIANGLE", "Switch Sight:", "tap LEFT or RIGHT", "Sight ON/OFF:", "tap UP or DOWN", 
	"Profile Menu:", "tap CROSS", "Close Gun Menu:", "hold L2 +", "tap OPTION", "Save and exit:", "tap PS"}; 
	
	const string INFO_EDIT_PS[] = {
	"Switch Profile:", "tap TRIANGLE","Switch Gun:", "tap LEFT or RIGHT", "Choose Sight:", "tap UP or DOWN", 
	"Gun Menu:", "tap CIRCLE", "Close Profile Menu:", "hold L2 +", "tap OPTION", "Save and exit:", "tap PS"}; 
	
	const string INFO_MENU_XB[] = {
	"Switch Gun:", "tap Y", "Switch Sight:", "tap LEFT or RIGHT", "Sight ON/OFF:", "tap UP or DOWN", 
	"Profile Menu:", "tap A", "Close Gun Menu:", "hold LT +", "tap MENU", "Save and exit:", "tap XBOX"}; 
	
	const string INFO_EDIT_XB[] = {
	"Switch Profile:", "tap Y" ,"Switch Gun:", "tap LEFT or RIGHT", "Choose Sight:", "tap UP or DOWN", 
	"Gun Menu:", "tap B", "Close Profile Menu:", "hold LT +", "tap MENU", "Save and exit:", "tap XBOX"};
	

	const string MODNAME[] = {
			 "Holo","Iron Sight","-4X" ,"Jacky Tap" ,"Press Square/X"}; 
			 
	const string QL[]={
			"AFK","Jack Hammer"};
			
	const string VALNAME[] = { "Holo Horz." , "Holo Vert." , "Iron Horz.", "Iron Vert." ," _4X Horz." ,"_4X Vert.","Hip Fire Horz." , "Hip Fire Vert." , "DZ Left Stick" , "DZ Right Stick" };
  
  	define A1           = PS4_L2; 
	define F1     		= PS4_R2; 
	define On 	 		= TRUE;   
	define Off  	    = FALSE;	
	define RapidFire    = On;	
	define HA = 0,    IA = 1 , FA = 2 , JHT = 3 , DZ = 4;
	define HAX = 0, HAY = 1, IAX = 2, IAY = 3, FAX = 4, FAY = 5, HFAX = 6, HFAY = 7, DZL = 8 , DZR = 9 ; 
	define AMOUNT_OF_MULTI_TOGGLE = 5;
	define AFK =0, JH = 1 ;
	
	const uint8 ASCII_NUM[] = 
  	{48,49,50,51,52,53,54,55,56,57};
	
	int i;

data(
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
    0,1,1,0,  1,1,1,0,  0,1,0,0,  1,0,1,0,
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
	int display_title = TRUE;
	int display_new; 
	int display_new2;
	int display_info;
	int display_black;
	int screensaver;
	int ModMenu;	
	int ProfileMenu;
	int ModEdit;
	int KillSwitch;
	int count_black; 
	int info_timer;
	int switch_ref;
	int profile_idx; 
	int currentSlot;
	int current_info;
	int logo_on;
	int RTT,WT,VP,HP,TA,STP,AY,AY2,AX,AX2,OT,OFT,XS,YS,HXS,HYS,AXU,AYU;
	int MAX_PROFILE_NUM = 15;
    int toggle_profile[3];
	int toggle2_profile[3];
    int toggle_num; 
    int AR1;
	int AR2;
    int modName_idx;
	int valName_idx;
	int ql_idx;
	int THA[15];  
	int TIA[15];
	int TFA[15];
	int TDZ[16];
	int TJH[15];
	int HAH[15];
	int HAV[15];
	int IAH[15];
	int IAV[15];
	int FAH[15];
	int FAV[15];
	int HFAH[15];
	int HFAV[15];
	int DZLV[16];
	int DZHV;
	int DZRV[16];
    int DZFV;
    int TAFK[1];
    
    
    
const int16 _6575[][] = {
	{0,-11,6,-14,-16,-2,5,10,12,21,19,21,8,15,-1,-3,-6,-10,-14,-12,-16,-21,-19,-16,-14,-1,7,12,14,18,13,0},			
	{0,47,45,42,42,40,38,37,20,22,20,17,20,32,42,35,35,35,40,36,35,15,17,	18,	18,	32,	30,	38,	36,	30,	32,0},			
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,2730,2860,2990,3120,3250,3380,3510,3640,3770,4000,10000}  		
}

const int16 _778053[][] = {
	{0, -2, 2, 0, 5, 14,15,15, 0, -20, -2, -15, 4, 8, 10, 7, 5, 8, 9, 10, 0, -7, -12, -13, -14, -16, -18, -19, -20, 16, 0,0},			
	{0,20, 41, 45, 50,28, 29,32, 28, 23, 20,21,21,22,23,20, 20,20,20,20,5,5,5,5,5,0, 0,0, 0, 0, 0,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,10000}  		
}

const int16 _847977[][] = {
	{ 0,-5,2,-2,7, 4, 6,10,-10,-7,-6,-5, -4, -2, 5,6,8,10,-8,-10,-3,0},			
	{0, 42,43,44,45,30,34,33,30,36,22,24,26,25,25,20,22,24,26,0,0,0},			
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,10000}  		
}

const int16 _7682[][] = {
	{ 0,0,-3,-4,-4,-5,-5,-6,-4,10,12,14,12,13, 7,-7,-13,-13,-13,-13, -7,0,-11,-12, -13, 0, 0,13,17,20,0,0},			
	{0,36,36,40,41,33,34,35,30, 0, 0, 15, 25, 26, 7, 6, 18, 19, 10, 21, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10,0,0},			
	{0,120,240,360,480,600,720,840,960,1080,1200,1320,1440,1560,1680,1800,1920,2040,2160,2280,2400,2520,2640,2760,2880,3000,3120,3240,3360,3480,3600,10000}  		
}

const int16 _678583[][] = {
	{0,-6,-5,3,0,4,5,4,6,3,6,-5,-6,-5,-5,-7,4,5,4,5,5,4,-3,-3,0,0},			
	{0,48,46,46,44,38,39,39,33,40,40,30,32,24,24,25,16,14,20,20,20,20,20,20,20,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,10000}  		
}

const int16 _77505257 [][]={
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,40,44,40,42,40,44,40,42,40,42,40,43,40,44,40,42,40,44,41,40,42,40,41,42,40,0},
 {0,1200,1440,1680,2400,3120,3360,3600,3840,4080,4320,5280,5520,5760,6240,7440,7920,8640,9120,9360,9600,10080,10560,11280,12000,13200,15000}
}

const int16 _109505257104831310 [][]={
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,57,62,57,60,57,62,57,60,57,60,57,61,57,62,57,60,57,62,58,57,60,57,58,60,57,0},
 {0,1200,1440,1680,2400,3120,3360,3600,3840,4080,4320,5280,5520,5760,6240,7440,7920,8640,9120,9360,9600,10080,10560,11280,12000,13200,15000}
}

const int16 _836582 [][]={
	{0,0,0,0},
	{0,50,51,0},
	{0,2160,2880,4000}
}

const int16 _80121116104111110  [][] ={
	{0,0,0,0},
	{0,80,82,0},
	{0,450,900,2000}
}

const int16 _775750  [][] = {
	{0,0,0,0},
	{0,63,57,0},
	{0,600,2250,4000}
}
	
const int16 _836580   [][]={
	{0,0,0},
	{0,62,0},
	{0,1500,3000}
}
	
const int16 _8269867976  [][] = {
	{0,0,0,0},
	{0,50,46,0},
	{0,360,1440,3000}
}
	
const int16 _77515772797679  [][]={
	{0,0,0},
	{0,50,0},
	{0,3800,5000}
}
	
const int16 _78657376718578 [][]={
	{0,0,0},
	{0,49,0},
	{0,2240,4000}
}

const int16 _65755288  [][]={
	{0,-33, 17, -29, -33, -4, 10, 21, 25, 44, 39, 44, 16, 31, -2, -6, -12, -21, -29, -25, -33, -44, -39, -33, -29, -2, 14, 25, 29, 37, 26,0},
	{0,83,87,85,81,78,74,72,39,42,39,33,39,62,81,68,68,68,78,70,68,29,33,35,35,62,58,74,70,58,60,0},
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,2730,2860,2990,3120,3250,3380,3510,3640,3770,4000,10000}
}
	
const int16 _7780535288  [][]={
	{0,-4,4,0,10,28,30,30,-5,-21,-23,-22,4,6,10,9,10,16,18,20,0,-14,-24,-26,-28,-32,-36,-38,-40,32,0,0},
	{0,38,77,85,95,53,55,60,53,43,38,39,39,41,43,38,38,38,38,38,9,9,9,9,9,0,0,0,0,0,0,0},
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,10000}  		
}

const int16 _84797777895288 [][]={
	{0,-10,4,-4,14,8,12,20,-20,-14,-12,-10,-8,-4,10,12,16,20,-16,-20,-6,0},
    {0,79,81,83,85,57,64,62,57,68,41,45,49,47,47,38,41,45,49,0,0,0},
    {0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,10000}  		
}

const int16 _76825288  [][]={
	{0,0,-6,-8,-8,-10,-0,-12,-8,21,21,24,18,22,9,-17,-21,-21,-21,-21,-14,0,-23,-25,-27,14,16,19,24,24,0,0},
    {0,70,70,78,79,64,66,68,58,0,0,29,48,50,13,11,35,37,19,40,0,0,0,7,9,11,13,15,17,19,0,0},
    {0,120,240,360,480,600,720,840,960,1080,1200,1320,1440,1560,1680,1800,1920,2040,2160,2280,2400,2520,2640,2760,2880,3000,3120,3240,3360,3480,3600,10000}  		
}

const int16 _6785835288 [][] = {
	{0,-12,-10,6,0,8,10,8,12,6,12,-10,-12,-10,-10,-14,8,10,8,10,10,8,-6,-6,0,0},			
	{0,91,87,87,83,72,74,74,62,76,76,57,60,45,45,47,30,26,38,38,38,38,38,38,38,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,10000}
}

const int16 _775052575288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,72,79,75,72,74,74,72,77,70,76,72,76,72,77,72,77,70,74,70,77,72,70,74,70,72,74,70,0},
	{0,1200,1320,1440,1680,1920,2400,3120,3360,3600,3840,4080,4320,5280,5520,5760,6240,7440,7920,8640,9120,9360,9600,10080,10560,11280,12000,13200,15000}
}



const int16 _109505257521201151310[][] = {
{0,0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,0},
{0,90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,	90,	91,0},
{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,2730,2860,2990,3120,3250,3380,3510,3640,3770,3900,4030,4160,4290,4420,4550,4680,4810,4940,5070,5200,5330,5460,5590,5720,5850,5980,6110,6240,6370,6500,6630,6760,6890,7020,7150,7280,7410,7540,7670,7800,7930,8060,8190,8320,8450,8580,8710,8840,8970,9100,9230,9360,9490,9620,9750,9880,10010,10140,10270,10400,10530,10660,10790,10920,11050,11180,11310,11440,11570,11700,11830,11960,12090,12220,12350,12480,12610,12740,12870,13000,13130,13260,15000}
}



const int16 _8365825288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   	{0,84,83,84,83,85,85,86,85,86,88,87,88,87,88,87,88,0,0},
	{0,180,360,540,720,900,1080,1260,1440,1620,1800,1980,2160,2340,2520,2700,2880,3060,4000}
}
	
const int16 _8089847279785288 [][]= {
	{0,0,0,0},
	{0,100,90,0},
	{0,450,900,2000}
}
	
const int16 _7757505288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,90,90,91,90,89,91,90,91,90,91,90,91,90,91,90,91,0},
	{0,150,300,450,600,750,900,1050,1200,1350,1500,1650,1800,1950,2100,2250,2400,4000}
}

const int16 _8365805288  [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0},
	{0,91,90,91,90,91,90,91,90,91,90,0},
	{0,150,300,450,600,750,900,1050,1200,1350,1500,3000}
}

const int16 _7751575288  [][]={
	{0,0,0},
	{0,86,0},
	{0,3800,5000}
}


const int16 STOPPER[]={10000,10000,10000,10000,10000,15000,15000,4000,2000,4000,3000,3000,5000,4000,0};		
int stoprecoil,stop_idx;

init{

	Load();
	currentSlot = get_slot(); 
}													        


main { 

		
     
   
    
    
    
    if(get_controller() != PIO_PS4) 
    {
    	
        if(get_console() == PIO_PS4)
        { 
        	if(get_ival(PS4_SHARE))
        	{
        		if(get_ival(PS4_R3)) 
        		{
					set_val(PS4_SHARE,100);
                	set_val(PS4_TOUCH,0);
                	set_val(PS4_R3,0);
        		}
        		else 
        		{
        			set_val(PS4_TOUCH, 100);
        			set_val(PS4_SHARE, 0);
        		}
        	}
        }
	}

	if (TDZ[15] == FALSE )
	{
		if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= DeadzoneLS) 
		{
    		set_val(PS4_LX,0);
    		set_val(PS4_LY,0);
    	}	
    	else
 	    {
 	    	set_val(PS4_LX, (get_ival(PS4_LX) * (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) - DeadzoneLS) / isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2))) * 100/ (100 - DeadzoneLS))
 	    	set_val(PS4_LY, (get_ival(PS4_LY) * (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) - DeadzoneLS) / isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2))) * 100/ (100 - DeadzoneLS))
	  	}
     
     	if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= DeadzoneRS) 
   		{
    		set_val(PS4_RX,0);
    		set_val(PS4_RY,0);
 	    }
 	    else
 	    {
 	    	set_val(PS4_RX, (get_ival(PS4_RX) * (isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) - DeadzoneRS) / isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2))) * 100/ (100 - DeadzoneRS))
 	    	set_val(PS4_RY, (get_ival(PS4_RY) * (isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) - DeadzoneRS) / isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2))) * 100/ (100 - DeadzoneRS))
	  	}
	
	if ( DZLV[16] != 7 || DZRV[16] != 10)
		{ 
			AR1 = FALSE;
			AR2 = FALSE;
		}
	}
	


	if (TDZ[15] == TRUE )
  	{
   		
   			if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= DZRV[15] )
   			{
    			set_val(PS4_RX,0);
    			set_val(PS4_RY,0);
 	    	}
 	    	
 	    	else
 	    	{
 	    		set_val(PS4_RX, (get_ival(PS4_RX) * (isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) - DZRV[15]) / isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2))) * 100/ (100 - DZRV[15]))
 	    		set_val(PS4_RY, (get_ival(PS4_RY) * (isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) - DZRV[15]) / isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2))) * 100/ (100 - DZRV[15]))
	  		}
	  		
   			if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= DZLV[15])
   			{
    			set_val(PS4_LX,0);
    			set_val(PS4_LY,0);
 	    	}
 	    	
 	    	else
 	    	{
 	    		set_val(PS4_LX, (get_ival(PS4_LX) * (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) - DZLV[15]) / isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2))) * 100/ (100 - DZLV[15]))
 	    		set_val(PS4_LY, (get_ival(PS4_LY) * (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) - DZLV[15]) / isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2))) * 100/ (100 - DZLV[15]))
	  		}
	
	if ( DZLV[16] != 7 || DZRV[16] != 10)
		{ 
			AR1 = FALSE;
			AR2 = FALSE;
		}
	
	}
 
	if(!ModMenu && !ProfileMenu && !ModEdit)
	{
	
		if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || (get_ival(PS4_L2) && event_press(PS4_PS)) )
		{			
			KillSwitch = !KillSwitch;
			
			if(KillSwitch) 
				combo_run(RUMBLE_OFF);	
				
			else
			{
				combo_run(RUMBLE_ON);
				display_title = TRUE;	
			}
		}
		
	
		if(KillSwitch) 
		{
    		screensaver= FALSE;
			count_black = 0;
			logo_on = FALSE;
	
			if(event_press(PS4_CIRCLE) && get_brtime(PS4_CIRCLE) < 200) 
			{
				KillSwitch = FALSE;
				combo_run(RUMBLE_ON);
				display_title = TRUE; 
			}
			combo_run(KILLSWITCH);
		}
		else 
			combo_stop(KILLSWITCH);
			
	
		if(get_ival(PS4_L2))
		{
			if(get_controller() != PIO_PS4) 
				set_val(PS4_TOUCH, 0);
			else
				set_val(PS4_SHARE, 0);
		}
	}

	
	if(!KillSwitch)
	{
	
		if(get_ival(PS4_L2))
		{	
			if(event_release(PS4_OPTIONS))
			{
				cls_oled(OLED_BLACK);
    			logo_on = FALSE;
    			
				if(ProfileMenu)
				{
					
					ProfileMenu = FALSE;
					display_title = TRUE;   
				}
				
				if(ModEdit)
				{
					
					ModEdit = FALSE;
					display_title = TRUE;   
				}
				else 
					ModMenu = !ModMenu;
				
				if(!ModMenu)
				{
					combo_run(RUMBLE_OFF); 
					display_title = TRUE;  
				}
				if(ModMenu)
				{
					current_info = 0;		
					combo_run(RUMBLE_ON);	
					draw_base_menu();		
					draw_modMenu();		
					draw_chars_line1();		
					draw_chars_line2(); 
					draw_chars_line3();		
					display_new = TRUE;
					display_info = TRUE;
				}
			}
			set_val(PS4_OPTIONS, 0);
		} 

		if(ModMenu) 
		{
			button_animation(); 
				if(event_release(PS4_CROSS))
				{
					current_info = 0;		
					ProfileMenu = TRUE;
					ModMenu = FALSE;
					ModEdit = FALSE;
					draw_profileMenu();			
					draw_chars_line1();		
					draw_chars_line2();		
					draw_chars_line3();	
					display_new = TRUE;
					display_info = TRUE;
				}		
		}
		if(ModMenu)
		{
			if(event_release(PS4_SQUARE))
				{
					current_info = 0;		
					ModEdit = TRUE;
					ProfileMenu = FALSE
					ModMenu = FALSE;
					draw_modEdit();			
					draw_chars_line1();		
					draw_chars_line2();		
					draw_hold_to_edit();
					draw_chars_line3();	
					display_new = TRUE;
					display_info = TRUE;
				}
		
		} 
		
	
		if(ProfileMenu) 
		{
			button_animation(); 
				
			{	
			if(event_press(PS4_CIRCLE))
				{
					current_info = 0;	
					ModMenu = TRUE;
					ProfileMenu = FALSE;
					ModEdit = FALSE;
					draw_modMenu();		
					draw_chars_line1();	
					draw_chars_line2();	
					draw_chars_line3();
					display_new = TRUE;
					display_info = TRUE;
				}					
			
				if(event_press(PS4_TRIANGLE))
				{
				toggle_num = cycle(toggle_num + 1, 0, 2); 
				display_new = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
				toggle_profile[toggle_num] = cycle(toggle_profile[toggle_num] - 1, 0, 14);
				display_new = TRUE; 
				}
				if(event_press(PS4_RIGHT))
				{
				toggle_profile[toggle_num] = cycle(toggle_profile[toggle_num] + 1, 0, 14); 
				display_new = TRUE; 
				}
			
				if(event_press(PS4_UP))
				{
				toggle2_profile[toggle_num] = cycle(toggle2_profile[toggle_num] + 1, HA, FA ); 
				display_new = TRUE; 
				}
			
				if(event_press(PS4_DOWN))
				{
				toggle2_profile[toggle_num] = cycle(toggle2_profile[toggle_num] - 1, HA, FA);  
				display_new = TRUE; 
				}
			    
			    if(toggle_profile[toggle_num] == 11 || toggle_profile[toggle_num] == 13)
			    {
			        toggle2_profile[toggle_num] = 1;
			    	
			    
			    }
			    
			    if(toggle_profile[toggle_num] == 14 )
			    {
			        toggle2_profile[toggle_num] = 3;
			    	
			    
			    }
			} 
		} 	


if(ModEdit) 
		{
			if	(profile_idx == 14)
				{
					current_info = 0;	
					ModMenu = TRUE;
					ProfileMenu =FALSE;
					ModEdit = FALSE;
					draw_modMenu();		
					draw_chars_line1();	
					draw_chars_line2();	
					draw_chars_line3();
					display_new = TRUE;
					display_info = TRUE;
				
				}
			
			button_animation(); 
			if(get_ival(PS4_CROSS)  ) 
			{
				HAH[profile_idx]      				= edit_val( HAX , HAH[profile_idx] ,	-99  ,  99 , 1 , 10    );          
				HAV[profile_idx]        			= edit_val( HAY , HAV[profile_idx] ,    -99  ,  99 , 1 , 10    );
				HFAH[profile_idx]      				= edit_val( HFAX , HFAH[profile_idx] ,	-99  ,  99 , 1 , 10    );          
				HFAV[profile_idx]        			= edit_val( HFAY , HFAV[profile_idx] ,  -99  ,  99 , 1 , 10    );
				IAH[profile_idx]      				= edit_val( IAX , IAH[profile_idx] ,    -99  ,  99 , 1 , 10    );           
				IAV[profile_idx]					= edit_val( IAY , IAV[profile_idx] ,    -99  ,  99 , 1 , 10    );          
				FAH[profile_idx]          			= edit_val( FAX , FAH[profile_idx] ,    -99  ,  99 , 1 , 10    );        
				FAV[profile_idx]      				= edit_val( FAY , FAV[profile_idx] ,    -99  ,  99 , 1 , 10    );        
				DZLV[profile_idx]      				= edit_val( DZL , DZLV[profile_idx],    -99  ,  99 , 1 , 10    );        
				DZRV[profile_idx]      				= edit_val( DZR , DZRV[profile_idx],    -99  ,  99 , 1 , 10    );        
			} 
			else 
			{	
				if(event_press(PS4_CIRCLE))
				{
					current_info = 0;	
					ModMenu = TRUE;
					ProfileMenu =FALSE;
					ModEdit = FALSE;
					draw_modMenu();		
					draw_chars_line1();	
					draw_chars_line2();	
					draw_chars_line3();
					display_new = TRUE;
					display_info = TRUE;
				}
				
				if(event_press(PS4_RIGHT))
				{
					valName_idx += 1;
					display_new = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
					valName_idx -= 1;
					display_new = TRUE; 
				}
					
				if(profile_idx == 0)   valName_idx = cycle(valName_idx , HAX, HFAY); 
				if(profile_idx == 1)   valName_idx = cycle(valName_idx , HAX, HFAY);  
				if(profile_idx == 2)   valName_idx = cycle(valName_idx , HAX, HFAY);  
				if(profile_idx == 3)   valName_idx = cycle(valName_idx , HAX, HFAY);  
				if(profile_idx == 4)   valName_idx = cycle(valName_idx , HAX, HFAY);  
				if(profile_idx == 5)   valName_idx = cycle(valName_idx , HAX, HFAY);  
				if(profile_idx == 6)   valName_idx = cycle(valName_idx , HAX, HFAY); 
				if(profile_idx == 7)   valName_idx = cycle(valName_idx , HAX, HFAY);
				if(profile_idx == 8)   valName_idx = cycle(valName_idx , HAX, HFAY); 
				if(profile_idx == 9)   valName_idx = cycle(valName_idx , HAX, HFAY); 
				if(profile_idx == 10)  valName_idx = cycle(valName_idx , HAX, HFAY); 
				if(profile_idx == 11)  valName_idx = cycle(valName_idx , IAX,  IAY); 
				if(profile_idx == 12)  valName_idx = cycle(valName_idx , HAX, HFAY);
				if(profile_idx == 13)  valName_idx = cycle(valName_idx , IAX,  IAY);
				if(profile_idx == 15)  valName_idx = cycle(valName_idx , DZL, DZR);
			} 
			
			
		} 
	
		if(ModMenu || ProfileMenu || ModEdit ) 
		{
		
    		screensaver = FALSE;
			count_black = 0;			
			info_timer += get_rtime();
			
			if(info_timer > 2000)
			{
				current_info ++;
				display_info = TRUE;
			}
			
		
			if(!get_ival(PS4_L2) && event_release(PS4_PS))
			{
				Save();
				ModMenu = FALSE;
	            ProfileMenu = FALSE;
	            ModEdit = FALSE;
	            cls_oled(OLED_BLACK);
	            print(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	            combo_run(SAVE);
	        }
	    	
			block_btn(); 
					
			if(!ProfileMenu && !ModEdit) 
			{
			    
			    if (get_ival(PS4_L1) && get_ptime(PS4_L2) > 5000)  
			    
			    {
			    
			    Default_Setting();
		    
		    
			    }
			    
			    if(event_release(PS4_TRIANGLE))
			    {	
				    profile_idx = cycle(profile_idx + 1, 0, entry_count(PROFILE_TXT));
				    display_new = TRUE; 
			    }
			
			    if(event_press(PS4_RIGHT))
				{
					modName_idx += 1;
					display_new = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
					modName_idx -= 1;
					display_new = TRUE; 
				}
				if(profile_idx == 0)   modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 1)   modName_idx = cycle(modName_idx, HA   ,FA     );  
				if(profile_idx == 2)   modName_idx = cycle(modName_idx, HA   ,FA     );  
				if(profile_idx == 3)   modName_idx = cycle(modName_idx, HA   ,FA     );  
				if(profile_idx == 4)   modName_idx = cycle(modName_idx, HA   ,FA     );  
				if(profile_idx == 5)   modName_idx = cycle(modName_idx, HA   ,FA     );  
				if(profile_idx == 6)   modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 7)   modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 8)   modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 9)   modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 10)  modName_idx = cycle(modName_idx, HA   ,FA     ); 
				if(profile_idx == 11)  modName_idx = cycle(modName_idx, IA   ,IA     ); 
				if(profile_idx == 12)  modName_idx = cycle(modName_idx, HA   ,FA     );
			    if(profile_idx == 13)  modName_idx = cycle(modName_idx, IA   ,IA     );
			   	if(profile_idx == 14)  modName_idx = cycle(modName_idx, JHT  ,JHT    );
				if(profile_idx == 15)  modName_idx = cycle(modName_idx, DZ   ,DZ     );

					THA[profile_idx]     = toggle( HA    , THA[profile_idx]     );
					TIA[profile_idx]     = toggle( IA    , TIA[profile_idx]     );
					TFA[profile_idx]     = toggle( FA    , TFA[profile_idx]     );
					TJH[profile_idx]     = toggle( JHT   , TJH[profile_idx]     );
					TDZ[profile_idx]     = toggle( DZ    , TDZ[profile_idx]     );
		    }
		}
				
		if(!ModMenu && !ProfileMenu && !ModEdit)
		{
		
			if(get_val(PS4_L2) && event_press(PS4_TRIANGLE))
			{
			    for(i = 0; i < MAX_PROFILE_NUM; i++)
			    {
			        THA[i] = 0;
			        TIA[i] = 0;
			        TFA[i] = 0;
			    	
			    	
			    }
			    switch_ref = cycle(switch_ref + 1, 0, 2);
				profile_idx = toggle_profile[switch_ref];
				modName_idx = toggle2_profile[switch_ref];
				THA[profile_idx]   = quicktoggle( HA    , THA[profile_idx]     );
			    TIA[profile_idx]   = quicktoggle( IA    , TIA[profile_idx]     );
			    TFA[profile_idx]   = quicktoggle( FA    , TFA[profile_idx]     );

				display_title = TRUE;
		   	}
		    	
			if(get_lval(PS4_L2))
				set_val(PS4_TRIANGLE, 0);

			THA[profile_idx]  = speed_toggle ( PS4_L2, PS4_UP    , 3000 , THA[profile_idx] , HA  );
			TIA[profile_idx]  = speed_toggle ( PS4_L2, PS4_RIGHT , 3000 , TIA[profile_idx] , IA  );
			TFA[profile_idx]  = speed_toggle ( PS4_L2, PS4_DOWN  , 3000 , TFA[profile_idx] , FA  );
			TAFK[0]  		  = speed_toggle2( PS4_L1, PS4_UP    , 500 , TAFK[0] , AFK  );
		    
			
			
		
		
	if (profile_idx == 14 )
		{
			
		if (get_val(PS4_R2))
			{	
				combo_run(FARM);
			}
		}
		
	
	if (TAFK == TRUE)
		{	
			combo_run(afk);
		}
	
	
	
	
	if(get_val(PS4_R2))
	{
		if(get_val(PS4_L2))
		{
			AR1 = TRUE;
			AR2 = FALSE;
		}
		else
		{
			AR1 = FALSE;
			AR2 = TRUE;
		}
	}


	if (AR1)
	{
		
		
		if   ((profile_idx == 0) &&(THA[0] == TRUE)) {
	
			AX = _6575 [0][HP];
			AY = _6575 [1][VP];
			WT = _6575 [2][TA];
			XS =  HAH[0] ;
			YS =  HAV[0];
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 0) &&(TIA[0] == TRUE)) {
			AX = _6575 [0][HP];
			AY = _6575 [1][VP];
			WT = _6575 [2][TA];
			XS =  IAH[0];
			YS =  IAV[0];
			stop_idx = STOPPER[profile_idx];
			}

		if  ((profile_idx == 0) &&(TFA[0] == TRUE)) {
			AX = _65755288  [0][HP];
			AY = _65755288  [1][VP];
			WT = _65755288  [2][TA];
			XS =  FAH[0];
			YS =  FAV[0];
			stop_idx = STOPPER[profile_idx];
			}
	
		 if   ((profile_idx == 1) &&(THA[1] == TRUE)) {
		
			AX = _778053 [0][HP];
			AY = _778053 [1][VP];
			WT = _778053 [2][TA];
			XS =  HAH[1];
			YS =  HAV[1];
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 1) &&(TIA[1] == TRUE)) {
			AX = _778053 [0][HP];
			AY = _778053 [1][VP];
			WT = _778053 [2][TA];
			XS =  IAH[1];
			YS =  IAV[1];
			stop_idx = STOPPER[profile_idx];
			}
	
		 if  ((profile_idx == 1) &&(TFA[1] == TRUE)) {
			AX = _7780535288  [0][HP];
			AY = _7780535288  [1][VP];
			WT = _7780535288  [2][TA];
			XS =  FAH[1];
			YS =  FAV[1];
			stop_idx = STOPPER[profile_idx];
			}
			 
		 if   ((profile_idx == 2) &&(THA[2] == TRUE)) {
		
			AX = _847977 [0][HP];
			AY = _847977 [1][VP];
			WT = _847977 [2][TA];
			XS =  HAH[2];
			YS =  HAV[2];
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 2) &&(TIA[2] == TRUE)) {
			AX = _847977 [0][HP];
			AY = _847977 [1][VP];
			WT = _847977 [2][TA];
			XS =  IAH[2];
			YS =  IAV[2];
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 2) &&(TFA[2] == TRUE)) {
			AX = _84797777895288  [0][HP];
			AY = _84797777895288  [1][VP];
			WT = _84797777895288  [2][TA];
			XS =  FAH[2];
			YS =  FAV[2];
			stop_idx = STOPPER[profile_idx];
			}

		 if   ((profile_idx == 3) &&(THA[3] == TRUE)) {
		
			AX = _7682 [0][HP];
			AY = _7682 [1][VP];
			WT = _7682 [2][TA];
			XS =  HAH[3];
			YS =  HAV[3];
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 3) &&(TIA[3] == TRUE)) {
			AX = _7682 [0][HP];
			AY = _7682 [1][VP];
			WT = _7682 [2][TA];
			XS =  IAH[3];
			YS =  IAV[3];
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 3) &&(TFA[3] == TRUE)) {
			AX = _76825288  [0][HP];
			AY = _76825288  [1][VP];
			WT = _76825288  [2][TA];
			XS =  FAH[3];
			YS =  FAV[3];
			stop_idx = STOPPER[profile_idx];
			}

		 if   ((profile_idx == 4) &&(THA[4] == TRUE)) {
		
			AX = _678583 [0][HP];
			AY = _678583 [1][VP];
			WT = _678583 [2][TA];
			XS =  HAH[4];
			YS =  HAV[4];		
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 4) &&(TIA[4] == TRUE)) {
			AX = _678583 [0][HP];
			AY = _678583 [1][VP];
			WT = _678583 [2][TA];
			XS =  IAH[4];
			YS =  IAV[4];
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 4) &&(TFA[4] == TRUE)) {
			AX = _6785835288  [0][HP];
			AY = _6785835288  [1][VP];
			WT = _6785835288  [2][TA];
			XS =  FAH[4];
			YS =  FAV[4];
			stop_idx = STOPPER[profile_idx];
			}	
	
		if   ((profile_idx == 5) &&(THA[5] == TRUE)) {
		
			AX = _77505257 [0][HP];
			AY = _77505257 [1][VP];
			WT = _77505257 [2][TA];
			XS =  HAH[5];
			YS =  HAV[5];		
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 5) &&(TIA[5] == TRUE)) {
			AX = _77505257 [0][HP];
			AY = _77505257 [1][VP];
			WT = _77505257 [2][TA];
			XS =  IAH[5];
			YS =  IAV[5];
			stop_idx = STOPPER[profile_idx];
			}
			
		if  ((profile_idx == 5) &&(TFA[5] == TRUE)) {
			AX = _775052575288  [0][HP];
			AY = _775052575288  [1][VP];
			WT = _775052575288  [2][TA];
			XS =  FAH[5];
			YS =  FAV[5];
			stop_idx = STOPPER[profile_idx];
			}	
			
			
			
			if   ((profile_idx == 6) &&(THA[6] == TRUE)) {
		
			AX = _109505257104831310 [0][HP];
			AY = _109505257104831310 [1][VP];
			WT = _109505257104831310 [2][TA];
			XS =  HAH[6];
			YS =  HAV[6];		
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 6) &&(TIA[6] == TRUE)) {
			AX = _109505257104831310 [0][HP];
			AY = _109505257104831310 [1][VP];
			WT = _109505257104831310 [2][TA];
			XS =  IAH[6];
			YS =  IAV[6];
			stop_idx = STOPPER[profile_idx];
			}
			
		if  ((profile_idx == 6) &&(TFA[6] == TRUE)) {
			AX = _109505257521201151310  [0][HP];
			AY = _109505257521201151310  [1][VP];
			WT = _109505257521201151310  [2][TA];
			XS =  FAH[6];
			YS =  FAV[6];
			stop_idx = STOPPER[profile_idx];
			}
			
		 if   ((profile_idx == 7) &&(THA[7] == TRUE)) {
		
			AX = _836582 [0][HP];
			AY = _836582 [1][VP];
			WT = _836582 [2][TA];
			XS =  HAH[7];
			YS =  HAV[7];
			OT = 90;
			OFT= 90;
			stop_idx = STOPPER[profile_idx];
			}
				
	
	     if  ((profile_idx == 7) &&(TIA[7] == TRUE)) {
			AX = _836582 [0][HP];
			AY = _836582 [1][VP];
			WT = _836582 [2][TA];
			XS =  IAH[7];
			YS =  IAV[7];
			OT = 90;
			OFT= 90;
			stop_idx = STOPPER[profile_idx];
			}
	
		if  ((profile_idx == 7) &&(TFA[7] == TRUE)) {
			AX = _8365825288  [0][HP];
			AY = _8365825288  [1][VP];
			WT = _8365825288  [2][TA];
			XS =  FAH[7];
			YS =  FAV[7];
			OT = 90;
			OFT= 90;
			stop_idx = STOPPER[profile_idx];
			}
	
		if   ((profile_idx == 8) &&(THA[8] == TRUE)) {
		
			AX = _80121116104111110  [0][HP];
			AY = _80121116104111110  [1][VP];
			WT = _80121116104111110  [2][TA];
			XS =  HAH[8];
			YS =  HAV[8];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 8) &&(TIA[8] == TRUE)) {
			AX = _80121116104111110  [0][HP];
			AY = _80121116104111110  [1][VP];
			WT = _80121116104111110  [2][TA];
			XS =  IAH[8];
			YS =  IAV[8];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 8) &&(TFA[8] == TRUE)) {
			AX = _8089847279785288   [0][HP];
			AY = _8089847279785288   [1][VP];
			WT = _8089847279785288  [2][TA];
			XS =  FAH[8];
			YS =  FAV[8];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

    	if   ((profile_idx == 9) &&(THA[9] == TRUE)) {
		
			AX = _775750  [0][HP];
			AY = _775750  [1][VP];
			WT = _775750  [2][TA];
			XS =  HAH[9];
			YS =  HAV[9];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 9) &&(TIA[9] == TRUE)) {
			AX = _775750  [0][HP];
			AY = _775750  [1][VP];
			WT = _775750  [2][TA];
			XS =  IAH[9];
			YS =  IAV[9];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 9) &&(TFA[9] == TRUE)) {
			AX = _7757505288   [0][HP];
			AY = _7757505288   [1][VP];
			WT = _7757505288   [2][TA];
			XS =  FAH[9];
			YS =  FAV[9];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

    if   ((profile_idx == 10) &&(THA[10] == TRUE)) {
		
			AX = _836580   [0][HP];
			AY = _836580   [1][VP];
			WT = _836580   [2][TA];
			XS =  HAH[10];
			YS =  HAV[10];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 10) &&(TIA[10] == TRUE)) {
			AX = _836580   [0][HP];
			AY = _836580   [1][VP];
			WT = _836580   [2][TA];
			XS =  IAH[10];
			YS =  IAV[10];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 10) &&(TFA[10] == TRUE)) {
			AX = _8365805288    [0][HP];
			AY = _8365805288    [1][VP];
			WT = _8365805288    [2][TA];
			XS =  FAH[10];
			YS =  FAV[10];
			OT = 70;
			OFT= 80;
			stop_idx = STOPPER[profile_idx];
			}

    	if   (profile_idx == 11)  {
		
			AX = _8269867976  [0][HP];
			AY = _8269867976  [1][VP];
			WT = _8269867976  [2][TA];
			XS =  IAH[11]
			YS =  IAV[11]
			OT = 90;
			OFT= 90;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if   ((profile_idx == 12) &&(THA[12] == TRUE)) {
		
			AX = _77515772797679   [0][HP];
			AY = _77515772797679   [1][VP];
			WT = _77515772797679   [2][TA];
			XS =  HAH[12];
			YS =  HAV[12];
			OT = 40;
			OFT= 150;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if  ((profile_idx == 12) &&(TIA[12] == TRUE)) {
			AX = _77515772797679   [0][HP];
			AY = _77515772797679   [1][VP];
			WT = _77515772797679   [2][TA];
			XS =  IAH[12];
			YS =  IAV[12];
			OT = 40;    
			OFT= 150;
			stop_idx = STOPPER[profile_idx];
			}

	     if  ((profile_idx == 12) &&(TFA[12] == TRUE)) {
			AX = _7751575288   [0][HP];
			AY = _7751575288   [1][VP];
			WT = _7751575288   [2][TA];
			XS =  FAH[12];
			YS =  FAV[12];
			OT = 40;
			OFT= 150;
			stop_idx = STOPPER[profile_idx];
			}
    
    if   (profile_idx == 13)   {
		
			AX = _78657376718578   [0][HP];
			AY = _78657376718578   [1][VP];
			WT = _78657376718578   [2][TA];
			XS =  IAH[13]
			YS =  IAV[13]
			OT = 40;
			OFT= 100;
			stop_idx = STOPPER[profile_idx];
			}
    
    
    
    
    
    if (RapidFire && profile_idx >= 7) {
    
        if (get_ival(A1) && get_ival(F1)) {
        
            combo_run(RapidFire);    
            
        } else {
            
            combo_stop(RapidFire);
        }
    }
	
	
	
	AYU = (AY * (100 + YS)) / 100;
    AXU = (AX * (100 + XS)) / 100;
	
	
   
  if(get_val(F1) && get_val(A1)){
  	RTT += get_rtime();   
	if(RTT >= WT){ 
		VP++;
	    HP++;
	    TA++;
	    STP++;
	}
	
    
   if(RTT >= STOPPER[profile_idx]){
    	stoprecoil = TRUE;
    } 
    
	
	if(!stoprecoil){
	set_val(PS4_RY, SmartSens(AYU, PS4_RY));
    set_val(PS4_RX, SmartSens(AXU, PS4_RX));
    }
        
    }
    
     
    
    
	if(event_release(F1) || event_release(A1)){ 
		VP   = 0;
	    HP   = 0;
	    TA   = 0;
	    STP  = 0;
	    RTT  = 0;
	     stoprecoil = FALSE;
	    }

	if(get_ival(PS4_L2) > 1){
    	set_val(PS4_L2, 100);
	}
    if(get_ival(PS4_R2) > 1){
    	set_val(PS4_R2, 100);
	}
	
	}

	if(AR2) {
	
		
		
		if   (profile_idx == 0)  {
	
			AX = _6575 [0][HP];
			AY = _6575 [1][VP];
			WT = _6575 [2][TA];
			XS =  HFAH[0] ;
			YS =  HFAV[0];
			HXS = -35;
			HYS = -35;
			stop_idx = STOPPER[profile_idx];
			}
	
	     
	
		 if  (profile_idx == 1) {
		
			AX = _778053 [0][HP];
			AY = _778053 [1][VP];
			WT = _778053 [2][TA];
			XS =  HFAH[1];
			YS =  HFAV[1];
			HXS = -35;
			HYS = -35;
			stop_idx = STOPPER[profile_idx];
			}
	
	     
			 
		 if  (profile_idx == 2) {
		
			AX = _847977 [0][HP];
			AY = _847977 [1][VP];
			WT = _847977 [2][TA];
			XS =  HFAH[2];
			YS =  HFAV[2];
			HXS = -35;
			HYS = -35;
			stop_idx = STOPPER[profile_idx];
			}
	
	    

		 if   (profile_idx == 3) {
		
			AX = _7682 [0][HP];
			AY = _7682 [1][VP];
			WT = _7682 [2][TA];
			XS =  HFAH[3];
			YS =  HFAV[3];
			stop_idx = STOPPER[profile_idx];
			}
	
	     

		 if   (profile_idx == 4) {
		
			AX = _678583 [0][HP];
			AY = _678583 [1][VP];
			WT = _678583 [2][TA];
			XS =  HFAH[4];
			YS =  HFAV[4];		
			HXS = -35;
			HYS = -35;
			stop_idx = STOPPER[profile_idx];
			}
	
	    	
	
		if   (profile_idx == 5) {
		
			AX = _77505257 [0][HP];
			AY = _77505257 [1][VP];
			WT = _77505257 [2][TA];
			XS =  HFAH[5];
			YS =  HFAV[5];		
			HXS = -35;
			HYS = -35;
			stop_idx = STOPPER[profile_idx];
			}
	
	
	if   (profile_idx == 6)  {
		
			AX = _109505257104831310 [0][HP];
			AY = _109505257104831310 [1][VP];
			WT = _109505257104831310 [2][TA];
			XS =  HFAH[6];
			YS =  HFAV[6];		
			HXS = -10;
			HYS = -10;
			stop_idx = STOPPER[profile_idx];
			}
	    	
			
		 if   (profile_idx == 7) {
		
			AX = _836582 [0][HP];
			AY = _836582 [1][VP];
			WT = _836582 [2][TA];
			XS =  HFAH[7];
			YS =  HFAV[7];
			OT = 90;
			OFT= 90;
			HXS = -15;
			HYS = -15;
			stop_idx = STOPPER[profile_idx];
			}
	
	    
	
		if   (profile_idx == 8) {
		
			AX = _80121116104111110  [0][HP];
			AY = _80121116104111110  [1][VP];
			WT = _80121116104111110  [2][TA];
			XS =  HFAH[8];
			YS =  HFAV[8];
			OT = 70;
			OFT= 80;
			HXS = -8;
			HYS = -8;
			stop_idx = STOPPER[profile_idx];
			}
	
	    

    	if  (profile_idx == 9) {
		
			AX = _775750  [0][HP];
			AY = _775750  [1][VP];
			WT = _775750  [2][TA];
			XS =  HFAH[9];
			YS =  HFAV[9];
			OT = 70;
			OFT= 80;
			HXS = -10;
			HYS = -10;
			stop_idx = STOPPER[profile_idx];
			}
	
	     

    if   (profile_idx == 10) {
		
			AX = _836580   [0][HP];
			AY = _836580   [1][VP];
			WT = _836580   [2][TA];
			XS =  HFAH[10];
			YS =  HFAV[10];
			OT = 70;
			OFT= 80;
			HXS = -18;
			HYS = -18;
			stop_idx = STOPPER[profile_idx];
			}
	
	    

    	if   (profile_idx == 11)  {
		
			AX = _8269867976  [0][HP];
			AY = _8269867976  [1][VP];
			WT = _8269867976  [2][TA];
			XS =  HFAH[11]
			YS =  HFAV[11]
			OT = 90;
			OFT= 90;
			HXS = -20;
			HYS = -20;
			stop_idx = STOPPER[profile_idx];
			}
	
	     if   (profile_idx == 12)  {
		
			AX = _77515772797679   [0][HP];
			AY = _77515772797679   [1][VP];
			WT = _77515772797679   [2][TA];
			XS =  HFAH[12];
			YS =  HFAV[12];
			OT = 40;
			OFT= 150;
			HXS = -20;
			HYS = -20;
			stop_idx = STOPPER[profile_idx];
			}
	
	    
    
    if   (profile_idx == 13)  {
		
			AX = _78657376718578   [0][HP];
			AY = _78657376718578   [1][VP];
			WT = _78657376718578   [2][TA];
			XS =  HFAH[13]
			YS =  HFAV[13]
			HXS = -15;
			HYS = -15;
			OT = 40;
			OFT= 100;
			stop_idx = STOPPER[profile_idx];
			}
    
    
    
    
    
    if (RapidFire && profile_idx >= 7) {
    
        if (get_ival(F1))  {
        
            combo_run(RapidFire);    
            
        } else {
            
            combo_stop(RapidFire);
        }
    }
	
	
	
	AYU = (AY2 * (100 + YS)) / 100;
    AXU = (AX2 * (100 + XS)) / 100;
	AY2 = (AY * (100 + HYS)) / 100;
    AX2 = (AX * (100 + HXS)) / 100;
	
   
  if(get_val(F1) && get_false(A1)){
  	RTT += get_rtime();   
	if(RTT >= WT){ 
		VP++;
	    HP++;
	    TA++;
	    STP++;
	}
	
    
   
    
	
	
	if(RTT >= STOPPER[profile_idx]){
    	stoprecoil = TRUE;
    } 
    
	
	if(!stoprecoil){
	set_val(PS4_RY, SmartSens(AYU, PS4_RY));
    set_val(PS4_RX, SmartSens(AXU, PS4_RX));
    }
    
        
    }
    
    
    
    
	if(event_release(F1) || event_release(A1)){ 
		VP   = 0;
	    HP   = 0;
	    TA   = 0;
	    STP  = 0;
	    RTT  = 0;
	    stoprecoil = FALSE;
	    
	}

	if(get_ival(PS4_L2) > 1){
    	set_val(PS4_L2, 100);
	}
    if(get_ival(PS4_R2) > 1){
    	set_val(PS4_R2, 100);
	}
	
	}

	if(event_release(F1) || event_release(A1)){ 
		VP   = 0;
	    HP   = 0;
	    TA   = 0;
	    STP  = 0;
	    RTT  = 0;
	    stoprecoil = FALSE;
	    
	}
		    if(display_black)
		    {
		    	count_black += get_rtime();
		    	if(count_black >= 8000)
		    	{
		    		cls_oled(0);
		    		count_black = 0;
		    		screensaver = TRUE;
		    		logo_on = FALSE;
		    		display_black = FALSE;
		    	}
		    }
		    
		    if(screensaver)
		    {
		    	DGT += get_rtime();
				if(DGT >= 100) 
				{
					SD1 += 2;	TP1 += 1;	TP2 -= 1;	DGT  = 0;
				}
				DGR += get_rtime();
				
				if(DGR >= 30) 
				{
					Y_1 += 1;	Y_2 += 2;	Y_3 += 3;	Y_4 += 4;
					Y_5 += 5;	Y_6 += 6;	Y_7 += 7;	Y_8 += 8;
					DGR  = 0;
				}
				
				name();
				MSC += get_rtime();
				
				if(MSC >= 1000) 
				{
					MSC = 0;	
					RT += 1;
				}
				
				if(RT == 30) 
				{
					screensaver = 0;
					RT = 0;
					cls_oled(0);
				}
		    }
		} 
		
		
		if(display_new2) 
        {
            screensaver = FALSE;
            count_black = 0;
            cls_oled(OLED_BLACK);
            print(center_x(get_string_length(get_string(QL_TXT, ql_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(QL_TXT, ql_idx));
            display_edit_line3_2();
            count_black = 2000;
            display_black = TRUE;
            display_new2 = FALSE;
        }
		
		
		
		
		if(display_new) 
		{
			screensaver = FALSE;
			count_black = 0;
			
			if(ProfileMenu)  
			{
				display_edit_line1();
				display_edit_line2();
				display_edit_line3();
							
			}
			
			else if(ModEdit) // Display editable value 
			{
				display_edit_line1();
			// Clears value zone
				rect_oled(38, 18, 51 , OLED_FONT_SMALL_HEIGHT + 3 , OLED_WHITE , OLED_BLACK); // small rectangle left (line 2 value)
				rect_oled(27, 31, 74 , OLED_FONT_SMALL_HEIGHT + 6 , OLED_WHITE , OLED_BLACK); // small rectangle left (line 3 value)
			
			// Display editable value
				display_values();
			}
			
			else if(ModMenu) 
			{
				display_edit_line1();
				display_edit_line2();
				display_edit_line3();
			}
			else 
			{
				cls_oled(OLED_BLACK);
				print(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));
				display_edit_line3();
				count_black = 2000;					
			}
						
			display_black = TRUE;
	        display_new = FALSE;
	       
	    } 
	
		if(display_info) 
		{
			info_timer = 0;
			rect_oled(1, 50, 126, 13, OLED_WHITE, OLED_BLACK); 
			if(ModMenu)
			{
				current_info = cycle(current_info, 0, entry_count(INFO_MENU_PS_TXT));
				
				if(get_controller() == PIO_PS4)
					print(center_x(get_string_length(get_string(INFO_MENU_PS_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_MENU_PS_TXT, current_info));
				else
					print(center_x(get_string_length(get_string(INFO_MENU_XB_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_MENU_XB_TXT, current_info));
			}
			if(ProfileMenu)
			{
				current_info = cycle(current_info, 0, entry_count(INFO_EDIT_PS_TXT));
				
				if(get_controller() == PIO_PS4)
					print(center_x(get_string_length(get_string(INFO_EDIT_PS_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_PS_TXT, current_info));
				else
					print(center_x(get_string_length(get_string(INFO_EDIT_XB_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_XB_TXT, current_info));
			if(ModEdit)
			{
				current_info = cycle(current_info, 0, entry_count(INFO_EDIT_PS_TXT));
				
				if(get_controller() == PIO_PS4)
					print(center_x(get_string_length(get_string(INFO_EDIT_PS_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_PS_TXT, current_info));
				else
					print(center_x(get_string_length(get_string(INFO_EDIT_XB_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_XB_TXT, current_info));
			}
			
			}
			display_info = FALSE;
		}
	} 


    if(display_title)
    {
    	screensaver= FALSE;
    	count_black = 0;	
    	
    	
    	if(!logo_on)
    	{
    		cls_oled(0);
   			draw_logo();
   			load_save()
   		}
   		else
   			rect_oled(0, 45, 128, 31, OLED_WHITE, OLED_BLACK); 
   			
   		number_to_string(currentSlot, find_digits(currentSlot)); 

		display_profile();
		
		logo_on = TRUE;
   		display_black = TRUE;	
    	display_title = FALSE;
    }

	if(KillSwitch)
		led(16);
	
	else
		led(profile_idx);
		
	if(TIA[profile_idx])
		combo_run(BLINK);	
	
	
	
																																																																																																																																																																																																																																																																																																																																																																																																										DZHV = sizeof(TITLE1); DZFV = sizeof(TITLE2) ;	
	
} 

combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}

combo RUMBLE_ON {					
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}
	
combo KILLSWITCH {
	cls_oled(OLED_BLACK);
    print(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8,OLED_FONT_MEDIUM,OLED_WHITE,MUTE[0]);    
    wait(get_rtime());
    wait(250);
    print(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,HOLD[0]);     
    print(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,ACTIVE[0]); 
    wait(get_rtime());
    wait(5000);  
    cls_oled(OLED_BLACK);
    wait(get_rtime());
    wait(5000);  
}

combo SAVE { 
	call(RUMBLE_ON);
	wait(150);
	call(RUMBLE_ON);		
	wait(1000);
	display_title = TRUE;
}

combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}


combo BLINK {
	led(profile_idx);
    wait(150);
    led(16);
    wait(300);
}


function display_edit_line1() {


	rect_oled(13, 1, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	if(ModMenu)
	{				
	
		if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) 
			display_profile ();
		else 
    		print(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,ALL[0]);
	}
	
	if(ProfileMenu) 
	{
	
    	number_to_string(toggle_num + 1, find_digits(toggle_num + 1));
   	}
	
	if(ModEdit) 
	{
	// Display Value Name
    	print(center_x(get_string_length(get_string(VALNAME_TXT, valName_idx)), OLED_FONT_SMALL_WIDTH),LINE_1_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(VALNAME_TXT, valName_idx));  
	}
	
}

function display_edit_line2() {
	
	rect_oled(13, 17, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
		
	if(ModMenu)
	{
		print(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));  // small size
	}
	
	if (ProfileMenu)
	{
		print(center_x(get_string_length(get_string(PROFILE_TXT, toggle_profile[toggle_num])), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILE_TXT, toggle_profile[toggle_num]));
	}
	
	
}



function display_edit_line3() {
	
	rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	display_toggle( HA     , THA[profile_idx]    );
	display_toggle( IA     , TIA[profile_idx]    );
	display_toggle( FA     , TFA[profile_idx]    );
	display_toggle( JHT    , TJH[profile_idx]    );
	display_toggle( DZ     , TDZ[profile_idx]    );
	
	if (ProfileMenu)
	{
	    print(center_x(get_string_length(get_string(MODNAME_TXT, toggle2_profile[toggle_num])), OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, toggle2_profile[toggle_num]));
	}
	
}


function display_edit_line3_2() {
	
	rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	display_toggle2( AFK    , TAFK[0]    );
	display_toggle2( JH     , TJH[0]    );
	
	
	
}


int profile_y;

function display_profile() {

	if(display_title)
		profile_y = 50; 
	else
		profile_y = 4; 
	
    print(center_x(get_string_length(get_string(PROFILE_TXT, profile_idx)), OLED_FONT_SMALL_WIDTH),profile_y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILE_TXT, profile_idx));
}


function display_edit(f_idx, f_val) { 
	
    if(valName_idx == f_idx)
    		number_to_string(f_val, find_digits(f_val));
}

function display_toggle(f_idx, f_toggle) { 

    if(modName_idx == f_idx)
   	{
    
    	if(f_toggle == 1)
    		print(center_x(sizeof(ON) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    	else
    		print(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,OFF[0]);
   	}
}

function display_toggle2(f_idx, f_toggle) { 

    if(ql_idx == f_idx)
   	{
    
    	if(f_toggle == 1)
    		print(center_x(sizeof(ON) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    	else
    		print(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,OFF[0]);
   	}
}


define SSA1 = 78,SSA2 = 79,SSA3 = 90,SSA4 = 66,SSA5 = 65,SSA6 = 82,SSA7 = 68,SSA8 = 82,SSA9 = 73,SSA10 = 70,SSA11 = 82,SSA13 = 50,SSA14 = 49,SAVER = 5000,SAVER1 = 10;



function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  
	
	if(valName_idx == f_idx)
	{
    // +1 or -1															 
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); 
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); 
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); 
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); 
	}		
	return f_val;
}


function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
	// Substract    
	  	if(f_val < f_rng_min) 
	  		f_val = f_rng_min; 
	// Add   
	  	if(f_val > f_rng_max) 
	  		f_val = f_rng_max; 
    		
        display_new = TRUE; 
    }
    return f_val; 
} 

function toggle(f_idx, f_val) { 
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
			f_val = cycle(f_val + 1, 0, 1);
		
		// Rumble	
			if(f_val == 0) 
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
		}
		display_new = TRUE; 
	}

	if(event_press(PS4_DOWN))
	{
		if(modName_idx == f_idx)
		{
			f_val = cycle(f_val - 1, 0, 1);
		
		// Rumble	
			if(f_val == 0) 
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);	
		}
		display_new = TRUE; 
	}
	return f_val;
}

function speed_toggle(f_hold, f_press, f_time, f_val, f_idx) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == f_time) 
		{
			modName_idx = f_idx;
			f_val = !f_val;	
			
			if(f_val == 0)
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
				
			display_new = TRUE; 
		} 
		
	}
	return f_val;
}

function speed_toggle2(f_hold, f_press, f_time, f_val, f_idx) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == f_time) 
		{
			ql_idx = f_idx;
			f_val = !f_val;	
			
			if(f_val == 0)
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
				
			display_new2 = TRUE; 
		} 
		set_val(f_press, 0)
	}
	return f_val;
}

define MODNAME_TXT = 0;
define VALNAME_TXT = 1;
define INFO_MENU_PS_TXT = 2;
define INFO_EDIT_PS_TXT = 3;
define INFO_MENU_XB_TXT = 4;
define INFO_EDIT_XB_TXT = 5;
define PROFILE_TXT = 6;
define QL_TXT= 7;

function entry_count(f_array_idx) { // by Swizzy

    i = 0;
    if 		(f_array_idx == MODNAME_TXT) 		{ while (MODNAME[i] != -1) { i++; } }
    else if (f_array_idx == VALNAME_TXT) 		{ while (VALNAME[i] != -1) { i++; } }
    else if (f_array_idx == INFO_MENU_PS_TXT) { while (INFO_MENU_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_EDIT_PS_TXT) { while (INFO_EDIT_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_MENU_XB_TXT) { while (INFO_MENU_XB[i] != -1) { i++; } }
    else if (f_array_idx == INFO_EDIT_XB_TXT) { while (INFO_EDIT_XB[i] != -1) { i++; } }
    else if (f_array_idx == PROFILE_TXT) { while (PROFILE[i] != -1) { i++; } }
    else if (f_array_idx == MODNAME_TXT) { while (MODNAME[i] != -1) { i++; } }
    else if (f_array_idx == QL_TXT) { while (QL[i] != -1) { i++; } }
    return i - 1;
}

function get_string(f_array_idx, f_idx) { 

	if(f_array_idx == MODNAME_TXT)
		return MODNAME[f_idx];
	
	if(f_array_idx == VALNAME_TXT)
		return VALNAME[f_idx];
				
	if(f_array_idx == INFO_MENU_PS_TXT)
		return INFO_MENU_PS[f_idx];
		
	if(f_array_idx == INFO_EDIT_PS_TXT)
		return INFO_EDIT_PS[f_idx];
			
	if(f_array_idx == INFO_MENU_XB_TXT)
		return INFO_MENU_XB[f_idx];
		
	if(f_array_idx == INFO_EDIT_XB_TXT)
		return INFO_EDIT_XB[f_idx];
		
	if(f_array_idx == PROFILE_TXT)
		return PROFILE[f_idx];
	
	if(f_array_idx == QL_TXT)
		return QL[f_idx];
	return -1;
}




int stringLength;

function get_string_length(offset) { // by Swizzy

    stringLength = 0;
    while (duint8(offset++)) { stringLength++; }
    return stringLength + 1;
}

int c,c_val;

function number_to_string(f_val,f_digits) {

    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            /*if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }*/
        }
        c_val /= 10;
    }
    if(display_title)
    	puts_oled(120, 54, OLED_FONT_SMALL, i - 1, OLED_WHITE); // display current # slot
    else if(ProfileMenu)
        puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,i - 1,OLED_WHITE);
    else
    	puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),28,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); // adjustable value centered in X - medium size
}  

function draw_base_menu() {
	rect_oled(0, 0, 128, 49, OLED_BLACK, OLED_WHITE); // white contour 
	line_oled(1, 16, 126, 16, 1, OLED_WHITE); // draw line 1
	rect_oled(2, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); // rectangle left (line 1)
	rect_oled(115, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); // rectangle right (line 1)
}

function draw_modMenu() {

	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	line_oled(1, 32, 126, 32, 1, OLED_WHITE); 
	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
	rect_oled(2, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
}

function draw_profileMenu() {
	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	line_oled(1, 32, 126, 32, 1, OLED_WHITE); 
	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
	rect_oled(2, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE);	    
}

function draw_modEdit() {
// Clears line 2 and 3
	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	
	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE , OLED_WHITE); // rectangle left (line 2)
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE, OLED_WHITE); // rectangle right (line 2)
	rect_oled(2, 33, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE , OLED_WHITE); // rectangle left (line 3)
	rect_oled(115, 33, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 4, OLED_WHITE, OLED_WHITE); // rectangle right (line 3)
	rect_oled(14, 18, OLED_FONT_MEDIUM_WIDTH + 1, OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE , OLED_WHITE); // rectangle left (line 2 + 3)
	rect_oled(102, 18, OLED_FONT_MEDIUM_WIDTH + 1, OLED_FONT_MEDIUM_HEIGHT + 11, OLED_WHITE, OLED_WHITE); // rectangle right (line 2 + 3)
	line_oled(16, 31, 23, 31, 2, OLED_BLACK); // left -
	putc_oled(1, 43); // +
	puts_oled(103, 24, OLED_FONT_MEDIUM, 1, OLED_BLACK); // right + 	    

}

function draw_hold_to_edit() { 
	rect_oled(28, 19, OLED_FONT_SMALL_WIDTH + 1 , OLED_FONT_SMALL_HEIGHT , OLED_WHITE , col_rec_left); 
	rect_oled(91, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT  , OLED_WHITE, col_rec_right); 
	if(get_controller() == PIO_PS4)
	{	
		putc_oled(1, CROSS);
		puts_oled(92, LINE_2_Y - 1, OLED_FONT_SMALL, 1, col_char_left);
		putc_oled(1, CROSS);
		puts_oled(28, LINE_2_Y - 1, OLED_FONT_SMALL, 1, col_char_right);
	}
	else
	{
		putc_oled(1, A);
		puts_oled(92, LINE_2_Y , OLED_FONT_SMALL, 1, col_char_left);
		putc_oled(1, A);
		puts_oled(29, LINE_2_Y , OLED_FONT_SMALL, 1, col_char_right);
	}
	rect_oled(27, 18, OLED_FONT_SMALL_WIDTH + 3 , OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK , OLED_WHITE); // small rectangle left (line 2)
	rect_oled(90, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 2 , OLED_BLACK, OLED_WHITE); // small rectangle right (line 2)
}	


define UP = 131; define DOWN = 132; define LEFT = 133; define RIGHT = 134; define TRIANGLE = 130; define Y = 89; define CROSS = 127; define A = 65;
define LEFT_X = 4; define RIGHT_X = 117;
define LINE_1_Y = 4; define LINE_2_Y = 20;  define LINE_3_Y = 36; define LINE_4_Y = 53;  
int btn_left;
int btn_right;

function draw_chars_line1() {
// Define button
	if(ModMenu)
	{		
		if(get_controller() == PIO_PS4)
		{
			btn_left = TRIANGLE;
			btn_right = TRIANGLE;
		}
		else
		{
			btn_left = Y;
			btn_right = Y;
		}
	}
	if(ProfileMenu)
	{		
		if(get_controller() == PIO_PS4)
		{
			btn_left = TRIANGLE;
			btn_right = TRIANGLE;
		}
		else
		{
			btn_left = Y;
			btn_right = Y;
		}
	}

	if(ModEdit)
		{
			btn_left = LEFT;
			btn_right = RIGHT;
		}

// Clears/fill rectangle
	rect_oled(3, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); // rectangle left (line 1)
	rect_oled(116, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); // rectangle right (line 1)
// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_left); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_right); 

}


function draw_chars_line2() {
// Define button
	if (ModMenu || ProfileMenu || ModEdit)
	{
		btn_left = LEFT;
		btn_right = RIGHT;
	}
	
	if(ModEdit)
	{
	// Clears/fill rectangle
		rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 2)
		rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); //  rectangle right (line 2)
	}
	if(ProfileMenu)
	{
	// Clears/fill rectangle
		rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 2)
		rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); //  rectangle right (line 2)
	}
	else
	{
	// Clears/fill rectangle
		rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); //  rectangle left (line 2)
		rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); //  rectangle right (line 2)
	}
/// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_left); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_right); 
	
}


function draw_chars_line3() { 
// Define button
	if (ModMenu)
	{
		btn_left = DOWN;
		btn_right = UP;
	}
	
	if(ModEdit)
	{
		btn_left = DOWN;
		btn_right = UP;
		
	// Clears/fill rectangle
		rect_oled(3, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 3)
		rect_oled(116, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); // rectangle right (line 3)	
	}
	
	if(ProfileMenu)
	{
		btn_left = DOWN;
		btn_right = UP;
		
	// Clears/fill rectangle
		rect_oled(3, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 3)
		rect_oled(116, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); // rectangle right (line 3)	
	}
	else
	{
	// Clears/fill rectangle
		rect_oled(3, 35, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); // rectangle left (line 3)
		rect_oled(116, 35, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); // rectangle right (line 3)
	}
// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_left); 
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_right);  
	
}

int col_char_left; 
int col_char_right;
int col_rec_left = 1;
int col_rec_right = 1;

function button_animation() {
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_TRIANGLE))
	{
		col_char_left = 1;
		col_char_right = 1;
		col_rec_left = 0;
		col_rec_right = 0;
		
		if(ModMenu)
			draw_chars_line1();
	}
	else if(event_release(PS4_TRIANGLE))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(ModMenu)
			draw_chars_line1();
	}	
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	if(event_press(PS4_LEFT))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ProfileMenu)
		
			
			draw_chars_line2();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
	
	}
	
	
	if(event_release(PS4_LEFT))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ProfileMenu)
		
			draw_chars_line2();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
	
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_RIGHT))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;	
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ProfileMenu)
		
			draw_chars_line2();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
	
	}
	if(event_release(PS4_RIGHT))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ProfileMenu)
		
			draw_chars_line2();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line2();
			else
				draw_chars_line1();
		}
	
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_UP))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ProfileMenu)
		
			draw_chars_line3();
		
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
		
		
	}
	if(event_release(PS4_UP))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ProfileMenu)
		
			draw_chars_line3();
		
		
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_DOWN))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ProfileMenu)
		
			draw_chars_line3();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
	
	}
	if(event_release(PS4_DOWN))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ProfileMenu)
		
			draw_chars_line3();
		
	
		if(ModEdit)
		{
			if(get_val(PS4_CROSS))
				draw_chars_line3();
		}
	
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	if(event_press(PS4_CROSS))
	{
		col_char_left = 1;
		col_char_right = 1;
		col_rec_left = 0;
		col_rec_right = 0;
		
		if(ModEdit)	
			draw_hold_to_edit();
	}
	if(event_release(PS4_CROSS))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModEdit)	
			draw_hold_to_edit();
	}
		
			
			
	}


function get_false (f_val) {
	
	if (get_val(f_val)){
	
	return FALSE;
	}
	return TRUE;
	}



int SSMU1 = 1,SSMU2 = 8,SSMU3 = 15,SSMU4 = 22,SSMU5 = 29,SSMU6 = 36,SSMU7 = 43;

function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}



int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8,RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;

function find_digits(f_num) {

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

function center_y(f_size) {

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
int RT,MSC,SD1,DGT,DGR,TP1,TP2; int bit_000110000 = 0;

function press_hold(f_btn) { 

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function led(f_color) {

   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

function name(){
	cls_oled(0);
	combo_run(RACE);
	combo_run(RN);
if (Y_1 > 64)  Y_1 =   0;
if (Y_2 > 64)  Y_2 =   0;
if (Y_3 > 64)  Y_3 =   0;
if (Y_4 > 64)  Y_4 =   0;
if (Y_5 > 64)  Y_5 =   0;
if (Y_6 > 64)  Y_6 =   0;
if (Y_7 > 64)  Y_7 =   0;
if (Y_8 > 64)  Y_8 =   0;
if (SD1 > 105) SD1 = -50;
if (TP1 > 45)  TP1 =   0;
if (TP2 < 0)   TP2 =  55;
	putc_oled(1,RN1);
	puts_oled(X_1,Y_1,0,1,1);
	putc_oled(1,RN2);
	puts_oled(X_2,Y_2,0,1,1);
	putc_oled(1,RN3);
	puts_oled(X_3,Y_3,0,1,1);
	putc_oled(1,RN4);
	puts_oled(X_4,Y_4,0,1,1);
	putc_oled(1,RN5);
	puts_oled(X_5,Y_5,0,1,1);
	putc_oled(1,RN6);
	puts_oled(X_6,Y_6,0,1,1);
	putc_oled(1,RN7);
	puts_oled(X_7,Y_7,0,1,1);
	putc_oled(1,RN8);
	puts_oled(X_8,Y_8,0,1,1);
	putc_oled(1,SSA1);
	puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
	putc_oled(1,SSA3);
	puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
	putc_oled(1,SSA4);
	puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
	putc_oled(1,SSA5);
	puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
	putc_oled(1,SSA6);
	puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
}

function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);

}  

function draw_logo() {
	print(center_x(sizeof(TITLE1) - 1,OLED_FONT_MEDIUM_WIDTH),1,OLED_FONT_MEDIUM,OLED_WHITE,TITLE1[0] );
	print(center_x(sizeof(TITLE2) - 1,OLED_FONT_MEDIUM_WIDTH),22,OLED_FONT_MEDIUM,OLED_WHITE,TITLE2[0]);
}




int SmartSens;

function SmartSens(f_val, f_axis) { 

    SmartSens = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 

    return clamp(get_val(f_axis) + SmartSens, -100, 100);
}


combo RapidFire {

    set_val(PS4_R2,100);
    wait(OT);
    set_val(PS4_R2,0);
    wait(OFT);
}

function quicktoggle(f_idx, f_val)
{
    if(modName_idx == f_idx)
    {
		f_val = cycle(f_val + 1, 0, 1);
	}
	return f_val;
}


combo FARM {
    set_val(PS4_R2, 100);
    wait(080);
    set_val(PS4_R2, 0);
    wait(230);
}

combo afk {
  set_val(PS4_RX, 100);
  wait(200);
  set_val(PS4_RX, -100);
  wait(200);
  set_val(PS4_CIRCLE, 100);
  wait(100);
}


function Load() {
	reset_spvar();
	THA [0]   = read_spvar(  0,  1, 0 );     	                
	TIA [0]   = read_spvar(  0,  1, 0 );                       
	TFA [0]   = read_spvar(  0,  1, 0 );
	THA [1]   = read_spvar(  0,  1, 0 );    			         
	TIA [1]   = read_spvar(  0,  1, 0 ); 				              
	TFA [1]   = read_spvar(  0,  1, 0 );
	THA [2]   = read_spvar(  0,  1, 0 );                     
	TIA [2]   = read_spvar(  0,  1, 0 );												           
	TFA [2]	  = read_spvar(  0,  1, 0 );
	THA [3]   = read_spvar(  0,  1, 0 );                     
	TIA [3]   = read_spvar(  0,  1, 0 );                                                            
    TFA [3]	  = read_spvar(  0,  1, 0 );
    THA [4]   = read_spvar(  0,  1, 0 );                     
	TIA [4]   = read_spvar(  0,  1, 0 );                                              
	TFA [4]	  = read_spvar(  0,  1, 0 );
	THA [5]   = read_spvar(  0,  1, 0 );                     
	TIA [5]   = read_spvar(  0,  1, 0 );													              
	TFA [5]	  = read_spvar(  0,  1, 0 );
	THA [6]   = read_spvar(  0,  1, 0 );                     
	TIA [6]   = read_spvar(  0,  1, 0 );
	TFA [6]	  = read_spvar(  0,  1, 0 );
	THA [7]   = read_spvar(  0,  1, 0 );                     
	TIA [7]   = read_spvar(  0,  1, 0 );
	TFA [7]	  = read_spvar(  0,  1, 0 );
	THA [8]   = read_spvar(  0,  1, 0 );                     
	TIA [8]   = read_spvar(  0,  1, 0 );
	TFA [8]	  = read_spvar(  0,  1, 0 );
	THA [9]   = read_spvar(  0,  1, 0 );                     
	TIA [9]   = read_spvar(  0,  1, 0 );
	TFA [9]	  = read_spvar(  0,  1, 0 );
	THA [10]  = read_spvar(  0,  1, 0 );                     
	TIA [10]  = read_spvar(  0,  1, 0 );
	TFA [10]  = read_spvar(  0,  1, 0 );
	THA [11]  = read_spvar(  0,  1, 0 );                     
	TIA [11]  = read_spvar(  0,  1, 0 );
	TFA [11]  = read_spvar(  0,  1, 0 );
	THA [12]  = read_spvar(  0,  1, 0 );                     
	TIA [12]  = read_spvar(  0,  1, 0 );
	TFA [12]  = read_spvar(  0,  1, 0 );
	THA [13]  = read_spvar(  0,  1, 0 );                     
	TIA [13]  = read_spvar(  0,  1, 0 );
	TFA [13]  = read_spvar(  0,  1, 0 );
	TAFK[0]   = read_spvar(  0,  1, 0 );
	TJH	[14]  = read_spvar(  0,  1, 0 );
	TDZ [15]  = read_spvar(  0,  1, 0 );
	switch_ref = read_spvar( 0,  2, 0 );
	HAH [0]   = read_spvar(-99, 99, 0 );
	HAV [0]   = read_spvar(-99, 99, 0 );
	HFAH[0]   = read_spvar(-99, 99, 0 );
	HFAV[0]   = read_spvar(-99, 99, 0 );
	IAH [0]   = read_spvar(-99, 99, 0 );
	IAV [0]   = read_spvar(-99, 99, 0 );
	FAH [0]   = read_spvar(-99, 99, 0 );
	FAV [0]   = read_spvar(-99, 99, 0 );
	HAH [1]   = read_spvar(-99, 99, 0 );
	HAV [1]   = read_spvar(-99, 99, 0 );
	HFAH[1]   = read_spvar(-99, 99, 0 );
	HFAV[1]   = read_spvar(-99, 99, 0 );
	IAH [1]   = read_spvar(-99, 99, 0 );
	IAV [1]   = read_spvar(-99, 99, 0 );
	FAH [1]   = read_spvar(-99, 99, 0 );
	FAV [1]   = read_spvar(-99, 99, 0 );
	HAH [2]   = read_spvar(-99, 99, 0 );
	HAV [2]   = read_spvar(-99, 99, 0 );
	HFAH[2]   = read_spvar(-99, 99, 0 );
	HFAV[2]   = read_spvar(-99, 99, 0 );
	IAH [2]   = read_spvar(-99, 99, 0 );
	IAV [2]   = read_spvar(-99, 99, 0 );
	FAH [2]   = read_spvar(-99, 99, 0 );
	FAV [2]   = read_spvar(-99, 99, 0 );
	HAH [3]   = read_spvar(-99, 99, 0 );
	HAV [3]   = read_spvar(-99, 99, 0 );
	HFAH[3]   = read_spvar(-99, 99, 0 );
	HFAV[3]   = read_spvar(-99, 99, 0 );
	IAH [3]   = read_spvar(-99, 99, 0 );
	IAV [3]   = read_spvar(-99, 99, 0 );
	FAH [3]   = read_spvar(-99, 99, 0 );
	FAV [3]   = read_spvar(-99, 99, 0 );
	HAH [4]   = read_spvar(-99, 99, 0 );
	HAV [4]   = read_spvar(-99, 99, 0 );
	HFAH[4]   = read_spvar(-99, 99, 0 );
	HFAV[4]   = read_spvar(-99, 99, 0 );
	IAH [4]   = read_spvar(-99, 99, 0 );
	IAV [4]   = read_spvar(-99, 99, 0 );
	FAH [4]   = read_spvar(-99, 99, 0 );
	FAV [4]   = read_spvar(-99, 99, 0 );
	HAH [5]   = read_spvar(-99, 99, 0 );
	HAV [5]   = read_spvar(-99, 99, 0 );
	HFAH[5]   = read_spvar(-99, 99, 0 );
	HFAV[5]   = read_spvar(-99, 99, 0 );
	IAH [5]   = read_spvar(-99, 99, 0 );
	IAV [5]   = read_spvar(-99, 99, 0 );
	FAH [5]   = read_spvar(-99, 99, 0 );
	FAV [5]   = read_spvar(-99, 99, 0 );
	HAH [6]   = read_spvar(-99, 99, 0 );
	HAV [6]   = read_spvar(-99, 99, 0 );
	HFAH[6]   = read_spvar(-99, 99, 0 );
	HFAV[6]   = read_spvar(-99, 99, 0 );
	IAH [6]   = read_spvar(-99, 99, 0 );
	IAV [6]   = read_spvar(-99, 99, 0 );
	FAH [6]   = read_spvar(-99, 99, 0 );
	FAV [6]   = read_spvar(-99, 99, 0 );
	HAH [7]   = read_spvar(-99, 99, 0 );
	HAV [7]   = read_spvar(-99, 99, 0 );
	HFAH[7]   = read_spvar(-99, 99, 0 );
	HFAV[7]   = read_spvar(-99, 99, 0 );
	IAH [7]   = read_spvar(-99, 99, 0 );
	IAV [7]   = read_spvar(-99, 99, 0 );
	FAH [7]   = read_spvar(-99, 99, 0 );
	FAV [7]   = read_spvar(-99, 99, 0 );
	HAH [8]   = read_spvar(-99, 99, 0 );
	HAV [8]   = read_spvar(-99, 99, 0 );
	HFAH[8]   = read_spvar(-99, 99, 0 );
	HFAV[8]   = read_spvar(-99, 99, 0 );
	IAH [8]   = read_spvar(-99, 99, 0 );
	IAV [8]   = read_spvar(-99, 99, 0 );
	FAH [8]   = read_spvar(-99, 99, 0 );
	FAV [8]   = read_spvar(-99, 99, 0 );
	HAH [9]   = read_spvar(-99, 99, 0 );
	HAV [9]   = read_spvar(-99, 99, 0 );
	HFAH[9]   = read_spvar(-99, 99, 0 );
	HFAV[9]   = read_spvar(-99, 99, 0 );
	IAH [9]   = read_spvar(-99, 99, 0 );
	IAV [9]   = read_spvar(-99, 99, 0 );
	FAH [9]   = read_spvar(-99, 99, 0 );
	FAV [9]   = read_spvar(-99, 99, 0 );
	HAH [10]  = read_spvar(-99, 99, 0 );
	HAV [10]  = read_spvar(-99, 99, 0 );
	HFAH[10]  = read_spvar(-99, 99, 0 );
	HFAV[10]  = read_spvar(-99, 99, 0 );	
	IAH [10]  = read_spvar(-99, 99, 0 );
	IAV [10]  = read_spvar(-99, 99, 0 );
	FAH [10]  = read_spvar(-99, 99, 0 );
	FAV [10]  = read_spvar(-99, 99, 0 );
	IAH [11]  = read_spvar(-99, 99, 0 );
	IAV [11]  = read_spvar(-99, 99, 0 );
	HAH [12]  = read_spvar(-99, 99, 0 );
	HAV [12]  = read_spvar(-99, 99, 0 );
	HFAH[12]  = read_spvar(-99, 99, 0 );
	HFAV[12]  = read_spvar(-99, 99, 0 );
	IAH [12]  = read_spvar(-99, 99, 0 );
	IAV [12]  = read_spvar(-99, 99, 0 );
	FAH [12]  = read_spvar(-99, 99, 0 );
	FAV [12]  = read_spvar(-99, 99, 0 );
	IAH [13]  = read_spvar(-99, 99, 0 );
	IAV [13]  = read_spvar(-99, 99, 0 );
	DZLV [15] = read_spvar(-99, 99, 0 );
	
	DZRV [15] = read_spvar(-99, 99, 0 );
	
	
	toggle_profile [0]  = read_spvar(0, 100, 0 );
	toggle_profile [1]  = read_spvar(0, 100, 0 );
	toggle_profile [2]  = read_spvar(0, 100, 0 );
	toggle2_profile[0] = read_spvar(0, 100, 0 );
	toggle2_profile[1] = read_spvar(0, 100, 0 );
	toggle2_profile[2] = read_spvar(0, 100, 0 );
	
	
	    
	
	
	
	
}

function Save(){ 
reset_spvar();
save_spvar(THA [0] ,   0,  1, TRUE );     	                
save_spvar(TIA [0] ,   0,  1, TRUE );                       
save_spvar(TFA [0] ,   0,  1, TRUE );
save_spvar(THA [1] ,   0,  1, TRUE );    			         
save_spvar(TIA [1] ,   0,  1, TRUE ); 				              
save_spvar(TFA [1] ,   0,  1, TRUE );
save_spvar(THA [2] ,   0,  1, TRUE );                     
save_spvar(TIA [2] ,   0,  1, TRUE );												           
save_spvar(TFA [2] ,   0,  1, TRUE );
save_spvar(THA [3] ,   0,  1, TRUE );                     
save_spvar(TIA [3] ,   0,  1, TRUE );                                                            
save_spvar(TFA [3] ,   0,  1, TRUE );
save_spvar(THA [4] ,   0,  1, TRUE );                     
save_spvar(TIA [4] ,   0,  1, TRUE );                                              
save_spvar(TFA [4] ,   0,  1, TRUE );
save_spvar(THA [5] ,   0,  1, TRUE );                     
save_spvar(TIA [5] ,   0,  1, TRUE );													              
save_spvar(TFA [5] ,   0,  1, TRUE );
save_spvar(THA [6] ,   0,  1, TRUE );                     
save_spvar(TIA [6] ,   0,  1, TRUE );
save_spvar(TFA [6] ,   0,  1, TRUE );
save_spvar(THA [7] ,   0,  1, TRUE );                     
save_spvar(TIA [7] ,   0,  1, TRUE );
save_spvar(TFA [7] ,   0,  1, TRUE );
save_spvar(THA [8] ,   0,  1, TRUE );                     
save_spvar(TIA [8] ,   0,  1, TRUE );
save_spvar(TFA [8] ,   0,  1, TRUE );
save_spvar(THA [9] ,   0,  1, TRUE );                     
save_spvar(TIA [9] ,   0,  1, TRUE );
save_spvar(TFA [9] ,   0,  1, TRUE );
save_spvar(THA [10],   0,  1, TRUE );                     
save_spvar(TIA [10],   0,  1, TRUE );
save_spvar(TFA [10],   0,  1, TRUE );
save_spvar(THA [11],   0,  1, TRUE );                     
save_spvar(TIA [11],   0,  1, TRUE );
save_spvar(TFA [11],   0,  1, TRUE );
save_spvar(THA [12],   0,  1, TRUE );                     
save_spvar(TIA [12],   0,  1, TRUE );
save_spvar(TFA [12],   0,  1, TRUE );
save_spvar(THA [13],   0,  1, TRUE );                     
save_spvar(TIA [13],   0,  1, TRUE );
save_spvar(TFA [13],   0,  1, TRUE );
save_spvar(TAFK[0] ,   0,  1, TRUE );
save_spvar(TJH[14] ,   0,  1, TRUE );
save_spvar(TDZ[15] ,   0,  1, TRUE );
save_spvar( switch_ref,0,  2, TRUE );
save_spvar(HAH[0]  , -99, 99, TRUE );     	                
save_spvar(HAV[0]  , -99, 99, TRUE );                       
save_spvar(HFAH[0] , -99, 99, TRUE );     	                
save_spvar(HFAV[0] , -99, 99, TRUE );
save_spvar(IAH [0] , -99, 99, TRUE );
save_spvar(IAV [0] , -99, 99, TRUE );    			         
save_spvar(FAH [0] , -99, 99, TRUE ); 				              
save_spvar(FAV [0] , -99, 99, TRUE );
save_spvar(HAH [1] , -99, 99, TRUE );     	                
save_spvar(HAV [1] , -99, 99, TRUE );                       
save_spvar(HFAH[1] , -99, 99, TRUE );     	                
save_spvar(HFAV[1] , -99, 99, TRUE );
save_spvar(IAH [1] , -99, 99, TRUE );
save_spvar(IAV [1] , -99, 99, TRUE );    			         
save_spvar(FAH [1] , -99, 99, TRUE ); 				              
save_spvar(FAV [1] , -99, 99, TRUE );
save_spvar(HAH [2] , -99, 99, TRUE );    	                
save_spvar(HAV [2] , -99, 99, TRUE );                       
save_spvar(HFAH[2] , -99, 99, TRUE );     	                
save_spvar(HFAV[2] , -99, 99, TRUE );
save_spvar(IAH [2] , -99, 99, TRUE );
save_spvar(IAV [2] , -99, 99, TRUE );    			         
save_spvar(FAH [2] , -99, 99, TRUE ); 				              
save_spvar(FAV [2] , -99, 99, TRUE );
save_spvar(HAH [3] , -99, 99, TRUE );    	                
save_spvar(HAV [3] , -99, 99, TRUE );                       
save_spvar(HFAH[3] , -99, 99, TRUE );     	                
save_spvar(HFAV[3] , -99, 99, TRUE );
save_spvar(IAH [3] , -99, 99, TRUE );
save_spvar(IAV [3] , -99, 99, TRUE );    			         
save_spvar(FAH [3] , -99, 99, TRUE ); 				              
save_spvar(FAV [3] , -99, 99, TRUE );
save_spvar(HAH [4] , -99, 99, TRUE );     	                
save_spvar(HAV [4] , -99, 99, TRUE );                       
save_spvar(HFAH[4] , -99, 99, TRUE );     	                
save_spvar(HFAV[4] , -99, 99, TRUE );
save_spvar(IAH [4] , -99, 99, TRUE );
save_spvar(IAV [4] , -99, 99, TRUE );    			         
save_spvar(FAH [4] , -99, 99, TRUE ); 				              
save_spvar(FAV [4] , -99, 99, TRUE );
save_spvar(HAH [5] , -99, 99, TRUE );    	                
save_spvar(HAV [5] , -99, 99, TRUE );                      
save_spvar(HFAH[5] , -99, 99, TRUE );     	                
save_spvar(HFAV[5] , -99, 99, TRUE );
save_spvar(IAH [5] , -99, 99, TRUE );
save_spvar(IAV [5] , -99, 99, TRUE );   			         
save_spvar(FAH [5] , -99, 99, TRUE ); 				              
save_spvar(FAV [5] , -99, 99, TRUE );
save_spvar(HAH [6] , -99, 99, TRUE );     	                
save_spvar(HAV [6] , -99, 99, TRUE );                      
save_spvar(HFAH[6] , -99, 99, TRUE );     	                
save_spvar(HFAV[6] , -99, 99, TRUE );
save_spvar(IAH [6] , -99, 99, TRUE );
save_spvar(IAV [6] , -99, 99, TRUE );    			         
save_spvar(FAH [6] , -99, 99, TRUE ); 				              
save_spvar(FAV [6] , -99, 99, TRUE );
save_spvar(HAH [7] , -99, 99, TRUE );     	                
save_spvar(HAV [7] , -99, 99, TRUE );                       
save_spvar(HFAH[7] , -99, 99, TRUE );     	                
save_spvar(HFAV[7] , -99, 99, TRUE );
save_spvar(IAH [7] , -99, 99, TRUE );
save_spvar(IAV [7] , -99, 99, TRUE );    			         
save_spvar(FAH [7] , -99, 99, TRUE ); 				              
save_spvar(FAV [7] , -99, 99, TRUE );
save_spvar(HAH [8] , -99, 99, TRUE );     	                
save_spvar(HAV [8] , -99, 99, TRUE );                       
save_spvar(HFAH[8] , -99, 99, TRUE );     	                
save_spvar(HFAV[8] , -99, 99, TRUE );
save_spvar(IAH [8] , -99, 99, TRUE );
save_spvar(IAV [8] , -99, 99, TRUE );    			         
save_spvar(FAH [8] , -99, 99, TRUE );				              
save_spvar(FAV [8] , -99, 99, TRUE );
save_spvar(HAH [9] , -99, 99, TRUE );     	                
save_spvar(HAV [9] , -99, 99, TRUE );                       
save_spvar(HFAH[9] , -99, 99, TRUE );     	                
save_spvar(HFAV[9] , -99, 99, TRUE );
save_spvar(IAH [9] , -99, 99, TRUE );
save_spvar(IAV [9] , -99, 99, TRUE );   			         
save_spvar(FAH [9] , -99, 99, TRUE ); 				              
save_spvar(FAV [9] , -99, 99, TRUE );
save_spvar(HAH [10], -99, 99, TRUE );     	                
save_spvar(HAV [10], -99, 99, TRUE );                       
save_spvar(HFAH[10], -99, 99, TRUE );     	                
save_spvar(HFAV[10], -99, 99, TRUE );
save_spvar(IAH [10], -99, 99, TRUE );
save_spvar(IAV [10], -99, 99, TRUE );    			         
save_spvar(FAH [10], -99, 99, TRUE );				              
save_spvar(FAV [10], -99, 99, TRUE );
save_spvar(IAH [11], -99, 99, TRUE );
save_spvar(IAV [11], -99, 99, TRUE );    			         
save_spvar(HAH [12], -99, 99, TRUE );     	                
save_spvar(HAV [12], -99, 99, TRUE );                       
save_spvar(HFAH[12], -99, 99, TRUE );     	                
save_spvar(HFAV[12], -99, 99, TRUE );
save_spvar(IAH [12], -99, 99, TRUE );
save_spvar(IAV [12], -99, 99, TRUE );    			         
save_spvar(FAH [12], -99, 99, TRUE ); 				              
save_spvar(FAV [12], -99, 99, TRUE );
save_spvar(IAH [13], -99, 99, TRUE );
save_spvar(IAV [13], -99, 99, TRUE );    			         
save_spvar(DZLV[15], -99, 99, TRUE );     	                

save_spvar(DZRV[15], -99, 99, TRUE );                       
     	                

save_spvar(toggle_profile [0],0, 100, TRUE );
save_spvar(toggle_profile [1],0, 100, TRUE );
save_spvar(toggle_profile [2],0, 100, TRUE );
save_spvar(toggle2_profile[0],0, 100, TRUE );
save_spvar(toggle2_profile[1],0, 100, TRUE );
save_spvar(toggle2_profile[2],0, 100, TRUE );






}

// Use these for 32-bit SPVARs
define MAX_BITS = 32;
define MAX_FW_BITS = 32;

function reset_spvar() {
	spvar_current_slot = SPVAR_1; // Change this to say where it's safe to start storing data
	spvar_current_bit = 0;
	spvar_current_value = 0;
}

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 
define FULL_BITMASK = -1;

function get_bit_count(val) {
/*	if (val == (1 << (MAX_FW_BITS - 1))) {
		return MAX_FW_BITS;
	}*/
	if (val < 0) {
		return get_bit_count(abs(val + 1));
	}
	spvar_tmp = 0;
	do {
		spvar_tmp++;
		val = val >> 1; // Shift the value down 1 bit
	} while (val);
	return spvar_tmp;
}
function get_bit_count2(min, max) {	
	spvar_tmp = max(get_bit_count(min), get_bit_count(max));
	if (is_signed2(min, max)) {
		spvar_tmp++;
	}
	return spvar_tmp;
}
function is_signed2(min, max) { return min < 0 || max < 0; }

function make_full_mask(bits) {	
	if (bits == MAX_FW_BITS) {
		return FULL_BITMASK;
	}
	return (FULL_BITMASK & (~(1 << (MAX_FW_BITS - 1)))) >> (MAX_FW_BITS - bits - 1);
}
function make_sign(bits) { return 1 << clamp(bits - 1, 0, MAX_FW_BITS - 1); }
function make_sign_mask(bits) { return ~make_sign(bits); }

function pack_u(val, bits) { return val & make_full_mask(bits); }
function pack_i(val, bits) {
	if (val < 0) {
		return (abs(val) & make_sign_mask(bits)) | make_sign(bits);	
	}
	return val & make_sign_mask(bits);
}
function unpack_i(val, bits) {
	if (val & make_sign(bits)) {
		return 0 - (val & make_sign_mask(bits));
	}
	return val & make_sign_mask(bits);
}

int spvar_current_bit;
int spvar_current_slot;
int spvar_current_value;
int spvar_tmp;
int spvar_bits;

function read_spvar_slot(slot) { return get_pvar(slot, 0-(FULL_BITMASK & (1 << (MAX_BITS - 1))), 0-((0-(FULL_BITMASK & (1 << (MAX_BITS - 1)))) + 1), 0); }

function save_spvar(val, min, max, save) {
	spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value	
	
	if (is_signed2(min, max)) {
		val = pack_i(val, spvar_bits); // Pack as signed value	
	}
	val = pack_u(val, spvar_bits); // Pack as unsigned value - because this is more inclusive than signed, we don't need an else here - just always do it (micro optimization)
	
	if (spvar_bits > MAX_BITS - spvar_current_bit) { // If we cannot fit the value here, we need to store what we can and move to the next slot
		spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add what we can to the current value
		set_pvar(spvar_current_slot, spvar_current_value); // Force save, we're moving to the next value		
		spvar_current_slot++; // Move to the next slot
		spvar_bits -= (MAX_BITS - spvar_current_bit); // Update the required bits according to our needs for the next slot
		val = val >> (MAX_BITS - spvar_current_bit); // Move the remaining bits to their new location
		spvar_current_bit = 0; // We've hit the end, so we start over
		spvar_current_value = 0; // Reset our value so we start clean
	}
	
	spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add the value to the current position
	spvar_current_bit += spvar_bits; // Increment the bit position
	if (spvar_current_bit >= MAX_BITS) {
		spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
		set_pvar(spvar_current_slot, spvar_current_value);
		spvar_current_slot++; // move to the next slot
		if (!spvar_current_bit) {
			spvar_current_value = 0; // Reset our value so we start clean
		}
	}
	if (save) {
		set_pvar(spvar_current_slot, spvar_current_value);
	}	
}

																																																																																																																																																																																																																																																																																																																																																																																																						const uint8 load_bits[] = {80,69,68,82,79,83}; const uint8 save_bits[] = {78,73,71,72,84,77,65,82,69};  int bit_00110001  = 1; int bit_00110010  = 2;int bit_00110110  = 6;int bit_00111001  = 9; int bit_00110010_00110010 = 22; define _1872 = OLED_FONT_MEDIUM_WIDTH; define _18322 = OLED_FONT_MEDIUM;define _18726 =  OLED_WIDTH;

function load_save() {
    for(i=bit_000110000;i<bit_00110110;i++)
    {
        putc_oled(i + bit_00110001, load_bits[i]);
    }
    puts_oled(bit_location(bit_00110110, _1872), bit_00110001, _18322, bit_00110110, bit_00110001);
    for(i=bit_000110000:i<bit_00111001;i++)
    {
        putc_oled(i + bit_00110001, save_bits[i]);
    }
    puts_oled(bit_location(bit_00111001, _1872), bit_00110010_00110010, _18322, bit_00111001, bit_00110001);
}


function bit_location(f_bits,f_bitsize) {

    return (_18726 / bit_00110010) - ((f_bits * f_bitsize) / bit_00110010);
} 






function read_spvar(min, max, default) {
	spvar_current_value = read_spvar_slot(spvar_current_slot); // Load the value so we always have it where we need it to be
	spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value
	spvar_current_value = pack_u(spvar_current_value >> spvar_current_bit, spvar_bits); // Shift our bits into position
	
	if (spvar_bits > MAX_BITS - spvar_current_bit) { // if the value doesn't fit in this variable, we need to fetch the next value aswell and merge them accordingly
		spvar_current_slot++; // Move to the next slot
		spvar_tmp = read_spvar_slot(spvar_current_slot); // load the new slot into a temporary variable
		spvar_tmp = pack_u(spvar_tmp, spvar_bits - (MAX_BITS - spvar_current_bit)); // Get the bits we need
		spvar_tmp = spvar_tmp << (MAX_BITS - spvar_current_bit); // Shift the bits into their correct position
		spvar_current_value = pack_u(spvar_current_value, (spvar_bits - (MAX_BITS - spvar_current_bit)));
		spvar_current_value = spvar_current_value | spvar_tmp; // put all bits together again
		spvar_current_bit = spvar_current_bit - MAX_BITS; // Reset the bit position so we get the correct position next
	}	
	spvar_current_bit += spvar_bits; // move to the next variable position
	if (spvar_current_bit >= MAX_BITS) {
		spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
		spvar_current_slot++;
	}	
	spvar_current_value = pack_u(spvar_current_value, spvar_bits); // Extract all bits included for this value
	if (is_signed2(min, max)) { // Check if we have a sign bit
		spvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore signed value
	}
	if (spvar_current_value < min || spvar_current_value > max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead
		return default;
	}
return spvar_current_value;



}



function display_values() {

	
	display_edit( HAX  , HAH[profile_idx]  );    
	display_edit( HAY  , HAV[profile_idx]  );
	display_edit( HFAX  , HFAH[profile_idx]  );    
	display_edit( HFAY  , HFAV[profile_idx]  );
	display_edit( IAX  , IAH[profile_idx]  );     
	display_edit( IAY  , IAV[profile_idx]  );
	display_edit( FAX  , FAH[profile_idx]  );        
	display_edit( FAY  , FAV[profile_idx]  );        			
	display_edit( DZL  , DZLV[profile_idx]  );        
	display_edit( DZR  , DZRV[profile_idx]  );
}

function Default_Setting(){

HAH  [0] = _0HAH   ;       	                
HAV  [0] = _0HAV   ;                         
HFAH [0] = _0HFAH  ;      	                
HFAV [0] = _0HFAV  ; 
IAH  [0] = _0IAH   ; 
IAV  [0] = _0IAV   ;     			         
FAH  [0] = _0FAH   ;  				              
FAV  [0] = _0FAV   ; 
HAH  [1] = _1HAH   ;      	                
HAV  [1] = _1HAV   ;                        
HFAH [1] = _1HFAH  ;      	                
HFAV [1] = _1HFAV  ; 
IAH  [1] = _1IAH   ; 
IAV  [1] = _1IAV   ;     			         
FAH  [1] = _1FAH   ;  				              
FAV  [1] = _1FAV   ;
HAH  [2] = _2HAH   ;     	                
HAV  [2] = _2HAV   ;                        
HFAH [2] = _2HFAH  ;      	                
HFAV [2] = _2HFAV  ; 
IAH  [2] = _2IAH   ; 
IAV  [2] = _2IAV   ;     			         
FAH  [2] = _2FAH   ;  				              
FAV  [2] = _2FAV   ;
HAH  [3] = _3HAH   ;     	                
HAV  [3] = _3HAV   ;                        
HFAH [3] = _3HFAH  ;      	                
HFAV [3] = _3HFAV  ; 
IAH  [3] = _3IAH   ; 
IAV  [3] = _3IAV   ;     			         
FAH  [3] = _3FAH   ;  				              
FAV  [3] = _3FAV   ;
HAH  [4] = _4HAH   ;      	                
HAV  [4] = _4HAV   ;                        
HFAH [4] = _4HFAH  ;      	                
HFAV [4] = _4HFAV  ; 
IAH  [4] = _4IAH   ; 
IAV  [4] = _4IAV   ;     			         
FAH  [4] = _4FAH   ;  				              
FAV  [4] = _4FAV   ; 
HAH  [5] = _5HAH   ;     	                
HAV  [5] = _5HAV   ;                       
HFAH [5] = _5HFAH  ;      	                
HFAV [5] = _5HFAV  ; 
IAH  [5] = _5IAH   ; 
IAV  [5] = _5IAV   ;    			         
FAH  [5] = _5FAH   ;  				              
FAV  [5] = _6FAV   ; 
HAH  [6] = _6HAH   ;      	                
HAV  [6] = _6HAV   ;                       
HFAH [6] = _6HFAH  ;      	                
HFAV [6] = _6HFAV  ; 
IAH  [6] = _6IAH   ; 
IAV  [6] = _6IAV   ;     			         
FAH  [6] = _6FAH   ;  				              
FAV  [6] = _6FAV   ; 
HAH  [7] = _7HAH   ;      	                
HAV  [7] = _7HAV   ;                        
HFAH [7] = _7HFAH  ;      	                
HFAV [7] = _7HFAV  ; 
IAH  [7] = _7IAH   ; 
IAV  [7] = _7IAV   ;     			         
FAH  [7] = _7FAH   ;  				              
FAV  [7] = _7FAV   ; 
HAH  [8] = _8HAH   ;      	                
HAV  [8] = _8HAV   ;                        
HFAH [8] = _8HFAH  ;      	                
HFAV [8] = _8HFAV  ; 
IAH  [8] = _8IAH   ; 
IAV  [8] = _8IAV   ;     			         
FAH  [8] = _8FAH   ; 				              
FAV  [8] = _8FAV   ; 
HAH  [9] = _9HAH   ;      	                
HAV  [9] = _9HAV   ;                        
HFAH [9] = _9HFAH  ;      	                
HFAV [9] = _9HFAV  ; 
IAH  [9] = _9IAH   ; 
IAV  [9] = _9IAV   ;    			         
FAH  [9] = _9FAH   ;  				              
FAV  [9] = _9FAV   ; 
HAH [10] = _10HAH  ;     	                
HAV [10] = _10HAV  ;                       
HFAH[10] = _10HFAH ;     	                
HFAV[10] = _10HFAV ;
IAH [10] = _10IAH  ;
IAV [10] = _10IAV  ;    			         
FAH [10] = _10FAH  ;				              
FAV [10] = _10FAV  ;
IAH [11] = _11IAH  ;
IAV [11] = _11IAV  ;
HAH [12] = _12HAH  ;     	                
HAV [12] = _12HAV  ;                       
HFAH[12] = _12HFAH ;     	                
HFAV[12] = _12HFAV ;
IAH [12] = _12IAH  ;
IAV [12] = _12IAV  ;    			         
FAH [12] = _12FAH  ; 				              
FAV [12] = _12FAV  ;
IAH [13] = _13IAH  ;
IAV [13] = _13IAV  ;
DZLV[15] = _15DZLV ;     	                
DZRV[15] = _15DZRV ; 

}

 ����������������