/*

Complete OLED Menu for Cronus ZEN
version: 1.0
Author: noozbar


				 ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄                                        
				▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌                                       
				▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀                                        
				▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌                                                 
				▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄▄▄                                        
				▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌                                       
				▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌▐░█▀▀▀▀█░█▀▀ ▐░▌       ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌                                       
				▐░▌          ▐░▌          ▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌       ▐░▌          ▐░▌                                       
				▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄█░▌ ▄▄▄▄▄▄▄▄▄█░▌                                       
				▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░▌ ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌                                       
				 ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀   ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀                                        
                                                                                                                     
 ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄         ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌░▌     ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌       ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌▐░▌    ▐░▌     ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     ▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          
▐░▌ ▐░▌   ▐░▌     ▐░▌     ▐░▌ ▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌  ▐░▌  ▐░▌     ▐░▌     ▐░▌▐░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌   ▐░▌ ▐░▌     ▐░▌     ▐░▌ ▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌     ▐░▌     ▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌    ▐░▌▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌     ▐░▌  ▐░▌          
▐░▌     ▐░▐░▌ ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ 
▐░▌      ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░▌     ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░░░░░░░░░░░▌
 ▀        ▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀       ▀       ▀         ▀  ▀         ▀  ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀ 
                                                                                                                     
****************************************************************************************************************************

												╔═╗┬─┐┌─┐┌┬┐┬┌┬┐
												║  ├┬┘├┤  │││ │ 
												╚═╝┴└─└─┘─┴┘┴ ┴ 


This script was a collaboration between JT0810 and myself Jbaze122.
Thanks To Myshotsfullwhite for the jackhammer and afk script.
I just want ot give credit to LegitCloudzzz for helping out with the simplified code and helping me out when I got stuck. 
Also to Noozbar's for have this awesome menu template on W&K that we were able to adapt to the script.

*****************************************************************************************************************************

									╦ ╦┌─┐┌┬┐┌─┐┌┬┐┌─┐  ╔╗╔┌─┐┌┬┐┌─┐┌─┐
									║ ║├─┘ ││├─┤ │ ├┤   ║║║│ │ │ ├┤ └─┐
									╚═╝┴  ─┴┘┴ ┴ ┴ └─┘  ╝╚╝└─┘ ┴ └─┘└─┘
3.1 Update
	-Added a menu screen so you can set the weapons you want on the profile. 
	-Changed the weapon quick toggle. It is no longer L2/LT + Triangle /Y. This was to avoid from accidental weapon change when when turning on the flash light or holo.
	-Added Additional Weapons. 
	-Please re-read all the instructions since there is an additional menu and new quick toggles.

3.2 Update
	-Added 4X Anti Recoil to All Guns that can use it.(If a gun cannot and the toggle is on It pulls Iron Sight Anti Recoil)
	-New Weapons Added
	-Some quality of life scripts were added such as Jack Hammer Tap Script and AFK mode. (NOW YOU CAN HOLD RT WHILE USING THE JACKHAMMER AND IT WILL TAP AUTOMATICALLY)
	-Quality of life can only be used by quick toggles. Please read below for more info.
	- Attachment quick toggle hold time on the dpad was increased so it wont interfere when dropping stuff out of your inventory.

******************************************************************************************************************************



								╦┌┐┌  ╔═╗┌─┐┌┬┐┌─┐  ╔═╗┌─┐┌┬┐┌┬┐┬┌┐┌┌─┐┌─┐
								║│││  ║ ╦├─┤│││├┤   ╚═╗├┤  │  │ │││││ ┬└─┐
								╩┘└┘  ╚═╝┴ ┴┴ ┴└─┘  ╚═╝└─┘ ┴  ┴ ┴┘└┘└─┘└─┘

	-DO NOT RUN IN BUILD AND RUN ! HAVE IT SAVED TO A SLOT OR THE TOGGLES FOR THE ATTACHMENTS WILL NOT SAVE
	-If you are on Beta Firmware and Studios. Please make sure Legacy 16 Bit Compiler is Checked when you load the script.
	-Reset your in game values and match the ones that are listed below.
	
	1) If your playing the game in a different language please change the language to english since the setings menu is different in certain cases.
	2) Match all the setings below
		
		70 X
		70 Y
		40 ADS
		40 1X Zoom
		40 4x
		100 Digital Boost
		
		
		1 Dead Zone Left  (YES SET YOUR DEAD ZONE TO ONE)
		1 Dead Zone Right (YES SET YOUR DEAD ZONE TO ONE)
	
		
	
	3) Yes your deadzone needs to be 1 IN GAME. 
	4) The deadzone listed bellow is going to act as your dead zone now. I have  the default to 7 below. If you  have stick drift increase it.
	5) The lower the deadzone can be below , will mean for smoother Aiming.
	6) You can find out if you have stick drift if you go to the map on rust and see if your cursor moves. If it does I would increase the number below by till it stops.	
	
	7) After you have everything set up and you read all the instruction and you go to fire and your gun goes down. Decrease your Y Sensitivity till it stops.                                                                                                                                                                  */
	
	define Deadzone = 7;

/********************************************************************************************************************************
	
	
							╔╦╗┌─┐┌┐┌┬ ┬  ┬┌┐┌┌─┐┌┬┐┬─┐┬ ┬┌─┐┌┬┐┬┌─┐┌┐┌┌─┐
							║║║├┤ ││││ │  ││││└─┐ │ ├┬┘│ ││   │ ││ ││││└─┐
							╩ ╩└─┘┘└┘└─┘  ┴┘└┘└─┘ ┴ ┴└─└─┘└─┘ ┴ ┴└─┘┘└┘└─┘
	
	DO NOT RUN IN BUILD AND RUN HAVE IT SAVED TO A SLOT OR THE TOGGLES FOR THE ATTACHMENTS WILL NOT SAVE
	
	Before we start the instructions please only have ONE Attachment Set ON at a time Per Gun. If you have two set to ON it will mess up the recoil.
	
	Heres an an example. You wouldnt be able to shoot a gun with a holo sight and iron sight at the same time.
	
	
	
	
	
	Hold L2 / LT + OPTIONS / - This Opens the menu
	
		while in the  Menu, 
			- tap TRIANGLE / Y to switch weapon profiles
			- tap LEFT or RIGHT to navigate the attachments for that weapon. 
			- tap UP or DOWN to toggle ON/OFF  The attachment anti recoil  for that weapon.
	
	We have updated the weapon quick toggles. Please see the section below on how to access the menu and assign weapons to each profile.
	
	If you want to use a weapon that you do not have assigned to a quick toggle. First access the menu. Than hit Y to get to the weapon
	that you want. Use Left and Right on the Dpad to choose your attachment. Use Up on the Dpad to toggle that attachment Anti Recoil On. 
	Than Tap PS / XBOX to save and exit OLED Menu
	
	
	If you did this correctly the gun name will be at the bottom of the oled.
	
	-Some people are getting confused with the menu. Here is an example if I wanted to turn on the iron sight recoil  for the AK and MP5.
	
	1) Open the menu. It will say ak at the top ,holo in the middle, off at the bottom. 
	2) I would hit left on my Dpad and the middle line will say Iron Sight.
	3) I would hit up on the Dpad to Turn it on. Bottom line will say ON 
	4) I would hit Y to switch to MP5 Now. 
	5) Repeat Steps 2 and 3. 
	6) After that hit the XBOX or playstation button to Save.
	
	If you open the menu again dont be alarmed. THE AK will say AK topline , Holo  middle line and OFF bottom line.
		This Means the AK  anti recoil for the holo is OFF
	
	If you hit left on your D pad it will show AK Top line , Iron Sights Middle line, ON bottom line.
		This means your anti recoil Iron SIghts is turned on.
	
	You can only have ONE ATTACHMENT with the BOTTOM LINE TURNED ON PER GUN. You cannot have HOLO Turned ON and IRON SIGHTS Turned ON on the same weapon.  
	
	
	
****************************************************************************************************************************************************************	

							╔═╗ ┬ ┬┬┌─┐┬┌─  ╔╦╗┌─┐┌─┐┌─┐┬  ┌─┐┌─┐
							║═╬╗│ │││  ├┴┐   ║ │ ││ ┬│ ┬│  ├┤ └─┐
							╚═╝╚└─┘┴└─┘┴ ┴   ╩ └─┘└─┘└─┘┴─┘└─┘└─┘
	
The weapon quick toggle has completely changed. You have 3 weapon profiles you can toggle any weapon to.

Weapon Quick toggle
	-When you first load your script your weapon quick toggle will not work.
	-You have to assign a weapon to it. 
	-The first thing you want to do is go to the menu L2/LT + OPRIONS. Than press Cross / A. This will open the profile menu.
	-Triangle  / Y will cycle the profile  in the top line. 1,2,3. Each number is a different profile you can assign one weapon too.
	-Hit Left or Right on the D-Pad to change the weapon. The weapon that is on the middle line for that profile will be used for that profile. 
	-So if you want to use the MP5 hit left on the D-Pad until you see MP5 and leave it.
	-The bottom line lets you choose the attachment. Just hit up or down to choose Iron Sight or Holo and leave it.
	-Once your done with the first profile hit Triangle / Y to move onto the next and repeat the process.
	-Once your done with all 3 just hit the save button. PS/Xbox
	
	-To use the weapon quick toggle now just hold L2/LT and press the right thumb stick in also know as R3.
	-As you click it you will see the gun on the bottom of your zen screen change.
	-Every time you change your profiles and save it. Just use the quick toggle to cycle threw all guns once.
								
								


-ATTACHMENT Quick toggles are as follow. The attachment will say on / off depeneding on the previous state of the toggle.								

1)Hold L2 / LT + Up On the  DPad.  ( This will toggle the Holo attachment per the gun you have on.)

2)Hold L2 / LT + Right On the Dpad. ( This will toggle the Iron attachment per the gun you have on.)

2)Hold L2 / LT + Down On the Dpad. ( This will toggle the 4X attachment per the gun you have on.)


- There is a killswitch for the script which will turn it on and off.
1) Holt L2 / LT + PS / XBOX. This will turn the script off.
2) Double Tap Circle / B to turn the script back on.







Quality Of Life Quick Toggles
*****************************

1) When using the Jack Hammer Tap Script IT WILL TURN OFF YOUR ANTI RECOIL. To turn it back on just toggle off the jack hammer.

1)Hold L1 / LT + Up On the  DPad.     ( This will toggle AFK Mode on and off.)
1)Hold L1 / LT + Right On the  DPad.  ( This will toggle Jack Hammer mode on and off.)


************************************************************************************************************************************************


							╦ ╦┌─┐┌─┐┌─┐┌─┐┌┐┌  ╦  ┬┌─┐┌┬┐
							║║║├┤ ├─┤├─┘│ ││││  ║  │└─┐ │ 
							╚╩╝└─┘┴ ┴┴  └─┘┘└┘  ╩═╝┴└─┘ ┴ 


This is the current weapon list

-We recomend using HOLO and Gloves for all guns since they perform better.
-All weapons work with no attachments on or Tactitacal Gloves but we do recommend them. 
-As we update the script we will be adding more attachments and weapons. 
- THE AK IS A BEAMER WITH A HOLO AND TACTTICAL GLOVES.

1)  AK				Iron Sights ,Holo ,4X
2)  MP5				Iron Sights ,Holo ,4X
3)  Tommy			Iron Sights ,Holo ,4X
4)  LR				Iron Sights ,Holo ,4X
5)  Custom SMG		Iron Sights ,Holo ,4X
6)  M249 Crouching 	Iron Sights ,Holo ,4X
7)  SAR				Iron Sights ,Holo ,4X
8)  Python			Iron Sights ,Holo ,4X
9)  M92				Iron Sights ,Holo ,4X
10) Semi Pistol		Iron Sights ,Holo ,4X
11) Revolver		Iron Sights 
12) M39				Iron Sights ,Holo ,4X
13) Nailgun			Iron Sights 
*************************************************************************************************************************************************


						╔╦╗╔═╗╔╗╔╔╦╗  ╔╦╗╔═╗╦ ╦╔═╗╦ ╦  ╔═╗╔╗╔╦ ╦╔╦╗╦ ╦╦╔╗╔╔═╗  ╔╗ ╔═╗╦  ╦  ╔═╗╦ ╦
						 ║║║ ║║║║ ║    ║ ║ ║║ ║║  ╠═╣  ╠═╣║║║╚╦╝ ║ ╠═╣║║║║║ ╦  ╠╩╗║╣ ║  ║  ║ ║║║║
						═╩╝╚═╝╝╚╝ ╩    ╩ ╚═╝╚═╝╚═╝╩ ╩  ╩ ╩╝╚╝ ╩  ╩ ╩ ╩╩╝╚╝╚═╝  ╚═╝╚═╝╩═╝╩═╝╚═╝╚╩╝


**************************************************************************************************************************************************/

	
	
	
	
	
	const string TITLE1 = "PEDROS"
	const string TITLE2 = "NIGHTMARE"
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE = "SAVED";
	const string ALL = "Every Profiles";
	const string MUTE = "Script OFF";
	const string HOLD = "Dbl-Tap CIRCLE/B";
	const string ACTIVE = "to turn ON"
	
	const string PROFILE[] = {
	"AK", "MP5", "Tommy", "LR-300","Custom SMG","M249 Crouch","SAR","Python","M92","Semi Pistol", "Revolver", "M39","Nailgun" };
	
	const string INFO_MENU_PS[] = {
	"Switch Gun:", "tap TRIANGLE", "Switch Sight:", "tap LEFT or RIGHT", "Sight ON/OFF:", "tap UP or DOWN", 
	"Profile Menu:", "tap CROSS", "Close Gun Menu:", "hold L2 +", "tap OPTION", "Save and exit:", "tap PS"}; 
	
	const string INFO_EDIT_PS[] = {
	"Switch Profile:", "tap TRIANGLE","Switch Gun:", "tap LEFT or RIGHT", "Choose Sight:", "tap UP or DOWN", 
	"Gun Menu:", "tap CIRCLE", "Close Profile Menu:", "hold L2 +", "tap OPTION", "Save and exit:", "tap PS"}; 
	
	const string INFO_MENU_XB[] = {
	"Switch Gun:", "tap Y", "Switch Sight:", "tap LEFT or RIGHT", "Sight ON/OFF:", "tap UP or DOWN", 
	"Profile Menu:", "tap A", "Close Gun Menu:", "hold LT +", "tap MENU", "Save and exit:", "tap XBOX"}; 
	
	const string INFO_EDIT_XB[] = {
	"Switch Profile:", "tap Y" ,"Switch Gun:", "tap LEFT or RIGHT", "Choose Sight:", "tap UP or DOWN", 
	"Gun Menu:", "tap B", "Close Profile Menu:", "hold LT +", "tap MENU", "Save and exit:", "tap XBOX"};
	

	const string MODNAME[] = {
			 "Holo","Iron Sight","4X"}; 
			 
	const string QL[]={
			"AFK","Jack Hammer"};
  
  	define A1           = PS4_L2; 
	define F1     		= PS4_R2; 
	define On 	 		= TRUE;   
	define Off  	    = FALSE;	
	define RapidFire    = On;	
	
	define HA = 0,    IA = 1 , FA = 2 ;
	define AMOUNT_OF_MULTI_TOGGLE = 3;
	
	define AFK =0, JH = 1 ;
	
	
	const uint8 ASCII_NUM[] = 
  	{48,49,50,51,52,53,54,55,56,57};
	
	int i;

data(
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );

	int display_title = TRUE;
	int display_new; 
	int display_new2;
	int display_info;
	int display_black;
	int screensaver;
	int ModMenu;	
	int ModEdit;
	int KillSwitch;
	int count_black; 
	int info_timer;
	int switch_ref;
	int profile_idx; 
	int currentSlot;
	int current_info;
	int logo_on;
	int RTT,WT,VP,HP,TA,STP,AX,AY,OT,OFT;
	int MAX_PROFILE_NUM = 13;
    int toggle_profile[3];
	int toggle2_profile[3];
    int toggle_num; 
    int modName_idx;
	int THA[12];  
	int TIA[12];
	int TFA[12];
	int AR1;
    int TAFK[1];
    int TJH[1];
    int ql_idx;
    
    
const int16 _6575[][] = {
	{0,-11,6,-14,-16,-2,5,10,12,21,19,21,8,15,-1,-3,-6,-10,-14,-12,-16,-21,-19,-16,-14,-1,7,12,14,18,13,0},			
	{0,47,45,42,42,40,38,37,20,22,20,17,20,32,42,35,35,35,40,36,35,15,17,	18,	18,	32,	30,	38,	36,	30,	32,0},			
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,2730,2860,2990,3120,3250,3380,3510,3640,3770,4000,10000}  		
}

const int16 _778053[][] = {
	{0, -2, 2, 0, 5, 14,15,15, 0, -20, -2, -15, 4, 8, 10, 7, 5, 8, 9, 10, 0, -7, -12, -13, -14, -16, -18, -19, -20, 16, 0,0},			
	{0,20, 41, 45, 50,28, 29,32, 28, 23, 20,21,21,22,23,20, 20,20,20,20,5,5,5,5,5,0, 0,0, 0, 0, 0,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,10000}  		
}

const int16 _847977[][] = {
	{ 0,-5,2,-2,7, 4, 6,10,-10,-7,-6,-5, -4, -2, 5,6,8,10,-8,-10,-3,0},			
	{0, 42,43,44,45,30,34,33,30,36,22,24,26,25,25,20,22,24,26,0,0,0},			
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,10000}  		
}


const int16 _7682[][] = {
	{ 0,0,-3,-4,-4,-5,-5,-6,-4,10,12,14,12,13, 7,-7,-13,-13,-13,-13, -7,0,-11,-12, -13, 0, 0,13,17,20,0,0},			
	{0,36,36,40,41,33,34,35,30, 0, 0, 15, 25, 26, 7, 6, 18, 19, 10, 21, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10,0,0},			
	{0,120,240,360,480,600,720,840,960,1080,1200,1320,1440,1560,1680,1800,1920,2040,2160,2280,2400,2520,2640,2760,2880,3000,3120,3240,3360,3480,3600,10000}  		
}

const int16 _678583[][] = {
	{0,-6,-5,3,0,4,5,4,6,3,6,-5,-6,-5,-5,-7,4,5,4,5,5,4,-3,-3,0,0},			
	{0,48,46,46,44,38,39,39,33,40,40,30,32,24,24,25,16,14,20,20,20,20,20,20,20,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,10000}  		
}

const int16 _77505257 [][]={
 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
 {0,40,44,40,42,40,44,40,42,40,42,40,43,40,44,40,42,40,44,41,40,42,40,41,42,40,0},
 {0,1200,1440,1680,2400,3120,3360,3600,3840,4080,4320,5280,5520,5760,6240,7440,7920,8640,9120,9360,9600,10080,10560,11280,12000,13200,15000}
}

const int16 _836582 [][]={
	{0,0,0,0},
	{0,50,51,0},
	{0,2160,2880,4000}
	}

const int16 _80121116104111110  [][] ={
	{0,0,0,0},
	{0,80,82,0},
	{0,450,900,2000}
	}

const int16 _775750  [][] = {
	{0,0,0,0},
	{0,63,57,0},
	{0,600,2250,4000}
	}
	
const int16 _836580   [][]={
	{0,0,0},
	{0,62,0},
	{0,1500,3000}
	}
	
const int16 _8269867976  [][] = {
	{0,0,0,0},
	{0,50,46,0},
	{0,360,1440,3000}
	}
	
const int16 _77515772797679  [][]={
	{0,0,0},
	{0,50,0},
	{0,3800,5000}
	}
	
const int16 _78657376718578 [][]={
	{0,0,0},
	{0,49,0},
	{0,2240,4000}
	}

const int16 _65755288  [][]={
	{0,-33, 17, -29, -33, -4, 10, 21, 25, 44, 39, 44, 16, 31, -2, -6, -12, -21, -29, -25, -33, -44, -39, -33, -29, -2, 14, 25, 29, 37, 26,0},
	{0,83,87,85,81,78,74,72,39,42,39,33,39,62,81,68,68,68,78,70,68,29,33,35,35,62,58,74,70,58,60,0},
	{0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,2730,2860,2990,3120,3250,3380,3510,3640,3770,4000,10000}
	}
	
const int16 _7780535288  [][]={
	{0,-4,4,0,10,28,30,30,-5,-21,-23,-22,4,6,10,9,10,16,18,20,0,-14,-24,-26,-28,-32,-36,-38,-40,32,0,0},
	{0,38,77,85,95,53,55,60,53,43,38,39,39,41,43,38,38,38,38,38,9,9,9,9,9,0,0,0,0,0,0,0},
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,10000}  		
}

const int16 _84797777895288 [][]={
	{0,-10,4,-4,14,8,12,20,-20,-14,-12,-10,-8,-4,10,12,16,20,-16,-20,-6,0},
    {0,79,81,83,85,57,64,62,57,68,41,45,49,47,47,38,41,45,49,0,0,0},
    {0,130,260,390,520,650,780,910,1040,1170,1300,1430,1560,1690,1820,1950,2080,2210,2340,2470,2600,10000}  		
}

const int16 _76825288  [][]={
	{0,0,-6,-8,-8,-10,-0,-12,-8,21,21,24,18,22,9,-17,-21,-21,-21,-21,-14,0,-23,-25,-27,14,16,19,24,24,0,0},
    {0,70,70,78,79,64,66,68,58,0,0,29,48,50,13,11,35,37,19,40,0,0,0,7,9,11,13,15,17,19,0,0},
    {0,120,240,360,480,600,720,840,960,1080,1200,1320,1440,1560,1680,1800,1920,2040,2160,2280,2400,2520,2640,2760,2880,3000,3120,3240,3360,3480,3600,10000}  		
}

const int16 _6785835288 [][] = {
	{0,-12,-10,6,0,8,10,8,12,6,12,-10,-12,-10,-10,-14,8,10,8,10,10,8,-6,-6,0,0},			
	{0,91,87,87,83,72,74,74,62,76,76,57,60,45,45,47,30,26,38,38,38,38,38,38,38,0},			
	{0,100,200,300,400,500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,10000}
}

const int16 _775052575288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,72,79,75,72,74,74,72,77,70,76,72,76,72,77,72,77,70,74,70,77,72,70,74,70,72,74,70,0},
	{0,1200,1320,1440,1680,1920,2400,3120,3360,3600,3840,4080,4320,5280,5520,5760,6240,7440,7920,8640,9120,9360,9600,10080,10560,11280,12000,13200,15000}
}
	
const int16 _8365825288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   	{0,84,83,84,83,85,85,86,85,86,88,87,88,87,88,87,88,0,0},
	{0,180,360,540,720,900,1080,1260,1440,1620,1800,1980,2160,2340,2520,2700,2880,3060,4000}
	}
	
const int16 _8089847279785288 [][]= {
	{0,0,0,0},
	{0,100,90,0},
	{0,450,900,2000}
	}
	
const int16 _7757505288 [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,90,90,91,90,89,91,90,91,90,91,90,91,90,91,90,91,0},
	{0,150,300,450,600,750,900,1050,1200,1350,1500,1650,1800,1950,2100,2250,2400,4000}
	}

const int16 _8365805288  [][]={
	{0,0,0,0,0,0,0,0,0,0,0,0},
	{0,91,90,91,90,91,90,91,90,91,90,0},
	{0,150,300,450,600,750,900,1050,1200,1350,1500,3000}
	}

const int16 _7751575288  [][]={
	{0,0,0},
	{0,86,0},
	{0,3800,5000}
	}
	






init{

	THA [0]  = get_pvar(SPVAR_1,   	 0, 2, 0 );     	                
	TIA [0]  = get_pvar(SPVAR_2,   	 0, 1, 0 );                       
	TFA [0]  = get_pvar(SPVAR_3,   	 0, 1, 0 );
	THA [1]  = get_pvar(SPVAR_4,   	 0, 2, 0 );    			         
	TIA [1]  = get_pvar(SPVAR_5,   	 0, 1, 0 ); 				              
	TFA [1]  = get_pvar(SPVAR_6,   	 0, 1, 0 );
	THA [2]  = get_pvar(SPVAR_7,   	 0, 2, 0 );                     
	TIA [2]  = get_pvar(SPVAR_8,   	 0, 1, 1 );												           
	TFA [2]	 = get_pvar(SPVAR_9,   	 0, 1, 0 );
	THA [3]  = get_pvar(SPVAR_10,  	 0, 2, 0 );                     
	TIA [3]  = get_pvar(SPVAR_11,  	 0, 1, 1 );                                                            
    TFA [3]	 = get_pvar(SPVAR_12,    0, 1, 0 );
    THA [4]  = get_pvar(SPVAR_13,    0, 2, 0 );                     
	TIA [4]  = get_pvar(SPVAR_14,    0, 1, 1 );                                              
	TFA [4]	 = get_pvar(SPVAR_15,    0, 1, 0 );
	THA [5]  = get_pvar(SPVAR_16,    0, 2, 0 );                     
	TIA [5]  = get_pvar(SPVAR_17,    0, 1, 1 );													              
	TFA [5]	 = get_pvar(SPVAR_18,    0, 1, 0 );
	THA [6]  = get_pvar(SPVAR_19,    0, 2, 0 );                     
	TIA [6]  = get_pvar(SPVAR_20,    0, 1, 1 );
	TFA [6]	 = get_pvar(SPVAR_21,    0, 1, 0 );
	THA [7]  = get_pvar(SPVAR_22,    0, 2, 0 );                     
	TIA [7]  = get_pvar(SPVAR_23,    0, 1, 1 );
	TFA [7]	 = get_pvar(SPVAR_24,    0, 1, 0 );
	THA [8]  = get_pvar(SPVAR_25,    0, 2, 0 );                     
	TIA [8]  = get_pvar(SPVAR_26,    0, 1, 1 );
	TFA [8]	 = get_pvar(SPVAR_27,    0, 1, 0 );
	THA [9]  = get_pvar(SPVAR_28,    0, 2, 0 );                     
	TIA [9]  = get_pvar(SPVAR_29,    0, 1, 1 );
	TFA [9]	 = get_pvar(SPVAR_30,    0, 1, 1 );
	THA [10] = get_pvar(SPVAR_31,    0, 2, 0 );                     
	TIA [10] = get_pvar(SPVAR_32,    0, 1, 1 );
	TFA [10] = get_pvar(SPVAR_33,    0, 1, 1 );
	THA [11] = get_pvar(SPVAR_34,    0, 2, 0 );                     
	TIA [11] = get_pvar(SPVAR_35,    0, 1, 1 );
	TFA [11] = get_pvar(SPVAR_36,    0, 1, 1 );
	THA [12] = get_pvar(SPVAR_37,    0, 2, 0 );                     
	TIA [12] = get_pvar(SPVAR_38,    0, 1, 1 );
	TFA [12] = get_pvar(SPVAR_39,    0, 1, 1 );
	TAFK[0]  = get_pvar(SPVAR_47,    0, 1, 1 );
	TJH	[0]  = get_pvar(SPVAR_48,    0, 1, 1 );
	
	
	
	
	
	for(i = 0; i < 3; i++)
	{
	  	toggle_profile[i]  = get_pvar(SPVAR_40 + i, 0, 100, 0 );
	    toggle2_profile[i]  = get_pvar(SPVAR_43 + i, 0, 100, 0 );
	}
	
	switch_ref = get_pvar(SPVAR_46, 0, 2, 0 );
	    
	currentSlot = get_slot(); 
}													        


main { 

	set_val(TRACE_1, profile_idx);
	set_val(TRACE_2, modName_idx);
	set_val(TRACE_3, toggle2_profile);
	set_val(TRACE_4,ql_idx);
	set_val(TRACE_5,WT);
	set_val(TRACE_6,STP); 

	 
    if(get_controller() != PIO_PS4) 
    {
    	
        if(get_console() == PIO_PS4)
        { 
        	if(get_ival(PS4_SHARE))
        	{
        		if(get_ival(PS4_R3)) 
        		{
					set_val(PS4_SHARE,100);
                	set_val(PS4_TOUCH,0);
                	set_val(PS4_R3,0);
        		}
        		else 
        		{
        			set_val(PS4_TOUCH, 100);
        			set_val(PS4_SHARE, 0);
        		}
        	}
        }
	}

	if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= Deadzone) {
    set_val(PS4_LX,0);
    set_val(PS4_LY,0);
  }

  if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= Deadzone) {
    set_val(PS4_RX,0);
    set_val(PS4_RY,0);
  }




 
	if(!ModMenu && !ModEdit)
	{
	
		if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || (get_ival(PS4_L2) && event_press(PS4_PS)) )
		{			
			KillSwitch = !KillSwitch;
			
			if(KillSwitch) 
				combo_run(RUMBLE_OFF);	
				
			else
			{
				combo_run(RUMBLE_ON);
				display_title = TRUE;	
			}
		}
		
	
		if(KillSwitch) 
		{
    		screensaver= FALSE;
			count_black = 0;
			logo_on = FALSE;
	
			if(event_press(PS4_CIRCLE) && get_brtime(PS4_CIRCLE) < 200) 
			{
				KillSwitch = FALSE;
				combo_run(RUMBLE_ON);
				display_title = TRUE; 
			}
			combo_run(KILLSWITCH);
		}
		else 
			combo_stop(KILLSWITCH);
			
	
		if(get_ival(PS4_L2))
		{
			if(get_controller() != PIO_PS4) 
				set_val(PS4_TOUCH, 0);
			else
				set_val(PS4_SHARE, 0);
		}
	}

	
	if(!KillSwitch)
	{
	
		if(get_ival(PS4_L2))
		{	
			if(event_release(PS4_OPTIONS))
			{
				cls_oled(OLED_BLACK);
    			logo_on = FALSE;
    			
				if(ModEdit)
				{
					ModEdit = FALSE;
					display_title = TRUE;   
				}
				else 
					ModMenu = !ModMenu;
				
				if(!ModMenu)
				{
					combo_run(RUMBLE_OFF); 
					display_title = TRUE;  
				}
				if(ModMenu)
				{
					current_info = 0;		
					combo_run(RUMBLE_ON);	
					draw_base_menu();		
					draw_modMenu();		
					draw_chars_line1();		
					draw_chars_line2(); 
					draw_chars_line3();		
					display_new = TRUE;
					display_info = TRUE;
				}
			}
			set_val(PS4_OPTIONS, 0);
		} 

		if(ModMenu) 
		{
			button_animation(); 
				if(event_release(PS4_CROSS))
				{
					current_info = 0;		
					ModEdit = TRUE;
					ModMenu = FALSE;
					draw_modEdit();			
					draw_chars_line1();		
					draw_chars_line2();		
					
					draw_chars_line3();	
					display_new = TRUE;
					display_info = TRUE;
				}		
		} 
	
		if(ModEdit) 
		{
			button_animation(); 
				
			{	
			if(event_press(PS4_CIRCLE))
				{
					current_info = 0;	
					ModMenu = TRUE;
					ModEdit = FALSE;
					draw_modMenu();		
					draw_chars_line1();	
					draw_chars_line2();	
					draw_chars_line3();
					display_new = TRUE;
					display_info = TRUE;
				}					
			
				if(event_press(PS4_TRIANGLE))
				{
				toggle_num = cycle(toggle_num + 1, 0, 2); 
				display_new = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
				toggle_profile[toggle_num] = cycle(toggle_profile[toggle_num] - 1, 0, entry_count(PROFILE_TXT)); 
				display_new = TRUE; 
				}
				if(event_press(PS4_RIGHT))
				{
				toggle_profile[toggle_num] = cycle(toggle_profile[toggle_num] + 1, 0, entry_count(PROFILE_TXT)); 
				display_new = TRUE; 
				}
			
				if(event_press(PS4_UP))
				{
				toggle2_profile[toggle_num] = cycle(toggle2_profile[toggle_num] + 1, 0, entry_count(MODNAME_TXT)); 
				display_new = TRUE; 
				}
			
				if(event_press(PS4_DOWN))
				{
				toggle2_profile[toggle_num] = cycle(toggle2_profile[toggle_num] - 1, 0, entry_count(MODNAME_TXT));  
				display_new = TRUE; 
				}
			
					
			
				
			} 
		} 	

	
		if(ModMenu || ModEdit) 
		{
		
    		screensaver = FALSE;
			count_black = 0;			
			info_timer += get_rtime();
			
			if(info_timer > 2000)
			{
				current_info ++;
				display_info = TRUE;
			}
			
		
			if(!get_ival(PS4_L2) && event_release(PS4_PS))
			{
				save();
				ModMenu = FALSE;
	            ModEdit = FALSE;
	            cls_oled(OLED_BLACK);
	            printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	
	            combo_run(SAVE);
	        }
	    	
			block_btn(); 
					
			if(!ModEdit) 
			{
			    if(event_release(PS4_TRIANGLE))
			    {	
				    profile_idx = cycle(profile_idx + 1, 0, entry_count(PROFILE_TXT));
				    display_new = TRUE; 
			    }
			
			    if(event_press(PS4_RIGHT))
			    {
				    modName_idx = cycle(modName_idx + 1, 0, entry_count(MODNAME_TXT)); 
				    display_new = TRUE; 
			    }
			
			    if(event_press(PS4_LEFT))
			    {
				    modName_idx = cycle(modName_idx - 1, 0, entry_count(MODNAME_TXT));  
				    display_new = TRUE; 
			    }
			    
			   
			THA[profile_idx]     = toggle( HA    , THA[profile_idx]     );
			TIA[profile_idx]     = toggle( IA    , TIA[profile_idx]     );
			TFA[profile_idx]     = toggle( FA    , TFA[profile_idx]     );
		    }
		}
				
		if(!ModMenu && !ModEdit)
		{
		
			if(get_val(PS4_L2) && event_press(PS4_R3))
			{
			    for(i = 0; i < MAX_PROFILE_NUM; i++)
			    {
			        THA[i] = 0;
			        TIA[i] = 0;
			        TFA[i] = 0;
			    }
			    switch_ref = cycle(switch_ref + 1, 0, 2);
				profile_idx = toggle_profile[switch_ref];
				modName_idx = toggle2_profile[switch_ref];
				THA[profile_idx]   = quicktoggle( HA    , THA[profile_idx]     );
			    TIA[profile_idx]   = quicktoggle( IA    , TIA[profile_idx]     );
			    TFA[profile_idx]   = quicktoggle( FA    , TFA[profile_idx]     );

				display_title = TRUE;
		   	}
		    	
			if(get_lval(PS4_L2))
				set_val(PS4_R3, 0);

			THA[profile_idx]  = speed_toggle ( PS4_L2, PS4_UP    , 900 , THA[profile_idx] , HA  );
			TIA[profile_idx]  = speed_toggle ( PS4_L2, PS4_RIGHT , 900 , TIA[profile_idx] , IA  );
			TFA[profile_idx]  = speed_toggle ( PS4_L2, PS4_DOWN  , 900 , TFA[profile_idx] , FA  );
			TAFK[0]  		  = speed_toggle2( PS4_L1, PS4_UP    , 500 , TAFK[0] , AFK  );
		    TJH[0]            = speed_toggle2( PS4_L1 ,PS4_RIGHT , 500 , TJH[0] , JH  );
			
			
		AR1 = TRUE
		
	if (TJH == TRUE)
		{
			AR1 = !AR1;
		if (get_val(PS4_R2))
			{	
				combo_run(FARM);
			}
		}
		
	
	if (TAFK == TRUE)
		{	
			combo_run(afk);
		}
	
	
	if (AR1)
		{
		
		if   ((profile_idx == 0) &&(THA[0] == TRUE)) {
	
			AY = _6575 [0][HP];
			AX = _6575 [1][VP];
			WT = _6575 [2][TA];
			
			}
	
	     if  ((profile_idx == 0) &&(TIA[0] == TRUE)) {
			AY = _6575 [0][HP];
			AX = _6575 [1][VP];
			WT = _6575 [2][TA];
			
			}

		if  ((profile_idx == 0) &&(TFA[0] == TRUE)) {
			AY = _65755288  [0][HP];
			AX = _65755288  [1][VP];
			WT = _65755288  [2][TA];
			
			}
	
		 if   ((profile_idx == 1) &&(THA[1] == TRUE)) {
		
			AY = _778053 [0][HP];
			AX = _778053 [1][VP];
			WT = _778053 [2][TA];
			
			}
	
	     if  ((profile_idx == 1) &&(TIA[1] == TRUE)) {
			AY = _778053 [0][HP];
			AX = _778053 [1][VP];
			WT = _778053 [2][TA];
			
			}
	
		 if  ((profile_idx == 1) &&(TFA[1] == TRUE)) {
			AY = _7780535288  [0][HP];
			AX = _7780535288  [1][VP];
			WT = _7780535288  [2][TA];
			
			}
			 
		 if   ((profile_idx == 2) &&(THA[2] == TRUE)) {
		
			AY = _847977 [0][HP];
			AX = _847977 [1][VP];
			WT = _847977 [2][TA];
			
			}
	
	     if  ((profile_idx == 2) &&(TIA[2] == TRUE)) {
			AY = _847977 [0][HP];
			AX = _847977 [1][VP];
			WT = _847977 [2][TA];
			
			}

	     if  ((profile_idx == 2) &&(TFA[2] == TRUE)) {
			AY = _84797777895288  [0][HP];
			AX = _84797777895288  [1][VP];
			WT = _84797777895288  [2][TA];
			
			}

		 if   ((profile_idx == 3) &&(THA[3] == TRUE)) {
		
			AY = _7682 [0][HP];
			AX = _7682 [1][VP];
			WT = _7682 [2][TA];
			
			}
	
	     if  ((profile_idx == 3) &&(TIA[3] == TRUE)) {
			AY = _7682 [0][HP];
			AX = _7682 [1][VP];
			WT = _7682 [2][TA];
			
			}

	     if  ((profile_idx == 3) &&(TFA[3] == TRUE)) {
			AY = _76825288  [0][HP];
			AX = _76825288  [1][VP];
			WT = _76825288  [2][TA];
			
			}

		 if   ((profile_idx == 4) &&(THA[4] == TRUE)) {
		
			AY = _678583 [0][HP];
			AX = _678583 [1][VP];
			WT = _678583 [2][TA];
					
			}
	
	     if  ((profile_idx == 4) &&(TIA[4] == TRUE)) {
			AY = _678583 [0][HP];
			AX = _678583 [1][VP];
			WT = _678583 [2][TA];
		
			}
	
	     if  ((profile_idx == 4) &&(TFA[4] == TRUE)) {
			AY = _6785835288  [0][HP];
			AX = _6785835288  [1][VP];
			WT = _6785835288  [2][TA];
		
			}	
	
		if   ((profile_idx == 5) &&(THA[5] == TRUE)) {
		
			AY = _77505257 [0][HP];
			AX = _77505257 [1][VP];
			WT = _77505257 [2][TA];
					
			}
	
	     if  ((profile_idx == 5) &&(TIA[5] == TRUE)) {
			AY = _77505257 [0][HP];
			AX = _77505257 [1][VP];
			WT = _77505257 [2][TA];
		
			}
			
		if  ((profile_idx == 5) &&(TFA[5] == TRUE)) {
			AY = _775052575288  [0][HP];
			AX = _775052575288  [1][VP];
			WT = _775052575288  [2][TA];
		
			}	
			
		 if   ((profile_idx == 6) &&(THA[6] == TRUE)) {
		
			AY = _836582 [0][HP];
			AX = _836582 [1][VP];
			WT = _836582 [2][TA];
			OT = 90;
			OFT= 90;
			}
	
	     if  ((profile_idx == 6) &&(TIA[6] == TRUE)) {
			AY = _836582 [0][HP];
			AX = _836582 [1][VP];
			WT = _836582 [2][TA];
			OT = 90;
			OFT= 90;
			}
	
		if  ((profile_idx == 6) &&(TFA[6] == TRUE)) {
			AY = _8365825288  [0][HP];
			AX = _8365825288  [1][VP];
			WT = _8365825288  [2][TA];
			OT = 90;
			OFT= 90;
			}
	
		if   ((profile_idx == 7) &&(THA[7] == TRUE)) {
		
			AY = _80121116104111110  [0][HP];
			AX = _80121116104111110  [1][VP];
			WT = _80121116104111110  [2][TA];
			OT = 70;
			OFT= 80;
			}
	
	     if  ((profile_idx == 7) &&(TIA[7] == TRUE)) {
			AY = _80121116104111110  [0][HP];
			AX = _80121116104111110  [1][VP];
			WT = _80121116104111110  [2][TA];
			OT = 70;
			OFT= 80;
			}

	     if  ((profile_idx == 7) &&(TFA[7] == TRUE)) {
			AY = _8089847279785288   [0][HP];
			AX = _8089847279785288   [1][VP];
			WT = _8089847279785288  [2][TA];
			OT = 70;
			OFT= 80;
			}

    	if   ((profile_idx == 8) &&(THA[8] == TRUE)) {
		
			AY = _775750  [0][HP];
			AX = _775750  [1][VP];
			WT = _775750  [2][TA];
			OT = 70;
			OFT= 80;
			}
	
	     if  ((profile_idx == 8) &&(TIA[8] == TRUE)) {
			AY = _775750  [0][HP];
			AX = _775750  [1][VP];
			WT = _775750  [2][TA];
			OT = 70;
			OFT= 80;
			}

	     if  ((profile_idx == 8) &&(TFA[8] == TRUE)) {
			AY = _7757505288   [0][HP];
			AX = _7757505288   [1][VP];
			WT = _7757505288   [2][TA];
			OT = 70;
			OFT= 80;
			}

    if   ((profile_idx == 9) &&(THA[9] == TRUE)) {
		
			AY = _836580   [0][HP];
			AX = _836580   [1][VP];
			WT = _836580   [2][TA];
			OT = 70;
			OFT= 80;
			}
	
	     if  ((profile_idx == 9) &&(TIA[9] == TRUE)) {
			AY = _836580   [0][HP];
			AX = _836580   [1][VP];
			WT = _836580   [2][TA];
			OT = 70;
			OFT= 80;
			}

	     if  ((profile_idx == 9) &&(TFA[9] == TRUE)) {
			AY = _8365805288    [0][HP];
			AX = _8365805288    [1][VP];
			WT = _8365805288    [2][TA];
			OT = 70;
			OFT= 80;
			}

    	if   (profile_idx == 10)  {
		
			AY = _8269867976  [0][HP];
			AX = _8269867976  [1][VP];
			WT = _8269867976  [2][TA];
			OT = 90;
			OFT= 90;
			}
	
	     if   ((profile_idx == 11) &&(THA[11] == TRUE)) {
		
			AY = _77515772797679   [0][HP];
			AX = _77515772797679   [1][VP];
			WT = _77515772797679   [2][TA];
			OT = 40;
			OFT= 150;
			}
	
	     if  ((profile_idx == 11) &&(TIA[11] == TRUE)) {
			AY = _77515772797679   [0][HP];
			AX = _77515772797679   [1][VP];
			WT = _77515772797679   [2][TA];
			OT = 40;
			OFT= 150;
			}

	     if  ((profile_idx == 11) &&(TFA[11] == TRUE)) {
			AY = _7751575288   [0][HP];
			AX = _7751575288   [1][VP];
			WT = _7751575288   [2][TA];
			OT = 40;
			OFT= 150;
			}
    
    if   (profile_idx == 12)  {
		
			AY = _78657376718578   [0][HP];
			AX = _78657376718578   [1][VP];
			WT = _78657376718578   [2][TA];
			OT = 40;
			OFT= 100;
			}
    
    
    if (RapidFire && profile_idx >= 6) {
    
        if (get_ival(A1) && get_ival(F1)) {
        
            combo_run(RapidFire);    
            
        } else {
            
            combo_stop(RapidFire);
        }
    }
	
	
	
	
	
	
   
  if(get_val(F1) && get_val(A1)){
  	RTT += get_rtime();   
	if(RTT >= WT){ 
		VP++;
	    HP++;
	    TA++;
	    STP++;
	}
	
    
	
	
	set_val(PS4_RY, SmartSens(AX, PS4_RY));
    set_val(PS4_RX, SmartSens(AY, PS4_RX));
    
        
    }
    
	if(event_release(F1) || _6575 [2][TA] == _6575 [2][32]){ 
		VP   = 0;
	    HP   = 0;
	    TA   = 0;
	    STP  = 0;
	    RTT  = 0;
	    
	}

	if(get_ival(PS4_L2) > 1){
    	set_val(PS4_L2, 100);
	}
    if(get_ival(PS4_R2) > 1){
    	set_val(PS4_R2, 100);
	}
	
	}
	














	/*— ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤
	|                          SCREEN SAVER BY DoGz                         |
	¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ — ¤ —*/
		    if(display_black)
		    {
		    	count_black += get_rtime();
		    	if(count_black >= 8000)
		    	{
		    		cls_oled(0);
		    		count_black = 0;
		    		screensaver = TRUE;
		    		logo_on = FALSE;
		    		display_black = FALSE;
		    	}
		    }
		    
		    if(screensaver)
		    {
		    	DGT += get_rtime();
				if(DGT >= 100) 
				{
					SD1 += 2;	TP1 += 1;	TP2 -= 1;	DGT  = 0;
				}
				DGR += get_rtime();
				
				if(DGR >= 30) 
				{
					Y_1 += 1;	Y_2 += 2;	Y_3 += 3;	Y_4 += 4;
					Y_5 += 5;	Y_6 += 6;	Y_7 += 7;	Y_8 += 8;
					DGR  = 0;
				}
				
				name();
				MSC += get_rtime();
				
				if(MSC >= 1000) 
				{
					MSC = 0;	
					RT += 1;
				}
				
				if(RT == 30) 
				{
					screensaver = 0;
					RT = 0;
					cls_oled(0);
				}
		    }
		} 
		
		
		if(display_new2) 
        {
            screensaver = FALSE;
            count_black = 0;
            cls_oled(OLED_BLACK);
            printf(center_x(get_string_length(get_string(QL_TXT, ql_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(QL_TXT, ql_idx));
            display_edit_line3_2();
            count_black = 2000;
            display_black = TRUE;
            display_new2 = FALSE;
        }
		
		
		
		
		if(display_new) 
		{
			screensaver = FALSE;
			count_black = 0;
			
			if(ModEdit)  
			{
				display_edit_line1();
				display_edit_line2();
				display_edit_line3();
							
			}
			else if(ModMenu) 
			{
				display_edit_line1();
				display_edit_line2();
				display_edit_line3();
			}
			else 
			{
				cls_oled(OLED_BLACK);
				printf(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));
				display_edit_line3();
				count_black = 2000;					
			}
						
			display_black = TRUE;
	        display_new = FALSE;
	       
	    } 
	
		if(display_info) 
		{
			info_timer = 0;
			rect_oled(1, 50, 126, 13, OLED_WHITE, OLED_BLACK); 
			if(ModMenu)
			{
				current_info = cycle(current_info, 0, entry_count(INFO_MENU_PS_TXT));
				
				if(get_controller() == PIO_PS4)
					printf(center_x(get_string_length(get_string(INFO_MENU_PS_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_MENU_PS_TXT, current_info));
				else
					printf(center_x(get_string_length(get_string(INFO_MENU_XB_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_MENU_XB_TXT, current_info));
			}
			if(ModEdit)
			{
				current_info = cycle(current_info, 0, entry_count(INFO_EDIT_PS_TXT));
				
				if(get_controller() == PIO_PS4)
					printf(center_x(get_string_length(get_string(INFO_EDIT_PS_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_PS_TXT, current_info));
				else
					printf(center_x(get_string_length(get_string(INFO_EDIT_XB_TXT, current_info)), OLED_FONT_SMALL_WIDTH),LINE_4_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(INFO_EDIT_XB_TXT, current_info));
			}
			display_info = FALSE;
		}
	} 


    if(display_title)
    {
    	screensaver= FALSE;
    	count_black = 0;	
    	
    	if(!logo_on)
    	{
    		cls_oled(0);
   			draw_logo();
   		}
   		else
   			rect_oled(0, 45, 128, 31, OLED_WHITE, OLED_BLACK); 
   			
   		number_to_string(currentSlot, find_digits(currentSlot)); 

		display_profile();
		
		logo_on = TRUE;
   		display_black = TRUE;	
    	display_title = FALSE;
    }

	if(KillSwitch)
		led(7);
	
	else
		led(profile_idx);
		
	if(TIA[profile_idx])
		combo_run(BLINK);	
		
} 

combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}

combo RUMBLE_ON {					
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}
	
combo KILLSWITCH {
	cls_oled(OLED_BLACK);
    printf(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8,OLED_FONT_MEDIUM,OLED_WHITE,MUTE[0]);    
    wait(get_rtime());
    wait(250);
    printf(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,HOLD[0]);     
    printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,ACTIVE[0]); 
    wait(get_rtime());
    wait(5000);  
    cls_oled(OLED_BLACK);
    wait(get_rtime());
    wait(5000);  
}

combo SAVE { 
	call(RUMBLE_ON);
	wait(150);
	call(RUMBLE_ON);		
	wait(1000);
	display_title = TRUE;
}

combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}


combo BLINK {
	led(profile_idx);
    wait(150);
    led(7);
    wait(300);
}


function display_edit_line1() {


	rect_oled(13, 1, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	if(ModMenu)
	{				
	
		if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) 
			display_profile ();
		else 
    		printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,OLED_WHITE,ALL[0]);
	}
	
	if(ModEdit) 
	{
	
    	number_to_string(toggle_num + 1, find_digits(toggle_num + 1));
   	}
	
}

function display_edit_line2() {
	
	rect_oled(13, 17, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
		
	if(ModMenu)
	{
		printf(center_x(get_string_length(get_string(MODNAME_TXT, modName_idx)), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, modName_idx));  // small size
	}
	
	if (ModEdit)
	{
		printf(center_x(get_string_length(get_string(PROFILE_TXT, toggle_profile[toggle_num])), OLED_FONT_SMALL_WIDTH),LINE_2_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILE_TXT, toggle_profile[toggle_num]));
	}
	
	
}



function display_edit_line3() {
	
	rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	display_toggle( HA     , THA[profile_idx]    );
	display_toggle( IA     , TIA[profile_idx]    );
	display_toggle( FA     , TFA[profile_idx]    );
	if (ModEdit)
	{
	    printf(center_x(get_string_length(get_string(MODNAME_TXT, toggle2_profile[toggle_num])), OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAME_TXT, toggle2_profile[toggle_num]));
	}
	
}


function display_edit_line3_2() {
	
	rect_oled(13, 33, 102, OLED_FONT_SMALL_HEIGHT + 5, OLED_WHITE , OLED_BLACK);
	
	display_toggle2( AFK    , TAFK[0]    );
	display_toggle2( JH     , TJH[0]    );
	
	
	
}


int profile_y;

function display_profile() {

	if(display_title)
		profile_y = 50; 
	else
		profile_y = 4; 
	
    printf(center_x(get_string_length(get_string(PROFILE_TXT, profile_idx)), OLED_FONT_SMALL_WIDTH),profile_y,OLED_FONT_SMALL,OLED_WHITE,get_string(PROFILE_TXT, profile_idx));
}


function display_edit(f_idx, f_val) { 
	
    if(valName_idx == f_idx)
    		number_to_string(f_val, find_digits(f_val));
}

function display_toggle(f_idx, f_toggle) { 

    if(modName_idx == f_idx)
   	{
    
    	if(f_toggle == 1)
    		printf(center_x(sizeof(ON) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    	else
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,OFF[0]);
   	}
}

function display_toggle2(f_idx, f_toggle) { 

    if(ql_idx == f_idx)
   	{
    
    	if(f_toggle == 1)
    		printf(center_x(sizeof(ON) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    	else
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_SMALL_WIDTH),LINE_3_Y,OLED_FONT_SMALL,OLED_WHITE,OFF[0]);
   	}
}


define SSA1 = 78,SSA2 = 79,SSA3 = 90,SSA4 = 66,SSA5 = 65,SSA6 = 82,SSA7 = 68,SSA8 = 82,SSA9 = 73,SSA10 = 70,SSA11 = 82,SSA13 = 50,SSA14 = 49,SAVER = 5000,SAVER1 = 10;


function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
	// Substract    
	  	if(f_val < f_rng_min) 
	  		f_val = f_rng_min; 
	// Add   
	  	if(f_val > f_rng_max) 
	  		f_val = f_rng_max; 
    		
        display_new = TRUE; 
    }
    return f_val; 
} 

function toggle(f_idx, f_val) { 
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
			f_val = cycle(f_val + 1, 0, 1);
		
		// Rumble	
			if(f_val == 0) 
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
		}
		display_new = TRUE; 
	}

	if(event_press(PS4_DOWN))
	{
		if(modName_idx == f_idx)
		{
			f_val = cycle(f_val - 1, 0, 1);
		
		// Rumble	
			if(f_val == 0) 
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);	
		}
		display_new = TRUE; 
	}
	return f_val;
}

function speed_toggle(f_hold, f_press, f_time, f_val, f_idx) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == f_time) 
		{
			modName_idx = f_idx;
			f_val = !f_val;	
			
			if(f_val == 0)
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
				
			display_new = TRUE; 
		} 
		set_val(f_press, 0)
	}
	return f_val;
}

function speed_toggle2(f_hold, f_press, f_time, f_val, f_idx) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == f_time) 
		{
			ql_idx = f_idx;
			f_val = !f_val;	
			
			if(f_val == 0)
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
				
			display_new2 = TRUE; 
		} 
		set_val(f_press, 0)
	}
	return f_val;
}

define MODNAME_TXT = 0;
define VALNAME_TXT = 1;
define INFO_MENU_PS_TXT = 2;
define INFO_EDIT_PS_TXT = 3;
define INFO_MENU_XB_TXT = 4;
define INFO_EDIT_XB_TXT = 5;
define PROFILE_TXT = 6;
define QL_TXT= 7;

function entry_count(f_array_idx) { // by Swizzy

    i = 0;
    if (f_array_idx == MODNAME_TXT) { while (MODNAME[i] != -1) { i++; } }
    else if (f_array_idx == INFO_MENU_PS_TXT) { while (INFO_MENU_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_EDIT_PS_TXT) { while (INFO_EDIT_PS[i] != -1) { i++; } }
    else if (f_array_idx == INFO_MENU_XB_TXT) { while (INFO_MENU_XB[i] != -1) { i++; } }
    else if (f_array_idx == INFO_EDIT_XB_TXT) { while (INFO_EDIT_XB[i] != -1) { i++; } }
    else if (f_array_idx == PROFILE_TXT) { while (PROFILE[i] != -1) { i++; } }
    else if (f_array_idx == MODNAME_TXT) { while (MODNAME[i] != -1) { i++; } }
    else if (f_array_idx == QL_TXT) { while (QL[i] != -1) { i++; } }
    return i - 1;
}

 

function get_string(f_array_idx, f_idx) { 

	if(f_array_idx == MODNAME_TXT)
		return MODNAME[f_idx];
		
				
	if(f_array_idx == INFO_MENU_PS_TXT)
		return INFO_MENU_PS[f_idx];
		
	if(f_array_idx == INFO_EDIT_PS_TXT)
		return INFO_EDIT_PS[f_idx];
			
	if(f_array_idx == INFO_MENU_XB_TXT)
		return INFO_MENU_XB[f_idx];
		
	if(f_array_idx == INFO_EDIT_XB_TXT)
		return INFO_EDIT_XB[f_idx];
		
	if(f_array_idx == PROFILE_TXT)
		return PROFILE[f_idx];
	
	if(f_array_idx == QL_TXT)
		return QL[f_idx];
	return -1;
}



int stringLength;
function get_string_length(offset) { // by Swizzy

    stringLength = 0;
    while (duint8(offset++)) { stringLength++; }
    return stringLength + 1;
}

int c,c_val;

function number_to_string(f_val,f_digits) {

    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            /*if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }*/
        }
        c_val /= 10;
    }
    if(display_title)
    	puts_oled(120, 54, OLED_FONT_SMALL, i - 1, OLED_WHITE); // display current # slot
    else if(ModEdit)
        puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),4,OLED_FONT_SMALL,i - 1,OLED_WHITE);
    else
    	puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),28,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); // adjustable value centered in X - medium size
}  

function draw_base_menu() {
	rect_oled(0, 0, 128, 49, OLED_BLACK, OLED_WHITE); // white contour 
	line_oled(1, 16, 126, 16, 1, OLED_WHITE); // draw line 1
	
// Filled rectangle white (emplacement for the chars line 1)	
	rect_oled(2, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); // rectangle left (line 1)
	rect_oled(115, 2, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); // rectangle right (line 1)
}

function draw_modMenu() {

	rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	

	line_oled(1, 32, 126, 32, 1, OLED_WHITE); 
	

	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
	rect_oled(2, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
}

function draw_modEdit() {
rect_oled(1, 17, 126, 31, OLED_WHITE, OLED_BLACK);
	

	line_oled(1, 32, 126, 32, 1, OLED_WHITE); 
	

	rect_oled(2, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 18, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE); 
	rect_oled(2, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE , OLED_WHITE); 
	rect_oled(115, 34, OLED_FONT_SMALL_WIDTH + 4, OLED_FONT_SMALL_HEIGHT + 3, OLED_WHITE, OLED_WHITE);	    

}

define UP = 131; define DOWN = 132; define LEFT = 133; define RIGHT = 134; define TRIANGLE = 130; define Y = 89; define CROSS = 127; define A = 65;
define LEFT_X = 4; define RIGHT_X = 117;
define LINE_1_Y = 4; define LINE_2_Y = 20;  define LINE_3_Y = 36; define LINE_4_Y = 53;  
int btn_left;
int btn_right;

function draw_chars_line1() {
// Define button
	if(ModMenu)
	{		
		if(get_controller() == PIO_PS4)
		{
			btn_left = TRIANGLE;
			btn_right = TRIANGLE;
		}
		else
		{
			btn_left = Y;
			btn_right = Y;
		}
	}
	if(ModEdit)
	{		
		if(get_controller() == PIO_PS4)
		{
			btn_left = TRIANGLE;
			btn_right = TRIANGLE;
		}
		else
		{
			btn_left = Y;
			btn_right = Y;
		}
	}

// Clears/fill rectangle
	rect_oled(3, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); // rectangle left (line 1)
	rect_oled(116, 3, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); // rectangle right (line 1)
// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_left); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_1_Y, OLED_FONT_SMALL, 1, col_char_right); 

}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function draw_chars_line2() {
// Define button
	if (ModMenu || ModEdit)
	{
		btn_left = LEFT;
		btn_right = RIGHT;
	}
	if(ModEdit)
	{
	// Clears/fill rectangle
		rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 2)
		rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); //  rectangle right (line 2)
	}
	else
	{
	// Clears/fill rectangle
		rect_oled(3, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); //  rectangle left (line 2)
		rect_oled(116, 19, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); //  rectangle right (line 2)
	}
// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_left); 	
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_2_Y, OLED_FONT_SMALL, 1, col_char_right); 
	
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function draw_chars_line3() { 
// Define button
	if (ModMenu)
	{
		btn_left = DOWN;
		btn_right = UP;
	}
	if(ModEdit)
	{
		btn_left = DOWN;
		btn_right = UP;
		
	// Clears/fill rectangle
		rect_oled(3, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE , col_rec_left); // rectangle left (line 3)
		rect_oled(116, 34, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 2, OLED_WHITE, col_rec_right); // rectangle right (line 3)	
	}
	else
	{
	// Clears/fill rectangle
		rect_oled(3, 35, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE , col_rec_left); // rectangle left (line 3)
		rect_oled(116, 35, OLED_FONT_SMALL_WIDTH + 2, OLED_FONT_SMALL_HEIGHT + 1, OLED_WHITE, col_rec_right); // rectangle right (line 3)
	}
// Display chars	
	putc_oled(1,btn_left); 
	puts_oled(LEFT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_left); 
	putc_oled(1,btn_right); 
	puts_oled(RIGHT_X, LINE_3_Y, OLED_FONT_SMALL, 1, col_char_right);  
	
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 



// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

int col_char_left; 
int col_char_right;
int col_rec_left = 1;
int col_rec_right = 1;

function button_animation() {
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_TRIANGLE))
	{
		col_char_left = 1;
		col_char_right = 1;
		col_rec_left = 0;
		col_rec_right = 0;
		
		if(ModMenu)
			draw_chars_line1();
	}
	else if(event_release(PS4_TRIANGLE))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
			
		if(ModMenu)
			draw_chars_line1();
	}	
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	if(event_press(PS4_LEFT))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ModEdit)
		{
			
			draw_chars_line2();
		}
	}
	if(event_release(PS4_LEFT))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ModEdit)
		{
			draw_chars_line2();
		}
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_RIGHT))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;	
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ModEdit)
		{
			draw_chars_line2();
		}
	}
	if(event_release(PS4_RIGHT))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line2();
			
		if(ModEdit)
		{
			draw_chars_line2();
		}
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_UP))
	{
		col_char_left = 0;
		col_char_right = 1;
		col_rec_left = 1;
		col_rec_right = 0;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ModEdit)
		{
			draw_chars_line3();
		}
	}
	if(event_release(PS4_UP))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ModEdit)
		{
			draw_chars_line3();
		}
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(event_press(PS4_DOWN))
	{
		col_char_left = 1;
		col_char_right = 0;
		col_rec_left = 0;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ModEdit)
		{
			draw_chars_line3();
		}
	}
	if(event_release(PS4_DOWN))//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	{
		col_char_left = 0;
		col_char_right = 0;
		col_rec_left = 1;
		col_rec_right = 1;
		
		if(ModMenu)
			draw_chars_line3();
			
		if(ModEdit)
		{
			draw_chars_line3();
		}
	}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
		
			
			
	}

int SSMU1 = 1,SSMU2 = 8,SSMU3 = 15,SSMU4 = 22,SSMU5 = 29,SSMU6 = 36,SSMU7 = 43;

function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}

int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8,RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;

function find_digits(f_num) {

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

function center_y(f_size) {

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
int RT,MSC,SD1,DGT,DGR,TP1,TP2;

function press_hold(f_btn) { 

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function led(f_color) {

   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

function name(){
	cls_oled(0);
	combo_run(RACE);
	combo_run(RN);
if (Y_1 > 64)  Y_1 =   0;
if (Y_2 > 64)  Y_2 =   0;
if (Y_3 > 64)  Y_3 =   0;
if (Y_4 > 64)  Y_4 =   0;
if (Y_5 > 64)  Y_5 =   0;
if (Y_6 > 64)  Y_6 =   0;
if (Y_7 > 64)  Y_7 =   0;
if (Y_8 > 64)  Y_8 =   0;
if (SD1 > 105) SD1 = -50;
if (TP1 > 45)  TP1 =   0;
if (TP2 < 0)   TP2 =  55;
	putc_oled(1,RN1);
	puts_oled(X_1,Y_1,0,1,1);
	putc_oled(1,RN2);
	puts_oled(X_2,Y_2,0,1,1);
	putc_oled(1,RN3);
	puts_oled(X_3,Y_3,0,1,1);
	putc_oled(1,RN4);
	puts_oled(X_4,Y_4,0,1,1);
	putc_oled(1,RN5);
	puts_oled(X_5,Y_5,0,1,1);
	putc_oled(1,RN6);
	puts_oled(X_6,Y_6,0,1,1);
	putc_oled(1,RN7);
	puts_oled(X_7,Y_7,0,1,1);
	putc_oled(1,RN8);
	puts_oled(X_8,Y_8,0,1,1);
	putc_oled(1,SSA1);
	puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
	putc_oled(1,SSA2);
	puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
	putc_oled(1,SSA3);
	puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
	putc_oled(1,SSA4);
	puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
	putc_oled(1,SSA5);
	puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
	putc_oled(1,SSA6);
	puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
}

function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);

}  

function draw_logo() {
	printf(center_x(sizeof(TITLE1) - 1,OLED_FONT_MEDIUM_WIDTH),1,OLED_FONT_MEDIUM,OLED_WHITE,TITLE1[0]);
	printf(center_x(sizeof(TITLE2) - 1,OLED_FONT_MEDIUM_WIDTH),22,OLED_FONT_MEDIUM,OLED_WHITE,TITLE2[0]);
}

function save() {
	ModMenu = FALSE;
	ModEdit = FALSE;
	cls_oled(OLED_BLACK);
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	combo_run(SAVE);
	
                                     
	set_pvar(SPVAR_1,   THA[0]);         
	set_pvar(SPVAR_2,   TIA[0]);         
	set_pvar(SPVAR_3,   TFA[0]);
	set_pvar(SPVAR_4,   THA[1]);         		
	set_pvar(SPVAR_5,   TIA[1]);				    
	set_pvar(SPVAR_6,   TFA[1]);
	set_pvar(SPVAR_7,   THA[2]);        		 
	set_pvar(SPVAR_8,   TIA[2]);                                                
    set_pvar(SPVAR_9,   TFA[2]);
    set_pvar(SPVAR_10,  THA[3]);        		 
	set_pvar(SPVAR_11,  TIA[3]);                                  
	set_pvar(SPVAR_12,  TFA[3]);
	set_pvar(SPVAR_13,  THA[4]);        		 
	set_pvar(SPVAR_14,  TIA[4]);
	set_pvar(SPVAR_15,  TFA[4]);
	set_pvar(SPVAR_16,  THA[5]);        		 
	set_pvar(SPVAR_17,  TIA[5]);
	set_pvar(SPVAR_18,  TFA[5]);
	set_pvar(SPVAR_19,  THA[6]);        		 
	set_pvar(SPVAR_20,  TIA[6]);
	set_pvar(SPVAR_21,  TFA[6]);
	set_pvar(SPVAR_22,  THA[7]);        		 
	set_pvar(SPVAR_23,  TIA[7]);
	set_pvar(SPVAR_24,  TFA[7]);
	set_pvar(SPVAR_25,  THA[8]);        		 
	set_pvar(SPVAR_26,  TIA[8]);
	set_pvar(SPVAR_27,  TFA[8]);
	set_pvar(SPVAR_28,  THA[9]);        		 
	set_pvar(SPVAR_29,  TIA[9]);
	set_pvar(SPVAR_30,  TFA[9]);
	set_pvar(SPVAR_31, THA[10]);        		 
	set_pvar(SPVAR_32, TIA[10]);
	set_pvar(SPVAR_33, TFA[10]);
	set_pvar(SPVAR_34, THA[11]);        		 
	set_pvar(SPVAR_35, TIA[11]);
	set_pvar(SPVAR_36, TFA[11]);
	set_pvar(SPVAR_37, THA[12]);        		 
	set_pvar(SPVAR_38, TIA[12]);
	set_pvar(SPVAR_39, TFA[12]);
	set_pvar(SPVAR_47, TAFK[0]);
	set_pvar(SPVAR_48, TJH[0]);
	
	set_pvar(SPVAR_40,toggle_profile[0] );
	set_pvar(SPVAR_41,toggle_profile[1] );
	set_pvar(SPVAR_42,toggle_profile[2] );                      
    
    set_pvar(SPVAR_43,toggle2_profile[0] );
	set_pvar(SPVAR_44,toggle2_profile[1] );
	set_pvar(SPVAR_45,toggle2_profile[2] );
	
	set_pvar(SPVAR_46,switch_ref);
	
}


int SmartSens;

function SmartSens(f_val, f_axis) { 

    SmartSens = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 

    return clamp(get_val(f_axis) + SmartSens, -100, 100);
}


combo RapidFire {

    set_val(PS4_R2,100);
    wait(OT);
    set_val(PS4_R2,0);
    wait(OFT);
}

function quicktoggle(f_idx, f_val)
{
    if(modName_idx == f_idx)
    {
		f_val = cycle(f_val + 1, 0, 1);
	}
	return f_val;
}


combo FARM {
    set_val(PS4_R2, 100);
    wait(080);
    set_val(PS4_R2, 0);
    wait(230);
}

combo afk {
  set_val(PS4_RX, 100);
  wait(200);
  set_val(PS4_RX, -100);
  wait(200);
  set_val(PS4_CIRCLE, 100);
  wait(100);
}
