/*
                                                                                                                                                                                                                                   
8 8888888888   8 888888888o     d888888o.                d888888o.   8 8888        8     ,o888888o.         ,o888888o. 8888888 8888888888 8 8888888888   8 888888888o.                  
8 8888         8 8888    `88. .`8888:' `88.            .`8888:' `88. 8 8888        8  . 8888     `88.    . 8888     `88.     8 8888       8 8888         8 8888    `88.          
8 8888         8 8888     `88 8.`8888.   Y8            8.`8888.   Y8 8 8888        8 ,8 8888       `8b  ,8 8888       `8b    8 8888       8 8888         8 8888     `88              
8 8888         8 8888     ,88 `8.`8888.                `8.`8888.     8 8888        8 88 8888        `8b 88 8888        `8b   8 8888       8 8888         8 8888     ,88            
8 888888888888 8 8888.   ,88'  `8.`8888.                `8.`8888.    8 8888        8 88 8888         88 88 8888         88   8 8888       8 888888888888 8 8888.   ,88'             
8 8888         8 888888888P'    `8.`8888.                `8.`8888.   8 8888        8 88 8888         88 88 8888         88   8 8888       8 8888         8 888888888P'              
8 8888         8 8888            `8.`8888.                `8.`8888.  8 8888888888888 88 8888        ,8P 88 8888        ,8P   8 8888       8 8888         8 8888`8b                 
8 8888         8 8888        8b   `8.`8888.           8b   `8.`8888. 8 8888        8 `8 8888       ,8P  `8 8888       ,8P    8 8888       8 8888         8 8888 `8b.                 
8 8888         8 8888        `8b.  ;8.`8888           `8b.  ;8.`8888 8 8888        8  ` 8888     ,88'    ` 8888     ,88'     8 8888       8 8888         8 8888   `8b.             
8 8888         8 8888         `Y8888P ,88P'            `Y8888P ,88P' 8 8888        8     `8888888P'         `8888888P'       8 8888       8 888888888888 8 8888     `88.           


   _____                _           _                    _             _ _ _           _     _            
  / ____|              | |         | |                  | |           | (_) |         | |   | |           
 | |     _ __ ___  __ _| |_ ___  __| |    __ _ _ __   __| |    ___  __| |_| |_ ___  __| |   | |__  _   _  
 | |    | '__/ _ \/ _` | __/ _ \/ _` |   / _` | '_ \ / _` |   / _ \/ _` | | __/ _ \/ _` |   | '_ \| | | | 
 | |____| | |  __/ (_| | ||  __/ (_| |  | (_| | | | | (_| |  |  __/ (_| | | ||  __/ (_| |   | |_) | |_| | 
  \_____|_|  \___|\__,_|\__\___|\__,_|   \__,_|_| |_|\__,_|   \___|\__,_|_|\__\___|\__,_|   |_.__/ \__, | 
   ________   _______  _      ____ _____ _______  __     _________                                  __/ | 
  |  ____\ \ / /  __ \| |    / __ \_   _|__   __| \ \   / /__   __|                                |___/  
  | |__   \ V /| |__) | |   | |  | || |    | |     \ \_/ /   | |                                          
  |  __|   > < |  ___/| |   | |  | || |    | |      \   /    | |                                          
  | |____ / . \| |    | |___| |__| || |_   | |       | |     | |                                          
  |______/_/ \_\_|    |______\____/_____|  |_|       |_|     |_|                                          
                                                                        
                                                                                                             
================================================================================================================================|
//  Special thanks to TAYLORDRIFT ,Batts, noozbar, DoNotAtMe and all community staff.                                           |
//  Credits to noozbar for his basic script : Template script with OLED menu - toggle - editable values - save for 3 profiles   |
//  Credits to Batts for all example script for Cronus ZEN device.                                                              |
================================================================================================================================/*                                              

======================================================================================================================  
|                               TO DEACTIVATE RUMBLE SWITCH OFF IN GAME SETTINGS                                     |
====================================================================================================================== 
|            Enter Mod Menu                                             Hold L2/LT and tap OPTIONS/MENU              |
====================================================================================================================== 
|            scroll between MOD"S                                       Tap UP or DOWN on the D-PAD                  |
======================================================================================================================
|            Toggle ON/OFF: Scroll options                              Tap LEFT for ON == Tap RIGHT for OFF         |
====================================================================================================================== 
|            ENTER in EDIT MENU                                         Tap A/CROSS                                  |
====================================================================================================================== 
|            EXIT MENU                                                  Tap B/CIRCLE                                 |
======================================================================================================================
|            Edit availble Mods                                         Press CROSS/A OR Press CIRCLE/B to Exit Mod  | 
======================================================================================================================
|            Edit Values In available Mods                                   Hold L2/LT & Tap RIGHT to increase + 1  |
===========================================================================  Tap LEFT to decrease  - 1               |
|                                                                            Tap UP   to increase  + 10              |
|                                                                            Tap DOWN to decrease  - 10              |
====================================================================================================================== 
|   To SAVE all mods that have been edited & enabled             Press B/CIRCLE Button == Screen Will diplay "SAVED" |
======================================================================================================================


======================================================================================================================
|                                       PROFILE ANTI RECOIL                                                          |    
======================================================================================================================
| PROFILE 1                                                                       Press L1/LB + UP                   |
======================================================================================================================
| PROFILE 2                                                                       Press L1/LB + RIGHT                |
====================================================================================================================== 
| PROFILE 3                                                                       Press L1/LB + DOWN                 | 
======================================================================================================================
|                                       EDIT VALUES ANTI RECOIL                                                      |    
======================================================================================================================
====================================================================================================================== 
|----------------------------------------ANTI RECOIL VERTICAL--------------------------------------------------------|                                                      
|                                                                                                                    |                                                                                                                     |
|                                   Press RS/R3 + UP to raise the value                                              |                                                                                                                     |
|                                   Press RS/R3 + DOWN to DOWN to lower the value                                    |                                                                                                                     |
|                                                                                                                    | 
======================================================================================================================
====================================================================================================================== 
|----------------------------------------ANTI RECOIL HORIZONTAL------------------------------------------------------|                                                      
|                                                                                                                    |                                                                                                                     |
|                                   Press RS/R3 + LEFT to raise the value                                            |                                                                                                                     |
|                                   Press RS/R3 + RIGHT to DOWN to lower the value                                   |                                                                                                                     |
|                                                                                                                    | 
======================================================================================================================

====================================================================================================================== 
|----------------------------------------------RAPID FIRE------------------------------------------------------------|                                                      
|                                                                                                                    |                                                                                                                     |
|                                   Press LEFT + R2/RT to activate and deactivate                                    |                                                                                                                     |
|                                                                                                                    |                                                                                                                   
======================================================================================================================

*/
//===============================================================
//    BUTTON LAYOUT                                              
//===============================================================
define FIRE_BTN             = PS4_R2;
define ADS_BTN              = PS4_L2;
define SPRINT_BTN           = PS4_L3;
define PRONE_BTN            = PS4_CIRCLE;
define JUMP_BTN             = PS4_CROSS;
define SWITCHWEAPON_BTN     = PS4_TRIANGLE;
define RELOAD_BTN           = PS4_SQUARE;
define MELEE_BTN            = PS4_R3;
define TACTICAL_BTN         = PS4_L1;
define GRANADE_BTN          = PS4_R1;
define UP                   = PS4_UP;
define RIGHT                = PS4_RIGHT;
define DOWN                 = PS4_DOWN;
define LEFT                 = PS4_LEFT;
define RX                   = PS4_RX;
define RY                   = PS4_RY;
define LX                   = PS4_LX;
define LY                   = PS4_LY;
//-------------------------------------------------------------------------------------------
define Blue       =  1;  
define Red        =  2;  
define Green      =  3;  
define Pink       =  4;  
define SkyBlue    =  5;  
define Yellow     =  6;  
define White      =  7;  
define ColorOFF   =  8;  
//--------------------------------------
int RF_hold;
int RF_release;
int sniper_hold;
int drop_shot_hold;
int drop_shot_rest;
int aabuse_hold;
int aabuse_rest;
int auto_jump_val;
int quick_scope_val;
int VRecoil_1 = 20;
int HRecoil_1 = 0;
int VRecoil_2 = 25;
int HRecoil_2 = 0;
int VRecoil_3 = 30;
int HRecoil_3 = 0;
int GEN_SENS;
int ADS_SENS;
int FIRE_SENS;
int ADS_FIRE_SENS;
int GRENADE_SENS;
int polar_aasist_radius;
int polar_aasist_steps;
int StrafeShotTime = 400;
    //const string TITLE = "My Game"; // 18 char max 
    const string TITLE = ""; // 11 char max 
    const string OFF   = "OFF";    
    const string ON    = "ON";   
    const string SCRIPT_ONOFF  = "SCRIPT WAS";   
// Index to find Mod Name string - switchable in game with left/right in ModMenu
    int modName_idx;                                                          
// modName # of the last Mod Name string - Used for cycle modName_idx        
   define MAX_MODS_COUNT = 16;                          
// Mod Name      -   Text to Display
  const string RAPIDFIRE       = "Rapid Fire" ; 
  const string EASYRUN         = "Easy Run" ; 
  const string JUMPSHOT        = "Jump Shot" ; 
  const string SCOPESHOT       = "Scope Shot" ; 
  const string SNIPER          = "Sniper Shot" ; 
  const string HOLDBREATH      = "Hold Breath" ; 
  const string DROPSHOT        = "Drop Shot" ; 
  const string AIMABUSE        = "Aim Abuse" ; 
  const string AUTOJUMP        = "Auto Jump" ; 
  const string QUICKSCOPE      = "Quick Scope" ; 
  const string ANTIRECOIL3Profiles  = "AR 3 Profls" ; 
  const string SENSITIVITY     = "Sensitivity" ; 
  const string POLARAIMASSIST_TD = "Polar AA" ; 
  const string STRAFESHOT      = "Bunny Hop" ; 
  const string BUNNYHOP        = "Fast Melee" ; 
  const string FASTMELEE       = "Hair Trigg" ; 
  const string HAIRTRIGGERS    = "Drop Shot" ; 
//   Toggles 
  int rapidfire_onoff        = 0 ; 
  int easyrun_onoff          = 0 ; 
  int jumpshot_onoff         = 0 ; 
  int scopeshot_onoff        = 0 ; 
  int sniper_onoff           = 0 ; 
  int holdbreath_onoff       = 0 ; 
  int dropshot_onoff         = 0 ; 
  int aim_abuse_onoff        = 0 ; 
  int auto_jump_onoff        = 0 ; 
  int quick_scope_onoff      = 0 ; 
  int recoil_profiles_onoff   = 0 ; 
  int sensitivity_on_off    = 0 ; 
  int polar_aim_assist_onoff = 5 ; 
  int ToggleStrafeShot       = 0 ; 
  int ToggleBunnyHop         = 0 ; 
  int ToggleFastMelee        = 0 ; 
  int USE_HAIR_TRIGGER       = 0 ; 
// Mod VALUES      -   Text to Display
const string RAPIDFIRE_HOLD         = "RF Hold";
const string RAPIDFIRE_RELEASE      = "RF Release" ;
const string SNIPER_TIME            = "Sniper Time" ;
const string DROPSHOT_HOLD          = "DS Hold" ;
const string DROPSHOT_REST          = "DS Rest" ;
const string AIM_ABUSE_HOLD         = "Abuse Hold" ;
const string AIM_ABUSE_REST         = "Abuse Rest" ;
const string AUTO_JUMP_VAL          = "Auto Jump" ;
const string QUICK_SCOPE_VAL        = "Quick Scope" ;
const string VRECOIL_1             = "VRecoil 1" ;
const string HRECOIL_1             = "HRecoil 1" ;
const string VRECOIL_2             = "VRecoil 2" ;
const string HRECOIL_2  = "HRecoil 2" ;
const string VRECOIL_3             = "VRecoil 3" ;
const string HRECOIL_3              = "HRecoil 3" ;
const string GEN_SENS_N             = "GEN SENS" ;
const string ADS_SENS_N             = "ADS SENS" ;
const string FIRE_SENS_N             = "FIRE SENS" ;
const string ADS_FIRE_SENS_N        = "ADS FIRE S" ;
const string GRENADE_SENS_N         = "GRENADE S" ;
const string POLAR_ASSIST_RADIUS = "PA Radius" ;
const string POLAR_ASSIST_STEPS     = "PA Steps" ;
const string STRAFE_SHOT_TIME       = "StShot Time" ;
// Index to find Value Name string - switchable in game with left/right in ModEdit
    int valName_idx;                  
                                      
    define AMOUNT_OF_VALNAME_IDX = 22; 
// Constant bytes - Convert numbers array - ASCII_NUM[column number] 
    const int8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
      {48,49,50,51,52,53,54,55,56,57};                
                                                   
// Variables for function number_to_string()  
    int s;                            
    int c,c_val;                  
const string NO_EDIT_VAR1  = "No Edit Variables";//  17 
const string NO_EDIT_VAR2  = "for this MOD";// 12       
const uint8 Options [] = {
  1 , // RAPIDFIRE       # 1
  0 , // EASYRUN         # 2
  0 , // JUMPSHOT        # 3
  0 , // SCOPESHOT       # 4
  1 , // SNIPER          # 5
  0 , // HOLDBREATH      # 6
  3 , // DROPSHOT        # 7
  1 , // AIMABUSE        # 8
  1 , // AUTOJUMP        # 9
  1 , // QUICKSCOPE      # 10
  1 , // ANTIRECOIL3Profiles  # 11
  1 , // SENSITIVITY     # 12
  5 , // POLARAIMASSIST_TD # 13
  3 , // STRAFESHOT      # 14
  0 , // BUNNYHOP        # 15
  0 , // FASTMELEE       # 16
  0 // HAIRTRIGGERS    # 17
};
const uint8 OptRange [][] = {
  { 0 , 1 }, // RAPIDFIRE       # 1
  { 0 , 0 }, // EASYRUN         # 2
  { 0 , 0 }, // JUMPSHOT        # 3
  { 0 , 0 }, // SCOPESHOT       # 4
  { 2 , 2 }, // SNIPER          # 5
  { 0 , 0 }, // HOLDBREATH      # 6
  { 3 , 4 }, // DROPSHOT        # 7
  { 5 , 6 }, // AIMABUSE        # 8
  { 7 , 7 }, // AUTOJUMP        # 9
  { 8 , 8 }, // QUICKSCOPE      # 10
  { 9 , 14 }, // ANTIRECOIL3Profiles  # 11
  { 15 , 19 }, // SENSITIVITY     # 12
  { 20 , 21 }, // POLARAIMASSIST_TD # 13
  { 22 , 22 }, // STRAFESHOT      # 14
  { 0 , 0 }, // BUNNYHOP        # 15
  { 0 , 0 }, // FASTMELEE       # 16
  { 0 , 0 }  // HAIRTRIGGERS    # 17
};
const uint8 Min_Max_Options [][]={ 
  { 0 , 1 }, // RAPIDFIRE       # 1
  { 0 , 1 }, // EASYRUN         # 2
  { 0 , 1 }, // JUMPSHOT        # 3
  { 0 , 1 }, // SCOPESHOT       # 4
  { 0 , 1 }, // SNIPER          # 5
  { 0 , 1 }, // HOLDBREATH      # 6
  { 0 , 3 }, // DROPSHOT        # 7
  { 0 , 1 }, // AIMABUSE        # 8
  { 0 , 1 }, // AUTOJUMP        # 9
  { 0 , 1 }, // QUICKSCOPE      # 10
  { 0 , 1 }, // ANTIRECOIL3Profiles  # 11
  { 0 , 1 }, // SENSITIVITY     # 12
  { 0 , 5 }, // POLARAIMASSIST_TD # 13
  { 0 , 3 }, // STRAFESHOT      # 14
  { 0 , 1 }, // BUNNYHOP        # 15
  { 0 , 1 }, // FASTMELEE       # 16
  { 0 , 1 }  // HAIRTRIGGERS    # 17
}; 
int USE_SENS;
/////////////////////////////////////////////////////////////////////////////  
///   INITIALIZATION BLOCK                                                      
/////////////////////////////////////////////////////////////////////////////   
init {  
rapidfire_onoff         = get_pvar(SPVAR_1,0,1,0); 
easyrun_onoff           = get_pvar(SPVAR_2,0,1,0); 
jumpshot_onoff          = get_pvar(SPVAR_3,0,1,0); 
scopeshot_onoff         = get_pvar(SPVAR_4,0,1,0); 
sniper_onoff            = get_pvar(SPVAR_5,0,1,0); 
holdbreath_onoff        = get_pvar(SPVAR_6,0,1,0); 
dropshot_onoff          = get_pvar(SPVAR_7,1,3,0); 
aim_abuse_onoff         = get_pvar(SPVAR_8,0,1,0); 
auto_jump_onoff         = get_pvar(SPVAR_9,0,1,0); 
quick_scope_onoff       = get_pvar(SPVAR_10,0,1,0); 
recoil_profiles_onoff   = get_pvar(SPVAR_11,0,1,0); 
sensitivity_on_off      = get_pvar(SPVAR_12,0,1,0); 
polar_aim_assist_onoff  = get_pvar(SPVAR_13,1,5,5); 
ToggleStrafeShot        = get_pvar(SPVAR_14,1,3,0); 
ToggleBunnyHop          = get_pvar(SPVAR_15,0,1,0); 
ToggleFastMelee         = get_pvar(SPVAR_16,0,1,0); 
USE_HAIR_TRIGGER        = get_pvar(SPVAR_17,0,1,0); 
RF_hold             = get_pvar(SPVAR_18, 1,1000, 20);
RF_release          = get_pvar(SPVAR_19, 1,1000, 30);
drop_shot_hold      = get_pvar(SPVAR_20, 100,6000, 600);
drop_shot_rest      = get_pvar(SPVAR_21, 100,6000, 5000);
aabuse_hold          = get_pvar(SPVAR_22, 1,300, 20);
aabuse_rest          = get_pvar(SPVAR_23, 1,300, 30);
auto_jump_val        = get_pvar(SPVAR_24, 10,2000, 200);
quick_scope_val      = get_pvar(SPVAR_25, 50,600, 350);
VRecoil_1            = get_pvar(SPVAR_26, 1,100, 20);
HRecoil_1            = get_pvar(SPVAR_27,-100,100, 0);
VRecoil_2            = get_pvar(SPVAR_28, 1,100, 25);
HRecoil_2            = get_pvar(SPVAR_29,-100,100, 0);
VRecoil_3            = get_pvar(SPVAR_30, 1,100, 30);
HRecoil_3            = get_pvar(SPVAR_31,-100,100, 0);
sniper_hold          = get_pvar(SPVAR_32, 100,6000, 3000);
GEN_SENS             = get_pvar(SPVAR_33, 70,327, 86);
ADS_SENS             = get_pvar(SPVAR_34, 70,327, 90);
FIRE_SENS            = get_pvar(SPVAR_35, 70,327, 98);
ADS_FIRE_SENS        = get_pvar(SPVAR_36, 70,327, 86);
GRENADE_SENS         = get_pvar(SPVAR_37, 70,327, 100);
polar_aasist_radius  = get_pvar(SPVAR_38, 1,30, 15);
polar_aasist_steps   = get_pvar(SPVAR_39,1,30, 15);
StrafeShotTime       = get_pvar(SPVAR_40, 1,999, 400);
}// end of init block
///////////////////////////////////////////////////////////////////////////// 
///   MAIN BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
main {//---------------------------------
                                  
   /////////////////////////////////////////
 if(get_ival(ADS_BTN)){
     if(event_press(PS4_SHARE)){
         EntireScript_OnOff    = !EntireScript_OnOff;
         blinck(EntireScript_OnOff);
         cls_oled(0);
         draw_rectangle();
         //display_mod(f_idx, f_string, mod_name, f_toggle, f_option)
         display_mod( center_x(sizeof(SCRIPT_ONOFF)- 1, OLED_FONT_MEDIUM_WIDTH) ,SCRIPT_ONOFF [0],EntireScript_OnOff ,1);
         show_mesage_time = 2000;

     }
 }
                          
 if(show_mesage_time){
     show_mesage_time -= get_rtime();
     if(show_mesage_time <= 0) {
         cls_oled(0);    
     }
 }
                               
//============================================================
// KILL SWITCH FOR ENTIRE SCRIPT
//============================================================
 if(EntireScript_OnOff){
   if(display_EDIT){                
    	 // Clear OLED screen         
       cls_oled(0);                        
       // display_edit(f_idx, f_string, f_print, f_val) 
		if(Options[ modName_idx ] == 0 ){  
			  //--- print label                
		    line_oled(1,45,127,45,1,0);    
		    printf( center_x( 17, OLED_FONT_SMALL_WIDTH ), 20, OLED_FONT_SMALL, 1, NO_EDIT_VAR1[0] ); 
		    printf( center_x( 12, OLED_FONT_SMALL_WIDTH ), 33, OLED_FONT_SMALL, 1, NO_EDIT_VAR2[0] ); 
		}                                                                                            
		else {//----  ELSE BEGIN --------------  
             /////////////////////////////////////////////
             if(valName_idx == 0){ 
                  display_edit(center_x(sizeof(RAPIDFIRE_HOLD        )- 1,OLED_FONT_MEDIUM_WIDTH),RAPIDFIRE_HOLD        [0],RF_hold[0]);
                  RF_hold = edit_val(RF_hold,1,1000 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 1){ 
                  display_edit(center_x(sizeof(RAPIDFIRE_RELEASE     )- 1,OLED_FONT_MEDIUM_WIDTH),RAPIDFIRE_RELEASE     [0],RF_release[0]);
                  RF_release = edit_val(RF_release,1,1000 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 2){ 
                  display_edit(center_x(sizeof(SNIPER_TIME       )- 1,OLED_FONT_MEDIUM_WIDTH),SNIPER_TIME       [0],sniper_hold[0]);
                  sniper_hold = edit_val(sniper_hold,100,5000 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 3){ 
                  display_edit(center_x(sizeof(DROPSHOT_HOLD         )- 1,OLED_FONT_MEDIUM_WIDTH),DROPSHOT_HOLD         [0],drop_shot_hold[0]);
                  drop_shot_hold = edit_val(drop_shot_hold, 100,6000);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 4){ 
                  display_edit(center_x(sizeof(DROPSHOT_REST         )- 1,OLED_FONT_MEDIUM_WIDTH),DROPSHOT_REST         [0],drop_shot_rest[0]);
                  drop_shot_rest = edit_val(drop_shot_rest, 100,6000);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 5){ 
                  display_edit(center_x(sizeof(AIM_ABUSE_HOLD        )- 1,OLED_FONT_MEDIUM_WIDTH),AIM_ABUSE_HOLD        [0],aabuse_hold[0]);
                  aabuse_hold = edit_val(aabuse_hold, 1,300);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 6){ 
                  display_edit(center_x(sizeof(AIM_ABUSE_REST        )- 1,OLED_FONT_MEDIUM_WIDTH),AIM_ABUSE_REST        [0],aabuse_rest[0]);
                  aabuse_rest = edit_val(aabuse_rest, 1,300);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 7){ 
                  display_edit(center_x(sizeof(AUTO_JUMP_VAL         )- 1,OLED_FONT_MEDIUM_WIDTH),AUTO_JUMP_VAL         [0],auto_jump_val[0]);
                  auto_jump_val = edit_val(auto_jump_val, 10,2000);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 8){ 
                  display_edit(center_x(sizeof(QUICK_SCOPE_VAL       )- 1,OLED_FONT_MEDIUM_WIDTH),QUICK_SCOPE_VAL       [0],quick_scope_val[0]);
                  quick_scope_val = edit_val(quick_scope_val, 50,600);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 9){ 
                  display_edit(center_x(sizeof(VRECOIL_1         )- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_1         [0],VRecoil_1[0]);
                  VRecoil_1 = edit_val(VRecoil_1,0,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 10){ 
                  display_edit(center_x(sizeof(HRECOIL_1         )- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_1         [0],HRecoil_1[0]);
                  HRecoil_1 = edit_val(HRecoil_1,-100,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 11){ 
                  display_edit(center_x(sizeof(VRECOIL_2         )- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_2         [0],VRecoil_2[0]);
                  VRecoil_2 = edit_val(VRecoil_2,0,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 12){ 
                  display_edit(center_x(sizeof(HRECOIL_2         )- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_2         [0],HRecoil_2[0]);
                  HRecoil_2 = edit_val(HRecoil_2,-100,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 13){ 
                  display_edit(center_x(sizeof(VRECOIL_3         )- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_3         [0],VRecoil_3[0]);
                  VRecoil_3 = edit_val(VRecoil_3,0,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 14){ 
                  display_edit(center_x(sizeof(HRECOIL_3         )- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_3         [0],HRecoil_3[0]);
                  HRecoil_3 = edit_val(HRecoil_3,-100,100);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 15){ 
                  display_edit(center_x(sizeof(GEN_SENS_N            )- 1,OLED_FONT_MEDIUM_WIDTH),GEN_SENS_N            [0],GEN_SENS[0]);
                  GEN_SENS = edit_val(GEN_SENS, 70,327);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 16){ 
                  display_edit(center_x(sizeof(ADS_SENS_N            )- 1,OLED_FONT_MEDIUM_WIDTH),ADS_SENS_N            [0],ADS_SENS[0]);
                  ADS_SENS = edit_val(ADS_SENS, 70,327);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 17){ 
                  display_edit(center_x(sizeof(FIRE_SENS_N            )- 1,OLED_FONT_MEDIUM_WIDTH),FIRE_SENS_N            [0],FIRE_SENS[0]);
                  FIRE_SENS = edit_val(FIRE_SENS, 70,327);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 18){ 
                  display_edit(center_x(sizeof(ADS_FIRE_SENS_N       )- 1,OLED_FONT_MEDIUM_WIDTH),ADS_FIRE_SENS_N       [0],ADS_FIRE_SENS[0]);
                  ADS_FIRE_SENS = edit_val(ADS_FIRE_SENS, 70,327);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 19){ 
                  display_edit(center_x(sizeof(GRENADE_SENS_N        )- 1,OLED_FONT_MEDIUM_WIDTH),GRENADE_SENS_N        [0],GRENADE_SENS[0]);
                  GRENADE_SENS = edit_val(GRENADE_SENS, 70,327);
             }         
             /////////////////////////////////////////////
             if(valName_idx == 20){ 
                  display_edit(center_x(sizeof(POLAR_ASSIST_RADIUS  )- 1,OLED_FONT_MEDIUM_WIDTH),POLAR_ASSIST_RADIUS  [0],polar_aasist_radius[0]);
                  polar_aasist_radius = edit_val(polar_aasist_radius, 0,30 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 21){ 
                  display_edit(center_x(sizeof(POLAR_ASSIST_STEPS )- 1,OLED_FONT_MEDIUM_WIDTH),POLAR_ASSIST_STEPS [0],polar_aasist_steps[0]);
                  polar_aasist_steps = edit_val(polar_aasist_steps,1,30 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 22){ 
                  display_edit(center_x(sizeof(STRAFE_SHOT_TIME      )- 1,OLED_FONT_MEDIUM_WIDTH),STRAFE_SHOT_TIME      [0],StrafeShotTime[0]);
                  StrafeShotTime = edit_val(StrafeShotTime, 1,999);
             }         
		 }//--- ELSE END   ----------- 
   }//  end of display edit  
    if(refresh_OLED)
    { 
        // Clear OLED screen 
        cls_oled(0);       
                           
        // Draw Rectangle 
        draw_rectangle(); 
        // Display Mod Name and togle status  : ON/OFF   
        if(modName_idx == 0)display_mod( center_x(sizeof(RAPIDFIRE      )- 1, OLED_FONT_MEDIUM_WIDTH) ,RAPIDFIRE      [0],rapidfire_onoff       ,1);
        if(modName_idx == 1)display_mod( center_x(sizeof(EASYRUN        )- 1, OLED_FONT_MEDIUM_WIDTH) ,EASYRUN        [0],easyrun_onoff         ,1);
        if(modName_idx == 2)display_mod( center_x(sizeof(JUMPSHOT       )- 1, OLED_FONT_MEDIUM_WIDTH) ,JUMPSHOT       [0],jumpshot_onoff        ,1);
        if(modName_idx == 3)display_mod( center_x(sizeof(SCOPESHOT      )- 1, OLED_FONT_MEDIUM_WIDTH) ,SCOPESHOT      [0],scopeshot_onoff       ,1);
        if(modName_idx == 4)display_mod( center_x(sizeof(SNIPER         )- 1, OLED_FONT_MEDIUM_WIDTH) ,SNIPER         [0],sniper_onoff          ,1);
        if(modName_idx == 5)display_mod( center_x(sizeof(HOLDBREATH     )- 1, OLED_FONT_MEDIUM_WIDTH) ,HOLDBREATH     [0],holdbreath_onoff      ,1);
        if(modName_idx == 6)display_mod( center_x(sizeof(DROPSHOT       )- 1, OLED_FONT_MEDIUM_WIDTH) ,DROPSHOT       [0],dropshot_onoff        ,9);
        if(modName_idx == 7)display_mod( center_x(sizeof(AIMABUSE       )- 1, OLED_FONT_MEDIUM_WIDTH) ,AIMABUSE       [0],aim_abuse_onoff       ,1);
        if(modName_idx == 8)display_mod( center_x(sizeof(AUTOJUMP       )- 1, OLED_FONT_MEDIUM_WIDTH) ,AUTOJUMP       [0],auto_jump_onoff       ,1);
        if(modName_idx == 9)display_mod( center_x(sizeof(QUICKSCOPE     )- 1, OLED_FONT_MEDIUM_WIDTH) ,QUICKSCOPE     [0],quick_scope_onoff     ,1);
        if(modName_idx == 10)display_mod( center_x(sizeof(ANTIRECOIL3Profiles )- 1, OLED_FONT_MEDIUM_WIDTH) ,ANTIRECOIL3Profiles [0],recoil_profiles_onoff  ,1);
        if(modName_idx == 11)display_mod( center_x(sizeof(SENSITIVITY    )- 1, OLED_FONT_MEDIUM_WIDTH) ,SENSITIVITY    [0],sensitivity_on_off   ,1);
        if(modName_idx == 12)display_mod( center_x(sizeof(POLARAIMASSIST_TD)- 1, OLED_FONT_MEDIUM_WIDTH) ,POLARAIMASSIST_TD[0],polar_aim_assist_onoff,30);
        if(modName_idx == 13)display_mod( center_x(sizeof(STRAFESHOT     )- 1, OLED_FONT_MEDIUM_WIDTH) ,STRAFESHOT     [0],ToggleStrafeShot      ,31);
        if(modName_idx == 14)display_mod( center_x(sizeof(BUNNYHOP       )- 1, OLED_FONT_MEDIUM_WIDTH) ,BUNNYHOP       [0],ToggleBunnyHop        ,1);
        if(modName_idx == 15)display_mod( center_x(sizeof(FASTMELEE      )- 1, OLED_FONT_MEDIUM_WIDTH) ,FASTMELEE      [0],ToggleFastMelee       ,1);
        if(modName_idx == 16)display_mod( center_x(sizeof(HAIRTRIGGERS   )- 1, OLED_FONT_MEDIUM_WIDTH) ,HAIRTRIGGERS   [0],USE_HAIR_TRIGGER      ,1);
              
         refresh_OLED = FALSE; 
    } 
     if(display_title){           
          // clear OLED screen    
    	    cls_oled(0);            
    	    // Display Script Title      
          DrawLogo(0, 0, 0);
           // screen saver          
	         ModMenu = FALSE;   
           display_title = FALSE;  
           display_black = TRUE;
                                   
    }                            
      
    //-----------------------------
    // Screen saver (OLED off)   
    if(display_black )         
    {                            
        count_black += get_rtime();
        if(count_black >= 9000)   
        {                        
            cls_oled(0);         
            count_black = 0;      
            display_black = FALSE; 
        }                         
    }                           
                                
   /////////////////////////////////////////////////////////
   // MENU EDIT VALUES             
   if(ModEdit){ 
        block_all_inputs(); 
       //--- Exit from EDIT MENU  
       if(event_release(PS4_CIRCLE)){
             ModEdit      = FALSE;           
             display_EDIT = FALSE;           
             ModMenu      = TRUE;            
             refresh_OLED = TRUE;   // display MODS 
       }                    
        ////////////////////////////////////////////////////////////////////////////////  
        //  GO FORWARD                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_DOWN)){            
                                          
        	   valName_idx ++;                 
        	   if(valName_idx > OptRange[ modName_idx ][ 1 ])  valName_idx = OptRange[ modName_idx ][ 1 ]; 
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }          
        ///////////////////////////////////////////////////////////////////////////////  
        //  GO BACK                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	   valName_idx --;                                      
        	   if(valName_idx < OptRange[ modName_idx ][ 0 ]) valName_idx = OptRange[ modName_idx ][ 0 ];
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }                                                           
            /////////////////////////////////////////////////////// 
   }// end of EDIT MENU    
   /////////////////////////////////////////////////////////
   // EDIT MENU ON/OFF            
   if(get_val(ADS_BTN) && event_press(PS4_OPTIONS)){  
        ModMenu = TRUE;  
        // toggle EditMenu ON/OFF                      
                 modName_idx  = 0;                   
                 refresh_OLED = TRUE;   // display Title    
                 display_EDIT = FALSE;        
   }      
   /////////////////////////////////////////////////////////
   // MENU SYSTEM              
   if(ModMenu){  
        block_all_inputs(); 
      //--- Exit from MENU  
      if(event_press(PS4_CIRCLE)){
          ModMenu = FALSE;                     
          ModEdit = FALSE;              
          combo_run(MESSAGE);             
      }                    
      //--- Enter in EDIT MENU 
      if(event_press(PS4_CROSS)){
          ModMenu     = FALSE;   
          valName_idx = OptRange[ modName_idx ][ 0 ]; 
          ModEdit     = TRUE;   
          display_EDIT= TRUE; 
      }                    
                                  
        //Display MOD NAME and togle status 
        // Switch MODs                     
        if( !get_ival(ADS_BTN) && event_press(PS4_DOWN)){ 
                                          
        	   modName_idx ++;                 
        	   if(modName_idx > 16) modName_idx = 0; 
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( rapidfire_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 1 ) { 
        		  blinck( easyrun_onoff         );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 2 ) { 
        		  blinck( jumpshot_onoff        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 3 ) { 
        		  blinck( scopeshot_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 4 ) { 
        		  blinck( sniper_onoff          );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 5 ) { 
        		  blinck( holdbreath_onoff      );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 6 ) { 
        		  blinck( dropshot_onoff        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 7 ) { 
        		  blinck( aim_abuse_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 8 ) { 
        		  blinck( auto_jump_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 9 ) { 
        		  blinck( quick_scope_onoff     );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 10 ) { 
        		  blinck( recoil_profiles_onoff  );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 11 ) { 
        		  blinck( sensitivity_on_off   );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 12 ) { 
        		  blinck( polar_aim_assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 13 ) { 
        		  blinck( ToggleStrafeShot      );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 14 ) { 
        		  blinck( ToggleBunnyHop        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 15 ) { 
        		  blinck( ToggleFastMelee       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 16 ) { 
        		  blinck( USE_HAIR_TRIGGER      );   
        	}                                    
          /////////////////////////////////////
        }                          
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	  modName_idx --;                                      
        	  if(modName_idx < 0) modName_idx = 16;
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( rapidfire_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 1 ) { 
        		  blinck( easyrun_onoff         );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 2 ) { 
        		  blinck( jumpshot_onoff        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 3 ) { 
        		  blinck( scopeshot_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 4 ) { 
        		  blinck( sniper_onoff          );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 5 ) { 
        		  blinck( holdbreath_onoff      );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 6 ) { 
        		  blinck( dropshot_onoff        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 7 ) { 
        		  blinck( aim_abuse_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 8 ) { 
        		  blinck( auto_jump_onoff       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 9 ) { 
        		  blinck( quick_scope_onoff     );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 10 ) { 
        		  blinck( recoil_profiles_onoff  );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 11 ) { 
        		  blinck( sensitivity_on_off   );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 12 ) { 
        		  blinck( polar_aim_assist_onoff);   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 13 ) { 
        		  blinck( ToggleStrafeShot      );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 14 ) { 
        		  blinck( ToggleBunnyHop        );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 15 ) { 
        		  blinck( ToggleFastMelee       );   
        	}                                    
          /////////////////////////////////////
          //////////////////////////////////////
        	if(modName_idx == 16 ) { 
        		  blinck( USE_HAIR_TRIGGER      );   
        	}                                    
          /////////////////////////////////////
          }                        
        	//////////////////////////
                                  
                                  
        // screen saver           
        display_black = FALSE;    
        display_title = FALSE;    
        //////////////////////////////  
        // display mod name and Toggle ON/OFF | Scroll Options 
        if(!get_ival(ADS_BTN) ){    
             if(event_press(PS4_RIGHT)){ //   go back
                                                  
        	    if(modName_idx == 0 ) { 
                      rapidfire_onoff = f_go_back( rapidfire_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 1 ) { 
                      easyrun_onoff = f_go_back( easyrun_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 2 ) { 
                      jumpshot_onoff = f_go_back( jumpshot_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 3 ) { 
                      scopeshot_onoff = f_go_back( scopeshot_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 4 ) { 
                      sniper_onoff = f_go_back( sniper_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 5 ) { 
                      holdbreath_onoff = f_go_back( holdbreath_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 6 ) { 
                      dropshot_onoff = f_go_back( dropshot_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 7 ) { 
                      aim_abuse_onoff = f_go_back( aim_abuse_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 8 ) { 
                      auto_jump_onoff = f_go_back( auto_jump_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 9 ) { 
                      quick_scope_onoff = f_go_back( quick_scope_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 10 ) { 
                      recoil_profiles_onoff = f_go_back( recoil_profiles_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 11 ) { 
                      sensitivity_on_off = f_go_back( sensitivity_on_off ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 12 ) { 
                      polar_aim_assist_onoff = f_go_back( polar_aim_assist_onoff ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 13 ) { 
                      ToggleStrafeShot = f_go_back( ToggleStrafeShot ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 14 ) { 
                      ToggleBunnyHop = f_go_back( ToggleBunnyHop ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 15 ) { 
                      ToggleFastMelee = f_go_back( ToggleFastMelee ); 
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 16 ) { 
                      USE_HAIR_TRIGGER = f_go_back( USE_HAIR_TRIGGER ); 
        	    }                                 
                                            
             }// go back 
             if(event_press(PS4_LEFT)){//   go forward
                                                  
        	    if(modName_idx == 0 ) { 
                      rapidfire_onoff = f_go_forward( rapidfire_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 1 ) { 
                      easyrun_onoff = f_go_forward( easyrun_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 2 ) { 
                      jumpshot_onoff = f_go_forward( jumpshot_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 3 ) { 
                      scopeshot_onoff = f_go_forward( scopeshot_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 4 ) { 
                      sniper_onoff = f_go_forward( sniper_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 5 ) { 
                      holdbreath_onoff = f_go_forward( holdbreath_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 6 ) { 
                      dropshot_onoff = f_go_forward( dropshot_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 7 ) { 
                      aim_abuse_onoff = f_go_forward( aim_abuse_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 8 ) { 
                      auto_jump_onoff = f_go_forward( auto_jump_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 9 ) { 
                      quick_scope_onoff = f_go_forward( quick_scope_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 10 ) { 
                      recoil_profiles_onoff = f_go_forward( recoil_profiles_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 11 ) { 
                      sensitivity_on_off = f_go_forward( sensitivity_on_off);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 12 ) { 
                      polar_aim_assist_onoff = f_go_forward( polar_aim_assist_onoff);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 13 ) { 
                      ToggleStrafeShot = f_go_forward( ToggleStrafeShot);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 14 ) { 
                      ToggleBunnyHop = f_go_forward( ToggleBunnyHop);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 15 ) { 
                      ToggleFastMelee = f_go_forward( ToggleFastMelee);   
        	    }                                 
                                            
                                                  
        	    if(modName_idx == 16 ) { 
                      USE_HAIR_TRIGGER = f_go_forward( USE_HAIR_TRIGGER);   
        	    }                                 
                                            
             }// go forward 
       } 
       refresh_OLED = TRUE;   
       set_val(PS4_LEFT,0); 
       set_val(PS4_DOWN,0); 
       set_val(PS4_UP,0); 
       set_val(PS4_RIGHT,0); 
    } 
    /////////////////////////////////////////////////////////////
    ///    END OF MENU  /////////////////////////////////////////
    /////////////////////////////////////////////////////////////
//========================================================================================================== 
   if(!ModEdit && !ModMenu){//  code for MODS
    //===========================================
    //   SENSITIVITY                      
    //===========================================
            if(sensitivity_on_off)
            {
                if(!get_val(ADS_BTN) && !get_val(FIRE_BTN)) 
                { 
                    USE_SENS = GEN_SENS;
                }
                else if(get_val(ADS_BTN) && !get_val(FIRE_BTN))
                { 
                    USE_SENS = ADS_SENS;
                }    
                else if(!get_val(ADS_BTN) && get_val(FIRE_BTN))
                { 
                    USE_SENS = FIRE_SENS;
                }
                else if(get_val(ADS_BTN) && get_val(FIRE_BTN))
                { 
                    USE_SENS = ADS_FIRE_SENS;
                }
                else if(get_val(GRANADE_BTN))
                { 
                    USE_SENS = GRENADE_SENS;
                }
                sensitivity(RY,NOT_USE,USE_SENS);
                sensitivity(RX,NOT_USE,USE_SENS);            
            }
    

        if(ToggleStrafeShot && !KS_StrafeShot) 
        {
            if(ToggleStrafeShot == 1){
                if(get_val(FIRE_BTN) && !get_val(ADS_BTN))
                    combo_run (StrafeShot);
                else
                    combo_stop(StrafeShot);
            }
            if(ToggleStrafeShot == 2){
                if(get_val(FIRE_BTN) && get_val(ADS_BTN))
                    combo_run (StrafeShot);
                else
                    combo_stop(StrafeShot);
            }
            if(ToggleStrafeShot == 3){
                if(!get_val(FIRE_BTN) && get_val(ADS_BTN))
                    combo_run (StrafeShot);
                else
                    combo_stop(StrafeShot);
            }
        }
    //===========================================
    //   RAPID FIRE ON/OFF
    //===========================================
    if(get_ival(PS4_LEFT) && event_press(PS4_R2)){   
         rapidfire_onoff = !rapidfire_onoff;          
         set_rumble_tipe(rapidfire_onoff); 
    }               
    if(rapidfire_onoff ) { 
       /////////////////////////////////////////
         if(get_val(FIRE_BTN)) {
              combo_run(RAPID_FIRE_cmb);         
         }                                       
       ///////////////////////////////////////// 
    }                                   
                                         
    //===========================================
    //   EASY RUN 
    //===========================================
    if(easyrun_onoff ) { 
       /////////////////////////////////////////
         if(get_val(LY) < -90 ) combo_run(SPRINT_cmb); 
       ///////////////////////////////////////// 
    }                                   
                                         
    //===========================================
    //   DROP SHOT 
    //===========================================
        if(dropshot_onoff  && !KS_drop_shot) {     
            if(dropshot_onoff == 1){
                //--- FIRE ONLY
                if(get_val(FIRE_BTN) && !get_val(ADS_BTN) ) combo_run(DROP_SHOT_cmb); 
                /////////////////////////////////////////
            }
            if(dropshot_onoff == 2){
                //--- ADS & FIRE
                if(get_val(FIRE_BTN) || get_val(ADS_BTN) ) combo_run(DROP_SHOT_cmb); 
                /////////////////////////////////////////
            }
            if(dropshot_onoff == 3){
                //--- ADS ONLY
                if(get_val(!FIRE_BTN) && get_val(ADS_BTN) ) combo_run(DROP_SHOT_cmb); 
                /////////////////////////////////////////
            } 
        }                                   
    //===========================================
    //   JUMP SHOT 
    //===========================================
    if(jumpshot_onoff ) { 
       /////////////////////////////////////////
         if(get_val(FIRE_BTN) && !get_val(ADS_BTN) ) combo_run(JUMP_SHOT_cmb); 
       ///////////////////////////////////////// 
    }                                   
                                         
    //===========================================
    //   SCOPE SHOT 
    //===========================================
    if(scopeshot_onoff ) { 
       /////////////////////////////////////////
         if(get_val(FIRE_BTN) && !get_val(ADS_BTN) ) set_val(ADS_BTN,100); 
       ///////////////////////////////////////// 
    }                                   
                                         
    //===========================================
    //   SNIPER
    //===========================================
    if(sniper_onoff ) { 
         /////////////////////////////////////////
         if(!get_val(FIRE_BTN) && get_val(ADS_BTN) ) set_val(SPRINT_BTN, 100);// SPRINT BTN 
         ///////////////////////////////////////// 
         if( event_release(ADS_BTN) && get_ptime(ADS_BTN)< sniper_hold ) combo_run(SHOT_cmb);
    }                                   
                                         
    //===========================================
    //   HOLD BREATH 
    //===========================================
    if(holdbreath_onoff ) { 
         /////////////////////////////////////////
         if( get_val(ADS_BTN) ) set_val(SPRINT_BTN, 100);// SPRINT BTN 
         ///////////////////////////////////////// 
    }                                   
                                         
    //===========================================
    //   AIM ABUSE 
    //===========================================
    if(aim_abuse_onoff){
         if(get_val(ADS_BTN) && !get_val(FIRE_BTN)){
              combo_run(AIM_ABUSE_cmb);
         }
    }
    //===========================================
    //   AUTO JUMP 
    //===========================================
    if(auto_jump_onoff){
        if (event_release(JUMP_BTN)) { 
				    if(get_ptime(JUMP_BTN) <= 200 ) { 
					      combo_run(AUTOJUMP_cmb);                  
				    }block(JUMP_BTN, 200);    
			  } 
    }
    //===========================================
    //   QUICK SCOPE 
    //===========================================
  if (quick_scope_onoff) { //QUICKSCOPE TAP < 140 ms          
    if (event_release(ADS_BTN) && (get_ptime(ADS_BTN) < 140)) { 
      combo_run(QUICKSCOPE_cmb);                
    } 
  } 
    //===========================================
    //   ANTI RECOIL 3 PROFILES 
    //===========================================
  if(message_timeout){             
		message_timeout -= get_rtime();
		if(message_timeout <= 0 ){    
			QT_MESSAGE_TIMEOUT();      
		}                          
                               
	}                          
//===============================================
//                 ANTI RECOIL PROFILES          
//===============================================
                                                 
	// PROFILE # 1  --------------------------     
	// ---------------------------------------     
	if( get_val(PS4_L1) && event_press(PS4_UP))  { 
    	switch_profiles (1, 0, 0, 1) ;  
                                                  
		//--- set variables for the Anti Recoil combo to use values from Profile 1
		ANTI_RECOIL       = VRecoil_1;       
		ANTI_RECOIL_H     = HRecoil_1;   
	}                                               
                                                  
	// PROFILE # 2  --------------------------      
	// ---------------------------------------      
	if( get_val(PS4_L1) && event_press(PS4_RIGHT))  {
		switch_profiles (0, 1, 0, 2) ;  
                                                   
		//--- set variables for the Anti Recoil combo to use values from Profile 2 
		ANTI_RECOIL       = VRecoil_2;        
		ANTI_RECOIL_H     = HRecoil_2;    
	}                                                
                                                   
	// PROFILE # 3  --------------------------       
	// ---------------------------------------       
	if( get_val(PS4_L1) && event_press(PS4_DOWN))  { 
    	switch_profiles (0, 0, 1, 3) ; 
                                                   
		//--- set variables for the Anti Recoil combo to use values from Profile 3
		ANTI_RECOIL       = VRecoil_3;        
		ANTI_RECOIL_H     = HRecoil_3;    
	}                                                
	// ALL PROFILES OFF WILL TURN ANTI RECOIL OFF    
	// ---------------------------------------       
	if( get_val(PS4_L1) && event_press(PS4_LEFT))  { 
		switch_profiles (0, 0, 0, 4) ;   
                                                   
		//--- set variables for the Anti Recoil combo to zero
		ANTI_RECOIL       = 0;        
		ANTI_RECOIL_H     = 0;    
	}                                                
	//----  Set Values for Profile 1                 
	if(profile_1_on){                                 
        // hold RS/R3 + UP/DOWN (Vertical Recoil) or LEFT/RIGHT(Horizontal Recoil) 
		if(get_val(XB1_RS)){                              
            if(event_press(XB1_UP)) {
                VRecoil_1 +=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_1)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_1[0],VRecoil_1[0]);
            }
            if(event_press(XB1_DOWN)){
                VRecoil_1 -=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_1)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_1[0],VRecoil_1[0]);
            }
            //horizontal------------------------------------   
            if(event_press(XB1_LEFT)){
                HRecoil_1     -=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_1)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_1[0],HRecoil_1[0]);
            }
            if(event_press(XB1_RIGHT)){
                HRecoil_1     +=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_1)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_1[0],HRecoil_1[0]);
            }
		}// get RS        
                                                     
		                                       
		ANTI_RECOIL       = VRecoil_1;         
		ANTI_RECOIL_H     = HRecoil_1;     
	}                                                  
	//----  Set Values for Profile 2                 
	if(profile_2_on){                                 
         // hold RS/R3 + UP/DOWN (Vertical Recoil) or LEFT/RIGHT(Horizontal Recoil) 
		     if(get_val(XB1_RS)){                              
            if(event_press(XB1_UP)) {
                VRecoil_2 +=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_2)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_2[0],VRecoil_2[0]);
            }
            if(event_press(XB1_DOWN)){
                VRecoil_2 -=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_2)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_2[0],VRecoil_2[0]);
            }
            //horizontal------------------------------------   
            if(event_press(XB1_LEFT)){
                HRecoil_2     -=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_2)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_2[0],HRecoil_2[0]);
            }
            if(event_press(XB1_RIGHT)){
                HRecoil_2     +=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_2)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_2[0],HRecoil_2[0]);
            }
        }                             
                                       
		                                   
		ANTI_RECOIL       = VRecoil_2;         
		ANTI_RECOIL_H     = HRecoil_2;     
	}                                                  
	//----  Set Values for Profile 3                 
	if(profile_3_on){                                 
        // hold RS/R3 + UP/DOWN (Vertical Recoil) or LEFT/RIGHT(Horizontal Recoil) 
		    if(get_val(XB1_RS)){                              
            if(event_press(XB1_UP)) {
                VRecoil_3 +=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_3)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_3[0],VRecoil_3[0]);
            }
            if(event_press(XB1_DOWN)){
                VRecoil_3 -=1;
                on_the_fly_display(center_x(sizeof(VRECOIL_3)- 1,OLED_FONT_MEDIUM_WIDTH),VRECOIL_3[0],VRecoil_3[0]);
            }
            //horizontal------------------------------------   
            if(event_press(XB1_LEFT)){
                HRecoil_3     -=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_3)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_3[0],HRecoil_3[0]);
            }
            if(event_press(XB1_RIGHT)){
                HRecoil_3     +=1;
                on_the_fly_display(center_x(sizeof(HRECOIL_3)- 1,OLED_FONT_MEDIUM_WIDTH),HRECOIL_3[0],HRecoil_3[0]);
            }
        }                             
                                        
	                                     
		ANTI_RECOIL       = VRecoil_3;      
		ANTI_RECOIL_H     = HRecoil_3;     
	}                                                  
                           
//=============================================== 
//                 ANTI RECOIL                    
//=============================================== 
                                                  
     if(time_to_clear_screen){
         time_to_clear_screen -= get_rtime();
         if(time_to_clear_screen <=0) combo_run(EXIT);
     }                                                  
//=============================================== 
//               SAVE ANTI RECOIL                    
//=============================================== 
    if(get_val(PS4_R3)){
        if(event_press(PS4_PS)){
            combo_run(MESSAGE);       
        }
        set_val(PS4_PS,0);
    }

                                                         
    //--------------------------------------------------- 
    if(recoil_profiles_onoff) {                           
                                                             
		if( abs(get_val(RX)) > AR_Release || abs(get_val(RY)) > AR_Release) { 
        	combo_stop (AntiRecoil3Profiles);                            
		}                                                       
                                                              
		if( get_val(ADS_BTN) && get_val(FIRE_BTN)) {
        	combo_run(AntiRecoil3Profiles);   
		}                 
    }                    
                         
    //===========================================
    //   DoNotAtMe Polar Aim Assist with Taylordrift21 shapes 
    //===========================================
    if(polar_aim_assist_onoff){
        vm_tctrl(VM_INTERVAL); 
                     
        actual_X = get_val(X);   
        actual_Y = get_val(Y); 
        
        actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
        max_Magnitude = (actual_Magnitude < 100);                      
                                                              
        if(!(time++ % STEP_INTERVAL)){                                  
         angle += polar_aasist_steps;                                                 
        }                                                               
        angle = angle % 360;                                            
        sin_angle = Polar_Array[angle % 360];                           
        cos_angle = Polar_Array[(angle + 270) % 360]; 
                        
        if((ACTIVE_WHEN_ADS && get_val(ADS_BTN)) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN))){ 
            if(actual_Magnitude <= polar_aasist_radius){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
            }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
            }                                                  
            GetShapes(polar_aasist_radius); 
        } 
    } 
            //===========================================
            //   Bunny Hop 
            //===========================================
            if(ToggleBunnyHop)
            {
                  if(get_ival(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) 
                      combo_run(Bunnyhop); 
            }
           //===========================================
           //   FAST MELEE 
           //===========================================
           if(ToggleFastMelee)
           {
                if(!get_val(ADS_BTN)){
                    if(get_val(MELEE_BTN))
                         combo_run(FastMelee);
                }
                if(get_val(ADS_BTN))
                         combo_stop(FastMelee);
           }
    //===========================================
    //   HAIR TRIGGERS 
    //===========================================
    if(USE_HAIR_TRIGGER)
    {
        if(get_ival(FIRE_BTN) > 10)
        set_val(FIRE_BTN, 100);
        
        if(get_ival(ADS_BTN)> 10)
        set_val(ADS_BTN, 100);
    }        

        } //  end of MODS CODE 
    } //  ENTIRE SCRIPT KILL SWITCH 
} //  end of main block 
///////////////////////////////////////////////////////////////////////////// 
///   COMBO BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
combo Bunnyhop{
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
}
              
                       
int exit_wait = 1500;
combo EXIT {     
	wait(exit_wait);     
	cls_oled(0);    
	ModMenu = FALSE;  
	ModEdit = FALSE;    
	display_EDIT = FALSE; 
	display_title = FALSE; 
}                      
int LED_OnOff;       
int rumble_tipe = RUMBLE_A;
       
//=============================================== 
//            LED BLINK                           
//=============================================== 
combo LED_BLINK {                                 
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                            
	wait(100);                                      
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                             
	wait(100);                                      
}                                                 
//=============================================== 
//                 VIBRATE SET_UP                 
//=============================================== 
combo vibrate {                                   
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
}                                                 
//===============================================  
//                 RUMBLE_TIPE                     
//===============================================  
function set_rumble_tipe ( val) {                  
	if( val){ rumble_tipe = RUMBLE_A ; LED_OnOff = Green;}  
	else    { rumble_tipe = RUMBLE_B ; LED_OnOff = Red  ;} 
	combo_run(vibrate);                     
	combo_run(LED_BLINK);                   
}                                         
  int b_dblclick;int dblclick_msecs;  
	int dblclick_count;                 
	//int onoff = FALSE;                 
	define time_to_dblclick  = 300;// time in ms for second click to occur 
function double_click (button) {                      
    if (b_dblclick) {                                 
        dblclick_msecs = dblclick_msecs + get_rtime();
        if ( dblclick_msecs > time_to_dblclick ) {    
            dblclick_count = 0;                       
            dblclick_msecs = 0;                       
            b_dblclick = FALSE;                       
        }                                             
    }                                                 
    if (event_release(button) && get_ptime(button) < 250) { 
        if (dblclick_count == 0) {                    
            b_dblclick = TRUE;                        
        } else if (dblclick_count == 1) {             
            dblclick_count = 0;                       
          return 1;                                   
        }                                              
        dblclick_count = dblclick_count + 1;          
    }                                                 
                                                     
    return 0;                                        
}           
data(1,// begin of data segment-------- 
  2,0,0,0, //1. Blue     
  0,2,0,0, //2. Red      
  0,0,2,0, //3. Green    
  0,0,0,2, //4. Pink     
  2,0,2,0, //5. SkyBlue 
  0,2,2,0, //6. Yellow   
  2,2,2,2, //7. White    
  0,0,0,0  //8. Color OFF 
); // end of data segment--------------  
// Refresh OLED              
    int display_title = TRUE;
    int display_black;      
    int refresh_OLED;        
    int ModMenu;    
    int ModEdit;   
    int display_EDIT;   
    int EntireScript_OnOff = TRUE;// Kill Swith For Entire Script   
    int show_mesage_time; 
////////////////////////////////////// 
/////////////////////////////////////// 
int count_black;                      
int need_to_be_save;                 
int BlinckColor = 3;                 
int Col_ind;                         
//===============================================================
//   MODS COMBO SECTION
//===============================================================
combo QUICKSCOPE_cmb {  
	set_val(FIRE_BTN, 0); 
	set_val(ADS_BTN, 100); 
  set_val(SPRINT_BTN, 100); 
	wait(quick_scope_val);    
	set_val(FIRE_BTN, 100);
	set_val(ADS_BTN, 100); 
  set_val(SPRINT_BTN, 100); 
	wait(40);                        
}   
combo AUTOJUMP_cmb { 
	set_val(JUMP_BTN, 100); 
	wait(50);                
	wait(auto_jump_val);               
}                      
combo AIM_ABUSE_cmb {
   set_val(ADS_BTN,100);
   wait(aabuse_hold);
   set_val(ADS_BTN,  0);
   wait(aabuse_rest);
}
combo RAPID_FIRE_cmb { 
  set_val(FIRE_BTN, 100);
  wait(RF_hold);
  set_val(FIRE_BTN,   0);
  wait(RF_release); 
} 
combo SPRINT_cmb {              
    set_val(SPRINT_BTN, 100); 
    wait(60);  
    wait(200); 
} 
int KS_drop_shot; 
combo DROP_SHOT_cmb {                   
    set_val(PRONE_BTN, 100); 
    wait(drop_shot_hold);  
    wait(drop_shot_rest); 
} 
combo JUMP_SHOT_cmb {                   
    set_val(JUMP_BTN, 100); 
    wait(60);  
    wait(1000); 
} 
combo SHOT_cmb {                   
    set_val(FIRE_BTN, 100);// FIRE BTN
    set_val(ADS_BTN, 100);// ADS BTN
    set_val(SPRINT_BTN, 100);// SPRINT BTN
    wait(40);  
} 
// ANTI RECOIL VARIABLES  
int ANTI_RECOIL       =  0; //Set this value to compensate for the recoil vertical (0 to 100)  
int ANTI_RECOIL_H     =  0; //Set this value to compensate for the recoil horizontal (-100 to  +100)  
int AR_Release        = 40; // change this value to determine when antirecoil stops working (min: antirecoil value + 10)  
int anti_recoil;  
int antirecoil_h ;
int profile_1_on ;
int profile_2_on ;
int profile_3_on ;
int Scope_only  = TRUE; // TRUE  Antirecoil  ON with Ads+FIRE - FALSE If Antirecoil Always ON
int message_timeout;
int Invert            =  1; //  
//=============================================== 
//         ANTIRECOIL 3 PROFILES                  
//=============================================== 
combo AntiRecoil3Profiles {                                
   //--- vertical_recoil                           
     anti_recoil = get_val(RY) + (ANTI_RECOIL * Invert);
     if(anti_recoil > 100) anti_recoil = 100;       
     set_val(RY, anti_recoil);                     
                                                    
   //--- Horizontal_Recoil                          
                                                    
     antirecoil_h = get_val(RX) + (ANTI_RECOIL_H );
	if(antirecoil_h >100) antirecoil_h=100;           
	else if(antirecoil_h < -100) antirecoil_h= -100;  
	set_val(RX,antirecoil_h);                       
}                                                  
                                    
function QT_MESSAGE_TIMEOUT (){     
	// Clear OLED Screen              
	cls_oled(0); // will clear oled   
	display_title  = FALSE;           
}                                  
                                      
const string Profile1  = "Profile 1";
const string Profile2  = "Profile 2";
const string Profile3  = "Profile 3";
const string Profile4  = "ALL PROFLS";
const string QT_ON     = "ON";
const string QT_OFF    = "OFF";
                               
function print_QT (f_cheract_size ,  f_label ){   
     rect_oled(1,1,127,63,0,1);                   
     line_oled(1,20,127,20,1,1);                   
	 printf( center_x( f_cheract_size , OLED_FONT_MEDIUM_WIDTH)    , 2 , OLED_FONT_MEDIUM , OLED_WHITE, f_label);   
}                                                
function display_Add_QT(togg_number){  
                                            
 	// Clear OLED Screen                          
    cls_oled(0); // will clear oled                  
    if( togg_number == 1){//----PROFILE 1  
    	  print_QT( sizeof(Profile1 ) , Profile1[0] );// PROFILE 1 
    		    printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );// Profile 1 ON 
    }                                                                                   
    if( togg_number == 2){//----PROFILE 2                                               
    	  print_QT( sizeof(Profile2 ) , Profile2[0] );// PROFILE  2                        
    		    printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );// PROFILE 2 ON  
    }                       
    if( togg_number == 3){//----PROFILE 3                                               
    	  print_QT( sizeof(Profile3 ) , Profile3[0] );// PROFILE  3                        
    		    printf( 53 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_ON[0] );// PROFILE 3 ON  
    }                       
    if( togg_number == 4){//----ALL PROFILES                                               
    	  print_QT( sizeof(Profile4 ) , Profile4[0] );// ALL PROFILES                        
    		printf( 47 ,30 , OLED_FONT_LARGE , OLED_WHITE , QT_OFF[0] );//ALL PROFILES OFF 
    }                       
 	   message_timeout = 3000;  
  }                   
function switch_profiles (prf1, prf2, prf3, qt_message){
    if(qt_message == 4 )recoil_profiles_onoff = FALSE;  
    else recoil_profiles_onoff = TRUE;  
    profile_1_on = prf1; // turn Profile 1 ON / OFF    
    profile_2_on = prf2; // turn Profile 2 ON / OFF    
    profile_3_on = prf3; // turn Profile 3 ON / OFF     
    display_Add_QT ( qt_message );    
}

   //=======================================
   //  DISPLAY EDIT VALUE ON THE FLY        
   //=======================================
int time_to_clear_screen;
function on_the_fly_display (f_string, f_print, f_val){
    cls_oled(0);  
    line_oled(1,18,127,18,1,1);
    printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);  
    number_to_string(f_val, find_digits(f_val));
    time_to_clear_screen  = 2000;
}      
       
define X = RX;               
define Y = RY;                                    
define ACTIVE_WHEN_ADS    = TRUE;                     
define ACTIVE_WHEN_FIRING = TRUE;  
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2;             

const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};                                    

// Variables \\
int Position,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral; 
int MinRadius = 1;  // Leave Alone , This can be left alone and not need adjusted. \\
int time;                                             
int angle, cos_angle, sin_angle;                      
int actual_X, actual_Y, actual_Magnitude, max_Magnitude; 
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
    {
        InnerSpiral -= 1;
        if(InnerSpiral < MinRadius)
            SpiralPosition1 = TRUE;
    }
    else
    {
        InnerSpiral += 1;
        if(InnerSpiral > f_var)
            SpiralPosition1 = FALSE;
    }
    if(!SpiralPosition2)
    {
        OuterSpiral -= 1;
        if(OuterSpiral < MinRadius)
            SpiralPosition2 = TRUE;
    }
    else
    {
        OuterSpiral += 1;
        if(OuterSpiral >  f_var)
            SpiralPosition2 = FALSE;
    } 
    if( polar_aim_assist_onoff == 1)                    
    { 
        sin_angle = (sin_angle * f_var) /100;
        cos_angle = (cos_angle * f_var) /100;  
    } 
    if( polar_aim_assist_onoff == 2)        
    { 
        sin_angle = (sin_angle * f_var)/100;
        cos_angle = (cos_angle * MinRadius)/100; 
    }
    if( polar_aim_assist_onoff == 3)                     
    { 
        cos_angle = (cos_angle * f_var) /100;  
        sin_angle = (sin_angle * MinRadius)/100;  
    } 
    if( polar_aim_assist_onoff == 4)                  
    {
        sin_angle = (sin_angle * InnerSpiral) /100;
        cos_angle = (cos_angle * OuterSpiral) /100;  
    }
    if( polar_aim_assist_onoff == 5)
    {
        if(Position == 0 || Position == 1)
        {  
            actual_X = (get_val(X)) + ((cos_angle * f_var))/100;
        }
        if(Position == 2 || Position == 3)
        {  
            actual_Y = (get_val(Y)) + ((sin_angle * f_var))/100;
        }
            Position++;        
            
        if(Position == 4)
        {
            Position = 0;
        }    
    }
    if(polar_aim_assist_onoff == 5 )
    {
           set_val(X, actual_X);
           set_val(Y, actual_Y); 
    } 
    else
    {
        set_val(X, calculate(actual_X + cos_angle, -100, 100));
        set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
  
    }   
 }
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
int KS_StrafeShot;
combo StrafeShot{ 
    set_val(LX, 100);
    wait(StrafeShotTime);
    wait(50);
    set_val(LX, -100);
    wait(StrafeShotTime);
    wait(20);
}
combo FastMelee {
    set_val(MELEE_BTN, 100);
    wait(35);
    set_val(MELEE_BTN, 0);
    wait(30);  
}

define FONT_STATS_INDEX_WIDTH    = 0; 
define FONT_STATS_INDEX_HEIGHT   = 1; 
define FONT_STATS_INDEX_MAXCHARS = 2; 
                                      
                                      
//////////////////////////////////////////////////////////////// 
function horizontal_center_offset(number_characters, font_size) { 
    return (128 - number_characters * FONT_STATS[font_size][FONT_STATS_INDEX_WIDTH]) / 2;
}             
              
const string EXIT_TXT1 = "SETTINGS";  
const string EXIT_TXT2 = "WAS SAVED"; 
                                     
////////////////////////////////////////////////////////////////////////////// 
///  SAVE  
function save_toggles () {  
                    
     set_pvar(SPVAR_1,rapidfire_onoff       ); 
     set_pvar(SPVAR_2,easyrun_onoff         ); 
     set_pvar(SPVAR_3,jumpshot_onoff        ); 
     set_pvar(SPVAR_4,scopeshot_onoff       ); 
     set_pvar(SPVAR_5,sniper_onoff          ); 
     set_pvar(SPVAR_6,holdbreath_onoff      ); 
     set_pvar(SPVAR_7,dropshot_onoff        ); 
     set_pvar(SPVAR_8,aim_abuse_onoff       ); 
     set_pvar(SPVAR_9,auto_jump_onoff       ); 
     set_pvar(SPVAR_10,quick_scope_onoff     ); 
     set_pvar(SPVAR_11,recoil_profiles_onoff  ); 
     set_pvar(SPVAR_12,sensitivity_on_off   ); 
     set_pvar(SPVAR_13,polar_aim_assist_onoff); 
     set_pvar(SPVAR_14,ToggleStrafeShot      ); 
     set_pvar(SPVAR_15,ToggleBunnyHop        ); 
     set_pvar(SPVAR_16,ToggleFastMelee       ); 
     set_pvar(SPVAR_17,USE_HAIR_TRIGGER      ); 
     set_pvar(SPVAR_18,RF_hold); 
     set_pvar(SPVAR_19,RF_release); 
     set_pvar(SPVAR_20,sniper_hold); 
     set_pvar(SPVAR_21,drop_shot_hold); 
     set_pvar(SPVAR_22,drop_shot_rest); 
     set_pvar(SPVAR_23,aabuse_hold); 
     set_pvar(SPVAR_24,aabuse_rest); 
     set_pvar(SPVAR_25,auto_jump_val); 
     set_pvar(SPVAR_26,quick_scope_val); 
     set_pvar(SPVAR_27,VRecoil_1); 
     set_pvar(SPVAR_28,HRecoil_1); 
     set_pvar(SPVAR_29,VRecoil_2); 
     set_pvar(SPVAR_30,HRecoil_2); 
     set_pvar(SPVAR_31,VRecoil_3); 
     set_pvar(SPVAR_32,HRecoil_3); 
     set_pvar(SPVAR_33,GEN_SENS); 
     set_pvar(SPVAR_34,ADS_SENS); 
     set_pvar(SPVAR_35,FIRE_SENS); 
     set_pvar(SPVAR_36,ADS_FIRE_SENS); 
     set_pvar(SPVAR_37,GRENADE_SENS); 
     set_pvar(SPVAR_38,polar_aasist_radius); 
     set_pvar(SPVAR_39,polar_aasist_steps); 
     set_pvar(SPVAR_40,StrafeShotTime); 
    combo_run(EXIT);                  
      
}// end of save   
                      
combo MESSAGE {       
    wait(20);         
    save_toggles ();  
    cls_oled(0);      
    printf(horizontal_center_offset(sizeof(EXIT_TXT1), OLED_FONT_MEDIUM ), 2, OLED_FONT_MEDIUM, 1, EXIT_TXT1[0]); 
    printf(horizontal_center_offset(sizeof(EXIT_TXT2), OLED_FONT_MEDIUM ), 23, OLED_FONT_MEDIUM, 1, EXIT_TXT2[0]);
    exit_wait = 2000;     
}                        
function blinck ( var){  
	if(var){               
		BlinckColor = Green;
	}else{                 
		BlinckColor = Red;    
	}                       
	combo_run(BLINK_NOTIFY); 
}                           
                            
combo BLINK_NOTIFY {        
	colourled(BlinckColor);   
	wait(300);                 
	colourled(ColorOFF);        
	wait(100);                  
	colourled(BlinckColor);      
	wait(300);                   
	colourled(ColorOFF);          
}                                
                                
const uint8 FONT_STATS[][] = {  
    {  7, 10, 18 }, // Small    
    { 11, 18, 11 }, // Medium   
    { 16, 26,  7 }  // Large    
};                              
                                
function display_edit( f_string, f_print, f_val) {
    printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);  
    number_to_string(f_val, find_digits(f_val));     
}                                                  
function f_go_forward (f_variable) {
    f_variable       +=1;   
    if(f_variable  > Min_Max_Options[modName_idx][1] )f_variable  = Min_Max_Options[modName_idx][1]; // max option
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

function f_go_back (f_variable) {
    f_variable       -=1;   
    if(f_variable  < Min_Max_Options[modName_idx][0] )f_variable  = Min_Max_Options[modName_idx][0]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}
function number_to_string(f_val,f_digits) {                  
/*********************************************************** 
 *  number_to_string(value to convert, # of digits in value) 
 *                                                           
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767) 
 *                                                      
 *      Convert digits to ASCII                         
 *      Add ASCII character to print buffer            
 *      Print string centered X & Y on OLED             
*                                                       
***********************************************************/
    s = 1;  c_val = 10000;                            
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(s,45);    //--add leading "-"      
         s += 1;                                      
         f_val = abs(f_val);                          
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(f_digits >= c)                             
        {                                             
            putc_oled(s,ASCII_NUM[f_val / c_val]);    
            f_val = f_val % c_val;                    
            s +=  1;                                  
            if(c == 4)                               
            {                                         
                putc_oled(s,44);   //--add ","        
                s += 1;                               
            }                                        
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(center_x(s - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,s - 1,OLED_WHITE); // adjustable value centered in X 
}                                                     
int n_str_;                  
int horiz_X_center_sufix;    
                             
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) { 
                                                      
    n_str_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(n_str_,45);    //--add leading "-" 
         n_str_ += 1;                                 
         f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(f_digits >= c)                             
        {                                              
            putc_oled(n_str_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_WHITE); // adjustable value centered in X
}                                                     
                                                      
function edit_val( f_val, f_min, f_max ) {  // antirecoil = edit_val( 0 , antirecoil, 99  , 99  ) 
    line_oled(1,18,127,18,1,1);                                        
    // print the range values                                          
    // on the left: min value                                          
    print_number(f_min ,find_digits(f_min) ,4 , 22 , OLED_FONT_SMALL); 
    // on the right: max value                                         
    print_number(f_max ,find_digits(f_max) ,97 , 22 , OLED_FONT_SMALL);
                                          
    if(get_val(ADS_BTN)){                  
		if(press_hold(PS4_RIGHT)){            
			f_val ++;                           
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_LEFT)){             
			f_val --;                           
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
		if(press_hold(PS4_UP)){               
			f_val +=10;                         
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_DOWN)){             
			f_val -=10;                         
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
	}                                      
    return f_val;                        
}                                        
                                             
                                   
function press_hold(f_btn) {       
//  return TRUE - event_press()    
//- every 250ms when button is held 
	  return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}               
                
function find_digits(f_num) {                         
//  find_digits(value)                                
//        return Number of Digits in Value Passed     
                                                      
    f_num = abs(f_num);                               
    if(f_num / 10000 > 0) return 5;                   
    if(f_num /  1000 > 0) return 4;                   
    if(f_num /   100 > 0) return 3;                   
    if(f_num /    10 > 0) return 2;                   
                          return 1;                  
}                                                     
///////////////////////////////////////////////
//  FUNCTIONS                                 
                                              
function center_x(f_chars,f_font) {           
//  center_x(number of chars,font size);     
//        return X for Centering String Horizontally 
                                                      
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}                                                      
                                                       
function draw_rectangle()        
{
    line_oled(1,25,127,25,1,1); 
    rect_oled(0, 0,OLED_WIDTH,64,FALSE,1); 
}
const string ModOption_6_0 = "Disable"; 
const string ModOption_6_1 = "Fire Only"; 
const string ModOption_6_2 = "ADS & Fire"; 
const string ModOption_6_3 = "ADS Only"; 
const string ModOption_12_0 = "Disable"; 
const string ModOption_12_1 = "Circular"; 
const string ModOption_12_2 = "Tall Oval"; 
const string ModOption_12_3 = "Wide Oval"; 
const string ModOption_12_4 = "Spiral"; 
const string ModOption_12_5 = "Helix"; 
const string ModOption_13_0 = "Disable"; 
const string ModOption_13_1 = "Fire Only"; 
const string ModOption_13_2 = "ADS & Fire"; 
const string ModOption_13_3 = "ADS Only"; 
function display_mod( f_string, mod_name, f_toggle, f_option) {   
        // Display MOD_NAME                                    
        printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, mod_name); 
        if(f_option == 1)                              
        {                                                     
        // Display Disable / Enable                                 
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);// Enable 
            else                                                                                               
                printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);// Disable 
        }            
        if(f_option == 9)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_6_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_6_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_6_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_6_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_6_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_6_2[0]);// ADS & Fire
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_6_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_6_3[0]);// ADS Only
                                                                                                                           
        }            
        if(f_option == 30)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_12_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_12_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_1[0]);// Circular
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_12_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_2[0]);// Tall Oval
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_12_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_3[0]);// Wide Oval
                                                                                                                           
            if(f_toggle == 4)                                                             
                printf(center_x(sizeof(ModOption_12_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_4[0]);// Spiral
                                                                                                                           
            if(f_toggle == 5)                                                             
                printf(center_x(sizeof(ModOption_12_5)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_12_5[0]);// Helix
                                                                                                                           
        }            
        if(f_option == 31)   
        {                                                     
            if(f_toggle == 0)                                                             
                printf(center_x(sizeof(ModOption_13_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_13_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ModOption_13_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_13_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                printf(center_x(sizeof(ModOption_13_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_13_2[0]);// ADS & Fire
                                                                                                                           
            if(f_toggle == 3)                                                             
                printf(center_x(sizeof(ModOption_13_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_13_3[0]);// ADS Only
                                                                                                                           
        }            
}//display mod end           
// COLOR LED function        
//-------------------------------------------------------------- 
                                       
function colourled(Colour) {         
	Col_ind=(Colour*4)- 3;             
	set_led(LED_1,duint8(Col_ind  ));   
	set_led(LED_2,duint8(Col_ind+ 1));  
	set_led(LED_3,duint8(Col_ind+ 2));  
	set_led(LED_4,duint8(Col_ind+ 3));  
}                                    
/*     
============================================================================================================================ 
     Logo Picture : Default ZEN Logo
============================================================================================================================ 
*/                                                    
                               
 const int16 BOOT_LOGO[] = { 
128, 64,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFD,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF8,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0x1FFF,0xFFF8,0x3FFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFC,0x1FFF,
    0xFFF8,0x1FFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFF8,0x1FFF,0xFFF8,0x03FF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFC0,0x1FFF,0xFFF8,0x007F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFE00,0x1FFF,0xFFF8,0x000F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF000,0x1FFF,
    0xFFF8,0x0000,0x7FFF,0xFFFF,0xFFFF,0xFFFE,0x0000,0x0FFF,0xFFF8,0x0000,0x0FFF,0xFFFF,0xFFFF,0xFFF0,0x0000,0x1FFF,0xFFFE,0x0001,0x00FF,0x00E0,0x0E01,0xFE00,0x8000,0x3FFF,0xFFFF,0xF800,0x0003,0x00E0,0x0E01,0xC000,0x001F,0xFFFF,
    0xFFFF,0xFF80,0x0FFB,0x00E0,0x0E01,0xDFF8,0x01FF,0xFFFF,0xFFFF,0xFFE0,0x0C1B,0x00E3,0x8E31,0xDFF8,0x07FF,0xFFFF,0xFFFF,0xFFE0,0x0C1B,0x0FE3,0x8E31,0xD818,0x07FF,0xFFFF,0xFFFF,0xFFE0,0x0C1B,0x0FE3,0x8E31,0xD818,0x07FF,0xFFFF,
    0xFFFF,0xFFE0,0x0C1B,0x0FE3,0x8E31,0xD818,0x07FF,0xFFFF,0xFFFF,0xFFE2,0x0C1B,0x0FE3,0x8E31,0xD818,0x47FF,0xFFFF,0xFFFF,0xFFF2,0x8C1B,0x0FE3,0x8E31,0xD819,0x4FFF,0xFFFF,0xFFFF,0xFFFB,0x0C1B,0x0FE0,0x0E3F,0xDFF8,0xDFFF,0xFFFF,
    0xFFFF,0xFFF9,0x4FFB,0x00E0,0x0E01,0xDFFA,0x9FFF,0xFFFF,0xFFFF,0xFFFC,0x6003,0x00E0,0x0E01,0xC002,0x3FFF,0xFFFF,0xFFFF,0xFFFF,0xE003,0x00E1,0xFE01,0xC003,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE003,0x0FE1,0xFFF1,0xC003,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xE633,0x0FE1,0xFE31,0xCC33,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE633,0x0FE1,0xFE31,0xCC33,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE633,0x0FE1,0xFE31,0xCC33,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE633,0x0FE1,0xFE31,0xCC33,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xE003,0x0FE1,0xFE31,0xC003,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE003,0x0FE1,0xFE01,0xC003,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE003,0x0FE1,0xFE01,0xC003,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE003,0x0FE1,0xFE01,0xC003,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xE003,0x0FE1,0xFE01,0xC003,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF
 } // picture 
/*     
============================================================================================================================ 
     DrawLogo(x, y, invert)                                                                                                  
============================================================================================================================ 
*/                                                    
int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData;                      
                                                      
function DrawLogo(x, y, invert) {                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) {         // Loop the Y axis 
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) {     // Loop the X axis 
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;             // Decrement the bit flag, we are moving to the next bit 
            if (!logoBit) {     // Check if we have just handled the last bit  
                logoBit = 16;     // Reset the bit flag     
                logoOffset++;     // Move to the next value 
            }  
        }   
    }    
}     
      