/*
       
 ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄       ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄  ▄         ▄ 
▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌     ▐░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌▐░▌       ▐░▌
▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀      ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌░▌     ▐░▌▐░▌       ▐░▌
▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌               ▐░▌          ▐░▌       ▐░▌▐░▌▐░▌ ▐░▌▐░▌▐░▌       ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌       ▐░▌
▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░▌ ▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄      ▐░▌          ▐░▌       ▐░▌▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄█░▌
▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌▐░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌          ▐░▌       ▐░▌▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌
▐░█▀▀▀▀█░█▀▀ ▐░▌       ▐░▌▐░▌ ▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀      ▐░▌          ▐░▌       ▐░▌▐░▌   ▀   ▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌ ▀▀▀▀█░█▀▀▀▀ 
▐░▌     ▐░▌  ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌               ▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌    ▐░▌▐░▌     ▐░▌     
▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄      ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌     ▐░▐░▌     ▐░▌     
▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌          ▐░▌       ▐░▌▐░▌      ▐░░▌     ▐░▌     
 ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀       ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀  ▀            ▀         ▀  ▀        ▀▀       ▀             
        
        
    ___    ______  ___   ____  ____  ____     _    __ ___       ____            __     _____           _       __ 
   /   |  /  _/  |/  /  / __ \/ __ \/ __ \   | |  / /<  /      / __ )___  _____/ /_   / ___/__________(_)___  / /_
  / /| |  / // /|_/ /  / /_/ / /_/ / / / /   | | / / / /      / __  / _ \/ ___/ __/   \__ \/ ___/ ___/ / __ \/ __/
 / ___ |_/ // /  / /  / ____/ _, _/ /_/ /    | |/ / / /      / /_/ /  __(__  ) /_    ___/ / /__/ /  / / /_/ / /_  
/_/  |_/___/_/  /_/  /_/   /_/ |_|\____/     |___(_)_/      /_____/\___/____/\__/   /____/\___/_/  /_/ .___/\__/  
                                                                                                    /_/                  
        
        
        
        
        ,,    ,,                                                                                                                                                
              `7MM    db   mm       `7MM"""Yp,                `7MM"""YMM  `YMM'   `MP' `7MM"""Mq.`7MMF'        .g8""8q. `7MMF'MMP""MM""YMM     `YMM'   `MM'MMP""MM""YMM 
                MM         MM         MM    Yb                  MM    `7    VMb.  ,P     MM   `MM. MM        .dP'    `YM. MM  P'   MM   `7       VMA   ,V  P'   MM   `7 
 .gP"Ya    ,M""bMM  `7MM mmMMmm       MM    dP `7M'   `MF'      MM   d       `MM.M'      MM   ,M9  MM        dM'      `MM MM       MM             VMA ,V        MM      
,M'   Yb ,AP    MM    MM   MM         MM"""bg.   VA   ,V        MMmmMM         MMb       MMmmdM9   MM        MM        MM MM       MM              VMMP         MM      
8M"""""" 8MI    MM    MM   MM         MM    `Y    VA ,V         MM   Y  ,    ,M'`Mb.     MM        MM      , MM.      ,MP MM       MM               MM          MM      
YM.    , `Mb    MM    MM   MM         MM    ,9     VVV          MM     ,M   ,P   `MM.    MM        MM     ,M `Mb.    ,dP' MM       MM               MM          MM      
 `Mbmmd'  `Wbmd"MML..JMML. `Mbmo    .JMMmmmd9      ,V         .JMMmmmmMMM .MM:.  .:MMa..JMML.    .JMMmmmmMMM   `"bmmd"' .JMML.   .JMML.           .JMML.      .JMML.    
                                                  ,V                                                                                                                    
                                               OOb"                                                                                                                         
                                                                                                                         
                                                                                                       
888888ba            .88888.           d888888P dP                 88888888b oo  .88888.  dP       d888888P           888888ba  
88    `8b          d8'   `88             88    88                 88           d8'   `88 88          88              88    `8b 
88     88 .d8888b. 88        d888888b    88    88d888b. .d8888b. a88aaaa    dP 88        88d888b.    88    .d8888b. a88aaaa8P' 
88     88 88'  `88 88   YP88    .d8P'    88    88'  `88 88ooood8  88        88 88   YP88 88'  `88    88    88ooood8  88   `8b. 
88    .8P 88.  .88 Y8.   .88  .Y8P       88    88    88 88.  ...  88        88 Y8.   .88 88    88    88    88.  ...  88     88 
8888888P  `88888P'  `88888'  d888888P    dP    dP    dP `88888P'  dP        dP  `88888'  dP    dP    dP    `88888P'  dP     dP 

*************(Created this using DoGzTheFiGhTeR) *************

 ███████████████████████████████████████████████████████████████████████████ 
 ██									                                      ██						
 ██             If you have any question add me on discord                ██
 ██                                                                       ██
 ██			    -Wizards n Kings GPC Scripts Moderator FPS                ██
 ██              Discord ----> https://discord.gg/TJcfFFgpj5		      ██
 ██									                                      ██  
 ██				-Exploit YT Moderator/Server creator.                     ██	
 ██	             Discord ----> https://discord.gg/TJcfFFgpj5	          ██	    
 ██	                                                                      ██	
 ██	                        or Exploit YT#4891		                      ██ 
 ██									                                      ██ 
 ███████████████████████████████████████████████████████████████████████████
										
										
 ███████████████████████████████████████████████████████████████████████████
 ██	                           Instructions				                  ██
 ███████████████████████████████████████████████████████████████████████████
 ██                                                                       ██
 ██            to enter the zen menu, you must press L2 + OPTIONS.        ██
 ██                                                                       ██
 ██                     ENTER EDIT MENU EQUIS / X                         ██
 ██                                                                       ██
 ██                    Exit MENU Touch B / CIRCLE                         ██
 ██                                                                       ██ 
 ███████████████████████████████████████████████████████████████████████████
 

 ███████████████████████████████████████████████████████████████████████████
 ██                                MODS                                   ██
 ███████████████████████████████████████████████████████████████████████████
 ██									                                      ██
 ██                     	  PolarVIAssist                               ██
 ██							  PolarVIBoost 		                          ██
 ██                                                                       ██
 ███████████████████████████████████████████████████████████████████████████
 ██									                                      ██
 ██                         DoGzComboRecoil                               ██
 ██									                                      ██
 ███████████████████████████████████████████████████████████████████████████
 ██									                                      ██
 ██                  Crouch Shot Spam "Assist Glich"                      ██
 ██					                                                      ██
 ██                  ACTIVATE AND DEACTIVATE L2 + R3		              ██
 ██                                                                       ██
 ███████████████████████████████████████████████████████████████████████████
 ██									                                      ██
 ██                           Strafe Shot                                 ██
 ██									                                      ██ 
 ██                 ACTIVATE AND DEACTIVATE L2 + RIGHT 	                  ██
 ██									                                      ██
 ███████████████████████████████████████████████████████████████████████████								 
 ██									                                      ██
 ██                          Rapid Fire                                   ██ 
 ██				                                                          ██
 ██                ACTIVATE AND DEACTIVATE L2 + UP                        ██
 ██                                                                       ██
 ███████████████████████████████████████████████████████████████████████████

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR","Edit ExploitYT","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {"" , " DoGz Polar VI AA" , " Polar Boost VI"  , " DoGz Combo AR" , "   Crouch Shot"  , "   Strafe Shot" , "   Rapid Fire" , "  Hair Triggers"  , "   Block Rumble" };
const string ModValue [] = {""   , "DoGz Polar Radius"  , "DoGz Polar Angle"  , "DoGz Radius Boost"  , "DoGz Angle Boost"  , "DoGz Polar Release"  , "Combo AR 1 RY"  , "Combo AR 1 RX"  , "Combo AR 1 Delay"  , "Crouch Shot Wait"  , "Strafe Shot Wait"  , " Rapid Fire Hold" , " Rapid Fire Wait" };
const int16 ModDigitMin [] = {  0  , 1 , 2 , 1 , 2 , 1 , 1 , -50 , 10 , 40 , 100 , 30 , 30};
const int16 ModDigitMax [] = {  0  , 50 , 90 , 20 , 90 , 50 , 100 , 50 , 990 , 1500 , 3000 , 200 , 200};
const int16 ModDigitInc [] = {  0  , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 10 , 10 , 10 , 10};
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const string CrouchShotL  = " Crouch Shot Mod";
const string StrafeShotL  = " Strafe Shot Mod";
const string FireModL     = " Master Fire Mod";
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Switch   = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_R3;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define Strafe   = PS4_LX;
define Walk     = PS4_LY;
define PY       = POLAR_RY;
define PX       = POLAR_RX;
define PS       = POLAR_RS;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

//SPAM CROUCH BUTTONS TO ACTIVATE OR DEACTIVATE
define CrouchShotHold   = PS4_L2;
define CrouchShotPress  = PS4_R3;

//STRAFE BUTTONS TO ACTIVATE OR DEACTIVATE
define StrafeShotHold   = PS4_L2;
define StrafeShotPress  = PS4_RIGHT;

//QUICK FIRE BUTTONS TO ACTIVATE OR DEACTIVATE
define FireModHold      = PS4_L2;
define FireModPress     = PS4_UP;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_CIRCLE;
define ChangeMenuPress = PS4_CROSS;

//Show Current Slot Info Buttons;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 1;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 8;
define IndexMinValues   = 1;
define IndexMaxValues   = 12;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt,VibA,VibB;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int ToggleT,ToggleTime,ToggleName,Modled;
int DoGzVIRadius,DoGzVIAngle,VISpeed;
int Output;
int VerticalAR,HorizontalAR;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                Aim Assist Hip Fire                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define PolarVIAAHip   = Off;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(            Anti Recoil Hip Fire/Settings           )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
// Anti Recoil Hip Fire
define DoGzComboARHip   = Off;
// Anti Recoil Inverted
define InvertedYAxis    = Off;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                Fire Mods Hip Fire                  )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RapidFireHip  = Off;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int PolarRadius      = 27;
int PolarAngle       = 20;
int PolarRadiusBoost = 5;
int PolarAngleBoost  = 10;
int PolarRelease     = 20;
int ComboAR1RY       = 33;
int ComboAR1RX       = 0;
int ComboAR1Wait     = 10;
int CrouchShotWait   = 40;
int StrafeWait       = 140;
int RapidFireHold    = 30;
int RapidFireWait    = 30;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModSwitch;
int PolarVIAssist     =  On;
int PolarVIBoost      = Off;
int DoGzComboRecoil   =  On;
int CrouchShot        =  On;
int StrafeShot        =  On;
int RapidFire         =  Off;
int HairTriggers      =  On;
int BlockRumble       =  On;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(           Quick Toggles Default State              )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
int CrouchShotMod  = On;
int StrafeShotMod  = On;
int RapidFireMod   = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    combo_run(Boot);
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {

    if (BlockRumble) {
        block_rumble();
    }

        if (HairTriggers) {
            
            deadzone(PS4_L2,PS4_R2,100,100);
        
        }      

        if (PolarVIAssist) {
        
            if (get_ival(Ads) || (PolarVIAAHip && get_ival(Fire))) { 
            
                if (abs(get_ival(AimX)) <= PolarRelease && abs(get_ival(AimY)) <= PolarRelease) {
                
                    if (PolarVIBoost && get_ival(Fire)) {
                        
                        DoGzVIRadius = PolarRadius + PolarRadiusBoost;
                        DoGzVIAngle = PolarAngle + PolarAngleBoost;
                    
                    } else {
                        
                        DoGzVIRadius = PolarRadius;
                        DoGzVIAngle = PolarAngle;
                    }
                
                    set_polar(PS,VISpeed = (VISpeed + DoGzVIAngle) % 360,(abs(get_ival(PX)) + abs(get_ival(PY))) / 4 + DoGzVIRadius * 328);
                }
            }
        }

    if (CrouchShotMod) {

        if (CrouchShot) {
        
            if (get_ival(Fire)) {
                
                combo_run(CrouchShot);
            
            } else {
                    
                combo_stop(CrouchShot);
            }
        }

    }

    if (StrafeShotMod) {

        if (StrafeShot) {
        
            if (get_ival(Ads) && get_ival(Fire)) {
            
                if (abs(get_ival(Strafe)) <= 35 && abs(get_ival(Walk)) <= 35) {    
                
                    combo_run(StrafeShot);
            
                } else {
                    
                    combo_stop(StrafeShot);
                }
            }
      }
}

     if (RapidFireMod) {
        
        if (RapidFire) {

            if (get_ival(Ads) && get_ival(Fire)) {
            
                combo_run(RapidFire);    
                
            } else {
                
                combo_stop(RapidFire);
            }
      }
 }
        
        if (DoGzComboRecoil) {        

            if (DoGzComboARHip && get_ival(Fire)) {
                
                DoGzPolarAR(Off,Off);
                combo_run(AntiRecoil);
                
            } else if (get_ival(Ads) && get_ival(Fire)) {
                
                DoGzPolarAR(Off,Off);
                combo_run(AntiRecoil);
            
            } else {
            
                VerticalAR   = 0;  
                HorizontalAR = 0;
                combo_stop(AntiRecoil);
            }
        }

        if (CrouchShot && get_ival(CrouchShotHold) && event_press(CrouchShotPress)) {

            Shunt = CrouchShotPress;
            CrouchShotMod = !CrouchShotMod;
            ToggleName = On;
            Toggle(CrouchShotMod,CrouchShotL[0]);
        }

        if (StrafeShot && get_ival(StrafeShotHold) && event_press(StrafeShotPress)) {

            Shunt = StrafeShotPress;
            StrafeShotMod = !StrafeShotMod;
            ToggleName = On;
            Toggle(StrafeShotMod,StrafeShotL[0]);
        }

        if (RapidFire && get_ival(FireModHold) && event_press(FireModPress)) {

            Shunt = FireModPress;
            RapidFireMod = !RapidFireMod;
            ToggleName = On;
            Toggle(RapidFireMod,FireModL[0]);
        }
   
   
   if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

        Shunt = MenuEnterPress;
        MenuToggle(On,Off,On,On,On);
        VibB = On;
        combo_run(Rumble);
    }

    if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

        if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

            MenuTimeout = Off;
        }

            if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {
            
                if (event_press(MenuExitPress))
                
                    Shunt = MenuExitPress;
                
                MenuToggle(Off,Off,Off,Off,Off);
                VibB = On;
                combo_run(Rumble);
            }

            if (event_press(ChangeMenuPress)) {

                MenuValues = !MenuValues;
                MenuSwitch = !MenuSwitch;
                ModIndex = On;
                Update = On;
            }

        if (MenuValues) {

            ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModDigitInc[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

        if (MenuSwitch) {

            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}

				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu) { 
        
        if (get_ival(FindSlotHold) && event_press(FindSlotPress)) {
            
            Shunt = FindSlotPress;
            Slot = On;
            combo_run(Boot);
        }
    }

    if (ToggleTime) {
        TimeToggle();
    }

    if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        
        } else {
                set_val(Shunt,Off);
         }
      }
   }

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo AntiRecoil {
    
    VerticalAR   = ComboAR1RY * 327;  
    HorizontalAR = 0;
    wait(ComboAR1Wait);
    HorizontalAR = ComboAR1RX * 327;
    VerticalAR   = 0;  
    wait(ComboAR1Wait);
}

combo CrouchShot {

    set_val(Crouch,100);
    wait(50);
    set_val(Crouch,0);
    wait(20);
    wait(CrouchShotWait);
}

combo StrafeShot {

    set_val(Strafe,-100);
    wait(StrafeWait);
    set_val(Strafe,100);
    wait(StrafeWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
    else if (VibB)
            
        set_rumble(RUMBLE_B,15);
    
        wait(250);
        VibA = Off;
        VibB = Off;
        reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    
    } else {
        
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,15);
    }
    
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
        set_rgb(255,0,0);

    reset_rumble();
    reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function DoGzGetPolar(Current,Received) {
    
    Output = Current / 10 + Received / 10;
    
        if(Output <= -3276) return -32768; 
        if(Output >=  3276) return  32767; 

    return Current + Received; 
} 

function DoGzPolarAR(Rotation,Radial) {       
      
    set_polar(PS,Rotation,Radial);
    set_val(PX,DoGzGetPolar(get_val(PX) + (HorizontalAR),get_ival(PX)));
    
    if (InvertedYAxis) 
        
        set_val(PY,DoGzGetPolar(get_val(PY) + (inv(VerticalAR)),get_ival(PY)));
        
    else
    
        set_val(PY,DoGzGetPolar(get_val(PY) + (VerticalAR),get_ival(PY)));        
}

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
    
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
        combo_run(VibrateBlink);
    
    if (ToggleName) {
        
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        
        } else {
                
            printf(36,38,0,1,MiscString[7]);
        }
        
        ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
    if (!MainMenu && ToggleT >= 5000) {
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}

function BlockButton(Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle(Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;
}
  
function PrintMod(ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

    if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
        Update = On;
        ModVal += ModValInc;
        ModMonitor(ModValLbl);

        if (ModVal >= ModValMax) return ModValMax;

        if (ModVal >= ModValMax) return ModValMax;
    } 
 
    if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

        Update = On;
        ModVal -= ModValInc;
        ModMonitor(ModValLbl);

        if (ModVal <= ModValMin) return ModValMin;

        if (ModVal <= ModValMin) return ModValMin;
    }

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
 
function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
    
    }
    
    if (Mon == ModToggle[6]) {
    
    }
    
}
    
function Grid() { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll() {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit(Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue(Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod(Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };