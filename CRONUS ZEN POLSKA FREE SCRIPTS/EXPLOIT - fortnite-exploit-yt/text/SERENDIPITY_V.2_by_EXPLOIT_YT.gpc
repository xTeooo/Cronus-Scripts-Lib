
/*
  
 .----------------.  .----------------.  .----------------.  .----------------.  .-----------------. .----------------.  .----------------.  .----------------. 
| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
| |  _________   | || |     ____     | || |  _______     | || |  _________   | || | ____  _____  | || |     _____    | || |  _________   | || |  _________   | |
| | |_   ___  |  | || |   .'    `.   | || | |_   __ \    | || | |  _   _  |  | || ||_   \|_   _| | || |    |_   _|   | || | |  _   _  |  | || | |_   ___  |  | |
| |   | |_  \_|  | || |  /  .--.  \  | || |   | |__) |   | || | |_/ | | \_|  | || |  |   \ | |   | || |      | |     | || | |_/ | | \_|  | || |   | |_  \_|  | |
| |   |  _|      | || |  | |    | |  | || |   |  __ /    | || |     | |      | || |  | |\ \| |   | || |      | |     | || |     | |      | || |   |  _|  _   | |
| |  _| |_       | || |  \  `--'  /  | || |  _| |  \ \_  | || |    _| |_     | || | _| |_\   |_  | || |     _| |_    | || |    _| |_     | || |  _| |___/ |  | |
| | |_____|      | || |   `.____.'   | || | |____| |___| | || |   |_____|    | || ||_____|\____| | || |    |_____|   | || |   |_____|    | || | |_________|  | |
| |              | || |              | || |              | || |              | || |              | || |              | || |              | || |              | |
| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
 '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'
  
  
                             _____  _____ ______  _____  _   _ ______  _____ ______  _____  _____ __   __       _   _     _____ 
                            /  ___||  ___|| ___ \|  ___|| \ | ||  _  \|_   _|| ___ \|_   _||_   _|\ \ / /      | | | |   / __  \
                            \ `--. | |__  | |_/ /| |__  |  \| || | | |  | |  | |_/ /  | |    | |   \ V /       | | | |   `' / /'
                             `--. \|  __| |    / |  __| | . ` || | | |  | |  |  __/   | |    | |    \ /        | | | |     / /  
                            /\__/ /| |___ | |\ \ | |___ | |\  || |/ /  _| |_ | |     _| |_   | |    | |        \ \_/ / _ ./ /___
                            \____/ \____/ \_| \_|\____/ \_| \_/|___/   \___/ \_|     \___/   \_/    \_/         \___/ (_)\_____/
                                                                                                    

                                                    
                                            ┌─┐┬─┐┌─┐┌─┐┌┬┐┌─┐┌┬┐  ┌┐ ┬ ┬  ╔═╗─┐ ┬┌─┐┬  ┌─┐┬┌┬┐  ╦ ╦╔╦╗
                                            │  ├┬┘├┤ ├─┤ │ ├┤  ││  ├┴┐└┬┘  ║╣ ┌┴┬┘├─┘│  │ ││ │   ╚╦╝ ║ 
                                            └─┘┴└─└─┘┴ ┴ ┴ └─┘─┴┘  └─┘ ┴   ╚═╝┴ └─┴  ┴─┘└─┘┴ ┴    ╩  ╩ 


                              ///////////////////////////////////////////////////////////////////////////////////////////////
                              // FOLLOW ME ON MY YOUTUBE CHANNEL: https://www.youtube.com/channel/UCLPFWoE8Vngh4wuuwV4ItdQ //
                              ///////////////////////////////////////////////////////////////////////////////////////////////



▪   ▐ ▄      ▄▄ •  ▄▄▄· • ▌ ▄ ·. ▄▄▄ .    ▄▄▄▄· ▄• ▄▌▄▄▄▄▄▄▄▄▄▄       ▐ ▄ .▄▄ · 
██ •█▌▐█    ▐█ ▀ ▪▐█ ▀█ ·██ ▐███▪▀▄.▀·    ▐█ ▀█▪█▪██▌•██  •██  ▪     •█▌▐█▐█ ▀. 
▐█·▐█▐▐▌    ▄█ ▀█▄▄█▀▀█ ▐█ ▌▐▌▐█·▐▀▀▪▄    ▐█▀▀█▄█▌▐█▌ ▐█.▪ ▐█.▪ ▄█▀▄ ▐█▐▐▌▄▀▀▀█▄
▐█▌██▐█▌    ▐█▄▪▐█▐█ ▪▐▌██ ██▌▐█▌▐█▄▄▌    ██▄▪▐█▐█▄█▌ ▐█▌· ▐█▌·▐█▌.▐▌██▐█▌▐█▄▪▐█
▀▀▀▀▀ █▪    ·▀▀▀▀  ▀  ▀ ▀▀  █▪▀▀▀ ▀▀▀     ·▀▀▀▀  ▀▀▀  ▀▀▀  ▀▀▀  ▀█▄▀▪▀▀ █▪ ▀▀▀▀ */

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_R3;
define Edit     = PS4_L3;
define Select   = PS4_R2;
define Confirm  = PS4_R3;
define Reset    = PS4_R1;
define Build    = PS4_CIRCLE;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define Walk     = PS4_LY;
define Strafe   = PS4_LX;
define On       = TRUE;
define Off      = FALSE;

/*
• ▌ ▄ ·.       ·▄▄▄▄      ▄▄▄▄· ▄• ▄▌▄▄▄▄▄▄▄▄▄▄       ▐ ▄ .▄▄ · 
·██ ▐███▪▪     ██▪ ██     ▐█ ▀█▪█▪██▌•██  •██  ▪     •█▌▐█▐█ ▀. 
▐█ ▌▐▌▐█· ▄█▀▄ ▐█· ▐█▌    ▐█▀▀█▄█▌▐█▌ ▐█.▪ ▐█.▪ ▄█▀▄ ▐█▐▐▌▄▀▀▀█▄
██ ██▌▐█▌▐█▌.▐▌██. ██     ██▄▪▐█▐█▄█▌ ▐█▌· ▐█▌·▐█▌.▐▌██▐█▌▐█▄▪▐█
▀▀  █▪▀▀▀ ▀█▄▀▪▀▀▀▀▀•     ·▀▀▀▀  ▀▀▀  ▀▀▀  ▀▀▀  ▀█▄▀▪▀▀ █▪ ▀▀▀▀ 
*/

define EditAssist    = PS4_L3; //EDIT BUTTON IN GAME CANNOT HAVE HOLD TIME (USED AS EDIT ASSIT BUTTON)
define FastReset     = PS4_TOUCH;  //ONE BUTTON RESET DOES MATCH IN GAME TO ANYTHING


/*
• ▌ ▄ ·.       ·▄▄▄▄      ▄▄▄▄▄       ▄▄ •  ▄▄ • ▄▄▌  ▄▄▄ ..▄▄ · 
·██ ▐███▪▪     ██▪ ██     •██  ▪     ▐█ ▀ ▪▐█ ▀ ▪██•  ▀▄.▀·▐█ ▀. 
▐█ ▌▐▌▐█· ▄█▀▄ ▐█· ▐█▌     ▐█.▪ ▄█▀▄ ▄█ ▀█▄▄█ ▀█▄██▪  ▐▀▀▪▄▄▀▀▀█▄
██ ██▌▐█▌▐█▌.▐▌██. ██      ▐█▌·▐█▌.▐▌▐█▄▪▐█▐█▄▪▐█▐█▌▐▌▐█▄▄▌▐█▄▪▐█
▀▀  █▪▀▀▀ ▀█▄▀▪▀▀▀▀▀•      ▀▀▀  ▀█▄▀▪·▀▀▀▀ ·▀▀▀▀ .▀▀▀  ▀▀▀  ▀▀▀▀ 
*/ 


////////////////////////////////////////////////////////////////////////////////////////////////////////////!!!
int AimAssistExploit_E  =  On;    //  ** Aim Assist EXPLOIT **        !!! EXPONENCIAL !!!


////////////////////////////////////////////////////////////////////////////////////////////////////////////!!!
int AimAssistExploit_L  =  Off;    //  ** Aim Assist EXPLOIT **          !!! LINEAL !!!

////////////////////////////////////////////////////////////////////////////////////////////////////////////!!!
int AimAssistFire       =  On;

 
int QuickEditAssist     =  Off;  // Edit Assist
int InstaFastReset      =  Off;  // Fast Reset
int BuildTracker        =  On;  // Build Tracking Mode
int StandardAHip        =  Off; // Invert RY Axis Ads
int Antirecoil          =  On;  // Anti Recoil
int DropShot_AntiBloom  =  On;  // Drop shot + anti bloom

/*
• ▌ ▄ ·.       ·▄▄▄▄       ▌ ▐· ▄▄▄· ▄▄▌  ▄• ▄▌▄▄▄ ..▄▄ ·     ▄▄▄▄▄▪  • ▌ ▄ ·. ▄▄▄ ..▄▄ · 
·██ ▐███▪▪     ██▪ ██     ▪█·█▌▐█ ▀█ ██•  █▪██▌▀▄.▀·▐█ ▀.     •██  ██ ·██ ▐███▪▀▄.▀·▐█ ▀. 
▐█ ▌▐▌▐█· ▄█▀▄ ▐█· ▐█▌    ▐█▐█•▄█▀▀█ ██▪  █▌▐█▌▐▀▀▪▄▄▀▀▀█▄     ▐█.▪▐█·▐█ ▌▐▌▐█·▐▀▀▪▄▄▀▀▀█▄
██ ██▌▐█▌▐█▌.▐▌██. ██      ███ ▐█ ▪▐▌▐█▌▐▌▐█▄█▌▐█▄▄▌▐█▄▪▐█     ▐█▌·▐█▌██ ██▌▐█▌▐█▄▄▌▐█▄▪▐█
▀▀  █▪▀▀▀ ▀█▄▀▪▀▀▀▀▀•     . ▀   ▀  ▀ .▀▀▀  ▀▀▀  ▀▀▀  ▀▀▀▀      ▀▀▀ ▀▀▀▀▀  █▪▀▀▀ ▀▀▀  ▀▀▀▀ 
*/ 

//LINEAL//
int ExploitLAARX    = 27;
int ExploitLAARY    = 27;
int ExploitLAASWait = 10;
int ExploitYtRel    = 20;


//EXPONENCIAL//
int ExploitoffAARX   = 30;  // ** Aim Assist Six **
int ExploitoffAARY   = 30;  // ** Aim Assist Six **
int ExploitoffAAWait = 10;  // ** Aim Assist Six **
int ExploitFallReleae = 70;  // ** Aim Assist Six **   Or   ** Aim Assist Five **


//AIM ASSIST FIRE//
int AimAssistFire_Strength  = 17; //17

//ANTI RECOIL//
int AntiRecoil = 16;

//EDIT ASSIST//
int EditDelay      = 22;    // Edit Assist Hold Delay On Select

/*
.▄▄ ·  ▄▄· ▄▄▄  ▪   ▄▄▄·▄▄▄▄▄     ▌ ▐· ▄▄▄· ▄▄▄  ▪   ▄▄▄· ▄▄▄▄· ▄▄▌  ▄▄▄ ..▄▄ · 
▐█ ▀. ▐█ ▌▪▀▄ █·██ ▐█ ▄█•██      ▪█·█▌▐█ ▀█ ▀▄ █·██ ▐█ ▀█ ▐█ ▀█▪██•  ▀▄.▀·▐█ ▀. 
▄▀▀▀█▄██ ▄▄▐▀▀▄ ▐█· ██▀· ▐█.▪    ▐█▐█•▄█▀▀█ ▐▀▀▄ ▐█·▄█▀▀█ ▐█▀▀█▄██▪  ▐▀▀▪▄▄▀▀▀█▄
▐█▄▪▐█▐███▌▐█•█▌▐█▌▐█▪·• ▐█▌·     ███ ▐█ ▪▐▌▐█•█▌▐█▌▐█ ▪▐▌██▄▪▐█▐█▌▐▌▐█▄▄▌▐█▄▪▐█
 ▀▀▀▀ ·▀▀▀ .▀  ▀▀▀▀.▀    ▀▀▀     . ▀   ▀  ▀ .▀  ▀▀▀▀ ▀  ▀ ·▀▀▀▀ .▀▀▀  ▀▀▀  ▀▀▀▀ 
*/

int Shunt;
int Edit1,Edit2,EditT,BuildTrack;
int Anti_Recoil;

const string Misc[] = { "Serendipity[V.2]", "On", "Off","EXPO+LINEAR","Made By","EXPLOIT YT","KillSwitch","Enabled","Disabled","" }; 
int ScreenSaver,BlankScreen,ModMenu,DisplayMenu,ModNameIdx,Toggle,EditMenu,ValNameIdx,KillSwitch; 
const string ValNames[] = { "Val1","Val2","Val3",""}; 
const string ModNames[] = { "Mod1","Mod2", "Mod3",""}; 
int DisplayTitle = TRUE; //Display Title When The Script Loads, This Needs TO Be TRUE. 

main {

/*	
	
███████ ██████  ██ ████████      █████  ███████ ███████ ██ ███████ ████████ 
██      ██   ██ ██    ██        ██   ██ ██      ██      ██ ██         ██     ██
█████   ██   ██ ██    ██        ███████ ███████ ███████ ██ ███████    ██    
██      ██   ██ ██    ██        ██   ██      ██      ██ ██      ██    ██    
███████ ██████  ██    ██        ██   ██ ███████ ███████ ██ ███████    ██     ██
*/
	
	if(QuickEditAssist) {
	 	if (!get_ival(Ads) && get_ival(EditAssist)) {
			EditAssist();
			Edit1 = On;
		    BuildTrack = On;
		}

			if (event_release(EditAssist)) {
				combo_run(Confirm);
				EditT = Off;
				Edit1 = Off;
			    BuildTrack = Off;
			}
	}


	
/*   
███████  █████  ███████ ████████     ██████  ███████ ███████ ███████ ████████ 
██      ██   ██ ██         ██        ██   ██ ██      ██      ██         ██    ██
█████   ███████ ███████    ██        ██████  █████   ███████ █████      ██   
██      ██   ██      ██    ██        ██   ██ ██           ██ ██         ██    
██      ██   ██ ███████    ██        ██   ██ ███████ ███████ ███████    ██    ██
*/
   
   if (InstaFastReset && !get_ival(Ads) && event_press(FastReset)) { 
       
            Shunt = FastReset;
        	combo_run(FastReset);
    }

    if (Edit2) {
            if (event_release(Select)) {  
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
     }
}

/*	     
██████  ██    ██ ██ ██      ██████  ████████ ██████   █████   ██████ ██   ██ ███████ ██████    
██   ██ ██    ██ ██ ██      ██   ██    ██    ██   ██ ██   ██ ██      ██  ██  ██      ██   ██   ██
██████  ██    ██ ██ ██      ██   ██    ██    ██████  ███████ ██      █████   █████   ██████  
██   ██ ██    ██ ██ ██      ██   ██    ██    ██   ██ ██   ██ ██      ██  ██  ██      ██   ██ 
██████   ██████  ██ ███████ ██████     ██    ██   ██ ██   ██  ██████ ██   ██ ███████ ██   ██   ██
*/

  if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
       
       }
  }
    
 if (!BuildTrack) {	

/*
 █████  ██ ███    ███      █████  ███████ ███████ ██ ███████ ████████     ███████ ██ ██████  ███████ 
██   ██ ██ ████  ████     ██   ██ ██      ██      ██ ██         ██        ██      ██ ██   ██ ██        ██ 
███████ ██ ██ ████ ██     ███████ ███████ ███████ ██ ███████    ██        █████   ██ ██████  █████   
██   ██ ██ ██  ██  ██     ██   ██      ██      ██ ██      ██    ██        ██      ██ ██   ██ ██      
██   ██ ██ ██      ██     ██   ██ ███████ ███████ ██ ███████    ██        ██      ██ ██   ██ ███████   ██
*/    
    
    if(AimAssistFire) {   

         if(get_val(Fire)> 95){ combo_run(ASSISTFIRE);}
         if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
         combo_stop(ASSISTFIRE);
      }
 
 
/*   	
 █████  ██ ███    ███      █████  ███████ ███████ ██ ███████ ████████     ██      ██ ███    ██ ███████  █████  ██████         
██   ██ ██ ████  ████     ██   ██ ██      ██      ██ ██         ██        ██      ██ ████   ██ ██      ██   ██ ██   ██   ██ 
███████ ██ ██ ████ ██     ███████ ███████ ███████ ██ ███████    ██        ██      ██ ██ ██  ██ █████   ███████ ██████         
██   ██ ██ ██  ██  ██     ██   ██      ██      ██ ██      ██    ██        ██      ██ ██  ██ ██ ██      ██   ██ ██   ██      
██   ██ ██ ██      ██     ██   ██ ███████ ███████ ██ ███████    ██        ███████ ██ ██   ████ ███████ ██   ██ ██   ██   ██     
                                                                                                                              
*/ 
 
    if (AimAssistExploit_L){        
        
          if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
              if (abs(get_ival(AimX)) <= ExploitYtRel && abs(get_ival(AimY)) <= ExploitYtRel) {
                
                 combo_run(LINEAL);
              }
        }
                 else {
                 combo_stop(LINEAL);
   }
}

 
 /*
 █████  ██ ███    ███      █████  ███████ ███████ ██ ███████ ████████     ███████ ██   ██ ██████   ██████  
██   ██ ██ ████  ████     ██   ██ ██      ██      ██ ██         ██        ██       ██ ██  ██   ██ ██    ██    ██
███████ ██ ██ ████ ██     ███████ ███████ ███████ ██ ███████    ██        █████     ███   ██████  ██    ██ 
██   ██ ██ ██  ██  ██     ██   ██      ██      ██ ██      ██    ██        ██       ██ ██  ██      ██    ██ 
██   ██ ██ ██      ██     ██   ██ ███████ ███████ ██ ███████    ██        ███████ ██   ██ ██       ██████     ██
*/                                                                                                           
    
    
    if (AimAssistExploit_E){        
        
        if ((get_val(Ads)) || (get_val(Fire))) {
            if (abs(get_val(AimX)) <= ExploitFallReleae && abs(get_val(AimY)) <= ExploitFallReleae) {
                
                combo_run(EXPONENCIAL);
       }
  }
    
 
/*  
 █████  ███    ██ ████████ ██     ██████  ██       ██████   ██████  ███    ███     
██   ██ ████   ██    ██    ██     ██   ██ ██      ██    ██ ██    ██ ████  ████     
███████ ██ ██  ██    ██    ██     ██████  ██      ██    ██ ██    ██ ██ ████ ██     
██   ██ ██  ██ ██    ██    ██     ██   ██ ██      ██    ██ ██    ██ ██  ██  ██     
██   ██ ██   ████    ██    ██     ██████  ███████  ██████   ██████  ██      ██     
                                                                                   
                                                                                   
██████  ██████   ██████  ██████      ███████ ██   ██  ██████  ██████               
██   ██ ██   ██ ██    ██ ██   ██     ██      ██   ██ ██    ██ ██   ██  ██            
██   ██ ██████  ██    ██ ██████      ███████ ███████ ██    ██ ██████               
██   ██ ██   ██ ██    ██ ██               ██ ██   ██ ██    ██ ██                   
██████  ██   ██  ██████  ██          ███████ ██   ██  ██████  ██       ██             
*/


    if(DropShot_AntiBloom){

        if(get_val(Ads) && get_val(Fire)) {  
            combo_run(AntiBloom);
      }
    }
 


/*   	 
 █████  ███    ██ ████████ ██     ██████  ███████  ██████  ██████  ██ ██        
██   ██ ████   ██    ██    ██     ██   ██ ██      ██      ██    ██ ██ ██         ██
███████ ██ ██  ██    ██    ██     ██████  █████   ██      ██    ██ ██ ██      
██   ██ ██  ██ ██    ██    ██     ██   ██ ██      ██      ██    ██ ██ ██      
██   ██ ██   ████    ██    ██     ██   ██ ███████  ██████  ██████  ██ ███████    ██
*/

     if(Antirecoil){                               
     
     if(get_val(Ads) && get_val(Fire)) {      
       combo_run(AntiRecoil); }               

    if(abs(get_val(AimY)) > 36 || abs(get_val(AimX)) > 36) { 
       combo_stop (AntiRecoil); 
          }               
       }
     }
   } 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------//

/*
,--.   ,--.,------.,--.  ,--.,--. ,--.     ,-----. ,--.   ,------.,------.   
|   `.'   ||  .---'|  ,'.|  ||  | |  |    '  .-.  '|  |   |  .---'|  .-.  \  
|  |'.'|  ||  `--, |  |' '  ||  | |  |    |  | |  ||  |   |  `--, |  |  \  : 
|  |   |  ||  `---.|  | `   |'  '-'  '    '  '-'  '|  '--.|  `---.|  '--'  / 
`--'   `--'`------'`--'  `--' `-----'      `-----' `-----'`------'`-------'  
*/

if(DisplayMenu) 
        {
        	cls_oled(OLED_BLACK);  
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE); 
 
        	if(EditMenu)  
        	{
        	printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ValNames[ValNameIdx]);
 
        	} 
        	else if(ModMenu) 
        	{
        	printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_MEDIUM_WIDTH),7,OLED_FONT_MEDIUM,OLED_WHITE,ModNames[ModNameIdx]); 
 
            if(Toggle == 1) 
 
            printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);	
 
    		else if(Toggle == 0) 
 
           	printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);  
 
            }
        	Toggle = FALSE; 
            DisplayMenu = FALSE;
 
        } // End Of Display Menu \\
 
        if(!ModMenu && !EditMenu) 
			if(DisplayTitle)  
			{
				cls_oled(OLED_BLACK);  
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
				printf(center_x(get_misc_chars(0), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[0]);  
				printf(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[3]); 
				printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,Misc[4]); 
				printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]); 
 
				DisplayTitle = FALSE;
        		ScreenSaver  = TRUE; 
			}
			if(ScreenSaver)  // ScreenSaver, After 30 seconds The Display Will Go Blank , THIS IS TO PREVENT SCREEN BURN \\ 
    		{
       			BlankScreen += get_rtime();
 
    			if(BlankScreen >= 30000)
    			{
    				cls_oled(OLED_BLACK);
    				BlankScreen = 0;
    				ScreenSaver = TRUE; 
 
             }
 
        }
  }
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------// 
 
/*
  ______    ______   ___      ___  _______     ______    ________  
 /" _  "\  /    " \ |"  \    /"  ||   _  "\   /    " \  /"       ) 
(: ( \___)// ____  \ \   \  //   |(. |_)  :) // ____  \(:   \___/  
 \/ \    /  /    ) :)/\\  \/.    ||:     \/ /  /    ) :)\___  \    
 //  \ _(: (____/ //|: \.        |(|  _  \\(: (____/ //  __/  \\   
(:   _) \\        / |.  \    /:  ||: |_)  :)\        /  /" \   :)  
 \_______)\"_____/  |___|\__/|___|(_______/  \"_____/  (_______/   
                                                                 */


combo LINEAL {
    
    set_val(AimY,ExploitLAARY * -1);
    wait(ExploitLAASWait);
    set_val(AimX,ExploitLAARX);
    wait(ExploitLAASWait);
    set_val(AimY,ExploitLAARY);
    wait(ExploitLAASWait);
    set_val(AimX,ExploitLAARX * -1);
    wait(ExploitLAASWait);
}

combo EXPONENCIAL {

    Set_Val(AimY,ExploitoffAARY);
    Set_Val(AimX,ExploitoffAARX);
    wait(ExploitoffAAWait);
    Set_Val(AimY,ExploitoffAARY * -1);
    Set_Val(AimX,ExploitoffAARX * -1);
    wait(ExploitoffAAWait);
}

combo ASSISTFIRE {          
    set_val(10, (AimAssistFire_Strength)); wait(10)
    set_val(9, (AimAssistFire_Strength)); wait(10)
    set_val(10, AimAssistFire_Strength * -1); wait(10)
    set_val(9, AimAssistFire_Strength * -1); wait(10)
}

combo AntiRecoil { 
    if(get_val(Fire)) {
    Anti_Recoil = get_val(10) + AntiRecoil;
    if(Anti_Recoil > 100) Anti_Recoil = 100;
    set_val(10, Anti_Recoil);
}
}

combo Confirm {

    set_val(Confirm,100);
    wait(40);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(40)
    set_val(Reset,100);        
    wait(40);
    combo_run(Confirm);
}

combo InstantReset {

    wait(15)
    combo_run(Confirm);
}

combo AntiBloom {

    set_val(Crouch, 100);
    wait(15);
    set_val(Crouch,0);
    wait(25);
}


/* 
  _______  ____  ____  _____  ___    ______  ___________  __      ______    _____  ___    ________  
 /"     "|("  _||_ " |(\"   \|"  \  /" _  "\("     _   ")|" \    /    " \  (\"   \|"  \  /"       ) 
(: ______)|   (  ) : ||.\\   \    |(: ( \___))__/  \\__/ ||  |  // ____  \ |.\\   \    |(:   \___/  
 \/    |  (:  |  | . )|: \.   \\  | \/ \        \\_ /    |:  | /  /    ) :)|: \.   \\  | \___  \    
 // ___)   \\ \__/ // |.  \    \. | //  \ _     |.  |    |.  |(: (____/ // |.  \    \. |  __/  \\   
(:  (      /\\ __ //\ |    \    \ |(:   _) \    \:  |    /\  |\\        /  |    \    \ | /" \   :)  
 \__/     (__________) \___|\____\) \_______)    \__|   (__\_|_)\"_____/    \___|\____\)(_______/ 
*/ 

function EditAssist () {

    EditT += get_rtime();
        if (get_ival(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}

function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}

function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}

function center_x(f_chars,f_font) {
 
 
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}