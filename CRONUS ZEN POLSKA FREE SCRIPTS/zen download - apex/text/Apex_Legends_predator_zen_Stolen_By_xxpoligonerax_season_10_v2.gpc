/*𝔸𝕡𝕖𝕩 𝕃𝕖𝕘𝕖𝕟𝕕𝕤 𝕡𝕣𝕖𝕕𝕒𝕥𝕠𝕣 𝕫𝕖𝕟 𝕩𝕩𝕡𝕠𝕝𝕚𝕘𝕠𝕟𝕖𝕣𝕒𝕩 𝕤𝕖𝕒𝕤𝕠𝕟 𝟙𝟘 𝕧2
〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤
████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░██░░░░░░░░████░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███░░░░░░░░░░░░░░█░░░░░░░░░░░░███░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀░░██░░▄▀▄▀░░████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░░░▄▀░░██░░▄▀░░░░████░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░░░░░█░░▄▀░░░░▄▀▄▀░░█░░▄▀░░░░░░▄▀░░█░░░░░░▄▀░░░░░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░███
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░███████████░░▄▀▄▀░░▄▀▄▀░░██████░░▄▀░░██░░▄▀░░█░░▄▀░░████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░████░░▄▀░░███
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░███░░░░▄▀▄▀▄▀░░░░██████░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░▄▀░░███
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀▄▀▄▀░░████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░███░░░░▄▀▄▀▄▀░░░░██████░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░░░███░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░░░███
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░███████████░░▄▀▄▀░░▄▀▄▀░░██████░░▄▀░░█████████░░▄▀░░██░░▄▀░░█████░░▄▀░░█████████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█████
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░░░▄▀░░██░░▄▀░░░░████░░▄▀░░█████████░░▄▀░░██░░▄▀░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░▄▀▄▀░░█░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░░░░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀░░██░░▄▀▄▀░░████░░▄▀░░█████████░░▄▀░░██░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█░░▄▀░░██░░▄▀░░█████░░▄▀░░█████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀░░█
█░░░░░░██░░░░░░█░░░░░░█████████░░░░░░░░░░░░░░█░░░░░░░░██░░░░░░░░████░░░░░░█████████░░░░░░██░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░███░░░░░░██░░░░░░█████░░░░░░█████░░░░░░░░░░░░░░█░░░░░░██░░░░░░░░░░█
████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████v2
____________________________________________________________________________________________________
〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤
====================================================================================================
____________________________________________________________________________________________________
─█▀▀█ ░█▀▀█ ░█▀▀▀ ▀▄░▄▀ 　 ░█▀▀█ ░█▀▀█ ░█▀▀▀ ░█▀▀▄ ─█▀▀█ ▀▀█▀▀ ░█▀▀▀█ ░█▀▀█ 
░█▄▄█ ░█▄▄█ ░█▀▀▀ ─░█── 　 ░█▄▄█ ░█▄▄▀ ░█▀▀▀ ░█─░█ ░█▄▄█ ─░█── ░█──░█ ░█▄▄▀ 〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤
░█─░█ ░█─── ░█▄▄▄ ▄▀░▀▄ 　 ░█─── ░█─░█ ░█▄▄▄ ░█▄▄▀ ░█─░█ ─░█── ░█▄▄▄█ ░█─░█

<====== ON THE LEFT HAND SIDE OF THE SCRIPT THERE ARE LINE NUMBERS TO FOLLOW FOR TABLE OF CONTENTS AND ETC...
<====== THIS LINE IS 27 FOR EXAMPLE...

TABLE OF CONTENTS - SCROLL DOWN TO SEE ALL THE IMPORTANT INFORMATION...

>MOD MENU NAVIGATION INSTRUCTIONS 	- LINE NUMBERS 59-114

>SWITCH PROFILE BUTTON ASSIGNMENTS 	- LINE NUMBERS 115-139

>CUSTOM BUTTON LAYOUT SECTION 		- LINE NUMBERS 140-150

>MODS INFORMATION SECTION 			- LINE NUMBERS 157-219

>DISABLE HIP FIRE SHOT MODS 		- LINE NUMBERS 187-189

>DISABLE HAIR TRIGGERS 				- LINE NUMBER 216

>MOD TIMES ADJUSTABLE SECTION 		- LINE NUMBERS 221-253

>PARACYST AIM ASSIST ADJUSTABLES 	- LINE NUMBERS 255-269

>ANTI-RECOIL INFORMATION 			- LINE NUMBERS 278-289

>SMART AR INFORMATION/ADJUSTABLES 	- LINE NUMBERS 296-311

>QUICK TOGGLES(NOT IN MENU) SECTION - LINE NUMBERS 319-324

>HOW TO ADJUST ANTI-RECOIL 			- LINE NUMBERS 331-361

>OLED ZEN DEVICE VISUAL DETAILS 	- LINE NUMBERS 364-419

>WRITTEN DETAILED INSTRUCTIONS 		- LINE NUMBERS 421-493

─█▀▀█ ░█▀▀█ ░█▀▀▀ ▀▄░▄▀ 　 ░█▀▀█ ░█▀▀█ ░█▀▀▀ ░█▀▀▄ ─█▀▀█ ▀▀█▀▀ ░█▀▀▀█ ░█▀▀█ 
░█▄▄█ ░█▄▄█ ░█▀▀▀ ─░█── 　 ░█▄▄█ ░█▄▄▀ ░█▀▀▀ ░█─░█ ░█▄▄█ ─░█── ░█──░█ ░█▄▄▀ 
░█─░█ ░█─── ░█▄▄▄ ▄▀░▀▄ 　 ░█─── ░█─░█ ░█▄▄▄ ░█▄▄▀ ░█─░█ ─░█── ░█▄▄▄█ ░█─░█ v2 〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤
|============================================================================================================================== 
                                          INSTRUCTIONS INSTRUCTIONS INSTRUCTIONS  
|============================================================================================================================== 
==== Open WeaponMenu (More Info on the Zen Screen Below)    ===== 		Hold L2/LT and Press XBOX/PS Button             	===
==== WeaponMenu will show the first time loading script																		===
====																														===
|============================================================================================================================== 
==== Navigate between Weapon Categories or Names            ===== 		Tap LEFT or RIGHT on the D-PAD                  	===
==== 																														===
====																														===
|============================================================================================================================== 
==== Switch between Weapon Category or Weapon Name          ===== 		Tap UP or DOWN on the D-PAD        		          	===
====																														===
|============================================================================================================================== 
==== Open modMenu from WeaponMenu				            ===== 				Tap CIRCLE/B			        	    	===
==== Open WeaponMenu from modMenu							=====				Tap SQUARE/X								===                                          
|============================================================================================================================== 
==== Open modMenu or Exit modMenu                           ===== 		Hold L2/LT and tap OPTIONS/MENU                 	===
====																														===
|============================================================================================================================== 
==== To edit the mods in the modMenu                        ===== 			Press CROSS/A to EDIT                           ===
====																														===
|============================================================================================================================== 
==== Navigate between all mods                              ===== 		Tap LEFT or RIGHT on the D-PAD                  	===
====																														===
|============================================================================================================================== 
==== Enable or Disable the diplayed mod                     ===== 		Tap UP for ON == Tap DOWN for OFF               	===
====																														===
==== 					If a mod is displayed with no ON or OFF display then it is ON as of version 2.0						=== <--- Example - Aim Type, Shot Mods, Easy Mods, Global Mods, Misc Mods and Button Layout.
|============================================================================================================================== 
==== Switch Profile In Mod Menu                             ===== 				Tap Triangle/Y                              ===
====																														===
|============================================================================================================================== 
==== Switch Profile In Game                                 =====	 	USER DEFINED BUTTONS (Chosen Below)             	=== <--- DEFAULT IS TRIANGLE/Y
====																														===
|============================================================================================================================== 
==== Edit availble Mods                                     ===== 		Press CROSS/A OR Press CIRCLE/B to Exit Mod     	===
====																														===
|============================================================================================================================== 
==== Edit Values In available Mods                          ===== 	Hold L2/LT & Tap RIGHT to increase + 1          		===
====                                                        =====              Tap LEFT to decrease  - 1          			===
====                                                        =====              Tap UP   to increase  + 10         			===
====                                                        =====              Tap DOWN to decrease  - 10         			===
|==============================================================================================================================  
==== Navigate between values available in the editable mods ===== 			Tap LEFT Or RIGHT                               ===
====																														===
|============================================================================================================================== 
==== To SAVE all mods that have been edited & enabled       ===== 		Press XBOX/PS Button == "SAVED"   			  		===
====																														===
|============================================================================================================================== 
==== To exit Mod Menu once you have saved it                ===== 		Hold L2/LT and Tap OPTIONS/MENU                 	===
====																														===
|============================================================================================================================== 
==== Kill Switch (Disable Everything)                       ===== 		Hold LT/L2 & Double Tap SHARE/VIEW              	===
====																														=== 	   										           
=============================================================================================================================== 
闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺
                               PLEASE READ BELOW  HOW TO CHANGE YOUR BUTTONS FOR SWITCHING PROFILE  
 
                  TO ENABLE PROFILE BUTTONS CHANGE TO TRUE //// TO DISABLE PROFILE BUTTONS CHANGE TO FALSE
                  
    TO CHANGE THE BUTTONS, REPLACE THEM WITH WHAT YOU WOULD LIKE FOR EXAMPLE = PS4_CIRCLE; << REMEMBER TO PUT A SEMICOLON
〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤〤〤尸ㄖ㇄讠Ꮆㄖ𝓝🝗尺闩〤                   
|==============================================================================================================================   
| Enable Or Disable If you want to use only 1 button to switch profile 1 or 2 |*/  define one_button_press = TRUE;          /*|  <--- 1 BUTTON PRESS FOR SWITCHING PROFILES.. CHANGE TO FALSE IF WANT TWO BUTTON PRESS
===============================================================================================================================
| Enable or Disable If you want to use 2 buttons to switch profiles 1 or 2    |*/  define two_button_press = FALSE;        /* |  <--- 2 BUTTON PRESS FOR SWITCHING PROFILES..CHANGE TO TRUE IF WANT TWO BUTTON PRESS, MAKE SURE ONE BUTTON IS FALSE!
===============================================================================================================================
| Choose your button for 1 button to switch profiles             	  |*/ define profile_switch_button1 = PS4_TRIANGLE;    /* |  <--- ONLY 1 BUTTON PRESS, CHOOSE YOUR BUTTON
===============================================================================================================================
| Choose your buttons for 2 buttons to switch profiles                |*/  define profile_switch_button2 = PS4_L2;         /* |  <--- 2 BUTTONS TO SWITCH PROFILES, CHOOSE YOUR BUTTONS
=======================================================================
|                                                                     |*/define profile_switch_button3 = PS4_DOWN;         /* |  <--- CHOOSE YOUR SECOND BUTTON 
                                                                      =========================================================
| Extra Profile is an additional profile (profile 3) below you can choose the buttons to switch without interfering with game |
===============================================================================================================================
| HOLD USER DEFINED BUTTONS to get in Extra profile                    |*/ define profile3_switch_button  = PS4_L2;        /* |  <--- PROFILE 3 IS A SEPERATE PROFILE BUTTON CAN NOT BE THE SAME
| HOLD USER DEFINED BUTTONS to get back out of Extra profile           |*/define profile3_switch_button1 = PS4_TRIANGLE;   /* |  <--- CHOOSE YOUR 2 BUTTONS TO ACTIVATE 

/*=============================================================================================================================
| !!!!!!!!!!!!! IF PROFILE 1&2 GET OUT OF SYNC DOUBLE PRESS USER DEFINED BUTTON OR BUTTONS TO GET BACK IN SYNC !!!!!!!!!!!!!!!!
|============================================================================================================================== 
|==============================================================================================================================
                              CHANGE YOUR BUTTONS FOR CUSTOM LAYOUT FOR APEX LEGENDS	
|==============================================================================================================================		
		 																														*/
		define USER_MELEE_BTN 		= PS4_CIRCLE;/*XB1_B*/  define USER_JUMP_BTN		= PS4_L1; //XB1_LB
		define USER_ABILITY_BTN		= PS4_CROSS; /*XB1_A*/  define USER_PING_BTN        = PS4_R1; //XB1_RB
		define USER_RELOAD_BTN		= PS4_SQUARE;/*XB1_X*/  define USER_AIM_BTN			= PS4_L2; //XB1_LT
															define USER_FIRE_BTN		= PS4_R2; //XB1_RT
		define USER_HEAL_BTN		= PS4_UP; 				define USER_SPRINT_BTN		= PS4_L3; //XB1_LS
		define USER_NADE_BTN	    = PS4_RIGHT;    		define USER_CROUCH_BTN 		= PS4_R3; //XB1_RS
/*
____________________________________________________________________________________________________________________________________________________________		

	!!!!!!!!!!!!IMPORTANT!!!!!!!!IMPORTANT!!!!!!!!!!!!!IMPORTANT!!!!!!!!!IMPORTANT!!!!!!!!!!!!!!!IMPORTANT!!!!!!!!!!!!
	闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺 闩尸㠪乂 尸尺㠪ᗪ闩ㄒ龱尺
!!!!!If you don't know what you are doing with value, leave them Default until you have an understanding of what to use!!!!!!

|============================================================================================================================== 
                                         MODS INFO MODS INFO MODS INFO MODS INFO 
|============================================================================================================================== 
==== 												   ANTI-RECOIL															===
====													  ===																===
==== 	LEGACY		 - Standard AR with Vertical and Horizonatl																===
====	PROGRESSION	 - Progressive AR with Vertical Start/End values and Time in-between value with Horizontal				===
|============================================================================================================================== 
==== 												POLAR AIM ASSIST														===
====													  ===																===
==== 	RADIUS		 - Size of the Aim Assist "Bubble"	  ===	Recommend 20-25	(If Shake decrease until Tolerable)			===
====	STEPS		 - Steps to take around Radius		  ===	Recommend 20-25												===
==== 	STEADY AIM	 - SteadyAim in the initial Aim spot  ===	Recommend 30-35 OR 45-60 if Marksman						===
|==============================================================================================================================  
==== 												   PARACYST   														    ===
====													  ===																===
====	REACH		 - Strength of the Aim Assist		  ===	Recommend 10-25 (NOT EDITABLE IN MENU, ONLY IN SCRIPT)		=== <--- DO NOT NEED TO CHANGE, UNLESS YOU KNOW WHAT YOU ARE DOING
==== 	COURSE		 - Tracking Time					  ===	Recommend 60-80 (NOT EDITABLE IN MENU, ONLY IN SCRIPT)		=== <--- DO NOT NEED TO CHANGE, UNLESS YOU KNOW WHAT YOU ARE DOING
====	PHASE		 - Boost Aim to Target		   		  ===	Recommend 13-20												===
====	CORRECTION	 - Correct Aim to Initial Target	  ===	Recommend 20-25												===
====	FAULTLESS	 - Smoothing Aim Assist				  ===	Recommend 15-25 											===
|============================================================================================================================== 
====                                                   RAPID FIRE															===
====													  ===			Quick Toggle - L2/LT+UP								===
|============================================================================================================================== 
====                                                   QuickScope															===
====													  ===			Quick Toggle - L2/LT+DOWN							===
|==============================================================================================================================
==== 												   SHOT MODS      		              									=== <--- TRUE = Hip fire ONLY and FALSE = Hip Fire Enabled and Aim/Fire Enabled 
====													  ===																===
====	STRAFE		- Strafe when Firing weapon			  ===			*/define HipFireStrafeONLY = FALSE;/*				=== <--- CHOOSE TRUE IF YOU DO NOT WANT TO STRAFE WHEN AIMING AND FIRING 
====	CROUCH		- Crouch when Firing weapon			  ===			*/define HipFireCrouchONLY = FALSE;/*				=== <--- CHOOSE TRUE IF YOU DO NOT WANT TO CROUCH WHEN AIMING AND FIRING 
====	JUMP		- Jump when Firing weapon			  ===			*/define HipFireJumpONLY = TRUE;/*					=== <--- CHOOSE FALSE IF YOU DO WANT TO JUMP WHEN AIMING AND FIRING 
|============================================================================================================================== 
====  												   AUTO MODS     				                           				===
====													  ===																===
====	SLIDEJUMP- Slide a distance and Jump when Slide	  ===			Quick Toggle - DOWN+CIRCLE/B						===
====	RUN		 - Run when moving forward				  ===			Quick Toggle - DOWN+SQUARE/X						===
|============================================================================================================================== 
====												   EASY MODS     														===
====													  ===																===
====	AIM			- Aim immediately when Firing		  ===			Quick Toggle - DOWN+R2/RT							===
====	EASY GRENADE  - Press Grenade throw on release    ===		TIP-Cancel Grenade Throw Arc by Aim or Slide button		=== <--- DOUBLE TAP HEAL BUTTON
====	EASY HEAL	  - Press Heal to continuously Heal	  ===		TIP-Cancel Healing by Fire or Aim						=== <--- DOUBLE TAP GRENADE BUTTON
|============================================================================================================================== 
==== 											      GLOBAL MODS     		    											===
====													  ===																===
====	TURBO MELEE		- Hold to Rapid Melee			  ===																===
====	ADS PING		- Double Tap Aim to Ping Enemy	  ===																===
====	PING ON FIRE	- AIM and Fire to Ping Enemy	  ===																===
|============================================================================================================================== 
==== 												   MISC MODS        													===
====													  ===																===
====	ABUSE		- Abuse ADS In&Out Rapidly			  ===																===
====	RELOAD	 	- Reload after Firing				  ===																===
====	ABILITY		- Activate Ability when Firing		  ===																===
|==============================================================================================================================  
==== 												   MISC STUFF       Enabled/Disab;e Hair Triggers TRUE/FALSE			===
====													  ===																===
====	HAIRTRIGGERS	- Hair Triggers ON/OFF			  ===			*/define Hairtriggers = TRUE;/*					=== <--- CHOOSE FALSE IF HAIR TRIGGERS DISABLED
====	SWAP 			- Button/Trigger Swap			  ===																===
====	BUNNYHOP		- Hold to Jump					  ===			Quick Toggle - DOWN+CROSS/A							===	
|============================================================================================================================== 

/*=============================================================================================================================                                          
|                      					ADJUSTABLES ADJUSTABLES ADJUSTABLES                 					      		  |                 
|==============================================================================================================================  
===============================================================================================================================
| Choose your Strafe Delay	(Delay before Strafe begins)              |*/ int strafedelay =	400;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Strafe Time   (Time Strafe is held in Direction)        |*/ int strafetime = 400;   						   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Jump Delay    (Delay before Jump begins)         	  	  |*/ int jumpdelay = 300;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Jump Time     (Time between Jumps)         	 	      |*/ int jumptime = 800;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ability Delay	(Delay before Ability Shot)               |*/ int abilitydelay = 700;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Crouch Time   (Time Crouch is held) [Toggle Crouch]     |*/ int crouchtime = 400;   						   /* |  <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Ping Time    (Time before another Ping)         	  	  |*/ int pingtime = 1000;   						   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Abuse Hold     (Time Abuse Held)  	       	 	      |*/ int aimabusehold = 200;   					    /*| <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Abuse Rest	(Time Abuse Rests)               		  |*/ int aimabuserest = 80;				           /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================
===============================================================================================================================
| Choose your Abuse Rest	(Time Abuse Rests)               		  |*/ int grenadereleasetime = 1500;				   /* | <--- TIME IN MILLISECONDS (1000 = 1 SECOND)
===============================================================================================================================

===============================================================================================================================
| 										    PARACYST AIM ASSIST VALUES														  |	
===============================================================================================================================
																																	*/
	int size_ADS 	 = 10;// 	<--- SIZE WHEN AIM ONLY - RECOMMENDED AT 10-15
	int wait_ADS 	 = 60;// 	<--- TIME NO NEED TO CHANGE 
	int size_ADSFire = 12;// 	<--- SIZE WHILE AIM AND FIRE - RECOMMENDED AT 10-15
	int wait_ADSFire = 60;//	<--- TIME NO NEED TO CHANGE 
	int size_Fire 	 = 12;//	<--- SIZE WHEN FIRE ONLY - RECOMMENDED AT 10-15
	int wait_Fire 	 = 60;//	<--- TIME NO NEED TO CHANGE 
	int size_Hip  	 =  5;//	<--- SIZE OF NO AIM OR FIRE - RECOMMENDED AT 5-10 
	int wait_Hip  	 = 60;//	<--- TIME NO NEED TO CHANGE 

// !!!!!!!!!!!!!! WHEN EDITING VALUES, REACH (SIZE) AND COURSE (TIME) WILL NOT BE EDITABLE IN THE SCRIPT !!!!!!!!!!!!!!
// !!!!!!!!!!!!!! THIS IS PUT ON THE SCRIPT FOR REFERANCE TO KNOW WHICH VALUES YOU HAVE PUT TO SEE IF REACH OR COURSE NEEDS TO BE ALTERED TO YOUR LIKING !!!!!!!!!!!!!!

/*
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________


Anti Recoil values are based off DEFAULT SENSITIVITY. Aim Response Curve - (Steady) and Deadzone - (SMALL)

Increase or Decrease in sensitivity, you may or may not need to find your own Anti-Recoil values. 

Aim Assist AR Values Tested with - Default Aim Assist "PolarCyst" - No Aim Assist values, I will post in the discord.

Change of Aim Assist may or may not show different results in Anti-Recoil if changed drastically.

Play with Default Sensitivity, Aim Response Curve - Steady and Deadzone - Small for best AR results

AGAIN, ANY CHANGE OF SENSITIVITY, DEADZONE OR AIM RESPONSE CURVE MAY HAVE DIFFERENT RESULTS. THERE ARE
MANY WAYS A USER CAN CUSTOMIZE THEIR SENSITIVITIES AND I CANNOT TEST THEM ALL MYSELF. 

____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________
						
						SMART ANTI-RECOIL & QUICK EDIT INSTRUCTIONS

//Quick Edit Anti-Recoil (Smart Only) ... Write FALSE if planning to not use Quick Edit in-game                         
// !!!!! RUMBLE MUST BE ON FOR SMART AR !!!!! 

LEFT/RIGHT DPAD IS FOR 1 VALUE.. LEFT = NEGATIVE and RIGHT = POSTITIVE - YOU WILL FEEL VIBRATE
UP/DOWN DPAD IS FOR 10 VALUE.. DOWN = NEGATIVE and UP = POSTITIVE	   - YOU WILL FEEL VIBRATE

HORIZONTAL IS ONLY +1 OR -1 VALUES...
																														*/
define QuickEdit = TRUE; 			//Write FALSE if you want Quick Edit OFF
int smart_recoil_vertical  = 40;	//Base Vertical Value - Quick Edit must be ON to adjust
int smart_recoil_str = 120; 		//Base Strength Value - Quick Edit must be ON to adjust
int smart_recoil_horizontal  = 0;	//Base Horizontal Value - Quick Edit must be ON to adjust
int SmartAR = FALSE;				//Write TRUE if you want Smart AR enabled by Default
									// Quick Toggle DOWN + TRIANGLE/Y to ENABLE/DISABLE
																														/*
____________________________________________________________________________________________________

====================================================================================================
____________________________________________________________________________________________________
																														*/

//Quick Toggles - Can be enabled TRUE (for immediate enable) or FALSE to (manually enabled in-game)
// THESE ARE NOT ACTIVATED FROM ZEN MENU - MUST BE ENABLED BY QUICK TOGGLES
	
	int AutoMod_Slide    = FALSE; //AutoSlide	- DOWN + CROUCH_BTN
	int AutoMod_Jump	 = FALSE; //Bunnyhop    - DOWN + JUMP_BTN
	int AutoMod_Run		 = FALSE; //Auto Run    - DOWN + RELOAD_BTN
	int Charge_Repeater	 = FALSE; //Charge Shot - UP + TRIANGLE/Y																												
/*____________________________________________________________________________________________________

  ====================================================================================================
  ____________________________________________________________________________________________________

!!!!!!!!!!!!!! THIS IS FOR PEOPLE THAT DO NOT PLAY DEFAULT SENSITIVITY, STEADY AIM OR SMALL DEADZONE !!!!!!!!!!!!!!
!!!!!!!!!!!!!! ALSO FOR THOSE INTERESTED IN FINDING ANTI-RECOIL VALUES IN GENERAL FOR LEARNING       !!!!!!!!!!!!!!

/*

/*=============================================================================================================================                                          
|          INSTRUCTIONS TO FIND RECOIL VALUE IF HIGHER SENSITIVITY OR DIFFERENT RESPONSE CURVE / DEADZONE  					  |                 
|============================================================================================================================== 

INSTRUCTIONS TO FIND RECOIL VALUE IF HIGHER SENSITIVITY OR DIFFERENT RESPONSE CURVE / DEADZONE 

**when testing recoil values, decide if you will run any Aim Assist because that will have a factor on your value.**

Decide your sensitivity in-game before testing recoil values. - This will play a big part in your final values.
Deadzones also have a factor with the final recoil values. - Pick which one you will run before finding your values.
Open Firing Range on Apex Legends and pick weapon of choice. Press L2/LT+PS/Xbox button to select weapon from the menu to start with that value.
I have provided Aim Assist ON and OFF Recoil values below at DEFAULT (3) Sensitivity with SMALL deadzone and Steady Response Curve.
Aim Assist ON was used with INSANE (8) Sensitivity with Steady Response Curve and SMALL deadzone.
Aim Assist Options - Polar: 20 RADIUS, 20 STEPS, 25 STEADY AIM. Sweet Evil: 10 Boost 15 Correction. 

Progression Anti-Recoil
**START VALUE** If the gun is pulling downwards too much, DECREASE the Start value. If the gun is good at the start but it pulls down too much mid-way or towards the end, DECREASE the end value.
				If the gun is pulling upwards too much, INCREASE the Start value. If the gun is good at the start but it pull up too much mid-way or towards the end, INCREASE the end value.
**END VALUE***	If the gun is pulling pulls downwards too much mid-way or towards the end, DECREASE the end value.
				If the gun is pulling pulls upwards too much mid-way or towards the end, INCREASE the end value.
**TIME VALUE**	Increasing the time will increase how long from Start to END the values will meet to the set value. 			
				Decreasing the time will decrease how long from Start to END the values will meet to the set value.
**HORIZONTAL**	Increase if gun is pulling to the LEFT too much.			
				Decrease if gun is pulling to the RIGHT too much.	

Legacy Anti-Recoil is Standard Anti-Recoil. Vertical and Horizontal only. If you are new to finding recoil values, I suggest running Legacy first and finding that value. 

	
	!!!!! MORE DETAILED AND VISUAL INFORMATION ON OLED SCREEN AND MOD MENU DETAILS - IF YOU UNDERSTAND THIS IS OPTIONAL TO READ !!!!!!

/*===============================================================================================================================
◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺		
____________________________________________________________________________________________________________________________________________________

											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
____________________________________________________________________________________________________________________________________________________

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸											
	
	OLED screen indications: 
                              ———————————————————————————————
		                      |         A  P  E  X          |
		                      |      P R E D A T O R        |  
		                      |       Current profile       | 
		                      |     Current Weapon Name     |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModMenu: 
                              ———————————————————————————————
		- First line:         |       Active Mod Name       |
		- Second line:        |       Current profile       | ▻▻▻  This shows you which profile you are on in mod menu 
		- Third line          |       ON / OFF status       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModEdit: Can 
                              ———————————————————————————————
		- First line:         |      Active Value Name      |
		- Second line:        |       Current profile       | ▻▻▻  This shows which profile you are on, Primary,Secondary, Extra  
		- Third line          |       Editable  Value       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModWeapon: To Enter WeaponMod Hold L2 & Press XBOX/PS button to enter
                              ———————————————————————————————
		- First line:         |       Current profile       | ▻▻▻  indicates which profile you are on
		- Second line:        |   Current Weapon Categoty   | ▻▻▻  indicates which weapon category you are on 
		- Third line          |     Current Weapon Name     | ▻▻▻  indicate which weapon you are on
                              ———————————————————————————————
                     ⬅⬅⬅ PRESS DPAD LEFT OR RIGHT to Navigate ➨➨➨
                      
                       ⬆    PRESS DPAD UP OR DOWN  to Navigate  ⬇
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜		

	OLED screen indications in KillSwitch: 
                              ———————————————————————————————
                              |         SCRIPT OFF          | ▻▻▻  indicate that the script is muted
                              |                             | 
                              |   Hold CIRCLE/B to turn ON  | 
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModWeapon:
	
	Open ModWeapon (L2/LT + PS/XBOX to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Extra Profile) by tapping TRIANGLE/Y
		To switch between Weapon Category and Weapon Name, press UP or DOWN
		When the second line (Weapon Category) is in large text, you can only navigate between the different categories with LEFT or RIGHT.
		When the third line (Weapon Name) is in large text, you can only navigate between the different weapons of the active category with LEFT or RIGHT.
		
		Tap CROSS/B to close ModWeapon and go to ModMenu
		Tap SQUARE/X to go back to ModWeapon if you are in ModMenu
		Hold L2/LT and tap PS/XBOX to close ModWeapon
		
		Hold CROSS/A 500ms to reset Antirecoil temporary values and Rate of Fire temporary values of the active profile
		
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModMenu:

	Open ModMenu (L2/LT + OPTIONS/MENU to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Extra) by tapping TRIANGLE/Y
		Navigate between the different MODS with L1/LB or R1/RB
			- tap UP to turn ON
			- tap DOWN to turn OFF 
		
		Activate the mods you want on each profile...
		
	If the mod displayed has one or more editable values, pressing CROSS/A will open the ModEdit
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModEdit:

		Navigate between the different value with LEFT or RIGHT
		Change/edit the value by holding down R1/RB then tap UP or RIGHT to increase value and tap DOWN or LEFT to decrease value
		
		To exit ModEdit and go back to ModMenu, tap CIRCLE/B

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
				           
	Save every values (only available if you are in ModMenu or ModEdit or ModWeapon)		
		- Tap PS/XBOX to save EVERY values, toggles, weapon category and weapon name, independently for EACH profiles 

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Speed toggles (outside Mod Menu/Edit/Weapon)
		- Hold aiming button and hold 300ms UP, DOWN, RIGHT or LEFT
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
	
	Switch profiles
		- In Game:
			- Tap USER DEFINED BUTTON or BUTTONS to switch profile 1 and 2 (primary and secondary)
		
		- In Game:
			- Hold USER DEFINED BUTTONS to switch profile 3 (Extra profile)
		
		- In Mod Menu/Edit/Weapon
			- Tap TRIANGLE/Y to loop profile 1, 2, 3, 1, 2, 3 ... for editing
			
		- If Profiles get out of Sync in-game when using Triangle or USER DEFINED BUTTONS double press fast to get back in sync	

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Kill Switch (disable everything)
		- Turn ON to OFF or OFF to ON
			- Hold L2/LT and tap SHARE/VIEW 
			- Tap PS/XBOX 
		- Turn ON (disable everything)
			- Tap OPTIONS/MENU
			- Tap Map button
		- Turn OFF (enable everything)
			- Double tap CIRCLE/B
			- Hold CIRCLE/B more than 600ms
*/



const string TITLE = "APEXLEGENDS"; const string OFF = "OFF"; const string ON = "ON"; const string SAVE= "SAVED"; const string PROFILE_1 = " Primary "; const string PROFILE_2 = " Secondary "; const string PROFILE_3 = " Extra "; const string ALL = " All Profiles "; const string MUTE = "Script OFF"; const string HOLD = "Hold CIRCLE/B"; const string ACTIVE = "to turn ON" const string STANDARD = "Legacy"; const string PROGRESS = "Progressive"; const string ANTIRECOIL_VERTICAL = "AR Vertical"; const string POLARAIM = "Polar"; const string PARACYST = "Paracyst"; const string POLARCYST = "PolarCyst"; const string SmartFIRE = "Smart Fire"; const string DynamicFIRE = "DynamicFire"; const string Rapid_Fire = "Rapid Fire"; const string BTN_LAYOUT_0 = "Default"; const string BTN_LAYOUT_1 = "Bumper Jump"; const string BTN_LAYOUT_2 = "ButtonPunch"; const string BTN_LAYOUT_3 = "Evolved"; const string BTN_LAYOUT_4 = "Grenadier"; const string BTN_LAYOUT_5 = "Ninja"; const string BTN_LAYOUT_6 = "Custom"; const string FLIPPED = "Flipped"; const string ANTIRECOIL = "A-R Type"; const string RAPIDFIRE = "Fire Type"; const string AIMTYPE = "Aim Type"; const string QUICKSCOPE = "QuickScope" const string FIRE_MODS = "Shot Mods"; const string GLOBAL_MODS = "Global Mods"; const string EASY_MODS = "Easy Mods"; const string MISC_MODS = "Misc Mods"; const string BTN_LAYOUT = "Btn Layout"; const string SWAP = "Flipped/Tr"; int modName_idx; define LAST_MODNAME_STRING = 9; define LAST_EDITABLE_STRING = 3; const string ANTIRECOIL_START = "AR Start"; const string ANTIRECOIL_END = "AR End"; const string ANTIRECOIL_TIME = "AR Time"; const string ANTIRECOIL_HORIZONTAL = "AR Horiz"; const string RATE_OF_FIRE = "Rounds/sec"; const string SmartTIME = "Smart Time"; const string DynamicTIME = "DynamicTime"; const string DynamicMIN = "DynamicWait"; const string POLAR_RADIUS = "Radius"; const string POLAR_STEPS = "Steps"; const string STEADYAIMING = "SteadyAim"; const string REACH = "Reach"; const string PARATIME = "Course"; const string AIMBOOST = "Phase"; const string AIMCORRECT = "Correction"; const string AIMPERFECT = "Faultless"; const string QUICKSCOPESPEED = "QScopeDelay"; int valName_idx; define AMOUNT_OF_VALNAME_IDX = 16; const string STRAFESHOT = "Strafe Shot"; const string CROUCHSHOT = "Crouch Shot"; const string JUMPSHOT = "Jump Shot"; const string PINGBYFIRE = "PingOnFire"; const string AUTO_PING = "ADS Ping"; const string TURBOMELEE = "Turbo Melee"; const string EASYFIRE = "Easy Aim"; const string EASY_HEAL = "Easy Heal"; const string EASY_NADE = "EasyGrenade"; const string AIM_ABUSE = "Aim Abuse"; const string AUTO_RELOAD = "Auto Reload"; const string ABILITYSHOT = "AbilityShot"; const string JUMPSTRAFE = "JumpStrafe"; const string DROPSTRAFE = "DropStrafe"; const string TMADSPING = "TM&AimPing"; const string TMFIREPING = "TM&FirePing"; const string DOUBLEPING = "Double Ping"; const string ALLGLOBALON= "AllGlobalON"; const string AIMHEAL = "Aim & Heal"; const string AIMNADE = "Aim & Nade"; const string HEALNADE = "Heal & Nade"; const string ALLEASYON = "AllEZModON"; const string RELOADABUSE = "ReloadAbuse"; const string ABILITYABUSE = "PowerAbuse"; const string ABILITYLOAD = "PowerReload"; const string ALLMISCON = "AllMiscON"; const string A_RIFLE_LABEL = "Assault R."; const string SMG_LABEL = "SMG"; const string LMG_LABEL = "LMG"; const string RIFLE_LABEL = "Rifle"; const string SHOTGUN_LABEL = "ShotGun"; const string SNIPER_LABEL = "Sniper"; const string HANDGUN_LABEL = "HandGun"; define amount_fullauto_category = 3; int weapon_category[3]; int weapon_name[3]; define amount_weapon_category = 7; define max_stored = 8; const int16 A_RIFLE[][] = { { 65, 42, 13, -8, 0 }, { 60, 39, 15, -5, 0 }, { 50, 41, 20, 8, 0 }, { 52, 43, 20, 11, 0 }, { 48, 42, 15, 11, 24 }, { 50, 45, 20, 11, 24 }, { 15, 39, 10, 6, 0 }, { 0, 0, 0, 0, 0 } }; define amount_A_RIFLE = 8; const string A_RIFLE_1 = "R-301"; const string A_RIFLE_2 = "R-301++"; const string A_RIFLE_3 = "Flatline"; const string A_RIFLE_4 = "Flatline++"; const string A_RIFLE_5 = "Hemlock"; const string A_RIFLE_6 = "Hemlock++"; const string A_RIFLE_7 = "HAVOC"; const string A_RIFLE_8 = "Custom"; const int16 SMG[][] = { { 69, 47, 17, -5, 0 }, { 72, 48, 20, -2, 0 }, { 63, 49, 15, -1, 0 }, { 69, 49, 17, 5, 0 }, { 37, 27, 40, 6, 0 }, { 57, 46, 15, 6, 0 }, { 60, 42, 10, 8, 24 }, { 0, 0, 0, 0, 0 } }; define amount_SMG = 8; const string SMG_1 = "R-99"; const string SMG_2 = "R-99++"; const string SMG_3 = "Alternator"; const string SMG_4 = "Alternator+"; const string SMG_5 = "Volt"; const string SMG_6 = "Volt++"; const string SMG_7 = "Prowler"; const string SMG_8 = "Custom"; const int16 LMG[][] = { { 43, 33, 55, 9, 0 }, { 43, 28, 90, 8, 0 }, { 65, 33, 30, 7, 0 }, { 66, 35, 35, 10, 0 }, { 53, 51, 15, 5, 0 }, { 0, 0, 0, 0, 0 } }; define amount_LMG = 6; const string LMG_1 = "Spitfire"; const string LMG_2 = "Spitfire++"; const string LMG_3 = "Devotion"; const string LMG_4 = "Devotion++"; const string LMG_5 = "L-STAR"; const string LMG_6 = "Custom"; const int16 RIFLE[][] = { { 52,54, 40, 9, 24 }, { 25, 10, 5, 0, 24 }, { 15, 10, 15, 0, 0 }, { 15, 10, 15, 0, 0 } }; define amount_RIFLE = 4; const string RIFLE_1 = "G7 Scout"; const string RIFLE_2 = "Longbow"; const string RIFLE_3 = "ChargeRifle"; const string RIFLE_4 = "30/Repeater"; const int16 SHOTGUN[][] = { { 35, 34, 7, 2, 0 }, { 0, 0, 0, 0, 24 }, { 28, 27, 5, 0, 15 }, { 0, 0, 0, 0, 24 }, { 0, 0, 0, 0, 0 } }; define amount_SHOTGUN = 5; const string SHOTGUN_1 = "EVA-8"; const string SHOTGUN_2 = "Mastiff"; const string SHOTGUN_3 = "Mozambique"; const string SHOTGUN_4 = "Peacekeeper"; const string SHOTGUN_5 = "Custom"; const int16 SNIPER[][] = { { 27, 24, 10, 2, 0 }, { 15, 10, 10, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } }; define amount_SNIPER = 4; const string SNIPER_1 = "Triple Take"; const string SNIPER_2 = "Sentinel"; const string SNIPER_3 = "Kraber"; const string SNIPER_4 = "Custom"; const int16 HANDGUN[][] = { { 28, 24, 40, 3, 24 }, { 60, 51, 10, -2, 24 }, { 49, 47, 15, -23, 0 }, { 52, 47, 15, -23, 0 }, { 55, 70, 10, 11, 24 } }; define amount_HANDGUN = 5; const string HANDGUN_1 = "Wingman"; const string HANDGUN_2 = "Wingman++"; const string HANDGUN_3 = "RE-45"; const string HANDGUN_4 = "RE-45++"; const string HANDGUN_5 = "P2020"; int antirecoil_start[3]; int antirecoil_end[3]; int antirecoil_time[3]; int antirecoil_horizontal[3]; int rate_of_fire[3]; int AMOUNT_OF_VAL_IN_ARRAY = 5; int final_antirecoil_start; int final_antirecoil_end; int final_antirecoil_time; int final_antirecoil_horizontal; int final_rate_of_fire; int profile_idx; int toggle_antirecoil[3]; int toggle_rapidfire[3]; int toggle_aimtype[3]; int toggle_quickscope[3]; define AMOUNT_OF_PROFILES = 3; define AMOUNT_OF_MULTI_TOGGLE = 4; int quickscopedelay; int swap_on; int aimabuse_hold; int aimabuse_rest; int shot_mods; int global_mods; int misc_mods; int easy_mods; define SSA1 = 80; define SSA2 = 65; define SSA3 = 82; define SSA4 = 65; define SSA5 = 70; define SSA6 = 76; define SSA7 = 65; define SSA8 = 88; define SAVER = 5000; define SAVER1 = 10; int SSMU1 = 1; int SSMU2 = 8; int SSMU3 = 15; int SSMU4 = 22; int SSMU5 = 29; int SSMU6 = 36; int SSMU7 = 43; int SSMU8 = 50; const uint8 ASCII_NUM[] = {48,49,50,51,52,53,54,55,56,57}; int i; int c,c_val; data( 1,0,0,0, 0,0,0,1, 1,0,1,0, 0,0,1,0, 0,1,1,0, 1,1,1,0, 0,1,0,0, 0,0,0,0 ); int SCREENSAVER; int display_title = TRUE; int display_new = TRUE; int display_black; int profile_3; int profile_1or2; int active_name; int name_width; int name_font; int name_y; int cat_width; int cat_font; int profile_width; int profile_font; int profile_y; int ModMenu; int ModEdit; int ModWeapon; int KillSwitch; int btn_layout; int i_val; int i_pnt; int i_num; int i_cnt; int v,ar_y; int x_ref; int hold_time; int rest_time; int led_on; int led_off; int count_black; int double_tap; define RY = PS4_RY; define RX = PS4_RX; define Ads = PS4_L2; define Fire = PS4_R2; int Strength,VibroA,VibroB,VibroT; int smart_vertical,smart_horizontal,smart_add; define Horiz = TRUE; define Vert = TRUE; define Str = TRUE; int SmartTime; int DYNATIME; int DYNAMIN; define X = XB1_RX; define Y = XB1_RY; define ACTIVE_WHEN_ADS = TRUE; define ACTIVE_WHEN_FIRING = TRUE; int RADIUS; int STEPS; int STEADY_AIM; define STEP_INTERVAL = 1; define VM_INTERVAL = -2; int time; int angle, cos_angle, sin_angle; int actual_X, actual_Y, actual_Magnitude, max_Magnitude,angle_Out; int STEADY_VALUE; const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81, 80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58, -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97, -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7, 9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81, 82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; int q; int double__tap[30]; init { while(q < 30) {double__tap[q] = -1; q++;}} const int8 data1[]={-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91, -90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16, -14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49, 51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92, 92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99, 99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71, 70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14, 13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40, -42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77, -78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97, -98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100}; int Aim_Size; int Aim_Time; int Aim_Perfect; define Sampling_Time = 10; int Aim_Boost = 20; int Aim_Correction = 25; int Aim_Perfection_Limit = 30; define POS_Aim_Limit = 70; define NEG_Aim_Limit = -70; define POS_Micro_MVT_Limit = 25; define NEG_Micro_MVT_Limit = -25; int X_Last_Value = 0; int Y_Last_Value = 0; int X_Current_Value = 0; int Y_Current_Value = 0; int Sampling_Done = FALSE; int spiroide_pulse = 0; int fine_pulse = 0; int Joystick_calibration = FALSE; int RX_Axis_Joystick_calibrate = 0; int RY_Axis_Joystick_calibrate = 0; int holdTime; init{ STEADY_AIM = (360 / STEADY_AIM) / 2; toggle_antirecoil[0] = get_pvar(SPVAR_1, 0, 3, 0 ); antirecoil_start[0] = get_pvar(SPVAR_5, -99, 99, 0 ); toggle_rapidfire[0] = get_pvar(SPVAR_2, 0, 3, 0 ); antirecoil_end[0] = get_pvar(SPVAR_6, -99, 99, 0 ); toggle_aimtype[0] = get_pvar(SPVAR_3, 0, 7, 0 ); antirecoil_time[0] = get_pvar(SPVAR_7, -99, 99, 0 ); toggle_quickscope[0] = get_pvar(SPVAR_4, 0, 1, 0 ); antirecoil_horizontal[0] = get_pvar(SPVAR_8, -99, 99, 0 ); rate_of_fire[0] = get_pvar(SPVAR_9, 1, 25, 25 ); toggle_antirecoil[1] = get_pvar(SPVAR_13, 0, 3, 0 ); antirecoil_start[1] = get_pvar(SPVAR_17, -99, 99, 0 ); toggle_rapidfire[1] = get_pvar(SPVAR_14, 0, 3, 0 ); antirecoil_end[1] = get_pvar(SPVAR_18, -99, 99, 0 ); toggle_aimtype[1] = get_pvar(SPVAR_15, 0, 7, 0 ); antirecoil_time[1] = get_pvar(SPVAR_19, -99, 99, 0 ); antirecoil_horizontal[1] = get_pvar(SPVAR_20, -99, 99, 0 ); toggle_quickscope[1] = get_pvar(SPVAR_16, 0, 1, 0 ); rate_of_fire[1] = get_pvar(SPVAR_21, 1, 25, 1 ); toggle_antirecoil[2] = get_pvar(SPVAR_25, 0, 3, 0 ); antirecoil_start[2] = get_pvar(SPVAR_29, -99, 99, 0 ); toggle_rapidfire[2] = get_pvar(SPVAR_26, 0, 3, 0 ); antirecoil_end[2] = get_pvar(SPVAR_30, -99, 99, 0 ); toggle_aimtype[2] = get_pvar(SPVAR_27, 0, 7, 0 ); antirecoil_time[2] = get_pvar(SPVAR_31, -99, 99, 0 ); antirecoil_horizontal[2] = get_pvar(SPVAR_32, -99, 99, 0 ); toggle_quickscope[2] = get_pvar(SPVAR_28, 0, 1, 0 ); rate_of_fire[2] = get_pvar(SPVAR_33, 1, 25, 1 ); swap_on = get_pvar(SPVAR_37, 0, 1, 0 ); btn_layout = get_pvar(SPVAR_38, 0, 7, 0 ); RADIUS = get_pvar(SPVAR_39, 1, 99, 20 ); STEPS = get_pvar(SPVAR_40, 1, 99, 25 ); STEADY_AIM = get_pvar(SPVAR_41, 1, 90, 35 ); quickscopedelay = get_pvar(SPVAR_42, 50, 1200,900); Aim_Boost = get_pvar(SPVAR_43, 1, 30, 20 ); Aim_Correction = get_pvar(SPVAR_44, 1, 30, 25 ); Aim_Time = get_pvar(SPVAR_45, 1,200, 30 ); Aim_Size = get_pvar(SPVAR_46, 1, 40, 20 ); Aim_Perfect = get_pvar(SPVAR_47, 1, 30, 15 ); SmartTime = get_pvar(SPVAR_48, 1, 800, 250 ); DYNATIME = get_pvar(SPVAR_49, 1, 800, 350 ); DYNAMIN = get_pvar(SPVAR_50, 1, 200, 50 ); weapon_category[0] = get_pvar(SPVAR_51, 0,(amount_weapon_category - 1), 0 ); weapon_name[0] = get_pvar(SPVAR_54, 0, (max_stored - 1), 0 ); weapon_category[1] = get_pvar(SPVAR_52, 0,(amount_weapon_category - 1), 0 ); weapon_name[1] = get_pvar(SPVAR_55, 0, (max_stored - 1), 0 ); weapon_category[2] = get_pvar(SPVAR_53, 0,(amount_weapon_category - 1), 0 ); weapon_name[2] = get_pvar(SPVAR_56, 0, (max_stored - 1), 0 ); shot_mods = get_pvar(SPVAR_57, 0, 3, 0); easy_mods = get_pvar(SPVAR_58, 0, 3, 0); misc_mods = get_pvar(SPVAR_59, 0, 3, 0); global_mods = get_pvar(SPVAR_60, 0, 3, 0); } main { set_val(TRACE_1, profile_idx); set_val(TRACE_2, weapon_category[profile_idx]); set_val(TRACE_3, weapon_name[profile_idx]); set_val(TRACE_4, toggle_rapidfire[profile_idx]); set_val(TRACE_5, ModMenu); set_val(TRACE_6, ModWeapon); set_val(TRACE_1, valName_idx); set_val(TRACE_2, toggle_antirecoil[profile_idx]); set_val(TRACE_4, toggle_rapidfire[profile_idx]); set_val(TRACE_5, rate_of_fire[profile_idx]); set_val(TRACE_6, final_rate_of_fire); buttons_layout(); SHOT_MODS(); GLOBAL_MODS(); EASY_MODS(); MISC_MODS(); if(double_tap) double_tap -= get_rtime(); if(get_controller() != PIO_PS4) { if(get_console() == PIO_PS4) { swap(PS4_SHARE,PS4_TOUCH); if(get_val(PS4_R3) && event_press(PS4_TOUCH)) { set_val(PS4_SHARE,100); set_val(PS4_TOUCH,0); set_val(PS4_R3,0); } } } if(!ModMenu && !ModEdit && !ModWeapon) { if( (get_ival(PS4_L2) && event_press(PS4_SHARE)) || !get_ival(PS4_L2) && event_press(PS4_PS) ) { KillSwitch = !KillSwitch; if(KillSwitch) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); display_title = TRUE; } if(KillSwitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) { KillSwitch = FALSE; combo_run(RUMBLE_ON); display_title = TRUE; } } if(!KillSwitch) { if(get_ival(PS4_L2)) { if(event_release(PS4_PS)) { if(!ModMenu) ModWeapon = !ModWeapon; else ModMenu = FALSE; if(!ModWeapon) { combo_run(RUMBLE_OFF); display_title = TRUE; } if(ModWeapon) { ModMenu = FALSE; ModEdit = FALSE; combo_run(RUMBLE_ON); display_new = TRUE; } } if(event_release(PS4_OPTIONS)) { if(!ModWeapon) ModMenu = !ModMenu; else ModWeapon = FALSE; if(!ModMenu) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_title = TRUE; } if(ModMenu) { ModWeapon = FALSE; modName_idx = 0; combo_run(RUMBLE_ON); display_new = TRUE; } } set_val(PS4_SHARE, 0); set_val(PS4_OPTIONS, 0); set_val(PS4_PS, 0); } if(ModWeapon) { if(event_press(PS4_CIRCLE)) { ModMenu = TRUE; ModWeapon = FALSE; display_new = TRUE; } if(event_press(PS4_UP) || event_press(PS4_DOWN)) { active_name = !active_name; display_new = TRUE; } if(event_press(PS4_RIGHT)) { if(!active_name) weapon_category[profile_idx] += 1; else weapon_name[profile_idx] += 1; display_new = TRUE; } if(event_press(PS4_LEFT)) { if(!active_name) weapon_category[profile_idx] -= 1; else weapon_name[profile_idx] -= 1; display_new = TRUE; } if(weapon_category[profile_idx] > amount_weapon_category) weapon_category[profile_idx] = 0; else if(weapon_category[profile_idx] < 0) weapon_category[profile_idx] = amount_weapon_category; weapon_name_limits(0, amount_A_RIFLE); weapon_name_limits(1, amount_SMG ); weapon_name_limits(2, amount_LMG ); weapon_name_limits(3, amount_RIFLE ); weapon_name_limits(4, amount_SHOTGUN); weapon_name_limits(5, amount_SNIPER ); weapon_name_limits(6, amount_HANDGUN); if(get_ival(PS4_CROSS) && get_ptime(PS4_CROSS) == 500) { antirecoil_start[profile_idx] = 0; antirecoil_end[profile_idx] = 0; antirecoil_time[profile_idx] = 0; antirecoil_horizontal[profile_idx] = 0; rate_of_fire[profile_idx] = 0; combo_run(RUMBLE_ON); display_new = TRUE; } } if(ModMenu) { if(modName_idx <= LAST_EDITABLE_STRING) { if(event_press(PS4_CROSS) && !ModEdit) { valName_idx = AMOUNT_OF_VALNAME_IDX + 1; ModEdit = TRUE; combo_run(RUMBLE_ON); display_new = TRUE; } if(event_press(PS4_CIRCLE) && ModEdit) { ModEdit = FALSE; combo_run(RUMBLE_OFF); display_new = TRUE; } } if(ModEdit) { if(get_ival(PS4_L2)) { antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_end[profile_idx] = edit_val( 1 , antirecoil_end[profile_idx] , 99 , 99 , 1 , 10 ); antirecoil_time[profile_idx] = edit_val( 2 , antirecoil_time[profile_idx] , 0 , 99 , 1 , 10 ); antirecoil_horizontal[profile_idx] = edit_val( 3 , antirecoil_horizontal[profile_idx], 99 , 99 , 1 , 10 ); rate_of_fire[profile_idx] = edit_val( 4 , rate_of_fire[profile_idx] , 0 , 25 , 1 , 10 ); SmartTime = edit_val( 5 , SmartTime , 0 , 800 , 1 , 10 ); DYNATIME = edit_val( 6 , DYNATIME , 0 , 800, 1 , 10 ); DYNAMIN = edit_val( 7 , DYNAMIN , 0 , 200 , 1 , 10 ); RADIUS = edit_val( 8 , RADIUS , 0 , 99 , 1 , 10 ); STEPS = edit_val( 9 , STEPS , 0 , 99 , 1 , 10 ); STEADY_AIM = edit_val( 10 , STEADY_AIM , 0 , 90 , 1 , 10 ); Aim_Size = edit_val( 11 , Aim_Size , 0 , 50 , 1 , 10 ); Aim_Time = edit_val( 12 , Aim_Time , 0 , 99 , 1 , 10 ); Aim_Boost = edit_val( 13 , Aim_Boost , 0 , 30 , 1 , 10 ); Aim_Correction = edit_val( 14 , Aim_Correction , 0 , 30 , 1 , 10 ); Aim_Perfect = edit_val( 15 , Aim_Perfect , 0 , 30 , 1 , 10 ); quickscopedelay = edit_val( 16 , quickscopedelay , 0 , 1200, 1 , 10 ); } else { if(event_press(PS4_RIGHT)) { valName_idx += 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 3; if(valName_idx > 3) valName_idx = 1; } display_new = TRUE; } if(event_press(PS4_LEFT)) { valName_idx -= 1; if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2) { if(valName_idx == 2) valName_idx = 1; if(valName_idx < 1) valName_idx = 3; } display_new = TRUE; } if(modName_idx == 0) { if(toggle_antirecoil[profile_idx] == 2) vals_available( 1 , 3 ); else vals_available( 0 , 3 ); } if(modName_idx == 1) { if(toggle_rapidfire[profile_idx] == 1) vals_available( 4 , 4 ); else if(toggle_rapidfire[profile_idx] == 2) vals_available( 5 , 5 ); else if(toggle_rapidfire[profile_idx] == 3) vals_available( 6 , 7 ); } if(modName_idx == 2) { if(toggle_aimtype[profile_idx] == 1) vals_available( 8 , 10 ); else if(toggle_aimtype[profile_idx] == 2) vals_available( 11 , 15 ); else if(toggle_aimtype[profile_idx] == 3) vals_available( 8 , 15 ); } if(modName_idx == 3) vals_available( 16, 16 ); } } else { if(event_press(PS4_SQUARE)) { ModMenu = FALSE; ModWeapon = TRUE; display_new = TRUE; } if(event_press(PS4_RIGHT)) { modName_idx += 1; display_new = TRUE; } if(event_press(PS4_LEFT)) { modName_idx -= 1; display_new = TRUE; } if(event_release(PS4_TRIANGLE)) { display_new = TRUE; } if(modName_idx > LAST_MODNAME_STRING) modName_idx = 0; if(modName_idx < 0) modName_idx = LAST_MODNAME_STRING; toggle_antirecoil[profile_idx] = toggle(modName_idx, 0, toggle_antirecoil[profile_idx] ); toggle_rapidfire[profile_idx] = toggle(modName_idx, 1, toggle_rapidfire[profile_idx] ); toggle_aimtype[profile_idx] = toggle(modName_idx, 2, toggle_aimtype[profile_idx] ); toggle_quickscope[profile_idx] = toggle(modName_idx, 3, toggle_quickscope[profile_idx] ); shot_mods[profile_idx] = toggle(modName_idx, 4, shot_mods[profile_idx] ); global_mods[profile_idx] = toggle(modName_idx, 5, global_mods[profile_idx] ); easy_mods[profile_idx] = toggle(modName_idx, 6, easy_mods[profile_idx] ); misc_mods[profile_idx] = toggle(modName_idx, 7, misc_mods[profile_idx] ); btn_layout = toggle(modName_idx, 8, btn_layout ); swap_on = toggle(modName_idx, 9, swap_on ); } } if(ModMenu || ModWeapon) { if(!get_val(PS4_L2) && event_press(PS4_PS)) save(); block_btn(); if(event_press(PS4_TRIANGLE) && !ModEdit) { profile_idx += 1; display_new = TRUE; } if(profile_idx > (AMOUNT_OF_PROFILES - 1)) profile_idx = 0; } if(weapon_category[profile_idx] == 0) { final_antirecoil_start = A_RIFLE[weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = A_RIFLE[weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = A_RIFLE[weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = A_RIFLE[weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = A_RIFLE[weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 1) { final_antirecoil_start = SMG [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = SMG [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = SMG [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = SMG [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = SMG [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 2) { final_antirecoil_start = LMG [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = LMG [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = LMG [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = LMG [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = LMG [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 3) { final_antirecoil_start = RIFLE [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = RIFLE [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = RIFLE [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = RIFLE [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = RIFLE [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 4) { final_antirecoil_start = SHOTGUN [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = SHOTGUN [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = SHOTGUN [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = SHOTGUN [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = SHOTGUN [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 5) { final_antirecoil_start = SNIPER [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = SNIPER [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = SNIPER [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = SNIPER [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = SNIPER [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if(weapon_category[profile_idx] == 6) { final_antirecoil_start = HANDGUN [weapon_name[profile_idx]][0] + antirecoil_start[profile_idx]; final_antirecoil_end = HANDGUN [weapon_name[profile_idx]][1] + antirecoil_end[profile_idx]; final_antirecoil_time = HANDGUN [weapon_name[profile_idx]][2] + antirecoil_time[profile_idx]; final_antirecoil_horizontal = HANDGUN [weapon_name[profile_idx]][3] + antirecoil_horizontal[profile_idx]; final_rate_of_fire = HANDGUN [weapon_name[profile_idx]][4] + rate_of_fire[profile_idx]; } if((toggle_aimtype[profile_idx]== 1) ||(toggle_aimtype[profile_idx]== 3)) { actual_X = get_val(X); actual_Y = get_val(Y); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if (!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Array[angle % 360]; cos_angle = Polar_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN)))) { vm_tctrl(VM_INTERVAL); if (actual_Magnitude <= RADIUS) { sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(X, calculate(actual_X + cos_angle, -100, 100)); set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); } else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) { vm_tctrl(0); } if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) { STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256); if (get_val(POLAR_RY) > 0) STEADY_VALUE = map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180); else STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180)); Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE); } } if((toggle_aimtype[profile_idx]== 2) ||(toggle_aimtype[profile_idx]== 3)) { if(get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) { combo_run(PARACYSTY); Aim_Size = size_ADS; Aim_Time = wait_ADS; } else if(get_ival(AIM_BTN) && get_ival(FIRE_BTN)) { combo_run(PARACYSTY); Aim_Size = size_ADSFire; Aim_Time = wait_ADSFire; } else if(!get_ival(AIM_BTN) && get_ival(FIRE_BTN)) { combo_run(PARACYSTY); Aim_Size = size_Fire; Aim_Time = wait_Fire; } else if(!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) { combo_run(PARACYSTY); Aim_Size = size_Hip; Aim_Time = wait_Hip; } { if(get_val(AIM_BTN)){ if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit){ if(abs(X_Last_Value - X_Current_Value) < 15){ combo_stop(Aim_Assist_Perfection); Sampling_Done = FALSE; if(get_val(FIRE_BTN) > 95){ combo_stop(Fine_Tune_Aim); fine_pulse = 0; combo_run(spiroide_Aim_Assit); } else{ combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; combo_run(Fine_Tune_Aim); } } } else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit){ combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); spiroide_pulse = 0; fine_pulse = 0; combo_run(Aim_Assist_Perfection); } } else { combo_stop(Fine_Tune_Aim); combo_stop(spiroide_Aim_Assit); combo_stop(Aim_Assist_Perfection); spiroide_pulse = 0; fine_pulse = 0; Sampling_Done = FALSE; } } } if(!ModMenu && !ModWeapon) { if(swap_on) { swap(PS4_R1, PS4_R2); swap(PS4_L1, PS4_L2); } if(Hairtriggers == TRUE) { deadzone(PS4_L2,PS4_R2,99,99); } if(get_val(profile3_switch_button) && event_release(profile3_switch_button1)) { profile_idx = 2; profile_3 = !profile_3; display_title = TRUE; } toggle_quickscope[profile_idx] = speed_toggle( PS4_L2, PS4_DOWN, toggle_quickscope[profile_idx], 3); if(toggle_quickscope[profile_idx] == 1) { if(event_press(AIM_BTN) && get_ptime(AIM_BTN) < 140) combo_run(Quick_Scope); } if(AutoMod_Slide == FALSE) { if(get_val(PS4_DOWN) && event_press(CROUCH_BTN)) AutoMod_Slide = !AutoMod_Slide; } else if(AutoMod_Slide == TRUE) { if(get_val(PS4_DOWN) && event_press(CROUCH_BTN)) AutoMod_Slide = !AutoMod_Slide; if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) { if(event_release (CROUCH_BTN)) combo_run(CANCEL_SLIDE) } } if(AutoMod_Jump == FALSE) { if(get_val(PS4_DOWN) && event_press(JUMP_BTN)) AutoMod_Jump = !AutoMod_Jump; } else if(AutoMod_Jump == TRUE) { if(get_val(PS4_DOWN) && event_press(JUMP_BTN)) AutoMod_Jump = !AutoMod_Jump; if (get_val(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) combo_run(BUNNYHOP); } if(AutoMod_Run == FALSE) { if(get_val(PS4_DOWN) && event_press(RELOAD_BTN)) AutoMod_Run = !AutoMod_Run; } else if(AutoMod_Run == TRUE) { if(get_val(PS4_DOWN) && event_press(RELOAD_BTN)) AutoMod_Run = !AutoMod_Run; if(get_val(PS4_LY) < -60 ) set_val(SPRINT_BTN, 100); if(get_val(FIRE_BTN) || get_val(AIM_BTN) || get_val(MELEE_BTN) || get_val(RELOAD_BTN)) set_val(SPRINT_BTN, 0); } if(Charge_Repeater == FALSE) { if(get_val(PS4_UP) && event_press(PS4_TRIANGLE)) Charge_Repeater = !Charge_Repeater; } else if(Charge_Repeater == TRUE) { if(get_val(PS4_DOWN) && event_press(PS4_TRIANGLE)) Charge_Repeater = !Charge_Repeater; if(get_val(AIM_BTN)) combo_run(AUTOREPEATER); } if(one_button_press) { if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(two_button_press) { if(get_ival(profile_switch_button2) && (event_press(profile_switch_button3))) { profile_1or2=!profile_1or2; if(ModMenu) display_new = TRUE; else display_title = TRUE; } } if(!profile_3) { if(profile_1or2) profile_idx = 1; else profile_idx = 0; } } if(!ModWeapon) { if(toggle_antirecoil[profile_idx]) { if(toggle_antirecoil[profile_idx] == 2) final_antirecoil_start = final_antirecoil_end; if(final_antirecoil_start < final_antirecoil_end) i_val = 1; else i_val = -1; i_pnt = (final_antirecoil_time * 10) / (abs(final_antirecoil_start - final_antirecoil_end)); if(!get_val(FIRE_BTN)) { ar_y = final_antirecoil_start; i_cnt = 0; i_num = 0; } if(get_val(FIRE_BTN)) { if(!p_complete()) ar_y = p_val(); else ar_y = final_antirecoil_end; if(y_val() < 100) set_val(PS4_RY,y_val()); combo_run(X_VAL); } if(abs(get_val(PS4_RX)) > abs(final_antirecoil_horizontal) + 5) combo_stop(X_VAL); } if(SmartAR == FALSE) { if(get_val(PS4_DOWN) && event_press(PS4_TRIANGLE)) SmartAR = !SmartAR; { set_rgb(0,255, 0) } } else if(SmartAR == TRUE) { if(get_val(PS4_DOWN) && event_press(PS4_TRIANGLE)) SmartAR = !SmartAR; if (get_ival(Ads) && get_ival(Fire)) VibroT += get_rtime(); smart_vertical = smart_recoil_vertical * -1; smart_horizontal = smart_recoil_horizontal; smart_add = smart_recoil_str - 100; if (get_rumble(RUMBLE_A) || get_rumble(RUMBLE_B)) { VibroA = (get_rumble(RUMBLE_A) * 255 / 100); VibroB = (get_rumble(RUMBLE_B) * 255 / 100); if (VibroA >= VibroB) Strength = (VibroA / 10); else Strength = (VibroB / 10); if (Strength > 10 && Strength < 90) { if(abs(get_val(PS4_RY)) < (Strength + smart_add + smart_vertical) && abs(get_val(PS4_RX)) < (Strength + smart_add + smart_horizontal)) { set_val(PS4_RY, (Strength + smart_add + smart_vertical)); } if (VibroT >= 20) { Strength = 0; VibroT = 0; } AntiRecoil(RY,smart_recoil_vertical + Strength); AntiRecoil(RX,smart_recoil_horizontal); } } { set_rgb(255,0, 0) } } if(QuickEdit == TRUE) { if(Horiz == TRUE && get_val(PS4_R2) && !get_val(PS4_L2)&& (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_horizontal = smart_recoil_horizontal + 1; combo_run(VIBRATE);} if(Horiz == TRUE && get_val(PS4_R2) && !get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_horizontal = smart_recoil_horizontal - 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smart_recoil_vertical = smart_recoil_vertical + 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_vertical = smart_recoil_vertical + 10; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smart_recoil_vertical = smart_recoil_vertical - 1; combo_run(VIBRATE);} if(Vert == TRUE && get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_vertical = smart_recoil_vertical - 10; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) { smart_recoil_str = smart_recoil_str + 1; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_UP) || (get_ival(PS4_UP) && get_ptime(PS4_UP) >= 500))) { smart_recoil_str = smart_recoil_str + 10; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) { smart_recoil_str = smart_recoil_str - 1; combo_run(VIBRATE);} if(Str == TRUE && get_val(PS4_R2) && get_val(PS4_L2) && (event_press(PS4_DOWN) || (get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) >= 500))) { smart_recoil_str = smart_recoil_str - 10; combo_run(VIBRATE);} } if(toggle_rapidfire[profile_idx] == 1) { hold_time = 500 / final_rate_of_fire; rest_time = hold_time - 20; if(rest_time < 0) rest_time = 0; if(get_val(FIRE_BTN)) combo_run(RAPIDFIRE); else combo_stop(RAPIDFIRE); led_on = 150; led_off = 300; combo_run(BLINK); } if(toggle_rapidfire[profile_idx] == 2) { if(get_val(FIRE_BTN)) combo_run(SMART_FIRE); } if(toggle_rapidfire[profile_idx] == 3 && get_val(FIRE_BTN)) { holdTime = DYNATIME - (get_val(FIRE_BTN) * 3); combo_run(DYNAMIC_FIRE); } } if(display_new) { SCREENSAVER = FALSE; cls_oled(0); rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; if(ModEdit) { display_edit( 0 , center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0] , antirecoil_start[profile_idx] ); if(toggle_antirecoil[profile_idx] == 2) display_edit( 1 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_VERTICAL[0] , antirecoil_end[profile_idx] ); else display_edit( 1 , center_x(sizeof(ANTIRECOIL_END) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_END[0] , antirecoil_end[profile_idx] ); display_edit( 2 , center_x(sizeof(ANTIRECOIL_TIME) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_TIME[0] , antirecoil_time[profile_idx] ); display_edit( 3 , center_x(sizeof(ANTIRECOIL_HORIZONTAL)- 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] ); display_edit( 4 , center_x(sizeof(RATE_OF_FIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RATE_OF_FIRE[0] , rate_of_fire[profile_idx] ); display_edit( 5 , center_x(sizeof(SmartTIME) - 1, OLED_FONT_MEDIUM_WIDTH) , SmartTIME[0] , SmartTime ); display_edit( 6 , center_x(sizeof(DynamicTIME) - 1, OLED_FONT_MEDIUM_WIDTH) , DynamicTIME[0] , DYNATIME ); display_edit( 7 , center_x(sizeof(DynamicMIN) - 1, OLED_FONT_MEDIUM_WIDTH) , DynamicMIN[0] , DYNAMIN ); display_edit( 8 , center_x(sizeof(POLAR_RADIUS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_RADIUS[0] , RADIUS ); display_edit( 9 , center_x(sizeof(POLAR_STEPS) - 1, OLED_FONT_MEDIUM_WIDTH) , POLAR_STEPS[0] , STEPS ); display_edit( 10 , center_x(sizeof(STEADYAIMING) - 1, OLED_FONT_MEDIUM_WIDTH) , STEADYAIMING[0] , STEADY_AIM ); display_edit( 11 , center_x(sizeof(REACH) - 1, OLED_FONT_MEDIUM_WIDTH) , REACH[0] , Aim_Size ); display_edit( 12 , center_x(sizeof(PARATIME) - 1, OLED_FONT_MEDIUM_WIDTH) , PARATIME[0] , Aim_Time ); display_edit( 13 , center_x(sizeof(AIMBOOST) - 1, OLED_FONT_MEDIUM_WIDTH) , AIMBOOST[0] , Aim_Boost ); display_edit( 14 , center_x(sizeof(AIMCORRECT) - 1, OLED_FONT_MEDIUM_WIDTH) , AIMCORRECT[0] , Aim_Correction ); display_edit( 15 , center_x(sizeof(AIMPERFECT) - 1, OLED_FONT_MEDIUM_WIDTH) , AIMPERFECT[0] , Aim_Perfect ); display_edit( 16 , center_x(sizeof(QUICKSCOPESPEED) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPESPEED[0] , quickscopedelay ); if(valName_idx < AMOUNT_OF_VAL_IN_ARRAY) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } else if(ModWeapon) { display_profile (); display_weapon(); } else { display_mod ( 0 , center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]); display_mod ( 1 , center_x(sizeof(RAPIDFIRE) - 1, OLED_FONT_MEDIUM_WIDTH) , RAPIDFIRE[0] , toggle_rapidfire[profile_idx] ); display_mod ( 2 , center_x(sizeof(AIMTYPE) - 1, OLED_FONT_MEDIUM_WIDTH) , AIMTYPE[0] , toggle_aimtype[profile_idx] ); display_mod ( 3 , center_x(sizeof(QUICKSCOPE) - 1, OLED_FONT_MEDIUM_WIDTH) , QUICKSCOPE[0] , toggle_quickscope[profile_idx]); display_mod ( 4 , center_x(sizeof(FIRE_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , FIRE_MODS[0] , shot_mods [profile_idx]); display_mod ( 5 , center_x(sizeof(GLOBAL_MODS)- 1, OLED_FONT_MEDIUM_WIDTH) , GLOBAL_MODS[0] , global_mods[profile_idx]); display_mod ( 6 , center_x(sizeof(EASY_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , EASY_MODS[0] , easy_mods [profile_idx]); display_mod ( 7 , center_x(sizeof(MISC_MODS) - 1, OLED_FONT_MEDIUM_WIDTH) , MISC_MODS[0] , misc_mods [profile_idx]); display_mod ( 8 , center_x(sizeof(BTN_LAYOUT) - 1, OLED_FONT_MEDIUM_WIDTH) , BTN_LAYOUT[0] , btn_layout ); display_mod ( 9 , center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH) , SWAP[0] , swap_on ); if(modName_idx < AMOUNT_OF_MULTI_TOGGLE) display_profile (); else printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); } display_black = TRUE; display_new = FALSE; } } if(display_title) { cls_oled(0); SCREENSAVER = FALSE; rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE); count_black = 0; active_name = FALSE; if(KillSwitch) { printf(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8 ,OLED_FONT_MEDIUM,OLED_WHITE,MUTE [0]); printf(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH) ,38,OLED_FONT_SMALL ,OLED_WHITE,HOLD [0]); printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH) ,50,OLED_FONT_SMALL ,OLED_WHITE,ACTIVE[0]); } else { printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),5,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]); display_weapon(); if(profile_3) { printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),34,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); } else display_profile (); display_black = TRUE; } display_title = FALSE; } if(display_black && !ModMenu && !KillSwitch && !ModWeapon) { count_black += get_rtime(); if(count_black >= 5000) { cls_oled(0); count_black = 0; display_black = FALSE; SCREENSAVER = TRUE; } } if (SCREENSAVER) { DGT += get_rtime(); if (DGT >= 100) { SD1 += 2; TP1 += 1; TP2 -= 1; DGT = 0; } DGR += get_rtime(); if (DGR >= 30) { Y_1 += 1; Y_2 += 2; Y_3 += 3; Y_4 += 4; Y_5 += 5; Y_6 += 6; Y_7 += 7; Y_8 += 8; DGR = 0; } NAME(); MSC += get_rtime(); if(MSC >= 1000) { MSC = 0; RT += 1; } if(RT == 90) { SCREENSAVER = 0; RT = 0; cls_oled(0); } } if(KillSwitch) led(7); else led(profile_idx); } combo PARACYSTY { set_val(PS4_RY,xy_val2(PS4_RY, Aim_Size)); wait(Aim_Time); set_val(PS4_RX,xy_val2(PS4_RX, Aim_Size)); set_val(PS4_LX,xy_val2(PS4_LX, Aim_Size)); wait(Aim_Time); set_val(PS4_RY,xy_val2(PS4_RY, Aim_Size * -1)); wait(Aim_Time); set_val(PS4_RX,xy_val2(PS4_RX, Aim_Size * -1)); set_val(PS4_LX,xy_val2(PS4_LX, Aim_Size * -1)); wait(Aim_Time); } combo RUMBLE_ON { set_ledx(2, 2); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); wait(100); set_rumble(RUMBLE_B, 50); wait(150); reset_rumble(); } combo RUMBLE_OFF { set_ledx(1, 1); set_rumble(RUMBLE_A, 50); wait(300); reset_rumble(); wait(400); } combo RACE { X_1 = random(0,127); wait(SAVER1); X_2 = random(0,127); wait(SAVER1); X_3 = random(0,127); wait(SAVER1); X_4 = random(0,127); wait(SAVER1); X_5 = random(0,127); wait(SAVER1); X_6 = random(0,127); wait(SAVER1); X_7 = random(0,127); wait(SAVER1); X_8 = random(0,127); wait(SAVER1); } combo RN { RN1 = random(65,90); RN2 = random(60,90); RN3 = random(65,90); RN4 = random(65,90); RN5 = random(65,90); RN6 = random(65,90); RN7 = random(65,90); RN8 = random(65,90); wait(SAVER); } combo SAVE { cls_oled(0); printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); wait(10) call(RUMBLE_ON); wait(150); call(RUMBLE_ON); wait(1000); display_new = TRUE; } combo BLINK { led(profile_idx); wait(led_on); led(7); wait(led_off); } combo ABUSE { set_val(AIM_BTN, 100); wait(aimabuse_hold); set_val(AIM_BTN, 0); wait(aimabuse_rest); } combo RAPIDFIRE { wait(hold_time); set_val(FIRE_BTN, 0); wait(rest_time); } combo SMART_FIRE { set_val(FIRE_BTN,100); wait(100); set_val(FIRE_BTN, 0); wait(SmartTime); set_val(FIRE_BTN,100); } combo DYNAMIC_FIRE { set_val(FIRE_BTN,100); wait(holdTime); set_val(FIRE_BTN,0); wait(DYNAMIN); } combo X_VAL { x_ref = get_val(PS4_RX) + final_antirecoil_horizontal; if(x_ref > 100) x_ref = 100; set_val(PS4_RX, x_ref); } combo CANCEL_SLIDE { set_val(CROUCH_BTN, 100); wait(120); set_val(CROUCH_BTN, 0); wait(60); set_val(CROUCH_BTN, 100); wait(50); set_val(CROUCH_BTN, 100); set_val(JUMP_BTN, 100); wait(60); set_val(CROUCH_BTN, 0); set_val(JUMP_BTN, 100); wait(10); set_val(JUMP_BTN, 0); } combo BUNNYHOP { set_val(JUMP_BTN, 100); wait(30); set_val(JUMP_BTN, 0); wait(30); set_val(JUMP_BTN, 100); wait(30); set_val(JUMP_BTN, 0); wait(30); } combo Quick_Scope { set_val(AIM_BTN,100); wait(quickscopedelay); set_val(AIM_BTN,100); set_val(FIRE_BTN,100); wait(200); set_val(AIM_BTN,100); wait(200); } combo AUTOREPEATER { set_val(AIM_BTN, 100); wait(900); set_val(FIRE_BTN, 100); wait(40); set_val(FIRE_BTN, 0); wait(600); } combo auto_ping { set_val(PING_BTN,100); wait(20) set_val(PING_BTN,0); wait(20) set_val(PING_BTN,100); wait(20) set_val(PING_BTN,0); wait(pingtime); } combo easy_heal { set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); wait(3000); set_val(HEAL_BTN,100); wait(60); set_val(HEAL_BTN, 0); } combo ability_shot { wait(abilitydelay); set_val(TAC_BTN, 100); wait(200); set_val(TAC_BTN, 0); wait(4000); } combo crouch_shot { set_val(CROUCH_BTN,100); wait(crouchtime); set_val(CROUCH_BTN,0); } combo jump_shot { wait(jumpdelay); set_val(JUMP_BTN,100); wait(100); set_val(JUMP_BTN,0); wait(jumptime); } combo strafe_shot { wait(strafedelay); set_val(PS4_LX, 100); wait(strafetime); set_val(PS4_LX, -100); wait(strafetime); } combo AUTORELOAD { wait(100); set_val(RELOAD_BTN,100); wait(40); set_val(RELOAD_BTN,0); wait(100); } combo TURBO { set_val(MELEE_BTN, 100); wait(40); set_val(MELEE_BTN, 0); wait(40); } combo EASYNADE { wait(500); set_val(FIRE_BTN, 100); wait(grenadereleasetime); set_val(FIRE_BTN, 0); } combo VIBRATE { set_rumble(RUMBLE_A,40); wait(150); reset_rumble (); } combo Aim_Assist_Perfection { X_Last_Value = X_Current_Value Y_Last_Value = Y_Current_Value wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate; Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate; if (Sampling_Done == TRUE ) { Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); } X_Last_Value = X_Current_Value; Y_Last_Value = Y_Current_Value; wait(Sampling_Time); X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate; Y_Current_Value = get_lval(PS4_RY)- RX_Axis_Joystick_calibrate; if (Sampling_Done == TRUE ) { Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); } Sampling_Done = TRUE; wait(Sampling_Time); } combo Fine_Tune_Aim { set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_LX,(-15 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(10 - fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(10 - fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time) wait(Sampling_Time) set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_LX,(15 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-15 + fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(5 - fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(-10 + fine_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(15 - fine_pulse)); set_val(PS4_RY,(-10 + fine_pulse)); set_val(PS4_LX,(-5 + fine_pulse)) wait(Sampling_Time); wait(Sampling_Time); fine_pulse = fine_pulse + 2; if ( fine_pulse >10) { fine_pulse = 0; } } combo spiroide_Aim_Assit { set_val(PS4_RX,(4 + spiroide_pulse)); set_val(PS4_LX,(-15+ spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); set_val(PS4_RX,(-4 - spiroide_pulse)); set_val(PS4_LX,15 - spiroide_pulse ); wait(Sampling_Time); wait(Sampling_Time) set_val(PS4_RY,(5 + spiroide_pulse)); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); wait(Sampling_Time); spiroide_pulse = spiroide_pulse + 2; if ( spiroide_pulse >10) { spiroide_pulse = 0; } } function xy_val2(f_axis,f_val) { if(abs(get_val(f_axis)) < Aim_Size + 1) return f_val; return get_val(f_axis); } int sin_angle1,cos_angle1; function Set_polar1(stick,angle,radius,offset) { if (angle < 0) angle = 360 + (angle % 360); angle = (angle + 90) % 360; sin_angle1 = data1[angle]; cos_angle1 = data1[(angle + 90) % 360]; if (offset) { offset1(7 + stick, (cos_angle1 * radius) / 100); offset1(8 + stick, (sin_angle1 * radius) / 100); } else { set_val(7 + stick, (cos_angle1 * radius) / 100); set_val(8 + stick, (sin_angle1 * radius) / 100); } return; } function atan2(y, x) { if (x >= 0 && y > 0) angle_Out = -90; else if (x < 0 && y >= 0) angle_Out = 90; else if (x <= 0 && y < 0) angle_Out = -270; else angle_Out = 270; x = abs(x); y = abs(y); if (x < y) angle_Out += (x * 45 / y); else if (x > y) angle_Out += 90 - (y * 45 / x); else angle_Out += 45; angle_Out = abs(angle_Out % 360); return (angle_Out); } function offset1(axis,offset_val) { set_val(axis,clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100)); return; } function map (inMin,inMax,outMin,outMax,x) { return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin; } function calculate(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; } function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) { if(abs(Last_Value - Current_Value) < Aim_Perfection_Limit) { if(Last_Value < Current_Value) { if (Boost) { if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Boost)); } else if(Correction) { if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Correction)); } } else { if (Boost) { if (X_AXIS) set_val(PS4_RX, (Current_Value - Aim_Boost)); if (Y_AXIS) set_val(PS4_RY, (Current_Value - Aim_Boost)); } else if(Correction) { if (X_AXIS) set_val(PS4_RX, (Current_Value + Aim_Correction)); if (Y_AXIS) set_val(PS4_RY, (Current_Value + Aim_Correction)); } } } } function p_complete() { i_cnt++; if(i_cnt > final_antirecoil_time * 10) { i_cnt = final_antirecoil_time * 10; return 1; } return 0; } function p_val() { i_num++; if(i_num == i_pnt) { i_num = 0; ar_y += i_val; } return ar_y; } function y_val() { v = get_val(PS4_RY); if(abs(v) < 10) v = 0; if(abs(v) > abs(ar_y + 5)) return v; return v + ar_y; } function weapon_name_limits(f_cat, f_limit) { if(weapon_category[profile_idx] == f_cat) { if(weapon_name[profile_idx] >= f_limit) weapon_name[profile_idx] = 0; if(weapon_name[profile_idx] < 0) weapon_name[profile_idx] = f_limit - 1; } } function vals_available(f_min, f_max) { if(valName_idx < f_min) valName_idx = f_max; if(valName_idx > f_max) valName_idx = f_min; } function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) { if(valName_idx == f_idx) { f_val = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); f_val = value_change( f_val ,PS4_RIGHT, f_inc1 , f_min, f_max ); f_val = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); f_val = value_change( f_val ,PS4_UP , f_inc2 , f_min, f_max ); } if(weapon_category[profile_idx] == 0 && (rate_of_fire[profile_idx] < inv(A_RIFLE[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(A_RIFLE[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 1 && (rate_of_fire[profile_idx] < inv(SMG[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(SMG[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 2 && (rate_of_fire[profile_idx] < inv(LMG[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(LMG[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 3 && (rate_of_fire[profile_idx] < inv(RIFLE[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(RIFLE[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 4 && (rate_of_fire[profile_idx] < inv(SHOTGUN[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(SHOTGUN[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 5 && (rate_of_fire[profile_idx] < inv(SNIPER[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(SNIPER[weapon_name[profile_idx]][4]) + 1; if(weapon_category[profile_idx] == 6 && (rate_of_fire[profile_idx] < inv(HANDGUN[weapon_name[profile_idx]][4]) + 1)) rate_of_fire[profile_idx] = inv(HANDGUN[weapon_name[profile_idx]][4]) + 1; return f_val; } function toggle(f_var, f_idx, f_val) { if(event_press(PS4_UP)) { if(f_var == f_idx) { if(modName_idx == 0) { f_val += 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 1) { f_val += 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 2) { f_val += 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 8) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 4) { f_val += 1; if(f_val > 5) f_val = 0; if(f_val < 0) f_val = 5; } else if(modName_idx == 5) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 6) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 7) { f_val += 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else f_val = 1; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } if(event_press(PS4_DOWN)) { if(f_var == f_idx) { if(modName_idx == 0) { f_val -= 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 1) { f_val -= 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 2) { f_val -= 1; if(f_val > 3) f_val = 0; if(f_val < 0) f_val = 3; } else if(modName_idx == 8) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 4) { f_val -= 1; if(f_val > 5) f_val = 0; if(f_val < 0) f_val = 5; } else if(modName_idx == 5) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 6) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else if(modName_idx == 7) { f_val -= 1; if(f_val > 7) f_val = 0; if(f_val < 0) f_val = 7; } else f_val = 0; if(f_val == 0) combo_run(RUMBLE_OFF); else combo_run(RUMBLE_ON); } display_new = TRUE; } return f_val; } function speed_toggle(f_hold, f_press, f_val, f_string) { if(get_val(f_hold)) { if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 50)) { modName_idx = f_string; if(f_val == 0) { f_val = 1; combo_run(RUMBLE_ON); } else { f_val = 0; combo_run(RUMBLE_OFF); } display_new = TRUE; } set_val(f_press, 0) } return f_val; } function display_profile() { if(display_title) { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 34; } if(display_new) { if(ModWeapon) { profile_width = OLED_FONT_MEDIUM_WIDTH; profile_font = OLED_FONT_MEDIUM; profile_y = 3; } else { profile_width = OLED_FONT_SMALL_WIDTH; profile_font = OLED_FONT_SMALL; profile_y = 23; } } if(profile_idx == 0) printf(center_x(sizeof(PROFILE_1) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_1[0]); else if(profile_idx == 1) printf(center_x(sizeof(PROFILE_2) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_2[0]); else if(profile_idx == 2) printf(center_x(sizeof(PROFILE_3) - 1, profile_width),profile_y,profile_font,OLED_WHITE,PROFILE_3[0]); } function display_edit(f_idx, f_string, f_print, f_val) { if(valName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_idx < AMOUNT_OF_VAL_IN_ARRAY) { if(weapon_category[profile_idx] == 0) { if(f_idx == 2) number_to_string((A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(A_RIFLE[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 1) { if(f_idx == 2) number_to_string((SMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(SMG[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SMG[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 2) { if(f_idx == 2) number_to_string((LMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((LMG[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(LMG[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(LMG[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 3) { if(f_idx == 2) number_to_string((RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((RIFLE[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(RIFLE[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(RIFLE[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 4) { if(f_idx == 2) number_to_string((SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SHOTGUN[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 5) { if(f_idx == 2) number_to_string((SNIPER[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((SNIPER[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(SNIPER[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(SNIPER[weapon_name[profile_idx]][valName_idx] + f_val)); } if(weapon_category[profile_idx] == 6) { if(f_idx == 2) number_to_string((HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100, find_digits((HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val) * 100)); else number_to_string(HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val, find_digits(HANDGUN[weapon_name[profile_idx]][valName_idx] + f_val)); } } else number_to_string(f_val, find_digits(f_val)); } } function NAME(){ cls_oled(0); combo_run(RACE); combo_run(RN); if (Y_1 > 64) Y_1 = 0; if (Y_2 > 64) Y_2 = 0; if (Y_3 > 64) Y_3 = 0; if (Y_4 > 64) Y_4 = 0; if (Y_5 > 64) Y_5 = 0; if (Y_6 > 64) Y_6 = 0; if (Y_7 > 64) Y_7 = 0; if (Y_8 > 64) Y_8 = 0; if (SD1 > 105) SD1 = -50; if (TP1 > 45) TP1 = 0; if (TP2 < 0) TP2 = 55; putc_oled(1,RN1); puts_oled(X_1,Y_1,0,1,1); putc_oled(1,RN2); puts_oled(X_2,Y_2,0,1,1); putc_oled(1,RN3); puts_oled(X_3,Y_3,0,1,1); putc_oled(1,RN4); puts_oled(X_4,Y_4,0,1,1); putc_oled(1,RN5); puts_oled(X_5,Y_5,0,1,1); putc_oled(1,RN6); puts_oled(X_6,Y_6,0,1,1); putc_oled(1,RN7); puts_oled(X_7,Y_7,0,1,1); putc_oled(1,RN8); puts_oled(X_8,Y_8,0,1,1); putc_oled(1,SSA1); puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1); putc_oled(1,SSA2); puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1); putc_oled(1,SSA3); puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1); putc_oled(1,SSA4); puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1); putc_oled(1,SSA5); puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1); putc_oled(1,SSA6); puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1); putc_oled(1,SSA7); puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1); putc_oled(1,SSA8); puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1); } function display_weapon () { if(!active_name) { name_width = OLED_FONT_SMALL_WIDTH; name_font = OLED_FONT_SMALL; name_y = 50; cat_width = OLED_FONT_MEDIUM_WIDTH; cat_font = OLED_FONT_MEDIUM; } else { name_width = OLED_FONT_MEDIUM_WIDTH; name_font = OLED_FONT_MEDIUM; name_y = 43; cat_width = OLED_FONT_SMALL_WIDTH; cat_font = OLED_FONT_SMALL; } if(weapon_category[profile_idx] == 0) { if(display_new) printf(center_x(sizeof(A_RIFLE_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,A_RIFLE_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(A_RIFLE_1) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(A_RIFLE_2) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(A_RIFLE_3) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(A_RIFLE_4) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_4[0]); if(weapon_name[profile_idx] == 4) printf(center_x(sizeof(A_RIFLE_5) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_5[0]); if(weapon_name[profile_idx] == 5) printf(center_x(sizeof(A_RIFLE_6) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_6[0]); if(weapon_name[profile_idx] == 6) printf(center_x(sizeof(A_RIFLE_7) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_7[0]); if(weapon_name[profile_idx] == 7) printf(center_x(sizeof(A_RIFLE_8) - 1, name_width),name_y,name_font,OLED_WHITE,A_RIFLE_8[0]); } if(weapon_category[profile_idx] == 1) { if(display_new) printf(center_x(sizeof(SMG_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SMG_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(SMG_1) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(SMG_2) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(SMG_3) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(SMG_4) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_4[0]); if(weapon_name[profile_idx] == 4) printf(center_x(sizeof(SMG_5) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_5[0]); if(weapon_name[profile_idx] == 5) printf(center_x(sizeof(SMG_6) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_6[0]); if(weapon_name[profile_idx] == 6) printf(center_x(sizeof(SMG_7) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_7[0]); if(weapon_name[profile_idx] == 7) printf(center_x(sizeof(SMG_8) - 1, name_width),name_y,name_font,OLED_WHITE,SMG_8[0]); } if(weapon_category[profile_idx] == 2) { if(display_new) printf(center_x(sizeof(LMG_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,LMG_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(LMG_1) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(LMG_2) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(LMG_3) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(LMG_4) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_4[0]); if(weapon_name[profile_idx] == 4) printf(center_x(sizeof(LMG_5) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_5[0]); if(weapon_name[profile_idx] == 5) printf(center_x(sizeof(LMG_6) - 1, name_width),name_y,name_font,OLED_WHITE,LMG_6[0]); } if(weapon_category[profile_idx] == 3) { if(display_new) printf(center_x(sizeof(RIFLE_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,RIFLE_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(RIFLE_1) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(RIFLE_2) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(RIFLE_3) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(RIFLE_4) - 1, name_width),name_y,name_font,OLED_WHITE,RIFLE_4[0]); } if(weapon_category[profile_idx] == 4) { if(display_new) printf(center_x(sizeof(SHOTGUN_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SHOTGUN_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(SHOTGUN_1) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(SHOTGUN_2) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(SHOTGUN_3) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(SHOTGUN_4) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_4[0]); if(weapon_name[profile_idx] == 4) printf(center_x(sizeof(SHOTGUN_5) - 1, name_width),name_y,name_font,OLED_WHITE,SHOTGUN_5[0]); } if(weapon_category[profile_idx] == 5) { if(display_new) printf(center_x(sizeof(SNIPER_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,SNIPER_LABEL[0]) if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(SNIPER_1) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(SNIPER_2) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(SNIPER_3) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(SNIPER_4) - 1, name_width),name_y,name_font,OLED_WHITE,SNIPER_4[0]); } if(weapon_category[profile_idx] == 6) { if(display_new) printf(center_x(sizeof(HANDGUN_LABEL) - 1, cat_width),30,cat_font,OLED_WHITE,HANDGUN_LABEL[0]); if(weapon_name[profile_idx] == 0) printf(center_x(sizeof(HANDGUN_1) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_1[0]); if(weapon_name[profile_idx] == 1) printf(center_x(sizeof(HANDGUN_2) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_2[0]); if(weapon_name[profile_idx] == 2) printf(center_x(sizeof(HANDGUN_3) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_3[0]); if(weapon_name[profile_idx] == 3) printf(center_x(sizeof(HANDGUN_4) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_4[0]); if(weapon_name[profile_idx] == 4) printf(center_x(sizeof(HANDGUN_5) - 1, name_width),name_y,name_font,OLED_WHITE,HANDGUN_5[0]); } if(weapon_category[profile_idx] == 0 && weapon_name[profile_idx] == 4) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 0 && weapon_name[profile_idx] == 5) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 1 && weapon_name[profile_idx] == 7) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 3 && weapon_name[profile_idx] == 0) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 3 && weapon_name[profile_idx] == 1) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 5 && weapon_name[profile_idx] == 1) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 5 && weapon_name[profile_idx] == 2) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 5 && weapon_name[profile_idx] == 3) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 6 && weapon_name[profile_idx] == 0) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 6 && weapon_name[profile_idx] == 1) toggle_rapidfire[profile_idx] = 1; if(weapon_category[profile_idx] == 6 && weapon_name[profile_idx] == 4) toggle_rapidfire[profile_idx] = 1; else if((weapon_category[profile_idx] < amount_fullauto_category) && display_new) toggle_rapidfire[profile_idx] = 0; } int layout_y; function display_mod(f_idx, f_string, f_print, f_toggle) { if(modName_idx == f_idx) { printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, f_print); if(f_idx == 0) { if(f_toggle == 1) printf(center_x(sizeof(PROGRESS) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PROGRESS[0]); else if(f_toggle == 2) printf(center_x(sizeof(STANDARD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STANDARD[0]); else if(f_toggle == 3) printf(center_x(sizeof(SmartAR) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SmartAR[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 8) { if(swap_on) { printf(center_x(sizeof(FLIPPED) - 1,OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL, OLED_WHITE,FLIPPED[0]); layout_y = 37; } else layout_y = 42; if(f_toggle == 1) printf(center_x(sizeof(BTN_LAYOUT_1) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_1[0]); else if(f_toggle == 2) printf(center_x(sizeof(BTN_LAYOUT_2) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_2[0]); else if(f_toggle == 3) printf(center_x(sizeof(BTN_LAYOUT_3) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_3[0]); else if(f_toggle == 4) printf(center_x(sizeof(BTN_LAYOUT_4) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_4[0]); else if(f_toggle == 5) printf(center_x(sizeof(BTN_LAYOUT_5) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_5[0]); else if(f_toggle == 6) printf(center_x(sizeof(BTN_LAYOUT_6) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_6[0]); else printf(center_x(sizeof(BTN_LAYOUT_0) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,BTN_LAYOUT_0[0]); } else if(f_idx == 1) { if(f_toggle == 1) printf(center_x(sizeof(Rapid_Fire) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,Rapid_Fire[0]); else if(f_toggle == 2) printf(center_x(sizeof(SmartFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SmartFIRE[0]); else if(f_toggle == 3) printf(center_x(sizeof(DynamicFIRE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DynamicFIRE[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 2) { if(f_toggle == 1) printf(center_x(sizeof(POLARAIM) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,POLARAIM[0]); else if(f_toggle == 2) printf(center_x(sizeof(PARACYST) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PARACYST[0]); else if(f_toggle == 3) printf(center_x(sizeof(POLARCYST) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,POLARCYST[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 4) { if(f_toggle == 1) printf(center_x(sizeof(STRAFESHOT) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,STRAFESHOT[0]); else if(f_toggle == 2) printf(center_x(sizeof(CROUCHSHOT) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,CROUCHSHOT[0]); else if(f_toggle == 3) printf(center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,JUMPSHOT[0]); else if(f_toggle == 4) printf(center_x(sizeof(JUMPSTRAFE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,JUMPSTRAFE[0]); else if(f_toggle == 5) printf(center_x(sizeof(DROPSTRAFE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DROPSTRAFE[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 5) { if(f_toggle == 1) printf(center_x(sizeof(PINGBYFIRE) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,PINGBYFIRE[0]); else if(f_toggle == 2) printf(center_x(sizeof(AUTO_PING) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AUTO_PING[0]); else if(f_toggle == 3) printf(center_x(sizeof(TURBOMELEE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,TURBOMELEE[0]); else if(f_toggle == 4) printf(center_x(sizeof(TMADSPING) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,TMADSPING[0]); else if(f_toggle == 5) printf(center_x(sizeof(TMFIREPING) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,TMFIREPING[0]); else if(f_toggle == 6) printf(center_x(sizeof(DOUBLEPING) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,DOUBLEPING[0]); else if(f_toggle == 7) printf(center_x(sizeof(ALLGLOBALON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLGLOBALON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 6) { if(f_toggle == 1) printf(center_x(sizeof(EASYFIRE) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EASYFIRE[0]); else if(f_toggle == 2) printf(center_x(sizeof(EASY_HEAL) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EASY_HEAL[0]); else if(f_toggle == 3) printf(center_x(sizeof(EASY_NADE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,EASY_NADE[0]); else if(f_toggle == 4) printf(center_x(sizeof(AIMHEAL) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AIMHEAL[0]); else if(f_toggle == 5) printf(center_x(sizeof(AIMNADE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AIMNADE[0]); else if(f_toggle == 6) printf(center_x(sizeof(HEALNADE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,HEALNADE[0]); else if(f_toggle == 7) printf(center_x(sizeof(ALLEASYON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLEASYON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else if(f_idx == 7) { if(f_toggle == 1) printf(center_x(sizeof(AIM_ABUSE) - 1,OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AIM_ABUSE[0]); else if(f_toggle == 2) printf(center_x(sizeof(AUTO_RELOAD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,AUTO_RELOAD[0]); else if(f_toggle == 3) printf(center_x(sizeof(ABILITYSHOT) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ABILITYSHOT[0]); else if(f_toggle == 4) printf(center_x(sizeof(RELOADABUSE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,RELOADABUSE[0]); else if(f_toggle == 5) printf(center_x(sizeof(ABILITYABUSE) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ABILITYABUSE[0]); else if(f_toggle == 6) printf(center_x(sizeof(ABILITYLOAD) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ABILITYLOAD[0]); else if(f_toggle == 7) printf(center_x(sizeof(ALLMISCON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,ALLMISCON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } else { if(f_toggle == 1) printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]); else printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]); } } } function AntiRecoil(Input,Power) { set_val(Input,(Power * (100 - abs(get_ival(Input)))) / 100 + get_ival(Input)); } int RT,MSC,SD1,DGT,DGR,TP1,TP2; int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8; function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { if(press_hold(f_btn)) { f_val += f_inc; if(valName_idx >= AMOUNT_OF_VAL_IN_ARRAY) { if(f_val < inv(f_rng_min)) f_val = inv(f_rng_min); if(f_val > f_rng_max) f_val = f_rng_max; } else { if(weapon_category[profile_idx] == 0) { if((f_val + A_RIFLE[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + A_RIFLE[weapon_name[profile_idx]][valName_idx]); if((f_val + A_RIFLE[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - A_RIFLE[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 1) { if((f_val + SMG[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + SMG[weapon_name[profile_idx]][valName_idx]); if((f_val + SMG[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - SMG[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 2) { if((f_val + LMG[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + LMG[weapon_name[profile_idx]][valName_idx]); if((f_val + LMG[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - LMG[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 3) { if((f_val + RIFLE[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + RIFLE[weapon_name[profile_idx]][valName_idx]); if((f_val + RIFLE[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - RIFLE[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 4) { if((f_val + SHOTGUN[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + SHOTGUN[weapon_name[profile_idx]][valName_idx]); if((f_val + SHOTGUN[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - SHOTGUN[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 5) { if((f_val + SNIPER[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + SNIPER[weapon_name[profile_idx]][valName_idx]); if((f_val + SNIPER[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - SNIPER[weapon_name[profile_idx]][valName_idx]; } if(weapon_category[profile_idx] == 6) { if((f_val + HANDGUN[weapon_name[profile_idx]][valName_idx]) < inv(f_rng_min)) f_val = inv(f_rng_min + HANDGUN[weapon_name[profile_idx]][valName_idx]); if((f_val + HANDGUN[weapon_name[profile_idx]][valName_idx]) > f_rng_max) f_val = f_rng_max - HANDGUN[weapon_name[profile_idx]][valName_idx]; } } display_new = TRUE; } return f_val; } function double_click(button) { if (double__tap[button] >= 0) { double__tap[button] += get_rtime(); if (double__tap[button] > 450) double__tap[button] = -1; } if (event_release(button) && get_ptime(button) <= 200) { if (double__tap[button] < 0) { double__tap[button] = 0; } else { double__tap[button] = -1; return 1; } } return 0; } function number_to_string(f_val,f_digits) { i = 1; c_val = 10000; if(f_val < 0) { putc_oled(i,45); i += 1; f_val = abs(f_val); } for(c = 5; c >= 1; c--) { if(f_digits >= c) { putc_oled(i,ASCII_NUM[f_val / c_val]); f_val = f_val % c_val; i += 1; if(c == 4) { putc_oled(i,44); i += 1; } } c_val /= 10; } if(display_title) puts_oled(120, 34, OLED_FONT_SMALL, i - 1, OLED_WHITE); else puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); } function find_digits(f_num) { f_num = abs(f_num); if(f_num / 10000 > 0) return 5; if(f_num / 1000 > 0) return 4; if(f_num / 100 > 0) return 3; if(f_num / 10 > 0) return 2; return 1; } function center_x(f_chars,f_font) { return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); } function center_y(f_size) { return (OLED_HEIGHT / 2) - (f_size / 2); } function press_hold(f_btn) { return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 && get_ptime(f_btn) % (get_rtime() * 8) == 0; } function led(f_color) { for(i = 0; i <= 3; i++) { set_led(i,duint8((f_color * 4) + i)); } } int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; function save () { combo_run(SAVE); set_pvar(SPVAR_1,toggle_antirecoil[0] ); set_pvar(SPVAR_5 ,antirecoil_start[0] ); set_pvar(SPVAR_2,toggle_rapidfire[0] ); set_pvar(SPVAR_6 ,antirecoil_end[0] ); set_pvar(SPVAR_3,toggle_aimtype[0] ); set_pvar(SPVAR_7,antirecoil_time[0] ); set_pvar(SPVAR_8,antirecoil_horizontal[0]); set_pvar(SPVAR_4,toggle_quickscope[0] ); set_pvar(SPVAR_9,rate_of_fire[0] ); set_pvar(SPVAR_13,toggle_antirecoil[1]); set_pvar(SPVAR_17,antirecoil_start[1] ); set_pvar(SPVAR_14,toggle_rapidfire[1] ); set_pvar(SPVAR_18,antirecoil_end[1] ); set_pvar(SPVAR_15,toggle_aimtype[1] ); set_pvar(SPVAR_19,antirecoil_time[1] ); set_pvar(SPVAR_20,antirecoil_horizontal[1]); set_pvar(SPVAR_16,toggle_quickscope[1]); set_pvar(SPVAR_21,rate_of_fire[1] ); set_pvar(SPVAR_25,toggle_antirecoil[2]); set_pvar(SPVAR_29,antirecoil_start[2] ); set_pvar(SPVAR_26,toggle_rapidfire[2] ); set_pvar(SPVAR_30,antirecoil_end[2] ); set_pvar(SPVAR_27,toggle_aimtype[2] ); set_pvar(SPVAR_31,antirecoil_time[2] ); set_pvar(SPVAR_32,antirecoil_horizontal[2]); set_pvar(SPVAR_28,toggle_quickscope[2]); set_pvar(SPVAR_33,rate_of_fire[2] ); set_pvar(SPVAR_37, swap_on ); set_pvar(SPVAR_38,RADIUS ); set_pvar(SPVAR_39,STEPS ); set_pvar(SPVAR_40,STEADY_AIM ); set_pvar(SPVAR_41,quickscopedelay); set_pvar(SPVAR_42,Aim_Boost ); set_pvar(SPVAR_43,Aim_Correction ); set_pvar(SPVAR_44,Aim_Size ); set_pvar(SPVAR_45,Aim_Time ); set_pvar(SPVAR_46,Aim_Perfect ); set_pvar(SPVAR_47,SmartTime ); set_pvar(SPVAR_48,DYNATIME ); set_pvar(SPVAR_49,DYNAMIN ); set_pvar(SPVAR_50, weapon_category[0]); set_pvar(SPVAR_53, weapon_name[0] ); set_pvar(SPVAR_51, weapon_category[1]); set_pvar(SPVAR_54, weapon_name[1] ); set_pvar(SPVAR_52, weapon_category[2]); set_pvar(SPVAR_55, weapon_name[2] ); set_pvar(SPVAR_56,btn_layout ); set_pvar(SPVAR_57,shot_mods ); set_pvar(SPVAR_58,global_mods ); set_pvar(SPVAR_59,easy_mods ); set_pvar(SPVAR_60,misc_mods ); } function block_btn() { set_val(PS4_UP , 0 ); set_val(PS4_DOWN , 0 ); set_val(PS4_LEFT , 0 ); set_val(PS4_RIGHT , 0); set_val(PS4_CROSS , 0 ); set_val(PS4_CIRCLE, 0 ); set_val(PS4_SQUARE, 0 ); set_val(PS4_TRIANGLE, 0); set_val(PS4_L1 , 0 ); set_val(PS4_R1 , 0 ); set_val(PS4_L3 , 0 ); set_val(PS4_R3 , 0); set_val(PS4_OPTIONS, 0 ); set_val(PS4_SHARE , 0 ); set_val(PS4_TOUCH , 0 ); set_val(PS4_PS , 0); set_val(XB1_PL1 , 0 ); set_val(XB1_PL2 , 0 ); set_val(XB1_PR1 , 0 ); set_val(XB1_PR2 , 0); } int JUMP_BTN, CROUCH_BTN, RELOAD_BTN,TAC_BTN,PING_BTN,AIM_BTN,FIRE_BTN,SPRINT_BTN, MELEE_BTN, NADE_BTN, HEAL_BTN; function buttons_layout() { if (btn_layout == 0) { JUMP_BTN = PS4_CROSS; TAC_BTN = PS4_L1; CROUCH_BTN = PS4_CIRCLE; PING_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_UP; SPRINT_BTN = PS4_L3; NADE_BTN = PS4_RIGHT; MELEE_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 1) { TAC_BTN = PS4_CROSS; JUMP_BTN = PS4_L1; CROUCH_BTN = PS4_CIRCLE; PING_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_UP; SPRINT_BTN = PS4_L3; NADE_BTN = PS4_RIGHT; MELEE_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 2) { TAC_BTN = PS4_L1; JUMP_BTN = PS4_CROSS; MELEE_BTN = PS4_CIRCLE; PING_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_UP; SPRINT_BTN = PS4_L3; NADE_BTN = PS4_RIGHT; CROUCH_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 3) { TAC_BTN = PS4_CROSS; JUMP_BTN = PS4_L1; MELEE_BTN = PS4_CIRCLE; PING_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_UP; SPRINT_BTN = PS4_L3; NADE_BTN = PS4_RIGHT; CROUCH_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 4) { JUMP_BTN = PS4_CROSS; TAC_BTN = PS4_L1; CROUCH_BTN = PS4_CIRCLE; NADE_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_RIGHT; SPRINT_BTN = PS4_L3; PING_BTN = PS4_UP; MELEE_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 5) { TAC_BTN = PS4_CIRCLE; JUMP_BTN = PS4_L1; PING_BTN = PS4_CROSS; CROUCH_BTN = PS4_R1; RELOAD_BTN = PS4_SQUARE; AIM_BTN = PS4_L2; FIRE_BTN = PS4_R2; HEAL_BTN = PS4_UP; SPRINT_BTN = PS4_L3; NADE_BTN = PS4_RIGHT; MELEE_BTN = PS4_R3; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } else if (btn_layout == 6) { MELEE_BTN = USER_MELEE_BTN; JUMP_BTN = USER_JUMP_BTN; TAC_BTN = USER_ABILITY_BTN; PING_BTN = USER_PING_BTN; RELOAD_BTN = USER_RELOAD_BTN; AIM_BTN = USER_AIM_BTN; FIRE_BTN = USER_FIRE_BTN; HEAL_BTN = USER_HEAL_BTN; SPRINT_BTN = USER_SPRINT_BTN; NADE_BTN = USER_NADE_BTN; CROUCH_BTN = USER_CROUCH_BTN; if(swap_on) { swap(PS4_L1, PS4_L2); swap(PS4_R1, PS4_R2); } } } function SHOT_MODS() { if((shot_mods == 1 && HipFireStrafeONLY == FALSE) ||(shot_mods == 4 && HipFireStrafeONLY == FALSE) ||(shot_mods == 5 && HipFireStrafeONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (strafe_shot); } if((shot_mods == 1 && HipFireStrafeONLY == TRUE) ||(shot_mods == 4 && HipFireStrafeONLY == TRUE) ||(shot_mods == 5 && HipFireStrafeONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (strafe_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (strafe_shot); } if((shot_mods == 2 && HipFireCrouchONLY == FALSE) ||(shot_mods == 5 && HipFireCrouchONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (crouch_shot); } if((shot_mods == 2 && HipFireCrouchONLY == TRUE) ||(shot_mods == 5 && HipFireCrouchONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (crouch_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (crouch_shot); } if((shot_mods == 3 && HipFireJumpONLY == FALSE) ||(shot_mods == 4 && HipFireJumpONLY == FALSE)) { if(get_val(FIRE_BTN)) combo_run (jump_shot); } if((shot_mods == 3 && HipFireJumpONLY == TRUE) ||(shot_mods == 4 && HipFireJumpONLY == TRUE)) { if(get_val(FIRE_BTN)) combo_run (jump_shot); if(get_val(AIM_BTN) &&get_ptime(AIM_BTN) > 200) combo_stop (jump_shot); } } function GLOBAL_MODS() { if((global_mods == 1) ||(global_mods == 5) ||(global_mods == 6) ||(global_mods == 7)) { if(get_val(FIRE_BTN) && get_val(AIM_BTN)) combo_run(auto_ping); } if((global_mods == 2) ||(global_mods == 4) ||(global_mods == 6) ||(global_mods == 7)) { if(double_click(AIM_BTN)) combo_run(auto_ping); } if((global_mods == 3) ||(global_mods == 4) ||(global_mods == 5) ||(global_mods == 7)) { if(get_val(MELEE_BTN)) combo_run(TURBO); } } function EASY_MODS() { if((easy_mods == 1) ||(easy_mods == 4) ||(easy_mods == 5) ||(easy_mods == 7)) { if(get_val(FIRE_BTN)) set_val(AIM_BTN,100); if(event_release(FIRE_BTN)) set_val(AIM_BTN, 0); } if((easy_mods == 2) ||(easy_mods == 4) ||(easy_mods == 6) ||(easy_mods == 7)) { if(double_click(HEAL_BTN)) combo_run(easy_heal); if(get_val(AIM_BTN)>20 || get_val(FIRE_BTN)>20 || get_val(RELOAD_BTN)) combo_stop(easy_heal); } if((easy_mods == 3) ||(easy_mods == 5) ||(easy_mods == 6) ||(easy_mods == 7)) { if(double_click(NADE_BTN)) combo_run(EASYNADE); if(get_val(AIM_BTN)>20 || get_val(FIRE_BTN)>20 || get_val(RELOAD_BTN)) combo_stop(EASYNADE); } } function MISC_MODS() { if((misc_mods == 1) ||(misc_mods == 4) ||(misc_mods == 5) ||(misc_mods == 7)) { if (get_val(AIM_BTN)>95) { aimabuse_hold = aimabusehold; aimabuse_rest = aimabuserest; combo_run(ABUSE); } else if (combo_running(ABUSE)) { combo_stop(ABUSE); } } if((misc_mods == 2) ||(misc_mods == 4) ||(misc_mods == 6) ||(misc_mods == 7)) { if(event_release(FIRE_BTN)) combo_run(AUTORELOAD); } if((misc_mods == 3) ||(misc_mods == 5) ||(misc_mods == 6) ||(misc_mods == 7)) { if(get_val(FIRE_BTN)) combo_run(ability_shot); } }