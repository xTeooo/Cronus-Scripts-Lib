																																																																																																																																		/*
                         _____    _____            _   _   _   _              _           _    _
                        / ____|  / ____|          | \ | | (_) | |            | |         (_)  ( )
                       | (___   | (___            |  \| |  _  | | __   ___   | |   __ _   _   |/   ___
                        \___ \   \___ \           | . ` | | | | |/ /  / _ \  | |  / _` | | |      / __|
                        ____) |  ____) |          | |\  | | | |   <  | (_) | | | | (_| | | |      \__ \
                       |_____/  |_____/           |_| \_| |_| |_|\_\  \___/  |_|  \__,_| |_|      |___/
                                          ______
                                         |______|
                                ______   _                _
                               |  ____| (_)              | |
                               | |__     _   _ __   ___  | |_
                               |  __|   | | | '__| / __| | __|
                               | |      | | | |    \__ \ | |_
                               |_|      |_| |_|    |___/  \__|
                                _____
                               |  __ \
                               | |__) |   ___   _ __   ___    ___    _ __
                               |  ___/   / _ \ | '__| / __|  / _ \  | '_ \
                               | |      |  __/ | |    \__ \ | (_) | | | | |
                               |_|       \___| |_|    |___/  \___/  |_| |_|
                                 _____   _                       _
                                / ____| | |                     | |
                               | (___   | |__     ___     ___   | |_    ___   _ __
                                \___ \  | '_ \   / _ \   / _ \  | __|  / _ \ | '__|
                                ____) | | | | | | (_) | | (_) | | |_  |  __/ | |
                               |_____/  |_| |_|  \___/   \___/   \__|  \___| |_|
                                 _____                 _           _
                                / ____|               (_)         | |
                               | (___     ___   _ __   _   _ __   | |_
                                \___ \   / __| | '__| | | | '_ \  | __|
                                ____) | | (__  | |    | | | |_) | | |_
                               |_____/   \___| |_|    |_| | .__/   \__|
                                                          | |
                                                          |_|
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Note From CHI CHI / ErickCHIN :
					- UP & DOWN to Select the value to edit.
					- LEFT & RIGHT to increase or decrease Selected value
					- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 					Credits To The Following People Below :
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- ErikChin / CHI CHI For His Mod Menu Screen & Optimized Triple Sticky Aim + Always helping me out so much
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Sweet_Evil For His Strafe Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- ItzSnack For Drop shot
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Djangokill For Chicken Mod idea, Bunny Hop, Smart Grenade
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- AnusPower for Auto Sprint code + always helping me so much
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Crescens For Aim Sensitivity Corrections & Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Swizzy For Bitpacking Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DoNotAtMe For His Zen Eye Colour Pulsing & Polar Aim Assist
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- TaylorDrift For DNAM Polar With Shapes, Button and Sticks Layout Array, Teaching me how to choose different modes on screen & Helping me with so much + so much more
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Me, SS_Nikolai For Putting All This Together + Updating/Optimzing It, Coming Up With Quad Sticky Idea & Optmizing Strafe Combo To Have More Random/Natural Like Movements
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																								*/

//--BUTTON LAYOUT ---> Customize To Your Layout <---
	define LayOut				=		 0;	 // Choose The Number From Below That Corresponds To Your Layout
	define Sticks				=		 0;	 // Choose The Number From Below That Corresponds To Your Stick Layout
	define Ping_BTN				= 	PS4_UP;	 // Depending On The Game You're Playing This Button Will Vary
	int    INVERTED				=		 1;	 // Make 2 If you play Inverted
																																																																																																		/*
//--Button Layouts
	 			0 = Default
	 			1 =	Tactical
	 			2 = Lefty
	 			3 = N0M4D/CHARLIE
	 			4 = N0M4D/CHARLIE Tactical_BTN
	 			5 = N0M4D/CHARLIE LEFTY
	 			6 = Bumper Jumper
	 			7 = Bumper Jumper Tactical
	 			8 = One-Hand Gunslinger
	 			9 = Stick & Move
				10 = Brawler
				11 = Beasty
				12 = Bumper Ping
				13 = Bumper Ping Tactical
				14 = Default Swapped
				15 = Tactical Swapped
				16 = Bumper Jumper Swapped
				17 = Bumper Jumper Tactical Swapped
				18 = Stick & Move Swapped
				19 = Beasty Swapped
				20 = Bumper Ping
				21 = Bumper Ping Tactical

//--Stick Layouts
	 			 0 = Default
	 			 1 = South Paw
	 			 2 = Legacy
	 			 3 = Legacy South Paw																																																																																											*/

//--Stick Drift Removal
	define StickDriftRemoval		= TRUE; // Crescens Polar WILL NOT WORK With This Enabled Unfortunately
	define DeadZoneValue			=   13; // Any Value Under This Will Be Registered As 0 - Good For Old Controllers That Drift Off - If The Value Exceeds 15 You Need A New Controller

//--Choose Whether Or Not You Want Radius And Or Speed Boost Enabled When Using Crescens Polar AA
	define CrescensRadiusBoost		= FALSE;
	define CrescensSpeedBoost		= FALSE;

//--Part Of Multi Sticky
	int DriftSize					=  3;	// If your screen shakes whilst using aim assist - lower this value, ideally put it 2 or 3 clicks above ingame deadzone
	int DriftWaitValue				= 30;	// Speed of the aim assist (Must be a 10's value, Example: 10, 20, 30, 40, etc

//--This is ideally for games like CW or Apex that have in-game strafe assist. If you use this on a game that doesn't I recommend setting the value to 0 or something low like 5
	define QuadStrafeAssist			=  14;	// Strafe Output With Quad Sticky

//--Slide Cancel Threshold and Delay
	define CWSlideCancelDelay		= 160;	// Delay For Cold War Slide Cancel
	define MWVGSlideCancelDelay		= 120;	// Modern Warfare / Vanguard Slide Cancel Delay
	define BF2042SlideCancelDelay	= 140;	// Delay For Battlefield 2042 Slide Cancel
	define MW2SlideCancelDelay		= 300;  // Delay For MW2 / Warzone 2 Slide Cancel
	define THRESHOLD				=  83;	// Amount Of Pressure Applied To Left Stick Axis To Make Slide Cancel Activate - 83-87 Seems To Be The Sweet Spot.

//--Easy Prone Button
	define EasyProneButton			= PS4_R3;	// While Firing, Hold This Button To Go Prone

//--Hair Triggers ( IF L2/LT OR R2/RT IS HELD MORE THEN 10% IT'LL REGISTER AS 100% IN THE GAME )
	int HairTriggersToggle			= TRUE;

//--If Set To TRUE Then When Your Controller Reaches Below 10% Your Controller Will Vibrate 3 Times Every 5 Seconds Until Charger Is Connected
	define BatteryWarningToggle		= FALSE;

//--Kill Switch Toggle Stuff
	define KillSwitchToggle			=	TRUE;		// If Set To TRUE Then Be Sure To Choose A Method From Below & Button Activators As Well.
	int    KillSwitchMethod			=	   1;		// 1 = Hold KillSwitchHoldButton + Single Tap KillSwitchDblTapButton.
													// 2 = Hold KillSwitchHoldButton + Double Tap KillSwitchDblTapButton.
													// 3 = Double Tap KillSwitchDblTapButton.
													// 4 = (Drive Mode) Hold KillSwitchHoldButton + Double Tap KillSwitchDblTapButton. (Exit Drive Mode By Tapping Square/X)
	define KillSwitchHoldButton		=	  PS4_DOWN;	// Hold This This Button To & Use KillSwitchDblTapButton To Activate & Deactivate Kill Switch.
	define KillSwitchDblTapButton	= PS4_TRIANGLE;	// Single or Double Tap This Button While Holding KillSwitchHoldButton To Activate & Deactivate Kill Switch. !!( Make Sure You Choose Your KillSwitchMethod )!!

//--Quick Toggle Stuff	
	define QuickToggles				=	   TRUE;	// Make TRUE If You Want The Ability To Turn On The 4 Mods From Below Without Entering Menu.
	define QuickToggleHoldButton	=    PS4_L2;	// Hold This Button & Tap One Of The Buttons Below To Activate A Quick Mod.
	define RapidFireQT				= PS4_RIGHT;	// QuickToggleHoldButton + This Button To Activate Rapid Fire.
	define DropShotQT				=  PS4_DOWN;	// QuickToggleHoldButton + This Button To Activate Drop Shot.
	define BunnyHopQT				=  PS4_LEFT;	// QuickToggleHoldButton + This Button To Activate Bunny Hop.
	define JumpShotQT				=    PS4_UP;	// QuickToggleHoldButton + This Button To Activate Jump Shot.
																																																																																														/*
						 _   _           _   _               _     _______
						| \ | |         | \ | |             | |   |__   __|
						|  \| | ___     |  \| | ___  ___  __| |      | | ___
						| . ` |/ _ \    | . ` |/ _ \/ _ \/ _` |      | |/ _ \
						| |\  | (_) |   | |\  |  __/  __/ (_| |      | | (_) |
						|_| \_|\___/    |_| \_|\___|\___|\__,_|      |_|\___/
				  _ _           _                                ______          _   _
		 /\      | (_)         | |         /\                   |  ____|        | | | |
	    /  \   __| |_ _   _ ___| |_       /  \   _ __  _   _    | |__ _   _ _ __| |_| |__   ___ _ __
       / /\ \ / _` | | | | / __| __|     / /\ \ | '_ \| | | |   |  __| | | | '__| __| '_ \ / _ \ '__|
	  / ____ \ (_| | | |_| \__ \ |_     / ____ \| | | | |_| |   | |  | |_| | |  | |_| | | |  __/ |
	 /_/    \_\__,_| |\__,_|___/\__|   /_/    \_\_| |_|\__, |   |_|   \__,_|_|   \__|_| |_|\___|_|
                  _/ |                                  __/ |
                 |__/                                  |___/                                            																																																													*/
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | I | N | I | T | I | L | I | Z | A | T | I | O | N | | | | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
init {
	Load_PVARs();

	Colour = 255;

	combo_run(cSSNikolai);

	if(INVERTED == 2)
		Inverted = -1;
	else
		Inverted = 1;

	if(TaylorShape == 4)
	{
		InnerSpiral = TaylorRadius / 2;
		OuterSpiral = TaylorRadius;
	}

	aR_Strength = (AR_Strength / 2) + AR_Strength;

	if(VerticalStart < VerticalEnd)
		VertVal = 1;
	else
		VertVal = -1;

	VertCalc = (VerticalTime / 10) / (abs(VerticalStart - VerticalEnd));

	if(HorizontalStart < HorizontalEnd)
		HorizVal = 1;
	else
		HorizVal = -1;

	HorizCalc = (HorizontalTime / 10) / (abs(HorizontalStart - HorizontalEnd));
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
	RightStickRadius	= isqrt(pow(get_ival(AimX)  , 2) + pow(get_ival(AimY), 2));
	LeftStickRadius		= isqrt(pow(get_ival(Strafe), 2) + pow(get_ival(Walk), 2));
	Running				= LeftStickRadius >= 95 && get_ival(Walk) < -THRESHOLD;
	SmartRumble			= get_rumble(RumbleToUse());

	if(StickDriftRemoval)
	{
		if(RightStickRadius <= DeadZoneValue)
		{
			set_val(AimY, 0);
			set_val(AimX, 0);
		}

		if(LeftStickRadius <= DeadZoneValue)
		{
			set_val(Strafe, 0);
			set_val(Walk  , 0);
		}
	}

 	if(get_console() == PIO_PS4)
    {
        if(get_controller() != PIO_PS4) // If not PS4 controller:
        {
            if(get_ival(PS4_SHARE)) // View
            {
                if(get_ival(PS4_R3)) // RS + View =  ScreenShot
                {
                    set_val(PS4_SHARE, 100);
                    set_val(PS4_TOUCH,   0);
                    set_val(PS4_R3   ,   0);
                }
                else // View only = PS4_TOUCH
                {
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE,   0);
                }
            }
        }
    }
    else if(get_console() == PIO_XB360) // If XBOX console
    {
        if(get_controller() == PIO_PS4) // If PS4 controller:
            swap(PS4_TOUCH, PS4_SHARE);
    }

	Buttons(LayOut);
	ControllerRSLS(Sticks);

	// BLOCK RUMBLE - START
	if(RumbleBlockToggle)
		block_rumble();
	// BLOCK RUMBLE - END

	//HAIR TRIGGERS -  START
	if(HairTriggersToggle)
	{
		if(get_ival(PS4_R2) > 10) // We don't assign these as Fire_BTN variable because ONLY L2/LT and R2/RT can have a hair trigger to them
			set_val(PS4_R2, 100);

		if(get_ival(PS4_L2) > 10) // We don't assign these as Ads_BTN variable because ONLY L2/LT and R2/RT can have a hair trigger to them
			set_val(PS4_L2, 100);
	}
	//HAIR TRIGGERS - END

	//BATTERY WARNING - START
	if(BatteryWarningToggle)
	{
		if(RunRumble && !combo_running(cVibrate2))
		{
			RunRumble -= 1;
			combo_restart(cVibrate2);
		}

		if(get_battery() <= 5) 
		{
			MS += get_rtime();

			if(MS == 5000)
			{
				Rumble(FALSE, 3);
				MS = 0;
			}
		}
	}
	//BATTERY WARNING - END

	//AUTO RUN - START
	if(AutoRunMode && !AutoRun_KS)
	{
		switch(AutoRunMode)
		{
			case 1 :
			{
				Sprinting = TRUE;
			break;
			}

			case 2 :
			{
				if (!get_val(Ads_BTN) && get_val(Walk) < -THRESHOLD)
				{
					combo_run(cRun);
				}

				if(get_val(Sprint_BTN) && get_val(Walk) < -THRESHOLD)
				{
					Sprinting = TRUE;
				}

				if(Sprinting)
				{
					if(get_ival(Walk) > -THRESHOLD)
					{
						Sprinting = FALSE;
					}
				}
			break;
			}

			case 3 :
			{
				if(!get_ival(Ads_BTN) && (!combo_running(cCancelSlideMW) || combo_running(cCancelSlideCW)) &&
					  isqrt(pow(abs(get_ival(Strafe)), 2) + pow(abs(get_ival(Walk)), 2)) >= 97 && get_ival(Walk) <= -72 &&
					!(isqrt(pow(abs(get_lval(Strafe)), 2) + pow(abs(get_lval(Walk)), 2)) >= 97 && get_lval(Walk) <= -72))
						combo_run(cRun);
			break;
			}

			case 4 :
			{
				leftStick = Get_Polar(POLAR_LS, POLAR_RADIUS);

				if(event_release(Sprint_BTN) && get_ptime(Sprint_BTN) <= 200 && leftStick > THRESHOLD)
				{
					combo_run(cTacSprint);
				}

				if(leftStick < THRESHOLD && combo_running(cTacSprint) || get_val(Ads_BTN) || get_val(Fire_BTN))
				{
					combo_stop(cTacSprint);
				}
			break;
			}
		}
	}

		if(event_press(Reload_BTN))
		{
			combo_run(cStopSprint);
		}

		if(event_press(Ads_BTN) || event_press(Fire_BTN))
		{
			combo_stop(cStopSprint);
			AutoRun_KS = FALSE;
		}
	//AUTO RUN - END

	//KILL SWITCH METHOD & TOGGLE / DRIVE MODE - START
	if(KillSwitchToggle)
	{
		switch(KillSwitchMethod)
		{
			case 1 :
			{
				if(get_ival(KillSwitchHoldButton))
				{
					if(event_press(KillSwitchDblTapButton))
					{
						KillSwitch	= !KillSwitch;
						Frame		=	 -1;
						Display		=  TRUE;
						combo_restart(cSSNikolai);
						combo_run(cVibrate);
						LEDBlink(KillSwitch);
					}
						set_val(KillSwitchDblTapButton, 0);
				}
			break;
			}

			case 2 :
			{
				if(get_ival(KillSwitchHoldButton))
				{
					if(DoubleClick(KillSwitchDblTapButton))
					{
						KillSwitch	= !KillSwitch;
						Frame		=	 -1;
						Display		=  TRUE;
						combo_restart(cSSNikolai);
						combo_run(cVibrate);
						LEDBlink(KillSwitch);
					}
						set_val(KillSwitchDblTapButton, 0);
				}
			break;
			}

			case 3 :
			{
				if(DoubleClick(KillSwitchDblTapButton))
				{
					KillSwitch	= !KillSwitch;
					Frame		=	 -1;
					Display		=  TRUE;
					combo_restart(cSSNikolai);
					combo_run(cVibrate);
					LEDBlink(KillSwitch);
				}
					set_val(KillSwitchDblTapButton, 0);
			break;
			}

			case 4 :
			{
				if(get_ival(KillSwitchHoldButton))
				{
					if(DoubleClick(KillSwitchDblTapButton))
					{
						driveMode	=  TRUE;
						KillSwitch	=  TRUE;
						Frame		=	 -1;
						Display		=  TRUE;
						combo_restart(cSSNikolai);
						combo_run(cVibrate);
					}
						set_val(KillSwitchDblTapButton, 0);
				}
			break;
			}
		}

		if(driveMode)
		{
			if(event_press(PS4_SQUARE))
			{
				driveMode	= FALSE;
				KillSwitch	= FALSE;
			}
		}
	}
	//KILL SWITCH METHOD & TOGGLE / DRIVE MODE - END

	if(!KillSwitch)
	{
		if(ZenScreen == MenuClose)
		{

		//QUICK TOGGLE - START
		if(QuickToggles)
		{
			if(get_ival(QuickToggleHoldButton))
			{
				if(event_press(RapidFireQT))
				{
					RapidFireToggle = !RapidFireToggle;
					combo_run(cVibrate);
					LEDBlink(RapidFireToggle);
				}

				if(event_press(DropShotQT))
				{
					StandardDropShotToggle = !StandardDropShotToggle;
					combo_run(cVibrate);
					LEDBlink(StandardDropShotToggle);
				}

				if(event_press(BunnyHopQT))
				{
					BunnyHopToggle = !BunnyHopToggle;
					combo_run(cVibrate);
					LEDBlink(BunnyHopToggle);
				}

				if(event_press(JumpShotQT))
				{
					JumpShotToggle = !JumpShotToggle;
					combo_run(cVibrate);
					LEDBlink(JumpShotToggle);
				}
					set_val(RapidFireQT, 0);
					set_val(DropShotQT , 0);
					set_val(BunnyHopQT , 0);
					set_val(JumpShotQT , 0);
			}
		}
		//QUICK TOGGLE - END

	    //RAPIDFIRE - START
		if(RapidFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShotToggle == 2 && get_ival(Ads_BTN) || ScopeShotToggle == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cRapidFire);
			}

			if(event_release(Fire_BTN) || ScopeShotToggle == 2 && event_release(Ads_BTN) || ScopeShotToggle == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cRapidFire);
			}
		}

		if(AkimboRapidFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShotToggle == 2 && get_ival(Ads_BTN) || ScopeShotToggle == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cAkimboRapid);
			}

			if(event_release(Fire_BTN) || ScopeShotToggle == 2 && event_release(Ads_BTN) || ScopeShotToggle == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cAkimboRapid);
			}
		}

		if(BurstFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShotToggle == 2 && get_ival(Ads_BTN) || ScopeShotToggle == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cBurstFire);
			}

			if(event_release(Fire_BTN) || ScopeShotToggle == 2 && event_release(Ads_BTN) || ScopeShotToggle == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cBurstFire);
			}
		}

		if(DynamicRapidFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShotToggle == 2 && get_ival(Ads_BTN) || ScopeShotToggle == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				deadzone(PS4_L2, PS4_R2, 10, 10);
				Fire_Rate = 1000 / get_ival(Fire_BTN) * 2;
				combo_run(cDynaFire);
			}

			if(event_release(Fire_BTN) || ScopeShotToggle == 2 && event_release(Ads_BTN) || ScopeShotToggle == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cDynaFire);
			}
		}
		//RAPIDFIRE - END

		//ANTI RECOIL - START
		switch(AntiRecoilType)
		{
			case 1 : /* Taylor Rumble V1 - Slightly Edited By SS_Nikolai */
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					if(get_controller() == PIO_XB1)
					{
						if(SmartRumble > 10 && SmartRumble < 90)
						{
							AntirecoilStrength = (TaylorARVert * Inverted) + SmartRumble / 2;
						}
					}
					else
					{
						if(SmartRumble > 10 && SmartRumble < 90)
						{
							AntirecoilStrength = (TaylorARVert * Inverted) + SmartRumble / 3;
						}
					}

						if(SmartRumble < 10)
						{
							Set_Val(AimY, (TaylorARVert) - get_val(AimY) * Inverted);
							Set_Val(AimX, TaylorARHoriz);
						}
						else
						{
							Set_Val(AimY, AntirecoilStrength * Inverted);
							Set_Val(AimX, TaylorARHoriz);
						}
				}

					if(event_release(Fire_BTN))
					{
						AntirecoilStrength  = 0;
						SmartRumble         = 0;
					}
			break;
			}

			case 2 : /* Taylor Legacy V1 - Slightly Edited By SS_Nikolai */
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					if(RightStickRadius > DeadZone)
					{
						Set_Val(AimY, ((TaylorARVert - (DeadZone * Inverted))));
						Set_Val(AimX, TaylorARHoriz);
					}

					if(RightStickRadius < DeadZone)
					{
						Set_Val(AimY, (TaylorARVert ) - get_val(AimY) * Inverted);
						Set_Val(AimX, TaylorARHoriz);
					}
				}
			break;
			}

			case 3 : /* Taylor Rumble V2 */
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					antirecoilBoostTimer += get_rtime();

					if(antirecoilBoostTimer < doubleStrengthTime)
					{
						if(get_controller() == PIO_XB1)
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = ((TaylorARVert * Inverted) * 2) + SmartRumble / 2;
							}
						}
						else
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = ((TaylorARVert * Inverted) * 2) + SmartRumble / 4;
							}
						}
					}

					if(antirecoilBoostTimer > doubleStrengthTime)
					{
						if(get_controller() == PIO_XB1)
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = (TaylorARVert * Inverted) + SmartRumble / 2;
							}
						}
						else
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = (TaylorARVert * Inverted) + SmartRumble / 3;
							}
						}
					}

					if(RightStickRadius > DeadZone)
					{
						if(SmartRumble < 10)
						{
							Set_Val(AimY, ((TaylorARVert - (DeadZone * Inverted))));
							Set_Val(AimX, TaylorARHoriz);
						}
						else
						{
							Set_Val(AimY, ((AntirecoilStrength - (DeadZone * Inverted))));
							Set_Val(AimX, TaylorARHoriz);
						}
					}

					if(RightStickRadius < DeadZone)
					{
						if(SmartRumble < 10)
						{
							Set_Val(AimY, (TaylorARVert) - get_val(AimY) * Inverted);
							Set_Val(AimX, TaylorARHoriz);
						}
						else
						{
							Set_Val(AimY, AntirecoilStrength * Inverted);
							Set_Val(AimX, TaylorARHoriz);
						}
					}
				}

				if(event_release(Fire_BTN))
				{
					SmartRumble				= 0;
					AntirecoilStrength		= 0;
					antirecoilBoostTimer	= 0;
				}
			break;
			}

			case 4 : /* Taylor Legacy V2 */
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					antirecoilBoostTimer += get_rtime();

					if(antirecoilBoostTimer < doubleStrengthTime)
					{
						legacyRecoilStrength = (TaylorARVert * 2);
					}

					if(antirecoilBoostTimer > doubleStrengthTime)
					{
						legacyRecoilStrength = TaylorARVert;
					}

					if(RightStickRadius > DeadZone)
					{
						Set_Val(AimY, ((legacyRecoilStrength - (DeadZone * Inverted))));
						Set_Val(AimX, TaylorARHoriz);
					}

					if(RightStickRadius < DeadZone)
					{
						Set_Val(AimY, (legacyRecoilStrength) - get_val(AimY) * Inverted);
						Set_Val(AimX, TaylorARHoriz);
					}
				}

				if(event_release(Fire_BTN))
				{
					antirecoilBoostTimer = 0;
				}
			break;
			}

			case 5 : /* Sweet_Evil Rumble AR */
			{
				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!(RefreshRate % _RefreshRate))
					{
						PreviousRX = CurrentRX;
						PreviousRY = CurrentRY;
					}

					CurrentRX = get_val(AimX);
					CurrentRY = get_val(AimY);

					if(Check_Magnitude(CurrentRX, PreviousRX, CurrentRY, PreviousRY))
					{
						set_val(AimY, clamp(CurrentRY + RumbleEviLAntiRecoil(), -100, 100));
						Set_Val(AimX, TaylorARHoriz);
					}
						RefreshRate += get_rtime();
				}
				else
				{
					CurrentRX	= 0;
					CurrentRY	= 0;
					PreviousRX	= 0;
					PreviousRY	= 0;
					RefreshRate	= 0;
				}
			break;
			}

			case 6 : /* Sweet_Evil Dynamic AR */
			{
				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!(RefreshRate % _RefreshRate))
					{
						PreviousRX = CurrentRX;
						PreviousRY = CurrentRY;
					}

					CurrentRX = get_val(AimX);
					CurrentRY = get_val(AimY);

					if(Check_Magnitude(CurrentRX, PreviousRX, CurrentRY, PreviousRY))
					{
						set_val(AimY, clamp(CurrentRY + DynamicEviLAntiRecoil(AR_Strength, CurrentRY, CurrentRX), -100, 100));
						Set_Val(AimX, TaylorARHoriz);
					}
						RefreshRate += get_rtime();
				}
				else
				{
					CurrentRX	= 0;
					CurrentRY	= 0;
					PreviousRX	= 0;
					PreviousRY	= 0;
					RefreshRate	= 0;
				}
			break;
			}

			case 7 : /* Batts Progressive AR */
			{
				if(!get_val(Ads_BTN) && !get_val(Fire_BTN))
				{
					AxisY_		=	VerticalStart;
					VertCount	=				0;
					VertNum		=				0;
					AxisX		= HorizontalStart;
					HorizCount	=				0;
					HorizNum	=				0;
				}

				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!CompleteY())
						AxisY_ = VertiVal();
					else
						AxisY_ = VerticalEnd;

					if(ApplyYVal() > 100)
					{
						set_val(AimY, 100);
					}
					else
						set_val(AimY, ApplyYVal());
				
					if(!CompleteX())
						AxisX = HoriVal();
					else
						AxisX = HorizontalEnd;

					if(ApplyXVal() > 100)
					{
						set_val(AimX, 100);
					}
					else
						set_val(AimX, ApplyXVal());
				}
			break;
			}
		}
		//ANTI RECOIL - END

		//AIM ABUSE - START
		if(AimAbuseToggle)
		{
			if(get_ival(Ads_BTN))
				combo_run(cAimAbuse);
			if(event_release(Ads_BTN))
				combo_stop(cAimAbuse);
		}
		//AIM ABUSE - END
		
		//DROPSHOT - START
		if(StandardDropShotToggle)
		{
			if(get_ival(Fire_BTN))
				combo_run(cDropShot);
		}

		if(SS_NikolaiDropShotToggle)
		{
			if(event_release(Fire_BTN))
			{
				DropShotVariable = FALSE;
			}

			if(!KillSwitch)
			{
				if(get_val(Fire_BTN) && event_press(Crouch_BTN))
				{
					DropShotVariable = TRUE;
				}
			}

			if(!KillSwitch)
			{
				if(DropShotVariable)
				{
					if(get_ival(Fire_BTN))
					{
						combo_run(cDropShot);
					}
				}
			}
		}
		//DROPSHOT - END

		// Quad STICKY - START
		switch (StickyAimType)
		{
			case Single:
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsSize;
					WaitValue	= AdsWaitValue;
				}
			break;
			}

			case Double:
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsSize;
					WaitValue	= AdsWaitValue;
				}
				else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsFireSize;
					WaitValue	= AdsFireWaitValue;
				}
			break;
			}

			case Triple:
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsSize;
					WaitValue	= AdsWaitValue;
				}
				else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsFireSize;
					WaitValue	= AdsFireWaitValue;
				}
				else if(!get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= HipFireSize;
					WaitValue	= HipFireWaitValue;
				}
			break;
			}

			case Quad:
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsSize;
					WaitValue	= AdsWaitValue;
				}
				else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= AdsFireSize;
					WaitValue	= AdsFireWaitValue;
				}
				else if(!get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					combo_run(cStickyAA);
					StickyValue	= HipFireSize;
					WaitValue	= HipFireWaitValue;
				}
				else if(isqrt(abs(get_val(AimX)) * abs(get_val(AimX)) + abs(get_val(AimY)) * abs(get_val(AimY))) <= 100)
				{
					combo_run(cStickyAA);
					StickyValue	= DriftSize;
					WaitValue	= DriftWaitValue;
				}
		break;
			}
		}
		// Quad STICKY - END

		// SS_NIKOLAI'S RANDOMIZED AIM ASSIST - START
		if (SS_NikolaiAimAssist)
		{
			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cNikoAim);
			}

			if(event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cNikoAim)
			}
		}
		// SS_NIKOLAI'S RANDOMIZED AIM ASSIST - END

		//DNAM Polar With Taylor Shapes - START
		if(TaylorShape)
		{
			CycleRefresh	+= get_rtime();
			polarAngle		 = Get_Polar(POLAR_RS, POLAR_ANGLE);
			Angle			 = (Angle + TaylorAngle) % 360;

			if(ShapeDirection)
			{
				ShapeDirection = (get_val(AimX) > 0);
			}

			if(TaylorTracking >= 1)
			{
				TrackingAngle = (TrackingAngle + TrackingSpeed) % 360;

				if(TaylorTracking == 1)
				{
					TrackingAngleOne = (TrackingSize  * SIN(TrackingAngle) / 100);
					TrackingAngleTwo = (TrackingSize  * COS(TrackingAngle) / 100);
				}
		
				if(TaylorTracking == 2)
				{
					DynamicTracking	= (TrackingSize * RightStickRadius);
		
					TrackingAngleOne = (DynamicTracking * SIN(TrackingAngle) / 100);
					TrackingAngleTwo = (DynamicTracking * COS(TrackingAngle) / 100);
				}
		
				if(TaylorTracking == 3)
				{
					DynamicTracking	= (TrackingSize * 2 + RightStickRadius * (TrackingSize));
		
					TrackingAngleOne = (DynamicTracking * SIN(TrackingAngle) / 100);
					TrackingAngleTwo = (DynamicTracking * COS(TrackingAngle) / 100);
				}
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				TaylorShape(POLAR_RS, Angle, TaylorRadius);
			}
		}
		//DNAM Polar With Taylor Shapes - END

		//Crescens Polar - START
		if(CrescensPolar)
		{
			if(get_ival(Fire_BTN))
			{
				if(CrescensRadiusBoost)
				{
					CrescensRadius = _PolarRadius + _PolarRBoost;
				}

				if(CrescensSpeedBoost)
				{
					CrescensAngle = _PolarAngle + _PolarABoost;
				} 
			}
			else
			{
				CrescensRadius = _PolarRadius;
				CrescensAngle  = _PolarAngle;
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				if(RightStickRadius <= 20)
				{
					set_polar(POLAR_RS, CrescensSpeed = (CrescensSpeed + CrescensAngle) % 360, (CrescensRadius * random(326, 328)) + get_polar(POLAR_RS, 0));
				}
				else
				{
					combo_run(cPolar);
				}
			}
		}
		//Crescens Polar - END

		// DoGz TIMED AIM ASSIST - START
		if (DoGzTimedAimAssist)
		{
			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				DoGzTimeAim();
			}

			if(event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				AAT 	= 0;
				AxisT	= 0;
			}
		}
		// DoGz TIMED AIM ASSIST - END

		// SWEET_EVIL STEADY AIM - START
		if(SteadyAimToggle)
		{
			CurrentRX = get_val(AimX);
			CurrentRY = get_val(AimY);

			if(RightStickRadius <= 20)
			{
				CurrentRX = GetSteadyAim(CurrentRX, SteadyAimResolution);
				CurrentRY = GetSteadyAim(CurrentRY, SteadyAimResolution);
			}
				set_val(AimX, clamp(CurrentRX, -100, 100));
				set_val(AimY, clamp(CurrentRY, -100, 100));
		}
		// SWEET_EVIL STEADY AIM - END

		//Strafe ASSIST - START
		if(SpeedStrafeToggle)
		{
			if(LeftStickRadius >= 0)
			{
				StrafeAngle += StrafeAssistSpeed * get_rtime();
			}
			else
			{
				StrafeAngle -= StrafeAssistSpeed * get_rtime();
			}

			if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Set_Val(Strafe, (StrafeAssistRadius * 2 * COS(StrafeAngle) / 100));
				Set_Val(Walk  , (StrafeAssistRadius * 2 * SIN(StrafeAngle) / 100));
			}
		}
		//Strafe ASSIST - END

		//FAST MELEE - START
		switch(FastMeleeMode)
		{
			case 1 :
			{
				if(get_val(Melee_BTN) && get_ptime(Melee_BTN) >= 200)
				{
					combo_run(cFastMelee);
				}

				if(combo_running(cFastMelee) && (get_ival(Ads_BTN) || get_ival(Fire_BTN)))
				{
					combo_stop(cFastMelee);
				}
			break;
			}

			case 2 :
			{
				if(get_val(Melee_BTN))
				{
					combo_run(cFastMelee);
				}

				if(event_release(Melee_BTN))
				{
					combo_stop(cFastMelee);
				}
			break;
			}
		}
		//FAST MELEE - END
		//SMART GRENADE - START
		if(SmartGrenadeToggle)
		{
			if(combo_running(cCookAndRelease) && (CookTime == 1028) && (Main_Button_Pressed(Lethal_BTN) || DoubleClick(Lethal_BTN)))
			{
				combo_stop(cCookAndRelease);
			}

			if(get_ival(Lethal_BTN) && get_ptime(Lethal_BTN) < 200)
			{
				CookTime = 1028;
				combo_run(cCookAndRelease);
			}

			if(get_ival(Lethal_BTN) && get_ptime(Lethal_BTN) > 200)
			{
				CookTime = 3200;
				combo_run(cCookAndRelease);
			}
		}
		//SMART GRENADE - END

		// DOLPHIN JUMP - START
		if(DolphinDiveToggle)
		{
			if (get_ival(Crouch_BTN) && get_ptime(Crouch_BTN) > 300 && isqrt(abs(get_ival(Strafe)) * abs(get_ival(Strafe)) + abs(get_ival(Walk)) * abs(get_ival(Walk))) >= 77)
			{
				combo_run(cDolphinJump);
			}
			else
			{
				combo_stop(cDolphinJump);
			}
		}
		// DOLPHIN JUMP - END

		//Strafe - START
		if(StrafeToggle)
		{
			if(get_ival(Fire_BTN))
				combo_run(cStrafe);
		}
		//Strafe - END

		//BUNNY HOP - START
		if(BunnyHopToggle)
		{
			if(get_ival(Jump_BTN) && get_ptime(Jump_BTN) > 200)
				combo_run(cBunnyHop);
			else 
				combo_stop(cBunnyHop);
		}
		//BUNNY HOP - END
		
		//QUICK SCOPE - START
		switch(QuickScopeMode)
		{
			case 1 :
			{
				if(Trigger_Toggle == TRUE && get_ival(Reload_BTN) || Trigger_Toggle == TRUE && get_ival(Lethal_BTN))
				{
					set_val(Reload_BTN, 0);
					set_val(Lethal_BTN, 0);
				}
				else if(event_release(Reload_BTN) || event_release(Lethal_BTN))
				{
					Trigger_Toggle = FALSE;
				}

				if(event_press(Ads_BTN))
				{ 
					Trigger_Toggle = TRUE; 
				}
				else if(get_ival(Ads_BTN) && get_ptime(Ads_BTN) > 140)
				{
					set_val(Sprint_BTN, 100); 
				}
				else if(Trigger_Toggle == TRUE && event_release(Ads_BTN))
				{
					combo_run(cQuickScope);
				}
					if(event_press(Sprint_BTN))
					{
						combo_run(cHoldBreath);
					}
			break;
			}

			case 2 :
			{
				if(event_release(Ads_BTN) && get_ptime(Ads_BTN) <= 250)
				{
					combo_run(cQuickScope);
				}
			break;
			}
		}
		//QUICK SCOPE - END

		//AUTO Reload_BTN - START
		if(AutoReloadToggle)
		{
			if(event_release(Fire_BTN) || ScopeShotToggle == 2 && event_release(Ads_BTN) || ScopeShotToggle == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_run(cReload);
			}
		}
		//AUTO Reload_BTN - END

		//FAST Reload_BTN - START
		if(ReloadCancelToggle)
		{
			if(event_press(Fire_BTN))
				FirstShotBeforeReload = TRUE; 

				if(event_press(Reload_BTN) && FirstShotBeforeReload)
				{
					ReloadInProgress 	  = TRUE;
					FirstShotBeforeReload = FALSE;
				}

				if(get_val(Reload_BTN) && get_ptime(Reload_BTN) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(cCancelReload);
				}

				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
					ReloadTime = 0;

				if(ReloadTime > MaxReloadTime)
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime && event_press(Fire_BTN))
					combo_run(cCancelReload);
		}
		//FAST Reload_BTN - END

		//SNAKE SHOT - START
		if(SnakeShotToggle)
		{
			if(SnakeShotActivationType(SnakeShotActivationType_))
			{
				combo_run(cSnakeShotMW2);
			}

			if(combo_running(cSnakeShotMW2) && !get_val(Fire_BTN))
			{
				combo_stop(cSnakeShotMW2);
			}
		}
		//SNAKE SHOT - END

		//PERFECT ACCURACY - START
		if(PerfectAccuracyToggle)
		{
			if(get_ival(Lethal_BTN) > 10 && get_ptime(Lethal_BTN) <= get_ptime(Ads_BTN) && get_ival(Ads_BTN) > 80)
			{
				SingleShot = TRUE;

				if(SingleShot)
				{
					if(get_ival(Lethal_BTN))
						combo_run(cPerfectionAccuracy);
						newHold =       40;
						newRest =      150;
						block(Lethal_BTN, get_ptime(Lethal_BTN) + 50);
				}

				if(SingleShot && event_release(Lethal_BTN))
					SingleShot = FALSE;
			}

			if(get_ival(Lethal_BTN) > 10 && get_ptime(Lethal_BTN) <= get_ptime(Ads_BTN) && get_ival(Ads_BTN) < 80 && get_ival(Ads_BTN) > 10)
			{
				BurstShot = TRUE;

				if(BurstShot)
				{
					if(get_ival(Lethal_BTN))
						combo_run(cPerfectionAccuracy);
						newHold = burstHold;
						newRest = burstRest;
						block(Lethal_BTN, get_ptime(Lethal_BTN) + 50);
				}

				if(BurstShot && event_release(Lethal_BTN))
					BurstShot = FALSE;
			}
		}
		//PERFECT ACCURACY - END

		//SCOPESHOT - START
		switch(ScopeShotToggle)
		{
			case 1 :
			{
				if(get_ival(Fire_BTN) && !get_ival(Ads_BTN))
					set_val(Ads_BTN, 100);
			break;
			}

			case 2 :
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
					set_val(Fire_BTN, 100);
			break;
			}

			case 3 :
			{
				if(get_ival(Ads_BTN))
					set_val(Fire_BTN, 100);
				else if(get_ival(Fire_BTN))
					set_val(Ads_BTN, 100);
			break;
			}
		}
		//SCOPESHOT - END

		//Crouch_BTN RISE - START
		if(ProneRiseToggle)
		{
            if(get_ival(Fire_BTN))
                combo_run(cProneRise);
			if(event_release(Fire_BTN))
				combo_stop(cProneRise);
		}
	    //Crouch_BTN RISE - END

		//Strafe Jump_BTN - START
		if(StrafeJumpToggle)
		{
			if(get_ival(Fire_BTN))
			{
				combo_run(cJumpyShot);
				combo_run(cStrafe);
			}
		}
		//Strafe Jump_BTN - END
	    
	    //CHICKEN MODE - START
		if(ChickenModeToggle)
		{
			if(get_ival(Fire_BTN))
			{
				combo_run(cStrafe);
				combo_run(cDropping_Shot);
			}
		}
		//CHICKEN MODE - END	  
	  		
	  	//HOLDBREATH - START
		if(HoldBreathToggle)
		{
			if(get_ival(Ads_BTN))
				set_val(Sprint_BTN, 100);

			if(get_ival(Walk) < -90 && get_ival(Ads_BTN) && get_ptime(Ads_BTN) > 200)
				combo_stop(cHoldBreath);       

			if(event_press(Ads_BTN)) 
				combo_run(cHoldBreath);

			if(get_ival(Ads_BTN) && get_lval(Sprint_BTN)) 
				set_val(Sprint_BTN, 0);  
		}
		//HOLDBREATH - END

		//SLIDECANCLE - START
		if(Running)
		{
			SlideEnable = 0;

			if(event_release(Crouch_BTN))
			{
				switch(SlideCancelMode)
				{
					case 1 :
					{
						SlideEnable = 1;
					break;
					}

					case 2 :
					{
						if(get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26)
						{
							SlideEnable = 1;
						}
					break;
					}

					case 3 :
					{
						SlideEnable = 2;
					break;
					}

					case 4 :
					{
						if(get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36)
						{
							SlideEnable = 2;
						}
					break;
					}

					case 5 :
					{
						SlideEnable = 3;
					break;
					}

					case 6 :
					{
						SlideEnable = 4;
					break;
					}

					case 7 :
					{
						SlideEnable = 5;
					break;
					}

					case 8 :
					{
						SlideEnable = 6;
					break;
					}
				}

				switch(SlideEnable)
				{
					case 1 :
					{
						combo_run(cCancelSlideMW);
					break;
					}

					case 2 :
					{
						combo_run(cCancelSlideCW);
					break;
					}

					case 3 :
					{
						combo_run(cBFCancelSlide);
					break;
					}

					case 4 :
					{
						combo_run(cMW2CancelSlideStandard);
					break;
					}

					case 5 :
					{
						combo_run(cCancelSlideMW2Tac);
					break;
					}

					case 6 :
					{
						combo_run(cCancelSlideMW2Lethal);
					break;
					}
				}
			}
		}
		//SLIDECANCLE - END
		
		//AUTOPING - START
		switch(AutoPingMode)
		{
			case 1 :
			{
				if(event_press(Ads_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 2 :
			{
				if(event_press(Fire_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 3 :
			{
				if(get_ival(Ads_BTN) && event_press(Fire_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 4 :
			{
				if(get_ival(Ads_BTN) && event_press(Tactical_BTN))
					combo_run(cAutoPing);
					set_val(Tactical_BTN, 0);
			break;
			}
		}
		//AUTOPING - END
		
		//SENS - START
		if(AimCorrectionsToggle)
		{
			ADS_Grenade_Sens = 100 - (InGame_Menu_Sens);
			ADS_Fire_Sens    =  96 - (InGame_Menu_Sens);
			Actual_Sens      = 100;

			if (!get_ival(Ads_BTN) && !get_ival(Fire_BTN) && !get_ival(Lethal_BTN) && !get_ival(Tactical_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}
			else if (!get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = ADS_Fire_Sens;
			}
			else if(get_ival(Tactical_BTN) || get_ival(Lethal_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}

			if(RightStickRadius > CrescensRadius)
			{
				if(Sens > 100)
					Sens = 100;
					sensitivity(AimX, NOT_USE, Sens);
					sensitivity(AimY, NOT_USE, Sens);
			}
		}
		//SENS - END

		//SILENT SHOT - START
		if(SilentShotToggle)
		{
			if(get_ival(Ads_BTN) && get_val(Fire_BTN) || get_val(Fire_BTN))
			{
				combo_run(cCancelAnimation);
			}
		}
		//SILENT SHOT - END

		//MW2 G WALK - START
		if(MW2GWalkToggle)
		{
			if(get_val(Walk) < -80 && get_val(Sprint_BTN) && get_ptime(Sprint_BTN) > 300)
			{
				GWalkVariable = TRUE;
			} 

			if(GWalkVariable)
			{
				combo_run(cGWalk);
			}	

			if(combo_running(cGWalk) && (event_press(Ads_BTN) || event_press(Fire_BTN) || (get_val(Walk) > -80)))
			{
				GWalkVariable = FALSE;
				combo_stop(cGWalk);
			}
		}		//MW2 G WALK - END

		//AUTO BLOW - START
		if(AutoBlowToggle)
		{
			if(event_release(Lethal_BTN))
				combo_run(cBoom);
		}
		//AUTO BLOW - END

		//--HEADSHOT ASSIST - START
		if(HeadShotAssistToggle)
		{
			RY = inv(HeadShotStrength);

			if(get_ival(Fire_BTN) && get_ptime(Fire_BTN) < HeadShotHoldTime)
			{
				Set_Val(AimY, RY);
			}
		}
		//--HEADSHOT ASSIST - END

		//EASY Crouch_BTN - START
		if(EasyProneToggle)
		{
			if(get_ival(Fire_BTN) && event_press(EasyProneButton))
			{
				combo_run(cEasyProne);
			}

			if(get_ival(EasyProneButton) && event_press(Fire_BTN))
			{
				combo_run(cEasyProne);
			}

			if(get_ival(EasyProneButton)&& event_release(Fire_BTN))
			{
				combo_run(cGetUp);
			}

			if(get_ival(Fire_BTN)&& event_release(EasyProneButton))
			{
				combo_run(cGetUp);
			}
		}
		//EASY Crouch_BTN - END

		// JUMP SHOT - START
		if(JumpShotToggle)
		{
			if(get_ival(Fire_BTN))
				combo_run(cJumpyShot);
			if(event_release(Fire_BTN))
				combo_stop(cJumpyShot);
		}
		// JUMP SHOT - END

		if(get_ival(Ads_BTN) && event_press(PS4_OPTIONS))
		{
			ZenScreen	= MainMods;
			combo_stop(cRGB);
			Display		= TRUE;
		}
			combo_run(cRGB); 
	}

	SSNikolaiCheck();

	if(ZenScreen == MainMods)
	{
		block_all_inputs();
		block_all_outputs();

		if(RumbleBlockToggle)
			block_rumble();

		AntiRecoilType     			= ToggleSwitch(1,  AntiRecoilType			, 0,	 7);
		TaylorShape  	   			= ToggleSwitch(2,  TaylorShape				, 0,	11);
		TaylorTracking	   			= ToggleSwitch(3,  TaylorTracking			, 0,	 3);
		CrescensPolar  	   			= ToggleSwitch(4,  CrescensPolar			, 0,	 1);
		StickyAimType  	   			= ToggleSwitch(5,  StickyAimType			, 0,	 4);
		SS_NikolaiAimAssist			= ToggleSwitch(6,  SS_NikolaiAimAssist		, 0,	 1);
		DoGzTimedAimAssist			= ToggleSwitch(7,  DoGzTimedAimAssist		, 0,	 1);
		SteadyAimToggle				= ToggleSwitch(8,  SteadyAimToggle			, 0,	 1);
		AimAbuseToggle				= ToggleSwitch(9,  AimAbuseToggle			, 0,	 1);
		SpeedStrafeToggle  			= ToggleSwitch(10, SpeedStrafeToggle		, 0,	 1);
		AimCorrectionsToggle		= ToggleSwitch(11, AimCorrectionsToggle		, 0,	 1);
		SlideCancelMode    			= ToggleSwitch(12, SlideCancelMode			, 0,	 8);
		RapidFireToggle    			= ToggleSwitch(13, RapidFireToggle			, 0,	 1);
		AkimboRapidFireToggle		= ToggleSwitch(14, AkimboRapidFireToggle	, 0,	 1);
		BurstFireToggle				= ToggleSwitch(15, BurstFireToggle			, 0,	 1);
		DynamicRapidFireToggle		= ToggleSwitch(16, DynamicRapidFireToggle	, 0,	 1);
		JumpShotToggle				= ToggleSwitch(17, JumpShotToggle			, 0,	 1);
		ScopeShotToggle				= ToggleSwitch(18, ScopeShotToggle			, 0,	 3);
		QuickScopeMode				= ToggleSwitch(19, QuickScopeMode			, 0,	 2);
		StrafeToggle	   			= ToggleSwitch(20, StrafeToggle				, 0,	 1);
		StandardDropShotToggle		= ToggleSwitch(21, StandardDropShotToggle	, 0,	 1);
		SS_NikolaiDropShotToggle	= ToggleSwitch(22, SS_NikolaiDropShotToggle	, 0,	 1);
		HoldBreathToggle			= ToggleSwitch(23, HoldBreathToggle			, 0,	 1);
		AutoPingMode		   		= ToggleSwitch(24, AutoPingMode				, 0,	 4);
		ProneRiseToggle	  	   		= ToggleSwitch(25, ProneRiseToggle			, 0,	 1);
		ChickenModeToggle	   		= ToggleSwitch(26, ChickenModeToggle		, 0,	 1);
		StrafeJumpToggle			= ToggleSwitch(27, StrafeJumpToggle			, 0,	 1);
		SmartGrenadeToggle	   		= ToggleSwitch(28, SmartGrenadeToggle		, 0,	 1);
		BunnyHopToggle    	   		= ToggleSwitch(29, BunnyHopToggle			, 0,	 1);
		AutoBlowToggle	  	   		= ToggleSwitch(30, AutoBlowToggle			, 0,	 1);
		EasyProneToggle				= ToggleSwitch(31, EasyProneToggle			, 0,	 1);
		ReloadCancelToggle	   		= ToggleSwitch(32, ReloadCancelToggle		, 0,	 1);
		AutoRunMode					= ToggleSwitch(33, AutoRunMode				, 0,	 4);
		FastMeleeMode				= ToggleSwitch(34, FastMeleeMode			, 0,	 2);
		PerfectAccuracyToggle		= ToggleSwitch(35, PerfectAccuracyToggle	, 0,	 1);
		HeadShotAssistToggle		= ToggleSwitch(36, HeadShotAssistToggle		, 0,	 1);
		RumbleBlockToggle			= ToggleSwitch(37, RumbleBlockToggle		, 0,	 1);
		AutoReloadToggle			= ToggleSwitch(38, AutoReloadToggle			, 0,	 1);
		DolphinDiveToggle			= ToggleSwitch(39, DolphinDiveToggle		, 0,	 1);
		SnakeShotToggle				= ToggleSwitch(40, SnakeShotToggle			, 0,	 1);
		SilentShotToggle			= ToggleSwitch(41, SilentShotToggle			, 0,	 1);
		MW2GWalkToggle				= ToggleSwitch(42, MW2GWalkToggle			, 0,	 1);

		if(Mod == 40)
		{
			if(event_press(PS4_RIGHT))
			{
				SnakeShotActivationType_	= Cycle(SnakeShotActivationType_ + 1, 0, 4);
				Display						= TRUE;
			}

			if(event_press(PS4_LEFT))
			{
				SnakeShotActivationType_	= Cycle(SnakeShotActivationType_ - 1, 0, 4);
				Display						= TRUE;
            }
		}

		if(event_press(PS4_SQUARE))
		{
			if(EditableMods[Mod] == 1)
			{
				ZenScreen	= EditMods;
				Display		= TRUE;
			}
		}

		if(event_press(PS4_UP))
		{
			Mod		= Cycle(Mod - 1, 1, NumOfMods);
			Display	= TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Mod		= Cycle(Mod + 1, 1, NumOfMods);
			Display	= TRUE;
		}

		if(event_press(PS4_CIRCLE))
		{
			ZenScreen	= MenuClose;
			Pin			= random(102, 999);
			Save();
			Frame		= -1;
			combo_restart(cSSNikolai);
			Display		= TRUE;
		}
	}

	if(ZenScreen == EditMods)
	{
		block_all_inputs();
		block_all_outputs();

		if(RumbleBlockToggle)
			block_rumble();

		if(event_press(PS4_CIRCLE))
		{
			ZenScreen	= MainMods;
			Display		= TRUE;
		}

		if(event_press(PS4_UP))
		{
			Scroll	= Cycle(Scroll + 1, 0, 2);
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Scroll	= Cycle(Scroll - 1, 0, 2);
			Display = TRUE;
		}

			if(Mod == 1 && AntiRecoilType == 3 || Mod == 1 && AntiRecoilType == 4)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display	= TRUE;
					}
						TaylorARVert	= EditValues(1, TaylorARVert , 1, -100, 100);
						TaylorARHoriz	= EditValues(0, TaylorARHoriz, 1, -100, 100);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display	= TRUE;
					}
						DeadZone			= EditValues(1, DeadZone          ,   1,    0,   20);
						doubleStrengthTime	= EditValues(0, doubleStrengthTime,  50,  100, 2000);
				}
			}
			else if(Mod == 1 && AntiRecoilType == 5 || Mod == 1 && AntiRecoilType == 6)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				AR_Strength		= EditValues(1, AR_Strength  , 1, -100, 100);
				TaylorARHoriz	= EditValues(0, TaylorARHoriz, 1, -100, 100);
			}
			else if(Mod == 1 && AntiRecoilType == 1 || Mod == 1 && AntiRecoilType == 2)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				TaylorARVert	= EditValues(1, TaylorARVert , 1, -100, 100);
				TaylorARHoriz	= EditValues(0, TaylorARHoriz, 1, -100, 100);
			}
			else if(Mod == 1 && AntiRecoilType == 7)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 2)
					Scroll = 2;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						VerticalStart	= EditValues(2, VerticalStart,   1, -100,  100);
						VerticalEnd		= EditValues(1, VerticalEnd  ,   1, -100,  100);
						VerticalTime	= EditValues(0, VerticalTime , 100,    0, 9000);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						HorizontalStart	= EditValues(2, HorizontalStart,   1, -100,  100);
						HorizontalEnd	= EditValues(1, HorizontalEnd  ,   1, -100,  100);
						HorizontalTime	= EditValues(0, HorizontalTime , 100,    0, 9000);
				}
			}

			if(Mod == 2)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				TaylorRadius = EditValues(1, TaylorRadius, 1, 0,  50);
				TaylorAngle  = EditValues(0, TaylorAngle , 1, 0, 100);
			}

			if(Mod == 3)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				TrackingSize	= EditValues(1, TrackingSize , 1, 0, 10);
				TrackingSpeed	= EditValues(0, TrackingSpeed, 1, 0, 10);
			}

			if(Mod == 4)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						_PolarRadius = EditValues(1, _PolarRadius, 1, 0, 50);
						_PolarAngle  = EditValues(0, _PolarAngle , 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						_PolarRBoost = EditValues(1, _PolarRBoost, 1, 0, 50);
						_PolarABoost = EditValues(0, _PolarABoost, 1, 0, 50);
				}
			}

			if(Mod == 5)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 2)
					Scroll = 2;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						AdsSize		= EditValues(2, AdsSize	   , 1, 0, 50);
						AdsFireSize	= EditValues(1, AdsFireSize, 1, 0, 50);
						HipFireSize	= EditValues(0, HipFireSize, 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						AdsWaitValue		= EditValues(2, AdsWaitValue    , 10, 0, 100);
						AdsFireWaitValue	= EditValues(1, AdsFireWaitValue, 10, 0, 100);
						HipFireWaitValue	= EditValues(0, HipFireWaitValue, 10, 0, 100);
				}
			}

			if(Mod == 6)
			{
				Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						AimAssistStrength = EditValues(1, AimAssistStrength, 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						AimAssistWaitTime = EditValues(1, AimAssistWaitTime, 10, 0, 100);
				}
			}

			if(Mod == 7)
			{
				Scroll = 1;

				Strength = EditValues(1, Strength, 1, 0, 10);
			}

			if(Mod == 8)
			{
				Scroll = 1;

				SteadyAimResolution	= EditValues(1, SteadyAimResolution , 1, 0, 100);
			}

			if(Mod == 10)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				StrafeAssistRadius	= EditValues(1, StrafeAssistRadius, 1, 0,  50);
				StrafeAssistSpeed	= EditValues(0, StrafeAssistSpeed , 1, 0, 100);
			}

			if(Mod == 11)
			{
				Scroll = 1;

				InGame_Menu_Sens = EditValues(1, InGame_Menu_Sens, 1, 0, 100);
			}

			if(Mod == 13)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				RapidHold = EditValues(1, RapidHold, 10, 0, 3000);
				RapidRest = EditValues(0, RapidRest, 10, 0, 3000);
			}

			if(Mod == 19)
			{
				Scroll = 1;

				QS_Delay = EditValues(1, QS_Delay, 10, 0, 3000);
			}

			if(Mod == 20)
			{
				Scroll = 1;

				StrafeDelay = EditValues(1, StrafeDelay, 10, 0, 3000);
			}

			if(Mod == 21 || Mod == 22)
			{
				Scroll = 1;

				DropShotSpeed = EditValues(1, DropShotSpeed, 10, 0, 100);
			}

			if(Mod == 24)
			{
				Scroll = 1;

				AutoPingDelay = EditValues(1, AutoPingDelay, 10, 0, 5000);
			}

			if(Mod == 32)
			{
				Scroll = 1;

				MaxReloadTime = EditValues(1, MaxReloadTime, 100, 0, 9999);
			}

			if(Mod == 33)
			{
				Scroll = 1;

				AutoRunDelay = EditValues(1, AutoRunDelay, 100, 0, 9999);
			}

			if(Mod == 35)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				burstHold = EditValues(1, burstHold, 10, 0, 3000);
				burstRest = EditValues(0, burstRest, 10, 0, 3000);
			}

			if(Mod == 36)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				HeadShotStrength = EditValues(1, HeadShotStrength,   1, 0,   99);
				HeadShotHoldTime = EditValues(0, HeadShotHoldTime, 100, 0, 2000);
			}

			if(Mod == 42)
			{
				Scroll = 1;

				MW2GWalkDelay = EditValues(1, MW2GWalkDelay, 10, 0, 1000);
			}
		}
	}

	if(screenSaver)
	{
		if(ZenScreen == MenuClose)
			SSNikolaiTextOne();
		if(ZenScreen == MainMods)
			SSNikolaiTextTwo();

		rect_oled(0, 0, 128, 64, 0, 1);
		SSNikolaiCountDown += get_rtime();
		SSNikolaiScreenSaver();

		if(SSNikolaiCountDown >= 9000)
    	{
      		cls_oled(0);
      		SSNikolaiCountDown	=	  0;
      		screenSaver			= FALSE;
    	}
	}

	if(Display)
	{
		cls_oled(0);
		SSNikolaiCountDown = 0;

	if(!KillSwitch)
	{

		if(ZenScreen == MenuClose)
		{
			print(CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 18, 0, 1, ModsString[0]);
		}

		if(ZenScreen == MainMods)
		{
			print(CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), CenterY(OLED_FONT_SMALL_HEIGHT), 0, 1, ModsString[Mod]);

			if(Mod == 1)
			{
				switch(AntiRecoilType)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)			- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(TaylorRumbleV1)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TaylorRumbleV1[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(TaylorLegacyV1)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TaylorLegacyV1[0]);
					break;
					}
					
					case 3 :
					{
						print(CenterX(sizeof(TaylorRumbleV2)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TaylorRumbleV2[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(TaylorLegacyV2)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TaylorLegacyV2[0]);
					break;
					}

					case 5 :
					{
						print(CenterX(sizeof(EviLRumbleAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, EviLRumbleAR[0]);
					break;
					}

					case 6 :
					{
						print(CenterX(sizeof(EviLDynamicAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, EviLDynamicAR[0]);
					break;
					}

					case 7 :
					{
						print(CenterX(sizeof(ProgressiveAR)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ProgressiveAR[0]);
					break;
					}
				}
			}

			if(Mod == 2)
			{
				print(CenterX(AimAssistShape_Chars(TaylorShape), OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AimPatterns[TaylorShape]);
			}

			if(Mod == 3)
			{
				switch(TaylorTracking)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);
					break;
					}
	
					case 1 :
					{
						print(CenterX(sizeof(Original)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Original[0]);
					break;
					}
	
					case 2 :
					{
						print(CenterX(sizeof(DynamicSmall)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DynamicSmall[0]);
					break;
					}
						
					case 3 :
					{
						print(CenterX(sizeof(DynamicBig)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DynamicBig[0]);
					break;
					}
				}
			}

			if(Mod == 5)
			{
				switch(StickyAimType)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);
					break;
					}
	
					case 1 :
					{
						print(CenterX(sizeof(SingleSticky)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, SingleSticky[0]);
					break;
					}
	
					case 2 :
					{
						print(CenterX(sizeof(DoubleSticky)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DoubleSticky[0]);
					break;
					}
						
					case 3 :
					{
						print(CenterX(sizeof(TripleSticky)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, TripleSticky[0]);
					break;
					}
	
					case 4 :
					{
						print(CenterX(sizeof(QuadSticky)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, QuadSticky[0]);
					break;
					}
				}
			}

			if(Mod == 12)
			{
				switch(SlideCancelMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(MWStandard)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWStandard[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(MWRumble)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWRumble[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(CWStandard)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWStandard[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(CWRumble)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWRumble[0]);
					break;
					}

					case 5 :
					{
						print(CenterX(sizeof(BFStandard)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BFStandard[0]);
					break;
					}

					case 6 :
					{
						print(CenterX(sizeof(MW2Standard)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2Standard[0]);
					break;
					}

					case 7 :
					{
						print(CenterX(sizeof(MW2Tactical)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2Tactical[0]);
					break;
					}

					case 8 :
					{
						print(CenterX(sizeof(MW2Lethal)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2Lethal[0]);
					break;
					}
				}
			}

			if(Mod == 18)
			{
				switch(ScopeShotToggle)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)				- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(RightTrigScopeShot)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, RightTrigScopeShot[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(LeftTrigScopeShot)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, LeftTrigScopeShot[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(BothTrigScopeShot)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BothTrigScopeShot[0]);
					break;
					}
				}
			}

			if(Mod == 19)
			{
				switch(QuickScopeMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(AimFireQS)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AimFireQS[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(DblTapQS)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DblTapQS[0]);
					break;
					}
				}
			}

			if(Mod == 24)
			{
				switch(AutoPingMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)			- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(AdsAutoPing)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AdsAutoPing[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(FireAutoPing)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, FireAutoPing[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(AdsFireAutoPing)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AdsFireAutoPing[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(AdsTacAutoPing)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AdsTacAutoPing[0]);
					break;
					}
				}
			}

			if(Mod == 33)
			{
				switch(AutoRunMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)			- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(InGameAutoSprint)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, InGameAutoSprint[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(ExploitAutoSprint)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ExploitAutoSprint[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(BetterAutoSprint)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BetterAutoSprint[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(MW2TacSprint)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2TacSprint[0]);
					break;
					}
				}
			}

			if(Mod == 34)
			{
				switch(FastMeleeMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(Disabled)			- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, Disabled[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(AutoMaticFastMelee)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AutoMaticFastMelee[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(ManualFastMelee)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ManualFastMelee[0]);
					break;
					}
				}
			}

			if(Mod == 40)
			{
				print(CenterX(SnakeShotType_Chars(SnakeShotActivationType_), OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, SnakeShotActivation[SnakeShotActivationType_]);
			}
		}

	if(ZenScreen == EditMods)
	{
		print(CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), 3, 0, 1, ModsString[Mod]);

		if(Mod == 42)
		{
			NumberToStringSmall(MW2GWalkDelay, FindDigits (MW2GWalkDelay), 25);
		}

		if(Mod == 36)
		{
			NumberToStringRegular(HeadShotStrength, FindDigits (HeadShotStrength), 23);
			NumberToStringSmall(HeadShotHoldTime  , FindDigits (HeadShotHoldTime), 41);
		}

		if(Mod == 35)
		{
			NumberToStringRegular(burstHold, FindDigits (burstHold), 23);
			NumberToStringRegular(burstRest, FindDigits (burstRest), 41);
		}

		if(Mod == 33)
		{
			NumberToStringSmall(AutoRunDelay, FindDigits (AutoRunDelay), 25);
		}

		if(Mod == 32)
		{
			NumberToStringSmall(MaxReloadTime, FindDigits (MaxReloadTime), 25);
		}

		if(Mod == 24)
		{
			NumberToStringSmall(AutoPingDelay, FindDigits (AutoPingDelay), 25);
		}

		if(Mod == 21 || Mod == 22)
		{
			NumberToStringRegular(DropShotSpeed, FindDigits (DropShotSpeed), 25);
		}

		if(Mod == 20)
		{
			NumberToStringRegular(StrafeDelay, FindDigits (StrafeDelay), 25);
		}

		if(Mod == 19)
		{
			NumberToStringRegular(QS_Delay, FindDigits (QS_Delay), 25);
		}

		if(Mod == 13)
		{
			NumberToStringRegular(RapidHold, FindDigits (RapidHold), 23);
			NumberToStringRegular(RapidRest, FindDigits (RapidRest), 41);
		}

		if(Mod == 11)
		{
			NumberToStringRegular(InGame_Menu_Sens, FindDigits (InGame_Menu_Sens), 25);
		}

		if(Mod == 10)
		{
			NumberToStringRegular(StrafeAssistRadius, FindDigits (StrafeAssistRadius), 23);
			NumberToStringRegular(StrafeAssistSpeed , FindDigits (StrafeAssistSpeed) , 41);
		}

		if(Mod == 8)
		{
			NumberToStringRegular(SteadyAimResolution, FindDigits (SteadyAimResolution), 25);
		}

		if(Mod == 7)
		{
			NumberToStringRegular(Strength, FindDigits (Strength), 25);
		}

		if(Mod == 6)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(AimAssistStrength, FindDigits (AimAssistStrength), 25);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(AimAssistWaitTime, FindDigits (AimAssistWaitTime), 25);
			}
		}

		if(Mod == 5)
		{
			if(Tab == 0)
			{
				NumberToStringSmall(AdsSize    , FindDigits (AdsSize)    , 20);
				NumberToStringSmall(AdsFireSize, FindDigits (AdsFireSize), 33);
				NumberToStringSmall(HipFireSize, FindDigits (HipFireSize), 46);
			}

			if(Tab == 1)
			{
				NumberToStringSmall(AdsWaitValue    , FindDigits (AdsWaitValue)    , 20);
				NumberToStringSmall(AdsFireWaitValue, FindDigits (AdsFireWaitValue), 33);
				NumberToStringSmall(HipFireWaitValue, FindDigits (HipFireWaitValue), 46);
			}
		}

		if(Mod == 4)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(_PolarRadius, FindDigits (_PolarRadius), 23);
				NumberToStringRegular(_PolarAngle , FindDigits (_PolarAngle) , 43);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(_PolarRBoost, FindDigits (_PolarRBoost), 23);
				NumberToStringRegular(_PolarABoost, FindDigits (_PolarABoost), 41);
			}
		}

		if(Mod == 3)
		{
			NumberToStringRegular(TrackingSize , FindDigits (TrackingSize) , 23);
			NumberToStringRegular(TrackingSpeed, FindDigits (TrackingSpeed), 41);
		}

		if(Mod == 2)
		{
			NumberToStringRegular(TaylorRadius, FindDigits (TaylorRadius), 23);
			NumberToStringRegular(TaylorAngle , FindDigits (TaylorAngle) , 43);
		}

		if(Mod == 1 && AntiRecoilType == 3 || Mod == 1 && AntiRecoilType == 4)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(TaylorARVert , FindDigits (TaylorARVert) , 23);
				NumberToStringRegular(TaylorARHoriz, FindDigits (TaylorARHoriz), 41);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(DeadZone        , FindDigits (DeadZone)          , 23);
				NumberToStringSmall(doubleStrengthTime, FindDigits (doubleStrengthTime), 41);
			}
		}
		else if(Mod == 1 && AntiRecoilType == 5 || Mod == 1 && AntiRecoilType == 6)
		{
			NumberToStringRegular(AR_Strength  , FindDigits (AR_Strength)  , 23);
			NumberToStringRegular(TaylorARHoriz, FindDigits (TaylorARHoriz), 41);
		}
		else if(Mod == 1 && AntiRecoilType == 1 || Mod == 1 && AntiRecoilType == 2)
		{
			NumberToStringRegular(TaylorARVert , FindDigits (TaylorARVert) , 23);
			NumberToStringRegular(TaylorARHoriz, FindDigits (TaylorARHoriz), 41);
		}
		else if(Mod == 1 && AntiRecoilType == 7)
		{
			if(Tab == 0)
			{
				NumberToStringSmall(VerticalStart, FindDigits (VerticalStart), 20);
				NumberToStringSmall(VerticalEnd  , FindDigits (VerticalEnd)  , 33);
				NumberToStringSmall(VerticalTime , FindDigits (VerticalTime) , 46);
			}

			if(Tab == 1)
			{
				NumberToStringSmall(HorizontalStart, FindDigits (HorizontalStart), 20);
				NumberToStringSmall(HorizontalEnd  , FindDigits (HorizontalEnd)  , 33);
				NumberToStringSmall(HorizontalTime , FindDigits (HorizontalTime) , 46);
			}
		}

			if(Scroll == 2)
				line_oled(30, 20, 40, 20, 3, 1);
			if(Scroll == 1)
				line_oled(30, 33, 40, 33, 3, 1);
			if(Scroll == 0)
				line_oled(30, 46, 40, 46, 3, 1);
			}
		}
		else 
		{
			rect_oled(0, 0, 128, 64, 0, 1);

			if(KillSwitchMethod == 4)
			{
				print(CenterX(GetChars(12), OLED_FONT_SMALL_WIDTH), 34, 0, 1, ModsString[44]);
			}
			else
			{
				print(CenterX(GetChars(12), OLED_FONT_SMALL_WIDTH), 34, 0, 1, ModsString[43]);
			}
		}
			rect_oled(0, 0, 128, 64, 0, 1);
			screenSaver	=  TRUE;
			Display		= FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | | | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/ 
combo cRGB {
	wait(10);

	set_rgb(Colour, Colour[1], Colour[2]);

	Colour[Decrease]--;
	Colour[Increase]++;

	if(!Colour[Decrease])
	{
		Increase = (Increase + 1) % 3;
		Decrease = (Decrease + 1) % 3;
	}
}

combo cVibrate {
	set_rumble(RUMBLE_A, 90);
	wait(230);
	reset_rumble();
}

combo cVibrate2 {
	set_rumble(RumbleSide, 100);
	wait(RumbleTime);
	reset_rumble();
	wait(100);
}

combo cFlashGreen {
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo cFlashRed {
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo cStickyAA {
	StrafeRandom = random(inv(QuadStrafeAssist), QuadStrafeAssist)

	Set_Val(AimY,   StickyValue);
	wait(WaitValue);
	Set_Val(AimX,   StickyValue);
	Set_Val(Strafe, StrafeRandom);
	wait(WaitValue);
	Set_Val(AimY,   inv(StickyValue));
	wait(WaitValue);
	Set_Val(AimX,   inv(StickyValue));
	Set_Val(Strafe, StrafeRandom);
	wait(WaitValue);
}

combo cNikoAim {
	WaitStrength	= random(AimAssistWaitTime / 2 , AimAssistWaitTime);
	AimStrength		= random(inv(AimAssistStrength), AimAssistStrength);
	StrafeRandom	= random(inv(QuadStrafeAssist) , QuadStrafeAssist)

	Set_Val(AimY,	AimStrength);
	wait(WaitStrength);
	Set_Val(AimX,	AimStrength);
	Set_Val(Strafe,	StrafeRandom);
	wait(WaitStrength);
	Set_Val(AimY,	inv(AimStrength));
	wait(WaitStrength);
	Set_Val(AimX,	inv(AimStrength));
	Set_Val(Strafe, inv(StrafeRandom));
	wait(WaitStrength);
}

combo cPolar {
	Set_Ival(AimX, CrescensRadius);
	wait(20);
	Set_Ival(AimY, CrescensRadius);
	wait(20);
	Set_Ival(AimX, inv(CrescensRadius));
	wait(20);
	Set_Ival(AimY, inv(CrescensRadius));
	wait(20);
}

combo cCookAndRelease() {
	if(CookTime == 1028)

	set_val(Lethal_BTN, 100);
	wait(CookTime);
	set_val(Lethal_BTN, 0);
	wait(100);
}

combo cAutoPing {
	set_val(Ping_BTN, 0);
	wait(100);
	set_val(Ping_BTN, 100);
	wait(50);
	set_val(Ping_BTN, 0);
	wait(50);
	set_val(Ping_BTN, 100);
	wait(50);
	set_val(Ping_BTN, 0);
	wait(AutoPingDelay);
}

combo cFastMelee {
	set_val(Melee_BTN, 100);
	wait(35);
	set_val(Melee_BTN, 0);
	wait(30);
}

combo cDolphinJump{
	wait(200);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN,0);
	wait(30);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN,0);
	wait(30);
}

combo cTacSprint { 
    set_val(Sprint_BTN, 100);
    wait(60);
    set_val(Sprint_BTN, 0);
    wait(1100);
    set_val(Melee_BTN, 100);
    wait(40);
    set_val(Melee_BTN, 0);
    wait(1000);
}

combo cRun {
	Sprinting = 1;
	set_val(Sprint_BTN, 100);
	wait(30);
}

combo cStopSprint {
	AutoRun_KS = TRUE;
	wait(AutoRunDelay);
	AutoRun_KS = FALSE;
}

combo cEasyProne {
    set_val(Crouch_BTN, 100);
    wait(350);
}

combo cGetUp {
    set_val(Jump_BTN, 100);
    wait(80);
}

combo cAimAbuse {
	set_val(Ads_BTN, 100);
	wait(random(220, 420)); // Hold Time Between 220ms and 420ms
	set_val(Ads_BTN, 0);
	wait(random(90, 220));  //  Release Time Between 90ms and 220ms 
}

combo cReload {
	wait(20);
	set_val(Reload_BTN, 100);
	wait(50);
	wait(20);
	set_val(Reload_BTN, 0);
}

combo cCancelReload {
    set_val(Swap_BTN, 100);
    wait(20);
    wait(20)
    set_val(Swap_BTN, 100);
    wait(20);

    ReloadInProgress = FALSE; 
}

combo cSnakeShotMW2 {
	set_val(Crouch_BTN, 100);
	wait(100);
	set_val(Walk, 100);
	wait(30);
	set_val(Crouch_BTN, 100);
	wait(750);
	set_val(Crouch_BTN, 0);
	set_val(Walk, 0);
	wait(100);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(600);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
}

combo cBunnyHop {
    set_val(Jump_BTN, 100);
    wait(60);
    set_val(Jump_BTN, 0);
    wait(60);
    set_val(Jump_BTN, 100);
    wait(60);
    set_val(Jump_BTN, 0);
    wait(60);
}

combo cRapidFire {
    wait(RapidHold);
    set_val(Fire_BTN, 0);
    wait(RapidRest);
}

combo cAkimboRapid {
    set_val(Fire_BTN, 100);
    set_val(Ads_BTN, 100);
    wait(60);
    set_val(Fire_BTN, 0);
    set_val(Ads_BTN, 0);
	wait(30);
}

combo cBurstFire {
	wait(420);
    set_val(Fire_BTN, 0);
	wait(190);
}

combo cDynaFire {
	wait(Fire_Rate + 10);
	set_val(Fire_BTN, 0);
	wait(Fire_Rate + 10);
}

combo cCancelAnimation {
	set_val(Lethal_BTN, 100);
	wait(100);
	set_val(Lethal_BTN, 100);
	set_val(Swap_BTN, 100);
	wait(40);
	set_val(Swap_BTN, 0);
	wait(20);
}

combo cGWalk {
	set_val(Walk, 0);
	wait(50);
	set_val(Crouch_BTN, 100);
	wait(450);
	set_val(Sprint_BTN, 100);
	wait(50);
	set_val(Sprint_BTN, 0);
	wait(50);
	set_val(Sprint_BTN, 100);
	wait(50);
	set_val(Sprint_BTN, 0);
	wait(MW2GWalkDelay);
}

combo cBoom   {
    wait(830);
	set_val(Reload_BTN, 100);
	wait(60); 
	set_val(Reload_BTN, 0);
	wait(60);
	set_val(Reload_BTN, 100);
	wait(60);
	set_val(Reload_BTN, 0);
}

combo cProneRise {
	set_val(Crouch_BTN, 100);
	wait(570);
	set_val(Crouch_BTN, 0);
	wait(160);
	set_val(Jump_BTN, 100);
	wait(570);
	set_val(Jump_BTN, 0);
	wait(160);
}

combo cDropping_Shot {
	set_val(Crouch_BTN, 100);
	wait(random(45, 110));
	wait(random(65, 260));
	set_val(Crouch_BTN, 100);
}

combo cJumpyShot {
	set_val(Jump_BTN, 100);
	wait(100);
	set_val(Jump_BTN, 0);
	wait(100);
}

combo cQuickScope { 
	set_val(Fire_BTN, 0); 
	set_val(Sprint_BTN, 100);
	set_val(Ads_BTN, 100); 
	wait(QS_Delay);
	set_val(Sprint_BTN, 100);
	set_val(Ads_BTN, 100); 
	set_val(Fire_BTN, 100); 
	wait(50); 
}

combo cHoldBreath {
	set_val(Sprint_BTN, 0);
	wait(80);
	set_val(Sprint_BTN, 100);
	wait(100);
	set_val(Sprint_BTN, 0);
	wait(80);
}

combo cDropShot {
	set_val(Crouch_BTN, 100);
	wait(125);
	wait(DropShotSpeed);
	set_val(Crouch_BTN, 100);
}

combo cCancelSlideMW2Tac {
	set_val(Crouch_BTN, 100);
	wait(80);
	set_val(Crouch_BTN, 0);
	wait(MW2SlideCancelDelay);
	set_val(Ads_BTN, 100);
	wait(550);
	set_val(Ads_BTN, 0);
	wait(100);
	set_val(Jump_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(40);
}

combo cMW2CancelSlideStandard {
	set_val(Crouch_BTN, 100);
	wait(80);
	set_val(Crouch_BTN, 0);
	wait(MW2SlideCancelDelay);
	wait(20);
	set_val(Swap_BTN, 100);
	wait(20);
	set_val(Swap_BTN, 0);
	wait(20);
	set_val(Swap_BTN, 100);
	wait(20);
	set_val(Swap_BTN, 0);
	wait(600);
	set_val(Jump_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(40);
}

combo cCancelSlideMW2Lethal {
	wait(350);
	set_val(Lethal_BTN,100);
	wait(100);
	set_val(Swap_BTN,100);
	wait(30);
	set_val(Swap_BTN, 0);
	wait(30);
	set_val(Lethal_BTN, 0);
	wait(450);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
}

combo cBFCancelSlide { 
	set_val(Jump_BTN, 100);
	wait(BF2042SlideCancelDelay);
	set_val(Crouch_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Crouch_BTN, 0);
	wait(10);
	set_val(Jump_BTN, 100);
	wait(10);
	set_val(Sprint_BTN, 100);
	wait(60);
	set_val(Sprint_BTN, 0);
	wait(10);
}

combo cCancelSlideCW {
	set_val(Crouch_BTN, 100);
    wait(CWSlideCancelDelay);
	set_val(Crouch_BTN, 0);
	wait(20);
	set_val(Sprint_BTN, 0);
	set_val(Ads_BTN, 100);
	wait(10);
	set_val(Ads_BTN, 0);
	set_val(Crouch_BTN, 100);
	set_val(Sprint_BTN, 100);
	wait(20);
	set_val(Crouch_BTN, 0);
	set_val(Sprint_BTN, 0);
	wait(20);
}

combo cCancelSlideMW {
	set_val(Crouch_BTN, 100);
	wait(MWVGSlideCancelDelay);
	set_val(Crouch_BTN, 0);
	wait(60);
	set_val(Crouch_BTN, 100);
	wait(50);
	set_val(Crouch_BTN, 100);
	set_val(Jump_BTN, 100);
	wait(60);
	set_val(Crouch_BTN, 0);
	set_val(Jump_BTN, 100);
	wait(10);
	set_val(Jump_BTN, 0);
}

combo cPerfectionAccuracy {
	set_val(Fire_BTN, 100);
	wait(newHold);
	set_val(Fire_BTN, 0);
	wait(newRest);
}

combo cStrafe {
	if(StrafeIndex == 0)
	{
		RandomizedStrafeOne = 110;
		RandomizedStrafeTwo = 210;
	}
	else
	{
		RandomizedStrafeOne = 210;
		RandomizedStrafeTwo = 110;
	}

	Set_Val(Strafe, 100);

	Strafe = random((StrafeDelay - RandomizedStrafeOne), (StrafeDelay + RandomizedStrafeOne));

	wait(Strafe); 
	wait(54); 
	Set_Val(Strafe, inv(100));

	Strafe = random((StrafeDelay - RandomizedStrafeTwo), (StrafeDelay + RandomizedStrafeTwo));

	wait(Strafe); 
	wait(54);

	StrafeIndex++;

	if(StrafeIndex == 2)
		StrafeIndex = 0;
}

combo cSSNikolai {
	wait(20);
	image_oled(0, 10, Color, FALSE, Frames[Frame]);
	Frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
function Load_PVARs() {
	doubleStrengthTime		= get_pvar(SPVAR_1,     0,	2000,	600);
	QS_Delay				= get_pvar(SPVAR_2,     1,  3000,   285);
	StrafeDelay				= get_pvar(SPVAR_3,     1,  3000,   400);
	burstHold				= get_pvar(SPVAR_4,     1,  3000,   240);
	burstRest				= get_pvar(SPVAR_5,     1,  3000,   180);
	RapidHold				= get_pvar(SPVAR_6,     1,  3000,    60);
	RapidRest				= get_pvar(SPVAR_7,     1,  3000,    30);
	RapidBurstHold			= get_pvar(SPVAR_8,     1,  3000,   420);
	RapidBurstRest			= get_pvar(SPVAR_9,     1,  3000,   190);
	HeadShotHoldTime		= get_pvar(SPVAR_10,    1,  4000,  1500);
	AutoPingDelay			= get_pvar(SPVAR_11,    1,  6000,  2000);
	MaxReloadTime			= get_pvar(SPVAR_12,    1,  9999,  1860);
	AutoRunDelay			= get_pvar(SPVAR_13,    1,  9999,  1890);
	VerticalTime			= get_pvar(SPVAR_14,    1,  9999,  2000);
	HorizontalTime			= get_pvar(SPVAR_15,    1,  9999,  2400);
	AR_Strength				= get_pvar(SPVAR_16, -100,	 100,	 20);
	MW2GWalkDelay			= get_pvar(SPVAR_17,    1,	1000,	350);

	Reset_SPVAR();

	Strength					= Read_PVAR(	1,	 10,	2);
	TrackingSize				= Read_PVAR(    1,   10,    2);
	TrackingSpeed				= Read_PVAR(    1,   10,    3);
	DeadZone					= Read_PVAR(	1,	 20,	8);
	TaylorRadius				= Read_PVAR(    1,   50,   15);
	_PolarRadius				= Read_PVAR(    1,   50,   10);
	_PolarAngle					= Read_PVAR(    1,   50,   15);
	_PolarRBoost				= Read_PVAR(    1,   50,    5);
	_PolarABoost				= Read_PVAR(    1,   50,    8);
	AdsSize						= Read_PVAR(    1,   50,   14);
	AdsFireSize					= Read_PVAR(    1,   50,   16);
	HipFireSize					= Read_PVAR(    1,   50,   18);
	InGame_Menu_Sens			= Read_PVAR(    1,   50,   10);
	AimAssistStrength			= Read_PVAR(    1,   50,   15);
	AimAssistWaitTime			= Read_PVAR(    1,  100,   36);
	TaylorAngle					= Read_PVAR(    1,  100,   15);
	StrafeAssistRadius			= Read_PVAR(    1,  100,   25);
	StrafeAssistSpeed			= Read_PVAR(    1,  100,   25);
	AdsWaitValue				= Read_PVAR(    1,  100,   30);
	AdsFireWaitValue			= Read_PVAR(    1,  100,   20);
	HipFireWaitValue			= Read_PVAR(    1,  100,   30);
	HeadShotStrength			= Read_PVAR(    1,  100,   15);
	TaylorARVert				= Read_PVAR(    1,  100,   20);
	DropShotSpeed				= Read_PVAR(    1,  100,   40);
	NikolaiDropShotSpeed		= Read_PVAR(    1,  100,   40);
	SteadyAimResolution			= Read_PVAR(    1,  100,   11);
	TaylorARHoriz				= Read_PVAR( -100,  100,    0);
	VerticalStart				= Read_PVAR( -100,  100,   15);
	VerticalEnd					= Read_PVAR( -100,  100,   20);
	HorizontalStart				= Read_PVAR( -100,  100,    0);
	HorizontalEnd				= Read_PVAR( -100,  100,    0);

	AntiRecoilType				= Read_PVAR(    0,    7,    0);
	TaylorShape					= Read_PVAR(    0,   11,    0);
	TaylorTracking				= Read_PVAR(    0,    3,    0);
	CrescensPolar				= Read_PVAR(    0,    1,    0);
	StickyAimType				= Read_PVAR(    0,    4,    0);
	SS_NikolaiAimAssist			= Read_PVAR(    0,    1,    0);
	DoGzTimedAimAssist			= Read_PVAR(    0,    1,    0);
	SteadyAimToggle				= Read_PVAR(    0,    1,    0);
	AimAbuseToggle				= Read_PVAR(    0,    1,    0);
	SpeedStrafeToggle			= Read_PVAR(    0,    1,    0);
	AimCorrectionsToggle		= Read_PVAR(    0,    1,    0);
	RapidFireToggle				= Read_PVAR(    0,    1,    0);
	AkimboRapidFireToggle		= Read_PVAR(    0,    1,    0);
	BurstFireToggle				= Read_PVAR(    0,    1,    0);
	DynamicRapidFireToggle		= Read_PVAR(    0,    1,    0);
	SlideCancelMode				= Read_PVAR(    0,    8,    0);
	JumpShotToggle				= Read_PVAR(    0,    1,    0);
	ScopeShotToggle				= Read_PVAR(    0,    3,    0);
	QuickScopeMode				= Read_PVAR(    0,    2,    0);
	StrafeToggle				= Read_PVAR(    0,    1,    0);
	StandardDropShotToggle		= Read_PVAR(    0,    1,    0);
	SS_NikolaiDropShotToggle	= Read_PVAR(    0,    1,    0);
	HoldBreathToggle			= Read_PVAR(    0,    1,    0);
	AutoPingMode				= Read_PVAR(    0,    4,    0);
	ProneRiseToggle				= Read_PVAR(    0,    1,    0);
	ChickenModeToggle			= Read_PVAR(    0,    1,    0);
	StrafeJumpToggle			= Read_PVAR(    0,    1,    0);
	SmartGrenadeToggle			= Read_PVAR(    0,    1,    0);
	BunnyHopToggle				= Read_PVAR(    0,    1,    0);
	AutoBlowToggle				= Read_PVAR(    0,    1,    0);
	EasyProneToggle				= Read_PVAR(    0,    1,    0);
	ReloadCancelToggle			= Read_PVAR(    0,    1,    0);
	AutoRunMode					= Read_PVAR(    0,    4,    0);
	FastMeleeMode				= Read_PVAR(    0,    2,    0);
	PerfectAccuracyToggle		= Read_PVAR(    0,    1,    0);
	HeadShotAssistToggle		= Read_PVAR(    0,    1,    0);
	RumbleBlockToggle			= Read_PVAR(    0,    1,    0);
	AutoReloadToggle			= Read_PVAR(    0,    1,    0);
	DolphinDiveToggle			= Read_PVAR(    0,    1,    0);
	SnakeShotToggle				= Read_PVAR(	0,	  2,	0)
	Pin 						= Read_PVAR(  101,  999,  101);

	set_val(TRACE_2, (SPVAR_Current_Slot - SPVAR_18) + (SPVAR_Current_Bit > 0));
}

function Save() {
	set_pvar(SPVAR_1,  doubleStrengthTime);
	set_pvar(SPVAR_2,  QS_Delay);
	set_pvar(SPVAR_3,  StrafeDelay);
	set_pvar(SPVAR_4,  burstHold);
	set_pvar(SPVAR_5,  burstRest);
	set_pvar(SPVAR_6,  RapidHold);
	set_pvar(SPVAR_7,  RapidRest);
	set_pvar(SPVAR_8,  RapidBurstHold);
	set_pvar(SPVAR_9,  RapidBurstRest);
	set_pvar(SPVAR_10, HeadShotHoldTime);
	set_pvar(SPVAR_11, AutoPingDelay);
	set_pvar(SPVAR_12, MaxReloadTime);
	set_pvar(SPVAR_13, AutoRunDelay);
	set_pvar(SPVAR_14, VerticalTime);
	set_pvar(SPVAR_15, HorizontalTime);
	set_pvar(SPVAR_16, AR_Strength);
	set_pvar(SPVAR_17, MW2GWalkDelay);

	Reset_SPVAR();

	Save_PVAR(Strength		    		   	,    1,     10);
	Save_PVAR(TrackingSize      		 	,    1,     10);
	Save_PVAR(TrackingSpeed     		 	,    1,     10);
	Save_PVAR(DeadZone	      				,    1,     20);	
	Save_PVAR(TaylorRadius      		 	,    1,     50);
	Save_PVAR(_PolarRadius      		 	,    1,     50);
	Save_PVAR(_PolarAngle       	 		,    1,     50);
	Save_PVAR(_PolarRBoost       			,    1,     50);
	Save_PVAR(_PolarABoost       			,    1,     50);
	Save_PVAR(AdsSize           			,    1,     50);
	Save_PVAR(AdsFireSize      				,    1,     50);
	Save_PVAR(HipFireSize       			,    1,     50);
	Save_PVAR(InGame_Menu_Sens   			,    1,     50);
	Save_PVAR(AimAssistStrength   			,    1,     50);
	Save_PVAR(AimAssistWaitTime				,    1,    100);
	Save_PVAR(TaylorAngle        			,    1,    100);
	Save_PVAR(StrafeAssistRadius			,    1,    100);
	Save_PVAR(StrafeAssistSpeed				,    1,    100);
	Save_PVAR(AdsWaitValue     				,    1,    100);
	Save_PVAR(AdsFireWaitValue				,    1,    100);
	Save_PVAR(HipFireWaitValue 				,    1,    100);
	Save_PVAR(HeadShotStrength   			,    1,    100);
	Save_PVAR(TaylorARVert   				,    1,    100);
	Save_PVAR(DropShotSpeed					,    1,    100);
	Save_PVAR(NikolaiDropShotSpeed			,    1,    100);
	Save_PVAR(SteadyAimResolution			,    1,    100);
	Save_PVAR(TaylorARHoriz 				, -100,    100);
	Save_PVAR(VerticalStart					, -100,    100);
	Save_PVAR(VerticalEnd					, -100,    100);
	Save_PVAR(HorizontalStart				, -100,    100);
	Save_PVAR(HorizontalEnd					, -100,    100);

	Save_PVAR(AntiRecoilType				,	   0,    7);
	Save_PVAR(TaylorShape		  			,	   0,   11);
	Save_PVAR(TaylorTracking  	  			,	   0,    3);
	Save_PVAR(CrescensPolar	  				,	   0,    1);
	Save_PVAR(StickyAimType	  	  			,	   0,    4);
	Save_PVAR(SS_NikolaiAimAssist			,	   0,    1);
	Save_PVAR(DoGzTimedAimAssist			,	   0,    1);
	Save_PVAR(SteadyAimToggle				,	   0,    1);
	Save_PVAR(AimAbuseToggle				,	   0,    1);
	Save_PVAR(SpeedStrafeToggle  			,	   0,    1);
	Save_PVAR(AimCorrectionsToggle 			,	   0,    1);
	Save_PVAR(RapidFireToggle	  			,	   0,    1);
	Save_PVAR(AkimboRapidFireToggle			,	   0,    1);
	Save_PVAR(BurstFireToggle	  			,	   0,    1);
	Save_PVAR(DynamicRapidFireToggle		,	   0,    1);
	Save_PVAR(SlideCancelMode	  			,	   0,    8);
	Save_PVAR(JumpShotToggle				,	   0,    1);
	Save_PVAR(ScopeShotToggle				,	   0,    3);
	Save_PVAR(QuickScopeMode				,	   0,    2);
	Save_PVAR(StrafeToggle		  			,	   0,    1);
	Save_PVAR(StandardDropShotToggle		,	   0,    1);
	Save_PVAR(SS_NikolaiDropShotToggle		,	   0,    1);
	Save_PVAR(HoldBreathToggle		  		,	   0,    1);
	Save_PVAR(AutoPingMode			  		,	   0,    4);
	Save_PVAR(ProneRiseToggle		  		,	   0,    1);
	Save_PVAR(ChickenModeToggle		  		,	   0,    1);
	Save_PVAR(StrafeJumpToggle		  		,	   0,    1);
	Save_PVAR(SmartGrenadeToggle	  		,	   0,    1);
	Save_PVAR(BunnyHopToggle		  	  	,	   0,    1);
	Save_PVAR(AutoBlowToggle		  		,	   0,    1);
	Save_PVAR(EasyProneToggle				,	   0,    1);
	Save_PVAR(ReloadCancelToggle		  	,	   0,    1);
	Save_PVAR(AutoRunMode					,	   0,    4);
	Save_PVAR(FastMeleeMode					,	   0,    2);
	Save_PVAR(PerfectAccuracyToggle	  		,	   0,    1);
	Save_PVAR(HeadShotAssistToggle	  		,	   0,    1);
	Save_PVAR(RumbleBlockToggle		  		,	   0,    1);
	Save_PVAR(AutoReloadToggle		  		,	   0,    1);
	Save_PVAR(DolphinDiveToggle				,	   0,    1);
	Save_PVAR(SnakeShotToggle				,	   0,	 2);
	Save_PVAR(Pin							, 	 101,  999);

	set_val(TRACE_3, (SPVAR_Current_Slot - SPVAR_18) + (SPVAR_Current_Bit > 0));																																																								// This Script Was Made By SS_Nikolai
}

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 
function Reset_SPVAR() {
	SPVAR_Current_Slot	= SPVAR_18;
	SPVAR_Current_Bit	=		 0;
	SPVAR_Current_Value =		 0;
	SPVAR_Total_Bits	=		 0;
}

int SPVAR_Total_Bits;

// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 

int SPVAR_Current_Bit,
	SPVAR_Current_Slot,
	SPVAR_Current_Value,
	SPVAR_TMP,
	SPVAR_Bits;

// Function used to count the number of bits used by the given value
function Get_Bit_Count(Val) {
	SPVAR_TMP = 0;
	Val		  = abs(Val);

	while (Val)
	{
		SPVAR_TMP++;
		Val = Val >> 1;
	}
		return SPVAR_TMP;
}

function Get_Bit_Count2(Val1, Val2) {	
	SPVAR_TMP = max(Get_Bit_Count(Val1), Get_Bit_Count(Val2));

	if (Is_Signed2(Val1, Val2))
	{
		SPVAR_TMP++;
	}
		SPVAR_Total_Bits += SPVAR_TMP;
	return SPVAR_TMP;
}

function Is_Signed2(Val1, Val2) {
	return Val1 < 0 || Val2 < 0;
}

function Make_Sign(bits) {
	return 1 << clamp(bits - 1, 0, 31);
}

function Make_Full_Mask(bits) {	
	if (bits == 32)
	{
		return -1;
	}
		return 0x7FFFFFFF >> (31 - bits);
}

function Make_Sign_Mask(bits) {
	return Make_Full_Mask(bits - 1);
}

function Pack_I(Val, bits) {
	if (Val < 0)
	{
		return (abs(Val) & Make_Sign_Mask(bits)) | Make_Sign(bits);
	}
		return Val & Make_Sign_Mask(bits);
}

function Unpack_I(Val, bits) {
	if (Val & Make_Sign(bits))
	{
		return 0 - (Val & Make_Sign_Mask(bits));
	}
		return Val & Make_Sign_Mask(bits);
}

function Read_SPVAR_Slot(slot) {
	return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0);
}

function Save_PVAR(Val, min, max) {
	SPVAR_Bits = Get_Bit_Count2(min, max);
	Val		   = clamp(Val, min, max);
	
	if (Is_Signed2(min, max))
	{
		Val = Pack_I(Val, SPVAR_Bits);
	}

	Val = Val & Make_Full_Mask(SPVAR_Bits);
	
	if (SPVAR_Bits >= 32 - SPVAR_Current_Bit)
	{
		SPVAR_Current_Value	= SPVAR_Current_Value | (Val << SPVAR_Current_Bit);
		set_pvar(SPVAR_Current_Slot, SPVAR_Current_Value);
		SPVAR_Current_Slot++;
		SPVAR_Bits -= (32 - SPVAR_Current_Bit);
		Val = Val >> (32 - SPVAR_Current_Bit);
		SPVAR_Current_Bit = 0;
		SPVAR_Current_Value = 0;
	}

	SPVAR_Current_Value = SPVAR_Current_Value | (Val << SPVAR_Current_Bit);
	SPVAR_Current_Bit  += SPVAR_Bits;

	if (!SPVAR_Current_Bit)
	{
		SPVAR_Current_Value = 0;
	}
		set_pvar(SPVAR_Current_Slot, SPVAR_Current_Value);
}

function Read_PVAR(min, max, def) {
	SPVAR_Bits			= Get_Bit_Count2(min, max);
	SPVAR_Current_Value = (Read_SPVAR_Slot(SPVAR_Current_Slot) >> SPVAR_Current_Bit) & Make_Full_Mask(SPVAR_Bits);
	
	if (SPVAR_Bits >= 32 - SPVAR_Current_Bit)
	{
		SPVAR_Current_Value = (SPVAR_Current_Value & Make_Full_Mask(32 - SPVAR_Current_Bit)) | ((Read_SPVAR_Slot(SPVAR_Current_Slot + 1) & Make_Full_Mask(SPVAR_Bits - (32 - SPVAR_Current_Bit))) << (32 - SPVAR_Current_Bit));
	}	

	SPVAR_Current_Bit += SPVAR_Bits;
	SPVAR_Current_Value = SPVAR_Current_Value & Make_Full_Mask(SPVAR_Bits);

	if (SPVAR_Current_Bit >= 32)
	{
		SPVAR_Current_Slot++;
		SPVAR_Current_Bit -= 32;
	}
	
	if (Is_Signed2(min, max))
	{
		SPVAR_Current_Value = Unpack_I(SPVAR_Current_Value, SPVAR_Bits);
	}
	
	if (SPVAR_Current_Value < min || SPVAR_Current_Value > max)
	{
		return def;
	}
	
	return SPVAR_Current_Value;
}

function block_all_outputs() {
	set_val(PS4_L2      , 0);
	set_val(PS4_R2      , 0);
	set_val(PS4_L1      , 0);
	set_val(PS4_R1      , 0);
	set_val(PS4_L3      , 0);
	set_val(PS4_R3      , 0);
	set_val(PS4_UP      , 0);
	set_val(PS4_DOWN    , 0);
	set_val(PS4_LEFT    , 0);
	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS   , 0);
	set_val(PS4_SQUARE  , 0);
	set_val(PS4_CIRCLE  , 0);
	set_val(PS4_TRIANGLE, 0);
}

function SSNikolaiCheck() {
	if(!combo_running(cSSNikolai) && Frame <= 15)
		combo_restart(cSSNikolai);
}

function Main_Button_Pressed(Except) {
	if(Except != -1 && event_press(Except))
		return FALSE;
	if(event_press(Lethal_BTN))
		return TRUE;
	return FALSE;
}

function LEDBlink(Toggle) {
    if(Toggle)
        combo_run(cFlashGreen);
    else
        combo_run(cFlashRed);
}

function Check_Magnitude(_XVal, _XLVal, _YVal, _YLVal) {
	if(isqrt(pow((_XVal - _XLVal), 2) + pow((_YVal - _YLVal), 2) ) <= 500)
	{
		return TRUE;
	}
		return FALSE;
}

function RumbleEviLAntiRecoil() {	
	//ReT = max(get_rumble(RUMBLE_A), get_rumble(RUMBLE_B));
	ReT = RumbleToUse();

	if (ReT > 10 && ReT < 90)
	{
		return(ReT - AR_Strength * Inverted);
	}
		return 0;
}

function DynamicEviLAntiRecoil(AR_Strength, CurrentRY, CurrentRX) {
	if(get_ptime(Fire_BTN))
	{
		AxisY = (get_ptime(Fire_BTN) / (160));

		aR_Strength = (AR_Strength / 2) + AR_Strength * Inverted;

		if(AxisY > aR_Strength)
			AxisY = aR_Strength;

		AxisY = AxisY +  AR_Strength - ((abs(CurrentRX * CurrentRX) + abs(CurrentRY * CurrentRY)) / 1000);
	}
		return AxisY;
}

function RumbleToUse() {
	if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) == 100) 
	{
		return RUMBLE_B;
	}

	if(get_rumble(RUMBLE_B) == 100) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_B;
	}
		return 0;
}

function GetSteadyAim(Axis, _Resolution) {
	if (Axis >= 0)
	{
		ReT = (Axis % _Resolution);

		if (ReT >= (_Resolution / 2))
			Axis = Axis + (_Resolution - ReT);
		else
			Axis -= ReT;
	}
	else
	{
		ReT = (Axis % _Resolution);

		if (abs(ReT) >= (_Resolution / 2))
			Axis = Axis - (_Resolution + ReT);
		else
			Axis += abs(ReT);
	}
		return Axis;
}

function TaylorShape(Stick, Angle, Rad) {
	if(TaylorShape == 1)
	{  
	 	if(ShapeDirection)
		{
	  		Set_Val(Stick + 8, (Rad * SIN(Angle)) / 100 + TrackingAngleOne);
	 		Set_Val(Stick + 7, (Rad * COS(Angle)) / 100 + TrackingAngleTwo);
	 	}
		else
		{
	 		Set_Val(Stick + 8, (Rad * COS(Angle)) / 100 + TrackingAngleTwo);
	 		Set_Val(Stick + 7, (Rad * SIN(Angle)) / 100 + TrackingAngleOne);
	 	}
 	}

 	if(TaylorShape == 2)
	{ 		
  		if(ShapeDirection)
		{
  		    Set_Val(Stick + 8, (Rad     * SIN(Angle)) / 100 + TrackingAngleOne);
  			Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100 + TrackingAngleTwo);
  		}
		else
		{
  			Set_Val(Stick + 8, (Rad     * COS(Angle))  / 100 + TrackingAngleTwo);
  			Set_Val(Stick + 7, (Rad / 2 * SIN(Angle))  / 100 + TrackingAngleOne);
  		}
  	}

  	if(TaylorShape == 3)
	{
  	    if(ShapeDirection)
		{
  		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle))  / 100 + TrackingAngleOne);
  			Set_Val(Stick + 7, (Rad     * COS(Angle))  / 100 + TrackingAngleTwo);
  	    }
		else
		{ 
  	    	Set_Val(Stick + 8, (Rad / 2 * COS(Angle))  / 100 + TrackingAngleTwo);
  			Set_Val(Stick + 7, (Rad     * SIN(Angle))  / 100 + TrackingAngleOne);
  		} 
  	}

  	if(TaylorShape == 4)
	{
		Spiral(Rad);

			if(ShapeDirection)
			{ 
				Set_Val(Stick + 8, (InnerSpiral * SIN(Angle)) / 100 + TrackingAngleOne);
				Set_Val(Stick + 7, (OuterSpiral * COS(Angle)) / 100 + TrackingAngleTwo);
			}
			else
			{
				Set_Val(Stick + 8, (InnerSpiral * COS(Angle)) / 100 + TrackingAngleTwo);
				Set_Val(Stick + 7, (OuterSpiral * SIN(Angle)) / 100 + TrackingAngleOne);
			}
  	}

	if(TaylorShape == 5)
	{
		Helix();

		Set_Val(Stick + 8, (Rad * X)  / 100 + TrackingAngleOne);
		Set_Val(Stick + 7, (Rad * Y)  / 100 + TrackingAngleTwo);
	}

	if(TaylorShape == 6) 
	{ 
		Set_Val(Stick + 8, (Rad * COS(Angle)) / 100 + TrackingAngleTwo);
	}

	if(TaylorShape == 7)
	{ 
		if(Position == 0)
		{
			Set_Val(Stick + 7, (Rad * COS(135 + Angle)) / 100 + TrackingAngleTwo);
		    Set_Val(Stick + 8, (Rad * SIN(45  + Angle)) / 100 + TrackingAngleOne);
		} 

		if(Position == 1)
		{
			Set_Val(Stick + 7, (Rad * COS(45  + Angle)) / 100 + TrackingAngleTwo);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100 + TrackingAngleOne);
	    }  

		Position ++;

		if(Position == 2)
		{
		  	Position = 0;
		}
    }

    if(TaylorShape == 8)
	{ 
    	Set_Val(Stick + 7, (Rad * COS(315 + Angle))  / 100 + TrackingAngleTwo);
  		Set_Val(Stick + 8, (Rad * SIN(180 + Angle))  / 100 + TrackingAngleOne);
  	}

	if(TaylorShape == 9)
	{
    	Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleTwo);
  		Set_Val(Stick + 8, (Rad * SIN(315 + Angle)) / 100 + TrackingAngleOne);
  	}

	if(TaylorShape == 10)
	{
		if(polarAngle < 45)
		{
			Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * SIN(225 + Angle)) / 100 + TrackingAngleTwo); 
		} 
		else if(polarAngle <  90)
		{ 
			Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad   	* SIN(Angle)) / 100 + TrackingAngleTwo);
		} 
		else if(polarAngle < 135)
		{ 
			Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100 + TrackingAngleTwo); 
		}  
		else if(polarAngle < 180)
		{
		    Set_Val(Stick + 7, (Rad		* COS(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle)) / 100 + TrackingAngleTwo); 
		}
		else if(polarAngle < 225)
		{ 
		    Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * SIN(225 + Angle)) / 100 + TrackingAngleTwo); 
		}  
		else if(polarAngle < 270)
		{ 
		    Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad 	* SIN(Angle)) / 100 + TrackingAngleTwo); 
		}
		else if(polarAngle < 315)
		{ 
		    Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100 + TrackingAngleTwo); 
		}
		else
		{ 
		  	Set_Val(Stick + 7, (Rad 	*   COS(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle))   / 100 + TrackingAngleTwo); 
		}
	}

	if(TaylorShape == 11)
	{
		if(anglePosition == 0)
		{ 
			Set_Val(Stick + 7, (Rad     * COS(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle)) / 100 + TrackingAngleTwo);
		} 

		if(anglePosition == 1)
		{  
		    Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * SIN(225 + Angle)) / 100 + TrackingAngleTwo); 
		} 

		if(anglePosition == 2)
		{  
			Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad     * SIN(Angle)) / 100 + TrackingAngleTwo);
		}  

		if(anglePosition == 3)
		{ 
		    Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100 + TrackingAngleTwo); 
		}

		if(anglePosition == 4)
		{  
		    Set_Val(Stick + 7, (Rad     * COS(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle)) / 100 + TrackingAngleTwo);
		}  

		if(anglePosition == 5)
		{ 
		    Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * SIN(225 + Angle)) / 100 + TrackingAngleTwo); 
		}

		if(anglePosition == 6)
		{ 
		   Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100 + TrackingAngleOne); 
		   Set_Val(Stick + 8, (Rad     * SIN(Angle)) / 100 + TrackingAngleTwo);
		}

		if(anglePosition == 7)
		{ 
			Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100 + TrackingAngleTwo);
	    } 

	    Timer++;

		if(Timer >= TaylorAngle)
		{
			anglePosition ++;
			Timer = 0;
		}

		if(anglePosition == 8) 
			anglePosition = 0;
	}
}

function CorrectAngle(angle) {
	if (angle < 0)
		angle = 360	   + (angle % 360);
		angle = (angle + 90)	% 360;
	return angle;
}

function SIN(angle) {
	return PolarArray[CorrectAngle(angle)];
}

function COS(angle) {
	return PolarArray[(CorrectAngle(angle) + 90) % 360];
}

function Helix(){ 
	Inc = (Inc % 100);

	if(Position == 0)
	{
		X = Inc;
		Y = 100 - Inc;
	}
	else if (Position == 1)
	{
		X = 100 - Inc;
		Y = - Inc;
	}
	else if (Position == 2)
	{
		X = -Inc;
		Y = -100 + Inc;
	}
	else if(Position == 3)
	{
		X = -100 + Inc;
		Y = Inc;
	}

	Position ++;

	if(Position == 4)
	{
		Position = 0;
	}
}

function Spiral(x_Var) {
	if(!(CycleRefresh++ % 4))
	{
		if(!SpiralPosition1)
		{
			InnerSpiral -= 1;

			if(InnerSpiral < x_Var / 2)
				SpiralPosition1 = TRUE;
		}
		else
		{
		    InnerSpiral += 1;

			if(InnerSpiral > x_Var)
				SpiralPosition1 = FALSE;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;

			if(OuterSpiral < x_Var / 2)
				SpiralPosition2 = TRUE;
		}
		else
		{
			OuterSpiral += 1;

			if(OuterSpiral >  x_Var)
				SpiralPosition2 = FALSE;
		}
			CycleRefresh = 0;
	}
}

function DoGzTimeAim() {
	AAT += get_rtime();

	if (!AxisT)
		Set_Val(AimY, AAT * Strength / 10);

	if (AxisT == 1)  
		Set_Val(AimX, AAT * Strength / 10);

	if (AxisT == 2)  
		Set_Val(AimY, inv(AAT * Strength / 10));

	if (AxisT == 3)
	{
		Set_Val(AimX, inv(AAT * Strength / 10));

		if (AAT > 50)
		{
			AAT		= 0;
			AxisT	= 0;
		}
	}
	else if (AAT > 50)
	{
		AAT		 = 0;
		AxisT	+= 1;
	}
}

function Get_Polar(Stick, AngleOrRadius) {
	if (AngleOrRadius)
		return (360 - get_polar(Stick, POLAR_ANGLE)) % 360;
	return isqrt(~(pow(get_val(42 + Stick), 2) + pow(get_val(43 + Stick), 2))) + 1;
}

function Set_Val(Stick, Value) {
	set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
		return;
}

function Set_Ival(Stick, Output) {
	set_val(Stick, clamp(Output * (100 - abs(get_ival(Stick))) / 100 + get_ival(Stick), -100, 100));
		return;
}

function CompleteY() {
	VertCount++;

	if(VertCount > VerticalTime / 10)
	{
		VertCount = VerticalTime / 10;
		return 1;
	}
		return 0;
}

function VertiVal() {
	VertNum++;

	if(VertNum == VertCalc)
	{
		VertNum = 0;
		AxisY_ += VertVal;
	}
		return AxisY_;
}

function ApplyYVal() {
	Y_Axis = get_val(AimY);

	if(abs(Y_Axis) < 10)
		Y_Axis = 0;
	if(abs(Y_Axis) > AxisY_ + 5)
		return Y_Axis;
	return Y_Axis + (AxisY_);
}

function CompleteX() {
	HorizCount++;

	if(HorizCount > HorizontalTime / 10)
	{
		HorizCount = HorizontalTime / 10;
		return 1;
	}
		return 0;
}

function HoriVal() {
	HorizNum++;

	if(HorizNum == HorizCalc)
	{
		HorizNum = 0;
		AxisX += HorizVal;
	}
		return AxisX;
}

function ApplyXVal() {
	X_Axis = get_val(AimX);

	if(abs(X_Axis) < 10)
		X_Axis = 0;
	if(abs(X_Axis) > abs(AxisX + 5))
		return X_Axis;
	return X_Axis + AxisX;
}

function Rumble(x_Var, x_Num) {
	if(x_Var)
	{
		if(!x_Num)
			RunRumble = 1;
		else
			RunRumble = x_Num;

		RumbleSide = RUMBLE_A;
		RumbleTime = 300;
	}
	else 
	{
		if(!x_Num)
			RunRumble = 2;
		else
			RunRumble = x_Num;

			RumbleSide = RUMBLE_B;
			RumbleTime = 150;
	}
}

function DoubleClick(Button) {
	if (DoubleTap[Button] >= 0)
	{
		DoubleTap[Button] += get_rtime();

		if (DoubleTap[Button] > 450)
			DoubleTap[Button] = -1;
	}

		if (event_release(Button) && get_ptime(Button) <= 200)
		{
			if (DoubleTap[Button] < 0)
			{
				DoubleTap[Button] = 0;
			}
			else
			{
				DoubleTap[Button] = -1;
				return 1;
			}
		}
			return 0;
}

function SnakeShotActivationType(SnakeShotActivationType_) {
	switch(SnakeShotActivationType_)
	{
		case 0 :
		{
			if(get_val(Fire_BTN) && get_ptime(Fire_BTN) <= 200 && !get_val(Ads_BTN))
			{
				return TRUE;
			}
		break;
		}

		case 1 :
		{
			if(get_ival(Ads_BTN) && get_val(Fire_BTN) && get_ptime(Fire_BTN) <= 200)
			{
				return TRUE;
			}
		break;
		}

		case 2 :
		{
			if(get_val(Ads_BTN) && get_val(Fire_BTN) && event_press(Crouch_BTN) && get_ptime(Crouch_BTN) <= 200)
			{
				return TRUE;
			}
		break;
		}

		case 3 :
		{
			if(get_ival(Fire_BTN) && event_press(Crouch_BTN) && get_ptime(Crouch_BTN) <1720)
			{
				return TRUE;
			}
		break;
		}

		case 4 :
		{
			if(get_ival(Ads_BTN))
			{
				if(get_val(Lethal_BTN))
				{
					swap(Lethal_BTN, Fire_BTN);
					return TRUE;
				}
					set_val(Lethal_BTN, 0);
			}
		break;
		}
	}
		return 0;
}

function NumberToStringRegular(f_Value, f_Digits, f_Idx) {
	I 			 =     1;
	digitindex_1 = 10000;

	if(f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

		for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
		{
			if(f_Digits >= charindex_1)
			{
				putc_oled(I, (f_Value / digitindex_1) + 48);
				f_Value %= digitindex_1;
				I++;

				if(charindex_1 == 4)
				{
					putc_oled(I, 44);
					I++;
				}
			}
				digitindex_1 /= 10;
		}
			puts_oled(CenterX(I - 1, OLED_FONT_MEDIUM_WIDTH), f_Idx, OLED_FONT_MEDIUM, I - 1, OLED_WHITE);
}

function NumberToStringSmall(f_Value2, f_Digits2, f_Idx2) {
	I 			 =     1;
	digitindex_1 = 10000;

	if(f_Value2 < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value2 = abs(f_Value2);
	}

		for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
		{
			if(f_Digits2 >= charindex_1)
			{
				putc_oled(I, (f_Value2 / digitindex_1) + 48);
				f_Value2 %= digitindex_1;
				I++;

				if(charindex_1 == 4)
				{
					putc_oled(I, 44);
					I++;
				}
			}
				digitindex_1 /= 10;
		}
			puts_oled(CenterX(I - 1, OLED_FONT_SMALL_WIDTH), f_Idx2, OLED_FONT_SMALL, I - 1, OLED_WHITE);
}

function FindDigits(Number) {
    logVal = 0;

    do
    {
        Number /= 10;
        logVal++;
    }
        while (Number);
    return logVal;
}

function CenterX(f_Chars, f_Font) {
	return (OLED_WIDTH / 2) - ((f_Chars * f_Font) / 2);
}

function CenterY(f_Size) {
	return (OLED_HEIGHT / 2) - (f_Size / 2);
}

function SnakeShotType_Chars(X) {
	if(SnakeShotActivation[X + 1] != -1)
		return SnakeShotActivation[X + 1] - SnakeShotActivation[X] - 1;
	return sizeof(SnakeShotActivation) - SnakeShotActivation[X];
}

function GetChars(X) {
	if(ModsString[X + 1] != -1)
		return ModsString[X + 1] - ModsString[X] - 1;
	return sizeof(ModsString) - ModsString[X];
}

function AimAssistShape_Chars(f_Idx) {
	if(AimPatterns[f_Idx + 1] != -1)
		return AimPatterns[f_Idx + 1] - AimPatterns[f_Idx] - 1;
	return sizeof(AimPatterns) - AimPatterns[f_Idx];
}

function Cycle(Value, Min, Max) {
	if(Value > Max)
		return Min;
	if(Value < Min)
		return Max;
	return Value;
}

function EditValues(ValIdx, ValueIndex, ValIncrement, Min, Max) {
	if(Scroll == ValIdx)
	{
		if(event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 400))
		{
			ValueIndex = Cycle(ValueIndex + ValIncrement, Min, Max); 
			Display    = TRUE;
		}

		if(event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 400))
		{
			ValueIndex = Cycle(ValueIndex - ValIncrement, Min, Max);
			Display	   = TRUE;
		}
	}
		return ValueIndex;
}

function ToggleSwitch(ModIdx, ModVar, Min, Max) {
	if(Mod == ModIdx)
	{
		if(event_press(PS4_CROSS))
		{ 
			ModVar  = Cycle(ModVar + 1, Min, Max);
			Display = TRUE;
		}

			if(ModVar) 
				set_rgb(0, 255, 0);
			else
				set_rgb(255, 0, 0);
	}
		return ModVar;
}

function Buttons(Type) {
	Fire_BTN		= Layouts[Type][0];
	Ads_BTN			= Layouts[Type][1];
	Lethal_BTN		= Layouts[Type][2];
	Tactical_BTN	= Layouts[Type][3];
	Jump_BTN		= Layouts[Type][4];
	Crouch_BTN		= Layouts[Type][5];
	Melee_BTN		= Layouts[Type][6];
	Sprint_BTN		= Layouts[Type][7];
	Reload_BTN		= Layouts[Type][8];
	Swap_BTN		= Layouts[Type][9];
}

function ControllerRSLS(sticks) {
	AimY	= StickLayouts[sticks][0];
	AimX	= StickLayouts[sticks][1];
	Walk	= StickLayouts[sticks][2];
	Strafe	= StickLayouts[sticks][3];
}

const image Frames			[]		= {
									  { 23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 128, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 128, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 128, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 128, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 128, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 100, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 128, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 128, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 128, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 128, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 128, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 128, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 128}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 128, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 128, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 128, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 128}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
const int8 PolarArray		[]		= { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const uint8 EditableMods	[]		= {
	1,	// -  0
	1,	// -  1
	1,	// -  2
	1,	// -  3
	1,	// -  4
	1,	// -  5
	1,	// -  6
	1,	// -  7
	1,	// -  8
	0,	// -  9
	1,	// - 10
	1,	// - 11
	0,	// - 12
	1,	// - 13
	0,	// - 14
	0,	// - 15
	0,	// - 16
	0,	// - 17
	0,	// - 18
	1,	// - 19
	1,	// - 20
	1,	// - 21
	1,	// - 22
	0,	// - 23
	1,	// - 24
	0,	// - 25
	0,	// - 26
	0,	// - 27
	0,	// - 28
	0,	// - 29
	0,	// - 30
	0,	// - 31
	1,	// - 32
	1,	// - 33
	0,	// - 34
	1,	// - 35
	1,	// - 36
	0,	// - 37
	0,	// - 38
	0,	// - 39
	0,	// - 40
	0,	// - 41
	1,	// - 42
	0	// - 43
};
const uint8 Layouts			[][]	= {
     //Fire    Ads_BTN    Lethal Tactical     Jump        Crouch       Melee        Sprint  Reload      Weapon Swap     
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // DEFAULT = 0
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // Tactical_BTN = 1
    { PS4_L2, PS4_R2, PS4_L1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE }, // LEFTY = 2
    { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // N0M4D/CHARLIE = 3
    { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // N0M4D/CHARLIE Tactical_BTN = 4
    { PS4_L2, PS4_L1, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE }, // N0M4D/CHARLIE LEFTY = 5
    { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER JUMPER = 6 
    { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER JUMPER Tactical_BTN = 7
    { PS4_L1, PS4_L2, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // ONE-HAND GUNSLINGER = 8
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // STICK AND MOVE = 9
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BRAWLER = 10
    { PS4_R2, PS4_L2, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BEASTY = 11
    { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER Ping_BTN = 12
    { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER Ping_BTN Tactical_BTN = 13
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // DEFAULT SWAPPED = 14
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // Tactical_BTN SWAPPED = 15
    { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER JUMPER SWAPPED = 16 
    { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER JUMPER Tactical_BTN SWAPPED = 17 
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // STICK AND MOVE SWAPPED = 18
    { PS4_R1, PS4_L1, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BEASTY SWAPPED 19
    { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, // BUMPER Ping_BTN = 20
    { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }  // BUMPER Ping_BTN Tactical_BTN = 21
};
const uint8  StickLayouts	[][]	= {
	//   0       1       2       3
	{ PS4_RY, PS4_RX, PS4_LY, PS4_LX }, // Default Sticks
	{ PS4_LY, PS4_LX, PS4_RY, PS4_RX }, // South Paw
	{ PS4_RY, PS4_LX, PS4_LY, PS4_RX }, // Legacy
	{ PS4_LY, PS4_RX, PS4_LY, PS4_LX }  // Legacy South Paw
};

//--Leave Alone
    int StrafeDelay;
	int AR_Strength;
	int InGame_Menu_Sens;
	int TaylorRadius;
	int TaylorAngle;
	int TrackingSpeed;
	int TrackingSize;
	int DropShotSpeed;
	int NikolaiDropShotSpeed;
	int burstHold;
	int burstRest;
	int QS_Delay;
	int MaxReloadTime;
	int AutoRunDelay;
	int StrafeAssistRadius;
	int StrafeAssistSpeed;
	int _PolarRadius;
	int _PolarAngle;
	int _PolarRBoost;
	int _PolarABoost;
	int AdsSize;
	int AdsFireSize;
	int HipFireSize;
	int AdsWaitValue;
	int AdsFireWaitValue;
	int HipFireWaitValue;
	int HeadShotStrength;
	int HeadShotHoldTime;
	int TaylorARVert;
	int TaylorARHoriz;
	int RapidHold;
	int RapidRest;
	int RapidBurstHold;
	int RapidBurstRest;
	int AutoPingDelay;
	int VerticalStart;
	int VerticalEnd;
	int VerticalTime;
	int HorizontalStart;
	int HorizontalEnd;
	int HorizontalTime;
	int Strength;
	int AimAssistStrength;
	int AimAssistWaitTime;
	int SteadyAimResolution;
	int MW2GWalkDelay;

//--Variable Just Leave Alone
	int RY;
	int MS;
	int ReT;
	int AxisY;
	int Frame;
	int logVal;
	int newHold;
	int newRest;
	int VertVal;
	int VertNum;
	int Inverted;
	int CookTime;
	int DeadZone;
	int VertCalc;
	int HorizVal;
	int HorizNum;
	int leftStick;
	int CurrentRX;
	int CurrentRY;
	int VertCount;
	int HorizCalc;
	int RunRumble;
	int driveMode;
	int Sprinting;
	int Fire_Rate;
	int BurstShot;
	int DoubleTap;
	int Running;
	int PreviousRX;
	int PreviousRY;
	int AxisT, AAT;
	int HorizCount;
	int RumbleSide;
	int RumbleTime;
	int SingleShot;
	int polarAngle;
	int AutoRun_KS;
	int aR_Strength;
	int StrafeAngle;
	int StrafeIndex;
	int RefreshRate;
	int StrafeRandom;
	int CycleRefresh;
	int GWalkVariable;
	int X_Axis, AxisX;
	int Y_Axis, AxisY_;
	int Trigger_Toggle;
	int DynamicTracking;
	int DropShotVariable;
	int doubleStrengthTime;
	int RandomizedStrafeOne;
	int RandomizedStrafeTwo;
	int Angle, I, Inc, X, Y;
	int legacyRecoilStrength;
	int antirecoilBoostTimer;
	int anglePosition, Timer;
	int StickyValue, WaitValue;
	int SnakeShotActivationType_;
	int AimY, AimX, Walk, Strafe;
	int WaitStrength, AimStrength;
	int charindex_1, digitindex_1;
	int SmartRumble, AntirecoilStrength;
	int RightStickRadius, LeftStickRadius;
	int CrescensSpeed, CrescensRadius, CrescensAngle;
	int TrackingAngle, TrackingAngleOne, TrackingAngleTwo;
	int ADS_Grenade_Sens, ADS_Fire_Sens, Sens, Actual_Sens;
	int FirstShotBeforeReload, ReloadInProgress, ReloadTime;
	int SpiralPosition1, InnerSpiral, OuterSpiral, SpiralPosition2, Position;
	int Ads_BTN, Fire_BTN, Lethal_BTN, Tactical_BTN, Jump_BTN, Crouch_BTN, Melee_BTN, Sprint_BTN, Reload_BTN, Swap_BTN;
	int X1 = 60, X2 = 68, X3 = 76, X4 = 84, X5 = 92, X6 = 100, X7 = 108, X8 = 116, X9 = 124, X10 = 132, X11 = 140, X12 = 148, X13 = 156, X14 = 164, X15 = 172, X16 = 180, X17 = 188, X18 = 196, X19 = 204, X20 = 212, X21 = 220, X22 = 228, X23 = 236, X24 = 244, X25 = 252, X26 = 260, X27 = 268, X28 = 276;
	int ShapeDirection	    	    =  TRUE;
	int SlideEnable 				= FALSE;
	int Pin							=	101;
	int Color 						=     1;
	int Increase					= 1, Decrease, Colour[3];	// Do Not Change
	int _RefreshRate 				= 				  8 * 10;	// Do Not Change
	enum { MenuClose, MainMods, EditMods, Single = 1, Double = 2, Triple = 3, Quad = 4 }

//TOGGLES - START
int AntiRecoilType;
int TaylorShape;
int TaylorTracking;
int CrescensPolar;
int StickyAimType;
int SS_NikolaiAimAssist;
int DoGzTimedAimAssist;
int SteadyAimToggle;
int AimAbuseToggle;
int SpeedStrafeToggle;
int AimCorrectionsToggle;
int SlideCancelMode;
int RapidFireToggle;
int AkimboRapidFireToggle;
int BurstFireToggle;
int DynamicRapidFireToggle;
int JumpShotToggle;
int ScopeShotToggle;
int QuickScopeMode;
int StrafeToggle;
int StandardDropShotToggle;
int SS_NikolaiDropShotToggle;
int HoldBreathToggle;
int AutoPingMode;
int ProneRiseToggle;
int ChickenModeToggle;
int StrafeJumpToggle;
int SmartGrenadeToggle;
int BunnyHopToggle;
int AutoBlowToggle;
int EasyProneToggle;
int ReloadCancelToggle;
int AutoRunMode;
int FastMeleeMode;
int PerfectAccuracyToggle; // L2/LT + R1/RB
int HeadShotAssistToggle;
int RumbleBlockToggle;
int AutoReloadToggle;
int DolphinDiveToggle;
int SnakeShotToggle;
int SilentShotToggle;
int MW2GWalkToggle;
//TOGGLES - END

//--Menu Stuff ( Leave Alone )	
	define NumOfMods	=   42;
	int    Scroll		=    1;
	int    Mod			=    2;
	int    Tab			=    0;
	int    screenSaver	= TRUE;
	int    Display		= TRUE;
	int    ZenScreen;
	int    KillSwitch;
	int    SSNikolaiCountDown;

//--Mods
const string ModsString[]	= {
	"Hold L2 + OPTIONS",	// 0
	"Anti Recoil",			// 1 -
	"Taylor Polar",			// 2
	"Taylor Tracking",		// 3
	"Crescens Polar",		// 4
	"Sticky Aim Assist",	// 5
	"Niko's Aim Assist",	// 6
	"DoGz Timed Aim",		// 7
	"Evil Steady Aim",		// 8
	"Aim Abuse",			// 9
	"Strafe Assist",		// 10
	"Aim Corrections",		// 11
	"Slide Cancel",			// 12
	"Rapid Fire",			// 13
	"Akimbo Rapid Fire",	// 14
	"Burst Rapid Fire",		// 15
	"Dynamic Rapid Fire",	// 16
	"Jump Shot",			// 17
	"Scope Shot",			// 18
	"Quick Scope",			// 19
	"Strafe",				// 20
	"Standard Dropshot",	// 21
	"Niko's Dropshot",		// 22
	"Snipers Breath",		// 23
	"Auto Ping",			// 24
	"Prone Rise",			// 25
	"Chicken Mode",			// 26
	"Strafe Jump",			// 27
	"Smart Grenade",		// 28
	"Bunny Hop",			// 29
	"Smart C4",				// 30
	"Easy Prone",			// 31
	"Fast Reload",			// 32
	"Auto Run",				// 33
	"Fast Melee",			// 34
	"Perfect Accuracy",		// 35
	"Head Shot Assist",		// 36
	"Rumble Block",			// 37
	"Auto Reload",			// 38
	"Dolphin Jump",			// 39
	"Snake Shot",			// 40
	"Silent Shot",			// 41
	"MW2 G Walk",			// 42 -
	"Kill Switch",			// 43 --
	"Drive Mode"			// 44 --
};

//--Taylor Shapes
const string AimPatterns[] = { "< Select Shape >","Circle", "Tall Oval", "Wide Oval", "Spiral", "Helix", "Vertical Flare", "Tartan Army", "Jupiter", "Oscilirate", "Atomic", "Rose", "" };																																																												// This Script Was Made By SS_Nikolai

//--Taylor Tracking Types
const string Original			= "Original";
const string DynamicSmall		= "Dynamic Small";
const string DynamicBig			= "Dynamic Big";

//--Multi Sticky
const string SingleSticky		= "Single Sticky";
const string DoubleSticky		= "Double Sticky";
const string TripleSticky		= "Triple Sticky";
const string QuadSticky			= "Quad Sticky";

//--Anti Recoil Types
const string Disabled			= "Choose Type";
const string TaylorRumbleV1		= "Taylor Rumble V1";
const string TaylorLegacyV1		= "Taylor Legacy V1";
const string TaylorRumbleV2		= "Taylor Rumble V2";
const string TaylorLegacyV2		= "Taylor Legacy V2";
const string EviLRumbleAR		= "EviL Rumble";
const string EviLDynamicAR		= "EviL Dynamic";
const string ProgressiveAR		= "Progressive";

//--Slide Cancel Types
const string MWStandard			= "MW / VG Legacy";
const string MWRumble			= "MW / VG Rumble";
const string CWStandard			= "CW Legacy";
const string CWRumble			= "CW Rumble";
const string BFStandard			= "BF2042 Legacy";
const string MW2Standard		= "MW2 Legacy";
const string MW2Tactical		= "MW2 Tactical";
const string MW2Lethal			= "MW2 Lethal";

//--Auto Ping Types
const string AdsAutoPing		= "ADS Only";
const string FireAutoPing		= "Fire Only"; 
const string AdsFireAutoPing	= "ADS + Fire";
const string AdsTacAutoPing		= "ADS + Tactical";

//--Scope Shot Types
const string RightTrigScopeShot	= "Right Trigger";
const string LeftTrigScopeShot	= "Left Trigger";
const string BothTrigScopeShot	= "Both Trigger";

//--Fast Melee Types
const string AutoMaticFastMelee	= "Automatic";
const string ManualFastMelee	= "Manual";

//--Quickscope Types
const string AimFireQS			= "Release ADS";
const string DblTapQS			= "Double Tap";

//--Auto Sprint Types
const string InGameAutoSprint	= "In-Game Auto Run";
const string ExploitAutoSprint	= "Script Auto Run";
const string BetterAutoSprint	= "Better Auto Sprint";
const string MW2TacSprint		= "Infinite TacSprint";																																																																																																		// This Script Was Made By SS_Nikolai

//--Snake Shot Activation Types
const string SnakeShotActivation[] = { "Fire Only", "Ads & Fire", "Ads+Fire+Crouch", "Fire & Tap Crouch", "Ads & Lethal" };

function SSNikolaiTextOne() {
	putc_oled(1, ASCII_UPPER_F);
	puts_oled(X1, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X3, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_C);
	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_B);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_Y);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UNDERSCORE);
	puts_oled(X17, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X18, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_I);
	puts_oled(X19, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_K);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_O);
	puts_oled(X21, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_L);
	puts_oled(X22, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_A);
	puts_oled(X23, 2, 0, 1, 1);
	putc_oled(1, ASCII_LOWER_I);
	puts_oled(X24, 2, 0, 1, 1);

	SSNikolaiCharacterFall();
}

function SSNikolaiTextTwo() {
	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X1, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X3, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_X);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_G);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_G);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_L);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X17, 2, 0, 1, 1);

	putc_oled(1, ASCII_SPACE);
	puts_oled(X18, 2, 0, 1, 1);

	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X21, 2, 0, 1, 1);

	putc_oled(1, ASCII_SPACE);
	puts_oled(X22, 2, 0, 1, 1);

	putc_oled(1, ASCII_UPPER_E);
	puts_oled(X23, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_D);
	puts_oled(X24, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X25, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X26, 2, 0, 1, 1);

	rect_oled(X19 - 4, 2,  9, 9, 0,    1);
	rect_oled(X19 - 3, 2 + 1, 7, 7, 0, 0);
	rect_oled(X19 + 5, 2,  1, 9, 1,    0);

	SSNikolaiCharacterFall();
}

function SSNikolaiCharacterFall() {
	X1--;X2--;X3--;X4--;X5--;X6--;X7--;X8--;X9--;X10--;
	X11--;X12--;X13--;X14--;X15--;X16--;X17--;X18--;X19--;X20--;
	X21--;X22--;X23--;X24--;X25--;X26--;X27--;X28--;
}

function SSNikolaiScreenSaver() {
	line_oled(0, 13, 127, 13, 1, 1);
	rect_oled(0,  0,  15, 14, 1, 0);
	rect_oled(0,  0,  15, 14, 0, 1);

	if(SSNikolaiCountDown < 1000)
	{
    	putc_oled(1, ASCII_DIGIT9);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 1000)
	{
    	putc_oled(1, ASCII_DIGIT8);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 2000)
	{
    	putc_oled(1, ASCII_DIGIT7);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 3000)
	{
    	putc_oled(1, ASCII_DIGIT6);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 4000)
	{
    	putc_oled(1, ASCII_DIGIT5);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 5000)
	{
    	putc_oled(1, ASCII_DIGIT4);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 6000)
	{
    	putc_oled(1, ASCII_DIGIT3);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown > 7000)
	{
    	putc_oled(1, ASCII_DIGIT2);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(SSNikolaiCountDown >= 8000)
	{
    	putc_oled(1, ASCII_DIGIT1);
		puts_oled(4, 3, 0, 1, 1);
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | |S | S | _ | N | i | k | o | l | a | i| |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/