// GPC Online Library
// apex_legends_-_keyboard_&_mouse_(xbox/ps4)_|_autoping_|_norecoil_|_rapifire_.gpc

//**********************//
// Variables ***********//
//**********************//

//DEFAULT BUTTON DEFINITIONS
define My_CONSOLE 	= 0;   	// PS4_PS;       // XB1_XBOX;
define My_SELECT   	= 1;    // PS4_SHARE;    // XB1_VIEW;
define My_START    	= 2;   	// PS4_OPTIONS;  // XB1_MENU;

define My_R1		= 3;	// PS4_R1;		 // XB1_RB;
define My_R2		= 4;	// PS4_R2;		 // XB1_RT;
define My_R3      	= 5;    // PS4_R3;		 // XB1_RS;

define My_L1		= 6;	// PS4_L1;	 	 // XB1_LB;
define My_L2		= 7;	// PS4_L2;		 // XB1_LT;
define My_L3        = 8;	// PS4_L3;		 // XB1_LS;

define My_RX		= 9;    // PS4_RX;       // XB1_RX;
define My_RY		= 10;  	// PS4_RY;       // XB1_RY;

define My_LX    	= 11;  	// PS4_LX;       // XB1_LX;
define My_LY    	= 12;  	// PS4_LY;       // XB1_LY;

define My_UP      	= 13;   // PS4_UP;       // XB1_UP;
define My_DOWN     	= 14;	// PS4_DOWN;     // XB1_DOWN;
define My_LEFT     	= 15;	// PS4_LEFT;     // XB1_LEFT;
define My_RIGHT    	= 16;	// PS4_RIGHT;    // XB1_RIGHT;

define My_TRIANGLE	= 17;  	// PS4_TRIANGLE; // XB1_Y;
define My_CIRCLE   	= 18; 	// PS4_CIRCLE;   // XB1_B;
define My_CROSS    	= 19; 	// PS4_CROSS;    // XB1_A;
define My_SQUARE  	= 20;  	// PS4_SQUARE;   // XB1_X;

//RapidFire and NoRecoil TRUE | FALSE -> Activate | Disable
int RapidFire  = TRUE;
int NoRecoil   = TRUE;

//AntiRecoil config
int VAntiRecoilP = 9;
//AntiRecoil var
int VAntiRecoil  = 0;

//Inventory
int Inventory = FALSE;

int SpeedMove = 6;

int TempX = 0;
int TempY = 0;

//Variables
int TimePing = 0;

//180 Flip setting - Need to be modified (400 for my setting)
int Flip = TRUE;
int FlipSetting = 360;

//Aim Abuse Values
int AutoPing = FALSE;

// Random
int RandRecoil = 0;
int RandFire = 0;

//AimAbuse
int AimAbuseClick = 0;
int AimAbuseTimeMake = 0;
int AimAbuse = FALSE;


//**********************//
// Constructeur ********//
//**********************//
main
{
	//AimAbuse
	if(event_press(My_L2))	
	{
		AimAbuseTimeMake = 1;
		
		AimAbuseClick++;
		
		if(AimAbuseClick >= 2)
		{
			AimAbuseTimeMake = 0;
			AimAbuseClick = 0;
			
			AimAbuse = !AimAbuse;
		}	
	}
	
	if(AimAbuseTimeMake != 0)
	{	
		AimAbuseTimeMake++;
		
		if(AimAbuseTimeMake > 225)
		{
			AimAbuseTimeMake = 0;
			AimAbuseClick = 0;
		}
	}	
	
	if(AimAbuse == TRUE)
	{
	 	if(get_val(My_L2))
	 	{
	 		combo_run(Tap_AimAbuse);
	 	}
	 	
    	if(event_release(My_L2))
    	{ 
    		combo_stop(Tap_AimAbuse);
    	}
	}  
	
	//Roulette	
	if((get_val(My_UP) && get_ptime(My_UP) > 300) || (get_val(My_RIGHT) && get_ptime(My_RIGHT) > 300))
	{
		if(get_val(My_RX) != 0)
		{
			set_val(My_RX, get_val(My_RX) * 3);
		}

		if(get_val(My_RY) != 0)
		{
			set_val(My_RY, get_val(My_RY) * 3);
		}
	}

	if(RandRecoil >= 250)
	{
		RandRecoil = 0;
		RandFire = 0;
	}

	if(RandRecoil >= 0)
	{
		RandRecoil++;
	}
	else
	{
		RandRecoil--;
	}

	RandFire++;
	RandRecoil = RandRecoil * -1;

	//Inventory
	if(event_press(CEMU_EXTRA2))
	{
		Inventory=!Inventory;
	}

	if(!Inventory)
	{
		if(event_release(My_SQUARE) && get_ptime(My_SQUARE) > 600)
		{	
			Inventory = TRUE;
		}
	}

	if(Inventory)
	{
		if(get_val(My_L1) || get_val(My_L2) || get_val(My_L3) || get_val(My_R1) || get_val(My_CIRCLE) || get_val(My_UP) || get_val(My_DOWN) || get_val(My_LEFT) || get_val(My_RIGHT) || (get_val(My_LY) >= 100) || (get_val(My_LY) <= -100) || (get_val(My_LX) >= 100) || (get_val(My_LX) <= -100) || get_val(My_START))
		{
			Inventory = FALSE;
		}

		TempX = get_val(My_RX);
		TempY = get_val(My_RY);

		set_val(My_RX, 0);
		set_val(My_RY, 0);

		set_val(My_LX, (TempX * SpeedMove));
		set_val(My_LY, (TempY * SpeedMove));

		set_val(My_TRIANGLE, 0);

		if(event_press(CEMU_EXTRA4))
		{
			combo_run(ScrollDown);
		}

		if(event_press(CEMU_EXTRA5))
		{
			combo_run(ScrollUp);
		}

		if(event_press(My_R3))
		{
			combo_run(ChangeWeapon);
		}

		if(event_press(My_R2))
		{
			combo_run(PickUp);
		}

		set_val(My_R2, 0);
		set_val(My_R3, 0);
	}

	//Auto ping
	if(AutoPing)
	{
		if(TimePing == 0)
		{
		 	if(event_press(My_R2))
		 	{
				combo_run(AutoPingEnemy);
				TimePing++;
			}
		}
		else if(TimePing < 2500)
		{
			TimePing++;
		}
		else
		{
			TimePing = 0;
		}
	}
	
	//RapidFire	- For throw grenade 
	if(!get_val(CEMU_EXTRA6))	
	{
		if(RapidFire)
		{
			if(get_val(My_R2))
			{
				combo_run(RapidFire);
			}
			else
			{
		        combo_stop(RapidFire);
		    }
		}	
	}
	
	//180 Flip
	if(event_release(CEMU_EXTRA6) && get_ptime(CEMU_EXTRA6) < 125)
	{
		if(Flip == TRUE)
		{		
			combo_run(Tap_Flip);		
		}	
	}	
	
	//NoRecoil	
  	if(NoRecoil)
  	{ 
    	if(get_val(My_R2) && get_val(My_L2))
    	{
        	combo_run(AntiRecoil);
    	}
    	else
    	{
        	combo_stop(AntiRecoil);
    	}

    	if(abs(get_val(My_RY)) > VAntiRecoilP + 1)
    	{
        	combo_stop(AntiRecoil);
    	}
   	}

	//Holdster weapon
	if(event_press(CEMU_EXTRA3))
	{
		combo_run(RangerArme);
	}

	//Shield when down
	if(event_press(CEMU_EXTRA1))
	{
		combo_run(Shield);
	}
	else if(event_release(CEMU_EXTRA1))
	{
		combo_stop(Shield);
	}
}

//**********************//
// Combo Cheat *********//
//**********************//
combo RapidFire
{
	set_val(My_R2, 100);
	wait(55 + RandFire%2);
	set_val(My_R2, 0);
	wait(20 + RandFire%1);
}

combo AntiRecoil
{
	VAntiRecoil = get_val(My_RY) + VAntiRecoilP + RandRecoil%2;

	if(VAntiRecoil > 100)
	{
		set_val(My_RY, 100);
	}
	else if(VAntiRecoil < -100)
	{
		set_val(My_RY, -100);
	}
	else
	{
		set_val(My_RY, VAntiRecoil);
	}
}

combo Tap_AimAbuse 
{
    set_val(My_L2, 100);
    wait(284);
    set_val(My_L2, 0);
    wait(19);
}

//**********************//
// Combo ***************//
//**********************//
combo Tap_Flip
{
	set_val(My_RX, 100);
	wait(FlipSetting);
	set_val(My_RX, 0);
}

combo Shield
{
	set_val(My_R2, 100);
	wait(32767);
}

combo RangerArme
{
	set_val(My_TRIANGLE, 100);
	wait(250);
	set_val(My_TRIANGLE, 0);
}

combo AutoPingEnemy
{
 	set_val(My_R1, 100);
	wait(40);
	set_val(My_R1, 0);

	wait(40);

 	set_val(My_R1, 100);
 	wait(40); 
 	set_val(My_R1, 0);
}

//**********************//
// Combo inventory *****//
//**********************//
combo ScrollDown
{
	set_val(My_RY, -100);
	wait(250);
	set_val(My_RY, 0);
}

combo ScrollUp
{
	set_val(My_RY, 100);
	wait(250);
	set_val(My_RY, 0);
}

combo ChangeWeapon
{
	set_val(My_TRIANGLE, 100);
	wait(40);
	set_val(My_TRIANGLE, 0);
}

combo PickUp
{
	set_val(My_CROSS, 100);
	wait(40);
	set_val(My_CROSS, 0);
}