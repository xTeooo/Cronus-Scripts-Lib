//                :=--:.                                    -=                                                                       
//                =+++++=---.                            .-**:                                                                       
//                =+++++++++++==.                      :=***=                                                                        
//                -++=-++++++==+++=:               :-=*****+                                            .                            
//                :+++.-++++++-.:=+++=:-=-. .:--=+********+....                                     .-+#-                            
//                 -++=.-+++++++-. :=+++**++***********************++=-:.                       .-=*###-                             
//                 .+++= =++++++++-. .:=+************************+==-------::::::......::--=++*#######:                              
// :----::..        =++=.:++++++++++:   =*+*********************************########################*.                               
// .=++-:-=++====+=-=+++..=+++++++++++: .--*********************************#######################=                                 
//   :+=.==-:--:-+-::+++: .=+++++++++++-.  =+*******************************####################*=.                                  
//    .==:+++++- ::+:+++-  -++++++++++++=   -*******************************##################+:                                     
//      :==-+=-=::=+++++-  =++++++++++++.   =*******************************####################*=-:.                                
//        .-== .=++++++++. :=++++=+-==-.    +*****************++++**********##########################+=-:.                          
//          .--:+++++++++-   .::.         .-***+-:...:-+*******+=:   .:-=*#**#############################%##*+==--::.               
//            :++++++++++++=:.... :---:..=+****.        .=*********=:.    .-=*#################################%%#*+-:               
//           ..-++++++++++++++++++++++++**+*****+-:   .==--=**********=.      :+#######################=====--::.                    
//           .+=++++++++++++++++++++++++++*********+=:  :+**=***********=.      .-*#####################=.                           
//            ++++++++++++++++++++++-+++++************+=. -***************=.       -*#####################=.                         
//            =+++++++++=+++:++++++.=+++++***************+:.+***************-        =######################=                        
//            -+++++++++:++= =+++- .+++++++****************+:=**************#*:       .*#########+*###########-                      
//            .+++++++++.++..++-.:=+++++++**********+++******--**********=--=*#+.       =########*.-*##########*:                    
//             :+++++++=.+:.-:.-++++++=+++*********+:.   .:=**+-***********=. .-=        -########-  :+#########%*:                  
//             -+++++++-.:.::=++++++-.=++++***********+-.    :===************-            -########.   .=#######%%%+.                
//             =+++++++.  .=++++++-:-++++****************+:    . +***********#*.  :-       =########.    .=######%%%#+.              
//             ++++=+++  -+++=++=:=---+++===--=************+:  -::**************-  :*=.     *########: .--::*###%%%%%##+:            
//             =+++=:+= =+=:.++- :-++++++++***+:-************- .*+*************##=  .*#+.   :#########- .+##*###%%%%%%%#%*-.         
//             .++++=.-:+.   ++: :---=+++++***+==+*****-.  .:-= :**************###=  .*##=   *#########+  -######%%%%%%%%%%%*=:      
//             -+++++- -:   .++..=++++++++++=:  :=*****-       : **************####-  .###*. +##########+  :#####%%%%%%%%%%%#%%#*=-. 
//              -+++++:-: .:-=:-+=++++++++++**+: -******.     ...+*************####*   =####:=###########=  .####%%%%%%%%%%%##%%%%%%*
//               .=+++:-=-:.:-++++++++++++++****+.=*****+     =  =*************##*-+-  .*####*############:  -%##%%#############*+-. 
//                 -++++--=+++++++++++++++++**++*+.+*****:    =- +*************###+     =###########-#####+   ###%%-                 
//                 :++++=+++++++++++++++++++***:.:=-*****+    ++:************=+####:   =*##########-.######   +##%#*                 
//                 =++++++++++++++++++++++++***+..::******.  .***************= .=##- .++##########*  =#####.  -%####                 
//                .+++++++++++++++++++++++++****- =+******:  +***************=   .*. .############=   =####.  :%##%%:                
//                =++++++++++++++++++++++++++***+ .*******. -***************#:     .--############-    .==:   .##%%%:                
//               :+++++++++++++++++++++++++++****: +*****+ :*****************  -*+.=##############:            ###%%-                
//               =++++++++++++++++++++:.+++++**+=: -*=***-.*****************: -###++##############:            ###%%=                
//              :++++++++++++++++++++:.=+++==******+:+***:+****************- -#*###*##############:   ==       *###%+                
//              =+++++++++++++++++++:-+++-.  :+***- =***+-****************= -***#######+##########.   ##*.     +##%#*                
//             :+++++++++++++++++++:=++=.     +*+. -****++***************: -****######*-##########   .####=    :%###*                
//             +++++++++++++++++++-+++:      .+*+.:***********+********+.:+******#####:-#########+   :######=: .#####                
//            .-==+++++++++++++++=++=.      :+*+:-***********=.****.+*: =********####* :#########.   -########*-####%:               
//            =+++=++=+++++++++=+++-      .=++-.--:+********-  +**. :.:**********####- .*#######-    +##############%=               
//            .=+=+:=:+++++++--+++:     .-+++--== =**+*****= : -*..+.-*********#*####:  :######-    .#################               
//              .:---.===---=+++-.     -+++++***:-*=.+****+ -* .- +***********=.*####:   :+*+-.     =###############%%:              
//                                   -++++++++*+.+: :****+.-**.-+=**********-  -##=+#+             :#####.:*#######%%%+              
//                                 :+++++++++**-:.  =***+.-***+***********=    =*#. =#:           :#####-   .=*####%###.             
//                                -++--+++++++*-=+- +**+.-***************:     -**   **.         -#####+       .-=*#%%%-             
//                               --. -++++++++****: +*+.-***************:  .+: -#: =-=#*.       =#####+             .:--             
//                              .  .++++=+++++****..*+.-***************:  .*#: =+ =##+##+      =#####+                               
//                                :=-:. :+++++****.:=.=**-************:  -**#. +.=###*###:   .+#####=                                
//                                     .+++++++***:..+**+ -**********: .+**** :.=###-=###=  .*#####:                                 
//                                     =+++++++***- =****. .+******+. -**-**+  +#**: *###+ .*####+.                                  
//                                     +++++++****+=*****:   =****= .+**.+**:.+**+. .####*.*###*:                                    
//                                    .++++++-=**********-   :**+: -**+.:***:***-   =########*:                                      
//                                    :++++-  :******=--*=   :*- :+**= .******=.   :#######+:                                        
//                                    -++=.   .***=:   :*=   :.:+***:  +****+.     *####+-.                                          
//                                    =+.      +-.     -*=   .=***=.  =***+:      +##+-.                                             
//                                    =.               +*- .=***+:   =**=:      .++-.                                                
//                                   .                :**:=***+:    =*=.      .::                                                    
//                                                   .+*****+:     ::                                                                
//                                                  .+****=:                                                                         
//                                                 .+**+-.                                                                           
//                                                :++-.                                                                              
//                                              .--.                                                                                 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
//#######################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
const image WOLF2 = {128, 63, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x2C, 0x0F, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x80, 0x00, 0x3F, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x90, 0xC0, 0x00, 0x0F, 0xE0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x90, 0x60, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x10, 0x30, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x18, 0x10, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1, 0x88, 0x18, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x08, 0x18, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x08, 0x38, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x0F, 0xF1, 0xC0, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x03, 0x01, 0xE0, 0x70, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0xC0, 0x3C, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x20, 0x1E, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x10, 0x0F, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x80, 0x08, 0x07, 0x80, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x05, 0x80, 0x00, 0x03, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x40, 0x09, 0xC1, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x1C, 0x00, 0x38, 0x07, 0xE0, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x18, 0x00, 0x0C, 0x03, 0xE0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x10, 0x00, 0x06, 0x03, 0x70, 0x60, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x01, 0x00, 0x04, 0x01, 0x30, 0x40, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x2D, 0x00, 0x10, 0x00, 0x90, 0x20, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x39, 0x02, 0x3E, 0x00, 0x80, 0x20, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x18, 0x02, 0x1E, 0x00, 0xC0, 0x10, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0C, 0x00, 0x1E, 0x00, 0x40, 0x10, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x08, 0x00, 0xC0, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x08, 0x00, 0xC0, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x08, 0x04, 0x80, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x08, 0x06, 0x81, 0x88, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x08, 0x07, 0x01, 0xD8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x04, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x20, 0x00, 0x00, 0x01, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x08, 0x01, 0xB8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0C, 0x80, 0x00, 0x01, 0x98, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x1D, 0x00, 0x10, 0x01, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x38, 0x00, 0x20, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x78, 0x04, 0x00, 0x41, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x73, 0x04, 0x80, 0x43, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xE0, 0x02, 0x00, 0x47, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xC0, 0x82, 0x04, 0x7F, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0x80, 0x0C, 0x7E, 0x30, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x80, 0x1D, 0x3E, 0x38, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x40, 0x80, 0x15, 0x3C, 0x3E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x34, 0x18, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x20, 0x00, 0x24, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x80, 0x44, 0x10, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x90, 0x44, 0x11, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x18, 0x81, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x09, 0x01, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC4, 0x0A, 0x43, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCC, 0xCC, 0x46, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xC8, 0x8E, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0x9C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

const image WOLF1 = {128, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5D, 0xC1, 0xF0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7F, 0xFF, 0x80, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x3F, 0xFF, 0xC0, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x9F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xEF, 0xCF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xA7, 0xE7, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x67, 0xE7, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xE7, 0xE7, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x07, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x0E, 0x3E, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0xFE, 0x1F, 0x8F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x3F, 0xC3, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xDF, 0xE1, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xEF, 0xF0, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFB, 0x7F, 0xFF, 0xF8, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFA, 0x7F, 0xFF, 0xFC, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0xFF, 0x9F, 0xF6, 0x3E, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE3, 0xFF, 0xC7, 0xF8, 0x1E, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE7, 0xFF, 0xE1, 0xFC, 0x1F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0x7F, 0xF1, 0xFC, 0x8F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0x7F, 0xFB, 0xFE, 0xCF, 0xBF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC2, 0xFF, 0xE5, 0xFF, 0x6F, 0xDF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC2, 0xF9, 0xC1, 0xFF, 0x7F, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xFD, 0xE1, 0xFF, 0x3F, 0xEF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xE1, 0xFF, 0x3F, 0xEF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE1, 0xFF, 0x3F, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0xF3, 0xFF, 0x3F, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0xF7, 0xFB, 0x7E, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0xF7, 0xF9, 0x7E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0xF7, 0xF8, 0xFE, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0xFF, 0xFB, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDF, 0xFF, 0xF7, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xBF, 0xFF, 0xF7, 0xFE, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xE3, 0x7F, 0xFF, 0xFE, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC2, 0xFF, 0xEF, 0xFE, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC2, 0xFF, 0xDF, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x87, 0xFB, 0x3F, 0xBE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x0C, 0xFA, 0x7F, 0xBC, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x1F, 0xF0, 0xFF, 0x98, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7D, 0xFB, 0x80, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7F, 0xF3, 0x81, 0xCF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7F, 0xE2, 0xC1, 0xC7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x5F, 0xE2, 0xC3, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0xCB, 0xE3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x3F, 0xDB, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x6F, 0xBB, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x67, 0xBB, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE7, 0x7E, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE6, 0xFE, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xE5, 0xBC, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0xB8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x27, 0x71, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};




const int16 pic_w_rifle[] = {127, 44, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0004, 
     0x0000, 0x0000, 0x0000, 0x0008, 0x0000, 0x0000, 0x0000, 0x001C, 0x0000, 0x0000, 0x0000, 0x003D, 0xFFFE, 
     0x0000, 0x0000, 0x0078, 0x0000, 0x0000, 0x0000, 0x00FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFC, 0x0000, 0x0000, 
     0x0000, 0x01FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFF8, 0x0000, 0x0000, 0x0000, 0x1FFF, 0xFFFF, 0xFFFF, 0xFFFF, 
     0xFFF0, 0x01FF, 0xF8FE, 0x001F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFBFF, 0xFFFF, 0xFFFF, 
     0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF3FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFE00, 0x0C00, 
     0x07FF, 0xFFFF, 0xFFFF, 0xFFFF, 0x87FF, 0xFFFF, 0x0000, 0x0000, 0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x001C, 
     0x7000, 0x0000, 0x0000, 0x1FFF, 0xFFF0, 0x03FF, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x3FFF, 0xFF00, 
     0x03FC, 0x3FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xF000, 0x0FE8, 0x3FF8, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x7FFF, 0x8000, 0x3FC0, 0x3FF0, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFF8, 0x0000, 0xFF00, 0x7FE0, 
     0x0000, 0x0000, 0x0000, 0x0001, 0xFFC0, 0x0003, 0xFC00, 0xFFC0, 0x0000, 0x0000, 0x0000, 0x0003, 0xFC00, 
     0x000F, 0xF001, 0xFF80, 0x0000, 0x0000, 0x0000, 0x0007, 0xC000, 0x003F, 0xC003, 0xFF00, 0x0000, 0x0000, 
     0x0000, 0x000E, 0x0000, 0x00FF, 0x8007, 0xFE00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FE, 0x000F, 
     0xFC00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0078, 0x001F, 0xF800, 0x0000, 0x0000, 0x0000, 0x0000, 
     0x0000, 0x0030, 0x003F, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x007F, 0x0000, 0x0000, 
     0x0000, 0x0000, 0x0000};
     

const int16 pic_shotty[] = {122, 50, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FF, 0xF000, 0x3E00, 0x0000, 0x0000, 0x0000, 0x0100, 
   0x000F, 0xFFFF, 0xFFEF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF000, 0x1FFF, 0xFFFF, 0xFBFF, 0xFFFF, 0xFFFF, 
   0xFFFF, 0xFFFC, 0x003F, 0xFFFF, 0xE000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF00, 0x3FFF, 0xFFFF, 0xFFFF, 
   0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC03F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF1FF, 0xFC00, 0x3FFF, 
   0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFC, 0x7FF3, 0xB81F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF1F, 
   0xFCEF, 0x3FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC7FF, 0x3B8F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
   0xFFFF, 0xFFF1, 0xFFCE, 0x43FF, 0xFB0F, 0xC000, 0x0000, 0x000F, 0xFFFF, 0xF000, 0x0000, 0xFBFE, 0x83C0, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003E, 0x7F80, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x001F, 0xE000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07F8, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0003, 0xFC00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FE, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7F00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F, 
   0xE000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0FF8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0007, 0xFC00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01FE, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x7F80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000F, 0xE000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03FC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x7F00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};



 const int16 pic_sniper[] = {126, 53, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0xFF91, 0xE07E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0003, 0xFFFF, 0xFFF8, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x000F, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F, 
    0xFFFF, 0xFF80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FF, 0xFFFF, 0xFE00, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0xE038, 0xF800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x003F, 0xFFFC, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x07FF, 0xFFFF, 0xC000, 0x0000, 0x0000, 0x0000, 0x0FFF, 0xFF00, 
    0x7FFF, 0xFFFF, 0xAAC0, 0x0000, 0x003F, 0xFFE8, 0x7FFF, 0xFF01, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
    0xFFF1, 0xFFFF, 0xFF87, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFC7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
    0xFFFF, 0xFFFF, 0xFFFF, 0xFF1F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0x0000, 0x3FFF, 0xFC3F, 0xFFFF, 
    0xFFFF, 0xFFFF, 0xFFFF, 0xFFF8, 0x0000, 0x0000, 0x00FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 
    0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xFE00, 0x0000, 0x0000, 0x0FFF, 0xFFFF, 0xFFFF, 0xFFF8, 
    0x0F00, 0x0000, 0x0000, 0x0000, 0x3FFF, 0xFFE3, 0xFB3F, 0xF800, 0x3C00, 0x0000, 0x0000, 0x0000, 0xFFF0, 
    0x000F, 0xFFFF, 0xE000, 0xF000, 0x0000, 0x0000, 0x0003, 0xFF80, 0x007F, 0xFFFF, 0x8003, 0xC000, 0x0000, 
    0x0000, 0x000F, 0xFE00, 0x01FC, 0x07FE, 0x000F, 0x0000, 0x0000, 0x0000, 0x001F, 0xF000, 0x0FF0, 0x1FF8, 
    0x003C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FC0, 0x03E0, 0x00F0, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0001, 0xFE00, 0x0000, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0xF000, 0x0000, 0x0700, 0x0000,
    0x0000, 0x0000, 0x0000, 0x003F, 0xC000, 0x0000, 0x1C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x007F, 0x0000, 
    0x0000, 0x7000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FC, 0x0000, 0x0001, 0xC000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0060, 0x0000, 0x0007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x001C, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0078, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0700, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x1C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0003, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0007, 0x0000, 0x0000, 0x0000, 0x0000};


 const int16 pic_smg[] = {99, 50, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0200, 0x0000, 
0x0000, 0x0008, 0x0000, 0x0000, 0x00E0, 0x0000, 0x0000, 0x000F, 0xC000, 0x0000, 0x001C, 0x0000, 0x0000, 0x0001, 
0xF800, 0x0000, 0x0003, 0x8000, 0x0000, 0x000F, 0xFFFF, 0xFFFF, 0xFFFD, 0xF000, 0x0000, 0x0003, 0xFFFF, 0xFFFF, 
0xFFFF, 0xFE00, 0x0000, 0x000F, 0x7FFF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 0x0001, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFF8, 
0x0000, 0x0000, 0x7FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF000, 0x0000, 0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF00, 0x0000, 
0x01FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 0x001F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF00, 0x0000, 0x0003, 0xFFFF, 
0xFFFF, 0xFFFF, 0xF000, 0x0000, 0x0000, 0x7FFF, 0xFFFF, 0xFBFC, 0x0000, 0x0000, 0x0000, 0x0FFF, 0xFFFF, 0xFF00, 
0x0000, 0x0000, 0x0000, 0x03C0, 0x0FFF, 0xFFE0, 0x0000, 0x0000, 0x0000, 0x0078, 0x00FF, 0xFFFC, 0x0000, 0x0000, 
0x0000, 0x000F, 0x001F, 0xFFFF, 0xC000, 0x0000, 0x0000, 0x0001, 0xE003, 0xFE1F, 0xF800, 0x0000, 0x0000, 0x0000, 
0x3C00, 0xFEC6, 0x9F00, 0x0000, 0x0000, 0x0000, 0x0700, 0x3FC8, 0xC3E0, 0x0000, 0x0000, 0x0000, 0x00E0, 0x07FF, 
0xB07E, 0x0000, 0x0000, 0x0000, 0x0000, 0x01FF, 0xFE0F, 0xC000, 0x0000, 0x0000, 0x0000, 0x007F, 0x8000, 0xF800, 
0x0000, 0x0000, 0x0000, 0x000F, 0xF000, 0x1F80, 0x0000, 0x0000, 0x0000, 0x0003, 0xFE00, 0x03F0, 0x0000, 0x0000, 
0x0000, 0x0000, 0x7F80, 0x003E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0FF0, 0x0007, 0xE000, 0x0000, 0x0000, 0x0000, 
0x007C, 0x0000, 0x7C00, 0x0000, 0x0000, 0x0000, 0x0003, 0x8000, 0x0FC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
0x01F8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x001F, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0xF800, 
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3F00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0000, 0x0000, 
0x0000, 0x0000, 0x0000, 0x0060, 0x0000, 0x0000};

int __pic_smgX, __pic_smgX2, __pic_smgY, __pic_smgY2, __pic_smgBit, __pic_smgOffset, __pic_smgData;

const int16 pic_w_pistol[] = {95, 48, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000C, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2BFF, 0xF800, 0x0000, 
    0x7FFC, 0x0000, 0x0000, 0x17FF, 0xF000, 0x0000, 0xFFFA, 0x0000, 0x0000, 0x0FFF, 0xF000, 0x0001, 0xFFF4, 0x0000, 
    0x0000, 0x1FFF, 0xFFFF, 0xFFFF, 0xFFE8, 0x0000, 0x0000, 0x1FFF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 0x0000, 0x1FFF, 
    0xFFFF, 0xFFFF, 0xFF80, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0xFFFF, 0xFFFF, 0xFFFF, 
    0xF000, 0x0000, 0x0003, 0xF87F, 0xFFFF, 0xFFFF, 0xC000, 0x0000, 0x0003, 0xE01E, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0007, 0xC019, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0007, 0x0074, 0x8180, 0x0000, 0x0000, 0x0000, 0x000E, 0x00DB, 
    0x0300, 0x0000, 0x0000, 0x0000, 0x001C, 0x03B3, 0x0400, 0x0000, 0x0000, 0x0000, 0x0030, 0x0672, 0x1000, 0x0000, 
    0x0000, 0x0000, 0x00E0, 0x0DFE, 0xC000, 0x0000, 0x0000, 0x0000, 0x0180, 0x3380, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0300, 0x6C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0E01, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1803, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x7006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xE018, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0001, 0x8030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0007, 0x00E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x000C,
    0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0018, 0xC300, 0x0000, 0x0000, 0x0000, 0x0000, 0x0071, 0xC600, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x00C1, 0x0C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x3800, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0780, 0x7000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07F9, 0xE000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03FF, 
    0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00FF, 0x0000, 0x0000, 0x0000};

int __pic_w_pistolX, __pic_w_pistolX2, __pic_w_pistolY, __pic_w_pistolY2, __pic_w_pistolBit, __pic_w_pistolOffset, __pic_w_pistolData;


const int16 pic_w_assault[] = {128, 53, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x03F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07FF, 0xF800, 0x0000, 0x0000, 
      0x0800, 0x0000, 0x0000, 0x0000, 0x07FF, 0xFFFF, 0x0000, 0x0000, 0x1C00, 0x0000, 0x0000, 0x0000, 0x07FF, 0xFFFF, 
      0x8000, 0x0000, 0x3E00, 0x0000, 0x0000, 0x0000, 0x0FF8, 0x0001, 0x8000, 0x0000, 0x7E00, 0x0000, 0x0000, 0x0000, 
      0x0FFC, 0x0003, 0x8000, 0x0000, 0x6E00, 0x0000, 0x0000, 0x0000, 0x1FFF, 0xFFFF, 0x8000, 0x0000, 0xCE00, 0x0000, 
      0x0000, 0x0000, 0x7FFF, 0xFFFF, 0x87FF, 0xFFFD, 0x8600, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xFFFF, 0xFFFF, 0xFFFF, 
      0xC600, 0x0000, 0x7FFF, 0xFFFB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFE00, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
      0xFFFF, 0xFFFF, 0xFE00, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
      0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x7FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
      0x7FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF00, 0x0000, 0x7FFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
      0x8700, 0x0000, 0x7FFF, 0xFFF9, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0x0000, 0x0000, 0x7FFF, 0xFF01, 0xFFFF, 0xFFFF, 
      0x0FFF, 0xFFFC, 0x0000, 0x0000, 0x7FFF, 0xFF01, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xFF00, 
      0x3FFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FFF, 0xFF00, 0x1FFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x7FFF, 0xF800, 0x1FF0, 0x3FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FFE, 0x3000, 0x1FE0, 0x1FFF, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x7FBC, 0x0000, 0x3FE0, 0x1FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x7FB8, 0x0000, 0x3FF0, 0x1FFE, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x7F00, 0x0000, 0x7FFF, 0xFFFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x3E00, 0x0000, 
      0xFF80, 0x0FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C00, 0x0000, 0xFF80, 0x0FFE, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x3C00, 0x0001, 0xFF00, 0x0FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C00, 0x0003, 0xFF80, 0x0FFE, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x3E00, 0x0003, 0xFF00, 0x0FFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0600, 0x0007, 0xFC00, 0x0FFF, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000F, 0xFC00, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x000F, 
      0xF800, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x001F, 0xF800, 0x07FF, 0x8000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x001F, 0xF000, 0x07FF, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0xF800, 0x07FF, 0x8000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x0000, 0x1000, 0x03FF, 0x8000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03FF, 
      0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03FF, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x01FF, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x01FE, 0x0000, 0x0000, 0x0000, 0x0000, 
      0x0000, 0x0000, 0x0000, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000};

int __pic_w_assaultX, __pic_w_assaultX2, __pic_w_assaultY, __pic_w_assaultY2, __pic_w_assaultBit, __pic_w_assaultOffset, __pic_w_assaultData;
int __pic_drivingX, __pic_drivingX2, __pic_drivingY, __pic_drivingY2, __pic_drivingBit, __pic_drivingOffset, __pic_drivingData;


const int16 pic_driving[] = {96, 55, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
   0x0000, 0x7FFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xC000, 0x0000, 0x0000, 0x0001, 0xE000, 0x4003, 
   0xE000, 0x0000, 0x0000, 0x0003, 0xC000, 0x4000, 0xE000, 0x0000, 0x0000, 0x0003, 0x8707, 0xFC00, 0x6000, 0x0000, 0x0000, 
   0x0003, 0x0F80, 0x0000, 0x7000, 0x0000, 0x0000, 0x0007, 0x0F80, 0x0000, 0x3000, 0x0000, 0x0000, 0x0006, 0x0F80, 0x0000, 
   0x3000, 0x0000, 0x0000, 0x0006, 0x0700, 0x0000, 0x3800, 0x0000, 0x0000, 0x000E, 0x0000, 0x0000, 0x1800, 0x0000, 0x0000, 
   0x000C, 0x0000, 0x0000, 0x1800, 0x0000, 0x0000, 0x000C, 0x3FE0, 0x03FE, 0x1C00, 0x0000, 0x0000, 0x1C1C, 0x7FF0, 0x07FF, 
   0x1C3E, 0x0000, 0x0000, 0x7E1C, 0x7FF0, 0x07FF, 0x1C7F, 0x0000, 0x0000, 0x7F1C, 0x7FF0, 0x07FF, 0x1CFF, 0x0000, 0x0000, 
   0x7FFF, 0xFFF8, 0x0FFF, 0xFFFE, 0x0000, 0x0000, 0x01FF, 0xFFFF, 0xFFFF, 0xFF80, 0x0000, 0x0000, 0x00FF, 0xFFFF, 0xFFFF, 
   0xFF80, 0x0000, 0x0000, 0x01FF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 0x0000, 0x01FF, 0xFFFF, 0xFFFF, 0xFFC0, 0x0000, 0x0000, 
   0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 
   0xFFE0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x03C0, 0x3FFF, 0xFFFE, 0x01E0, 0x0000, 0x0000, 
   0x03C0, 0x3FC0, 0x01FE, 0x01E0, 0x0000, 0x0000, 0x03CF, 0x3F80, 0x00FE, 0x79E0, 0x0000, 0x0000, 0x03CF, 0x3F00, 0x00FE, 
   0x79E0, 0x0000, 0x0000, 0x03CF, 0x3F00, 0x00FE, 0x79E0, 0x0000, 0x0000, 0x03CF, 0x3F00, 0x00FE, 0x79E0, 0x0000, 0x0000,
   0x03CF, 0x3F00, 0x00FE, 0x79E0, 0x0000, 0x0000, 0x03C0, 0x3F00, 0x00FE, 0x01E0, 0x0000, 0x0000, 0x03C0, 0x3F80, 0x00FE, 
   0x01E0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 
   0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x03FF, 0xFFFF, 0xFFFF, 0xFFE0, 0x0000, 0x0000, 0x01FF, 0xFFFF, 0xFFFF, 
   0xFFC0, 0x0000, 0x0000, 0x00FF, 0xFFFF, 0xFFFF, 0xFF80, 0x0000, 0x0000, 0x000F, 0xF000, 0x0007, 0xF800, 0x0000, 0x0000, 
   0x000F, 0xF000, 0x0007, 0xF800, 0x0000, 0x0000, 0x000F, 0xF000, 0x0007, 0xF800, 0x0000, 0x0000, 0x000F, 0xF000, 0x0007, 
   0xF800, 0x0000, 0x0000, 0x000F, 0xF000, 0x0007, 0xF800, 0x0000, 0x0000, 0x000F, 0xF000, 0x0007, 0xF800, 0x0000, 0x0000, 
   0x0007, 0xF000, 0x0007, 0xF000};
//#######################################################################################################################
//########################################################################################################################## 
//Button mapping identifiers:
// https://cronusmax.com/manual/identifiers.htm?ms=IwAAACAAAAAQAgQQ&st=MA%3D%3D&sct=NDUxLjIwMDAxMjIwNzAzMTI1&mw=MzIw
//########################################################################################################################## 
define BTN_MASTER        = PS4_PS;  // [Choice:Button] 
define BTN_OLED_CAT_UP   = PS4_UP;
define BTN_OLED_CAT_DOWN = PS4_DOWN;
define BTN_OLED_NEXT     = PS4_RIGHT;
define BTN_OLED_PRE      = PS4_LEFT;
define BTN_MODS_DISABLE  = PS4_OPTIONS; // [Choice:Button] (The button that disables all mods when double tapped)
//########################################################################################################################## 
define INTVERTED_RECOIL   = 1;  //ITzSNACK'S INVERTED RECOIL METHOD ( IF INVERTED SET TO  -1  INSTEAD OF  1 )
//########################################################################################################################## 
define GAME_FIRE_BUTTON         = PS4_R2;
define GAME_AIM_BUTTON          = PS4_L2;
define WEAPON_CHANGE_BUTTON     = PS4_TRIANGLE;
define no_timed_sticky_button_1 = PS4_TRIANGLE; // AUTO SHIELD ( STICKY BUTTON ONE )
//########################################################################################################################## 
define ADS                      = PS4_L2;
define AIM_H                    = PS4_RX;
define AIM_V                    = PS4_RY;
define STRAFE                   = PS4_LX; 
define HOME                     = PS4_PS;
//########################################################################################################################## 
define no_timed_sticky_button_2  = PS4_SQUARE; 
define ENABLED_WHEN_SHOOTING     = PS4_R2;
int RELOAD_COMBO_BUTTON          = PS4_SQUARE;
int HEADSHOT_STICK               = PS4_RY;

//###########################################################################################################################
/*
HOLD PS BUTTON 

BASIC ANTIRECOIL PROFILES
DOWN - LOW RECOIL
LEFT - MED RECOIL
UP   - HIGH RECOIL
RIGHT - HUGE RECOIL


BASIC RAPIDFIRE ANTIRECOIL PROFILES
A - LOW RECOIL + RF
X - MED RECOIL + RF
Y - HIGH RECOIL + RF
B - HUGE RECOIL + RF


FIRST:
HOLD PS BUTTON  + Tap OPTIONS 
LET GO OF TOUCH AND TAP OPTIONS
LEFT AND RIGHT WILL GIVE YOU EACH WEAPON 
UP AND DOWN WILL CYCLE THROUGH GUNS SMG,PISTOLS,SNIPERS ETC
HOLD L1 TAP PS4_CROSS =  SET FIRST PLAYER WEAPON,

SECOND:
HOLD PS BUTTON + Tap OPTIONS 
LET GO OF TOUCH AND TAP OPTIONS
LEFT AND RIGHT WILL GIVE YOU EACH WEAPON 
UP AND DOWN WILL CYCLE THROUGH GUNS SMG,PISTOLS,SNIPERS ETC
HOLD R1 TAP PS4_CROSS =  SET SECOND PLAYER WEAPON,

THIRD:
CROSS  = TO SET CURRENT PLAYER WEAPON
CIRCLE = CLOSE MANUAL SELECT MODE AND USE PROFILES
OPTIONS = RETURN TO PLAYER MODE SLOT MODE 2
PS BTN = DOUBLE TAP SAVE RUN 

CAR MODE 
PS4_TOUCHPAD AND L1 TRIANGLE TO GO BACK 

LS = Sprint , LS Again = Super Sprint , LS after those LS's will result in a slide....
LT + Left = Aim Left
LT + Right = Aim Right
LT + Down = Aim Up

LT + RT , R1 = Aim Up slightly

ADD MORE STICKY 
L2 AND SQUARE

ZF_BlockAll
DOUBLE TAP PS4_TOUCH PAD = THIS WILL KILL EVERYTHING YOU WILL NOT BE ABLE TO DO ANYTHING 

FAST CHANGE OF WEAPON
L1 & L1 & R1

FAST RELOAD 
DOWN ON THE DPAD TWICE

AIM TIME TRACKING
L2 AND SHOOT WITH R1 OR L1
SHOOT TIME TRACKING
R2

AIM_NUDGE
L2 LEFT RIGHT DOWN UP
HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT
LEFT RIGHT UP DOWN

MONEY DROP
L2 RIGHT RIGHT WARZONE ONLY 
reset PS BTN

MANTLE
L3 & CROSS

CLIMB 
L3 L3 CROSS



HOLD PS BUTTON 

[ all ]  - PS4_SQUARE:     AMAX  +  FR556;
[ all ]  - PS4_CIRCLE:     DULIES + DULIES
[ all ]  - PS4_CROSS:      AK47  + SHOTGUN;
[ all ]  - PS4_TRIANGLE:   KILO  + DULIES;
[ all ]  - PS4_UP:         FAL   +  FR5;
[ all ]  - PS4_DOWN:       Prototype + Rocky CB
[ all ]  - PS4_LEFT:       X16 + DULIES
[ all ]  - PS4_RIGHT:      B Stare + Turbo
[ all ]  - PS4_L1:         kilo truce + kilo truce
[ all ]  - PS4_OPTIONS:       kilo truce + CoCo
[ all ]  - PS4_L3:         kilo truce + kilo truce
[ all ]  - PS4_R3:         kilo heat + kilo heat
 
HOLD XBOX HOME 

[ all ]  - R1 + PS4_SQUARE:        AK47 + SHOTGUN;
[ all ]  - R1 + PS4_CIRCLE:        KILO + MWMP;
[ all ]  - R1 + PS4_TRIANGLE:      BULLFROG + KILO;
[ all ]  - R1 + PS4_OPTIONS:       FAL + LMG;
[ all ]  - R1 + PS4_PS :           SMG + RPG; 
//##########################################################################################################################
//########################################################################################################################## */
define WEAPON_CAT_START_0 = 0;

define WEAPON_CAT_START_1 = 5;

define WEAPON_CAT_START_2 = 8;

define WEAPON_CAT_START_3 = 11;

define WEAPON_CAT_START_4 = 12;

define WEAPON_CAT_START_5 = 11;

define WEAPON_CAT_START_6 = 18;

define WEAPON_CAT_START_7 = 20;

const string WEAPON_1 =  "AK47"
const string WEAPON_2 =  "FR556"
const string WEAPON_3 =  "KILO"
const string WEAPON_4 =  "BULL"
const string WEAPON_5 =  "M13"
const string WEAPON_6 =  "MP4"
const string WEAPON_7 =  "FAL"
const string WEAPON_8 =  "FR5"
const string WEAPON_9 =  "ISO"
const string WEAPON_10 = "MAC10"
const string WEAPON_11 = "GRAU"
const string WEAPON_12 = "KRIG"
const string WEAPON_13 = "FFAR"
const string WEAPON_14 = "DULIES RF"
const string WEAPON_15 = "DULIES"
const string WEAPON_16 = "PISTOL"
const string WEAPON_17 = "RPG"
const string WEAPON_18 = "Turbo"
const string WEAPON_19 = "SMG"
const string WEAPON_20 = "LMG"
const string WEAPON_21 = "LOW REC"
const string WEAPON_22 = "MEDIUM REC"
const string WEAPON_23 = "HIGH REC"
const string WEAPON_24 = "SUPER REC"
const string WEAPON_25 = "LOW RF"
const string WEAPON_26 = "MED RF"
const string WEAPON_27 = "HIGH RF"
const string WEAPON_28 = "SUPER RF"
const string WEAPON_29 = "RAPID FIRE"
//#######################################################################################################################

//==SPECIAL BUTTON CONFIGERATION DONT TOUCH BELOW==\\
define ON_CUSTOM = 2;
define ON = 1;
define OFF= 0;
define ENABLED  = 1;
define DISABLED = 0; 
//==SPECIAL BUTTON CONFIGERATION DONT TOUCH==\\ 
define TUNER_SLOT                = 7;
define OTHER_CHOOSER             = 5;
define ENABLED_WHEN_ADS          = 3;
define ENABLED_WHEN_ADS_SHOOTING = 4;
define ENABLED_WHEN_HIPSHOOTING  = 5;
//###########################################################################################################################
define WP_PRIMARY =1;
define WP_SEC     =2;
define WP_NONE    =0;
define WP_VEHICLE =50;  
//###########################################################################################################################
define SI_STARTER_PISTOL   = 17;  
define SI_DULIES           = 13;  
define HEADSHOT_EARLY_EXIT = 200;
define X_FLICK_RECORD      = 100;
define HEADSHOT_SET_TIME   = 1000;
define DEF_RF_HOLDTIME     = 49;
define DEF_RF_RELEASETIME  = 40;
define dropshot_length     = 1300;
//###########################################################################################################################
define CUSTOM_Y_DEADZONE    = 11;
define CUSTOM_Y_DEADZONE_AR = 11;
define SM_TIMED_SHOT        = 1;
define SM_RECOIL            = 2;
define MODE_RANGE           = 1;
define SM_AKIMBO            = 4;
define WEAPON_BUTTON_CHANGE_UNDERPRESS = 300;
define HIPFIRE_RECOIL_DEVISION = 2;
//###########################################################################################################################
define NO_STICKWHENOVER_TIME_1  = 450;
define NO_DESIRED_STICK_TIME_1  = 9000;
define NO_DESIRED_STICK_TIME_2  = 1297; 
define NO_STICKWHENOVER_TIME_2  = 1; 
//###########################################################################################################################
define activate_sprint_extra=500;
define slideincreese       =300;
define OLED_GUI_LOADOUT    = 1;
define OLED_GUI_STATE      = 2;
define Get_Last_Value      = 0;
define Get_Current_Value   = 1;
define Aim_Correction      = 2;
define Aim_Boost           = 3;
define Aim_Perfection_Limit= 60;
define WIGGLE_POWER       = -20;// SOMETHING SPECIAL LOL \\
//########################################################################################################################## 
int A_PRESSED_IN_LS = 0;
int WEAPON_BASED_MODBLOCK = 0;
int sprint_block = 0;
//###########################################################################################################################
int X_FLICK_TIME = 200;
int X_FLICK_TRACKING= 0;
int X_FLICK_RESTING = 1;
int X_HAS_RESTED    = 0;
//###########################################################################################################################
int POINT_DIR_UP_V;
int POINT_DIR_UP_D    =-10;
//###########################################################################################################################
int HEADSHOT_TIME;
int HEADSHOT_IN_Y    = 0;
//###########################################################################################################################
int STRAFE_POWER     =-35;
int STRAFE_AMOUNT;
int STRAFE_TIME;
int STRAFE_TIME_MAX = 300;
//###########################################################################################################################
int PUSH_OUT_OF_RECOIL_TIME;
int PUSH_OUT_OF_RECOIL_AMOUNT;
int PRI_STRING;
int SEC_STRING;
int RUMBLE_I;
int RUMBLE_S;
int RUMBLE_T;
int tval;
int runtime;
int LAST_WEAPON;
int reminder_rumble;
int right_rumble;
//###########################################################################################################################
int CARRIED_OPEN_STATE;
int ALT_CHOOSING;
int CAN_CHOOSE;
int STICKY_AIM_TIME=0;
int CYCLE_SET_SLOT;
int CYCLE_SET_INDEX;
int MANUAL_CYCLE;
int LAST_DRAWN_WEAPON;
int f_tval;
//###########################################################################################################################
int PRIMARY_SHOOTING_METHOD=2;
int PRIMARY_END_TIME_1=1000;
int PRIMARY_MAX_1=10;
int PRIMARY_END_2=2000;
int PRIMARY_MAX_2=10;
int PRIMARY_PRESSURE=20;
int PRIMARY_RF=0;
int PRIMARY_PINGSHOT_GAP=150;
int PRIMARY_RECOIL_DIFFUSE_TIME=120;
//###########################################################################################################################
int PRI_EXTRA_1;
int PRI_EXTRA_2;
int PRI_EXTRA_3;
int PRI_EXTRA_4;
//###########################################################################################################################
int SEC_EXTRA_1;
int SEC_EXTRA_2;
int SEC_EXTRA_3;
int SEC_EXTRA_4;
//###########################################################################################################################
int SEC_SHOOTING_METHOD=150;
int SEC_END_TIME_1=1250;
int SEC_MAX_1=7;
int SEC_END_2=2000;
int SEC_MAX_2=44;
int SEC_PRESSURE=0;
int SEC_RF=0;
int SEC_PINGSHOT_GAP=341;
int SEC_RECOIL_DIFFUSE_TIME=120;
//###########################################################################################################################
int H_AR_START=0;
int H_AR_END=0;
int H_AR_AMOUNT=0;
//###########################################################################################################################
int RECOIL_1_HANG_TIME = 0;
int PLAYER_RECOIL_TIME;
int OLDED_OVERWRIDE    = 0;
int DRAW_RECOIL        = 1; 
int rf_h_time          =40;
int rf_r_time          =40;
int SLOT_MODE_LAST     = 2;
int dropshot           = 0;
//###########################################################################################################################
int time_to_DblClick_disable=0;
//###########################################################################################################################
int ZEN_EXTRA_1;
int ZEN_EXTRA_2;
int ZEN_EXTRA_3;
int ZEN_EXTRA_4;
//###########################################################################################################################
int RECOIL_DIFFUSE_TIME=200;
int COMBO_PINGSHOT_GAP;
int PROFILE_PINGSHOT_GAP;
int frame_add;
//###########################################################################################################################
int TIMED_SHOT_STICK_VALUE;
int TIMED_SHOOT_GAP;
int TIMED_SHOOT_NO_RECOIL;
int TIMED_SHOOT_AIM_BUTTON=TRACE_1;
int USER_PRESSURE;
int SHOOTING_METHOD;
int TIMED_SHOT_STICK_VALUE_HF;
//###########################################################################################################################
int SPECIAL_RB_SEC=1;
int RECOIL_TICK_TIME_1; //<<< SCRIPT WORKS THIS OUT FROM OTHER VALUES
int RECOIL_END_TIME_1;
int MAX_RECOIL_ADDED_2;
int RECOIL_TICK_TIME_2;
int RECOIL_END_TIME_2;
int MAX_RECOIL_ADDED_1;
int PLAYER_SHOOT_TIME;
//###########################################################################################################################
int ADDED_RECOIL; //<<< SCRIPT WORKS THIS OUT FROM OTHER VALUES
int rapidfire_enabled=1;
int CHANGE_WEAPON=1;
int SLOT_MODE=2;
int SLOT_TIME=0;
int REMOVE_SOME_ANTIRECOIL_WHEN_AIMING_UP=1;
int PLAYER_WEAPON=WP_SEC;
int RECOIL_START_TIME;
int anti_recoil_pressure;
int anti_recoil_enabled=1;
//###########################################################################################################################
int AIM_TIME;
int IGNORE_RB;
int IGNORE_LB;
int CUSTOM_X_DEADZONE_AR =5;
int RECOIL_DIFFUSE_TICK;
int sticky_time_left_2;
int sticky_time_left_1;
int SPRCD;
int sprint;
int btime;
int slide;
int iny;
//###########################################################################################################################
int OLED_LASTDRAW;
int XBOX_ACTION;
int BLOCK_AR_OUTPUT;
int zen_disabled;
//###########################################################################################################################
int aim_perfection    = 1;
int mvt               = 13;
int Current_State     = 0;
int Aim_Abuse_State   = 2;
int X_Last_Value      = 0;
int Y_Last_Value      = 0;
int X_Current_Value   = 0;
int Y_Current_Value   = 0;
int Aim_Boost_Val     = 0; 
int Aim_Correction_Val= 0;
int _v                = 32;
int sticky_aim_assist = 2;
int WIGGLE_AMOUNT;
int WIGGLE_TIME ;
int WIGGLE_ENABLED    = 2;
int WIGGLE_TIME_MAX   = 300;
int screen_off;
//################################################################################################# 

 data(1,// begin of data segment--------              
      1,0,0,0, //1. Light_Blue                           
      0,1,0,0, //2. Light_Red                            
      0,0,1,0, //3. Light_Green                          
      0,0,0,1, //4. Light_Pink                           
      1,0,1,0, //5. Light_SkyBlue                        
      0,1,1,0, //6. Light_Yellow                         
      1,1,1,1, //7. Light_White                          
      2,0,0,0, //1. Blue                                 
      0,2,0,0, //2. Red                                  
      0,0,2,0, //3. Green                                
      0,0,0,2, //4. Pink                                 
      2,0,2,0, //5. SkyBlue                              
      0,2,2,0, //6. Yellow                               
      2,2,2,2, //7. White                                
      3,0,0,0, //1. Dim_Blue                             
      0,3,0,0, //2. Dim_Red                              
      0,0,3,0, //3. Dim_Green                            
      0,0,0,3, //4. Dim_Pink                             
      3,0,3,0, //5. Dim_SkyBlue                          
      0,3,3,0, //6. Dim_Yellow                           
      3,3,3,3  //7. Dim_White                            
);
define Light_Blue                =  1;                           
define Light_Red                 =  2;                           
define Light_Green               =  3;                           
define Light_Pink                =  4;                           
define Light_SkyBlue             =  5;                           
define Light_Yellow              =  6;                           
define Light_White               =  7;                           
define Blue                      =  8;                           
define Red                       =  9;                           
define Green                     = 10;                           
define Pink                      = 11;                           
define SkyBlue                   = 12;                           
define Yellow                    = 13;                           
define White                     = 14;                           
define Dim_Blue                  = 15;                           
define Dim_Red                   = 16;                           
define Dim_Green                 = 17;                           
define Dim_Pink                  = 18;                           
define Dim_SkyBlue               = 19;                           
define Dim_Yellow                = 20;                           
define Dim_White                 = 21;  
// end of data segment--------------       
define WIDTH  = 0;  
define HEIGHT = 1;  
define LENGTH = 2;
define SMALL  = 0;
define MEDIUM = 1;
define LARGE  = 2;
int OLED_LOADOUT_DISPLAY_SIZE=1;
define BLACK = 0;
define WHITE = 1;

const int16  FONT_STATS[][] = {
    {     7,          10,         18    },    //--small     
    {    11,          18,         11    },    //--medium     
    {    16,          26,          7    }};   //--large
    
//########################################################################################################################### 
init {
vm_tctrl(-1); // Run the VM every 1ms
CYCLE_SET_INDEX=get_pvar(SPVAR_31,1,1000,1) 
PRI_STRING=get_pvar(PVAR_14,1,1000,1)
SEC_STRING=get_pvar(PVAR_15,1,1000,1) 
f_gui_weapon_set(PRI_STRING,1)
f_gui_weapon_set(SEC_STRING,2)
PlayRumble(RUMBLE_A,100,100)
screen_off = FALSE;
combo_run(wolf_intro);
combo_run(start);
}
//###########################################################################################################################
main { 

//=============== RECCOIL BLOCK ================
if(BLOCK_AR_OUTPUT >= 1 ) {
BLOCK_AR_OUTPUT=BLOCK_AR_OUTPUT - get_rtime()
if(PLAYER_SHOOT_TIME <= 0 ) {
BLOCK_AR_OUTPUT=0
}
}
//==================================================
if(get_val(PS4_LY) >= -22) {
sprint=0
}
if(combo_running(STICKY_AIM)) {
    
STICKY_AIM_TIME=STICKY_AIM_TIME + get_rtime()
         
if(STICKY_AIM_TIME >= 1000) {
STICKY_AIM_TIME=0
         }
    } else {
STICKY_AIM_TIME=0
    }
if(SLOT_MODE==SLOT_MODE_LAST) {
if(SLOT_TIME <= 30000) {
SLOT_TIME=SLOT_TIME + get_rtime()
if(SLOT_TIME <= 40) {
ZF_BlockAll()
}
}
} else {
SLOT_MODE_LAST=SLOT_MODE
SLOT_TIME=0
OLDED_OVERWRIDE=0
cls_oled(BLACK);
LAST_DRAWN_WEAPON=-1
slide=0
if(SLOT_MODE==2) {
CHANGE_WEAPON=PLAYER_WEAPON
OLDED_SHOW_LOADOUT(OLED_LOADOUT_DISPLAY_SIZE)
PLAYER_WEAPON=-1
}
ZF_BlockAll()
}
runtime=SLOT_TIME;
if(SLOT_MODE == 2 && PLAYER_WEAPON != WP_VEHICLE && WEAPON_BASED_MODBLOCK <= 99) {
//###########################################################################################################################
//-- aim perfection
    if( (aim_perfection==1 && get_val(GAME_AIM_BUTTON) >= 1 && AIM_TIME >=40) || (aim_perfection==2 && get_val(GAME_AIM_BUTTON) >= 70 && AIM_TIME >=500) )
        {
        if(get_val(GAME_AIM_BUTTON)) 
        {        
        if (Current_State == Get_Last_Value)
        {
        X_Last_Value = get_lval(AIM_H);
        Y_Last_Value = get_lval(AIM_V);
         Current_State = Get_Current_Value;
         }
        else if (Current_State == Get_Current_Value)
        {
        X_Current_Value = get_val(AIM_H);
        Y_Current_Value = get_val(AIM_V);
         if(Aim_Abuse_State == Aim_Correction)
        {    
        Current_State = Aim_Boost;
        }
        else
        {
        Current_State = Aim_Correction;
        }    
        }
        if (Current_State == Aim_Boost)
        {
        Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
        Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
         Current_State = Get_Last_Value;
        Aim_Abuse_State = Aim_Boost;  
        }
        else if (Current_State == Aim_Correction)
        {
        Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
        Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
         Current_State = Get_Last_Value;
        Aim_Abuse_State = Aim_Correction; 
        } 
        }
        else
        {
        Current_State = Get_Last_Value;
        Aim_Abuse_State = Aim_Correction; 
        }
        } else if(aim_perfection >= 1){
        Current_State=0
        }
        
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
}
//###########################################################################################################################

if(SLOT_MODE == 2 && PLAYER_WEAPON != WP_VEHICLE) {
    //-- sticky aim(crescens)
    if ( (sticky_aim_assist==2 && PLAYER_WEAPON != WP_VEHICLE  && AIM_TIME >=40 && AIM_TIME <=699 && get_val(GAME_AIM_BUTTON) >= 100)   ||  (sticky_aim_assist==1 && PLAYER_WEAPON != WP_VEHICLE  && AIM_TIME >=40 && get_val(GAME_AIM_BUTTON) >= 100))
        {
        if(get_val(GAME_FIRE_BUTTON ) >= 100  && WEAPON_BASED_MODBLOCK <= 2) combo_run(STICKY_AIM);                
           }
}
//###########################################################################################################################
/*
CHOOSER SLOT:
*/
if(SLOT_MODE==1) { // IN CHOOSER MODE
if(MANUAL_CYCLE==1) { // SELECT USING OLED DISPLAY
/*
*/
/*ZEN_MANUAL_CYCLE_CTRL[]*/
if(OLDED_OVERWRIDE >= 1) {
OLDED_OVERWRIDE=OLDED_OVERWRIDE - get_rtime()
} else {
//###########################################################################################################################
//--------------- [ DRAW WEAPON ] ----------
if(CYCLE_SET_INDEX != LAST_DRAWN_WEAPON){ 
cls_oled(BLACK);
ZEN_PRINT_WEAPON(CYCLE_SET_INDEX,MEDIUM,10,0) // font
LAST_DRAWN_WEAPON=CYCLE_SET_INDEX
}
//###########################################################################################################################
//-------------[CAT CHANGING] -----------------
if( event_release(BTN_OLED_CAT_UP) ) {
F_GUI_ChangeCat(1)
PicDrawWeaponSlot(CYCLE_SET_INDEX)
OLDED_OVERWRIDE=500
} else if( event_release(BTN_OLED_CAT_DOWN) ) {
F_GUI_ChangeCat(-1)
PicDrawWeaponSlot(CYCLE_SET_INDEX)
OLDED_OVERWRIDE=500
}
//###########################################################################################################################
//---------------------------------------------
//------------[ WEAPON SETTING] ---------------
if(event_press(GAME_AIM_BUTTON)) { // SET SEC
set_pvar(SPVAR_31,CYCLE_SET_INDEX)
PlayRumble(RUMBLE_LT,80,50)
f_gui_weapon_set(CYCLE_SET_INDEX,2)
}
if(event_press(GAME_FIRE_BUTTON)) { // SET PRI
set_pvar(SPVAR_31,CYCLE_SET_INDEX)
PlayRumble(RUMBLE_RT,80,50)
f_gui_weapon_set(CYCLE_SET_INDEX,1)
} 
//###########################################################################################################################
if(event_release(PS4_CROSS)  && PLAYER_WEAPON != WP_VEHICLE) { // SET CURRENT PLAYER WEAPON INDEX 
MANUAL_CYCLE=0
if(PLAYER_WEAPON==1) {
PlayRumble(RUMBLE_RT,80,50)
} else {
PlayRumble(RUMBLE_LT,80,50)
}
f_gui_weapon_set(CYCLE_SET_INDEX,PLAYER_WEAPON)
SLOT_MODE=2
CHANGE_WEAPON=PLAYER_WEAPON
}
//###########################################################################################################################
if(event_press(PS4_CIRCLE) ) { // CLOSE MANUAL SELECT MODE AND USE PROFILES
MANUAL_CYCLE=0
set_pvar(SPVAR_64,0)
}
//###########################################################################################################################
//========================================
//----  CYCLE JUST 1 WEAPON ----------------
if(event_release(BTN_OLED_NEXT) ) {
f_gui_weapon_cycle(1)
} else if(event_release(BTN_OLED_PRE) ) {
f_gui_weapon_cycle(-1)
}
//###########################################################################################################################
}
//=======================
if(event_release(PS4_OPTIONS) ) { // RETURN TO PLAYER MODE
SLOT_MODE=2
CHANGE_WEAPON=PLAYER_WEAPON
//PLAYER_WEAPON=-1
}
//###########################################################################################################################
ZF_BlockAll()
} else {
if(runtime >= 300 && !get_val(BTN_MASTER) && !CARRIED_OPEN_STATE) {
/*
Toggle Manual Selecting
*/
if(event_release(PS4_OPTIONS) ) {
MANUAL_CYCLE=1
set_pvar(SPVAR_64,1)
f_gui_weapon_cycle(0)
}
if(event_release(PS4_PS) ) {
MANUAL_CYCLE=0
SLOT_MODE=2
CHANGE_WEAPON=PLAYER_WEAPON
//PLAYER_WEAPON=-1
set_pvar(SPVAR_64,1)
f_gui_weapon_cycle(0)
}
//###########################################################################################################################
/*
BASIC ANTIRECOIL PROFILES
*/
//###########################################################################################################################
if(event_release(PS4_DOWN) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 1,PLAYER_WEAPON) // LOW RECOIL
} else if(event_release(PS4_LEFT) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 2,PLAYER_WEAPON) // MED RECOIL
} else if(event_release(PS4_UP) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 3,PLAYER_WEAPON) // HIGH RECOIL
} else if(event_release(PS4_RIGHT) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 4,PLAYER_WEAPON) // SUPER RECOIL
}
//###########################################################################################################################
/*
BASIC RAPIDFIRE ANTIRECOIL PROFILES
*/
//###########################################################################################################################
if(event_release(PS4_CROSS) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 5,PLAYER_WEAPON) // LOW RECOIL
} else if(event_release(PS4_SQUARE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 6,PLAYER_WEAPON) // MED RECOIL
} else if(event_release(PS4_TRIANGLE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 7,PLAYER_WEAPON) // HIGH RECOIL
} else if(event_release(PS4_CIRCLE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 8,PLAYER_WEAPON) // SUPER RECOIL
} else if(event_release(GAME_FIRE_BUTTON)) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 9,PLAYER_WEAPON) // RECOIL ONLY
}
//###########################################################################################################################
ZF_BlockAll()
}
if(runtime >= 300 && event_press(PS4_L3) && !get_ival(BTN_MASTER) && !CARRIED_OPEN_STATE) {
ALT_CHOOSING = !ALT_CHOOSING
if(ALT_CHOOSING) {
colourled(3)
PlayRumble(RUMBLE_RT,80,50)
} else {
colourled(7)
PlayRumble(RUMBLE_LT,80,120)
}
}
if(!combo_running(PadRumble) && runtime >= 300 && !get_val(BTN_MASTER) ) {
reminder_rumble=reminder_rumble - get_rtime();
if(reminder_rumble <= 0 ) {
right_rumble=!right_rumble
if(right_rumble) {
PlayRumble(RUMBLE_A,80,50)
} else {
PlayRumble(RUMBLE_B,80,120)
}
reminder_rumble=2000;
}
}
if( (get_val(PS4_L1) || get_val(PS4_R1) ) && get_val(BTN_MASTER))CARRIED_OPEN_STATE= 1;
if( (event_release(PS4_R1) || event_release(PS4_L1) ) && (get_val(PS4_R1) + get_val(PS4_L1)) <= 0)CARRIED_OPEN_STATE= 0;
CAN_CHOOSE=( (get_val(BTN_MASTER) || CARRIED_OPEN_STATE) && runtime >= 500)
if( CAN_CHOOSE && !get_val(PS4_R1) && !get_val(PS4_L1) && !ALT_CHOOSING) {
//###########################################################################################################################
if(event_press(PS4_SQUARE)) {
// - WEAPON IS [AMAX ]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [ FR556 ]
 //SEC_STRING=9
f_gui_weapon_set(9,2)
//Set_SEC(2,160,10,1250,7,2250,7,341,120,50,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_CIRCLE)) {
// - WEAPON IS [ DULIES ]
 //PRI_STRING=15
//CYCLE_SET_SLOT=1
f_gui_weapon_set(15,1)
//Set_PRI(2,10050,30,1000,7,1250,15,341,100,0,0,0,0)
// - WEAPON IS [ DULIES ]
 //SEC_STRING=15
f_gui_weapon_set(15,2)
//Set_SEC(2,10050,30,1000,7,1250,15,341,100,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_CROSS)) {
// - WEAPON IS [ AK47 ]
 //PRI_STRING=1
//CYCLE_SET_SLOT=1
f_gui_weapon_set(1,1)
//Set_PRI(2,0,31,1010,7,1510,10,150,150,0,1000,0,120)
// - WEAPON IS [ BULLFROG ]
 //SEC_STRING=12
f_gui_weapon_set(12,2)
//Set_SEC(2,0,25,1010,6,1600,1,150,150,0,0,0,120)
// ------- [ -+-]
}
if(event_press(PS4_TRIANGLE)) {
// - WEAPON IS [KILO  ]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [DULIES]
 //SEC_STRING=15
f_gui_weapon_set(15,2)
//Set_SEC(2,10050,30,1000,7,1250,15,341,100,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_UP)) {
// - WEAPON IS [ FAL ]
 //PRI_STRING=8
//CYCLE_SET_SLOT=1
f_gui_weapon_set(8,1)
//Set_PRI(2,-1085,28,1250,17,2250,7,200,100,150,1000,0,1000)
// - WEAPON IS [MAC10]
 //SEC_STRING=11
f_gui_weapon_set(11,2)
//Set_SEC(2,0,21,1010,14,2000,10,150,100,0,1000,0,120)
// ------- [ -+-]
}
if(event_press(PS4_DOWN)) {
// - WEAPON IS [ M13  ]
 //PRI_STRING=5
//CYCLE_SET_SLOT=1
f_gui_weapon_set(5,1)
//Set_PRI(2,-70,34,1010,5,2700,3,40,100,1440,1600,0,1000)
// - WEAPON IS [ STONER ]
 //SEC_STRING=12
f_gui_weapon_set(12,2)
//Set_SEC(2,0,25,1010,6,1600,1,150,150,0,0,0,120)
// ------- [ -+-]
}
if(event_press(PS4_LEFT)) {
// - WEAPON IS [ XM4 ]
 //PRI_STRING=19
//CYCLE_SET_SLOT=1
f_gui_weapon_set(19,1)
//Set_PRI(1,0,15,70,40,28,10,40,40,0,1000,0,1000)
// - WEAPON IS [ BULLFROG]
 //SEC_STRING=15
f_gui_weapon_set(15,2)
//Set_SEC(2,10050,30,1000,7,1250,15,341,100,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_RIGHT)) {
// - WEAPON IS [BULLFROG ]
 //PRI_STRING=2
//CYCLE_SET_SLOT=1
f_gui_weapon_set(2,1)
//Set_PRI(2,70,21,1010,14,2000,10,150,150,240,500,0,120)
// - WEAPON IS [ KILO ]
 //SEC_STRING=18
f_gui_weapon_set(18,2)
//Set_SEC(3,1,0,4600,4,4,4,30,-1,-1,-1,-1,-1)
// ------- [ -+-]
}
if(event_release(PS4_L1)) {
// - WEAPON IS [MAC10 ]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [ KILO ]
 //SEC_STRING=4
f_gui_weapon_set(4,2)
//Set_SEC(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [KILO ]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [P90 ]
 //SEC_STRING=11
f_gui_weapon_set(11,2)
//Set_SEC(2,0,21,1010,14,2000,10,150,100,0,1000,0,120)
// ------- [ -+-]
}
if(event_press(PS4_L3)) {
// - WEAPON IS [ISO]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [KILO]
 //SEC_STRING=4
f_gui_weapon_set(4,2)
//Set_SEC(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_R3)) {
// - WEAPON IS [KILO ]
 //PRI_STRING=3
//CYCLE_SET_SLOT=1
f_gui_weapon_set(3,1)
//Set_PRI(2,0,32,500,1,1602,1,150,150,0,1000,0,1000)
// - WEAPON IS [MWMP]
 //SEC_STRING=3
f_gui_weapon_set(3,2)
//Set_SEC(2,0,32,500,1,1602,1,150,150,0,1000,0,1000)
// ------- [ -+-]
}
}if( CAN_CHOOSE && !get_val(PS4_R1) && get_val(PS4_L1) ) {
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [PPSH - Attatchments ]
 //PRI_STRING=20
//CYCLE_SET_SLOT=1
f_gui_weapon_set(20,1)
//Set_PRI(2,0,30,1000,10,2000,10,150,120,1,2,4,5)
// - WEAPON IS [ PISTOL ]
 //SEC_STRING=16
f_gui_weapon_set(16,2)
//Set_SEC(3,1,11,4600,4,4,4,30,-1,-1,-1,-1,-1)
// ------- [ -+-]
}
}if( CAN_CHOOSE && get_val(PS4_R1) && !get_val(PS4_L1) && !ALT_CHOOSING)  {
if(event_press(PS4_SQUARE)) {
// - WEAPON IS [ SMG ]
 //PRI_STRING=9
//CYCLE_SET_SLOT=1
f_gui_weapon_set(9,1)
//Set_PRI(2,160,10,1250,7,2250,7,341,120,50,0,0,0)
// - WEAPON IS [ LMG ]
 //SEC_STRING=10
f_gui_weapon_set(10,2)
//Set_SEC(2,0,25,1010,6,1600,1,150,150,0,0,0,120)
// ------- [ -+-]
}
if(event_press(PS4_CIRCLE)) {
// - WEAPON IS [ AR ]
 //PRI_STRING=4
//CYCLE_SET_SLOT=1
f_gui_weapon_set(4,1)
//Set_PRI(2,0,20,1000,10,1500,5,150,120,0,0,0,0)
// - WEAPON IS [ SMG ]
 //SEC_STRING=13
f_gui_weapon_set(13,2)
//Set_SEC(1,0,99,100,20,28,10,150,150,0,1000,0,1000)
// ------- [ -+-]
}
if(event_press(PS4_TRIANGLE)) {
// - WEAPON IS [LMG ]
 //PRI_STRING=6
//CYCLE_SET_SLOT=1
f_gui_weapon_set(6,1)
//Set_PRI(2,0,28,1000,6,6500,5,150,150,0,0,0,0)
// - WEAPON IS [ TAC ]
 //SEC_STRING=10
f_gui_weapon_set(10,2)
//Set_SEC(2,0,25,1010,6,1600,1,150,150,0,0,0,120)
// ------- [ -+-]
}
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [ FAL Scope ]
//PRI_STRING=7
//CYCLE_SET_SLOT=1
f_gui_weapon_set(7,1)
//Set_PRI(2,-1085,28,526,7,1301,-10,341,200,150,1000,0,1000)
// - WEAPON IS [ DULES RF ]
 //SEC_STRING=14
f_gui_weapon_set(14,2)
//Set_SEC(2,10050,30,1000,7,1250,15,341,100,0,0,0,0)
// ------- [ -+-]
}
if(event_press(PS4_SHARE)) {
// - WEAPON IS [ XM4 ]
 //PRI_STRING=19
//CYCLE_SET_SLOT=1
f_gui_weapon_set(19,1)
//Set_PRI(1,0,15,70,40,28,10,40,40,0,1000,0,1000)
// - WEAPON IS [ RPG ]
 //SEC_STRING=17
f_gui_weapon_set(17,2)
//Set_SEC(0,170,0,55,40,28,10,101,40,55,1000,0,1000)
// ------- [ -+-]
}
//###########################################################################################################################
if( CAN_CHOOSE && !get_val(PS4_R1) && !get_val(PS4_L1) && ALT_CHOOSING) {
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [ AR - Attatchments ]
 //PRI_STRING=20
//CYCLE_SET_SLOT=1
f_gui_weapon_set(20,1)
//Set_PRI(2,0,30,1000,10,2000,10,150,120,1,2,4,5)
// - WEAPON IS [ PISTOL ]
 //SEC_STRING=16
f_gui_weapon_set(16,2)
//Set_SEC(3,1,11,4600,4,4,4,30,-1,-1,-1,-1,-1)
// ------- [ -+-]
}
}if( CAN_CHOOSE && !get_val(PS4_R1) && get_val(PS4_L1) && ALT_CHOOSING) {
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [ SMG - Attatchments ]
 //PRI_STRING=20
//CYCLE_SET_SLOT=1
f_gui_weapon_set(20,1)
//Set_PRI(2,0,30,1000,10,2000,10,150,120,1,2,4,5)
// - WEAPON IS [ PISTOL ]
 //SEC_STRING=16
f_gui_weapon_set(16,2)
//Set_SEC(3,1,11,4600,4,4,4,30,-1,-1,-1,-1,-1)
// ------- [ -+-]
}
}if( CAN_CHOOSE && get_val(PS4_R1) && !get_val(PS4_L1) && ALT_CHOOSING)  {
if(event_press(PS4_OPTIONS)) {
// - WEAPON IS [ LMG - Attatchments ]
 //PRI_STRING=20
//CYCLE_SET_SLOT=1
f_gui_weapon_set(20,1)
//Set_PRI(2,0,30,1000,10,2000,10,150,120,1,2,4,5)
// - WEAPON IS [ PISTOL ]
 //SEC_STRING=16
f_gui_weapon_set(16,2)
//Set_SEC(3,1,11,4600,4,4,4,30,-1,-1,-1,-1,-1)
// ------- [ -+-]
}
}
} // << MANUAL CYCLE
set_val(BTN_MASTER,0);
set_val(PS4_R1,0);
set_val(PS4_L1,0);
set_val(PS4_UP,0);
set_val(PS4_DOWN,0);
set_val(PS4_LEFT,0);
set_val(PS4_RIGHT,0);
tval=0
while(tval <= 20) {
set_val(tval,0)
tval=tval + 1
}
}}
if (SLOT_MODE==2) {
if(runtime <= 30000) {
if(runtime <= 1000) {
set_rgb(random(0,255),random(0,255),random(0,255))
} else if(runtime <= 1100) {
if(PLAYER_WEAPON==1) {
set_rgb(0,155 + get_val(PS4_R2),0)
} else {
set_rgb(0,0,155 + get_val(PS4_R2))
}
}
}
if(OLDED_OVERWRIDE >= 1) {
OLDED_OVERWRIDE=OLDED_OVERWRIDE - get_rtime()
} else if(OLED_LASTDRAW!=OLED_GUI_LOADOUT) {
OLED_LASTDRAW=OLED_GUI_LOADOUT
OLDED_SHOW_LOADOUT(OLED_LOADOUT_DISPLAY_SIZE)
}
//---  (  DISABLE )  ------! [BELOW] 
 if (time_to_DblClick_disable>0) {
 time_to_DblClick_disable=time_to_DblClick_disable - get_rtime();
}
if (event_press(BTN_MODS_DISABLE) && time_to_DblClick_disable<=0) {time_to_DblClick_disable=320;}
 else if (event_press(BTN_MODS_DISABLE)&& time_to_DblClick_disable>0){
zen_disabled=!zen_disabled;
time_to_DblClick_disable=0;
if (zen_disabled)
 {
PlayRumble(RUMBLE_LT,25,300);
 } else {
PlayRumble(RUMBLE_RT,25,300);
 }
}
//###########################################################################################################################
if((event_release(PS4_TRIANGLE) && get_ptime(PS4_TRIANGLE) < WEAPON_BUTTON_CHANGE_UNDERPRESS)  || (PLAYER_WEAPON!=WP_SEC && event_press(PS4_TRIANGLE) && SPECIAL_RB_SEC )  ) {
if( !get_ival(BTN_MASTER) ) {
if(PLAYER_WEAPON==WP_VEHICLE ) {
CHANGE_WEAPON=LAST_WEAPON
} else {
combo_run(w_swap)
if(!get_ival(PS4_TRIANGLE) && !get_ival(PS4_TRIANGLE)) {
if(PLAYER_WEAPON==WP_PRIMARY) {
CHANGE_WEAPON=WP_SEC;
} else {
CHANGE_WEAPON=WP_PRIMARY;
}
} // << NOT HOLDING EQ
}
}
}
//---  (  DISABLE   )  ------! [ABOVE]
if(!zen_disabled) {
if(!get_val(GAME_AIM_BUTTON) ) {
IGNORE_LB=0
}
if(!get_val(GAME_FIRE_BUTTON ) ) {
IGNORE_RB=0
}
//###########################################################################################################################
//==========================================================================================================================
/*
=======================================================================================================
 /$$   /$$ /$$$$$$$   /$$$$$$  /$$   /$$        /$$$$$$   /$$$$$$  /$$$$$$$$ /$$$$$$  /$$$$$$  /$$   /$$
| $$  / $$| $$__  $$ /$$__  $$| $$  / $$       /$$__  $$ /$$__  $$|__  $$__/|_  $$_/ /$$__  $$| $$$ | $$
|  $$/ $$/| $$  \ $$| $$  \ $$|  $$/ $$/      | $$  \ $$| $$  \__/   | $$     | $$  | $$  \ $$| $$$$| $$
 \  $$$$/ | $$$$$$$ | $$  | $$ \  $$$$/       | $$$$$$$$| $$         | $$     | $$  | $$  | $$| $$ $$ $$
  >$$  $$ | $$__  $$| $$  | $$  >$$  $$       | $$__  $$| $$         | $$     | $$  | $$  | $$| $$  $$$$
 /$$/\  $$| $$  \ $$| $$  | $$ /$$/\  $$      | $$  | $$| $$    $$   | $$     | $$  | $$  | $$| $$\  $$$
| $$  \ $$| $$$$$$$/|  $$$$$$/| $$  \ $$      | $$  | $$|  $$$$$$/   | $$    /$$$$$$|  $$$$$$/| $$ \  $$
|__/  |__/|_______/  \______/ |__/  |__/      |__/  |__/ \______/    |__/   |______/ \______/ |__/  \__/
                                                                                                        
=======================================================================================================
XBOX + DOWN,LEFT,UP,RIGHT = ( DEFAULT RECOIL PROFILE ) - DOWN BEEN THE WEAKEST AND RIGHT BEEN THE STRONGEST
XHOX + A,X,Y,B = ( DEFAULT RECOIL PROFILE + RAPID FIRE ) - A BEEN THE WEAKEST AND B BEEN THE STRONGEST
XBOX + MENU = EXIT PLAYER MODE AND ENTER WEAPON SELECTING MODE
XBOX + VIEW = VEHICLE MODE
XBOX + LS = SECONDARY 
XBOX + RS = PRIMARY
*/

if(event_press(BTN_MASTER) ) {
XBOX_ACTION=0
}
if(get_val(BTN_MASTER) ) {
/*
PLAYER SLOT CROSBREED WEAPON CHOOSING
*/
if(event_release(PS4_DOWN) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 1,PLAYER_WEAPON) // LOW RECOIL
} else if(event_release(PS4_LEFT) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 2,PLAYER_WEAPON) // MED RECOIL
} else if(event_release(PS4_UP) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 3,PLAYER_WEAPON) // HIGH RECOIL
} else if(event_release(PS4_RIGHT) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 4,PLAYER_WEAPON) // SUPER RECOIL
}
/*
BASIC RAPIDFIRE ANTIRECOIL PROFILES
*/
if(event_release(PS4_CROSS) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 5,PLAYER_WEAPON) // LOW RECOIL
} else if(event_release(PS4_SQUARE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 6,PLAYER_WEAPON) // MED RECOIL
} else if(event_release(PS4_TRIANGLE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 7,PLAYER_WEAPON) // HIGH RECOIL
} else if(event_release(PS4_CIRCLE) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 8,PLAYER_WEAPON) // SUPER RECOIL
} else if(event_release(GAME_FIRE_BUTTON) && get_ptime(GAME_FIRE_BUTTON) <= 10 && !get_ival(GAME_AIM_BUTTON) ) {
f_gui_weapon_set(WEAPON_CAT_START_7 + 9,PLAYER_WEAPON) // RF ONLY
}
if(event_release(PS4_L2) && get_ptime(PS4_L2) <= 180) {
if(!get_ival(GAME_FIRE_BUTTON)) {
CHANGE_WEAPON=WP_VEHICLE
PLAYER_WEAPON=WP_VEHICLE
} else {
if( (PRI_STRING==SI_STARTER_PISTOL && PLAYER_WEAPON==1 ) ||  (SEC_STRING==SI_STARTER_PISTOL && PLAYER_WEAPON==2 ) ) {
f_gui_weapon_set(SI_DULIES,PLAYER_WEAPON)
} else {
f_gui_weapon_set(SI_STARTER_PISTOL,PLAYER_WEAPON)
}
}
}
//###########################################################################################################################
if(event_release(PS4_OPTIONS)) {
SLOT_MODE=1
PLAYER_WEAPON=Clamp(1,2,LAST_WEAPON)
MANUAL_CYCLE=0
XBOX_ACTION=1
}
set_val(PS4_OPTIONS,0)
set_val(PS4_PS,0)
if(event_release(PS4_L3)) {
CHANGE_WEAPON=2
XBOX_ACTION=1
}
set_val(PS4_L3,0)
if(event_release(PS4_R3)) {
CHANGE_WEAPON=1
XBOX_ACTION=1
}
set_val(PS4_R3,0)
}

if( CHANGE_WEAPON != -1) {
/*
WEAPON VALUE RULES:
- RAPIDFIRE_ENABLED:
  rapidfire_enabled >100 = custom rapidfire holdtime  [ rf_h_time=rapidfire_enabled - 100 ]
  rapidfire_enabled >10000 = custom rapidfire holdtime  [ rf_h_time=rapidfire_enabled - 10000 ]   +  AKIMBO MODE
  
  A Negative Rapidfire Enabled is used to trigger Horizontal Recoil mode, the H Recoil value will be [ abs(RAPIDFIRE_ENABLED) - 100 ]
  
  SHOOTING_METHOD:
  1=TIMED SHOT
  2=ANTIRECOIL
  >100 = Set recoil start time to  RECOIL_START_TIME=SHOOTING_METHOD - 100;
*/
if(CHANGE_WEAPON <= 10 && CHANGE_WEAPON >= 1) {
LAST_WEAPON=CHANGE_WEAPON
}
colourled(CHANGE_WEAPON)
RECOIL_START_TIME=140;
if( CHANGE_WEAPON==2) {
set_rgb(0,0,155 + get_val(GAME_FIRE_BUTTON))
//CHANGE TO SEC
PLAYER_WEAPON=2;
SHOOTING_METHOD=SEC_SHOOTING_METHOD;
RECOIL_END_TIME_1=SEC_END_TIME_1;
MAX_RECOIL_ADDED_1=SEC_MAX_1;
RECOIL_END_TIME_2=SEC_END_2;
MAX_RECOIL_ADDED_2=SEC_MAX_2;
anti_recoil_pressure=SEC_PRESSURE;
rapidfire_enabled=SEC_RF;
PROFILE_PINGSHOT_GAP=SEC_PINGSHOT_GAP;
RECOIL_DIFFUSE_TIME=SEC_RECOIL_DIFFUSE_TIME
ZEN_EXTRA_1=SEC_EXTRA_1
ZEN_EXTRA_2=SEC_EXTRA_2
ZEN_EXTRA_3=SEC_EXTRA_3
ZEN_EXTRA_4=SEC_EXTRA_4
PlayRumble(RUMBLE_LT,20,100);
} else if(CHANGE_WEAPON == 1) {
PLAYER_WEAPON=1;
//CHANGE TO PRIMARY
set_rgb(0,155 + get_val(GAME_FIRE_BUTTON),0)
SHOOTING_METHOD=PRIMARY_SHOOTING_METHOD;
RECOIL_END_TIME_1=PRIMARY_END_TIME_1;
MAX_RECOIL_ADDED_1=PRIMARY_MAX_1;
RECOIL_END_TIME_2=PRIMARY_END_2;
MAX_RECOIL_ADDED_2=PRIMARY_MAX_2;
anti_recoil_pressure=PRIMARY_PRESSURE;
rapidfire_enabled=PRIMARY_RF;
PROFILE_PINGSHOT_GAP=PRIMARY_PINGSHOT_GAP;
RECOIL_DIFFUSE_TIME=PRIMARY_RECOIL_DIFFUSE_TIME
ZEN_EXTRA_1=PRI_EXTRA_1
ZEN_EXTRA_2=PRI_EXTRA_2
ZEN_EXTRA_3=PRI_EXTRA_3
ZEN_EXTRA_4=PRI_EXTRA_4
PlayRumble(RUMBLE_RT,20,100);
} else if(CHANGE_WEAPON==WP_VEHICLE) {
SHOOTING_METHOD=0
rapidfire_enabled=0
PROFILE_PINGSHOT_GAP=PRIMARY_PINGSHOT_GAP;
ZEN_EXTRA_1=0
ZEN_EXTRA_2=0
ZEN_EXTRA_3=0
ZEN_EXTRA_4=0
}
if(SHOOTING_METHOD==SM_TIMED_SHOT){
TIMED_SHOT_STICK_VALUE_HF=RECOIL_END_TIME_2;
TIMED_SHOT_STICK_VALUE=anti_recoil_pressure;
TIMED_SHOOT_NO_RECOIL=MAX_RECOIL_ADDED_1;
TIMED_SHOOT_GAP=RECOIL_END_TIME_1;
//PROFILE_PINGSHOT_GAP=RECOIL_END_TIME_1;
TIMED_SHOOT_GAP=TIMED_SHOOT_GAP - TIMED_SHOOT_NO_RECOIL;
}
if(SHOOTING_METHOD >= 100) {
RECOIL_START_TIME=SHOOTING_METHOD - 100;
SHOOTING_METHOD=2;
}
if(rapidfire_enabled <= -1 ) {
tval=0
if(rapidfire_enabled <= -1000) {
tval=1
rapidfire_enabled=rapidfire_enabled + 1000
}
H_AR_START=ZEN_EXTRA_1
H_AR_END=ZEN_EXTRA_2
H_AR_AMOUNT=abs(rapidfire_enabled) - 100
rapidfire_enabled=tval
} else {
H_AR_START=0
H_AR_END=0
H_AR_AMOUNT=0
}
if(rapidfire_enabled == 1) {
rf_h_time=DEF_RF_HOLDTIME
rf_r_time=DEF_RF_RELEASETIME
} else if(rapidfire_enabled == 2) {
rf_h_time=DEF_RF_HOLDTIME
rf_r_time=DEF_RF_RELEASETIME
} else if(rapidfire_enabled >= 100) {
if(rapidfire_enabled >= 10000) {
rf_h_time=rapidfire_enabled - 10000
rf_r_time=ZEN_EXTRA_1
rapidfire_enabled=2
} else if(rapidfire_enabled >= 100) {
rf_h_time=rapidfire_enabled - 100
rf_r_time=ZEN_EXTRA_1
rapidfire_enabled=1
}
}
if(rapidfire_enabled <= 0) {
rapidfire_enabled=0;
}
if(ZEN_EXTRA_4 != -1) {
RECOIL_1_HANG_TIME=abs(ZEN_EXTRA_4)
} else {
RECOIL_1_HANG_TIME=0
}
//--- ANTIRECOIL_TICKS --
// RECOIL_END_TIME_1 = 1000
// MAX_RECOIL_ADDED_1 = 10
// RECOIL_END_TIME_2 = 2000
// MAX_RECOIL_ADDED_2 = 10
// RECOIL_START_TIME = 500
RECOIL_TICK_TIME_1=RECOIL_END_TIME_1 / MAX_RECOIL_ADDED_1; // [ 1000 / 10] = 100
RECOIL_DIFFUSE_TICK = RECOIL_DIFFUSE_TIME / abs(MAX_RECOIL_ADDED_2 + MAX_RECOIL_ADDED_1 + anti_recoil_pressure);
RECOIL_TICK_TIME_2= abs( RECOIL_END_TIME_2 - (RECOIL_END_TIME_1 + RECOIL_1_HANG_TIME)) / abs(MAX_RECOIL_ADDED_2);
//------
//###########################################################################################################################
if(SHOOTING_METHOD==0 && anti_recoil_pressure==0) {
WEAPON_BASED_MODBLOCK=RECOIL_END_TIME_1
} else {
WEAPON_BASED_MODBLOCK=0
}
//###########################################################################################################################
CHANGE_WEAPON=-1;
cls_oled(BLACK);
if(PLAYER_WEAPON==WP_VEHICLE) {
draw_pic_driving(0,0,0)
} else if(PLAYER_WEAPON==1) {
PicDrawWeaponSlot(PRI_STRING)
} else if(PLAYER_WEAPON==2) {
PicDrawWeaponSlot(SEC_STRING)
}
}
//###########################################################################################################################
//AIM TIME TRACKING
iny = get_val(PS4_RY)
if(get_val(GAME_AIM_BUTTON) ) {
sprint=0
if(AIM_TIME <= 3000) {
AIM_TIME=AIM_TIME + get_rtime()
}
} else {
if(AIM_TIME != 0 && get_val(PS4_R2)  ) { // HOLDING RB AFTER RELEASING AIM
IGNORE_RB=1
}
if(AIM_TIME != 0 && get_val(PS4_L2)  ) { // HOLDING LB AFTER RELEASING AIM
IGNORE_LB=1
}
AIM_TIME=0
//combo_stop(Timed_Shoot);
//combo_restart(PingPing);
}
//^^ AIM TIME TRACKING
//SHOOT TIME TRACKING
if(get_val(GAME_FIRE_BUTTON)){
sprint=0
PLAYER_SHOOT_TIME=PLAYER_SHOOT_TIME + get_rtime();
} else {
PLAYER_SHOOT_TIME=0;
}
//###########################################################################################################################
if(SHOOTING_METHOD==SM_RECOIL) {
frame_add=0
if(get_val(GAME_FIRE_BUTTON) && get_ptime(GAME_FIRE_BUTTON) > RECOIL_START_TIME && anti_recoil_enabled== 1 && anti_recoil_pressure >= 1 ) {
frame_add=0;
if(abs(get_val(PS4_RX)) <=CUSTOM_X_DEADZONE_AR) {
set_val(PS4_RX,0)
}
if(abs(get_val(PS4_RY)) <=CUSTOM_Y_DEADZONE_AR) {
tval= anti_recoil_pressure;
} else {
if(get_val(PS4_RY) >= CUSTOM_Y_DEADZONE_AR) {
frame_add=get_val(PS4_RY) - CUSTOM_Y_DEADZONE_AR;
} else {
frame_add=get_val(PS4_RY) + CUSTOM_Y_DEADZONE_AR;
}
}
//###########################################################################################################################
if(get_val(GAME_AIM_BUTTON) && get_ptime(GAME_FIRE_BUTTON) > RECOIL_START_TIME) {
frame_add=frame_add + anti_recoil_pressure
}
//------
// >>>>>>>>>>>>>>>
// ---- ANTIRECOIL_APPLICATION
/*
ANTIRECOIL APPLICATION
*/
PLAYER_RECOIL_TIME=PLAYER_SHOOT_TIME - RECOIL_START_TIME
if(DRAW_RECOIL==1) {
cls_oled(BLACK);
}
if(RECOIL_END_TIME_1 && MAX_RECOIL_ADDED_1) {
// FOR EVERY RECOIL_TICK_TIME_1 DONE ADD 1 RECOIL
ADDED_RECOIL= PLAYER_RECOIL_TIME / RECOIL_TICK_TIME_1
ADDED_RECOIL=Clamp(ADDED_RECOIL,-100,MAX_RECOIL_ADDED_1)
if(DRAW_RECOIL==1) {
DrawProgressBar(ADDED_RECOIL,MAX_RECOIL_ADDED_1,10,OLED_HEIGHT  - 20,53,15)
}
}
if(RECOIL_END_TIME_2 && MAX_RECOIL_ADDED_2 != 0 && PLAYER_RECOIL_TIME  >= RECOIL_END_TIME_1 ) {
// FOR EVERY RECOIL_TICK_TIME_2 DONE ADD 1 RECOIL
// RECOIL_END_TIME_1 = 1000
// MAX_RECOIL_ADDED_1 = 10
// RECOIL_END_TIME_2 = 2000
// MAX_RECOIL_ADDED_2 = 10
// RECOIL_START_TIME = 500
// PLAYER_RECOIL_TIME =1000
ADDED_RECOIL= (PLAYER_RECOIL_TIME - (RECOIL_END_TIME_1 + RECOIL_1_HANG_TIME)) / RECOIL_TICK_TIME_2 //(1500 - 1000) / 100 = 7.5
if(MAX_RECOIL_ADDED_2 >= 1 ) {
ADDED_RECOIL=MAX_RECOIL_ADDED_1 + ADDED_RECOIL
ADDED_RECOIL=Clamp(ADDED_RECOIL,-100,MAX_RECOIL_ADDED_1 + MAX_RECOIL_ADDED_2)
} else {
ADDED_RECOIL=MAX_RECOIL_ADDED_1 - abs(ADDED_RECOIL)
ADDED_RECOIL=Clamp(ADDED_RECOIL,-100,100)
}
if(DRAW_RECOIL==1) {
DrawProgressBar(ADDED_RECOIL,MAX_RECOIL_ADDED_1 + MAX_RECOIL_ADDED_2,10 + 53 + 10,OLED_HEIGHT  - 20,53,15)
}
}
 if(PLAYER_RECOIL_TIME >= RECOIL_END_TIME_1 + RECOIL_1_HANG_TIME && PLAYER_RECOIL_TIME >= RECOIL_END_TIME_2 + RECOIL_1_HANG_TIME && RECOIL_DIFFUSE_TICK >= 1) {
 ADDED_RECOIL=  ADDED_RECOIL  -  (abs(PLAYER_RECOIL_TIME - (RECOIL_END_TIME_2 + RECOIL_1_HANG_TIME))   / RECOIL_DIFFUSE_TICK)
 if(ADDED_RECOIL <= 0 - anti_recoil_pressure) {
 ADDED_RECOIL=0
 frame_add=frame_add - anti_recoil_pressure
 }
 ADDED_RECOIL=Clamp(ADDED_RECOIL,-100,100)
if(DRAW_RECOIL==1) {
DrawProgressBar(ADDED_RECOIL,MAX_RECOIL_ADDED_1 + MAX_RECOIL_ADDED_2,10 ,OLED_HEIGHT  - 20,OLED_WIDTH - 20,15)
}
 
 ADDED_RECOIL=Clamp(ADDED_RECOIL,0,100)
if(DRAW_RECOIL==1) {
DrawProgressBar(ADDED_RECOIL,MAX_RECOIL_ADDED_1 + MAX_RECOIL_ADDED_2,10 ,OLED_HEIGHT  - 20,OLED_WIDTH - 20,15)
}
 
 }
//###########################################################################################################################
if( REMOVE_SOME_ANTIRECOIL_WHEN_AIMING_UP >= 1 ) { 
 if(iny <= -85){
PUSH_OUT_OF_RECOIL_TIME=PUSH_OUT_OF_RECOIL_TIME + get_rtime()
PUSH_OUT_OF_RECOIL_AMOUNT=PUSH_OUT_OF_RECOIL_TIME /  250
ADDED_RECOIL=ADDED_RECOIL / 5
}  else if(iny <= -65){
ADDED_RECOIL=ADDED_RECOIL / 4
} else if(iny <= -55){
ADDED_RECOIL=ADDED_RECOIL / 3
} else if(iny <= -35){
ADDED_RECOIL=ADDED_RECOIL / 3
} else if(iny <= -18){
ADDED_RECOIL=ADDED_RECOIL / 2
}
 if(iny >= -40 && PUSH_OUT_OF_RECOIL_TIME >= 250){
 
 if(iny >= -30) {
 PUSH_OUT_OF_RECOIL_AMOUNT=0
 } else {
  PUSH_OUT_OF_RECOIL_TIME=PUSH_OUT_OF_RECOIL_TIME - get_rtime()
PUSH_OUT_OF_RECOIL_AMOUNT=PUSH_OUT_OF_RECOIL_TIME /  250
 }
 }
 }
//########################################################################################################################### 
if(get_val(PS4_L2) >= 2 || rapidfire_enabled==2) {
 ADDED_RECOIL=Clamp(ADDED_RECOIL - PUSH_OUT_OF_RECOIL_AMOUNT, -100 ,100)
tval=ADDED_RECOIL;
} else {
tval= (ADDED_RECOIL / HIPFIRE_RECOIL_DEVISION);
}
//------
tval=Clamp( tval,-100,100)
if(abs(tval) >= 1 &&  BLOCK_AR_OUTPUT <= 0) {
if(get_ival(PS4_L2) || abs(get_val(PS4_RX)) <= 25)  {
set_val(PS4_RY,tval + frame_add);
}
}
}
} 
if(SHOOTING_METHOD==SM_TIMED_SHOT) {
if(get_val(PS4_L2) <= 0) {
TIMED_SHOT_STICK_VALUE=TIMED_SHOT_STICK_VALUE_HF;
} else {
TIMED_SHOT_STICK_VALUE=anti_recoil_pressure;
}
if( abs(get_val(PS4_RY)) >= CUSTOM_Y_DEADZONE ) { // If the user is changing where they are aiming
if(get_val(PS4_RY)) {
USER_PRESSURE=TIMED_SHOT_STICK_VALUE +  ( get_val(PS4_RY) - CUSTOM_Y_DEADZONE ); // Add the user pressure to the output value
} else {
USER_PRESSURE=TIMED_SHOT_STICK_VALUE - (abs(get_val(PS4_RY)) - CUSTOM_Y_DEADZONE); // Add the user pressure to the output value
}
} else {
USER_PRESSURE=TIMED_SHOT_STICK_VALUE; // User is not chaning where they are aiming, so just apply the recoil value
}
//###########################################################################################################################
if( BLOCK_AR_OUTPUT >= 1) {
USER_PRESSURE=0
}
//###########################################################################################################################
if(TIMED_SHOOT_GAP && PLAYER_SHOOT_TIME ) {
combo_run(Timed_Shoot);
}
}
// ^^ TIMED SHOOTING
if (  rapidfire_enabled && get_val(GAME_FIRE_BUTTON) && SHOOTING_METHOD != SM_TIMED_SHOT ) {
if(rapidfire_enabled == 2) {
           combo_run(Akimbo_Shoot);
} else {
             combo_run(Aim_Shoot);
}
}
//###########################################################################################################################

if( get_val(PS4_R1) && get_ptime(PS4_R1) <= get_ptime(PS4_L1)  && get_val(PS4_L1)) {
 
 
 if(event_press(PS4_L2) && PLAYER_SHOOT_TIME >= 1 && get_ival(GAME_FIRE_BUTTON)) {
AIM_NUDGE(PS4_UP,1,300)
} else  if(get_ival(PS4_R2) && PLAYER_SHOOT_TIME >= 1 && get_ival(GAME_FIRE_BUTTON) && HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT ) {
AIM_NUDGE(PS4_UP,1,0)
}
 
 if(SHOOTING_METHOD !=SM_TIMED_SHOT && get_ival(PS4_L2) && PLAYER_SHOOT_TIME >= 1 && get_ival(GAME_FIRE_BUTTON) ) {
BLOCK_AR_OUTPUT=100
 } else {
 
 if(SHOOTING_METHOD==SM_TIMED_SHOT) {
 combo_run(Timed_Shoot);
 } else {
COMBO_PINGSHOT_GAP=PROFILE_PINGSHOT_GAP
//==
if(event_press(PS4_R1)) {
combo_restart(PingPing);
} else {
combo_run(PingPing)
}
//###########################################################################################################################
}
}
set_val(GAME_FIRE_BUTTON ,0)
}
//###########################################################################################################################
if(get_val(PS4_L1) ) {
 if(get_val(GAME_FIRE_BUTTON) && get_ptime(GAME_AIM_BUTTON) <= get_ptime(PS4_L1)){

//AIM + LB Function

 if(dropshot <= 0 ) {
dropshot=dropshot_length
F_RUN_HEADSHOT(PS4_RY,12,1000,1)
}
set_val(PS4_R3,0)
}
}
//###########################################################################################################################
if(SHOOTING_METHOD==SM_RECOIL && H_AR_AMOUNT != 0 && PLAYER_SHOOT_TIME >= H_AR_START  && PLAYER_SHOOT_TIME <= H_AR_END   ) {
frame_add=0;
if(abs(get_val(PS4_RY)) <=CUSTOM_Y_DEADZONE_AR) {
set_val(PS4_RY,0)
}
if(abs(get_val(PS4_RX)) <=CUSTOM_X_DEADZONE_AR) {
frame_add=0
} else {
if(get_val(PS4_RX) >= CUSTOM_X_DEADZONE_AR) {
frame_add=get_val(PS4_RX) - CUSTOM_X_DEADZONE_AR;
} else {
frame_add=get_val(PS4_RX) + CUSTOM_X_DEADZONE_AR;
}
}
tval=frame_add
// NO HIPFIRE VALUES FOR AKIMBO
if(get_val(GAME_AIM_BUTTON) >= 2 || rapidfire_enabled == 2) {
tval=tval + H_AR_AMOUNT;
} else {
tval=tval + (H_AR_AMOUNT / HIPFIRE_RECOIL_DEVISION);
}
set_val(PS4_RX,tval)
}
//###########################################################################################################################
 ///====COD SPRINTING AND SLIDING======
 if(sprint_block <= 0) {
 
 if(event_press(PS4_L3)){
 if(sprint >= 1) {
 slide=3400
 }
if(SPRCD >= 0){
if(sprint==1){
sprint=2
} else {
sprint=1
}
}
SPRCD=360 + activate_sprint_extra
}
if(SPRCD >= 0){
SPRCD=SPRCD - get_rtime()
}
if(sprint==2 && btime <= 1 ){
slide=slide + get_rtime()
if ( slide >= 3300  - slideincreese) {
if ( get_val(PS4_LY) <= -75) {
btime=240
slide=-1000
}
}
}
} else {
sprint_block=sprint_block - get_rtime()
combo_stop(run)
}
//###########################################################################################################################
if(event_release(no_timed_sticky_button_1) && get_ptime(no_timed_sticky_button_1) > NO_STICKWHENOVER_TIME_1) {
sticky_time_left_1=NO_DESIRED_STICK_TIME_1 - get_ptime(no_timed_sticky_button_1);
} else if(event_press(no_timed_sticky_button_1) && sticky_time_left_1 >= 1) {
sticky_time_left_1=-40;
}
if(sticky_time_left_1 > 0 ) {
set_val(no_timed_sticky_button_1,100);
sticky_time_left_1=sticky_time_left_1 - get_rtime();
if(sticky_time_left_1 <= 0)sticky_time_left_1=0;
} else if(sticky_time_left_1 < 0 ) {
set_val(no_timed_sticky_button_1,0);
sticky_time_left_1=sticky_time_left_1 + get_rtime();
if(sticky_time_left_1 >= 0)sticky_time_left_1=0;
}
//###########################################################################################################################
if(event_release(no_timed_sticky_button_2) && get_ptime(no_timed_sticky_button_2) > NO_STICKWHENOVER_TIME_2) {
sticky_time_left_2=NO_DESIRED_STICK_TIME_2 - get_ptime(no_timed_sticky_button_2);
} else if(event_press(no_timed_sticky_button_2) && sticky_time_left_2 >= 1) {
sticky_time_left_2=-40;
}
if(sticky_time_left_2 > 0 ) {
set_val(no_timed_sticky_button_2,100);
sticky_time_left_2=sticky_time_left_2 - get_rtime();
if(sticky_time_left_2 <= 0)sticky_time_left_2=0;
} else if(sticky_time_left_2 < 0 ) {
set_val(no_timed_sticky_button_2,0);
sticky_time_left_2=sticky_time_left_2 + get_rtime();
if(sticky_time_left_2 >= 0)sticky_time_left_2=0;
}
//###########################################################################################################################
if(WIGGLE_ENABLED >= ENABLED && PLAYER_WEAPON != WP_VEHICLE && WEAPON_BASED_MODBLOCK <= 0) {
if( (get_val(GAME_AIM_BUTTON) >= 0  && ( WIGGLE_ENABLED == ENABLED_WHEN_SHOOTING && get_val(GAME_FIRE_BUTTON) && PLAYER_SHOOT_TIME >= 100 || WIGGLE_ENABLED >= ENABLED_WHEN_SHOOTING + 1 &&   AIM_TIME >= 10 && get_ival(GAME_AIM_BUTTON) >= 100   )  && abs(get_ival(PS4_RX)) <= 18  && abs(get_ival(PS4_RY)) <= 18  ) ) {
if(WIGGLE_TIME==-1) {
WIGGLE_TIME=WIGGLE_TIME_MAX / 2
}
WIGGLE_TIME=WIGGLE_TIME + get_rtime()
if(WIGGLE_TIME >=WIGGLE_TIME_MAX) {
WIGGLE_TIME=0
/*
if(WIGGLE_TIME != -1 && WIGGLE_EXTRA <= 10) {
WIGGLE_EXTRA=WIGGLE_EXTRA + 1
}*/
} else if(WIGGLE_TIME >=WIGGLE_TIME_MAX / 2) {
WIGGLE_AMOUNT = WIGGLE_POWER
} else {
WIGGLE_AMOUNT= abs(WIGGLE_POWER)
}
set_val(PS4_RX,get_val(PS4_RX) + WIGGLE_AMOUNT)
} else {
/*
if(WIGGLE_TIME != -1 && WIGGLE_EXTRA <= 10) {
WIGGLE_EXTRA=WIGGLE_EXTRA + 1
}*/
WIGGLE_TIME=-1
}
}
//--strafe
if(abs(get_val(PS4_LX)) <= 25 && WEAPON_BASED_MODBLOCK <= 0 && ( WIGGLE_ENABLED == ENABLED_WHEN_SHOOTING && get_val(GAME_FIRE_BUTTON) && PLAYER_SHOOT_TIME >= 100 || WIGGLE_ENABLED >= ENABLED_WHEN_SHOOTING + 1 &&   AIM_TIME >= 10 && get_ival(GAME_AIM_BUTTON) >= 100  )&& PLAYER_WEAPON != WP_VEHICLE && WIGGLE_TIME >= 1) {
if(STRAFE_TIME==-1) {
STRAFE_TIME=STRAFE_TIME_MAX / 2
}
STRAFE_TIME=STRAFE_TIME + get_rtime()
STRAFE_TIME=WIGGLE_TIME
if(STRAFE_TIME >=STRAFE_TIME_MAX) {
STRAFE_TIME=0
} else if(STRAFE_TIME >=STRAFE_TIME_MAX / 2) {
STRAFE_AMOUNT= abs(STRAFE_POWER)
} else {
STRAFE_AMOUNT = STRAFE_POWER
}
if(STRAFE_AMOUNT >= 1) {
set_val(PS4_LX,abs(STRAFE_POWER))
} else {
set_val(PS4_LX,STRAFE_POWER)
}
} else {
STRAFE_TIME=-1
}
// ^^^^^^^^^^^^ WIGGLE STUFF
//===================================
//------ DROPSHOT -------------------
//-----------------------------------
if(dropshot >= 1 ) {
dropshot=dropshot - get_rtime()
if ( dropshot >= dropshot_length - 500) {
set_val(PS4_R3,100)
}
}
//###########################################################################################################################

//===================================
 ///====COD SPRINTING AND SLIDING======
//########################################################################################################################### 
 
if(!get_val(PS4_L3)) {
if(sprint>=1) {
combo_run(run)
}
if(btime >= 1) {
btime=btime - get_rtime()
slide=0
set_val(PS4_CIRCLE,100)
}
}
//###########################################################################################################################
if(IGNORE_RB) {
set_val(GAME_FIRE_BUTTON,0)
}
if(IGNORE_LB) {
set_val(GAME_AIM_BUTTON ,0)
}
set_val(BTN_MASTER,0)
if(PLAYER_WEAPON != WP_VEHICLE) {
if(get_val(PS4_L2) >= 1) {
sprint=0
set_val(PS4_L2,100)
} else if(get_val(PS4_R2) >= 1) {
sprint=0
set_val(PS4_R2,100)
}
}
}
}
if(SLOT_TIME <= 40 || get_ival(BTN_MASTER)) {
ZF_BlockAll()
}
/*
if(PLAYER_WEAPON==WP_VEHICLE && get_ival(PS4_SQUARE) && event_press(PS4_SQUARE) ) {
LAST_WEAPON=PLAYER_WEAPON
}
*/
if(PLAYER_WEAPON==WP_VEHICLE && get_ival(PS4_SQUARE) && get_ptime(PS4_SQUARE) >= 60) {
CHANGE_WEAPON=Clamp(LAST_WEAPON,1,2)
}
if(!sticky_time_left_1) {
set_val(PS4_TRIANGLE,0)
}
// << END OF ORIGINAL MAIN
//COD ONLY

if(!zen_disabled) {
//###########################################################################################################################
tval= abs(abs(HEADSHOT_IN_Y) - abs(get_ival(HEADSHOT_STICK)))
if( tval >= 15 ) {
HEADSHOT_TIME=0
} else {
POINT_DIR_UP_V= HEADSHOT_TIME / abs(POINT_DIR_UP_D)
if(POINT_DIR_UP_D <= 0) {
POINT_DIR_UP_V=inv(POINT_DIR_UP_V)
}
if(HEADSHOT_TIME >= 1) {
tval=get_val(HEADSHOT_STICK)
tval=Clamp(tval + POINT_DIR_UP_V ,-100,100)
set_val(HEADSHOT_STICK,tval)
HEADSHOT_TIME=HEADSHOT_TIME - get_rtime()
if(HEADSHOT_STICK != PS4_RX && get_val(PS4_RX) <= 10) {
set_val(PS4_RX,0)
} else if(HEADSHOT_STICK != PS4_RY && get_val(PS4_RY) <= 10) {
set_val(PS4_RY,0)
}
}
}
//###########################################################################################################################
//DONT CHANGE OR YOUR PING WILL BE ON EVERYTIME YOU SHOOT
if(get_val(PS4_R1) &&  !combo_running(spot) && PLAYER_WEAPON!=WP_VEHICLE) {//DONT CHANGE OR YOUR PING WILL BE ON EVERYTIME YOU SHOOT
combo_run(spot)}
//DONT CHANGE OR YOUR PING WILL BE ON EVERYTIME YOU SHOOT
//###########################################################################################################################
if(event_release(PS4_DOWN) && get_ptime(PS4_DOWN) <= 220 && !get_ival(PS4_L1)) {
RELOAD_COMBO_BUTTON=PS4_SQUARE
combo_run(reload)
sprint_block=1500
} else if(get_ival(PS4_DOWN) && get_ptime(PS4_DOWN) <= 219) {
set_val(PS4_DOWN,0)
}
//ADS
if(get_ival(GAME_FIRE_BUTTON) && !get_ival(GAME_AIM_BUTTON) && PLAYER_WEAPON != WP_VEHICLE && rapidfire_enabled <= 1 ) {
combo_run(ADS)
}
//===
if(get_ival(GAME_AIM_BUTTON)) {
if(event_press(PS4_LEFT)) {
AIM_NUDGE(PS4_LEFT,1,200)
} else if(event_press(PS4_RIGHT)) {
AIM_NUDGE(PS4_RIGHT,1,200)
}  else if(event_press(PS4_DOWN)) {
AIM_NUDGE(PS4_UP,1,200)
}  else if(event_press(PS4_UP) && 2 == 3) {
AIM_NUDGE(PS4_UP,1,0)
} else if(get_ival(PS4_LEFT) && HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT ) {
AIM_NUDGE(PS4_LEFT,2,0)
} else if(get_ival(PS4_RIGHT) && HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT  ) {
AIM_NUDGE(PS4_RIGHT,2,0)
}  else if(get_ival(PS4_UP) && HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT && 2 == 3 ) {
AIM_NUDGE(PS4_UP,2,0)
}  else if(get_ival(PS4_DOWN) && HEADSHOT_TIME <= HEADSHOT_EARLY_EXIT  ) {
AIM_NUDGE(PS4_UP,2,0)
}
set_val(PS4_LEFT,0)
set_val(PS4_RIGHT,0)
set_val(PS4_DOWN,0)
//set_val(PS4_UP,0)
}
}
if(PLAYER_WEAPON != WP_VEHICLE ) {
if(event_press(PS4_CROSS)) {
sticky_time_left_2=0
sticky_time_left_1=0
}
if(get_ival(PS4_DOWN) && !get_ival(GAME_AIM_BUTTON ) && !get_ival(PS4_R1) && get_ptime(PS4_DOWN) >= 200 && SLOT_MODE==2 ) {
if(event_press(GAME_AIM_BUTTON) ) {
sticky_time_left_2=10000
}
if(event_press(PS4_CIRCLE)) {
RELOAD_COMBO_BUTTON=PS4_SQUARE
combo_run(reload)
}
}
if(SLOT_MODE==2 && !zen_disabled) {
if(sticky_time_left_2 >= 1 && get_ival(PS4_DOWN)) {
set_val(PS4_DOWN,0)
} 
if(event_press(PS4_DOWN)) {
sticky_time_left_2=0
}
if(event_press(HOME) && get_ival(GAME_AIM_BUTTON ) + get_ival( GAME_FIRE_BUTTON) <= 39 ) {
sticky_time_left_1=NO_DESIRED_STICK_TIME_1
sticky_time_left_2=0
} else if(event_release(HOME) && get_ival(GAME_AIM_BUTTON) + get_ival( GAME_FIRE_BUTTON) <= 39  ) {
sticky_time_left_1=NO_DESIRED_STICK_TIME_1
sticky_time_left_2=0
} else if(sticky_time_left_1 >= 1) {
if(get_ival(GAME_AIM_BUTTON) + get_ival( GAME_FIRE_BUTTON) >= 30 ) {
sticky_time_left_1=0
}
}
set_val(HOME,0)
}
//=-====================================
if(get_ival(PS4_LY) >= 40) {
sticky_time_left_2= Clamp(sticky_time_left_2 - ( get_rtime() * 2 ),0,31000)
}
//=====================================
//--
if(X_FLICK_TIME >= 1) {
X_FLICK_TIME=X_FLICK_TIME - get_rtime()
} else {
tval=get_ival(PS4_RX) - X_FLICK_TRACKING
if (abs(tval) <= 11 && X_FLICK_RESTING <= 10000 && get_ival(PS4_RX) <= 16) {
X_FLICK_RESTING=X_FLICK_RESTING + X_FLICK_RECORD
if(X_FLICK_RESTING >= 200) {
X_HAS_RESTED=1
}
}
if( abs(tval) >= 12 )  {
X_FLICK_RESTING=0
//
if(abs(tval) >= 60 && X_HAS_RESTED == 1) {
X_HAS_RESTED=0
if(!get_ival(GAME_AIM_BUTTON)) {
if(tval >= 60 && get_ival(PS4_RX) >= 48) {
//AIM_NUDGE(PS4_RIGHT,1,200)
sticky_time_left_2=sticky_time_left_2 / 2
} else if( get_ival(PS4_RX) <= -48 ) {
sticky_time_left_2=sticky_time_left_2 / 2
//AIM_NUDGE(PS4_LEFT,1,200)
}
}
}
}
X_FLICK_TRACKING=get_ival(PS4_RX)
X_FLICK_TIME=X_FLICK_RECORD
}
if(tval >= 11) {
X_FLICK_RESTING=0
}
//--
//MONEY DROP
if(!get_ival(GAME_AIM_BUTTON) && SLOT_MODE==2 && !zen_disabled) {
if(event_release(PS4_RIGHT) && get_ptime(PS4_RIGHT) <= 180) {
combo_run(money)
}
if(get_ptime(PS4_RIGHT) <= 180 || get_ptime(PS4_RIGHT) >= 180 + 80 ) {
set_val(PS4_RIGHT,0)
} 
}
//MONEY DROP ABOVE
if(zen_disabled >= 1) {
set_val(HOME,0)
}
//MANTLE
if(!zen_disabled) {
if(event_press(PS4_R3)) {
A_PRESSED_IN_LS=0
}
if(get_ival(PS4_L3) ) {
if(event_press(PS4_CROSS)) {
A_PRESSED_IN_LS=1
}
}
if(get_ival(PS4_L3) && get_ptime(PS4_L3) >= 200 && PLAYER_WEAPON != WP_VEHICLE && A_PRESSED_IN_LS ) {
combo_run(climb)
}
if(get_ival(PS4_CROSS)) {
combo_run(climb)
}
}
//^^^^^^^^^^^^^^^^^^^^^^ MANTLE
}
}
//###########################################################################################################################
combo w_swap{
set_val(PS4_TRIANGLE,100)
wait(30)
set_val(PS4_TRIANGLE,0)
wait(210)
} 
combo climb{
set_val(PS4_CROSS,100)
wait(40)
set_val(PS4_CROSS,0)
wait(40)
}
combo money{
set_val(PS4_DOWN,100)
wait(60)
set_val(PS4_DOWN,100)
set_val(PS4_SQUARE,100)
wait(40)
set_val(PS4_DOWN,100)
set_val(PS4_SQUARE,0)
wait(40)
set_val(PS4_DOWN,100)
wait(40)
}
combo spot{
set_val(PS4_UP,100)
wait(40)
set_val(PS4_UP,0)
wait(40)
set_val(PS4_UP,100)
wait(40)
set_val(PS4_UP,0)
wait(40)
wait(1000)
}
combo ADS{
set_val(GAME_AIM_BUTTON,100)
wait(200)
set_val(GAME_AIM_BUTTON,0)
wait(200)
}
combo reload{
set_val(RELOAD_COMBO_BUTTON,100)
wait(60)
set_val(RELOAD_COMBO_BUTTON,0)
wait(40)
}
combo Timed_Shoot {
     set_val(TIMED_SHOOT_AIM_BUTTON,100);
     set_val(PS4_R1, 100);
     wait(40);
     set_val(PS4_R2, 0);
     set_val(PS4_RY,Clamp( USER_PRESSURE,-100,100));
     wait(TIMED_SHOOT_GAP);
     set_val(PS4_R1, 0);
     set_val(TIMED_SHOOT_AIM_BUTTON,100);
     wait(TIMED_SHOOT_NO_RECOIL);
 }
 /*
 combo MELEEBASH{
     set_val(BUTTON_MELEE, 100);
     wait(100);
     set_val(BUTTON_MELEE, 0);
     wait(10);
}
 combo prone{
       set_val(PS4_CIRCLE, 100);
     wait(800);
      set_val(PS4_CIRCLE, 0);
           wait(40);
}*/
  combo PingPing { // SINGLE SHOT FIRE ( the game resets aim posision slowly after shot )
     set_val(PS4_L2, 100);
     wait(40);
     set_val(PS4_L2, 0);
     wait(COMBO_PINGSHOT_GAP);
  }
 combo PadRumble {
     set_rumble(RUMBLE_S, RUMBLE_I);
     wait(RUMBLE_T);
     set_rumble(RUMBLE_S, 0);
     wait(10);
     set_rumble(RUMBLE_S, 0);
 }
 combo Aim_Shoot {
     set_val(GAME_FIRE_BUTTON, 100);
     wait(rf_h_time);
     set_val(GAME_FIRE_BUTTON, 0);
     wait(rf_r_time);
 }
 combo Akimbo_Shoot {
     set_val(GAME_FIRE_BUTTON, 100);
     set_val(GAME_AIM_BUTTON, 100);
     wait(rf_h_time);
     set_val(GAME_FIRE_BUTTON, 0);
     set_val(GAME_AIM_BUTTON, 0);
     wait(rf_r_time);
 }
    combo STICKY_AIM 
      {
    set_val(AIM_V,xy_val(AIM_V, _v));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v));
    
    
    if(abs(get_val(STRAFE)) <= 25) {
    if(STICKY_AIM_TIME <= 500) {
    set_val(STRAFE,xy_val(STRAFE,  -40));
    } else {
     set_val(STRAFE,xy_val(STRAFE, 40));
    }
    }
    wait(20);
    set_val(AIM_V,xy_val(AIM_V, _v * -1));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v * -1));
    set_val(STRAFE,xy_val(STRAFE, _v * -1));
    wait(20);
    }
   int cdelay = 260;
combo wolf_intro
{
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 10);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 20);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 30);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 40);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 50);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 60);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 70);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 80);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 90);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 100);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 110);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 110);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 120);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 130);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 140);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 150);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 160);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 170);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 180);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF1[0]);
    wait(cdelay - 190);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE, WOLF2[0]);
    wait(cdelay - 200);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 212);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 220);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
        wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
        wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF2[0]);
    wait(cdelay - 228);
    cls_oled(0);
    image_oled(0, 0, TRUE, TRUE,  WOLF1[0]);
} 
 combo start 
    {
        colourled(Blue);
        wait(200);    
        colourled(Green);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(SkyBlue);
        wait(200);
        colourled(Blue);
        wait(200);    
        colourled(SkyBlue);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(Blue);
    }

   

function Clamp(In,Min,Max)
{
if(In > Max)In=Max;
if(In < Min)In=Min;
return In;
}

function AIM_NUDGE(TheDir,Devider,Extender)
{
//12,1000,1)
if(TheDir==PS4_RIGHT) {
F_RUN_HEADSHOT(PS4_RX, (12 - 4) * Devider,500 + Extender,0)
} else if(TheDir==PS4_LEFT) {
F_RUN_HEADSHOT(PS4_RX,(12 - 4) * Devider,500 + Extender,1)
} else  if(TheDir==PS4_UP) {
F_RUN_HEADSHOT(PS4_RY,(12 - 4) * Devider,500 + Extender,1)
} else if(TheDir==PS4_DOWN) {
F_RUN_HEADSHOT(PS4_RY,(12 - 4) * Devider,500 + Extender,0)
}  
}
function F_RUN_HEADSHOT(TheStick,SpeedMod,TheLength,DoInvert)
{
HEADSHOT_IN_Y=get_ival(PS4_RY)
if(DoInvert) {
SpeedMod=inv(SpeedMod)
}
POINT_DIR_UP_V=0
POINT_DIR_UP_D=SpeedMod
HEADSHOT_TIME=TheLength
HEADSHOT_STICK=TheStick
}
function ZF_BlockAll()
{
tval=0
while(tval <= 20) {
set_val(tval,0)
tval=tval + 1
}
}
/*function clamp1(In,Min,Max)
{
if(In > Max)In=Max;
if(In < Min)In=Min;
return In;
}*/
function ZEN_PRINT_WEAPON(wind,SIZE,placey,xshift){
if(placey <= -1) {
placey=center_y(SIZE)
}
if(wind==1) {
 printf(center_x(sizeof(WEAPON_1) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_1[0]);
}
if(wind==2) {
 printf(center_x(sizeof(WEAPON_2) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_2[0]);
}
if(wind==3) {
 printf(center_x(sizeof(WEAPON_3) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_3[0]);
}
if(wind==4) {
 printf(center_x(sizeof(WEAPON_4) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_4[0]);
}
if(wind==5) {
 printf(center_x(sizeof(WEAPON_5) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_5[0]);
}
if(wind==6) {
 printf(center_x(sizeof(WEAPON_6) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_6[0]);
}
if(wind==7) {
 printf(center_x(sizeof(WEAPON_7) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_7[0]);
}
if(wind==8) {
 printf(center_x(sizeof(WEAPON_8) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_8[0]);
}
if(wind==9) {
 printf(center_x(sizeof(WEAPON_9) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_9[0]);
}
if(wind==10) {
 printf(center_x(sizeof(WEAPON_10) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_10[0]);
}
if(wind==11) {
 printf(center_x(sizeof(WEAPON_11) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_11[0]);
}
if(wind==12) {
 printf(center_x(sizeof(WEAPON_12) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_12[0]);
}
if(wind==13) {
 printf(center_x(sizeof(WEAPON_13) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_13[0]);
}
if(wind==14) {
 printf(center_x(sizeof(WEAPON_14) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_14[0]);
}
if(wind==15) {
 printf(center_x(sizeof(WEAPON_15) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_15[0]);
}
if(wind==16) {
 printf(center_x(sizeof(WEAPON_16) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_16[0]);
}
if(wind==17) {
 printf(center_x(sizeof(WEAPON_17) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_17[0]);
}
if(wind==18) {
 printf(center_x(sizeof(WEAPON_18) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_18[0]);
}
if(wind==19) {
 printf(center_x(sizeof(WEAPON_19) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_19[0]);
}
if(wind==20) {
 printf(center_x(sizeof(WEAPON_20) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_20[0]);
}
if(wind==21) {
 printf(center_x(sizeof(WEAPON_21) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_21[0]);
}
if(wind==22) {
 printf(center_x(sizeof(WEAPON_22) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_22[0]);
}
if(wind==23) {
 printf(center_x(sizeof(WEAPON_23) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_23[0]);
}
if(wind==24) {
 printf(center_x(sizeof(WEAPON_24) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_24[0]);
}
if(wind==25) {
 printf(center_x(sizeof(WEAPON_25) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_25[0]);
}
if(wind==26) {
 printf(center_x(sizeof(WEAPON_26) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_26[0]);
}
if(wind==27) {
 printf(center_x(sizeof(WEAPON_27) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_27[0]);
}
if(wind==28) {
 printf(center_x(sizeof(WEAPON_28) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_28[0]);
}
if(wind==29) {
 printf(center_x(sizeof(WEAPON_29) + xshift,SIZE),placey,SIZE,WHITE,WEAPON_29[0]);
}
}
combo run {
set_val(PS4_L3,100)
wait(40)
set_val(PS4_L3,0)
wait(60)
}
function PicDrawWeaponSlot(F_WEAPON_INDEX)
{
cls_oled(BLACK);
OLED_LASTDRAW=OLED_GUI_STATE
OLDED_OVERWRIDE=1000
if(F_WEAPON_INDEX >= WEAPON_CAT_START_7  ||  F_WEAPON_INDEX  <= 0) {
//PAST THE END / DEFAULTS
draw_pic_smg(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_6 ) {
//PISTOL
draw_pic_w_pistol(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_5 ) {
//SNIPER
draw_pic_sniper(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_4 ) {
//SHOTGUNS
draw_pic_shotty(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_3 ) {
//SMG
draw_pic_smg(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_2 ) {
//RIFLE
draw_pic_w_rifle(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_1 ) {
//ASSAULT
draw_pic_w_assault(0,0,0)
} else if(F_WEAPON_INDEX >= WEAPON_CAT_START_0 ) {
//MISC
draw_pic_w_assault(0,0,0)
} else {
if(PLAYER_WEAPON==WP_PRIMARY) {
draw_pic_w_assault(0,0,0)
} else if(PLAYER_WEAPON==WP_SEC) {
draw_pic_smg(0,0,0)
} 
}
}
function f_gui_weapon_set(wind,settingslot) 
{
CYCLE_SET_SLOT=settingslot
if(settingslot==1) {
PRI_STRING=wind
} else {
SEC_STRING=wind
}
if(wind==1) {
 //AK Sweeper.ini
F_SetWeaponCycle(2,0,31,1010,7,1510,10,150,150,0,1000,0,120);
}
if(wind==2) {
 //B Stare.ini
F_SetWeaponCycle(2,70,21,1010,14,2000,10,150,150,240,500,0,120);
}
if(wind==3) {
 //kilo heat.ini
F_SetWeaponCycle(2,0,32,500,1,1602,1,150,150,0,1000,0,1000);
}
if(wind==4) {
 //kilo truce.ini
F_SetWeaponCycle(2,0,20,1000,10,1500,5,150,120,0,0,0,0);
}
if(wind==5) {
 //Prototype.ini
F_SetWeaponCycle(2,-70,34,1010,5,2700,3,40,100,1440,1600,0,1000);
}
if(wind==6) {
 //Rain.ini
F_SetWeaponCycle(2,0,28,1000,6,6500,5,150,150,0,0,0,0);
}
if(wind==7) {
 //FAL Scope.ini
F_SetWeaponCycle(2,-1085,28,526,7,1301,-10,341,200,150,1000,0,1000);
}
if(wind==8) {
 //FAL Shell.ini
F_SetWeaponCycle(2,-1085,28,1250,17,2250,7,200,100,150,1000,0,1000);
}
if(wind==9) {
 //sks ping.ini
F_SetWeaponCycle(2,160,10,1250,7,2250,7,341,120,50,0,0,0);
}
if(wind==10) {
 //Clipper.ini
F_SetWeaponCycle(2,0,25,1010,6,1600,1,150,150,0,0,0,120);
}
if(wind==11) {
 //CoCo.ini
F_SetWeaponCycle(2,0,21,1010,14,2000,10,150,100,0,1000,0,120);
}
if(wind==12) {
 //Rocky CB.ini
F_SetWeaponCycle(2,0,25,1010,6,1600,1,150,150,0,0,0,120);
}
if(wind==13) {
 //Ice Storm.ini
F_SetWeaponCycle(1,0,99,100,20,28,10,150,150,0,1000,0,1000);
}
if(wind==14) {
 //DULES RF.ini
F_SetWeaponCycle(2,10050,30,1000,7,1250,15,341,100,0,0,0,0);
}
if(wind==15) {
 //DULIES.ini
F_SetWeaponCycle(2,10050,30,1000,7,1250,15,341,100,0,0,0,0);
}
if(wind==16) {
 //PISTOL.ini
F_SetWeaponCycle(3,1,11,4600,4,4,4,30,-1,-1,-1,-1,-1);
}
if(wind==17) {
 //RPG.ini
F_SetWeaponCycle(0,170,0,55,40,28,10,101,40,55,1000,0,1000);
}
if(wind==18) {
 //Turbo.ini
F_SetWeaponCycle(3,1,0,4600,4,4,4,30,-1,-1,-1,-1,-1);
}
if(wind==19) {
 //X16.ini
F_SetWeaponCycle(1,0,15,70,40,28,10,40,40,0,1000,0,1000);
}
if(wind==20) {
 //6P41 - Attatchments.ini
F_SetWeaponCycle(2,0,30,1000,10,2000,10,150,120,1,2,4,5);
}
if(wind==21) {
 //LOW RECOIL.ini
F_SetWeaponCycle(2,0,20,1010,5,2000,10,150,100,0,1000,0,120);
}
if(wind==22) {
 //MEDIUM RECOIL.ini
F_SetWeaponCycle(2,0,21,1010,14,2000,10,150,100,0,1000,0,120);
}
if(wind==23) {
 //HIGH RECOIL.ini
F_SetWeaponCycle(2,0,23,1010,19,2000,10,150,100,0,1000,0,120);
}
if(wind==24) {
 //SUPER RECOIL.ini
F_SetWeaponCycle(2,0,25,1010,25,2000,10,150,100,0,1000,0,120);
}
if(wind==25) {
 //LOW RECOIL RF.ini
F_SetWeaponCycle(2,1,20,1010,5,2000,10,150,100,0,1000,0,120);
}
if(wind==26) {
 //MEDIUM RECOIL RF.ini
F_SetWeaponCycle(2,1,21,1010,14,2000,10,150,100,0,1000,0,120);
}
if(wind==27) {
 //HIGH RECOIL RF.ini
F_SetWeaponCycle(2,1,23,1010,19,2000,10,150,100,0,1000,0,1000);
}
if(wind==28) {
 //SUPER RECOIL RF.ini
F_SetWeaponCycle(2,1,25,1010,19,2000,10,150,100,0,1000,0,1000);
}
if(wind==29) {
 //RAPID FIRE.ini
F_SetWeaponCycle(3,1,0,4600,4,4,4,30,-1,-1,-1,-1,-1);
}if(MANUAL_CYCLE != 1 ) {
OLDED_SHOW_LOADOUT(OLED_LOADOUT_DISPLAY_SIZE)
}
}
function Set_SEC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
{
SEC_SHOOTING_METHOD=arg1;
SEC_END_TIME_1=arg4;
SEC_MAX_1=arg5;
SEC_END_2=arg6;
SEC_MAX_2=arg7;
SEC_PRESSURE=arg3;
SEC_RF=arg2;
SEC_PINGSHOT_GAP=arg8;
SEC_RECOIL_DIFFUSE_TIME=arg9
SEC_EXTRA_1=arg10;
SEC_EXTRA_2=arg11;
SEC_EXTRA_3=arg12;
SEC_EXTRA_4=arg13;
set_pvar(PVAR_15,SEC_STRING);
if(PLAYER_WEAPON==WP_SEC) {
CHANGE_WEAPON=PLAYER_WEAPON
}
}
function Set_PRI(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13)
{
PRIMARY_SHOOTING_METHOD=arg1;
PRIMARY_END_TIME_1=arg4;
PRIMARY_MAX_1=arg5;
PRIMARY_END_2=arg6;
PRIMARY_MAX_2=arg7;
PRIMARY_PRESSURE=arg3;
PRIMARY_RF=arg2;
PRIMARY_PINGSHOT_GAP=arg8;
PRIMARY_RECOIL_DIFFUSE_TIME=arg9
PRI_EXTRA_1=arg10;
PRI_EXTRA_2=arg11;
PRI_EXTRA_3=arg12;
PRI_EXTRA_4=arg13;
set_pvar(PVAR_14,PRI_STRING);
if(PLAYER_WEAPON==WP_PRIMARY) {
CHANGE_WEAPON=PLAYER_WEAPON
}
}
 function PlayRumble(a,b,c)
{
combo_stop(PadRumble);
RUMBLE_I=b;
RUMBLE_T=c;
RUMBLE_S=a;
combo_run(PadRumble);
}
function colourled(Colour) {    
if(Colour >=9 ) {
Colour=9
}
    Colour=(Colour*4)- 3;            
    set_led(LED_1,duint8(Colour  ));  
    set_led(LED_2,duint8(Colour+ 1)); 
    set_led(LED_3,duint8(Colour+ 2)); 
    set_led(LED_4,duint8(Colour+ 3)); 
}// End
function Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) 
    { 
    mvt = abs(Last_Value) + abs(Current_Value);
    Aim_Boost_Val = ( mvt + 1 )/2;
    Aim_Correction_Val = Aim_Boost_Val + 4;
     if(Aim_Boost_Val >= 10)
    {
    Aim_Boost_Val = 10;
    Aim_Correction_Val = 14;
    }
    else if(Aim_Boost_Val == 0)
    {
    Aim_Boost_Val = 2
    Aim_Correction_Val = 4;
    }
     if(mvt < Aim_Perfection_Limit) 
    {
    if(Last_Value < Current_Value)
    {           
    if (Boost)
    { 
    if (X_AXIS)
    set_val(AIM_H, (Current_Value + Aim_Boost_Val)); 
    if (Y_AXIS)
    set_val(AIM_V, (Current_Value + Aim_Boost_Val));
    }
    else if(Correction)
    {
    if (X_AXIS)
    set_val(AIM_H, (Current_Value - Aim_Correction_Val)); 
     if (Y_AXIS)
    set_val(AIM_V, (Current_Value - Aim_Correction_Val));            
    }
    }
    else //--moving left
    {
    if (Boost)
    { 
    if (X_AXIS)
    set_val(AIM_H, (Current_Value - Aim_Boost_Val)); 
     if (Y_AXIS)
    set_val(AIM_V, (Current_Value - Aim_Boost_Val));
    }
    else if(Correction)
    {
    if (X_AXIS)
    set_val(AIM_H, (Current_Value + Aim_Correction_Val)); 
     if (Y_AXIS)
    set_val(AIM_V, (Current_Value + Aim_Correction_Val));            
    }
    }
    }
    } 
    
            
        function xy_val(f_axis,f_val) 
     {
     if(abs(get_val(f_axis)) < (_v + 1))  
     return f_val;    
     return get_val(f_axis);     
     } 
//--- [ Snippets/Zen Single Slot ] - / - (  Functions   )  ------! [ABOVE] 
////////////////////////////////////////////////////////////////
//  center_x(number of chars,f_SIZE);
//
//      return Starting X for Centering String Horizontally
////////////////////////////////////////////////////////////////
int temp_x;
function center_x(f_chars,f_size) {
    temp_x = f_chars * FONT_STATS[f_size][WIDTH];
    temp_x = (OLED_WIDTH / 2) - (temp_x / 2);
    return temp_x;
}
////////////////////////////////////////////////////////////////
//  center_y(font size);
//
//      return Y for Centering String Vertically
////////////////////////////////////////////////////////////////
function center_y(f_size) {
    return (OLED_HEIGHT / 2) - (FONT_STATS[f_size][HEIGHT] / 2);
}
function OLDED_SHOW_LOADOUT(size)
{
         cls_oled(BLACK);
ZEN_PRINT_WEAPON(PRI_STRING,size,1,0)
ZEN_PRINT_WEAPON(SEC_STRING,size,2 + FONT_STATS[size][HEIGHT],0)
}
/*
SET WEAPON VALUES BASED ON THE WEAPON STRING INDEX
*/
function F_SetWeaponCycle(SHOOTING_MODE,RAPIDFIRE_MODE,RECOIL_AMOUNT,RECOIL_END_1,RECOIL_MAX_1,RECOIL_END_2,RECOIL_MAX_2,PING_SHOT_SPEED,RECOIL_DIFFUSE_TIME,EXTRA_1,EXTRA_2,EXTRA_3,EXTRA_4)
{
if(CYCLE_SET_SLOT==1) {
Set_PRI(SHOOTING_MODE,RAPIDFIRE_MODE,RECOIL_AMOUNT,RECOIL_END_1,RECOIL_MAX_1,RECOIL_END_2,RECOIL_MAX_2,PING_SHOT_SPEED,RECOIL_DIFFUSE_TIME,EXTRA_1,EXTRA_2,EXTRA_3,EXTRA_4)
} else {
Set_SEC(SHOOTING_MODE,RAPIDFIRE_MODE,RECOIL_AMOUNT,RECOIL_END_1,RECOIL_MAX_1,RECOIL_END_2,RECOIL_MAX_2,PING_SHOT_SPEED,RECOIL_DIFFUSE_TIME,EXTRA_1,EXTRA_2,EXTRA_3,EXTRA_4)
}
}
function f_gui_weapon_cycle(vmovement)
{
cls_oled(BLACK);
CYCLE_SET_INDEX=Clamp(CYCLE_SET_INDEX,1,WEAPON_CAT_START_7)
//=========================
if(vmovement <=-1) {
CYCLE_SET_INDEX=CYCLE_SET_INDEX -  1
} else if(vmovement==1) {
CYCLE_SET_INDEX=CYCLE_SET_INDEX +  1
}
CYCLE_SET_INDEX=Clamp(CYCLE_SET_INDEX,1,WEAPON_CAT_START_7)
//=========================
ZEN_PRINT_WEAPON(CYCLE_SET_INDEX,MEDIUM,-1,0) // WEAPON CYCLE FONT
}
function DrawProgressBar(current_value,max,dx,dy,pbar_w,pbar_h)
{
f_tval=(current_value / max) / 1
if(f_tval >= 1 ) {
f_tval=1
}
if(current_value != 0) {
if((current_value / max) != 0 ) {
rect_oled( dx , dy, pbar_w *  f_tval , pbar_h,1, 1 );
}
}
rect_oled( dx , dy, pbar_w , pbar_h,0, 1 );
}
function F_GUI_ChangeCat(MoveDir) 
{
f_tval=F_ChangeCat(CYCLE_SET_INDEX,MoveDir) // FIND THE NEXT CAT START
tval=0
while(F_ChangeCat(f_tval,MoveDir) ==  f_tval && tval <= 6) { // IF THE CAT AFTER THE NEXT CAT STARTS IN THE SAME PLACE AS THIS ONE, THEN THIS IS A EMPTY CAT SO SKIP TO NEXT
tval=tval + 1
f_tval=F_ChangeCat(CYCLE_SET_INDEX,MoveDir)
}
if(F_ChangeCat(f_tval,MoveDir) ==  f_tval ) {
CYCLE_SET_INDEX=0
} else {
CYCLE_SET_INDEX= f_tval
}
CYCLE_SET_INDEX=Clamp(CYCLE_SET_INDEX,1,WEAPON_CAT_START_7)
}
function F_ChangeCat(CURRENT_PLACE,MoveDir)
{
if(CURRENT_PLACE >= WEAPON_CAT_START_6) {
if(MoveDir==1) {
return WEAPON_CAT_START_0
} else if(MoveDir==-1) {
return WEAPON_CAT_START_5
}
} else if(CURRENT_PLACE >= WEAPON_CAT_START_5) {
if(MoveDir==1) {
return WEAPON_CAT_START_6
} else if(MoveDir==-1) {
return WEAPON_CAT_START_4
}
} else if(CURRENT_PLACE >= WEAPON_CAT_START_4) {
if(MoveDir==1) {
return WEAPON_CAT_START_5
} else if(MoveDir==-1) {
return WEAPON_CAT_START_4
}
} else if(CURRENT_PLACE >= WEAPON_CAT_START_3) {
if(MoveDir==1) {
return WEAPON_CAT_START_3
} else if(MoveDir==-1) {
return WEAPON_CAT_START_2
}
} else if(CURRENT_PLACE >= WEAPON_CAT_START_2) {
if(MoveDir==1) {
return WEAPON_CAT_START_2
} else if(MoveDir==-1) {
return WEAPON_CAT_START_1
}
} else if(CURRENT_PLACE >= WEAPON_CAT_START_1) {
if(MoveDir==1) {
return WEAPON_CAT_START_1
} else if(MoveDir==-1) {
return WEAPON_CAT_START_0
}
} else {
if(MoveDir==1) {
return WEAPON_CAT_START_1
} else if(MoveDir==-1) {
return WEAPON_CAT_START_6
}
}
return 0
}
int __pic_w_rifleX, __pic_w_rifleX2, __pic_w_rifleY, __pic_w_rifleY2, __pic_w_rifleBit, __pic_w_rifleOffset, __pic_w_rifleData;
function draw_pic_w_rifle(x, y, invert) {
    __pic_w_rifleOffset = 2; // Reset the starting point
    __pic_w_rifleBit = 16; // Reset bit flag
    for (__pic_w_rifleY = 0; __pic_w_rifleY < pic_w_rifle[1]; __pic_w_rifleY++) { // Loop the Y axis
        for (__pic_w_rifleX = 0; __pic_w_rifleX < pic_w_rifle[0]; __pic_w_rifleX++) { // Loop the X axis
            __pic_w_rifleData = pic_w_rifle[__pic_w_rifleOffset]
            __pic_w_rifleX2 = x + __pic_w_rifleX;
            __pic_w_rifleY2 = y + __pic_w_rifleY;
            if (__pic_w_rifleX2 < 0 || __pic_w_rifleX2 >= 128) {
                __pic_w_rifleX2 -= 128;
            }
            if (__pic_w_rifleY2 < 0 || __pic_w_rifleY2 >= 64) {
                __pic_w_rifleY2 -= 64;
            }
            if (test_bit(__pic_w_rifleData, __pic_w_rifleBit - 1)) {
                pixel_oled(__pic_w_rifleX2, __pic_w_rifleY2, !invert);
            }
            else {
                pixel_oled(__pic_w_rifleX2, __pic_w_rifleY2, invert);
            }
            __pic_w_rifleBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_w_rifleBit) { // Check if we've just handled the last bit
                __pic_w_rifleBit = 16; // Reset the bit flag
                __pic_w_rifleOffset++; // Move to the next value
            }
        }
    }
}
function draw_pic_smg(x, y, invert) {
    __pic_smgOffset = 2; // Reset the starting point
    __pic_smgBit = 16; // Reset bit flag
    for (__pic_smgY = 0; __pic_smgY < pic_smg[1]; __pic_smgY++) { // Loop the Y axis
        for (__pic_smgX = 0; __pic_smgX < pic_smg[0]; __pic_smgX++) { // Loop the X axis
            __pic_smgData = pic_smg[__pic_smgOffset]
            __pic_smgX2 = x + __pic_smgX;
            __pic_smgY2 = y + __pic_smgY;
            if (__pic_smgX2 < 0 || __pic_smgX2 >= 128) {
                __pic_smgX2 -= 128;
            }
            if (__pic_smgY2 < 0 || __pic_smgY2 >= 64) {
                __pic_smgY2 -= 64;
            }
            if (test_bit(__pic_smgData, __pic_smgBit - 1)) {
                pixel_oled(__pic_smgX2, __pic_smgY2, !invert);
            }
            else {
                pixel_oled(__pic_smgX2, __pic_smgY2, invert);
            }
            __pic_smgBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_smgBit) { // Check if we've just handled the last bit
                __pic_smgBit = 16; // Reset the bit flag
                __pic_smgOffset++; // Move to the next value
            }
        }
    }
}
function draw_pic_driving(x, y, invert) {
    __pic_drivingOffset = 2; // Reset the starting point
    __pic_drivingBit = 16; // Reset bit flag
    for (__pic_drivingY = 0; __pic_drivingY < pic_driving[1]; __pic_drivingY++) { // Loop the Y axis
        for (__pic_drivingX = 0; __pic_drivingX < pic_driving[0]; __pic_drivingX++) { // Loop the X axis
            __pic_drivingData = pic_driving[__pic_drivingOffset]
            __pic_drivingX2 = x + __pic_drivingX;
            __pic_drivingY2 = y + __pic_drivingY;
            if (__pic_drivingX2 < 0 || __pic_drivingX2 >= 128) {
                __pic_drivingX2 -= 128;
            }
            if (__pic_drivingY2 < 0 || __pic_drivingY2 >= 64) {
                __pic_drivingY2 -= 64;
            }
            if (test_bit(__pic_drivingData, __pic_drivingBit - 1)) {
                pixel_oled(__pic_drivingX2, __pic_drivingY2, !invert);
            }
            else {
                pixel_oled(__pic_drivingX2, __pic_drivingY2, invert);
            }
            __pic_drivingBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_drivingBit) { // Check if we've just handled the last bit
                __pic_drivingBit = 16; // Reset the bit flag
                __pic_drivingOffset++; // Move to the next value
            }
        }
    }
}
function draw_pic_w_pistol(x, y, invert) {
    __pic_w_pistolOffset = 2; // Reset the starting point
    __pic_w_pistolBit = 16; // Reset bit flag
    for (__pic_w_pistolY = 0; __pic_w_pistolY < pic_w_pistol[1]; __pic_w_pistolY++) { // Loop the Y axis
        for (__pic_w_pistolX = 0; __pic_w_pistolX < pic_w_pistol[0]; __pic_w_pistolX++) { // Loop the X axis
            __pic_w_pistolData = pic_w_pistol[__pic_w_pistolOffset]
            __pic_w_pistolX2 = x + __pic_w_pistolX;
            __pic_w_pistolY2 = y + __pic_w_pistolY;
            if (__pic_w_pistolX2 < 0 || __pic_w_pistolX2 >= 128) {
                __pic_w_pistolX2 -= 128;
            }
            if (__pic_w_pistolY2 < 0 || __pic_w_pistolY2 >= 64) {
                __pic_w_pistolY2 -= 64;
            }
            if (test_bit(__pic_w_pistolData, __pic_w_pistolBit - 1)) {
                pixel_oled(__pic_w_pistolX2, __pic_w_pistolY2, !invert);
            }
            else {
                pixel_oled(__pic_w_pistolX2, __pic_w_pistolY2, invert);
            }
            __pic_w_pistolBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_w_pistolBit) { // Check if we've just handled the last bit
                __pic_w_pistolBit = 16; // Reset the bit flag
                __pic_w_pistolOffset++; // Move to the next value
            }
        }
    }
}
function draw_pic_w_assault(x, y, invert) {
    __pic_w_assaultOffset = 2; // Reset the starting point
    __pic_w_assaultBit = 16; // Reset bit flag
    for (__pic_w_assaultY = 0; __pic_w_assaultY < pic_w_assault[1]; __pic_w_assaultY++) { // Loop the Y axis
        for (__pic_w_assaultX = 0; __pic_w_assaultX < pic_w_assault[0]; __pic_w_assaultX++) { // Loop the X axis
            __pic_w_assaultData = pic_w_assault[__pic_w_assaultOffset]
            __pic_w_assaultX2 = x + __pic_w_assaultX;
            __pic_w_assaultY2 = y + __pic_w_assaultY;
            if (__pic_w_assaultX2 < 0 || __pic_w_assaultX2 >= 128) {
                __pic_w_assaultX2 -= 128;
            }
            if (__pic_w_assaultY2 < 0 || __pic_w_assaultY2 >= 64) {
                __pic_w_assaultY2 -= 64;
            }
            if (test_bit(__pic_w_assaultData, __pic_w_assaultBit - 1)) {
                pixel_oled(__pic_w_assaultX2, __pic_w_assaultY2, !invert);
            }
            else {
                pixel_oled(__pic_w_assaultX2, __pic_w_assaultY2, invert);
            }
            __pic_w_assaultBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_w_assaultBit) { // Check if we've just handled the last bit
                __pic_w_assaultBit = 16; // Reset the bit flag
                __pic_w_assaultOffset++; // Move to the next value
            }
        }
    }
}
int __pic_sniperX, __pic_sniperX2, __pic_sniperY, __pic_sniperY2, __pic_sniperBit, __pic_sniperOffset, __pic_sniperData;
function draw_pic_sniper(x, y, invert) {
    __pic_sniperOffset = 2; // Reset the starting point
    __pic_sniperBit = 16; // Reset bit flag
    for (__pic_sniperY = 0; __pic_sniperY < pic_sniper[1]; __pic_sniperY++) { // Loop the Y axis
        for (__pic_sniperX = 0; __pic_sniperX < pic_sniper[0]; __pic_sniperX++) { // Loop the X axis
            __pic_sniperData = pic_sniper[__pic_sniperOffset]
            __pic_sniperX2 = x + __pic_sniperX;
            __pic_sniperY2 = y + __pic_sniperY;
            if (__pic_sniperX2 < 0 || __pic_sniperX2 >= 128) {
                __pic_sniperX2 -= 128;
            }
            if (__pic_sniperY2 < 0 || __pic_sniperY2 >= 64) {
                __pic_sniperY2 -= 64;
            }
            if (test_bit(__pic_sniperData, __pic_sniperBit - 1)) {
                pixel_oled(__pic_sniperX2, __pic_sniperY2, !invert);
            }
            else {
                pixel_oled(__pic_sniperX2, __pic_sniperY2, invert);
            }
            __pic_sniperBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_sniperBit) { // Check if we've just handled the last bit
                __pic_sniperBit = 16; // Reset the bit flag
                __pic_sniperOffset++; // Move to the next value
            }
        }
    }
}
int __pic_shottyX, __pic_shottyX2, __pic_shottyY, __pic_shottyY2, __pic_shottyBit, __pic_shottyOffset, __pic_shottyData;
function draw_pic_shotty(x, y, invert) {
    __pic_shottyOffset = 2; // Reset the starting point
    __pic_shottyBit = 16; // Reset bit flag
    for (__pic_shottyY = 0; __pic_shottyY < pic_shotty[1]; __pic_shottyY++) { // Loop the Y axis
        for (__pic_shottyX = 0; __pic_shottyX < pic_shotty[0]; __pic_shottyX++) { // Loop the X axis
            __pic_shottyData = pic_shotty[__pic_shottyOffset]
            __pic_shottyX2 = x + __pic_shottyX;
            __pic_shottyY2 = y + __pic_shottyY;
            if (__pic_shottyX2 < 0 || __pic_shottyX2 >= 128) {
                __pic_shottyX2 -= 128;
            }
            if (__pic_shottyY2 < 0 || __pic_shottyY2 >= 64) {
                __pic_shottyY2 -= 64;
            }
            if (test_bit(__pic_shottyData, __pic_shottyBit - 1)) {
                pixel_oled(__pic_shottyX2, __pic_shottyY2, !invert);
            }
            else {
                pixel_oled(__pic_shottyX2, __pic_shottyY2, invert);
            }
            __pic_shottyBit--; // Decrement the bit flag, we're moving to the next bit
            if (!__pic_shottyBit) { // Check if we've just handled the last bit
                __pic_shottyBit = 16; // Reset the bit flag
                __pic_shottyOffset++; // Move to the next value
            }
        }
    }
}


   