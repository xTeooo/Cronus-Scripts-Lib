// GPC Online Library
// aim_assist_&_2_aim_abuse_"fortnite"_script.gpc

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*  ______    ____    _____    _______   _   _   _____   _______   ______      _____    _____   _____    _____   _____    _______        /
 |  ____|  / __ \  |  __ \  |__   __| | \ | | |_   _| |__   __| |  ____|    / ____|  / ____| |  __ \  |_   _| |  __ \  |__   __|         /
 | |__    | |  | | | |__) |    | |    |  \| |   | |      | |    | |__      | (___   | |      | |__) |   | |   | |__) |    | |            /
 |  __|   | |  | | |  _  /     | |    | . ` |   | |      | |    |  __|      \___ \  | |      |  _  /    | |   |  ___/     | |            /
 | |      | |__| | | | \ \     | |    | |\  |  _| |_     | |    | |____     ____) | | |____  | | \ \   _| |_  | |         | |            /
 |_|       \____/  |_|  \_\    |_|    |_| \_| |_____|    |_|    |______|   |_____/   \_____| |_|  \_\ |_____| |_|         |_|            /
                                                                                                                                         /
*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
//CREDITS TO SWEET EVIL USED HIS 4.65/////////////////////////////////////////////////////////////////////////////////////////////////////
//CREDITS TO WALTER & EXCALIBER V3 AIM ASSIST///////////////////////////////////////////////////////////////////////////////////////////
//BY FORTNITE79///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Dropshot  
int Dropshot  = TRUE;//L2 & SQUARE

//Swapp Triggers
int R1L1 = FALSE; //CHANGE FALSE TO TRUE IF YOU AIM & SHOOT WITH L1 & R1
int XR3 = FALSE; //CHANGE FALSE TO TRUE If YOU JUMP WITH R3 & CROUCH WITH X

//Aim Assist 
int AimAssist  = TRUE
int aav  = 19;// AIM ASSIST VALUES
int aav2 = -19;//AIM ASSIST VALUES

int value  = 19;
int value2 =-19;
int delay  = 20;

//Aim Abuse
int  AimAbuse  = TRUE;
int AimAbuse_HOLD = 310; //How long you HOLD ADS Button
int AimAbuse_RELEASE = 15;//How long you release ADS Button

//Rumble
int rumble_type     = RUMBLE_A;
int Notify          = TRUE

//LED
int a; int b;

//Layout
define FIRE_BTN = 4;    //XB1_RB //PS4_R2
define ADS_BTN = 7;     //XB1_LB //PS4_L2
define CROUCH_BTN = 5;  //XB1_RS //PS4_R3
define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
define SPRINT_BTN = 8;  //XB1_LS //PS4_L3
define JUMP_BTN = 19;   //XB1_A  //PS4_CROSS
define NEXT_PIECE = 3;  //XB1_RT //PS4_R1
define RIGHT_BUMP = 3;  // XB1_RB //PS4_R1
define LEFT_BUMP = 6;   //ADS_BTN //PS4_L1
define SWAP_BTN = 17;   //XB1_Y  //PS4_TRIANGLE
define BUILD_BTN = 18;  //XB1_B  //PS4_CIRCLE
define R_X = 9;         //XB1_R_X //PS4_R_X
define R_Y = 10;        //XB1_R_Y //PS4_R_Y
define L_X = 11;        //XB1_L_X //PS4_L_X
define L_Y = 12;        //XB1_L_Y //PS4_L_Y
define UP = 13;         //XB1_UP //PS4_UP
define DOWN = 14;       //XB1_DOWN //PS4_DOWN
define LEFT = 15;       //XB1_LEFT //PS4_LEFT
define RIGHT = 16;      //XB1_RIGHT //PS4_RIGHT
//sweetevils 4.65//////////////////////////////
define Sampling_Time = 8;//10
define Aim_Boost = 7;//7
define Aim_Correction = 12;//12
define Aim_Perfection_Limit = 30;//30
define POS_Aim_Limit = 75;
define NEG_Aim_Limit = -75;
define POS_Micro_MVT_Limit = 25;//25
define NEG_Micro_MVT_Limit = -25;//25
int X_Last_Value     = 0;
int Y_Last_Value     = 0;
int X_Current_Value  = 0;
int Y_Current_Value  = 0;
int Sampling_Done = FALSE;
int micro_mvt = FALSE;
//
int spiroide_pulse = 0;
int fine_pulse = 0;
//
// Joystick calibration value
int Joystick_calibration = FALSE;
int RX_Axis_Joystick_calibrate = 0; 
int RY_Axis_Joystick_calibrate = 0;

 main {
  //Swapp Triggers 
    if(R1L1) {
    swap(3,4); 
    swap(6,7);}
    
    //Swap CROSS/A To R3/RS
    if(XR3)              
    swap(19,5);
    
   
//AIM ASSIST
if (AimAssist) {
   if (get_val(ADS_BTN)) {
   combo_run(AimAssist);}}
   if (get_val(R_X)<value2||get_val(R_X)>value||get_val(R_Y)<value2||get_val(R_Y)>value||get_val(R_X)<value2||get_val(R_X)>value||get_val(R_Y)<value2||get_val(R_Y)>value){
         combo_stop(AimAssist);}
         
     
//AIM ABUSE
if(get_val(ADS_BTN) && event_press(LEFT)){
   AimAbuse =! AimAbuse; 
   if(AimAbuse == TRUE){combo_run(Notify);a=0;b=2;} 
   if(AimAbuse == FALSE){combo_run(Notify);a=2;b=0;}
    rumble_A_if_true(AimAbuse);
}

if(AimAbuse){
   if(get_val(ADS_BTN)> 95){
      combo_run(AimAbuse);}
   if(event_release(ADS_BTN)){ combo_stop(AimAbuse);
}


//Dropshot
if(get_val(ADS_BTN) && event_press(RELOAD_BTN)){
   Dropshot =! Dropshot;
   if(Dropshot == TRUE){combo_run(Notify);a=0;b=2;}
   if(Dropshot == FALSE){combo_run(Notify);a=2;b=0;}
   rumble_A_if_true(Dropshot);
   }
    if (Dropshot) {                                
    if (get_val(ADS_BTN) && get_val(FIRE_BTN) ) {  
            combo_run(Dropshot);                    
        }                                            
    }
  
   
 if (Joystick_calibration == FALSE)
            {
                RX_Axis_Joystick_calibrate = get_val(PS4_RX); 
                RY_Axis_Joystick_calibrate = get_val(PS4_RY); 
                Joystick_calibration = TRUE;     
            }
 
        X_Last_Value = X_Current_Value;
        Y_Last_Value = Y_Current_Value;
        X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
        Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate;
 
        if(get_val(PS4_L2))
            {
            	if(abs(X_Current_Value) <= POS_Micro_MVT_Limit && abs(Y_Current_Value) <= POS_Micro_MVT_Limit)
                //if(get_lval(PS4_RX) > NEG_Micro_MVT_Limit || get_lval(PS4_RX) < POS_Micro_MVT_Limit || get_lval(PS4_RY) > NEG_Micro_MVT_Limit || get_lval(PS4_RY) < POS_Micro_MVT_Limit
                //|| get_lval(PS4_RX) > NEG_Micro_MVT_Limit || get_lval(PS4_RX) < POS_Micro_MVT_Limit || get_lval(PS4_RY) > NEG_Micro_MVT_Limit || get_lval(PS4_RY) < POS_Micro_MVT_Limit)
                    {
                       if ((X_Last_Value >=0 && X_Current_Value >=0) || (X_Last_Value <=0 && X_Current_Value <=0))
           				 {
			                if (abs(abs(X_Last_Value)-abs(X_Current_Value))<15)
			                    {
			                        micro_mvt = TRUE;
			                    }
			                else
			                    {
			                        micro_mvt = FALSE;
			                    }        
			            }
			        else if ((X_Last_Value <=0 && X_Current_Value >=0) || (X_Last_Value >=0 && X_Current_Value <=0))
			            {
 
			                if (abs(X_Last_Value)+abs(X_Current_Value)<15)
			                    {
			                        micro_mvt = TRUE;
			                    }
			                else
			                    {
			                        micro_mvt = FALSE;
			                    }        
			            }
			        else{
			                micro_mvt = FALSE;
			            }
 
                       if(micro_mvt == TRUE)
                               {
                                   combo_stop(Aim_Assist_Perfection);
                                Sampling_Done = FALSE;
                               }
                           if (!combo_running(Aim_Assist_Perfection))
                               {
                                   if (get_val(PS4_R2)>95)
                                {
                                    combo_stop(Fine_Tune_Aim);
                                    fine_pulse = 0;
                                    combo_run(spiroide_Aim_Assit);
                                }
                                else
                                {
                                    combo_stop(spiroide_Aim_Assit);
                                    spiroide_pulse = 0;
                                    combo_run(Fine_Tune_Aim);
                                }
                               }                      
 
                    }
                else if(abs(X_Current_Value) <= POS_Aim_Limit && abs(Y_Current_Value) <= POS_Aim_Limit)
                    {
                        combo_stop(Fine_Tune_Aim);
                        combo_stop(spiroide_Aim_Assit);
                        spiroide_pulse = 0;
                        fine_pulse = 0;
                        combo_run(Aim_Assist_Perfection);
 
                    }
                else 
                    {
                        combo_stop(Fine_Tune_Aim);
                        combo_stop(spiroide_Aim_Assit);
                        combo_stop(Aim_Assist_Perfection);
                        spiroide_pulse = 0;
                        fine_pulse = 0;
                        Sampling_Done = FALSE;    
                    }
            }
        else
            {
                combo_stop(Fine_Tune_Aim);
                combo_stop(spiroide_Aim_Assit);
                combo_stop(Aim_Assist_Perfection);
                spiroide_pulse = 0;
                fine_pulse = 0;
                Sampling_Done = FALSE;    
 
            }
        }
 }

//LEDs.
// If the LED flashes Green, you have enabled a modification.
// If the LED flashes Red, you have disabled a modification.
// If the LED flashes Yellow, you are using an un-togglable modification.

combo Notify {
if(Notify){set_rumble(RUMBLE_B,65);}
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(550);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, 0);
set_led(LED_3, 0);
set_led(LED_4, 0);
wait(250);
set_led(LED_1, 0);
set_led(LED_2, a);
set_led(LED_3, b);
set_led(LED_4, 0);
wait(250);
reset_leds();
}

combo Dropshot{
set_val(CROUCH_BTN,100);
wait(80);
wait(60);
set_val(CROUCH_BTN,100);
}

combo AimAssist {
set_val(R_Y, (aav));
wait(delay)
set_val(R_X, (aav));
wait(delay)
set_val(R_Y, (aav2));
wait(delay)
set_val(R_X, (aav2));
wait(delay)
set_val(R_Y, (aav));
wait(delay)
set_val(R_X, (aav));
wait(delay)
set_val(R_Y, (aav2));
wait(delay)
set_val(R_X, (aav2));
wait(delay)
}

combo AimAbuse {
set_val(ADS_BTN, 100);
wait(AimAbuse_HOLD);
set_val(ADS_BTN, 0);
wait(AimAbuse_RELEASE);
}    

combo Vibrate {
set_rumble(rumble_type, 100);
wait(300);
reset_rumble();
}


function rumble_A_if_true(var) {
if (var) rumble_type = RUMBLE_A;
else rumble_type = RUMBLE_B;
combo_run(Vibrate);
}
combo Aim_Assist_Perfection 
    {        
        // Save the first joystick position 
        X_Last_Value = X_Current_Value
        Y_Last_Value = Y_Current_Value
 
        // Sampling frequency 
        wait(Sampling_Time);
 
        // Save the second joystick position 
        X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
        Y_Current_Value = get_lval(PS4_RY)- RY_Axis_Joystick_calibrate; 
 
     if (Sampling_Done == TRUE )
         {
         if (X_Last_Value > 0 && X_Current_Value > 0)
            {  
                if (X_Last_Value > X_Current_Value)
                    {
                        if ( X_Last_Value - X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value + Aim_Boost)); 
                            }
                    }
                else
                    {
                        if ( X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value - Aim_Boost)); 
                            }
                    }
            }
         else if (X_Last_Value > 0 && X_Current_Value < 0)
            {
                    if ( X_Last_Value + X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value + Aim_Boost)); 
                            }     
            }
        else if (X_Last_Value < 0 && X_Current_Value > 0)
            {
                if (  X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                    {
                         set_val(PS4_RX, (X_Current_Value - Aim_Boost)); 
                    }                
            }
        else 
            {
                if (X_Last_Value > X_Current_Value)
                    {
                        if ( X_Last_Value - X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value - Aim_Boost)); 
                            }
                    }
                else
                    {
                        if ( X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value + Aim_Boost)); 
                            } 
                    }
            }
 
 
         if (Y_Last_Value > 0 && Y_Current_Value > 0)
            {  
                if (Y_Last_Value > Y_Current_Value)
                    {
                        if ( Y_Last_Value - Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value + Aim_Boost)); 
                            }
                    }
                else
                    {
                        if ( Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value - Aim_Boost)); 
                            }
                    }
            }
         else if (Y_Last_Value > 0 && Y_Current_Value < 0)
            {
                    if ( Y_Last_Value + Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value + Aim_Boost)); 
                            }     
            }
        else if (Y_Last_Value < 0 && Y_Current_Value > 0)
            {
                if (  Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                    {
                         set_val(PS4_RY, (Y_Current_Value - Aim_Boost)); 
                    }                
            }
        else 
            {
                if (Y_Last_Value > Y_Current_Value)
                    {
                        if ( Y_Last_Value - Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value - Aim_Boost)); 
                            }
                    }
                else
                    {
                        if ( Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value + Aim_Boost)); 
                            } 
                    }
            }
 
        }
 
        X_Last_Value = X_Current_Value;
        Y_Last_Value = Y_Current_Value;
 
        // Sampling frequency 
        wait(Sampling_Time);
 
        // Save the second joystick position 
        X_Current_Value = get_lval(PS4_RX)- RX_Axis_Joystick_calibrate;
        Y_Current_Value = get_lval(PS4_RY)- RX_Axis_Joystick_calibrate; 
    if (Sampling_Done == TRUE )
        {
         if (X_Last_Value > 0 && X_Current_Value > 0)
            {  
                if (X_Last_Value > X_Current_Value)
                    {
                        if ( X_Last_Value - X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value - Aim_Correction)); 
                            }
                    }
                else
                    {
                        if ( X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value + Aim_Correction)); 
                            }
                    }
            }
         else if (X_Last_Value > 0 && X_Current_Value < 0)
            {
                    if ( X_Last_Value + X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value - Aim_Correction)); 
                            }     
            }
        else if (X_Last_Value < 0 && X_Current_Value > 0)
            {
                if (  X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                    {
                         set_val(PS4_RX, (X_Current_Value + Aim_Correction)); 
                    }                
            }
        else 
            {
                if (X_Last_Value > X_Current_Value)
                    {
                        if ( X_Last_Value - X_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value + Aim_Correction)); 
                            }
                    }
                else
                    {
                        if ( X_Current_Value - X_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RX, (X_Current_Value - Aim_Correction)); 
                            } 
                    }
            }
 
 
         if (Y_Last_Value > 0 && Y_Current_Value > 0)
            {  
                if (Y_Last_Value > Y_Current_Value)
                    {
                        if ( Y_Last_Value - Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value - Aim_Correction)); 
                            }
                    }
                else
                    {
                        if ( Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value + Aim_Correction)); 
                            }
                    }
            }
         else if (Y_Last_Value > 0 && Y_Current_Value < 0)
            {
                    if ( Y_Last_Value + Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value - Aim_Correction)); 
                            }     
            }
        else if (Y_Last_Value < 0 && Y_Current_Value > 0)
            {
                if (  Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                    {
                         set_val(PS4_RY, (Y_Current_Value + Aim_Correction)); 
                    }                
            }
        else 
            {
                if (Y_Last_Value > Y_Current_Value)
                    {
                        if ( Y_Last_Value - Y_Current_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value + Aim_Correction)); 
                            }
                    }
                else
                    {
                        if ( Y_Current_Value - Y_Last_Value < Aim_Perfection_Limit)
                            {
                                 set_val(PS4_RY, (Y_Current_Value - Aim_Correction)); 
                            } 
                    }
            }
        }
 
        Sampling_Done = TRUE; 
        wait(Sampling_Time);
    }
 
 
 
combo Fine_Tune_Aim {
 
    set_val(PS4_RX,(4 + fine_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
    wait(Sampling_Time);
 
    set_val(PS4_RX,(-4 - fine_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
    wait(Sampling_Time);
 
    fine_pulse = fine_pulse + 2;
 
 
    if ( fine_pulse > 10)
       {
            fine_pulse = 0;   
        }
   }
 
    combo spiroide_Aim_Assit {
 
 
    set_val(PS4_RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
 
    set_val(PS4_RX,(4 + spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
 
    set_val(PS4_RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
 
    set_val(PS4_RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
 
    set_val(PS4_RX,(-4 - spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
 
    set_val(PS4_RY,(5 + spiroide_pulse));
    wait(Sampling_Time);
 
    wait(Sampling_Time);
    wait(Sampling_Time);
    wait(Sampling_Time);
 
    spiroide_pulse = spiroide_pulse + 2;
 
 
    if ( spiroide_pulse > 10)
       {
            spiroide_pulse = 0;   
        }
   }
   
      