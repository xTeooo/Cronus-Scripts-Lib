/*
   _______            ______           ________ __                ________ __  ______  __       ________          _______     __           
  |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \   |  \          
  | ¦¦¦¦¦¦¦\ ______ |  ¦¦¦¦¦¦\________ \¦¦¦¦¦¦¦¦ ¦¦____   ______ | ¦¦¦¦¦¦¦¦\¦¦  ¦¦¦¦¦¦\ ¦¦____  \¦¦¦¦¦¦¦¦ ______ | ¦¦¦¦¦¦¦\  | ¦¦ _______  
  | ¦¦  | ¦¦/      \| ¦¦ __\¦¦        \  | ¦¦  | ¦¦    \ /      \| ¦¦__   |  \ ¦¦ __\¦¦ ¦¦    \   | ¦¦   /      \| ¦¦__| ¦¦   \¦ /       \ 
  | ¦¦  | ¦¦  ¦¦¦¦¦¦\ ¦¦|    \\¦¦¦¦¦¦¦¦  | ¦¦  | ¦¦¦¦¦¦¦\  ¦¦¦¦¦¦\ ¦¦  \  | ¦¦ ¦¦|    \ ¦¦¦¦¦¦¦\  | ¦¦  |  ¦¦¦¦¦¦\ ¦¦    ¦¦     |  ¦¦¦¦¦¦¦ 
  | ¦¦  | ¦¦ ¦¦  | ¦¦ ¦¦ \¦¦¦¦ /    ¦¦   | ¦¦  | ¦¦  | ¦¦ ¦¦    ¦¦ ¦¦¦¦¦  | ¦¦ ¦¦ \¦¦¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦    ¦¦ ¦¦¦¦¦¦¦\      \¦¦    \  
  | ¦¦__/ ¦¦ ¦¦__/ ¦¦ ¦¦__| ¦¦/  ¦¦¦¦_   | ¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦     | ¦¦ ¦¦__| ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦¦¦¦¦¦¦ ¦¦  | ¦¦      _\¦¦¦¦¦¦\ 
  | ¦¦    ¦¦\¦¦    ¦¦\¦¦    ¦¦  ¦¦    \  | ¦¦  | ¦¦  | ¦¦\¦¦     \ ¦¦     | ¦¦\¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦   \¦¦     \ ¦¦  | ¦¦     |       ¦¦ 
   \¦¦¦¦¦¦¦  \¦¦¦¦¦¦  \¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦   \¦¦   \¦¦   \¦¦ \¦¦¦¦¦¦¦\¦¦      \¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦    \¦¦¦¦¦¦¦\¦¦   \¦¦      \¦¦¦¦¦¦¦  

                   ________ ________ __    __      _______  ________  ______  ______  ______  __    __ ________ _______    
                 |        \        \  \  |  \    |       \|        \/      \|      \/      \|  \  |  \        \       \   
                  \¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦    | ¦¦¦¦¦¦¦\ ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\\¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦\ | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦\  
                     /  ¦¦| ¦¦__   | ¦¦¦\| ¦¦    | ¦¦  | ¦¦ ¦¦__   | ¦¦___\¦¦ | ¦¦ | ¦¦ __\¦¦ ¦¦¦\| ¦¦ ¦¦__   | ¦¦__| ¦¦  
                    /  ¦¦ | ¦¦  \  | ¦¦¦¦\ ¦¦    | ¦¦  | ¦¦ ¦¦  \   \¦¦    \  | ¦¦ | ¦¦|    \ ¦¦¦¦\ ¦¦ ¦¦  \  | ¦¦    ¦¦  
                   /  ¦¦  | ¦¦¦¦¦  | ¦¦\¦¦ ¦¦    | ¦¦  | ¦¦ ¦¦¦¦¦   _\¦¦¦¦¦¦\ | ¦¦ | ¦¦ \¦¦¦¦ ¦¦\¦¦ ¦¦ ¦¦¦¦¦  | ¦¦¦¦¦¦¦\  
                  /  ¦¦___| ¦¦_____| ¦¦ \¦¦¦¦    | ¦¦__/ ¦¦ ¦¦_____|  \__| ¦¦_| ¦¦_| ¦¦__| ¦¦ ¦¦ \¦¦¦¦ ¦¦_____| ¦¦  | ¦¦  
                 |  ¦¦    \ ¦¦     \ ¦¦  \¦¦¦    | ¦¦    ¦¦ ¦¦     \\¦¦    ¦¦   ¦¦ \\¦¦    ¦¦ ¦¦  \¦¦¦ ¦¦     \ ¦¦  | ¦¦  
                  \¦¦¦¦¦¦¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦     \¦¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦  

                            		  ***** CRONUSMAX OR ZEN SCRIPT FOR COD/APEX/FPS SHOOTERS *****
                            
******************** You Created This Script At 01:00:41 On 31/01/2021 Using DoGzTheFiGhTeRs Zen Designer 8 ) ********************

// MOD TOGGLES SET BY DEFAULT

// L2/LT && UP       = RAPID FIRE
// L2/LT && DOWN     = PRONE SHOT
// L2/LT && LEFT     = CROUCH SHOT 
// L2/LT && RIGHT    = PRONE SHOT
// L2/LT && SQUARE/X = JUMP SHOT

// RECOIL HOLD BUTTON = CROSS AND PRESS ( UP ) OR ( DOWN ) OR ( LEFT ) OR ( RIGHT ) TO ADJUST RECOIL VIBRATION WILL BE FELT **ADJUSTABLE RECOIL**

// *IF YOU GO OVER VALUE 100 Or UNDER VALUE 0 IT WILL REVERT BACK TO THE DEFAULT VALUE*      (VERTICAL)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Jump     = PS4_CROSS;
define Build    = PS4_CIRCLE;
define Pickaxe  = PS4_TRIANGLE;
define Crouch   = PS4_R3;
define Wall     = PS4_R2;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;

// In Game Edit Buttons
define Edit     = PS4_CIRCLE;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Buttons                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define EditAssist    = PS4_L3;   // SET AS EDIT ONLY IN GAME USED FOR FAST RESET ALSO ** EVEN WHEN EDIT ASSIST IN UNUSED **
define FastReset     = PS4_TOUCH;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define PumpWallHold   = PS4_L2;
define PumpWallPress  = PS4_R1;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
// ** HOLD ADS + PRESS ONE OF THE FOLLOWING FOR TOGGLES**    *** Do Not Select The Same Button As RecoilHoldOnFly For Mod Toggles If Using Recoil On The Fly ***
define DropShotPress    = PS4_LEFT;
define JumpShotPress    = PS4_SQUARE;
define FireModPress     = PS4_UP;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
int Shunt,EditT,Edit1,Edit2,Axe;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,PolFine;
int DoGzVal,DoGzVersion2,TimeDoGz,DoGzPos = 1;
int DoGzi,DoGzs,DoGzb,DoGzf,DoGzy = 20; // **Do Not Touch**
int DoGzYMove,DoGzValY,DoGzSteady,DoGzDRY,VibA;
define Prf = Off;
define Paf = Off;

int RadiusFlow = Prf;
int AngleFlow  = Paf;
int Pvid;
int RadFlow = On;
int AngFlow = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//Aim Assist Settings/Values
define DoGzStrength  =  2;  // ** Aim Assist One **  1 To 4  (1=10,2=20,3=30,4-40) == Strength
define DoGzSpeed     =  3;  // ** Aim Assist One **  1 To 3  (Base Speed On ADS)  (1 = Slowest, 3 = Fastest)
define FineSpeed     =  2;  // ** Aim Assist One **  1 To 3  (Speed Boost On FIRE)(1 = Slowest, 3 = Fastest)
define DoGzFined     = 10;  // ** Aim Assist One **  5 To 10 (Fine Tune On FIRE)  (5 = Finest, 10 = Largest)

define PolarRadius   = 15;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarAngle    = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarRBoost   =  6;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarABoost   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define DAMFine       = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarRelease  = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Three **

define ProgPowerMin  = -10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgPowerMax  = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgPowerInc  = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitMin   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitMax   = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitInc   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgRelease   = 35;	// ** Aim Assist Two **   Or   ** Aim Assist Four **

int    DoGzAAMin     = -5;	// ** Aim Assist Two **   Or   ** Aim Assist Five **
int    DoGzAAMax     =  5;	// ** Aim Assist Two **   Or   ** Aim Assist Five **
define DoGzIncrement =  1;	// ** Aim Assist Two **   Or   ** Aim Assist Five **

define FalloffAARX   = 22;  // ** Aim Assist Six **
define FalloffAARY   = 22;  // ** Aim Assist Six **
define FalloffAAWait = 10;  // ** Aim Assist Six **
define DoGFallReleae = 70;  // ** Aim Assist Six **   Or   ** Aim Assist Five **

// Extra Mods Times Ms
define DropShotWait  = 120;
define JumpShotWait  = 50;
define RapidFireHold = 30;
define RapidFireWait = 30;
define PumpWallHTime = 50;
define PickaxeHold   = 30;

// Anti Recoil Settings/Values
int    DoGzRY        = 20;  //(Initial Power RY Axis)
define DoGzYMovement = 29;  // 1 To 29 (Value Added/Subtracted From Initial Power Of RY Axis)
define DoGzYStep     =  1;  // Step Multiplier Optional (1,2,3,4 Etc Depending on Power) (Used to Multiply Added Value)

// Edit Settings/Times

define EditHoldTime  = 130;// Instant Edit & Reset
define EditDelay     = 30; // Edit Assist

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Enabled                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
// Aim Assist Options (6+ Aim Assists)

define DoGz_DynaPolarAssist_V5 = On; // ** Aim Assist One **
define DoGzBoost       =  On; 		 // ** Aim Assist One ** (Speed Boost On FIRE)**(DoGzPolar)**
define DoGzFine        =  On; 		 // ** Aim Assist One ** (Fine Tune On FIRE)  **(DoGzPolar)**

define DoGzTripleV2    = Off; 		 // ** Aim Assist Two ** (DamPolarAssist,Progression,DoGzAimAssist Settings For Adjustments)(Only Need To Select This On)

define DamPolarAssist  = Off; 		 // ** Aim Assist Three **
define RadiusBoost     = Off; 		 // ** Aim Assist Three **
define AngleBoost      = Off; 		 // ** Aim Assist Three **
define FineBoost       =  On; 		 // ** Aim Assist Three **

define ProgressionAA   = Off; 		 // ** Aim Assist Four **

define DoGzAimAssist   = Off; 		 // ** Aim Assist Five **

define FallOffAA       = Off; 		 // ** Aim Assist Six **

// Extra Mods
define DropShot        =  On;
define JumpShot        =  On;
define RapidFire       =  On;
define PumpWall        =  On;
define InstantPickaxe  =  On;

// Edit Mods
define InstaEditReset  =  On;
define EditHold        =  On;

define QuickEditAssist =  On;
define InstaFastReset  =  On;

//Recoil Options
define DoGz_DynaRecoil_V5 =  On; //(RUMBLE ON IN GAME FOR FULL BENEFIT)
define InvertedYAxis      = Off; //(Recoil Invert RY Axis)
define RecoilOnFly        =  On; //(Set To Off if you Don't want On The Fly Adjustable Recoil Option)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                  On By Default                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/
int FireMod        =  On;// RAPID FIRE ON BY DEFAULT  ** WHEN SLOT FIRST LOADS **
int JumpShotMod    =  On;// JUMP SHOT ON BY DEFAULT   ** WHEN SLOT FIRST LOADS ** ***ONLY CHOOSE ONE JUMP SHOT or DROP SHOT***
int DropShotMod    = Off;// CROUCH SHOT ON BY DEFAULT ** WHEN SLOT FIRST LOADS ** ***ONLY CHOOSE ONE JUMP SHOT or DROP SHOT***

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    	DoGzf = DoGzFined;
    	DoGzVal = DoGzAAMin;
    	DoGzDRY = DoGzRY;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (get_val(Ads) && !get_val(RecoilHoldOnFly)) {
	
		if (DropShot && event_press(DropShotPress)) {
		   
		   Shunt = DropShotPress;
		   DropShotMod = !DropShotMod;
		   JumpShotMod = Off;
		   combo_run(Rumble);
		}
		
		if (JumpShot && event_press(JumpShotPress)) {
		   
		   Shunt = JumpShotPress;
		   JumpShotMod = !JumpShotMod;
		   DropShotMod = Off;
		   combo_run(Rumble);
		}
		
		if (RapidFire && event_press(FireModPress)) {
		   
		   Shunt = FireModPress;
		   FireMod = !FireMod;
		   combo_run(Rumble);
		}
    }
    
    if (QuickEditAssist) {
	 	if (!get_val(Ads) && get_val(EditAssist)) {
			EditAssist();
			Edit1 = On;
		}

			if (event_release(EditAssist)) {
				combo_run(Confirm);
				EditT = Off;
			}
	}

    if (InstaFastReset && !get_val(Ads) && event_press(FastReset)) { 
       Shunt = FastReset;
       combo_run(FastReset);
    }

    if (InstaEditReset) {
        if (EditHold && get_val(Edit) && get_ptime(Edit) > EditHoldTime || !EditHold && event_press(Edit)) {
                Edit1 = On;
                Edit2 = On;
        }

        if (Edit2) {
            if (event_release(Select)) {  
                combo_run (Confirm);
    		}

        }
    }

    if (Edit1 || Edit2) {
        
        if (event_press(Reset)) {  
                combo_run (InstantReset);
            }

                if (event_press(Pickaxe) || event_press(Build) || event_press(Ads)) {
                    Edit1 = Off;
                    Edit2 = Off;
                }
    }
    
        if (InstantPickaxe) {
            if (event_press(Pickaxe)) 
                Axe = On;
        
            if (Axe) {
                if (event_press(Build) || event_press(Ads)) 
                    Axe = Off;
                    
                    if (event_release(Fire))
                        combo_run(Pickaxe);
            }
        }
        
	if (DamPolarAssist || DoGzTripleV2) {

        if (get_val(Ads) && abs(get_val(RX)) <= PolarRelease + 10 && abs(get_val(RY)) <= PolarRelease + 10) {
            
            actual_X = get_val(RX);
            actual_Y = get_val(RY);
            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
            max_Magnitude = (actual_Magnitude < 100);

            if (RadiusBoost && get_val(Fire)) {
                
                Radius = PolarRadius + PolarRBoost;
            }
                
                else {
                    
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_val(Fire)) {
                        Angle = PolarABoost;
                    }
                        
                        else {
                            
                            Angle = 0;
                        }
                         
                        if ((FineBoost && RadiusBoost && get_val(Ads) && !get_val(Fire)) || 
                            (FineBoost && !RadiusBoost && get_val(Ads) && get_val(Fire))) {
                        	
                        	PolFine = DAMFine;
                    	}
                        else {
                            
                            PolFine = 0;
                        }
                        
                angle += PolarAngle + Angle;
                angle = angle % 360;
                sin_angle = DamPolar[angle % 360];
                cos_angle = DamPolar[(angle + 270) % 360];
                cos_angle = (cos_angle * Radius) / 100 % PolFine;
                sin_angle = (sin_angle * Radius) / 100 % PolFine;

            if (actual_Magnitude <= 10) { 
                
                sin_angle -= actual_Y; 
                cos_angle -= actual_X; 
            }
                else { 
                    
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                } 

            Set_Val(RX,cos_angle);
            Set_Val(RY,sin_angle); 
        }
    }

	if (DoGz_DynaPolarAssist_V5 && !get_val(RecoilHoldOnFly)) {
		
		if (get_val(Ads) || get_val(Fire)) {
			
			combo_run(DoGz_DynaPolarAssist_V5);
		}		
			else {
				
				combo_stop(DoGz_DynaPolarAssist_V5);
				DoGzy = 20;
				DoGzi = 0;
			}
					if (DoGzBoost && get_val(Fire)) 
					
					 	DoGzb = FineSpeed;
						
							else  
							
								DoGzb = 0;
				
					if (DoGzFine && get_val(Fire))	
					
					  	DoGzf = DoGzFined;
					 
					 		else 
					 	
					 			DoGzf = 0;
	}				

    if (ProgressionAA || DoGzTripleV2) {        
        
        if (get_val(Ads) && abs(get_val(RX)) <= ProgRelease && abs(get_val(RY)) <= ProgRelease) {
           	
            	RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin,ProgPowerMax,ProgPowerInc,RadFlow,1);
            	AngleFlow = PolarFlow(AngleFlow,ProgWaitMin,ProgWaitMax,ProgWaitInc,AngFlow,2);
                
            	combo_run(Progression);
        }
    }

    if (DoGzAimAssist || DoGzTripleV2){        
        
        if ((get_val(Ads)) || (get_val(Fire))) {
            if (abs(get_val(RX)) <= DoGFallReleae && abs(get_val(RY)) <= DoGFallReleae) {
                
                DoGzVersion2 = On;
                DoGzVersion2();
            }
        }
        
        if (event_release(Ads) || event_release(Fire)) {
            DoGzVal = DoGzAAMin
            DoGzVersion2 = Off;
            DoGzPos = On;
        }
    }

    if (FallOffAA){        
        
        if ((get_val(Ads)) || (get_val(Fire))) {
            if (abs(get_val(RX)) <= DoGFallReleae && abs(get_val(RY)) <= DoGFallReleae) {
                
                combo_run(FallOff);
            }
        }
    }

	if (PumpWall && get_val(PumpWallHold) && event_press(PumpWallPress)) {
        Shunt = PumpWallPress;
        combo_run(PumpWall);
    }
    
    if (!Edit1 && !Edit2) {
    	if (DropShotMod && DropShot && get_val(Fire)) {
        
        	combo_run(DropShot);
    	}    
    
    	if (JumpShotMod && JumpShot && !get_val(Ads) && event_press(Fire)) {
            
            set_val(Jump,100);
    }
    
    	if (FireMod && RapidFire && get_val(Fire)) {
        	
        	combo_run(RapidFire);
    	}    
    }
    
    if (DoGz_DynaRecoil_V5) {
	
		if (get_val(Ads) && get_val(Fire)) {
			
			DoGz_DynaRecoil_V5();
		}
			else {
				
				DoGzSteady = 0;
				DoGzYMove  = 0;
			}
	
		if (RecoilOnFly && get_val(RecoilHoldOnFly)) { 

        	if (event_press(RecoilDownPress)) {
            	DoGzRY += 1;
				combo_run(Rumble);
            }

            	if (event_press(RecoilUpPress)) {
	            	DoGzRY -= 1;
	            	combo_run(Rumble);
            	}
			
			if ((DoGzRY < 1 || DoGzRY > 99)) {
                DoGzRY = DoGzDRY;
            }
			
			set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
    	}
    }        
	    
    if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo Progression {
	
	Set_Val(RY,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RY,RadiusFlow * -1);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow * -1);
	wait(AngleFlow);
}

combo FallOff {

    Set_Val(RY,FalloffAARY);
    Set_Val(RX,FalloffAARX);
    wait(FalloffAAWait);
    Set_Val(RY,FalloffAARY * -1);
    Set_Val(RX,FalloffAARX * -1);
    wait(FalloffAAWait);
}

combo DoGz_DynaPolarAssist_V5 {
    
	if (DoGzi++ > 70) DoGzi = 0;
		if (DoGzy++ > 70) DoGzy = 0;
	
		for (;DoGzs < (DoGzSpeed + DoGzb); DoGzs++) {
			DoGzi++;
			DoGzy++;
		}

		DoGzs = 0;
	
	Set_Val(RY,RYS[DoGzi] * DoGzStrength % DoGzf);
	Set_Val(RX,RYS[DoGzy] * DoGzStrength % DoGzf);
}

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(DropShotWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold);
    Axe = Off;
}

combo PumpWall {

    set_val(Fire,100);
    wait(PumpWallHTime);
 	set_val(Build,100);
    wait(PumpWallHTime);
    set_val(Wall,100);
    wait(PumpWallHTime);
    set_val(Build,100);
    wait(80);
    wait(30);
}

combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
    Edit1 = Off;
	Edit2 = Off;
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo Rumble {
	
		VibA = On;
    if (VibA)
            set_rumble(RUMBLE_B,70);
    
    	wait(250);
    	VibA = Off;
    	reset_rumble();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
function EditAssist () {

    EditT += get_rtime();
        if (get_val(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}

function Press (Button) {

    if (get_val(Button))
        return;
            set_val(Button, 100);
}

function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
        Pfb += Pv;
    
    if(Pfb <= Pfv)  
        return Pfb;
        
        if(Pfb > Pfv) {
            Pvid[Pid] = Off;
            
            return Pfb - Pv;
        }
    }

    else {
        Pfb -= Pv;    
        
        if(Pfb >= Psv)  
            return Pfb;

            if(Pfb < Psv) {
                Pvid[Pid] = On; 
        
                return Pfb + Pv;
            }
    } 
           return Off;    
}

function DoGz_DynaRecoil_V5 () {
   
	if (!DoGzSteady && DoGzYMove >= DoGzYMovement) DoGzSteady = 1;
	
		else if (DoGzSteady && DoGzYMove <= RYX[0]) DoGzSteady = 0;
	
			if (!DoGzSteady && get_rumble(RUMBLE_A)) {
				DoGzYMove++;
			}
				else if (DoGzSteady && get_rumble(RUMBLE_A)) {
					DoGzYMove--;
				}
			
		DoGzValY = (RYX[DoGzYMove] * DoGzYStep);

	if (InvertedYAxis) { 
		
		Set_Val(RY,(DoGzRY + DoGzValY) * -1);
	}	
		else {
			
			Set_Val(RY,(DoGzRY + DoGzValY));
		}
}

function Set_Val(Input,Output) {

      set_val(Input,Clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
        return; 
}

function Clamp(Value,Low,High) { 

	if (Value < Low) 
		return Low; 
		
		if (Value > High) 
			return High;
			
	return Value; 
}

function DoGzVersion2() {
    
    TimeDoGz += get_rtime();
    
    if (DoGzVersion2) {
        if (DoGzPos) {
            DoGzVal += DoGzIncrement;
        }
            else {
                DoGzVal -= DoGzIncrement;
            }

        if (DoGzPos && DoGzVal == DoGzAAMax) 
            DoGzPos = Off;

            if (!DoGzPos && DoGzVal == DoGzAAMin)
                DoGzPos = On;

        if (TimeDoGz < 50)
            Set_Val(RX,DoGzVal);
            
            if (TimeDoGz > 50)
                Set_Val(RY,DoGzVal);
        
        if (TimeDoGz == 100) TimeDoGz = 0;
    }
}

const char RYS [] = {-10,-10,-10,-10, -9, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,10,10,10,10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 5, 4, 3, 2, 1, 0,-1,-2,-3,-4,-5,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-9};                                                                                                                               
const char RYX [] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};

const char DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};