// GPC Online Library
// cod_modern_warfare:_the_perfect_aim_edition_(pae)_-_#1_script_for_cod!_.gpc

/*
___________________________________________________________________________

			 COD Modern Warefare Aim Perfection by 
			   __|  _ \  __|   __|   __|  __|   \ |   __| 
			  (       /  _|  \__ \  (     _|   .  | \__ \ 
			 \___| _|_\ ___| ____/ \___| ___| _|\_| ____/ 
			 Â© CronusMAX(2020). All rights reserved. 
 __________________________________________________________________________	
			
 

 
- ZEN 2.25(in development)- this script has the best anti recoil in town
- this script holds the best version of aim corrections
- it simply is the best script for COD
- this is my personal script, so I only develop it for myself (no support)
- once I have a 100% completed script I will post a generic script for the community (and will offer support again)
- this script will work with on XB1, with SMG, Assault Riffles, Hand Pistols, Shot Gun, Launchers
 
                         
                       A GPC POWER SCRIPT BY CRESCENS FOR ZEN      
 
 
                  ___|         |  |              _|      __ \          |                    
                 |       _` |  |  |       _ \   |        |   |  |   |  __|  |   |           
                 |      (   |  |  |      (   |  __|      |   |  |   |  |    |   |           
                \____| \__,_| _| _|     \___/  _|       ____/  \__,_| \__| \__, |           
   \  |             |                        \ \        /              _|  ____/            
  |\/ |   _ \    _` |   _ \   __|  __ \       \ \  \   /  _` |   __|  |     _` |   __|  _ \ 
  |   |  (   |  (   |   __/  |     |   |       \ \  \ /  (   |  |     __|  (   |  |     __/ 
 _|  _| \___/  \__,_| \___| _|    _|  _|        \_/\_/  \__,_| _|    _|   \__,_| _|   \___| 
                  _ \               _|              |           \    _)                     
                 |   |  _ \   __|  |     _ \   __|  __|        _ \    |  __ `__ \           
                 ___/   __/  |     __|   __/  (     |         ___ \   |  |   |   |          
                _|    \___| _|    _|   \___| \___| \__|     _/    _\ _| _|  _|  _|          
                                                                                                  
                                                                      
  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  
  
                   CALL OF DUTY THE PERFECT AIM EDITION IS BACK!!
                                   STRONGER THEN EVER!                            
                           THE #1 COD SCRIPT WORLD WIDE!                                       
  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__  ____o__                                   
 
 ___________________________________________________________________________________________
 
     BUTTON / STICK LAYOUT    : ALL BUTTON & STICK LAYOUTS ARE SUPPORTED                         
     BUMPERS / TRIGGERS       : DEFAULT & FLIPPED ARE SUPPORTED                    
     VERSION                  : ZEN 2.25 (CURRENTLY IN DEVELOPMENT)
     PLATFORMS                : TESTED ON XBOX ONE ONLY
     INPUT DEVICES            : ALL CONTROLLERS, ELITE CROSS OVER FOR PS4, M&K
     RECOMMENDED FOR          : ADVANCED GPC USERS ONLY
     SCRIPT COMPLETION LEVEL  : 62%
     SCRIPT REQUIRES 3 SLOTS  : COMPILE THE SCRIPT ON 4 EMPTY SLOTS ON YOUR CRONUSMAX (slot 1 -4)
 _____________________________________________________________________________________________
 
 
                               _    ,----------------------------------------------.
                             __))   | INSTRUCTIONS: READ - OR DON`T USE THIS SCRIPT|
                            ( oo)   _)---------------------------------------------'
------------------------ooO--(_)--Ooo---------------------------------------------------
 
 
---------------------------/ START USER CONFIG \------------------------------------------
    USER CONFIGURATION                         
         _              ___   
     ___| |_ ___ ___   |_  |  
    |_ -|  _| -_| . |   _| |_ 
    |___|_| |___|  _|  |_____|
    USER CONFIG |_|Sticks, Buttons
 
 
    
    CHECK THE STICK & BUTTON LAYOUTS BELOW. DO NOT MIND THE CONSOLE/PLATFORM,
    BUT MAKE SURE THAT THE BUTTON DISCRIPTIONS (FIRE, ADS, ETC) MATCHES WITH YOURS.
    IF YOU NEED TO MAKE CHANGES, THERE IS A LIST OF IDENTIFIERS JUST BELOW.
    
    //-- STICKS        */
    define WALK=PS4_LY;                     
    define STRAFE=WII_LX;                    
    define AIM_H=XB360_RX;//AIM HORIZONTAL                  
    define AIM_V=PS3_RY;//AIM VERTICAL                      
 
    //--BUTTONS                         
    define FIRE=XB1_RT;                      
    define ADS=XB1_LT;                        
    define SPRINT=XB1_LS;                
    define TACTICAL=PS4_L1;                
    define LETHAL=PS4_R1;                   
    define PRONE=XB1_RS;                              
    define MELEE=XB1_B;
    define JUMP=XB1_A;
    /*
       PS4_CIRCLE            XB1_B         STICKS: 
       PS4_CROSS             XB1_A
       PS4_R1                XB1_RB
       PS4_R2                XB1_RT        PS4_LY          XB1_LY  
       PS4_R3                XB1_RS        PS4_LX          XB1_LX    
       PS4_L1                XB1_LB        PS4_RX          XB1_RX      
       PS4_L2                XB1_LT        PS4_RY          XB1_RY  
       PS4_L3                XB1_LS        Fore more indentifiers go to the manual: 
                                           tinyurl.com/scriptinstructions     
         _              ___ 
     ___| |_ ___ ___   |_  |
    |_ -|  _| -_| . |  |  _|
    |___|_| |___|  _|  |___|
    USER CONFIG |_| Mod Menu 
                    & Settings   
*/
    define MW_X = 1;// Fill out the first slot 
    define MW_B = 2;// Fill out the second slot
    define MW_A = 3;// Fill out the third slot  
    define MW_Y = 4;// Fill out the third slot  
    int in_game_menu_sens=14; //Fill out your in game sens   
    define aim_sens_corrections=1;// [0 = OFF / 1 = ON 
    int sticky_aim_assist=1;//[0 = OFF / 1 = ON / 2 = POLAR AIM ASSIST] strongest aim assist for COD
    
    define _v=22;//If your screen shakes whilst using aim assist - lower this value (try 22, 20)
    define smart_reload=1;//[0 = OFF / 1 = ON] cancel sprint to reload & cancel reload with fire or ads - calibrate reload times to make it work
    define drop_and_slide_options=1;// [0 = EASY DROP OFF / 1 = DROP WHEN PRONE IS TAPPED SHORTLY (PRESS PRONE TO PRONE)]
    define smart_thumb_stick=2;//[1= Easy Sprint ON / 2 = Easy Sprint ON & Easy Melee, Easy Jump or Easy Prone is ON]
    define l_stick_click = MELEE; //[MELEE = EASY MELEE, JUMP = EASY JUMP, PRONE = EASY PRONE under left stick click]
    define walk_tresh= -99;//Easy sprint stick treshhold (-75 = pressed more than 75%) 
    define StickNoise=10; //Dead Zone value for your thumbsticks (only active when you fire, allowing micro aiming) 
    /*
 
    ---------------------------/ END USER CONFIG \------------------------------------------
      
    -----------------------/ START SHORT INSTRUCTIONS \-------------------------------------
    
    ____________________________ MENU ADS & LEDS ___________________________________________    
     
    HOLD ADS +                      
                     - HOLD VIEW/SHARE   = RESET DEFAULTS (to reset aim correction value and reload time value)
                     - TAP MENU/OPTIONS  = TAP 1X AUTO DEAD SILENCE OFF
                     					   TAP 2X AUTO DEAD SILENCE ON
                     - TAP DOWN			 = TAP 1X = CLASSICAL AIM ASSIST = ON
                     					   TAP 2X = POLAR AIM ASSIST = ON
                     
  
   TAP XB1_SYNC 1X   				= RAPID FIRE ALWAYS ON -> OFF (auto RAPID FIRE detection ON)
   TAP XB1_SYNC 2x (DOUBLE TAP)  	= RAPID FIRE ALWAYS ON -> ON (auto RAPID FIRE detection OFF)
   
                     
 
    LEDS
                  - WHEN YOU AUTO-SELECT-RAPID FIRE THE LED WILL FLASH ALL COLOURS WHEN YOU PRESS FIRE
                  - WHEN STICKY AIM IS RUNNING THE LED WILL TURN DARK BLUE WHEN ADS IS PRESSED
                  
 
                  
    INSTRUCTIONS: THIS SCIRPT WILL AUTO_SELECT RAPID FIRE WHEN NEEDED. THE SCRIPT IS ONLY
                  TESTED (AND WORKING WITH) SMG`s, Assault Rifles with Automatic Fire , Pistols, Shot guns. 
                  IF YOU USE LMG YOU MIGHT NEED TO MODIFY THE SCRIPT
                  IF YOU PLAY WITH THE 3-BURST Assault Riffle YOU NEED TO MANUALLY SELECT RAPID
                  FIRE TO BE ALWAYS ON 
                  
                  DON`T FORGET TO CALIBRATE THE RELOAD TIME!! ELSE CANCEL RELOAD WILL NOT WORK. RELOAD
                  TIMES ARE SAVE LOCALLY ON EACH SLOT, MEANING THAT YOU HAVE TO CALIBRATE THE RELOAD TIME 
                  IN SLOTS. 
                  
                  NOTE THAT AFTER A PROFILE OR CLASS CHANGE YOU MIGHT NEED TO CALIBRATE THE AUTO
                  DETECTION FOR RAPID FIRE. ALSO IF YOU ARE NOT USING RF YOU NEED TO CALIBATE.
                  TO CALIBRATE: shoot at leat one bullet and release the fire trigger (that`s it)
                     
  ____________________________ ANTI RECOIL ________________________________________________                    
    
    HOLD D_PAD DOWN +
                       - TAP A / CROSS    -> MW_ SLOT MW_A
                       - TAP B / CIRCLE   -> MW_ SLOT MW_B                       
                       - TAP X / SQUARE   -> MW_ SLOT MW_X 
                       - TAP Y / TRIANGLE -> MW_ SLOT MW_Y
    OR
    HOLD R3/RS CLICKED DOWN AND PRESS LEFT (-1) OR RIGHT (+1) TO MOVE ONE SLOT DOWN OR UP. 
                      
    NOTE: YOU CAN SWITCH BETWEEN THE PROFILES/SLOTS AT ANY TIME. ALL VALUES YOU SAVE, INCLUDING RELOAD TIMES 
    ARE AUTO SAVED ON THE ACTIVE SLOT ONLY. FOR THIS TO WORK WITHOUT ANY ISSUES, MAKE SURE THAT - BEFORE YOU COMPILE
    THE SCRIPTS TO THE SLOTS OF YOUR CRONUSMAX THAT YOU CLEAN THE DEVICE MEMORY ("DEVICE CLEANUP"). 
                     
    HOW TO CHANGE ANTI RECOIL VALUES ON THE FLY:
     
         1. ACTIVATE THE ANTI RECCOIL SLOT YOU WANT TO MODIFY
         2. ENTER THE EDIT MENU -> IN EDIT MODE THE LED WILL BE OFF or RED
         3. EDIT VALUES (SEE BELOW)
         4. LEAVE EDIT MENU 
        
        video: youtu.be/DbFlFpf5v60
        NOTE: video is outdated
     
    TOGGLE THE EDIT MENU ON/OFF 
             HOLD B / CIRCLE AND HOLD Y / TRIANGLE +
             
                 - TAP D_PAD DOWN (RESETS THE RECOIL TIME VALUE TO 0, use this option if you are setting AR for the first time or for a new weapon)
                     
                 OR
                 
                - TAP D_PAD UP (DOES NOT RESET THE RECOIL TIME VALUE, use this option if you only want to tweak the recoil values of a saved weapon))
                 
    EDIT MENU:
    
    
        TIME VALUE (if the time value is not calibrated, the advanced anti recoil will mot work)
        
            HOLD PS4_L2 / XB1_LT AND HOLD D-PAD DOWN +
                - HOLD FIRE UNTIL YOU YOUR LAST BULLET IS FIRED FROM YOUR CLIP
    
        START VALUE VERTICAL: 
               HOLD PS4_L2 / XB1_LT  AND HOLD RELOAD BUTTON + 
                - TAP UP = +1 (*)
                - TAP DOWN = -1 (*)
                - TAP RIGHT = +10 (*)
                - TAP DOWN = -10 (*)
 
          END VALUE VERTICAL: 
               HOLD PS4_L2 / XB1_LT  AND HOLD PS4_CIRCLE / XB1_B BUTTON + 
                - TAP UP = +1 (*)
                - TAP DOWN = -1 (*)
                - TAP RIGHT = +10 (*)
                - TAP DOWN = -10 (*)
                
        HORIZONTAL VALUE:
            HOLD PS4_L2 / XB1_LT  AND HOLD PS4_TRIANGLE / XB1_Y BUTTON + 
                - TAP UP = +1 (*)
                - TAP DOWN = -1 (*)    
                - TAP RIGHT = +10 (*)
                - TAP DOWN = -10 (*)
            
        * =    FLASHES LED WITH EACH TAP
                - FLASH 1x if a value changes by plus or minus 1 
                - FLASH 2x if changed by plus or minus 10 
 
 
         SAVE VALUES
            Values are auto saved
            
                     
   ____________________________ RELOAD TIME CALIBRATION ________________________________________________                    
       
   THIS TIME VALUE IS USED FOR:
       - AUTO CANCEL RELOAD (to cancel out of a reload press fire or press ads)
       - PREVENT "SPRINT CANCEL RELOAD" WHEN EASY_RUN (AUTO SPRINT) IS ON 
   
     TO CALIBRATE RELOAD TIMES:
     
         - BEFORE RELOADING; HOLD D-PAD DOWN
         - THEN PRESS RELOAD TO START RELOADING AND HOLD DOWN THE RELOAD BTN DURING RELOAD ANIMATION
         - IT WILL RUMBLE ONCE AFTER 500ms TO CONFIRM THAT YOU ARE CALIBRATING 
         - RELEASE THE RELOAD BTN EXACTLY AT THE END OF THE RELOAD ANIMATION 
         - IT WILL RUMBLE TWICE TO CONFIRM SUCCESSFULL CALIBRATION 
         - NOW YOU CAN RELEASE ALSO THE D_PAD DOWN BTN
     
     THE RELOAD TIME YOU JUST CALIBRATED PREVENTS "SPRINT CANCEL RELOAD" BUT IT IS
     ALSO IS THE TIME IN WHICH YOU CAN CANCEL OUT OF A RELOAD BY FIRING OR AIMING YOUR WEAPON
  
  ____________________________ AIM CORRECTIONS ________________________________________________  
    
    AIM CORRECTIONS INTRODUCTION:
    
        THE IDEA BEHIND AIM CORRECTIONS IS THAT YOU HIGHER YOUR IN-GAME SENSITIVITY WITH 2 OR 3
        CLICKS. THIS WILL ALLOW YOU TO TURN AROUND FAST WITHOUT LOSING CONTROL OVER YOUR AIM:
        THE SCRIPT WILL LOWER YOUR SENSITIVITY WHEN YOU AIM AND EVEN MORE WHEN YOU AIM & FIRE 
        SO THAT YOU CAN LOCK ON TARGET. SO FOR EXAMPLE: IF YOU PLAY NORMALLY WITH SENS 8 IN THE 
        GAME, SET YOUR SENSITIVITY TO 11 IN THE GAME MENU AND FOLLOW THE STEPS BELOW.  
    
        1) FILL OUT THE IN-GAME STICK SENSITIVITY YOU JUST CONFIGURED IN THE GAME MENU UNDER 
        "STEP 2" 
        2) THAT`S IT! YOU`RE ALL SET AND GOOD TO GO!
    
        AIM CORRECTIONS IS NOW AUTOMATICALLY OPTIMIZED TO YOUR IN GAME SENSITIVITY, MAKING THE 
        AIM ASSIST STRONGER. IT WILL TAKE A FEW ROUNDS TO ADJUST, BUT IF YOU FEEL THAT THE AIM 
        CORRECTIONS ARE NOT "RIGHT" FOR YOU TWEAK THE VALUES 
    
        
   ____________________________ AUTO SELECT RAPID FIRE BY CRESCENS ________________________________________________ 
    
    BETA: note that this is not yet tested with all weapons. For sure it works with most SMG`s and Assault Riffles 
    in combination with most hand pistols. To play with the 3-burst assault riffle you need to switch on Rapid Fire
    manually (see above). 
    
    ____________________________EASY DROP & EASY SLIDE ___________________________________________
 
 
    A quick tap of the crouch btn will make you drop. If you press the PRONE button for a little longer
    you will crouch normally. 
        
   -----------------------/ END SHORT INSTRUCTIONS \-------------------------------------      
 
 
         
 __________________________________________________________________________________________________________
     
                SCRIPT STARTS HERE / MAKE NO CHANGES UNLESS INDICATED
 __________________________________________________________________________________________________________    
 
 
 
 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| | | | | |S|T|I|M|P|S|O|N|`|S| |L|E|D|S| | | | | | | | | | | | | | | | | | | | | | | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
data(
//    Blue      Pink    SkyBlue    Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//   Yellow    White      Red       OFF        
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
 
 
define Blue       =  1;  
define Red        =  2;  
define Green      =  3;  
define Pink       =  4;  
define SkyBlue    =  5;  
define Yellow     =  6;  
define White      =  7;  
define ColorOFF   =  8;  
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |V|A|R|I|A|B|L|E|S| | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
 
 
------------------------------------------- AR values*/ 
 
 
int ar_sY;
int ar_eY;
int ar_tm;
int ar_sX;
 
 
const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};                                    
 
define X = XB1_RX;                                    
define Y = XB1_RY;                                    
define ACTIVE_WHEN_ADS    = TRUE;                     
define ACTIVE_WHEN_FIRING = TRUE;    
int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
int time;                                             
int angle, cos_angle, sin_angle;  
 
define RADIUS  = 20 ;        
define STEPS   = 15;          
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2;    
 
 
int interval, iteration_point;
int i_, i_count;
int AR_V;
int RY, RX;
int pin = 145;   
int code;       
int record;     
int default_v;
int current_x, current_y;
int record_R = FALSE;
int Burst_wpn = FALSE;
 
 
 
 
define d__z_rs = 9;//d__z_rs = deadzone RS
define pinc =  15;
define angle_max = 345;
 
 
int t, t2;
 
 
 
 
int edit = FALSE;
 
 
 
 
 
 
int b=0;
//---aim corrections variables (script controls sens for: hip fire, general, tactical & lethal grenade, ads, ads + fire and long shots (zoom sens))
int ads_grenade_sens, ads_fire_sens, Sens;
//--RF
int rapid_fire=FALSE;
//--EASY THUMBS
int auto_run=0;
 
 
 
//---other variables used by the script
 
 
int notify, notifier;
 
 
int d_click;
int h_btn;
 
 
int rld_time, b_reload=FALSE;
int first_time;
int s=TRUE;
int newt;
int slot;
int hue=0;
int Col_ind;
 
 
int RumbleCount;
int c_reload;
int c_rel=50;
int R_C;
int R;
 
 
 
 
 
 
init {
 
 
    //global saved values (applies to all slots)    
    R = get_pvar(PVAR_15, 20, 50, 30); 
    first_time = get_pvar(PVAR_16, 0, 1, 1);
    default_v = get_pvar(PVAR_14, 3, 20, 12);
    t   = get_pvar(PVAR_1,  1, 32767, t);
    t2  = get_pvar(PVAR_2,  1, 32767, t2);
    //local saved values (applies only to the slot where the script is installed)
    rld_time= get_pvar(SPVAR_3, 0, 4000, 1200);    
    slot = get_slot ()    
    code = get_pvar(SPVAR_16,140,150,140);
      if (pin ==145){
    if (slot == 1){
     ar_sY = 26; // start value v
     ar_eY = 22; // end value v
     ar_tm = 2600; // time value
     ar_sX = -11;} // horizontal value
     set_ledx(LED_1, 1);
     if (slot == 2){
     ar_sY = 29; // start value v
     ar_eY = 17; // end value v
     ar_tm = 2700; // time value
     ar_sX = -13;} // horizontal value
     set_ledx(LED_2, 2);
     if (slot == 3){
     ar_sY = 29; // start value v
     ar_eY = 10; // end value v
     ar_tm = 6400; // time value
     ar_sX = -9;} // horizontal value
     set_ledx(LED_3, 3);
      if (slot == 4){
     ar_sY = 26; // start value v
     ar_eY = 22; // end value v
     ar_tm = 2600; // time value
     ar_sX = -11;} // horizontal value
     set_ledx(LED_4, 4);
     }
/*    these values are just good start values (I used NO attachments)        
            time    start    end        horiz
kilo 141    2800    28        28         4
m4a1        2700    29        17        -13
oden        3200    30        26         9
m13         2500    23        29        -18
fn scar 17  2300    33        25        -13
ak47        3700    33        15         7
                
mp5          2600    26        22        -11
mp7          2900    25        25         7
aug          2300    26        26        -11
p90          3800    28        22        -14
uzi          0       29        0         1
bizon        6400    29        10        -9
 
 
----------------------------------------- end AR values*/
    if(code == pin) {    
    ar_tm = get_pvar(SPVAR_4, -30000,30000,5000); ar_sY = get_pvar(SPVAR_9, -100,100,15);        
    ar_eY = get_pvar(SPVAR_14,-100,100,35); ar_sX = get_pvar(SPVAR_5, -100,100,5); 
    }
 
 
}
 
 
main{
 
 
set_val (TRACE_1, Burst_wpn);
set_val (TRACE_2, s);
set_val (TRACE_3, s);
set_val (TRACE_4, sticky_aim_assist);
set_val (TRACE_5, d_click);

 
 


if (d_click>0)d_click=d_click - get_rtime();
if (h_btn>0)h_btn = h_btn - get_rtime();

//--------------------------------------------------------------
 
 
 
    if (get_val (FIRE)) // only active when firing to allow microaim 
    {    
 
 
     //---stick noise
    current_x = dz(AIM_H,0);
    current_y = dz(AIM_V,0);
    }
 
 
   if (first_time == 1)//this should automatically clear any old data saved to your eprom memory to avoid issues 
                       {
                       default_v=in_game_menu_sens;
                       RESET_Defaults(); 
                       }  
 if(drop_and_slide_options)
                         {
                         if (get_val (PRONE)) combo_run (DROP);
 if (get_val (PRONE) && get_ptime (PRONE) > 150)
                                               {  
                                              combo_stop(DROP);
                                            }  
 
                      	 }                               
 
/*    
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | |M|E|N|U| |A|D|S| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/

//--reset defaults
if(get_val(ADS) && get_val(PS4_SHARE) && get_ptime (PS4_SHARE) > 800)
                     { 
                     RESET_Defaults();  
                     } 
                     
//--menu ads starts here

 if(get_val(ADS) && !edit)
           				{ 
					    if(event_press (WII_PLUS))
					    						{
					    						if (d_click<=0 ) {s = 0; notify (s); d_click=250;}
 						else if (d_click >0 )						
 																{ 
						                                      	s = 1; notify (s); 
						                                      	}
						                                      
					    									
							                   }
							                                     
							                                        								             
					    if(event_press (XB1_DOWN)) 
					    						{
					    						if (d_click<=0 ) {sticky_aim_assist = 1; notify (sticky_aim_assist); d_click=250;}
 						else if (d_click >0 )						
 																{ 
						                                      	sticky_aim_assist = 2; notify (sticky_aim_assist); 
						                                      	}
						                                      
					    									
							                   }
		    
							                            
					 
    btn (PS4_SHARE);btn (PS4_LEFT);btn (PS4_RIGHT);btn (PS4_UP);
    btn (PS4_DOWN);btn (WII_HOME); btn (WII_PLUS);
 
     					}//end menu ads
 
 
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |R|E|C|O|R|D| |T|I|M|E| | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
     if(!edit && get_val(XB1_DOWN) && get_val (XB1_X) && get_ptime (XB1_X)>500 && !record)     
                                             { 
                                             record = TRUE; notify (record); 
                                             }
 
                 if (record)
                                  {
                                  rld_time = get_ptime(XB1_X);
                                                          if (event_release (XB1_X))
                                                          { 
                                                         record = FALSE; b=2;
                                                         }
                                 } 
     if (get_val (XB1_DOWN) && get_ival (FIRE)) record_R = TRUE;
 
 
 
  /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |C|A|N|C|E|L| |R|E|L|O|A|D| | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 
     if(event_release(XB1_X) && get_ptime(XB1_X) < 300) b_reload = rld_time; 
 
            if(smart_reload && b_reload &&!edit ) 
            {//--countdown 
                b_reload -= get_rtime();
                    if(b_reload < 0) b_reload = 0;
                        if(event_press(FIRE) || event_press(ADS)) combo_run(CANCEL_RLD);
            }
 
 
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |W|E|A|P|O|N| |F|I|R|E| |M|O|D|S| | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/     
 //Auto-select-rapid-fire by Crescens (beta)

    				if(get_ival(FIRE))
			                        {
			                        c_reload -= get_rtime();
			                        if (c_reload >= 0)
			                        {               
                                        R_C = get_rumble(RUMBLE_A) + get_rumble (RUMBLE_B) + get_rumble (RUMBLE_RT)
 
 
 
                                 	}
                                     if (R_C >= 60)
                                                      { 
                                                      R = 60;
                                                      }
                                     if (R_C <= 60 && R_C >= 30){
                                                      R = 30;
                                                      }
 
                        			}
                     
 
 
 
 
 
      if (R_C >= R && R_C <= R + 10) { 
                              rapid_fire=FALSE; 
                              }
                              else rapid_fire=TRUE; 
 
 
 
 
 
    if(event_release(FIRE)){
        RumbleCount = 0;
        c_reload=c_rel;
        if (record_R) {record_R = FALSE; b =2}
    }
 
 
 
 				
 
 
 
 
 //-- Rapid fire 
    if (get_ival (FIRE)) 
                        {
                        if (rapid_fire || Burst_wpn)                       
                                                                 {
                                                                 combo_run (RAPID_FIRE); 
                                                                 {
                                                                            hue++;
                                                                            if (hue == 360)
                                                                                hue = 0;
                                                                            set_hsb(hue,100,100);
                                                                        }
                                                                 }
 
                        else 
                                                                 {
                                                                 combo_stop (RAPID_FIRE);  
                                                                }
 
 
 
                        }
 
                      /*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|I|M| | |C|O|R|R|E|C|T|I|O|N|S| | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                                                      _     _    
*/
 
  if(aim_sens_corrections)
                         {//----------------------------start AIM CORRECTIONS
                        ads_grenade_sens=100-(in_game_menu_sens); ads_fire_sens=96-(in_game_menu_sens); 
 
       if (get_val (ADS))
 
 
                          {
                                      if(get_val(FIRE) && get_val(ADS))                              
                                              { 
                                              Sens = ads_fire_sens;                                              
                                              }
                                    if(!get_val(FIRE) && !get_val(ADS) || get_val (FIRE) &&!get_val(ADS)) 
                                              {
                                            Sens = 100; //--general sens & hip fire sens 
                                              }   
                                      if(!get_val(FIRE) && get_val(ADS) || get_val (LETHAL) && !get_val (ADS) || get_val (TACTICAL) && !get_val (ADS)) 
                                              {
                                            Sens = ads_grenade_sens;
                                              }
 
        if(Sens > 100) Sens = 100;  
        sensitivity(AIM_H, NOT_USE, Sens);
        sensitivity(AIM_V, NOT_USE, Sens);
    }
    }  //----------------------------end AIM_CORRECTIONS 
 
 
if (get_val(XB1_B) &&get_val(XB1_Y))
         {
 
                                             {
                                             if (event_press (XB1_DOWN)) 
                                                                          {
                                                                          edit=!edit;
                                                                          notify (edit);
                                                                          if (edit){
                                                                          ar_t();}
                                                                          if (!edit)
                                                                          save__();
                                                                          }    
                                            if (event_press(XB1_UP))
                                                                         {
                                                                         edit=!edit;
                                                                          notify (edit);
                                                                          if (!edit)
                                                                          save__();
                                                                         } 
                                             }
 
 
 
         btn (XB1_B); btn(XB1_Y);  btn (XB1_UP); btn (XB1_DOWN); btn (XB1_VIEW); btn(XB1_MENU);//-START     
         }
              if (event_press(XB1_SYNC))
              							{
					    				if (d_click<=0 ) {Burst_wpn = 0; notify (Burst_wpn); d_click=250;}
 										else if (d_click >0 )						
 																{ 
						                                      	Burst_wpn = 1; notify (Burst_wpn); 
						                                      	}
						                                      
					    									
							            }				
              
              
          
                     
                     
              btn (XB1_SYNC);                                   
 /*        
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|U|T|O| |R|U|N| |+| |E|A|S|Y| |T|H|U|M|B| | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
 if (smart_thumb_stick >  0)     auto_run=1;
 if (smart_thumb_stick == 2 && get_val(XB1_LS)){set_val(l_stick_click, 100);}
  if (auto_run)
                  if (!b_reload && !get_val(ADS)&& get_val(WALK) < (walk_tresh))
                                                                                {
                                                                                 if (s) {combo_run (silent);}
                                                                                 combo_run (EASY_RUN);
                                                                                 }
                                                             /*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|I|M| |A|S|S|I|S|T| | | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
if (sticky_aim_assist == 1)
                {
                if(get_val(ADS)) combo_run(STICKY_AIM);
                else combo_stop(STICKY_AIM);                
                }
if (sticky_aim_assist == 2)
        {
 
 
      vm_tctrl(VM_INTERVAL); 
 
      actual_X = get_val(X);   
      actual_Y = get_val(Y);           
      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
      max_Magnitude = (actual_Magnitude < 100);                      
 
      if(!(time ++ % STEP_INTERVAL)){                                  
             angle += STEPS;                                              
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * RADIUS) / 100;                         
      sin_angle = (sin_angle * RADIUS) / 100;                          
 
      if((ACTIVE_WHEN_ADS && get_val(XB1_LT)) || (ACTIVE_WHEN_FIRING && get_val(XB1_RT))){ 
           if(actual_Magnitude <= RADIUS){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle =(cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
           }                                                  
           set_val(X, calculate(actual_X + cos_angle, -100, 100));
           set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
      } 
  } 
 
    //////////////////////////////////////////////////////// 
    //  STICKY AIM       
 
 
 
     /*--- end sticky aim == 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |A|N|T|I| |R|E|C|O|I|L| | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 */   
 
 
 if(get_val(XB1_DOWN) && !get_val(ADS)) 
    { 
     if(event_release(XB1_X) && get_ptime (XB1_X)<500)
            {load_slot(MW_X);} 
        if(event_press(XB1_A))
            {load_slot(MW_A);} 
        if(event_press(XB1_B))
            {load_slot(MW_B);} 
        if(event_press(XB1_Y))
            {load_slot(MW_Y);} 
    btn(XB1_B);btn (XB1_A);btn (XB1_Y); btn (XB1_LB); btn (XB1_RB); btn (XB1_RS);
    } 
 
    if (get_val(XB1_RS))
                        {
                        if (event_press (XB1_LEFT)) {load_slot (slot - 1); }
                        if (event_press (XB1_RIGHT)) {load_slot (slot + 1); }
                        btn (XB1_LEFT); btn (XB1_RIGHT);
                        }
if (!combo_running (RAPID_FIRE))
                {  
 if(ar_sY < ar_eY)
        interval = 1;
       else
        interval = -1;
 
 
      iteration_point = (ar_tm / 10) / (abs(ar_sY - ar_eY));
 
 
    if(!get_lval(FIRE))
                        {
                           AR_V = ar_sY;
                           i_count = 0;
                           i_ = 0;
                        }
 
 
 
    if(get_ival(FIRE))
                    {
 
                    AntiRecoil(AIM_H, ar_sX);
                    if(!p())
                    AR_V = c();
                    else
                    AR_V = (ar_eY);
                    AntiRecoil(AIM_V, AR_V)
                    set_ledx(LED_1, 5);
                    }
 }
   
    // DOWN end 
 
 
    if (edit){
     if(get_val(ADS) && get_val(XB1_DOWN) && get_val (FIRE)) {newt=TRUE;}   
 
 
                 if (newt)
                                  {
                                  ar_tm = ar_tm + get_rtime();b=4;
                                                          if (event_release (FIRE))
                                                          { 
                                                         set_pvar(SPVAR_4 ,ar_tm); newt=FALSE; notify (newt);
                                                          }
                                  }
 
    if(get_val(ADS)) 
    { 
        if(get_val(XB1_X)) 
        {
            if(event_press(XB1_UP))
                {ar_sY += 1;  b=1;}        
            if(event_press(XB1_DOWN))
                {ar_sY -= 1;  b=1;}   
            if(event_press(XB1_RIGHT))
                {ar_sY += 10;  b=2;} 
            if(event_press(XB1_LEFT))
                {ar_sY -= 10; b=2;} 
        }
 
        if(get_val(XB1_B)) 
        {
            if(event_press(XB1_UP)) 
                {ar_eY += 1;  b=1;}        
            if(event_press(XB1_DOWN))
                {ar_eY -= 1;  b=1; }   
            if(event_press(XB1_RIGHT))
                {ar_eY += 10;   b=2; } 
            if(event_press(XB1_LEFT))
                {ar_eY -= 10;  b=2; } 
        }
 
 
 
        if(get_val (XB1_Y))
        { 
            if(event_press(XB1_UP))
                {ar_sX += 1;  b=1;}         
            if(event_press(XB1_DOWN))
                {ar_sX -= 1;  b=1;} 
            if(event_press(XB1_RIGHT))
                {ar_sX += 10;   b=2; } 
            if(event_press(XB1_LEFT))
                {ar_sX -= 10;  b=2; } 
        } 
 
 btn(XB1_X);btn(XB1_A);btn(XB1_Y);btn(XB1_B);btn(XB1_UP);btn(XB1_DOWN);btn(XB1_RIGHT);btn(XB1_LEFT);
    } // ADS end
 
 
 
 
        } // EDIT end
 
 
 
 /*
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | | | | | | | | |L|E|D|S| |R|U|M|B|L|E| | | | | | | | | | | | | | | | | | | | | | | | |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
 
 
 
    if (b>0) blink ();
    
 
 
 
 
 
 
 
 
 
    if(notify) {
        notifier += get_rtime();
        if(notifier < 150) set_rumble(1,75);
        else if(notifier < 400) reset_rumble();
        else {
            notify -= 1;
            notifier = 0;
        }
    }

 
 
}
//--END OF MAIN
/*
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
  combo STICKY_AIM {
    set_val(AIM_V,xy_val(AIM_V, _v));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v));
    set_val(STRAFE,xy_val(STRAFE, _v));
    wait(20);
    set_val(AIM_V,xy_val(AIM_V, _v * -1));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v * -1));
    set_val(STRAFE,xy_val(STRAFE, _v * -1));
    wait(20);
    set_led (LED_1, 1)
    }
combo DROP {           
    set_val(PRONE,100);
    wait(1400);
    b=4;
    wait(800);
    }  
 
 
 
 
combo RAPID_FIRE { 
    set_val(XB1_RT,100);
    wait(35 );
    set_val(XB1_RT,0);
    wait(35);
}
 combo CANCEL_RLD {  
     set_val(XB1_Y, 100);
     wait(30);
     wait(20);
     set_val(XB1_Y, 100);
     wait(30);
     wait(20);
     b_reload=FALSE;
     }
combo EASY_RUN{
    set_val(SPRINT,100);       
    wait(30);                     
    wait(100);      
    } 
 
 
 
combo silent{
     set_val (TACTICAL, 100); set_val(LETHAL,100);
     wait (30);
     wait (30000); 
     }
function notify(pos) {
    if(pos)
        notify = 1;
    else
        notify = 2;
} 
function btn(f__btn) {
    if (!get_val(f__btn)) return; 
    set_val(f__btn, 0);
    }  
 
function RESET_Defaults () { 
    in_game_menu_sens=default_v;
    first_time=0;  
    rld_time=1200;  
    R = 30
    save_pvars ();    
    }
function save_pvars () {            
    set_pvar(PVAR_15, R);
    set_pvar(PVAR_14, default_v);
    set_pvar(PVAR_16, first_time); 
    set_pvar(SPVAR_3, rld_time); 
 
    notify (!1);
    }
function save__ (){
    set_pvar(SPVAR_5 ,ar_sX); 
    set_pvar(SPVAR_9 ,ar_sY);
    set_pvar(SPVAR_14,ar_eY); 
    set_pvar(SPVAR_16,pin); notify(!1);
    }
function ar_t (){
    ar_tm=0;
    }
function blink (){
    set_ledx(LED_1, b);
    set_ledx(LED_2, b);
    set_ledx(LED_4, b);
    if (b==1 || b==2) save_pvars ();
    b=0;
    }
function dz(f_axis,f_val) {
    f_val = get_val(f_axis);
    if(abs(f_val) < StickNoise) {
    set_val(f_axis,0); 
    return 0;
    }
    return f_val;
}
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < (_v + 1))  
    return f_val;    
    return get_val(f_axis);     
} 
function p() {
    i_count++;
     if (i_count > (ar_tm / 10))
    {
    i_count = (ar_tm / 10);
    return 1;
    }
    return 0;
    }
function c() {
    i_++;
    if(i_ == iteration_point)
    {
    i_ = 0;
    AR_V += interval;
    }
    return AR_V;
    }
 
 
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;   
  }
 
 
function AntiRecoil (axis, recoil){
 
     RY = current_y;
     RX = current_x;
 
    if (get_val(FIRE) && (isqrt(RX*RX + RY*RY)) <= abs(recoil))
    {
        if(abs(RY) <= abs(recoil))
        {
            set_val(axis,(recoil * (100 - abs(get_val(axis)))) / 100 + get_val(axis));
        }
    }
}
function LED(Colour) {         
    Col_ind=(Colour*4)- 3;             
    set_led(LED_1,duint8 (Col_ind  ));   
    set_led(LED_2,duint8 (Col_ind+ 1));  
    set_led(LED_3,duint8 (Col_ind+ 2));  
    set_led(LED_4,duint8 (Col_ind+ 3));  
} 
/*
Credits:
- script by Crescens
- based on open source libraries from multiple platforms and own development 
- in general my scripts may contain a mix of the earlY and evolved work from Excalibur, Lex Host, xDOT22 and the modern re-worked stuff from Batts, kek and myself. 
*/