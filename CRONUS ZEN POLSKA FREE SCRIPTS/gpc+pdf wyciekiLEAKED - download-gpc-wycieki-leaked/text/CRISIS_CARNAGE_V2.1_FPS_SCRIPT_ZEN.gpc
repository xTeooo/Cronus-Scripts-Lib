/*
╔══╗╔═══╗╔══╗╔══╗╔══╗╔══╗───╔══╗╔══╗╔═══╗╔╗─╔╗╔══╗╔═══╗╔═══╗───╔╗╔╗╔══╗───╔╗───╔═══╗╔═══╗╔╗─╔╗───╔╗╔╗╔═══╗╔═══╗╔══╗╔══╗╔══╗╔╗─╔╗
║╔═╝║╔═╗║╚╗╔╝║╔═╝╚╗╔╝║╔═╝───║╔═╝║╔╗║║╔═╗║║╚═╝║║╔╗║║╔══╝║╔══╝───║║║║╚═╗║──╔╝║───╚═╗─║║╔══╝║╚═╝║───║║║║║╔══╝║╔═╗║║╔═╝╚╗╔╝║╔╗║║╚═╝║
║║──║╚═╝║─║║─║╚═╗─║║─║╚═╗───║║──║╚╝║║╚═╝║║╔╗─║║╚╝║║║╔═╗║╚══╗───║║║║╔═╝║──╚╗║────╔╝╔╝║╚══╗║╔╗─║───║║║║║╚══╗║╚═╝║║╚═╗─║║─║║║║║╔╗─║
║║──║╔╗╔╝─║║─╚═╗║─║║─╚═╗║───║║──║╔╗║║╔╗╔╝║║╚╗║║╔╗║║║╚╗║║╔══╝───║╚╝║║╔═╝───║║───╔╝╔╝─║╔══╝║║╚╗║───║╚╝║║╔══╝║╔╗╔╝╚═╗║─║║─║║║║║║╚╗║
║╚═╗║║║║─╔╝╚╗╔═╝║╔╝╚╗╔═╝║───║╚═╗║║║║║║║║─║║─║║║║║║║╚═╝║║╚══╗───╚╗╔╝║╚═╗╔╗─║║───║─╚═╗║╚══╗║║─║║───╚╗╔╝║╚══╗║║║║─╔═╝║╔╝╚╗║╚╝║║║─║║
╚══╝╚╝╚╝─╚══╝╚══╝╚══╝╚══╝───╚══╝╚╝╚╝╚╝╚╝─╚╝─╚╝╚╝╚╝╚═══╝╚═══╝────╚╝─╚══╝╚╝─╚╝───╚═══╝╚═══╝╚╝─╚╝────╚╝─╚═══╝╚╝╚╝─╚══╝╚══╝╚══╝╚╝─╚╝ 

                            		  ***** CRONUSMAX OR ZEN SCRIPT FOR COD/APEX/FPS SHOOTERS *****
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
					Welcome to CRISIS Carnage V2.1 Be Sure To Go Through the initial setup phase to ensure the scripts performance
					Be sure to join our discord server for updates and great offers https://discord.gg/bu2QvzhzXp
					Enjoy!
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
// MOD TOGGLES SET BY DEFAULT

// L2/LT && UP       = RAPID FIRE
// L2/LT && DOWN     = PRONE SHOT
// L2/LT && LEFT     = CROUCH SHOT 
// L2/LT && RIGHT    = PRONE SHOT
// L2/LT && SQUARE/X = JUMP SHOT

// RECOIL HOLD BUTTON = CROSS AND PRESS ( UP ) OR ( DOWN ) OR ( LEFT ) OR ( RIGHT ) TO ADJUST RECOIL VIBRATION WILL BE FELT **ADJUSTABLE RECOIL**

// *IF YOU GO OVER VALUE 100 Or UNDER VALUE 0 IT WILL REVERT BACK TO THE DEFAULT VALUE*      (VERTICAL)
// *IF YOU GO OVER VALUE 60 Or UNDER VALUE -60 IT WILL REVERT BACK TO THE DEFAULT VALUE*     (HORIZONTAL)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Jump     = PS4_CROSS;
define Crouch   = PS4_CIRCLE;
define Melee    = PS4_R3;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
// ** HOLD ADS + PRESS ONE OF THE FOLLOWING FOR TOGGLES**    *** Do Not Select The Same Button As RecoilHoldOnFly For Mod Toggles If Using Recoil On The Fly ***
define DropShotPress    = PS4_LEFT;
define JumpShotPress    = PS4_SQUARE;
define FireModPress     = PS4_UP;
define ProneShotPress   = PS4_DOWN;
define SlideCancelPress = PS4_RIGHT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;
define RecoilRightPress = PS4_RIGHT;
define RecoilLeftPress  = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
int Shunt;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,PolFine;
int CrisisVal,CrisisVersion2,TimeCrisis,CrisisPos = 1;
int Crisisi,Crisiss,Crisisb,Crisisf,Crisisy = 20; // **Do Not Touch**
int CrisisYMove,CrisisValY,CrisisSteady,CrisisDRY,CrisisDRX,VibA,VibB;
define Prf = Off;
define Paf = Off;

int RadiusFlow = Prf;
int AngleFlow  = Paf;
int Pvid;
int RadFlow = On;
int AngFlow = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//Aim Assist Settings/Values
define CrisisStrength  =  2;  // ** Aim Assist One **  1 To 4  (1=10,2=20,3=30,4-40) == Strength
define CrisisSpeed     =  3;  // ** Aim Assist One **  1 To 3  (Base Speed On ADS)  (1 = Slowest, 3 = Fastest)
define FineSpeed     =  2;  // ** Aim Assist One **  1 To 3  (Speed Boost On FIRE)(1 = Slowest, 3 = Fastest)
define CrisisFined     = 10;  // ** Aim Assist One **  5 To 10 (Fine Tune On FIRE)  (5 = Finest, 10 = Largest)

define PolarRadius   = 15;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarAngle    = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarRBoost   =  6;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarABoost   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define DAMFine       = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Three **
define PolarRelease  = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Three **

define ProgPowerMin  = -10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgPowerMax  = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgPowerInc  = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitMin   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitMax   = 20;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgWaitInc   = 10;	// ** Aim Assist Two **   Or   ** Aim Assist Four **
define ProgRelease   = 35;	// ** Aim Assist Two **   Or   ** Aim Assist Four **

int    CrisisAAMin     = -5;	// ** Aim Assist Two **   Or   ** Aim Assist Five **
int    CrisisAAMax     =  5;	// ** Aim Assist Two **   Or   ** Aim Assist Five **
define CrisisIncrement =  1;	// ** Aim Assist Two **   Or   ** Aim Assist Five **

define FalloffAARX   = 22;  // ** Aim Assist Six **
define FalloffAARY   = 22;  // ** Aim Assist Six **
define FalloffAAWait = 10;  // ** Aim Assist Six **
define DoGFallReleae = 70;  // ** Aim Assist Six **   Or   ** Aim Assist Five **

// Extra Mods Times Ms
define DropShotWait  = 120;
define JumpShotWait  = 50;
define RapidFireHold = 30;
define RapidFireWait = 30;
define ScopeTime     = 350;

// Anti Recoil Settings/Values
int    CrisisRX        =  0;  //(Fixed Power RX Axis)
int    CrisisRY        = 20;  //(Initial Power RY Axis)
define CrisisYMovement = 29;  // 1 To 29 (Value Added/Subtracted From Initial Power Of RY Axis)
define CrisisYStep     =  1;  // Step Multiplier Optional (1,2,3,4 Etc Depending on Power) (Used to Multiply Added Value)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Enabled                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
// Aim Assist Options (6+ Aim Assists)

define Crisis_DynaPolarAssist_V5 = On; // ** Aim Assist One **
define CrisisBoost       =  On; 		 // ** Aim Assist One ** (Speed Boost On FIRE)**(CrisisPolar)**
define CrisisFine        =  On; 		 // ** Aim Assist One ** (Fine Tune On FIRE)  **(CrisisPolar)**

define CrisisTripleV2    = Off; 		 // ** Aim Assist Two ** (DamPolarAssist,Progression,CrisisAimAssist Settings For Adjustments)(Only Need To Select This On)

define DamPolarAssist  = Off; 		 // ** Aim Assist Three **
define RadiusBoost     = Off; 		 // ** Aim Assist Three **
define AngleBoost      = Off; 		 // ** Aim Assist Three **
define FineBoost       =  On; 		 // ** Aim Assist Three **

define ProgressionAA   = Off; 		 // ** Aim Assist Four **

define CrisisAimAssist   = Off; 		 // ** Aim Assist Five **

define FallOffAA       = Off; 		 // ** Aim Assist Six **

// Extra Mods
define DropShot        =  On;
define JumpShot        =  On;
define ProneShot       =  On;
define RapidFire       =  On;
define SlideCancel     =  On;
define QuickScope      =  On;
define FastMelee       =  On;

//Recoil Options
define Crisis_DynaRecoil_V5 =  On; //(RUMBLE ON IN GAME FOR FULL BENEFIT)
define InvertedYAxis      = Off; //(Recoil Invert RY Axis)
define RecoilOnFly        =  On; //(Set To Off if you Don't want On The Fly Adjustable Recoil Option)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                  On By Default                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/
int FireMod        =  Off;// RAPID FIRE ON BY DEFAULT   ** WHEN SLOT FIRST LOADS **
int SlideCancelMod =  On;// SLIDE CANCEL ON BY DEFAULT ** WHEN SLOT FIRST LOADS **

int JumpShotMod    =  On;// JUMP SHOT ON BY DEFAULT   ** WHEN SLOT FIRST LOADS ** ***ONLY CHOOSE ONE JUMP SHOT or CROUCH SHOT or PRONE SHOT ***
int DropShotMod    = Off;// CROUCH SHOT ON BY DEFAULT ** WHEN SLOT FIRST LOADS ** ***ONLY CHOOSE ONE JUMP SHOT or CROUCH SHOT or PRONE SHOT ***
int ProneShotMod   = Off;// PRONE SHOT ON BY DEFAULT  ** WHEN SLOT FIRST LOADS ** ***ONLY CHOOSE ONE JUMP SHOT or CROUCH SHOT or PRONE SHOT ***


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    	Crisisf = CrisisFined;
    	CrisisVal = CrisisAAMin;
    	CrisisDRX = CrisisRX;
    	CrisisDRY = CrisisRY;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (get_val(Ads) && !get_val(RecoilHoldOnFly)) {
	
		if (DropShot && event_press(DropShotPress)) {
		   
		   Shunt = DropShotPress;
		   DropShotMod = !DropShotMod;
		   JumpShotMod = Off;
		   ProneShotMod = Off;
		   VibA = On;
		   combo_run(Rumble);
		}
		
		if (JumpShot && event_press(JumpShotPress)) {
		   
		   Shunt = JumpShotPress;
		   JumpShotMod = !JumpShotMod;
		   DropShotMod = Off;
		   ProneShotMod = Off;
		   VibA = On;
		   combo_run(Rumble);
		}
		
		if (ProneShot && event_press(ProneShotPress)) {
		   
		   Shunt = ProneShotPress;
		   ProneShotMod = !ProneShotMod;
		   DropShotMod = Off;
		   JumpShotMod = Off;
		   VibA = On;
		   combo_run(Rumble);
		}
		
		if (RapidFire && event_press(FireModPress)) {
		   
		   Shunt = FireModPress;
		   FireMod = !FireMod;
		   VibA = On;
		   combo_run(Rumble);
		}
		
		if (SlideCancel && event_press(SlideCancelPress)) {
		   
		   Shunt = SlideCancelPress;
		   SlideCancelMod = !SlideCancelMod;
		   VibA = On;
		   combo_run(Rumble);
		}
    }
    
	if (DamPolarAssist || CrisisTripleV2) {

        if (get_val(Ads) && abs(get_val(RX)) <= PolarRelease + 10 && abs(get_val(RY)) <= PolarRelease + 10) {
            
            actual_X = get_val(RX);
            actual_Y = get_val(RY);
            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
            max_Magnitude = (actual_Magnitude < 100);

            if (RadiusBoost && get_val(Fire)) {
                
                Radius = PolarRadius + PolarRBoost;
            }
                
                else {
                    
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_val(Fire)) {
                        Angle = PolarABoost;
                    }
                        
                        else {
                            
                            Angle = 0;
                        }
                         
                        if ((FineBoost && RadiusBoost && get_val(Ads) && !get_val(Fire)) || 
                            (FineBoost && !RadiusBoost && get_val(Ads) && get_val(Fire))) {
                        	
                        	PolFine = DAMFine;
                    	}
                        else {
                            
                            PolFine = 0;
                        }
                        
                angle += PolarAngle + Angle;
                angle = angle % 360;
                sin_angle = DamPolar[angle % 360];
                cos_angle = DamPolar[(angle + 270) % 360];
                cos_angle = (cos_angle * Radius) / 100 % PolFine;
                sin_angle = (sin_angle * Radius) / 100 % PolFine;

            if (actual_Magnitude <= 10) { 
                
                sin_angle -= actual_Y; 
                cos_angle -= actual_X; 
            }
                else { 
                    
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                } 

            Set_Val(RX,cos_angle);
            Set_Val(RY,sin_angle); 
        }
    }

	if (Crisis_DynaPolarAssist_V5 && !get_val(RecoilHoldOnFly)) {
		
		if (get_val(Ads) || get_val(Fire)) {
			
			combo_run(Crisis_DynaPolarAssist_V5);
		}		
			else {
				
				combo_stop(Crisis_DynaPolarAssist_V5);
				Crisisy = 20;
				Crisisi = 0;
			}
					if (CrisisBoost && get_val(Fire)) 
					
					 	Crisisb = FineSpeed;
						
							else  
							
								Crisisb = 0;
				
					if (CrisisFine && get_val(Fire))	
					
					  	Crisisf = CrisisFined;
					 
					 		else 
					 	
					 			Crisisf = 0;
	}				

    if (ProgressionAA || CrisisTripleV2) {        
        
        if (get_val(Ads) && abs(get_val(RX)) <= ProgRelease && abs(get_val(RY)) <= ProgRelease) {
           	
            	RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin,ProgPowerMax,ProgPowerInc,RadFlow,1);
            	AngleFlow = PolarFlow(AngleFlow,ProgWaitMin,ProgWaitMax,ProgWaitInc,AngFlow,2);
                
            	combo_run(Progression);
        }
    }

    if (CrisisAimAssist || CrisisTripleV2){        
        
        if ((get_val(Ads)) || (get_val(Fire))) {
            if (abs(get_val(RX)) <= DoGFallReleae && abs(get_val(RY)) <= DoGFallReleae) {
                
                CrisisVersion2 = On;
                CrisisVersion2();
            }
        }
        
        if (event_release(Ads) || event_release(Fire)) {
            CrisisVal = CrisisAAMin
            CrisisVersion2 = Off;
            CrisisPos = On;
        }
    }

    if (FallOffAA){        
        
        if ((get_val(Ads)) || (get_val(Fire))) {
            if (abs(get_val(RX)) <= DoGFallReleae && abs(get_val(RY)) <= DoGFallReleae) {
                
                combo_run(FallOff);
            }
        }
                else {
                    combo_stop(FallOff);
                }
    }

    if (DropShotMod && DropShot && get_val(Fire)) {
        
        combo_run(DropShot);
    }    
        else {
           
           combo_stop(DropShot);
    	}

    if (JumpShotMod && JumpShot && !get_val(Ads) && event_press(Fire)) {
            
            set_val(Jump,100);
    }
    
    if (ProneShotMod && ProneShot && get_val(Fire)) {
    	
    	set_val(Crouch,100);    
    }
    
    
    
    	
    if (SlideCancelMod && SlideCancel) {                                                                                                  
		
		if (abs(get_val(LY)) >= 80 || abs(get_val(LX)) >= 80) {
		  
		  	if(event_release(Crouch))
			   
			   	combo_run(SlideCancel) 
	   	}   
    }
    
    if (FireMod && RapidFire && get_val(Fire)) {
        combo_run(RapidFire);
    }    
        else {
           combo_stop(RapidFire);
        }

    if (QuickScope && event_press(Ads) && get_ptime(Ads) < 140) {
  	       	combo_run(QuickScope);
    }
    
	if (FastMelee && get_val(Melee) && !get_val(Ads)) {
			combo_run(FastMelee);
	}
    
	if (Crisis_DynaRecoil_V5) {
	
		if (get_val(Ads) && get_val(Fire)) {
			
			Crisis_DynaRecoil_V5();
		}
			else {
				
				CrisisSteady = 0;
				CrisisYMove  = 0;
			}
	
		if (RecoilOnFly && get_val(RecoilHoldOnFly)) { 

        	if (event_press(RecoilDownPress)) {
            	CrisisRY += 1;
				VibB = On;
				combo_run(Rumble);
            }

            	if (event_press(RecoilUpPress)) {
	            	CrisisRY -= 1;
	            	VibA = On;
					combo_run(Rumble);
            	}
			
			if (event_press(RecoilRightPress)) {
            	CrisisRX += 1;
            	VibB = On;
				combo_run(Rumble);
            }

            	if (event_press(RecoilLeftPress)) {
	            	CrisisRX -= 1;
	            	VibA = On;
					combo_run(Rumble);
            	}
            
			if ((CrisisRY < 1 || CrisisRY > 99)) {
                CrisisRY = CrisisDRY;
            }
			
				if ((CrisisRX < -60 || CrisisRX > 60)) {
                	CrisisRX = CrisisDRX;
            	}
            
            set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
            set_val(RecoilRightPress,0); set_val(RecoilLeftPress,0);
    	}
    }        
	    
    if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo Progression {
	
	Set_Val(RY,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RY,RadiusFlow * -1);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow * -1);
	wait(AngleFlow);
}

combo FallOff {

    Set_Val(RY,FalloffAARY);
    Set_Val(RX,FalloffAARX);
    wait(FalloffAAWait);
    Set_Val(RY,FalloffAARY * -1);
    Set_Val(RX,FalloffAARX * -1);
    wait(FalloffAAWait);
}

combo Crisis_DynaPolarAssist_V5 {
    
	if (Crisisi++ > 70) Crisisi = 0;
		if (Crisisy++ > 70) Crisisy = 0;
	
		for (;Crisiss < (CrisisSpeed + Crisisb); Crisiss++) {
			Crisisi++;
			Crisisy++;
		}

		Crisiss = 0;
	
	Set_Val(RY,RYS[Crisisi] * CrisisStrength % Crisisf);
	Set_Val(RX,RYS[Crisisy] * CrisisStrength % Crisisf);
}

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(DropShotWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo SlideCancel {              
   
   set_val(Crouch, 100);          
   wait(120);                         
   set_val(Crouch, 0);            
   wait(60);                          
   set_val(Crouch, 100);          
   wait(50);                          
   set_val(Crouch, 100);          
   set_val(Jump, 100);           
   wait(60);                          
   set_val(Crouch, 0);            
   set_val(Jump, 100);          
   wait(10);                        
   set_val(Jump, 0);
}

combo QuickScope {
   
   set_val(Ads,100);
   wait(ScopeTime); 
   set_val(Ads,100);
   set_val(Fire,100);
   wait(40);
   set_val(Ads,100);
   wait(40); 
}

combo FastMelee {
    
    set_val(Melee,100);
    wait(40);
    set_val(Melee,0);
    wait(30);  
}

combo Rumble {
    
    if (VibB)
        set_rumble(RUMBLE_A,35);
        
        else if (VibA)
            set_rumble(RUMBLE_B,70);
    
    	wait(250);
    	VibA = Off;
    	VibB = Off;
    	reset_rumble();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
        Pfb += Pv;
    
    if(Pfb <= Pfv)  
        return Pfb;
        
        if(Pfb > Pfv) {
            Pvid[Pid] = Off;
            
            return Pfb - Pv;
        }
    }

    else {
        Pfb -= Pv;    
        
        if(Pfb >= Psv)  
            return Pfb;

            if(Pfb < Psv) {
                Pvid[Pid] = On; 
        
                return Pfb + Pv;
            }
    } 
           return Off;    
}

function Crisis_DynaRecoil_V5 () {
   
	if (!CrisisSteady && CrisisYMove >= CrisisYMovement) CrisisSteady = 1;
	
		else if (CrisisSteady && CrisisYMove <= RYX[0]) CrisisSteady = 0;
	
			if (!CrisisSteady && get_rumble(RUMBLE_A)) {
				CrisisYMove++;
			}
				else if (CrisisSteady && get_rumble(RUMBLE_A)) {
					CrisisYMove--;
				}
			
		CrisisValY = (RYX[CrisisYMove] * CrisisYStep);

	if (InvertedYAxis) { 
		
		Set_Val(RY,(CrisisRY + CrisisValY) * -1);
		Set_Val(RX,CrisisRX);
	}	
		else {
			
			Set_Val(RY,(CrisisRY + CrisisValY));
			Set_Val(RX,CrisisRX);
		}
}

function Set_Val(Input,Output) {

      set_val(Input,Clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
        return; 
}

function Clamp(Value,Low,High) { 

	if (Value < Low) 
		return Low; 
		
		if (Value > High) 
			return High;
			
	return Value; 
}

function CrisisVersion2() {
    
    TimeCrisis += get_rtime();
    
    if (CrisisVersion2) {
        if (CrisisPos) {
            CrisisVal += CrisisIncrement;
        }
            else {
                CrisisVal -= CrisisIncrement;
            }

        if (CrisisPos && CrisisVal == CrisisAAMax) 
            CrisisPos = Off;

            if (!CrisisPos && CrisisVal == CrisisAAMin)
                CrisisPos = On;

        if (TimeCrisis < 50)
            Set_Val(RX,CrisisVal);
            
            if (TimeCrisis > 50)
                Set_Val(RY,CrisisVal);
        
        if (TimeCrisis == 100) TimeCrisis = 0;
    }
}

const char RYS [] = {-10,-10,-10,-10, -9, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,10,10,10,10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 5, 4, 3, 2, 1, 0,-1,-2,-3,-4,-5,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-9};                                                                                                                               
const char RYX [] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};

const char DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};