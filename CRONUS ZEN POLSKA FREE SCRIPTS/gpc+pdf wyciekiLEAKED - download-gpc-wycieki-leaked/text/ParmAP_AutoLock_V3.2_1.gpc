// 

██████╗░░█████╗░██████╗░███╗░░░███╗  ░█████╗░██╗░░░██╗████████╗░█████╗░  ░█████╗░██╗███╗░░░███╗  
██╔══██╗██╔══██╗██╔══██╗████╗░████║  ██╔══██╗██║░░░██║╚══██╔══╝██╔══██╗  ██╔══██╗██║████╗░████║  
██████╔╝███████║██████╔╝██╔████╔██║  ███████║██║░░░██║░░░██║░░░██║░░██║  ███████║██║██╔████╔██║  
██╔═══╝░██╔══██║██╔══██╗██║╚██╔╝██║  ██╔══██║██║░░░██║░░░██║░░░██║░░██║  ██╔══██║██║██║╚██╔╝██║  
██║░░░░░██║░░██║██║░░██║██║░╚═╝░██║  ██║░░██║╚██████╔╝░░░██║░░░╚█████╔╝  ██║░░██║██║██║░╚═╝░██║  
╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░░░░╚═╝  ╚═╝░░╚═╝░╚═════╝░░░░╚═╝░░░░╚════╝░  ╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝  

██╗░░░██╗██████╗░░░░██████╗░
██║░░░██║╚════██╗░░░╚════██╗
╚██╗░██╔╝░█████╔╝░░░░░███╔═╝
░╚████╔╝░░╚═══██╗░░░██╔══╝░░
░░╚██╔╝░░██████╔╝██╗███████╗
░░░╚═╝░░░╚═════╝░╚═╝╚══════╝

//Parm's Linear AA + Head Shot Assist Mod ;


define Fire = PS4_R2; // Fire In Game
define Ads  = PS4_L2; // Ads In Game
define AimY = PS4_RY; // Vertical Aim Axis In Game
define AimX = PS4_RX; // Horizontal Aim Axis In Game

define Pickaxe  = PS4_LEFT;
define Build    = PS4_CIRCLE;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Trap     = PS4_SQUARE;
define Roof     = PS4_L1;

int AAT,Axis,Head,BuildTrack,BuildCount;
//Aim Assist
int AimAssist    = TRUE;  // Aim Assist [ON / OFF]
int AimAssistHip = TRUE;  // Operate on Fire Or Ads [If FALSE It Will Only Run On ADS]
int AATimed      = FALSE; // Aim Assist Will Cut Out After 2 seconds By Default (Change Below)

int Power  = 3;    // Parm's Aim Assist Power [1,2,3] ==> (>> 1 = 10 , 2 = 20 , 3 = 30  <<) 
int AATime = 2000; // Parm's Aim Assist Will Cut Out After Time [1000] = 1 Second, [2000] = 2 Second

// Progression Head Shot Assist
int HeadAssist    = TRUE; // Main Toggle ON/OFF
int HeadHipAssist = TRUE; // Operate on Fire Only [If FALSE It Will Only Run On ADS & FIRE]

int HeadStep = 2;  // Step Increment Increasing Until Its Reached HeadMax
int HeadMax  = 30; // Max Head Assist Value

// Build Monitor
int BuildTracker  = FALSE; // Isolate Aim Assist And Head Shot Mod In Build Mode
int BuildSyncTime = 2000; // Auto De-Sync After 2 Seconds Of being Idol [Pickaxe == Manual Re-Sync]

// Anti Recoil
int AntiRecoil = 26;

define Antirecoil = PS4_R2
main {	
	
	block_rumble();
	
	if (BuildTracker) {
        
        if (event_press(Build)) {
            
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                
                BuildTrack = FALSE;
                BuildCount = 0;
            }
            
            if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall) || get_ival(Trap)) 
                
                BuildCount = 0;
        }
    }
	
	if (!BuildTrack) {
	
	    if (AimAssist) {
	    	
	    	if (AATimed) {
	    	
	    		if (get_ival(Ads) && get_ptime(Ads) <= AATime || AimAssistHip && get_ival(Fire) && get_ptime(Fire) <= AATime) {
	        	
	        		AimAssist();
	        	}
	        	
	        } else if (get_ival(Ads)|| AimAssistHip && get_ival(Fire)) {
	        	
	        		AimAssist();
	        }
	        
	        if (!get_ival(Ads) && !get_ival(Fire)) {
	        
	        	AAT = 0;
	        	Axis = 0;
	        }
	    }
	    
	    if (HeadAssist) {
	        
	        if (get_ival(Ads) && get_ival(Fire) || HeadHipAssist && get_ival(Fire)) {
	        
	        	if (abs(get_ival(AimY)) < HeadMax) { 
	        		
	        		Head += HeadStep;
	        		combo_run(HeadAssist);
	        	}	
	        }
	        
	        if (!get_ival(Fire)) Head = 0;
	        	
	        if (Head >= HeadMax) combo_stop(HeadAssist);
	    }
	}
}

combo HeadAssist{

	set_val(AimY,inv(Head) + get_val(AimY));
}

function AimAssist() {

	AAT += get_rtime();
	
	if (!Axis) 
		
		set_Val(AimY,AAT * Power / 10 * 2);
		
	if (Axis == 1)  
		
		set_Val(AimX,AAT * Power / 10 * 2);
	
	if (Axis == 2)  
		
		set_Val(AimY,inv(AAT * Power / 10 * 2));

	if (Axis == 3) {
		
		set_Val(AimX,inv(AAT * Power / 10 * 2));
	
		if (AAT > 50) {
		
			AAT = 0;
			Axis = 0;
		}
	
	} else if (AAT > 50) {
		
		AAT = 0;
		Axis += 1;
	}
}

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
    return; 
}

combo AntiRecoil { 
    
    if(get_val(Fire)) {
    Anti_Recoil = get_val(10) + AntiRecoil;
    if(Anti_Recoil > 100) Anti_Recoil = 100;
    set_val(10, Anti_Recoil);
}
}