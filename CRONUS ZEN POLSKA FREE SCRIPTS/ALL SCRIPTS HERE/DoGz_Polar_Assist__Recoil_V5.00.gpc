define Fire = PS4_R2;
define Ads  = PS4_L2;
define AimX = PS4_RX;
define AimY = PS4_RY;
define PY   = POLAR_RY;
define PX   = POLAR_RX;
define PS   = POLAR_RS;
define On   = TRUE;
define Off  = FALSE;

int Speed,Output,ValueX,ValueY,AxisX,AxisY,Angle,Radius;

// Aim Assist
int AimAssist = On;
int Step  = 30;
int Power = 12;

// Anti Recoil
int AntiRecoil = On;
int Vertical   = 20;
int Horizontal = 5;

main {

	
	if (AimAssist || AntiRecoil) {
	
	    if (get_ival(Ads) || get_ival(Fire)) {		
	    
	    	AxisX  = isqrt(abs(get_ival(AimX)) * abs(get_ival(AimX)));	
	    	AxisY  = isqrt(abs(get_ival(AimY)) * abs(get_ival(AimY)));
	    	
	    if (AimAssist) {
	    	
	    	Angle = Speed;
	    	Radius = Power;
	    	Speed = Speed + Step;
	    
	    	if (Speed < 0) Speed += 360;
	    		
	    		Speed = Speed % 360;
	    }
	    	else {
	    	
	    		Angle = Off;
	    		Power = Off;
	    	}
	    	
	  	if (AntiRecoil) {
	   
	    	if (get_ival(Ads) && get_ival(Fire)) {
	    	
	    		if (AxisX <= abs(Horizontal)) {
	    		
	    			ValueX = Horizontal;
	    		}
	    		
	    			else {
	    	
	    				ValueX = Off; 
	    			}
	    	 
	    		if (AxisY <= abs(Vertical)) {
	    		
	    			ValueY = Vertical;
	    		}
	    		
	    			else {
	    	
	    				ValueY = Off; 
	    			}
	    	}
	    		else {
	    		
	    			ValueY = Off;
	    			ValueX = Off;
	    		}
	    }
	    	DoGzPolar(Angle,Radius);
		}
	}
}

function DoGzGetPolar (Current,Received) { 		
	
	Output = Current / 10 + Received / 10;
	
		if(Output <= -3276) return -32768; 
		if(Output >=  3276) return  32767; 

	return Current + Received; 
} 

function DoGzPolar (Rotation,Radial) {   	
  	
  	set_polar(PS,Rotation,Radial * 327);
  	set_val(PX,DoGzGetPolar(get_val(PX) + ValueX * 327,get_ival(PX)));
	set_val(PY,DoGzGetPolar(get_val(PY) + ValueY * 327,get_ival(PY)));	
} 