/*
    _______            ______              __       __ ________ __       ________ _______   ______  __       __ __    __       ______   ______  
   |       \          /      \            |  \     /  \        \  \     |        \       \ /      \|  \  _  |  \  \  |  \     /      \ /      \ 
   | ▓▓▓▓▓▓▓\ ______ |  ▓▓▓▓▓▓\________   | ▓▓\   /  ▓▓ ▓▓▓▓▓▓▓▓ ▓▓      \▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓ / \ | ▓▓ ▓▓\ | ▓▓    |  ▓▓▓▓▓▓\  ▓▓▓▓▓▓\
   | ▓▓  | ▓▓/      \| ▓▓ __\▓▓        \  | ▓▓▓\ /  ▓▓▓ ▓▓__   | ▓▓        | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓/  ▓\| ▓▓ ▓▓▓\| ▓▓    | ▓▓__| ▓▓ ▓▓__| ▓▓
   | ▓▓  | ▓▓  ▓▓▓▓▓▓\ ▓▓|    \\▓▓▓▓▓▓▓▓  | ▓▓▓▓\  ▓▓▓▓ ▓▓  \  | ▓▓        | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓  ▓▓▓\ ▓▓ ▓▓▓▓\ ▓▓    | ▓▓    ▓▓ ▓▓    ▓▓
   | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ \▓▓▓▓ /    ▓▓   | ▓▓\▓▓ ▓▓ ▓▓ ▓▓▓▓▓  | ▓▓        | ▓▓  | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ ▓▓\▓▓\▓▓ ▓▓\▓▓ ▓▓    | ▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓
   | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓__| ▓▓/  ▓▓▓▓_   | ▓▓ \▓▓▓| ▓▓ ▓▓_____| ▓▓_____   | ▓▓  | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓▓▓  \▓▓▓▓ ▓▓ \▓▓▓▓    | ▓▓  | ▓▓ ▓▓  | ▓▓
   | ▓▓    ▓▓\▓▓    ▓▓\▓▓    ▓▓  ▓▓    \  | ▓▓  \▓ | ▓▓ ▓▓     \ ▓▓     \  | ▓▓  | ▓▓    ▓▓\▓▓    ▓▓ ▓▓▓    \▓▓▓ ▓▓  \▓▓▓    | ▓▓  | ▓▓ ▓▓  | ▓▓
    \▓▓▓▓▓▓▓  \▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓   \▓▓      \▓▓\▓▓▓▓▓▓▓▓\▓▓▓▓▓▓▓▓   \▓▓   \▓▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓      \▓▓\▓▓   \▓▓     \▓▓   \▓▓\▓▓   \▓▓
 ________  ______  _______  ________ __    __ ______ ________ ________      __     __ ________ _______   ______  ______  ______  __    __        __        
|        \/      \|       \|        \  \  |  \      \        \        \    |  \   |  \        \       \ /      \|      \/      \|  \  |  \     _/  \       
| ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓\\▓▓▓▓▓▓▓▓ ▓▓\ | ▓▓\▓▓▓▓▓▓\▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓▓    | ▓▓   | ▓▓ ▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\\▓▓▓▓▓▓  ▓▓▓▓▓▓\ ▓▓\ | ▓▓    |   ▓▓       
| ▓▓__   | ▓▓  | ▓▓ ▓▓__| ▓▓  | ▓▓  | ▓▓▓\| ▓▓ | ▓▓    | ▓▓  | ▓▓__        | ▓▓   | ▓▓ ▓▓__   | ▓▓__| ▓▓ ▓▓___\▓▓ | ▓▓ | ▓▓  | ▓▓ ▓▓▓\| ▓▓     \▓▓▓▓       
| ▓▓  \  | ▓▓  | ▓▓ ▓▓    ▓▓  | ▓▓  | ▓▓▓▓\ ▓▓ | ▓▓    | ▓▓  | ▓▓  \        \▓▓\ /  ▓▓ ▓▓  \  | ▓▓    ▓▓\▓▓    \  | ▓▓ | ▓▓  | ▓▓ ▓▓▓▓\ ▓▓      | ▓▓       
| ▓▓▓▓▓  | ▓▓  | ▓▓ ▓▓▓▓▓▓▓\  | ▓▓  | ▓▓\▓▓ ▓▓ | ▓▓    | ▓▓  | ▓▓▓▓▓         \▓▓\  ▓▓| ▓▓▓▓▓  | ▓▓▓▓▓▓▓\_\▓▓▓▓▓▓\ | ▓▓ | ▓▓  | ▓▓ ▓▓\▓▓ ▓▓      | ▓▓       
| ▓▓     | ▓▓__/ ▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓ \▓▓▓▓_| ▓▓_   | ▓▓  | ▓▓_____        \▓▓ ▓▓ | ▓▓_____| ▓▓  | ▓▓  \__| ▓▓_| ▓▓_| ▓▓__/ ▓▓ ▓▓ \▓▓▓▓     _| ▓▓_      
| ▓▓      \▓▓    ▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓  \▓▓▓   ▓▓ \  | ▓▓  | ▓▓     \        \▓▓▓  | ▓▓     \ ▓▓  | ▓▓\▓▓    ▓▓   ▓▓ \\▓▓    ▓▓ ▓▓  \▓▓▓    |   ▓▓ \     
 \▓▓       \▓▓▓▓▓▓ \▓▓   \▓▓   \▓▓   \▓▓   \▓▓\▓▓▓▓▓▓   \▓▓   \▓▓▓▓▓▓▓▓         \▓    \▓▓▓▓▓▓▓▓\▓▓   \▓▓ \▓▓▓▓▓▓ \▓▓▓▓▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓     \▓▓▓▓▓▓     
                                                                                                                                                           
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

******    MASSIVE SHOUTOUT TO TAYLORDRIFT n CEORIN n C14H3R TEAM For All Their Help Recently LEGENDS !!!!!!!!!!!!  ******** 
******    MASSIVE SHOUTOUT TO ALL THE STAFF IN THE NEW DISCORD Wizard's n King's Scripts + Apps !!!!!!!!!!!!!!!!!  ********

  ¦¦¦¦ MOD MENU SYSTEM ¦¦¦¦

* Enter Menu   = L2/LT + OPTIONS/MENU
* Switch Menu  = CROSS/A
* Exit Menu    = TRIANGLE/Y

* Next Mod     = RIGHT
* Previous Mod = LEFT

* Adjust +     = UP
* Adjust -     = DOWN
* Toggle ON    = UP
* Toggle OFF   = DOWN
  
  ¦¦¦¦ SHOW CURRENT SLOT IN USE ¦¦¦¦
  
* Show Slot    = R3/RS + LEFT

  ¦¦¦¦ LOAD PREVIOUS SETTINGS FROM LAST USE ¦¦¦¦
  
* Load Settings = L2/LT + PS/XBOX	

	¦¦¦¦ KILL SWITCH TOGGLES ¦¦¦¦

* Kill Switch  = L2/LT + SHARE

	¦¦¦¦ SHOOTING MOD TOGGLES ¦¦¦¦ ( Defaults Can Be Edited Below In Mod Toggles )

* Rapid Fire   = L2/LT + UP    ( Quick Disables Choosen Fire Mods )
* Shot Mod     = L2/LT + RIGHT ( Quick Disables Choosen Shot Mods )
* QuickSnipe   = L2/LT + DOWN  ( Set Up In Trigger Mod Section Below ( On Press or On Release Of The Button You Choose) )
* Bunny Hop    = L2/LT + LEFT

  ¦¦¦¦ MOD TRIGGERS ¦¦¦¦
  
* Rapid Fire   = Hold Fire
* Dynamic Fire = Hold Fire  ( Speed Set By Pressure Applied To Fire (Triggers Only) )
* Burst Fire   = Hold Fire
* Auto Fire    = Hold ADS   ( Hold Ads And It Will Auto Fire ( Auto Weapons )
* Scoped Fire  = Hold Fire  ( Hold Fire And It Will Auto Ads )

* Crouch Shot  = Hold Fire  ( Can Be Used With Strafe Shot To Make Smart Shot Dance )
* Jump Shot    = Hold Fire  ( You Will Repeatedly Jump )
* Strafe Shot  = Hold Fire  ( You Will Strafe Side To Side )( Can Be Used With Crouch Shot To Make Smart Shot Dance ) 

* Quick Snipe  = L2/LT ( On Press or On Release Of The Button You Choose )
* Auto Ping    = Hold Fire For 2000ms / Or Use Your Chosen Triggers (L2/LT + L3/LS By Default)
* Bunny Hop    = Hold Jump To Repeatedly Jump
* Pump Wall    = Hold L2/LT + Tap R1/RB

* Instant Pickaxe = Tap Pickaxe (TRIANGLE/Y) When You Release Fire You Will Swap To Your Weapon

* Hair Triggers = Instantly Sets L2/LT + R2/RT to 100% ( R2/RT Disabled While Dynamic Fire In Use )

  ¦¦¦¦ Edit Setup + Guide  ¦¦¦¦

**** EDIT ON RELEASE MUST BE OFF IN GAME SETTINGS FOR ALL EDIT METHODS TO FUNCTION CORRECTLY !!!!!!!!!!!!! ****

* Edit Assist = (EditAssist Button )Hold To Auto Hold Select And Release To Confirm The Edit ( This Button In Game Must Not Have Hold Time )

* Fast Reset = Tap Your Chosen Button (NOTE*** EditAssist Must Be Set To Edit Only For This To Function Even When Not Using Edit Assist)

* Instant Edit + Reset = Match Your In Game Setup 
	(Example)
	
	* You Use Circle/B In Game To Edit And Enter/Exit Build Mode
	* Set = EditHold = On;
	* Set = EditHoldTime = Your In Game Time (100-200)
	
**** Ensure Your Edit Button is Set In The Buttons Section To Match I use All These Methods At The Same Time So Its set This Way
	_______________________________________________________________________________________________________________________________
	define Edit = PS4_CIRCLE; (Edit + Build With Hold Time)
	define EditAssist = PS4_L3; (I use Edit Assist With L3/LS And Its Also Used For Fast Reset)
	define FastReset = PS4_TOUCH;( This Is One Button Reset (Closest To Scroll Wheel Reset)(Any Button Your Like)(ADS BLOCKS MOD)
	
	define Select = PS4_R2; (Match Your In Game Button)
	define Confirm = PS4_CIRCLE; (Match Your In Game Button)
	define Reset = PS4_R3; (Match Your In Game Button)
	
	int EditHoldTime = 130; (This Is my In Game Hold To Edit Time)
	define EditHold = On; (This Is If You Use Edit/Build On One Button (Default Circle) (Switch Off For Normal Edit Without Hold)
    --------------------------------------------------------------------------------------------------------------------------------
    
* Edit Sensitivity = Set This To Control Your Axis While In Edit Mode (Allows For Faster Edit Sens In Game)
    
    ¦¦¦¦ Build Tracking Mode ¦¦¦¦
    
* Ensure Your Build/Pickaxe/Wall/Ramp/Floor/Roof Buttons Match In game And In The Script
* Enter Build Mode All Conflicting Mods Will Be Disabled!
* Exit Build Mode To Re-Enable Mods
* Build Sync Time Will Auto De-Isolate Build Mode After Time Set In The Script (4 Seconds By Default, If A Build Piece Has Not Been Pressed It Resets)
* Manual Resync = Pickaxe (TRIANGLE/Y)


	¦¦¦¦ Sensitivity Control ¦¦¦¦
  
* GENERAL Sens (Holding No Triggers) 			  (* 30 to 300 *)
* ADS Sens (Holding ADS Trigger) 				  (* 30 to 300 *)
* FIRE Sens (Holding FIRE Trigger) 			      (* 30 to 300 *)
* ADS + FIRE Sens (Holding ADS + FIRE Triggers)   (* 30 to 300 *)

   ¦¦¦¦¦ AIM ASSIST  ¦¦¦¦¦

* Polar Power (Radius) ( Holding Only ADS Before Release )
* Polar Speed (Angle)  ( Holding Only ADS Before Release )
* Combo Power      	   ( Holding Only FIRE or Ads + Fire After Release )
* Combo Wait Time      ( Holding Only FIRE or Ads + Fire After Release )
* Polar Release Limit  ( RELEASE VALUE TO SWITCH POLAR OFF )

   ¦¦¦¦¦ ANTI RECOIL ¦¦¦¦¦

* Vertical   = Axis Y 

* RUMBLE MUST BE ON IN GAME AND CONSOLE/PC SETTINGS FOR STEP CALCULATOR TO WORK (PS5 WILL ONLY RECEIVE BASE VALUES)
* Inverted Axis ON Option For Inverted Players
* On The Fly Adjustable ON ( Setup Below )

¦¦¦¦ Anti-Recoil On The Fly Adjustment ¦¦¦¦ 

* Hold CROSS/A + Press In The Direction You Want The Crosshairs To Move
* DPAD -- UP or DOWN
* The Zen Will Display The Current Value + Axis

* PS On Xbox -- PLAYSTATION CONTROLLER WILL SWAP TOUCHPAD AND SHARE WHEN ON PC Or XBOX
* Block Rumble -- Block The Controller Vibrating From In Game Signals
* LED Rainbow -- Zen Eyes Will Cycle Through All Colours
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const uint8 FontSize [][]  = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits []  = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","FN Triple Threat","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Anti-Recoil","RY-Axis","SAVED","LOADED"};
const string ModToggle []  = {"","DoGz Triple Threat","DoGzDyNa Recoil","DynaRecoil Inverted","   Crouch Shot","    Jump Shot"," Strafe Shot Mod"," Rapid Fire Mod","Dynamic Fire Mod"," Burst Fire Mod","Scoped Fire Mod"," Auto Scope Mod","    Pump Wall","   Quick Scope"," Instant Pickaxe","    Auto Ping","Instant EditReset","   Edit Assist","    Fast Reset","Edit Sensitivity","    Bunny Hop","   Sensitivity","Instant Triggers","LED Rainbow Flow","   Build Track","  DS4OnPC/XBOX" };
const string ModValue []   = {"","   Polar Radius","   Polar Angle","   Combo Power","   Combo Delay","Polar Release Val", "DynaRecoil Power", "Recoil Boost Steps", "Recoil Step Multipy","Crouch Shot Wait","  Jump Shot Wait","Strafe Shot Speed"," Rapid Fire Hold"," Rapid Fire Wait"," Dyna Fire Hold","Dyna Fire Release","Burst Fire Delay","Scope Delay Time"," Bunny Hop Wait","  Pump Wall Wait","InstaPickaxe Hold"," Edit Hold Time"  , "Edit Assist Delay","Edit Sensitivity","  General Sens","    Ads Sens","    Fire Sens"," Ads + Fire Sens"," LED Brightness","BuildTrackSynTime"};
const int16 ModDigitMin [] = {  0 , 1  , 1   , 1  , 10  , 1  , 1  , 1  , 1  , 50   , 100  , 500  , 30   , 30   , 30 , 33 , 50   , 50   , 40   , 50  , 30  , 100 , 20  , 20  , 30  , 30,  30  , 30  , 1  , 3000  };
const int16 ModDigitMax [] = {  0 , 40 , 180 , 40 , 50  , 30 , 99 , 29 , 5  , 2000 , 2000 , 5000 , 1000 , 1000 , 60 , 70 , 1000 , 2000 , 1500 , 250 , 250 , 250 , 100 , 100 , 300 , 300, 300 , 300 , 50 , 20000 };                     
const int16 ModIncrement[] = {  0 , 1  , 1   , 1  , 10  , 1  , 1  , 1  , 1  , 10   , 10   , 100  , 10   , 10   , 10 , 1  , 10   , 10   , 10   , 10  , 10  , 1   , 10  , 1   , 1   , 1  , 1   , 1   , 1  , 100   };

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const string ShotModL     = " Master Shot Mod";                                
const string FireModL     = " Master Fire Mod";                        
const string BunnyHopL    = "BunnyHop Move Mod";
const string SniperModL   = " Sniper Shot Mod";
const string KillSwitchL  = "Master KillSwitch";

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_R3;
define Ping     = PS4_RIGHT;
define Edit     = PS4_CIRCLE;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;
define Build    = PS4_CIRCLE;
define Switch   = PS4_LEFT;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Roof     = PS4_L1;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define Walk     = PS4_LY;
define Strafe   = PS4_LX;
define PRX		= POLAR_RX;
define PRY		= POLAR_RY;
define RS       = POLAR_RS;
define On       = TRUE;
define Off      = FALSE;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Buttons                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define EditAssist    = PS4_L3;
define FastReset     = PS4_TOUCH;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define PumpWallHold   = PS4_L2;
define PumpWallPress  = PS4_R1;

define FastPingHold   = PS4_L2;
define FastPingPress  = PS4_L3;

define QuickScopePress  = On;     // (On = On Press || Off = On Release) (Using Button Below (QuickScopeButton))
define QuickScopeButton = PS4_L2;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define FireModHold       = PS4_L2;	     // RAPID FIRE HOLD TOGGLE
define FireModPress      = PS4_UP;	     // RAPID FIRE PRESS TOGGLE

define ShotModHold       = PS4_L2;       // STRAFE FIRE HOLD TOGGLE
define ShotModPress      = PS4_RIGHT;    // STRAFE FIRE PRESS TOGGLE

define SniperModHold     = PS4_L2;       // QUICK SNIPE HOLD TOGGLE
define SniperModPress    = PS4_DOWN;     // QUICK SNIPE PRESS TOGGLE

define BunnyHopModHold   = PS4_L2;       // BUNNYHOP HOLD TOGGLE
define BunnyHopModPress  = PS4_LEFT;     // BUNNYHOP PRESS TOGGLE

define KillSwitchHold    = PS4_L2;       // KILL SWITCH HOLD TOGGLE
define KillSwitchPress   = PS4_SHARE;    // KILL SWITCH PRESS TOGGLE

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;

define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;

define LoadSettingsHold  = PS4_L2; // LOAD PREVIOUS SETTINGS ( WHEN REBOOTING THE ZEN ) 
define LoadSettingsPress = PS4_PS; // LOAD PREVIOUS SETTINGS ( WHEN REBOOTING THE ZEN )

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 25;
define IndexMinValues   = 1;
define IndexMaxValues   = 29;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int ToggleT,ToggleTime,ToggleName,Modled,LedDec,Rgb,LedInc,Colour[3];
int DoGzYMove,DoGzValY,DoGzSteady,Edit1,Edit2,EditT,BuildTrack,BuildCount,Axe,KillSwitch,DynamicWait;
int Saver,Ms,Sec,Min,ScreenTime,TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2;
int AxisAim,AxisWalk,Speed,RecoilValue,VibA,VibB,Save,Loaded,Saved;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

int ModDigit;
int PolarPower     =  4;    // Polar Power (Radius)   ( Aim Assist ) ( Holding Only ADS Before Release )
int PolarSpeed     = 20;   	// Polar Speed (Angle)    ( Aim Assist ) ( Holding Only ADS Before Release )
int Power          =  6;    // Combo Power      	  ( Aim Assist ) ( Holding Only FIRE or Ads + Fire After Release )
int Delay          = 10;   	// Combo Wait Time        ( Aim Assist ) ( Holding Only FIRE or Ads + Fire After Release )
int PolarRelease   =  7;   	// Polar Release Limit    ( Aim Assist ) ( RELEASE VALUE TO SWITCH POLAR OFF )
int DoGzRY         = 20; 	//(Initial Power)
int DoGzYMovement  = 29; 	// 1 To 29 (Value Added/Subtracted From Initial Power)
int DoGzYStep      =  1; 	// Step Multiplier Optional (1,2,3,4 Etc Depending on Power) (Used to Multiply Added Value)
int CrouchShotWait = 150;   // Crouch Shot Wait Time Before Next Jump Ms
int JumpShotWait   = 570;   // Jump Shot Wait Time Before Next Jump Ms
int StrafeWait     = 1000;  // Strafe Shot Time Before Changing Direction Ms
int RapidFireHold  = 30;    // Rapid Fire Hold Time Ms
int RapidFireWait  = 30;    // Rapid Fire Release Time Ms
int DynaFireHold   = 40;    // Dynamic Fire Hold Time Ms    (* 30 to 60 *)
int DynaFireWait   = 33;    // Dynamic Fire Release Time Ms (* 33 to 70 *)
int BurstFireWait  = 300;   // Burst Fire Delay Between Bursts Ms	
int QuickScopeTime = 350;   // ADS Scope In Time Before Shot Ms
int BunnyHopWait   = 570;   // Bunny Hop ( Length Of Time Between Jumps )
int PumpWallHTime  = 50;	// Pump Wall Press Button Time (Combo)
int PickaxeHold    = 30;	// Instant Pickaxe Press Time
int EditHoldTime   = 130;	// Time When Use Hold to Edit In game Setting To Be Matched
int EditDelay      = 30;    // Edit Assist Hold Delay On Select
int EditSense      = 54;	// Edit Sensitivity Restricts The RX/RY Allowing For A Higher In Game Edit Sense
int GeneralSens    = 100;  	// General Sensitivity ( While Not Holding Ads Or Fire )
int AdsSens        = 100;  	// Ads Sensitivity ( While Holding Only Ads )
int FireSens       = 100;  	// Fire Sensitivity ( While Holding Only Fire )
int AdsFireSens    = 100;  	// Ads + Fire Sensitivity ( While Holding Ads + Fire )
int LedBrightness  = 10;	// Brightness Of The Zen Eye
int BuildSyncTime  = 4000;	// Build Sync Time (The Time Before Build Sync Auto Resets (TURNS OFF WHEN A BUILD PIECE NOT PRESSED))

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
///////////////// (On or Off)  \\\\\\\\\\\\\\\\\\\\
int ModSwitch;
int AimAssist       =  On;  // Triple Threat Aim Assist
int DoGzDyNaRecoil  =  On; 	// DoGz Adaptive Recoil (RUMBLE ON IN GAME FOR FULL BENEFIT)
int InvertedYAxisAR = Off; 	// Recoil Invert RY Axis
int CrouchShot      = Off;  // Crouch Shot     (* Only Set One On In The Compiler Either >>¦¦ Crouch Shot  or  Jump Shot¦¦<< *) (Crouch + Strafe Can Be On)
int JumpShot        = Off;  // Jump Shot	   (* Only Set One On In The Compiler Either >>¦¦ Crouch Shot  or  Jump Shot or Strafe Shot ¦¦<< *)
int StrafeShot      = Off;  // Strafe Shot     (* Only Set One On In The Compiler Either >>¦¦ Jump Shot or Strafe Shot  ¦¦<< *) (Crouch + Strafe Can Be On)
int RapidFire       = Off;  // Rapid Fire      (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int DynamicFire     = Off;  // Dynamic Fire    (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int BurstFire       = Off;  // Burst Fire      (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int ScopedFire      = Off;  // Scoped Fire     (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int AutoScope       = Off;  // Auto Scope      (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire or Scoped Fire or AutoScope ¦¦<< *)
int PumpWall        = Off;  // Pump Wall 
int QuickScope      = Off;  // Quick Scope ( Settings In Mod Triggers Above )
int InstantPickaxe  = Off;  // Instant Pickaxe
int AutoPing        = Off;	// Auto Ping
int InstaEditReset  = Off;  // Normal Instant Edit/Reset
int QuickEditAssist = Off;  // Edit Assist
int InstaFastReset  = Off;  // Fast Reset
int EditSensitivity = Off;  // Edit Sensitivity
int BunnyHop        = Off;  // Bunny Hop Movement
int Sensitivity     = Off;  // General/Fire Conditions-Sensitivity Control-
int InstantTriggers =  On;  // Instant Triggers ( Hair Triggers )
int LEDRainbowFlow  =  On;  // Led Rainbow (ZEN Eyes)
int BuildTracker    =  On;  // Build Tracking Mode
int PSonXBOX        = Off;  // PS Controller On PC/XBOX

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Default State                   ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//-- ADJUST HERE IF YOU WANT THE MOD ACTIVE WHEN THE SLOT FIRST LOADS ( On or Off ) (MASTER TOGGLE ABOVE MUST BE ON)

int FireMod        =  Off; // Rapid/Dyna Fire/Busrt Fire 
int ShotMod        =  Off; // Prone Shot/Crouch Shot/Strafe Shot/Jump Shot     
int QuickScopeMod  =  Off; // QuickScope Shot
int BunnyHopMod    =  Off; // Bunny Hop Movement

// Other Edit Setting/Settings
define EditHold       =  On;  // USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP )
define ScreenSaver    =  On;  // Screen Saver (Pipeflow) On/Off (Screen Will Be Blank (Black) If Off
define RecoilOnTheFly =  Off;  // Anti Recoil On The Fly Adjustment

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    //IF YOU WANT TO PROGRAM FROM THE ZEN REMOVE //  FROM IN FRONT OF  LoadSettings();  BELOW
    
    //LoadSettings(); //***     
    
    //All Toggles Will Be OFF On The First Boot
    
    /*Do Not Touch Below*/
	combo_run(Boot);
    LedInc = 1
    Colour = 150;
	
	/*Do Not Touch Above*/
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (get_ival(LoadSettingsHold)) {
		
		if (event_press(LoadSettingsPress)) {
			LoadSettings();
		}
			set_val(LoadSettingsPress,0);
	}
	
		block_rumble();
	
	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        swap (PS4_TOUCH,PS4_SHARE);
    }	
	
	if (Sensitivity && !Edit1 && !Edit2 && !BuildTrack) {
	
		if (get_ival(Ads)) {
        	
        	sensitivity(AimX,NOT_USE,AdsSens);
        	sensitivity(AimY,NOT_USE,AdsSens);  
    	}                                           
    	                                          
    	else if (get_ival(Fire) && !get_ival(Ads)) {         
    		
    		sensitivity(AimX,NOT_USE,FireSens);
   			sensitivity(AimY,NOT_USE,FireSens);
		}
		
		else if (get_ival(Ads) && get_ival(Fire)) {
        	
        	sensitivity(AimX,NOT_USE,AdsFireSens);
        	sensitivity(AimY,NOT_USE,AdsFireSens);
    	}
    	
    		else {
    		
    			sensitivity(AimX,NOT_USE,GeneralSens);
   				sensitivity(AimY,NOT_USE,GeneralSens);
			}
	} 
	
	if (InstantTriggers && !DynamicFire) {
	
		deadzone(PS4_L2,PS4_R2,100,100);
	}	
		else if (InstantTriggers && DynamicFire) {
			
			deadzone(PS4_L2,NOT_USE,100,NOT_USE);
		}	
	
		AxisAim  = isqrt(abs(get_ival(AimX)) * abs(get_ival(AimX)) + abs(get_ival(AimY)) * abs(get_ival(AimY)));
		AxisWalk = isqrt(abs(get_ival(Strafe)) * abs(get_ival(Strafe)) + abs(get_ival(Walk)) * abs(get_ival(Walk)));
		
	if (QuickEditAssist) {
	 	if (!get_ival(Ads) && get_ival(EditAssist)) {
			EditAssist();
			Edit1 = On;
		}

			if (event_release(EditAssist)) {
				EditT = Off;
				Edit1 = Off;
			}
	}

    if (InstaFastReset && !get_ival(Ads) && event_press(FastReset)) { 
       
       if (EditSensitivity) {    
            stickize (AimX,AimY,EditSense);
        }  
        
        	Shunt = FastReset;
        	combo_run(FastReset);
    }

    if (InstaEditReset) {
        if (EditHold && get_ival(Edit) && get_ptime(Edit) > EditHoldTime || !EditHold && event_press(Edit)) {
                Edit1 = On;
                Edit2 = On;
                BuildTrack = On;
        
        }

        if (Edit2) {
            if (event_release(Select)) {  
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
    		}

        }
    }

    if (Edit1 || Edit2) {
        if (EditSensitivity) {    
            stickize (AimX,AimY,EditSense);
        }

            if (event_press(Reset)) {  
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off; 
            }

                if (event_press(Pickaxe) || event_press(Build) || event_press(Ads)) {
                    Edit1 = Off;
                    Edit2 = Off;
                    BuildTrack = Off;
                }
    }
	
	if (!KillSwitch) {
	
	    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
                    BuildCount = Off;
        }
    }
    
		if (!MainMenu && !get_ival(RecoilHoldOnFly)) {
	
			if (JumpShot || CrouchShot || StrafeShot) {
			
				if (get_ival(ShotModHold) > 90 && event_press(ShotModPress)) {
		       		
		       		Shunt = ShotModPress;
		       		ShotMod = !ShotMod;
		       		ToggleName = On;
		       		Toggle(ShotMod,ShotModL[0]);
				}
			}
			
		   	if (RapidFire || DynamicFire || BurstFire || ScopedFire || AutoScope) {
		   		
		   		if (get_ival(FireModHold) > 90 && event_press(FireModPress)) {
		       		
		       		Shunt = FireModPress;
		       		FireMod = !FireMod;
		       		ToggleName = On;
		       		Toggle(FireMod,FireModL[0]);
		   		}
			}
		   	
		   	if (QuickScope && get_ival(SniperModHold)  > 90 && event_press(SniperModPress)) {
	        
	        	Shunt = SniperModPress;
	        	QuickScopeMod = !QuickScopeMod;
	        	ToggleName = On;
	        	Toggle(QuickScopeMod,SniperModL[0]);
	   		}
	   		
	   		if (BunnyHop && get_ival(BunnyHopModHold)  > 90 && event_press(BunnyHopModPress)) {
	        
	        	Shunt = BunnyHopModPress;
	        	BunnyHopMod = !BunnyHopMod;
	        	ToggleName = On;
	        	Toggle(BunnyHopMod,BunnyHopL[0]);
	   		}
		}
	
	if (!BuildTrack) {	
    	
    	if (AimAssist) {
                
            if (get_ival(Ads) && !get_ival(Fire) && AxisAim <= PolarRelease) {
            	
            	set_polar(RS,Speed = (Speed + PolarSpeed) % 360,(abs(get_ival(PRX)) + abs(get_ival(PRY)) / 4) + PolarPower * 328);
            }
            
            if (get_ival(Fire) || get_ival(Ads) && get_ival(Fire) && AxisAim <= PolarRelease || get_ival(Ads) && AxisAim > PolarRelease) {
            
 				combo_run(AimAssist);
            }
        }
    
        if (InstantPickaxe && !MainMenu) {
            if (event_press(Pickaxe)) 
                Axe = On;
        
            if (Axe) {
                if (event_press(Build) || event_press(Ads) || event_press(N_Weapon) || event_press(P_Weapon)) 
                    Axe = Off;
                    
                    if (event_release(Fire))
                        combo_run(Pickaxe);
            }
        }

	    if (ShotMod) {
	    
	    	if (CrouchShot && get_ival(Fire)) {
                
                combo_run(CrouchShot);
            }    
                else {
                    
                    combo_stop(CrouchShot);
                }
        
        	if (JumpShot && get_ival(Fire)) {
                
                combo_run(JumpShot);
            }    
               else {
                    
                    combo_stop(JumpShot);
                }
        
            if (StrafeShot && get_ival(Fire) && AxisWalk <= 40) {
	        	combo_run(StrafeShot);
	        }	
	        	else {
	        		combo_stop(StrafeShot);
	        	}
	    }
	    
	    if (BunnyHopMod && BunnyHop && get_ival(Jump)) {
        	
        	combo_run(BunnyHop);
        }	
        	
        	else {
        		
        		combo_stop(BunnyHop);
        	}
        	
        if (FireMod) {
                
            if (RapidFire && get_ival(Fire)) {
            
                combo_run(RapidFire);
            }    
            
            if (DynamicFire && get_ival(Fire)) {
            	
            	DynamicWait = DynaFireWait * 10 - (get_ival(Fire) * 3);
            	combo_run(DynaFire);
            }    
            
            if (BurstFire && get_ival(Fire)) {
            
                combo_run(BurstFire);
            }    
                else {
                   
                	combo_stop(BurstFire);
                }
	    	
	    	if (AutoScope && get_ival(Fire)) {
	    		
	    		set_val(Ads,100);
	    	}
	    	
	    	if (ScopedFire && get_ival(Ads)) {
	    	
	    		set_val(Fire,100);
	    	}
	    }
        
        if (QuickScopeMod) {
	       	
	       	if ((QuickScope) && ((QuickScopePress && event_press(QuickScopeButton)) || (!QuickScopePress && event_release(QuickScopeButton)))) {
  	           		
  	        	combo_run(QuickScope);
        	}
        }
        
	    if (AutoPing) {
        	if (get_ival(Ads) && get_ival(Fire) && get_ptime(Fire) > 2000)
            	combo_run(AutoPing);
	    
                else if (get_ival(FastPingHold) && event_press(FastPingPress)) {
                    Shunt = FastPingPress;
                    combo_run(AutoPing);
                }
        }
	    
	    if (PumpWall && get_ival(PumpWallHold) && event_press(PumpWallPress)) {
            Shunt = PumpWallPress;
            combo_run(PumpWall);
        }
	    
	    if (QuickScopeMod) {
	       	
	       	if ((QuickScope) && ((QuickScopePress && event_press(QuickScopeButton)) || (!QuickScopePress && event_release(QuickScopeButton)))) {
  	           		
  	        	combo_run(QuickScope);
        	}
        }
	    
	    if (DoGzDyNaRecoil) {
	    
	    	if (get_ival(Ads) && get_ival(Fire)) {
	    		
	    		DoGzDyNaRecoil();
	    	}
	    		else {
	    			
	    			DoGzSteady = 0;
	    			DoGzYMove  = 0;
	    		}
	    
	    	if (!MainMenu && RecoilOnTheFly && get_ival(RecoilHoldOnFly)) { 

                if (event_press(RecoilDownPress)) {
                    
                    	DoGzRY = clamp(DoGzRY++,0,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (event_press(RecoilUpPress)) {
                     
                    	DoGzRY = clamp(DoGzRY--,0,100);
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }
                
                if (combo_running(RecoilValue)) {
            		
            		if (event_press(RecoilUpPress) || event_press(RecoilDownPress)) 
            			
            			combo_restart(RecoilValue);
            	}
            	
            	set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
            }
	    }
	}
	}
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
		VibB = On;
		combo_run(Rumble);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        combo_stop(RecoilValue);
        combo_stop(Settings);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
				VibB = On;
				combo_run(Rumble);
				SaveSettings();
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModIncrement[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	Saver (); 
	} 

    if (!MainMenu && LEDRainbowFlow) { 
        LedFlow();
    } 

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime) {
        TimeToggle();
    }
	
    if (!MainMenu && !get_ival(RecoilHoldOnFly)) {
	
		if (get_ival(KillSwitchHold) > 90 && event_press(KillSwitchPress)) {
        	Shunt = KillSwitchPress;
        	KillSwitch = !KillSwitch;
        	ToggleName = On;
        	Toggle(KillSwitch,KillSwitchL[0]);
    	}
	}
   
    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
combo AimAssist {
	Set_Val(AimX,Power);
	Set_Val(AimY,Power);
	wait(Delay);
	Set_Val(AimX,Power * -1);
	Set_Val(AimY,Power * -1);
	wait(Delay);
}

combo CrouchShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(CrouchShotWait);
}

combo JumpShot {

    set_val(Jump,100);
    wait(50);
    set_val(Jump,0);
    wait(20);
    wait(JumpShotWait);
}

combo BunnyHop {

    set_val(Jump,100);
    wait(50);
    set_val(Jump,0);
    wait(50);
    wait(BunnyHopWait);
}

combo StrafeShot {

	set_val(Strafe,100 + get_ival(Strafe));
	wait(StrafeWait);
	set_val(Strafe,-100 + get_ival(Strafe));
	wait(StrafeWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo DynaFire {

    set_val(Fire,100);
    wait(DynaFireHold);
    set_val(Fire,0);
    wait(DynamicWait);
}

combo BurstFire {

    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);    
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);    
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);   
    wait(BurstFireWait);
}

combo Pickaxe {
    
    set_val(Pickaxe,100);
    wait(PickaxeHold);
    Axe = Off;
}

combo PumpWall {

    set_val(Fire,100);
    wait(PumpWallHTime);
 	set_val(Build,100);
    wait(PumpWallHTime);
    set_val(Wall,100);
    wait(PumpWallHTime);
    set_val(Build,100);
    wait(50);
    wait(30);
}

combo QuickScope {
   
    set_val(Ads,100);
    wait(QuickScopeTime);
    set_val(Ads,100);
    set_val(Fire,100);
    wait(50); 
}

combo AutoPing {
    
    set_val(Ping,100);
    wait(50);
    wait(10);
    set_val(Ping,100);
    wait(50);
    wait(10);
    wait(3000);
}
combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo RecoilValue {
 	
 		Saver = Off;
 		combo_stop(Boot);
 	
 	if (RecoilValue) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	    line_oled(126,23,2,23,1,1);
	    line_oled(126,52,2,52,1,1);
	    printf(28,54,0,1,MiscString[9]);
	    
	    if (event_press(RecoilUpPress) || event_press(RecoilDownPress)) {
	    	
	    	printf(30,5,1,1,MiscString[10]);
	    	NumX = 0; NumY = 1; NumS = 1;
	    	FindDigit(DoGzRY,DigitValue(DoGzRY));
	    }
	
	    RecoilValue = Off;
	
	}
		wait(5000);
		VibB = On;
		combo_run(Rumble);
 		cls_oled(0);
 		SaveSettings();
 		Saver = On;
}

combo Settings {
 		
 		Save = On;
 		Saver = Off;
 		combo_stop(Boot);
 	
 	if (Save) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	
	if (Saved)
	    printf(39,25,1,1,MiscString[11]);
	
	if (Loaded)
	    printf(34,25,1,1,MiscString[12]);
	    Save = Off;
	}
		wait(3000);
		Saved = Off;
		Loaded = Off;
		cls_oled(0);
 		Saver = On;
}

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
        else if (VibB)
            
            set_rumble(RUMBLE_B,15);
    
    	wait(250);
    	VibA = Off;
    	VibB = Off;
    	reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    }    
        else {
            
            set_rgb(255,0,0);
            set_rumble(RUMBLE_B,15);
        }
     	
     	wait(150);
    	set_rgb(0,0,0);
    	wait(150);
    	reset_rumble();    
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
            set_rgb(255,0,0);
	
		wait(150);
		reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function EditAssist () {

    EditT += get_rtime();
        if (get_ival(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}

function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}

function DoGzDyNaRecoil () {
   
	if (!DoGzSteady && DoGzYMove >= DoGzYMovement) DoGzSteady = 1;
	
		else if (DoGzSteady && DoGzYMove <= RYX[0]) DoGzSteady = 0;
	
			if (!DoGzSteady && get_rumble(RUMBLE_A)) {
				DoGzYMove++;
			}
				else if (DoGzSteady && get_rumble(RUMBLE_A)) {
					DoGzYMove--;
				}
			
		DoGzValY = (RYX[DoGzYMove] * DoGzYStep);

	if (InvertedYAxisAR) { 
		
		Set_Val(AimY,(DoGzRY + DoGzValY) * -1);
	}	
		else {
			
			Set_Val(AimY,(DoGzRY + DoGzValY));
		}
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
    
    if (combo_running(RecoilValue))    	
    	
    	combo_stop(RecoilValue);  
    
    if (combo_running(Settings))
    
    	combo_stop(Settings);
    
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
	    combo_run(VibrateBlink);
    
    if (ToggleName) {
    	
    	Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        }
            else {
                
                printf(36,38,0,1,MiscString[7]);
            }
                ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
        if (!MainMenu && ToggleT >= 5000) {
            cls_oled(0);
            ToggleTime = Off;
            ToggleT = 0;
    }
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;
		ModMonitor(ModValLbl);
            
            if (ModVal >= ModValMax){ 
                return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;
			ModMonitor(ModValLbl);
				
				if (ModVal <= ModValMin){
					return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 

function ModMonitor (Mon) {
    
    if (Mon == ModToggle[4]) { 
       
       JumpShot = Off;
	}
        if (Mon == ModToggle[5]) { 
            
            CrouchShot = Off;
            StrafeShot = Off;
        }
        	
        	if (Mon == ModToggle[6]) { 
            	
            	JumpShot = Off;
            }

 		if (Mon == ModToggle[7]) { 
 
 			DynamicFire = Off;
    		BurstFire   = Off;
    		ScopedFire  = Off;
    		AutoScope   = Off;
  		}
  		
  			if (Mon == ModToggle[8]) { 
 
 				RapidFire  = Off;
    			BurstFire  = Off;
    			ScopedFire = Off;
    			AutoScope  = Off;
  			}
  		
 				if (Mon == ModToggle[9]) { 
 
 					RapidFire   = Off;
 					DynamicFire = Off;
    				ScopedFire  = Off;
    				AutoScope   = Off;
  				}
  		
  					if (Mon == ModToggle[10]) { 
 
 						RapidFire   = Off;
    					DynamicFire = Off;
    					BurstFire   = Off;
    					AutoScope   = Off;
  					}  		
  		
  						if (Mon == ModToggle[11]) { 
 
 							RapidFire   = Off;
    						DynamicFire = Off;
    						BurstFire   = Off;
    						ScopedFire  = Off;
  						} 
}

function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const int16 RYX [] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};
    
function LoadSettings () {

    ModSwitch[1]  = get_pvar(SPVAR_1,0,1,ModSwitch[1]);
    ModSwitch[2]  = get_pvar(SPVAR_2,0,1,ModSwitch[2]);
    ModSwitch[3]  = get_pvar(SPVAR_3,0,1,ModSwitch[3]);
    ModSwitch[4]  = get_pvar(SPVAR_4,0,1,ModSwitch[4]);
    ModSwitch[5]  = get_pvar(SPVAR_5,0,1,ModSwitch[5]);
    ModSwitch[6]  = get_pvar(SPVAR_6,0,1,ModSwitch[6]);
    ModSwitch[7]  = get_pvar(SPVAR_7,0,1,ModSwitch[7]);
    ModSwitch[8]  = get_pvar(SPVAR_8,0,1,ModSwitch[8]);
    ModSwitch[9]  = get_pvar(SPVAR_9,0,1,ModSwitch[9]);
    ModSwitch[10] = get_pvar(SPVAR_10,0,1,ModSwitch[10]);
    ModSwitch[11] = get_pvar(SPVAR_11,0,1,ModSwitch[11]);
    ModSwitch[12] = get_pvar(SPVAR_12,0,1,ModSwitch[12]);
    ModSwitch[13] = get_pvar(SPVAR_13,0,1,ModSwitch[13]);
    ModSwitch[14] = get_pvar(SPVAR_14,0,1,ModSwitch[14]);
    ModSwitch[15] = get_pvar(SPVAR_15,0,1,ModSwitch[15]);
    ModSwitch[16] = get_pvar(SPVAR_16,0,1,ModSwitch[16]);
    ModSwitch[17] = get_pvar(SPVAR_17,0,1,ModSwitch[17]);
    ModSwitch[18] = get_pvar(SPVAR_18,0,1,ModSwitch[18]);
    ModSwitch[19] = get_pvar(SPVAR_19,0,1,ModSwitch[19]);
    ModSwitch[20] = get_pvar(SPVAR_20,0,1,ModSwitch[20]);
    ModSwitch[21] = get_pvar(SPVAR_21,0,1,ModSwitch[21]);
    ModSwitch[22] = get_pvar(SPVAR_22,0,1,ModSwitch[22]);
    ModSwitch[23] = get_pvar(SPVAR_23,0,1,ModSwitch[23]);
    ModSwitch[24] = get_pvar(SPVAR_24,0,1,ModSwitch[24]);
    ModSwitch[25] = get_pvar(SPVAR_25,0,1,ModSwitch[25]);
    ModSwitch[26] = get_pvar(SPVAR_26,0,1,ModSwitch[26]);
    ModDigit[32]  = get_pvar(SPVAR_27,ModDigitMin[32],ModDigitMax[32],ModDigit[32]);
    ModDigit[33]  = get_pvar(SPVAR_28,ModDigitMin[33],ModDigitMax[33],ModDigit[33]);
	ModDigit[1]   = get_pvar(SPVAR_33,ModDigitMin[1],ModDigitMax[1],ModDigit[1]);
    ModDigit[2]   = get_pvar(SPVAR_34,ModDigitMin[2],ModDigitMax[2],ModDigit[2]);
    ModDigit[3]   = get_pvar(SPVAR_35,ModDigitMin[3],ModDigitMax[3],ModDigit[3]);
    ModDigit[4]   = get_pvar(SPVAR_36,ModDigitMin[4],ModDigitMax[4],ModDigit[4]);
    ModDigit[5]   = get_pvar(SPVAR_37,ModDigitMin[5],ModDigitMax[5],ModDigit[5]);
    ModDigit[6]   = get_pvar(SPVAR_38,ModDigitMin[6],ModDigitMax[6],ModDigit[6]);
    ModDigit[7]   = get_pvar(SPVAR_39,ModDigitMin[7],ModDigitMax[7],ModDigit[7]);
    ModDigit[8]   = get_pvar(SPVAR_40,ModDigitMin[8],ModDigitMax[8],ModDigit[8]);
    ModDigit[9]   = get_pvar(SPVAR_41,ModDigitMin[9],ModDigitMax[9],ModDigit[9]);
    ModDigit[10]  = get_pvar(SPVAR_42,ModDigitMin[10],ModDigitMax[10],ModDigit[10]);
    ModDigit[11]  = get_pvar(SPVAR_43,ModDigitMin[11],ModDigitMax[11],ModDigit[11]);
    ModDigit[12]  = get_pvar(SPVAR_44,ModDigitMin[12],ModDigitMax[12],ModDigit[12]);
    ModDigit[13]  = get_pvar(SPVAR_45,ModDigitMin[13],ModDigitMax[13],ModDigit[13]);
    ModDigit[14]  = get_pvar(SPVAR_46,ModDigitMin[14],ModDigitMax[14],ModDigit[14]);
    ModDigit[15]  = get_pvar(SPVAR_47,ModDigitMin[15],ModDigitMax[15],ModDigit[15]);
    ModDigit[16]  = get_pvar(SPVAR_48,ModDigitMin[16],ModDigitMax[16],ModDigit[16]);
    ModDigit[17]  = get_pvar(SPVAR_49,ModDigitMin[17],ModDigitMax[17],ModDigit[17]);
    ModDigit[18]  = get_pvar(SPVAR_50,ModDigitMin[18],ModDigitMax[18],ModDigit[18]);
    ModDigit[19]  = get_pvar(SPVAR_51,ModDigitMin[19],ModDigitMax[19],ModDigit[19]);
    ModDigit[20]  = get_pvar(SPVAR_52,ModDigitMin[20],ModDigitMax[20],ModDigit[20]);
    ModDigit[21]  = get_pvar(SPVAR_53,ModDigitMin[21],ModDigitMax[21],ModDigit[21]);
    ModDigit[22]  = get_pvar(SPVAR_54,ModDigitMin[22],ModDigitMax[22],ModDigit[22]);
    ModDigit[23]  = get_pvar(SPVAR_55,ModDigitMin[23],ModDigitMax[23],ModDigit[23]);
    ModDigit[24]  = get_pvar(SPVAR_56,ModDigitMin[24],ModDigitMax[24],ModDigit[24]);
    ModDigit[25]  = get_pvar(SPVAR_57,ModDigitMin[25],ModDigitMax[25],ModDigit[25]);
    ModDigit[26]  = get_pvar(SPVAR_58,ModDigitMin[26],ModDigitMax[26],ModDigit[26]);
    ModDigit[27]  = get_pvar(SPVAR_59,ModDigitMin[27],ModDigitMax[27],ModDigit[27]);
    ModDigit[28]  = get_pvar(SPVAR_60,ModDigitMin[28],ModDigitMax[28],ModDigit[28]);
    ModDigit[29]  = get_pvar(SPVAR_61,ModDigitMin[29],ModDigitMax[29],ModDigit[29]);
    ModDigit[30]  = get_pvar(SPVAR_62,ModDigitMin[30],ModDigitMax[30],ModDigit[30]);
    ModDigit[31]  = get_pvar(SPVAR_63,ModDigitMin[31],ModDigitMax[31],ModDigit[31]);
    Loaded = On;
	combo_run(Settings);
}    
    
function SaveSettings () {

    set_pvar(SPVAR_1,ModSwitch[1]);
    set_pvar(SPVAR_2,ModSwitch[2]);
    set_pvar(SPVAR_3,ModSwitch[3]);
    set_pvar(SPVAR_4,ModSwitch[4]);
    set_pvar(SPVAR_5,ModSwitch[5]);
    set_pvar(SPVAR_6,ModSwitch[6]);
    set_pvar(SPVAR_7,ModSwitch[7]);
    set_pvar(SPVAR_8,ModSwitch[8]);
    set_pvar(SPVAR_9,ModSwitch[9]);
    set_pvar(SPVAR_10,ModSwitch[10]);
    set_pvar(SPVAR_11,ModSwitch[11]);
    set_pvar(SPVAR_12,ModSwitch[12]);
    set_pvar(SPVAR_13,ModSwitch[13]);
    set_pvar(SPVAR_14,ModSwitch[14]);
    set_pvar(SPVAR_15,ModSwitch[15]);
    set_pvar(SPVAR_16,ModSwitch[16]);
    set_pvar(SPVAR_17,ModSwitch[17]);
    set_pvar(SPVAR_18,ModSwitch[18]);
    set_pvar(SPVAR_19,ModSwitch[19]);
    set_pvar(SPVAR_20,ModSwitch[20]);
    set_pvar(SPVAR_21,ModSwitch[21]);
    set_pvar(SPVAR_22,ModSwitch[22]);
    set_pvar(SPVAR_23,ModSwitch[23]);
    set_pvar(SPVAR_24,ModSwitch[24]);
    set_pvar(SPVAR_25,ModSwitch[25]);
    set_pvar(SPVAR_26,ModSwitch[26]);
    set_pvar(SPVAR_27,ModDigit[32]);
    set_pvar(SPVAR_28,ModDigit[33]);
	set_pvar(SPVAR_33,ModDigit[1]);
    set_pvar(SPVAR_34,ModDigit[2]);
    set_pvar(SPVAR_35,ModDigit[3]);
    set_pvar(SPVAR_36,ModDigit[4]);
    set_pvar(SPVAR_37,ModDigit[5]);
    set_pvar(SPVAR_38,ModDigit[6]);
    set_pvar(SPVAR_39,ModDigit[7]);
    set_pvar(SPVAR_40,ModDigit[8]);
    set_pvar(SPVAR_41,ModDigit[9]);
    set_pvar(SPVAR_42,ModDigit[10]);
    set_pvar(SPVAR_43,ModDigit[11]);
    set_pvar(SPVAR_44,ModDigit[12]);
    set_pvar(SPVAR_45,ModDigit[13]);
    set_pvar(SPVAR_46,ModDigit[14]);
    set_pvar(SPVAR_47,ModDigit[15]);
    set_pvar(SPVAR_48,ModDigit[16]);
    set_pvar(SPVAR_49,ModDigit[17]);
    set_pvar(SPVAR_50,ModDigit[18]);
    set_pvar(SPVAR_51,ModDigit[19]);
    set_pvar(SPVAR_52,ModDigit[20]);
    set_pvar(SPVAR_53,ModDigit[21]);
    set_pvar(SPVAR_54,ModDigit[22]);
    set_pvar(SPVAR_55,ModDigit[23]);
    set_pvar(SPVAR_56,ModDigit[24]);
    set_pvar(SPVAR_57,ModDigit[25]);
    set_pvar(SPVAR_58,ModDigit[26]);
    set_pvar(SPVAR_59,ModDigit[27]);
    set_pvar(SPVAR_60,ModDigit[28]);
    set_pvar(SPVAR_61,ModDigit[29]);
    set_pvar(SPVAR_62,ModDigit[30]);
    set_pvar(SPVAR_63,ModDigit[31]);
    Saved = On;
	combo_run(Settings);
}    