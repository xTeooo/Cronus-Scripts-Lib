/*
	       8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b.         
           888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b         
           888    888          888    888          888     888               888            888    888 888      888           888    888        
           888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P         
           888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"             
           888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b                
           888  .d88P Y88..88P Y88b  d88P  d88P    888     888  888 Y8b.     888        888 Y88b  d88P 888  888 888  Y8b.     888  T88b         
           8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b

	 ////* Created By DoGzTheFiGhTeR *\\\\ Special Thanks To My Top Tester ** drivenbaboon ** 8 )
     ////* Special Thanks To MaxADMIN For Putting The CRONUS On The Map And Where It Is TODAY 8 )
     ////* Special Thanks To My Top Creators ** Batts ** Legit Clouds ** Mr Orion ** ItzSnack ** Even If Your Work Is Not Here You Guys Work Exceptionally *\\\\ !!!!!!!! 8 )

								 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
								 | | | | | | | | | | | | | | |I|N|S|T|R|U|C|T|I|O|N|S| | | | | | | | | | | | | | | | | |  
								 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/


/*			INSTANT EDIT SETUP WITH BUILDER PRO SETTINGS = ALWAYS ON.
			INSTANT RESET WITH R3/RS ONCE IN EDIT MODE OR IN COMBAT MODE PRESS TOUCHPAD (INSTANT RESET WHEN HOLDING YOUR GUN OR PICKAXE)(ASSIGN TOUCHPAD AS EDIT)		
			INSTANT RESET VIA COMBAT MODE = CHANGE EDIT_BUTTON1 & EDIT_RESET_BUTTON1 IN THE SCRIPT TO WHAT BUTTON YOU CHOOSE TO USE AND ASSIGN THAT AS EDIT IN GAME
			LEAVING CIRCLE AS BUILD/EDIT THEN YOU ALSO HAVE INSTANT EDIT RESET VIA THAT METHOD..... (TAP TOUCHPAD (RESET) LOOKING AT THE PEICE YOU WISH TO RESET)
			IN GAME SETTINGS  =   CIRCLE  =  SWITCHMODE/EDIT...   TOUCHPAD  =  EDIT...   EDIT HOLD TIME  =  134
			
			BUILD TRACK MODE WILL SWITCH TO BUILD MODS IN BUILD MODE AND DISABLE COMBAT MODS UNTIL EXITING BUILD MODE = ALWAYS ON *****TRIANGLE TO RESYNC***** !!!!!!!!!!!
			BUILD MODE SPAMS THE BUTTONS FOR YOU
			MODS = INSTANT WALLS, FLOORS, STAIRS, ROOFS AND TRAPS (FOR TRAPS HOLD R3 TO SPAM TRAPS WHICH WILL RELAY TO SQUARE/X)
			HOLD BUTTON DOWN IT WILL SPAM BUILD PIECE FOR YOU SAVING YOU FROM KEEP TAPPING BUTTONS ESPECIALLY EFFECTIVE WITH FLOOR AND ROOF PLUS WALLS AND STAIRS ETC
			IN GAME SETTINGS  = L1/LB = ROOF PIECE... L2/LT = STAIR PIECE... R1/RB = FLOOR PIECE... R2/RT = WALL PIECE... SQUARE/X = TRAP PICKER/PLACE/INTERACT... (HOLD R3 TO SPAM TRAPS)

			DYNAMIC AIM ABUSE = TOGGLE ON/OFF L2/LT & LEFT(ON BY DEFAULT) VALUE ABOVE 90% OF L2/LT WILL START AIM ABUSE (OPTION TO USE AIM ABUSE ON FIRE BELOW IN MAIN SECTION)
			CHANGES VALUES DEPENDING ON YOU RIGHT STICK MOVEMENT (DYNAMIC)
			IN GAME SETTINGS  = L2/LT = AIM DOWN SIGHTS (ADS)...
			
			DYNAMIC AIM ASSIST = VALUE ABOVE 90% OF L2/LT WILL START AIM ASSIST = ALWAYS ON
			CHANGES VALUES CONSTANTLY HELPING YOU LOCK ON TO THE ENEMY (DYNAMIC)
			IN GAME SETTINGS  = L2/LT = AIM DOWN SIGHTS (ADS)...
			
			INSTANT PICKAXE = ONCE RELEASING R2/RT WHEN USING YOUR PICKAXE THIS WILL AUTOMATICALLY SELECT YOUR GUN READY TO SHOOT = ALWAYS ON = TRIANGLE TO RE-ACTIVATE
			IN GAME SETTINGS = TRIANGLE/Y = TOGGLE PICKAXE... R2/RT = ATTACK/CONFIRM (FIRE)... L1/LB = PREVIOUS WEAPON...
			
			PUMP SHOT JUMP FLOOR/WALL BUILD = PRESS L2/LT & R1/RB = AT ANYTIME TO FIRE A SHOT AND INSTANTLY BUILD A WALL PIECE (IT WILL ALSO RUN AIM ABUSE FOR YOU) = ALWAYS ON
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)... CIRCLE = SWITCH MODE/EDIT(BUILD)...R2/RT = WALL PIECE...CROSS/A = JUMP... 
			
			DOUBLE PUMP = PRESS L2/LT & L1/LB = AT ANY TIME AND IT WILL FIRE YOUR PUMP/TAC(SHOTGUN) THEN SWAP TO PUMP/TAC(SHOTGUN) AND FIRE AND RETURN TO YOUR ORIGINAL GUN
			(IT WILL ALSO RUN AIM ABUSE FOR YOU ENSURING YOU HIT THE ENEMY) = ALWAYS ON
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)... L1/LB = PREVIOUS WEAPON... R1/RB = NEXT WEAPON...
			
			DROP SHOT = L2/LT & R3/RS = TOGGLE ON/OFF = WHEN ON HOLDING L2/LT & R2/RT IT WILL AUTOMATICALLY CROUCH FOR YOU WHEN SHOOTING = OFF BY DEFAULT
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)... R3/RS = CROUCH
			
			STRAFE SHOT = D-PAD LEFT & R1/RB = TOGGLE ON/OFF = WHEN ON HOLDING L2/LT & R2/RT IT WILL AUTOMATICALLY MOVE YOU LEFT & RIGHT WHEN YOUR SHOOTING = OFF BY DEFAULT
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)... LEFT STICK = MOVEMENT (LEFT&RIGHT)
			
			RAPID FIRE = D-PAD LEFT & R2/RT = TOGGLE ON/OFF = WHEN ON HOLDING L2/LT & R2/RT IT WILL AUTOMATICALLY SPAM R2 FOR YOU TURNING SINGLE FIRE GUNS INTO AUTOMATIC WEAPONS
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)...   =OFF BY DEFAULT 

			AUTO BUNNY HOP = L2 & CROSS/A = TOGGLE ON/OFF = WHEN ON YOU WILL JUMP ON MOVEMENT UNTIL YOU TURN IT OFF OR ENTER BUILD MODE ONCE EXITING BUILD YOU WILL JUMP AGAIN R3 CANCELS
			IN GAME SETTINGS = CROSS/A = JUMP... *** ONCE YOU HAVE TURNED THIS MOD OFF IT WILL JUMP ONE MORE TIME ***
			
			GHOST PEEK SHOT = L2/LT & SQUARE = AT ANY TIME WILL CROUCH AND SHOOT (BE IN THE CROUCHED POSISTION BEHIND YOUR STAIRS AND YOU WILL POP UP AND SHOOT AND RETURN TO CROUCHED) 
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)...R3/RS = CROUCH   = ALWAYS ON 

			PUMP-SMG = L2 & LEFT = WHEN ON IF YOU RELEASE R2/RT IT WILL SWAP TO YOUR LEFT INVENTORY SLOT THE NEXT TIME YOU RELEASE R2 IT SWAPS BACK TO THE RIGHT INVENTORY SLOT & REPEATED
			IN GAME SETTINGS = L2/LT = AIM DOWN SIGHTS (ADS)... R2/RT = ATTACK/CONFIRM (FIRE)... L1/LB = PREVIOUS WEAPON... R1/RB = NEXT WEAPON...

		    ******NOTE****** == IF ANYTHING IS WRITTEN IN GREEN IT IS CURRENTLY NOT ACTIVE WITHIN THE SCRIPT DUE TO SIZE ISSUES*******************
			******NOTE****** == REMEMBER PICKAXE IS A RE-SYNC BUTTON = IF SOMETHINGS NOT RIGHT TAP PICKAXE 8 )
			******NOTE****** == VALUES CAN BE ALTERED AND EXPERIMENTED WITH TO FIND YOUR SWEET SPOT 8 )

	 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
	 | | | | | | | | |V|A|R|I|A|B|L|E|S| | | | | | | | | | | | | | | | | | | | | | | | | | |  
	 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
		define AAmin  = -15; /*AIM ASSIT MIN 				    	*/int AAR  =  30;///*AIM ABUSE RELEASE
    	define AAmax  =  15; /*AIM ASSIT MAX 				    	*/int AAH  = 330;///*AIM ABUSE HOLD
    	define Inc    =   2; /*INCREMENTS VALUE    					*/
 
   	 	define WAmin  =   1; /*AIM ASSIT DELAY MIN 					*/int AH   = 330;///*AIM ABUSE HOLD    <<ALTER THIS FOR AA
    	define WAmax  =   2; /*AIM ASSIT DELAY MAX			    	*/int AR   =  40;///*AIM ABUSE RELEASE <<ALTER THIS FOR AA
    	define In     =   1; /*INCREMENTS VALUE  					*/int AABS = TRUE;
 
   	    int AS 		  =  AAmin;/* DON'T TOUCH */ 				  	  int release = 35;
    	int AW 		  =  WAmin;/* DON'T TOUCH */				  	  int val_idx;
 
    	int AAS       = 1;/* DIRECTION OF FLOW 1 = + (UP)		    */int BuildTrack = FALSE;
   	    int AAD       = 1;/* DIRECTION OF FLOW 0 = - (DOWN)		    */int edit = FALSE;
   
		int EDIT_BUTTON       = PS4_CIRCLE;   						  int EDIT_BUTTON1         = PS4_TOUCH;     	          
		int EDIT_BUTTON_HOLD  = TRUE;         						  int EDIT_BUTTON_HOLD1    = TRUE;		  
		int EDIT_RESET_BUTTON = PS4_R3;    	  						  int EDIT_RESET_BUTTON1   = PS4_TOUCH;	
		int HOLD_TIME         = 150; 	      						  int SELECT               = PS4_R2;
	 	int CONFIRM			  = PS4_CIRCLE;   						  int BUILD			       = PS4_CIRCLE;
	    int PICKAXE           = PS4_TRIANGLE; 						  int WAIT, num, button, i, a;

		int PWL  = TRUE;/* PUMP SHOT JUMP FLOOR WALL ON OR OFF*/				                                                                                     
		int DP   = TRUE;/*DOUBLE PUMP ON OR OFF*/	int DS   = FALSE;/*DROP SHOT DF*/			    int L1      = FALSE;//<<< DO NOT TOUCH       			
		int GP   = TRUE;/*GHOST PEEK ON OR OFF*/	int PA   = FALSE;/*INSTANT PICKAXE DON'T TOUCH*/int R1      = TRUE: //<<< DO NOT TOUCH
		int STF  = FALSE;/*STRAFE DF*/				int RF   = FALSE;/*RAPID FIRE DF*/			    int PumpSMG = FALSE;//<<< ON/OFF BY DF
		int RW   = 150;	/*STRAFE WAIT RIGHT*/		int JS   = FALSE;/*BUNNYHOP DF*/				int Block;			  //<<< DO NOT TOUCH
		int LW   = 150;	/*STRAFE WAIT LEFT*/		int JSW  = 250;	/*BUNNYHOP WAIT*/				int Button, Button1; //<<< DO NOT TOUCH
		int GPW  = 130;	/*GHOST PEEK WAIT*/	 	  	int RFW  = 30;	/*RAPID FIRE WAIT*/				int BW      = 350	//<<< DO NOT TOUCH
		int run_combo = 0;//<<< DO NOT TOUCH
		// DF = ON OR OFF BY DEFAULT.... TRUE = ON.....FALSE = OFF <<<<<<<<<<<<<
 	/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 	| | | | | | | | |M|A|I|N| |B|L|O|C|K| |S|T|A|R|T|S| |H|E|R|E| | | | | | | | | | | | | |
 	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main{
 
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Instant Edit && Reset Via Two Methods																														    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if (a) {
		if (i < num){
		if (!combo_running(master)){
    			combo_run(master);}}
		else if 
   				(i > num) {a = FALSE;}}
				if (a) {
		if (i < num){
		if (!combo_running(master)){
    			combo_run(master);}}
		else if 
   				(i > num) {a = FALSE;}}
		/*if (event_press(PS4_LEFT)){   														                                      	
				edit = TRUE;}	
		if (edit){
		if (get_val(PS4_LEFT)){
				combo_run(R2);}
		else{ combo_stop(R2);}}
		if (edit){																                                      
		if (event_release(PS4_LEFT)){								                                      
				combo_stop(R2);	                    								  										  
				set_click(PS4_CIRCLE, 1,100)																							  
				edit = FALSE;
				BuildTrack = FALSE;}
				}*/
  		if (EDIT_BUTTON_HOLD1){
  		if(get_val(EDIT_BUTTON1)){                                                         
    		edit = TRUE; 
   			combo_run(RESET);}}
   		if (EDIT_BUTTON_HOLD){
   		if(get_val(EDIT_BUTTON) && get_ptime(EDIT_BUTTON) > 150){//>>    if(get_val(EDIT_BUTTON){   <<< REPLACE LINE IF NO HOLD TIME
            edit = TRUE;
            BuildTrack = TRUE;}}		
		if(edit == TRUE) {
		combo_stop (FLOOR);
		if( event_release (SELECT) || get_val (EDIT_RESET_BUTTON) || get_val (EDIT_RESET_BUTTON1)){  
       		set_click(CONFIRM, 1,100);
       		set_val(CONFIRM,0);
    		edit = FALSE;
    		BuildTrack = FALSE;}
}
    	
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Build Track Monitor																															   	                ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if(event_press(BUILD)){ 
        	BuildTrack=!BuildTrack;}
		if(event_press(PICKAXE)){
			BuildTrack = FALSE;
			edit = FALSE;}
		if(!BuildTrack){
	
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Aim Abuse Dynamic - On/Off Facility																															    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

	  /*if(get_val(PS4_RIGHT) && event_press(PS4_L1)){
			AABS = !AABS;
			Button  = PS4_L1;
			Button1 = PS4_RIGHT;
			combo_run(Block);}*/
    	if (AABS){
		AABSR(AABS);
  	  //if (get_val(PS4_L2) > 90 && get_val(PS4_R2)){   //*(FOR AIM ABUSE ON FIRE REMOVE//FROM THE START OF THIS LINE AND PUT//AT THE BEGINNING OF THE NEXT LINE DOWN)*\\
		if (get_val(PS4_L2) > 90){
			combo_run(AA);}
		else if 
			(!combo_running(AA)){
			combo_stop(AA);}
}
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Dynamic Aim Assist (Progression Flow)																															║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

    		set_val(30,AS / 10);
    		set_val(31,AW / 10);
    	if(get_val(PS4_L2) > 80){
    	if(!combo_running(AAS)) {
            AS = progression(AS,AAmin,AAmax,Inc,AAS,1);
            AW = progression(AW,WAmin,WAmax, In,AAD,2);
            combo_run(AAS);}
}
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Instant Pick Axe																															   	                    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if(get_val(PICKAXE)){
			PA = TRUE;}
		if (event_press(PS4_L2)){
			PA = FALSE; }                                                                                                                   
		if(get_val(PICKAXE)){
			PA = TRUE;}
		if(PA == TRUE){
		if(get_val(BUILD)){
			AAS = TRUE;}
		if (event_release(PS4_R2) || get_val(PS4_L1)){
			set_click(PICKAXE, 1, 0);
			PA = FALSE;}
}
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Pump Shot Jump Floor Wall Build																															   	    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if (get_val(PS4_L2) && get_val(PS4_R2)&& get_ptime(PS4_R2) < 150){
			PWL = !PWL;
			//Button = PS4_R2;
			//BW = 150;
			combo_run(PumpFloor);
			combo_run(Block);}

//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// DOUBLE PUMP/TAC SHOT																															   	   	    		║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if (get_val(PS4_L2) && get_val(PS4_L1)){
			DP = !DP; 
			Button = PS4_L1;
			BW = 1350;
			combo_run(PP);
			combo_run(Block);}	

//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Drop Shot																															   	   					    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if(get_val(PS4_L2) && event_press(PS4_R3)){
			DS = !DS;}
		if(DS)
		if(get_val(PS4_L2) && get_val(PS4_R2)){
			combo_run(DS);}
			
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Strafe Shot																															   	    					║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
	
		if(get_val(PS4_LEFT) && event_press(PS4_L1)){ 
			STF = !STF;
			Button  = PS4_L1;
			Button1 = PS4_LEFT;
			combo_run(Block);}
		if(STF) 
		if (get_val(PS4_L2) && get_val(PS4_R2)) {                                   
			combo_run(STF);
		if(get_val(PS4_LX)< -60||get_val(PS4_LX)> 60||get_val(PS4_LY)< -60||get_val(PS4_LY)> 60){  
			combo_stop(STF);}}
			
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Rapid Fire																															   	    					║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
		
		if(get_val(PS4_LEFT) && event_press(PS4_R2)){ 
			RF = !RF;
			Button  = PS4_R2;
			Button1 = PS4_LEFT;
			combo_run(Block);}                                                      
		if(RF)                                                                             
		if (get_val(PS4_L2) && get_val(PS4_R2)){                                   
			combo_run(RF);}

//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Auto Bunny Hop 																															   	                    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if (get_val(PS4_L2) && event_press(PS4_CROSS)){
    		JS = !JS;}
    	if(event_press(PS4_R3)){//<<<<<<<<<<CROUCH BUTTON
			JS = FALSE;}		
    	if (JS){
    	if (get_val(PS4_LY)> 50 || get_val(PS4_LY)< -50 ||get_val(PS4_LX)> 50 || get_val(PS4_LX)< -50){//<<<<<<<<<<MOVEMENT WITH LEFT STICK
       		run_combo = 5;}
    	if (run_combo && ! combo_running (JS)){
    		run_combo = run_combo - 1;
    		combo_restart (JS);}}

//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Ghost Peek Shot																															   	   				    ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if (get_val(PS4_L2) && get_val(PS4_SQUARE)){
			Button = PS4_SQUARE;
			GP = !GP;
			combo_run(GP);
			combo_run(Block);}
	
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// PUMP/SMG																															   	   				            ║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if(get_val(PS4_L2) && event_press(PS4_LEFT)){
      		PumpSMG = !PumpSMG;
      		Button = PS4_LEFT;
      		combo_run(Block);}
   		if(PumpSMG && R1){
		if(event_release(PS4_R2)){ 
			set_click(PS4_L1, 1, 0);
			L1=TRUE;
			R1 = FALSE;}}
		else if (PumpSMG && L1){
		if(event_release(PS4_R2)){
			set_click(PS4_R1, 1, 0);
			L1=FALSE;
			R1=TRUE;}}

}
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
// Instant Build/Trap																															   	    			║
//══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣

		if(BuildTrack){                                 
   		//if (get_val(PS4_R2)){                 
		//         combo_run(WALL);}                
		if (get_val(PS4_R1)){                 
	         combo_run(FLOOR);}                
		//if (get_val(PS4_L2)){                 
		//         combo_run(STAIRS);}               
    	if (get_val(PS4_L1)){                 
	         combo_run(ROOF);}
		//if (get_val(PS4_L3)){                 
		//        combo_run(TRAP);}
}
}//  MAIN BLOCK END 
 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
  
 	combo PumpFloor {    
       	combo_run(AA);
		wait(AAH + AAR / 2);
		set_val(4, 100);
		wait(30);	
   	 	set_val(7, 0);
    	set_val(4, 0);
    	wait(20);
   		//set_val(19,100);
		//wait(70);
}
	combo PP {
		combo_run(AA);
		wait((AAH +AR) / 2);
    	set_val(7, 100);
		wait(50);
		set_val(4, 100);
		wait(50);
		set_val(3, 100);
		wait(100);
		set_val(3, 0);
		wait(300); 
		combo_run(AA);
		set_val(7, 100);
		wait(800);
		set_val(4, 100);
		wait(50);
		set_val(6, 100);
		wait(100);
		set_val(6, 0);
		wait(1100);
}
	combo GP {
		set_val(5, 100);
		wait(15); 
		wait(15);
		set_val(4, 100);
		wait(15); 
		wait(10);
		set_val(5, 100);
		wait(15); 
		wait(GPW);
}
	combo AA {
		set_val(7, 100);
		wait(AAH);
		set_val(7, 0);
		wait(AAR);
}
	combo WALL{
   		set_val(4, 100);
   		wait (50);
   		set_val(4, 0);
   		wait (50);
}
	combo FLOOR{
   		set_val(3, 100);
   		wait (50);
   		set_val(3, 0);
   		wait (50);
}
	combo STAIRS{
   		set_val(7, 100);
   		wait (50);
   		set_val(7, 0);
   		wait (50);
}
	combo ROOF{
   		set_val(6, 100);
   		wait (50);
   		set_val(6, 0);
   		wait (50);
}
	combo TRAP{
   		set_val(20, 100);
   		wait (50);
   		set_val(20, 0);
   		wait (50);
}
	combo AAS{
		set_val(10, 1 * - AS);
		wait(AW);
		set_val(9, 1 * - AS);
		wait(AW);
		set_val(10,xy_val(10,AS));
		wait(AW);
		set_val(9,xy_val(9,AS));
		wait(AW);
}
	combo RF{                                                                            
		set_val(4, 100);                                                                     
		wait(120);                                                                                   
		set_val(4, 0);                                                                       
		wait(RFW);
}
	combo STF {
    	set_val(11,80);
   		wait(RW);
    	set_val(11,-80);
   		wait(LW);
}
	combo DS{
    	set_val(5,100);
    	wait(40);
    	wait(50);
    	set_val(5,100);
}
	combo JS{
    	set_val(19,100);
    	wait(JSW);
    	set_val(19,0);
}
	combo R2 {																										  
		wait(110);																											  
		set_val(PS4_R2, 100);																								  
		wait(5000);
}
	combo RESET{
/*//*/	set_val(PS4_LEFT, 100);// <<EDIT BUTTON IN GAME (NO HOLD TIME ON THIS BUTTON)(NOT REQURIRED IF RESET BUTTON PROGRAMMED AS EDIT EDIT) 
   	 	wait (50)
		set_val(5,100);		// <<<< RESET BUTTON IN GAME
		wait(50);
		set_val(5,0); 	  // <<<< RESET BUTTON IN GAME
}
	combo Block{ 
 		set_val(Button,0);
 		set_val(Button1,0);
		wait(BW);
}
	combo master {
		wait(WAIT);
		set_val(button, 100);
		wait(28);
		set_val(button, 0);
		wait(28);
		i = i + 1;
}
 /*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |F|U N|C|T|I|O|N S| | | | | | | | | | | | | | | | | | | | | | | | | | |  
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
	function AABSR(R11) {  
	if (R11) {
	if (abs(get_val(9)) < 20 || abs(get_val(10)) < 20) {
		 AAH = AH;
		 AAR = AR;
}
	if (abs(get_val(9)) > 20 < 40 || (abs(get_val(10)) > 20 < 40)) {
		 AAH = AH - 9;
		 AAR = AR - 8;
}
	if (abs(get_val(9)) > 40 < 60 || (abs(get_val(10)) > 40 < 60)) {
		AAH = AH - 25;
		AAR = AR - 12;
}
	if (abs(get_val(9)) > 60 < 80 || (abs(get_val(10)) > 60 < 80)) {
		AAH = AH - 35;
		AAR = AR - 22;
}
	if (abs(get_val(9)) > 80 || (abs(get_val(10)) > 80)) {
		AAH = AH - 60;
		AAR = AR - 10;
}
	if (abs(get_val(9)) < 20 || abs(get_val(10)) < 20) {
		AAH = AH;
		AAR = AR;}}
}
	function set_click(B, Num, Wait) {
		WAIT = Wait;
		i = 0;
		button = B;
		num = Num;
		a = TRUE;
}    
	function progression(f_val,f_min,f_max,f_inc,f_dir,f_idx) {
    if(f_dir) {
        f_val += f_inc;
    if(f_val <= f_max)  
    return f_val;
    if(f_val > f_max) {
        val_idx[f_idx] = 0;
    return f_val - f_inc;}
}
	else{
        f_val -= f_inc;    
    if(f_val >= f_min)  
    	return f_val;
    if(f_val < f_min) {
   		 val_idx[f_idx] = 1;
         return f_val + f_inc;}
} 
   		 return FALSE;    
}
	function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < release)
       	 return f_val;
    return get_val(f_axis);
}