/*
  ______     ___       __       __           ______    _______     _______   __    __  .___________.____    ____ 
 /      |   /   \     |  |     |  |         /  __  \  |   ____|   |       \ |  |  |  | |           |\   \  /   / 
|  ,----'  /  ^  \    |  |     |  |        |  |  |  | |  |__      |  .--.  ||  |  |  | `---|  |----` \   \/   /  
|  |      /  /_\  \   |  |     |  |        |  |  |  | |   __|     |  |  |  ||  |  |  |     |  |       \_    _/   
|  `----./  _____  \  |  `----.|  `----.   |  `--'  | |  |        |  '--'  ||  `--'  |     |  |         |  |     
 \______/__/     \__\ |_______||_______|    \______/  |__|        |_______/  \______/      |__|         |__|     
                                                                                                                 
____    __    ____  ___      .______      ________    ______   .__   __.  _______                                
\   \  /  \  /   / /   \     |   _  \    |       /   /  __  \  |  \ |  | |   ____|                               
 \   \/    \/   / /  ^  \    |  |_)  |   `---/  /   |  |  |  | |   \|  | |  |__                                  
  \            / /  /_\  \   |      /       /  /    |  |  |  | |  . `  | |   __|                                 
   \    /\    / /  _____  \  |  |\  \----. /  /----.|  `--'  | |  |\   | |  |____                                
    \__/  \__/ /__/     \__\ | _| `._____|/________| \______/  |__| \__| |_______|        


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 ____  _____ __  __     _   _    ____  _____ ____    __   ____  ____   ___    __  __     ___ 
/ ___|| ____|  \/  |   | | / \  / ___|| ____/ ___|  | _| |  _ \|  _ \ / _ \  |_ | \ \   / / |
\___ \|  _| | |\/| |_  | |/ _ \ \___ \|  _| \___ \  | |  | |_) | |_) | | | |  | |  \ \ / /| |
 ___) | |___| |  | | |_| / ___ \ ___) | |___ ___) | | |  |  __/|  _ <| |_| |  | |   \ V / | |
|____/|_____|_|  |_|\___/_/   \_\____/|_____|____/  | |  |_|   |_| \_\\___/   | |    \_(_)|_|
                                                     |__|                     |__|            


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","EXPLOIY YT","SEMJASES PRO V.1","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Boost","Aim Assist"};
const string Mode [] = {"Secondary","Primary","Load","Current:"};
const string Mode1 [] = {"    Secondary","     Primary"};
const string Weapons [] = {"  XM4"," Krig6"," QBZ83"," AK47","  M16","  AUG"," AK74u"," MAC10","  MP5","Bullfrog","  M60","Stoner"," 1911","Diamatti","Magnum","Pelin703","Dragunov","Tundra","  M82","StSweeper"," Gallo"," Hauer"};
const string ModToggle [] = {"" , "DoGz Polar XI AA"  , "Taylor Shapes AA" , " DoGz Polar VI AA" , " Polar Boost VI"  , "DAM Polar Assist"  , " DAM Polar Boost"  , "DoGz Adaptive AA"  , "Batts Sticky Aim"  , " Fall Off Assist"  , "Legacy Aim Assist"  , "Evil Version 5.3"  , " Loadout Profiles" , "   Rapid Fire"  , "   Hold Breath"  , "   Auto Sprint"  , "OLED Screen Saver" };
const string ModAimAssist [] = {""," Incline"," Decline","Prog Both","Prog Power","Prog Speed","Methods Off","   Off"};
const string ModAimAssistT [] = {"","Circle","Tall","Wide","Spiral","Helix","OFF"};
const string ModValue [] = {""   , " Polar XI Power"  , " Polar XI Speed"  , "PolarXIPowerBoost"  , "PolarXISpeedBoost"  , "Polar XI Deadzone"  , "   Taylor Radius"  , "   Taylor Angle"  , "Taylor Radius Min"  , "DoGz Polar Radius"  , "DoGz Polar Angle"  , "DoGz Radius Boost"  , "DoGz Angle Boost"  , "DoGz Polar Release"  , "DAM Polar Radius"  , "DAM Polar Angle"  , "DAM Radius Boost"  , "DAM Angle Boost"  , "Adapt Radius Base"  , "Adapt RadiusDZone"  , "Adapt Radius Fire"  , "Adapt Angle Base"  , "Adapt Angle DZone"  , "Adapt Angle Fire"  , "Adapt AA DeadZone"  , "BattsSticky Power"  , "Batts Sticky Wait"  , " Falloff AA RY"  , " Falloff AA RX"  , "Falloff AA Wait"  , "Legacy RY Assist"  , "Legacy RX Assist"  , "   Legacy Wait"  , "Legacy AA Release"  , " Evil Correction"  , "    Evil Boost"  , "Evil PerfectLimit"  , "Evil Sample Time"  , " Evil Aim Limit"  , " Evil MVT Limit"  , "Loadout AR Sens"  , " Rapid Fire Hold" , " Rapid Fire Wait" };
const int16 ModDigitMin [] = {  0  , 1 , 1 , 1 , 1 , 5 , 1 , 1 , 1 , 1 , 2 , 1 , 2 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 5 , 1 , 10 , 1 , 1 , 10 , 1 , 1 , 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , -20 , 30 , 30};
const int16 ModDigitMax [] = {  0  , 50 , 90 , 30 , 90 , 50 , 50 , 90 , 30 , 50 , 90 , 20 , 90 , 50 , 50 , 90 , 50 , 90 , 50 , 50 , 50 , 90 , 90 , 90 , 180 , 50 , 200 , 50 , 50 , 200 , 50 , 50 , 200 , 50 , 50 , 50 , 50 , 200 , 90 , 90 , 20 , 200 , 200};
const int16 ModDigitInc [] = {  0  , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 1 , 1 , 10 , 1 , 1 , 10 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 10 , 10};
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Lethal   = PS4_R1;
define Tactical = PS4_L1;
define Switch   = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_CIRCLE;
define Melee    = PS4_R3;
define Sprint   = PS4_L3;
define Ping     = PS4_UP;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define AimX     = PS4_RX;
define AimY     = PS4_RY;
define Strafe   = PS4_LX;
define Walk     = PS4_LY;
define PY       = POLAR_RY;
define PX       = POLAR_RX;
define PS       = POLAR_RS;
define On       = TRUE;
define Off      = FALSE;
define ProfileSwap      = PS4_TRIANGLE;
 
define ProfileSyncHold  = PS4_SQUARE;
define ProfileSyncPress = PS4_L1;
 
define LoadOutHold      =  PS4_CIRCLE;
define LoadOutPress1    =  PS4_UP;
define LoadOutPress2    =  PS4_RIGHT;
define LoadOutPress3    =  PS4_DOWN;
define LoadOutPress4    =  PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_CIRCLE;
define ChangeMenuPress = PS4_CROSS;

//Show Current Slot Info Buttons;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define ScreenSaver   =  On;
define TimeoutLimit  = 1;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 16;
define IndexMinValues   = 1;
define IndexMaxValues   = 42;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt,VibA,VibB;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int ToggleT,ToggleTime,ToggleName,Modled;
int DamAngle,DamCos,DamSin,DamX,DamY,ActualMagnitude,MaxMagnitude,RadiusDam,AngleDam,DoGzVIRadius,DoGzVIAngle,VISpeed;
int TaylorPosition,RXTAA,RYTAA,ShapeAngle,ShapeCos,ShapeSin,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ShapeMagnitude,ShapeMaxMagnitude;
int DoGzStep,AxisXY,DoGzAngle,DoGzRadius,sBoost,rBoost,DirectionP,DirectionS;
int AdaptiveAngle,AdaptiveCos,AdaptiveSin,AdaptiveX,AdaptiveY,AdaptiveMagnitude,AdaptMaxMagnitude,AdaptRadius,AdaptAngle,AdaptSpeed;
int EvilXL,EvilYL,EvilX,EvilY,Sample,SpiroidePulse,FinePulse,LearnXY,LearnRX,LearnRY;
int Output;
int Weapon[49];
int SensX,SensY,LoadC,Gun,ARL;
int DoGzHorizontal,DoGzVertical,RecoilYTimer,RecoilXTimer,Vertical,Horizontal,RXC,RYC,RecoilValue,RecoilTime,RecoilValuex,RecoilTimex;
int Primary = On;
int Load = On;

int SprintTimer;
int BreathTimer;
define BreathTime = 3500;


define Circular    = 1;
define TallOval    = 2;
define WideOval    = 3;
define Spiral      = 4;
define Helix       = 5;
define TaylorAAOff = 6;


define BoostIncline   = 1;
define BoostDecline   = 2;
define BoostProgBoth  = 3;
define BoostProgPower = 4;
define BoostProgSpeed = 5;
define AAWithBoostOff = 6;
define DoGzXIOff      = 7;

define WeaponMin = 0;
define WeaponMax = 21;

int Saver,Ms,Sec,Min,ScreenTime;
int Snow_x,Snow_y,Snow_t,Snow_c = 1;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                Aim Assist Hip Fire                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define DoGzXIAAHip    = Off;
define TaylorAAHip    = Off;
define PolarVIAAHip   = Off;
define DAMPolarAAHip  = Off;
define AdaptiveAAHip  = Off;
define BattsAAHip     = Off;
define FallOffAAHip   = Off;
define LegacyAAHip    = Off;
define EvilAAHip      = Off;
// Anti Recoil Inverted
define InvertedYAxis    = Off;
define RapidFireHip  = Off;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int DoGzPower        = 15;
int DoGzSpeed        = 9;
int DoGzPowerBoost   = 3;
int DoGzSpeedBoost   = 9;
int DoGzDeadzone     = 10;
int TaylorRadius     = 15;
int TaylorAngle      = 15;
int TaylorMinRadius  = 5;
int PolarRadius      = 15;
int PolarAngle       = 20;
int PolarRadiusBoost = 5;
int PolarAngleBoost  = 10;
int PolarRelease     = 20;
int DAMRadius        = 15;
int DAMAngle         = 20;
int DAMRadiusBoost   = 6;
int DAMAngleBoost    = 10;
int AdaptBaseRadius  = 15;
int AdaptZoneRadius  = 17;
int AdaptFireRadius  = 20;
int AdaptBaseAngle   = 15;
int AdaptZoneAngle   = 20;
int AdaptFireAngle   = 30;
int AdaptDeadZone    = 8;
int BattStickyPower  = 20;
int BattStickyWait   = 20;
int FallOffAARY      = 20;
int FallOffAARX      = 20;
int FallOffAAWait    = 20;
int LegacyAARY       = 20;
int LegacyAARX       = 20;
int LegacyAAWait     = 20;
int LegacyRelease    = 20;
int AimCorrection    = 12;
int AimBoost         = 7;
int PerfectionLimit  = 30;
int SamplingTime     = 10;
int AimLimit         = 70;
int MVTLimit         = 30;
int LoadoutSens      = 10;
int RapidFireHold    = 30;
int RapidFireWait    = 30;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModSwitch;
int DoGzPolarXIAssist = DoGzXIOff;
int TaylorAssist      = Helix;
int PolarVIAssist     = Off;
int PolarVIBoost      = Off;
int DamPolarAssist    = Off;
int DamPolarBoost     = Off;
int DoGzAdaptivePolar = Off;
int BattsStickyAA     = Off;
int FallOffAssist     = Off;
int LegacyAssist      = Off;
int EvilAssist        = Off;
int DoGzCWLoadoutsAR  =  On;
int RapidFire         = Off;
int HoldBreath        = Off;
int AutoSprint        =  On;
int OLEDScreenSaver   =  On;

int Loadout;


/*¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦                   
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦                                                                                                                              ¦¦
¦¦                                   .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.                                       ¦¦
¦¦                                  (      RECOIL LOADOUTS 1 To 4 WEAPON SELECTION       )                                      ¦¦
¦¦                                   `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*                                       ¦¦
¦¦                                                                                                                              ¦¦
¦¦  *|0 ¦AR ¦XM4                                                                                        *|0 ¦AR ¦XM4            ¦¦
¦¦  *|1 ¦AR ¦Krig6                                                                                      *|1 ¦AR ¦Krig6          ¦¦
¦¦  *|2 ¦AR ¦QBZ83                                                                                      *|2 ¦AR ¦QBZ83          ¦¦
¦¦  *|3 ¦AR ¦AK47                                                                                       *|3 ¦AR ¦AK47           ¦¦
¦¦  *¦4 ¦TAR¦M16           * PRIMARY LOADOUT ONE */      int Load1P = 0; /* * PRIMARY LOADOUT ONE *     *¦4 ¦TAR¦M16            ¦¦
¦¦  *¦5 ¦TAR¦AUG           * SECONDARY LOADOUT ONE */    int Load1S = 6; /* * SECONDARY LOADOUT ONE *   *¦5 ¦TAR¦AUG            ¦¦
¦¦  *|6 ¦SMG¦AK_74u                                                                                     *|6 ¦SMG¦AK_74u         ¦¦
¦¦  *|7 ¦SMG¦MAC_10                                                                                     *|7 ¦SMG¦MAC_10         ¦¦
¦¦  *|8 ¦SMG¦MP5           * PRIMARY LOADOUT TWO */      int Load2P = 1; /* * PRIMARY LOADOUT TWO *     *|8 ¦SMG¦MP5            ¦¦
¦¦  *|9 ¦SMG¦Bullfrog      * SECONDARY LOADOUT TWO */    int Load2S = 7; /* * SECONDARY LOADOUT TWO *   *|9 ¦SMG¦Bullfrog       ¦¦
¦¦  *|10¦LMG¦M60                                                                                        *|10¦LMG¦M60            ¦¦
¦¦  *|11¦LMG¦Stoner                                                                                     *|11¦LMG¦Stoner         ¦¦
¦¦  *|12¦PSL¦1911_         * PRIMARY LOADOUT THREE */    int Load3P = 2; /* * PRIMARY LOADOUT THREE *   *|12¦PSL¦1911_          ¦¦
¦¦  *|13¦PSL¦Diamatti      * SECONDARY LOADOUT THREE */  int Load3S = 8; /* * SECONDARY LOADOUT THREE * *|13¦PSL¦Diamatti       ¦¦
¦¦  *|14¦PSL¦Magnum                                                                                     *|14¦PSL¦Magnum         ¦¦
¦¦  *|15¦SNP¦Pelington 703 * PRIMARY LOADOUT FOUR */     int Load4P = 5; /* * PRIMARY LOADOUT FOUR *    *|15¦SNP¦Pelington 703  ¦¦
¦¦  *|16¦SNP¦Dragunov        * SECONDARY LOADOUT FOUR */ int Load4S = 9; /* * SECONDARY LOADOUT FOUR *  *|16¦SNP¦Dragunov       ¦¦
¦¦  *|17¦SNP¦Tundra                                                                                     *|17¦SNP¦Tundra         ¦¦
¦¦  *|18¦SNP¦M82                                                                                        *|18¦SNP¦M82            ¦¦
¦¦  *|19¦STG¦StreetSweeper                                                                              *|19¦STG¦StreetSweeper  ¦¦
¦¦  *|20¦STG¦Gallo SA12                                                                                 *|20¦STG¦Gallo SA12     ¦¦
¦¦  *|21¦STG¦Hauer 77                                                                                   *|21¦STG¦Hauer 77       ¦¦
¦¦                                                                                                                              ¦¦
¦¦           * Compiler Set Up * Input the ID number from the list of weapons (int Load1P = 0;) This sets it to XM4             ¦¦
¦¦                                                                                                                              ¦¦
¦¦     * In Game Setup * Hold Square + Press UP (Load 1) + Press RIGHT (Load 2) + Press DOWN (Load 3) + Press LEFT (Load 4)     ¦¦
¦¦                     (The Current loadout is enabled when selecting one of the above(When Recoil Profiles ON))                ¦¦
¦¦                                                                                                                              ¦¦
¦¦                         * While Loadouts screen is displayed on the ZEN after loadout has been selected *                    ¦¦
¦¦                  (Press UP or DOWN to change Primary Weapon --- Press RIGHT or LEFT to change Secondary Weapon)              ¦¦
¦¦                                * Press Triangle to swap your current state (PRIMARY or SECONDARY) *                          ¦¦
¦¦                                  * The SCREEN will clear once the timer counts down from inactivity *                        ¦¦
¦¦                                                                                                                              ¦¦
¦¦                                                                                                                              ¦¦
¦¦                    ***     HOLD BREATH + RAPID FIRE ARE BUILT INTO THE PROFILE FOR EACH WEAPON IF NEEDED  ***                ¦¦
¦¦                               ***  HOLD BREATH + RAPID FIRE CAN BE SWITCHED ON AS NORMAL  ***                                ¦¦
¦¦                                                                                                                              ¦¦
¦¦                                                                                                                              ¦¦
¦¦                                    *** AIM ASSIST WILL PAUSE WHILE RECOIL IN PROGRESS ***                                    ¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦*/


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    combo_run(Boot);

   if (!LearnXY) {
   
       LearnRX = get_ival(AimX); 
       LearnRY = get_ival(AimY); 
       LearnXY = On;
   }
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {


        if (AutoSprint) {
        
            if (!get_ival(Ads) && get_ival(Walk) < -90) {
                
                set_val(Sprint,100);
                SprintTimer += get_rtime();
                
                if (SprintTimer >= 2300 || event_press(Sprint)) {
                    
                    combo_run(Tactical);
                    SprintTimer = 0;
                }
            
            } else {
            
                SprintTimer = 0;
            }
        }

    if (!ARL) {

        if (DoGzPolarXIAssist <= 6) {
        
            if (get_ival(Ads) || (DoGzXIAAHip && get_ival(Fire))) {        
                
                AxisXY = isqrt(abs(get_ival(AimX)) * abs(get_ival(AimX)) + abs(get_ival(AimY)) * abs(get_ival(AimY)));
                
                DoGzRadius = (DoGzPower + rBoost);
                DoGzAngle = DoGzStep;
                DoGzStep = (DoGzStep + DoGzSpeed + sBoost);
                
                if (get_ival(Fire) && DoGzPolarXIAssist != 6) {
                
                    if (DoGzPolarXIAssist == BoostIncline) {
                        
                        rBoost = DoGzPowerBoost;
                        sBoost = DoGzSpeedBoost;
                    }
                        
                    else if (DoGzPolarXIAssist == BoostDecline) {
                        
                        if (DoGzSpeedBoost == DoGzSpeed) {    
                            
                            DoGzSpeedBoost = DoGzSpeed / 2;
                        }
                        
                        if (DoGzPowerBoost == DoGzPower) {    
                            
                            DoGzPowerBoost = DoGzPower / 2;
                        }
                        
                        rBoost = inv(DoGzPowerBoost);
                        sBoost = inv(DoGzSpeedBoost);
                        
                    }                    
                    
                    else if (DoGzPolarXIAssist >= 3) {
                        
                        if (event_press(Fire)) {
                        
                            rBoost = DoGzPowerBoost;
                            sBoost = DoGzSpeedBoost;
                            DirectionP = On;
                            DirectionS = On;
                        }
                            
                        if (DoGzPolarXIAssist == 3 || DoGzPolarXIAssist == 4) {
                            
                            if (DirectionP) {
                                
                                if (rBoost < (DoGzPower + DoGzPowerBoost)) {
                                    
                                    rBoost++;
                                }
                                
                                if (rBoost >= (DoGzPower + DoGzPowerBoost)) {
                                
                                    DirectionP = Off;
                                }
                            }
                            
                            if (!DirectionP) {
                            
                                if (rBoost > (DoGzPower - DoGzPowerBoost)) {
                                    
                                    rBoost--;
                                }    
                                
                                if (rBoost <= (DoGzPower - DoGzPowerBoost)) {
                                
                                    DirectionP = On;
                                }
                            }
                        }
                        
                        if (DoGzPolarXIAssist == 3 || DoGzPolarXIAssist == 5) {
                        
                            if (DirectionS) {
                                
                                if (sBoost < (DoGzSpeed + DoGzSpeedBoost)) {
                                    
                                    sBoost++;
                                }
                                
                                if (sBoost >= (DoGzSpeed + DoGzSpeedBoost)) {
                                
                                    DirectionS = Off;
                                }
                            }
                        
                            if (!DirectionS) {
                            
                                if (sBoost > (DoGzSpeed - DoGzSpeedBoost)) {
                                
                                    sBoost--;
                                }    
                            
                                if (sBoost <= (DoGzSpeed - DoGzSpeedBoost)) {
                            
                                    DirectionS = On;
                                }
                            }
                        }
                    }
                }
                    else {
                
                        rBoost = Off;
                        sBoost = Off;
                    }
                    
                if (DoGzStep < 0) DoGzStep += 360;
                    
                    DoGzStep = DoGzStep % 360;
                    
                if (AxisXY < DoGzDeadzone) {
                    
                    set_polar(PS,DoGzStep,(DoGzRadius + AxisXY) * 327);
                }
                   
                   if (AxisXY >= DoGzDeadzone) {
                   
                    DoGzPolar(DoGzAngle,DoGzRadius);
                }
            }
        } 

        if (TaylorAssist <= 5) {     
                    
            if (get_ival(Ads) || (TaylorAAHip && get_ival(Fire))) {
                
                RXTAA = get_val(AimX);                                
                RYTAA = get_val(AimY); 
                ShapeMagnitude = isqrt(pow(RXTAA,2) + pow(RYTAA,2));   
                ShapeMaxMagnitude = (ShapeMagnitude < 100);             
                              
                ShapeAngle += TaylorAngle;                                    
                ShapeAngle = ShapeAngle % 360;  
                ShapeCos = DamPolar[(ShapeAngle + 270) % 360];  
                ShapeSin = DamPolar[ShapeAngle % 360];
                
                if (ShapeMagnitude < TaylorRadius) {
                       
                    ShapeSin -= RYTAA;                                                              
                    ShapeCos -= RXTAA;
                
                } else {     
                    
                    ShapeSin = (ShapeSin * (200 - ((abs(RYTAA) + ShapeMagnitude) / 10) * 10) / 200) * ShapeMaxMagnitude;  
                    ShapeCos = (ShapeCos * (200 - ((abs(RXTAA) + ShapeMagnitude) / 10) * 10) / 200) * ShapeMaxMagnitude;   
                }                                                  
                
                GetShapes(TaylorRadius);         
            }
        }

        if (PolarVIAssist) {
        
            if (get_ival(Ads) || (PolarVIAAHip && get_ival(Fire))) { 
            
                if (abs(get_ival(AimX)) <= PolarRelease && abs(get_ival(AimY)) <= PolarRelease) {
                
                    if (PolarVIBoost && get_ival(Fire)) {
                        
                        DoGzVIRadius = PolarRadius + PolarRadiusBoost;
                        DoGzVIAngle = PolarAngle + PolarAngleBoost;
                    
                    } else {
                        
                        DoGzVIRadius = PolarRadius;
                        DoGzVIAngle = PolarAngle;
                    }
                
                    set_polar(PS,VISpeed = (VISpeed + DoGzVIAngle) % 360,(abs(get_ival(PX)) + abs(get_ival(PY))) / 4 + DoGzVIRadius * 328);
                }
            }
        }

        if (DamPolarAssist) {
        
            if (get_ival(Ads) || (DAMPolarAAHip && get_ival(Fire))) {
            
                DamX = get_ival(AimX);   
                DamY = get_ival(AimY);           
                ActualMagnitude = isqrt(pow(DamX,2) + pow(DamY,2));  
                MaxMagnitude = (ActualMagnitude < 100);                      
            
                if (DamPolarBoost && get_ival(Fire)) {
                        
                    RadiusDam = DAMRadius + DAMRadiusBoost;
                    AngleDam = DAMAngleBoost;
                    
                } else {
                        
                    RadiusDam = DAMRadius;
                    AngleDam = 0;
                }
                
                DamAngle += DAMAngle + AngleDam;                                                 
                DamAngle = DamAngle % 360;                                            
                DamSin = DamPolar[DamAngle % 360];                           
                DamCos = DamPolar[(DamAngle + 270) % 360];                  
                DamCos = (DamCos * RadiusDam) / 100;                         
                DamSin = (DamSin * RadiusDam) / 100;                          
            
                if (ActualMagnitude <= 10) {                                                      
                    
                    DamSin -= DamY;                                                              
                    DamCos -= DamX;                                                                 
                
                } else {                                                                                       
                        
                    DamSin = (DamSin * (200 - ((abs(DamY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                    DamCos = (DamCos * (200 - ((abs(DamX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                }                                                  
                
                set_val(AimX,clamp(DamX + DamCos, -100,100));
                set_val(AimY,clamp(DamY + DamSin, -100,100)); 
            }
        }

        if (DoGzAdaptivePolar) {
    
            if (get_ival(Ads) || (AdaptiveAAHip && get_ival(Fire))) {
        
                if (abs(get_ival(AimX)) <= AdaptDeadZone && abs(get_ival(AimY)) <= AdaptDeadZone) {
            
                    AdaptSpeed += AdaptAngle;
        
                    if (AdaptSpeed >= 360) AdaptSpeed = 0;

                    if (get_ival(Fire)) {
                
                        AdaptRadius = AdaptFireRadius;
                        AdaptAngle  = AdaptFireAngle;
                    
                    } else {
                    
                        AdaptRadius = AdaptBaseRadius;
                        AdaptAngle  = AdaptBaseAngle;
                    }
                
                    set_polar(PS,AdaptSpeed,(abs(get_ival(PX)) + abs(get_ival(PY))) / 4 + AdaptRadius * 328);
                }
        
                if (abs(get_ival(AimX)) > AdaptDeadZone || abs(get_ival(AimY)) > AdaptDeadZone) {
            
                    AdaptiveX = get_ival(AimX);
                    AdaptiveY = get_ival(AimY);
                    AdaptiveMagnitude = isqrt(pow(AdaptiveX,2) + pow(AdaptiveY,2));
                    AdaptMaxMagnitude = (AdaptiveMagnitude < 100);

                    if (get_ival(Fire)) {
                
                         AdaptRadius = AdaptFireRadius;
                        AdaptAngle  = AdaptFireAngle;
                
                    } else {
                    
                        AdaptRadius = AdaptZoneRadius;
                        AdaptAngle  = AdaptZoneAngle;
                    }
            
                    AdaptiveAngle += AdaptAngle;
                    AdaptiveAngle = AdaptiveAngle % 360;
                    AdaptiveSin = DamPolar[AdaptiveAngle % 360];
                    AdaptiveCos = DamPolar[(AdaptiveAngle + 270) % 360];
                    AdaptiveCos = (AdaptiveCos * AdaptRadius) / 100;
                    AdaptiveSin = (AdaptiveSin * AdaptRadius) / 100;

                    if (AdaptiveMagnitude <= AdaptDeadZone) { 
                
                        AdaptiveSin -= AdaptiveY; 
                        AdaptiveCos -= AdaptiveX; 
                
                    } else { 
                    
                    AdaptiveSin = (AdaptiveSin * (200 - ((abs(AdaptiveY) + AdaptiveMagnitude) / 10) * 10) / 200) * AdaptMaxMagnitude; 
                    AdaptiveCos = (AdaptiveCos * (200 - ((abs(AdaptiveX) + AdaptiveMagnitude) / 10) * 10) / 200) * AdaptMaxMagnitude; 
                    } 
                    
                    set_val(AimX,clamp(AdaptiveX + AdaptiveCos, -100,100));
                    set_val(AimY,clamp(AdaptiveY + AdaptiveSin, -100,100)); 
                }
            }
        }

        if (BattsStickyAA) {
        
            if (get_ival(Ads) || (BattsAAHip && get_ival(Fire))) {
            
                combo_run(BattsStickyAssist);
            
            } else {
            
                combo_stop(BattsStickyAssist); 
            }
        }

        if (LegacyAssist) {
        
            if (get_ival(Ads) || (LegacyAAHip && get_ival(Fire))) {
            
                if (abs(get_ival(AimX)) <= LegacyRelease && abs(get_ival(AimY)) <= LegacyRelease) {
            
                    combo_run(LegacyAssist);
            
                } else {
            
                    combo_stop(LegacyAssist); 
                }
            }
        }

        if (FallOffAssist) {
        
            if (get_ival(Ads) || (FallOffAAHip && get_ival(Fire))) {
            
                combo_run(FallOffAssist);
            
            } else {
            
                combo_stop(FallOffAssist); 
            }
        }

        if (EvilAssist) {
        
            if (get_ival(Ads) || (EvilAAHip && get_ival(Fire))) {
     
                vm_tctrl(-2);
                 EvilXL = EvilX;
                   EvilYL = EvilY;
                   EvilX = get_lval(AimX)- LearnRX;
                   EvilY = get_lval(AimY)- LearnRY;
   
                   if (get_ival(Ads) || (EvilAAHip && get_ival(Fire))) {
                   
                       if (abs(EvilX) <= MVTLimit && abs(EvilY) <= MVTLimit) {    
                           
                           if (abs(EvilXL - EvilX) < 15) {
                           
                               combo_stop(Perfection);
                               Sample = Off;
   
                               if (get_ival(Fire) > 95) { 
        
                                combo_stop(FineTune);
                                FinePulse = 0;
                                combo_run(Spiroide);
                            
                            } else {
                            
                                combo_stop(Spiroide);
                                SpiroidePulse = 0;
                                combo_run(FineTune);
                            }
                        }
                    }
                    
                       else if (abs(EvilX) <= AimLimit && abs(EvilY) <= AimLimit) { 
        
                        combo_stop(FineTune);
                        combo_stop(Spiroide);
                        SpiroidePulse = 0;
                        FinePulse = 0;
                        combo_run(Perfection);
                    }
                
                } else {
                    
                    combo_stop(FineTune);
                    combo_stop(Spiroide);
                    combo_stop(Perfection);
                    SpiroidePulse = 0;
                    FinePulse = 0;
                    Sample = Off;
                }
            
            } else {
            
                vm_tctrl(0);
            }
        }

    }

        if (RapidFire || (AntiRecoil[Weapon[Gun]][78] == 1)) {

            if (RapidFireHip) {
                
                if (get_ival(Fire)) {
            
                    combo_run(RapidFire);
            
                } 
            
            } else if (get_ival(Ads) && get_ival(Fire)) {
            
                combo_run(RapidFire);    
                
            } else {
                
                combo_stop(RapidFire);
            }
        }

        if (HoldBreath || AntiRecoil[Weapon[Gun]][79] == 1) {
        
            if (get_ival(Ads)) {
                
                set_val(Sprint,100);
                BreathTimer += get_rtime();
            
            } else {
            
                BreathTimer = 0;
            }
            
            if (get_ival(Walk) <-90 && get_ival(Ads) && get_ptime(Ads) > 200) {
                      
                combo_stop(HoldBreath); 
                BreathTimer = 0;
            }        
            
            if (event_press(Ads) || event_press(Sprint) || BreathTimer >= BreathTime) {
                
                combo_run(HoldBreath);
                BreathTimer = 0;
            }
        } 
        
            if (DoGzCWLoadoutsAR) {    
                    
                if (event_release(ProfileSwap) && get_ptime(ProfileSwap) < 150) {
                    
                    Primary = !Primary;
                        
                    if (!combo_running(Load)) {    
                        
                        ToggleName = On;
                        Toggle(On,Mode1[Primary]);
                       
                    } else {
                                   
                        LoadC = On;
                        combo_restart(Load);
                       }
                   }
                
                if (get_ival(ProfileSyncHold) && event_press(ProfileSyncPress))  {
                        
                    Shunt = ProfileSyncPress;
                    Primary = On;
                
                    if (!combo_running(Load)) {    
                            
                        ToggleName = On;
                        Toggle(On,Mode1[Primary]);
                       
                    } else {
                                   
                        LoadC = On;
                        combo_restart(Load);
                    }
                }
                
                if (!MainMenu && get_ival(LoadOutHold)) { 
                
                    if (event_press(LoadOutPress1)) {
                        
                        Load = 1;
                        LoadC = On;
                        VibA = On;
                        combo_run(Rumble);
                        combo_run(Load);
                    }
                        
                    if (event_press(LoadOutPress2)) {
                                
                        Load = 2;
                        LoadC = On;
                        VibA = On;
                        combo_run(Rumble);
                        combo_run(Load);
                    }
                            
                    if (event_press(LoadOutPress3)) {
                                
                        Load = 3;
                        LoadC = On;
                        VibA = On;
                        combo_run(Rumble);
                        combo_run(Load);
                    }
                        
                    if (event_press(LoadOutPress4)) {
                                    
                        Load = 4;
                        LoadC = On;
                        VibA = On;
                        combo_run(Rumble);
                        combo_run(Load);
                    }        
                            
                    set_val(Up,0); set_val(Down,0);set_val(Left,0);set_val(Right,0);
                }
            
            
                if (combo_running(Load)) {
                    
                    if (event_press(Up)) {
                        
                        if (Load == 1) Load1P ++;
                        if (Load == 2) Load2P ++;
                        if (Load == 3) Load3P ++;
                        if (Load == 4) Load4P ++;
                        
                        if (Load1P > WeaponMax) Load1P = WeaponMin;
                        if (Load2P > WeaponMax) Load2P = WeaponMin;
                        if (Load3P > WeaponMax) Load3P = WeaponMin;
                        if (Load4P > WeaponMax) Load4P = WeaponMin;
                        
                        LoadC = On;
                        combo_restart(Load);
                    }
                
                    if (event_press(Down)) {
                        
                        if (Load == 1) Load1P --;
                        if (Load == 2) Load2P --;
                        if (Load == 3) Load3P --;
                        if (Load == 4) Load4P --;
                        
                        if (Load1P < WeaponMin) Load1P = WeaponMax;
                        if (Load2P < WeaponMin) Load2P = WeaponMax;
                        if (Load3P < WeaponMin) Load3P = WeaponMax;
                        if (Load4P < WeaponMin) Load4P = WeaponMax;
                        
                        LoadC = On;
                        combo_restart(Load);
                    }
                    
                    
                    if (event_press(Right)) {
                        
                        if (Load == 1) Load1S ++;
                        if (Load == 2) Load2S ++;
                        if (Load == 3) Load3S ++;
                        if (Load == 4) Load4S ++;
                        
                        if (Load1S > WeaponMax) Load1S = WeaponMin;
                        if (Load2S > WeaponMax) Load2S = WeaponMin;
                        if (Load3S > WeaponMax) Load3S = WeaponMin;
                        if (Load4S > WeaponMax) Load4S = WeaponMin;
                        
                        LoadC = On;
                        combo_restart(Load);
                    }
                
                    if (event_press(Left)) {
                        
                        if (Load == 1) Load1S --;
                        if (Load == 2) Load2S --;
                        if (Load == 3) Load3S --;
                        if (Load == 4) Load4S --;
                        
                        if (Load1S < WeaponMin) Load1S = WeaponMax;
                        if (Load2S < WeaponMin) Load2S = WeaponMax;
                        if (Load3S < WeaponMin) Load3S = WeaponMax;
                        if (Load4S < WeaponMin) Load4S = WeaponMax;
                        
                        LoadC = On;
                        combo_restart(Load);
                    }
                
                    set_val(Up,0); set_val(Down,0);set_val(Left,0);set_val(Right,0);
                }
            
                if (Primary) {
                        
                    if (Load == 1)   Weapon[Gun] = Loadout[1];
                    if (Load == 2)   Weapon[Gun] = Loadout[3];
                    if (Load == 3)   Weapon[Gun] = Loadout[5];
                    if (Load == 4)   Weapon[Gun] = Loadout[7];
                }    
                        
                if (!Primary) {
                            
                    if (Load == 1)   Weapon[Gun] = Loadout[2];
                    if (Load == 2)   Weapon[Gun] = Loadout[4];
                    if (Load == 3)   Weapon[Gun] = Loadout[6];
                    if (Load == 4)   Weapon[Gun] = Loadout[8];
                }
                
                
                if (get_ival(Ads) && get_ival(Fire)){
                    
                    ARL = On;
                    AntiRecoil();
                
                } else if (event_release(Ads) || event_release(Fire)) { 
                    
                    ARL = Off;
                    Horizontal = Off;
                    Vertical = Off;
                }    
            }

    if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

        Shunt = MenuEnterPress;
        MenuToggle(On,Off,On,On,On);
        VibB = On;
        combo_run(Rumble);
    }

    if (MainMenu) {

        Scroll();
        combo_stop(Load);
        combo_stop(Boot);
        MenuTimeout += get_rtime();

        if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

            MenuTimeout = Off;
        }

            if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {
            
                if (event_press(MenuExitPress))
                
                    Shunt = MenuExitPress;
                
                MenuToggle(Off,Off,Off,Off,Off);
                VibB = On;
                combo_run(Rumble);
            }

            if (event_press(ChangeMenuPress)) {

                MenuValues = !MenuValues;
                MenuSwitch = !MenuSwitch;
                ModIndex = On;
                Update = On;
            }

        if (MenuValues) {

            ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModDigitInc[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

        if (MenuSwitch && ModIndex > 2) {

            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
        }
        
        else if (MenuSwitch && ModIndex == 1){
            
            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],1,7,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
        }
        
        else if (MenuSwitch && ModIndex == 2){
            
            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],1,6,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
        }

				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu) { 
        
       if (OLEDScreenSaver && Saver) {
            
           ScreenTime (); 
         	Saver (); 
	       } 
	    
        if (get_ival(FindSlotHold) && event_press(FindSlotPress)) {
            
            Shunt = FindSlotPress;
            Saver = Off;
            ScreenTime = Off;
            Slot = On;
            combo_run(Boot);
        }
    }

    if (ToggleTime) {
        TimeToggle();
    }

    if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        
        } else {
                set_val(Shunt,Off);
        }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo BattsStickyAssist {
   
   set_val(AimY,AxisRelease(AimY,BattStickyPower));
   wait(BattStickyWait);
   set_val(AimX,AxisRelease(AimX,BattStickyPower));
   set_val(Strafe,AxisRelease(Strafe,BattStickyPower));
   wait(BattStickyWait);
   set_val(AimY,AxisRelease(AimY,inv(BattStickyPower)));
   wait(BattStickyWait);
   set_val(AimX,AxisRelease(AimX,inv(BattStickyPower)));
   set_val(Strafe,AxisRelease(Strafe,inv(BattStickyPower)));
   wait(BattStickyWait);
}

combo LegacyAssist {
   
   set_val(AimY,inv(LegacyAARY));
   wait(LegacyAAWait);
   set_val(AimX,LegacyAARX);
   wait(LegacyAAWait);
   set_val(AimY,LegacyAARY);
   wait(LegacyAAWait);
   set_val(AimX,inv(LegacyAARX));
   wait(LegacyAAWait);
}    

combo FallOffAssist {
   
   set_Val(AimY,inv(FallOffAARY));
   wait(FallOffAAWait);
   set_Val(AimX,FallOffAARX);
   wait(FallOffAAWait);
   set_Val(AimY,FallOffAARY);
   wait(FallOffAAWait);
   set_Val(AimX,inv(FallOffAARX));
   wait(FallOffAAWait);
} 

combo Perfection{ 
    
    EvilXL = EvilX
    EvilYL = EvilY
    wait(SamplingTime);
    EvilX = get_lval(AimX)- LearnRX;
    EvilY = get_lval(AimY)- LearnRY; 
    
    if (Sample) {
    
        Perfection(EvilXL,EvilX,1,0,1,0); 
        Perfection(EvilYL,EvilY,1,0,0,1);
    } 
    
    EvilXL = EvilX;
    EvilYL = EvilY;
    wait(SamplingTime);
    EvilX = get_lval(AimX)- LearnRX;
    EvilY = get_lval(AimY)- LearnRY; 
    
    if (Sample) {
    
        Perfection(EvilXL,EvilX,0,1,1,0); 
        Perfection(EvilYL,EvilY,0,1,0,1);
    }
    
    Sample = On; 
    wait(SamplingTime);
}        

combo FineTune {
    
    set_val(AimX,(15 - FinePulse));
    set_val(Strafe,(-15 + FinePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimX,(15 - FinePulse));
    set_val(AimY,(10 - FinePulse));
    set_val(Strafe,(-5 + FinePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime); 
    set_val(AimY,(10 - FinePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimX,(-15 + FinePulse));
    set_val(AimY,(10 - FinePulse));
    set_val(Strafe,(5 - FinePulse))
    wait(SamplingTime);
    wait(SamplingTime)
    wait(SamplingTime)
    set_val(AimX,(-15 + FinePulse));
    set_val(Strafe,(15 - FinePulse))
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimX,(-15 + FinePulse));
    set_val(AimY,(-10 + FinePulse));
    set_val(Strafe,(5 - FinePulse))
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimY,(-10 + FinePulse)); 
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimX,(15 - FinePulse));
    set_val(AimY,(-10 + FinePulse));
    set_val(Strafe,(-5 + FinePulse))
    wait(SamplingTime);
    wait(SamplingTime);
    FinePulse += 2;
    
    if (FinePulse > 10) {
        
        FinePulse = 0;
    }   
}

combo Spiroide {
    
    set_val(AimX,(4 + SpiroidePulse));
    set_val(Strafe,(-15+ SpiroidePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimY,(5 + SpiroidePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    set_val(AimX,(-4 - SpiroidePulse));
    set_val(Strafe,15 - SpiroidePulse);
    wait(SamplingTime);
    wait(SamplingTime)
    set_val(AimY,(5 + SpiroidePulse));
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    wait(SamplingTime);
    SpiroidePulse += 2;
    
    if (SpiroidePulse > 10) {
    
        SpiroidePulse = 0;
    }
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo Tactical {
  
    set_val(Sprint,0);
    wait(40);
    set_val(Sprint,100);
    wait(40);
    set_val(Sprint,0);
    wait(40);
    set_val(Sprint,100);
    wait(40);
}

combo HoldBreath {
    
    set_val(Sprint,0);
    wait(60);
    set_val(Sprint,100);
    wait(110);
    set_val(Sprint,0);
    wait(110);
}

combo Load {
     
     Saver = Off;
     combo_stop(Boot);
     
     if (LoadC) {
         
        cls_oled(0);
        rect_oled(1,1,127,63,0,1);
        line_oled(126,23,2,23,1,1);
        line_oled(126,52,2,52,1,1);
        printf(3,41,0,1,Mode[1]);
        printf(36,5,1,1,Mode[2]);
        printf(62,41,0,1,Mode[0]);
        printf(3,54,0,1,Mode[3]);
        printf(60,54,0,1,Mode[Primary]);
        NumX = 26; NumY = -20; NumS = Off;
        FindDigit(Load,DigitValue(Load));
        
    
        if (Load == 1) {
    
            printf(3,26,0,1,Weapons[Load1P]);
            printf(65,26,0,1,Weapons[Load1S]);
        }
    
        if (Load == 2) {
    
            printf(3,26,0,1,Weapons[Load2P]);
            printf(65,26,0,1,Weapons[Load2S]);
        }
    
        if (Load == 3) {
    
            printf(3,26,0,1,Weapons[Load3P]);
            printf(65,26,0,1,Weapons[Load3S]);
        }    
    
        if (Load == 4) {
    
            printf(3,26,0,1,Weapons[Load4P]);
            printf(65,26,0,1,Weapons[Load4S]);
        }
    
        LoadC = Off;
    
    }
    
        wait(5000);
        VibB = On;
        combo_run(Rumble);
        cls_oled(0);
        Saver = On;
     
 }

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
    else if (VibB)
            
        set_rumble(RUMBLE_B,15);
    
        wait(250);
        VibA = Off;
        VibB = Off;
        reset_rumble();
}

combo Snow { 

     Snow_x = random(1,128); 
     Snow_y = random(1,64); 
} 
 
combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    
    } else {
        
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,15);
    }
    
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
        set_rgb(255,0,0);

    reset_rumble();
    reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
    return; 
}

function DoGzGetPolar(Current,Received) {
    
    Output = Current / 10 + Received / 10;
    
        if(Output <= -3276) return -32768; 
        if(Output >=  3276) return  32767; 

    return Current + Received; 
} 

function DoGzPolar(Rotation,Radial) {
      
    set_polar(PS,Rotation,Radial * 327);
    set_val(PX,DoGzGetPolar(get_val(PX),get_ival(PX)));
    set_val(PY,DoGzGetPolar(get_val(PY),get_ival(PY)));
} 

function GetShapes(TaylorValue) {    
   
    if (!SpiralPosition1) {
        
        InnerSpiral -= 1;
        
        if (InnerSpiral < TaylorMinRadius)
            
            SpiralPosition1 = On;
    
    } else {
        
        InnerSpiral += 1;
        
        if (InnerSpiral > TaylorValue)
            
            SpiralPosition1 = Off;
    }
    
    if (!SpiralPosition2) {
    
        OuterSpiral -= 1;
        
        if (OuterSpiral < TaylorMinRadius)
            
            SpiralPosition2 = On;
    
    } else {
        
        OuterSpiral += 1;
        
        if (OuterSpiral >  TaylorValue)
            
            SpiralPosition2 = Off;
    } 
    
    if (TaylorAssist == 1) { 
    
        RYTAA = get_val(AimY) + (ShapeSin * TaylorValue) / 100;
        RXTAA = get_val(AimX) + (ShapeCos * TaylorValue) / 100;  
    } 
    
    if (TaylorAssist == 2) { 
    
        RYTAA = get_val(AimY) + (ShapeSin * TaylorValue) / 100;
        RXTAA = get_val(AimX) + (ShapeCos * TaylorMinRadius) /100; 
    }
    
    if (TaylorAssist == 3) { 
    
        RXTAA = get_val(AimX) + (ShapeCos * TaylorValue) / 100;  
        RYTAA = get_val(AimY) + (ShapeSin * TaylorMinRadius) / 100;
       
    }
    
    if (TaylorAssist == 4) {
    
        RYTAA = get_val(AimY) + (ShapeSin * InnerSpiral) / 100;
        RXTAA = get_val(AimX) + (ShapeCos * OuterSpiral) / 100;  
    }
    
    if (TaylorAssist == 5) {
        
        if (TaylorPosition == 0 || TaylorPosition == 1) {  
        
            RXTAA = get_val(AimX) + (ShapeCos * TaylorValue) / 100;
        }
        
        if (TaylorPosition == 2 || TaylorPosition == 3) { 
        
            RYTAA = get_val(AimY) + (ShapeSin * TaylorValue) / 100;
        }
            TaylorPosition++;        
            
        if (TaylorPosition == 4) {
            
            TaylorPosition = 0;
        }
    } 
    
    set_val(AimX,RXTAA);
    set_val(AimY,RYTAA);
}

function AxisRelease(AxisXY,AxisVal) {
    
    if (abs(get_ival(AxisXY)) <= BattStickyPower) 
        
        return AxisVal;
    
    return get_ival(AxisXY); 
}

function Perfection(LastValue,CurrentValue,Boost,Correction,AxisX,AxisY) {
    
    if (abs(LastValue - CurrentValue) < PerfectionLimit) { 
        
        if (LastValue < CurrentValue) {
            
            if (Boost) {
                
                if (AxisX)
                    
                    set_val(AimX,(CurrentValue + AimBoost)); 
    
                if (AxisY)
                    
                    set_val(AimY,(CurrentValue + AimBoost));
            
            } else if (Correction) {
    
                if (AxisX)
    
                    set_val(AimX,(CurrentValue - AimCorrection)); 
                
                if (AxisY)
    
                    set_val(AimY,(CurrentValue - AimCorrection));
            }
        
        } else {
    
            if (Boost) {
    
                if (AxisX)
    
                    set_val(AimX,(CurrentValue - AimBoost)); 
    
                if (AxisY)
                    
                    set_val(AimY,(CurrentValue - AimBoost));
            
            } else if (Correction) {
            
                if (AxisX)
                    
                    set_val(AimX,(CurrentValue + AimCorrection)); 
                
                if (AxisY)
                    
                    set_val(AimY,(CurrentValue + AimCorrection));
            }
        }
    }
} 

function AntiRecoil() {
        
    if (!Vertical) {
        
        RecoilValue = 0;
        RecoilTime = 1;
        Vertical = On;
        RYC = AntiRecoil[Weapon[Gun]][38];
    
    }
    
    if (!Horizontal) {
            
        RecoilValuex = 39;
        RecoilTimex = 40;
        Horizontal = On;
        RXC = AntiRecoil[Weapon[Gun]][77];
    }
        
    if (RYC > Off) {
    
        if (Vertical > Off) {
            
            DoGzVertical = AntiRecoil[Weapon[Gun]][RecoilValue];
        
            if (RecoilYTimer > AntiRecoil[Weapon[Gun]][RecoilTime]) {
                
                RecoilYTimer = Off;
                RYC -= 1;
                RecoilValue += 2;
                RecoilTime  += 2;
            }
        }
    }
    
    if (RXC > Off) {
    
        if (Horizontal > Off) {
     
            DoGzHorizontal = AntiRecoil[Weapon[Gun]][RecoilValuex];
        
            if (RecoilXTimer >= AntiRecoil[Weapon[Gun]][RecoilTimex]) {
                    
                RecoilXTimer = Off;
                RXC -= 1;
                RecoilValuex += 2;
                RecoilTimex  += 2;
            }    
        }
    }
    
    if (RYC < 1) { 
            
        ARL = Off;
        RecoilYTimer = Off;
        DoGzVertical = Off; 
    }
    
    if (RXC < 1) {
                
        ARL = Off;
        RecoilXTimer = Off;
        DoGzHorizontal = Off;
    }
                
        
    if (DoGzVertical >= 0) 
                    
        SensY = LoadoutSens;
                        
    else 
                            
        SensY = -LoadoutSens;
                
    if (DoGzHorizontal >= 0) 
                    
        SensX = LoadoutSens;
                        
    else 
                            
        SensX = -LoadoutSens;
                            
    if (RYC > Off) {
            
        if (InvertedYAxis)
                
            set_Val(AimY,inv(DoGzVertical + SensY));
        
        else
            
            set_Val(AimY,DoGzVertical + SensY);
    }
        
    if (RXC > Off)
        
        set_Val(AimX,DoGzHorizontal + SensX);
            
    RecoilYTimer += get_rtime();
    RecoilXTimer += get_rtime();
}

function Toggle(ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
    
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
        combo_run(VibrateBlink);
    
    if (ToggleName) {
        
        Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        
        } else {
                
            printf(36,38,0,1,MiscString[7]);
        }
        
        ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
    if (!MainMenu && ToggleT >= 5000) {
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}

function Saver() { 
  
     if (Saver) { 
        pixel_oled(Snow_x,Snow_y,Snow_c); 
        combo_run(Snow);      
        Snow_t += get_rtime(); 
              
        if (Snow_c && Snow_t == 25000) { 
            printf(5,15,0,0,MiscString[3]); 
            printf(5,30,0,0,MiscString[4]); 
            Snow_t = 0; 
            Snow_c = 0; 
       }  
                
             else if (!Snow_c && Snow_t == 25000) { 
                printf(5,15,0,1,MiscString[3]); 
                printf(5,30,0,1,MiscString[4]); 
                Snow_t = 0; 
                Snow_c = 1; 
              } 
       
    } 
} 

function ScreenTime() { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
            Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton(Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle(Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod(ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

    if (Update) { 
 
        rect_oled(2,2,127,46,1,0); 
        Grid  (); 
        printf(6,25,0,1,MiscString[0]);
        NumX = -43; NumY = 10; NumS = -1; 
        FindDigit(ModIndex,DigitValue(ModIndex));
        printf(5,8,0,1,ModValLbl); 

        if (MenuValues) {

            NumX = 0; NumY = 0; NumS = 0;
            FindDigit(ModVal,DigitValue(ModVal));
        } 
            if (MenuSwitch && ModIndex > 2) { 
 
                if (ModVal) {
 
                    printf(51,24,1,1,MiscString[1]); 
                
                } else { 
                
                    printf(46,24,1,1,MiscString[2]); 
                } 
            }
                
            else if (MenuSwitch && ModIndex == 1) {
                
                if (ModVal <= 6)    {
            
                    printf(59,24,0,1,MiscString[9]);
                
                } else {
                
                    printf(45,24,0,1,MiscString[10]);
                }

                printf(45,34,0,1,ModAimAssist[ModVal]); 
            }

            else if (MenuSwitch && ModIndex == 2) {
                
                    printf(51,24,1,1,ModAimAssistT[ModVal]); 
                }
            Update = Off; 
    } 

    if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
        Update = On;
        ModVal += ModValInc;
        ModMonitor(ModValLbl);

        if (ModVal >= ModValMax) return ModValMax;

        if (ModVal >= ModValMax) return ModValMax;
    } 
 
    if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

        Update = On;
        ModVal -= ModValInc;
        ModMonitor(ModValLbl);

        if (ModVal <= ModValMin) return ModValMin;

        if (ModVal <= ModValMin) return ModValMin;
    }

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
 
function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
    
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[2]) { 
    
        DoGzPolarXIAssist = 7;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[3]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[5]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[7]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[8]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[9]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        LegacyAssist      = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[10]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        EvilAssist        = Off;
    }
    
    if (Mon == ModToggle[11]) { 
    
        DoGzPolarXIAssist = 7;
        TaylorAssist      = 6;
        PolarVIAssist     = Off;
        DamPolarAssist    = Off;
        DoGzAdaptivePolar = Off;
        BattsStickyAA     = Off;
        FallOffAssist     = Off;
        LegacyAssist      = Off;
    }
    
}
    
function Grid() { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll() {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit(Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue(Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod(Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};

const int16 AntiRecoil [][] = {
/*¦AR¦  XM4       */{  42,   410,  32,    70,  42,   160,   32,   400,  27,   360,  16,   820,   31,  1120,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  7, /**/   -1,   410,   22,   70,  15,   160,   0,   400,    0,  360, -19,   820,   -8,  1120,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  7,  0, 0},  // ¦AR¦  XM4 
/*¦AR¦  Krig6     */{  30,   460,  26,   740,  30,   450,   30,   450,  25,   200,  34,   400,   35,   250,  25,   350,  32,  1000,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  9, /**/   11,   460,    0,  740,   0,   450, -23,   450,    0,  200,   0,   400,    0,   250, -14,   350,  -9,  1000,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  9,  0, 0},  // ¦AR¦  Krig6
/*¦AR¦  QBZ83     */{  24,   170,  44,   160,  19,   620,   43,   450,  20,   300,  -4,   430,   24,  2120,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  7, /**/    6,   170,   12,  160,   0,   620,   5,   450,    0,  300,  25,   430,   17,  2120,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  7,  0, 0},  // ¦AR¦  QBZ83
/*¦AR¦  AK47      */{  36,   500,   0,   290,  31,   520,   30,   480,  10,   500,   0,   410,   30,   410,  27,   370,  25,   410,  26,  1100,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0, 10, /**/   12,   500,    7,  290,  12,   520,   5,   480,  -27,  500,   7,   410,   -3,   410,  -7,   370,  -4,   410,  -7,  1100,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0, 10,  0, 0},  // ¦AR¦  AK47
																																																																																																																													  
/*¦TAR¦ M16       */{  19,  4900,  20,  3100,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2, /**/    3,  4900,    3, 3100,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2,  1, 1},  // ¦TAR¦ M16
/*¦TAR¦ AUG       */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  1, 1},  // ¦TAR¦ AUG
				                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*¦SMG¦ AK_74u    */{  39,    70,  38,   380,  34,   590,   37,  1290,  38,   510,  36,   450,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  6, /**/  -16,    70,  -22,  380,  16,   380, -16,   210,  -14, 1290,  -7,   510,  -18,   450,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  7,  0, 0},  // ¦SMG¦ AK_74u
/*¦SMG¦ MAC_10    */{  54,   640,  54,   420,  42,   280,   59,   240,  52,  1320,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5, /**/  -13,   640,   -8,  420,  25,   280,   0,   240,    0, 1320,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5,  0, 0},  // ¦SMG¦ MAC_10
/*¦SMG¦ MP5       */{  42,   420,  38,  3600,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2, /**/  -21,   420,    1, 3600,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2,  0, 0},  // ¦SMG¦ MP5
/*¦SMG¦ Bullfrog  */{ -28,    90,   2,   160,  28,   100,   19,   290,  34,    90,  20,   100,   39,   860,  17,   420,  40,   130,  40,   490,  25,   290,  43,   660,   20,   330,  40,   330,  26,   600,   39,   400,  40,   420,   26,   400,  41,   620, 19, /**/  -23,    90,   -7,  160, -20,   100,   5,   290,    0,   90,   5,   100,   10,   860,   5,   420,  11,   130,  12,   490,   7,   290,  11,   660,    5,   330,  11,   330,   7,   600,   10,   400,  11,   420,    7,   400,  11,   620, 19,  0, 0},  // ¦SMG¦ BullFrog
				                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*¦LMG¦ M60       */{  26,   150,  -3,   430,   0,   190,  -20,  1180,   0,  3100,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5, /**/  -31,   150,   37,  430,   7,   190,  -5,  1180,    7, 3100,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5,  0, 0},  // ¦LMG¦ M60
/*¦LMG¦ Stoner    */{  31,   950,  27,   890,  26,   880,   28,   890,  30,   900,  28,   940,   28,   870,  31,   990,  30,   910,  28,   990,  30,  1220,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0, 11, /**/  -11,   950,    0,  890, -10,   880,  10,   890,    0,  900, -10,   940,    0,   870,  -6,   990,  -5,   910, -10,   990,   0,  1220,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0, 11,  0, 0},  // ¦LMG¦ Stoner
				                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
/*¦PSL¦ 1911_     */{  46,   180,  21,   300,   8,   450,  -23,   390,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  4, /**/   -6,   180,  -33,  300,  23,   450,  28,   390,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  4,  1, 0},  // ¦PSL¦ 1911_   
/*¦PSL¦ Diamatti  */{  25,  1500,  14,  1450,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2, /**/    0,  1500,   25, 1450,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  2,  1, 0},  // ¦PSL¦ Diamatti
/*¦PSL¦ Magnum    */{  34,   330,  31,   310,  35,   950,   34,  2270,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  4, /**/  -15,   330,   12,  310,   1,   950,   9,  2270,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  4,  1, 0},  // ¦PSL¦ Magnum

/*¦SNP¦ Pel703    */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  0, 1},  // ¦SNP¦ Pelington 703
/*¦SNP¦ Dragunov  */{  65,  1650,  65,  3160,  64,  1640,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  3, /**/  -11,  1650,   -9, 3160,  -9,  1640,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  3,  1, 1},  // ¦SNP¦ Dragunov
/*¦SNP¦ Tundra    */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  0, 1},  // ¦SNP¦ Tundra
/*¦SNP¦ M82       */{  62,   340,  58,   310,  51,   370,  -14,   290,  26,  1680,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5, /**/   -8,   340,    9,  310,   0,   370,  39,   290,    0, 1680,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  5,  1, 1},  // ¦SNP¦ M82
																																																																																																																													  
/*¦STG¦ StSweeper */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  1, 0},  // ¦STG¦ StreetSweeper
/*¦STG¦ Gallo     */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  1, 0},  // ¦STG¦ Gallo SA12
/*¦STG¦ Hauer     */{   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0, /**/    0,     0,    0,    0,   0,     0,   0,     0,    0,    0,   0,     0,    0,     0,   0,     0,   0,     0,   0,     0,   0,     0,   0,     0,    0,     0,   0,     0,   0,     0,    0,     0,   0,     0,    0,     0,   0,     0,  0,  1, 0}}; // ¦STG¦ Hauer 77
    