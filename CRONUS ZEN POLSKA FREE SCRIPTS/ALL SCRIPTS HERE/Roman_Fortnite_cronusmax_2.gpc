// GPC Online Library
// fortnite_script.gpc

//Rapid Fire (L2 + LEFT)
int Rapid_Fire = FALSE;

//Dropshot (L2 + RIGHT)
int DropShot = FALSE; 
int DropShotSpeed = 30; 

//PUMP SMG - L2 + DOWN
int PUMP_SMG = FALSE;

//100% Perfect Accuracy [ALWAYS ON] (L2 + R1)
int PerfectAccuracy = TRUE;

//Anti Recoil (Leave Alone)
define antirecoil    = TRUE;
int ANTI_RECOIL      =    6;
int ANTI_RECOIL_H    =    2;

//Aim Assist (Leave Alone)
define bUseAimAssist = TRUE;  //AIM ASSIST TOGGLE
define ADS_ASSIST    = TRUE;  //Aim Assist while ADSing 
define FIRE_ASSIST   = TRUE;  //Aim Assist While Firing
define DRIFT_ASSIST  = FALSE; //Aim Assist Directional Drift Boost
define STEP_INTERVAL =  1;              
define STEPS =  10;
int fub = 3;  //Fire Under Boost
int fob = 1;  //Fire Over Boost
int leftDboost =  0;  //Left Directional Boost
int rightDboost = 0;  //Right Directional Boost
int aaValue = 10;     //Aim Assist Shake
int SPEED =   10;     //Aim Assist Rotating Speed

//Aim Assist #2 (Leave Alone)
define TRACKER  = TRUE;                
define AUTO_AIM = FALSE;                
define VIB_B    =  250;				
define VIB_A    =  200;
int AiM_M       =  270;				
int AiM_A       =   18;
int N_DiV 	    =   19;	                

//Leave Alone
define Blue          =  1;                 
define Red           =  2;                 
define Green         =  3;                 
define Pink          =  4;                 
define SkyBlue       =  5;                 
define Black         =  6;                 
define White         =  7;                 
data( 1,                 
  2,0,0,0 , //1. Blue                  
  0,2,0,0 , //2. Red                   
  0,0,2,0 , //3. Green                 
  0,0,0,2 , //4. Pink                  
  2,0,2,0 , //5. SkyBlue               
  0,0,0,0 , //6. Black                
  2,2,2,2   //7. White                  
)

//Variables (Leave Alone)
int tap; 
int R2_block;
int anti_recoil, anti_recoil_H;       
int interval_t, angle, angle2;
int x_stick, y_stick, cos_angle, sin_angle;
int r_tag = FALSE;
int Rumble;
int OldRumble; 
int RumbleTimer;
int RumbleFlag;
int RumbleCount;
int corr;                          
init {
combo_run(BLINK);
combo_run(BLIINK);
combo_run(BLIIINK)}
const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
AimAssist();
RumbleADJ();
if(antirecoil){                               
if( get_val(PS4_L2) && get_val(PS4_R2 )) {      
combo_run(AntiRecoil); }               
if( abs(get_val(PS4_RY)) > 36 || abs(get_val(PS4_RX)) > 36) { 
combo_stop (AntiRecoil); }               
}
if (get_val(PS4_L2)) {
if (event_press(PS4_DOWN)) {
combo_run (vibrate);
combo_run (BLINK);
PUMP_SMG = !PUMP_SMG;
tap = FALSE;}
set_val(PS4_L3, 0);}
if (PUMP_SMG) {
if (R2_block) {
set_val(PS4_L2, 0);
set_val(PS4_R2, 0);}
if (get_val(PS4_L2) && event_press(PS4_R2)) {
if (!tap) { 
tap = TRUE;
combo_run(Double_Tact_R1);
set_val(PS4_R2, 0);}
}
if (event_press(PS4_L2)) {
tap = FALSE;}
}
if(get_val(PS4_L2) && event_press(PS4_LEFT)) {
combo_run (vibrate);
combo_restart(BLIINK);
Rapid_Fire=!Rapid_Fire;}
if (Rapid_Fire) {
if(get_val(PS4_R2)) {
combo_run (Rapiid_Fire);}
}
if(get_val(PS4_L2) && event_press(PS4_RIGHT)) {
combo_run (vibrate);
combo_restart(BLIIINK);
DropShot=!DropShot;}
if (DropShot) {
if(get_val(PS4_R2)) {
combo_run (DroppShott);}
}
if(TRACKER) { 
if(get_val(PS4_L2)){  
combo_run(TRACKER);}  
if(get_val(PS4_RX)<-38  
||get_val(PS4_RX)> 37){  
combo_stop(TRACKER);}}
if (get_val(PS4_L2) && get_val(PS4_R1)) {
PerfectAccuracy = !PerfectAccuracy;
combo_run(PerfectionAccuracy);
set_val(PS4_R1, 0);
} else {
combo_stop(PerfectionAccuracy);
}
if(AUTO_AIM) {              
if(get_val(PS4_L2)>95){  
combo_run(ALOCK);}          
if(event_release(PS4_L2)){
combo_stop(ALOCK);}}
if(abs(get_val(PS4_LY)) < 10 && abs(get_val(PS4_LX)) < 10 ){        
set_val(PS4_LY,0);                                                
set_val(PS4_LX,0); }                                               
if(abs(get_val(PS4_RY)) < 10 && abs(get_val(PS4_RX)) < 10 ){         
set_val(PS4_RY,0);                                                 
set_val(PS4_RX,0); }
    }
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
combo AntiRecoil {  
anti_recoil = get_val(PS4_RY) + ANTI_RECOIL;      
if(anti_recoil > 100) anti_recoil = 100;      
offset(PS4_RY, anti_recoil);
anti_recoil_H = get_val(PS4_RX) + ANTI_RECOIL_H;   
if(anti_recoil_H > 100) anti_recoil_H = 100;  
offset(PS4_RX, anti_recoil_H);
}
combo vibrate {     
set_rumble(RUMBLE_A, 85);      
wait(225);                         
reset_rumble();                    
}
combo BLINK {                                       
if(PUMP_SMG) LED_CM (Green); 
else  LED_CM (Red);
wait(2000);
LED_CM (Black)
}
combo BLIINK {                                       
if(Rapid_Fire) LED_CM (Green); 
else  LED_CM (Red);
wait(2000);
LED_CM (Black)
}
combo BLIIINK {                                       
if(DropShot) LED_CM (Green); 
else  LED_CM (Red);
wait(2000);
LED_CM (Black)
}
combo TRACKER {             
set_val(PS4_RY, N_DiV);	
wait(10);		   		
set_val(PS4_RY, -18);  
wait(10);		   		
set_val(PS4_RX, 18);   	
wait(10);		 		
set_val(PS4_RX, -18); 	
wait(10);		 		
set_val(PS4_RY, 18); 	
wait(10);				
set_val(PS4_RY, -18); 	
wait(10);		 		
set_val(PS4_RX, 18); 	
wait(10);		 		
set_val(PS4_RX, -18); 	
wait(10);
}
combo ALOCK {         
set_val(PS4_L2, 100);
wait(AiM_M);         
set_val(PS4_L2, 0);    
wait(AiM_A);
}
combo leftDrift {
offset(PS4_RX,aaValue + leftDboost);
wait(30);
offset(PS4_RX,(aaValue + leftDboost) * -1);
wait(30);
}
combo rightDrift {
offset(PS4_RX,aaValue + rightDboost);
wait(30);
offset(PS4_RX,(aaValue + rightDboost) * -1);
wait(30);
}
combo fire_under {
offset(PS4_RX,aaValue + fub);
wait(30);
offset(PS4_RX,(aaValue + fub) * -1);
wait(30);
}
combo fire_over {
offset(PS4_RX,aaValue + fob);
wait(40);
offset(PS4_RX,(aaValue + fob) * -1);
wait(40);
}
combo Double_Tact_R1 { 
R2_block = TRUE;
set_val(PS4_R2, 100);
wait(10);
wait(10);
set_val(PS4_L2, 100);
set_val(PS4_L3, 100);
set_val(PS4_R1, 100);
wait(15);
R2_block = FALSE;
} 
combo Rapiid_Fire {
set_val(PS4_R2, 100); 
wait(35);
set_val(PS4_R2, 0); 
wait(25);
}
combo DroppShott {
set_val(PS4_R3,100);
wait(40);
wait(DropShotSpeed);
set_val(PS4_R3,100);
}
combo PerfectionAccuracy {
set_val(PS4_R2,100);
wait(100);
wait(250);
set_val(PS4_R2,100);
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function LED_CM(Colour) {            
    set_led(LED_1,dbyte(( Colour * 4)- 3     )); 
    set_led(LED_2,dbyte(((Colour * 4)- 3) + 1)); 
    set_led(LED_3,dbyte(((Colour * 4)- 3) + 2)); 
    set_led(LED_4,dbyte(((Colour * 4)- 3) + 3)); 
}
function Shake() { 
      angle2 = (angle2 + SPEED) % 360;
    Set_polar(2,angle2, aaValue);
} 
function AimAssist() {
if(get_val(PS4_L2)) {
    if(bUseAimAssist) {
          interval_t += get_rtime();
          if(!(interval_t % STEP_INTERVAL)) {
            angle = (angle+STEPS) % 360; }
        if(!RumbleFlag){
            if(!r_tag){
                if(ADS_ASSIST){
                    if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= aaValue) {
                        if(get_val(PS4_L2) > 98 && !get_val(PS4_R2)){
                            Shake(); }
                    }
                }
                if(DRIFT_ASSIST){
                    if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= aaValue) {
                        if(get_val(PS4_L2) > 98 && !get_val(PS4_R2)){
                            combo_run(leftDrift); }
                    }
                    if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX))) >= aaValue) {
                        if(get_val(PS4_L2) > 98 && !get_val(PS4_R2)){
                            combo_run(rightDrift);    }
                    }
                }
                if(FIRE_ASSIST){
                    if(get_val(PS4_R2)){
                        if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= aaValue) {
                            combo_run(fire_under); }
                        if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) >= aaValue) {
                            combo_run(fire_over); }
                    }
                }
            }
         }
      }
    }
  }
function Set_polar(stick, angle, radius){
      x_stick = 7 + stick; 
      y_stick = 8 + stick;
      if(angle < 0) angle = 360 + (angle % 360);
      angle = (angle + 90) % 360;
      radius = clamp(radius, 0, 100);
      sin_angle = Polar_Array[angle];
      cos_angle = Polar_Array[(angle + 90) % 360];
      offset(x_stick, inv(radius * cos_angle / 100));
      offset(y_stick, inv(radius * sin_angle / 100));
      return;
}
function clamp1(v, lo, hi) 
{
    if(v < lo) return lo;
    if(v > hi) return hi;
    return v;
} 
function offset(int axis, int offset_val) {
      set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
    return 
}
function RumbleADJ() {
    if(get_val(PS4_L2)) {
        corr = isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY)));
        if(corr > 100) corr = 100; }
    if(RumbleCount > 30){
        RumbleCount = 0; }
    if(RumbleCount > 30){
        RumbleCount = 0; }
    if(get_val(PS4_R2) > 98){
        RumbleTimer += get_rtime();
    if(get_rumble(RUMBLE_B) > 0)Rumble = get_rumble(RUMBLE_B)*255/100;
        if(Rumble > OldRumble){
            OldRumble = Rumble;
            RumbleTimer = 0;RumbleCount++; }
        else OldRumble = Rumble; }
    if(event_release(PS4_R2)){
        RumbleTimer = 0;
        OldRumble = 0;
        Rumble = 0;
        RumbleCount = 0; }
    if(get_rumble(RUMBLE_B) > 0){
        RumbleFlag = TRUE;
        r_tag = TRUE;
    } else {
        RumbleFlag = FALSE;
        r_tag = FALSE; }
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/