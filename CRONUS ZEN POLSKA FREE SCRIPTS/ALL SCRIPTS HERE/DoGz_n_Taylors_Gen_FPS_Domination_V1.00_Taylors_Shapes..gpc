/*
     _______            ______           ________ __                ________ __  ______  __       ________          _______  __          
    |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \|  \         
    | ▓▓▓▓▓▓▓\ ______ |  ▓▓▓▓▓▓\________ \▓▓▓▓▓▓▓▓ ▓▓____   ______ | ▓▓▓▓▓▓▓▓\▓▓  ▓▓▓▓▓▓\ ▓▓____  \▓▓▓▓▓▓▓▓ ______ | ▓▓▓▓▓▓▓\ ▓▓ _______ 
    | ▓▓  | ▓▓/      \| ▓▓ __\▓▓        \  | ▓▓  | ▓▓    \ /      \| ▓▓__   |  \ ▓▓ __\▓▓ ▓▓    \   | ▓▓   /      \| ▓▓__| ▓▓\▓ /       \
    | ▓▓  | ▓▓  ▓▓▓▓▓▓\ ▓▓|    \\▓▓▓▓▓▓▓▓  | ▓▓  | ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓  \  | ▓▓ ▓▓|    \ ▓▓▓▓▓▓▓\  | ▓▓  |  ▓▓▓▓▓▓\ ▓▓    ▓▓  |  ▓▓▓▓▓▓▓
    | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓ \▓▓▓▓ /    ▓▓   | ▓▓  | ▓▓  | ▓▓ ▓▓    ▓▓ ▓▓▓▓▓  | ▓▓ ▓▓ \▓▓▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓    ▓▓ ▓▓▓▓▓▓▓\   \▓▓    \ 
    | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓__| ▓▓/  ▓▓▓▓_   | ▓▓  | ▓▓  | ▓▓ ▓▓▓▓▓▓▓▓ ▓▓     | ▓▓ ▓▓__| ▓▓ ▓▓  | ▓▓  | ▓▓  | ▓▓▓▓▓▓▓▓ ▓▓  | ▓▓   _\▓▓▓▓▓▓\
    | ▓▓    ▓▓\▓▓    ▓▓\▓▓    ▓▓  ▓▓    \  | ▓▓  | ▓▓  | ▓▓\▓▓     \ ▓▓     | ▓▓\▓▓    ▓▓ ▓▓  | ▓▓  | ▓▓   \▓▓     \ ▓▓  | ▓▓  |       ▓▓
     \▓▓▓▓▓▓▓  \▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓▓▓▓▓▓▓   \▓▓   \▓▓   \▓▓ \▓▓▓▓▓▓▓\▓▓      \▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓   \▓▓    \▓▓▓▓▓▓▓\▓▓   \▓▓   \▓▓▓▓▓▓▓ 
                                           ________          __      __ __                _______  __          
                                          |        \        |  \    /  \  \              |       \|  \         
                             _______       \▓▓▓▓▓▓▓▓ ______  \▓▓\  /  ▓▓ ▓▓       ______ | ▓▓▓▓▓▓▓\ ▓▓ _______ 
                            |       \        | ▓▓   |      \  \▓▓\/  ▓▓| ▓▓      /      \| ▓▓__| ▓▓\▓ /       \
                            | ▓▓▓▓▓▓▓\       | ▓▓    \▓▓▓▓▓▓\  \▓▓  ▓▓ | ▓▓     |  ▓▓▓▓▓▓\ ▓▓    ▓▓  |  ▓▓▓▓▓▓▓
                            | ▓▓  | ▓▓       | ▓▓   /      ▓▓   \▓▓▓▓  | ▓▓     | ▓▓  | ▓▓ ▓▓▓▓▓▓▓\   \▓▓    \ 
                            | ▓▓  | ▓▓       | ▓▓  |  ▓▓▓▓▓▓▓   | ▓▓   | ▓▓_____| ▓▓__/ ▓▓ ▓▓  | ▓▓   _\▓▓▓▓▓▓\
                            | ▓▓  | ▓▓       | ▓▓   \▓▓    ▓▓   | ▓▓   | ▓▓     \\▓▓    ▓▓ ▓▓  | ▓▓  |       ▓▓
                             \▓▓   \▓▓        \▓▓    \▓▓▓▓▓▓▓    \▓▓    \▓▓▓▓▓▓▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓   \▓▓▓▓▓▓▓         
                            ______                                                 __                       
                           /      \                                               |  \                      
                          |  ▓▓▓▓▓▓\ ______  _______   ______   ______   ______  _| ▓▓_    ______   ______  
                          | ▓▓ __\▓▓/      \|       \ /      \ /      \ |      \|   ▓▓ \  /      \ /      \ 
                          | ▓▓|    \  ▓▓▓▓▓▓\ ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\  ▓▓▓▓▓▓\ \▓▓▓▓▓▓\\▓▓▓▓▓▓ |  ▓▓▓▓▓▓\  ▓▓▓▓▓▓\
                          | ▓▓ \▓▓▓▓ ▓▓    ▓▓ ▓▓  | ▓▓ ▓▓    ▓▓ ▓▓   \▓▓/      ▓▓ | ▓▓ __| ▓▓  | ▓▓ ▓▓   \▓▓
                          | ▓▓__| ▓▓ ▓▓▓▓▓▓▓▓ ▓▓  | ▓▓ ▓▓▓▓▓▓▓▓ ▓▓     |  ▓▓▓▓▓▓▓ | ▓▓|  \ ▓▓__/ ▓▓ ▓▓      
                           \▓▓    ▓▓\▓▓     \ ▓▓  | ▓▓\▓▓     \ ▓▓      \▓▓    ▓▓  \▓▓  ▓▓\▓▓    ▓▓ ▓▓      
                            \▓▓▓▓▓▓  \▓▓▓▓▓▓▓\▓▓   \▓▓ \▓▓▓▓▓▓▓\▓▓       \▓▓▓▓▓▓▓   \▓▓▓▓  \▓▓▓▓▓▓ \▓▓      
                                                                                                            
				 ________                     __           ______                    __            __     __          
                |        \                   |  \         /      \                  |  \          |  \   |  \         
                 \▓▓▓▓▓▓▓▓ ______   _______ _| ▓▓_       |  ▓▓▓▓▓▓\ _______  ______  \▓▓ ______  _| ▓▓_  | ▓▓ _______ 
                   | ▓▓   /      \ /       \   ▓▓ \      | ▓▓___\▓▓/       \/      \|  \/      \|   ▓▓ \  \▓ /       \
                   | ▓▓  |  ▓▓▓▓▓▓\  ▓▓▓▓▓▓▓\▓▓▓▓▓▓       \▓▓    \|  ▓▓▓▓▓▓▓  ▓▓▓▓▓▓\ ▓▓  ▓▓▓▓▓▓\\▓▓▓▓▓▓    |  ▓▓▓▓▓▓▓
                   | ▓▓  | ▓▓    ▓▓\▓▓    \  | ▓▓ __      _\▓▓▓▓▓▓\ ▓▓     | ▓▓   \▓▓ ▓▓ ▓▓  | ▓▓ | ▓▓ __    \▓▓    \ 
                   | ▓▓  | ▓▓▓▓▓▓▓▓_\▓▓▓▓▓▓\ | ▓▓|  \    |  \__| ▓▓ ▓▓_____| ▓▓     | ▓▓ ▓▓__/ ▓▓ | ▓▓|  \   _\▓▓▓▓▓▓\
                   | ▓▓   \▓▓     \       ▓▓  \▓▓  ▓▓     \▓▓    ▓▓\▓▓     \ ▓▓     | ▓▓ ▓▓    ▓▓  \▓▓  ▓▓  |       ▓▓
                    \▓▓    \▓▓▓▓▓▓▓\▓▓▓▓▓▓▓    \▓▓▓▓       \▓▓▓▓▓▓  \▓▓▓▓▓▓▓\▓▓      \▓▓ ▓▓▓▓▓▓▓    \▓▓▓▓    \▓▓▓▓▓▓▓ 
                                                                                       | ▓▓                           
                                                                                       | ▓▓                           
          ________ _______   ______      _______   ______  __       __ ______ __    __  ______  ________ ______  ______  __    __ 
         |        \       \ /      \    |       \ /      \|  \     /  \      \  \  |  \/      \|        \      \/      \|  \  |  \
         | ▓▓▓▓▓▓▓▓ ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\   | ▓▓▓▓▓▓▓\  ▓▓▓▓▓▓\ ▓▓\   /  ▓▓\▓▓▓▓▓▓ ▓▓\ | ▓▓  ▓▓▓▓▓▓\\▓▓▓▓▓▓▓▓\▓▓▓▓▓▓  ▓▓▓▓▓▓\ ▓▓\ | ▓▓
         | ▓▓__   | ▓▓__/ ▓▓ ▓▓___\▓▓   | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓▓\ /  ▓▓▓ | ▓▓ | ▓▓▓\| ▓▓ ▓▓__| ▓▓  | ▓▓    | ▓▓ | ▓▓  | ▓▓ ▓▓▓\| ▓▓
         | ▓▓  \  | ▓▓    ▓▓\▓▓    \    | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓▓▓\  ▓▓▓▓ | ▓▓ | ▓▓▓▓\ ▓▓ ▓▓    ▓▓  | ▓▓    | ▓▓ | ▓▓  | ▓▓ ▓▓▓▓\ ▓▓
         | ▓▓▓▓▓  | ▓▓▓▓▓▓▓ _\▓▓▓▓▓▓\   | ▓▓  | ▓▓ ▓▓  | ▓▓ ▓▓\▓▓ ▓▓ ▓▓ | ▓▓ | ▓▓\▓▓ ▓▓ ▓▓▓▓▓▓▓▓  | ▓▓    | ▓▓ | ▓▓  | ▓▓ ▓▓\▓▓ ▓▓
         | ▓▓     | ▓▓     |  \__| ▓▓   | ▓▓__/ ▓▓ ▓▓__/ ▓▓ ▓▓ \▓▓▓| ▓▓_| ▓▓_| ▓▓ \▓▓▓▓ ▓▓  | ▓▓  | ▓▓   _| ▓▓_| ▓▓__/ ▓▓ ▓▓ \▓▓▓▓
         | ▓▓     | ▓▓      \▓▓    ▓▓   | ▓▓    ▓▓\▓▓    ▓▓ ▓▓  \▓ | ▓▓   ▓▓ \ ▓▓  \▓▓▓ ▓▓  | ▓▓  | ▓▓  |   ▓▓ \\▓▓    ▓▓ ▓▓  \▓▓▓
          \▓▓      \▓▓       \▓▓▓▓▓▓     \▓▓▓▓▓▓▓  \▓▓▓▓▓▓ \▓▓      \▓▓\▓▓▓▓▓▓\▓▓   \▓▓\▓▓   \▓▓   \▓▓   \▓▓▓▓▓▓ \▓▓▓▓▓▓ \▓▓   \▓▓
                                                            
                                                                                          
                                                                                          

                                                                                                   
                                                             
¦¦ Special Thanks to Testers ¦¦

* Noozbar 
* ThePopPop
* Ceorin
* Crow
* ZkUltra27
* SilentStorm16
* SacDunker
* SouthernCalibronia
* WayneO

¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

  ¦¦¦¦ MOD MENU SYSTEM ¦¦¦¦

* Enter Menu   = L2/LT + OPTIONS/MENU
* Switch Menu  = CROSS/A
* Exit Menu    = CIRCLE/B

* Next Mod     = RIGHT
* Previous Mod = LEFT

* Adjust +     = UP
* Adjust -     = DOWN
* Toggle ON    = UP
* Toggle OFF   = DOWN
  
  ¦¦¦¦ SHOW CURRENT SLOT IN USE ¦¦¦¦
  
* Show Slot    = R3/RS + LEFT

	¦¦¦¦ KILL SWITCH TOGGLES ¦¦¦¦

* Kill Switch  = L2/LT + SHARE

	¦¦¦¦ SHOOTING MOD TOGGLES ¦¦¦¦

* Fire Mods   = L2/LT + UP         (Rapid Fire Or Dynamic Fire Or Burst Fire)
* Prone Shot  = L2/LT + DOWN
* Crouch Shot = L2/LT + RIGHT
* Strafe Shot = L2/LT + LEFT
* Hold Breath = L2/LT + TRIANGLE/Y
* Sniper Mod  = L2/LT + SQUARE/X   (Press L1/LB + Release Within 250ms to Run Mod)

  ¦¦¦¦ MOD TRIGGERS ¦¦¦¦
  
* Quick Snipe = L1/LB (Quick Tap 250ms)

* Auto Sprint = Push Up On The Left Analougue Stick To Sprint (65%)
  
* Hair Triggers = Apply 10% Pressure (Sets to 100%)

* Auto Ping/Spot = Hold Ads + Press Fire

  ¦¦¦¦ Sensitivity Control ¦¦¦¦
  
* GENERAL Sens (Holding No Triggers) 			  (* 30 to 300 *)
* ADS Sens (Holding ADS Trigger) 				  (* 30 to 300 *)
* FIRE Sens (Holding FIRE Trigger) 			      (* 30 to 300 *)
* ADS + FIRE Sens (Holding ADS + FIRE Triggers)   (* 30 to 300 *)
  
  ¦¦¦¦ Anti-Recoil On The Fly Adjustment ¦¦¦¦ 

* Hold CROSS/A + Press In The Direction You Want The Crosshairs To Move
* DPAD -- UP or DOWN or LEFT or RIGHT
* The Zen Will Display The Current Value + Axis

* PS On Xbox -- PLAYSTATION CONTROLLER WILL SWAP TOUCHPAD AND SHARE WHEN ON PC Or XBOX
* Block Rumble -- Block The Controller Vibrating From In Game Signals
* LED Rainbow -- Zen Eyes Will Cycle Through All Colours

¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","  DoGz n Taylors","Zen Designer v1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off","Anti-Recoil","RY-Axis","RX-Axis"};
const string ModToggle [] = {"" , " Aim Assist Type" , " AA Rumble Boost" , " Anti-Recoil Mod" , "  Rapid Fire Mod" , "Dynamic Fire Mod" , " Burst Fire Mod" , " Prone Shot Mod" , " Crouch Shot Mod" , " Strafe Shot Mod" , " Quick Snipe Mod"  , " Hold Breath Mod" , " Auto Sprint Mod" , "Hair Trigger Mod" , "SensitvityControl" , "  Auto Ping Mod" ,"   Block Rumble" , "PS Input On Xbox" ,"LED Rainbow Flow"};
const string ModValue [] = {""   , "   Angle/Speed"  , "   Radius/Power"  , "  Radius Minimum"  , "   Angle Boost"  , "   Radius Boost" , "AR Vertical Power" , "Horizontal Power" , " Rapid Fire Hold" , "RapidFire Release" , " Dyna Fire Hold" , "Dyna Fire Release" , "Burst Fire Delay" , "Prone Shot Delay" , "Crouch Shot Speed" , "Strafe Shot Speed" , "Sniper Shot Delay" , "Sniper Shot Time" , "   General Sens" , "     Ads Sens" , " Ads + Fire Sens" , "    Fire Sense" , " LED Brightness"};
const int16 ModDigitMin [] = {  0  , 1  , 1  , 1  , 1  , 1  , 1  , -50 , 20  , 20  , 30 , 33 , 100  , 10  , 20  , 500  , 50  , 100 , 30  , 30  , 30  , 30  , 1 };                                                                                                                                                                                                                                                         
const int16 ModDigitMax [] = {  0  , 60 , 30 , 30 , 60 , 30 , 99 ,  50 , 350 , 300 , 60 , 70 , 1000 , 500 , 300 , 3000 , 500 , 350 , 300 , 300 , 300 , 300 , 50}; 
const int16 ModIncrement[] = {  0  , 1  , 1  , 1  , 1  , 1  , 1  ,  1  , 10  ,  10 , 10 , 1  , 10   , 10  , 10  , 100  , 10  , 10  , 1   , 1   , 1   , 1   , 1 };  
const string ModAimAssist [] = {" OFF"  , "Circle" , "Tall"  , "Wide"  , "Spiral"  , "Helix"};
																						  
/*                                                                                        
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.                                     
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const string KillSwitchL = "Master KillSwitch";
const string DropShotL   = "  Drop Shot Mod";
const string CrouchShotL = "  Jump Shot Mod";
const string FireModL    = " Master Fire Mod";
const string StrafeModL  = " Strafe Shot Mod";
const string SniperModL  = " Sniper Shot Mod";
const string BreathModL  = "Sniper Breath Mod";
 
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Grenade  = PS4_L1;
define Ping     = PS4_R1;
define Sprint   = PS4_L3;
define Switch   = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_CIRCLE;

define RX       = PS4_RX;		// Look Stick
define RY       = PS4_RY;		// Look Stick
define LX       = PS4_LX;		// Movement Stick
define LY       = PS4_LY;		// Movement Stick

define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define Options  = PS4_OPTIONS;
define Share    = PS4_SHARE;
define On       = TRUE;
define Off      = FALSE;
define RumA     = RUMBLE_A;
define RumB     = RUMBLE_B;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define KillSwitchHold  = PS4_L2;
define KillSwitchPress = PS4_SHARE;

define FireModHold     = PS4_L2;
define FireModPress    = PS4_UP;

define DropShotHold    = PS4_L2;
define DropShotPress   = PS4_DOWN;

define CrouchShotHold  = PS4_L2;
define CrouchShotPress = PS4_RIGHT;

define StrafeModHold   = PS4_L2;
define StrafeModPress  = PS4_LEFT;

define SniperModHold   = PS4_L2;
define SniperModPress  = PS4_SQUARE;

define BreathModHold   = PS4_L2;
define BreathModPress  = PS4_TRIANGLE;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Triggers                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define SniperTrigger = PS4_L1;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;
define RecoilLeftPress  = PS4_LEFT;
define RecoilRightPress = PS4_RIGHT;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_CIRCLE;
define ChangeMenuPress = PS4_CROSS;

define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

define Circular = 1;
define TallOval = 2;
define WideOval = 3;
define Spiral   = 4;
define Helix    = 5;

define TimeoutLimit  = 1;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 18;
define IndexMinValues   = 1;
define IndexMaxValues   = 22;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int Saver,Ms,Sec,Min,ScreenTime,LedDec,Rgb,LedInc,Colour[3];
int TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2,Clear;
int CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,PolarStrength,Angle,PositionT;
int ToggleT,ToggleTime,ToggleName,Modled,KillSwitch,Recoil,RecoilValue,DynamicWait,RXT,RYT,angle,Shunt,VibA,VibB;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//                 -- Also Accessed Via Zen Menu In Game --
int ModDigit;

int TaylorAngle       = 15;   // Speed
int TaylorRadius      = 15;   // Power
int TaylorRadiusMin   = 5;    // Min Power (Spiral/Oval Method Types)
int TaylorAngleBoost  = 5;    // Speed Boost From Rumble Feedback
int PolarBoost        = 10;   // Power Boost From Rumble Feedback 
					  
int Vertical          = 20;   // Recoil Vertical Power
int Horizontal        = 0;    // Recoil Horizontal Power
					  
int RapidFireHold     = 30;   // Rapid Fire Hold Time Ms
int RapidFireWait     = 30;   // Rapid Fire Release Time Ms
					  
int DynaFireHold      = 40;   // Dynamic Fire Hold Time Ms    (* 30 to 60 *)
int DynaFireWait      = 33;   // Dynamic Fire Release Time Ms (* 33 to 70 *)

int BurstFireWait	  = 300;  // Burst Fire Delay Between Bursts Ms				  

int DropShotTime      = 150;  // Prone Shot Time Before Going Prone Ms
int CrouchShotWait    = 80;   // Crouch Shot Time Before Next Crouch Ms
int StrafeWait        = 1000; // Strafe Shot Time Before Changing Direction Ms
int ScopeTime         = 370;  // Quick Scope Shot Delay Before Shot Ms
int SniperTriggerTime = 250;  // Sniper Shot Time Release Within 250ms To Run Sniper Shot Ms

int GeneralSens       = 100;  // GENERAL Sens (Holding No Triggers) 			(* 30 to 300 *)
int AdsSens           = 100;  // ADS Sens (Holding ADS Trigger) 				(* 30 to 300 *)
int FireSens          = 100;  // FIRE Sens (Holding FIRE Trigger) 				(* 30 to 300 *)
int AdsFireSens       = 100;  // ADS + FIRE Sens (Holding ADS + FIRE Triggers)  (* 30 to 300 *)

int LedBrightness     = 10;   // Led Brightness (1 = Brightest 50 = Dimmest)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/// -- On or Off 	--  Also Accessed Via Zen Menu In Game --

int ModSwitch;				  //                          1                 2                 3                 4              5
int TaylorAssist      = Helix;// CHOOSE EITHER >>> ¦¦¦ Circular ¦¦ or ¦¦ TallOval ¦¦ or ¦¦ WideOval ¦¦ or ¦¦ Spiral ¦¦ or ¦¦ Helix ¦¦¦  <<< CHOOSE EITHER
int ToggleRumbleBoost = Off;  // BOOST ANGLE/SPEED + RADIUS/POWER USING RUMBLE SIGNAL WHEN FIRING
int AntiRecoil        =  On;  // Anti Recoil
int RapidFire         =  On;  // Rapid Fire    (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire ¦¦<< *)
int DynamicFire       = Off;  // Dynamic Fire  (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire ¦¦<< *)
int BurstFire         = Off;  // Burst Fire    (* Only Set One On In The Compiler Either >>¦¦ RapidFire  or  DynamicFire or BurstFire ¦¦<< *)
int DropShot          =  On;  // Prone Shot
int CrouchShot        =  On;  // Crouch Shot
int StrafeShot        =  On;  // Strafe Shot
int SniperMod         = Off;  // Quick Snipe
int HoldBreath        =  On;  // Hold Breath  
int AutoSprint        =  On;  // Auto Sprint
int HairTrigger       =  On;  // HairTrigger
int Sensitivity       =  On;  // Sensitivity Control
int AutoPing          =  On;  // AutoPing
int BlockRumble       =  On;  // Block Controller Vibration   
int PSonXBOX          =  On;  // Playstation Controller On Xbox/PC
int LEDRainbowFlow    =  On;  // LED Flow (Zen Eyes)
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Default State                   ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
//-- ADJUST HERE IF YOU WANT THE MOD ACTIVE WHEN THE SLOT FIRST LOADS ( On or Off ) (MASTER TOGGLE ABOVE MUST BE ON)

int FireMod       = On; // Rapid/Dyna Fire 
int DropShotMod   = On; // Prone Shot     (* Only Set One On In The Compiler Either   >>¦¦ Prone Shot  or  Crouch Shot  or  StrafeMod ¦¦<< *)
int CrouchShotMod = Off;// Crouch Shot    (* Only Set One On In The Compiler Either   >>¦¦ Prone Shot  or  Crouch Shot  or  StrafeMod ¦¦<< *)    
int StrafeMod     = Off;// Strafe Shot    (* Only Set One On In The Compiler Either   >>¦¦ Prone Shot  or  Crouch Shot  or  StrafeMod ¦¦<< *)    
int BreathMod     = On; // Hold Breath     
int SniperMode    = On; // Quick Snipe     

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Recoil Inverted                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/

int RecoilInvert = Off; // Set On If You Play Inverted Look Control

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    combo_run(Boot);
    LedInc = 1
    Colour = 150;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {

	if (BlockRumble)
        
        block_rumble();
    
    if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4)	
		
		swap (PS4_TOUCH,PS4_SHARE);
		
    if (!MainMenu) {
    
        if (get_ival(KillSwitchHold) && event_press(KillSwitchPress)) {
            
            Shunt = KillSwitchPress;
            KillSwitch = !KillSwitch;
            ToggleName = On;
            Toggle(KillSwitch,KillSwitchL[0]);
        }
    }
    
	if (!KillSwitch && !MainMenu && !get_ival(RecoilHoldOnFly)) {

   	    if (DropShot && get_ival(DropShotHold) && event_press(DropShotPress)) {
            
            Shunt = DropShotPress;
            DropShotMod = !DropShotMod;
            ToggleName = On;
            Toggle(DropShotMod,DropShotL[0]);
            CrouchShotMod = Off;
            StrafeMod = Off;
        }
	    
        if (CrouchShot && get_ival(CrouchShotHold) && event_press(CrouchShotPress)) {
            
            Shunt = CrouchShotPress;
            CrouchShotMod = !CrouchShotMod;
            ToggleName = On;
            Toggle(CrouchShotMod,CrouchShotL[0]);
            DropShotMod = Off;
            StrafeMod = Off;
        }
		
		if (StrafeShot && get_ival(StrafeModHold) && event_press(StrafeModPress)) {
	        
	        Shunt = StrafeModPress;
	        StrafeMod = !StrafeMod;
	        ToggleName = On;
	        Toggle(StrafeMod,StrafeModL[0]);
	   		DropShotMod = Off;
	   		CrouchShotMod = Off;
	   	}
	   	
		if ((RapidFire || DynamicFire) && get_ival(FireModHold) && event_press(FireModPress)) {
        	
        	Shunt = FireModPress;
        	FireMod = !FireMod;
        	ToggleName = On;
        	Toggle(FireMod,FireModL[0]);
    	}
    	
    	if (HoldBreath && get_ival(BreathModHold) && event_press(BreathModPress)) {
	        
	        Shunt = BreathModPress;
	        BreathMod = !BreathMod;
	        ToggleName = On;
	        Toggle(BreathMod,BreathModL[0]);
	   	}
	   	
	   	if (SniperMod && get_ival(SniperModHold) && event_press(SniperModPress)) {
	        
	        Shunt = SniperModPress;
	        SniperMode = !SniperMode;
	        ToggleName = On;
	        Toggle(SniperMode,SniperModL[0]);
	   	}
	}
	
	if (!KillSwitch) {
    	
    	if (Sensitivity) {
    	
    		if (!get_ival(Ads) && !get_ival(Fire)) {
    		
    			sensitivity(RX,Off,GeneralSens);
				sensitivity(RY,Off,GeneralSens);
    		}
    		
    		else if (get_ival(Ads) && !get_ival(Fire)) {
    		
    			sensitivity(RX,Off,AdsSens);
				sensitivity(RY,Off,AdsSens);
    		}
    		
    		else if (!get_ival(Ads) && get_ival(Fire)) {
    		
    			sensitivity(RX,Off,FireSens);
				sensitivity(RY,Off,FireSens);
    		}
    		
    		else if (get_ival(Ads) && get_ival(Fire)) {
    		
    			sensitivity(RX,Off,AdsFireSens);
				sensitivity(RY,Off,AdsFireSens);
    		}
    	}
    	
    	if (HairTrigger) {
    	
    		if (get_ival(Ads) >= 10) {
    		
    			set_val(Ads,100); 
    		}
    		
    		if (((!DynamicFire) || (DynamicFire && !FireMod)) && get_ival(Fire) >= 10) {
    		
    			set_val(Fire,100);
    		}
    	}
    	
    	if (AutoSprint) {
    	
    		if (get_ival(LY) <= -65) {
    			set_val(Sprint,100);
    		}
    	}
    	
    	if (TaylorAssist) {     
				
		    RXT = get_val(RX);                                
    	    RYT = get_val(RY); 
  		    ActualMagnitude = isqrt(pow(RXT,2) + pow(RYT,2));   
  		    MaxMagnitude = (ActualMagnitude < 100);             
		    angle += TaylorAngle + Angle;                                    
		    angle = angle % 360;  
		    CosAngle = DamPolar[(angle + 270) % 360];  
		    SinAngle = DamPolar[angle % 360];
            
   		    if (ToggleRumbleBoost) {
    	    			
    	    	if (get_ival(Fire)) {
    	    				
    	    		SmartRumble = get_rumble(RumbleToUse());
    	    		Angle = TaylorAngleBoost;
    	    	
    	    		if (SmartRumble > 10 && SmartRumble < 90) {
    	    				
    	    			PolarStrength = (TaylorRadius + PolarBoost + TaylorAngleBoost + SmartRumble / 4); 
    	    			SmartRumble   = Off;
    	    		}
    	    	} 
    	    }
    	    	
    	    if (get_ival(Ads) || get_ival(Fire)) {
            		
            	if (ActualMagnitude < TaylorRadius) {
               			
               		SinAngle -= RYT;                                                              
		    		CosAngle -= RXT;
	        	}
	   	    		else {     
		    			
		    			SinAngle = (SinAngle * (200 - ((abs(RYT) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
		    			CosAngle = (CosAngle * (200 - ((abs(RXT) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
		    		}                                                  
		    		
		    		if (!get_rumble(RumbleToUse()))
    	    			
    	    			GetShapes(TaylorRadius); 
    	    			
    	    			else 
    	    				
    	    				GetShapes(PolarStrength); 
		    }
		    	PolarStrength = Off; 
    	    	SmartRumble   = Off;  
		} 
		
		
        if (FireMod) {
            
            if (RapidFire && get_ival(Fire)) {
            
                combo_run(RapidFire);
            }    
                else {
                    
                    combo_stop(RapidFire);
                }
	        
            if (DynamicFire && get_ival(Fire)) {
            	
            	DynamicWait = DynaFireWait * 10 - (get_ival(Fire) * 3);
            	combo_run(DynaFire);
        	}    
            	else {
                	
                	combo_stop(DynaFire);
            	}
			
			if (BurstFire && get_ival(Fire)) {
            
                combo_run(BurstFire);
            }    
                else {
                    
                    combo_stop(BurstFire);
                }
		}


		if (DropShotMod) {
    
        	if (DropShot && get_ival(Fire) && get_ptime(Fire) >= DropShotTime) {
            	
            	set_val(Crouch,100);
        	}
        }

    	if (CrouchShotMod) {
    
        	if (CrouchShot && get_ival(Fire)) {
            	
            	combo_run(CrouchShot);
        	}    
            	else {
                	
                	combo_stop(CrouchShot);
            	}
    	}

    	if (StrafeMod) {
	
			if (StrafeShot && get_ival(Fire) && abs(get_ival(LX)) <= 35 && abs(get_ival(LY)) <= 35) {
				
				combo_run(StrafeShot);
			}	
				else {
					
					combo_stop(StrafeShot);
				}
		}
		
        if (HoldBreath && BreathMod) {
	   
	   	    if (get_ival(Ads))
		       	
		       	set_val(Sprint,100);
	                          
		    if (get_ival(LY) <-90 && get_ival(Ads) && get_ptime(Ads) >= 200)
	           	
	           	combo_stop(HoldBreath);       
	                        
	   	    if (event_press(Ads)) 
	           	
	           	combo_run(HoldBreath);
	    } 

		if (SniperMode && SniperMod) {
        		
        	if (get_ival(SniperTrigger) && get_ptime(SniperTrigger) < SniperTriggerTime) {
	
				set_val(SniperTrigger,0);
			}
				
				else if (event_release(SniperTrigger) && get_ptime(SniperTrigger) <= SniperTriggerTime) {
					
					combo_run(SniperMod);
				}
		}    
    	
    	if (AutoPing) {
    	
    		if (get_ival(Ads) && event_press(Fire)) {
    			combo_run(AutoPing);
    		}
    	}
    	
    	if (AntiRecoil){        
        
        	if (TaylorAssist) {
        	
        	    if (get_ival(Ads) && get_ival(Fire)) { 
                	
                	Recoil = On;
                }
			    	else {
			    		
			    		Recoil = Off;
			    	}
			}
			
			else if (!TaylorAssist) {
        	
        	    if (get_ival(Ads) && get_ival(Fire)) { 
                	
                	AntiRecoil();
                }
			}
			
		    if ((get_ival(RecoilHoldOnFly)) && (!MainMenu)) { 

                if (event_press(RecoilDownPress)) {
                    
                    	Vertical += 1;
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (event_press(RecoilUpPress)) {
                     
                    	Vertical -= 1;
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }
                
                if (event_press(RecoilRightPress)) {
                    
                    	Horizontal += 1;
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if (event_press(RecoilLeftPress)) {
                     
                    	Horizontal -= 1;
						RecoilValue = On;
						VibB = On;
						combo_run(Rumble);
						combo_run(RecoilValue);
                }

                if ((Vertical < 1 || Vertical > 99)) {
                     
                     Vertical = 20;
                }
				
				if ((Horizontal < -50 || Horizontal > 50)) {
                     
                     Horizontal = 0;
                }
                
                if (combo_running(RecoilValue)) {
            		
            		if (event_press(RecoilUpPress) || event_press(RecoilDownPress) || event_press(RecoilLeftPress) || event_press(RecoilRightPress)) 
            			
            			combo_restart(RecoilValue);
            	}
            		set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);set_val(RecoilLeftPress,0); set_val(RecoilRightPress,0);
            }
		}
	}
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
		VibA = On;
		combo_run(Rumble);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
				VibB = On;
				combo_run(Rumble);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}

		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],ModIncrement[ModIndex],IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch && ModIndex > 1) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}	
			else if (MenuSwitch && ModIndex == 1){
			
				ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,5,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
			
			BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (!MainMenu && Saver) { 
        
        ScreenTime (); 
     	Saver (); 
	} 

    if (!MainMenu && LEDRainbowFlow) { 
        
        LedFlow();
    }
    
    if (ToggleTime) {
        
        TimeToggle();
    }

    if (Shunt) {
        
        if (event_release(Shunt)) {
            
            Shunt = Off;
        }
            else {
                
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo DynaFire {

    set_val(Fire,100);
    wait(DynaFireHold);
    set_val(Fire,0);
    wait(DynamicWait);
}

combo BurstFire {

    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);    
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);    
    wait(40);
    set_val(Fire,100);
    wait(40);
    set_val(Fire,0);   
    wait(40);
    set_val(Fire,0);   
    wait(BurstFireWait);
}

combo CrouchShot {

    set_val(Crouch,100);
    wait(50);
    set_val(Crouch,0);
    wait(20);
 	wait(CrouchShotWait);   
}

combo StrafeShot {

	set_val(LX,-100 + get_ival(LX));
	wait(StrafeWait);
	set_val(LX,100 + get_ival(LX));
	wait(StrafeWait);
}

combo HoldBreath {
	
	set_val(Sprint,0);
	wait(60);
	set_val(Sprint,100);
	wait(110);
	set_val(Sprint,0);
	wait(110);
}

combo SniperMod {
	
	set_val(Ads,100);
    set_val(Sprint,100);
    wait(ScopeTime);
    set_val(Ads,100);
    set_val(Sprint,100);
    set_val(Fire,100);
    wait(50);
}

combo AutoPing {

    wait(50);
    set_val(Ping,100);
    wait(50);
    set_val(Ping,0);
    wait(30);
}

combo RecoilValue {
 	
 		Saver = Off;
 		combo_stop(Boot);
 	
 	if (RecoilValue) {
 		
 		cls_oled(0);
	    rect_oled(1,1,127,63,0,1);
	    line_oled(126,23,2,23,1,1);
	    line_oled(126,52,2,52,1,1);
	    printf(28,54,0,1,MiscString[9]);
	    
	    if (event_press(RecoilUpPress) || event_press(RecoilDownPress)) {
	    	
	    	printf(30,5,1,1,MiscString[10]);
	    	NumX = 0; NumY = 1; NumS = 1;
	    	FindDigit(Vertical,DigitValue(Vertical));
	    }
	
	    if (event_press(RecoilLeftPress) || event_press(RecoilRightPress)) {
	    	
	    	printf(30,5,1,1,MiscString[11]);
	    	NumX = 0; NumY = 1; NumS = 1;
	    	FindDigit(Horizontal,DigitValue(Horizontal));
	    }
	
		RecoilValue = Off;
	
	}
		wait(5000);
		VibB = On;
		combo_run(Rumble);
 		cls_oled(0);
 		Saver = On;
}

combo Rumble {
    
    if (VibA)
        
        set_rumble(RUMBLE_A,15);
        
        else if (VibB)
            
            set_rumble(RUMBLE_B,15);
    
    	wait(250);
    	VibA = Off;
    	VibB = Off;
    	reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        
        cls_oled(0);
        
        if (Slot) {
            
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
}

combo VibrateBlink {
    
    if (Modled) {
        
        set_rgb(0,255,0);
        set_rumble(RUMBLE_A,15);
    }    
        else {
            
            set_rgb(255,0,0);
            set_rumble(RUMBLE_B,15);
        }
     	
     	wait(150);
    	set_rgb(0,0,0);
    	wait(150);
    	reset_rumble();    
    
    if (Modled)
        
        set_rgb(0,255,0);
    
        else
            
            set_rgb(255,0,0);
	
		wait(150);
		reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function GetShapes (f_var) {     
   
    if (!SpiralPosition1) {
		
		InnerSpiral -= 1;
		
		if (InnerSpiral < TaylorRadiusMin)
			
			SpiralPosition1 = On;
	}
	
			else {
	    		
	    		InnerSpiral += 1;
				
				if (InnerSpiral > f_var)
					
					SpiralPosition1 = Off;
			}
	
	if (!SpiralPosition2) {
		
		OuterSpiral -= 1;
		
		if (OuterSpiral < TaylorRadiusMin)
			
			SpiralPosition2 = On;
		}
			else {
				
				OuterSpiral += 1;
				
				if (OuterSpiral > f_var)
					
					SpiralPosition2 = Off;
			} 
	
	if (TaylorAssist == Circular) { 
        
        RYT = (get_val(RY)) + ((SinAngle * f_var))/100;
        RXT = (get_val(RX)) + ((CosAngle * f_var))/100;  
	}
	
	if (TaylorAssist == TallOval) { 
        
        RYT = (get_val(RY)) + ((SinAngle * f_var))/100;
        RXT = (get_val(RX)) + ((CosAngle * TaylorRadiusMin))/100; 
	}
	
	if (TaylorAssist == WideOval) { 
        
        RXT = (get_val(RX)) + ((CosAngle * f_var))/100;  
        RYT = (get_val(RY)) + ((SinAngle * TaylorRadiusMin))/100;
       
	}
	
	if (TaylorAssist == Spiral) {
        
        RYT = (get_val(RY)) + ((SinAngle * InnerSpiral))/100;
        RXT = (get_val(RX)) + ((CosAngle * OuterSpiral))/100;  
	}
    
    if (TaylorAssist == Helix) {
		
		if (PositionT <= 1) {  
		    
		    RXT = (get_val(RX)) + ((CosAngle * f_var))/100;
		}
	    
	    if (PositionT > 1) {  
		    
		    RYT = (get_val(RY)) + ((SinAngle * f_var))/100;
		}
			PositionT++;		
			
		if (PositionT == 4) 
			
			PositionT = Off;
    } 
    	if (!Recoil) {
    		
    		set_val(RX,RXT);
			set_val(RY,RYT);
		}
		
		if (Recoil && !RecoilInvert) {
    		
			set_val(RX,RXT + Horizontal);
			set_val(RY,RYT + Vertical);
		}
		
		if (Recoil && RecoilInvert) {
    		
			set_val(RX,RXT + Horizontal);
			set_val(RY,RYT + (Vertical * -1));
		}
}	    

function RumbleToUse () {
    
    if (get_rumble(RumA) >= get_rumble(RumB)) 
        
        return RumA;
    
    if (get_rumble(RumA) < get_rumble(RumB)) 
        
        return RumB;
        
    	return Off;
}	

function AntiRecoil () {

	if (RecoilInvert) {
    		
		Set_Val(RX,Horizontal);
		Set_Val(RY,Vertical * -1);
	}
		
		else {
    		
			Set_Val(RX,Horizontal);
			Set_Val(RY,Vertical);
		}
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
        return; 
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			
			cls_oled(0);
}

function Toggle (ModT,ModP) {
    
    if (combo_running(Boot))    
        
        combo_stop(Boot);
       
        Modled = ModT;
        ToggleT = 0;
        ToggleTime = On;
	    combo_run(VibrateBlink);
    
    if (ToggleName) {
    	
    	Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            
            printf(41,38,0,1,MiscString[6]);    
        }
            else {
                
                printf(36,38,0,1,MiscString[7]);
            }
                ToggleName = Off;
    }
}

function TimeToggle () {
        
    ToggleT += get_rtime();
    
        if (ToggleT >= 5000) {
            
            if (!MainMenu) {
            	
            	cls_oled(0);
            	Saver = 1; 
            	Clear = On;
            }
            	ToggleTime = Off;
            	ToggleT = 0;
    	}
}

function ScreenTime () { 

     if (Clear) {
         
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch && ModIndex > 1) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			}
				
				else if (MenuSwitch && ModIndex == 1) {
				
					printf(51,24,1,1,ModAimAssist[ModVal]); 
				}
			Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;
		ModMonitor(ModValLbl);
		
            if (ModVal >= ModValMax){ 
                return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;
			ModMonitor(ModValLbl);
			
				if (ModVal <= ModValMin){
					return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 

function ModMonitor (Mon) {
    
    if (Mon == ModToggle[4]) { 
        
        DynamicFire = Off;
    	BurstFire = Off;
    }
        
        if (Mon == ModToggle[5]) { 
          
          	RapidFire = Off;
        	BurstFire = Off;
        } 
        
        	if (Mon == ModToggle[6]) { 
          
          		RapidFire = Off;
        		DynamicFire = Off;
        	}
}

function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		
		ScrollWait = ScrollSpeed;
 
		for (ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if (ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if (ScrollLine >= sizeof(Scroll)) {
		
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if (ScrollChar < 1) {
			
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
		else  
		
			Count = 0;
    
	if (Digits == 5) {  
		
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	
	if (Digits >= 4) {
		
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	
	if (Digits >= 3) { 
		
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	
	if (Digits >= 2) { 
		
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,   CIRCLE  ,   SPACE   ,     O     ,     r     ,   SPACE   ,     B     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };
    
const int8 DamPolar[] = {
	100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
	80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
	6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
	-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
	-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
	-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
	-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
	9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
	82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};