/* 
██████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░██████████░░░░░░█░░░░░░██░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░█████████░░░░░░░░░░░░░░████
█░░▄▀░░░░░░░░░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░████
█░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░█████████░░▄▀░░░░░░░░░░████
█░░▄▀░░░░░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░████████████
█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░░░░░░░░░████
█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█████████░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░████
█░░▄▀░░██░░░░░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░░░░░░░░░▄▀░░█░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░░░░░░░░░████
█░░▄▀░░██████████░░▄▀░░█░░▄▀░░██░░▄▀░░█████████░░▄▀░░█░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░████████████
█░░▄▀░░██████████░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░████
█░░▄▀░░██████████░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░████
█░░░░░░██████████░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░████
██████████████████████████████████████████████████████████████████████████████████████████████████████
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░██░░░░░░░░████░░░░░░█████████░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██████████░░░░░░█░░░░░░░░░░░░███░░░░░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀░░██░░▄▀▄▀░░████░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░░░░░░░░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░░░▄▀░░██░░▄▀░░░░████░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀▄▀▄▀▄▀▄▀░░██░░▄▀░░█░░▄▀░░░░▄▀▄▀░░█░░▄▀░░░░░░░░░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░███████████░░▄▀▄▀░░▄▀▄▀░░██████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░░░░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░███░░░░▄▀▄▀▄▀░░░░██████░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀▄▀▄▀░░████████░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░░░░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░███░░░░▄▀▄▀▄▀░░░░██████░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░░░░░░░░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░███████████░░▄▀▄▀░░▄▀▄▀░░██████░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░██░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█████████░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░░░░░░░░░█░░░░▄▀░░██░░▄▀░░░░████░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░░░▄▀▄▀░░█░░░░░░░░░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀░░██░░▄▀▄▀░░████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░░░░░░░░░▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░░░░░██░░░░░░█░░░░░░█████████░░░░░░░░░░░░░░█░░░░░░░░██░░░░░░░░████░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██████████░░░░░░█░░░░░░░░░░░░███░░░░░░░░░░░░░░█
█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░█░░░░░░██░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██████████░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███░░░░░░░░░░░░░░█░░░░░░░░░░░░███
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██████████░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█
█░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░█░░▄▀░░██████████░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░░░░░█░░▄▀░░░░▄▀▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░█████████░░▄▀░░████░░▄▀░░███░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██████████░░▄▀░░█░░▄▀░░█████████░░▄▀░░████░░▄▀░░███░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░░░░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░░░███░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█░░▄▀░░██░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░▄▀░░░░███░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░█░░▄▀▄▀░░▄▀▄▀░░█░░▄▀░░█████████░░▄▀░░██░░▄▀░░█████░░▄▀░░█████████░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░▄▀░░░░░░▄▀░░█░░▄▀░░█████████░░▄▀░░██░░▄▀░░█████░░▄▀░░█████████░░▄▀░░██░░▄▀░░█
█░░▄▀░░░░░░▄▀░░█░░░░▄▀▄▀▄▀░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░░░░░█░░▄▀░░█████████░░▄▀░░░░░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░▄▀▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀░░███░░░░▄▀░░░░███░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀░░█░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░░░░░▄▀░░░░░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀░░░░█
█░░░░░░░░░░░░░░█████░░░░░░█████░░░░░░░░░░░░░░█░░░░░░██░░░░░░░░░░█░░░░░░█████████░░░░░░░░░░░░░░█░░░░░░██░░░░░░██░░░░░░█░░░░░░░░░░░░░░█░░░░░░██░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░███
██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░███░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░████░░░░░░██░░░░░░█░░░░░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░████░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░░░█░░▄▀░░░░░░░░▄▀░░███░░░░▄▀░░░░█░░▄▀░░░░░░▄▀░░█░░░░░░▄▀░░░░░░████░░▄▀░░██░░▄▀░░█░░░░░░░░░░▄▀░░█
█░░▄▀░░█████████░░▄▀░░█████████░░▄▀░░████░░▄▀░░█████░░▄▀░░███░░▄▀░░██░░▄▀░░█████░░▄▀░░████████░░▄▀░░██░░▄▀░░█████████░░▄▀░░█
█░░▄▀░░░░░░░░░░█░░▄▀░░█████████░░▄▀░░░░░░░░▄▀░░█████░░▄▀░░███░░▄▀░░░░░░▄▀░░█████░░▄▀░░████████░░▄▀░░██░░▄▀░░█░░░░░░░░░░▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█████████░░▄▀▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█████░░▄▀░░████████░░▄▀░░██░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░░░░░░░░░▄▀░░█░░▄▀░░█████████░░▄▀░░░░░░▄▀░░░░█████░░▄▀░░███░░▄▀░░░░░░░░░░█████░░▄▀░░████████░░▄▀░░██░░▄▀░░█░░▄▀░░░░░░░░░░█
█████████░░▄▀░░█░░▄▀░░█████████░░▄▀░░██░░▄▀░░███████░░▄▀░░███░░▄▀░░█████████████░░▄▀░░████████░░▄▀▄▀░░▄▀▄▀░░█░░▄▀░░█████████
█░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░█░░▄▀░░██░░▄▀░░░░░░█░░░░▄▀░░░░█░░▄▀░░█████████████░░▄▀░░████████░░░░▄▀▄▀▄▀░░░░█░░▄▀░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░██░░▄▀▄▀▄▀░░█░░▄▀▄▀▄▀░░█░░▄▀░░█████████████░░▄▀░░██████████░░░░▄▀░░░░███░░▄▀▄▀▄▀▄▀▄▀░░█
█░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█░░░░░░██░░░░░░░░░░█░░░░░░░░░░█░░░░░░█████████████░░░░░░████████████░░░░░░█████░░░░░░░░░░░░░░█
████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
*/
int Hold_Breath = FALSE;
int Auto_Ping_ON = FALSE; 
int Quick_Shot_ON = FALSE; 	
int Crouch_Shot_ON = FALSE; 
int Strafe_Shot_ON = FALSE;
int Strafe_Shot_Time  = 130;  	// Amount of time you go to the sides 
int    STICKY__AIM = TRUE;		// AIM ASSIST
int    release=42.2;
int _v=	42.2;	
define AIM_H=XB1_RX;//AIM HORIZONTAL  				
define AIM_V=XB1_RY;//AIM VERTICAL		
define STRAFE=XB1_LX;  

// PRIMARY WEAPON:
int AR_Primary = 22; // Antirecoil Vertical
int ARH_Primary = 0; // AntiRecoil Horizontal
int RF_Primary_onoff = FALSE; // Set TRUE to enable RapidFire by default on Primary else set FALSE
int RoF_Primary = 8; // Range: 1 to 25 RPS (Round/s)

////////// Do not modify //////////

define Off       = 0;
define Blue      = 1;
define Red       = 2;
define Green     = 3;
define Pink      = 4;
define SkyBlue   = 5;
define Yellow    = 6;
define White     = 7;
 
data(
  0,0,0,0, //0. Off
  2,0,0,0, //1. Blue
  0,2,0,0, //2. Red
  0,0,2,0, //3. Lime/Green
  0,0,0,2, //4. Fuchsia/Pink
  2,0,2,0, //5. SkyBlue
  0,2,2,0, //6. Yellow
  2,2,2,2  //7. White
);

int double_tap;
int weapon;
int handgun;
 
int ARV;
int ARH;
int arv;
int arh;
 
int idx;
 
int RATE_OF_FIRE;
int hold_time;
int rest_time;
 
init {
    AR_Primary = get_pvar(SPVAR_1, -100, 100, 0);   ARH_Primary = get_pvar(SPVAR_4, -100, 100, 0);   RoF_Primary = get_pvar(SPVAR_7, 0, 25, 0); 
    

}
 // FLIPPED TRIGGERS
main {
 
    swap(PS4_L1,PS4_R2);
    swap(PS4_L1,PS4_R2);}
    
    define FIRE_SENS = 100; // Sensitivity while shothing - Default: 100 - Range [0 ~ 327]
	                        // set a number below 100 for less sens - above 100 for more sens
	
	define GEN_SENS = 100;  // General sensitivity - Default: 100 - Range [0 ~ 327]
	                        // set a number below 100 for less sens - above 100 for more sens

	define ADS_SENS = 100;  // Sensitivity while aiming - Default: 100 - Range [0 ~ 327]
	                        // set a number below 100 for less sens - above 100 for more sens
	                           
	define RUN_SENS = 100; 	// Sensitivity while running - Default: 100 - Range [0 ~ 327]
		                   	// set a number below 100 for less sens - above 100 for more sens 
	                   
    define MIDPOINT = 50;   /** MIDPOINT - Default: 50 - Range [0 ~ 100] Carefully read below:
	                        If you set a number below 50 you are defining a zone of high sensitivity range when close to rest position 
						    (fast movements) and a low sensitivity range when far from rest position (better accuracy).
						    if you set a number above 50 you are defining a zone of low sensitivity when close to the rest position
						    (better accuracy), and a zone of high sensitivity when far from rest position (fast movements).**/

 
main {    
 if(get_val(XB1_LT)) 
    sensitivity(PS4_RX, 54, 98);
	sensitivity(PS4_RY, 58, 115);
 
    if(get_val(XB1_RT)) 
    sensitivity(PS4_RX, NOT_USE, 95);
	sensitivity(PS4_RY, NOT_USE, 112);
 
if((get_val(PS4_RX)) && (get_val(PS4_RY) && (get_val(PS4_LY) && (get_val(PS4_LX)&& (!get_val(XB1_LT) && (!get_val(XB1_RT))))))) {
    sensitivity(PS4_RX, NOT_USE, 99);        
    sensitivity(PS4_RY, NOT_USE, 104);}   
    
    
    // FIRE SENS
    if(get_val(XB1_LT) && get_val(XB1_RT)) {         
    sensitivity( 9, MIDPOINT, FIRE_SENS);        
    sensitivity(10, MIDPOINT, FIRE_SENS);
    }
    // ADS SENS
    else if (get_val(XB1_LT)) {        
    sensitivity( 9, MIDPOINT, ADS_SENS);        
    sensitivity(10, MIDPOINT, ADS_SENS); 
    } else {
    // GENERAL SENS
    sensitivity( 9, MIDPOINT, GEN_SENS);
    sensitivity(10, MIDPOINT, GEN_SENS); 
    }
    
    if(event_press(PS4_TRIANGLE))
        combo_run(Vibrate1);
        
     deadzone(PS4_L2,PS4_R2,99,99);
     
   if(Hold_Breath) // Hold Breath
    if(get_val(PS4_L2)) set_val(PS4_L3,100);
    if(Hold_Breath)
    if(get_val(PS4_LY) <-90 && get_val(PS4_L2) && get_ptime(PS4_L2) > 200) combo_stop(Hold_Breath_);
    if(Hold_Breath)
    if(event_press(PS4_L2)) combo_run(Hold_Breath_);
    if(Hold_Breath)
    if(get_val(PS4_L2) && get_lval(PS4_L3)) set_val(PS4_L3,0);
   
 
if(event_release(XB1_Y) && get_ptime(XB1_Y) >= 510)
    
     
    if(event_press(PS4_TRIANGLE) || (event_press(PS4_R2) || get_val(PS4_L2)))
    
     if(event_release(XB1_X) && get_ptime(XB1_X) >= 1000)
     combo_run(Auto_X);
     
    if(event_press(PS4_SQUARE) || (event_press(PS4_R2) || get_val(PS4_L2)))
     combo_stop(Auto_X);

if(!get_val(PS4_L2))
	{
   		
}

if(abs(get_val(XB1_RY)) <=5 && abs(get_val(XB1_RX)) <=5)
    	{
        	set_val(XB1_RY,0);                                                 
        	set_val(XB1_RX,0);

}
//QUICK SHOT
  if((get_val(PS4_UP) && get_val(PS4_UP)) && event_press(PS4_SQUARE))
    {
        Quick_Shot_ON = !Quick_Shot_ON;
        if (Quick_Shot_ON) combo_run (Vibrate);
        if (!Quick_Shot_ON) combo_run (Vibrate1);  
    }
    
if(Quick_Shot_ON)
{

    if(get_val(XB1_LT)) 
        set_val(XB1_RT, 100);
}
//STRAFE SHOT
 if((get_val(PS4_UP) && get_val(PS4_UP)) && event_press(PS4_CROSS))
    {
        Strafe_Shot_ON = !Strafe_Shot_ON;
         if (Strafe_Shot_ON) combo_run (Vibrate);
         if (!Strafe_Shot_ON) combo_run (Vibrate1); 
    }
    
if(Strafe_Shot_ON)
{
  if(get_val(XB1_LT) && (get_val(XB1_RT)))
        combo_run(Strafe_Shot);
    else
        combo_stop(Strafe_Shot);

}

//CROUCH SHOT 
if((get_val(PS4_UP) && get_val(PS4_UP)) && event_press(PS4_CIRCLE))
    {
        Crouch_Shot_ON = !Crouch_Shot_ON;
        if (Crouch_Shot_ON) combo_run (Vibrate);
         if (!Crouch_Shot_ON) combo_run (Vibrate1); 
    }
    
if(Crouch_Shot_ON)
{
  if(get_val(XB1_LT) && (get_val(XB1_RT)))
        combo_run(Crouch_Shot);
    else
        combo_stop(Crouch_Shot);

}
//AUTO PING
if((get_val(PS4_UP) && get_val(PS4_UP)) && event_press(PS4_R3))
    {
        Auto_Ping_ON = !Auto_Ping_ON;
        if (Auto_Ping_ON) combo_run (Vibrate);
         if (!Auto_Ping_ON) combo_run (Vibrate1); 
        }
    
if(Auto_Ping_ON)
{
  if (get_val(XB1_RT) && (!get_val(XB1_RS)))
     combo_run(Auto_RS1);
     else
    	 combo_stop(Auto_RS1);
}    
	if(STICKY__AIM){
	if(get_val(XB1_LT)) 
	combo_run(AA_XY);
  	else 
  	combo_stop(AA_XY); 
}				
    set_val(TRACE_1, ARV);
    set_val(TRACE_2, ARH);
    set_val(TRACE_3, RATE_OF_FIRE);
    set_val(TRACE_5, weapon);


    if(double_tap) 
        double_tap -= get_rtime();

    if(event_press(PS4_TRIANGLE) || (event_press(PS4_DOWN) && !get_val(PS4_L2)))
    { 
        weapon=!weapon; 
        handgun = FALSE;
 
        if(double_tap) 
          { 
              handgun = FALSE ; 
              weapon = !weapon;
          }
              
    }

    if(get_val(PS4_L2) && get_val(PS4_OPTIONS))
    {
        set_pvar(SPVAR_1, AR_Primary);   set_pvar(SPVAR_4, ARH_Primary);   set_pvar(SPVAR_7, RoF_Primary);        
        combo_run(Vibrate);              combo_run(Flash);                 set_val(PS4_OPTIONS, 0)
    }
 
     if(get_val(PS4_L2) && get_val(PS4_R2))
        combo_run(AntiRecoil);
            else 
                combo_stop(AntiRecoil);
 
    hold_time = 500 / RATE_OF_FIRE;
    rest_time = hold_time - 20;
    if(rest_time < 0) rest_time = 0;
 
    
        {
            if(!weapon) 
            {
                AR_Primary = edit_val (0, PS4_L2, PS4_CROSS, AR_Primary, PS4_UP, PS4_DOWN, 0, 100);
                ARH_Primary = edit_val (1, PS4_L2, PS4_CROSS, ARH_Primary, PS4_RIGHT, PS4_LEFT, -100, 100);

                if(RF_toggle (PS4_L2, PS4_RIGHT, PS4_RIGHT))
                    RF_Primary_onoff = !RF_Primary_onoff;

                if(RF_Primary_onoff)
                {
                    RoF_Primary = edit_val (2, PS4_L2, PS4_CIRCLE, RoF_Primary, PS4_UP, PS4_DOWN, 0, 25); 
                    RF ();
                }   
            }
 
            if(weapon) 
            {
               
            }
        }

         if(!weapon) LED(Blue);
             else LED(Green); 
              }



combo AA_XY {
	 set_val(AIM_V,xy_val(AIM_V, _v));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v));
    set_val(STRAFE,xy_val(STRAFE, _v));
    wait(20);
    set_val(AIM_V,xy_val(AIM_V, _v * -1));
    wait(20);
    set_val(AIM_H,xy_val(AIM_H, _v * -1));
    set_val(STRAFE,xy_val(STRAFE, _v * -1));
    wait(20);
}
combo RAPID_FIRE {
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time);

} 
combo Vibrate1 {
   set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait (150);
    set_rumble(RUMBLE_B, 100);
    wait(150);
    reset_rumble();

}
combo Vibrate {
    set_rumble(RUMBLE_A, 50);
    wait(300);
    reset_rumble();
}
 
combo Flash {
    wait(400);
    LED(Off);
    wait(400);
}
 
combo AntiRecoil { 
    arv = get_val(10) + ARV;
    if(arv > 100) arv = 100;
    set_val(10, arv);
    arh = get_val(9) + ARH;
    if(arh > 100) arh = 100;
    set_val(9, arh);
}
combo Turbo_1 {
    set_val(XB1_X, 100);
    wait(550);
    set_val(XB1_X, 0);

}  
combo Hold_Breath_ {
set_val(PS4_L3,0);
wait(60);
set_val(PS4_L3,100);
wait(110);
set_val(PS4_L3,0);
wait(110);}
combo Strafe_Shot {
    set_val(PS4_LX, 100);
    wait(Strafe_Shot_Time);
    wait(50);
    set_val(PS4_LX, -100);
    wait(Strafe_Shot_Time);
    wait(50);
}
 combo Auto_RS1 {
	set_val(PS4_UP, 100);
	wait(120);
	set_val(PS4_UP, 0);
	wait(70);
}	
combo Crouch_Shot {
   set_val(XB1_B,100);
} 
combo Flash3 {
    wait(600);
    LED(4);
    wait(700);
}
 combo Auto_X {
    set_val(XB1_X,100);
    wait(10500);
}   

function edit_val (f_idx, f_btn1, f_btn2, f_var, f_inc, f_dec, f_min, f_max) { 
    idx = f_idx; 
 
    if(idx == 0)
        ARV = f_var; 
    if(idx == 1)
        ARH =  f_var; 
    if(idx == 2)
        RATE_OF_FIRE = f_var; 
 
    if(get_val(f_btn1) && get_lval(f_btn2))
    {
        if(event_press(f_inc))
            f_var += 1;        
        if(event_press(f_dec))
            f_var -= 1;
        set_val(f_inc, 0); set_val(f_dec, 0);

        if(f_var < f_min)
        {
            f_var = f_min;
            combo_run(Vibrate);
        }
        if(f_var > f_max)
        {
            f_var = f_max;
            combo_run(Vibrate);
        }
        set_val(f_btn2, 0);
    }
    return f_var;
}

 
function RF_toggle (f_hbtn1, f_hbtn2, f_pbtn) {
    if((get_val(f_hbtn1) && get_val(f_hbtn2)) && event_press(f_pbtn))
    {
        combo_run(Vibrate);
        return TRUE;
    }
    return FALSE;
}  
 
//################################################################################################# 
//
// State machine variable
//
 
 
int Current_State          = 0;
int Aim_Abuse_State      = 2;
 
 
define Get_Last_Value     = 0;
define Get_Current_Value = 1;
define Aim_Correction      = 2;
define Aim_Boost          = 3;
 
 
define Aim_Perfection_Limit = 95;
 
 
//
//################################################################################################# 
//######################################### Script variable ####################################### 
//################################################################################################# 
//
// Dont't change!
//
int X_Last_Value     = 0;
int Y_Last_Value     = 0;
int X_Current_Value  = 0;
int Y_Current_Value  = 0;
 
int mvt = 0;
int Aim_Boost_Val = 0; 
int Aim_Correction_Val = 0;
 
 
//
//################################################################################################# 
//############################################# MAIN ############################################## 
//################################################################################################# 
//
main
{
 //update main every 8ms --> only for XB1
   // vm_tctrl(-2); 
 
    //--LT pulled 
 
	if(get_val(XB1_LT)) 
        {        
            if (Current_State == Get_Last_Value)
            {
                X_Last_Value = get_lval(XB1_RX);
                Y_Last_Value = get_lval(XB1_RY);
 
                Current_State = Get_Current_Value;
 
            }
            else if (Current_State == Get_Current_Value)
            {
                X_Current_Value = get_val(XB1_RX);
                Y_Current_Value = get_val(XB1_RY);
 
                if(Aim_Abuse_State == Aim_Correction)
                {    
                    Current_State = Aim_Boost;
                }
                else
                {
                    Current_State = Aim_Correction;
                }    
            }
            if (Current_State == Aim_Boost)
            {
                //Applying BOOST
                //Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS ) 
                Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0 ); 
                Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1 ); 
 
                Current_State = Get_Last_Value;
                Aim_Abuse_State = Aim_Boost;  
            }
            else if (Current_State == Aim_Correction)
            {
                //Applying CORRECTION
                //Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS )
                Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0 ); 
                Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1 ); 
 
                Current_State = Get_Last_Value;
                Aim_Abuse_State = Aim_Correction; 
            } 
        }
        else //--LT not pulled
        {
            Current_State = Get_Last_Value;
            Aim_Abuse_State = Aim_Correction; 
        }
}
//
//################################################################################################# 
//############################################# FUNC ############################################## 
//################################################################################################# 
//           
 
function 
Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) 
    { 
       mvt = abs(Last_Value) + abs(Current_Value);
       Aim_Boost_Val = ( mvt + 1 )/2; //Rounding integer division (instead of truncating)
       Aim_Correction_Val = Aim_Boost_Val + 4;
 
       if(Aim_Boost_Val >= 10)
       {
           Aim_Boost_Val = 10;
           Aim_Correction_Val = 14;
       }
       else if(Aim_Boost_Val == 0)
       {
            Aim_Boost_Val = 2
            Aim_Correction_Val = 4;
       }
 
 
       if(mvt < Aim_Perfection_Limit) 
       {
            //--moving right
            if(Last_Value < Current_Value)
            {           
                if (Boost)
                { 
                    if (X_AXIS)
                        set_val(XB1_RX, (Current_Value + Aim_Boost_Val)); 
 
                    if (Y_AXIS)
                        set_val(XB1_RY, (Current_Value + Aim_Boost_Val));
                }
                else if(Correction)
                {
                    if (X_AXIS)
                        set_val(XB1_RX, (Current_Value - Aim_Correction_Val)); 
 
                    if (Y_AXIS)
                        set_val(XB1_RY, (Current_Value - Aim_Correction_Val));            
                }
            }
            else //--moving left
            {
                if (Boost)
                { 
                    if (X_AXIS)
                        set_val(XB1_RX, (Current_Value - Aim_Boost_Val)); 
 
                    if (Y_AXIS)
                        set_val(XB1_RY, (Current_Value - Aim_Boost_Val));
                }
                else if(Correction)
                {
                    if (X_AXIS)
                        set_val(XB1_RX, (Current_Value + Aim_Correction_Val)); 
 
                    if (Y_AXIS)
                        set_val(XB1_RY, (Current_Value + Aim_Correction_Val));            
                }
            }
        }
    } 
 
 
function RF () {
    combo_run(Flash);
 
    if(get_val(PS4_R2))
        combo_run(RAPID_FIRE);
        else 
            combo_stop(RAPID_FIRE);
}
 
 
function LED(Colour) {
    set_led(LED_1,dbyte(Colour*4));
    set_led(LED_2,dbyte((Colour*4) + 1));
    set_led(LED_3,dbyte((Colour*4) + 2));
    set_led(LED_4,dbyte((Colour*4) + 3));
}
    
function xy_val(f_axis,f_val) {
	if(abs(get_val(f_axis)) < release)
	return f_val;
	return get_val(f_axis);
}
