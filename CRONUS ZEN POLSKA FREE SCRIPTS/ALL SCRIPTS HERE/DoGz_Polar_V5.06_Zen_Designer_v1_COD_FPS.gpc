/*
   _______            ______           ________ __                ________ __  ______  __       ________          _______     __           
  |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \   |  \          
  | ¦¦¦¦¦¦¦\ ______ |  ¦¦¦¦¦¦\________ \¦¦¦¦¦¦¦¦ ¦¦____   ______ | ¦¦¦¦¦¦¦¦\¦¦  ¦¦¦¦¦¦\ ¦¦____  \¦¦¦¦¦¦¦¦ ______ | ¦¦¦¦¦¦¦\  | ¦¦ _______  
  | ¦¦  | ¦¦/      \| ¦¦ __\¦¦        \  | ¦¦  | ¦¦    \ /      \| ¦¦__   |  \ ¦¦ __\¦¦ ¦¦    \   | ¦¦   /      \| ¦¦__| ¦¦   \¦ /       \ 
  | ¦¦  | ¦¦  ¦¦¦¦¦¦\ ¦¦|    \\¦¦¦¦¦¦¦¦  | ¦¦  | ¦¦¦¦¦¦¦\  ¦¦¦¦¦¦\ ¦¦  \  | ¦¦ ¦¦|    \ ¦¦¦¦¦¦¦\  | ¦¦  |  ¦¦¦¦¦¦\ ¦¦    ¦¦     |  ¦¦¦¦¦¦¦ 
  | ¦¦  | ¦¦ ¦¦  | ¦¦ ¦¦ \¦¦¦¦ /    ¦¦   | ¦¦  | ¦¦  | ¦¦ ¦¦    ¦¦ ¦¦¦¦¦  | ¦¦ ¦¦ \¦¦¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦    ¦¦ ¦¦¦¦¦¦¦\      \¦¦    \  
  | ¦¦__/ ¦¦ ¦¦__/ ¦¦ ¦¦__| ¦¦/  ¦¦¦¦_   | ¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦     | ¦¦ ¦¦__| ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦¦¦¦¦¦¦ ¦¦  | ¦¦      _\¦¦¦¦¦¦\ 
  | ¦¦    ¦¦\¦¦    ¦¦\¦¦    ¦¦  ¦¦    \  | ¦¦  | ¦¦  | ¦¦\¦¦     \ ¦¦     | ¦¦\¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦   \¦¦     \ ¦¦  | ¦¦     |       ¦¦ 
   \¦¦¦¦¦¦¦  \¦¦¦¦¦¦  \¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦   \¦¦   \¦¦   \¦¦ \¦¦¦¦¦¦¦\¦¦      \¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦    \¦¦¦¦¦¦¦\¦¦   \¦¦      \¦¦¦¦¦¦¦  

                   ________ ________ __    __      _______  ________  ______  ______  ______  __    __ ________ _______    
                 |        \        \  \  |  \    |       \|        \/      \|      \/      \|  \  |  \        \       \   
                  \¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦    | ¦¦¦¦¦¦¦\ ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\\¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦\ | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦\  
                     /  ¦¦| ¦¦__   | ¦¦¦\| ¦¦    | ¦¦  | ¦¦ ¦¦__   | ¦¦___\¦¦ | ¦¦ | ¦¦ __\¦¦ ¦¦¦\| ¦¦ ¦¦__   | ¦¦__| ¦¦  
                    /  ¦¦ | ¦¦  \  | ¦¦¦¦\ ¦¦    | ¦¦  | ¦¦ ¦¦  \   \¦¦    \  | ¦¦ | ¦¦|    \ ¦¦¦¦\ ¦¦ ¦¦  \  | ¦¦    ¦¦  
                   /  ¦¦  | ¦¦¦¦¦  | ¦¦\¦¦ ¦¦    | ¦¦  | ¦¦ ¦¦¦¦¦   _\¦¦¦¦¦¦\ | ¦¦ | ¦¦ \¦¦¦¦ ¦¦\¦¦ ¦¦ ¦¦¦¦¦  | ¦¦¦¦¦¦¦\  
                  /  ¦¦___| ¦¦_____| ¦¦ \¦¦¦¦    | ¦¦__/ ¦¦ ¦¦_____|  \__| ¦¦_| ¦¦_| ¦¦__| ¦¦ ¦¦ \¦¦¦¦ ¦¦_____| ¦¦  | ¦¦  
                 |  ¦¦    \ ¦¦     \ ¦¦  \¦¦¦    | ¦¦    ¦¦ ¦¦     \\¦¦    ¦¦   ¦¦ \\¦¦    ¦¦ ¦¦  \¦¦¦ ¦¦     \ ¦¦  | ¦¦  
                  \¦¦¦¦¦¦¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦     \¦¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦  


******************** You Created This Script At 01:00:41 On 31/01/2021 Using DoGzTheFiGhTeRs Zen Designer 8 ) ********************

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const uint8 FontSize [][]  = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits []  = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","Zen Designer v1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle []  = {"" , "DoGzDynaPolar Aim"  , "DoGz Polar Boost"  , "DoGz Polar Fine"  , " DoGz Triple V2"  , "Polar Aim Assist"  , "Dam Polar Assist"  , "Polar RadiusBoost"  , "Polar Angle Boost"  , "  DAM Fine Tune"  , "ProgressionAssist"  , " DoGz Aim Assist"  , " Fall Off Assist" , "    Drop Shot"  , "    Jump Shot"  , "    Prone Shot"  , "   Rapid Fire"  , "   SlideCancel"  , "    Auto Ping"  , "   HoldBreath"  , "   Quick Scope"  , "    Fast Melee"  , "LED Rainbow Flow" , "DoGz Dyna Recoil" , "DynaRecoil Inverted" };
const string ModValue []   = {""  , "DoGzDynamicRadius"  , "DoGzDynamic Speed "  , "DynamicSpeedBoost"  , "Dynamic Fine Tune"  , "Polar/Dam Radius"  , "Polar/Dam Angle"  , "Polar/Dam Boost R"  , "Polar/Dam Boost A"  , "DAM Fine Tuning"  , "Polar/Dam AA Rel"  , "Prog Min AA Power"  , "Prog Max AA Power"  , "Prog Inc AA Power"  , "Prog Min AA Wait"  , "Prog Max AA Wait"  , "Prog Inc AA Wait"  , "Prog Release Val"  , "DoGz Min Assist"  , "DoGz Max Assist"  , " DoGz Increment"  , "Falloff RX Assist"  , "Falloff RY Assist"  , "   Falloff Wait"  , "Fall+DoGz Release"  , "  Drop Shot Wait"  , "  Jump Shot Wait"  , " Rapid Fire Hold"  , " Rapid Fire Wait"  , "Scope Delay Time"  , "  Prone  Speed"  , " LED Brightness", "DynaRecoil PowerX", "DynaRecoil PowerY", "Recoil Boost Steps", "Recoil Step Multipy" };
const int16 ModDigitMin [] = {  0  , 1   , 1   , 1   ,  5   , 1   , 5    , 1   , 1   , 1   , 1   , -40 , -40 , 1  , 1     , 1  , 1  , 1  , -40  , 1  , 1  , 1  , 1  , 10  , 1  , 40  , 50  , 30  , 30  , 50  , 20 , 1 , -60 , 1 , 1 , 1};
const int16 ModDigitMax [] = {  0  , 4   , 3   , 3  ,  10   , 50  , 180  , 20  , 80  , 20  , 80  , 40  , 40  , 20  , 100  , 100  , 50  , 80  , 40  , 40  , 20  , 40  , 40  , 150  , 80  , 1500  , 2000  , 1000  , 1000  , 2000  , 250  , 50  ,60 , 99 , 29, 5 };                     
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Toggle Strings                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/

const string DropShotL    = "  Drop Shot Mod";
const string JumpShotL    = "  Jump Shot Mod";
const string FireModL     = " Master Fire Mod";
const string ProneShotL   = " Prone Shot Mod";
const string SlideCancelL = "Slide Cancel Mod";
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Jump     = PS4_CROSS;
define Crouch   = PS4_CIRCLE;
define Melee    = PS4_R3;
define Sprint   = PS4_L3;
define Ping     = PS4_UP;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Toggles                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define DropShotHold     = PS4_L2;
define DropShotPress    = PS4_LEFT;
define JumpShotHold     = PS4_L2;
define JumpShotPress    = PS4_SQUARE;
define FireModHold      = PS4_L2;
define FireModPress     = PS4_UP;
define ProneShotHold    = PS4_L2;
define ProneShotPress   = PS4_DOWN;
define SlideCancelHold  = PS4_L2;
define SlideCancelPress = PS4_RIGHT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(               Recoil On The Fly Buttons            )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define RecoilHoldOnFly  = PS4_CROSS;
define RecoilUpPress    = PS4_UP;
define RecoilDownPress  = PS4_DOWN;
define RecoilRightPress = PS4_RIGHT;
define RecoilLeftPress  = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 24;
define IndexMinValues   = 1;
define IndexMaxValues   = 35;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int LedDec,Rgb,LedInc,Colour[3];
int ToggleT,ToggleTime,ToggleName,Modled,FireMod,JumpShotMod,DropShotMod,ProneShotMod,SlideCancelMod;
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,Speed;
int DoGzVal,DoGzVersion2,TimeDoGz,DoGzPos = 1;
int DoGzi,DoGzs,DoGzb,DoGzf,DoGzy = 20; // **Do Not Touch**
int DoGzYMove,DoGzValY,DoGzSteady,DoGzDRY,DoGzDRX;
define Prf = Off;
define Paf = Off;

int RadiusFlow = Prf;
int AngleFlow  = Paf;
int Pvid;
int RadFlow = On;
int AngFlow = On;
int PX_Out,PY_Out,PAngle_Out,PolAngle,PolFine,PX[2],PY[2];
int Saver,Ms,Sec,Min,ScreenTime;
int TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2;

define ScreenSaver  =  On;
define StandardAHip =  On;
define RapidFireHip =  On;
define RecoilOnFly  =  On;//Set To Off if you Don't want On The Fly Adjustable Recoil
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int DoGzStrength  =  2;  // 1 To 4  (1=10,2=20,3=30,4-40) == Strength
int DoGzSpeed     =  3;  // 1 To 3  (Base Speed On ADS)  (1 = Slowest, 3 = Fastest)
int FineSpeed     =  2;  // 1 To 3  (Speed Boost On FIRE)(1 = Slowest, 3 = Fastest)
int DoGzFined     = 10;  // 5 To 10 (Fine Tune On FIRE)  (5 = Finest, 10 = Largest)
int PolarRadius   = 15;
int PolarAngle    = 20;
int PolarRBoost   =  6;
int PolarABoost   = 10;
int DAMFine       = 10;
int PolarRelease  = 20;
int ProgPowerMin  = -10;
int ProgPowerMax  = 10;
int ProgPowerInc  = 10;
int ProgWaitMin   = 10;
int ProgWaitMax   = 20;
int ProgWaitInc   = 10;
int ProgRelease   = 35;
int DoGzAAMin     = -5;
int DoGzAAMax     =  5;
int DoGzIncrement =  1;
int FalloffAARX   = 22;
int FalloffAARY   = 22;
int FalloffAAWait = 10;
int DoGFallReleae = 70;
int DropShotWait  = 120;
int JumpShotWait  = 50;
int RapidFireHold = 30;
int RapidFireWait = 30;
int ScopeTime     = 350;
int ProneSpeed    = 80;
int LedBrightness = 10;
int DoGzRX        =  0;  //(Fixed Power RX Axis)
int DoGzRY        = 20;  //(Initial Power RY Axis)
int DoGzYMovement = 29;  // 1 To 29 (Value Added/Subtracted From Initial Power Of RY Axis)
int DoGzYStep     =  1;  // Step Multiplier Optional (1,2,3,4 Etc Depending on Power) (Used to Multiply Added Value)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModSwitch;
int DoGz_DynaPolarAssist_V5 = Off;// (DoGzPolar Will NOT work with Recoil)
int DoGzBoost       =  On; //(Speed Boost On FIRE)**(DoGzPolar)**
int DoGzFine        =  On; //(Fine Tune On FIRE)  **(DoGzPolar)**
int DoGzTripleV2    =  On; //(DamPolarAssist,Progression,DoGzAimAssist Settings For Adjustments)(Use This If Using Recoil)
int PolarAimAssist  = Off;
int DamPolarAssist  = Off;
int RadiusBoost     = Off;
int AngleBoost      = Off;
int FineBoost       = Off;
int ProgressionAA   = Off;
int DoGzAimAssist   = Off;
int FallOffAA       = Off;
int DropShot        =  On;
int JumpShot        =  On;
int ProneShot       =  On;
int RapidFire       =  On;
int SlideCancel     =  On;//COD
int AutoPing        = Off;
int HoldBreath      =  On;
int QuickScope      =  On;
int FastMelee       =  On;
int LEDRainbowFlow  =  On;
int DoGz_DynaRecoil_V5 = On; // (DoGzRecoil Will NOT work with DoGzPolar Use The Triple v2)(RUMBLE ON IN GAME FOR FULL BENEFIT)
int InvertedYAxis      = Off;//(Recoil Invert RY Axis)

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    
    	DoGzf = DoGzFined;
    	combo_run(Boot);
    	LedInc = 1
    	Colour = 150;
    	DoGzVal = DoGzAAMin;
    	DoGzDRX = DoGzRX;
    	DoGzDRY = DoGzRY;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	
	block_rumble();
	
		if (!MainMenu) {
	
			if (DropShot && get_ival(DropShotHold) && event_press(DropShotPress)) {
		       Shunt = DropShotPress;
		       DropShotMod = !DropShotMod;
		       ToggleName = On;
		       Toggle(DropShotMod,DropShotL[0]);
		       JumpShotMod = On;
		       ProneShotMod = On;
			}
	
			if (JumpShot && get_ival(JumpShotHold) && event_press(JumpShotPress)) {
		       Shunt = JumpShotPress;
		       JumpShotMod = !JumpShotMod;
		       ToggleName = On;
		       Toggle(JumpShotMod,JumpShotL[0]);
		       DropShotMod = On;
		       ProneShotMod = On;
		   	}
		   
		   	if (ProneShot && get_ival(ProneShotHold) && event_press(ProneShotPress)) {
		       Shunt = ProneShotPress;
		       ProneShotMod = !ProneShotMod;
		       ToggleName = On;
		       Toggle(ProneShotMod,ProneShotL[0]);
		       DropShotMod = On;
		       JumpShotMod = On;
		   	}
		   
		   	if (RapidFire && get_ival(FireModHold) && event_press(FireModPress)) {
		       Shunt = FireModPress;
		       FireMod = !FireMod;
		       ToggleName = On;
		       Toggle(FireMod,FireModL[0]);
		   	}
		
		   	if (SlideCancel && get_ival(SlideCancelHold) && event_press(SlideCancelPress)) {
		       Shunt = SlideCancelPress;
		       SlideCancelMod = !SlideCancelMod;
		       ToggleName = On;
		       Toggle(SlideCancelMod,SlideCancelL[0]);
			}
    }
    
    if (PolarAimAssist) {

        if (get_ival(Ads) && abs(get_ival(RX)) <= PolarRelease && abs(get_ival(RY)) <= PolarRelease) {
            
            if (RadiusBoost && get_ival(Fire)) {
                
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_ival(Fire)) {
                        
                        Angle = PolarAngle + PolarABoost;
                    }
                        else {
                            
                            Angle = PolarAngle;
                        }
                
                set_polar(POLAR_RS,Speed = (Speed + Angle) % 360,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 3 + Radius * 328);
            }
        }

    if (DamPolarAssist || DoGzTripleV2) {

        if (get_ival(Ads) && abs(get_ival(RX)) <= PolarRelease + 10 && abs(get_ival(RY)) <= PolarRelease + 10) {
            
            actual_X = get_ival(RX);
            actual_Y = get_ival(RY);
            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
            max_Magnitude = (actual_Magnitude < 100);

            if (RadiusBoost && get_ival(Fire)) {
                
                Radius = PolarRadius + PolarRBoost;
            }
                
                else {
                    
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_ival(Fire)) {
                        Angle = PolarABoost;
                    }
                        
                        else {
                            
                            Angle = 0;
                        }
                         
                        if ((FineBoost && RadiusBoost && get_ival(Ads) && !get_ival(Fire)) || 
                            (FineBoost && !RadiusBoost && get_ival(Ads) && get_ival(Fire))) {
                        	
                        	PolFine = DAMFine;
                    	}
                        else {
                            
                            PolFine = 0;
                        }
                        
                angle += PolarAngle + Angle;
                angle = angle % 360;
                sin_angle = DamPolar[angle % 360];
                cos_angle = DamPolar[(angle + 270) % 360];
                cos_angle = (cos_angle * Radius) / 100 % PolFine;
                sin_angle = (sin_angle * Radius) / 100 % PolFine;

            if (actual_Magnitude <= 10) { 
                
                sin_angle -= actual_Y; 
                cos_angle -= actual_X; 
            }
                else { 
                    
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                } 

            Set_Val(RX,cos_angle);
            Set_Val(RY,sin_angle); 
        }
    }

	if (DoGz_DynaPolarAssist_V5) {
		
		if (get_ival(Ads) || get_ival(Fire)) {
			
			combo_run(DoGz_DynaPolarAssist_V5);
		}		
			else {
				
				combo_stop(DoGz_DynaPolarAssist_V5);
				DoGzy = 20;
				DoGzi = 0;
			}
					if (DoGzBoost && get_ival(Fire)) 
					
					 	DoGzb = FineSpeed;
						
							else  
							
								DoGzb = 0;
				
					if (DoGzFine && get_ival(Fire))	
					
					  	DoGzf = DoGzFined;
					 
					 		else 
					 	
					 			DoGzf = 0;
	}				

    if (ProgressionAA || DoGzTripleV2) {        
        
        if (get_ival(Ads) && abs(get_ival(RX)) <= ProgRelease && abs(get_ival(RY)) <= ProgRelease) {
           	if (!combo_running(Progression)) { 
            	RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin,ProgPowerMax,ProgPowerInc,RadFlow,1);
            	AngleFlow = PolarFlow(AngleFlow,ProgWaitMin,ProgWaitMax,ProgWaitInc,AngFlow,2);
                
            	combo_run(Progression);
        	}
            
            	else if (abs(get_ival(RX))> ProgRelease || abs(get_ival(RY)) > ProgRelease) {
                
                	combo_stop(Progression);
            }
    	}
    }

    if (DoGzAimAssist || DoGzTripleV2){        
        
        if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
            if (abs(get_ival(RX)) <= DoGFallReleae && abs(get_ival(RY)) <= DoGFallReleae) {
                
                DoGzVersion2 = On;
                DoGzVersion2();
            }
        }
        
        if (event_release(Ads) || event_release(Fire)) {
            DoGzVal = DoGzAAMin
            DoGzVersion2 = Off;
            DoGzPos = On;
        }
    }

        if (FallOffAA){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= DoGFallReleae && abs(get_ival(RY)) <= DoGFallReleae) {
                
                    combo_run(FallOff);
                }
            }
                    else {
                        combo_stop(FallOff);
                    }
        }

    if (!DropShotMod) {
    
        if (DropShot && get_ival(Fire)) {
            combo_run(DropShot);
        }    
            else {
                combo_stop(DropShot);
            }
    
    }

    if (!JumpShotMod) {
    
        if (JumpShot && !get_ival(Ads) && event_press(Fire)) {
            combo_run(JumpShot);
        }    
    }
    
    if (!ProneShotMod) {    
    	
    	if (ProneShot) { 
	    
	    	if(get_ival(Fire) && get_ptime(Fire) > ProneSpeed)  
        	     set_val(Crouch,100);    
    		}
    }
    
    if (!SlideCancelMod) {
    	
    	if (SlideCancel) {                                                                                                  
		
			if (abs(get_ival(LY)) >= 80 || abs(get_ival(LX)) >= 80) {
		  
		  		if(event_release(Crouch))
			   
			   		combo_run(SlideCancel) 
	   		}                                 
    	}   
    }
    
    if (!FireMod) {
    
        if ((RapidFire && !RapidFireHip && get_ival(Ads) && get_ival(Fire)) || (RapidFire && RapidFireHip && get_ival(Fire))) {
            combo_run(RapidFire);
        }    
            else {
                combo_stop(RapidFire);
            }

    }
    
    if (QuickScope) {
	   	
	   	if (event_press(Ads) && get_ptime(Ads) < 140)
  	       	combo_run(QuickScope);
    }
    
    if(HoldBreath) {
	   	
	   	if(get_ival(Ads))
		   	set_val(Sprint,100);
	                      
	   		if(get_ival(LY) <-90 && get_ival(Ads) && get_ptime(Ads) > 200)
	       		combo_stop(CH);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(CH);
	  
	   				if(get_ival(Ads) && get_ival(Sprint)) 
	       				set_val(Sprint, 0);  
	}       
    
	if (AutoPing) {
    	
    	if (get_ival(Fire) && get_ptime(Fire) > 1000)
        	combo_run(AutoPing);
	}
	
	if (FastMelee) {
     	
     	if (get_ival(Melee)) 
			combo_run(FastMelee);
			
	    	if(get_ival(Ads))
				combo_stop(FastMelee);
    }
    
	if (DoGz_DynaRecoil_V5) {
	
		if (get_ival(Ads) && get_ival(Fire)) {
			
			DoGz_DynaRecoil_V5();
		}
			else {
				
				DoGzSteady = 0;
				DoGzYMove  = 0;
			}
	
		if (RecoilOnFly && get_ival(RecoilHoldOnFly)) { 

        	if (event_press(RecoilDownPress)) {
            	DoGzRY += 1;
				combo_run(Rumble);
            }

            	if (event_press(RecoilUpPress)) {
	            	DoGzRY -= 1;
					combo_run(Rumble);
            	}
			
			if (event_press(RecoilRightPress)) {
            	DoGzRX += 1;
				combo_run(Rumble);
            }

            	if (event_press(RecoilLeftPress)) {
	            	DoGzRX -= 1;
					combo_run(Rumble);
            	}
            
			if ((DoGzRY < 1 || DoGzRY > 99)) {
                DoGzRY = DoGzDRY;
            }
			
				if ((DoGzRX < -60 || DoGzRX > 60)) {
                	DoGzRX = DoGzDRX;
            	}
            
            set_val(RecoilUpPress,0); set_val(RecoilDownPress,0);
            set_val(RecoilRightPress,0); set_val(RecoilLeftPress,0);
    	}
    }        
	
	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
				
				DoGzb = DoGzSpeed
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],1,IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	 Saver (); 
	   } 

    if (!MainMenu) { 
        LedFlow();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime) {
        TimeToggle();
    }
	
	if (ProneShot && DropShot && JumpShot && !DropShotMod && !JumpShotMod && !ProneShotMod) {
		
		DropShotMod = On;
    	JumpShotMod = On;
    }
    
    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo Progression {
	
	Set_Val(RY,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RY,RadiusFlow * -1);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow * -1);
	wait(AngleFlow);
}

combo FallOff {

    Set_Val(RY,FalloffAARY);
    Set_Val(RX,FalloffAARX);
    wait(FalloffAAWait);
    Set_Val(RY,FalloffAARY * -1);
    Set_Val(RX,FalloffAARX * -1);
    wait(FalloffAAWait);
}

combo DoGz_DynaPolarAssist_V5 {
    
	if (DoGzi++ > 70) DoGzi = 0;
		if (DoGzy++ > 70) DoGzy = 0;
	
		for (;DoGzs < (DoGzSpeed + DoGzb); DoGzs++) {
			DoGzi++;
			DoGzy++;
		}

		DoGzs = 0;
	
	Set_Val(RY,RYS[DoGzi] * DoGzStrength % DoGzf);
	Set_Val(RX,RYS[DoGzy] * DoGzStrength % DoGzf);
}

combo DropShot {

	set_val(Crouch,100);
	wait(50);
	set_val(Crouch,0);
	wait(20);
	wait(DropShotWait);
}

combo JumpShot {

    set_val(Jump,100);
    wait(70);
    set_val(Jump,0);
    wait(20);
    wait(JumpShotWait);
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo AutoPing {
    
    set_val(Ping,100);
    wait(50);
    wait(10);
    set_val(Ping,100);
    wait(50);
    wait(10);
    wait(3000);
}

combo SlideCancel {              
   
   set_val(Crouch, 100);          
   wait(120);                         
   set_val(Crouch, 0);            
   wait(60);                          
   set_val(Crouch, 100);          
   wait(50);                          
   set_val(Crouch, 100);          
   set_val(Jump, 100);           
   wait(60);                          
   set_val(Crouch, 0);            
   set_val(Jump, 100);          
   wait(10);                        
   set_val(Jump, 0);
}

combo QuickScope {
   
   set_val(Ads,100);
   wait(ScopeTime); 
   set_val(Ads,100);
   set_val(Fire,100);
   wait(40);
   set_val(Ads,100);
   wait(40); 
}

combo CH {
	
	set_val(Sprint,0);
	wait(60);
	set_val(Sprint,100);
	wait(110);
	set_val(Sprint,0);
	wait(110);
}

combo FastMelee {
    
    set_val(Melee,100);
    wait(40);
    set_val(Melee,0);
    wait(30);  
}

combo Rumble {
    
    if (event_press(RecoilUpPress) || event_press(RecoilRightPress))
        set_rumble(RUMBLE_A,35);
        
        else if (event_press(RecoilDownPress) || event_press(RecoilLeftPress))
            set_rumble(RUMBLE_B,70);
    
    	wait(250);
    	reset_rumble();
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

combo VibrateBlink {
    
    if (Modled) {
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,70);
    }    
        else {
            set_rgb(0,255,0);
            set_rumble(RUMBLE_A,35);
        }
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        set_rgb(255,0,0);
    
        else
            set_rgb(0,255,0);

    reset_rumble();
    reset_leds();
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function EditAssist () {

    EditT += get_rtime();
        if (get_ival(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}

function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}

function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
        Pfb += Pv;
    
    if(Pfb <= Pfv)  
        return Pfb;
        
        if(Pfb > Pfv) {
            Pvid[Pid] = Off;
            
            return Pfb - Pv;
        }
    }

    else {
        Pfb -= Pv;    
        
        if(Pfb >= Psv)  
            return Pfb;

            if(Pfb < Psv) {
                Pvid[Pid] = On; 
        
                return Pfb + Pv;
            }
    } 
           return Off;    
}

function DoGz_DynaRecoil_V5 () {
   
	if (!DoGzSteady && DoGzYMove >= DoGzYMovement) DoGzSteady = 1;
	
		else if (DoGzSteady && DoGzYMove <= RYX[0]) DoGzSteady = 0;
	
			if (!DoGzSteady && get_rumble(RUMBLE_A)) {
				DoGzYMove++;
			}
				else if (DoGzSteady && get_rumble(RUMBLE_A)) {
					DoGzYMove--;
				}
			
		DoGzValY = (RYX[DoGzYMove] * DoGzYStep);

	if (InvertedYAxis) { 
		
		Set_Val(RY,(DoGzRY + DoGzValY) * -1);
		Set_Val(RX,DoGzRX);
	}	
		else {
			
			Set_Val(RY,(DoGzRY + DoGzValY));
			Set_Val(RX,DoGzRX);
		}
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function DoGzVersion2() {
    
    TimeDoGz += get_rtime();
    
    if (DoGzVersion2) {
        if (DoGzPos) {
            DoGzVal += DoGzIncrement;
        }
            else {
                DoGzVal -= DoGzIncrement;
            }

        if (DoGzPos && DoGzVal == DoGzAAMax) 
            DoGzPos = Off;

            if (!DoGzPos && DoGzVal == DoGzAAMin)
                DoGzPos = On;

        if (TimeDoGz < 50)
            Set_Val(RX,DoGzVal);
            
            if (TimeDoGz > 50)
                Set_Val(RY,DoGzVal);
        
        if (TimeDoGz == 100) TimeDoGz = 0;
    }
}

function SetPolarVal(Axis,Offset_Val) { 
		
	return clamp(Offset_Val * (100 - abs(get_ival(Axis))) / 100 + get_ival(Axis),-100,100); 
}

function Sin(AngleO) { 
		
	return (Cos(AngleO - 90)); 
}

function Cos(AngleO) {
  	
  	if (AngleO < 0) 
  		AngleO = (AngleO % 360) + 360;
  		
  		AngleO = (AngleO % 360);
		PX_Out = 100;
  		PY_Out = 100;
  		PAngle_Out = AngleO % 45;
	
		if (AngleO < 45) { 
  			PY_Out = (100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 90)  { 
  			PX_Out = (100 * (45 - PAngle_Out)) / 45; 
  		}
  		else if (AngleO < 135) { 
  			PX_Out = (-100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 180) { 
  			PY_Out = (100 * (45 - PAngle_Out)) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 225) {
  			PY_Out = (100 * PAngle_Out) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 270) { 
  			PX_Out = (-100 * (45 - PAngle_Out)) / 45; PY_Out = -100; 
  		}
  		else if (AngleO < 315) { 
  			PX_Out = (100 * PAngle_Out) / 45; PY_Out = -100; 
  		}
  			else { 
  				PY_Out = ( 100 * (45 - PAngle_Out)) / 45; 
  			}
		
			PAngle_Out = abs(PY_Out);
	
			if (abs(PX_Out) > PAngle_Out) PAngle_Out = abs(PX_Out);
				return (PX_Out * PAngle_Out / isqrt((pow(PX_Out, 2) + pow(PY_Out, 2))));
}

function SetPolarValue (Stick,AngleO,RadiusO) {
  		
  	set_val(7 + Stick,(Cos(AngleO) * RadiusO) / 100);
  	set_val(8 + Stick,(Sin(AngleO) * RadiusO) / 100);
 		return;
}

function SetPolar (Stick,AngleO,Width,Height) {
  		
  	SetPolarValue(Stick,AngleO,Width);
  	PX[Stick/4] = get_val(Stick + 7);
  	SetPolarValue(Stick, AngleO,Height);
  	PY[Stick/4] = get_val(Stick + 8);
  	set_val(Stick + 7,SetPolarVal(Stick + 7,PX[Stick/4]));
  	set_val(Stick + 8,SetPolarVal(Stick + 8,PY[Stick/4]));
}

function Toggle(ModT,ModP) {
    
    Modled = ModT;
    ToggleT = 0;
    ToggleTime = On;
    combo_run(VibrateBlink);
    
    if (ToggleName) {
        Saver = 0;
        cls_oled(0);
        printf(5,2,0,1,MiscString[8]);
        rect_oled(0,11,128,20,0,1);    
        rect_oled(2,13,124,16,0,1);
        rect_oled(0,32,128,20,0,1);
        rect_oled(2,34,124,16,0,1);
        printf(5,17,0,1,ModP);

        if (ModT) {
            printf(36,38,0,1,MiscString[7]);    
        }
            else {
                printf(41,38,0,1,MiscString[6]);
            }
                ToggleName = Off;
    }
}

function TimeToggle() {
        
    ToggleT += get_rtime();
    
        if (ToggleT >= 3500) {
            cls_oled(0);
            ToggleTime = Off;
            ToggleT = 0;
    }
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;

            if (ModVal >= ModValMax){ 
                ModMonitor(ModValLbl);
                    return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;

				if (ModVal <= ModValMin){
					ModMonitor(ModValLbl);
						return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 

function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
       
		DoGzTripleV2    = Off;
 		PolarAimAssist  = Off;
 		DamPolarAssist  = Off;
		ProgressionAA   = Off;
		DoGzAimAssist   = Off;
		FallOffAA       = Off;
    }
        if (Mon == ModToggle[4]) { 
            
            DoGz_DynaPolarAssist_V5 = Off;
            PolarAimAssist  = Off;
            FallOffAA       = Off;
            DamPolarAssist  =  On;
            ProgressionAA   =  On;
            DoGzAimAssist   =  On;
        }
        	
        	if (Mon == ModToggle[24]) { 
            
            	DoGz_DynaPolarAssist_V5 = Off;
            }
}

function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const int16 RYS [] = {-10,-10,-10,-10, -9, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9,10,10,10,10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 5, 4, 3, 2, 1, 0,-1,-2,-3,-4,-5,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-9};                                                                                                                               
const int16 RYX [] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};