//  Version:        V1
// Developer:            RAVEX
// Special thanks to:    Everyone who purchases

//Aim Assist - Always on
int AimAssist = TRUE;

//DROPSHOT
int Dropshot       = TRUE;

//Aim Abuse - L2/LT + LEFT
int  AimAbuse = TRUE;

//Anti Recoil - Always on
int AntiRecoil     = FALSE;

//AIM ABUSE VALUES
int AimAbuse_HOLD = 250; //How long you HOLD ADS Button
int AimAbuse_RELEASE = 25;//How long you release ADS Button

//AIM ASSIST VALUES
int shake = 0;

//ANTI RECOIL VALUES
int antirecoil
int antirecoilA      = 13;
int antirecoilB      = 20;
int delayA           = 14; 

//AIM ASSIST KILLZONE
int value  = 22;
int value2 =-22;
int delay  = 21;

//GHOST PEEK - ADS_LB
int GhostPeek = TRUE;
int GhostPeek_R = 111;

//Layout
define FIRE_BTN = 4; //XB1_RB //PS4_R2
define ADS_BTN = 7; //XB1_LB //PS4_L2
define CROUCH_BTN = 5; //XB1_RS //PS4_R3
define RELOAD_BTN = 20; //XB1_X //PS4_SQAURE
define SPRINT_BTN = 8; //XB1_LS //PS4_L3
define JUMP_BTN = 19; //XB1_A  //PS4_CROSS
define NEXT_PIECE = 3; //XB1_RT //PS4_R1
define RIGHT_BUMP = 3; // XB1_RB //PS4_R1
define LEFT_BUMP = 6; //ADS_BTN //PS4_L1
define SWAP_BTN = 17; //XB1_Y  //PS4_TRIANGLe
define BUILD_BTN = 18; //XB1_B  //PS4_CIRCLE
define R_X = 9; //XB1_R_X //PS4_R_X
define R_Y = 10; //XB1_R_Y //PS4_R_Y
define L_X = 11; //XB1_L_X //PS4_L_X
define L_Y = 12; //XB1_L_Y //PS4_L_Y
define UP = 13; //XB1_UP //PS4_UP
define DOWN = 14; //XB1_DOWN //PS4_DOWN
define LEFT = 15; //XB1_LEFT //PS4_LEFT
define RIGHT = 16; //XB1_RIGHT //PS4_RIGHT


 main {
//AIM ASSIST
 if (get_val(ADS_BTN) > 95) combo_run(AimAbuse);
 if (event_release(ADS_BTN) && combo_running(AimAbuse)) combo_stop(AimAbuse);
    
 if (get_val(ADS_BTN) > 95) combo_run(AimAssist);
 if (event_release(ADS_BTN) && combo_running(AimAssist)) combo_stop(AimAssist);
    
 if (abs(get_val(R_X)) > 100 - shake || abs(get_val(R_Y)) > 100 - shake){ 
 combo_stop(AimAssist);}
	
 if(get_val(FIRE_BTN))
 set_val(FIRE_BTN, 100);

//HOLD BUTTON FOR TOGGLE
 if(get_val(ADS_BTN)) {

}
//AIM ASSIST TAP BUTON TO TOGGLE   
 if (event_press(LEFT)){
 AimAbuse =! AimAbuse; 
}

//AIM ABUSE     
 if(AimAbuse){
 if(get_val(ADS_BTN)> 95){
 combo_run(AimAbuse);}
 if(event_release(ADS_BTN)){ combo_stop(AimAbuse);
}
}
 if(AimAbuse){
 if(get_val(ADS_BTN) && get_val(RELOAD_BTN)){
 combo_stop (AimAbuse);
 }
 }




//BHOP
if(get_val(JUMP_BTN) && get_val(RELOAD_BTN)){
 combo_run (Bhop)
}




//ANTI-RECOIL      
 if(AntiRecoil){
 if(get_val(ADS_BTN) && get_val(FIRE_BTN)){combo_run(Antirecoil);}
 if(get_rumble(RUMBLE_A) <= 50){antirecoil = antirecoilA;}
 if(get_rumble(RUMBLE_A) > 50){antirecoil = antirecoilB;}
 if(abs(get_val(R_Y)) >= antirecoil+ 10){combo_stop(Antirecoil);
}
}


//DROPSHOT
 if(get_val(FIRE_BTN) && get_val(RELOAD_BTN)){
 combo_run (Dropshot);
}


//GHOSTPEEK
 if (GhostPeek) { 
 if (get_val(ADS_BTN)) {if (get_val(LEFT_BUMP)) {
 combo_run(GhostPeek); }
 set_val(LEFT_BUMP, 0);
}
}
}

combo AimAssist {
set_val(R_X, get_val(R_X) + shake * -1); wait(10)
set_val(R_X, get_val(R_X) + shake); wait(10)
set_val(R_X, get_val(R_X) + shake); wait(10)
set_val(R_X, get_val(R_X) + shake * -1); wait(10)

}

combo Bhop {               
wait(10);
set_val(JUMP_BTN, 100);
wait(10);
set_val(JUMP_BTN, 0);
wait(10);
}
            


combo Dropshot{
set_val(CROUCH_BTN,100); wait(40);
wait(140);
set_val(CROUCH_BTN,100);
}

combo AimAbuse {
set_val(ADS_BTN, 100);
wait(AimAbuse_HOLD);
set_val(ADS_BTN, 0);
wait(AimAbuse_RELEASE);
}

combo Antirecoil {
set_val(R_Y, antirecoil);
wait(delayA);
set_val(R_Y, antirecoil);
wait(delayA);
}

combo GhostPeek {
set_val(CROUCH_BTN, 100);
wait(25); wait(25);
set_val(FIRE_BTN, 100);
wait(25); wait(25);
set_val(CROUCH_BTN, 100);
wait(25); wait(GhostPeek_R);
}