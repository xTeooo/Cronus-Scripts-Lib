/*
   _______            ______           ________ __                ________ __  ______  __       ________          _______     __           
  |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \   |  \          
  | ¦¦¦¦¦¦¦\ ______ |  ¦¦¦¦¦¦\________ \¦¦¦¦¦¦¦¦ ¦¦____   ______ | ¦¦¦¦¦¦¦¦\¦¦  ¦¦¦¦¦¦\ ¦¦____  \¦¦¦¦¦¦¦¦ ______ | ¦¦¦¦¦¦¦\  | ¦¦ _______  
  | ¦¦  | ¦¦/      \| ¦¦ __\¦¦        \  | ¦¦  | ¦¦    \ /      \| ¦¦__   |  \ ¦¦ __\¦¦ ¦¦    \   | ¦¦   /      \| ¦¦__| ¦¦   \¦ /       \ 
  | ¦¦  | ¦¦  ¦¦¦¦¦¦\ ¦¦|    \\¦¦¦¦¦¦¦¦  | ¦¦  | ¦¦¦¦¦¦¦\  ¦¦¦¦¦¦\ ¦¦  \  | ¦¦ ¦¦|    \ ¦¦¦¦¦¦¦\  | ¦¦  |  ¦¦¦¦¦¦\ ¦¦    ¦¦     |  ¦¦¦¦¦¦¦ 
  | ¦¦  | ¦¦ ¦¦  | ¦¦ ¦¦ \¦¦¦¦ /    ¦¦   | ¦¦  | ¦¦  | ¦¦ ¦¦    ¦¦ ¦¦¦¦¦  | ¦¦ ¦¦ \¦¦¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦    ¦¦ ¦¦¦¦¦¦¦\      \¦¦    \  
  | ¦¦__/ ¦¦ ¦¦__/ ¦¦ ¦¦__| ¦¦/  ¦¦¦¦_   | ¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦     | ¦¦ ¦¦__| ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦¦¦¦¦¦¦ ¦¦  | ¦¦      _\¦¦¦¦¦¦\ 
  | ¦¦    ¦¦\¦¦    ¦¦\¦¦    ¦¦  ¦¦    \  | ¦¦  | ¦¦  | ¦¦\¦¦     \ ¦¦     | ¦¦\¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦   \¦¦     \ ¦¦  | ¦¦     |       ¦¦ 
   \¦¦¦¦¦¦¦  \¦¦¦¦¦¦  \¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦   \¦¦   \¦¦   \¦¦ \¦¦¦¦¦¦¦\¦¦      \¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦    \¦¦¦¦¦¦¦\¦¦   \¦¦      \¦¦¦¦¦¦¦  

                                 ________  ______  _______  ________ __    __ ______ ________ ________  
                                |        \/      \|       \|        \  \  |  \      \        \        \ 
                                | ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦¦¦¦¦¦\\¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦\¦¦¦¦¦¦\¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ 
                                | ¦¦__   | ¦¦  | ¦¦ ¦¦__| ¦¦  | ¦¦  | ¦¦¦\| ¦¦ | ¦¦    | ¦¦  | ¦¦__     
                                | ¦¦  \  | ¦¦  | ¦¦ ¦¦    ¦¦  | ¦¦  | ¦¦¦¦\ ¦¦ | ¦¦    | ¦¦  | ¦¦  \    
                                | ¦¦¦¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦\  | ¦¦  | ¦¦\¦¦ ¦¦ | ¦¦    | ¦¦  | ¦¦¦¦¦    
                                | ¦¦     | ¦¦__/ ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦ \¦¦¦¦_| ¦¦_   | ¦¦  | ¦¦_____  
                                | ¦¦      \¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦  \¦¦¦   ¦¦ \  | ¦¦  | ¦¦     \ 
                                 \¦¦       \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦   \¦¦   \¦¦\¦¦¦¦¦¦   \¦¦   \¦¦¦¦¦¦¦¦ 

                  ________ ________ __    __      _______  ________  ______  ______  ______  __    __ ________ _______    
                 |        \        \  \  |  \    |       \|        \/      \|      \/      \|  \  |  \        \       \   
                  \¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦    | ¦¦¦¦¦¦¦\ ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\\¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦\ | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦\  
                     /  ¦¦| ¦¦__   | ¦¦¦\| ¦¦    | ¦¦  | ¦¦ ¦¦__   | ¦¦___\¦¦ | ¦¦ | ¦¦ __\¦¦ ¦¦¦\| ¦¦ ¦¦__   | ¦¦__| ¦¦  
                    /  ¦¦ | ¦¦  \  | ¦¦¦¦\ ¦¦    | ¦¦  | ¦¦ ¦¦  \   \¦¦    \  | ¦¦ | ¦¦|    \ ¦¦¦¦\ ¦¦ ¦¦  \  | ¦¦    ¦¦  
                   /  ¦¦  | ¦¦¦¦¦  | ¦¦\¦¦ ¦¦    | ¦¦  | ¦¦ ¦¦¦¦¦   _\¦¦¦¦¦¦\ | ¦¦ | ¦¦ \¦¦¦¦ ¦¦\¦¦ ¦¦ ¦¦¦¦¦  | ¦¦¦¦¦¦¦\  
                  /  ¦¦___| ¦¦_____| ¦¦ \¦¦¦¦    | ¦¦__/ ¦¦ ¦¦_____|  \__| ¦¦_| ¦¦_| ¦¦__| ¦¦ ¦¦ \¦¦¦¦ ¦¦_____| ¦¦  | ¦¦  
                 |  ¦¦    \ ¦¦     \ ¦¦  \¦¦¦    | ¦¦    ¦¦ ¦¦     \\¦¦    ¦¦   ¦¦ \\¦¦    ¦¦ ¦¦  \¦¦¦ ¦¦     \ ¦¦  | ¦¦  
                  \¦¦¦¦¦¦¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦     \¦¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦  


******************** You Created This Script At 10:01:34 On 30/07/2021 Using DoGzTheFiGhTeRs Fortnite Zen Designer 8 ) ********************

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","Zen Designer v1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {""  , "Elippse Polar Aim" , "ElippseInvertTime" , "LED Rainbow Flow" };
const string ModValue [] = {""   , "Elippse Radius RX" , "Elippse Radius RY"  , "Elippse Angle Low"  , "Elippse AngleHigh"  , "Inverted Time Ms" , "Elippse Release" , " LED Brightness" };
const int16 ModDigitMin [] = {  0  , 1  , 1  , 1   , 1   , 1000 , 1  , 1 };
const int16 ModDigitMax [] = {  0  , 50 , 50 , 359 , 359 , 5000 , 80 , 50};


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 1;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 3;
define IndexMinValues   = 1;
define IndexMaxValues   = 7;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int LedDec,Rgb,LedInc,Colour[3];
int PX_Out,PY_Out,PAngle_Out,PX[2],PY[2];
int AngleInvert,EllipseInvert,EllipseAngle,TimeEP;
int Saver,Ms,Sec,Min,ScreenTime;
int TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2;

define ScreenSaver  = On;
define PolarProgHip = On;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int EllipseRadRX  = 10;
int EllipseRadRY  = 25;
int EllipseAngLow = 8;
int EllipseAngHig = 341;
int EllipseInverTime = 4000;
int Release       = 50;
int LedBrightness = 10;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModSwitch;
int EllipsePolarAim = On;
int InvertElippse   = On;
int LEDRainbowFlow  = On;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    combo_run(Boot);
    LedInc = 1
    Colour = 150;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {


    if (EllipsePolarAim) {
            
        if ((get_ival(Ads)) || (get_ival(Fire) && PolarProgHip)) {
            TimeEP += get_rtime();
            
            if (abs(get_ival(RX)) <= Release && abs(get_ival(RY)) <= Release) {
                
                
                if (InvertElippse) {
                	
                	if (TimeEP >= EllipseInverTime) {
                    	EllipseInvert = !EllipseInvert;
                    	TimeEP = Off;
                	}
                    
                        if (EllipseInvert) {
                              AngleInvert = EllipseAngHig;
                          }
                              else {
                                  AngleInvert = Off;
                              }
           		}
                
                else {
                	AngleInvert = Off;
                }
                
                  EllipseAngle = (EllipseAngle + EllipseAngLow + AngleInvert) % 360;
                  SetPolar(POLAR_RS,EllipseAngle,EllipseRadRX,EllipseRadRY);
             }
          }
      }

	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		Shunt = MenuEnterPress;
		MenuToggle(On,On,On,On,Off);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(ChangeMenuPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				if (event_press(MenuExitPress))
				
					Shunt = MenuExitPress;
					
				MenuToggle(Off,Off,Off,Off,Off);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],1,IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	Saver (); 
	} 

    if (!MainMenu && LEDRainbowFlow) { 
        LedFlow();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function SetPolarVal(Axis,Offset_Val) { 
		
	return clamp(Offset_Val * (100 - abs(get_ival(Axis))) / 100 + get_ival(Axis),-100,100); 
}

function Sin(AngleO) { 
		
	return (Cos(AngleO - 90)); 
}

function Cos(AngleO) {
  	
  	if (AngleO < 0) 
  		AngleO = (AngleO % 360) + 360;
  		
  		AngleO = (AngleO % 360);
		PX_Out = 100;
  		PY_Out = 100;
  		PAngle_Out = AngleO % 45;
	
		if (AngleO < 45) { 
  			PY_Out = (100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 90)  { 
  			PX_Out = (100 * (45 - PAngle_Out)) / 45; 
  		}
  		else if (AngleO < 135) { 
  			PX_Out = (-100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 180) { 
  			PY_Out = (100 * (45 - PAngle_Out)) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 225) {
  			PY_Out = (100 * PAngle_Out) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 270) { 
  			PX_Out = (-100 * (45 - PAngle_Out)) / 45; PY_Out = -100; 
  		}
  		else if (AngleO < 315) { 
  			PX_Out = (100 * PAngle_Out) / 45; PY_Out = -100; 
  		}
  			else { 
  				PY_Out = ( 100 * (45 - PAngle_Out)) / 45; 
  			}
		
			PAngle_Out = abs(PY_Out);
	
			if (abs(PX_Out) > PAngle_Out) PAngle_Out = abs(PX_Out);
				return (PX_Out * PAngle_Out / isqrt((pow(PX_Out, 2) + pow(PY_Out, 2))));
}

function SetPolarValue (Stick,AngleO,RadiusO) {
  		
  	set_val(7 + Stick,(Cos(AngleO) * RadiusO) / 100);
  	set_val(8 + Stick,(Sin(AngleO) * RadiusO) / 100);
 		return;
}

function SetPolar (Stick,AngleO,Width,Height) {
  		
  	SetPolarValue(Stick,AngleO,Width);
  	PX[Stick/4] = get_val(Stick + 7);
  	SetPolarValue(Stick, AngleO,Height);
  	PY[Stick/4] = get_val(Stick + 8);
  	set_val(Stick + 7,SetPolarVal(Stick + 7,PX[Stick/4]));
  	set_val(Stick + 8,SetPolarVal(Stick + 8,PY[Stick/4]));
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;

            if (ModVal >= ModValMax){ 
                return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;

				if (ModVal <= ModValMin){
					return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
   
function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };