/*
   _______            ______           ________ __                ________ __  ______  __       ________          _______     __           
  |       \          /      \         |        \  \              |        \  \/      \|  \     |        \        |       \   |  \          
  | ¦¦¦¦¦¦¦\ ______ |  ¦¦¦¦¦¦\________ \¦¦¦¦¦¦¦¦ ¦¦____   ______ | ¦¦¦¦¦¦¦¦\¦¦  ¦¦¦¦¦¦\ ¦¦____  \¦¦¦¦¦¦¦¦ ______ | ¦¦¦¦¦¦¦\  | ¦¦ _______  
  | ¦¦  | ¦¦/      \| ¦¦ __\¦¦        \  | ¦¦  | ¦¦    \ /      \| ¦¦__   |  \ ¦¦ __\¦¦ ¦¦    \   | ¦¦   /      \| ¦¦__| ¦¦   \¦ /       \ 
  | ¦¦  | ¦¦  ¦¦¦¦¦¦\ ¦¦|    \\¦¦¦¦¦¦¦¦  | ¦¦  | ¦¦¦¦¦¦¦\  ¦¦¦¦¦¦\ ¦¦  \  | ¦¦ ¦¦|    \ ¦¦¦¦¦¦¦\  | ¦¦  |  ¦¦¦¦¦¦\ ¦¦    ¦¦     |  ¦¦¦¦¦¦¦ 
  | ¦¦  | ¦¦ ¦¦  | ¦¦ ¦¦ \¦¦¦¦ /    ¦¦   | ¦¦  | ¦¦  | ¦¦ ¦¦    ¦¦ ¦¦¦¦¦  | ¦¦ ¦¦ \¦¦¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦    ¦¦ ¦¦¦¦¦¦¦\      \¦¦    \  
  | ¦¦__/ ¦¦ ¦¦__/ ¦¦ ¦¦__| ¦¦/  ¦¦¦¦_   | ¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦     | ¦¦ ¦¦__| ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦¦¦¦¦¦¦ ¦¦  | ¦¦      _\¦¦¦¦¦¦\ 
  | ¦¦    ¦¦\¦¦    ¦¦\¦¦    ¦¦  ¦¦    \  | ¦¦  | ¦¦  | ¦¦\¦¦     \ ¦¦     | ¦¦\¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦   \¦¦     \ ¦¦  | ¦¦     |       ¦¦ 
   \¦¦¦¦¦¦¦  \¦¦¦¦¦¦  \¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦   \¦¦   \¦¦   \¦¦ \¦¦¦¦¦¦¦\¦¦      \¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦    \¦¦¦¦¦¦¦\¦¦   \¦¦      \¦¦¦¦¦¦¦  

                                 ________  ______  _______  ________ __    __ ______ ________ ________  
                                |        \/      \|       \|        \  \  |  \      \        \        \ 
                                | ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦¦¦¦¦¦\\¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦\¦¦¦¦¦¦\¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ 
                                | ¦¦__   | ¦¦  | ¦¦ ¦¦__| ¦¦  | ¦¦  | ¦¦¦\| ¦¦ | ¦¦    | ¦¦  | ¦¦__     
                                | ¦¦  \  | ¦¦  | ¦¦ ¦¦    ¦¦  | ¦¦  | ¦¦¦¦\ ¦¦ | ¦¦    | ¦¦  | ¦¦  \    
                                | ¦¦¦¦¦  | ¦¦  | ¦¦ ¦¦¦¦¦¦¦\  | ¦¦  | ¦¦\¦¦ ¦¦ | ¦¦    | ¦¦  | ¦¦¦¦¦    
                                | ¦¦     | ¦¦__/ ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦ \¦¦¦¦_| ¦¦_   | ¦¦  | ¦¦_____  
                                | ¦¦      \¦¦    ¦¦ ¦¦  | ¦¦  | ¦¦  | ¦¦  \¦¦¦   ¦¦ \  | ¦¦  | ¦¦     \ 
                                 \¦¦       \¦¦¦¦¦¦ \¦¦   \¦¦   \¦¦   \¦¦   \¦¦\¦¦¦¦¦¦   \¦¦   \¦¦¦¦¦¦¦¦ 

                  ________ ________ __    __      _______  ________  ______  ______  ______  __    __ ________ _______    
                 |        \        \  \  |  \    |       \|        \/      \|      \/      \|  \  |  \        \       \   
                  \¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦¦ ¦¦\ | ¦¦    | ¦¦¦¦¦¦¦\ ¦¦¦¦¦¦¦¦  ¦¦¦¦¦¦\\¦¦¦¦¦¦  ¦¦¦¦¦¦\ ¦¦\ | ¦¦ ¦¦¦¦¦¦¦¦ ¦¦¦¦¦¦¦\  
                     /  ¦¦| ¦¦__   | ¦¦¦\| ¦¦    | ¦¦  | ¦¦ ¦¦__   | ¦¦___\¦¦ | ¦¦ | ¦¦ __\¦¦ ¦¦¦\| ¦¦ ¦¦__   | ¦¦__| ¦¦  
                    /  ¦¦ | ¦¦  \  | ¦¦¦¦\ ¦¦    | ¦¦  | ¦¦ ¦¦  \   \¦¦    \  | ¦¦ | ¦¦|    \ ¦¦¦¦\ ¦¦ ¦¦  \  | ¦¦    ¦¦  
                   /  ¦¦  | ¦¦¦¦¦  | ¦¦\¦¦ ¦¦    | ¦¦  | ¦¦ ¦¦¦¦¦   _\¦¦¦¦¦¦\ | ¦¦ | ¦¦ \¦¦¦¦ ¦¦\¦¦ ¦¦ ¦¦¦¦¦  | ¦¦¦¦¦¦¦\  
                  /  ¦¦___| ¦¦_____| ¦¦ \¦¦¦¦    | ¦¦__/ ¦¦ ¦¦_____|  \__| ¦¦_| ¦¦_| ¦¦__| ¦¦ ¦¦ \¦¦¦¦ ¦¦_____| ¦¦  | ¦¦  
                 |  ¦¦    \ ¦¦     \ ¦¦  \¦¦¦    | ¦¦    ¦¦ ¦¦     \\¦¦    ¦¦   ¦¦ \\¦¦    ¦¦ ¦¦  \¦¦¦ ¦¦     \ ¦¦  | ¦¦  
                  \¦¦¦¦¦¦¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦     \¦¦¦¦¦¦¦ \¦¦¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦¦¦¦¦ \¦¦   \¦¦\¦¦¦¦¦¦¦¦\¦¦   \¦¦  


******************** You Created This Script At 12:55:41 On 16/06/2021 Using DoGzTheFiGhTeRs Fortnite Zen Designer 8 ) ********************

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                   Menu Arrays                      )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
const uint8 FontSize [][] = {{ 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 }};
const uint8 FontDigits [] = {48,49,50,51,52,53,54,55,56,57};
const string MiscString [] = {"MOD","ON","OFF","DoGzTheFiGhTeR's","Zen Designer v1.0","GPC Slot:","Enabled","Disabled","Mod Toggle On/Off"};
const string ModToggle [] = {"" , "Polar Aim Assist"  , "Dam Polar Assist"  , "Polar RadiusBoost"  , "Polar Angle Boost"  , "Polar Progression"  , "Polar DynamicProg"  , "Elippse Polar Aim"  , "Dynamic Polar Aim"  , "ProgressionAssist"  , " DoGz Aim Assist"  , " Fall Off Assist"  , "Batts Sticky Aim"  , "Legacy Aim Assist"  , "Instant EditReset"  , "    Fast Reset"  , "   Build Track"  , "LED Rainbow Flow" };
const string ModValue [] = {""   , "Polar/Dam Radius"  , "Polar/Dam Angle"  , "Polar/Dam Boost R"  , "Polar/Dam Boost A"  , "Polar/Dam AA Rel"  , "Polar Radius Min"  , "Polar Radius Max"  , "Polar Radius Inc"  , "Polar Angle Min"  , "Polar Angle Max"  , "Polar Angle Inc"  , "Elippse Radius RX"  , "Elippse Radius RY"  , "Elippse Angle Low"  , "Elippse AngleHigh"  , "Dynamic Radius RX"  , "Dynamic Radius RY"  , "DynamicPolarAngle"  , "PolarProgDyna Rel"  , "Prog Min AA Power"  , "Prog Max AA Power"  , "Prog Inc AA Power"  , "Prog Min AA Wait"  , "Prog Max AA Wait"  , "Prog Inc AA Wait"  , "Prog Release Val"  , "DoGz Min Assist"  , "DoGz Max Assist"  , " DoGz Increment"  , "Falloff RX Assist"  , "Falloff RY Assist"  , "   Falloff Wait"  , "Fall+DoGz Release"  , " Batts RX Assist"  , " Batts RY Assist"  , "Batts Sticky Wait"  , "Legacy RX Assist"  , "Legacy RY Assist"  , "   Legacy Wait"  , "Legy+BattsRelease"  , " Edit Hold Time"  , "BuildTrackSynTime" , " LED Brightness" };
const int16 ModDigitMin [] = {  0  , 1   , 5   , 1  , 1  , 1  , 1  , 1  , 1  , -360 , -360 , 5   , 1  , 1  , 0   , 0   , 1  , 1  , 1  , 1  , -40 , -40 , 1  , 1   , 1   , 1  , 1   , -40 , 1  , 1  , 1  , 1  , 10  , 1  , 1  , 1  , 10  , 1  , 1  , 10  , 1  , 100  , 1000  , 1 };
const int16 ModDigitMax [] = {  0  , 50  , 180 , 20 , 80 , 80 , 50 , 50 , 20 ,  360 , 360  , 180 , 50 , 50 , 360 , 360 , 50 , 50 , 50 , 80 ,  40 ,  40 , 20 , 100 , 100 , 50 , 80  , 40  , 40 , 20 , 40 , 40 , 150 , 80 , 40 , 40 , 150 , 40 , 40 , 150 , 80 , 200  , 9000  , 50 };


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define Fire     = PS4_R2;
define Ads      = PS4_L2;
define N_Weapon = PS4_R1;
define P_Weapon = PS4_L1;
define Pickaxe  = PS4_TRIANGLE;
define Reload   = PS4_SQUARE;
define Jump     = PS4_CROSS;
define Crouch   = PS4_R3;
define Ping     = PS4_RIGHT;
define Edit     = PS4_TOUCH;
define Select   = PS4_R2;
define Confirm  = PS4_CIRCLE;
define Reset    = PS4_R3;
define Build    = PS4_CIRCLE;
define Switch   = PS4_LEFT;
define Wall     = PS4_R2;
define Floor    = PS4_R1;
define Ramp     = PS4_L2;
define Roof     = PS4_L1;
define Up       = PS4_UP;
define Down     = PS4_DOWN;
define Left     = PS4_LEFT;
define Right    = PS4_RIGHT;
define RX       = PS4_RX;
define RY       = PS4_RY;
define LX       = PS4_LX;
define LY       = PS4_LY;
define On       = TRUE;
define Off      = FALSE;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Mod Buttons                     )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define EditAssist    = PS4_SHARE;
define FastReset     = PS4_RIGHT;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Menu Buttons                    )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define MenuEnterHold   = PS4_L2;
define MenuEnterPress  = PS4_OPTIONS;
define MenuExitPress   = PS4_TRIANGLE;
define ChangeMenuPress = PS4_CROSS;
define FindSlotHold    = PS4_R3;
define FindSlotPress   = PS4_LEFT;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                 Script Variables                   )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define TimeoutLimit  = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 17;
define IndexMinValues   = 1;
define IndexMaxValues   = 43;

int Position,Update,MenuTimeout,Count,MainMenu,ModIndex,MenuValues,MenuSwitch,NumX,NumY,NumS,Clear,Shunt;
int Number = 1,Slot = 20000;

int ScrollTime,ScrollWait,ScrollLine,ScrollIndex,ScrollChar;
int ScrollSpeed =  70;
int ScrollDelay = 950;
int ScrollX     =   8;
int ScrollY     =  50;

int LedDec,Rgb,LedInc,Colour[3];
int angle,cos_angle,sin_angle,actual_X,actual_Y,actual_Magnitude,max_Magnitude,Radius,Angle,Speed;
int DoGzVal,DoGzVersion2,TimeDoGz,DoGzPos = 1;
int Edit1,Edit2;
int BuildTrack,BuildCount;
int ProgDynaRadius,ProgDynaAngle,ProgRY,ProgRX;
define Prf = Off;
define Paf = Off;

int RadiusFlow = Prf;
int AngleFlow  = Paf;
int Pvid;
int RadFlow = On;
int AngFlow = On;
int PX_Out,PY_Out,PAngle_Out,PolAngle,PX[2],PY[2];
define EllipseInverTime = 2000;
int AngleInvert,EllipseInvert,EllipseAngle,TimeEP;
int Saver,Ms,Sec,Min,ScreenTime;
int TimeL,TimerP,TimerE,Length,X_POS1,Y_POS1,X_POS2,Y_POS2,Steps1,Steps2,XorY1,XorY2,Dir1,Dir2;

define EditHold     = Off;
define ScreenSaver  =  On;
define PolarProgHip =  On;
define StandardAHip =  On;


/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModDigit;
int PolarRadius   = 15;
int PolarAngle    = 20;
int PolarRBoost   = 6;
int PolarABoost   = 10;
int PolarRelease  = 20;
int PolarProgMinR = 10;
int PolarProgMaxR = 25;
int PolarProgIncR = 1;
int PolarProgMinA = -200;
int PolarProgMaxA = 200;
int PolarProgIncA = 30;
int EllipseRadRX  = 10;
int EllipseRadRY  = 25;
int EllipseAngLow = 8;
int EllipseAngHig = 344;
int DynamicRadRX  = 10;
int DynamicRadRY  = 25;
int DynamicAngle  = 10;
int PolarProgRel  = 20;
int ProgPowerMin  = -15;
int ProgPowerMax  = 15;
int ProgPowerInc  = 1;
int ProgWaitMin   = 1;
int ProgWaitMax   = 2;
int ProgWaitInc   = 1;
int ProgRelease   = 20;
int DoGzAAMin     = -8;
int DoGzAAMax     = 8;
int DoGzIncrement = 1;
int FalloffAARX   = 22;
int FalloffAARY   = 22;
int FalloffAAWait = 10;
int DoGFallReleae = 20;
int BattsAARX     = 20;
int BattsAARY     = 20;
int BattsAAWait   = 10;
int LegacyAARX    = 18;
int LegacyAARY    = 18;
int LegacyAASWait = 10;
int LegacyBattRel = 20;
int EditHoldTime  = 130;
int BuildSyncTime = 4000;
int LedBrightness = 10;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int ModSwitch;
int PolarAimAssist  =  On;
int DamPolarAssist  = Off;
int RadiusBoost     =  On;
int AngleBoost      =  On;
int PolarProgAssist = Off;
int DynaPolarProgAA = Off;
int EllipsePolarAim = Off;
int DynamicPolarAim = Off;
int ProgressionAA   = Off;
int DoGzAimAssist   = Off;
int FallOffAA       = Off;
int BattsStickyAA   = Off;
int LegacyAssist    = Off;
int InstaEditReset  =  On;
int InstaFastReset  =  On;
int BuildTracker    =  On;
int LEDRainbowFlow  =  On;

int PSonXBOX = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Init                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

init {
    combo_run(Boot);
    LedInc = 1
    Colour = 150;
    DoGzVal = DoGzAAMin;
}

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

main {
	
	if (PSonXBOX && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {    
        swap (PS4_TOUCH,PS4_SHARE);
    }
    
    if (InstaFastReset && !get_ival(Ads) && event_press(FastReset)) { 
        Shunt = FastReset;
        combo_run(FastReset);
    }

    if (InstaEditReset) {
        if (EditHold && get_ival(Edit) && get_ptime(Edit) > EditHoldTime || !EditHold && event_press(Edit)) {
                Edit1 = On;
                Edit2 = On;
        }

        if (Edit2) {
            if (event_release(Select)) {  
                combo_run (Confirm);
    			       Edit1 = Off;
                Edit2 = Off;
    		}

        }
    }

    if (Edit1 || Edit2) {

            if (event_press(Reset)) {  
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off; 
            }

                if (event_press(Pickaxe) || event_press(Build) || event_press(Ads)) {
                    Edit1 = Off;
                    Edit2 = Off;
                }
    }

    if (BuildTracker) {
        
        if (event_press(Build)) {
            BuildTrack = !BuildTrack;
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(Pickaxe) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(Roof) || get_ival(Floor) || get_ival(Ramp) || get_ival(Wall)) 
                    BuildCount = Off;
        }
    }

    if (!BuildTrack) { 

    if (PolarAimAssist) {

        if (get_ival(Ads) && abs(get_ival(RX)) <= PolarRelease && abs(get_ival(RY)) <= PolarRelease) {
            
            if (RadiusBoost && get_ival(Fire)) {
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_ival(Fire)) {
                        Angle = PolarAngle + PolarABoost;
                    }
                        else {
                            Angle = PolarAngle;
                        }
                set_polar(POLAR_RS,Speed = (Speed + Angle) % 360,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 4 + Radius * 328);
            }
        }

    if (DamPolarAssist) {

        if (get_ival(Ads) && abs(get_ival(RX)) <= PolarRelease && abs(get_ival(RY)) <= PolarRelease) {
            actual_X = get_ival(RX);
            actual_Y = get_ival(RY);
            actual_Magnitude = isqrt(pow(actual_X,2) + pow(actual_Y,2));
            max_Magnitude = (actual_Magnitude < 100);

            if (RadiusBoost && get_ival(Fire)) {
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost && get_ival(Fire)) {
                        Angle = PolarABoost;
                    }
                        else {
                            Angle = 0;
                        }
                                 
                angle += PolarAngle + Angle;
                 angle = angle % 360;
                sin_angle = DamPolar[angle % 360];
                cos_angle = DamPolar[(angle + 270) % 360];
                cos_angle = (cos_angle * Radius) / 100;
                sin_angle = (sin_angle * Radius) / 100;

            if (actual_Magnitude <= Radius) { 
                sin_angle -= actual_Y; 
                cos_angle -= actual_X; 
            }
                else { 
                    sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                    cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                } 

            set_val(RX,clamp(actual_X + cos_angle, -100,100));
            set_val(RY,clamp(actual_Y + sin_angle, -100,100)); 
        }
    }

    if (PolarProgAssist) {        
        
        if ((get_ival(Ads)) || (get_ival(Fire) && PolarProgHip)) {
            if (abs(get_ival(RX)) <= PolarProgRel && abs(get_ival(RY)) <= PolarProgRel) {
                
                RadiusFlow = PolarFlow(RadiusFlow,PolarProgMinR,PolarProgMaxR,PolarProgIncR,RadFlow,1);
                AngleFlow = PolarFlow(AngleFlow,PolarProgMinA,PolarProgMaxA,PolarProgIncA,AngFlow,2);
        
                set_polar(POLAR_RS,AngleFlow,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 4 + 327 * RadiusFlow);
            }
        }
    }

    if (DynaPolarProgAA) {        
        
        if ((get_ival(Ads)) || (get_ival(Fire) && PolarProgHip)) {
            if (abs(get_ival(RX)) <= PolarProgRel && abs(get_ival(RY)) <= PolarProgRel) {
                
                RadiusFlow = PolarFlow(RadiusFlow,PolarProgMinR,PolarProgMaxR,PolarProgIncR,RadFlow,1);
                AngleFlow = PolarFlow(AngleFlow,PolarProgMinA,PolarProgMaxA,PolarProgIncA,AngFlow,2);
        
                    ProgRY = (abs(get_ival(RY) / 2));
                    ProgRX = (abs(get_ival(RX) / 2));
           
                        ProgDynaRadius = (RadiusFlow + ((-ProgRY) + (-ProgRX)));
                        ProgDynaAngle = (AngleFlow + ((-ProgRY) + (-ProgRX))); 
           
                   set_polar(POLAR_RS,ProgDynaAngle,ProgDynaRadius * 327);
            }
        }
    }

    if (EllipsePolarAim) {
            
        if ((get_ival(Ads)) || (get_ival(Fire) && PolarProgHip)) {
            TimeEP += get_rtime();
            
            if (abs(get_ival(RX)) <= PolarProgRel && abs(get_ival(RY)) <= PolarProgRel) {
                
                if (TimeEP == EllipseInverTime) {
                    EllipseInvert = !EllipseInvert;
                    TimeEP = Off;
                }
                    
                        if (EllipseInvert) {
                              AngleInvert = EllipseAngHig;
                          }
                              else {
                                  AngleInvert = Off;
                              }
                
                  EllipseAngle = (EllipseAngle + EllipseAngLow + AngleInvert) % 360;
                  SetPolar(POLAR_RS,EllipseAngle,EllipseRadRX,EllipseRadRY);
             }
          }
      }

    if (DynamicPolarAim) {
            
        if ((get_ival(Ads)) || (get_ival(Fire) && PolarProgHip)) {
            
            if (abs(get_ival(RX)) <= PolarProgRel && abs(get_ival(RY)) <= PolarProgRel) {
                
                PolAngle = (PolAngle + DynamicAngle) % 360;
                  SetPolar(POLAR_RS,PolAngle,DynamicRadRX,DynamicRadRY);
             }
          }
      }

    if (ProgressionAA) {        
        
        if (get_ival(Ads) && abs(get_ival(RX)) <= ProgRelease && abs(get_ival(RY)) <= ProgRelease) {
            
            RadiusFlow = PolarFlow(RadiusFlow,ProgPowerMin,ProgPowerMax,ProgPowerInc,RadFlow,1);
            AngleFlow = PolarFlow(AngleFlow,ProgWaitMin,ProgWaitMax,ProgWaitInc,AngFlow,2);
                
            combo_run(Progression);
        }
            else {
                
                combo_stop(Progression);
            }
    }

    if (DoGzAimAssist){        
        
        if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
            if (abs(get_ival(RX)) <= DoGFallReleae && abs(get_ival(RY)) <= DoGFallReleae) {
                
                DoGzVersion2 = On;
                DoGzVersion2();
            }
        }
        
        if (event_release(Ads) || event_release(Fire)) {
            DoGzVal = DoGzAAMin
            DoGzVersion2 = Off;
            DoGzPos = On;
        }
    }

        if (FallOffAA){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= DoGFallReleae && abs(get_ival(RY)) <= DoGFallReleae) {
                
                    combo_run(FallOff);
                }
            }
                    else {
                        combo_stop(FallOff);
                    }
        }

        if (BattsStickyAA){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= LegacyBattRel && abs(get_ival(RY)) <= LegacyBattRel) {
                
                    combo_run(Sticky);
                }
            }
                    else {
                        combo_stop(Sticky);
                    }
        }

        if (LegacyAssist){        
        
            if ((get_ival(Ads)) || (get_ival(Fire) && StandardAHip)) {
                if (abs(get_ival(RX)) <= LegacyBattRel && abs(get_ival(RY)) <= LegacyBattRel) {
                
                    combo_run(Legacy);
                }
            }
                    else {
                        combo_stop(Legacy);
                    }
        }

    }

	if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress)) {

		MenuToggle(On,On,On,On,Off);
	}

	if (MainMenu) {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();

		if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress)) {

			MenuTimeout = Off;
		}

			if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress)) {

				MenuToggle(Off,Off,Off,Off,Off);
			}

			if (event_press(ChangeMenuPress)) {

				MenuValues = !MenuValues;
				MenuSwitch = !MenuSwitch;
				ModIndex = On;
				Update = On;
			}


		if (MenuValues) {

			ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex],ModDigitMin[ModIndex],ModDigitMax[ModIndex],1,IndexMinValues,IndexMaxValues,ModValue[ModIndex]);
		}

		if (MenuSwitch) {

			ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex],Off,On,1,IndexMinSwitches,IndexMaxSwitches,ModToggle[ModIndex]);
		}
				BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}
 
    if (!MainMenu && Saver) { 
        ScreenTime (); 
     	 Saver (); 
	   } 

    if (!MainMenu) { 
        LedFlow();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress)) {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (Shunt) {
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
                set_val (Shunt,Off);
            }
    }
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Combos                           ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

combo Progression {
	
	Set_Val(RY,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow);
	wait(AngleFlow);
	Set_Val(RY,RadiusFlow * -1);
	wait(AngleFlow);
	Set_Val(RX,RadiusFlow * -1);
	wait(AngleFlow);
}

combo FallOff {

    Set_Val(RY,FalloffAARY);
    Set_Val(RX,FalloffAARX);
    wait(FalloffAAWait);
    Set_Val(RY,FalloffAARY * -1);
    Set_Val(RX,FalloffAARX * -1);
    wait(FalloffAAWait);
}

combo Sticky {
    
    Set_Val(RY,BattsAARY);
    wait(BattsAAWait);
    Set_Val(RX,BattsAARX);
    
    if (abs(get_ival(LX)) < 20)
        Set_Val(LX,BattsAARX);
        wait(BattsAAWait);
        Set_Val(RY,BattsAARY * -1);
        wait(BattsAAWait);
        Set_Val(RX,BattsAARX * -1);
        
        if (abs(get_ival(LX)) < 20)
            Set_Val(LX,BattsAARX * -1);
            wait(BattsAAWait);
}

combo Legacy {
    
    set_val(RY,LegacyAARY * -1);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX);
    wait(LegacyAASWait);
    set_val(RY,LegacyAARY);
    wait(LegacyAASWait);
    set_val(RX,LegacyAARX * -1);
    wait(LegacyAASWait);
}

combo Confirm {

    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo FastReset {

    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

combo Boot {
        
        wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
            cls_oled(0);
            printf(5,10,0,1,MiscString[3]);
            printf(5,25,0,1,MiscString[4]);
            printf(18,45,0,1,MiscString[5]);
            NumX = 32; NumY = 15; NumS = 0;
            FindDigit(get_slot(),DigitValue(get_slot()));
            Slot = Off;
        }    
        
        wait(20000);
        cls_oled(0);
        Clear = On;
        Saver = On;
        ScreenTime = On;
}

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Functions                        ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 

function PolarFlow(Pfb,Psv,Pfv,Pv,Pf,Pid) {
    
    if(Pf) {
        Pfb += Pv;
    
    if(Pfb <= Pfv)  
        return Pfb;
        
        if(Pfb > Pfv) {
            Pvid[Pid] = Off;
            
            return Pfb - Pv;
        }
    }

    else {
        Pfb -= Pv;    
        
        if(Pfb >= Psv)  
            return Pfb;

            if(Pfb < Psv) {
                Pvid[Pid] = On; 
        
                return Pfb + Pv;
            }
    } 
           return Off;    
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}

function DoGzVersion2() {
    
    TimeDoGz += get_rtime();
    
    if (DoGzVersion2) {
        if (DoGzPos) {
            DoGzVal += DoGzIncrement;
        }
            else {
                DoGzVal -= DoGzIncrement;
            }

        if (DoGzPos && DoGzVal == DoGzAAMax) 
            DoGzPos = Off;

            if (!DoGzPos && DoGzVal == DoGzAAMin)
                DoGzPos = On;

        if (TimeDoGz < 50)
            Set_Val(RX,DoGzVal);
            
            if (TimeDoGz > 50)
                Set_Val(RY,DoGzVal);
        
        if (TimeDoGz == 100) TimeDoGz = 0;
    }
}

function SetPolarVal(Axis,Offset_Val) { 
		
	return clamp(Offset_Val * (100 - abs(get_ival(Axis))) / 100 + get_ival(Axis),-100,100); 
}

function Sin(AngleO) { 
		
	return (Cos(AngleO - 90)); 
}

function Cos(AngleO) {
  	
  	if (AngleO < 0) 
  		AngleO = (AngleO % 360) + 360;
  		
  		AngleO = (AngleO % 360);
		PX_Out = 100;
  		PY_Out = 100;
  		PAngle_Out = AngleO % 45;
	
		if (AngleO < 45) { 
  			PY_Out = (100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 90)  { 
  			PX_Out = (100 * (45 - PAngle_Out)) / 45; 
  		}
  		else if (AngleO < 135) { 
  			PX_Out = (-100 * PAngle_Out) / 45; 
  		}
  		else if (AngleO < 180) { 
  			PY_Out = (100 * (45 - PAngle_Out)) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 225) {
  			PY_Out = (100 * PAngle_Out) / 45; PX_Out = -100; 
  		}
  		else if (AngleO < 270) { 
  			PX_Out = (-100 * (45 - PAngle_Out)) / 45; PY_Out = -100; 
  		}
  		else if (AngleO < 315) { 
  			PX_Out = (100 * PAngle_Out) / 45; PY_Out = -100; 
  		}
  			else { 
  				PY_Out = ( 100 * (45 - PAngle_Out)) / 45; 
  			}
		
			PAngle_Out = abs(PY_Out);
	
			if (abs(PX_Out) > PAngle_Out) PAngle_Out = abs(PX_Out);
				return (PX_Out * PAngle_Out / isqrt((pow(PX_Out, 2) + pow(PY_Out, 2))));
}

function SetPolarValue (Stick,AngleO,RadiusO) {
  		
  	set_val(7 + Stick,(Cos(AngleO) * RadiusO) / 100);
  	set_val(8 + Stick,(Sin(AngleO) * RadiusO) / 100);
 		return;
}

function SetPolar (Stick,AngleO,Width,Height) {
  		
  	SetPolarValue(Stick,AngleO,Width);
  	PX[Stick/4] = get_val(Stick + 7);
  	SetPolarValue(Stick, AngleO,Height);
  	PY[Stick/4] = get_val(Stick + 8);
  	set_val(Stick + 7,SetPolarVal(Stick + 7,PX[Stick/4]));
  	set_val(Stick + 8,SetPolarVal(Stick + 8,PY[Stick/4]));
}

function LedFlow () {

    Rgb += get_rtime();
        
    if (Rgb == 120) {
        set_rgb(Colour / LedBrightness,Colour[1] / LedBrightness,Colour[2] / LedBrightness);
        Colour[LedDec] -= 2; 
        Colour[LedInc] += 2;

        if (!Colour[LedDec]) { 
            LedInc = (LedInc + 1) % 3; 
            LedDec = (LedDec + 1) % 3; 
        }
            Rgb = 0;    
    }
}

function Saver () {
    
    if (Saver) { 

		TimeL += get_rtime();
	
		if(TimeL == 30) {            
  			pixel_oled(X_POS1,Y_POS1,1);
        	pixel_oled(X_POS2,Y_POS2,1);
             
             	TimerP += 1;    Length -= 1;
             	TimerE += 1;    Length -= 1;
                
            	if(XorY1)  X_POS1 +=Dir1;
            	if(XorY2)  X_POS2 +=Dir2;
            	if(!XorY1) Y_POS1 +=Dir1;
            	if(!XorY2) Y_POS2 +=Dir2;
 
            if(Y_POS1 < 1)   Y_POS1 = 63;
            if(Y_POS2 < 1)   Y_POS2 = 63;
            if(X_POS1 < 1)   X_POS1 = 127;
            if(X_POS2 < 1)   X_POS2 = 127;
            if(Y_POS1 > 63)  Y_POS1 = 1;
            if(Y_POS2 > 63)  Y_POS2 = 1;
            if(X_POS1 > 127) X_POS1 = 1;
            if(X_POS2 > 127) X_POS2 = 1;
    
    	if(Length < 1) {
        	cls_oled(0);
        	Y_POS2 = random(1,64);
        	Y_POS1 = random(1,64);
        	X_POS1 = random(1,128);
        	X_POS2 = random(1,128);
        	Steps1 = random(5,25);
        	Steps2 = random(5,25);
        	Length = random(200,1000);
    	}
    
        	if(TimerP > Steps1) { 
            	TimerP = 0;
            	Steps1 = random(5,25);
            	XorY1 = !XorY1;
            	Dir1 = random(1,3);
    
           	 		if(Dir1 == 2) Dir1 = -1;
        	} 

		if(TimerE > Steps2)    {
			TimerE = 0;
            Steps2 = random(5,25);
            XorY2 = !XorY2;
            Dir2 = random(1,3);
    
				if(Dir2 == 2) Dir2 = -1;
		}                                    
        	TimeL = 0;
     	}
 	}   
	
		if (!Saver)
			cls_oled(0);
}

function ScreenTime () { 

     if (Clear) {
         Ms = 0;    Sec = 0; Min = 0;
         Clear = Off;
     }

    if (ScreenTime) { 
        Ms += get_rtime(); 
         
        if(Ms >= 1000) { 
            Ms = 0; 
             Sec +=1 
        }     
            if(Sec == 60) { 
                Sec = 0; 
                Min += 1; 
            } 
                if(Min == TimeoutLimit) { 
                    Saver = 0; 
                    Ms = 0; 
                    Sec = 0; 
                    Min = 0; 
                    ScreenTime = 0; 
                    cls_oled(0); 
                } 
    } 
} 

function BlockButton (Button) { 

	if (!get_ival(Button))
		return; 
		set_val(Button,Off);
} 
  
function MenuToggle (Main,Vals,Indx,Print,Toggle) { 

	cls_oled(0); 
	MainMenu    = Main; 
	MenuValues  = Vals;
	ModIndex    = Indx;
	Update      = Print;
	MenuSwitch  = Toggle;
	MenuTimeout = Off;

        if (!MainMenu) { 
            ScreenTime = 1; 
            Saver = 1; 
            Clear = On;
        } 
}
  
function PrintMod (ModVal,ModValMin,ModValMax,ModValInc,IndexMin,IndexMax,ModValLbl) { 

	if (Update) { 
 
		rect_oled(2,2,127,46,1,0); 
		Grid  (); 
		printf(6,25,0,1,MiscString[0]);
		NumX = -43; NumY = 10; NumS = -1; 
		FindDigit(ModIndex,DigitValue(ModIndex));
		printf(5,8,0,1,ModValLbl); 

		if (MenuValues) {

			NumX = 0; NumY = 0; NumS = 0;
			FindDigit(ModVal,DigitValue(ModVal));
		} 
			if (MenuSwitch) { 
 
				if (ModVal) {
 
					printf(51,24,1,1,MiscString[1]); 
				}  
    			else { 
					printf(46,24,1,1,MiscString[2]); 
				} 
			} 
		Update = Off; 
	} 

	if (event_press(Up) || get_ival (Up) && get_ptime (Up) >= 450) {
 
		Update = On;
		ModVal += ModValInc;

            if (ModVal >= ModValMax){ 
                ModMonitor(ModValLbl);
                    return ModValMax;
            }
	} 
 
		if (event_press(Down) || get_ival (Down) && get_ptime (Down) >= 450) { 

			Update = On;
			ModVal -= ModValInc;

				if (ModVal <= ModValMin){
					ModMonitor(ModValLbl);
						return ModValMin;
				}
		}

	if (event_press(Right)) {

		Update = On;
		ModIndex += 1;
 
			if (ModIndex > IndexMax) ModIndex = IndexMin;
	}
  
		if (event_press(Left)) {
			Update = On;
			ModIndex -= 1; 
 
				if (ModIndex < IndexMin) ModIndex = IndexMax;
		} 
	return ModVal;
} 
 
function ModMonitor (Mon) {
    
    if (Mon == ModToggle[1]) { 
        DamPolarAssist  = Off;
        PolarProgAssist = Off;
        DynaPolarProgAA = Off;
        EllipsePolarAim = Off;
        DynamicPolarAim = Off;
        ProgressionAA   = Off;
        DoGzAimAssist   = Off;
        FallOffAA       = Off;
        BattsStickyAA   = Off;
        LegacyAssist    = Off;
    }
        if (Mon == ModToggle[2]) { 
            PolarAimAssist  = Off;
            PolarProgAssist = Off;
            DynaPolarProgAA = Off;
            EllipsePolarAim = Off;
            DynamicPolarAim = Off;
            ProgressionAA   = Off;
            DoGzAimAssist   = Off;
            FallOffAA       = Off;
            BattsStickyAA   = Off;
            LegacyAssist    = Off;
        }
    if (Mon == ModToggle[5]) { 
        DamPolarAssist  = Off;
        PolarAimAssist  = Off;
        DynaPolarProgAA = Off;
        EllipsePolarAim = Off;
        DynamicPolarAim = Off;
        ProgressionAA   = Off;
        DoGzAimAssist   = Off;
        FallOffAA       = Off;
        BattsStickyAA   = Off;
        LegacyAssist    = Off;
    }
        if (Mon == ModToggle[6]) { 
            DamPolarAssist  = Off;
            PolarProgAssist = Off;
            PolarAimAssist  = Off;
            EllipsePolarAim = Off;
            DynamicPolarAim = Off;
            ProgressionAA   = Off;
            DoGzAimAssist   = Off;
            FallOffAA       = Off;
            BattsStickyAA   = Off;
            LegacyAssist    = Off;
        }
    if (Mon == ModToggle[7]) { 
        DamPolarAssist  = Off;
        PolarProgAssist = Off;
        DynaPolarProgAA = Off;
        PolarAimAssist  = Off;
        DynamicPolarAim = Off;
        ProgressionAA   = Off;
        DoGzAimAssist   = Off;
        FallOffAA       = Off;
        BattsStickyAA   = Off;
        LegacyAssist    = Off;
    }
        if (Mon == ModToggle[8]) { 
            DamPolarAssist  = Off;
            PolarProgAssist = Off;
            DynaPolarProgAA = Off;
            EllipsePolarAim = Off;
            PolarAimAssist  = Off;
            ProgressionAA   = Off;
            DoGzAimAssist   = Off;
            FallOffAA       = Off;
            BattsStickyAA   = Off;
            LegacyAssist    = Off;
        }
    if (Mon == ModToggle[9]) { 
        DamPolarAssist  = Off;
        PolarProgAssist = Off;
        DynaPolarProgAA = Off;
        EllipsePolarAim = Off;
        DynamicPolarAim = Off;
        PolarAimAssist  = Off;
        DoGzAimAssist   = Off;
        FallOffAA       = Off;
        BattsStickyAA   = Off;
        LegacyAssist    = Off;
    }
        if (Mon == ModToggle[10]) { 
            DamPolarAssist  = Off;
            PolarProgAssist = Off;
            DynaPolarProgAA = Off;
            EllipsePolarAim = Off;
            DynamicPolarAim = Off;
            ProgressionAA   = Off;
            PolarAimAssist  = Off;
            FallOffAA       = Off;
            BattsStickyAA   = Off;
            LegacyAssist    = Off;
        }
    if (Mon == ModToggle[11]) { 
        DamPolarAssist  = Off;
        PolarProgAssist = Off;
        DynaPolarProgAA = Off;
        EllipsePolarAim = Off;
        DynamicPolarAim = Off;
        ProgressionAA   = Off;
        DoGzAimAssist   = Off;
        PolarAimAssist  = Off;
        BattsStickyAA   = Off;
        LegacyAssist    = Off;
    }
        if (Mon == ModToggle[12]) { 
            DamPolarAssist  = Off;
            PolarProgAssist = Off;
            DynaPolarProgAA = Off;
            EllipsePolarAim = Off;
            DynamicPolarAim = Off;
            ProgressionAA   = Off;
            DoGzAimAssist   = Off;
            FallOffAA       = Off;
            PolarAimAssist  = Off;
            LegacyAssist    = Off;
        }
    if (Mon == ModToggle[13]) { 
        DamPolarAssist  = Off;
        PolarProgAssist = Off;
        DynaPolarProgAA = Off;
        EllipsePolarAim = Off;
        DynamicPolarAim = Off;
        ProgressionAA   = Off;
        DoGzAimAssist   = Off;
        FallOffAA       = Off;
        BattsStickyAA   = Off;
        PolarAimAssist  = Off;
    }
} 
   
function Grid () { 
  
	line_oled(126,20,2,20,2,1);
	rect_oled(1,1,127,63,0,1); 
	line_oled(126,46,2,46,2,1);
	line_oled(28,20,28,46,2,1);
}
 
function Scroll () {

		ScrollTime += get_rtime();

	if (ScrollTime >= ScrollWait) {
		ScrollWait = ScrollSpeed;
 
		for(ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++) { 
 
			if(ScrollIndex + ScrollLine >= sizeof(Scroll)) {
				putc_oled(ScrollIndex,Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]); 
			} 
				else {  
					putc_oled(ScrollIndex,Scroll[ScrollIndex + ScrollLine]);
				} 
		} 
			puts_oled(ScrollX,ScrollY,0,ScrollIndex,1);
			ScrollLine++; 
 
	if(ScrollLine >= sizeof(Scroll)) {
		ScrollLine = 0;
	} 
		ScrollChar--; 
 
		if(ScrollChar < 1) {
			ScrollChar = 17; 
			ScrollWait = ScrollDelay;
		}
		ScrollTime = 0; 
	} 
}  
    
function FindDigit (Digit,Digits) { 
 
	if (Digit < 0) {  
		putc_oled(Number,45);
		Number += 1;
		Digit = abs(Digit);
		Count = 1;
	} 
	else  
		Count = 0;
    
	if (Digits == 5) {  
		putc_oled(Number,FontDigits[Digit / 10000]);
		Digit = Digit % 10000;
		Number +=  1;
	} 
	if (Digits >= 4) {
		putc_oled(Number,FontDigits[Digit / 1000]);
		Digit = Digit % 1000; 
		Number += 1;
	}  
	if (Digits >= 3) { 
		putc_oled(Number,FontDigits[Digit / 100]); 
		Digit = Digit % 100; 
		Number +=  1; 
	}  
	if (Digits >= 2) { 
		putc_oled(Number,FontDigits[Digit / 10]); 
		Digit = Digit % 10;
		Number += 1; 
	} 
		putc_oled(Number,FontDigits[Digit]); 
		puts_oled(CenterMod(Digits + Count,1) + NumX,25 + NumY,1 + NumS,Number,1);
		Number = 1; 
}   
    
function DigitValue (Number) { 
   
    	Number = abs(Number);
	if (Number / 10000 > 0) return 5;
	if (Number /  1000 > 0) return 4; 
	if (Number /   100 > 0) return 3; 
	if (Number /    10 > 0) return 2; 
		return 1;
} 
   
function CenterMod (Character,Font) { 
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
		return Position;
} 
   
/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   ASCII Table                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121; 
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122; 
define QUOTE       =  34; /*¦¦   "   ¦¦*/	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113; 
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114; 
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115; 
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116; 
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117; 
define APOSTROPHE  =  39; /*¦¦       ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118; 
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119; 
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120; 
define ASTERISK    =  42; /*¦¦   *   ¦¦*/ 
define PLUS        =  43; /*¦¦   +   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/ 
define MINUS       =  45; /*¦¦   -   ¦¦*/ 
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/ 
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/ 
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/ 
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/ 
define TICK        =  96; /*¦¦   `   ¦¦*/ 
define O_CURLY     = 123; /*¦¦   {   ¦¦*/ 
define BAR         = 124; /*¦¦   |   ¦¦*/ 
define C_CURLY     = 125; /*¦¦   }   ¦¦*/ 
define WAVE        = 126; /*¦¦   ~   ¦¦*/ 
define CROSS       = 127; /*¦¦   PS  ¦¦*/ 
define CIRCLE      = 128; /*¦¦   PS  ¦¦*/ 
define SQUARE      = 129; /*¦¦   PS  ¦¦*/ 
define TRIANGLE    = 130; /*¦¦   PS  ¦¦*/ 
define UP          = 131; /*¦¦ PS+XB ¦¦*/ 
define DOWN        = 132; /*¦¦ PS+XB ¦¦*/ 
define LEFT        = 133; /*¦¦ PS+XB ¦¦*/ 
define RIGHT       = 134; /*¦¦ PS+XB ¦¦*/ 
define VIEW        = 135; /*¦¦   XB  ¦¦*/ 
define MENU        = 136; /*¦¦   XB  ¦¦*/ 

/* 
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Scroll Array                     ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   , 
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   , 
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     , 
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const int8 DamPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};