																																																																																			/*
   _____    _____            _   _   _   _              _           _       ______                  _             _   _                 _____                 _           _   
  / ____|  / ____|          | \ | | (_) | |            | |         (_)     |  ____|                | |           (_) | |               / ____|               (_)         | |  
 | (___   | (___            |  \| |  _  | | __   ___   | |   __ _   _      | |__      ___    _ __  | |_   _ __    _  | |_    ___      | (___     ___   _ __   _   _ __   | |_ 
  \___ \   \___ \           | . ` | | | | |/ /  / _ \  | |  / _` | | |     |  __|    / _ \  | '__| | __| | '_ \  | | | __|  / _ \      \___ \   / __| | '__| | | | '_ \  | __|
  ____) |  ____) |          | |\  | | | |   <  | (_) | | | | (_| | | |     | |      | (_) | | |    | |_  | | | | | | | |_  |  __/      ____) | | (__  | |    | | | |_) | | |_ 
 |_____/  |_____/           |_| \_| |_| |_|\_\  \___/  |_|  \__,_| |_|     |_|       \___/  |_|     \__| |_| |_| |_|  \__|  \___|     |_____/   \___| |_|    |_| | .__/   \__|
                    ______                                                                                                                                       | |          
                   |______|                                                                                                                                      |_|          
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
						Note From CHI CHI / ErickCHIN :
					- UP & DOWN to Select the value to edit.
					- LEFT & RIGHT to increase or decrease Selected value
					- If this does not make sense just give it a try and you will understand.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 					Credits To The Following People Below :
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Chi Chi for Mod Menu
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Sweet_Evil for his SavePVARS & Load Values Propely Code
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- ItzSnack for Rapid Fire, Drop shot
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DjangoKill for Chicken Mod idea
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Crescens For Aim Sensitivity Corrections
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DoGzTheFiGhTeRz Polar Aim Assist With Radius and Angle Boost Option
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- DoNotAtMe For His Zen Eye Colour Pulsing & Polar Aim Assist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- TaylorDrift For Customizing DNAM Polar With Shapes & Helping me with so much
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	- Me, SS_Nikolai for putting all this together & Coding some of the build mods
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																																																																			*/

//--Combat Mode -- Match These To Your In-Game Buttons
	define FIRE       		  	 = PS4_R2;       // Fire In Game
	define ADS        		  	 = PS4_L2;       // Ads In Game
	define PICKAXE    		  	 = PS4_TRIANGLE; // Pickaxe In Game
	define N_WEAPON   		  	 = PS4_R1;       // Next Weapon In Game
	define P_WEAPON   		  	 = PS4_L1;       // Previous Weapon In Game
	define RELOAD     		  	 = PS4_SQUARE;   // Reload In Game
	define JUMP       		  	 = PS4_CROSS;    // Jump In Game
	define CROUCH     		  	 = PS4_R3;       // Crouch In Game
	define PING       		  	 = PS4_RIGHT;    // Ping In Game

//--Build Mode
	define BUILD      		  	 = PS4_CIRCLE;	// Build In Game {Switch/Edit or Switch}
	define SWITCH     		  	 = PS4_LEFT;   // Switch In Game {Switch Only}
	define WALL       		  	 = PS4_R2;		// Wall In Game
	define FLOOR      		  	 = PS4_R1;		// Floor In Game
	define RAMP       		  	 = PS4_L2;		// Ramp In Game
	define TRAP       		  	 = PS4_SQUARE;	// Trap In Game
	define ROOF       		  	 = PS4_L1;		// Roof In Game

//--Edit Mode
	define EDIT       		  	 = PS4_CIRCLE;   // Edit In Game (Use This Button If Using HoldTime In Game Or NOT Edit Assist Without Hold Time)
	define SELECT     		  	 = PS4_R2;       // Edit Select Piece In Game
	define CONFIRM    		  	 = PS4_CIRCLE;   // Edit Confirm In Game	
	define RESET      		  	 = PS4_R3;       // Edit Reset In Game

//--Movement & Aim Sticks
	define AIM_Y      		  	 = PS4_RY;  	  // Vertical Aim Axis In Game
	define AIM_X      		  	 = PS4_RX;  	  // Horizontal Aim Axis In Game
	define STRAFE     		  	 = PS4_LX;  	  // Horizontal Walk Axis In Game
	define WALK       		  	 = PS4_LY;  	  // Vertical Walk Axis In Game

//--If Enabled Hold ADS + N_WEAPON To Perform 1 Shot With Perfect Accuracy
	define PerfectAccuracy	  	 = TRUE;

//--Stick Drift Removal
	define StickDriftRemoval  	 = TRUE; // Crescens Polar WILL NOT WORK With This Enabled Unfortunately
	define DeadZone			  	 =   10; // Anything Below This Value Is Registered As 0, Good For Old Controllers With Stick Drift

//--Choose Only 1 From Below To Be TRUE. Either Timed Recoil With set_val Value or Rumble Recoil With set_val Value
	define TimedRecoil     	  	 =  TRUE; // Smart Recoil Using Time					(TimedRecoil = Off + RumbleRecoil = Off = Legacy Recoil On)
	define RumbleRecoil    	  	 = FALSE; // Smart Recoil Using Rumble Feedback		(TimedRecoil = Off + RumbleRecoil = Off = Legacy Recoil On)

//--Polar Radius and Angle Booster
	int RadiusBoost    		  	 =  TRUE;
	int AngleBoost     		  	 =  TRUE;

//--EDIT BUTTON IN GAME CANNOT HAVE HOLD TIME (USED AS EDIT ASSIST BUTTON)
	define EditAssist_BUTTON  	 = PS4_L3;
	define EditDelay       	  	 =     30; //DELAY BEFORE EDIT ASSIST BUTTON TRIGGERS HOLDING OF FIRE

//--Safe Quick Box Button
	define SafetyBox_BUTTON		 = PS4_RIGHT;

//--Ramp Floor Wall Button
	define RFW_Button 		  	 = PS4_SQUARE;

//--Fast Reset Button
	define FastResetButton		 = PS4_TOUCH;

//--Window Edit Shot Button
	define WindowEditShot_BUTTON = PS4_RIGHT;

//--Quick Toggle Button Combos
	define QuickToggles			 =        TRUE;	// If You Want To Enable RapidFire or DropShot Without Entering The Menu Keep This TRUE. Otherwise Make It FALSE
	define QuickToggleHoldButton =      PS4_L2;	// Hold This Button & Tap One Of The Buttons Below To Activate A Quick Mod
	define RapidFireQT			 =    PS4_LEFT; // ADS + This Button To Activate Rapid Fire
	define DropShotQT			 =    PS4_DOWN; // ADS + This Button To Activate Drop Shot
	define MenuOpenButton		 = PS4_OPTIONS; // ADS + This Button To Open Menu
																																																																																														/*
	 _   _           _   _               _     _______    
	| \ | |         | \ | |             | |   |__   __|   
	|  \| | ___     |  \| | ___  ___  __| |      | | ___  
	| . ` |/ _ \    | . ` |/ _ \/ _ \/ _` |      | |/ _ \ 
	| |\  | (_) |   | |\  |  __/  __/ (_| |      | | (_) |
	|_| \_|\___/    |_| \_|\___|\___|\__,_|      |_|\___/ 
              _ _           _                                ______          _   _               
     /\      | (_)         | |         /\                   |  ____|        | | | |              
    /  \   __| |_ _   _ ___| |_       /  \   _ __  _   _    | |__ _   _ _ __| |_| |__   ___ _ __ 
   / /\ \ / _` | | | | / __| __|     / /\ \ | '_ \| | | |   |  __| | | | '__| __| '_ \ / _ \ '__|
  / ____ \ (_| | | |_| \__ \ |_     / ____ \| | | | |_| |   | |  | |_| | |  | |_| | | |  __/ |   
 /_/    \_\__,_| |\__,_|___/\__|   /_/    \_\_| |_|\__, |   |_|   \__,_|_|   \__|_| |_|\___|_|
              _/ |                                  __/ |                                        
             |__/                                  |___/                                            																																																													*/
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | I | N | I | T | I | L | I | Z | A | T | I | O | N | | | | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
init {
	combo_run(NikO);

	InitializeShapeChange();

	if(get_pvar(SPVAR_64, 0, 10, 5) != 9) 
	{
		set_pvar(SPVAR_64, 9):
			ResetScriptVARS();
			SavePVARS();
	}

	LoadPVARS();
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {
	PS4CrossOver();

	// STICK DRIFT REMOVAL - START
	if(StickDriftRemoval)
		RemoveStickNoise();
	// STICK DRIFT REMOVAL - END

	if(ZS == 0)
	{

		//QUICK TOGGLE - START
		if(QuickToggles)
		{
			if(get_ival(QuickToggleHoldButton))
			{
				if(event_press(RapidFireQT))
				{
					RapidFire = !RapidFire;
					combo_run(cVibrate);
					LEDBlink(RapidFire);
				}

				if(event_press(DropShotQT))
				{
					DropShot = !DropShot;
					combo_run(cVibrate);
					LEDBlink(DropShot);
				}
					set_val(RapidFireQT, 0);
					set_val(DropShotQT , 0);
			}
		}
		//QUICK TOGGLE - END

		//RAMP FLOOR WALL - START	
		if(RampFloorWall)
		{
			if(get_ival(RFW_Button))
			{
				set_val(RFW_Button, 0);
				combo_run(RAMPFLOORWALL);
			}
		}
	    //RAMP FLOOR WALL - END

		//SAFETY BOX - START
		if(QuickBox)
		{	
			if(get_ival(SafetyBox_BUTTON))
			{
				set_val(SafetyBox_BUTTON, 0);
				combo_run(TUNNELBOX);
			}
		}
		//SAFETY - END 

		//FAST RESET - START
		if(FastReset && !get_ival(ADS) && event_press(FastResetButton))
		{ 
			set_val(FastResetButton, 0);
			combo_run(cFastReset);
		}
		//FAST RESET - END

		// WINDOW EDIT SHOT - START
		if(WindoWEditShot)
		{
			if(event_press(WindowEditShot_BUTTON))
			{
				set_val(WindowEditShot_BUTTON, 0);
				combo_run(WindowEditShot);
			}
		}
		// WINDOW EDIT SHOT - END

	    //PUMP WALL - START
		if (PumpWall)
		{
			if(get_ival(FIRE) && event_press(N_WEAPON))
			{
				set_val(N_WEAPON, 0);
				combo_run(PumpWall);
			}
		}
	    //PUMP WALL - END

		//EDIT ASSIST - START
		if (EditAssist)
		{
			if (get_ival(EditAssist_BUTTON))
			{
				EditAssist();
				Edit1 = TRUE;
			}

			if (event_release(EditAssist_BUTTON))
			{	
				EditT = 0;	
				Edit1 = FALSE;
			}
		}

		if (Edit1)
		{
			if (event_press(RESET))
			{
				combo_run(InstantReset);
				Edit1	   = FALSE;
				BuildTrack = FALSE;
			}

			if (event_press(PICKAXE) || event_press(ADS))
			{
				Edit1	   = FALSE;
				BuildTrack = FALSE;
			}
		}
		//EDIT ASSIST - END

	//BUILD MODE - START
	if (BuildTracker) 
	{
		if (event_press(BUILD))
		{
            BuildTrack = !BuildTrack;
        	set_rgb(255, 0, 0);
        }
			if (BuildTrack)
			{
				BuildCount += get_rtime();

			if (event_press(PICKAXE) || BuildCount == BuildSyncTime)
			{
				BuildTrack = FALSE;
                BuildCount = 0;
            }

			if (get_ival(P_WEAPON) || get_ival(N_WEAPON) || get_ival(RAMP) || get_ival(WALL) || get_ival(TRAP)) 
				BuildCount = 0;
			}
	}

    if (!BuildTrack)
	{
		set_rgb(0, 255, 0);

	    //RAPIDFIRE - START
		if(RapidFire)
		{
			if(get_ival(FIRE))
			{
				combo_run(cRapidFire);	
			}

			if(event_release(FIRE))
			{
				combo_stop(cRapidFire);
			}
		}
		//RAPIDFIRE - END
			
		//PERFECT ACCURACY - START
	if(PerfectAccuracy) 
	{
		if(get_ival(N_WEAPON) && get_ptime(N_WEAPON) <= get_ptime(ADS) && get_ival(ADS))
			OneShot = TRUE;

			if(OneShot)
			{
				if(get_ival(N_WEAPON))
					combo_run(cPerfectionAccuracy);
					block(N_WEAPON, get_ptime(N_WEAPON) + 50);
			}

			if (OneShot && event_release(N_WEAPON))
				OneShot = FALSE;
	}
		//PERFECT ACCURACY - END

		//DROPSHOT - START
	if(DropShot == 1)
	{
		if(event_release(FIRE))
		{
			Droppy_Shotty = FALSE;
		}

		if(!BuildTrack)
		{
			if(get_val(FIRE) && event_press(CROUCH))
			{
				Droppy_Shotty = TRUE;
			}
		}

		if(!BuildTrack)
		{
			if(Droppy_Shotty)
			{
				if(get_ival(FIRE))
				{
					combo_run(cDropShot);
				}
			}
		}
	}

	if(DropShot == 2)
	{
		if(get_ival(FIRE))
		{
			combo_run(cDropShot);
		}
	}
		//DROPSHOT - END

		//PUMP SMG - START
		if (PumpSMG)
		{
			if (R2_block)
			{
				set_val(FIRE, 0);
			}

			if (event_press(FIRE))
			{
				if (!tap)
				{
					tap = TRUE;
					combo_run(PumpSmg);
					set_val(FIRE, 0);
				}
			}

			if (event_press(N_WEAPON))
			{
				tap = FALSE;
			}

			if (event_press(P_WEAPON))
			{
				tap = TRUE;
			}
		}
		//PUMP SMG - END

		//STRAFE - START
		if(StrafeShot)
		{
			if(get_ival(FIRE))
			{
				combo_run(StrafeShot);
			}

			if(event_release(FIRE))
			{
				combo_stop(StrafeShot);
			}
		}
		//STRAFE - END

		//SLIDE SHOT - START
		if (SlideShot)
		{
            if (!get_ival(ADS) && event_press(FIRE))
			{
                combo_run(SlideShot);
            }

            if (event_release(FIRE))
			{
            	combo_run(SlideShot);
        	}

        	if (combo_running(SlideShot))
			{
        		set_val(FIRE, 0);
        	}
        }
		//SLIDE SHOT - END

		// TRIPLE STICKY - START
		if(TripleSticky)
		{
			if(get_ival(ADS) && !get_ival(FIRE))
			{
				combo_run(Sticky_AA);
				Aim_Val  = ADS_Size;
				Wait_Val = ADS_Wait_Value;
			}
			else if(get_ival(ADS) && get_ival(FIRE))
			{
				combo_run(Sticky_AA);
				Aim_Val  = ADS_FIRE_Size;
				Wait_Val = ADS_FIRE_Wait_Value;
			}
			else if(!get_ival(ADS) && get_ival(FIRE))
			{
				combo_run(Sticky_AA);
				Aim_Val  = HIPFIRE_Size;
				Wait_Val = HIPFIRE_Wait_Value;
			}
			else
			{
				combo_stop(Sticky_AA);
			}
		}
		// TRIPLE STICKY - END

		//ANTI BLOOM REDUCER - START
		if(BloomReducer)
		{
			if(get_val(ADS) && (get_val(FIRE)))
			{
				combo_run(cAntiBloom);
				combo_run(cRapidBloom);
			}
				if(abs(get_val(STRAFE)) > 60 || abs(get_val(WALK)) > 60)
				{
					combo_stop(cAntiBloom);
					combo_stop(cRapidBloom);
				}
		}
		//ANTI BLOOM REDUCER - END

	    //DoGz V7 Polar - START
		Axis = isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y)));

		if (DoGzV7Polar)
		{
			if (get_ival(FIRE))
			{
				if (RadiusBoost)
				{
					Radius = PolarRadius + PolarRBoost;
				}

				if (AngleBoost)
				{
					Angle = PolarAngle + PolarABoost;
				} 
			}
			else
			{
				Radius = PolarRadius;
				Angle  = PolarAngle;
			}

			if (get_ival(ADS) || get_ival(FIRE))
			{
				if (Axis <= 15)
				{
					set_polar(POLAR_RS, Speed = (Speed + Angle) % 360, (Radius * 328) + get_polar(POLAR_RS, 0));
				}
				else
				{
					combo_run(cPolar);
				}
			}
		}
		//DoGz V7 Polar - END

	//DNAM Polar With Taylor Shapes - START
	if(TaylorShapes)
	{
		CycleRefresh += get_rtime();

		if(AngleDirection)
		{
			AngleDirection = (get_val(AIM_X) > 0);
		}

		if((abs(get_val(AIM_X)) < 10) * (abs(get_val(AIM_Y)) < 10))
			Angle = (Angle + ADSSpeed) % 360;
		else
			Angle = (Angle + TaylorAngle) % 360;

		if(get_ival(ADS) || get_ival(FIRE))
		{
			DoNotAtMePolar(POLAR_RS, Angle, TaylorRadius);
		}
	}
	//DNAM Polar With Taylor Shapes - END

	    //CHICKEN MODE - START
		if (ChickenMode)
		{
			if(get_ival(FIRE))
			{
				combo_run(StrafeShot);
				combo_run(cDropShot); 
			}

			if(event_release(FIRE))
			{
				combo_stop(StrafeShot);
				combo_stop(cDropShot); 
			}
		}
	  	//CHICKEN MODE - END	
	  	
	  	//AUTO AIM - START
	if(AimAbuse)
	{
		if(get_ival(ADS) > 95)
		{
			combo_run(Aim_Abuse); 
		}

		if(event_release(ADS))
		{
			combo_stop(Aim_Abuse); 
		}
	}
		//AUTO AIM - END

		//--HEADSHOT ASSIST - START
		if(HeadShotAssist)
		{
			RY = HeadShotStrength * -1;

			if(get_ival(FIRE) && get_ptime(FIRE) < HeadShotHoldTime)
			{
				Set_Val(AIM_Y, RY);	
			}
		}
		//--HEADSHOT ASSIST - END

		//AIM CORRECTION - START
		if (AimSensCorrections)
		{
			ADS_Grenade_Sens = 100 - (InGame_Menu_Sens);
			ADS_Fire_Sens    = 96  - (InGame_Menu_Sens);
			Actual_Sens      = 100;

			if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(N_WEAPON) && !get_ival(P_WEAPON))
			{
				Sens = Actual_Sens;
			}
			else if (get_ival(ADS) && !get_ival(FIRE))
			{
				Sens = ADS_Grenade_Sens;
			}
			else if (!get_ival(ADS) && get_ival(FIRE))
			{
				Sens = Actual_Sens;
			}
			else if (get_ival(ADS) && get_ival(FIRE))
			{
				Sens = ADS_Fire_Sens;
			}
			else if (get_ival(P_WEAPON) || get_ival(N_WEAPON))
			{
				Sens = ADS_Grenade_Sens;
			}

			if (Sens > 100)
				Sens = 100;
				sensitivity(AIM_X, NOT_USE, Sens);
				sensitivity(AIM_Y, NOT_USE, Sens);
		}
		//AIM CORRECTION - END

		//ANTIRECOIL - START
	if(DoGzSmartAR)
	{
		if(get_ival(ADS) >= 95 && get_ival(FIRE))
		{
			TimeValue += get_rtime();

			if (TimeValue > 30)
			{
				AxisLY = get_lval(AIM_Y);
				AxisCY = get_ival(AIM_Y);
			}

			if (abs(AxisCY) != abs(AxisLY)) BoostAR = ((AxisCY - AxisLY) * 4);

			if ((BoostAR != 0) && (TimeValue > 40))
			{
				BoostAR   = 0;
				TimeValue = 0;
			}

			if (RumbleRecoil)
			{
				if (get_rumble(RUMBLE_A))
				{
					RumValue = get_rumble(RUMBLE_A) / 3;
				}
				else
				{
					RumValue = 0;	
				}
			}    

			if (TimedRecoil)
			{
				RecoilTimer += get_rtime();

				if (RecoilTimer > DoGzARTime)
				{
					RumValue    = DoGzARPullPower;
					RecoilTimer = 0;
				}
				else
				{
					RumValue = 0;	
				}
			}
				OutPut = (DoGzARVertical + RumValue + BoostAR);
				Set_Val(AIM_Y, OutPut);
	        }

		if (!get_ival(FIRE))
		{
			RecoilTimer = 0;
			TimeValue   = 0;
			BoostAR     = 0;
		} 	
	}
		//ANTIRECOIL - END

		//BUILDMODE - START
	}
		//BUILD MODE - END
		
		if(get_ival(ADS) && event_press(MenuOpenButton))
		{
			ZS = 1;
			Display = TRUE;
		}
	}

	NikO_Check();

	if(ZS == 1)
	{
		BlockAllInPuts();
		BlockAllOutPuts();

		DoGzV7Polar   	   = ToggleSwitch(1,  DoGzV7Polar			, 0,  1);
		TaylorShapes  	   = ToggleSwitch(2,  TaylorShapes			, 0, 13);
		TripleSticky       = ToggleSwitch(3,  TripleSticky			, 0,  1);
		AimAbuse           = ToggleSwitch(4,  AimAbuse				, 0,  1);
		AimSensCorrections = ToggleSwitch(5,  AimSensCorrections	, 0,  1);
		DoGzSmartAR        = ToggleSwitch(6,  DoGzSmartAR			, 0,  1);
		RapidFire          = ToggleSwitch(7,  RapidFire				, 0,  1);
		DropShot           = ToggleSwitch(8,  DropShot				, 0,  2);
		PumpSMG            = ToggleSwitch(9,  PumpSMG				, 0,  1);
		PumpWall           = ToggleSwitch(10, PumpWall				, 0,  1);
		ChickenMode        = ToggleSwitch(11, ChickenMode			, 0,  1);
		FastReset          = ToggleSwitch(12, FastReset				, 0,  1);
		EditAssist         = ToggleSwitch(13, EditAssist			, 0,  1);
		RampFloorWall      = ToggleSwitch(14, RampFloorWall			, 0,  1);
		QuickBox           = ToggleSwitch(15, QuickBox				, 0,  1);
		WindoWEditShot     = ToggleSwitch(16, WindoWEditShot		, 0,  1);
		BloomReducer       = ToggleSwitch(17, BloomReducer			, 0,  1);
		SlideShot          = ToggleSwitch(18, SlideShot				, 0,  1);
		StrafeShot         = ToggleSwitch(19, StrafeShot			, 0,  1);
		HeadShotAssist	   = ToggleSwitch(20, HeadShotAssist		, 0,  1);
		BuildTracker	   = ToggleSwitch(21, BuildTracker			, 0,  1);

		if(Mod == 2)
		{
			if(event_press(PS4_RIGHT))
			{
				ToggleAAType +=    1;
				Display       = TRUE;
			}

			if(event_press(PS4_LEFT))
			{
               ToggleAAType -=    1;
               Display       = TRUE;
            }

			if(ToggleAAType  > 2)
				ToggleAAType = 0;
			if(ToggleAAType  < 0)
				ToggleAAType = 2;
	    }

		if(event_press(PS4_SQUARE))
		{
			if(EdiTableMods[Mod] == 1)
			{
				ZS      =    2;
				Display = TRUE;
			}
		}

		if(event_press(PS4_UP))
		{
			Mod --;
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Mod ++;
			Display = TRUE;
		}

		if(Mod > NumOfMods)
			Mod = 1;
		if(Mod < 1)
			Mod = NumOfMods;

		if(event_press(PS4_CIRCLE))
		{
			ZS = 0;
			SavePVARS();
			frame = -1;
			combo_restart(NikO);
			Display = TRUE;
		}
	}
	
	if(ZS == 2)
	{
		BlockAllInPuts();
		BlockAllOutPuts();

		if(ptime != 104)
			ptime += get_rtime();

	if(event_press(PS4_CIRCLE) && (Mod == 20 || 18 || 8 || 6 || 3 || 2 || 1))
	{
			SavePVARS();
			ZS = 1;
			Display = TRUE;
	}

		if(event_press(PS4_UP))
		{
			Sel ++ ;
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Sel -- ;
			Display = TRUE;
		}

		if(Sel < 0)
			Sel = 0;
		if(Sel > 2)
			Sel = 2;

		if(Mod == 1 && Tab == 1)
		{
            if(Sel < 0)
				Sel = 0;
            if(Sel > 1)
				Sel = 1;
        }

		if(Mod == 1)
		{
			if(Tab == 0)
			{
				if(event_press(PS4_R1))
				{
					Tab += 1;
					Display = TRUE;
				}
					PolarRadius = EditValues(1, PolarRadius, 1, 420, 420, 0, 60);
					PolarAngle  = EditValues(0, PolarAngle , 1, 420, 420, 0, 60);
			}
			if(Tab == 1)
			{
				if(event_press(PS4_L1))
				{
					Tab -= 1;
					Display = TRUE;
				}
					PolarRBoost = EditValues(1, PolarRBoost, 1, 420, 420, 0, 60);
					PolarABoost = EditValues(0, PolarABoost, 1, 420, 420, 0, 60);
			}
		}

		if(Mod == 2)
		{
			TaylorRadius = EditValues(2, TaylorRadius, 1, 420, 420, 0, 60);
			ADSSpeed     = EditValues(1, ADSSpeed    , 1, 420, 420, 0, 60);
			TaylorAngle  = EditValues(0, TaylorAngle , 1, 420, 420, 0, 60);
		}

		if(Mod == 3)
		{
			if(Tab == 0)
			{
				if(event_press(PS4_R1))
				{
					Tab += 1;
					Display = TRUE;
				}
					ADS_Size      = EditValues(2, ADS_Size     , 1, 420, 420, 0, 60);
					ADS_FIRE_Size = EditValues(1, ADS_FIRE_Size, 1, 420, 420, 0, 60);
					HIPFIRE_Size  = EditValues(0, HIPFIRE_Size , 1, 420, 420, 0, 60);
			}

			if(Tab == 1)
			{
				if(event_press(PS4_L1))
				{
					Tab -= 1;
					Display = TRUE;
				}
					ADS_Wait_Value      = EditValues(2, ADS_Wait_Value     , 10, 420, 420, 0, 100);
					ADS_FIRE_Wait_Value = EditValues(1, ADS_FIRE_Wait_Value, 10, 420, 420, 0, 100);
					HIPFIRE_Wait_Value  = EditValues(0, HIPFIRE_Wait_Value , 10, 420, 420, 0, 100);
			}
		}

		if(Mod == 5)
		{
			InGame_Menu_Sens = EditValues(1, InGame_Menu_Sens, 1, 420, 420, 0, 20);
		}

		if(Mod == 6)
		{
			DoGzARVertical = EditValues(1, DoGzARVertical, 1, 420, 420, 0, 100);
		}

		if(Mod == 8)
		{
			DropShotSpeed = EditValues(1, DropShotSpeed, 10, 420, 420, 30, 200);
		}

		if(Mod == 18)
		{
			SlideShotWait = EditValues(1, SlideShotWait, 10, 420, 420, 30, 300);
		}

		if(Mod == 20)
		{
			HeadShotStrength = EditValues(1, HeadShotStrength,   1, 420, 420, 0,   99);
			HeadShotHoldTime = EditValues(0, HeadShotHoldTime, 100, 420, 420, 0, 4000);
		}
	}

	if(SS)
	{	
		if(ZS == 0)
			TexT1();
		if(ZS == 1)
			TexT2();

		rect_oled(0, 0, 128, 64, 0, 1);
    	CountDown += get_rtime();
		ScreenSaver();
   
		if(CountDown >= 9000)
		{
      		cls_oled(0);
      		CountDown = 0;
      		SS = FALSE;
    	}
	}
	
	if(Display)
	{
		cls_oled(0);
		CountDown = 0;

		if(ZS == 0)
		{
			print (CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 18, 0, 1, ModsString[0]);
		}
		
		if(ZS == 1)
		{
			print (CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), CenterY(OLED_FONT_SMALL_HEIGHT), 0, 1, ModsString[Mod]);

			if(Mod == 2)
			{
				print(CenterX(AimAssistType_Chars(ToggleAAType), OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, AimTypes[ToggleAAType]);

				if(ToggleAAType == 0)
					print(CenterX(AimAssistShapeP_Chars(TaylorShapes), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsPC[TaylorShapes]);
				else if(ToggleAAType == 1)
					print(CenterX(AimAssistShapeL_Chars(TaylorShapes), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsLC[TaylorShapes]);
				else if(ToggleAAType == 2)
					print(CenterX(AimAssistShapeM_Chars(TaylorShapes), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsMC[TaylorShapes]);
			}

			if(Mod == 8)
			{
				if (DropShot == 0)
					print(CenterX(sizeof(OFF)        - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
				else if (DropShot == 1)
					print(CenterX(sizeof(NIKOSDS)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, NIKOSDS[0]);
				else if (DropShot == 2)
					print(CenterX(sizeof(STANDARDDS) - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, STANDARDDS[0]);
			}
		}

		if(ZS == 2)
		{
			print (CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), 3, 0, 1, ModsString[Mod]);
			if(Mod == 1)
			{
				if(Tab == 0)
				{
					NumberToString(PolarRadius, FindDigits (PolarRadius), 21);
					NumberToString(PolarAngle , FindDigits (PolarAngle), 43);
				}
				if(Tab == 1)
				{
					NumberToString(PolarRBoost, FindDigits (PolarRBoost), 21);
					NumberToString(PolarABoost, FindDigits (PolarABoost), 43);
				}
			}

			if(Mod == 2)
			{
				NumberToString2(TaylorRadius, FindDigits (TaylorRadius), 20);
				NumberToString2(ADSSpeed    , FindDigits (ADSSpeed)    , 33);
				NumberToString2(TaylorAngle , FindDigits (TaylorAngle) , 46);
			}

			if(Mod == 3)
			{
				if(Tab == 0)
				{
					NumberToString2(ADS_Size     , FindDigits (ADS_Size)     , 20);
					NumberToString2(ADS_FIRE_Size, FindDigits (ADS_FIRE_Size), 33);
					NumberToString2(HIPFIRE_Size , FindDigits (HIPFIRE_Size) , 46);
				}
				if(Tab == 1)
				{
					NumberToString2(ADS_Wait_Value     , FindDigits (ADS_Wait_Value)     , 20);
					NumberToString2(ADS_FIRE_Wait_Value, FindDigits (ADS_FIRE_Wait_Value), 33);
					NumberToString2(HIPFIRE_Wait_Value , FindDigits (HIPFIRE_Wait_Value) , 46);
				}
			}

			if(Mod == 5)
			{
				NumberToString(InGame_Menu_Sens, FindDigits (InGame_Menu_Sens), 25);
			}

			if(Mod == 6)
			{
				NumberToString(DoGzARVertical, FindDigits (DoGzARVertical), 25);
			}

			if(Mod == 8)
			{
				NumberToString(DropShotSpeed, FindDigits (DropShotSpeed), 25);
			}

			if(Mod == 18)
			{
				NumberToString(SlideShotWait, FindDigits (SlideShotWait), 25);
			}

			if(Mod == 20)
			{
				NumberToString(HeadShotStrength , FindDigits (HeadShotStrength), 21);
				NumberToString2(HeadShotHoldTime, FindDigits (HeadShotHoldTime), 43);
			}

			if(Sel == 2)
				line_oled(30, 20, 40, 20, 3, 1);
			if(Sel == 1)
				line_oled(30, 33, 40, 33, 3, 1);
			if(Sel == 0)
				line_oled(30, 46, 40, 46, 3, 1);
		}
			rect_oled(0, 0, 128, 64, 0, 1);
			SS		= TRUE;
			Display = FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | | | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
combo cVibrate {
	set_rumble(RUMBLE_A, 90);
	wait(230);
	reset_rumble();
}

combo FlashGreen {
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo FlashRed {
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo Sticky_AA {
	Set_Val(AIM_Y, Aim_Val);
	wait(Wait_Val);
	Set_Val(AIM_X, Aim_Val);
	wait(Wait_Val);
	Set_Val(AIM_Y, inv(Aim_Val));
	wait(Wait_Val);
	Set_Val(AIM_X, inv(Aim_Val));
}

combo cPolar {
	Set_Ival(AIM_X, Radius);
	Set_Ival(AIM_Y, Radius);
	wait(20);
	Set_Ival(AIM_X, inv(Radius));
	Set_Ival(AIM_Y, inv(Radius));
	wait(20);
}

combo StrafeShot {
    Set_Val(STRAFE, inv(100));
    wait(160);
	wait(10);
    Set_Val(STRAFE, 100);
    wait(160);
	wait(10);
}

combo PumpWall {
    set_val(FIRE, 100);
    wait(50);
 	set_val(BUILD, 100);
    wait(50);
    set_val(WALL, 100);
    wait(50);
    set_val(BUILD, 100);
    wait(50);
    wait(30);
}

combo WindowEditShot {
	set_val(WALL, 100);	
	wait(90);
	set_val(WALL, 0);
	wait(90);
	set_val(BUILD, 100);
	wait(50);
	set_val(BUILD, 0);
	wait(50);
	set_val(WALL, 100);
	wait(50);
	set_val(WALL, 0);
	wait(50);
	set_val(BUILD, 100);
	wait(125);
	set_val(BUILD, 0);
	wait(125);
	set_val(WALL, 100);
	wait(100);
	wait(200);
	set_val(BUILD, 100);
	wait(100);
	set_val(BUILD, 0);
	wait(100);
}

combo cConfirm {
    set_val(CONFIRM, 100);
    wait(20);
    set_val(CONFIRM, 0);
    wait(20);
}

combo cFastReset {
	set_val(EditAssist_BUTTON, 100);
	wait(20);
	set_val(RESET, 100);
	wait(20);

	combo_run(cConfirm);
}

combo PumpSmg {
    R2_block = TRUE;
    set_val(FIRE, 100);
    wait(30);
    wait(10);
    set_val(ADS, 100);
    set_val(P_WEAPON, 100);
    wait(30);
    R2_block = FALSE;
}

combo InstantReset {
    wait(20)
    combo_run(Confirm);
}

combo Confirm {
    set_val(CONFIRM, 100);
    wait(50);
    set_val(CONFIRM, 0);
    wait(100);
}

combo RAMPFLOORWALL {
	set_val(RAMP, 100);
	wait(60);
	wait(30);
	set_val(FLOOR, 100);
	wait(60);
	wait(30);
	set_val(WALL, 100);
	wait(60);
	wait(40);
}

combo TUNNELBOX {
	wait(20);
	set_val(BUILD, 100);
	wait(30);
	set_val(AIM_Y, 100);
	wait(30);
	set_val(WALL, 100);
	set_val(AIM_X, 100);
	wait(430);
	set_val(AIM_Y, -60);
	wait(50);
	set_val(AIM_Y, -100);
	wait(120);
	set_val(N_WEAPON, 100);
	wait(40);
	set_val(AIM_Y, 100);
	wait(120);
	set_val(BUILD, 100);
	wait(30);
}

combo Aim_Abuse {
	set_val(ADS, 100);
	wait(random(440, 750)); // Hold Time Between 440ms and 730ms
	set_val(ADS, 0);
	wait(random(50, 95));  //  Release Time Between 50ms and 95ms 
}

combo cPerfectionAccuracy {
	set_val(FIRE, 100);
	wait(50);
	wait(360);
}

combo cAntiBloom {
	Set_Val(STRAFE, -100);
	wait(50);
	Set_Val(WALK, -100);
	wait(20);
	Set_Val(STRAFE, 100);
	wait(50);
	Set_Val(WALK, 100);
	wait(20);
}

combo cRapidBloom {
	set_val(FIRE, 100);
    wait(40);
    set_val(FIRE, 0);
    wait(20);
}

combo cRapidFire {
    set_val(FIRE, 100);
    wait(64);
    set_val(FIRE, 0);
    wait(34);
}

combo cDropShot {
    set_val(CROUCH, 100); 
    wait(60);
    set_val(CROUCH, 0);
    wait(30);
    wait(DropShotSpeed);
}

combo SlideShot {	
	set_val(CROUCH, 100);
	wait(SlideShotWait);
	wait(20);
}

combo NikO {
	wait(20);
	image_oled(0x0, 0xA, Color, FALSE, Frames[frame]);
	frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | S | S | _ | N | i | k | o | l | a | i | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/
function SavePVARS() {
	set_pvar(SPVAR_1,  DoGzV7Polar);
	set_pvar(SPVAR_2,  TaylorShapes);
	set_pvar(SPVAR_3,  TripleSticky);
	set_pvar(SPVAR_4,  AimAbuse);
	set_pvar(SPVAR_5,  AimSensCorrections);
	set_pvar(SPVAR_6,  DoGzSmartAR);
	set_pvar(SPVAR_7,  RapidFire);
	set_pvar(SPVAR_8,  DropShot);
	set_pvar(SPVAR_9,  PumpSMG);
	set_pvar(SPVAR_10, PumpWall);
	set_pvar(SPVAR_11, ChickenMode);
	set_pvar(SPVAR_12, FastReset);
	set_pvar(SPVAR_13, EditAssist);
	set_pvar(SPVAR_14, RampFloorWall);
	set_pvar(SPVAR_15, QuickBox);
	set_pvar(SPVAR_16, WindoWEditShot);
	set_pvar(SPVAR_17, BloomReducer);
	set_pvar(SPVAR_18, SlideShot);
	set_pvar(SPVAR_19, StrafeShot);
	set_pvar(SPVAR_20, HeadShotAssist);
	set_pvar(SPVAR_21, BuildTracker);

	set_pvar(SPVAR_22, PolarRadius);
	set_pvar(SPVAR_23, PolarAngle);
	set_pvar(SPVAR_24, PolarRBoost);
	set_pvar(SPVAR_25, PolarABoost);
	set_pvar(SPVAR_26, TaylorRadius);
	set_pvar(SPVAR_27, ADSSpeed);
	set_pvar(SPVAR_28, TaylorAngle);
	set_pvar(SPVAR_29, ADS_Size);
	set_pvar(SPVAR_30, ADS_FIRE_Size);
	set_pvar(SPVAR_31, HIPFIRE_Size);
	set_pvar(SPVAR_32, ADS_Wait_Value);
	set_pvar(SPVAR_33, ADS_FIRE_Wait_Value);
	set_pvar(SPVAR_34, HIPFIRE_Wait_Value);
	set_pvar(SPVAR_35, DropShotSpeed);
	set_pvar(SPVAR_36, InGame_Menu_Sens);
	set_pvar(SPVAR_37, DoGzARVertical);
	set_pvar(SPVAR_38, SlideShotWait);
	set_pvar(SPVAR_39, HeadShotStrength);
	set_pvar(SPVAR_40, HeadShotHoldTime);
}

function LoadPVARS() {
	DoGzV7Polar	 		 = get_pvar(SPVAR_1,   0,   1,		 0);
	TaylorShapes		 = get_pvar(SPVAR_2,   0,  13,		 0);
	TripleSticky 		 = get_pvar(SPVAR_3,   0,   1,		 0);
	AimAbuse 			 = get_pvar(SPVAR_4,   0,   1,		 0);
	AimSensCorrections	 = get_pvar(SPVAR_5,   0,   1,		 0);
	DoGzSmartAR 	   	 = get_pvar(SPVAR_6,   0,   1,		 0);
	RapidFire 			 = get_pvar(SPVAR_7,   0,   1,		 0);
	DropShot 			 = get_pvar(SPVAR_8,   0,   2,		 0);
	PumpSMG 			 = get_pvar(SPVAR_9,   0,   1,		 0);
	PumpWall 			 = get_pvar(SPVAR_10,  0,   1,		 0);
	ChickenMode 		 = get_pvar(SPVAR_11,  0,   1,		 0);
	FastReset	 		 = get_pvar(SPVAR_12,  0,   1,		 0);
	EditAssist	 		 = get_pvar(SPVAR_13,  0,   1,		 0);
	RampFloorWall 	 	 = get_pvar(SPVAR_14,  0,   1,		 0);
	QuickBox			 = get_pvar(SPVAR_15,  0,   1,		 0);
	WindoWEditShot		 = get_pvar(SPVAR_16,  0,   1,		 0);
	BloomReducer		 = get_pvar(SPVAR_17,  0,   1,		 0);
	SlideShot		 	 = get_pvar(SPVAR_18,  0,   1,		 0);
	StrafeShot		 	 = get_pvar(SPVAR_19,  0,   1,		 0);
	HeadShotAssist		 = get_pvar(SPVAR_20,  0, 	1,		 0);
	BuildTracker		 = get_pvar(SPVAR_21,  0, 	1,		 0);

	PolarRadius 		 = get_pvar(SPVAR_22,  0,   60,		15);
	PolarAngle 		  	 = get_pvar(SPVAR_23,  0,   60,		15);
	PolarRBoost 		 = get_pvar(SPVAR_24,  0,   60,		 4);
	PolarABoost 		 = get_pvar(SPVAR_25,  0,   60,		 6);
	TaylorRadius		 = get_pvar(SPVAR_26,  0,   60,		15);
	ADSSpeed			 = get_pvar(SPVAR_27,  0,   60,		20);
	TaylorAngle			 = get_pvar(SPVAR_28,  0,   60,		15);
	ADS_Size    		 = get_pvar(SPVAR_29,  0,   60,		11);
	ADS_FIRE_Size 		 = get_pvar(SPVAR_30,  0,   60,		12);
	HIPFIRE_Size 		 = get_pvar(SPVAR_31,  0,   60,		13);
	ADS_Wait_Value    	 = get_pvar(SPVAR_32,  0,  100,		30);
	ADS_FIRE_Wait_Value  = get_pvar(SPVAR_33,  0,  100,		40);
	HIPFIRE_Wait_Value 	 = get_pvar(SPVAR_34,  0,  100,		30);
	DropShotSpeed     	 = get_pvar(SPVAR_35,  0,  200,		80);
	InGame_Menu_Sens 	 = get_pvar(SPVAR_36,  0,   20,		10);
	DoGzARVertical	 	 = get_pvar(SPVAR_37,  0,  100,		20);
	SlideShotWait 	 	 = get_pvar(SPVAR_38, 30,  300,	   150);
	HeadShotStrength	 = get_pvar(SPVAR_39,  0,   99,		20);
	HeadShotHoldTime	 = get_pvar(SPVAR_40,  0, 4000,	  1500);
}

function ResetScriptVARS() {
	DoGzV7Polar     	 =    0;
	TaylorShapes		 =    0;
 	AimAbuse           	 =    0;
	AimSensCorrections   =    0;
    DoGzSmartAR          =    0;
    RapidFire            =    0;
    DropShot             =    0;
    PumpSMG              =    0;
    PumpWall             =    0;
    ChickenMode          =    0;
    FastReset 		     =    0;
	EditAssist		     =    0;
	RampFloorWall      	 =    0;
	QuickBox		     =    0;
	WindoWEditShot       =    0;
	BloomReducer         =    0;
	SlideShot			 =    0;
	StrafeShot			 =    0;
	HeadShotAssist		 =	  0;
	BuildTracker		 =	  0;

	PolarRadius 	  	 =   15;
	PolarAngle  	  	 =   15;
	PolarRBoost    		 =    4;
	PolarABoost    		 =    6;
	TaylorRadius		 =   15;
	ADSSpeed			 =   20;
	TaylorAngle			 =   15;
	ADS_Size             =   10;
	ADS_FIRE_Size      	 =   11;
	HIPFIRE_Size         =   12;
	ADS_Wait_Value       =   30;
	ADS_FIRE_Wait_Value  =   40;
	HIPFIRE_Wait_Value   =   30;
	DropShotSpeed     	 =   80;
	InGame_Menu_Sens 	 =   10;
	DoGzARVertical 	  	 =   20;
	SlideShotWait		 =  150;
	HeadShotStrength 	 =   20;
	HeadShotHoldTime 	 = 1500;
}

function NikO_Check() {
	if(!combo_running(NikO) && frame <= 15)
		combo_restart(NikO);
}

function EditAssist() {
    EditT += get_rtime();

	if (get_ival(EditAssist_BUTTON))
	{
		if (EditT >= EditDelay)
			EditPress(EditAssist_BUTTON);
	}
}

function EditPress(Button) {
    if (get_ival(Button))
        return;
	set_val(Button, 100);
}

function LEDBlink(Toggle) {
    if(Toggle)
        combo_run(FlashGreen);
    else
        combo_run(FlashRed);
}

function DoNotAtMePolar(Stick, Angle, Rad) {
	if(TaylorShapes == 1)
	{  
	 	if(AngleDirection)
		{
	  		Set_Val(Stick + 8, (Rad * SIN(Angle)) / 100);
	 		Set_Val(Stick + 7, (Rad * COS(Angle)) / 100);
	 	}
		else
		{
	 		Set_Val(Stick + 8, (Rad * COS(Angle)) / 100);
	 		Set_Val(Stick + 7, (Rad * SIN(Angle)) / 100);
	 	}
 	}

 	if(TaylorShapes == 2)
	{ 		
  		if(AngleDirection)
		{
  		    Set_Val(Stick + 8, (Rad     * SIN(Angle)) / 100);
  			Set_Val(Stick + 7, (Rad / 2 * COS(Angle)) / 100);
  		}
		else
		{
  			Set_Val(Stick + 8, (Rad     * COS(Angle))  / 100);
  			Set_Val(Stick + 7, (Rad / 2 * SIN(Angle))  / 100);
  		}
  	}

  	if(TaylorShapes == 3)
	{
  	    if(AngleDirection)
		{
  		    Set_Val(Stick + 8, (Rad / 2 * SIN(Angle))  / 100);
  			Set_Val(Stick + 7, (Rad     * COS(Angle))  / 100);
  	    }
		else
		{ 
  	    	Set_Val(Stick + 8, (Rad / 2 * COS(Angle))  / 100);
  			Set_Val(Stick + 7, (Rad     * SIN(Angle))  / 100);
  		} 
  	}

  	if(TaylorShapes == 4)
	{
		Spiral(Rad);

			if(AngleDirection)
			{ 
				Set_Val(Stick + 8, (InnerSpiral * SIN(Angle))  / 100);
				Set_Val(Stick + 7, (OuterSpiral * COS(Angle))  / 100);
			}
			else
			{
				Set_Val(Stick + 8, (InnerSpiral * COS(Angle))  / 100);
				Set_Val(Stick + 7, (OuterSpiral * SIN(Angle))  / 100);
  		} 
  	}

  	if(TaylorShapes == 5)
	{
		Spiral(Rad);

			if(AngleDirection)
			{ 
				Set_Val(Stick + 8, (InnerSpiral * SIN(Angle)) / 100);
				Set_Val(Stick + 7, (OuterSpiral * COS(Angle)) / 100);
			}
			else
			{
				Set_Val(Stick + 8, (InnerSpiral * COS(Angle)) / 100);
				Set_Val(Stick + 7, (OuterSpiral * SIN(Angle)) / 100);
			}
  	}

	if(TaylorShapes == 6)
	{
  		Helix();

			Set_Val(Stick + 8, (Rad * X)  / 100);
			Set_Val(Stick + 7, (Rad * Y)  / 100);
	}

	if(TaylorShapes == 7) 
	{ 
		Set_Val(Stick + 8, (Rad * COS(Angle)) / 100);
	} 

	if(TaylorShapes == 8) 
	{ 
		Set_Val(Stick + 7, (Rad * COS(Angle)) / 100);
	}

	if(TaylorShapes == 9)
	{ 
		if(Position == 0)
		{
			Set_Val(Stick + 7, (Rad * COS(135 + Angle)) / 100);
		    Set_Val(Stick + 8, (Rad * SIN(45  + Angle)) / 100);
		} 

		if(Position == 1)
		{
			Set_Val(Stick + 7, (Rad * COS(45  + Angle)) / 100);
		    Set_Val(Stick + 8, (Rad * SIN(135 + Angle)) / 100);
	    }  

		Position ++;

		if(Position == 2)
		{
		  	Position = 0;
		}
    }

    if(TaylorShapes == 10)
	{ 
    	Set_Val(Stick + 7, (Rad * COS(315 + Angle))  / 100);
  		Set_Val(Stick + 8, (Rad * SIN(180 + Angle))  / 100);
  	}

  	if(TaylorShapes == 11)
	{
  		Set_Val(Stick + 7, (Rad * COS(135 + Angle))  / 100);
  		Set_Val(Stick + 8, (Rad * SIN(45  + Angle))  / 100);
    } 

    if(TaylorShapes == 12)
	{
    	Set_Val(Stick + 7, (Rad * COS(45  + Angle))  / 100);
  		Set_Val(Stick + 8, (Rad * SIN(135 + Angle))  / 100);
  	}

	if(TaylorShapes == 13)
	{
    	Set_Val(Stick + 7, (Rad * COS(180 + Angle)) / 100);
  		Set_Val(Stick + 8, (Rad * SIN(315 + Angle)) / 100);
  	}
}

function correctAngle(angle) {
	if(angle < 0)
		angle = 360 + (angle % 360);
	angle = (angle + 90) % 360;
		return angle;
}

function SIN(angle) {
	if(ToggleAAType == 0)
		return PolarArray[correctAngle(angle)];
	return LinearArray[correctAngle(angle)]; 
}

function COS(angle) {
	if(ToggleAAType == 0)
		return PolarArray[(correctAngle(angle) + 90) % 360];
	return LinearArray[(correctAngle(angle) + 90) % 360];
}

function Helix() {
	Inc = (I % 100);

	if(Position == 0)
	{
		X = Inc;
		Y = 100 - Inc;
	}
	else if (Position == 1)
	{
		X = 100 - Inc;
		Y = - Inc;
	}
	else if (Position == 2)
	{
    	X = -Inc;
		Y = -100 + Inc;
	}
	else if(Position == 3)
	{
		X = -100 + Inc;
		Y = Inc;
	}

	Position ++;

	if(Position == 4)
	{
		Position = 0;
	}
}

function Spiral(x_Var) {
	if(!(CycleRefresh++ % TimeInterval))
	{
		if(!SpiralPosition1)
		{
			InnerSpiral -= 1;

			if(InnerSpiral < x_Var / 2)
				SpiralPosition1 = TRUE;
		}
		else
		{
		    InnerSpiral += 1;

			if(InnerSpiral > x_Var)
				SpiralPosition1 = FALSE;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;

			if(OuterSpiral < x_Var / 2)
				SpiralPosition2 = TRUE;
		}
		else
		{
			OuterSpiral += 1;

			if(OuterSpiral >  x_Var)
				SpiralPosition2 = FALSE;
		}
			CycleRefresh = 0;
	}
}

function Set_Val(Input, OutPut) {
	set_val(Input, clamp(OutPut * (100 - abs(get_val(Input))) / 100 + get_val(Input), -100, 100));
		return;
}

function Set_Ival(Input, Output) {
	set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
		return;
}

function InitializeShapeChange() {
	if(TaylorShapes == 4)
	{
		InnerSpiral = TaylorRadius / 2;
		OuterSpiral = TaylorRadius;
	}
}

function Cycle(Value, Min, Max) {
	if(Value > Max)
		return Min;
	if(Value < Min)
		return Max;
	return Value;
}

function RemoveStickNoise() {
	if(isqrt(pow(get_ival(AIM_Y), 2) + pow(get_ival(AIM_X), 2)) <= DeadZone)
	{
		set_val(AIM_Y, 0);
		set_val(AIM_X, 0);
	}

	if(isqrt(pow(get_ival(STRAFE), 2) + pow(get_ival(WALK), 2)) <= DeadZone)
	{
		set_val(STRAFE, 0);
		set_val(WALK  , 0);
	}
}

function PS4CrossOver() {
 	if(get_console() == PIO_PS4)
    {
        if(get_controller() != PIO_PS4) // If not PS4 controller:
        {
            if(get_ival(PS4_SHARE)) // View
            {
                if(get_ival(PS4_R3)) // RS + View =  ScreenShot
                {
                    set_val(PS4_SHARE, 100);
                    set_val(PS4_TOUCH,   0);
                    set_val(PS4_R3   ,   0);
                }
                else // View only = PS4_TOUCH
                {
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE,   0);
                }
            }
        }
    }
    else if(get_console() == PIO_XB360) // If XBOX console
    {
        if(get_controller() == PIO_PS4) // If PS4 controller:
            swap(PS4_TOUCH, PS4_SHARE);
    }
}

function NumberToString(f_Value, f_Digits, f_Idx) {
	I 			  =    0x1;
	digitindex_1  = 0x2710;

	if (f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

	for (charindex_1  = 5; charindex_1 >= 1; charindex_1--)
	{
		if (f_Digits >= charindex_1)
		{
			putc_oled(I, (f_Value / digitindex_1) + 48);
			f_Value %= digitindex_1;
			I++;
			if (charindex_1 == 4)
			{
				putc_oled(I, 44);
				I++;
			}
		}
		digitindex_1 /= 0xA;
	}
		puts_oled(CenterX(I - 1, OLED_FONT_MEDIUM_WIDTH), f_Idx, OLED_FONT_MEDIUM, I - 1, OLED_WHITE);
}

function NumberToString2(f_Value, f_Digits, x2) {
	I 			  =    0x1;
	digitindex_1  = 0x2710;

	if (f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
	{
		if (f_Digits >= charindex_1)
		{
			putc_oled(I, (f_Value / digitindex_1) + 48);
			f_Value %= digitindex_1;
			I++;
			if (charindex_1 == 4)
			{
				putc_oled(I, 44);
				I++;
			}
		}
		digitindex_1 /= 0xA;
	}
		puts_oled(CenterX(I - 1, OLED_FONT_SMALL_WIDTH), x2, OLED_FONT_SMALL, I - 1, OLED_WHITE);
}

function FindDigits(Number) {
    logVal = 0;

    do
    {
        Number /= 10;
        logVal++;
    }
        while (Number);
    return logVal;
}

function BlockAllInPuts() {
	block_all_inputs();
}

function BlockAllOutPuts() {
	set_val(PS4_L2      , 0);
	set_val(PS4_R2      , 0);
	set_val(PS4_L1      , 0);
	set_val(PS4_R1      , 0);
	set_val(PS4_L3      , 0);
	set_val(PS4_R3      , 0);
	set_val(PS4_UP      , 0);
	set_val(PS4_DOWN    , 0);
	set_val(PS4_LEFT    , 0);
	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS   , 0);
	set_val(PS4_SQUARE  , 0);
	set_val(PS4_CIRCLE  , 0);
	set_val(PS4_TRIANGLE, 0);
}

function CenterX(f_Chars, f_Font) {
      return (OLED_WIDTH / 2) - ((f_Chars * f_Font) / 2);
}

function CenterY(f_Size) {
    return (OLED_HEIGHT  / 2) - (f_Size / 2);
} 

function GetChars(f_Idx) {
	if (ModsString[f_Idx + 1] != -1)
		return ModsString[f_Idx + 1] - ModsString[f_Idx] - 1;
	return sizeof(ModsString) - ModsString[f_Idx];
}

function AimAssistType_Chars(f_Idx) {
	if (AimTypes[f_Idx + 1] != -1)
		return AimTypes[f_Idx + 1] - AimTypes[f_Idx] - 1;
	return sizeof(AimTypes) - AimTypes[f_Idx];
}

function AimAssistShapeP_Chars(f_Idx) {
	if (AimPatternsPC[f_Idx + 1] != -1)
		return AimPatternsPC[f_Idx + 1] - AimPatternsPC[f_Idx] - 1;
	return sizeof(AimPatternsPC) - AimPatternsPC[f_Idx];
}

function AimAssistShapeL_Chars(f_Idx) {
	if (AimPatternsLC[f_Idx + 1] != -1)
		return AimPatternsLC[f_Idx + 1] - AimPatternsLC[f_Idx] - 1;
	return sizeof(AimPatternsLC) - AimPatternsLC[f_Idx];
}

function AimAssistShapeM_Chars(f_Idx) {
	if (AimPatternsMC[f_Idx + 1] != -1)
		return AimPatternsMC[f_Idx + 1] - AimPatternsMC[f_Idx] - 1;
	return sizeof(AimPatternsMC) - AimPatternsMC[f_Idx];
}

function EditValues(ValIdx, ValueIndex, ValIncrement, HoldTimeInc, HoldTimeDec, Min, Max) {
	if(Sel == ValIdx)
	{ 
		if(event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= HoldTimeInc))
		{
			ValueIndex = Cycle(ValueIndex + ValIncrement, Min, Max); 
			Display    = TRUE;
			ptime      =    0;
		}
		if(event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= HoldTimeDec))
		{
			ValueIndex = Cycle(ValueIndex - ValIncrement, Min, Max);
			Display	   = TRUE;
			ptime      =    0;
		}
	}
		return ValueIndex;
}

function ToggleSwitch(ModIdx, ModVar, Min, Max) {
	if(Mod == ModIdx)
	{
		if(event_press(PS4_CROSS))
		{ 
			ModVar  = Cycle(ModVar + 1, Min, Max);
			Display = TRUE;
		}

			if(ModVar)
				set_rgb(0, 255, 0);
			else
				set_rgb(255, 0, 0);
	}
		return ModVar;
}

const uint8 EdiTableMods[]  = { 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1 };
const int8 PolarArray[]  	= { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8 LinearArray[] 	= { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};
const image Frames[] 	    = {
							  { 23, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x03, 0xE0, 0x00, 0x0F, 128, 0x00, 0x3E, 0x00, 0x00, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x70, 0x00, 0x01, 0xE0, 0x00, 0x03, 0xC0, 0x00, 0x01, 0x00}, {27, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0x00, 0x03, 0xFC, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x3E, 0xF0, 0x00, 0x07, 0x8C, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x1E, 0xC0, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x00, 0x01, 0x0F, 0x00, 0x00, 0x73, 0xC0, 0x00, 0x1F, 0xF8, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x1F, 0x00}, {35, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x03, 0xFC, 0x3E, 0x00, 0x00, 0xFF, 0xCF, 128, 0x00, 0x3E, 0xF3, 0xC0, 0x00, 0x07, 0x8C, 0xF8, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x1E, 0xC3, 0xE0, 0x00, 0x03, 0xFE, 0x3C, 0x00, 0x00, 0x3F, 0xC3, 128, 0x00, 0x01, 0xF8, 0x00, 0x00, 0x01, 0x0F, 0x20, 0x00, 0x00, 0x73, 0xCE, 0x00, 0x00, 0x1F, 0xFB, 0xE0, 0x00, 0x03, 0xFE, 0x78, 0x00, 0x00, 0x1F, 0x02, 0x00}, {39, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x03, 0xFC, 0x3F, 128, 0x00, 0x0F, 0xFC, 0xFF, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x00, 0x00, 0x78, 0xCF, 0x8C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0x00, 0x01, 0xEC, 0x3E, 0xC0, 0x00, 0x03, 0xFE, 0x3F, 0xC0, 0x00, 0x03, 0xFC, 0x3F, 0xC0, 0x00, 0x01, 0xF8, 0x1F, 128, 0x00, 0x10, 0xF2, 0x0F, 0x00, 0x00, 0x73, 0xCE, 0x3C, 0x00, 0x01, 0xFF, 0xBF, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE0, 0x00, 0x01, 0xF0, 0x3F, 0x00}, {45, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE0, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xC0, 0x00, 0x3F, 0xE3, 0xFC, 0x7E, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 100, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xE8, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x00, 0x00, 0x7F, 0xEF, 0xFE, 0x70, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 128, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x00}, {52, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x70, 0x00, 0x07, 0xFE, 0x7F, 0xE7, 0x07, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE0, 0x00, 0x0F, 0x19, 0xF1, 0x8F, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE0, 0x00, 0x0F, 0x61, 0xF6, 0x0F, 0xDE, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC0, 0x00, 0x07, 0xF8, 0x7F, 0x9D, 0xDC, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xC0, 0x00, 0x08, 0x79, 0x07, 0x9D, 0xFC, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 128, 0x00, 0x3F, 0xF7, 0xFF, 0x38, 0xF8, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x00, 0x00, 0x0F, 0x81, 0xF8, 0x78, 0x70}, {58, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x70, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x00}, {64, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1E, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1E, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3C, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3C, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78}, {72, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC0, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 128, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xC0, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xC0}, {78, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0C, 0x00, 0x01, 0xFF, 0x9F, 0xF9, 0xC1, 0xC7, 0x1C, 0x78, 0xE0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 128, 0x00, 0x3C, 0x67, 0xC6, 0x3E, 0x38, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0x00, 0x03, 0xD8, 0x7D, 0x83, 0xF7, 0x9E, 0x7F, 0x07, 128, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x00, 0x00, 0x1F, 0xE1, 0xFE, 0x77, 0x71, 0xC7, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC0, 0x00, 0x02, 0x1E, 0x41, 0xE7, 0x7F, 0x3C, 0xFF, 0x8F, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x00, 0x00, 0xFF, 0xDF, 0xFC, 0xE3, 0xE3, 0x8E, 0x7C, 0xF0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xC0, 0x00, 0x03, 0xE0, 0x7E, 0x1E, 0x1C, 0x71, 0xE3, 0xE2, 0x00}, {83, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x00, 0x00, 0xFF, 0xCF, 0xFC, 0xE0, 0xE3, 0x8E, 0x3C, 0x7F, 0xC0, 0x00, 0x3E, 0xF3, 0xCF, 0x1E, 0x38, 0xE3, 0x8F, 0x1F, 0xF8, 0x00, 0x07, 0x8C, 0xF8, 0xC7, 0xC7, 0x1C, 0x73, 0xC7, 0x87, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE0, 0x00, 0x1E, 0xC3, 0xEC, 0x1F, 0xBC, 0xF3, 0xF8, 0x3C, 0x1C, 0x00, 0x03, 0xFE, 0x3F, 0xC7, 0xF7, 0x1C, 0x7E, 0x07, 0x07, 128, 0x00, 0x3F, 0xC3, 0xFC, 0xEE, 0xE3, 0x8F, 0xC0, 0xE0, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x00, 0x01, 0x0F, 0x20, 0xF3, 0xBF, 0x9E, 0x7F, 0xC7, 0x87, 128, 0x00, 0x73, 0xCE, 0x3C, 0xE3, 0xE3, 0x8E, 0x78, 0xF1, 0xF0, 0x00, 0x1F, 0xFB, 0xFF, 0x9C, 0x7C, 0x71, 0xCF, 0x9F, 0xFC, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x00, 0x00, 0x1F, 0x03, 0xF0, 0xF0, 0xE3, 0x8F, 0x1F, 0x1F, 128}, {93, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0x83, 0x07, 0x1C, 0x70, 0xF0, 0xFC, 0x1C, 0x00, 0x00, 0x3F, 0xF3, 0xFF, 0x38, 0x38, 0xE3, 0x8F, 0x1F, 0xF1, 0xE0, 0x00, 0x03, 0xEF, 0x3C, 0xF1, 0xE3, 0x8E, 0x38, 0xF1, 0xFF, 0x8E, 0x00, 0x00, 0x1E, 0x33, 0xE3, 0x1F, 0x1C, 0x71, 0xCF, 0x1E, 0x1C, 0x70, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x00, 0x07, 0xB0, 0xFB, 0x07, 0xEF, 0x3C, 0xFE, 0x0F, 0x07, 0x3C, 0x00, 0x00, 0x3F, 0xE3, 0xFC, 0x7F, 0x71, 0xC7, 0xE0, 0x70, 0x79, 0xC0, 0x00, 0x00, 0xFF, 0x0F, 0xF3, 0xBB, 0x8E, 0x3F, 0x03, 0x83, 0xCE, 0x00, 0x00, 0x01, 0xF8, 0x1F, 0x9D, 0xFC, 0xF3, 0xFC, 0x3C, 0x1C, 0x70, 0x00, 0x00, 0x43, 0xC8, 0x3C, 0xEF, 0xE7, 0x9F, 0xF1, 0xE1, 0xE7, 0x18, 0x00, 0x07, 0x3C, 0xE3, 0xCE, 0x3E, 0x38, 0xE7, 0x8F, 0x1F, 0x39, 0xE0, 0x00, 0x7F, 0xEF, 0xFE, 0x71, 0xF1, 0xC7, 0x3E, 0x7F, 0xF1, 0xFE, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE0, 0x00, 0x07, 0xC0, 0xFC, 0x3C, 0x38, 0xE3, 0xC7, 0xC7, 0xE0, 0xFE, 0x00}, {104, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x00, 0x00, 0x7F, 0xE7, 0xFE, 0x70, 0x71, 0xC7, 0x1E, 0x3F, 0xE3, 0xC0, 0x0F, 0x00, 0x00, 0xFB, 0xCF, 0x3C, 0x78, 0xE3, 0x8E, 0x3C, 0x7F, 0xE3, 128, 0x1E, 0x00, 0x00, 0xF1, 0x9F, 0x18, 0xF8, 0xE3, 0x8E, 0x78, 0xF0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0x00, 0x00, 0xF6, 0x1F, 0x60, 0xFD, 0xE7, 0x9F, 0xC1, 0xE0, 0xE7, 128, 0x78, 0x00, 0x00, 0xFF, 0x8F, 0xF1, 0xFD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0x70, 0x00, 0x00, 0x7F, 0x87, 0xF9, 0xDD, 0xC7, 0x1F, 0x81, 0xC1, 0xE7, 0x00, 0xF0, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xF0, 0x00, 0x00, 0x87, 0x90, 0x79, 0xDF, 0xCF, 0x3F, 0xE3, 0xC3, 0xCE, 0x31, 0xF0, 0x00, 0x01, 0xCF, 0x38, 0xF3, 0x8F, 0x8E, 0x39, 0xE3, 0xC7, 0xCE, 0x79, 0xE0, 0x00, 0x03, 0xFF, 0x7F, 0xF3, 0x8F, 0x8E, 0x39, 0xF3, 0xFF, 0x8F, 0xF3, 0xC0, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 128, 0x00, 0x00, 0xF8, 0x1F, 0x87, 0x87, 0x1C, 0x78, 0xF8, 0xFC, 0x1F, 0xC7, 128}, {114, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC0, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0x00, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x00, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x00, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x0F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x03, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {122, 48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x7E, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0xC3, 0xF8, 0x30, 0x71, 0xC7, 0x0F, 0x0F, 0xC1, 0xC0, 0x0F, 0x81, 0xC3, 0x00, 0x00, 0x1F, 0xF9, 0xFF, 0x9C, 0x1C, 0x71, 0xC7, 0x8F, 0xF8, 0xF0, 0x03, 0xF0, 0x70, 0xC0, 0x00, 0x0F, 0xBC, 0xF3, 0xC7, 0x8E, 0x38, 0xE3, 0xC7, 0xFE, 0x38, 0x01, 0xFE, 0x3C, 0x20, 0x00, 0x03, 0xC6, 0x7C, 0x63, 0xE3, 0x8E, 0x39, 0xE3, 0xC3, 0x8E, 0x00, 0xF7, 0x8E, 0x08, 0x00, 0x00, 0xE0, 0x1E, 0x00, 0xF8, 0xE3, 0x8E, 0xF0, 0xE0, 0xE3, 128, 0x3C, 0xE3, 128, 0x00, 0x00, 0x3D, 0x87, 0xD8, 0x3F, 0x79, 0xE7, 0xF0, 0x78, 0x39, 0xE0, 0x1E, 0x38, 0xE0, 0x00, 0x00, 0x0F, 0xF8, 0xFF, 0x1F, 0xDC, 0x71, 0xF8, 0x1C, 0x1E, 0x70, 0x07, 0x1E, 0x78, 0x00, 0x00, 0x01, 0xFE, 0x1F, 0xE7, 0x77, 0x1C, 0x7E, 0x07, 0x07, 0x9C, 0x03, 0xCF, 0x1C, 0x00, 0x00, 0x00, 0x1F, 0x81, 0xF9, 0xDF, 0xCF, 0x3F, 0xC3, 0xC1, 0xC7, 0x00, 0xFF, 0xC7, 0x00, 0x00, 0x00, 0x21, 0xE4, 0x1E, 0x77, 0xF3, 0xCF, 0xF8, 0xF0, 0xF3, 0x8C, 0x7F, 0xF3, 0xC0, 0x00, 0x00, 0x1C, 0xF3, 0x8F, 0x38, 0xF8, 0xE3, 0x9E, 0x3C, 0x7C, 0xE7, 0x9F, 0xF8, 0xF0, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xCE, 0x3E, 0x38, 0xE7, 0xCF, 0xFE, 0x3F, 0xCF, 0x0E, 0x38, 0x00, 0x00, 0x23, 0xFE, 0x7F, 0xE3, 0x87, 0x1E, 0x78, 0xF1, 0xFF, 0x1F, 0xE7, 0x83, 0x8E, 0x00, 0x00, 0x18, 0x3E, 0x07, 0xE1, 0xE1, 0xC7, 0x1E, 0x3E, 0x3F, 0x07, 0xF1, 0xE1, 0xE3, 128, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 128, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }

//--Variables ( Leave Alone )
	int DoGzARVertical;
	int PolarRadius;
	int PolarAngle;
	int PolarRBoost;
	int PolarABoost;
	int DropShotSpeed
	int TaylorRadius;
	int ADSSpeed;
	int TaylorAngle;
	int ADS_Size;
	int ADS_FIRE_Size;
	int HIPFIRE_Size;
	int ADS_Wait_Value;
	int ADS_FIRE_Wait_Value;
	int HIPFIRE_Wait_Value;
	int InGame_Menu_Sens;
	int SlideShotWait;
	int HeadShotStrength;
	int HeadShotHoldTime;

//--Variable Just Leave Alone
	int RY;
	int tap; 
	int ptime;
	int Edit1;
	int EditT;
	int frame;
	int OneShot;
	int logVal;
	int R2_block;
	int CycleRefresh;
	int Droppy_Shotty;
	int Aim_Val, Wait_Val;
	int Axis, Radius, Speed;
	int Angle, I, Inc, X, Y;
	int BuildTrack, BuildCount;
	int charindex_1, digitindex_1;
	int ADS_Grenade_Sens, ADS_Fire_Sens, Sens, Actual_Sens;
	int BoostAR, AxisCY, AxisLY, TimeValue, OutPut, RumValue, RecoilTimer;
	int SpiralPosition1, InnerSpiral, OuterSpiral, SpiralPosition2, Position;
	int X1 = 60,X2 = 68,X3 = 76,X4 = 84,X5 = 92,X6 = 100,X7 = 108,X8 = 116,X9 = 124,X10 = 132,X11 = 140,X12 = 148,X13 = 156,X14 = 164,X15 = 172,X16 = 180,X17 = 188,X18 = 196,X19 = 204,X20 = 212,X21 = 220,X22 = 228,X23 = 236,X24 = 244,X25 = 252,X26 = 260,X27 = 268,X28 = 276;
	int BuildSyncTime 		 = 2000;
	int Color		  		 =    1;
	int AngleDirection       = TRUE;
	define DoGzARPullPower 	 =   40; // [1  -  100] = Pull Power RY Axis [Timed]  
	define DoGzARTime      	 =   60; // [10 - 1000] = Pull Time  RY Axis [Timed] 
	define MAX_DRIFT  		 =   15;
	define TimeInterval      = 	  4;
	define YY 				 =    2;

//--Menu Stuff ( Leave Alone )	
	define NumOfMods =   21;
	int Sel 		 =    1;
	int Tab 		 =    0;
	int Mod 		 =    1;
	int Display 	 = TRUE;
	int SS 		 	 = TRUE;
	int ZS;
	int CountDown;

//--Toggles
int DoGzV7Polar;
int TaylorShapes; // Shapes
int ToggleAAType; // Curve
int TripleSticky;
int AimAbuse;
int AimSensCorrections;
int DoGzSmartAR;
int RapidFire;
int DropShot;
int PumpSMG;
int PumpWall;
int ChickenMode;
int FastReset;
int EditAssist;
int RampFloorWall;
int QuickBox;
int WindoWEditShot;
int BloomReducer;
int SlideShot;
int StrafeShot;
int HeadShotAssist;
int BuildTracker;

const string ModsString[] = {
	"Hold L2 + OPTIONS",	//  0
	"DoGz Polar",			//  1 -
	"DoNotAtME Polar",		//  2
	"Triple Sticky",		//  3
	"Aim Abuse",			//  4
	"Aim Corrections",		//  5
	"Anti Recoil",			//  6
	"Rapid Fire",			//  7
	"Drop Shot",			//  8
	"Pump SMG",				//  9
	"Pump Wall",			// 10
	"Chicken Mode",			// 11
	"Fast Reset",			// 12
	"Edit Assist",			// 13
	"Ramp Floor Wall",		// 14
	"Safety Box",			// 15
	"Window Edit Shot",		// 16
	"Anti Bloom Reducer",	// 17
	"Slide Shot",			// 18
	"Strafe Mod",			// 19
	"Head Shot Assist",		// 20
	"Build Tracker",		// 21 -
	""
};

//--Taylor Shapes & Types
const string AimTypes[]      = { "< Polar Curve >","< Linear Curve >", "< Mixed Curve >", "" }; 
const string AimPatternsPC[] = { "< Select Shape >","Circle", "Tall Oval", "Wide Oval", "Vortex Oval", "Spiral", "Helix", "KITT", "Horizontal Flare", "Tartan Army", "Jupiter", "Bishop", "Blade", "Oscilirate", "" };
const string AimPatternsLC[] = { "< Select Shape >","Diamond", "Tall Diamond", "Wide Diamond", "Spiral Prism", "Spiral Diamond", "Helix Diamond", "KITT", "Horizontal Flare ", "Tartan Army", "Jupiter", "Bishop", "Blade", "Oscilirate", "" };
const string AimPatternsMC[] = { "< Select Shape >","Hexagon", "Tall Hex", "Wide Hex", "Spiral Hex V1", "Spiral Hex V2", "Helix Hex", "Kitt Hex", "Vertical Hex", "Tartan Hex", "Jupiter Hex", "Bishop Hex", "Blade Hex", "Oscilirate Hex", "" };

//--Drop Shot Types
const string OFF 	         = "Choose Type";
const string STANDARDDS      = "Standard DropShot";
const string NIKOSDS	     = "Nikos DropShot";

function TexT1() {
	putc_oled(1,ASCII_UPPER_F);
	puts_oled(X1, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(X2, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(X3, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X4, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(X5, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(X6, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X7, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(X8, YY, 0, 1, 1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(X9, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_B);
	puts_oled(X10, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_Y);
	puts_oled(X11, YY, 0, 1, 1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(X12, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(X13, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(X14, YY, 0, 1, 1);
	putc_oled(1,ASCII_UNDERSCORE);
	puts_oled(X15, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(X16, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(X17, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_K);
	puts_oled(X18, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(X19, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(X20, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_A);
	puts_oled(X21, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(X22, YY, 0, 1, 1);
	
	FaLL();
}

function TexT2() {
	putc_oled(1,ASCII_UPPER_P);
	puts_oled(X1, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(X2, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(X3, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(X4, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(X5, YY, 0, 1, 1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(X6, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_X);
	puts_oled(X7, YY, 0, 1, 1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(X8, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X9, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(X10, YY, 0, 1, 1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(X11, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X12, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(X13, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(X14, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(X15, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(X16, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(X17, YY, 0, 1, 1);

	putc_oled(1,ASCII_SPACE);
	puts_oled(X18, YY, 0, 1, 1);
	
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X20, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(X21, YY, 0, 1, 1);
	
	putc_oled(1,ASCII_SPACE);
	puts_oled(X22, YY, 0, 1, 1);
	
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(X23, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_D);
	puts_oled(X24, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(X25, YY, 0, 1, 1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(X26, YY, 0, 1, 1);

	rect_oled(X19 - 4, YY,  9, 9, 0, 1);
	rect_oled(X19 - 3, YY + 1, 7, 7, 0, 0);
	rect_oled(X19 + 5, YY,  1, 9, 1, 0);

	FaLL();
}

function FaLL() {
	X1--;X2--;X3--;X4--;X5--;X6--;X7--;X8--;X9--;X10--;
	X11--;X12--;X13--;X14--;X15--;X16--;X17--;X18--;X19--;X20--;
	X21--;X22--;X23--;X24--;X25--;X26--;X27--;X28--;
}

function ScreenSaver() {
	line_oled(0, 13, 127, 13, 1, 1);
	rect_oled(0,  0,  15, 14, 1, 0);
	rect_oled(0,  0,  15, 14, 0, 1);

	if(CountDown < 1000)
	{
    	putc_oled(1, ASCII_DIGIT9);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 1000)
	{
    	putc_oled(1, ASCII_DIGIT8);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 2000)
	{
    	putc_oled(1, ASCII_DIGIT7);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 3000)
	{
    	putc_oled(1, ASCII_DIGIT6);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 4000)
	{
    	putc_oled(1, ASCII_DIGIT5);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 5000)
	{
    	putc_oled(1, ASCII_DIGIT4);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 6000)
	{
    	putc_oled(1, ASCII_DIGIT3);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown > 7000)
	{
    	putc_oled(1, ASCII_DIGIT2);
		puts_oled(4, 3, 0, 1, 1);
	}

	if(CountDown >= 8000)
	{
    	putc_oled(1, ASCII_DIGIT1);
		puts_oled(4, 3, 0, 1, 1);
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | | S | S | _ | N | i | k | o | l | a | i | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/