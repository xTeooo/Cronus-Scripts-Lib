/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                     Credits :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - DoNotAtMe for Polar Aim Assist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - ItzSnack for Rapid Fire, Drop shot & Custom Sens.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - LegitCloudzzz for Anti-Recoil
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - Me, SS_Nikolai for putting all this together
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~																																						*/

//--BUTTONS ( Customize To Your Layout )
    define FIRE      = PS4_R2;
    define ADS       = PS4_L2;
    define PREVIOUS  = PS4_L1;
    define NEXT      = PS4_R1;
    define SPRINT    = PS4_L3;
    define CROUCH    = PS4_R3;
	define PICKAXE   = PS4_TRIANGLE;
    define BUILD     = PS4_CIRCLE;
    define JUMP      = PS4_CROSS;
    define RELOAD    = PS4_SQUARE;

//--Rapid Fire ( L2 + LEFT )
	int Rapid_Fire = FALSE;

//--Dropshot ( L2 + RIGHT )
	int DropShot 	  = FALSE; 
	int DropShotSpeed =    30;

//--PUMP SMG - ( L2 + DOWN )
	int PUMP_SMG = FALSE;

//--100% Perfect Accuracy [ ALWAYS ON ] ( L2 + R1 )
	int PerfectAccuracy = TRUE;

//--Anti Recoil
	int Anti_Recoil = FALSE;

//--Custom Sensitivity ( Can Slightly Help With Aim Assist )
	int Custom_Sensitivity = FALSE;
	int in_game_menu_sens  =   10;

//--Polar Aim Settings
	define polar_aim          = TRUE;
	define RADIUS             =   10;  // Aim Assist Strength
	define STEPS              =   25;  // Aim Assist Speed
	define ACTIVE_WHEN_ADS    = TRUE;  // If TRUE Aim Assist Will Be Enabled When ADS Only
	define ACTIVE_WHEN_FIRING = TRUE;  // If TRUE Aim Assist Will Be Enabled When Firing Only

																																																																												/*
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY
	SCRIPT BELOW DON'T SCROLL DOWN AS IT'S NOT NECCESARY 																																																														*/

define Blue = 1; define Red = 2; define Green = 3; define Pink = 4; define SkyBlue = 5; define Black = 6; define White = 7; data ( 1, 2,0,0,0 , 0,2,0,0 , 0,0,2,0 , 0,0,0,2 , 2,0,2,0 , 0,0,0,0 , 2,2,2,2 ) define STEP_INTERVAL = 1; int ads_grenade_sens, ads_fire_sens, Sens, actual_sens; int tap; int R2_block; int ANTI_RECOIL; int anti_recoil; int time; int angle, cos_angle, sin_angle; int actual_X, actual_Y, actual_Magnitude, max_Magnitude; const char Polar_Array[] = { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; main { vm_tctrl(-1); if (polar_aim) { if((ACTIVE_WHEN_ADS && get_val(ADS)) || (ACTIVE_WHEN_FIRING && get_val(FIRE))){ actual_X = get_val(PS4_RX); actual_Y = get_val(PS4_RY); actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2)); max_Magnitude = (actual_Magnitude < 100); if(!(time++ % STEP_INTERVAL)) { angle += STEPS; } angle = angle % 360; sin_angle = Polar_Array[angle % 360]; cos_angle = Polar_Array[(angle + 270) % 360]; cos_angle = (cos_angle * RADIUS) / 100; sin_angle = (sin_angle * RADIUS) / 100; if(actual_Magnitude <= RADIUS){ sin_angle -= actual_Y; cos_angle -= actual_X; } else { sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; } set_val(PS4_RX, clamp(actual_X + cos_angle, -100, 100)); set_val(PS4_RY, clamp(actual_Y + sin_angle, -100, 100)); } } if(Custom_Sensitivity) { ads_grenade_sens = 100 - (in_game_menu_sens); ads_fire_sens = 96 - (in_game_menu_sens); actual_sens = 100; if(!get_val(ADS) && !get_val(FIRE) && !get_val(NEXT) && !get_val (PREVIOUS)) { Sens = actual_sens; } else if(get_val(ADS) && !get_val(FIRE)) { Sens = ads_grenade_sens; } else if(!get_val(ADS) && get_val(FIRE)) { Sens = actual_sens; } else if(get_val(ADS) && get_val(FIRE)) { Sens = ads_fire_sens; } else if(get_val(PREVIOUS) || get_val (NEXT)) { Sens = ads_grenade_sens; } if(Sens > 100) Sens = 100; sensitivity(PS4_RX, NOT_USE, Sens); sensitivity(PS4_RY, NOT_USE, Sens); } if (get_val(ADS)) { if (event_press(PS4_DOWN)) { combo_run (vibrate); combo_run (BLINK); PUMP_SMG = !PUMP_SMG; tap = FALSE;} set_val(SPRINT, 0);} if (PUMP_SMG) { if (R2_block) { set_val(ADS, 0); set_val(FIRE, 0);} if (get_val(ADS) && event_press(FIRE)) { if (!tap) { tap = TRUE; combo_run(Double_Tact_R1); set_val(FIRE, 0);} } if (event_press(ADS)) { tap = FALSE;} } if(get_val(ADS) && event_press(PS4_LEFT)) { combo_run (vibrate); combo_restart(BLIINK); Rapid_Fire = !Rapid_Fire;} if (Rapid_Fire) { if(get_val(FIRE)) { combo_run (Rapiid_Fire);} } if(Anti_Recoil) { if (get_val(ADS) && get_val(FIRE)) { ANTI_RECOIL = 12; combo_run(AntiRecoil); } } if(get_val(ADS) && event_press(PS4_RIGHT)) { combo_run (vibrate); combo_restart(BLIIINK); DropShot = !DropShot;} if (DropShot) { if(get_val(FIRE)) { combo_run (DroppShott);} } if (get_val(ADS) && get_val(NEXT)) { PerfectAccuracy = !PerfectAccuracy; combo_run(PerfectionAccuracy); set_val(NEXT, 0); } else { combo_stop(PerfectionAccuracy); } } combo vibrate { set_rumble(RUMBLE_A, 85); wait(225); reset_rumble(); } combo BLINK { if(PUMP_SMG) LED_CM (Green); else LED_CM (Red); wait(2000); LED_CM (Black) } combo BLIINK { if(Rapid_Fire) LED_CM (Green); else LED_CM (Red); wait(2000); LED_CM (Black) } combo BLIIINK { if(DropShot) LED_CM (Green); else LED_CM (Red); wait(2000); LED_CM (Black) } combo Double_Tact_R1 { R2_block = TRUE; set_val(FIRE, 100); wait(10); wait(10); set_val(ADS, 100); set_val(SPRINT, 100); set_val(NEXT, 100); wait(15); R2_block = FALSE; } combo Rapiid_Fire { set_val(FIRE, 100); wait(45); set_val(FIRE, 0); wait(30); } combo DroppShott { set_val(CROUCH,100); wait(40); wait(DropShotSpeed); set_val(CROUCH,100); } combo PerfectionAccuracy { set_val(FIRE,100); wait(100); wait(250); set_val(FIRE,100); } combo AntiRecoil { anti_recoil = get_val(PS4_RY) + ANTI_RECOIL; if (anti_recoil > 100) anti_recoil = 100; set_val(PS4_RY, anti_recoil); } function LED_CM(Colour) { set_led(LED_1,dbyte(( Colour * 4)- 3 )); set_led(LED_2,dbyte(((Colour * 4)- 3) + 1)); set_led(LED_3,dbyte(((Colour * 4)- 3) + 2)); set_led(LED_4,dbyte(((Colour * 4)- 3) + 3)); } function clamp(int v, int lo, int hi) { if(v < lo) return lo; if(v > hi) return hi; return v; }