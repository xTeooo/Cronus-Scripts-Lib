// GPC Online Library
// red_dead_redemption_ii__cronuszen_only_2_3.gpc

/*

Game: RedDead Redemption II
Version 2.3
Device: CronusZEN ONLY
Controller tested: DS4 - Elite 2
Author: noozbar

____________________________________________________________________________________________________________________________________________________

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸

											FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES
											FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES
											FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES  -  FEATURES
							
3 Weapon Loadout Profiles with:

———————————————————————————————————————————————————————————————————————————————
▻▻▻	Quick Swap Tonics/Hat (see instructions below)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	AntiRecoil Vertical and Horizontal	
———————————————————————————————————————————————————————————————————————————————
▻▻▻	RapidFire: OFF - ON (every weapons) - Carcano (Carcano Scope Cancel)
			Carcano mod 
				Do not hold Aiming button down and only tap or hold R1/RB to shoot
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Head Shot (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Crouch Shot (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Jump Shot (when fireing)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Strafe Shot (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	AIM Abuse (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	AIM Assist (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Dead Shot (ex Better AIM Assist / 100% Accuracy)(when fireing)
			turns DeadEye on and off very quickly for maximum accuracy
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Auto DeadEye (when aiming)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	AutoRun
			Standard Layout
				Tap CROSS/A one time to run
				Tap again to sprint
			StandardFPS Layout
				Push the stick forward to sprint
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Auto Stop DeadEye (for Online)	
			turns DeadEye off when you release ADS button
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Auto UnScope / Auto Scope Out	
			when you ADS button and press DOWN with a weapon other than a sniper, 
			your character will scope
			if you release ADS and press it again, you will be directly in the scope
			AutoUnscope allows you to exit the scope when you release ADS button
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Auto Reload
			releases and quickly presses ADS again to reload a bullet into the rifle chamber
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Cut The Rope 
			Double tap and hold SQUARE/X if you are tied up
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Melee Spam	
			Double tap and hold CIRCLE/B 
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Easy Eagle Eye	
			Tap R3/RS only to Eagle Eye
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Horse Sprint
			Double tap and hold CROSS/A to sprint and calm your horse
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Skid Stop (Horse level 3 minimum)
			Double tap R1/RB to skid stop with your horse
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Cinematic mode with calm horse function
			Calm your horse while in Cinematic mode (Story mode)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Standard FPS Button Layout	
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Swap Triggers / Bumpers
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Spin Mod (Hold L3/LS to spin)
———————————————————————————————————————————————————————————————————————————————
▻▻▻	Fishing mod (see instructions below)
———————————————————————————————————————————————————————————————————————————————
						
						
◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺		
____________________________________________________________________________________________________________________________________________________

											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
											INSTRUCTIONS - IMPORTANT, PLEASE READ CAREFULLY
____________________________________________________________________________________________________________________________________________________

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸											
	
	OLED screen indications: 
                              ———————————————————————————————
		                      |        G   A   M   E        |
		                      |      T   I   T   L   E      |  
		                      |       Current profile    num| ▻▻▻  num indicate on which ZEN slot you are
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModMenu: 
                              ———————————————————————————————
		- First line:         |       Active Mod Name       |
		- Second line:        |       Current profile       | ▻▻▻  indicate on which profile/weapon we are acting 
		- Third line          |       ON / OFF status       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in ModEdit: 
                              ———————————————————————————————
		- First line:         |      Active Value Name      |
		- Second line:        |       Current profile       | ▻▻▻  indicate on which profile/weapon we are acting 
		- Third line          |       Editable  Value       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in KillSwitch: 
                              ———————————————————————————————
                              |         SCRIPT OFF          | ▻▻▻  indicate that the script is muted 
                              |                             | 
                              | Dbl Tap CIRCLE/A to turn ON | 
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	Enter and Exit ModMenu
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold L2/LT and tap OPTIONS/MENU 
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
	Navigate between every mods and toogles
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap LEFT or RIGHT on the D-PAD
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
	Enable or disable the displayed mod
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap UP to turn ON
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap DOWN to turn OFF
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
	Switch (weapon) Profile 1, 2 or 3 (in ModMenu) 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap TRIANGLE/Y to loop profile 1, 2, 3, 1, 2, 3 ...
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			
	Enter ModEdit (only available for some mods and only if you are in ModMenu)
		——————————————————————————————————————————————————————————————————————————————————
		While in ModMenu:
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap CROSS/A to enter ModEdit on the current/displayed mod 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap CIRCLE/B to exit ModEdit
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
	Navigate between every values available for this mod 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap LEFT or RIGHT 
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
	Edit values
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold SQUARE/X  +  tap/hold RIGHT for +1 (or +10 depending value type)
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold SQUARE/X  +  tap/hold LEFT for -1 (or -10 depending value type)
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold SQUARE/X  +  tap/hold UP for +10 (or +100 depending value type)
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold SQUARE/X  +  tap/hold DOWN for -10(or -100 depending value type)
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
				           
	Save every values (only available if you are in ModMenu or ModEdit)	
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap PS/XBOX to save EVERY values and toggles 
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		
	Speed toggles (outside Mod Menu/Edit)
		——————————————————————————————————————————————————————————————————————————————————
		▻▻▻ Hold CROSS/A button and hold 300ms UP, DOWN, RIGHT or LEFT
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ UP for	RapidFire
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ DOWN for	Head Shot
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ RIGHT for	Crouch Shot
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ LEFT for	Strafe Shot
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
	
	Switch weapon and profiles  
		——————————————————————————————————————————————————————————————————————————————————
		▻▻▻ Hold L1/LB (L2/LT if swapped) and:
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ switch to 12 o'clock weapon == 12 o'clock profile 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ switch to 9 o'clock weapon == 9 o'clock profile 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ switch to 6 o'clock weapon == 6 o'clock profile 
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		
	Quick Swap Tonics/Hat  
		——————————————————————————————————————————————————————————————————————————————————
		▻▻▻ Hold L1/LB (L2/LT if swapped) and:
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Double Tap TRIANGLE/Y for Stamina
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Double Tap SQUARE/X for Health
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Double Tap CIRCLE/B for DeadEye
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Double Tap CROSS/A for Hat when hat is at 7 o'clock (Online)
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

	Kill Switch (mute the script)
		——————————————————————————————————————————————————————————————————————————————————
		Toggle ON / OFF
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold aiming button and tap SHARE/VIEW 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap PS/XBOX 
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Tap OPTIONS/MENU 
		——————————————————————————————————————————————————————————————————————————————————
        〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		——————————————————————————————————————————————————————————————————————————————————
		Quick Exit
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Double tap CIRCLE/B
		——————————————————————————————————————————————————————————————————————————————————
			▻▻▻ Hold CIRCLE/B more than 600ms
		——————————————————————————————————————————————————————————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

	Fishing mod
		——————————————————————————————————————————————————————————————————————————————————
		Equip Fishing Pole and Be Ready to Cast Before Starting Script
 
				Hold L2/LT and hold R3/RS 2 seconds to enter Fishing mod 
				Hold L2/LT and tap R2/RT to Cast and start the script
				Script will automatically
				    - Slowly reel (Bobber)
				    - Flick line 
				    - Set Hook
				 
				Once fish is on hold R1/RB to reel. Script will automatically stop reeling while fish is struggling  
				Control fish with LS/L3.  
				 
				Script will stop when pressing B/Circle to recast  
				
		Double tap CROSS/B to exit Fishing mod
		——————————————————————————————————————————————————————————————————————————————————
				

															THANK YOU FOR READING
															THANK YOU FOR READING
															THANK YOU FOR READING
											
◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺	
____________________________________________________________________________________________________________________________________________________

 	Text info:
			Almost every text are displayed in MEDIUM size because I'm far from my Zen and I can't read small texts
			"SAVED" is displayed in LARGE, you can replace SAVED text by something with 7 chars max
			"Profile x" is displayed in SMALL, ..... 18 chars max
			For the others text, they are displayed in MEDIUM, can be replaced by 11 chars max
*/

// Text to display (11 char max)
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE = "SAVED";
	const string PROFILE_1 = "12 o'clock";   // 12 o'clock weapon
	const string PROFILE_2 = "9 o'clock";    // 9 o'clock weapon
	const string PROFILE_3 = "6 o'clock";    // 6 o'clock weapon
	const string PROFILE_4 = "No Weapon";    // No Weapon
	const string ALL = "Every Profiles";
	const string CLOSE = "Close";
	const string MEDIUM = "Medium";
	const string LONG = "Long";
	const string MUTE = "Script OFF";
	const string HOLD = "Dbl Tap CIRCLE/B";
	const string ACTIVE = "to turn ON";
	const string FISHING = "Fishnig mod";
	const string CARCANO = "Carcano";
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mod Name
	const string ANTIRECOIL = "AntiRecoil";   // modName_idx =  0
	const string RAPIDFIRE = "RapidFire";     // modName_idx =  1
	const string HEADSHOT = "HeadShot";       // modName_idx =  2
	const string CROUCHSHOT = "CrouchShot";   // modName_idx =  3 		
	const string JUMPSHOT = "Jump Shot";      // modName_idx =  4
	const string STRAFESHOT = "StrafeShot";   // modName_idx =  5
	const string AIMABUSE = "AIM Abuse";      // modName_idx =  6	
	const string AIMASSIST = "AIM Assist";	  // modName_idx =  7
	
	const string DEADSHOT = "Dead Shot";	   // modName_idx =  8	
	const string AUTODEADEYE = "AutoDeadEye";  // modName_idx =  9	
	const string AUTORUN = "AutoRun";	       // modName_idx =  10	    
	const string STOPDEADEYE = "StopDeadEye";  // modName_idx =  11	    
	const string AUTOUNSCOPE = "AutoUnscope";  // modName_idx =  12
	const string AUTORELOAD  = "Auto Reload";  // modName_idx =  13
	const string CUTTHEROPE = "CutTheRope";    // modName_idx =  14
	const string MELEESPAM = "Melee Spam";     // modName_idx =  15
	const string EASYEAGLE = "EasyEagle";      // modName_idx =  16
	const string HORSESPRINT = "HorseSprint";  // modName_idx =  17
	const string SKIDSTOP = "Skid Stop";       // modName_idx =  18
	const string CINEMATIC = "Cinema Calm";    // modName_idx =  19
	const string STANDARDFPS = "StandardFPS";  // modName_idx =  20
	const string SWAP = "Swap Tr/Bu";          // modName_idx =  21
	const string SPIN = "Spin";          	   // modName_idx =  22

// Index to find Mod Name string - switchable in game with left/right in ModMenu 
	int modName_idx;

// modName_idx # of the last Mod Name string - Used for cycle modName_idx
	define LAST_MODNAME_STRING = 22;
	
// # of the last modName_idx that has a value that can be edited
	define LAST_EDITABLE_STRING = 7;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Value Name
	// modName_idx = 0 = ANTIRECOIL string
	const string ANTIRECOIL_VERTICAL = "Vertical"; 	    // valName_idx = 0  
	const string ANTIRECOIL_HORIZONTAL = "Horizontal";	// valName_idx = 1
	// modName_idx = 1
	const string RATE_OF_FIRE = "RPS / BPS";			// valName_idx = 2
	// modName_idx = 2
	const string RANGE = "Range";			            // valName_idx = 3
	// modName_idx = 3
	const string CROUCH_SPEED = "MotionSpeed";			// valName_idx = 4
	// modName_idx = 4 = JUMPSHOT string
	const string JUMP_SPEED = "MotionSpeed";			// valName_idx = 5
	// modName_idx = 5
	const string STRAFE_SPEED = "MotionSpeed";			// valName_idx = 6
	// modName_idx = 6
	const string AIMABUSE_HOLD = "Hold Time";			// valName_idx = 7
	const string AIMABUSE_RELEASE = "ReleaseTime";		// valName_idx = 8
	// modName_idx = 7 = AIMASSIST string
	const string AIMASSIST_SIZE = "MotionSize";			// valName_idx = 9
	const string AIMASSIST_TIME = "MotionSpeed";		// valName_idx = 10 

	
// Index to find Value Name string - switchable in game with left/right in ModEdit 
	int valName_idx;

// Amount of editable value
	define AMOUNT_OF_VALNAME_IDX = 10;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 


// Variable that have an independent value for each profile
	int antirecoil_vertical[3];   // antirecoil_vertical value for 3 profiles: profile_idx = 0, 1 and 2 
	int antirecoil_horizontal[3]; // 2
	int rate_of_fire[3];          // 3
	int range[3];                 // 4 = AMOUNT_OF_MULTI_VAL

// Amount of variable that have an independent value for each profile
	define AMOUNT_OF_MULTI_VAL = 4;

// Profiles and also define # of profile to find, edit, and display the right index 
	int profile_idx = 3; 
		
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Multi toggles
	int toggle_antirecoil[3];  // for 3 Profiles: profile_idx = 0, 1 and 2
	int toggle_rapidfire[3];   // 2
	int toggle_headshot[3];    // 3
	int toggle_crouchshot[3];  // 4
	int toggle_jumpshot[3];    // 5
	int toggle_strafeShot[3];  // 6
	int toggle_aimabuse[3];    // 7
	int toggle_aimassist[3];   // 8
	int toggle_deadshot[3];    // 9
	int toggle_autoDE[3];      // 10 = AMOUNT_OF_MULTI_TOGGLE
	
// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 3;  
	
// Amount of mods that have an independent toggle for each profile - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 10;
		
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mods that activates for all profiles at the same time (if toggled ON)
// Crouch Shot (value)
	int crouchShot_time; // Crouch Shot have toggle for each profiles BUT the same value for each
// Jump Shot (value)
	int jumpShot_time; // Jump Shot have toggle for each profiles BUT the same value for each
// Strafe Shot (value)
	int strafeShot_time; // Strafe Shot have toggle for each profiles BUT the same value for each
// AIM Abuse (values)
	int aimabuse_hold; // AIM Abuse have toggle for each profiles BUT the same values for each
	int aimabuse_release;
// AIM Assist (values)
	int aimassist_size; // AIM Assist have toggle for each profiles BUT the same values for each
	int aimassist_time;

// Toggles
	int autorun_on;
	int stopDE_on;
	int unscope_on;
	int reload_on;
	int rope_on;
	int melee_on;
	int eagle_on;
	int horseSprint_on;
	int skidStop_on;
	int cinematicCalm_on;
	int FPSlayout_on;
	int swap_on;
	int spin_on;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};

// Buffer to display converted values 
	//int display_val;  
	
// Variables for function number_to_string() 
	int i;
	int c,c_val;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
    
    data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 Orange  6 Red     7 White   8 OFF      
    0,1,1,0,  0,2,1,0,  0,1,0,0,  1,1,1,0,  0,0,0,0 );
    
    int color;
     
// Refresh OLED
	int display_title = TRUE;
	int display_new; 
	int display_black;
    
// ModMenu / ModEdit / KillSwitch
	int ModMenu;	
	int ModEdit;
	int KillSwitch;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Anti Recoil                                                 
	int AntirecoilVertical;
	int AntirecoilHorizontal;
	
// RapidFire
	int hold_time;                                                    
	int rest_time;
	int led_on;

// HeadShot
	int head;
	int range_wait;
	int headshot_Y_val;
	define WAIT_CLOSE   = 160; // Change this value for close range
	define WAIT_MEDIUM  = 140; // Change this value for medium range
	define WAIT_LONG    = 120; // Change this value for long range
	
// AutoRun
	int run;
	int fps_run;
	int run_btn;
	
// Counter
	int count_black;  // for screen saver
	
// Double Tap
	int double_tap;  
	
// Quick Swap Weapons / Tonics
	int wx_v; 
	int wy_v;
	int item;
	
// Fishing mod
    int rx = 0;
    int ry = -100;
    int r_val;
    int quad = 1;
    int cast,fish_on,hold_rod,fishing_on;
    
//Misc
	int button;
	int spam_value;
	int currentSlot;
	int cinema;
	int cinema_btn;	
	int cut;
	int fight;
	int galop;        	
	int crouch_btn;
    int deadeye;
    int scope;
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 
init{
// Profile 1
	// Toggles                                                  // Values
	toggle_antirecoil[0] = get_pvar(SPVAR_1 , 0, 1, 0 );		antirecoil_vertical[0] = get_pvar(SPVAR_11, -99, 99, 0 );		antirecoil_horizontal[0] = get_pvar(SPVAR_12, -99, 99, 0 );
	toggle_rapidfire[0]  = get_pvar(SPVAR_2 , 0, 2, 0 );  		rate_of_fire[0]        = get_pvar(SPVAR_13,   1, 25, 5 );
	toggle_headshot[0]   = get_pvar(SPVAR_3 , 0, 1, 0 );		range[0]               = get_pvar(SPVAR_14,   0,  2, 0 );
	toggle_crouchshot[0] = get_pvar(SPVAR_4 , 0, 1, 0 );
	toggle_jumpshot[0]   = get_pvar(SPVAR_5 , 0, 1, 0 );
	toggle_strafeShot[0] = get_pvar(SPVAR_6 , 0, 1, 0 );
	toggle_aimabuse[0]   = get_pvar(SPVAR_7 , 0, 1, 0 );
	toggle_aimassist[0]  = get_pvar(SPVAR_8 , 0, 1, 0 );
	toggle_deadshot[0]   = get_pvar(SPVAR_9 , 0, 1, 0 );
	toggle_autoDE[0]     = get_pvar(SPVAR_10, 0, 1, 0 );
	
// Profile 2
	// Toggles                                                  // Values
	toggle_antirecoil[1] = get_pvar(SPVAR_15, 0, 1, 0 );		antirecoil_vertical[1] = get_pvar(SPVAR_25, -99, 99, 0 );		antirecoil_horizontal[1] = get_pvar(SPVAR_26, -99, 99, 0 );
	toggle_rapidfire[1]  = get_pvar(SPVAR_16, 0, 2, 0 );  		rate_of_fire[1]        = get_pvar(SPVAR_27,   1, 25, 5 );
	toggle_headshot[1]   = get_pvar(SPVAR_17, 0, 1, 0 );		range[1]               = get_pvar(SPVAR_28,   0,  2, 0 );
	toggle_crouchshot[1] = get_pvar(SPVAR_18, 0, 1, 0 );
	toggle_jumpshot[1]   = get_pvar(SPVAR_19, 0, 1, 0 );
	toggle_strafeShot[1] = get_pvar(SPVAR_20, 0, 1, 0 );
	toggle_aimabuse[1]   = get_pvar(SPVAR_21, 0, 1, 0 );
	toggle_aimassist[1]  = get_pvar(SPVAR_22, 0, 1, 0 );
	toggle_deadshot[1]   = get_pvar(SPVAR_23, 0, 1, 0 );
	toggle_autoDE[1]     = get_pvar(SPVAR_24, 0, 1, 0 );
	
// Profile 3
	// Toggles                                                  // Values
	toggle_antirecoil[2] = get_pvar(SPVAR_29, 0, 1, 0 );		antirecoil_vertical[2] = get_pvar(SPVAR_39, -99, 99, 0 );		antirecoil_horizontal[2] = get_pvar(SPVAR_40, -99, 99, 0 );
	toggle_rapidfire[2]  = get_pvar(SPVAR_30, 0, 2, 0 );  		rate_of_fire[2]        = get_pvar(SPVAR_41,   1, 25, 5 );
	toggle_headshot[2]   = get_pvar(SPVAR_31, 0, 1, 0 );		range[2]               = get_pvar(SPVAR_42,   0,  2, 0 );
	toggle_crouchshot[2] = get_pvar(SPVAR_32, 0, 1, 0 );
	toggle_jumpshot[2]   = get_pvar(SPVAR_33, 0, 1, 0 );
	toggle_strafeShot[2] = get_pvar(SPVAR_34, 0, 1, 0 );
	toggle_aimabuse[2]   = get_pvar(SPVAR_35, 0, 1, 0 );
	toggle_aimassist[2]  = get_pvar(SPVAR_36, 0, 1, 0 );
	toggle_deadshot[2]   = get_pvar(SPVAR_37, 0, 1, 0 );
	toggle_autoDE[2]     = get_pvar(SPVAR_38, 0, 1, 0 );
	
// Misc	
// Toggles														// Values
    autorun_on        = get_pvar(SPVAR_43, 0, 1, 0 );			crouchShot_time  = get_pvar(SPVAR_55,  50,  999,   60 ); 
    stopDE_on         = get_pvar(SPVAR_44, 0, 1, 0 );			jumpShot_time    = get_pvar(SPVAR_56,  50,  999,   60 ); 
    unscope_on        = get_pvar(SPVAR_45, 0, 1, 0 );			strafeShot_time  = get_pvar(SPVAR_57, 100, 5000, 1000 ); 
	reload_on         = get_pvar(SPVAR_46, 0, 1, 0 );			aimabuse_hold    = get_pvar(SPVAR_58,  10, 5000,  500 ); 
	rope_on           = get_pvar(SPVAR_47, 0, 1, 0 );			aimabuse_release = get_pvar(SPVAR_59,   1, 1000,   20 ); 
	melee_on          = get_pvar(SPVAR_48, 0, 1, 0 );			aimassist_size   = get_pvar(SPVAR_60,   1,   50,   20 );  
	eagle_on          = get_pvar(SPVAR_49, 0, 1, 0 );			aimassist_time   = get_pvar(SPVAR_61,   1,   99,   25 );  
	horseSprint_on    = get_pvar(SPVAR_50, 0, 1, 0 );			
	skidStop_on       = get_pvar(SPVAR_51, 0, 1, 0 );			
	cinematicCalm_on  = get_pvar(SPVAR_52, 0, 1, 0 );
	FPSlayout_on      = get_pvar(SPVAR_53, 0, 1, 0 );
    swap_on           = get_pvar(SPVAR_54, 0, 1, 0 );
    spin_on           = get_pvar(SPVAR_62, 0, 1, 0 );			

	currentSlot = get_slot();
}

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                                     MAIN SECTION                                                      |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
main {

// Debug - Device Monitor
	set_val(TRACE_1, profile_idx); 
	set_val(TRACE_2, rate_of_fire[profile_idx]); 
	set_val(TRACE_3, range[profile_idx]);
	set_val(TRACE_4, ModMenu); 
	set_val(TRACE_5, ModEdit);	
	set_val(TRACE_6, scope);


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// Double Tap
    if(double_tap) 
        double_tap -= get_rtime();
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Crossover
    if(get_controller() != PIO_PS4) // If XBOX controller:
    {
    	// If PS4 console:
        if(get_console() == PIO_PS4)
        { 
        	if(get_ival(PS4_SHARE))
        	{
        		if(get_ival(PS4_R3)) // RS + View =  ScreenShot
        		{
					set_val(PS4_SHARE,100);
                	set_val(PS4_TOUCH,0);
                	set_val(PS4_R3,0);
        			cinema_btn = PS4_TOUCH;
        		}
        		else // View only = PS4_TOUCH
        		{
        			set_val(PS4_TOUCH, 100);
        			set_val(PS4_SHARE, 0);
        			cinema_btn = PS4_SHARE;
        		}
        	}
        }
        else
            cinema_btn = PS4_SHARE;
	}
    else // If PS4 controller
        cinema_btn = PS4_TOUCH;

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     DISPLAY TITLE                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

// Display Script Title    
    if(display_title)
    {
    	cls_oled(0);	// clear OLED screen
    	count_black = 0;// reset screen saver timer
    	
    	if(KillSwitch)
    	{
    		printf(center_x(sizeof(MUTE) - 1, OLED_FONT_MEDIUM_WIDTH),8,OLED_FONT_MEDIUM,OLED_WHITE,MUTE[0]); 
    		printf(center_x(sizeof(HOLD) - 1, OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,HOLD[0]);
    		printf(center_x(sizeof(ACTIVE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,ACTIVE[0]);
    	}
    	else
    	{
    	// Display Game logo
    		draw_picture(0, 0, 1);
    	// Display # slot
    		display_edit(NOT_USE, NOT_USE, NOT_USE, NOT_USE);
    	
    	// Display profile name
    		if(fishing_on)
    			printf(center_x(sizeof(FISHING) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,FISHING[0]); 
    		else if(profile_idx == 0)
    			printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); 
    		else if(profile_idx == 1)
    			printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]);
    		else if(profile_idx == 2)
    			printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]);
    		else if(profile_idx == 3)
    			printf(center_x(sizeof(PROFILE_4) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_4[0]);
    		
    	
    		display_black = TRUE;	// screen saver
    	}
    	
    	display_title = FALSE;
    }

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Screen saver (OLED off)
    if(display_black && !ModMenu && !KillSwitch)
    {
    	count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_black = FALSE;
    	}
    }
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                      KILL SWITCH                                                      |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
  
// Kill Switch
	if(!ModMenu && !ModEdit)
	{
	// KillSwitch ON or OFF method
		if( (get_val(PS4_L2) && event_press(PS4_SHARE)) || event_press(PS4_PS) ||  (!get_ival(PS4_L2) && event_press(PS4_OPTIONS)))
		{			
			KillSwitch = !KillSwitch;
			
			if(KillSwitch) 
				combo_run(RUMBLE_OFF);	// rumble and LED blink
				
			else
				combo_run(RUMBLE_ON);	// rumble and LED blink
		
			display_title = TRUE;
		}
		
	// Exit KillSwitch (hold 600ms or double tap CIRCLE/B)
		if(KillSwitch) 
		{
			if(event_press(PS4_CIRCLE))
			{
				if(double_tap)
				{
					KillSwitch = FALSE;
					combo_run(RUMBLE_ON);
					display_title = TRUE;
				}
				else
					double_tap = 250;
			}
			if(get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 1000)
			{
				KillSwitch = FALSE;
				combo_run(RUMBLE_ON);
				display_title = TRUE;
			}
		}
	}
	
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       MOD MENU                                                        |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
	if(get_ival(PS4_L2))
	{
	// toggle ModMenu ON/OFF
		if(event_release(PS4_OPTIONS) && !KillSwitch)
		{
			ModMenu = !ModMenu;
			
			if(!ModMenu)
			{
				ModEdit = FALSE; 		// close ModEdit too
				combo_run(RUMBLE_OFF);  // rumble and LED blink
				display_title = TRUE;   // display Title
			}
			
			if(ModMenu)
			{
				modName_idx = 0;        // start to the first adjustable value
				combo_run(RUMBLE_ON);	// rumble and LED blink
				display_new = TRUE;		// display mod name, profile, ON/OFF and value
			}
		}
		set_val(PS4_SHARE, 0);		    // block
		set_val(PS4_OPTIONS, 0);		// block
	} // L2 end

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	if(!KillSwitch)
	{
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	// ModMenu
		if(ModMenu)
		{
	            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	            |                                            MOD EDIT                                               |
	            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
	
		// toggle ModEdit ON/OFF - only for mods who have adjustable value(s)
			if(modName_idx <= LAST_EDITABLE_STRING)
			{
				if(event_press(PS4_CROSS) && !ModEdit) // Turn ModEdit ON
				{
					valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // always display first val names available when enter in edition mod
					ModEdit = TRUE;
					combo_run(RUMBLE_ON);
					display_new = TRUE;
				}
				
				if(event_press(PS4_CIRCLE) && ModEdit) // Turn ModEdit OFF
				{
					ModEdit = FALSE;
					combo_run(RUMBLE_OFF);
					display_new = TRUE;
				}
			}
	
	            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	            |                                          EDIT VALUES                                              |
	            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	            
		// ModEdit ON
			if(ModEdit)
			{
				if(get_val(PS4_SQUARE)) // Edit value: hold SQUARE/X + UP (+1 or +10) or DOWN (-1 or -10) or RIGHT (+10 or +100) or LEFT (-10 or -100)
				{
				// Mods that can have different values depending the active Profile
	    		  //val_I_want_to_edit[profile] = edit_val( corresponding valName_idx , val_I_want_to_edit[profile], range min , range max, increase/decrease by X, increase/decrease by X); 	
					antirecoil_vertical[profile_idx]   = edit_val( 0 , antirecoil_vertical[profile_idx]  , 99, 99 , 1 , 10   ); // the first 0 define valName_idx so in this case, AR vertical
					antirecoil_horizontal[profile_idx] = edit_val( 1 , antirecoil_horizontal[profile_idx], 99, 99 , 1 , 10   );
					rate_of_fire[profile_idx]          = edit_val( 2 , rate_of_fire[profile_idx]         ,  1, 25 , 1 , 10   ); 
					range[profile_idx]                 = edit_val( 3 , range[profile_idx]                ,  0,  2 , 1 ,  1   ); 
					
				// Mods that have same value on every Profiles
				  //val_I_want_to_edit = edit_val( corresponding valName_idx , val_I_want_to_edit, range min , range max, increase/decrease by X, increase/decrease by X);
					crouchShot_time  = edit_val(  4 , crouchShot_time  , 50 ,  990 , 10 , 100 );
					jumpShot_time    = edit_val(  5 , jumpShot_time    , 50 ,  990 , 10 , 100 );
					strafeShot_time  = edit_val(  6 , strafeShot_time  ,100 , 5000 , 10 , 100 );
					aimabuse_hold    = edit_val(  7 , aimabuse_hold    , 10 , 5000 , 10 , 100 );
					aimabuse_release = edit_val(  8 , aimabuse_release ,  1 , 1000 , 10 , 100 );
					aimassist_size   = edit_val(  9 , aimassist_size   ,  0 , 50   , 1  ,  10 );
					aimassist_time   = edit_val( 10 , aimassist_time   ,  0 , 990  , 1  ,  10 );
				}  
	
	            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	            |                                        VALUES AVAILABLE                                           |
	            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	
				else // NOT SQUARE/X (if not editing value)
				{
				// Navigate value name
					if(event_press(PS4_RIGHT))
					{
						valName_idx += 1;
						display_new = TRUE; // Display value name and value
					}
					if(event_press(PS4_LEFT))
					{
						valName_idx -= 1;
						display_new = TRUE;
					}
					
				// Adjustable values available for each of the mods 
				 // if(modName_idx == 0) <so if I display Anti-Recoil>  vals_available( 0 , 1  ); < so vals_available are valName_idx 0, 1, so antirecoil_vertical[] and antirecoil_horizontal[] >
					if(modName_idx == 0) vals_available( 0 ,  1 );		
					if(modName_idx == 1) vals_available( 2 ,  2 );           				
					if(modName_idx == 2) vals_available( 3 ,  3 );			
					if(modName_idx == 3) vals_available( 4 ,  4 );				
					if(modName_idx == 4) vals_available( 5 ,  5 );				
					if(modName_idx == 5) vals_available( 6 ,  6 );				
					if(modName_idx == 6) vals_available( 7 ,  8 );		
					if(modName_idx == 7) vals_available( 9 , 10 );	
				} // NOT SQUARE/X (if not editing value) end
			} // ModEdit end
	
	            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	            |                                            TOGGLES                                                |
	            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	
			else // if NOT ModEdit BUT if ModMenu
			{
			// Navigate mods name
				if(event_press(PS4_RIGHT))
				{
					modName_idx += 1;
					display_new = TRUE;
				}
				if(event_press(PS4_LEFT))
				{
					modName_idx -= 1;
					display_new = TRUE;
				}
				
			// Cycle mods name
				if(modName_idx > LAST_MODNAME_STRING) // max column for displaying mod name  
					modName_idx = 0;
				if(modName_idx < 0)
					modName_idx = LAST_MODNAME_STRING;
					
			// Switch profiles	
				if(event_press(PS4_TRIANGLE))
				{
					profile_idx += 1;
					display_new = TRUE;
				}
			// Cycle profiles	
				if(profile_idx > (AMOUNT_OF_PROFILES - 1))
					profile_idx = 0;
				
		// Toggles (UP to turn ON, DOWN to turn OFF)
	    	// Mods that can have different ON/OFF status depending the active Profile
			  //toggle_I_want_to_edit[profile] = toggle( corresponding modName_idx, toggle_I_want_to_edit[profile] );
				toggle_antirecoil[profile_idx] = toggle( 0, toggle_antirecoil[profile_idx]);
				toggle_rapidfire[profile_idx]  = toggle( 1, toggle_rapidfire[profile_idx] );
				toggle_headshot[profile_idx]   = toggle( 2, toggle_headshot[profile_idx]  );
				toggle_crouchshot[profile_idx] = toggle( 3, toggle_crouchshot[profile_idx]);
				toggle_jumpshot[profile_idx]   = toggle( 4, toggle_jumpshot[profile_idx]  );
				toggle_strafeShot[profile_idx] = toggle( 5, toggle_strafeShot[profile_idx]);
				toggle_aimabuse[profile_idx]   = toggle( 6, toggle_aimabuse[profile_idx]  );
				toggle_aimassist[profile_idx]  = toggle( 7, toggle_aimassist[profile_idx] );
				toggle_deadshot[profile_idx]   = toggle( 8, toggle_deadshot[profile_idx]  );
				toggle_autoDE[profile_idx]     = toggle( 9, toggle_autoDE[profile_idx]    );
			
			// Mods that have same ON/OFF status on every Profiles
			  //toggle_I_want_to_edit = toggle( corresponding modName_idx, toggle_I_want_to_edit );
				autorun_on       = toggle( 10, autorun_on      );
				stopDE_on        = toggle( 11, stopDE_on       );
				unscope_on       = toggle( 12, unscope_on      );
				reload_on        = toggle( 13, reload_on       );
				rope_on          = toggle( 14, rope_on         );
				melee_on         = toggle( 15, melee_on        );
				eagle_on         = toggle( 16, eagle_on        );
				horseSprint_on   = toggle( 17, horseSprint_on  );
				skidStop_on      = toggle( 18, skidStop_on     );
				cinematicCalm_on = toggle( 19, cinematicCalm_on);
				FPSlayout_on     = toggle( 20, FPSlayout_on    );
				swap_on          = toggle( 21, swap_on         );
				spin_on          = toggle( 22, spin_on         );
			} // if NOT ModEdit BUT if ModMenu end
			
		// If ModMenu AND ModEdit
			if(event_press(PS4_PS))
				save ();
				
			block_btn (); // block ALL inputs (exept L2_R2_RX_RY_LX_LY to test antirecoil, rapidfire... against a wall without leaving ModEdit and ModMenu)
			
		} // ModMenu ON end
	
								/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
								|                                              NOT MOD MENU AND NOT MOD EDIT                                             |
								◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — */	 
		if(!ModMenu)
		{	
		
		/* Swap triggers and bumpers */
			if(swap_on) // (13)
			{
				swap(PS4_R1, PS4_R2);
				swap(PS4_L1, PS4_L2);
			}
			
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		/* Standard FPS Layout */
			if(FPSlayout_on) // (13)
			{
				run_btn = PS4_L3;
				crouch_btn = PS4_CROSS;
			}
			else
			{
				run_btn = PS4_CROSS;
				crouch_btn = PS4_L3;
			}
			
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		/* Easy EagleEye 
		   Tap R3/RS only to Eagle Eye */
			if(eagle_on)
			{
				if(!cinema && !get_lval(PS4_DOWN))
				{
					if(event_press(PS4_R3) && !get_val(PS4_L2))
						combo_run(EAGLE_VISION);   
				}
			}
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		// Hair Trigger
			deadzone(PS4_L2,PS4_R2,99,99);
	   	 	
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
	   	// Fishing Mod	
		    // Enter Fishing mod
		    if(get_val(PS4_L2) && get_val(PS4_R3) && get_ptime(PS4_R3) == 2000)
		    {
		    	combo_run(RUMBLE_ON);
		    	fishing_on = TRUE;
		    	display_title = TRUE;
		    }
		    
		    if(fishing_on)
		    {
		    // Exit Fishing mod
			    if(event_press(PS4_CIRCLE) && get_brtime(PS4_CIRCLE) < 250)
			    {
		    		combo_run(RUMBLE_OFF);
			    	fishing_on = FALSE;
		    		display_title = TRUE;
			    }
			// Fishing ON
			    // release R2 to cast
			    if(!get_val(PS4_L1) && event_release(PS4_R2) && !cast) 
			    	combo_run(CAST);
			    // hold rod    
			    if(hold_rod) 
			    	set_val(PS4_L2,100); 
			    // recast    
			    if(event_press(PS4_CIRCLE) || event_press(PS4_OPTIONS)) 
			    {
			        cast = FALSE;
			        hold_rod = FALSE;
			        fish_on = FALSE;
			    }
			    if(cast) 
			    { 
			        if(!fish_on) 
			        {
			            // slow reel
			            r_val = 5;
			            reel(PS4_RX, PS4_RY);
			       
				        // set hook on rumble
				        if(get_rumble(RUMBLE_A))  
				            combo_run(SET_HOOK);
			        }
			        // reel fish in   
			        if(fish_on) 
			        {
			            if(get_val(PS4_R1))
			            {
			            	if(get_rumble(RUMBLE_A) < 10) // keep line from breaking
			            	{
			            		reel(PS4_RX, PS4_RY); // fast reel
			            		combo_run(TIP_UP); // hold back on rod
			            	}
				            else
			            		combo_stop(TIP_UP);
			         	}
					}
				}
		    } 
	
	  		if(!fishing_on)
	  		{
			    cast = FALSE;
			    hold_rod = FALSE;
			    fish_on = FALSE;

	  	/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  	|                                                     SWITCH PROFILE                                                    |
	  	◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
			// Switch Weapons / Tonics - Hold L1/LB and press:
				if(get_val(PS4_L1))
				{
					if(event_press(PS4_R1))
						item = TRUE;
					if(!item)
					{
					// 12 o'clock
						if((get_val(PS4_RX) >= -100 && get_val(PS4_RX) <= 100) && get_val(PS4_RY) < -45)
						{
							//wx_v = 0; 
							//wy_v = -100;
							if(profile_idx != 0)
							{
								profile_idx = 0;
								display_title = TRUE;
							}
						}
					// 6 o'clock
						else if((get_val(PS4_RX) > -40 && get_val(PS4_RX) < 35) && get_val(PS4_RY) > 70 )
						{
							//wx_v = 0; 
							//wy_v = -100;
							if(profile_idx != 2)
							{
								profile_idx = 2;
								display_title = TRUE;
							}
						}
					// 9 o'clock
						else if(get_val(PS4_RX) < -60 && (get_val(PS4_RY) > -40 && get_val(PS4_RY) < 37)) 
						{
							//wx_v = 0; 
							//wy_v = -100;
							if(profile_idx != 1)
							{
								profile_idx = 1;
								display_title = TRUE;
							} 
						}
						else if((get_val(PS4_RX) <= 100 && get_val(PS4_RX) > 35) && (get_val(PS4_RY) > -45 && get_val(PS4_RY) < 100) || (get_val(PS4_RX) >= -100 && get_val(PS4_RX) < -37) && (get_val(PS4_RY) > 37 && get_val(PS4_RY) <= 100))
						{	
							if(profile_idx != 3)
							{
								profile_idx = 3;
								display_title = TRUE;
							} 
						}	
					// TRIANGLE/Y for Stamina
						if(event_press(PS4_TRIANGLE)  && get_brtime(PS4_TRIANGLE) < 300)
						{
							wx_v = 0; 
							wy_v = -100;
			        	}
					// SQUARE/X for Health
						if(event_press(PS4_SQUARE) && get_brtime(PS4_SQUARE) < 300)
						{
							wx_v = -75; 
							wy_v = -75;
			        	}
			    	// CIRCLE/B for DeadEye
			        	if(event_press(PS4_CIRCLE) && get_brtime(PS4_CIRCLE) < 300)
			        	{	 
			               	wx_v = 75; 
			               	wy_v = -75;    
			        	}
			    	// CROSS/A for Hat
			        	if(event_press(PS4_CROSS) && get_brtime(PS4_CROSS) < 300)
			        	{	 
			               	wx_v = -75; 
			               	wy_v = 75;    
			        	}
			 
						if(wx_v || wy_v) 
							combo_run(QUICK_SWAP);
			 		}
		    	// BLOCK
		    		if(get_val(PS4_TRIANGLE) && (get_ptime(PS4_TRIANGLE) >= 250))
		        		set_val(PS4_TRIANGLE, 100);
		        		else
		            		set_val(PS4_TRIANGLE, 0);
		            		
		    		if(get_val(PS4_SQUARE) && (get_ptime(PS4_SQUARE) >= 250))
		        		set_val(PS4_SQUARE, 100);
		        		else
		            		set_val(PS4_SQUARE, 0);
		
		    		set_val(PS4_CIRCLE, 0);
		    		set_val(PS4_CROSS, 0);
		    	}
		    	if(event_release(PS4_L1) && !combo_running(QUICK_SWAP))
		    		item = FALSE;
		    	
		  	/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
		  	|                                                      OTHER MODS                                                       |
		  	◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
		
			/* AutoRun press sensitive (Work better when in game option "Press to Sprint" is turned OFF)
		       Push your stick to more than 60% to run automatically */
				if(autorun_on) // (7)
				{
				// Standard FPS Layout
		    		if(FPSlayout_on)
		    		{
						if(!fps_run && (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) >= 90) && get_ival(PS4_LY) < 20)
							combo_run(RUN_FPS);
				
						if(get_val(PS4_LY) >= -20)
							fps_run = FALSE;
		    		}
		    	// Standard Layout
		    		else
		    		{
		    		// RockStar AutoRun
						if(!get_val(PS4_L2) && isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) >= 20)
						{
							autorun();
						}
						// reset
						if(!cinema && isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) < 20)
							run = 0;
		    		}// RockStar AutoRun end
		
				} 
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			/* Cut The Rope
			   Double tap and hold SQUARE/X if you are tied up */
				if(rope_on)
				{
		    		if(!get_val(PS4_L1) && event_press(PS4_SQUARE))
		    		{
		        		if(double_tap)
		        		{
		            		cut = TRUE;
		            		combo_restart(BLINK);
		            	}
		            	else
		            		double_tap = 250;
		    		}
		    		if(event_release(PS4_SQUARE))
		        		cut = FALSE;
		 
					Spammer (cut, PS4_SQUARE, 50);
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			/* Auto Melee
			   Double tap and hold CIRCLE/B (Melee button) */
				if(melee_on)
				{
		    		if(!get_val(PS4_L1) && event_press(PS4_CIRCLE))
		    		{
		        		if(double_tap)
		        		{
		            		fight = TRUE;
		            		combo_restart(BLINK);
		            	}
		            	else
		            		double_tap = 250;
		    		}
		    		if(event_release(PS4_CIRCLE))
		        		fight = FALSE;
		 
					Spammer (fight, PS4_CIRCLE, 50);
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			/* Horse Sprint
			   Double tap and hold CROSS/A */
				if(horseSprint_on)
				{
		    		if(!get_val(PS4_L1) && (isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) < 90) && event_press(PS4_CROSS))
		   			{
		        		if(double_tap)
		        		{
		            		galop = TRUE;
		            		combo_restart(BLINK);
		            	}
		            	else
		            		double_tap = 250;
		    		}
		        	if(event_release(PS4_CROSS))
		            	galop = FALSE ;
		            
					Spammer (galop, PS4_CROSS, 100);  
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			/* Skid Stop (Horse Level 3 minimum) 
			   Double tap R1/RB */
				if(skidStop_on)
				{
				    if(!get_val(PS4_L1) && event_press(PS4_R1))
		    		{
		        		if(double_tap)
		            		combo_run(SKID_STOP);
		            	else
		            	{
		            		double_tap = 250;
		                	combo_stop(SKID_STOP);
						}
		    		}
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
			/* Cinematic Camera calm your horse 
			   Calm your horse while in Cinematic Camera */
				if(cinematicCalm_on)
				{
		    		if((event_release(cinema_btn) && get_ptime(cinema_btn) >= 1500))
		        		cinema = TRUE ; 
		 
		    		if(cinema)
		    		{
		        		combo_run(CALM); 
		        		autorun();
		        		
		        		if(event_press(cinema_btn) || event_press(PS4_L2))
		            		cinema = FALSE;
		    		}
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 	
			/* Spin 
			   Hold L3/LS to spin */
				if(spin_on)
				{
		    		if(get_val(PS4_L3))
		    		{
			            set_val(PS4_CROSS, 100);
			            r_val = 5;
		        		reel(PS4_LX, PS4_LY);
		    		}
				}
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
				if(profile_idx < AMOUNT_OF_PROFILES) 
				{
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                  SPEED TOGGLES                                                        |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
				// Speed Toggles
				  //toggle_I_want_to_edit[profile]  = speed_toggle( hold BTN1, hold BTN2, hold time, toggle_I_want_to_edit([profile]) , corresponding modName_idx );
					toggle_rapidfire[profile_idx]  = speed_toggle( PS4_CROSS, PS4_UP   , 500 , toggle_rapidfire[profile_idx] , 1 );
					toggle_headshot[profile_idx]   = speed_toggle( PS4_CROSS, PS4_DOWN , 500 , toggle_headshot[profile_idx]  , 2 );
					toggle_crouchshot[profile_idx] = speed_toggle( PS4_CROSS, PS4_RIGHT, 500 , toggle_crouchshot[profile_idx], 3 );
					toggle_strafeShot[profile_idx] = speed_toggle( PS4_CROSS, PS4_LEFT , 500 , toggle_strafeShot[profile_idx], 5 );
					// We can add as many speed toogle as we need
					
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                    CROUCH SHOT (3)                                                    |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
			  
				// If Crouch Shot is enable for the curent profile
					if(toggle_crouchshot[profile_idx] == 1)
					{		
					// Run combo
						if(get_val(PS4_L2))
							combo_run(CROUCH);
						else
							combo_stop(CROUCH);
					}
			
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                      JUMP SHOT (4)                                                    |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/ 
			  
				// If Jump Shot is enable for the curent profile
					if(toggle_jumpshot[profile_idx] == 1)
					{
					// Run combo
						if(event_press(PS4_R2))
							combo_run(JUMPSHOT);
					}   	
			
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                      STRAFE SHOT (5)                                                  |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
			  
				// If Strafe Shot is enable for the curent profile
					if(toggle_strafeShot[profile_idx] == 1)
					{		
					// Run combo
						if(get_val(PS4_R2))
						{
							set_val(run_btn, 100);
							combo_run(STRAFESHOT);
						}
						else
							combo_stop(STRAFESHOT);
					}
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                     HEAD SHOT (2)                                                     |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/ 
			  
			  	// If Head Shot is enable for the curent profile
					if(toggle_headshot[profile_idx] == 1)
					{	
						if(!get_val(PS4_L1) && get_val(PS4_L2))
						{
							if(antirecoil_vertical[profile_idx] < 0)
								headshot_Y_val = 100;
							else
								headshot_Y_val = -100;
								
							if(event_press(PS4_RIGHT))
								range[profile_idx] += 1;
								
							if(event_press(PS4_LEFT))
								range[profile_idx] -= 1;
							
							if(range[profile_idx] < 0)
								range[profile_idx] = 2;
							if(range[profile_idx] > 2)
								range[profile_idx] = 0;
						}
						
			        	if(range[profile_idx] == 0)
			            	range_wait = WAIT_CLOSE;
			        	if(range[profile_idx] == 1)
			            	range_wait = WAIT_MEDIUM;
			        	if(range[profile_idx] == 2)
			            	range_wait = WAIT_LONG;
			
			    		if(!get_val(PS4_L1) && (get_lval(PS4_L2) && get_ptime(PS4_L2) > 300 && !head))
			    		{
			      			combo_run(HEADSHOT);
			       			head = TRUE;
			      		}	
			         
			    		if(event_release(PS4_L2) && get_ptime(PS4_L2) > 300)
			    		{
			       			headshot_Y_val = (3 * (headshot_Y_val / 5)) * -1;
			       			combo_run(HEADSHOT);
			       			head = FALSE;
			       		}
					}
	
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                      DEAD SHOT (8)                                                    |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/ 
			
				// If DeadShot is enable for the curent profile
					if(toggle_deadshot[profile_idx] == 1)
					{
			    		if(!deadeye && get_lval(PS4_L2) && event_press(PS4_R2)) 
			        		combo_run(DEADSHOT);
			        }
			        
			  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
			  |                                                    AUTO DEADEYE (9)                                                   |
			  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/ 
			
				// If Auto DeadEye is enable for the curent profile
					if(toggle_autoDE[profile_idx] == 1)
					{
						if(event_press(PS4_L2))
						{
							deadeye = TRUE;
			        		combo_run(DEADEYE);
			        	}
			        		
						if(event_release(PS4_L2) && !stopDE_on)
							deadeye = FALSE; 
			        }
			
			// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
				/* DeadEye Auto Stop for Online
				   Stop DeadEye when you release Aiming button */
					if(stopDE_on)
					{
						if(get_val(PS4_L2) && event_press(PS4_R3)) 
							deadeye = !deadeye;
							
						if(event_release(PS4_L2) && deadeye)
						{
							combo_run(DEADEYE);
							deadeye = FALSE;
						}
					}
				} // profil_idx < 3 - no weapon
			} // NOT Fishing mod
		} // ModMenu OFF end
	
								/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
								|      FEATURES THAT WORK EVERYTIME (IN MOD MENU/EDIT OR NOT) BUT NOT WITH Profile 4 and NOT with FISHING MODE          |
								◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
		if(profile_idx < AMOUNT_OF_PROFILES && !fishing_on)
		{
	  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  |                                                    ANTI RECOIL (0)                                                    |
	  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	
		// If Anti-Recoil is enable for the active profile
			if(toggle_antirecoil[profile_idx] == 1)
			{
				if(get_val(PS4_R2) && get_val(PS4_L2))
					combo_run(ANTIRECOIL);	
				else
					combo_stop(ANTIRECOIL);
			}
	
	  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  |                                                    RAPID FIRE (1)                                                     |
	  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/  
	  
		// If RapidFire is enable for the active profile
			if(toggle_rapidfire[profile_idx])
			{
			// Rate of Fire Calculation
	    		hold_time = 500 / rate_of_fire[profile_idx]; 
	   			rest_time = hold_time;
	    		if(rest_time < 0) rest_time = 0;
	    
			// Run combo
	    		if(!get_val(PS4_L1))
	    		{
	    			if(get_val(PS4_L2) && get_val(PS4_R2))
	    				combo_run(RAPIDFIRE);
	    			else
	    				combo_stop(RAPIDFIRE);
	    				
		    		if(toggle_rapidfire[profile_idx] == 2 && !get_val(PS4_L2) && get_val(PS4_R1))
			    		combo_run(CARCANO);
	    		}
			}
	
	  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  |                                                      AIM ABUSE (6)                                                    |
	  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/  
	  
	  	// If AIM Abuse is enable for the curent profile
			if(toggle_aimabuse[profile_idx] == 1)
			{
				if(get_val(PS4_L2)) 
					combo_run(AIM_ABUSE);
				else 
					combo_stop(AIM_ABUSE); 
			} 
			
	  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  |                                                      AIM ASSIST (7)                                                   |
	  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	
		// If AIM Assist is enable for the curent profile
			if(toggle_aimassist[profile_idx] == 1)
			{
				if(get_val(PS4_L2)  && !get_val(PS4_R2)) 
					combo_run(AIM_ASSIST);
				else 
					combo_stop(AIM_ASSIST); 
			}
			
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		/* Auto Scope Out
		   Unscope for you when you release Aiming button */
			if(unscope_on)
			{
				if(get_val(PS4_L2) && event_press(PS4_DOWN))
					scope = !scope;
			
				if(event_release(PS4_L2) && scope)
					combo_run(SCOPEOUT);
			}
	
		// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
		/* Auto Reload 
		   Reload for you when you release Fire button */
			if(reload_on)
			{
	   			if(!toggle_rapidfire[profile_idx] && (event_release(PS4_R2) && !get_val(PS4_L1)))
	 				combo_run(RELOAD);
			}
			
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
		} // NOT Profile 4 end	
		
	  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
	  |                                                    REFRESH DISPLAY                                                    |
	  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
	  
		if(display_new) 
		{
		// Clear OLED screen	
			cls_oled(0);
			count_black = 0;
			
			if(ModEdit)
			{
		    // Display Value Name and value
	    		// Mods that can have different values depending the active Profile
			    // Display_edit( corresponding valName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , val_I_want_to_be_displayed[profile] );
				display_edit( 0 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH)  , ANTIRECOIL_VERTICAL[0]  , antirecoil_vertical[profile_idx]  );
				display_edit( 1 , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL_HORIZONTAL[0], antirecoil_horizontal[profile_idx]);
				display_edit( 2 , center_x(sizeof(RATE_OF_FIRE) - 1, OLED_FONT_MEDIUM_WIDTH)         , RATE_OF_FIRE[0]         , rate_of_fire[profile_idx]         );
				
				if(valName_idx == 3) // Range
	    		{
	    			printf(center_x(sizeof(RANGE) - 1, OLED_FONT_MEDIUM_WIDTH), 0, OLED_FONT_MEDIUM, OLED_WHITE, RANGE[0]);
	    			if(range[profile_idx] == 0)
	    				printf(center_x(sizeof(CLOSE) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,CLOSE[0]);
	    			else if(range[profile_idx] == 1)
	    				printf(center_x(sizeof(MEDIUM) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,MEDIUM[0]);
	    			else if(range[profile_idx] == 2)
	    				printf(center_x(sizeof(LONG) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,LONG[0]);
	    		}
				
				// Mods that have same value on every Profile
				display_edit( 4 , center_x(sizeof(CROUCH_SPEED) - 1, OLED_FONT_MEDIUM_WIDTH)    , CROUCH_SPEED[0]    , crouchShot_time );
				display_edit( 5 , center_x(sizeof(JUMP_SPEED) - 1, OLED_FONT_MEDIUM_WIDTH)      , JUMP_SPEED[0]      , jumpShot_time   );
				display_edit( 6 , center_x(sizeof(STRAFE_SPEED) - 1, OLED_FONT_MEDIUM_WIDTH)    , STRAFE_SPEED[0]    , strafeShot_time );
				display_edit( 7 , center_x(sizeof(AIMABUSE_HOLD) - 1, OLED_FONT_MEDIUM_WIDTH)   , AIMABUSE_HOLD[0]   , aimabuse_hold   );
				display_edit( 8 , center_x(sizeof(AIMABUSE_RELEASE) - 1, OLED_FONT_MEDIUM_WIDTH), AIMABUSE_RELEASE[0], aimabuse_release);
				display_edit( 9 , center_x(sizeof(AIMASSIST_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMASSIST_SIZE[0]  , aimassist_size  );
				display_edit( 10, center_x(sizeof(AIMASSIST_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMASSIST_TIME[0]  , aimassist_time  );
				
			    // Display # Profile only on values that may be different depending on the Profile
				if(valName_idx < AMOUNT_OF_MULTI_VAL)  
				{
					if(profile_idx == 0) // profile_idx = profile_idx = Profile
	    				printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); // print Profile 1
	    			else if(profile_idx == 1)
	    				printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]); // print Profile 2
	    			else if(profile_idx == 2)
	    				printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); // print Profile 3
				}
				else // Mods that work on every profiles
	    			printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); // print AllProfiles
			}
			else
			{
		    // Display Mod Name and ON/OFF
	    		// Mods that can have different ON/OFF status depending the active Profile
	    		
			    // Display_mod( corresponding modName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , toggle_I_want_to_be_displayed[profile]);
				display_mod( 0 ,  center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]);
				display_mod( 1 ,  center_x(sizeof(RAPIDFIRE) - 1, OLED_FONT_MEDIUM_WIDTH)  , RAPIDFIRE[0]  , toggle_rapidfire[profile_idx] );
				display_mod( 2 ,  center_x(sizeof(HEADSHOT) - 1, OLED_FONT_MEDIUM_WIDTH)   , HEADSHOT[0]   , toggle_headshot[profile_idx]  );
				display_mod( 3 ,  center_x(sizeof(CROUCHSHOT) - 1, OLED_FONT_MEDIUM_WIDTH) , CROUCHSHOT[0] , toggle_crouchshot[profile_idx]);
				display_mod( 4 ,  center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH)   , JUMPSHOT[0]   , toggle_jumpshot[profile_idx]  );
				display_mod( 5 ,  center_x(sizeof(STRAFESHOT) - 1, OLED_FONT_MEDIUM_WIDTH) , STRAFESHOT[0] , toggle_strafeShot[profile_idx]);
				display_mod( 6 ,  center_x(sizeof(AIMABUSE) - 1, OLED_FONT_MEDIUM_WIDTH)   , AIMABUSE[0]   , toggle_aimabuse[profile_idx]  );
				display_mod( 7 ,  center_x(sizeof(AIMASSIST) - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMASSIST[0]  , toggle_aimassist[profile_idx] );
				display_mod( 8 ,  center_x(sizeof(DEADSHOT) - 1, OLED_FONT_MEDIUM_WIDTH)   , DEADSHOT[0]   , toggle_deadshot[profile_idx]  );
				display_mod( 9 ,  center_x(sizeof(AUTODEADEYE) - 1, OLED_FONT_MEDIUM_WIDTH), AUTODEADEYE[0], toggle_autoDE[profile_idx]    );
				
				// Mods that have same ON/OFF status on every Profile
				display_mod( 10,  center_x(sizeof(AUTORUN) - 1, OLED_FONT_MEDIUM_WIDTH)    , AUTORUN[0]    , autorun_on      );
				display_mod( 11,  center_x(sizeof(STOPDEADEYE) - 1, OLED_FONT_MEDIUM_WIDTH), STOPDEADEYE[0], stopDE_on       );
				display_mod( 12,  center_x(sizeof(AUTOUNSCOPE) - 1, OLED_FONT_MEDIUM_WIDTH), AUTOUNSCOPE[0], unscope_on      );
				display_mod( 13,  center_x(sizeof(AUTORELOAD) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTORELOAD[0] , reload_on       );
				display_mod( 14,  center_x(sizeof(CUTTHEROPE) - 1, OLED_FONT_MEDIUM_WIDTH) , CUTTHEROPE[0] , rope_on         );
				display_mod( 15,  center_x(sizeof(MELEESPAM) - 1, OLED_FONT_MEDIUM_WIDTH)  , MELEESPAM[0]  , melee_on        );
				display_mod( 16,  center_x(sizeof(EASYEAGLE) - 1, OLED_FONT_MEDIUM_WIDTH)  , EASYEAGLE[0]  , eagle_on        );
				display_mod( 17,  center_x(sizeof(HORSESPRINT) - 1, OLED_FONT_MEDIUM_WIDTH), HORSESPRINT[0], horseSprint_on  );
				display_mod( 18,  center_x(sizeof(SKIDSTOP) - 1, OLED_FONT_MEDIUM_WIDTH)   , SKIDSTOP[0]   , skidStop_on     );
				display_mod( 19,  center_x(sizeof(CINEMATIC) - 1, OLED_FONT_MEDIUM_WIDTH)  , CINEMATIC[0]  , cinematicCalm_on);
				display_mod( 20,  center_x(sizeof(STANDARDFPS) - 1, OLED_FONT_MEDIUM_WIDTH), STANDARDFPS[0], FPSlayout_on    );
				display_mod( 21,  center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH)       , SWAP[0]       , swap_on         );
				display_mod( 22,  center_x(sizeof(SPIN) - 1, OLED_FONT_MEDIUM_WIDTH)       , SPIN[0]       , spin_on         );
				
				
				// Display # Profile only on mods that may have a different value depending on the Profile
				if(modName_idx < AMOUNT_OF_MULTI_TOGGLE)  
				{
					if(profile_idx == 0) // profile_idx = profile_idx = Profile
	    				printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); // print Profile 1
	    			else if(profile_idx == 1)
	    				printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]); // print Profile 2
	    			else if(profile_idx == 2)
	    				printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); // print Profile 3
				}
				else // Mods that work on every profiles 
	    			printf(center_x(sizeof(ALL) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,ALL[0]); // print AllProfiles
			}
			
			display_black = TRUE;
	        display_new = FALSE;
	    } // display_new end
	    
	// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	} // NOT KillSwitch end

// LEDs
	if(cut || fight || galop || (cinema && run == 2))
	{
		led_on = 150;
		color = 8;
		combo_run(BLINK);
	}
	else if(toggle_headshot[profile_idx] == 1)
	{
		led_on = 2000;
		color = range[profile_idx] + 4;
		combo_run(BLINK);
	}
	
	if(KillSwitch)
		led(8); // OFF
	else
	{	if(cinema || fishing_on)
			led(7); // white
		else
			led(profile_idx);
	}

} // main end
 
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     COMBO SECTION                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	

combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				   // display mods
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo QUICK_SWAP {
    set_val(PS4_L1, 100);
    wait(100);
    set_val(PS4_L1, 100);
    set_val(PS4_R1, 100);
    wait(50); 
    set_val(PS4_L1, 100);
    if(item)
    	set_val(PS4_R1, 0);
    wait(50);
    set_val(PS4_L1, 100); 
    if(item)
    	set_val(PS4_R1, 100);
    set_val(PS4_RX,wx_v);
    set_val(PS4_RY,wy_v);
    wait(100);
    set_val(PS4_L1, 0);
    wait(50);
    /*wait(200);
    if(!item && (profile_idx == 1 || profile_idx == 2))
		set_val(PS4_LY, -100);
	wait(200);
	if(!item && (profile_idx == 1 || profile_idx == 2))
	{
		set_val(PS4_LY, -100);
		set_val(PS4_SQUARE, 100);
	}*/
	wait(100);
    wx_v = 0;
    wy_v = 0;
    item = FALSE;
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RAPIDFIRE { 
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time - get_rtime());
    set_val(PS4_R2, 0);
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo HEADSHOT { 
    set_val(PS4_RY, headshot_Y_val);
    wait(range_wait);
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo AIM_ABUSE {
	wait(aimabuse_hold);
	set_val(PS4_L2, 0);
	wait(aimabuse_release);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo AIM_ASSIST { // AIM Assist
    set_val(PS4_RY,aimassist(PS4_RY, aimassist_size));
    wait(aimassist_time);
    set_val(PS4_RX,aimassist(PS4_RX, aimassist_size));
    set_val(PS4_LX,aimassist(PS4_LX, aimassist_size));
    wait(aimassist_time);
    set_val(PS4_RY,aimassist(PS4_RY,inv(aimassist_size))); 
    wait(aimassist_time);
    set_val(PS4_RX,aimassist(PS4_RX,inv(aimassist_size)));
    set_val(PS4_LX,aimassist(PS4_LX,inv(aimassist_size)));
    wait(aimassist_time);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo DEADSHOT {
    set_val(PS4_L2,100);
    set_val(PS4_R2,100);
    set_val(PS4_R3,100);
    wait(40);
    set_val(PS4_L2,100);
    set_val(PS4_R2,0);
    set_val(PS4_R3,0);
    wait(40);
    set_val(PS4_L2,100);
    set_val(PS4_R2,0);
    set_val(PS4_R3,100);
    wait(40);
    set_val(PS4_L2,0);
    set_val(PS4_R2,0);
    wait(370);
} 
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo CROUCH {
	wait(80);
    set_val(crouch_btn,100);
    wait(crouchShot_time);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo JUMPSHOT {
	wait(80);
    set_val(PS4_SQUARE,100);
    wait(jumpShot_time);
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo STRAFESHOT { 
    set_val(PS4_LX, 100);
    wait(strafeShot_time);
    wait(50);
    set_val(PS4_LX, -100);
    wait(strafeShot_time);
    wait(50);
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SPAM { 
    set_val(button, 100);
    wait(spam_value);
    set_val(button, 0);
    wait(spam_value);
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUN_FPS {
    wait(200);
    set_val(PS4_L3, 100);
    wait(50);
    wait(400);
    set_val(PS4_L3, 100);
    wait(50);
    fps_run = TRUE;
}
  
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo DEADEYE {
    wait(200);
    set_val(PS4_R3, 100);
    wait(90);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SCOPEOUT {
    set_val(PS4_L2, 100);
    wait(50);
    set_val(PS4_L2, 100);
    set_val(PS4_DOWN, 100);
    wait(50);
    scope = FALSE;
}
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜

combo RELOAD {
    wait(200);
    set_val(PS4_L2, 0);
    wait(50);
    set_val(PS4_L2, 100);
    wait(50);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo CALM { //horse
    wait(1500);
    set_val(PS4_L3, 100);
    wait(50);
    wait(3500);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo EAGLE_VISION {
    wait(30);
    set_val(PS4_L3, 100);
    set_val(PS4_R3, 100);
    wait(50);
 }
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SKID_STOP {
    set_val(PS4_R1, 100);
    set_val(PS4_CROSS, 100);
    wait(1000);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo BLINK {
	//led(profile_idx);
    wait(led_on);
    led(color);
    wait(300);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(PS4_RY) + antirecoil_vertical[profile_idx];  
    //if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) + 5)
    set_val(PS4_RY, AntirecoilVertical);
// Horizontal
    AntirecoilHorizontal = get_val(PS4_RX) + antirecoil_horizontal[profile_idx];
    //if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx]) + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo CARCANO {
	set_val(PS4_R2, 100);
	set_val(PS4_L2, 100);
    wait(10);
	set_val(PS4_L2, 100);
    set_val(PS4_R2, 100);
    wait(40);
    wait(200);
	set_val(PS4_R2, 100);
    wait(40);
    wait(1700);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// Fishing combos

combo TIP_UP {
    set_val(PS4_LY,-100);
    wait(500)
    set_val(PS4_LY,100);
    wait(1500);
}
combo SET_HOOK {
   wait(500);
   set_val(PS4_R2,100);
   wait(500);
   // fast reel
   fish_on = TRUE;
   r_val = 25;quad = 1;
   rx = 0; ry = -100;
}
combo CAST {
    hold_rod = TRUE;
    wait(5000);
    rx = 0; ry = -100;
    quad = 1;cast = TRUE;
}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       FUNCTIONS                                                       |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
  
function reel(f_Xaxis, f_Yaxis) {
    if(quad == 1) 
    {
        if(rx < 100) 
            rx += r_val;
        else 
            rx = 100;
        if(rx >= 50)
            ry += r_val;
    }    
    if(quad == 2) 
    {
        if(ry < 100) 
            ry += r_val;
        else 
            ry = 100;
        if(ry >= 50)
            rx -= r_val;
    }
    if(quad == 3) 
    {
        if(rx > -100)
            rx -= r_val;
        else
            rx = -100;
        if(rx <= -50)
            ry -= r_val;
    }
    if(quad == 4) 
    {
        if(ry >= -100)
            ry -= r_val;
        else
            ry = -100;
        if(ry <= -50)
            rx += r_val;
    }
    set_val(f_Xaxis,rx);
    set_val(f_Yaxis,ry);
    
    if(!rx || !ry) 
    {
        quad++;
        if(quad == 5)
            quad = 1;
    }
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function autorun() {
	// walk -> run -> sprint -> walk
	if(event_press(PS4_CROSS))
	{
		run += 1;
		if(run == 2 && cinema)
			combo_restart(BLINK);
	}
	if(run > 2)
		run = 0;
		
	if(!get_ival(PS4_CROSS))
	{
	// run
		if(run == 1) 
			set_val(PS4_CROSS, 100);
	// sprint
		if(run == 2)
		{
    		button = PS4_CROSS;
        	spam_value = 80;
    		combo_run(SPAM);
    	}
	}
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods
	
	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;

}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_vertical[profile_idx] = edit_val( 0 , antirecoil_vertical[profile_idx], 99  , 99  )
					
	if(valName_idx == f_idx)
	{
    // +1 or -1															 // We can add function variable for increase/decrease to define if we increase/decrease by 1, 10, 100 ...
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
	}
	// Block Rate of Fire to 1 minimum (if 0 combo goes crazy lol)
	if(rate_of_fire[profile_idx] < 1)
		rate_of_fire[profile_idx] = 1;

	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function speed_toggle(f_hold, f_press, f_time, f_val, f_string) {  // toggle_aimassist[profile_idx] = speed_toggle(PS4_R3, PS4_UP, toggle_aimassist[profile_idx], #cons_string for this toggle);
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == f_time) // Hold second button 300ms or more
		{
			modName_idx = f_string;
			
			if(f_val == 0)
			{
				if(f_string == 3) // If CrouchShot is enable, 
				{
					toggle_jumpshot[profile_idx] = 0; // disable JumpShot
					toggle_strafeShot[profile_idx] = 0; // disable StrafeShot
				}
				else if(f_string == 4) // If JumpShot is enable, 
				{
					toggle_crouchshot[profile_idx] = 0; // disable CrouchShot
					toggle_strafeShot[profile_idx] = 0; // disable StrafeShot
				}
				else if(f_string == 5) // If StrafeShot is enable, 
				{
					toggle_crouchshot[profile_idx] = 0; // disable CrouchShot
					toggle_jumpshot[profile_idx] = 0; // disable JumpShot
				}
				else if(f_string == 8) // If DeadShot is enable, 
					toggle_autoDE[profile_idx] = 0; // disable Auto DeadEye
					
				else if(f_string == 9) // If DeadEye is enable, 
					toggle_deadshot[profile_idx] = 0; // disable Auto DeadShot
					
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else
			{
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			display_new = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function toggle(f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, PS4_UP, toggle_antirecoil[profile_idx]);
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
				if(f_idx == 3) // If CrouchShot is enable, 
				{
					toggle_jumpshot[profile_idx] = 0; // disable JumpShot
					toggle_strafeShot[profile_idx] = 0; // disable StrafeShot
				}
				else if(f_idx == 4) // If JumpShot is enable, 
				{
					toggle_crouchshot[profile_idx] = 0; // disable CrouchShot
					toggle_strafeShot[profile_idx] = 0; // disable StrafeShot
				}
				else if(f_idx == 5) // If StrafeShot is enable, 
				{
					toggle_crouchshot[profile_idx] = 0; // disable CrouchShot
					toggle_jumpshot[profile_idx] = 0; // disable JumpShot
				}
				else if(f_idx == 8) // If DeadShot is enable, 
					toggle_autoDE[profile_idx] = 0; // disable Auto DeadEye
					
				else if(f_idx == 9) // If Auto DeadEye is enable, 
					toggle_deadshot[profile_idx] = 0; // disable Auto DeadShot
					
				if(f_idx == 1)
					f_val = cycle(f_val++, 0, 2);
				else
					f_val = cycle(f_val++, 0, 1);
			// Rumble	
				if(f_val == 0) 
					combo_run(RUMBLE_OFF);
				else
					combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(modName_idx == f_idx)
		{
			if(f_idx == 1)
				f_val = cycle(f_val--, 0, 2);
			else
				f_val = cycle(f_val--, 0, 1);
		// Rumble	
			if(f_val == 0) 
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
		}		
		display_new = TRUE;
	}
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_edit(f_idx, f_string, f_print, f_val) { // display_edit(0, center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_VERTICAL[0], antirecoil_vertical[profile_idx]);
	
	if(display_title)
		number_to_string(currentSlot, find_digits(currentSlot)); // display current # slot 
	else
	{
    	if(valName_idx == f_idx)
    	{
		// Display value name and value
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    	
    	// Display editable values that are not in the array (burstfire_hold for exemple)
    			number_to_string(f_val, find_digits(f_val));
    	}
    }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_mod(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 2, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        	
    	// Display ON OFF
    		if(f_toggle == 1)
    			printf(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
    		else if(f_toggle == 2)
    			printf(center_x(sizeof(CARCANO) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,CARCANO[0]);
    		else
    			printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
    	}
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
        
    // Substract    
        if(f_val < inv(f_rng_min)) 
        	f_val = inv(f_rng_min); 
   	// Add   
       	if(f_val > f_rng_max) 
        	f_val = f_rng_max;
		
        display_new = TRUE;
    }
    return f_val; 
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function aimassist(f_axis,f_val) { // AIM Assist

    if(abs(get_val(f_axis)) < aimassist_size + 1) 
        return f_val;
        
    return get_val(f_axis); 
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function Spammer (f_var, f_btn, f_time){            
 
    if(f_var)
    {
        button = f_btn;
        spam_value = f_time;
 
        if(get_val(f_btn))
        {
            combo_run(SPAM);
            if(galop)
            	combo_run(CALM);
        }
        else 
        { 
        	combo_stop(BLINK);
        	combo_stop(SPAM); 
        	combo_stop(CALM);
        }
    }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function number_to_string(f_val,f_digits) {
/***********************************************************
 *  number_to_string(value to convert, # of digits in value)
 *
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
 *   
 *      Convert digits to ASCII
 *      Add ASCII character to print buffer
 *      Print string centered X & Y on OLED
 *  
***********************************************************/
    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }
        }
        c_val /= 10;
    }
    if(display_title)
    	//puts_oled(120, 53, OLED_FONT_SMALL, i - 1, OLED_WHITE); // display current # slot - Small
    	puts_oled(116, 45, OLED_FONT_MEDIUM, i - 1, OLED_WHITE); // display current # slot - Medium
    else
    	puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // adjustable value centered in X
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_x(f_chars,f_font) {
//  center_x(number of chars,font size);  
//	    return X for Centering String Horizontally

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function save () {
	combo_run(SAVE);
	
// Profile 1
	// Toggles                                      // Values
	set_pvar(SPVAR_1 , toggle_antirecoil[0]);         set_pvar(SPVAR_11, antirecoil_vertical[0]);		set_pvar(SPVAR_12, antirecoil_horizontal[0]);
	set_pvar(SPVAR_2 , toggle_rapidfire[0] );         set_pvar(SPVAR_13, rate_of_fire[0]       );
	set_pvar(SPVAR_3 , toggle_headshot[0]  );         set_pvar(SPVAR_14, range[0]              );
	set_pvar(SPVAR_4 , toggle_crouchshot[0]);        
	set_pvar(SPVAR_5 , toggle_jumpshot[0]  );         
	set_pvar(SPVAR_6 , toggle_strafeShot[0]);
	set_pvar(SPVAR_7 , toggle_aimabuse[0]  ); 
	set_pvar(SPVAR_8 , toggle_aimassist[0] ); 
	set_pvar(SPVAR_9 , toggle_deadshot[0]  );
	set_pvar(SPVAR_10, toggle_autoDE[0]    );
// Profile 2
	// Toggles                                       // Values
	set_pvar(SPVAR_15, toggle_antirecoil[1]);        set_pvar(SPVAR_25, antirecoil_vertical[1]);		set_pvar(SPVAR_26, antirecoil_horizontal[1]);
	set_pvar(SPVAR_16, toggle_rapidfire[1] );        set_pvar(SPVAR_27, rate_of_fire[1]       );  
	set_pvar(SPVAR_17, toggle_headshot[1]  );        set_pvar(SPVAR_28, range[1]              );
	set_pvar(SPVAR_18, toggle_crouchshot[1]);      
	set_pvar(SPVAR_19, toggle_jumpshot[1]  );
	set_pvar(SPVAR_20, toggle_strafeShot[1]);
	set_pvar(SPVAR_21, toggle_aimabuse[1]  );
	set_pvar(SPVAR_22, toggle_aimassist[1] );
	set_pvar(SPVAR_23, toggle_deadshot[1]  );
	set_pvar(SPVAR_24, toggle_autoDE[1]    );
// Profile 3
	// Toggles                                       // Values
	set_pvar(SPVAR_29, toggle_antirecoil[2]);        set_pvar(SPVAR_39, antirecoil_vertical[2]);		set_pvar(SPVAR_40, antirecoil_horizontal[2]);
	set_pvar(SPVAR_30, toggle_rapidfire[2] );        set_pvar(SPVAR_41, rate_of_fire[2]       );
	set_pvar(SPVAR_31, toggle_headshot[2]  );        set_pvar(SPVAR_42, range[2]              );		
	set_pvar(SPVAR_32, toggle_crouchshot[2]);			 
	set_pvar(SPVAR_33, toggle_jumpshot[2]  );			 
	set_pvar(SPVAR_34, toggle_strafeShot[2]);			 
	set_pvar(SPVAR_35, toggle_aimabuse[2]  );			 
	set_pvar(SPVAR_36, toggle_aimassist[2] );
	set_pvar(SPVAR_37, toggle_deadshot[2]  );
	set_pvar(SPVAR_38, toggle_autoDE[2]    );
	
// Misc values	
//Misc toggles
					 
	set_pvar(SPVAR_43, autorun_on       );           set_pvar(SPVAR_55, crouchShot_time ); 
	set_pvar(SPVAR_44, stopDE_on        );           set_pvar(SPVAR_56, jumpShot_time   ); 
	set_pvar(SPVAR_45, unscope_on       );           set_pvar(SPVAR_57, strafeShot_time ); 
	set_pvar(SPVAR_46, reload_on        );           set_pvar(SPVAR_58, aimabuse_hold   ); 
	set_pvar(SPVAR_47, rope_on          );           set_pvar(SPVAR_59, aimabuse_release);
	set_pvar(SPVAR_48, melee_on         );           set_pvar(SPVAR_60, aimassist_size  );
	set_pvar(SPVAR_49, eagle_on         );           set_pvar(SPVAR_61, aimassist_time  );
	set_pvar(SPVAR_50, horseSprint_on   );
	set_pvar(SPVAR_51, skidStop_on      );
	set_pvar(SPVAR_52, cinematicCalm_on );
	set_pvar(SPVAR_53, FPSlayout_on     );
	set_pvar(SPVAR_54, swap_on          ); 
	set_pvar(SPVAR_62, spin_on          ); 
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
const uint8 picture[] = {127, 41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF9, 0xFF, 0x9F, 0xFC, 0x03, 0xFF, 0x87, 0xFF, 0x07, 0xC1, 0xFF,
0xC3, 0x7E, 0xCF, 0xEC, 0xFF, 0xF3, 0xFF, 0x3F, 0xFC, 0x07, 0xFF, 0x8F, 0xFE, 0x0F, 0x83, 0xFF, 0xC7, 0xFF, 0x9F, 0xF9, 0xFF, 0xE7, 0xFE, 0x7F, 0xFC, 0x0F, 0xFF, 0x9F, 0xFC, 0x1F, 0x07, 0xFF, 0xCF, 0xFF,
0x3F, 0xF3, 0x83, 0xCF, 0xFC, 0xFF, 0xF8, 0x1F, 0xFF, 0x3F, 0xF8, 0x7F, 0x0F, 0xFF, 0x9F, 0xFE, 0x7F, 0xE7, 0x07, 0x9C, 0x00, 0x79, 0xF0, 0x0F, 0x3E, 0x70, 0x00, 0xFE, 0x07, 0x9F, 0x3F, 0xFC, 0xFF, 0xCF,
0xFF, 0x38, 0x00, 0xF1, 0xE0, 0x1E, 0x3C, 0xE0, 0x01, 0xFC, 0x0F, 0x1E, 0x7F, 0xF0, 0xFF, 0x9F, 0xFE, 0x70, 0x01, 0xE3, 0xC0, 0x3C, 0x79, 0xC0, 0x03, 0xF8, 0x1E, 0x3C, 0x37, 0xC1, 0xFE, 0x3F, 0xFC, 0xE0,
0x03, 0xC7, 0x80, 0x78, 0xF3, 0x80, 0x07, 0xF0, 0x3C, 0x78, 0x3F, 0x81, 0xF8, 0x7F, 0xF9, 0xC0, 0x07, 0x8F, 0x00, 0xF1, 0xE7, 0x00, 0x1F, 0xF0, 0x78, 0xF0, 0x7F, 0x03, 0xF0, 0xF3, 0xC3, 0xFE, 0x0F, 0x1E,
0x01, 0xE3, 0xCF, 0xF8, 0x3D, 0xE0, 0xF1, 0xE0, 0xFE, 0x07, 0xE1, 0xE7, 0x87, 0xFC, 0x1E, 0x3C, 0x03, 0xC7, 0x9F, 0xF0, 0x7B, 0xC1, 0xE3, 0xC1, 0xFC, 0x0F, 0xC3, 0xCF, 0x0F, 0xF8, 0x3C, 0x78, 0x07, 0x8F,
0x3F, 0xE0, 0xE3, 0x83, 0xC7, 0x83, 0xF8, 0x0F, 0x87, 0x9E, 0x1F, 0xF0, 0x78, 0xF0, 0x0F, 0x1E, 0x7F, 0xC1, 0xC7, 0x07, 0x8F, 0x03, 0xF0, 0x3F, 0x0F, 0x3E, 0x38, 0x00, 0xF1, 0xE0, 0x1E, 0x3C, 0xE0, 0x03,
0x8E, 0x0F, 0x1E, 0x0F, 0xE0, 0x7E, 0x1E, 0x3C, 0x70, 0x01, 0xE3, 0xC0, 0x3C, 0x79, 0xC0, 0x0F, 0xFE, 0x1E, 0x3C, 0x1F, 0xC0, 0xFC, 0x3C, 0x78, 0xE0, 0x03, 0xC7, 0x80, 0x78, 0xF3, 0x80, 0x1F, 0xFC, 0x3C,
0x78, 0x3F, 0x81, 0xF8, 0x78, 0xF1, 0xC0, 0x07, 0x8F, 0x00, 0xF1, 0xE7, 0x00, 0x3F, 0xF8, 0x78, 0xF0, 0x7F, 0x03, 0xF0, 0xF1, 0xF3, 0x80, 0x0F, 0x3E, 0x01, 0xE7, 0xCE, 0x00, 0x7F, 0xF0, 0xF3, 0xE0, 0xFE,
0x07, 0xC1, 0xE1, 0xE7, 0xFE, 0x7F, 0xFC, 0x0F, 0xFF, 0x9F, 0xFC, 0xE0, 0xE7, 0xFF, 0xC1, 0xF8, 0x0F, 0xC3, 0xC3, 0xCF, 0xFC, 0xFF, 0xF8, 0x1F, 0xFF, 0x3F, 0xF9, 0xC1, 0xCF, 0xFF, 0x83, 0xF8, 0x1F, 0x87,
0x87, 0x9F, 0xF9, 0xFF, 0xE0, 0x3F, 0xFC, 0x7F, 0xF3, 0x83, 0x9F, 0xFE, 0x07, 0xF0, 0x3F, 0x0F, 0x0F, 0x3F, 0xF3, 0xFF, 0xC0, 0x7F, 0xF0, 0xFF, 0xE6, 0x03, 0x3F, 0xF8, 0x0F, 0xE0, 0x7E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x81, 0xF8, 0x7F, 0xDF, 0xEF, 0xF3, 0xFE,
0xE1, 0xDF, 0xF7, 0xFE, 0xFC, 0xFE, 0x70, 0xE0, 0x3F, 0x03, 0xF0, 0xFF, 0xBF, 0xDF, 0xF7, 0xFD, 0xC3, 0xBF, 0xEF, 0xFD, 0xFB, 0xFE, 0xF1, 0xC0, 0xFE, 0x07, 0xE1, 0xC7, 0x7F, 0xBF, 0xEF, 0xFB, 0xCF, 0x7F,
0xDF, 0xFB, 0xF7, 0xFD, 0xE3, 0x81, 0xFC, 0x0F, 0x83, 0x8E, 0xE0, 0x39, 0xDC, 0x07, 0x9E, 0xE3, 0x87, 0x81, 0x8E, 0x3B, 0xE7, 0x03, 0xF8, 0x1F, 0x87, 0xFD, 0xC0, 0x73, 0xB8, 0x0F, 0xFD, 0xC7, 0x0F, 0x03,
0x1C, 0x77, 0xCE, 0x07, 0xF0, 0x3F, 0x0F, 0xFB, 0x80, 0xE7, 0x70, 0x1F, 0xFB, 0xFE, 0x1E, 0x06, 0x38, 0xEF, 0xDC, 0x0F, 0xE0, 0x7E, 0x1D, 0xC7, 0x01, 0xCE, 0xE0, 0x3F, 0xF7, 0xFC, 0x3C, 0x0C, 0x71, 0xDF,
0xF8, 0x1F, 0xC0, 0xFC, 0x3B, 0x8F, 0xC3, 0x9D, 0xFC, 0x7F, 0xEF, 0xF8, 0x78, 0x18, 0xE3, 0xBF, 0xF0, 0x3F, 0x81, 0xFC, 0x77, 0x1F, 0x87, 0x3B, 0xF8, 0xFF, 0xDE, 0x00, 0xF0, 0x31, 0xC7, 0x7F, 0xE0, 0x7F,
0x07, 0xF8, 0xEF, 0x38, 0x0E, 0x77, 0x01, 0xDB, 0xBC, 0x01, 0xE0, 0x63, 0x8E, 0xEF, 0xC0, 0xFE, 0x0F, 0xF1, 0xCE, 0x70, 0x1C, 0xEE, 0x03, 0xB7, 0x78, 0x03, 0xC0, 0xC7, 0x1D, 0xCF, 0x87, 0xFE, 0x1B, 0xF3,
0x9C, 0xE0, 0x39, 0xDC, 0x07, 0x0E, 0xF0, 0x07, 0x81, 0x8E, 0x3B, 0x9F, 0x1F, 0xFE, 0x7F, 0xE7, 0x39, 0xC0, 0x73, 0xB8, 0x0E, 0x1D, 0xE0, 0x0F, 0x03, 0x1C, 0x77, 0x1E, 0x3F, 0xFC, 0xFF, 0xCE, 0x3B, 0xFD,
0xFF, 0x7F, 0xDC, 0x3B, 0xC0, 0x1E, 0x1F, 0xBF, 0xEE, 0x3C, 0x7F, 0xF9, 0xFF, 0x9C, 0x77, 0xFB, 0xFE, 0xFF, 0xB8, 0x77, 0x80, 0x3C, 0x3F, 0x7F, 0xDC, 0x38, 0xFF, 0x73, 0xFF, 0x38, 0xEF, 0xF7, 0xF9, 0xFF,
0x70, 0xEF, 0x00, 0x78, 0x7E, 0x7F, 0x38, 0x70, 0xFF, 0xE3, 0xFC};

int __pictureX, __pictureX2, __pictureY, __pictureY2, __pictureBit, __pictureOffset, __pictureData;

function draw_picture(x, y, invert) {
	__pictureOffset = 2; // Reset the starting point
	__pictureBit = 8; // Reset bit flag
	for (__pictureY = 0; __pictureY < picture[1]; __pictureY++) { // Loop the Y axis
		for (__pictureX = 0; __pictureX < picture[0]; __pictureX++) { // Loop the X axis
			__pictureData = picture[__pictureOffset]
			__pictureX2 = x + __pictureX;
			__pictureY2 = y + __pictureY;
			if (__pictureX2 < 0 || __pictureX2 >= 128) {
				__pictureX2 -= 128;
			}
			if (__pictureY2 < 0 || __pictureY2 >= 64) {
				__pictureY2 -= 64;
			}
			if (test_bit(__pictureData, __pictureBit - 1)) {
				pixel_oled(__pictureX2, __pictureY2, !invert);
			}
			else {
				pixel_oled(__pictureX2, __pictureY2, invert);
			}
			__pictureBit--; // Decrement the bit flag, we're moving to the next bit
			if (!__pictureBit) { // Check if we've just handled the last bit
				__pictureBit = 8; // Reset the bit flag
				__pictureOffset++; // Move to the next value
			}
		}
	}
}