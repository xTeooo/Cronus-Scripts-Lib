/*

тЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтЦИтХЧ   тЦИтЦИтХЧтЦИтЦИтХЧ   тЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтЦИтЦИтЦИтЦИтХЧ тЦИтЦИтХЧ    тЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтХЧ 
тЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтХСтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтХРтЦИтЦИтХЧтЦИтЦИтХС    тЦИтЦИтХСтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХФтХРтХРтЦИтЦИтХЧ
тЦИтЦИтЦИтЦИтЦИтЦИтЦИтХСтЦИтЦИтХФтЦИтЦИтХЧ тЦИтЦИтХСтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХС тЦИтХЧ тЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтХЧ  тЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭ
тЦИтЦИтХФтХРтХРтЦИтЦИтХСтЦИтЦИтХСтХЪтЦИтЦИтХЧтЦИтЦИтХСтЦИтЦИтХС   тЦИтЦИтХСтХЪтХРтХРтХРтХРтЦИтЦИтХСтЦИтЦИтХФтХРтХРтХРтХЭ тЦИтЦИтХС   тЦИтЦИтХСтЦИтЦИтХСтЦИтЦИтЦИтХЧтЦИтЦИтХСтЦИтЦИтХФтХРтХРтХЭ  тЦИтЦИтХФтХРтХРтЦИтЦИтХЧ
тЦИтЦИтХС  тЦИтЦИтХСтЦИтЦИтХС тХЪтЦИтЦИтЦИтЦИтХСтХЪтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХСтЦИтЦИтХС     тХЪтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтХЪтЦИтЦИтЦИтХФтЦИтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтХС  тЦИтЦИтХС
тХЪтХРтХЭ  тХЪтХРтХЭтХЪтХРтХЭ  тХЪтХРтХРтХРтХЭ тХЪтХРтХРтХРтХРтХРтХЭ тХЪтХРтХРтХРтХРтХРтХРтХЭтХЪтХРтХЭ      тХЪтХРтХРтХРтХРтХРтХЭ  тХЪтХРтХРтХЭтХЪтХРтХРтХЭ тХЪтХРтХРтХРтХРтХРтХРтХЭтХЪтХРтХЭ  тХЪтХРтХЭ
_________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС
тЦС																тЦС
тЦС Find me ON discord @ https://discord.gg/cYPPMxUej5 Server #1	тЦС
тЦС_______________________________________________________________тЦС
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС
тЦС																тЦС
тЦС Find me ON discord @ https://discord.gg/EHS7Zg4CX7 Server #2	тЦС
тЦС_______________________________________________________________тЦС
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС
Full Credits at the bottom
Cronus Zen Script for Call of Duty MW/WZ/CW

 тЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦСтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦИтЦИтХЧтЦСтЦСтЦСтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтХЧтЦСтЦСтЦСтЦИтЦИтЦИтХЧтЦСтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦИтЦИтХЧтЦСтЦСтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтХЧ
тЦИтЦИтХФтХРтХРтХРтХРтХЭтЦСтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХСтЦСтЦСтЦСтЦИтЦИтХСтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтЦИтЦИтХЧтЦСтЦИтЦИтЦИтЦИтХСтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХСтЦСтЦИтЦИтХФтХЭтЦИтЦИтХФтХРтХРтХРтХРтХЭтЦИтЦИтХФтХРтХРтЦИтЦИтХЧ
тЦИтЦИтХСтЦСтЦСтЦИтЦИтХЧтЦСтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХСтХЪтЦИтЦИтХЧтЦСтЦИтЦИтХФтХЭтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦСтЦИтЦИтХФтЦИтЦИтЦИтЦИтХФтЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХСтЦИтЦИтЦИтЦИтЦИтХРтХЭтЦСтЦИтЦИтЦИтЦИтЦИтХЧтЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭ
тЦИтЦИтХСтЦСтЦСтХЪтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХЧтЦИтЦИтХФтХРтХРтЦИтЦИтХСтЦСтХЪтЦИтЦИтЦИтЦИтХФтХЭтЦСтЦИтЦИтХФтХРтХРтХЭтЦСтЦСтЦИтЦИтХСтХЪтЦИтЦИтХФтХЭтЦИтЦИтХСтЦИтЦИтХФтХРтХРтЦИтЦИтХСтЦИтЦИтХФтХРтЦИтЦИтХЧтЦСтЦИтЦИтХФтХРтХРтХЭтЦСтЦСтЦИтЦИтХФтХРтХРтЦИтЦИтХЧ
тХЪтЦИтЦИтЦИтЦИтЦИтЦИтХФтХЭтЦИтЦИтХСтЦСтЦСтЦИтЦИтХСтЦИтЦИтХСтЦСтЦСтЦИтЦИтХСтЦСтЦСтХЪтЦИтЦИтХФтХЭтЦСтЦСтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтХСтЦСтХЪтХРтХЭтЦСтЦИтЦИтХСтЦИтЦИтХСтЦСтЦСтЦИтЦИтХСтЦИтЦИтХСтЦСтХЪтЦИтЦИтХЧтЦИтЦИтЦИтЦИтЦИтЦИтЦИтХЧтЦИтЦИтХСтЦСтЦСтЦИтЦИтХС
 тХЪтХРтХРтХРтХРтХРтХЭтЦСтХЪтХРтХЭтЦСтЦСтХЪтХРтХЭтХЪтХРтХЭтЦСтЦСтХЪтХРтХЭтЦСтЦСтЦСтХЪтХРтХЭтЦСтЦСтЦСтХЪтХРтХРтХРтХРтХРтХРтХЭтХЪтХРтХЭтЦСтЦСтЦСтЦСтЦСтХЪтХРтХЭтХЪтХРтХЭтЦСтЦСтХЪтХРтХЭтХЪтХРтХЭтЦСтЦСтХЪтХРтХЭтХЪтХРтХРтХРтХРтХРтХРтХЭтХЪтХРтХЭтЦСтЦСтХЪтХРтХЭ

тЪб CURRENT FEATURES тЪб
------------------
тАв Automatic Sprint Detection
тАв Kill Switch
тАв OLED Menu (By AnusPower)
тАв Hold Breath
тАв Hair Trigger
тАв Quick Scope
тАв Bunny Hop
тАв Slide Cancel for MW/CW
тАв Rapid Fire (By Sweet_EviL_14)
тАв Auto Run
тАв EZ C4
тАв Chicken Mod
тАв Fast Melee
тАв Auto Ping
тАв Crescens Polar Aim Assist (By Crescens)
тАв Progressive Anti Recoil (By Batts)
тАв Profile Integration (Anti Recoil for Primary/Secondary)
тАв Profile Integration (Aim Assist for Primary/Secondary)
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

ЁЯУД GUIDE ЁЯУД
-----
Works with all guns.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- !! Auto Sprint !!
	тАв Turn ON if you are using the auto sprint feature in the game settings.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Hair Trigger
	тАв Makes firing & aiming your weapon faster and more responsive.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Menu
	тАв Lets you toggle mods in game.
		тАв Enter & Exit the menu by holding ADS button + Pressing OPTIONS/MENU button.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Kill Switch -=[Line: 174 assign button]=-
	тАв Instantly disables known mods to affect driving.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- C4 -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Automatically detonates C4 after throwing.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Hold Breath -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Automatically holds breth for Sniper Rifle
		тАв The light will change from light blue & dark blue while HOLD BREATH is running.
		тАв Turn OFF HOLD BREATH to zoom with your scope and then turn back ON.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Quick Scope -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Letting go of your ADS button will shoot the gun automatically.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Bunny Hop -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Holding JUMP will perform continuous jumps.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Slide Cancel (MW/WZ or Cold War) -=[Press (PS_X/XB_A to Switch in Menu]=-
	тАв Press your PRONE button to do a slide cancel.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Rapid Fire -=[Press (PS_X/XB_A to enable/disable in Menu the use of its core functions see Line: 196]=-
	тАв Turns any semi-automatic gun into a fully automatic gun.
	тАв LED ON controller of active profile will blink if Rapidfire or Akimbo enabled.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Autorun  -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Press your SPRINT button to activate your field upgrade.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Chicken Mod  -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Strafe and Crouch spam blended in together in a dancy way ;) While shooting.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Fast Melee  -=[PS_X/XB_A to enable/disable in Menu]=-
	тАв Hold down MELEE button to rapidly perform melee attacks.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

- Strafe Mod		-=[PS_X/XB_A to enable/disable in Menu]=-
					-=[PS_Square/XB_X to Edit in Menu]=-
					-=[Double Tap STRAFE_BUTTON to toggle starfe (EZ_STRAFE Must be Enabled) Line: 175]=-
	тАв Strafe left and right when shooting.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

NOTE: In menu, press your PROFILE_SWITCH Button, to swtich between Primary/Secondary identified by "1st" or "2nd" (Will show at bottom right of aim assist menu)

- Crescens Polar Aim Assist	-=[PS_X/XB_A to enable/disable in Menu]=-
							-=[PS_Square/XB_X to Edit in Menu]=-
							-=[DPAD(Up/Down) to switch selection in Menu]=-
							-=[DPAD(Left/Right) to increase/decrease selected value in Menu]=-
	тАв Please adjust to suit your play style.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

NOTE: In menu, press your PROFILE_SWITCH Button, to swtich between Primary/Secondary identified by "1st" or "2nd" (Will show at bottom right of anti recoil menu)

- Progressive Anti-Recoil	-=[PS_X/XB_A to enable/disable in Menu]=-
							-=[PS_Square/XB_X to Edit in Menu]=-
							-=[DPAD(Up/Down) to switch selection in Menu]=-
							-=[DPAD(Left/Right) to increase/decrease selected value in Menu]=-
							______________________________________________________________________
							тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС
							+-=[PS_X/XB_A to Switch between Vertical/Horizontal in Recoil Menu]=-+
							+-=[ADS + (PS_Square/XB_X) to Enter timer mode!]=-+
							+-=[ADS + FIRE to find your time value easily, soon as you let get of fire, you will be sent back to Recoil menu]=-+
							+-=[*** IMPORTENT *** Make sure Recoil values are 0 before trying to find time Value]=-+
							+-=[If gun pulling UP, Increase value]=-+
							+-=[If gun pulling RIGHT, Decrease value]=-+
							+-=[If gun pulling LEFT, Increase value]=-+
	тАв Please adjust to suit your play style.
____________________________________________________________________________________________________________________________________________________________
тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

NOTE: Killswitch by double tapping button assigned Line 174 before driving, and double tap again after exiting car.
___________________________________________________________________________________________________________________________________________________________

ЁЯЫС DON'T CHANGE --> */define OFF = FALSE,	ON = TRUE;/* <-- DONT CHANGE ЁЯЫС
__________________________________________________________________________________________________________________________________________________________*/

//---------------------------------------------------------------------------------------------------------------------------------------------------------
// CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ CONFIGURATION BELOW тмЗ 
//---------------------------------------------------------------------------------------------------------------------------------------------------------

// Set your button layout below. See https://cronusmax.com/manual/identifiers.htm for list of buttons
//____________________________________________________________________________________________________________________________________________________________
//тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

define	PROFILE_SYNC		= PS4_DOWN;		// ADS + PROFILE_SYNC to switch profile without switching weapon.
define	PROFILE_SWITCH		= PS4_TRIANGLE;	// Tap button to switch profile
define	KILLSWITCH_BUTTON	= PS4_OPTIONS;	// Double TAP this button for kill switch
define	STRAFE_BUTTON		= PS4_LEFT;		// Double TAP this button to enable/disable the use of Strafe Mod toggle (Strafe Mod in menu must be enabled.)
//____________________________________________________________________________________________________________________________________________________________
//тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

define	PING				= PS4_UP;
define	ADS					= PS4_L2;
define	FIRE				= PS4_R2;
define	TACTICAL			= PS4_L1;
define	LETHAL				= PS4_R1;
define	SPRINT				= PS4_L3;
define	MELEE				= PS4_R3;
define	SWAP				= PS4_TRIANGLE;
define	PRONE				= PS4_CIRCLE;
define	JUMP				= PS4_CROSS;
define	RELOAD				= PS4_SQUARE;
define	AIM_X				= PS4_RX;
define	AIM_Y				= PS4_RY;
define	STRAFE				= PS4_LX;
define	WALK				= PS4_LY;
//____________________________________________________________________________________________________________________________________________________________
//тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

//  Threshold is the value needed for Slide Cancel to activate
define THRESHOLD          	 = 85;

define	INVERTED			= OFF;	// Turn ON if you play Inverted
define	EZ_HAIR_TRIGGER		= ON;	// Turn ON if you want to use EZ HAIR TRIGGER
define	ENABLE_RUMBLE		= OFF;	// Turn ON if you want to feel controller vibration, keep ingame enabled.
define	AUTO_SPRINT			= OFF;	// Turn ON if you are using **IN GAME* auto sprint
//____________________________________________________________________________________________________________________________________________________________
//тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

int RF_BOTH_PROFILE 				= FALSE;		// Refer to instructions above
define SYNC_BUTTON					= PS4_CIRCLE;	// Double tap to resync rapidfire

define MOD_TOGGLE_BUTTON 			= PS4_LEFT;
define RAPID_FIRE					= PS4_CROSS;
define AKIMBO_RAPID_FIRE			= PS4_SQUARE;
//____________________________________________________________________________________________________________________________________________________________
//тЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦСтЦС

/* *** MAKE SURE EZ_RAPID_FIRE is ENABLED (In Menu) ***

тАв	To toggle MODS, hold MOD_TOGGLE_BUTTON + toggle button defined in the compiler
		o	MOD_TOGGLE_BUTTON + RAPID_FIRE_BUTTON: it will enable classical rapid fire
		o	MOD_TOGGLE_BUTTON + AKIMBO_RAPID_FIRE_BUTTON: enable Akimbo rapid fire
		o	If you toggle again it will disable rapid fire

тАв	Using the compiler:
		o	if RF_BOTH_PROFILE = FALSE --> rapid fire is active for just 1 weapon!! when you press swap button rapid fire will be disabled
		o	if RF_BOTH_PROFILE = TRUE --> rapid fire is active for primary and secondary weapon!

тАв	When RF_BOTH_PROFILE = FALSE :
	o	when you switch your weapon rapid fire is OFF
	o	you switch back again your weapon : rapid fire is ON
	o	using pltate doesn't affect this if by accident rapid fire is switched ON or OFF for indiscreet weapon double tap O/B and the issue is fixed
	
	Credits: Sweet Evil for rapidfire code.
*/

//---------------------------------------------------------------------------------------------------------------------------------------------------------
// CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ CONFIGURATION ABOVE тмЖ
//---------------------------------------------------------------------------------------------------------------------------------------------------------

data(1,// begin of data segment--------
1,0,0,0, //1. Light_Blue
0,1,0,0, //2. Light_Red
0,0,1,0, //3. Light_Green
0,0,0,1, //4. Light_Pink
1,0,1,0, //5. Light_SkyBlue
0,1,1,0, //6. Light_Yellow
1,1,1,1, //7. Light_White
2,0,0,0, //1. Blue
0,2,0,0, //2. Red
0,0,2,0, //3. Green
0,0,0,2, //4. Pink
2,0,2,0, //5. SkyBlue
0,2,2,0, //6. Yellow
2,2,2,2, //7. White
3,0,0,0, //1. Dim_Blue
0,3,0,0, //2. Dim_Red
0,0,3,0, //3. Dim_Green
0,0,0,3, //4. Dim_Pink
3,0,3,0, //5. Dim_SkyBlue
0,3,3,0, //6. Dim_Yellow
3,3,3,3  //7. Dim_White
); // end of data segment--------------

define LED_OFF       				= -2;
define Light_Blue   		 		=  1;
define Light_Red     				=  2;
define Light_Green   				=  3;
define Light_Pink    				=  4;
define Light_SkyBlue 				=  5;
define Light_Yellow  				=  6;
define Light_White   				=  7;
define Blue          				=  8;
define Red           				=  9;
define Green         				= 10;
define Pink          				= 11;
define SkyBlue       				= 12;
define Yellow        				= 13;
define White         				= 14;
define Dim_Blue      				= 15;
define Dim_Red       				= 16;
define Dim_Green     				= 17;
define Dim_Pink      				= 18;
define Dim_SkyBlue   				= 19;
define Dim_Yellow    				= 20;
define Dim_White     				= 21;

define SMALL = 0,
MEDIUM = 1,
LARGE = 2,
F_WIDTH = 0,
F_HEIGHT = 1,
BLACK = 0,
WHITE = 1;

int EZ_HOLD_BREATH;
int EZ_RAPID_FIRE;
int EZ_AUTORUN;
int EZ_SLIDE_CANCEL;
int EZ_BUNNYHOP;
int EZ_QUICK_SCOPE;
int EZ_C4;
int CROUCH_DANCE;
int CRESCENS_POLAR_AIM_ASSIST;
int EZ_ANTI_RECOIL;
int EZ_FAST_MELEE;
int EZ_STRAFE;
int EZ_AUTO_PING;
int inverted;

int SPRINTING;
int ASSIST_GRADIENT;
int stick_input;
int rnd;
int mn = 326, mx = 328;
int RPressTime; // 8, 16, 24, 32...
int RPauseTime; // 8, 16, 24, 32...
int RDyn; // 40 default

int bStime;
int boot = OFF;

define TIME_BASE					= 4;	// don't change
define timelimit 					= 304;

int toggle_rapid_fire;
int rapid_fire_on;
int Click ;
int	Click_kill;
int	Click_strafe;
int toggleStrafe;

int KillSwitch;

const string Mods[] = {
	"Aim Assist",		// 0
	"Anti Recoil",		// 1
	"Rapidfire",		// 2
	"Slide Cancel",		// 3
	"Hold Breath",		// 4
	"Quick Scope",		// 5
	"Bunny Hop",		// 6
	"Auto Run",			// 7
	"EZ C4",			// 8
	"Chicken Mod",		// 9
	"Fast Melee",		// 10
	"Strafe Mod",		// 11
	"Auto Ping",		// 12
	""
}

int maxMods				= 12;

const string Misc[] = {
	"ON",				// 0
	"OFF",				// 1
	"TOGGLE",			// 2
	"EDIT",				// 3
	
	"Slide MW",			// 4
	"Slide CW",			// 5
	
	"Vertical",			// 6
	"Horizontal",		// 7
	"Start",			// 8
	"End",				// 9
	"Time",				// 10
	
	"Assist Radius",	// 11
	"Assist Speed",		// 12
	
	"SAVED",			// 13
	
	"1st",				// 14
	"2nd",				// 15
	
	"AR Timer",			// 16
	
	"Strafe Delay",		// 17
	
	"Fire",				// 18
	"ADS + Lethal",		// 19
	"ADS",				// 20
	"ADS + Fire",		// 21
	"ADS + Tact",		// 22
	
	"Fast Trig",		// 23
	"Dynamic",			// 24
	"Press",			// 25
	"Pause",			// 26
	
	""
}

const string dash = ">";

int display					= OFF;
int arTimerDisplay			= OFF;
int modMenu					= 0;
int subMenu					= 0;
int modIdx					= 0;
int valIdx					= 0;
int selIdx					= 0;
int profileIdx				= 0;

// AA Vars
int ASSIST_RADIUS[2]
int ASSIST_SPEED[2]

// AR STENTI SETTINGS
int antirecoil_start[2];
int antirecoil_end[2];
int antirecoil_time[2];

int antirecoilH_start[2];
int antirecoilH_end[2];
int antirecoilH_time[2];

// Start Anti-Recoil Variables
// Vertical
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int v,ar_y;

// Horizontal
int i_val_h;
int i_pnt_h;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;
// End Anti-Recoil Variables

// MISC Vars
int timerActive = OFF;
int arTimer;
int wtime;
int cled;
int modBefore;
int modAfter;
int bufferIndex;
int charIndex,digitIndex;
int Col_ind	;
int STRAFE_DELAY;

init
{
	
	if(get_pvar(SPVAR_64, 0, 9999, 0) != 1486)
	{
		set_pvar(SPVAR_64, 1486):
		reset_script_var();
		save_pvar();
	}
	
	load_pvar();
	
	if(INVERTED)
	{
		inverted = -1;
	}
	else
	{
		inverted = 1;
	}
	
	reset_leds():
	
	combo_run(bootScreen);
}

main
{
	
	if(ENABLE_RUMBLE == OFF)
	{
		block_rumble();
	}

	if (get_val(ADS) > 10 && event_release(PS4_OPTIONS) && !subMenu && !KillSwitch)
	{
		modMenu = !modMenu;

		set_val(PS4_OPTIONS, 0);

		combo_run(RUMBLE_ALERT);

		if(modMenu)
		{
			blockBtns();
			display = ON;
		}
		else
		{
			save_pvar();
			cls_oled(0);
			display = OFF;
			combo_run(SAVE);
		}
	}
	
	if(Click_kill > 0) Click_kill = Click_kill - get_rtime();
	if(event_press(KILLSWITCH_BUTTON) && Click_kill <= 0)
	{
		Click_kill = timelimit;
	}
	else if((event_press(KILLSWITCH_BUTTON) && Click_kill > 0) && !modMenu && !subMenu)
	{
		combo_run(cvibrate);

		KillSwitch = !KillSwitch;

		if(KillSwitch)
		{
			set_led(0,0);
			set_led(1,0);
			set_led(2,0);
			set_zen_led(Red);
		}
	}
	
	// Main Menu (Mods)
	if(modMenu)
	{
		blockBtns();
		boot = OFF;
		
		if(event_press(PS4_UP))
		{
			modIdx--;
			
			if(modIdx  < 0) modIdx = maxMods;
			
			display = ON;
		}
		
		if(event_press(PS4_DOWN))
		{
			modIdx++;
			
			if(modIdx  > maxMods) modIdx = 0;
			
			display = ON;
		}
		
		if(event_press(PS4_CIRCLE))
		{
			combo_run(RUMBLE_ALERT);
			
			modMenu = !modMenu;
			display = OFF;
			save_pvar();
			cls_oled(0);
			combo_run(SAVE);
		}
		
		//##############################################################
		
		if(modIdx == 0) //Aim Assist
		{
			modStatus(CRESCENS_POLAR_AIM_ASSIST);
			
			if(event_press(PS4_CROSS))
			{
				CRESCENS_POLAR_AIM_ASSIST = !CRESCENS_POLAR_AIM_ASSIST;
				
				display = ON;
			}
			
			if(event_press(PS4_SQUARE))
			{
				modMenu = !modMenu;
				subMenu = !subMenu;
				display = ON;
				selIdx = 0;
			}
		}
		
		if(modIdx == 1) //Anti Recoil
		{
			modStatus(EZ_ANTI_RECOIL);
			
			if(event_press(PS4_CROSS))
			{
				EZ_ANTI_RECOIL = !EZ_ANTI_RECOIL;
				
				display = ON;
			}
			
			if(event_press(PS4_SQUARE))
			{
				modMenu = !modMenu;
				subMenu = !subMenu;
				display = ON;
				selIdx = 1;
			}
		}
		
		if(modIdx == 2) //Rapidfire
		{
			modStatus(EZ_RAPID_FIRE);

			if(event_press(PS4_CROSS))
			{
				EZ_RAPID_FIRE++;
				
				if(EZ_RAPID_FIRE > 2) EZ_RAPID_FIRE = 0;
				
				display = ON;
			}
			
			if(event_press(PS4_SQUARE))
			{
				modMenu = !modMenu;
				subMenu = !subMenu;
				display = ON;
				selIdx = 1;
			}
		}
		
		if(modIdx == 3) //Slide Cancel
		{
			modStatus(EZ_SLIDE_CANCEL);
			
			if(event_press(PS4_CROSS))
			{
				EZ_SLIDE_CANCEL++;
				
				if(EZ_SLIDE_CANCEL > 2) EZ_SLIDE_CANCEL = 0;
				
				display = ON;
			}
		}
		
		if(modIdx == 4) //Hold Breath
		{
			modStatus(EZ_HOLD_BREATH);
			
			if(event_press(PS4_CROSS))
			{
				EZ_HOLD_BREATH = !EZ_HOLD_BREATH;
				
				display = ON;
			}
		}
		
		if(modIdx == 5) //Quick Scope
		{
			modStatus(EZ_QUICK_SCOPE);
			
			if(event_press(PS4_CROSS))
			{
				EZ_QUICK_SCOPE = !EZ_QUICK_SCOPE;
				
				display = ON;
			}
		}
		
		if(modIdx == 6) //Bunny Hop
		{
			modStatus(EZ_BUNNYHOP);
			
			if(event_press(PS4_CROSS))
			{
				EZ_BUNNYHOP = !EZ_BUNNYHOP;
				
				display = ON;
			}
		}
		
		if(modIdx == 7) //Auto Run
		{
			modStatus(EZ_AUTORUN);
			
			if(event_press(PS4_CROSS))
			{
				EZ_AUTORUN = !EZ_AUTORUN;
				
				display = ON;
			}
		}
		
		if(modIdx == 8) //EZ C4
		{
			modStatus(EZ_C4);
			
			if(event_press(PS4_CROSS))
			{
				EZ_C4 = !EZ_C4;
				
				display = ON;
			}
		}
		
		if(modIdx == 9) //Chicken Mod
		{
			modStatus(CROUCH_DANCE);
			
			if(event_press(PS4_CROSS))
			{
				CROUCH_DANCE++;
				
				if(CROUCH_DANCE > 2) CROUCH_DANCE = 0;
				
				display = ON;
			}
		}
		
		if(modIdx == 10) //Fast Melee
		{
			modStatus(EZ_FAST_MELEE);
			
			if(event_press(PS4_CROSS))
			{
				EZ_FAST_MELEE = !EZ_FAST_MELEE;
				
				display = ON;
			}
		}
		
		if(modIdx == 11) //Strafe Mod
		{
			modStatus(EZ_STRAFE);
			
			if(event_press(PS4_CROSS))
			{
				EZ_STRAFE = !EZ_STRAFE;
				
				display = ON;
			}
			
			if(event_press(PS4_SQUARE))
			{
				modMenu = !modMenu;
				subMenu = !subMenu;
				display = ON;
			}
		}
		
		if(modIdx == 12) //Auto Ping
		{
			modStatus(EZ_AUTO_PING);
			
			if(event_press(PS4_CROSS))
			{
				EZ_AUTO_PING++;
				
				if(EZ_AUTO_PING > 4) EZ_AUTO_PING = 0;
				
				display = ON;
			}
		}
		
	}
	
	// Sub Menu (Edits)
	if(subMenu)
	{
		blockBtns();
		
		// Back to Main Menu
		if(event_press(PS4_CIRCLE))
		{
			subMenu = !subMenu;
			modMenu = !modMenu;
			display = ON;
		}
		
		if(modIdx == 0) //Aim Assist
		{
			if(event_press(PS4_UP))
			{
				selIdx--;
				
				if(selIdx < 0) selIdx = 1;
				
				display = ON;
			}
			
			if(event_press(PS4_DOWN))
			{
				selIdx++;
				
				if(selIdx > 1) selIdx = 0;
				
				display = ON;
			}
			
			if(event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))
			{
				if((selIdx == 0) && (ASSIST_RADIUS[profileIdx] != 0)) // Radius
				{
					ASSIST_RADIUS[profileIdx] = ASSIST_RADIUS[profileIdx] - 2;
				}
				
				if((selIdx == 1) && (ASSIST_SPEED[profileIdx] != 0)) // Speed
				{
					ASSIST_SPEED[profileIdx] = ASSIST_SPEED[profileIdx] - 2;
				}
				
				display = ON;
			}

			if(event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))
			{
				if((selIdx == 0) && (ASSIST_RADIUS[profileIdx] != 38)) // Radius
				{
					ASSIST_RADIUS[profileIdx] = ASSIST_RADIUS[profileIdx] + 2;
				}
				
				if((selIdx == 1) && (ASSIST_SPEED[profileIdx] != 36)) // Speed
				{
					ASSIST_SPEED[profileIdx] = ASSIST_SPEED[profileIdx] + 2;
				}
				
				display = ON;
			}
		}
		
		if(modIdx == 1) //Anti Recoil
		{
			if(event_press(PS4_UP))
			{
				selIdx--;
				
				if(selIdx < 0) selIdx = 2;
				
				display = ON;
			}
			
			if(event_press(PS4_DOWN))
			{
				selIdx++;
				
				if(selIdx > 2) selIdx = 0;
				
				display = ON;
			}
			
			if(event_press(PS4_CROSS))
			{
				valIdx++;
				
				if(valIdx  > 1) valIdx = 0;
				display = ON;
			}
			
			if(get_ival(ADS) > 10 && event_press(PS4_SQUARE))
			{
				// timer
				subMenu = !subMenu;
				save_pvar();
				display = OFF;
				cls_oled(0);
				timerActive = ON;
				arTimerDisplay = ON;
			}
			
			// Vertical valIdx
			if(valIdx == 0)
			{
				if(event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))
				{
					if((selIdx == 0) && (antirecoil_start[profileIdx] != 0)) // Start Vertical
					{
						antirecoil_start[profileIdx]--;
					}
					
					if((selIdx == 1) && (antirecoil_end[profileIdx] != 0)) // End Vertical
					{
						antirecoil_end[profileIdx]--;
					}
					
					if((selIdx == 2) && (antirecoil_time[profileIdx] != 0)) // Time Vertical
					{
						antirecoil_time[profileIdx]--;
					}
					
					display = ON;
				}

				if(event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))
				{
					if((selIdx == 0) && (antirecoil_start[profileIdx] != 100)) // Start Vertical
					{
						antirecoil_start[profileIdx]++;
					}
					
					if((selIdx == 1) && (antirecoil_end[profileIdx] != 100)) // End Vertical
					{
						antirecoil_end[profileIdx]++;
					}
					
					if((selIdx == 2) && (antirecoil_time[profileIdx] != 10000)) // Time Vertical
					{
						antirecoil_time[profileIdx]++;
					}
					
					display = ON;
				}
			}
			
			// Horizontal valIdx
			if(valIdx == 1)
			{
				if(event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))
				{
					if((selIdx == 0) && (antirecoilH_start[profileIdx] != -100)) // Start Horizontal
					{
						antirecoilH_start[profileIdx]--;
					}
					
					if((selIdx == 1) && (antirecoilH_end[profileIdx] != -100)) // End Horizontal
					{
						antirecoilH_end[profileIdx]--;
					}
					
					if((selIdx == 2) && (antirecoilH_time[profileIdx] != 0)) // Time Horizontal
					{
						antirecoilH_time[profileIdx]--;
					}
					
					display = ON;
				}

				if(event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))
				{
					if((selIdx == 0) && (antirecoilH_start[profileIdx] != 100)) // Start Horizontal
					{
						antirecoilH_start[profileIdx]++;
					}
					
					if((selIdx == 1) && (antirecoilH_end[profileIdx] != 100)) // End Horizontal
					{
						antirecoilH_end[profileIdx]++;
					}
					
					if((selIdx == 2) && (antirecoilH_time[profileIdx] != 10000)) // Time Horizontal
					{
						antirecoilH_time[profileIdx]++;
					}
					
					display = ON;
				}
			}
		}
		
		if(modIdx == 2) //RapidFire
		{
			if(event_press(PS4_UP))
			{
				selIdx--;
				
				if(selIdx < 0) selIdx = 2;
				
				display = ON;
			}
			
			if(event_press(PS4_DOWN))
			{
				selIdx++;
				
				if(selIdx > 2) selIdx = 0;
				
				display = ON;
			}
			
			if(event_press(PS4_LEFT))
			{
				if((selIdx == 0) && (RPressTime != 8)) // Press
				{
					RPressTime = RPressTime - 8;
				}
				
				if((selIdx == 1) && (RPauseTime != 8)) // Pause
				{
					RPauseTime = RPauseTime - 8;
				}
				
				if((selIdx == 2) && (RDyn != 25)) // Dynamic
				{
					RDyn = RDyn - 5;
				}
				
				display = ON;
			}

			if(event_press(PS4_RIGHT))
			{
				if((selIdx == 0) && (RPressTime != 40)) // Press
				{
					RPressTime = RPressTime + 8;
				}
				
				if((selIdx == 1) && (RPauseTime != 40)) // Pause
				{
					RPauseTime = RPauseTime + 8;
				}
				
				if((selIdx == 2) && (RDyn != 50)) // Dynamic
				{
					RDyn = RDyn + 5;
				}
				
				display = ON;
			}
		}
		
		if(modIdx == 11) // Strafe Mod
		{
			if(event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))
			{
				if(STRAFE_DELAY != 0) // Strafe Delay
				{
					STRAFE_DELAY--;
				}
				
				display = ON;
			}

			if(event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))
			{
				if(STRAFE_DELAY != 700) // Strafe Delay
				{
					STRAFE_DELAY++;
				}
				
				display = ON;
			}
		}
	}
	
	if(timerActive)
	{
		if(get_ival(ADS))
		{
			if(event_press(FIRE))
			{
				arTimer = 0;
			}
			
			if(get_val(FIRE))
			{
				arTimer += get_rtime();
				arTimerDisplay = ON;
			}
			
			if(event_release(FIRE))
			{
				antirecoil_time[profileIdx] = arTimer;
				antirecoilH_time[profileIdx] = arTimer;
				subMenu = !subMenu;
				selIdx = 1;
				display = ON;
				timerActive = OFF;
			}
		}
	}
	
	// OLED Display arTimer
	if(arTimerDisplay)
	{
		cls_oled(0);
		
		rect_oled( 0 , 0,128 , 64, 0, 1 );
		rect_oled(0 , 0,128 , 20, 1, 1 );
		rect_oled(2 , 2,124 , 16, 0, 0 );
		
		printf(center_x(getMisc(16),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[16]);
		
		NumberToString(arTimer,FindDigits(arTimer),37);
		arTimerDisplay = OFF;
	}
	
	// OLED Display
	if(display)
	{
		cls_oled(0);
		
		rect_oled( 0 , 0,128 , 64, 0, 1 );
		rect_oled(0 , 0,128 , 20, 1, 1 );
		rect_oled(2 , 2,124 , 16, 0, 0 );
		
		// Main Menu (Mods)
		if(modMenu)
		{
			modPrint(modIdx);
			
			if(modIdx == 0) //Aim Assist
			{
				printf(center_x(getMisc(3),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[3]);
			}
			
			if(modIdx == 1) //Anti Recoil
			{
				printf(center_x(getMisc(3),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[3]);
			}
			
			if(modIdx == 2) //Rapidfire
			{
				if(EZ_RAPID_FIRE == 0)
				{
					printf(center_x(getMisc(3),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[3]);
				}
				else if(EZ_RAPID_FIRE == 1)
				{
					printf(center_x(getMisc(23),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[23]);
				}
				else
				{
					printf(center_x(getMisc(24),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[24]);
				}
			}
			
			if(modIdx == 3) //Slide Cancel
			{
				if(EZ_SLIDE_CANCEL == 0)
				{
					printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
				}
				else if(EZ_SLIDE_CANCEL == 1)
				{
					printf(center_x(getMisc(4),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[4]);
				}
				else
				{
					printf(center_x(getMisc(5),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[5]);
				}
			}
			
			if(modIdx == 4) //Hold Breath
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 5) //Quick Scope
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 6) //Bunny Hop
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 7) //Autorun
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 8) //EZ C4
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 9) //Chicken Mod
			{
				if(CROUCH_DANCE == 0)
				{
					printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
				}
				else if(CROUCH_DANCE == 1)
				{
					printf(center_x(getMisc(18),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[18]);
				}
				else
				{
					printf(center_x(getMisc(19),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[19]);
				}
			}
			
			if(modIdx == 10) //Fast Melee
			{
				printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
			}
			
			if(modIdx == 11) //Strafe Mod
			{
				printf(center_x(getMisc(3),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[3]);
			}
			
			if(modIdx == 12) //Auto Ping
			{
				if(EZ_AUTO_PING == 0)
				{
					printf(center_x(getMisc(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[2]);
				}
				else if(EZ_AUTO_PING == 1)
				{
					printf(center_x(getMisc(20),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[20]);
				}
				else if(EZ_AUTO_PING == 2)
				{
					printf(center_x(getMisc(18),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[18]);
				}
				else if(EZ_AUTO_PING == 3)
				{
					printf(center_x(getMisc(21),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[21]);
				}
				else
				{
					printf(center_x(getMisc(22),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[22]);
				}
			}
		}
		
		// Sub Menu (Edits)
		if(subMenu)
		{
			if(modIdx == 0) // Aim Assist
			{
				// Profile Check/Print
				if(!profileIdx)
				{
					printf(allign_right(getMisc(14),OLED_FONT_SMALL_WIDTH),50,0,1,Misc[14]);
				}
				else
				{
					printf(allign_right(getMisc(15),OLED_FONT_SMALL_WIDTH),50,0,1,Misc[15]);
				}
				
				if(selIdx == 0)	// Radius
				{
					printf(10,37,0,0,dash[0]);
					rect_oled(0 , 35,128 , 14, 0, 1 ); // 2nd value
					printf(center_x(getMisc(11),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[11]);
				}
				
				if(selIdx == 1)	// Speed
				{
					printf(10,50,0,0,dash[0]);
					rect_oled(0 , 48,128 , 14, 0, 1 ); // 3rd value
					printf(center_x(getMisc(12),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[12]);
				}
				
				NumberToString(ASSIST_RADIUS[profileIdx],FindDigits(ASSIST_RADIUS[profileIdx]),37);
				NumberToString(ASSIST_SPEED[profileIdx],FindDigits(ASSIST_SPEED[profileIdx]),50);
			}
			
			if(modIdx == 1) // Anti Recoil
			{
				// Profile Check/Print
				if(!profileIdx)
				{
					printf(allign_right(getMisc(14),OLED_FONT_SMALL_WIDTH),50,0,1,Misc[14]);
				}
				else
				{
					printf(allign_right(getMisc(15),OLED_FONT_SMALL_WIDTH),50,0,1,Misc[15]);
				}
				
				if(valIdx == 0)	// Vertical Recoil
				{
					printf(center_x(getMisc(6),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[6]);
					
					if(selIdx == 0)	// Vertical Start
					{
						printf(10,24,0,0,dash[0]);
						rect_oled(0 , 22,128 , 14, 0, 1 ); // 1st
						printf(allign_right(getMisc(8),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[8]);
					}
					
					if(selIdx == 1)	// Vertical End
					{
						printf(10,37,0,0,dash[0]);
						rect_oled(0 , 35,128 , 14, 0, 1 ); // 2nd value
						printf(allign_right(getMisc(9),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[9]);
					}
					
					if(selIdx == 2)	// Vertical Time
					{
						printf(10,50,0,0,dash[0]);
						rect_oled(0 , 48,128 , 14, 0, 1 ); // 3rd value
						printf(allign_right(getMisc(10),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[10]);
					}
					
					NumberToString(antirecoil_start[profileIdx],FindDigits(antirecoil_start[profileIdx]),25);	// Start
					NumberToString(antirecoil_end[profileIdx],FindDigits(antirecoil_end[profileIdx]),37);		// End
					NumberToString(antirecoil_time[profileIdx],FindDigits(antirecoil_time[profileIdx]),50);		// Time
				}
				
				if(valIdx == 1)	// Horizontal
				{
					printf(center_x(getMisc(7),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[7]);
					
					if(selIdx == 0)	// Horizontal Start
					{
						printf(10,24,0,0,dash[0]);
						rect_oled(0 , 22,128 , 14, 0, 1 ); // 1st value
						printf(allign_right(getMisc(8),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[8]);
					}
					
					if(selIdx == 1)	// Horizontal End
					{
						printf(10,37,0,0,dash[0]);
						rect_oled(0 , 35,128 , 14, 0, 1 ); // 2nd value
						printf(allign_right(getMisc(9),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[9]);
					}
					
					if(selIdx == 2)	// Horizontal Time
					{
						printf(10,50,0,0,dash[0]);
						rect_oled(0 , 48,128 , 14, 0, 1 ); // 3rd value
						printf(allign_right(getMisc(10),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[10]);
					}
					
					NumberToString(antirecoilH_start[profileIdx],FindDigits(antirecoilH_start[profileIdx]),25);	// Start 
					NumberToString(antirecoilH_end[profileIdx],FindDigits(antirecoilH_end[profileIdx]),37);		// End
					NumberToString(antirecoilH_time[profileIdx],FindDigits(antirecoilH_time[profileIdx]),50);	// Time
				}
			}
			
			if(modIdx == 2) // RapidFire
			{
				printf(center_x(getMods(2),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Mods[2]);
				
				if(selIdx == 0)	// Press
				{
					printf(10,24,0,0,dash[0]);
					rect_oled(0 , 22,128 , 14, 0, 1 ); // 1st
					printf(allign_right(getMisc(25),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[25]);
				}
				
				if(selIdx == 1)	// Pause
				{
					printf(10,37,0,0,dash[0]);
					rect_oled(0 , 35,128 , 14, 0, 1 ); // 2nd value
					printf(allign_right(getMisc(26),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[26]);
				}
				
				if(selIdx == 2)	// Dynamic
				{
					printf(10,50,0,0,dash[0]);
					rect_oled(0 , 48,128 , 14, 0, 1 ); // 3rd value
					printf(allign_right(getMisc(24),OLED_FONT_SMALL_WIDTH),25,0,1,Misc[24]);
				}
					
				NumberToString(RPressTime,FindDigits(RPressTime),25);	// Press
				NumberToString(RPauseTime,FindDigits(RPauseTime),37);	// Pause
				NumberToString(RDyn,FindDigits(RDyn),50);				// Dynamic
			}
			
			if(modIdx == 11) // Strafe Mod
			{
				printf(10,37,0,0,dash[0]);
				rect_oled(0 , 35,128 , 14, 0, 1 ); // 2nd value
				printf(center_x(getMisc(17),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,0,0,Misc[17]);
				
				NumberToString(STRAFE_DELAY,FindDigits(STRAFE_DELAY),37);
			}
		}
		
		display = OFF;
	}
	
	if(!modMenu && !subMenu)
	{
		if(boot)
		{
			bStime += get_rtime();
		
			if(bStime >= 5000)
			{
				cls_oled(0);
				boot = OFF;
			}
		}
		
		if(!profileIdx)
		{
			set_rgb(255,255,0);
		}
		else
		{
			set_rgb(255,20,147);
		}
		
		if (get_val(SPRINT) && get_val(WALK) < -THRESHOLD)
		{
			SPRINTING = ON;
		}
		
		if(SPRINTING)
		{
				if(get_ival(WALK) > -THRESHOLD)
				{
					SPRINTING = OFF;
				}
		}
		
		if (AUTO_SPRINT)
		{
			SPRINTING = ON
		}

		if(EZ_HOLD_BREATH)
		{
			if(get_val(ADS))
			set_val(SPRINT,100);

			if(get_val(WALK) <-90 && get_val(ADS) && get_ptime(ADS) > 200 && combo_running(HOLD_BREATH))
			combo_stop(HOLD_BREATH);

			if(event_press(ADS))
			combo_run(HOLD_BREATH);

			if(get_val(ADS) && get_lval(SPRINT))
			set_val(SPRINT,0);
		}
		
		if(EZ_C4 && event_release(LETHAL)) {
			combo_run(EZ_C4)
		}

		if (EZ_SLIDE_CANCEL && event_release(PRONE) && SPRINTING && get_val(WALK) < -THRESHOLD) {
			if(EZ_SLIDE_CANCEL == 1)
			{
				combo_run(EZ_SLIDE_CANCEL_MW);
			}
			else
			{
				combo_run(EZ_SLIDE_CANCEL_CW);
			}
		}

		if (EZ_HAIR_TRIGGER)
		{ //Changed from ADS, FIRE vairables to just R2/RT and L2/LT as they are the only buttons you can hair trigger
			if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);
			
			if(get_ival(PS4_L2) > 10)
			set_val(PS4_L2, 100);
		}
		
		if(EZ_FAST_MELEE)
		{
			if(!get_val(ADS) && get_val(MELEE))
			{
				combo_run(TURBO_MELEE);
			}
			else
			{
				if(combo_running(TURBO_MELEE))
				combo_stop(TURBO_MELEE);
			}
		}

		if (EZ_AUTORUN)
		{
			if (!get_val(ADS) && get_val(WALK) < -THRESHOLD) 
			{
				combo_run(EASY_RUN);			      			
			}
		}
		
		if(!KillSwitch)
		{
			if(EZ_AUTO_PING)
			{
				if (EZ_AUTO_PING == 1) // ADS
				{
					if(event_press(ADS))
					{
						combo_run(AutoPing);
					}
				}
				else if (EZ_AUTO_PING == 2) // FIRE
				{
					if(event_press(FIRE))
					{
						combo_run(AutoPing);
					}
				}
				else if (EZ_AUTO_PING == 3) // ADS + FIRE
				{
					if(get_ival(ADS) && event_press(FIRE))
					{
						combo_run(AutoPing);
					}
				}
				else if (EZ_AUTO_PING == 4) // ADS + TACTICAL
				{
					if(get_ival(ADS) && event_press(TACTICAL))
					{
						block(TACTICAL, 180);
						combo_run(AutoPing);
					}
				}
			}
			
			if(EZ_STRAFE)
			{
				if(Click_strafe > 0) Click_strafe = Click_strafe - get_rtime();
				if(event_press(STRAFE_BUTTON) && Click_strafe <= 0)
				{
					Click_strafe = timelimit;
				}
				else if(event_press(STRAFE_BUTTON) && Click_strafe > 0)
				{
					combo_run(cvibrate);

					toggleStrafe = !toggleStrafe;
				}
			}

			if(EZ_STRAFE && toggleStrafe)
			{
				if((get_val(FIRE) > 50) || combo_running(cRapidFire))
				combo_run(EZ_STRAFE);
			}

			if (EZ_BUNNYHOP)
			{
				if (get_ival(JUMP) && get_ptime(JUMP) > 200)
				{
					combo_run(BUNNYHOP);
				}
				else
				{
					if(combo_running(BUNNYHOP))
					combo_stop(BUNNYHOP);
				}
			}

			if (combo_running(cRapidFire) && get_val(WALK) < -THRESHOLD) { // This way the user can choose how much pressure triggers auto sprint
				set_val(WALK, -THRESHOLD);
				set_val(STRAFE, 0);
			}

			if (CROUCH_DANCE > 0)
			{				
				if(CROUCH_DANCE == 1)
				{
					if(get_val(FIRE) > 50 || combo_running(cRapidFire))
					{
						combo_run(EZ_STRAFE);
						combo_run(CROUCH_DANCE);
					}
				}
				else if(CROUCH_DANCE == 2)
				{
					if(get_val(ADS) > 50 && get_ival(LETHAL) > 10)
					{
						if(EZ_RAPID_FIRE && toggle_rapid_fire)
						{
							combo_run(EZ_STRAFE);
							combo_run(CROUCH_DANCE);
							combo_run(cRapidFire);
							block(LETHAL, 32767);
						}
						else
						{
							set_val(FIRE, 100);
							combo_run(EZ_STRAFE);
							combo_run(CROUCH_DANCE);
							block(LETHAL, 32767);
						}
					}
				}
			}

			if (EZ_QUICK_SCOPE && event_release(ADS)) {
				combo_run(EZ_QUICK_SCOPE);
			}
			
			stick_input = (isqrt(pow(get_ival(AIM_X), 2) + pow(get_ival(AIM_Y), 2)));
			
			if (CRESCENS_POLAR_AIM_ASSIST) {
				if (get_val(ADS) || get_val(FIRE))
				{
					if (stick_input <= ASSIST_RADIUS[profileIdx]) {
						rnd = random(mn, mx);
						ASSIST_GRADIENT = (ASSIST_GRADIENT + ASSIST_SPEED[profileIdx]) % 360;
						set_polar(POLAR_RS, ASSIST_GRADIENT, (ASSIST_RADIUS[profileIdx] * rnd));
					}
				}
			}
			
			if(EZ_ANTI_RECOIL)
			{
				// Antirecoil by Batts	
				// Vertical
				if( antirecoil_start[profileIdx] < antirecoil_end[profileIdx])
				i_val = 1; 
				else
				i_val = -1;
				
				i_pnt = (antirecoil_time[profileIdx] * 10) / (abs(antirecoil_start[profileIdx] - antirecoil_end[profileIdx])); 
				
				// Horizontal		
				if(antirecoilH_start[profileIdx] < antirecoilH_end[profileIdx])
				i_val_h = 1; 
				else
				i_val_h = -1;
				
				i_pnt_h = (antirecoilH_time[profileIdx] * 10) / (abs(antirecoilH_start[profileIdx] - antirecoilH_end[profileIdx])); 
				
				if(!get_val(FIRE)) 
				{
					// Vertical
					ar_y = antirecoil_start[profileIdx];
					i_cnt = 0;
					i_num = 0;
					
					// Horizontal
					ar_x = antirecoilH_start[profileIdx];
					i_cnt_h = 0;
					i_num_h = 0;
				}   
				
				if(get_val(ADS) && get_val(FIRE))
				if(((get_val(ADS) > 50) && (get_val(FIRE)> 50)) || combo_running(cRapidFire))
				{
					// Vertical
					if(!p_complete())  
					ar_y = p_val();
					else
					ar_y = antirecoil_end[profileIdx];
					
					if(y_val() < 100)
					set_val(AIM_Y,y_val()); 
					
					// Horizontal	
					if(!p_complete_x())  
					ar_x = p_val_x();
					else
					ar_x = antirecoilH_end[profileIdx];
					
					if(x_val() < 100)
					set_val(AIM_X,x_val()); 
				}
			}

			if (EZ_RAPID_FIRE)
			{
				if(rapid_fire_on && RF_BOTH_PROFILE == FALSE)
				{
					if(Click > 0) Click = Click - get_rtime();
					if(event_press(SYNC_BUTTON) && Click <= 0)
					{
						Click = timelimit;
					}
					else if(event_press(SYNC_BUTTON) && Click > 0)
					{
						set_led(0,0);
						set_led(1,0);
						set_led(2,0);

						if(!toggle_rapid_fire)
						{
							toggle_rapid_fire = rapid_fire_on;
						}
						else
						{
							toggle_rapid_fire = 0;
							set_zen_led(Blue);
						}
					}
				}

				if(event_release(SWAP) && get_ptime(SWAP) <= 496 && rapid_fire_on && RF_BOTH_PROFILE == FALSE)
				{
					set_led(0,0);
					set_led(1,0);
					set_led(2,0);

					if(!toggle_rapid_fire)
					{
						toggle_rapid_fire = rapid_fire_on;
					}
					else
					{
						toggle_rapid_fire = 0;
						set_zen_led(Blue);
					}
				}

				if(get_ival(MOD_TOGGLE_BUTTON) )
				{
					if(event_press(RAPID_FIRE) )
					{
						combo_run(cvibrate);
						set_led(0,0);
						set_led(1,0);
						set_led(2,0);

						if(!toggle_rapid_fire || toggle_rapid_fire != 1)
						{
							toggle_rapid_fire = 1;
							rapid_fire_on = 1;
						}
						else
						{
							toggle_rapid_fire = 0;
							rapid_fire_on = 0;
						}
					}
					else if (event_press(AKIMBO_RAPID_FIRE) )
					{
						combo_run(cvibrate);
						set_led(0,0);
						set_led(1,0);
						set_led(2,0);

						if(!toggle_rapid_fire || toggle_rapid_fire != 2)
						{
							toggle_rapid_fire = 2;
							rapid_fire_on = 2;
						}
						else
						{
							toggle_rapid_fire = 0;
							rapid_fire_on = 0;
						}
					}
				}
				
				if ((toggle_rapid_fire == 1 && get_ival(FIRE) > 10) || (toggle_rapid_fire == 2 && (get_ival(FIRE) > 10 || get_ival(ADS) > 10) ))
				{
					combo_run(cRapidFire);
				}
				
				if (combo_running(cRapidFire))
				{
					if(
							(toggle_rapid_fire == 1 && event_release(FIRE)) ||
							(toggle_rapid_fire == 2 && get_ival(FIRE) < 10 && get_ival(ADS) < 10)
							)
					combo_stop(cRapidFire);
				}
				if(toggle_rapid_fire)
				{
					combo_run(rapid_fire_Led);
				}
			}
		}
		
		if(!profileIdx)
		{
			set_led(0,0);
			set_led(1,0);
			set_led(2,0);
			set_zen_led(Yellow);
		}
		
		if(profileIdx)
		{
			set_led(0,0);
			set_led(1,0);
			set_led(2,0);
			set_zen_led(Pink);
		}
	}
	
	if(event_release(PROFILE_SWITCH) && get_ptime(PROFILE_SWITCH) <= 496)
	{
		if(modMenu || subMenu)
		{
			profileIdx = !profileIdx;
			display = ON;
		}
		else
		{
			profileIdx = !profileIdx;
		}
	}
	
	if(get_val(ADS) && event_press(PROFILE_SYNC))
	{
		if(modMenu || subMenu)
		{
			profileIdx = !profileIdx;
			display = ON;
		}
		else
		{
			profileIdx = !profileIdx;
		}
	}
}
//###########################
//		FUNCTIONS BELOW		#
//###########################

function set_zen_led(colour) {
	Col_ind = (colour * 4) - 3;
	set_led(LED_1, duint8(Col_ind  ));
	set_led(LED_2, duint8(Col_ind + 1));
	set_led(LED_3, duint8(Col_ind + 2));
	set_led(LED_4, duint8(Col_ind + 3));
}

function blockBtns()
{
	set_val(0,0);
	set_val(1,0);
	set_val(3,0);
	set_val(4,0);
	set_val(5,0);
	set_val(6,0);
	set_val(8,0);
	set_val(9,0);
	set_val(10,0);
	set_val(11,0);
	set_val(12,0);
	set_val(13,0);
	set_val(14,0);
	set_val(15,0);
	set_val(16,0);
	set_val(17,0);
	set_val(18,0);
	set_val(19,0);
	set_val(20,0);
	set_val(21,0);
	set_val(22,0);
	set_val(23,0);
	set_val(24,0);
	set_val(25,0);
	set_val(26,0);
	set_val(27,0);
	set_val(28,0);
	set_val(29,0);
	set_val(30,0);
	set_val(31,0);
	set_val(32,0);
	set_val(33,0);
}

define FONT_WIDTH  = 0;
define FONT_HEIGHT = 1;

const uint8 FONT_STATS[][] = { { OLED_FONT_SMALL_WIDTH, OLED_FONT_SMALL_HEIGHT }, { OLED_FONT_MEDIUM_WIDTH, OLED_FONT_MEDIUM_HEIGHT }, { OLED_FONT_LARGE_WIDTH, OLED_FONT_LARGE_HEIGHT }};

function center_x( f_chars, f_font)
{
	return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function center_y( f_size)
{
	return (OLED_HEIGHT / 2) - (f_size + 12 / 2);
}
function CenterX( f_chars, f_font)
{
	return (OLED_WIDTH / 2) - ((f_chars * FONT_STATS[f_font][FONT_WIDTH]) / 2);
}

function NumberToString(f_val,f_digits,f_pos)
{
	
	bufferIndex = 1;
	digitIndex = 10000;
	if(f_val < 0) {                     //--neg numbers
		putc_oled(bufferIndex,45);    //--add leading "-"
		bufferIndex += 1;
		f_val = abs(f_val);
	}
	for(charIndex = 5; charIndex >= 1; charIndex--) {
		if(f_digits >= charIndex) {
			putc_oled(bufferIndex,(f_val / digitIndex) + 48);
			f_val %= digitIndex;
			bufferIndex ++;
			if(charIndex == 4) {
				putc_oled(bufferIndex,44);   //--add ","
				bufferIndex ++;
			}
		}
		digitIndex /= 10;
	}
	puts_oled(CenterX(bufferIndex - 1,0),f_pos,0,bufferIndex - 1,OLED_WHITE);	
}

function FindDigits(f_number)
{
	f_number = abs(f_number);
	if (f_number / 10000 > 0)
	return 5;
	if (f_number / 1000 > 0)
	return 4;
	if (f_number / 100 > 0)
	return 3;
	if (f_number / 10 > 0)
	return 2;
	return 1;
}

function p_complete()
{

	i_cnt++;
	if(i_cnt > antirecoil_time[profileIdx] * 10)
	{
		i_cnt = antirecoil_time[profileIdx] * 10;
		return 1;
	}
	return 0;
}

function p_val()
{

	i_num++;
	if(i_num == i_pnt)
	{
		i_num = 0;
		ar_y += i_val;
	}
	return ar_y;
}

function y_val()
{

	v = get_val(PS4_RY);

	if(abs(v) < 10)
	v = 0;

	if(abs(v) > ar_y + 5)
	return v;

	return v + (ar_y * inverted);
}

function p_complete_x()
{
	i_cnt_h++;
	if (i_cnt_h > antirecoilH_time[profileIdx] * 10)
	{
		i_cnt_h = antirecoilH_time[profileIdx] * 10 ;
		return 1;
	}
	return 0;
}

function p_val_x()
{
	i_num_h++;
	if(i_num_h == i_pnt_h)
	{
		i_num_h = 0;
		ar_x += i_val_h;
	}
	return ar_x;
}

function x_val()
{
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
	v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
	return v_x;
	return v_x + ar_x;
}

function load_pvar()
{	
	// Toggles
	CRESCENS_POLAR_AIM_ASSIST			= get_pvar(SPVAR_1, 0, 1, 0);		// 0
	EZ_ANTI_RECOIL						= get_pvar(SPVAR_2, 0, 1, 0);		// 1
	EZ_RAPID_FIRE						= get_pvar(SPVAR_3, 0, 2, 0);		// 2
	EZ_SLIDE_CANCEL						= get_pvar(SPVAR_4, 0, 2, 0);		// 3
	EZ_HOLD_BREATH						= get_pvar(SPVAR_5, 0, 1, 0);		// 4
	EZ_QUICK_SCOPE						= get_pvar(SPVAR_6, 0, 1, 0);		// 5
	EZ_BUNNYHOP							= get_pvar(SPVAR_7, 0, 1, 0);		// 6
	EZ_AUTORUN							= get_pvar(SPVAR_8, 0, 1, 0);		// 7
	EZ_C4								= get_pvar(SPVAR_9, 0, 1, 0);		// 8
	CROUCH_DANCE						= get_pvar(SPVAR_10, 0, 2, 0);		// 9
	EZ_FAST_MELEE						= get_pvar(SPVAR_11, 0, 1, 0);		// 10
	EZ_STRAFE							= get_pvar(SPVAR_12, 0, 1, 0);		// 11
	EZ_AUTO_PING						= get_pvar(SPVAR_13, 0, 4, 0);		// 12
	
	// Adjustables
	
	// Anti Recoil
	// Primary
	antirecoil_start[0]					= get_pvar(SPVAR_14, 0, 100, 32);		// Vertical Start
	antirecoil_end[0]					= get_pvar(SPVAR_15, 0, 100, 32);		// Vertical End
	antirecoil_time[0]					= get_pvar(SPVAR_16, 0, 10000, 1920);	// Vertical Time

	antirecoilH_start[0]				= get_pvar(SPVAR_17, -100, 100, 0);		// Horizontal Start 
	antirecoilH_end[0]					= get_pvar(SPVAR_18, -100, 100, 0);		// Horizontal End
	antirecoilH_time[0]					= get_pvar(SPVAR_19, 0, 10000, 1920);	// Horizontal Time
	
	// Secondary
	antirecoil_start[1]					= get_pvar(SPVAR_20, 0, 100, 38);		// Vertical Start
	antirecoil_end[1]					= get_pvar(SPVAR_21, 0, 100, 38);		// Vertical End
	antirecoil_time[1]					= get_pvar(SPVAR_22, 0, 10000, 1680);	// Vertical Time

	antirecoilH_start[1]				= get_pvar(SPVAR_23, -100, 100, -5);	// Horizontal Start 
	antirecoilH_end[1]					= get_pvar(SPVAR_24, -100, 100, -5);	// Horizontal End
	antirecoilH_time[1]					= get_pvar(SPVAR_25, 0, 10000, 1680);	// Horizontal Time
	
	// Aim Assist
	ASSIST_RADIUS[0]					= get_pvar(SPVAR_26, 0, 38, 24);	// Aim Assist Radius Primary
	ASSIST_RADIUS[1]					= get_pvar(SPVAR_27, 0, 38, 24);	// Aim Assist Radius Secondary
	ASSIST_SPEED[0]						= get_pvar(SPVAR_28, 0, 36, 30);	// Aim Assist Speed Primary
	ASSIST_SPEED[1]						= get_pvar(SPVAR_29, 0, 36, 30);	// Aim Assist Speed Secondary
	
	STRAFE_DELAY						= get_pvar(SPVAR_30, 0, 700, 400);	// Aim Assist Speed Secondary
	
	RPressTime							= get_pvar(SPVAR_31, 8, 40, 8);		// Press
	RPauseTime							= get_pvar(SPVAR_32, 8, 40, 8); 	// Pause
	RDyn								= get_pvar(SPVAR_33, 25, 50, 40);	// Dynamic
}

function reset_script_var()
{
	// Toggles
	CRESCENS_POLAR_AIM_ASSIST			= 0		// 0
	EZ_ANTI_RECOIL						= 0		// 1
	EZ_RAPID_FIRE						= 0		// 2
	EZ_SLIDE_CANCEL						= 0		// 3
	EZ_HOLD_BREATH						= 0		// 4
	EZ_QUICK_SCOPE						= 0		// 5
	EZ_BUNNYHOP							= 0		// 6
	EZ_AUTORUN							= 0		// 7
	EZ_C4								= 0		// 8
	CROUCH_DANCE						= 0		// 9
	EZ_FAST_MELEE						= 0		// 10
	EZ_STRAFE							= 0		// 11
	EZ_AUTO_PING						= 0		// 12
	
	// Adjustables
	// Primary
	antirecoil_start[0]					= 32;	// Vertical Start
	antirecoil_end[0]					= 32;	// Vertical End
	antirecoil_time[0]					= 1920;	// Vertical Time

	antirecoilH_start[0]				= 0;	// Horizontal Start
	antirecoilH_end[0]					= 0;	// Horizontal End
	antirecoilH_time[0]					= 1920;	// Horizontal Time
	
	// Secondary
	antirecoil_start[1]					= 38;	// Vertical Start
	antirecoil_end[1]					= 38;	// Vertical End
	antirecoil_time[1]					= 1680;	// Vertical Time

	antirecoilH_start[1]				= -5;	// Horizontal Start
	antirecoilH_end[1]					= -5;	// Horizontal End
	antirecoilH_time[1]					= 1680;	// Horizontal Time
	
	// Aim Assist
	ASSIST_RADIUS[0]					= 24;	// Aim Assist Radius Primary
	ASSIST_RADIUS[1]					= 24;	// Aim Assist Radius Secondary
	ASSIST_SPEED[0]						= 30;	// Aim Assist Speed Primary
	ASSIST_SPEED[1]						= 30;	// Aim Assist Speed Secondary
	
	//Strafe
	STRAFE_DELAY						= 400;	// Strafe Delay
	
	RPressTime							= 8;	// Press
	RPauseTime							= 8; 	// Pause
	RDyn								= 40;	// Dynamic
}

function save_pvar()
{
	// Toggles
	set_pvar(SPVAR_1, CRESCENS_POLAR_AIM_ASSIST);			// 0
	set_pvar(SPVAR_2, EZ_ANTI_RECOIL);						// 1
	set_pvar(SPVAR_3, EZ_RAPID_FIRE);						// 2
	set_pvar(SPVAR_4, EZ_SLIDE_CANCEL);						// 3
	set_pvar(SPVAR_5, EZ_HOLD_BREATH);						// 4
	set_pvar(SPVAR_6, EZ_QUICK_SCOPE);						// 5
	set_pvar(SPVAR_7, EZ_BUNNYHOP);							// 6
	set_pvar(SPVAR_8, EZ_AUTORUN);							// 7
	set_pvar(SPVAR_9, EZ_C4);								// 8
	set_pvar(SPVAR_10, CROUCH_DANCE);						// 9
	set_pvar(SPVAR_11, EZ_FAST_MELEE);						// 10
	set_pvar(SPVAR_12, EZ_STRAFE);							// 11
	set_pvar(SPVAR_13, EZ_AUTO_PING);						// 12
	
	// Adjustables
	// Primary
	set_pvar(SPVAR_14, antirecoil_start[0]);				// Vertical Start
	set_pvar(SPVAR_15, antirecoil_end[0]);					// Vertical End
	set_pvar(SPVAR_16, antirecoil_time[0]);					// Vertical Time

	set_pvar(SPVAR_17, antirecoilH_start[0]);				// Horizontal Start
	set_pvar(SPVAR_18, antirecoilH_end[0]);					// Horizontal End
	set_pvar(SPVAR_19, antirecoilH_time[0]);				// Horizontal Time
	
	// Secondary
	set_pvar(SPVAR_20, antirecoil_start[1]);				// Vertical Start
	set_pvar(SPVAR_21, antirecoil_end[1]);					// Vertical End
	set_pvar(SPVAR_22, antirecoil_time[1]);					// Vertical Time

	set_pvar(SPVAR_23, antirecoilH_start[1]);				// Horizontal Start
	set_pvar(SPVAR_24, antirecoilH_end[1]);					// Horizontal End
	set_pvar(SPVAR_25, antirecoilH_time[1]);				// Horizontal Time
	
	// Aim Assist
	set_pvar(SPVAR_26, ASSIST_RADIUS[0]);					// Aim Assist Radius Primary
	set_pvar(SPVAR_27, ASSIST_RADIUS[1]);					// Aim Assist Radius Secondary
	set_pvar(SPVAR_28, ASSIST_SPEED[0]);					// Aim Assist Speed Primary
	set_pvar(SPVAR_29, ASSIST_SPEED[1]);					// Aim Assist Speed Secondary
	
	set_pvar(SPVAR_30, STRAFE_DELAY);						// Strafe Delay
		
	set_pvar(SPVAR_31, RPressTime);							// Press
	set_pvar(SPVAR_32, RPauseTime);							// Pause
	set_pvar(SPVAR_33, RDyn);								// Dynamic
}

function modPrint(id)
{
	if(id == 0)
	{
		modBefore = maxMods;
		modAfter = (id + 1);
	}
	else if(id == maxMods)
	{
		modBefore = (id - 1);
		modAfter = 0;
	}
	else
	{
		modBefore = (id - 1);
		modAfter = (id + 1);
	}
	
	printf(center_x(getMods(modBefore),OLED_FONT_SMALL_WIDTH),23,0,1,Mods[modBefore]);
	printf(center_x(getMods(id),OLED_FONT_SMALL_WIDTH),36,0,1,Mods[id]);
	printf(center_x(getMods(modAfter),OLED_FONT_SMALL_WIDTH),49,0,1,Mods[modAfter]);
	
	printf(5,36,0,0,dash[0]);
	
}

function modStatus(mod)
{
	if(mod == 0)
	{
		set_rgb(255,0, 0);
		//printf(102,6,0,0,Misc[1]);
		printf(allign_right(getMisc(1),OLED_FONT_SMALL_WIDTH),6,0,0,Misc[1]);
	}
	else
	{
		set_rgb(0, 255, 0);
		//printf(102,6,0,0,Misc[0]);
		printf(allign_right(getMisc(0),OLED_FONT_SMALL_WIDTH),6,0,0,Misc[0]);
	}
}

function getMods(x)
{
	if (Mods[x + 1] != -1)
	return Mods[x + 1] - Mods[x] - 1;
	return sizeof(Mods) - Mods[x];
}

function getMisc(x)
{
	if (Misc[x + 1] != -1)
	return Misc[x + 1] - Misc[x] - 1;
	return sizeof(Misc) - Misc[x];
}

function allign_right(f_chars, f_font)
{
	return OLED_WIDTH - ((f_chars * f_font) + 5);
}

//###########################
//		FUNCTIONS ABOVE		#
//###########################

//###########################

//###########################
//		COMBO BELOW			#
//###########################

combo AutoPing
{
	set_val(PING, 100);
	wait(30);
	set_val(PING, 0);
	wait(30);
	set_val(PING, 100);
	wait(30);
	set_val(PING, 0);
	wait(30);
}

combo EZ_STRAFE
{
	set_val(STRAFE, 100);
	wait(STRAFE_DELAY);
	wait(10);
	set_val(STRAFE, -100);
	wait(STRAFE_DELAY);
	wait(10);
}

combo EZ_QUICK_SCOPE
{
	set_val(FIRE, 100);
	wait(25);
}

combo EZ_SLIDE_CANCEL_MW
{
	set_val(PRONE, 100);
	wait(80);
	set_val(PRONE, 0);
	wait(60);
	set_val(PRONE, 100);
	wait(50);
	set_val(PRONE, 100);
	set_val(JUMP, 100);
	wait(60);
	set_val(PRONE, 0);
	set_val(JUMP, 100);
	wait(10);
	set_val(JUMP, 0);
}

combo EZ_SLIDE_CANCEL_CW {
	// SS_Nikolai fix for CW S.Cancel
	set_val(PRONE, 100);
	wait(80);
	set_val(PRONE, 0);
	wait(20);
	set_val(PRONE, 100);
	wait(10);
	set_val(PRONE, 100);
	set_val(ADS, 100);
	wait(20);
	set_val(PRONE, 0);
	set_val(ADS, 100);
	wait(10);
	set_val(ADS, 0);
}

combo EZ_C4
{
	wait(825);
	set_val(RELOAD, 100);
	wait(60);
	set_val(RELOAD, 0);
	wait(60);
	set_val(RELOAD, 100);
	wait(60);
	set_val(RELOAD, 0);
}

combo CROUCH_DANCE
{
	set_val(PRONE, 100);
	wait(random(45, 110));
	wait(random(65, 260));
	set_val(PRONE, 100);
}

combo RUMBLE_ALERT
{
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(150);
}

combo SAVE
{
	cls_oled(0);
	printf(30,25,2,0,Misc[13]);
	wait(2000);
	combo_run(bootScreen);
}

combo rapid_fire_Led
{
	if(toggle_rapid_fire == 2)
	cled = 3;
	else
	cled = 2;

	set_led(2,cled);

	wait(496);

	set_led(1,0);
	set_led(2,0);
	set_led(3,0);

	wait(496);
}

combo cRapidFire 
{ 
	set_val(FIRE,100);
	
	if(toggle_rapid_fire == 2)
	set_val(ADS,100);
	
	wait(RPressTime);
	
	set_val(FIRE,0);
	
	if(toggle_rapid_fire == 2)
	set_val(ADS,0);
	
	wait(RPauseTime);
	
	set_val(FIRE,0);
	
	if(toggle_rapid_fire == 2)
	set_val(ADS,0);
	
	wtime = 0;

	if (EZ_RAPID_FIRE == 2) 
	{ 	
		wtime = (get_ival(FIRE) * RDyn)/100 ;
	}
	
	wait(wtime);
}

combo HOLD_BREATH // Sweet_Evil_14
{
	set_val(SPRINT,0);
	wait(64);
	set_val(SPRINT,100);
	wait(112);
	set_val(SPRINT,0);
	wait(112);
}

combo TURBO_MELEE // Sweet_Evil_14
{
	set_val(MELEE, 100);
	wait(40);
	set_val(MELEE, 0);
	wait(32);
}

combo BUNNYHOP
{
	set_val(JUMP, 100);
	wait(32);
	set_val(JUMP, 0);
	wait(32);
	set_val(JUMP, 100);
	wait(32);
	set_val(JUMP, 0);
	wait(32);
}

combo cvibrate
{
	set_val(MOD_TOGGLE_BUTTON, 0);
	set_val(RAPID_FIRE, 0);
	set_val(AKIMBO_RAPID_FIRE, 0);
	set_rumble(RUMBLE_A, 100);
	wait(300);
	reset_rumble();
}

combo EASY_RUN
{
	SPRINTING = ON;
	set_val(SPRINT, 100);
	wait(30);
	wait(100);
}

combo bootScreen
{
	cls_oled(0);
	image_oled(4, 21, TRUE, FALSE, GraveMaker[0]);
	image_oled(3, 53, TRUE, FALSE, AP_LOGO[0]);
	boot = ON;
	bStime = 0;
}

//###########################
//		COMBO ABOVE			#
//###########################

//###########################

//###########################
//		MISC BELLOW			#
//###########################

const image GraveMaker = {119, 42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x0F, 0xC0, 0x3C, 0x1C, 0x79, 0xFF, 0x38, 0xF0, 0xF0, 0x30, 0xE7, 0xFE, 0xFC, 0x00, 0xFE, 0x1F, 0xE0, 0x7C, 0x78, 0xF7, 0xFE, 0x79, 0xE1, 0xF0, 0xF1, 0xCF, 0xFD, 0xFE, 0x03, 0xFE, 0x7F, 0xE1, 0xF8, 0x79, 0xCF, 0xFD, 0xF7, 0xC3, 0xE1, 0xE7, 0x9F, 0xFB, 0xFC, 0x0F, 0x98, 0xFF, 0xE3, 0xF0, 0xF7, 0x9F, 0xF9, 0xEF, 0x8F, 0xE3, 0xCF, 0x3F, 0xF7, 0xFC, 0x1E, 0x11, 0xE7, 0xC7, 0xF1, 0xEF, 0x3C, 0x33, 0xDF, 0x1F, 0xC7, 0xBC, 0x78, 0x4F, 0x38, 0x38, 0x03, 0xCF, 0x8F, 0xE3, 0xDE, 0x78, 0x47, 0xFE, 0x3F, 0x8F, 0xF0, 0xF0, 0x9E, 0x70, 0xF0, 0xF7, 0xDE, 0x3F, 0xC7, 0xB8, 0xFE, 0x1F, 0xFC, 0x7F, 0x1F, 0xE1, 0xFC, 0x3C, 0xE3, 0xE3, 0xEF, 0xFC, 0x7B, 0x8F, 0xF1, 0xFC, 0x3F, 0xF9, 0xEE, 0x3F, 0x83, 0xF8, 0x7F, 0xC3, 0xC7, 0xDF, 0xF8, 0xF7, 0x0F, 0xE3, 0xF8, 0x7F, 0xF3, 0xDE, 0x7F, 0x87, 0xF0, 0xFF, 0x87, 0x8B, 0xBF, 0xD1, 0xFF, 0x1F, 0xC7, 0xF0, 0xF5, 0xE7, 0xFC, 0xFF, 0x0F, 0xE1, 0xFC, 0x07, 0x87, 0x7F, 0xC3, 0xFE, 0x3F, 0x8F, 0x01, 0xE3, 0xCF, 0xF9, 0xEF, 0x1E, 0x03, 0xFC, 0x0F, 0x9E, 0xF7, 0x8F, 0xFC, 0x7E, 0x1F, 0xE3, 0xC7, 0x9F, 0xF3, 0xDF, 0x3F, 0xC7, 0xB8, 0x0F, 0xF9, 0xEF, 0x1E, 0x78, 0x7C, 0x3F, 0xF7, 0x8F, 0x78, 0xE7, 0xBE, 0x7F, 0xEF, 0x78, 0x1F, 0xF3, 0xCF, 0x3C, 0x78, 0xF8, 0x7F, 0xEF, 0x1E, 0xF1, 0xEF, 0x3E, 0xFF, 0xDE, 0xF0, 0x3F, 0xE7, 0x9E, 0x70, 0xF1, 0xE0, 0xFF, 0xDE, 0x25, 0xE3, 0xDE, 0x3D, 0xFF, 0xBC, 0xE0, 0x20, 0x4D, 0x14, 0x01, 0x43, 0xC0, 0xC1, 0xA0, 0x41, 0x44, 0x24, 0x13, 0x83, 0x51, 0x40, 0x00, 0x90, 0x08, 0x00, 0x84, 0x81, 0x01, 0x40, 0x82, 0x00, 0x48, 0x02, 0x02, 0x82, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x80, 0x00, 0x00, 0x90, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00};
const image AP_LOGO = {92, 51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x08, 0x60, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x82, 0xA7, 0xCF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x3E, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF9, 0xC1, 0xF8, 0x3F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF6, 0x0F, 0xC0, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF9, 0xFE, 0x05, 0xFE, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF1, 0xF7, 0xF0, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x7F, 0x0E, 0x7F, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x07, 0xF8, 0xF3, 0xF8, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x3F, 0x89, 0x3F, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0xFF, 0xFC, 0x03, 0xFC, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xC0, 0x1B, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0x9E, 0x1F, 0x7E, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF9, 0xE3, 0xC1, 0xE7, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFE, 0x0E, 0x3F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x9F, 0xE0, 0x29, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC1, 0xFE, 0x04, 0xDF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x1F, 0xE0, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x01, 0xFE, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x1F, 0xE0, 0xDF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x81, 0xFE, 0x0B, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x88, 0x1F, 0xC0, 0x3F, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFB, 0xF1, 0xFC, 0x03, 0xF9, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x9C, 0x1F, 0xC0, 0x7F, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xE1, 0xF8, 0x07, 0xF1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xD2, 0x3F, 0x80, 0x7E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x03, 0xF0, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x3E, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00};


//###########################
//		MISC ABOVE			#
//###########################

//###########################

//###########################
//		CREDITS BELOW		#
//###########################
/*_________________________________________________________________________________________________________________________________________________________
ЁЯСС CREDITS ЁЯСС
-------
- Sweet_EviL_14 for Rapidfire
- Crescens for the polar aim assist
- SS_Nikolai for some optomization, Smart C4 combo
- ъУДъЛмъМжъТТъД▓ъЛкъТпъЛкъТРъК░ъУД21 for explaining the use of variable[x]
- Chi Chi AP Logo
_________________________________________________________________________________________________________________________________________________________*/
//###########################
//		CREDITS ABOVE		#
//###########################