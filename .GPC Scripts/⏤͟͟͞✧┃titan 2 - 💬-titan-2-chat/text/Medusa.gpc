#pragma METAINFO("Медуза", 0, 0, "Работорговец")
#include<titanone.gph>


//                                                                  ╔═╗╔═╗████╔╗█████████
//                                                                  ║║╚╝║║████║║█████████
//                                                                  ║╔╗╔╗╠══╦═╝╠╗╔╦══╦══╗
//																    ║║║║║║║═╣╔╗║║║║══╣╔╗║
//                                                                  ║║║║║║║═╣╚╝║╚╝╠══║╔╗║
//                                                                  ╚╝╚╝╚╩══╩══╩══╩══╩╝╚╝



  //                                                                                                                                                                                                                      /*
 //                                                                           :`                                                                        
//                                                                         -o+::-.                                                                      
//                                                                       `//-/ys:-:`                                                                    
//                                                                    ++:oodddyo:/.                                                                   
//                       .:.`                                          +:sysdMMMNh/+:`                                         `.-.                     
//                        ../s-                            .//:---     y-ysNNNNMyo/:::   `-:-...`                            ./:-`                      
//                         -::hs.                      ``./soo+--`    :+/ssddhhm/so-+.:   .:++::/+:`                      `:os:.`                       
//                          .::oho.`                 ./:--:sho//`    .+::/dhsmNNmNNoo-:-`  `++ys:--//-                  `/hss+.`                        
//                            -/-+s+:`             `:/-.-+dho/o`   .-//osshmNMMMMNmhNs+o/.  .o:ys::::/:.              `:yh+o+.                          
//                             .:../so:           `-.---ohy/-:`  -/-+sdMNNMMMMMMMMmmhhsys/:  `::so/+//---            /sh/.:/`                           
//                               .:``:hy.        `.`...+ss/:.   ++.+odNmNNNmNNMMdNMNNhhdy:/+   --//yo.```:`        :hm+``:.                             
//                                `.`-:sy/:o`   ..`` :/o++s`   +:.+ooyysshhdmNNhdydNNNmdNs+.+`  `-./sy.  `--   -o-yms:`.`                               
//                                  `.:`/hNMd/..`  -++s/os`  `/+::+shhdmmNmymMMNNhdNNmdhhs+:/+-  `--s+y/   .-.oNMdy-`-.`                                
//                                    .--dMMMNo. `od+s/o+   `o/-:-+hhmNMMMMMMMMMMMNMMNddydyms/o/   -:s:hy.  -hMMMMs.-`                                  
//                                   `/- `omNmNm/sh/y:o:    //---:oNNNNNMMMMMMMMMMMMMMMMMMshs.`/o   :-y+sd:yNMmNd:  :-                                  
//                                  `:.    .s/oNMh/h:/.     +::+::oNMMMMMMMMMMMMMMMMMMMMMMho-`  o+   --y+smMho++`    ::`                                
//      :.`                       `..        `yMMMNo:`    `:/`/h::sNMMMMMMMMMMMMMMMMMMMMMds:-/-`.d-   -:dMMMN-`    `  `..`                        `..   
//      :`--``                  `..`--`.`-`   .smdNNd-   /:.-.sNo:ydMMMMMMMMMMMMMMMMMMMMMyosyoo/-:+- `sNmNdh/    ..`....`-.`                  ``--.`-   
//      :   `-/-``           ``..` `:os/+s-:.   .//dNy- -/.-.:sNNosymMMMMMMMMMMMMMMMMMMNyoyMMym++//:::yNo+/`  `.:os+sy/.` `.-``           ``.:-.    /   
//      :    -+os//o:-/:::/+/-..`` -/ysyo///+.    .m/-s`+-:./+yhNNmhhdNMMMMMNMMMMMMMMMMhydmmNym/sso-/.-oy     ///s+yyds:.  `.-:----....:+oosys:    `:   
//      ..    :sNNMmdhhMMNdm/+++//.-:o/s:---:.     `/N--o.::+sssdNMMNdhhNNMMMmNMMMMMMMmyhMMMdodmyh+.-+.y`     ::-:-+od+:..::o+/so///oshysNMMho.    :    
//       :`   `/shdNdhsdNdso:+/+://++o-o-  .:   `..`-:.y-+-s+omhohMMMMNyydmNMNddNNNNNdyNdMMm+hNs+ss./+`..`-`  .:`  /:yoo/::-o+osyo:+dhdsoddho-    :.    
//        -  `:+//ymhh+dmmdo++----:..--:.     ..` `/` s-//:h/dMNh+mMMMMMNmddmmhmdddhdmNMhMN+dMyodmMs:/o :``--`     .-/:..:-:-/ohNm+hmhd++d////`  .-     
//        `+  .sssohhs/sdNosm+::`----.`    ``:.     ` s::-oN/hNmdNsNMNMMMMMMMNNhdmMMMMMMyMsdMdhMdhNh+/y     `--     `..  .`-/+hNNmydhds:ooyoo-  -:      
//         ./` -od+:sy:/sh/dN++s-----.`````-.        :o::-sM:+:/odNyNdMMMMMMMMMNMMNMMMMmNymMNhMMs/hyy:y       `.-  `     `./yyhNmNdshso:::yy:` .:       
//          .+. `/ho:.-:+::soo+s/:---.`  ::          s//-.yy:./ymdydNhdNMMNMMMMmhhNmNMmNdmMMyNmdm+/sy:y         `/``     .+yddssshyoo/..+d+- `--        
//           `-. `-odh:--::///o:-/---`  :-           y+:.-+-++hmNMmdhoyhNMMMMMMmMMNNNmdNMMMysdhhso:`s:o+          --     -/sys/oooo--:-yy/` `-.         
//             .`---+yh/-----/:..-`..` .:            s:- ./`oydmmdhdNNMdmdMMdhmdNmmmNMNNmhhyhmNmy-  :/:y           -   ` `---:+o///hm/:+/:-`.`          
//              `..../so-o+-  `/:..``` /             h`-`.`+s/:/+shmhNMMMNmmyyo/hddNdmdomMmddo:++.   o/o           `- ````./-` `:ohmo---/.-.            
//                -:`.:/-oo-:--:s:..-`--            .s ... -+`      `-:/+ohhy/ho/ooo/.  `` ` `.:s` ``s.s            :....`/y--.:-ohs---.--`             
//                 `+-..:+o:--oo++./- :             -N:``` -/o          ../:/ohNs+:``          :+  .y+.y`           .-.--`s+/o--/+o-----.`              
//                   -:.`:ss::/+-/..` /             :d-` `:.:+`         -:ss++ys:///.`        -+- +yo//N.           `-.--.+-//:-os:----`                
//                     `--./+oo+:/-`.`/             .d.   - `/s-``   ``:sms...:`.`:++o:-`   `:s+.-+.`.-N`           `-``--:-/+o//-:/- .`                
//                       .--`.:s+y+:-`+`            `N-   : ./hh+///oshdy--/:`s..s-.ohhhh+/+ss+-.  : `/m            `- -+/o/:/..---`  .`                
//					
////					`--...:+:-: -o             m+  `/-`-shydhddyo.-+s.  /  :o:..:+shhdds+-. .:  :s            -.`++o+:-.-.`     .                 
//                         `------``.  o:            h+-  +-:sydssy+....o:.   +   .+sy.`.oysos+/-.`+  -o           /. `-``.--`        `                 
//                           .-` .:::` `y.           :d/. o:`-:+ymy`-s+os     o    `yh:/.-dyo:..` /+  +/          /+  .:+:.`                            
//                           ``    `.::.:o:           d+-`ss  .  .-yhshy++/`.+y:``./smyd:.-``.`` `yy.`m/         +/-.::.`                               
//                                     `.:+.          dy-smyo.-` .sdyshomds/sh/s+/syyyhN//`/+:` `shmo.N:        /+:.`                                   
//                                                    my:sh-m/.-`.ho+s+sdNyNNM/hmmsmhys++..ss-` omyMy-h-                                                
//												M-:/m/+y`./-``+h-sdo+ddy:yddshysd-/`-/+.`/hmyMm:s-                                                
//                                                    m-./od:h:`-+o.`y+ods+MMd+hMm:y:/o -:/-:.`dhhmmh:y                                                 
//                                                    o+ s/+do/`-:s+y.` ```+/:`-//     .soo-+ -mNdNdh-d             `                                   
//                                                    so :h//o/ -//oyo               `./o+/+. :dMdNNooy             .                                   
//                                                    No`o-d+//  +osod+              /+s+:/.  :mNmm/+Ny             .                                   
//                                                    N- s.sN--` .homhso`          `soss/+-   sNmd/:ddy                                                 
//                                                   .d``:hsNy:-  /ohdyd++:.-.--`:o/yy//+-   :mmm+yd./d                                                 
//                                                  .d:-` /:oN//`` :ydddysdomsNm+hmoy/sd-  .+mhmd/N+ `/+                                                
//                                                 `dm`.` .+:ydo+/:`-shddhddddddhyyhshy- .+dhydd+yy`   +/`                                              
//                                               `:hd+ `-  -y-oh/o///.:oyhyhyyhhshshs/.:+syy+dh/s+.     -+-                                             
//                                             `/hmsom- ..  yd//o+//..-.`-/+syyyo+-`.-:-:os++-`/o         :/-`                                          
//                                          `/ymmoy.hds-.y. :dNy:-os/-:/---``     .oy/::-.    ::           `:o/.`                                       
//                                       `/ymdmN+/N/-/Ny`:y:`.NMMh-./so:` o-    .-+::+:`    `.:`.         .`   `:+-`                                    
//                                     -ydyydNm+`.sh:-NN/..h.::dhNNdo-``.`+o///+yyo--`    `://o//.``             `/yo.                                  
//                                   .sd+smds-` ..-yooyho` .-`-.:o+hmNhys++oo/++/`:--.    `/odsys/-.    ` .` -      :ss-                                
//                                  .mh+ho: ..:/::.-.--:-   `  ````.:/... ` `/---.:.`     `+hymyNh+.     `/ -:/-` `-..-+/                               
//                                 `ym+h-:::osddo.--/  ``.`./-  `         `.sy+/ooo:.     .:hhNmyMh/-      `sooss:+o/:.+s.                              
//                                 ss:/:+mNmdMdo.-:/-  `--++ms:::.        .-dmsNhyy+-`    :/dhNMhmMh+..:   :y+++`  -++ooh/                              
//                                    -ommmmy//`    - :`/sysNNo+:-`      ``:myhNNds//`    `/dmMMsNMN-` /+``:`                                           
//                                     smhs+:-      -``./+so+://.-        /dMomMMdy+/     `:yMMMoNmh+   ./ss:`                                          
//                                     ``           +/`-/:-++o.-```     ``yMm/NNmdd::`    `+oddds+y/+        .                                          
//                                                  yd/::...-`        .-+:NMyyMNsmNd/`     /omNyd:-:-                                                   
//                                                 ``ohho+--/.::`    `:sodMMsmNmmddNo-`    :yyyss:-`.--.                                                
//                                               `-..`.//  ``` s/--...oyyMMddmsNMNddo+     .yhd/-.`//o:--`                                              
//                                             ``::o/:/-....`: .yo/:+smommmsMmdNdNyNh/.    /sd/ -:ydyhyos+-`                                            
//                                           ``.:s+do++/:-   /` `/y++hdoMd+dMNhNddymdo+-/` oN/  -+/yNNydsdy+-.                                          
//                                         `:::-sss/mho:-`   `+   -sdyhhMMh+yhhNhmoNmsoo:-`so    `:+ohNymdso+:`.                                        
//                                      .--+oyh/hyN+o+-`      .o`  `oNdydMmsNm/hsmomNhh+ +:/       .o/+dhydmmdh+.`                                      
//                                    .-+ssyd/msmoo+:`         .o.  symmdmymMNoNms:Nmmms .-          -+o+yhyyhh/.-`.`                                   
//                                 ---:/ohmhd+dss--`  `.-/.     `//`/sdddshMMmhMMmsNhhy: -.         `  .+++hsds-/ms-/``                                 
//                              `-//::oyohm+hs/:.   `..:/dh..`    -+-`-oyhhmMMhdMh+/.`.:.        ``.:o:` .--:o::+so:o/--..                              
//                            `:-/o+-oyooys+s/`  /::omhmshm+dmh+.   :+-  .+yNMsmh:` .//.      .-:-/+/:+/. ```+:/:s+hsyo/-:..`                           
//                         `:/:/:/osysyy+/+-`    /syoo////++mMMMNy+-``:+:` -yNhm- -++.    `./dmm++dmNyhMy./-  `-:/-syshy/:o-++`                         
//                         o+/+h-ssmoyy:-.        `.`       .://+yhdhs:.:++: :y. +/.  .-/ydddhdh-.---../d/o.     .`ydhhsN:dys/.                         
//                         `-+-+Nssmo+.                          `.-+odds/++:`.``/.-+hmmNh+-`...        ``         .odmy+sd//.                          
//                           .oymNs/hy+-`                            ./+ydssy..++/hNmho:.                        .:oys--dy+-                            
//                             -:.   ./sys+:-.```              ``..:/sy+/--+yossso:/syo/-.```           ```.-:/oyyo:`   `-`                             
//                                      `:osso++oooo++////+++ooosso/-.`-:/syoo:-+yys+--/+sooooooo++ooooooo++o+o+-                                       
//                                         `.-:::--------:////:-..:+yyyds+:.`    `:ydmmho/--:///:---..-:///:-.`                                         
//                                              `-::///:/++//+oshmmmhs/-.`         `-:oymNNhso+++/:::::-.                                               
//                                                  `sohymMMMMNhss:- `.-/:-`-``...--``.:oymNMMMMMmhs+                                                  
//                                                   .:mMNNdys/:.    .:.-:---::`--.--:`  .-/ymMMmmyy`                                                  
//                                                    ooyssdy.                              o+hNdds-                                                   
//                                                    -hNdo-`                                 +mNh/                                                    
//                                                       -.                                     .:/.                                                    
//                                     
//
int aa_p  = 18; 
int aa_n = -18; 
int aaa_delay  = 10;
int release = 10;
 
main {
    if(get_val(XB1_LT)) {
        combo_run(AA_XY);
        
        }
     
}
 
combo AA_XY {
    set_val(10,xy_val(10,aa_p));
    wait(aaa_delay);
    set_val(9,xy_val(9,aa_p));
    set_val(11,xy_val(11,aa_p));
    wait(aaa_delay);
    set_val(10,xy_val(10,aa_n));
    wait(aaa_delay);
    set_val(9,xy_val(9,aa_n));
    set_val(11,xy_val(11,aa_n));
    wait(aaa_delay);
}
 

 
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < release)
    return f_val;
    return get_val(f_axis); 
}



define ADS = XB1_LT;
define FIRE = XB1_RT;
define LETHAL = XB1_RB;
define TAC_G = XB1_LB;
define AIM_X = XB1_RX;
define AIM_Y = XB1_RY;
define STRAFE = XB1_LX;
define WALK = XB1_LY;
define SPRINT = XB1_LS;
define player_slot=6;
define auto_run=TRUE;
int	   in_game_menu_sens=14;
define walk_tresh= -50;//Easy sprint stick treshhold (-75 = pressed more than 75%)
/*above fill out the buttons you are using and on what slot your main script is to be found*/
/*below no changes, unless you know what you are doing*/
define aim_sens_corrections=1; // [0 = OFF / 1 = ON]
int sticky_tripple_or_polar_aa=3;//[0 = OFF / 1 = STICKY AIM ASSIST / 2 = TRIPPLE STICKY AIM ASSIST /
/*3 = CRESCENS POLAR WITH AIM SENS CORRECTIONS]*/
int _v=22; int _w=20;

int aim_val_1 = 22;
int wait_val_1 = 20; 
int aim_val_2 = 24; 
int wait_val_2 = 25;
int aim_val_3 = 28; 
int wait_val_3 = 15;

int Crescens_release=22;/*sets the treshhold*/
int Crescens_quantum=24;/*sets the strength of the polar sticky aim*/
int Crescens_Sticky_Polar_Aim_Cor;
int Crescens_gradient;
int current_x, current_y;
int hue=0; define Off = 8; define Blue = 1; define Red = 2; define Green = 3; define Pink = 4; define SkyBlue = 5; define Yellow = 6; define White = 7; data(1,2,0,0,0,0,2,0,0,0,0,2,0,0,0,0,2,2,0,2,0, 0,2,2,0,2,2,2,2,0,0,0,0); int pin=222, code; int game_sens; int ads_grenade_sens, ads_fire_sens, Sens, actual_sens; /*int midpoint=NOT_USE;*/ int notify, notifier; int rapid_fire=FALSE;/*toggle on Hold ADS + D-pad right */ int wtime; int record: int once=1; int rld_time; int b_reload; int smart_reload=1; int wpn_holster=FALSE; int switch; int running_p; function btn(f__btn) { if (!g_i(f__btn)) return; s_v(f__btn, 0); } function notify(pos) { if(pos) notify = 1; else notify = 2; } function load_sens (){ game_sens = in_game_menu_sens; code = 223; s_pv (SPVAR_41, game_sens); s_pv (SPVAR_42, code); } function s_v(id,fval){set_val(id,fval);} function e_p(id){return event_press(id);} function e_r(id){return event_release(id);} function g_i(id){return get_ival(id);} function g_pv(id,min,max,fval){return get_pvar(id,min,max,fval);} function s_pv(id,fval){set_pvar(id,fval);} init{ rld_time= g_pv(SPVAR_20, 0, 4000, 1200); code = get_pvar(SPVAR_42, 1, 2000, 222); if (code == pin){load_sens()}else game_sens= get_pvar(SPVAR_41, 3, 20, game_sens);} main { set_val(TRACE_1, current_x); set_val(TRACE_2, current_y); if (g_i (FIRE)) { current_x = dz(AIM_X,0); current_y = dz(AIM_Y,0); } if (g_i (ADS) && e_r (XB1_RIGHT)) {rapid_fire=TRUE; notify (rapid_fire); switch=FALSE wpn_holster=FALSE; } if (g_i (ADS) && e_r (PS4_LEFT)) { switch = TRUE rapid_fire=TRUE; wpn_holster=TRUE; notify (wpn_holster); } if (g_i (ADS) && e_r (PS4_DOWN)) { switch = FALSE; rapid_fire=FALSE; wpn_holster=FALSE; notify (wpn_holster); } if (g_i (XB1_UP)) { if (e_r (XB1_Y) && (XB1_B)){load_slot (player_slot);} btn (XB1_Y); btn (XB1_B); } if (sticky_tripple_or_polar_aa==1) { _w=20; if(g_i(ADS)) { combo_run(STICKY_AIM); } else { combo_stop(STICKY_AIM); } } if (sticky_tripple_or_polar_aa==2) { if(g_i(ADS) && !g_i(FIRE)) { combo_run(STICKY_AIM); _v = aim_val_1; _w = wait_val_1; } else if(g_i(ADS) && g_i(FIRE)) { combo_run(STICKY_AIM); _v = aim_val_2; _w = wait_val_2; } else if(!g_i(ADS) && g_i(FIRE)) { combo_run(STICKY_AIM); _v = aim_val_3; _w = wait_val_3; } } if (sticky_tripple_or_polar_aa ==3) { Crescens_Sticky_Polar_Aim_Cor=1; } else { Crescens_Sticky_Polar_Aim_Cor=0; } if(Crescens_Sticky_Polar_Aim_Cor) { if(get_ival(ADS) || (get_ival(FIRE))) /*when aiming OR firing OR both*/ { running_p=TRUE; if(isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) <= Crescens_release)/*treshhold*/ { Crescens_gradient = (Crescens_gradient + Crescens_quantum) % 360; set_polar(POLAR_RS, Crescens_gradient, Crescens_release * random(326,328)); } } else running_p=FALSE; } if(g_i(XB1_DOWN) && g_i (XB1_X) && get_ptime (XB1_X)>500 && !record) { record = TRUE; notify (record); } if (record) { rld_time = get_ptime(XB1_X); if (e_r (XB1_X)) { record = FALSE; s_pv(SPVAR_20, rld_time); } } if(e_r(XB1_X) && get_ptime(XB1_X) < 300) b_reload = rld_time; if(smart_reload && b_reload) { b_reload -= get_rtime(); if(b_reload < 0) b_reload = 0; if(e_p(FIRE) || e_p(ADS)) combo_run(CANCEL_RLD); } if(e_r(XB1_Y) && get_ptime(XB1_Y) < 300 && wpn_holster) { switch = !switch; notify (switch); } if (record==FALSE &&wpn_holster && g_i (XB1_X) && get_ptime(XB1_X) > 250 && once == 1) { switch = !switch; notify (switch); once = once - 1; } if (once < 1 && e_r (XB1_X)) once = 1; if (rapid_fire) { wtime = 125 - (g_i(FIRE)); { if (!switch && wpn_holster || !switch &&!wpn_holster) { if (g_i (FIRE) && rapid_fire) { combo_run (RAPID_FIRE); } } } } if(aim_sens_corrections) { ads_grenade_sens=100-(game_sens); ads_fire_sens=96-(game_sens); actual_sens=100; if(!g_i(ADS) && !g_i(FIRE) && !g_i(LETHAL) && !g_i (TAC_G)) { Sens=actual_sens; } else if(g_i(ADS) && !g_i(FIRE)) { Sens=ads_grenade_sens; } else if(!g_i(ADS) && g_i(FIRE)) { Sens=actual_sens; } else if(g_i(ADS) && g_i(FIRE)) { Sens=ads_fire_sens; } else if(g_i(TAC_G) || g_i (LETHAL)) { Sens=ads_grenade_sens; } if(isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY))) > Crescens_release){ if(Sens > 100) Sens = 100; sensitivity(AIM_X, NOT_USE, Sens); sensitivity(AIM_Y, NOT_USE, Sens); } if (g_i(XB1_DOWN)) { if (e_p(XB1_VIEW)) { game_sens --; notify(1); s_pv (SPVAR_41, game_sens); } if (e_p(XB1_MENU)) { game_sens ++; notify(1); s_pv (SPVAR_41, game_sens); } btn (XB1_VIEW); btn(XB1_MENU); } } if(notify) { notifier += get_rtime(); if(notifier < 150) set_rumble(1,75); else if(notifier < 400) reset_rumble(); else { notify -= 1; notifier = 0; } } if (auto_run) { if (!g_i(ADS)&& g_i(WALK) < (walk_tresh)) combo_run (EASY_RUN); } if (running_p){ hue++; if (hue == 360) hue = 0; set_hsb(hue,100,100)} else if (wpn_holster && !switch||!wpn_holster && rapid_fire && !switch)Led (Red); else Led (Blue); } combo CANCEL_RLD { s_v(XB1_Y, 100); wait(30); wait(20); s_v(XB1_Y, 100); wait(30); wait(20); b_reload=FALSE; } combo STICKY_AIM { s_v(AIM_Y,xy_val(AIM_Y, _v)); wait(_w); s_v(AIM_X,xy_val(AIM_X, _v)); s_v(STRAFE,xy_val(STRAFE, _v)); wait(_w); s_v(AIM_Y,xy_val(AIM_Y, _v * -1)); wait(_w); s_v(AIM_X,xy_val(AIM_X, _v * -1)); s_v(STRAFE,xy_val(STRAFE, _v * -1)); wait(_w); } combo RAPID_FIRE { s_v(FIRE,100); wait(wtime); s_v(FIRE, 0); wait(wtime); } combo EASY_RUN{ s_v(SPRINT,100); wait(30); wait(100); } function dz(f_axis,f_val) { f_val = get_val(f_axis); if(abs(f_val) < 8) { s_v(f_axis,f_val); return f_val; } return f_val; } function xy_val(f_axis,f_val) { if(abs(get_val(f_axis)) < 25) return f_val; return get_val(f_axis); } int C_i; function Led(C) { C_i=(C*4)- 3; set_led(LED_1,duint8(C_i )); set_led(LED_2,duint8(C_i+ 1)); set_led(LED_3,duint8(C_i+ 2)); set_led(LED_4,duint8(C_i+ 3)); }




main {
    if (get_val(XB1_LT) >= 95) {
        set_val(XB1_LS, 100);
    }
}

//Rapidfire





int rld_time = 1400;
int b_reload = FALSE;
int poli_Target_Tracker = TRUE;
int aim_speed = 95;
int AimAssist = TRUE;
int AimAssist_Strength = 22;
main {
	if (event_release(PS4_SQUARE)) {
		b_reload = TRUE;
	}
	if (b_reload) {
		b_reload = b_reload + get_rtime();
	}
	if (b_reload >= rld_time) {
		b_reload = 0;
		b_reload = FALSE;
	}
	if (poli_Target_Tracker) {
		if (get_val(PS4_L2) && get_val(PS4_R2)) {
			sensitivity(PS4_RX, 0, aim_speed);
			sensitivity(PS4_RY, 0, aim_speed);
		}
	}
if (AimAssist) {
		if (get_val(PS4_L2)) combo_run(c_Auto_Aimm);
		else  combo_stop(c_Auto_Aimm);
		if (get_val(PS4_L2)) {
			if (abs(get_val(9)) > 21 || abs(get_val(10)) > 21) {
				combo_stop(c_Auto_Aimm);
			}
		}
	}}
combo c_Auto_Aimm {
	set_val(10, AimAssist_Strength *- 1);
	wait(20);
	set_val(9, AimAssist_Strength);
	wait(20);
	set_val(10, AimAssist_Strength);
	wait(20);
	set_val(9, AimAssist_Strength *- 1);
	wait(20);
}





//--------------------------------------------------------------------------------
#define _ot_i _ot_i2
const uint8 _ot_i2[42] = {
    BUTTON_1,  BUTTON_2,  BUTTON_3,  BUTTON_4,  BUTTON_5,  BUTTON_6, 
    BUTTON_7,  BUTTON_8,  BUTTON_9,  STICK_1_X, STICK_1_Y, STICK_2_X, 
    STICK_2_Y, BUTTON_10, BUTTON_11, BUTTON_12, BUTTON_13, BUTTON_14, 
    BUTTON_15, BUTTON_16, BUTTON_17, ACCEL_1_X, ACCEL_1_Y, ACCEL_1_Z, 
    GYRO_1_X,  GYRO_1_Y,  GYRO_1_Z,  PADDLE_1, POINT_1_X, POINT_1_Y, 
    PADDLE_2, PADDLE_3, PADDLE_4, ACCEL_2_X, ACCEL_2_Y, ACCEL_2_Z,
    0, 0, BUTTON_18, BUTTON_19, BUTTON_20, BUTTON_21,
};
#define wait(a) wait(a); 
define FIRE_BTN = XB1_RT;
define ADS_BTN = XB1_LT;
define TACTICAL = XB1_LB;
define LETHAL = XB1_RB;
define RX = XB1_RX;
define RY = XB1_RY;
define LX = XB1_LX;
define LY = XB1_LY;
define CROUCH_BTN = XB1_RS;
define SPRINT_BTN = XB1_LS;
define RELOAD_BTN = XB1_X
define JUMP_BTN = XB1_A;
define MELEE_BTN = XB1_B;
define SWAP_BTN = XB1_Y;
define UP = XB1_UP;
define LEFT = XB1_LEFT;
define RIGHT = XB1_RIGHT;
define DOWN = XB1_DOWN;
 
int ADS_SENS, GEN_SENS=100, HIP_SENS=100, ADS_FIRE_SENS, Use_sens;
int IN_GAME_SENS=14;
int ZOOM_SENS;

 
define AimAssist = TRUE;
int value = 0;
int value2 = 2;
define delay = 0;
main {

if(get_val(RX) < value2 || get_val(RX) > value || get_val(RY) < value2 || get_val(RY) > value || get_val(RX) < value2 || get_val(RX) > value || get_val(RY) < value2 || get_val(RY) > value) {
combo_stop(LT_C);
combo_stop(RT_C);
}
} 
 
combo LT_C {
set_val(RY, -25);
wait(delay)
set_val(RX, 25);
set_val(RY, 15);
wait(delay)
set_val(RY, 15);
wait(delay)
set_val(RX, -25);
set_val(RY, 15);
wait(delay)
}
 
combo RT_C {
set_val(RY, -35);
wait(delay)
set_val(RX, 35);
set_val(RY, 25);
wait(delay)
set_val(RY, 25);
wait(delay)
set_val(RX, -35);
set_val(RY, 25);
wait(delay)
}

define ADS_BTN = PS4_L2;
define RIGHT_BUMP = PS4_R1;
define FIRE_BTN = PS4_R2;
define CROUCH_BTN = PS4_CIRCLE;
define JUMP_BUTTON = PS4_CROSS;
define RX = XB1_RX;
define RY = XB1_RY;
define Anti_Recoil_Aim_Shoot_Option = TRUE;
define DROPSHOT_BTN = PS4_L3;
define QUICK_DROP_WAIT = 1000;
define slide_delay = 120;
define save = 2;
define AoDswitch = XB1_DOWN;
define AoDQDF = PS4_L2;
define AODRF = PS4_RIGHT;
define AODQDFP = PS4_CIRCLE;
define R_X = 9;
define R_Y = 10;
define L_X = 11;
define L_Y = 12;
define Blue = 1;
define Red = 2;
define Green = 3;
define Pink = 4;
define SkyBlue = 5;
define Yellow = 6;
define White = 7;
#define __LAST_COMBO__ c_AntiRecoil
#define _VM_BTN_COUNT_ 42
#define DISABLE_VM_ 
#ifndef DISABLE_VM
#define VM_TIME 10
#define vm_tctrl(time) ___vm_time___ = (((10+ time) < 0) ? 0 : (10+ time))
#define wait(a) wait(vm_tctrl_wait(a));
#else 
#define VM_TIME 0
#endif

data( 1, 
2, 0, 0, 0 , 
0, 2, 0, 0 , 
0, 0, 2, 0 , 
0, 0, 0, 2 , 
2, 0, 2, 0 , 
0, 2, 2, 0 , 
2, 2, 2, 2
);

int Anti_Recoil_Release = 45;
int Anti_Recoil_Mod = TRUE;
int ANTI_RECOIL_Vertical = 25;
int ANTI_RECOIL_Horizontal = 0;
int TapShoT = TRUE;
int AoD_Slide_Slide_Cancel = FALSE;
int AIM_Assist_ON = TRUE;
int AoDASSIST = 18;
int AoDASSIST2 = -18;
int AoDTimer = 13;
int anti_recoil;
int anti_recoil_H;
int rumble_tipe;
int _;
int AoD15 = FALSE;
int AoD = FALSE;
int AoDAim = TRUE;
int AODQDF2 = TRUE;
int AODSE;
int PRONE_WAIT = 250;
int AODQDDDFFF = TRUE;
int AoDD2;
int AoDD = 188;
int AoDD1 = 5;
int AoDD4 = TRUE;
int AoDD5 = 16;
int AoDD55 = 18;
int AoDD6 = 20;
int ttt, s, a, b, i, num;
int aa_delay;
uint8 __COMBO_RUN__[13];
int8 __io_vals__[_VM_BTN_COUNT_];
uint8 __io_val_events__[_VM_BTN_COUNT_];
uint32 __vm_run_time__ = 0;
uint8 __run_vm__ = 1,  ___vm_time___ = VM_TIME,  ___i____i;

init {
	ANTI_RECOIL_Vertical = get_pvar(SPVAR_2,  -100, + 100, 25);
	ANTI_RECOIL_Horizontal = get_pvar(SPVAR_3,  -100, + 100, 0);
}


main {
	if(__run_vm__) {
		if (get_val(ADS_BTN)) {
			combo_run(c_LT_C);
		}
		if (get_val(FIRE_BTN) && get_val(ADS_BTN)) {
			combo_stop(c_LT_C);
			combo_run(c_RT_C);
		}
		if (get_val(RX) < AoDASSIST2|| get_val(RX) > AoDASSIST|| get_val(RY) < AoDASSIST2|| get_val(RY) > AoDASSIST|| get_val(RX) < AoDASSIST2|| get_val(RX) > AoDASSIST|| get_val(RY) < AoDASSIST2|| get_val(RY) > AoDASSIST) {
			combo_stop(c_LT_C);
			combo_stop(c_RT_C);
		}
		if (get_val(PS4_L2) && _event_press(PS4_DOWN)) {
			AoDAim =! AoDAim;
			if (AoDAim == TRUE) {
				combo_run(c_Notify);
				a = 0;
				b = 2;
			}
			if (AoDAim == FALSE) {
				combo_run(c_Notify2);
				a = 2;
				b = 0;
			}
		}
		if (AoDAim && get_val(7) > 80) {
			combo_run(c_AoDD2);
			
			if (_event_release(7)) {
				combo_stop(c_AoDD2);
			}
			if (get_val(7) && _event_press(15)) {
				AoD15 =! AoD15;
				if (AoD15 == TRUE) {
					combo_run(c_Notify);
					a = 0;
					b = 2;
				}
				if (AoD15 == FALSE) {
					combo_run(c_Notify2);
					a = 2;
					b = 0;
				}
			}
			if (AoD15 && get_val(PS4_R2)) {
				set_val(PS4_CIRCLE, 100);
				f___(5);
			}
			else if (AoD15 && _event_release(PS4_R2)) {
				combo_run(c_AoD15);
			}
			if (AODQDDDFFF && AODQDF2 && get_val(AoDQDF) && _event_press(AODQDFP)) {
				combo_run(c_AODQDF2);
			}
			if (TapShoT) {
				if (get_val(ADS_BTN) && get_val(RIGHT_BUMP)) {
					combo_run(c_cTapFire);
					set_val(RIGHT_BUMP, 0);
				}
				else {
					combo_stop(c_cTapFire);
				}
			}
			if (AoD) f_LED_CM(Green);
			else  f_LED_CM(Red);
			if (get_val(7) && _event_press(16)) {
				AoD =! AoD;
				if (AoD == TRUE) {
					combo_run(c_Notify);
					a = 0;
					b = 2;
				}
				if (AoD == FALSE) {
					combo_run(c_Notify2);
					a = 2;
					b = 0;
				}
			}
			if (AoD) {
				if (get_val(4)) {
					combo_run(c_AoD);
				}
			}
		}
		if (get_val(PS4_L2) && _event_press(PS4_SHARE)) {
			AoD_Slide_Slide_Cancel =! AoD_Slide_Slide_Cancel;
			if (AoD_Slide_Slide_Cancel == TRUE) {
				combo_run(c_Notify);
				a = 0;
				b = 2;
			}
			if (AoD_Slide_Slide_Cancel == FALSE) {
				combo_run(c_Notify2);
				a = 2;
				b = 0;
			}
		}
		if ((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) {
			if (get_rumble(RUMBLE_A) > 87) {
				AODSE = TRUE;
			}
			if (get_rumble(RUMBLE_A) > -2) {
				AODSE = FALSE;
			}
			if (AoD_Slide_Slide_Cancel) {
				if (_event_release(CROUCH_BTN)) {
					combo_run(c_ASC);
				}
			}
			if (AoDD4) {
				if (get_val(7) > 80) {
					combo_run(c_AoDD4);
				}
			}
			if (abs(get_val(R_X)) > 19|| abs(get_val(R_Y)) > 19) {
				combo_stop(c_AoDD4);
			}
		}
		if (get_val(XB1_Y) && _event_press(AoDswitch)) {
			Anti_Recoil_Mod =! Anti_Recoil_Mod;
			f_set_rumble_type(Anti_Recoil_Mod);
		}
		if (get_val(ADS_BTN) && _event_press(save)) {
			rumble_tipe = RUMBLE_A;
			combo_run(c_NOTIFY_RESET);
			set_pvar(SPVAR_2, ANTI_RECOIL_Vertical);
			set_pvar(SPVAR_3, ANTI_RECOIL_Horizontal);
			set_val(save, 0);
		}
		if (get_val(XB1_A)) {
			if (_event_press(XB1_UP)) {
				ANTI_RECOIL_Vertical = ANTI_RECOIL_Vertical+ 1;
			}
			if (_event_press(XB1_DOWN)) {
				ANTI_RECOIL_Vertical = ANTI_RECOIL_Vertical-1;
			}
			set_val(XB1_UP, 0);
			set_val(XB1_DOWN, 0);
			if (_event_press(XB1_RIGHT)) {
				ANTI_RECOIL_Horizontal = ANTI_RECOIL_Horizontal+ 1;
			}
			if (_event_press(XB1_LEFT)) {
				ANTI_RECOIL_Horizontal = ANTI_RECOIL_Horizontal-1;
			}
			set_val(XB1_RIGHT, 0);
			set_val(XB1_LEFT, 0);
		}
		if (!Anti_Recoil_Aim_Shoot_Option|| get_val(ADS_BTN) && get_val(FIRE_BTN)) {
			combo_run(c_AntiRecoil);
		}
		if (abs(get_val(10)) > Anti_Recoil_Release|| abs(get_val(9)) > Anti_Recoil_Release) {
			combo_stop(c_AntiRecoil);
		}
	}
}

combo c_cTapFire {
	set_val(ADS_BTN, 100);
	set_val(FIRE_BTN, 100);
	wait(100);
	set_val(ADS_BTN, 0);
	wait(250);
} 



 combo c_AoDD2 {
	set_val(7, 100);
	wait(AoDD);
	set_val(7, 0);
	wait(AoDD1);
}

combo c_NOTIFY_RESET {
	set_rumble(RUMBLE_A, 100);
	wait(400);
	reset_rumble();
	wait(200);
}

combo c_AoDD4 {
	set_val(R_Y, (AoDD5));
	wait(AoDD6);
	set_val(R_X, (AoDD5));
	wait(AoDD6);
	set_val(R_Y, AoDD55 * -1);
	wait(AoDD6);
	set_val(R_X, AoDD5 * -1);
	wait(AoDD6);
}

combo c_AoD {
	set_val(4, 100);
	wait(aa_delay);
	set_val(4, 0);
}

combo c_LT_C {
	set_val(RY,  -19);
	wait(AoDTimer);
	set_val(RX, 19);
	set_val(RY, 10);
	wait(AoDTimer);
	set_val(RY, 10);
	wait(AoDTimer);
	set_val(RX,  -19);
	set_val(RY, 10);
	wait(AoDTimer);
}

combo c_RT_C {
	set_val(RY,  -30);
	wait(AoDTimer);
	set_val(RX, 30);
	set_val(RY, 20);
	wait(AoDTimer);
	set_val(RY, 20);
	wait(AoDTimer);
	set_val(RX,  -30);
	set_val(RY, 20);
	wait(AoDTimer);
}

combo c_AODQDF2 {
	set_val(FIRE_BTN, 100);
	set_val(CROUCH_BTN, 100);
	wait(QUICK_DROP_WAIT);
}

combo c_Notify {
	set_rumble(RUMBLE_B, 100);
	wait(300);
	reset_rumble();
}

combo c_Notify2 {
	set_rumble(RUMBLE_A, 100);
	wait(300);
	reset_rumble();
}

combo c_ASC {
	set_val(CROUCH_BTN, 100);
	wait(slide_delay);
	set_val(CROUCH_BTN, 0);
	wait(60);
	set_val(CROUCH_BTN, 100);
	wait(50);
	set_val(CROUCH_BTN, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);
	set_val(CROUCH_BTN, 0);
	set_val(JUMP_BUTTON, 100);
	wait(10);
	set_val(JUMP_BUTTON, 0);
}

combo c_AoD15 {
	set_val(PS4_CIRCLE, 0);
	wait(PRONE_WAIT);
	set_val(PS4_CIRCLE, 100);
	wait(PRONE_WAIT);
} 


 combo c_AntiRecoil {
	if (Anti_Recoil_Mod) {
		anti_recoil = get_val(10) + ANTI_RECOIL_Vertical;
		if (anti_recoil > 100) anti_recoil = 100;
		set_val(10, anti_recoil);
		anti_recoil_H = get_val(9) + ANTI_RECOIL_Horizontal;
		if (anti_recoil_H > 100) anti_recoil_H = 100;
		set_val(9, anti_recoil_H);
	}
} 



 function f_LED_CM(Colour) {
	set_led(LED_1, dbyte((Colour * 4)  -3));
	set_led(LED_2, dbyte(((Colour * 4)  -3) + 1));
	set_led(LED_3, dbyte(((Colour * 4)  -3) + 2));
	set_led(LED_4, dbyte(((Colour * 4)  -3) + 3));
}

function f___(c) {
	for (_ = 0; _ < 3; _++ ) {
		set_led(_, test_bit(c, _));
	}
}

function f_set_rumble_type(val) {
	if (val) rumble_tipe = RUMBLE_A;
	else  rumble_tipe = RUMBLE_B;
	combo_run(c_NOTIFY_RESET);
}


main {
	if(__run_vm__) {
		__run_vm__ = system_time() >= (__vm_run_time__+ ___vm_time___);
		if(__run_vm__) __vm_run_time__ = system_time();
		else {
			memset( & __io_vals__[0],  0,  _VM_BTN_COUNT_);
			memset( & __io_val_events__[0],  0,  _VM_BTN_COUNT_);
			for(___i____i = 0; ___i____i < _VM_BTN_COUNT_; ++ ___i____i) {
				if(get_val(___i____i)) __io_vals__[___i____i] = get_val(___i____i);
				if(get_val( ++ ___i____i)) __io_vals__[___i____i] = get_val(___i____i);
			}
			#ifdef __LAST_COMBO__
			for(___i____i = 0; ___i____i < sizeof(__COMBO_RUN__); ++ ___i____i) {
				if(__LAST_COMBO__[(___i____i * 3) + ___i____i]) {
					__LAST_COMBO__[(___i____i * 3) + ___i____i] = 0;
					__COMBO_RUN__[___i____i] = 1;
				}
			}
			#endif
		}
	}
	else {
		___i____i = 0;
		do {
			if(__io_vals__[___i____i]) set_val(___i____i,    __io_vals__[___i____i]);
			if(event_press(___i____i)) __io_val_events__[___i____i] = 1;
			if(event_release(___i____i)) __io_val_events__[___i____i] = 3;
			if(__io_vals__[ ++ ___i____i]) set_val(___i____i,    __io_vals__[___i____i]);
			if(event_press(___i____i)) __io_val_events__[___i____i] = 1;
			if(event_release(___i____i)) __io_val_events__[___i____i] = 3;
		} while( ++ ___i____i < _VM_BTN_COUNT_);
		if(system_time() >= (__vm_run_time__+ ___vm_time___)) {
			__run_vm__ = 1; __vm_run_time__ = system_time();
			#ifdef __LAST_COMBO__
			for(___i____i = 0; ___i____i < sizeof(__COMBO_RUN__); ++ ___i____i) {
				if(__COMBO_RUN__[___i____i]) {
					__LAST_COMBO__[(___i____i * 3) + ___i____i] = 1;
					__COMBO_RUN__[___i____i] = 0;
				}
			}
			#endif
		}
	}
}


int vm_tctrl_wait(int num) { 
	return ___vm_time___ ? ((num / ___vm_time___) + ((num % ___vm_time___) ? 1 : 0)) : num;
}

bool _event_press(uint8 io) {
	return event_press(io) || __io_val_events__[io] == 1;
}

bool _event_release(uint8 io) {
	return event_release(io) || __io_val_events__[io] == 3;
}
fix32 _COSINE_(fix32 a, bool b) {/*^ */
  if ((a = mod(a + 6.28319, 6.28319)) < 0.0) a = mod(a += 6.28319, 6.28319);
  if (a > 0.785522 && a < 3.92761) return b ? sin(1.5708 - a) : cos(1.5708 - a);
  return b ? cos(a) : sin(a);
}
#define sin(a) (_COSINE_(a))
#define cos(a) (_COSINE_(a, 1))

const fix32 radius = 20.00;
const fix32 speed = 2.5;


const fix32 movement_speed = 4.00;
const fix32 movement_radius = 5.00;
fix32 angle;
main {
  
  fix32 x = get_actual(STICK_1_X);
  fix32 y = get_actual(STICK_1_Y);
  fix32 m = sqrt(sq(x)+sq(y));
  
  
  if(is_active(BUTTON_8)){
    angle = mod(angle += (m > radius ? movement_speed : speed), 360.00);
    set_polar(STICK_1_X, STICK_1_Y, angle, (m > radius ? movement_radius : radius));
  }
} 

void set_polar(uint8 X, uint8 Y, fix32 ANGLE, fix32 RADIUS){
  fix32 angle = rad2deg(mod(deg2rad(ANGLE) + 6.28319, 6.28319));
  fix32  x_Out = cos(deg2rad(angle));
  fix32  y_Out = sin(deg2rad(angle));
  offset(X, clamp(x_Out * RADIUS, -100.00, 100.00));
  offset(Y, clamp(y_Out * RADIUS, -100.00, 100.00));
}
void offset(uint8 axis, fix32 offset_val) {
  set_val(axis, clamp(offset_val * (100f - abs(get_actual(axis))) / 100f + get_actual(axis), -100f, 100f));
  return;
}

//--------------------------------------


define HairTriggers = TRUE;
define EASY__SLIDE_DROP = FALSE;
define holdbreath = FALSE;
define sticky_aim_assist = TRUE;
define _v = 23;
define aim_sens_corrections = 2;
define antirecoil_ = TRUE;
define INTVERTED_RECOIL = 1;
define FIRE = PS4_R2;
define ADS = PS4_L2;
define SPRINT = PS4_L3;
define PRONE = PS4_CIRCLE;
define MELEE = PS4_R3;
define JUMP = PS4_CROSS;
define TACTICAL = PS4_L1;
define LETHAL = PS4_R1;
define VIB_A = RUMBLE_A;
define Sampling_Time = 10;
define Aim_Boost = 7;
define Aim_Correction = 5;
define Aim_Perfection_Limit = 30;
define POS_Aim_Limit = 70;
define NEG_Aim_Limit = -70;
define POS_Micro_MVT_Limit = 25;
define NEG_Micro_MVT_Limit = -25;
#define __LAST_COMBO__ c_vibrate
#define _VM_BTN_COUNT_ 42
#define DISABLE_VM_ // delete underscore to disable VM mode
#ifndef DISABLE_VM
#define VM_TIME 10
#define vm_tctrl(time) ___vm_time___ = (((10+ time) < 0) ? 0 : (10+ time))
#define wait(a) wait(vm_tctrl_wait(a));
#else 
#define VM_TIME 0
#endif

int Rapid_Fire = FALSE;
int DropShot = FALSE;
int DropShotSpeed = 30;
int iin_game_menu_sens = 10;
int DEFAULT_VERTICAL = 16;
int DEFAULT_HORIZONTAL = 0;
int X_Last_Value = 0;
int Y_Last_Value = 0;
int X_Current_Value = 0;
int Y_Current_Value = 0;
int Sampling_Done = FALSE;
int spiroide_pulse = 0;
int fine_pulse = 0;
int Joystick_calibration = FALSE;
int RX_Axis_Joystick_calibrate = 0;
int RY_Axis_Joystick_calibrate = 0;
int ads_grenade_sens,  ads_fire_sens,  Sens;
int RECOIL, BOOOST, ANTIRECOOIL;

main{if (get_val(FIRE) && get_val(ADS)) {
			
			combo_run(c_Aim_Assist_Perfection);
		}if (get_val(FIRE) && get_val(ADS)) {
			
			combo_run(c_spiroide_Aim_Assit);
		}if (get_val(FIRE) && get_val(ADS)) {
			
			combo_run(c_Fine_Tune_Aim);
		}if (abs(get_val(PS4_LY)) < 10 && abs(get_val(PS4_LX)) < 10) {
			set_val(PS4_LY, 0);
			set_val(PS4_LX, 0);
		}
		if (abs(get_val(PS4_RY)) < 10 && abs(get_val(PS4_RX)) < 10) {
			set_val(PS4_RY, 0);
			set_val(PS4_RX, 0);
		}if (Joystick_calibration == FALSE) {
			RX_Axis_Joystick_calibrate = get_val(PS4_RX);
			RY_Axis_Joystick_calibrate = get_val(PS4_RY);
			Joystick_calibration = TRUE;
		}
		X_Last_Value = X_Current_Value;
		Y_Last_Value = Y_Current_Value;
		X_Current_Value = get_lval(PS4_RX)  -RX_Axis_Joystick_calibrate;
		Y_Current_Value = get_lval(PS4_RY)  -RY_Axis_Joystick_calibrate;
if (aim_sens_corrections) {
			ads_grenade_sens = 100- (iin_game_menu_sens);
			ads_fire_sens = 96- (iin_game_menu_sens);
			if (get_val(ADS)) {
				if (get_val(FIRE) && get_val(ADS)) {
					Sens = ads_fire_sens;
				}
				if (!get_val(FIRE) && !get_val(ADS) || get_val(FIRE) && !get_val(ADS)) {
					Sens = 100;
				}
				if (!get_val(FIRE) && get_val(ADS) || get_val(LETHAL) && !get_val(ADS) || get_val(TACTICAL) && !get_val(ADS)) {
					Sens = ads_grenade_sens;
				}
				if (Sens > 100) Sens = 100;
				sensitivity(PS4_RX, NOT_USE, Sens);
				sensitivity(PS4_RY, NOT_USE, Sens);
			}
		}

}
combo c_Aim_Assist_Perfection {
	X_Last_Value = X_Current_Value;
	Y_Last_Value = Y_Current_Value;
	wait(Sampling_Time);
	X_Current_Value = get_lval(PS4_RX)  -RX_Axis_Joystick_calibrate;
	Y_Current_Value = get_lval(PS4_RY)  -RY_Axis_Joystick_calibrate;
	if (Sampling_Done == TRUE) {
		f_Aim_Perfection(X_Last_Value, X_Current_Value, 1, 0, 1, 0);
		f_Aim_Perfection(Y_Last_Value, Y_Current_Value, 1, 0, 0, 1);
	}
	X_Last_Value = X_Current_Value;
	Y_Last_Value = Y_Current_Value;
	wait(Sampling_Time);
	X_Current_Value = get_lval(PS4_RX)  -RX_Axis_Joystick_calibrate;
	Y_Current_Value = get_lval(PS4_RY)  -RX_Axis_Joystick_calibrate;
	if (Sampling_Done == TRUE) {
		f_Aim_Perfection(X_Last_Value, X_Current_Value, 0, 1, 1, 0);
		f_Aim_Perfection(Y_Last_Value, Y_Current_Value, 0, 1, 0, 1);
	}
	Sampling_Done = TRUE;
	wait(Sampling_Time);
}
combo c_Fine_Tune_Aim {
	set_val(PS4_RX, (15-fine_pulse));
	set_val(PS4_LX, (  -15+ fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (15-fine_pulse));
	set_val(PS4_RY, (10-fine_pulse));
	set_val(PS4_LX, (  -5+ fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RY, (10-fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (  -15+ fine_pulse));
	set_val(PS4_RY, (10-fine_pulse));
	set_val(PS4_LX, (5-fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (  -15+ fine_pulse));
	set_val(PS4_LX, (15-fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (  -15+ fine_pulse));
	set_val(PS4_RY, (  -10+ fine_pulse));
	set_val(PS4_LX, (5-fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RY, (  -10+ fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (15-fine_pulse));
	set_val(PS4_RY, (  -10+ fine_pulse));
	set_val(PS4_LX, (  -5+ fine_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	fine_pulse = fine_pulse+ 2;
	if (fine_pulse > 10) {
		fine_pulse = 0;
	}
}

combo c_spiroide_Aim_Assit {
	set_val(PS4_RX, (4+ spiroide_pulse));
	set_val(PS4_LX, (  -15+ spiroide_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RY, (5+ spiroide_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RX, (  -4-spiroide_pulse));
	set_val(PS4_LX, 15-spiroide_pulse);
	wait(Sampling_Time);
	wait(Sampling_Time);
	set_val(PS4_RY, (5+ spiroide_pulse));
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	wait(Sampling_Time);
	spiroide_pulse = spiroide_pulse+ 2;
	if (spiroide_pulse > 10) {
		spiroide_pulse = 0;
	}
}

function f_Aim_Perfection(Last_Value, Current_Value, Boost, Correction, X_AXIS, Y_AXIS) {
	if (abs(Last_Value-Current_Value) < Aim_Perfection_Limit) {
		if (Last_Value < Current_Value) {
			if (Boost) {
				if (X_AXIS) set_val(PS4_RX, (Current_Value+ Aim_Boost));
				if (Y_AXIS) set_val(PS4_RY, (Current_Value+ Aim_Boost));
			}
			else if (Correction) {
				if (X_AXIS) set_val(PS4_RX, (Current_Value-Aim_Correction));
				if (Y_AXIS) set_val(PS4_RY, (Current_Value-Aim_Correction));
			}
		}
		else {
			if (Boost) {
				if (X_AXIS) set_val(PS4_RX, (Current_Value-Aim_Boost));
				if (Y_AXIS) set_val(PS4_RY, (Current_Value-Aim_Boost));
			}
			else if (Correction) {
				if (X_AXIS) set_val(PS4_RX, (Current_Value+ Aim_Correction));
				if (Y_AXIS) set_val(PS4_RY, (Current_Value+ Aim_Correction));
			}
		}
	}
}
