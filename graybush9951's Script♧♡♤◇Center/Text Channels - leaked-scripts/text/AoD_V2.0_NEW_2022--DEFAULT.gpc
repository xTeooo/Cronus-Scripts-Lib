 /*
 +-++-++-+ +-++-++-++-++-++-++-+ +-++-++-++-++-++-+ +-++-++-++-++-++-+
 |A||o||D| |W||a||r||z||o||n||e| 2.0 |Z|E|N| |E|D|I|T|I|O|N|
 +-++-++-+ +-++-++-++-++-++-++-+ +-++-++-++-++-++-+ +-++-++-++-++-++-+
/*
 Please Edit your button config below --- Please contact me if you're unsure how..
 
*/
define AIM_BTN = PS4_L2
define FIRE_BTN = PS4_R2
define PRONE_BTN = PS4_CIRCLE 
define JUMP_BUTTON=PS4_CROSS
define RXX        = PS4_RX;     	
define RYY       = PS4_RY;       
define LX         = PS4_LX;      
define RS         = POLAR_RS;     
define PRX		  = POLAR_RX;   
define R_X = 9;       
define R_Y = 10;        
define AutoPing_DetectionRate = 100;   //How fast Auto ping releases markers
define PING_BUTTON = PS4_UP;


//// no more too edit.

	const string TITLE = "AoD 2.0"; 
	const string NA = ""
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE= "SAVED";
	const string PROFILE_1 = "Primary": 
	const string PROFILE_2 = "Secondary":



	const string HYDRORECOILA = "AoD Recoil*";		 
	const string AOD3245 = "RapidFire*";           
	const string Aod82282 = "AimAdjust*'" 
	const string AOD29111 = "Ultra AiM*'" 
	const string SlidCanc = "SlidCanc'";     
	const string Accuracy = "Burst MOD";
	const string AoD2131 = "Sniper Mode";
	const string Assist2 ="AoDV7AiM";
	const string Assist3 = "Legacy AiM";
	const string Assist4 = "HipFireAim";
    const string AOD324 = "AutoPing'";           
	const string DROPSHOT = "DROPSHOT";
	const string  JUMPSHOT = "JUMPSHOT";
	const string SWAP = "Swap Tr/Bu";
	const string INVERTED = "Inverted Y"; 
	const string AIMX ="AOD AIM";
	const string HTS ="HairTrigg";
	const string  AAM= "AoDXTREME";
	const string HSA= "HeadShot";



int Speed;
	int AOD8;

int Radius; 

	define AOD8221 = 18; // MENU NUMBER


	define AOD82215 = 4
int RY;

define slide_delay 					= 120;
	define AoDAim_AAA      =  20; 


	const string ANTIRECOIL_VERTICAL = "Vertical"; 		
	const string ANTIRECOIL_HORIZONTAL = "Horizontal";		

	const string RATE_OF_FIRE = "RapidSpeed";				




	const string AIMASSIST_SIZE = "AimStrength";				
	const string AIMASSIST_TIME = "Time";				
	const string AOD_SIZE = "Motion";
	const string AOD_LENGTH = "Time";
	
	const string Head_Time="HTime";
	const string Head_Strength="HeadStr";

	
int AODBOOST = 10;
int AODNLE;
	int AOD822152;
	
	define AOD8221525 = 13;
define NO = FALSE;




	const uint8 VALUES[][] = { 		
	{    10,                    0,                  1       },	
{    11,                    0,                  1       }, 	
 {    12,                    0,                  1       }};	

int angle;

	int AOD82215253[3]; 
	int AOD822152534[3];
	int AOD8221525534[3];
	int HTIME[3];
	int ASTRENGTH[3];

		define AODSAAA = TRUE;
	define AODV                =   22;    
	define ADS = PS4_L2


	int AOD822152552341; 
	int AoD99223 = 9; 
	

	int AOD8223152552341;


	define AOD82231525523541 = 2;




	int AOD82231523441[3]; 
	int AOD822315234413[3];  
	int AOD8223152344134[3];
	int AOD82231523344134[3];
	int AODPOLA[3];
	int HeadShotAssist[3];
	int JUMPS[3];
	int AOD282231523344134[3]; 
	int AOD2822315232344134[3];
	int accuracy_on [3];
	int hb_on [3];
	int AoDAssistV2_on[3];
	int AoDAssistV3_on[3];
	int AoDAssistV4_on[3];
	int AI_on[3];
	int HTS_on[3];
	int AAM_on[3];




int AimAssistValues   = 16;           
int delay             = 14;    

	define VM_INTERVAL   = -2;                            


	define AODRSU  = 13 ;        
define AODST   = 20;          
define AODINTS =  1;   
int AOD775588, AOD7755882, AOD77558822, AOD771558822;
define X = XB1_RX;                                    
define Y = XB1_RY;  




define AODADSAC    = TRUE;                     
define AODACF = TRUE; 
int time;         
	//

	define AOD28223152323444134 = 3;  
	

	define AOD282231523234544134 = 6
		

	define CROUCH_BUTTON = PS4_RIGHT;

//PO

define AODPRR =  15;
define AODPII      =   8;
define AODC2       = 360;
define AOD72289822  =   1;
define AOD7228982221         = 327;
define AOD722898222       =   8; 
define AOD72289822211       =  22; 
define AOD722898222113		  = POLAR_RY;     
define AOD7228982221133      = 344;
define AOD72289822211331   =  13;
define AOD722898222113311    =  10;
define AOD7228982221133111           = 100;
define AOD72289282221133111           =  50;
define AOD722892822211331111           =   0;


    int AOD28222342;
    int AOD282223421;
    int AOD2822234321;
    int Pola;
    int Poola;


    


    int AOD28222343213;
    int AOD282223432133;






    define AoD22 = 20;
define Ok = TRUE;
    int cos_angle, sin_angle;

define INVERT_BUTTON            = PS4_R3;

	const uint8 ASCII_NUM[] = 

  	{48,49,50,51,52,53,54,55,56,57};
	

	int i;
	int c,c_val;



data(

    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,

    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
     

	int display_title = TRUE;
	int AOD23382222343121332; 
	int AOD233822222343121332;
	define AoD2 = 1;
    
int AoD9922322 = 3;        
int AoD99223222 = 3;           
	int AOD2338222122343121332;	
	int AOD23382232122343121332;
	int AOD233822321232343121332;
	



	int AOD2338223231232343121332; 
	int AOD23382233231232343121332;
	int AOD233822332321232343121332;




	

	int AOD2233221332;                                                    
	int AOD22332321332;
	int AOD223323211332;
	int AOD2233232311332;
	

	int AOD22233232311332; 

	

	int AOD222334232311332;


	int AOD2223342332311332; 
	int AOD22233423352311332;  
	///////
 int PolarRadius = 15;
 int PolarRBoost = 6;
 int AngleBoost = K;

 define K = TRUE;

 int PolarAngle = 20;

 
init{


	AOD82231523441[0] = get_pvar(SPVAR_1, 0, 1, 0 );         AOD82215253[0]   = get_pvar(SPVAR_6, -99, 99, 0);         
	AOD822315234413[0]  = get_pvar(SPVAR_2, 0, 1, 0 );         AOD822152534[0] = get_pvar(SPVAR_9, -99, 99, 0);
	AOD8223152344134[0]  = get_pvar(SPVAR_3, 0, 1, 0 );         AOD8221525534[0]          = get_pvar(SPVAR_10,  0, 25, 0);
	AOD82231523344134[0]  = get_pvar(SPVAR_4, 0, 1, 0 );
	AODPOLA[0] = get_pvar ( SPVAR_47, 0,1,0);
	JUMPS[0] = get_pvar ( SPVAR_49, 0,1,0);
	AOD282231523344134[0] = get_pvar(SPVAR_5, 0, 1, 0 ); 
	AOD2822315232344134[0]  = get_pvar(SPVAR_31, 0, 1, 0);
	accuracy_on[0] =get_pvar(SPVAR_38, 0,1, 0);
	hb_on[0] = get_pvar(SPVAR_42, 0,1,0);
	AoDAssistV2_on[0] = get_pvar(SPVAR_43, 0,1,0);
	AoDAssistV3_on[0] = get_pvar(SPVAR_44, 0,1,0);
	AoDAssistV4_on[0] = get_pvar (SPVAR_45,0,1,0);
	AI_on[0] = get_pvar(SPVAR_50,0,1,0);
		HTS_on[0] = get_pvar(SPVAR_51,0,1,0);
		AAM_on[0] = get_pvar(SPVAR_52,0,1,0);
		HeadShotAssist[0]=get_pvar(SPVAR_22,0,1,0);

	AOD82231523441[1] = get_pvar(SPVAR_11, 0, 1, 0 );        AOD82215253[1]   = get_pvar(SPVAR_16, -99, 99, 0);         
	AOD822315234413[1]  = get_pvar(SPVAR_12, 0, 1, 0 );        AOD822152534[1] = get_pvar(SPVAR_19, -99, 99, 0);
	AOD8223152344134[1]  = get_pvar(SPVAR_13, 0, 1, 0 );        AOD8221525534[1]          = get_pvar(SPVAR_20,   0, 25, 0);
	AOD82231523344134[1]  = get_pvar(SPVAR_14, 0, 1, 0 );   
	AODPOLA[1] = get_pvar(SPVAR_55,0,1,0);
	JUMPS[1] = get_pvar ( SPVAR_62, 0,1,0);
	AOD282231523344134[1] = get_pvar(SPVAR_15, 0, 1, 0 );
	 AOD2822315232344134[1]   = get_pvar(SPVAR_59, 0, 1, 0);
	 	accuracy_on[1] =get_pvar(SPVAR_60, 0,1, 0);
		hb_on[1] = get_pvar(SPVAR_61,0,1,0);

		AoDAssistV2_on[1]=get_pvar(SPVAR_64,0,1,0);
		AoDAssistV3_on[1]=get_pvar(SPVAR_57,0,1,0);
			AoDAssistV4_on[1] = get_pvar (SPVAR_58,0,1,0);
			AI_on[1] = get_pvar (SPVAR_63,0,1,0);
		HTS_on[1] = get_pvar(SPVAR_27,0,1,0);
		AAM_on[1] = get_pvar(SPVAR_24,0,1,0);
					HeadShotAssist[1] = get_pvar  (SPVAR_23,0, 1,0);

   																AOD2822234321    = get_pvar(SPVAR_34, 1, 1,1); 
    AOD28222343213      = get_pvar(SPVAR_32, 0, 1, 0);				
    AOD282223432133  = get_pvar(SPVAR_33, 0, 1, 0);					AOD28222342    = get_pvar(SPVAR_36, 1, 50 , 20 ); 
    															AOD282223421    = get_pvar(SPVAR_37, 1, 999, 40 ); 
																Pola = get_pvar(SPVAR_53, 1, 99,	20);
																Poola = get_pvar(SPVAR_54, 1, 99,	20);
																ASTRENGTH    = get_pvar(SPVAR_25, 1, 99, 20);
																HTIME    = get_pvar(SPVAR_25, 1, 99, 29);
}

const int8  Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};

main {

	set_val(TRACE_1, AOD8); 
	set_val(TRACE_2, AOD822152); 
	set_val(TRACE_3, AOD822152552341);
	set_val(TRACE_4, AOD22233232311332);
	


    if(get_controller() != PIO_PS4) 
    {
        if(get_console() == PIO_PS4) 
        {
            swap(PS4_SHARE,PS4_TOUCH); 
        
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) 
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
        }
	}



    if(display_title)
    {
    	cls_oled(0);	
    	AOD22233232311332 = 0;
    	
    	if(AOD233822321232343121332)
    	{
    		print(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);

		}
    	else
    	{
    		print(center_x(sizeof(TITLE) - 1, OLED_FONT_SMALL_WIDTH),13,OLED_FONT_SMALL,OLED_WHITE,TITLE[0]);
    		print(center_x(sizeof(NA) - 1, OLED_FONT_SMALL_WIDTH),10,OLED_FONT_SMALL,OLED_WHITE,NA[0]);
    	

    		if(AOD822152552341 == 0)
    			print(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_MEDIUM_WIDTH),45,OLED_FONT_MEDIUM,OLED_WHITE,PROFILE_1[0]); 
    		if(AOD822152552341 == 1)
    			print(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_MEDIUM_WIDTH),45,OLED_FONT_MEDIUM,OLED_WHITE,PROFILE_2[0]);
    	
    		AOD233822222343121332 = TRUE;	
    		display_title = FALSE;
    	}
    }


    if(AOD233822222343121332 && !AOD2338222122343121332 && !AOD233822321232343121332)
    {
    	AOD22233232311332 += get_rtime();
    	if(AOD22233232311332 >= 5000)
    	{
    		cls_oled(0);
    		AOD22233232311332 = 0;
    		AOD233822222343121332 = FALSE;
    	}
    }


	if(get_val(PS4_L2))
	{

		if(event_release(PS4_SHARE))
		{
			AOD233822321232343121332 = !AOD233822321232343121332;
			
			if(AOD233822321232343121332)        
				combo_run(RUMBLE_OFF);	
			else
				combo_run(RUMBLE_ON);	
			

			display_title = TRUE;
		}



		if(event_release(PS4_OPTIONS) && !AOD233822321232343121332)
		{
			AOD2338222122343121332 = !AOD2338222122343121332;
			
			if(!AOD2338222122343121332)
			{
				AOD23382232122343121332 = FALSE; 		


				combo_run(RUMBLE_OFF);  
				display_title = TRUE;   
			}
			
			if(AOD2338222122343121332)
			{
				AOD8 = 0;        
				combo_run(RUMBLE_ON);	
				AOD23382222343121332 = TRUE;		
			}
		}
		set_val(PS4_SHARE, 0);		   
		set_val(PS4_OPTIONS, 0);		
	} 


if(!AOD233822321232343121332)
{


	if(AOD2338222122343121332)
	{
           

		if(AOD8 <= AOD82215)	 
		{
			if(event_press(PS4_CROSS) && !AOD23382232122343121332) 
			{
				AOD822152 = AOD8221525 + 1; 
				AOD23382232122343121332 = TRUE;
				combo_run(RUMBLE_ON);
				AOD23382222343121332 = TRUE;
			}
			
			if(event_press(PS4_CIRCLE) && AOD23382232122343121332) 
			{
				AOD23382232122343121332 = FALSE;
				combo_run(RUMBLE_OFF);
				AOD23382222343121332 = TRUE;
			}
		}

       
		if(AOD23382232122343121332)
		{
			if(get_val(PS4_L2)) 
			{

			

				AOD82215253[AOD822152552341]   = edit_val( 0 , AOD82215253[AOD822152552341]  ,  0 , 99 , 1 , 10   ); 
				AOD822152534[AOD822152552341] = edit_val( 1 , AOD822152534[AOD822152552341],  99, 99 , 1 , 10   );
				AOD8221525534[AOD822152552341]          = edit_val( 2 , AOD8221525534[AOD822152552341]         ,  0 , 25 , 1 , 10   ); 
				
				

			



				AOD28222342    = edit_val( 3 , AOD28222342    , 0 , 50   , 1  , 10   );
				AOD282223421    = edit_val( 4 , AOD282223421    , 0 , 990  , 1  , 10   ); 
				Pola = edit_val( 5, Pola , 0, 99, 1, 10);
				Poola = edit_val(6, Poola,0, 99, 1, 10);
				HTIME    = edit_val(7, HTIME,0,2000,1,10);
				ASTRENGTH = edit_val(8,ASTRENGTH,0,99,1,10);
			}

    
			else 
			{

				if(event_press(PS4_RIGHT))
				{
					AOD822152 += 1;
					AOD23382222343121332 = TRUE; 
				}
				if(event_press(PS4_LEFT))
				{
					AOD822152 -= 1;
					AOD23382222343121332 = TRUE;
				}
				


				if(AOD8 == 0) vals_available( 0 , 1  );		
				if(AOD8 == 1) vals_available( 2 , 2  );            				
				if(AOD8 == 2) vals_available( 3 , 4  );			
				if(AOD8 == 3) vals_available( 5 , 6  );				
				if(AOD8 == 4) vals_available( 7 , 8);	
				
			} 
		} 


		else 
		{

			if(event_press(PS4_RIGHT))
			{
				AOD8 += 1;
				AOD23382222343121332 = TRUE;
			}
			if(event_press(PS4_LEFT))
			{
				AOD8 -= 1;
				AOD23382222343121332 = TRUE;
			}
			

			if(AOD8 > AOD8221)  
				AOD8 = 0;
			if(AOD8 < 0)
				AOD8 = AOD8221;
				

		if (get_val(PS4_OPTIONS) && event_press(PS4_TRIANGLE))	
			{
				AOD822152552341 += 1;
				AOD23382222343121332 = TRUE;
			}

			if(AOD822152552341 > (AOD28223152323444134 - 1))
				AOD822152552341 = 0;
			
	

			AOD82231523441[AOD822152552341] = toggle( 0, AOD82231523441[AOD822152552341] );
			AOD822315234413[AOD822152552341]  = toggle( 1, AOD822315234413[AOD822152552341]  );
			AOD8223152344134[AOD822152552341]  = toggle( 11, AOD8223152344134[AOD822152552341]  );
			AOD82231523344134[AOD822152552341]  = toggle( 2, AOD82231523344134[AOD822152552341]  );
			AODPOLA[AOD822152552341] = toggle(3,AODPOLA[AOD822152552341]);
			JUMPS[AOD822152552341] = toggle(12,JUMPS[AOD822152552341]);
			AOD282231523344134[AOD822152552341] = toggle( 7, AOD282231523344134[AOD822152552341] );
			AOD2822315232344134[AOD822152552341] = toggle( 8, AOD2822315232344134[AOD822152552341]  );
			accuracy_on[AOD822152552341] = toggle (9, accuracy_on[AOD822152552341] );
			hb_on[AOD822152552341] = toggle (10, hb_on[AOD822152552341]);
			AoDAssistV2_on[AOD822152552341] = toggle (18,AoDAssistV2_on[AOD822152552341]);
			AoDAssistV3_on[AOD822152552341] = toggle (5,AoDAssistV3_on[AOD822152552341]);
			AoDAssistV4_on[AOD822152552341] = toggle (6,AoDAssistV4_on[AOD822152552341]);
			AI_on[AOD822152552341]= toggle (15,AI_on[AOD822152552341]);
			HTS_on[AOD822152552341]= toggle (16,HTS_on[AOD822152552341]);
			AAM_on[AOD822152552341]= toggle (17,AAM_on[AOD822152552341]);
					    HeadShotAssist       [AOD822152552341]= toggle (4, HeadShotAssist       [AOD822152552341] );
			

    		


			AOD28222343213     = toggle( 13 , AOD28222343213     );
			AOD282223432133 = toggle( 14 , AOD282223432133 );
		} 


		if(event_press(PS4_PS))
			save ();
			

		block_all_inputs();
		
	} 


							 
	if(!AOD2338222122343121332)
	{
	
		if(AOD28222343213) 
		{
			swap(PS4_R1, PS4_R2);
			swap(PS4_L1, PS4_L2);
		}
       
	

		AOD822315234413[AOD822152552341]  = speed_toggle( PS4_LEFT, PS4_R2, AOD822315234413[AOD822152552341] , 1 );//Rapid
		JUMPS[AOD822152552341]  = speed_toggle( PS4_LEFT, PS4_CROSS , JUMPS[AOD822152552341] , 12 ); //JumPShot
		hb_on[AOD822152552341]  = speed_toggle( PS4_LEFT, PS4_R3, hb_on[AOD822152552341] , 10 );
		AOD2822315232344134[AOD822152552341] = speed_toggle( PS4_LEFT, PS4_SQUARE , AOD2822315232344134[AOD822152552341], 8 );
		AOD282231523344134[AOD822152552341] = speed_toggle( PS4_LEFT, PS4_CIRCLE, AOD282231523344134[AOD822152552341], 7  );




    	if(AOD222334232311332) 
        	AOD222334232311332 -= get_rtime();


   	 	deadzone(PS4_L2,PS4_R2,99,99);
    	


		if(AOD82231523344134[AOD822152552341] == 1)
		{
			if(get_val(PS4_L2)  && !get_val(PS4_R2)) 
				combo_run(AOD32455);
			else 
				combo_stop(AOD32455); 
		}


  

		if(AOD282231523344134[AOD822152552341] == 1)
		if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60)) {
 

		if(AOD282231523344134) {
if(event_release (PRONE_BTN)){ combo_run(AOD3245522) }
 }}
   		if(AAM_on[AOD822152552341] ==1)
	if (AODSAAA) {
   if(get_val(AIM_BTN)) combo_run(STICKY_AIM);
        else combo_stop(STICKY_AIM);}
      
 	
	if(HeadShotAssist[AOD822152552341] == 1) {
				RY = ASTRENGTH * -1;
				if(get_ival(FIRE_BTN) && get_ptime(FIRE_BTN) < HTIME){
					offset(PS4_RY,RY);	
				}
			}
			
			
	

if(JUMPS[AOD822152552341] ==1)
    if(get_val(FIRE_BTN) > 99){
    combo_run(JUMPSHOT);
    }
        if(HTS_on[AOD822152552341] == 1)
        if (get_val(AIM_BTN)){
set_val(AIM_BTN, 100);
}
if (get_val(FIRE_BTN)){
set_val(FIRE_BTN, 100);
}
   

        
    if(AI_on[AOD822152552341] == 1)
	if (get_val (FIRE_BTN)) {
                Radius = PolarRadius + PolarRBoost;
            }
                else {
                    Radius = PolarRadius;
                }
            
                    if (AngleBoost==K && g(FIRE_BTN)) {
                        AODNLE = PolarAngle + AODBOOST;
                    }
                        else {
                            AODNLE = PolarAngle;
                        }
    if(AI_on[AOD822152552341] == 1)
        if (g(AIM_BTN) && abs(get_ival(R_X)) <= Radius && abs(g(R_Y)) <= Radius) {         
            
                set_polar(POLAR_RS,Speed = (Speed + AODNLE) % 360,(abs(g(POLAR_RX)) + abs(g(POLAR_RY))) / 4 + Radius * 328);
            }
        


		if(AOD2822315232344134 [AOD822152552341] == 1) 
if /*(AOD2822315232344134 && */(get_val(FIRE_BTN)) {
	set_val(PRONE_BTN,100);
	}
	else if (AOD2822315232344134 && event_release(FIRE_BTN)) {	
	combo_run(AOD324552);
		}

		if(AOD282223432133) 
			AOD233822332321232343121332 = -1;
		else
			AOD233822332321232343121332 = 1;
	



    	if/*(event_press(PS4_TRIANGLE) ||*/(get_val(PS4_OPTIONS) && event_press(PS4_TRIANGLE))
    	{
    	    AOD2223342332311332=!AOD2223342332311332; 
    	    AOD22233423352311332 = FALSE;
        
    	    if(AOD222334232311332) 
    	    { 
    	     	AOD22233423352311332 = FALSE ; 
    	    	AOD2223342332311332 = !AOD2223342332311332;
    	    }
			else
            	AOD222334232311332 = 200;
    
    		if(AOD2338222122343121332)
				AOD23382222343121332 = TRUE;
			else
				display_title = TRUE;
    	}
		if(get_val(PS4_L3))
			set_val(PS4_TRIANGLE, 0);
		

    	if(AOD22233423352311332)
    		AOD822152552341 = 2;
    	
    	else
    	{    

    		if(AOD2223342332311332)
    			AOD822152552341 = 1;
    		

    		else	
    			AOD822152552341 = 0;
		}

	
		if(accuracy_on[AOD822152552341] == 1)
	  /*if (TapShoT) {  */    if (get_val(PS4_L2) && get_val(PS4_R1)) {        combo_run(cTapFire);        set_val(PS4_R1, 0);      } else {        combo_stop(cTapFire);      }
		
		if(hb_on[AOD822152552341] == 1)
{
			if(get_val(PS4_L2))
				set_val(PS4_L3,100);
			          
			if(get_val(PS4_LY) <-90 && get_val(PS4_L2) && get_ptime(PS4_L2) > 200 && combo_running(HOLD_BREATH))
				combo_stop(HOLD_BREATH);       
			        
			if(event_press(PS4_L2)) 
				combo_run(HOLD_BREATH);
			
			if(get_val(PS4_L2) && get_lval(PS4_L3)) 
				set_val(PS4_L3,0);
		}
		
		if (AoDAssistV2_on [AOD822152552341] == 1)
		if(get_val(PS4_L2)){   
   	combo_run(AoDTracker);}  
    if(get_val(PS4_RX)<-38  
     ||get_val(PS4_RX)> 37){  
    combo_stop(AoDTracker);}

if (AoDAssistV3_on[AOD822152552341]== 1)

if (get_val(AIM_BTN) >  98){ combo_run(cAimAssist);}
}
if (abs(get_val(9))  >  19 || abs(get_val(10))  >  19){ 
combo_stop(cAimAssist);}
				
if (AoDAssistV4_on[AOD822152552341]== 1)
					if(get_val(PS4_R2)){
						if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) <= AoD99223 + 5) {
    						combo_run(fire_under);
    					}
    					if(isqrt(abs(get_val(PS4_RX)) * abs(get_val(PS4_RX)) + abs(get_val(PS4_RY)) * abs(get_val(PS4_RY))) >= AoD99223 + 5) {
    						combo_run(fire_over); }  }
				

	if(AOD82231523441[AOD822152552341] == 1)
	{
		if/*if(AOD82231523441[AOD822152552341] != 1 &&*/ (get_val(PS4_L2) && get_val(PS4_R2) || AOD82231523441[AOD822152552341] == 1 && get_val(PS4_R2) && get_ptime(PS4_R2) <= AOD2233221332)
			combo_run(HYDRORECOILA);
		else
			combo_stop(HYDRORECOILA);
	}



	if(AOD822315234413[AOD822152552341] == 1)
	{

    	AOD2233221332 = 500 / (VALUES[AOD822152552341][4] + AOD8221525534[AOD822152552341]); 
   		AOD22332321332 = AOD2233221332 - 20;
    	if(AOD22332321332 < 0) AOD22332321332 = 0;
    

    	if(get_val(PS4_R2))
    		combo_run(AOD3245);
    	else
    		combo_stop(AOD3245);
    		
    	AOD223323211332 = 150;
    	AOD2233232311332 = 300;
    	combo_run(BLINK);
	}



	if(AOD8223152344134[AOD822152552341] == 1)
	{

		//AOD2233221332 = AOD2822234321;
		//AOD22332321332 = AOD2822234;
			

    	if(get_val(PS4_L2) && get_val(PS4_R2)){
    		combo_run(AOD324);
}
		AOD223323211332 = 200;
    	AOD2233232311332 = 1000;
    	combo_run(BLINK);
	}  

	
	if(AOD23382222343121332) 
	{

		cls_oled(0);
    	AOD22233232311332 = 0;
		
		if(AOD23382232122343121332)
		{
	
    		

			display_edit( 0 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH)   , ANTIRECOIL_VERTICAL[0]   , AOD82215253[AOD822152552341]   );
			display_edit( 1 , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , AOD822152534[AOD822152552341] );
			display_edit( 2 , center_x(sizeof(RATE_OF_FIRE) - 1 , OLED_FONT_MEDIUM_WIDTH)         , RATE_OF_FIRE[0]          , AOD8221525534[AOD822152552341]          );
			

			
			display_edit( 3 , center_x(sizeof(AIMASSIST_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH)    , AIMASSIST_SIZE[0]    , AOD28222342    );
			display_edit( 4 , center_x(sizeof(AIMASSIST_TIME) - 1, OLED_FONT_MEDIUM_WIDTH)    , AIMASSIST_TIME[0]    , AOD282223421    );
		    display_edit( 5 , center_x(sizeof(AOD_SIZE) - 1, OLED_FONT_MEDIUM_WIDTH)    , AOD_SIZE[0]    , Pola    );
			display_edit( 6 , center_x(sizeof(AOD_LENGTH) - 1, OLED_FONT_MEDIUM_WIDTH)    , AOD_LENGTH[0]    , Poola    );
			display_edit(7, center_x(sizeof(Head_Time) - 1, OLED_FONT_MEDIUM_WIDTH)    , Head_Time[0]    , HTIME [AOD822152552341])
			display_edit(8, center_x(sizeof(Head_Strength) - 1, OLED_FONT_MEDIUM_WIDTH)    , Head_Strength[0]    , ASTRENGTH          );
			

		}
		else
		{
	  
    		

			display_mod( 0 ,  center_x(sizeof(HYDRORECOILA) - 1, OLED_FONT_MEDIUM_WIDTH) , HYDRORECOILA[0] , AOD82231523441[AOD822152552341]);
			display_mod( 1 ,  center_x(sizeof(AOD3245) - 1, OLED_FONT_MEDIUM_WIDTH)  , AOD3245[0]  , AOD822315234413[AOD822152552341]);
			display_mod( 2 ,  center_x(sizeof(Aod82282) - 1, OLED_FONT_MEDIUM_WIDTH)  , Aod82282[0]  , AOD82231523344134[AOD822152552341]);
			display_mod( 3 ,  center_x(sizeof(AOD29111) - 1, OLED_FONT_MEDIUM_WIDTH)  , AOD29111[0]  , AODPOLA[AOD822152552341]);
			display_mod(  7,  center_x(sizeof(SlidCanc) - 1, OLED_FONT_MEDIUM_WIDTH), SlidCanc[0], AOD282231523344134[AOD822152552341]);
			display_mod(  7,  center_x(sizeof(SlidCanc) - 1, OLED_FONT_MEDIUM_WIDTH), SlidCanc[0], AOD282231523344134[AOD822152552341]);
			display_mod( 8 ,  center_x(sizeof(DROPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH), DROPSHOT[0], AOD2822315232344134[AOD822152552341]);
			display_mod( 12 ,  center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH), JUMPSHOT[0], JUMPS[AOD822152552341]);
			display_mod( 9 , center_x(sizeof(Accuracy) - 1, OLED_FONT_MEDIUM_WIDTH) , Accuracy[0], accuracy_on);
			display_mod( 10 , center_x (sizeof(AoD2131) - 1, OLED_FONT_MEDIUM_WIDTH), AoD2131[0], hb_on);
			display_mod(18, center_x (sizeof(Assist2) - 1, OLED_FONT_MEDIUM_WIDTH), Assist2[0],AoDAssistV2_on);
			display_mod( 5, center_x (sizeof(Assist3) - 1, OLED_FONT_MEDIUM_WIDTH), Assist3[0],AoDAssistV3_on);
			display_mod( 6, center_x (sizeof(Assist4) - 1, OLED_FONT_MEDIUM_WIDTH), Assist4[0],AoDAssistV4_on);
			display_mod( 11,  center_x(sizeof(AOD324) - 1, OLED_FONT_MEDIUM_WIDTH)  , AOD324[0]  , AOD8223152344134[AOD822152552341]);
			display_mod( 15,  center_x(sizeof(AIMX) - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMX[0]  , AI_on);
			display_mod( 16, center_x(sizeof(HTS) - 1, OLED_FONT_MEDIUM_WIDTH) ,HTS[0] , HTS_on);
		    display_mod( 17, center_x(sizeof(AAM) - 1, OLED_FONT_MEDIUM_WIDTH) ,AAM[0] , AAM_on);
		    display_mod( 4, center_x(sizeof(HSA) - 1, OLED_FONT_MEDIUM_WIDTH) ,HSA[0] , HeadShotAssist[AOD822152552341]);

			display_mod(  13,  center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH)    , SWAP[0]    , AOD28222343213);
			display_mod(  14,  center_x(sizeof(INVERTED) - 1, OLED_FONT_MEDIUM_WIDTH), INVERTED[0], AOD282223432133);
		}
		

		if(AOD8 < AOD282231523234544134)  
		{
			if(AOD822152552341 == 0) 

    			line_oled(0, 26, 39, 26, 5, 1); 
    		else if(AOD822152552341 == 1)

    			line_oled(44, 26, 83, 26, 5, 1); 
    		else if(AOD822152552341 == 2)

    			line_oled(88, 26, 127, 26, 5, 1); 
		}
		else 
    	{
    		line_oled(0, 26, 39, 26, 5, 1);
    		line_oled(44, 26, 83, 26, 5, 1);
    		line_oled(88, 26, 127, 26, 5, 1);
    	}
    	
		AOD233822222343121332 = TRUE;
        AOD23382222343121332 = FALSE;
    } 
    



	led(AOD822152552341);

}
		if(AODPOLA[AOD822152552341] ==1)
      vm_tctrl(VM_INTERVAL); 
                         
      AOD775588 = get_val(X);   
      AOD7755882 = get_val(Y);           
      AOD77558822 = isqrt(pow(AOD775588, 2) + pow(AOD7755882, 2));  
      AOD771558822 = (AOD77558822 < 100);                      
                                                                  
      if(!(time++ % AODINTS)){                                  
	         angle += AODST;                                                 
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * Pola) / 100;                         
      sin_angle = (sin_angle * Pola) / 100;       
      

		if(AODPOLA[AOD822152552341] ==1)
      if((AODADSAC && get_val(AIM_BTN)) || (AODACF && get_val(FIRE_BTN))){ 
           if(AOD77558822 <= Pola){                                                      
                sin_angle -= AOD7755882;                                                              
                cos_angle -= AOD775588;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(AOD7755882) + AOD77558822) / 10) * 10) / 200) * AOD771558822; 
                cos_angle = (cos_angle * (200 - ((abs(AOD775588) + AOD77558822) / 10) * 10) / 200) * AOD771558822; 
           }                                                  
           set_val(X, calculate(AOD775588 + cos_angle, -100, 100));
           set_val(Y, calculate(AOD7755882 + sin_angle, -100, 100));
           
                 }
      else
       vm_tctrl(0); 
  }
 


combo RUMBLE_ON {						
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}



combo RUMBLE_OFF {						
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}



combo SAVE { 
	cls_oled(0);						
	print(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]);
	wait(10)
	call(RUMBLE_ON);											
	wait(150);
	call(RUMBLE_ON);				
	wait(1000);
	AOD23382222343121332 = TRUE;				
}





 
combo HYDRORECOILA {

    AOD2338223231232343121332 = get_val(PS4_RY) + (VALUES[AOD822152552341][0] + AOD82215253[AOD822152552341]);  
    if(AOD2338223231232343121332 > 100) AOD2338223231232343121332 = 100;
    if(abs(get_val(PS4_RY)) < abs(VALUES[AOD822152552341][0] + AOD82215253[AOD822152552341]) + 5)
    set_val(PS4_RY, (AOD2338223231232343121332 * AOD233822332321232343121332));

    AOD23382233231232343121332 = get_val(PS4_RX) + (VALUES[AOD822152552341][1] + AOD822152534[AOD822152552341]);
    if(AOD23382233231232343121332 > 100) AOD23382233231232343121332 = 100;
    if(abs(get_val(PS4_RX)) < abs(VALUES[AOD822152552341][1] + AOD822152534[AOD822152552341]) + 5)
    set_val(PS4_RX, AOD23382233231232343121332);
}
 


combo AOD324 { 
  set_val(PING_BUTTON,100);
	wait(AutoPing_DetectionRate);
	set_val(PING_BUTTON,0);
	wait(AutoPing_DetectionRate);
	}



combo AOD3245 { 
   // wait(AOD2233221332);
    set_val(PS4_R2, 0);
    wait(AOD22332321332);
    }
combo cTapFire {  set_val(PS4_L2, 100);  set_val(PS4_R2, 100);  wait(100);  set_val(PS4_L2, 0);  wait(250);}


combo AOD32455 {
    set_val(PS4_RY,aa(PS4_RY, AOD28222342));
    wait(AOD282223421);
    set_val(PS4_RX,aa(PS4_RX, AOD28222342));
    set_val(PS4_LX,aa(PS4_LX, AOD28222342));
    wait(AOD282223421);
    set_val(PS4_RY,aa(PS4_RY,inv(AOD28222342))); 
    wait(AOD282223421);
    set_val(PS4_RX,aa(PS4_RX,inv(AOD28222342)));
    set_val(PS4_LX,aa(PS4_LX,inv(AOD28222342)));
    wait(AOD282223421);
}


	combo AOD324552 {
    wait(50);
	set_val(PRONE_BTN, 100);
	
	}
	combo fire_under {
offset(PS4_RX,AoD99223 + AoD9922322);
wait(30);
offset(PS4_RX,(AoD99223 + AoD9922322) * -1);
wait(30);
}
combo fire_over {
offset(PS4_RX,AoD99223 + AoD99223222);
wait(40);
offset(PS4_RX,(AoD99223 + AoD99223222) * -1);
wait(40);
}

 combo JUMPSHOT {
    set_val(JUMP_BUTTON, 100);
    wait(100); 
    wait(300);   
    }
    
    
combo AOD3245522 { 
set_val(PRONE_BTN, 100);

	wait(slide_delay);

	set_val(PRONE_BTN, 0);

	wait(60);

	set_val(PRONE_BTN, 100);
		set_val(PS4_L2, 100);

	wait(50);

	set_val(PRONE_BTN, 100);
	set_val(JUMP_BUTTON, 100);
		set_val(PS4_L2, 100);
	wait(60);

	set_val(PRONE_BTN, 0);
	set_val(JUMP_BUTTON, 100);

	wait(10);

	set_val(JUMP_BUTTON, 0);
		set_val(PS4_L2, 100);


}
        combo STICKY_AIM {
	set_val(PS4_RY,xy_val(PS4_RY, AODV));
	wait(20);
	set_val(PS4_RX,xy_val(PS4_RX, AODV));
	set_val(PS4_LX,xy_val(PS4_LX, AODV));
	wait(20);
	set_val(PS4_RY,xy_val(PS4_RY, AODV * -1));
	wait(20);
	set_val(PS4_RX,xy_val(PS4_RX, AODV * -1));
	set_val(PS4_LX,xy_val(PS4_LX, AODV * -1));
	wait(20);
}
combo cAimAssist {                                                                        
set_val(R_X, AimAssistValues);                                                            
wait(delay);                                                                                                                                                        
set_val(R_X, AimAssistValues*(-1));                                                      
wait(delay);                                                                             
} 
 combo HOLD_BREATH 
 {
	set_val(PS4_L3,0);
	wait(60);
	set_val(PS4_L3,100);
	wait(110);
	set_val(PS4_L3,0);
	wait(110);
}
combo AoDTracker {		 	
set_val(PS4_RY, AoDAim_AAA);
wait(10);   
set_val(PS4_RY, -18);  
wait(10);   
set_val(PS4_RX, 18);   
wait(10); 
set_val(PS4_RX, -18); 
wait(10); 
set_val(PS4_RY, 18); 
wait(10);
set_val(PS4_RY, -18); 
wait(10); 
set_val(PS4_RX, 18); 
wait(10); 
set_val(PS4_RX, -18); 
wait(10);
} 
combo BLINK {
	led(AOD822152552341);
    wait(AOD223323211332);
    led(7);
    wait(AOD2233232311332);
    }

 




function vals_available(f_min, f_max) { 

	if(AOD822152 < f_min)
		AOD822152 = f_max;
	if(AOD822152 > f_max)
		AOD822152 = f_min;
		

	AOD8223152552341 = AOD822152;	
}






function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  

	if(AOD822152 == f_idx)
	{

    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); 
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); 

   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); 
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); 


	}

	if(AOD8221525534[AOD822152552341] < 0)
		AOD8221525534[AOD822152552341] = 0;



	return f_val;
}



function speed_toggle(f_hold, f_press, f_val, f_string) {  
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == 300) 
		{
			AOD8 = f_string;
			
			if(f_val == 0)
			{
				if(f_string == 1) 
					AOD8223152344134[AOD822152552341] = 0; 
				else if(f_string == 2) 
					AOD822315234413[AOD822152552341] = 0;
					
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else
			{
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			AOD23382222343121332 = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}    


function toggle(f_idx, f_val) { 
	
	if(event_press(PS4_UP))
	{
		if(AOD8 == f_idx)
		{
			if(f_idx == 1) 
				AOD8223152344134[AOD822152552341] = 0;
			else if(f_idx == 2)  
				AOD822315234413[AOD822152552341] = 0; 
				
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		
		AOD23382222343121332 = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(AOD8 == f_idx)
		{
			f_val = 0;
			combo_run(RUMBLE_OFF);
		}		
		AOD23382222343121332 = TRUE;
	}
	return f_val;
}


function display_edit(f_idx, f_string, f_print, f_val) { 
    	if(AOD822152 == f_idx)
    	{

    		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    	

    		if(f_idx <= AOD82231525523541) 
    			number_to_string(VALUES[AOD822152552341][AOD8223152552341] + f_val, find_digits(VALUES[AOD822152552341][AOD8223152552341] + f_val));
    	

    		else 
    			number_to_string(f_val, find_digits(f_val));
    	}
}



function display_mod(f_idx, f_string, f_print, f_toggle) { 
    	if(AOD8 == f_idx)
    	{

    		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        	

    		if(f_toggle == 1)
    			print(center_x(sizeof(ON) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,ON[0]);
    		else
    			print(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);
    	}
}



function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
        

		if(AOD822152 > AOD82231525523541)
		{

        	if(f_val < inv(f_rng_min)) 
        		f_val = inv(f_rng_min); 

       		if(f_val > f_rng_max) 
        		f_val = f_rng_max;
		}
		

		else
		{

        if((f_val + VALUES[AOD822152552341][AOD8223152552341]) < inv(f_rng_min)) 
        	f_val = inv(f_rng_min + VALUES[AOD822152552341][AOD8223152552341]); 

        if((f_val + VALUES[AOD822152552341][AOD8223152552341]) > f_rng_max) 
        	f_val = f_rng_max - VALUES[AOD822152552341][AOD8223152552341]; 
        }
        AOD23382222343121332 = TRUE;
    }
    return f_val; 
} 


function aa(f_axis,f_val) { 

    if(abs(get_val(f_axis)) < AOD28222342 + 1) 
        return f_val;
        
    return get_val(f_axis); 
}

function clakm2(v, lo, hi) 
{
    if(v < lo) return lo;
    if(v > hi) return hi;
    return v;
}
function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < (AODV + 1))  
return f_val;    
return get_val(f_axis);
}

function number_to_string(f_val,f_digits) {

    i = 1;  c_val = 10000;
    
	if(f_val < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44); 
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  

function g(id){return get_ival(id);}

function find_digits(f_num) {


    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     



function center_x(f_chars,f_font) {


    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 



function center_y(f_size) {



    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
function offset(int axis, int offset_val) {
  set_val(axis, clakm2(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return 
}


function press_hold(f_btn) { 


	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}



function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}







function save () {
	combo_run(SAVE);

	set_pvar(SPVAR_1,AOD82231523441[0]);         set_pvar(SPVAR_6 ,AOD82215253[0]     );         
	set_pvar(SPVAR_2,AOD822315234413[0]);         set_pvar(SPVAR_9 ,AOD822152534[0]);
	set_pvar(SPVAR_3,AOD8223152344134[0] );         set_pvar(SPVAR_10,AOD8221525534[0]         );
	set_pvar(SPVAR_4,AOD82231523344134[0] );         
	set_pvar(SPVAR_5,AOD282231523344134[0]); 
	set_pvar(SPVAR_31,AOD2822315232344134[0]);
	set_pvar(SPVAR_38,accuracy_on[0]);
	set_pvar(SPVAR_42,hb_on[0]);
	set_pvar(SPVAR_43,AoDAssistV2_on[0]);
			set_pvar(SPVAR_44,AoDAssistV3_on[0]);
							set_pvar(SPVAR_22,HeadShotAssist);
				set_pvar(SPVAR_45,AoDAssistV4_on[0]);
set_pvar(SPVAR_47,AODPOLA[0]);
set_pvar(SPVAR_50,AI_on[0]);
set_pvar(SPVAR_51,HTS_on[0]);
set_pvar(SPVAR_52,AAM_on[0]);
//set_pvar(SPVAR_53,Pola[0]);
//set_pvar(SPVAR_54,Poola[0]);
														set_pvar(SPVAR_49,JUMPS[0]);						

	set_pvar(SPVAR_11,AOD82231523441[1]);         set_pvar(SPVAR_16,AOD82215253[1]     );       
	set_pvar(SPVAR_12,AOD822315234413[1]);         set_pvar(SPVAR_19,AOD822152534[1]);     
	set_pvar(SPVAR_13,AOD8223152344134[1]);         set_pvar(SPVAR_20,AOD8221525534[1]         );     
	set_pvar(SPVAR_14,AOD82231523344134[1]);         
	set_pvar(SPVAR_15,AOD282231523344134[1]);
	set_pvar(SPVAR_59,AOD2822315232344134[1]);
	set_pvar(SPVAR_60,accuracy_on[1]);
	set_pvar(SPVAR_61,hb_on[1]);
	set_pvar(SPVAR_27,HTS_on[1]);
	set_pvar(SPVAR_24,AAM_on[1]);
		set_pvar(SPVAR_64,AoDAssistV2_on[1]);
			set_pvar(SPVAR_57,AoDAssistV3_on[1]);
				set_pvar(SPVAR_58,AoDAssistV4_on[1]);
				
				set_pvar(SPVAR_23,HeadShotAssist);

								set_pvar(SPVAR_62,JUMPS[1]);
								set_pvar(SPVAR_63,AI_on[1]);
								//set_pvar(SPVAR_53,Pola[1]);
//set_pvar(SPVAR_54,Poola[1]);
																	set_pvar(SPVAR_55,AODPOLA[1]);

													set_pvar(SPVAR_34, AOD2822234321    );
    set_pvar(SPVAR_32, AOD28222343213     );				
    set_pvar(SPVAR_33, AOD282223432133 );				 set_pvar(SPVAR_36, AOD28222342    );
    												 set_pvar(SPVAR_37, AOD282223421    );
    											
		set_pvar(SPVAR_54,Poola );
		set_pvar(SPVAR_53,Pola );
}

