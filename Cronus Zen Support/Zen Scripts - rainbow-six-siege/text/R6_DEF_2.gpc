
/*
╔═══════Rainbow Six Siege═══════════════════════════════════════════════════════════════════════════════╗
║	Version: 	5.7 - Defenders																			║
║	Cronus: 	Zen only																				║
║	Platform: 	Multi																					║
║	Controller: Multi																					║
║	Game: 		Rainbow Six Siege																		║
║	Author: 	Veritas																					║
║	Discord:	https://discord.gg/tkGPX8HaNs															║
║	NOTE:		You need to load the 2 scripts in order to work between defenders and attacker			║
║				RSS_DEF and RSS_ATK																		║		
╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
*/

//--BUTTONS    				  	XBOX	 	| PlayStation
define FIRE_BUTTON          	= XB1_RT; 	//PS4_R2;
define ADS_BUTTON           	= XB1_LT;	//PS4_L2;
define BACK_BUTTON				= XB1_B;	//PS4_CIRCLE;
define SELECT_BUTTON        	= XB1_A;	//PS4_CROSS;
define GUN_SWITCH_BUTTON   		= XB1_Y;	//PS4_TRIANGLE;
define FORCE_GUN_SWITCH_BUTTON 	= XB1_A;	//PS4_CROSS;;
define RELOAD_BUTTON        	= XB1_X;	//PS4_SQUARE;	
define TACTICAL_BUTTON			= XB1_LB;	//PS4_L1;
define AVILITY_BUTTON			= XB1_RB;	//PS4_R1;
define UP_BUTTON            	= XB1_UP;	//PS4_UP;
define RIGHT_BUTTON         	= XB1_RIGHT;//PS4_RIGHT;
define DOWN_BUTTON          	= XB1_DOWN;	//PS4_DOWN;
define LEFT_BUTTON          	= XB1_LEFT; //PS4_LEFT;
define RX_BUTTON            	= XB1_RX;	//PS4_RX;
define RY_BUTTON            	= XB1_RY;	//PS4_RY;
define LX_BUTTON            	= XB1_LX;	//PS4_LX;
define LY_BUTTON            	= XB1_LY;	//PS4_LY;
define RS_BUTTON            	= XB1_RS;	//PS4_?;
define LS_BUTTON            	= XB1_LS;	//PS4_?;
define MODS_BUTTON 				= XB1_VIEW	//PS4_SHARE;
define MENU_BUTTON 				= XB1_MENU	//PS4_OPTIONS;
	
// DO NOT TOUCH HERE FOR REFERENCE ONLY	
define SPACE       =  32; /*¦¦       ¦¦*/	define  _0 = 48,  A = 65, K = 75, U =  85, e = 101, o = 111, y = 121;
define EXCLAMATION =  33; /*¦¦   !   ¦¦*/	define  _1 = 49,  B = 66, L = 76, V =  86, f = 102, p = 112, z = 122;
define QUOTE       =  34; /*¦¦   "   ¦¦*/ 	define  _2 = 50,  C = 67, M = 77, W =  87, g = 103, q = 113;
define HASH        =  35; /*¦¦   #   ¦¦*/	define  _3 = 51,  D = 68, N = 78, X =  88, h = 104, r = 114;
define DOLLAR      =  36; /*¦¦   $   ¦¦*/	define  _4 = 52,  E = 69, O = 79, Y =  89, i = 105, s = 115;
define PERCENT     =  37; /*¦¦   %   ¦¦*/	define  _5 = 53,  F = 70, P = 80, Z =  90, j = 106, t = 116;
define AND         =  38; /*¦¦   &   ¦¦*/	define  _6 = 54,  G = 71, Q = 81, a =  97, k = 107, u = 117;
define APOSTROPHE  =  39; /*¦¦   '   ¦¦*/	define  _7 = 55,  H = 72, R = 82, b =  98, l = 108, v = 118;
define O_BRACKET   =  40; /*¦¦   (   ¦¦*/	define  _8 = 56,  I = 73, S = 83, c =  99, m = 109, w = 119;
define C_BRACKET   =  41; /*¦¦   )   ¦¦*/	define  _9 = 57,  J = 74, T = 84, d = 100, n = 110, x = 120;
define ASTERISK    =  42; /*¦¦   *   ¦¦*/	define O_CURLY     	= 123; /*¦¦   {   ¦¦*/
define PLUS        =  43; /*¦¦   +   ¦¦*/	define BAR         	= 124; /*¦¦   |   ¦¦*/ 
define COMMA       =  44; /*¦¦   ,   ¦¦*/	define C_CURLY     	= 125; /*¦¦   }   ¦¦*/
define MINUS       =  45; /*¦¦   -   ¦¦*/	define WAVE        	= 126; /*¦¦   ~   ¦¦*/
define FULLSTOP    =  46; /*¦¦   .   ¦¦*/	define CROSS       	= 127; /*¦¦   PS  ¦¦*/ 
define F_SLASH     =  47; /*¦¦   /   ¦¦*/	define CIRCLE      	= 128; /*¦¦   PS  ¦¦*/ 
define COLON       =  58; /*¦¦   :   ¦¦*/	define SQUARE      	= 129; /*¦¦   PS  ¦¦*/ 
define SEMICOLON   =  59; /*¦¦   ;   ¦¦*/	define TRIANGLE    	= 130; /*¦¦   PS  ¦¦*/ 
define B_ARROW     =  60; /*¦¦   <   ¦¦*/	define UP          	= 131; /*¦¦ PS+XB ¦¦*/ 
define EQUAL       =  61; /*¦¦   =   ¦¦*/	define DOWN        	= 132; /*¦¦ PS+XB ¦¦*/ 
define F_ARROW     =  62; /*¦¦   >   ¦¦*/	define LEFT        	= 133; /*¦¦ PS+XB ¦¦*/ 
define QUESTION    =  63; /*¦¦   ?   ¦¦*/	define RIGHT       	= 134; /*¦¦ PS+XB ¦¦*/ 
define AT          =  64; /*¦¦   @   ¦¦*/	define VIEW        	= 135; /*¦¦   XB  ¦¦*/ 
define O_SQUARE    =  91; /*¦¦   [   ¦¦*/	define MENU        	= 136; /*¦¦   XB  ¦¦*/ 
define b_SLASH     =  92; /*¦¦   \   ¦¦*/
define C_SQUARE    =  93; /*¦¦   ]   ¦¦*/
define U_ARROW     =  94; /*¦¦   ^   ¦¦*/
define UNDERSCORE  =  95; /*¦¦   _   ¦¦*/
define TICK        =  96; /*¦¦   `   ¦¦*/

//--LED
define BLUE      = 1;
define RED       = 2;
define GREEN     = 3;
define PINK      = 4;
define SKYBLUE	 = 5;
define YELLOW    = 6;
define WHITE     = 7;
	 
data(
	0,0,0,0, //0. Off
	2,0,0,0, //1. Blue
  	0,2,0,0, //2. Red
  	0,0,2,0, //3. Lime/Green
  	0,0,0,2, //4. Fuchsia/Pink
  	2,0,2,0, //5. SkyBlue
  	0,2,2,0, //6. Yellow
  	2,2,2,2  //7. White
);
int Modled=TRUE;

const string M590A1			= "M590A1";
const string P226MK25		= "P226 MK 25";
const string SMG11			= "SMG-11";
const string SPAS12			= "SPAS-12";
const string MP5			= "MP5";
const string BAILIFF410		= "BAILIFF 410";
const string USP40			= "USP40";
const string MK19MM			= "MK1 9MM";
const string AUGA2			= "AUG A2";
const string MP5K			= "MP5K";
const string P12			= "P12";
const string C75AUTO		= "C75 AUTO";
const string SUPERNOVA 		= "SUPERNOVA";
const string VECTOR45ACP	= "VECTOR .45";
const string TCSG12			= "TCSG12";
const string P229RC			= "P229 RC";
const string FMG9			= "FMG-9";
const string SIX12SD		= "SIX12 SD";
const string a57USG			= "5.7 USG";
const string D50			= "D-50";
const string MPX			= "MPX";
const string P10C			= "P-10C";
const string SMG12			= "SMG-12";
const string COMMANDO9		= "COMMANDO 9";
const string P10RONI		= "P10 RONI";
const string SUPERSHORTY	= "SUPER SHO..";
const string SDP9MM			= "SDP 9MM";
const string M45MEUSOC		= "M45 MEUSOC";
const string UMP45			= "UMP45";
const string M1014			= "M1014";
const string P90			= "P90";
const string P9				= "P9";
const string LFP586			= "LFP586";
const string MP7			= "MP7";
const string M870			= "M870";
const string a416CCARBINE	= "416CCARBINE";
const string a9X19VSN		= "9X19VSN";
const string SASG12			= "SASG-12";
const string PMM			= "PMM";
const string GSH18			= "GSH-18";
const string SGCQB			= "SGCQB";
const string a9MMC1			= "9MM C1";
const string SUPER90		= "SUPER90";
const string PRB92			= "PRB92";
const string a44MAGSEMIAUTO = ".44MAG SEMI";
const string AUGA3			= "AUG A3";
const string ITA12S			= "ITA12S";
const string ITA12L			= "ITA12L";
const string T5SMG			= "T-5 SMG";
const string Q929			= "Q-929";
const string M12			= "M12";
const string SPAS15			= "SPAS15";
const string LUISON			= "LUISON";
const string BEARING9		= "BEARING 9";
const string MP5SD			= "MP5SD";
const string SCORPIONEVO3A1	= "SCORPION";
const string FO12			= "FO-12";
const string RG15			= "RG15";
const string K1A			= "K1A";
const string BOSG			= "BOSG.12.2";
const string ALDA			= "ALDA 5.56";
const string ACS12			= "ACS12";
const string KERATOS		= "KERATOS.357";
const string BAILIFF 		= "BAILIFF 410";
const string MX4STORM		= "MX4 STORM";
const string SPSMG9			= "SPSMG9";
const string MK14EBR		= "MK 14 EBR";
const string DP27			= "DP-27";

const string attackers 			= " Attackers";
const string defenders			= " Defenders";
const string polarRecoild		= "Antirecoil";
const string resetting			= "Resetting...";

const string configurationText	= "Configure";
const string cooking			= "Cooking...";	
const string operatorName[] 	= {
	/*------------------------------------------------Original Operators Deffendors------------------------------------------------*/
	"PULSE",		"CASTLE",		"DOC",			"ROOK",		"BANDIT",	"JAGER",	"SMOKE",	"MUTE",		"KAPKAN",	"TACHANKA",
	//Black Ice		Dust Line		kull Rain		Red Crow
	"FROST",		"VALKYRIE",		"CAVEIRA",		"ECHO",
	//Velvet Shell	Health			Blood Orchid					White Noise
	"MIRA",		  /*No Operator*/	"LESION",		"ELA",			"VIGIL",	
	//Chimera		Para Bellum		Para Bellum		Grim Sky		Wind Bastion
	/*No Operator*/	"ALIBI",		"MAESTRO",		"CLASH",		"KAID",		
	//Burnt Horizon	Phantom Sight	Ember Rise		Shifting Tides
	"MOZZIE",		"WARDEN",		"GOYO",			"WAMAI",		
	//Void Edge 	Steel Wave		Shadow Legacy	Neon Dawn
	"ORYX",			"MELUSI",	   /*No Operator*/	"ARUNI", ""};
	
const string avilityName[]		= {"TORCH", "EVIL EYE", "CCE SHIELD", "SENSOR", "LIFELNE", ""};
const string operationName[] 	= {"Original","Black Ice","Velvet ...","Chimera","Burnt H...","Void Edge", ""};
const string operationYear[] 	= {"","Year 1","Year 2", "Year 3","Year 4","Year 5", ""};
const int16  operatorsByYear[] 	= {0,10,14,18,22,26}
const string operation	 		= "Operation";
const string gunType[]			= {"ASSAULT RIFLE","SHOTGUN","HANDGUN","SUBMACHINE GUN","SUBMACHINE","MARKSMAN RIFLE",""};
const string fireModOption[]	= {"None", "Drop Shot", "Pron Shot", "Bunny Hop", "Strafe Shot", "Smart Shot", ""}
const int16 operatorTypeMsg[] 	= {P,r,e,s,s,SPACE,A,F_SLASH,CROSS,SPACE,t,o,SPACE,s,e,l,e,c,t,FULLSTOP,SPACE};										
const int16 operatorSelMsg[] 	= {P,r,e,s,s,SPACE,A,F_SLASH,CROSS,SPACE,t,o,SPACE,s,e,l,e,c,t,FULLSTOP,
									SPACE,H,o,l,d,SPACE,L,T,F_SLASH,L,_2,SPACE,PLUS,SPACE,LEFT,SPACE,RIGHT,
									SPACE,T,o,SPACE,n,a,v,i,g,a,t,e,SPACE,t,h,r,o,u,g,h,
									SPACE,s,e,a,s,o,n,s,FULLSTOP,SPACE};									
const int16 primaryGunMsg[]		= {UP,SPACE,SPACE,P,r,i,m,a,r,y,SPACE,SPACE,DOWN};											
const int16 secondaryGunMsg[]	= {UP,SPACE,S,e,c,u,n,d,a,r,y,SPACE,DOWN};
const string OnOff[]			= {"OFF", "ON", ""};
const string configuration[]	= {"Guns", "Antirecoil", "Shot Mod", "Reset", "Reset All", ""};
int forIndex 					= 1;	
int operatorsCount				= 28; 
define FIRE_MOD_NONE			= 0;
define FIRE_MOD_DROP_SHOT		= 1;
define FIRE_MOD_PRON_SHOT		= 2;
define FIRE_MOD_BUNNY_HOP_SHOT	= 3;
define FIRE_MOD_STRAFE_SHOT		= 4;
define FIRE_MOD_SMART_SHOT		= 5;

define AVILITY_MAVERICK			= 0;
define AVILITY_MAESTRO			= 1;
define AVILITY_CLASS			= 2;
define AVILITY_PULSE			= 3;
define AVILITY_ZOFIA			= 4;
define ASSAULTRIFLE				= 0;
define SHOTGUN					= 1;
define HANDGUN					= 2;
define SUBMACHINEGUN			= 3;
define MACHINEPISTOL 			= 4;
define MARKSMANRIFLE			= 5;	
define GUN_PRIMARY				= 0;
define GUN_SECONDARY			= 1;
define OPERERATOR_TYPE_ATTACKERS= 1;
define OPERERATOR_TYPE_DEFENDERS= 0;

define DEFAULT 					= 0;

define OPERERATOR_TYPE_MOD 		= 3;
define OPERATOR_SELECTION_MOD 	= 4;
define OPERATOR_BY_YEAR_MOD 	= 5;
define GAME_MOD					= 6;
define ANTIRECOIL_MOD			= 7;
define GUN_SELECTION_MOD		= 8;
define KILL_MOD					= 9;
define CONFIG_MOD				= 10;
define RELOAD_MOD				= 11;
define ABILITY_MOD				= 12;
define RESET_MOD				= 13;
define RESET_ALL_MOD			= 14;
define SHOT_MOD					= 15;
define RAPID_FIRE_MOD			= 16;
define QE_LEAN_SPAM_MOD			= 17;
define CROUCH_SPAM_MOD			= 18;
define CHANGE_SLOT_MOD			= 19;
define FRAG_COOK_TIME 			= 3600; 
define ScanButton_TIME 			= 0x500;
define RIGHT_STICK_NOISE  		= 10;
define RIGHT_STICK_DEADZONE   	= 10;

int currentMod					= DEFAULT;
int activeGun					= 0;
int displayOperatorTypeScrollOn	= FALSE;
int displayOperatorScrollOn		= FALSE;
int avilityActiveOnDOWN			= FALSE;
int avilityActiveOnRB			= FALSE;
int rapidFireOn					= FALSE;
int operatorWithFrags			= FALSE;
int operatorsByYearIndex		= 0;	
int currentConfigModIndex		= 0;
int primaryPolar[2], secondaryPolar[2], rapidFire[2], gunIndex[2], selectedGunIndex[2], gunCount[2];
int polarX, polarY, tempPolar;
int StrafeWait     				= 300;
int SmartShotWait  				= 200;
int bufferIndex 				= 1;
int evalValue					= 0;
int operatorIndex				= 0;
int operatorType				= OPERERATOR_TYPE_DEFENDERS;
int LINE_TOP					= 7;
int LINE_CENTER					= 25;
int LINE_BOTTOM					= 45;
int messageColumCount 			= 127;
int messageArrayLine			= 0;
int fireMod						= FIRE_MOD_NONE;
int messageSize;
define OFF       				= 0;
define ON						= 1;
//Quick Toggle
const string quickToggleInfo[]	= {"Rapid Fire", "Lean Spam", "Crouch Spam", "Drop Shot", "Pron Shot", "Bunny Hop", "Strafe Shot", "Smart Shot", ""};
define doublTabTriggerTime 		= 300; 
int rapidFireModOnOff			= ON;
int qeLeanSpam					= OFF;
int crouchSpam					= ON;

int doubleTabActive;
int doubleTabTime;  
int doubleTabCount;
int doubleTabLastButton;
int restBackToGame				= OFF;
int countBlack, slotNumber, secondScriptSlot;
const string enterSlotMsg01		= "Enter slot number";
const string enterSlotMsg02		= "for the loaded";
const string enterSlotMsg03		= "Attackers script";
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main block					║
╚═══════════════════════════════════╝
*/	
init{
	slotNumber = get_pvar(SPVAR_64, 1, 8, 0);
	DisplayMod(OPERATOR_SELECTION_MOD);
}
main {
	
	if(ButtonHold(ADS_BUTTON) && ButtonPress(MENU_BUTTON)) DisplayMod(OPERATOR_SELECTION_MOD);		
	if(ButtonHold(ADS_BUTTON) && ButtonPress(MODS_BUTTON)) DisplayMod(CONFIG_MOD);
	
	if(currentMod == GAME_MOD){	
		if(restBackToGame){
			countBlack += get_rtime();
	        if(countBlack >= 300) {
				restBackToGame = OFF;
				countBlack = 0;
				DisplaySwitchGun();
			}
		}
		//Rapid fire
		if(rapidFireOn){
			if(get_val(FIRE_BUTTON) && rapidFireOn){
				combo_run(RapidFire);
			}else combo_stop(RapidFire);    	
    	}
    	// We trigger the antirecoil		
		if(ButtonHold(ADS_BUTTON) && ButtonHold(FIRE_BUTTON)){			
    		if(isqrt(pow(ButtonHold(RX_BUTTON),2) + pow(ButtonHold(RY_BUTTON),2)) < RIGHT_STICK_DEADZONE){
				AntiRecoil();	    						
    		}	    		
    	}		
		
		//Fire Mods
		
		if(fireMod == FIRE_MOD_PRON_SHOT){
			if(ButtonPress(FIRE_BUTTON))  
              combo_run(PronShot);
        }
		if(fireMod == FIRE_MOD_BUNNY_HOP_SHOT){
			if(get_ival(FIRE_BUTTON) && get_ptime(FIRE_BUTTON) > 200) 
             combo_run(BunnyHopShot); 
		}
		if(fireMod == FIRE_MOD_STRAFE_SHOT){
			if (get_ival(FIRE_BUTTON) && abs(get_ival(LX_BUTTON)) <= 35 && abs(get_ival(LY_BUTTON)) <= 35) {
				combo_run(StrafeShot);
        	}    
            else {
                combo_stop(StrafeShot);
            }
        }
        if(fireMod == FIRE_MOD_SMART_SHOT){
			if (get_ival(FIRE_BUTTON) && abs(get_ival(LX_BUTTON)) <= 35 && abs(get_ival(LY_BUTTON)) <= 35) {
            	combo_run(SmartShot);
            	combo_run(BunnyHopShot);
        	}    
            else {
                combo_stop(SmartShot);
                combo_stop(BunnyHopShot);
            }
        }
    	// GRENADE SCRIPT
		if(operatorWithFrags) ReleaseFrag();
		if(operatorWithFrags && ButtonRelease(TACTICAL_BUTTON)) RefreshActiveOperator();
    	//Teabugging LOL
    	if(crouchSpam && ButtonHold(ADS_BUTTON) && ButtonHold(DOWN_BUTTON)){
    		combo_run(TeaBag);
    	}  
    	//Gun switch 	
		if(ButtonRelease(GUN_SWITCH_BUTTON) && get_ptime(GUN_SWITCH_BUTTON) < 500){ 
			activeGun	= !activeGun;
			DisplaySwitchGun();
    	} 
    	//Force Gun switch    	
    	if(ButtonHold(ADS_BUTTON) && DoubleTab(FORCE_GUN_SWITCH_BUTTON)){ 
    		activeGun 	= !activeGun;
			DisplaySwitchGun();
			combo_run(VibrateShort);
    	}
		//Enter the operator avility
    	if(avilityActiveOnDOWN && ButtonPress(DOWN_BUTTON)) 	DisplayAbility();
    	if(avilityActiveOnRB && ButtonPress(AVILITY_BUTTON))	DisplayAbility();

    	//Quick Toggle
    	if(!ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(LEFT_BUTTON)){
	    		rapidFireModOnOff = !rapidFireModOnOff;
	    		DisplayQuickToggle(0, rapidFireModOnOff);
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	if(!ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(UP_BUTTON)){
    			qeLeanSpam = !qeLeanSpam;
	    		DisplayQuickToggle(1, qeLeanSpam);
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
    		}
    	}
    	if(!ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(RIGHT_BUTTON)){
	    		crouchSpam = !crouchSpam;
	    		DisplayQuickToggle(2, crouchSpam);
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	if(!ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(DOWN_BUTTON)){
	    		if(fireMod == FIRE_MOD_DROP_SHOT){
	    			fireMod = FIRE_MOD_NONE;
	    			DisplayQuickToggle(3, 0);
	    		}else{
	    			fireMod = FIRE_MOD_DROP_SHOT;
	    			DisplayQuickToggle(3, 1);
	    		}
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	
    	if(ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(LEFT_BUTTON)){
	    		if(fireMod == FIRE_MOD_PRON_SHOT){
	    			fireMod = FIRE_MOD_NONE;
	    			DisplayQuickToggle(4, 0);
	    		}else{
	    			fireMod = FIRE_MOD_PRON_SHOT;
	    			DisplayQuickToggle(4, 1);
	    		}
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	if(ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(UP_BUTTON)){
	    		if(fireMod == FIRE_MOD_BUNNY_HOP_SHOT){
	    			fireMod = FIRE_MOD_NONE;
	    			DisplayQuickToggle(5, 0);
	    		}else{
	    			fireMod = FIRE_MOD_BUNNY_HOP_SHOT;
	    			DisplayQuickToggle(5, 1);
	    		}
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	if(ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(RIGHT_BUTTON)){
	    		if(fireMod == FIRE_MOD_STRAFE_SHOT){
	    			fireMod = FIRE_MOD_NONE;
	    			DisplayQuickToggle(6, 0);
	    		}else{
	    			fireMod = FIRE_MOD_STRAFE_SHOT;
	    			DisplayQuickToggle(6, 1);
	    		}
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    	if(ButtonHold(ADS_BUTTON)){
    		if(DoubleTab(DOWN_BUTTON)){
	    		if(fireMod == FIRE_MOD_SMART_SHOT){
	    			fireMod = FIRE_MOD_NONE;
	    			DisplayQuickToggle(7, 0);
	    		}else{
	    			fireMod = FIRE_MOD_SMART_SHOT;
	    			DisplayQuickToggle(7, 1);
	    		}
	    		combo_run(RumbleOff);    		
	    		restBackToGame = ON;
	    	}
    	}
    }
    else if(currentMod == ABILITY_MOD){
    	//This is necesary for Operators like Maestro/CLASS/MAVERICK    	
    	if(operatorIndex == 20)/*MAVERICK*/{
			if(ButtonPress(AVILITY_BUTTON) 		|| 
				ButtonPress(GUN_SWITCH_BUTTON)){    		
				 CloseAvility();
			}
		}
		else if(operatorIndex == 16)/*SOFIA*/{
			if(ButtonPress(TACTICAL_BUTTON) 	|| 
				ButtonPress(DOWN_BUTTON)  		|| 
				ButtonPress(GUN_SWITCH_BUTTON) 	||
				ButtonPress(AVILITY_BUTTON) 	||
				ButtonPress(GUN_SWITCH_BUTTON)){    		
				 CloseAvility();
			}
		}
    }
    else if(currentMod == CONFIG_MOD){
		if(ButtonRelease(LEFT_BUTTON)){
			currentConfigModIndex --;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			currentConfigModIndex ++;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonRelease(SELECT_BUTTON)){ 
			if(currentConfigModIndex == 0) DisplayMod(GUN_SELECTION_MOD);
			if(currentConfigModIndex == 1) DisplayMod(ANTIRECOIL_MOD);
			if(currentConfigModIndex == 2) DisplayMod(SHOT_MOD);
			if(currentConfigModIndex == 3) DisplayMod(RESET_MOD);	
			if(currentConfigModIndex == 4) DisplayMod(RESET_ALL_MOD);	
			if(currentConfigModIndex == 5) DisplayMod(RAPID_FIRE_MOD);
			if(currentConfigModIndex == 6) DisplayMod(QE_LEAN_SPAM_MOD);
			if(currentConfigModIndex == 7) DisplayMod(CROUCH_SPAM_MOD);
		}
		if(ButtonPress(BACK_BUTTON)){ 
			DisplayMod(GAME_MOD);
		}
		BlockButton(MODS_BUTTON);
		BlockButton(BACK_BUTTON); 
	}		    
	else if(currentMod == OPERATOR_SELECTION_MOD){  
		DisplayScrollMode();
		if(ButtonRelease(BACK_BUTTON)){
			DisplayMod(OPERERATOR_TYPE_MOD);
		}
		if(ButtonRelease(LEFT_BUTTON)	&&	!ButtonHold(ADS_BUTTON)){
			operatorIndex = VerifyMinMax(operatorIndex --, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonRelease(RIGHT_BUTTON)	&&	!ButtonHold(ADS_BUTTON)){
			operatorIndex = VerifyMinMax(operatorIndex ++, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonRelease(LEFT_BUTTON) 	&&	ButtonHold(ADS_BUTTON)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex --, 0, 5)
			DisplayOperatorByYear();
		}
		if(ButtonRelease(RIGHT_BUTTON)	&&	ButtonHold(ADS_BUTTON)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex ++, 0, 5)
			DisplayOperatorByYear();
	}
		if(ButtonRelease(ADS_BUTTON))	DisplayOperatorSelection();			
		if(ButtonRelease(SELECT_BUTTON)){
			gunIndex[GUN_PRIMARY] 	= 1;
			gunIndex[GUN_SECONDARY]	= 1;
			activeGun				= GUN_PRIMARY;
			ActivateOperator();
		}
		BlockAllButtons();
	}     
	else if(currentMod == OPERERATOR_TYPE_MOD){	 
		DisplayScrollMode();
		if(ButtonRelease(UP_BUTTON) || ButtonRelease(DOWN_BUTTON)){
			operatorType 	= !operatorType;
			DisplayMod(OPERERATOR_TYPE_MOD);
		}		    
		if(ButtonRelease(SELECT_BUTTON)) { 	  		
			DisplayMod(OPERATOR_SELECTION_MOD);
		}	    
		BlockAllButtons();
	}		
	else if(currentMod == ANTIRECOIL_MOD){	   		
		if(	ButtonRelease(LEFT_BUTTON) || ButtonRelease(RIGHT_BUTTON) ||
			ButtonRelease(DOWN_BUTTON) || ButtonRelease(UP_BUTTON) ){
			DisplayAntiRecoilMenu(0);
		}
		if(ButtonPress(LEFT_BUTTON)){
			AdjustRecoilValue(1);
			BlockAllButtons();
		}
		if(ButtonPress(RIGHT_BUTTON)){
			AdjustRecoilValue(2);
			BlockAllButtons();
		}
		if(ButtonPress(UP_BUTTON)){
			AdjustRecoilValue(3);
			BlockAllButtons();
		}
		if(ButtonPress(DOWN_BUTTON)){
			AdjustRecoilValue(4);	
			
		}
		if(ButtonPress(BACK_BUTTON)){
			DisplayMod(CONFIG_MOD);
		}
		if(ButtonRelease(SELECT_BUTTON)){
			if(activeGun == GUN_PRIMARY){
				SavePrimaryGunData();
			}else{
				SaveSecondaryGunData();
			}
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(FIRE_BUTTON) || ButtonHold(ADS_BUTTON) ||
			ButtonPress(RS_BUTTON) || ButtonPress(RS_BUTTON)){
			//This will allows the testing of the antirecoil without
			//leaving this menu
			if(rapidFireOn){
				if(get_val(FIRE_BUTTON) && rapidFireOn){
					combo_run(RapidFire);
				}else combo_stop(RapidFire);    	
	    	}
	    		// We trigger the antirecoil		
			if(ButtonHold(ADS_BUTTON) && ButtonHold(FIRE_BUTTON)){			
	    		if(isqrt(pow(ButtonHold(RX_BUTTON),2) + pow(ButtonHold(RY_BUTTON),2)) < RIGHT_STICK_DEADZONE){
					AntiRecoil();	    						
	    		}	    		
	    	}
		}
		BlockButton(DOWN_BUTTON);
		BlockButton(LEFT_BUTTON);
		BlockButton(UP_BUTTON);
		BlockButton(RIGHT_BUTTON);
		BlockButton(BACK_BUTTON);
	}	
	else if(currentMod == GUN_SELECTION_MOD){	
		if(ButtonRelease(LEFT_BUTTON)){
			gunIndex[activeGun] --;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			gunIndex[activeGun] ++;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
		}
		if(ButtonRelease(UP_BUTTON)  || ButtonRelease(DOWN_BUTTON)){
			activeGun = !activeGun;
			DisplayGunSelection();
		}		
		if(ButtonRelease(SELECT_BUTTON)){
			LoadGunInformation();
			ActivateOperator();
			if(activeGun == GUN_PRIMARY){
				SavePrimaryGunData();
			}else{
				SaveSecondaryGunData();
			}
		}
		if(ButtonPress(BACK_BUTTON)){ 
			DisplayMod(CONFIG_MOD);
		}
		BlockAllButtons();
	}
	else if(currentMod == SHOT_MOD){
		if(ButtonRelease(LEFT_BUTTON)){
			fireMod --;
			fireMod = VerifyMinMax(fireMod, 0, 5);
			DisplayShotMod();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			fireMod ++;
			fireMod = VerifyMinMax(fireMod, 0, 5);
			DisplayShotMod();
		}
		if(ButtonRelease(SELECT_BUTTON)){ 
			DisplayMod(GAME_MOD);
		}
		if(ButtonRelease(BACK_BUTTON)){ 
			DisplayMod(CONFIG_MOD);
		}
		BlockAllButtons();
	}
	else if(currentMod == RAPID_FIRE_MOD){
		if(ButtonRelease(LEFT_BUTTON)){
			rapidFireModOnOff = !rapidFireModOnOff;
			DisplayRapidFire();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			rapidFireModOnOff = !rapidFireModOnOff;
			DisplayRapidFire();
		}
		if(ButtonRelease(SELECT_BUTTON)){ 
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(BACK_BUTTON)){ 
			DisplayMod(CONFIG_MOD);
		}
		BlockAllButtons();
	}
	else if(currentMod == QE_LEAN_SPAM_MOD){
		if(ButtonRelease(LEFT_BUTTON)){
			qeLeanSpam = !qeLeanSpam;
			DisplayQeLeanSpam();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			qeLeanSpam = !qeLeanSpam;
			DisplayQeLeanSpam();
		}
		if(ButtonRelease(SELECT_BUTTON)){ 
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(BACK_BUTTON)){ 
			DisplayMod(CONFIG_MOD);
		}
		BlockAllButtons();
	}
	else if(currentMod == CROUCH_SPAM_MOD){
		if(ButtonRelease(LEFT_BUTTON)){
			crouchSpam = !crouchSpam;
			DisplayCrouchSpam();
		}
		if(ButtonRelease(RIGHT_BUTTON)){
			crouchSpam = !crouchSpam;
			DisplayCrouchSpam();
		}
		if(ButtonRelease(SELECT_BUTTON)){ 
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(BACK_BUTTON)){ 
			DisplayMod(CONFIG_MOD);
		}
		BlockAllButtons();
	}
	else if(currentMod == CHANGE_SLOT_MOD){
		if(slotNumber == 0){
			if(ButtonRelease(LEFT_BUTTON)){
				secondScriptSlot--;
				if(secondScriptSlot == get_slot()) secondScriptSlot --;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
				
			}
			if(ButtonRelease(RIGHT_BUTTON)){
				secondScriptSlot ++;
				if(secondScriptSlot == get_slot()) secondScriptSlot ++;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
			}
			if(ButtonRelease(SELECT_BUTTON)){
				slotNumber = secondScriptSlot;
				set_pvar(SPVAR_64, slotNumber);
			}	
			if(ButtonPress(BACK_BUTTON)){
				DisplayMod(OPERERATOR_TYPE_MOD);
			}
		}else{
			load_slot(slotNumber);
		}
	}
	else DisplayScrollMode();	
	
	set_val(TRACE_1, polarX);
	set_val(TRACE_2, polarY);
	set_val(TRACE_3, rapidFireOn);	
	set_val(TRACE_4, operatorIndex);	

}
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main Functions				║
╚═══════════════════════════════════╝
*/	
function ActivateOperator(){	
	combo_run(VibrateBlink);
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;
	LoadGunInformation();
	if(activeGun == GUN_PRIMARY){
		LoadPrimaryGunFromMemory();
	}else{
		LoadSecondaryGunFromMemory();
	}
	DisplayMod(GAME_MOD);
}
function AdjustRecoilValue(value){
	if(activeGun == GUN_PRIMARY){
		if(value == 1) evalValue = primaryPolar[1] + 1;
		if(value == 2) evalValue = primaryPolar[1] - 1;
		if(value == 3) evalValue = primaryPolar[0] - 1;
		if(value == 4) evalValue = primaryPolar[0] + 1;
	}else{
		if(value == 1) evalValue = secondaryPolar[1] + 1;
		if(value == 2) evalValue = secondaryPolar[1] - 1;
		if(value == 3) evalValue = secondaryPolar[0] - 1;
		if(value == 4) evalValue = secondaryPolar[0] + 1;
	}	
	
	if(value == 1 || value == 2) evalValue = VerifyMinMax(evalValue, 28, 127);
	if(value == 3 || value == 4) evalValue = VerifyMinMax(evalValue, 1, 99);
		
	
	if(activeGun == GUN_PRIMARY){
		if(value == 1 || value == 2) primaryPolar[1] = evalValue;
		if(value == 3 || value == 4) primaryPolar[0] = evalValue;
		polarX		= primaryPolar[0];
		polarY		= primaryPolar[1];
	}else{
		if(value == 1 || value == 2) secondaryPolar[1] = evalValue;
		if(value == 3 || value == 4) secondaryPolar[0] = evalValue;
		polarX		= secondaryPolar[0];
		polarY		= secondaryPolar[1];
	}	
	DisplayAntiRecoilMenu(value);
}
function AntiRecoil(){
	set_polar(POLAR_RS, polarY ,(polarX * 326));
}
function CloseAvility(){
	DisplayMod(GAME_MOD);			
}
function ConfigureActiveGun(){
	if(activeGun == GUN_PRIMARY){
		polarX		= primaryPolar[0];
		polarY		= primaryPolar[1];
		rapidFireOn	= rapidFire[0];
	}else{
		polarX		= secondaryPolar[0];
		polarY		= secondaryPolar[1];
		rapidFireOn	= rapidFire[1];			
	}
}
function CookingGranadeMsg(timeLeft){
	DisplayFrame();
	printf(CenterText(sizeof(cooking) - 1, OLED_FONT_MEDIUM_WIDTH), 15, OLED_FONT_MEDIUM, OLED_WHITE, cooking[0]);
	NumberToString(timeLeft, FindDigits(timeLeft), CenterText(sizeof(timeLeft) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
}
function DisplayAntiRecoilMenyAction(charIndex){
	if(charIndex == 1){
		putc_oled(1, SPACE); //LEFT
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, UP);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, RIGHT);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, DOWN);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 2){ //RIGHT
		putc_oled(1, SPACE);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, UP);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, LEFT);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, DOWN);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 3){ //UP
		putc_oled(1, SPACE);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, LEFT);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, RIGHT);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, DOWN);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 4){//DOWN
		putc_oled(1, SPACE);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, UP);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, LEFT);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, RIGHT);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
	}
}
function DisplayAntiRecoilDirectionMenu(){
	putc_oled(1, UP);
	puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, LEFT);
	puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, RIGHT);
	puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, DOWN);
	puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
}
function DisplayAntiRecoilMenu(charIndex){
	ClearScroll(LINE_TOP);
	DisplayFrame();
	putc_oled(1, X);
	puts_oled(20, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
	if(charIndex == 0) DisplayAntiRecoilDirectionMenu();
	else DisplayAntiRecoilMenyAction(charIndex);

	putc_oled(1, Y);
	puts_oled(100, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
	
	printf(CenterText(sizeof(polarRecoild) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, polarRecoild[0]);
	NumberToString(polarX, FindDigits(polarX[0]), 15, LINE_CENTER);
	NumberToString(polarY, FindDigits(polarY[0]), 90, LINE_CENTER);
}	
function DisplayAbility(){
	DisplayFrame();	
	currentMod = ABILITY_MOD;
	if(operatorIndex == 0)/*PULSE*/{			
		PrintAvilityName(AVILITY_PULSE);
		return;
	}
	if(operatorIndex == 20)/*MAVERICK*/{			
		PrintAvilityName(AVILITY_MAVERICK);
		return;
	}
	if(operatorIndex == 16)/*ZOFIA*/{			
		PrintAvilityName(AVILITY_ZOFIA);
		return;
	}
}
function DisplayConfiguration(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;

	DisplayFrame();
	printf(CenterText(sizeof(configurationText) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configurationText[0]);
	printf(CenterText(GetconfigurationChars(currentConfigModIndex), OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	DisplayLeftRight();		    	
	combo_run(RumbleOff);
	LED(RED);
}
function DisplayCrouchSpam(){
	DisplayFrame();
	
	printf(CenterText(GetconfigurationChars(currentConfigModIndex), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	printf(CenterText(3, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, OnOff[crouchSpam]);
	DisplayLeftRight();			
}
function DisplayEnterSlotNumber(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;
	DisplayFrame();
	
	printf(CenterText(sizeof(enterSlotMsg01) - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg01[0]);
	printf(CenterText(sizeof(enterSlotMsg02) - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 10, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg02[0]);
	printf(CenterText(sizeof(enterSlotMsg03) - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 20, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg03[0]);

	ClearScroll(LINE_BOTTOM);
	putc_oled(1, MINUS);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, secondScriptSlot + 48);
	puts_oled(55,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, PLUS);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayGameMode(){
	DisplaySwitchGun();
	BlockAllButtons();
	BlockButton(BACK_BUTTON);
}			
function DisplayGunSelection(){	
	DisplayFrame();
	DisplayGunIndex();
	DisplayLeftRight();
	DisplayGunName(); 
}
function DisplayGunIndex(){
	ClearScroll(LINE_TOP);
	messageColumCount = 0;
	if(activeGun == GUN_PRIMARY){
		messageSize = sizeof(primaryGunMsg)/sizeof(primaryGunMsg[0]);
		for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
			putc_oled(1, primaryGunMsg[messageArrayLine]);
			puts_oled(messageColumCount  + (8 * messageColumCount ), LINE_TOP, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
			messageColumCount ++;
		}		
	}else{
		messageSize = sizeof(secondaryGunMsg)/sizeof(secondaryGunMsg[0]);
		for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
			putc_oled(1, secondaryGunMsg[messageArrayLine]);
			puts_oled(messageColumCount + (8 * messageColumCount ), LINE_TOP, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
			messageColumCount ++;
		}		
	}
}

function DisplayGunType(){
	if(operatorIndex == 0)/*PULSE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 1)/*CASTLE	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(HANDGUN);
			}
		}	
		return;
	}
	if(operatorIndex == 2)/*DOC	*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunType(SUBMACHINEGUN);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunType(SHOTGUN); 				
			}				
		}else{				
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 3)/*ROOK	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 4)/*BANDIT	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 5)/*JAGER	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 6)/*SMOKE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{	
				PrintGunType(HANDGUN);
			}
		}	
		return;
	}
	if(operatorIndex == 7)/*MUTE	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}		
		return;
	}
	if(operatorIndex == 8)/*KAPKAN -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SHOTGUN); 	
			}else{	
				PrintGunType(ASSAULTRIFLE); 
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 9)/*TACHANKA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN); 
			}else{	
				PrintGunType(ASSAULTRIFLE); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 1
	if(operatorIndex == 10)/*FROST*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(HANDGUN);			
			}else{
				PrintGunType(SHOTGUN); 
			}			
		}	
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(SUBMACHINEGUN);
			}			
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	//══▶DEFENDERS Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(HANDGUN);
			}	
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);									
			}else{
				PrintGunType(SHOTGUN); 
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 3
	if(operatorIndex == 18)/*ALIBI -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 19)/*MAESTRO*/{ 
		if(activeGun == GUN_PRIMARY){		
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}		
	if(operatorIndex == 20)/*CLASH -*/{ 
		PrintGunType(HANDGUN);
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}		
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN);
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{				
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN);
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}			
		return;
	}
	if(operatorIndex == 28)/*ARUNI-*/{ 		
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(MARKSMANRIFLE); 				
			}else{
				PrintGunType(SUBMACHINEGUN);
			}				
		}else{
			PrintGunType(HANDGUN);
		}			
		return;
	}
}
function DisplayGunName(){
	if(operatorIndex == 0)/*PULSE	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(UMP45), UMP45[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
				
			}else{
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}
		}
		return;
	}
	if(operatorIndex == 1)/*CASTLE	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(UMP45), UMP45[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(SUPERSHORTY), SUPERSHORTY[0]);
			}else{
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 2)/*DOC	*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(P90), P90[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P9), P9[0]);
			}else{
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}
		return;
	}
	if(operatorIndex == 3)/*ROOK	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunName(sizeof(P90), P90[0]);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P9), P9[0]);
			}else{
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 4)/*BANDIT	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP7), MP7[0]);
			}else{	
				PrintGunName(sizeof(M870), M870[0]);
			}
		}else{	
			PrintGunName(sizeof(P12), P12[0]);
		}
		return;
	}
	if(operatorIndex == 5)/*JAGER	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a416CCARBINE), a416CCARBINE[0]);
			}else{	
				PrintGunName(sizeof(M870), M870[0]);
			}
		}else{	
			PrintGunName(sizeof(P12), P12[0]);
		}	
		return;
	}
	if(operatorIndex == 6)/*SMOKE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(FMG9), FMG9[0]);
			}else{	
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(SMG11), SMG11[0]);
			}else{	
				PrintGunName(sizeof(P226MK25), P226MK25[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 7)/*MUTE	*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5K), MP5K[0]);
			}else{	
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P226MK25), P226MK25[0]);
			}else{	
				PrintGunName(sizeof(SMG11), SMG11[0]);
			}	
		}		
		return;
	}
	if(operatorIndex == 8)/*KAPKAN -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(SASG12), SASG12[0]);
			}else{	
				PrintGunName(sizeof(a9X19VSN), a9X19VSN[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{	
				PrintGunName(sizeof(GSH18), GSH18[0]);
			}
		}
		return;
	}
	if(operatorIndex == 9)/*TACHANKA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(DP27), DP27[0]);
			}else{	
				PrintGunName(sizeof(a9X19VSN), a9X19VSN[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{	
				PrintGunName(sizeof(GSH18), GSH18[0]);
			}
		}	
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 1
	if(operatorIndex == 10)/*FROST*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a9MMC1), a9MMC1[0]);
			}else{
				PrintGunName(sizeof(SUPER90), SUPER90[0]);
			}
		}else{	
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(MK19MM), MK19MM[0]);
			}else{
				PrintGunName(sizeof(ITA12S), ITA12S[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MPX), MPX[0]);
			}else{
				PrintGunName(sizeof(SPAS12), SPAS12[0]);
			}
		}else{
			PrintGunName(sizeof(D50), D50[0]);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(SPAS15), SPAS15[0]);
			}else{
				PrintGunName(sizeof(M12), M12[0]);
			}
		}else{
			PrintGunName(sizeof(LUISON), LUISON[0]);
		}
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5SD), MP5SD[0]);
			}else{
				PrintGunName(sizeof(SUPERNOVA), SUPERNOVA[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BEARING9), BEARING9[0]);
			}else{
				PrintGunName(sizeof(P229RC), P229RC[0]);
			}
		}	
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(VECTOR45ACP), VECTOR45ACP[0]);
			}else{
				PrintGunName(sizeof(ITA12L), ITA12L[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(ITA12S), ITA12S[0]);
			}else{
				PrintGunName(sizeof(USP40), USP40[0]);
			}
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(T5SMG), T5SMG[0]);
			}else{
				PrintGunName(sizeof(SIX12SD), SIX12SD[0]);
			}
		}else{
			PrintGunName(sizeof(Q929), Q929[0]);
		}
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(SCORPIONEVO3A1), SCORPIONEVO3A1[0]);
			}else{
				PrintGunName(sizeof(FO12), FO12[0]);
			}
		}else{
			PrintGunName(sizeof(RG15), RG15[0]);
		}
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(K1A), K1A[0]);
			}else{
				PrintGunName(sizeof(BOSG), BOSG[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(C75AUTO), C75AUTO[0]);
			}else{
				PrintGunName(sizeof(SMG12), SMG12[0]);
			}
		}	
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 3
	if(operatorIndex == 18)/*ALIBI -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MX4STORM), MX4STORM[0]);
			}else{
				PrintGunName(sizeof(ACS12), ACS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}else{
				PrintGunName(sizeof(BAILIFF), BAILIFF[0]);
			}
		}
		return;
	}
	if(operatorIndex == 19)/*MAESTRO*/{ 
		if(activeGun == GUN_PRIMARY){		
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(ALDA), ALDA[0]);
			}else{
				PrintGunName(sizeof(ACS12), ACS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BAILIFF), BAILIFF[0]);
			}else{
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}
		}	
		return;
	}		
	if(operatorIndex == 20)/*CLASH -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			PrintGunName(sizeof(P10C), P10C[0]);
		}else{
			PrintGunName(sizeof(SPSMG9), SPSMG9[0]);
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AUGA3), AUGA3[0]);
			}else{
				PrintGunName(sizeof(TCSG12), TCSG12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}else{
				PrintGunName(sizeof(a44MAGSEMIAUTO), a44MAGSEMIAUTO[0]);
			}
		}		
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(COMMANDO9), COMMANDO9[0]);
			}else{
				PrintGunName(sizeof(P10RONI), P10RONI[0]);
			}
		}else{
			PrintGunName(sizeof(SDP9MM), SDP9MM[0]);
		}	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MPX), MPX[0]);
			}else{
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P10C), P10C[0]);
			}else{
				PrintGunName(sizeof(SMG12), SMG12[0]);
			}
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(VECTOR45ACP), VECTOR45ACP[0]);
			}else{
				PrintGunName(sizeof(TCSG12), TCSG12[0]);
			}
		}else{
			PrintGunName(sizeof(P229RC), P229RC[0]);
		}
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AUGA2), AUGA2[0]);
			}else{
				PrintGunName(sizeof(MP5K), MP5K[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}else{
				PrintGunName(sizeof(P12), P12[0]);
			}
		}
		return;
	}
	//══▶OPERERATOR_TYPE_DEFENDERS Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(T5SMG), T5SMG[0]);
			}else{
				PrintGunName(sizeof(SPAS12), SPAS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BAILIFF410), BAILIFF410[0]);
			}else{
				PrintGunName(sizeof(USP40), USP40[0]);
			}
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else{
				PrintGunName(sizeof(SUPER90), SUPER90[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(RG15), RG15[0]);

			}else{
				PrintGunName(sizeof(PRB92), PRB92[0]);
			}
		}			
		return;
	}
	if(operatorIndex == 28)/*ARUNI-*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MK14EBR),  MK14EBR[0]);
			}else{					
				PrintGunName(sizeof(P10RONI),  P10RONI[0]);
			}
		}else{
			PrintGunName(sizeof(PRB92),  PRB92[0]);
		}			
		return;
	}
}

function DisplayMod(modIndex){	
   	currentMod 	 =  modIndex;
   	if(modIndex == OPERERATOR_TYPE_MOD) 	DisplayOperatorType();
   	if(modIndex == OPERATOR_SELECTION_MOD) 	DisplayOperatorSelection();
   	if(modIndex == ANTIRECOIL_MOD)			DisplayAntiRecoilMenu(0);
   	if(modIndex == GUN_SELECTION_MOD)		DisplayGunSelection();
   	if(modIndex == CONFIG_MOD)				DisplayConfiguration();
   	if(modIndex == ABILITY_MOD)				DisplayAbility();
   	if(modIndex == RESET_MOD)				ResetOperator();
   	if(modIndex == RESET_ALL_MOD)			ResetAllOperators();
   	if(modIndex == SHOT_MOD)				DisplayShotMod();
   	if(modIndex == RAPID_FIRE_MOD)			DisplayRapidFire();
   	if(modIndex == QE_LEAN_SPAM_MOD)		DisplayQeLeanSpam();
   	if(modIndex == CROUCH_SPAM_MOD)			DisplayCrouchSpam();
   	if(modIndex == GAME_MOD)				DisplayGameMode();
}
function DisplayOperatorType(){
	displayOperatorTypeScrollOn	= TRUE;
	displayOperatorScrollOn		= FALSE;
	ClearScroll(LINE_TOP);
	DisplayFrame();
 	printf(5,25,OLED_FONT_MEDIUM, !operatorType, attackers[0]);		
	putc_oled(1,UP);
	puts_oled(5,25,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, !operatorType);	
	printf(5,45,OLED_FONT_MEDIUM, operatorType, defenders[0]);	
	putc_oled(1,DOWN);
	puts_oled(5,45,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, operatorType);
	ClearScroll(LINE_TOP);
} 	
function DisplayOperatorSelection(){
	if(operatorType == OPERERATOR_TYPE_ATTACKERS){
		currentMod = CHANGE_SLOT_MOD;
		DisplayEnterSlotNumber();
	}else{
		displayOperatorTypeScrollOn	= FALSE;
		displayOperatorScrollOn		= TRUE;
		DisplayFrame();	
		DisplayLeftRight();
		PrintOperatorName(LINE_CENTER);
		ClearScroll(LINE_TOP);
	}
}
function DisplayOperatorByYear(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;	
	DisplayFrame();
	operatorIndex				= operatorsByYear[operatorsByYearIndex];
	printf(CenterText(sizeof(operation) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM,OLED_WHITE, operation[0]);
	printf(CenterText(GetOperationChars(operatorsByYearIndex), OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, operationName[operatorsByYearIndex]);
	printf(CenterText(6, OLED_FONT_MEDIUM_WIDTH), LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_WHITE, operationYear[operatorsByYearIndex]);	
}
function DisplayRapidFire(){
	DisplayFrame();
	
	printf(CenterText(GetconfigurationChars(currentConfigModIndex), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	printf(CenterText(3, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, OnOff[rapidFireModOnOff]);
	DisplayLeftRight();	
}
function DisplayQeLeanSpam(){
	DisplayFrame();
	
	printf(CenterText(GetconfigurationChars(currentConfigModIndex), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	printf(CenterText(3, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, OnOff[qeLeanSpam]);
	DisplayLeftRight();	
}
function DisplaySwitchGun(){
	DisplayFrame();	
	ConfigureActiveGun();
	printf(CenterText(GetOperatorChars(operatorIndex), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);		
	DisplayGunName();
	DisplayGunType();
	if(!rapidFireModOnOff && rapidFireOn) rapidFireOn = FALSE;
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
function DisplayScrollMode(){
	if(displayOperatorTypeScrollOn)	DisplayOperatorTypeScroll();
	if(displayOperatorScrollOn)		DisplayOperatorSelectionScroll();
}
function DisplayShotMod(){
	currentMod = SHOT_MOD;
	DisplayFrame();
	DisplayLeftRight();
	printf(CenterText(GetconfigurationChars(2), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[2]);		
	printf(CenterText(GetShotModChars(fireMod), OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, fireModOption[fireMod]);		
}
function DisplayOperatorTypeScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorTypeMsg)/sizeof(operatorTypeMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorTypeMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);		
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayOperatorSelectionScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorSelMsg)/sizeof(operatorSelMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorSelMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayQuickToggle(toggle, status){
	DisplayFrame();
	printf(CenterText(GetQickToggleChars(toggle), OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, quickToggleInfo[toggle]);		
	printf(CenterText(3, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10, OLED_FONT_MEDIUM, OLED_WHITE, OnOff[status]);
	
}
function DisplayLeftRight(){
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, LEFT);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, RIGHT);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayFrame(){
	cls_oled(0);
	rect_oled(1,1,127,63,0,1);
}

function LoadGunInformation(){
	gunCount[0] 		= 2;
	gunCount[1] 		= 2;
	
	avilityActiveOnDOWN	= FALSE;
	avilityActiveOnRB	= FALSE;	
	//══▶Original OPERERATOR_TYPE_DEFENDERS
	if(operatorIndex == 0)/*PULSE	*/{ 
		avilityActiveOnRB = FALSE;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(26,93,0);
		}else{
			LoadGunPrimary(30,90,1); 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(26,92,1); 
		}else{
			LoadGunSecondary(20,89,1);
		}
		return;
	}
	if(operatorIndex == 1)/*CASTLE	*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(26,95,0);
		}else{
			LoadGunPrimary(40,90,1);
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(28,92,1);
		}else{
			LoadGunSecondary(24,90,1);
		}
		return;
	}
	if(operatorIndex == 2)/*DOC	*/{ 
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,92,0);
		}else if(gunIndex[GUN_PRIMARY] == 2){
			LoadGunPrimary(24,95,0);
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			LoadGunPrimary(23,70,1);  
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(27,92,0);
		}else{
			LoadGunSecondary(35,90,1); 
		}
		return;
	}
	if(operatorIndex == 3)/*ROOK	*/{ 
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,92,0);
		}else if(gunIndex[GUN_PRIMARY] == 2){
			LoadGunPrimary(29,89,0);
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			LoadGunPrimary(23,70,1);  
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(24,87,1);
		}else{
			LoadGunSecondary(35,90,1); 
		}
		return;
	}
	if(operatorIndex == 4)/*BANDIT	*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(29,71,0);
		}else{	
			LoadGunPrimary(20,85,1);
		}
		LoadGunSecondary(25,85,1);				
		return;
	}
	if(operatorIndex == 5)/*JAGER*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(29,94,0);
		}else{	
			LoadGunPrimary(25,85,1);
		}
		LoadGunSecondary(25,88,1);				
		return;
	}
	if(operatorIndex == 6)/*SMOKE -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,82,0);
		}else{	
			LoadGunPrimary(20,80,1); //To DO
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(33,83,0);						
		}else{	
			LoadGunSecondary(28,83,1);
		}
		return;
	}
	if(operatorIndex == 7)/*MUTE	*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,91,0);
		}else{	
			LoadGunPrimary(20,80,1);
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(33,83,0); 
		}else{	
			LoadGunSecondary(25,85,0); 
		}	
		return;
	}
	if(operatorIndex == 8)/*KAPKAN -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(26,91,0);
		}else{	
			LoadGunPrimary(25,91,1); 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(27,90,1);
		}else{	
			LoadGunSecondary(21,88,1); 
		}
		return;
	}
	if(operatorIndex == 9)/*TACHANKA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,70,0);
		}else{	
			LoadGunPrimary(25,91,1); 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(27,90,1);
		}else{	
			LoadGunSecondary(21,88,1); 
		}
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*FROST**/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,76,0);
		}else{
			LoadGunPrimary(40,86,1);
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(20,85,1);
		}else{
			LoadGunSecondary(27,70,1); 
		}
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,91,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		LoadGunSecondary(31,90,1);
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(34,80,1);
		}else{
			LoadGunPrimary(32,92,0);
		}
		LoadGunSecondary(29,70,1);	
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,90,0);
		}else{
			LoadGunPrimary(20,85,1); 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(34,92,0);
		}else{
			LoadGunSecondary(25,83,1); 
		}
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(29,88,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(27,70,1); 
		}else{
			LoadGunSecondary(24,80,1); 
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 			
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,88,0);
		}else{
			LoadGunPrimary(40,85,1); 
		}
		LoadGunSecondary(27,91,1);	
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(31,66,0);
		}else{
			LoadGunPrimary(31,67,1); 
		}
		LoadGunSecondary(25,91,1); 
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,96,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(31,89,0);
		}else{
			LoadGunSecondary(24,87,0); 
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*ALIBI -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(30,73,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(29,87,1); 
		}else{
			LoadGunSecondary(40,90,1);
		}
		return;
	}
	if(operatorIndex == 19)/*MAESTRO*/{ 
		avilityActiveOnRB 	= TRUE;
		avilityActiveOnDOWN = TRUE;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,91,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(35,90,1);
		}else{
			LoadGunSecondary(32,87,1); 
		}
		return;
	}		
	if(operatorIndex == 20)/*CLASH -*/{ 
		gunCount[1] = 0;
		avilityActiveOnRB = FALSE;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(30,90,0);
		}else{
			LoadGunPrimary(30,90,0);//══▶TO DO 
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,81,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(35,90,1);
		}else{
			LoadGunSecondary(27,70,1);//══▶TO DO 
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		gunCount[1] = 1; 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,91,0);
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		LoadGunSecondary(27,91,1); 	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 				
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,91,0);
		}else{
			LoadGunPrimary(20,80,1);
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(25,91,1);
		}else{
			LoadGunSecondary(24,87,0); 
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(29,80,0); 
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		LoadGunSecondary(25,85,1);
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,76,0); 
		}else{
			LoadGunPrimary(27,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(29,90,1); 
		}else{
			LoadGunSecondary(23,89,1);
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(28,88,0);
		}else{
			LoadGunPrimary(35,70,1);//══▶TO DO 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			LoadGunSecondary(35,91,1);//══▶TO DO 
		}else{
			LoadGunSecondary(24,80,1);
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,93,0);
		}else{
			LoadGunPrimary(31,81,1);
		}
		LoadGunSecondary(25,91,1); 	
		return;
	}
	if(operatorIndex == 28)/*ARUNI*/{
		gunCount[1] = 1;
		if(gunIndex[GUN_PRIMARY] == 1){
			LoadGunPrimary(27,92,1);
		}else{
			LoadGunPrimary(32,95,0);
		}
		LoadGunSecondary(25,83,1); 	
		return;
	}
}

function LoadPrimaryGunFromMemory(){
	if(operatorIndex == 0){
		if(get_pvar(SPVAR_1, -32768, 32767, 0) == 0) return;		
		tempPolar = get_pvar(SPVAR_1, -32768, 32767, 0);
	}
	if(operatorIndex == 1){
		if(get_pvar(SPVAR_3, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_3, -32768, 32767, 0);
	}
	if(operatorIndex == 2){
		if(get_pvar(SPVAR_5, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_5, -32768, 32767, 0);
	}
	if(operatorIndex == 3){
		if(get_pvar(SPVAR_7, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_7, -32768, 32767, 0);
	}		
	if(operatorIndex == 4){
		if(get_pvar(SPVAR_9, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_9, -32768, 32767, 0);
	}
	if(operatorIndex == 5){
		if(get_pvar(SPVAR_11, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_11, -32768, 32767, 0);
	}
	if(operatorIndex == 6){
		if(get_pvar(SPVAR_13, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_13, -32768, 32767, 0);
	}
	if(operatorIndex == 7){
		if(get_pvar(SPVAR_15, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_15, -32768, 32767, 0);
	}
	if(operatorIndex == 8){
		if(get_pvar(SPVAR_17, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_17, -32768, 32767, 0);
	}
	if(operatorIndex == 9){
		if(get_pvar(SPVAR_19, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_19, -32768, 32767, 0);
	}
	if(operatorIndex == 10){
		if(get_pvar(SPVAR_21, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_21, -32768, 32767, 0);
	}
	if(operatorIndex == 11){
		if(get_pvar(SPVAR_23, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_23, -32768, 32767, 0);
	}
	if(operatorIndex == 12){
		if(get_pvar(SPVAR_25, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_25, -32768, 32767, 0);
	}
	if(operatorIndex == 13){
		if(get_pvar(SPVAR_27, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_27, -32768, 32767, 0);
	}
	if(operatorIndex == 14){
		if(get_pvar(SPVAR_29, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_29, -32768, 32767, 0);
	}
	if(operatorIndex == 15){
		if(get_pvar(SPVAR_31, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_31, -32768, 32767, 0);
	}
	if(operatorIndex == 16){
		if(get_pvar(SPVAR_33, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_33, -32768, 32767, 0);
	}
	if(operatorIndex == 17){
		if(get_pvar(SPVAR_35, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_35, -32768, 32767, 0);
	}
	if(operatorIndex == 18){
		if(get_pvar(SPVAR_37, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_37, -32768, 32767, 0);
	}
	if(operatorIndex == 19){
		if(get_pvar(SPVAR_39, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_39, -32768, 32767, 0);
	}
	if(operatorIndex == 20){
		if(get_pvar(SPVAR_41, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_41, -32768, 32767, 0);
	}
	if(operatorIndex == 21){
		if(get_pvar(SPVAR_43, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_43, -32768, 32767, 0);
	}
	if(operatorIndex == 22){
		if(get_pvar(SPVAR_45, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_45, -32768, 32767, 0);
	}
	if(operatorIndex == 23){
		if(get_pvar(SPVAR_47, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_47, -32768, 32767, 0);
	}
	if(operatorIndex == 24){
		if(get_pvar(SPVAR_49, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_49, -32768, 32767, 0);
	}
	if(operatorIndex == 25){
		if(get_pvar(SPVAR_51, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_51, -32768, 32767, 0);
	}
	if(operatorIndex == 26){
		if(get_pvar(SPVAR_53, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_53, -32768, 32767, 0);
	}
	if(operatorIndex == 27){
		if(get_pvar(SPVAR_55, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_55, -32768, 32767, 0);
	}
	if(operatorIndex == 28){
		if(get_pvar(SPVAR_57, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_57, -32768, 32767, 0);
	}
	if(operatorIndex == 29){
		if(get_pvar(SPVAR_59, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_59, -32768, 32767, 0);
	}	
	//old trick to concat int's
    polarX    = (tempPolar / 100) % 100;  
    polarY    = 127 - (tempPolar % 100);
    gunIndex[GUN_PRIMARY] = tempPolar / 100;
    selectedGunIndex[GUN_PRIMARY] = gunIndex[GUN_PRIMARY];
	primaryPolar[0]	= polarX;
	primaryPolar[1] = polarY;
	set_val(TRACE_6, tempPolar);
}
function LoadSecondaryGunFromMemory(){
	if(operatorIndex == 0){		
		if(get_pvar(SPVAR_2, -32768, 32767, 0) == 0) return;	
		tempPolar = get_pvar(SPVAR_2, -32768, 32767, 0);
	}
	if(operatorIndex == 1){
		if(get_pvar(SPVAR_4, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_4, -32768, 32767, 0);
	}
	if(operatorIndex == 2){
		if(get_pvar(SPVAR_6, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_6, -32768, 32767, 0);
	}
	if(operatorIndex == 3){
		if(get_pvar(SPVAR_8, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_8, -32768, 32767, 0);
	}		
	if(operatorIndex == 4){
		if(get_pvar(SPVAR_10, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_10, -32768, 32767, 0);
	}
	if(operatorIndex == 5){
		if(get_pvar(SPVAR_12, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_12, -32768, 32767, 0);
	}
	if(operatorIndex == 6){
		if(get_pvar(SPVAR_14, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_14, -32768, 32767, 0);
	}
	if(operatorIndex == 7){
		if(get_pvar(SPVAR_16, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_16, -32768, 32767, 0);
	}
	if(operatorIndex == 8){
		if(get_pvar(SPVAR_18, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_18, -32768, 32767, 0);
	}
	if(operatorIndex == 9){
		if(get_pvar(SPVAR_20, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_20, -32768, 32767, 0);
	}
	if(operatorIndex == 10){
		if(get_pvar(SPVAR_22, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_22, -32768, 32767, 0);
	}
	if(operatorIndex == 11){
		if(get_pvar(SPVAR_24, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_24, -32768, 32767, 0);
	}
	if(operatorIndex == 12){
		if(get_pvar(SPVAR_26, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_26, -32768, 32767, 0);
	}
	if(operatorIndex == 13){
		if(get_pvar(SPVAR_28, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_28, -32768, 32767, 0);
	}
	if(operatorIndex == 14){
		if(get_pvar(SPVAR_30, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_30, -32768, 32767, 0);
	}
	if(operatorIndex == 15){
		if(get_pvar(SPVAR_32, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_32, -32768, 32767, 0);
	}
	if(operatorIndex == 16){
		if(get_pvar(SPVAR_34, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_34, -32768, 32767, 0);
	}
	if(operatorIndex == 17){
		if(get_pvar(SPVAR_36, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_36, -32768, 32767, 0);
	}
	if(operatorIndex == 18){
		if(get_pvar(SPVAR_38, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_38, -32768, 32767, 0);
	}
	if(operatorIndex == 19){
		if(get_pvar(SPVAR_40, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_40, -32768, 32767, 0);
	}
	if(operatorIndex == 20){
		if(get_pvar(SPVAR_42, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_42, -32768, 32767, 0);
	}
	if(operatorIndex == 21){
		if(get_pvar(SPVAR_44, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_44, -32768, 32767, 0);
	}
	if(operatorIndex == 22){
		if(get_pvar(SPVAR_46, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_46, -32768, 32767, 0);
	}
	if(operatorIndex == 23){
		if(get_pvar(SPVAR_48, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_48, -32768, 32767, 0);
	}
	if(operatorIndex == 24){
		if(get_pvar(SPVAR_50, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_50, -32768, 32767, 0);
	}
	if(operatorIndex == 25){
		if(get_pvar(SPVAR_52, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_52, -32768, 32767, 0);
	}
	if(operatorIndex == 26){
		if(get_pvar(SPVAR_54, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_54, -32768, 32767, 0);
	}
	if(operatorIndex == 27){
		if(get_pvar(SPVAR_56, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_56, -32768, 32767, 0);
	}
	if(operatorIndex == 28){
		if(get_pvar(SPVAR_58, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_58, -32768, 32767, 0);
	}
	if(operatorIndex == 29){
		if(get_pvar(SPVAR_60, -32768, 32767, 0) == 0) return;
		tempPolar = get_pvar(SPVAR_60, -32768, 32767, 0);
	}
	//old trick to concat int's
    polarX    = (tempPolar / 100) % 100;  
    polarY    = 127 - (tempPolar % 100);
    gunIndex[GUN_SECONDARY] =(tempPolar / 100)
 	selectedGunIndex[GUN_SECONDARY] = gunIndex[GUN_SECONDARY];
	secondaryPolar[0] = polarX;
	secondaryPolar[1] = polarY;
    set_val(TRACE_6, tempPolar);
}
function LoadGunPrimary(valX, valY, valRF){
	primaryPolar[0] 	= valX;
	primaryPolar[1] 	= valY;
	rapidFire[0] 		= valRF;
}
function LoadGunSecondary(valX, valY, valRF){
	secondaryPolar[0] 	= valX;
	secondaryPolar[1] 	= valY;
	rapidFire[1] 		= valRF;
}
function PrintAvilityName(position){
	printf(CenterText(GetAvilityChars(position), OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, avilityName[position]);
}
function PrintOperatorName(line){
	evalValue = operatorIndex;
	printf(CenterText(GetOperatorChars(operatorIndex), OLED_FONT_MEDIUM_WIDTH), line, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);
}
function PrintGunName(position, gunName){
	printf(CenterText(position - 1 , OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, gunName);
}
function PrintGunType(gunIndex){
	printf(CenterText(GetGunTypeChars(gunIndex), OLED_FONT_SMALL_WIDTH), LINE_BOTTOM, OLED_FONT_SMALL, OLED_WHITE, gunType[gunIndex]);
}
function RefreshActiveOperator(){
	LoadGunInformation();
	DisplayMod(GAME_MOD);
	combo_run(RumbleOn);
}
function ReleaseFrag(){ 
	if(ButtonHold(TACTICAL_BUTTON)){
		if(get_ptime(TACTICAL_BUTTON) >= FRAG_COOK_TIME){
			BlockButton(TACTICAL_BUTTON);
			RefreshActiveOperator();
		}else{
			CookingGranadeMsg(abs(get_ptime(TACTICAL_BUTTON)-FRAG_COOK_TIME));
		}
	}
}
function ResetAllOperators(){	
	forIndex = 0;
	polarX	= 0;
	polarY	= 0;
	
	for (forIndex = 0; forIndex < operatorsCount + 1; forIndex++) {
		DisplayFrame();
		printf(CenterText(sizeof(resetting) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, resetting[0]);
		operatorIndex = forIndex;
		PrintOperatorName(LINE_CENTER);
		SavePrimaryGunData();
		SaveSecondaryGunData();
	}
	LoadGunInformation();
	DisplayMod(GAME_MOD);
}
function ResetOperator(){
	polarX	= 0;
	polarY	= 0;
	SavePrimaryGunData();
	SaveSecondaryGunData();	
	LoadGunInformation();
	DisplayMod(GAME_MOD);
}
function SavePrimaryGunData(){
	
	//old trick to concat int's
	if(polarX == 0 && polarY == 0){
		tempPolar = 0;
	}else{
		tempPolar = gunIndex[GUN_PRIMARY] * pow(10, 2) + polarX;
		tempPolar = tempPolar * pow(10, 2) + (127 - polarY);
	}

	if(operatorIndex == 0){			
		set_pvar(SPVAR_1, tempPolar);
		return;
	}
	if(operatorIndex == 1){
		set_pvar(SPVAR_3, tempPolar);
		return;
	}
	if(operatorIndex == 2){
		set_pvar(SPVAR_5, tempPolar);
		return;
	}
	if(operatorIndex == 3){
		set_pvar(SPVAR_7, tempPolar);
		return;
	}
	if(operatorIndex == 4){
		set_pvar(SPVAR_9, tempPolar);
		return;
	}
	if(operatorIndex == 5){
		set_pvar(SPVAR_11, tempPolar);
		return;
	}
	if(operatorIndex == 6){
		set_pvar(SPVAR_13, tempPolar);
		return;
	}
	if(operatorIndex == 7){
		set_pvar(SPVAR_15, tempPolar);
		return;
	}
	if(operatorIndex == 8){
		set_pvar(SPVAR_17, tempPolar);
		return;
	}
	if(operatorIndex == 9){
		set_pvar(SPVAR_19, tempPolar);
		return;
	}
	if(operatorIndex == 10){
		set_pvar(SPVAR_21, tempPolar);
		return;
	}
	if(operatorIndex == 11){
		set_pvar(SPVAR_23, tempPolar);
		return;
	}
	if(operatorIndex == 12){
		set_pvar(SPVAR_25, tempPolar);
		return;
	}
	if(operatorIndex == 13){
		set_pvar(SPVAR_27, tempPolar);
		return;
	}
	if(operatorIndex == 14){
		set_pvar(SPVAR_29, tempPolar);
		return;
	}
	if(operatorIndex == 15){
		set_pvar(SPVAR_31, tempPolar);
		return;
	}
	if(operatorIndex == 16){
		set_pvar(SPVAR_33, tempPolar);
		return;
	}
	if(operatorIndex == 17){
		set_pvar(SPVAR_35, tempPolar);
		return;
	}
	if(operatorIndex == 18){
		set_pvar(SPVAR_37, tempPolar);
		return;
	}
	if(operatorIndex == 19){
		set_pvar(SPVAR_39, tempPolar);
		return;
	}
	if(operatorIndex == 20){
		set_pvar(SPVAR_41, tempPolar);
		return;
	}
	if(operatorIndex == 21){
		set_pvar(SPVAR_43, tempPolar);
		return;
	}
	if(operatorIndex == 22){
		set_pvar(SPVAR_45, tempPolar);
		return;
	}
	if(operatorIndex == 23){
		set_pvar(SPVAR_47, tempPolar);
		return;
	}
	if(operatorIndex == 24){
		set_pvar(SPVAR_49, tempPolar);
		return;
	}
	if(operatorIndex == 25){
		set_pvar(SPVAR_51, tempPolar);
		return;
	}
	if(operatorIndex == 26){
		set_pvar(SPVAR_53, tempPolar);
		return;
	}
	if(operatorIndex == 27){
		set_pvar(SPVAR_55, tempPolar);
		return;
	}
	if(operatorIndex == 28){
		set_pvar(SPVAR_57, tempPolar);
		return;
	}
	if(operatorIndex == 29){
		set_pvar(SPVAR_59, tempPolar);
		return;
	}	
}
function SaveSecondaryGunData(){
	//old trick to concat int's
	if(polarX == 0 && polarY == 0){
		tempPolar = 0;
	}else{
		tempPolar = gunIndex[GUN_SECONDARY] * pow(10, 2) + polarX;
		tempPolar = tempPolar * pow(10, 2) + (127 - polarY);
	}
	if(operatorIndex == 0){	
		set_pvar(SPVAR_2, tempPolar);
		return;
	}
	if(operatorIndex == 1){
		set_pvar(SPVAR_4, tempPolar);
		return;
	}
	if(operatorIndex == 2){
		set_pvar(SPVAR_6, tempPolar);
		return;
	}
	if(operatorIndex == 3){
		set_pvar(SPVAR_8, tempPolar);
		return;
	}
	if(operatorIndex == 4){
		set_pvar(SPVAR_10, tempPolar);
		return;
	}
	if(operatorIndex == 5){
		set_pvar(SPVAR_12, tempPolar);
		return;
	}
	if(operatorIndex == 6){
		set_pvar(SPVAR_14, tempPolar);
		return;
	}
	if(operatorIndex == 7){
		set_pvar(SPVAR_16, tempPolar);
		return;
	}
	if(operatorIndex == 8){
		set_pvar(SPVAR_18, tempPolar);
		return;
	}
	if(operatorIndex == 9){
		set_pvar(SPVAR_20, tempPolar);
		return;
	}
	if(operatorIndex == 10){
		set_pvar(SPVAR_22, tempPolar);
		return;
	}
	if(operatorIndex == 11){
		set_pvar(SPVAR_24, tempPolar);
		return;
	}
	if(operatorIndex == 12){
		set_pvar(SPVAR_26, tempPolar);
		return;
	}
	if(operatorIndex == 13){
		set_pvar(SPVAR_28, tempPolar);
		return;
	}
	if(operatorIndex == 14){
		set_pvar(SPVAR_30, tempPolar);
		return;
	}
	if(operatorIndex == 15){
		set_pvar(SPVAR_32, tempPolar);
		return;
	}
	if(operatorIndex == 16){
		set_pvar(SPVAR_34, tempPolar);
		return;
	}
	if(operatorIndex == 17){
		set_pvar(SPVAR_36, tempPolar);
		return;
	}
	if(operatorIndex == 18){
		set_pvar(SPVAR_38, tempPolar);
		return;
	}
	if(operatorIndex == 19){
		set_pvar(SPVAR_40, tempPolar);
		return;
	}
	if(operatorIndex == 20){
		set_pvar(SPVAR_42, tempPolar);
		return;
	}
	if(operatorIndex == 21){
		set_pvar(SPVAR_44, tempPolar);
		return;
	}
	if(operatorIndex == 22){
		set_pvar(SPVAR_46, tempPolar);
		return;
	}
	if(operatorIndex == 23){
		set_pvar(SPVAR_48, tempPolar);
		return;
	}
	if(operatorIndex == 24){
		set_pvar(SPVAR_50, tempPolar);
		return;
	}
	if(operatorIndex == 25){
		set_pvar(SPVAR_52, tempPolar);
		return;
	}
	if(operatorIndex == 26){
		set_pvar(SPVAR_54, tempPolar);
		return;
	}
	if(operatorIndex == 27){
		set_pvar(SPVAR_56, tempPolar);
		return;
	}
	if(operatorIndex == 28){
		set_pvar(SPVAR_58, tempPolar);
		return;
	}
	if(operatorIndex == 29){
		set_pvar(SPVAR_60, tempPolar);
		return;
	}	
}

function VerifyMinMax(value, min, max){
	if(value > max){
		value = min;
		combo_run(VibrateShort);
	}
	if(value < min){
		value = max;
		combo_run(VibrateShort);
	}
	return value;
}
/*
╔═══════Rainbow Six Siege═══════════╗
║			Combos					║
╚═══════════════════════════════════╝
*/
combo BunnyHopShot{
    Set(BACK_BUTTON, 100);
	wait(100);
	BlockButton(BACK_BUTTON);
	wait(100);
	Set(BACK_BUTTON, 100);
	wait(100);
	BlockButton(BACK_BUTTON);
	wait(100);
}

combo PronShot {
	set_val(BACK_BUTTON, 100);
    wait(100);
    set_val(BACK_BUTTON, 0);
    wait(100);
}

combo RapidFire {
    Set(FIRE_BUTTON, 100);   
    wait(30); 
    Set(FIRE_BUTTON, 0);     
    wait(20); 
} 
combo RumbleOn{	
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   wait(100);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
}	
combo RumbleOff {						
   set_ledx(1, 1);
   set_rumble(RUMBLE_A, 50);
   wait(300);
   reset_rumble();
   wait(400);
}
combo SmartShot {
    set_val(LX_BUTTON,-100 + get_ival(LX_BUTTON));
    wait(SmartShotWait);
    set_val(LX_BUTTON,100 + get_ival(LX_BUTTON));
    wait(SmartShotWait);
}
combo StrafeShot {

    set_val(LX_BUTTON,-100 + get_ival(LX_BUTTON));
    wait(StrafeWait);
    set_val(LX_BUTTON,100 + get_ival(LX_BUTTON));
    wait(StrafeWait);
}
combo TeaBag(){ 
	Set(BACK_BUTTON, 100);
	wait(40);
	BlockButton(BACK_BUTTON);
	wait(60);
}
combo VibrateShort {
    set_rumble(RUMBLE_A, 50);
    wait(150);
    reset_rumble();
}
combo VibrateBlink {
    
    if (Modled) {
        set_rgb(255,0,0);
        set_rumble(RUMBLE_B,70);
    }    
        else {
            set_rgb(0,255,0);
            set_rumble(RUMBLE_A,35);
        }
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        set_rgb(255,0,0);
    
        else
            set_rgb(0,255,0);

    reset_rumble();
    reset_leds();
}

/*
╔═══════Rainbow Six Siege═══════════╗
║	    Utilities functions			║
╚═══════════════════════════════════╝
*/
	//Information functions	

function ClearScroll(scrollLine){
	for (forIndex = 0; forIndex < 127; forIndex++) {		 
		PrintCharacter(SPACE, forIndex, scrollLine);
	}
}	
	//Buttons funntions
function ButtonPress(button){
	return event_press(button);
} 
function ButtonRelease(button){return event_release(button);}
function ButtonHold(button){
	return get_val(button);
} 	
function BlockButton(button){
if (!get_ival(button))
	return; 
	set_val(button,0);
}
function Set(id,val){set_val(id, val);} 
function BlockAllButtons(){
	BlockButton(MENU_BUTTON);
	BlockButton(RELOAD_BUTTON);
    BlockButton(GUN_SWITCH_BUTTON);
    BlockButton(UP_BUTTON);
	BlockButton(DOWN_BUTTON);
	BlockButton(BACK_BUTTON);
    BlockButton(SELECT_BUTTON);
    BlockButton(LEFT_BUTTON);
    BlockButton(RIGHT_BUTTON);
    BlockButton(ADS_BUTTON);
    BlockButton(TACTICAL_BUTTON);
    BlockButton(MODS_BUTTON);
}
function DoubleTab(button) { 
	
	if (doubleTabActive) { 
		if(doubleTabLastButton != button) return 0;
	    doubleTabTime = doubleTabTime + get_rtime();
	    if (doubleTabTime > doublTabTriggerTime) {    
	        doubleTabCount 	= 0;                       
	        doubleTabTime 	= 0;                       
	        doubleTabActive = FALSE;                       
	        doubleTabLastButton = 0;
	    }                                             
	}                                                 
	if (ButtonRelease(button) && get_ptime(button) < 250) { 
	    if (doubleTabCount == 0) { 
	        doubleTabActive = TRUE;
	        doubleTabLastButton = button;
	    } else if (doubleTabCount == 1) {             
	        doubleTabCount = 0;                       
	      	return 1;                                   
	    }                                              
	    doubleTabCount = doubleTabCount + 1;          
	}                                                 
	return 0;                                        
}    
	//Utilities functions
function CenterText(f_chars,f_font) {                                                         
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}   
function GetAvilityChars(position){
if (avilityName[position + 1] != -1) return avilityName[position + 1] - avilityName[position] - 1;
	return sizeof(avilityName) - avilityName[position];
}
function GetOperatorChars(position){
	if (operatorName[position + 1] != -1) return operatorName[position + 1] - operatorName[position] - 1;
	return sizeof(operatorName) - operatorName[position];
}
function GetOperationChars(position){
		if (operationName[position + 1] != -1) return operationName[position + 1] - operationName[position] - 1;
		return sizeof(operationName) - operationName[position];
}
function GetShotModChars(position){
	if (fireModOption[position + 1] != -1) return fireModOption[position + 1] - fireModOption[position] - 1;
	return sizeof(fireModOption) - fireModOption[position];
}
function GetconfigurationChars(position){
		if (configuration[position + 1] != -1) return configuration[position + 1] - configuration[position] - 1;
		return sizeof(configuration) - configuration[position];
}
function GetGunTypeChars(position){
	if (gunType[position + 1] != -1) return gunType[position + 1] - gunType[position] - 1;
		return sizeof(gunType) - gunType[position];
}
function GetQickToggleChars(position){
	if (quickToggleInfo[position + 1] != -1) return quickToggleInfo[position + 1] - quickToggleInfo[position] - 1;
	return sizeof(quickToggleInfo) - quickToggleInfo[position];
}
function NumberToString(f_val,f_dgts, x_val,y_val) {
 
     if(f_dgts == 4) {
        putc_oled(bufferIndex, (f_val / 1000) + 48);
        f_val %= 1000;
        bufferIndex++;
    }
    if(f_dgts >= 3) {
        putc_oled(bufferIndex,(f_val / 100) + 48);
        f_val %= 100;
        bufferIndex++;
    }
    if(f_dgts >= 2) {
        putc_oled(bufferIndex,(f_val / 10) + 48);
        f_val %= 10;
        bufferIndex++;
    }
    putc_oled(bufferIndex,f_val + 48);
    puts_oled(x_val, y_val,1,bufferIndex,1);    
    bufferIndex = 1;
} 
function PrintCharacter(character, column, scrollLine){
	if(column > 0 && column < 127){
		putc_oled(1,character);
		puts_oled(column, scrollLine, 0, 1, 1);
	}
}	
function FindDigits(digits) {                         
	//  FindDigits(value)                                
	//        return Number of Digits in Value Passed     		                                                      
    digits = abs(digits);                               
    if(digits / 10000 > 0) return 5;                   
    if(digits /  1000 > 0) return 4;                   
    if(digits /   100 > 0) return 3;                   
    if(digits /    10 > 0) return 2;                   
                          return 1;                  
}
function LED(Colour) {

    set_led(LED_1,duint8(Colour*4));
    set_led(LED_2,duint8((Colour*4) + 1));
    set_led(LED_3,duint8((Colour*4) + 2));
    set_led(LED_4,duint8((Colour*4) + 3));
}