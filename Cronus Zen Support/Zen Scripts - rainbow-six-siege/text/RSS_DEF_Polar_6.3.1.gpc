/*
VVVVVVVV           VVVVVVVV                                     iiii          tttt                                            
V::::::V           V::::::V                                    i::::i      ttt:::t                                            
V::::::V           V::::::V                                     iiii       t:::::t                                            
V::::::V           V::::::V                                                t:::::t                                            
 V:::::V           V:::::V eeeeeeeeeeee    rrrrr   rrrrrrrrr  iiiiiiittttttt:::::ttttttt      aaaaaaaaaaaaa      ssssssssss   
  V:::::V         V:::::Vee::::::::::::ee  r::::rrr:::::::::r i:::::it:::::::::::::::::t      a::::::::::::a   ss::::::::::s  
   V:::::V       V:::::Ve::::::eeeee:::::eer:::::::::::::::::r i::::it:::::::::::::::::t      aaaaaaaaa:::::ass:::::::::::::s 
    V:::::V     V:::::Ve::::::e     e:::::err::::::rrrrr::::::ri::::itttttt:::::::tttttt               a::::as::::::ssss:::::s
     V:::::V   V:::::V e:::::::eeeee::::::e r:::::r     r:::::ri::::i      t:::::t              aaaaaaa:::::a s:::::s  ssssss 
      V:::::V V:::::V  e:::::::::::::::::e  r:::::r     rrrrrrri::::i      t:::::t            aa::::::::::::a   s::::::s      
       V:::::V:::::V   e::::::eeeeeeeeeee   r:::::r            i::::i      t:::::t           a::::aaaa::::::a      s::::::s   
        V:::::::::V    e:::::::e            r:::::r            i::::i      t:::::t    tttttta::::a    a:::::assssss   s:::::s 
         V:::::::V     e::::::::e           r:::::r           i::::::i     t::::::tttt:::::ta::::a    a:::::as:::::ssss::::::s
          V:::::V       e::::::::eeeeeeee   r:::::r           i::::::i     tt::::::::::::::ta:::::aaaa::::::as::::::::::::::s 
           V:::V         ee:::::::::::::e   r:::::r           i::::::i       tt:::::::::::tt a::::::::::aa:::as:::::::::::ss  
            VVV            eeeeeeeeeeeeee   rrrrrrr           iiiiiiii         ttttttttttt    aaaaaaaaaa  aaaa sssssssssss  
            
		╔═══════Rainbow Six Siege═══════════════════════════════════════════════════════════════════════════════╗
		║	Version: 	Polar 6.3.1 - Deffenders																║
		║	Cronus: 	Zen only																				║
		║	Platform: 	Multi																					║
		║	Controller: Multi																					║
		║	Game: 		Rainbow Six Siege																		║
		║	Author: 	Veritas																					║
		║	Discord:	https://discord.gg/tkGPX8HaNs															║
		║	NOTE:		You need to load the 2 scripts in order to work between defenders and attacker			║
		║				RSS_DEF and RSS_ATK																		║
		║   All Scripts Are Free. If you paid for a script, file a chargeback because you have been scammed.	║		
		╚═══════════════════════════════════════════════════════════════════════════════════════════════════════╝
*/
//══════════════════════════════════════════════════════════════════════════════════════════════
//Script Specific 
//══════════════════════════════════════════════════════════════════════════════════════════════
const string M590A1			= "M590A1";
const string P226MK25		= "P226 MK 25";
const string SMG11			= "SMG-11";
const string SPAS12			= "SPAS-12";
const string MP5			= "MP5";
const string BAILIFF410		= "BAILIFF 410";
const string USP40			= "USP40";
const string MK19MM			= "MK1 9MM";
const string AUGA2			= "AUG A2";
const string MP5K			= "MP5K";
const string P12			= "P12";
const string C75AUTO		= "C75 AUTO";
const string SUPERNOVA 		= "SUPERNOVA";
const string VECTOR45ACP	= "VECTOR .45";
const string TCSG12			= "TCSG12";
const string P229RC			= "P229 RC";
const string FMG9			= "FMG-9";
const string SIX12SD		= "SIX12 SD";
const string a57USG			= "5.7 USG";
const string D50			= "D-50";
const string MPX			= "MPX";
const string P10C			= "P-10C";
const string SMG12			= "SMG-12";
const string COMMANDO9		= "COMMANDO 9";
const string P10RONI		= "P10 RONI";
const string SUPERSHORTY	= "SUPER SHO..";
const string SDP9MM			= "SDP 9MM";
const string M45MEUSOC		= "M45 MEUSOC";
const string UMP45			= "UMP45";
const string M1014			= "M1014";
const string P90			= "P90";
const string P9				= "P9";
const string LFP586			= "LFP586";
const string MP7			= "MP7";
const string M870			= "M870";
const string a416CCARBINE	= "416CCARBINE";
const string a9X19VSN		= "9X19VSN";
const string SASG12			= "SASG-12";
const string PMM			= "PMM";
const string GSH18			= "GSH-18";
const string SGCQB			= "SGCQB";
const string a9MMC1			= "9MM C1";
const string SUPER90		= "SUPER90";
const string PRB92			= "PRB92";
const string a44MAGSEMIAUTO = ".44MAG SEMI";
const string AUGA3			= "AUG A3";
const string ITA12S			= "ITA12S";
const string ITA12L			= "ITA12L";
const string T5SMG			= "T-5 SMG";
const string Q929			= "Q-929";
const string M12			= "M12";
const string SPAS15			= "SPAS15";
const string LUISON			= "LUISON";
const string BEARING9		= "BEARING 9";
const string MP5SD			= "MP5SD";
const string SCORPIONEVO3A1	= "SCORPION";
const string FO12			= "FO-12";
const string RG15			= "RG15";
const string K1A			= "K1A";
const string BOSG			= "BOSG.12.2";
const string ALDA			= "ALDA 5.56";
const string ACS12			= "ACS12";
const string KERATOS		= "KERATOS.357";
const string BAILIFF 		= "BAILIFF 410";
const string MX4STORM		= "MX4 STORM";
const string SPSMG9			= "SPSMG9";
const string MK14EBR		= "MK 14 EBR";
const string DP27			= "DP-27";
const string SPEAR308		= "SPEAR .308";

const string operatorName[] 	= {
	/*------------------------------------------------Original Operators Deffendors------------------------------------------------*/
	"SMOKE",		"MUTE",			"CASTLE", 		"PULSE", 		"DOC",		"ROOK", 	"KAPKAN",	"TACHANKA",	"JAGER",	"BANDIT",
	//Black Ice		Dust Line		kull Rain		Red Crow
	"FROST",		"VALKYRIE",		"CAVEIRA",		"ECHO",
	//Velvet Shell	Health			Blood Orchid					White Noise
	"MIRA",		  /*No Operator*/	"LESION",		"ELA",			"VIGIL",	
	//Chimera		Para Bellum		Para Bellum		Grim Sky		Wind Bastion
	/*No Operator*/	"MAESTRO",		"ALIBI",		"CLASH",		"KAID",		
	//Burnt Horizon	Phantom Sight	Ember Rise		Shifting Tides
	"MOZZIE",		"WARDEN",		"GOYO",			"WAMAI",		
	//Void Edge 	Steel Wave		Shadow Legacy	Neon Dawn
	"ORYX",			"MELUSI",	   /*No Operator*/	"ARUNI", "THUNDERBIRD", ""};
const int16  operatorsByYear[] 	= {0, 10, 14, 18, 22, 26, 29};
int operatorsCount				= 29; 
const string avilityName[] 	= {"HEARTBEAT", "SENSOR", "SILENT", "STEP", "---", "YOKAI", "EVIL", "EYE", "CCE", "SHIELD", "STIM", "PISTOL", ""};
									//PULSE					CAVEIRA		  	ECHO			MAESTRO		  CLASH			DOC
const string enterSlotMsg[]		= {"Enter slot number", "for the", "Attacker script", ""};		
define OPERERATOR_TYPE_ATTACKERS= 0;
define OPERERATOR_TYPE_DEFENDERS= 1;
int operatorType				= OPERERATOR_TYPE_ATTACKERS;
int inAbilityCams				= FALSE;
int abilityDeploying			= FALSE;
//══════════════════════════════════════════════════════════════════════════════════════════════
//--LED
define BLUE      = 1;
define RED       = 2;
define GREEN     = 3;
define PINK      = 4;
define SKYBLUE	 = 5;
define YELLOW    = 6;
define WHITE     = 7;
	 
data(
	0,0,0,0, //0. Off
	2,0,0,0, //1. Blue
  	0,2,0,0, //2. Red
  	0,0,2,0, //3. Lime/Green
  	0,0,0,2, //4. Fuchsia/Pink
  	2,0,2,0, //5. SkyBlue
  	0,2,2,0, //6. Yellow
  	2,2,2,2  //7. White
);

const string attackers 			= " Attackers";
const string defenders			= " Defenders";
const string polarRecoild		= "Antirecoil";
const string configurationText	= "Configure";
const string operationYear[] 	= {"",		  	"Year 1",	"Year 2", 	"Year 3",	"Year 4",	"Year 5",	"Year 6",	""};
const string operationName[] 	= {"Original",	"Black",	"Velvet", 	"Chimera",	"Burnt", 	"Void", 	"Crimson",	""};
const string operationName2[] 	= {"Operators",	"Ice",		"Shell",	"",			"Horizon",	"Edge", 	"Heist",	""};

const string gunType[]			= {"ASSAULT RIFLE","SHOTGUN","HANDGUN","SUBMACHINE GUN","MACHINE PISTOL","MARKSMAN RIFLE","LIGHT MACHINE GUN","HAND GONNE",""};
const int16 operatorTypeMsg[] 	= {80,114,101,115,115,32,65,47,127,32,116,111,32,115,101,108,101,99,116,46,32};										
const int16 operatorSelMsg[] 	= {80,114,101,115,115,32,65,47,127,32,116,111,32,115,101,108,101,99,116,46,
									32,72,111,108,100,32,76,84,47,76,50,32,43,32,133,32,134,32,84,111,32,
									110,97,118,105,103,97,116,101,32,116,104,114,111,117,103,104,32,115,101,97,115,111,110,115,46,32};									
const string gunIndexMsg[]		= {"Primary", "Secondary", ""}
const string configuration[]	= {"Anti-recoil", "Guns", "Mods Values", "Reset", "QT On/Off", ""};
const string toggleMessage[]	= {"Crouch Spam", "Auto Lean", "Fast Pick", "Strafe", "Prone Shot", "Lean Spam", "RF for All", "Rapid Fire", ""};
const string toggleValuesMsg[]	= {"Crouch Spam", "Auto Lean", "Strafe", "Lean Spam", "tBag LOL", "RF Speed", ""};
const string toggleStatus[]		= {"OFF", "ON", ""};
const string saveMessage		= "SAVED";
int toggleValue					= 0;
int toggleIndex					= 0;
int forIndex 					= 1;	

define ASSAULTRIFLE				= 0;
define SHOTGUN					= 1;
define HANDGUN					= 2;
define SUBMACHINEGUN			= 3;
define MACHINEPISTOL 			= 4;
define MARKSMANRIFLE			= 5;	
define LIGHTMACHINEGUN			= 6;
define HANDGONNE				= 7;
define NO_GUN					= 8;

define GUN_PRIMARY				= 0;
define GUN_SECONDARY			= 1;

define DEFAULT 					= 0;
define OPERERATOR_TYPE_MOD 		= 1;
define OPERATOR_SELECTION_MOD 	= 2;
define OPERATOR_BY_YEAR_MOD 	= 3;
define GAME_MOD					= 4;
define ANTIRECOIL_MOD			= 5;
define GUN_SELECTION_MOD		= 6;
define RESET_MOD				= 7;
define CHANGE_SLOT_MOD			= 8;
define CONFIG_MOD				= 9;
define QUICK_TOGGLE_MOD			= 10;
define QUICK_TOGGLE_EDIT_MOD	= 11;

int currentMod					= DEFAULT;
int activeGun					= 0;
int displayOperatorTypeScrollOn	= FALSE;
int displayOperatorScrollOn		= FALSE;
int operatorsByYearIndex		= 0;	
int currentConfigModIndex		= 0;
int activeGunRF;
int operatorIndex				= 0;
int LINE_TOP					= 7;
int LINE_CENTER					= 25;
int LINE_BOTTOM					= 45;
int messageColumCount 			= 127;
int messageArrayLine			= 0;
int messageSize;

int slotNumber, secondScriptSlot;

int rapidFireSpeed 				= 30;
int tBagSpeed					= 30;
int crouchSpamSpeed				= 60;
int leanSpamSpeed				= 95;
int autoLeanSpeed				= 30;
int strafeSpeed 				= 200;
int RightStickDeadZone			= 10;
int autoScanTime				= 1280;

int tBagOn						= TRUE;
int crouchSpamOn				= FALSE;
int leanSpamOn					= FALSE;
int pronShotOn					= FALSE;
int rf4AllOn					= FALSE;
int autoLeanOn					= FALSE;
int rapidFireOn					= TRUE;
int strafeOn					= FALSE;
int fastPickOn					= FALSE;
int autoScanOn					= TRUE;
int autoScanActive				= FALSE;
	//Game buttons
int FireButton					= XB1_RT;
int AdsButton   				= XB1_LT;
int AbilityButton  				= XB1_RB;
int TacticalButton				= XB1_LB;
int SelectButton    			= XB1_A;
int CrouchButton    			= XB1_B;
int MeleeButton     			= XB1_RS;
int SprintButton    			= XB1_LS;
int ReloadButton  				= XB1_X;
int SwapButton      			= XB1_Y;
    //Special buttons
int ForceSwapButton 			= XB1_A;
	//Navigation buttons
int UpButton					= XB1_UP;
int RightButton					= XB1_RIGHT;
int DownButton					= XB1_DOWN;
int LeftButton					= XB1_LEFT;
int MenuButton					= XB1_MENU;
int ModsButton					= XB1_VIEW;
int RxButton					= XB1_RX;
int RyButton					= XB1_RY;
int LxButton					= XB1_LX;
int LyButton					= XB1_LY;	
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main block					║
╚═══════════════════════════════════╝
*/	
int abilityReleasingTime 	= 0;
int abilityCountDown		= 0;
int abilityTimeCheck		= FALSE;
int abilityReleasing		= FALSE;
int abilityActive			= FALSE;
int abilityFocus			= FALSE;
int abilityDeployCount		= 0;
int AREnabled 				= TRUE;
int QTEnabled				= TRUE;
int autoLeanDelay			= FALSE;
int i_val;
int polarV, polarH, tempPolar;
int primaryPolar[2], secondaryPolar[2], selectedGunRF[2], gunIndex[2],  gunCount[2];
int saveVar = -32768;
int autoLeanDelayCountDown = 0;
//Clean up for better speed
int FncBlockButton	= 0;
int BlockButton		= 0;
int RightXY, LeftXY;
int VmSpeed;
init{
	LoadSettings();	
	LoadSlotNumber();
	DisplayMod(OPERATOR_SELECTION_MOD);
	if(get_console() == PIO_PS4) VmSpeed = -6;
	if(get_console() == PIO_XB1) VmSpeed = -2;
}
main {	   
	vm_tctrl(VmSpeed);
	if(autoLeanDelay){                            
        autoLeanDelayCountDown += get_rtime();
        if(autoLeanDelayCountDown >= 3000){
        	autoLeanDelay	= FALSE;
        }
	}
	
	//This will turn Heir Trigger on
	if(get_ival(AdsButton) 	> 10) 	Set(AdsButton, 	100);
	if(get_ival(FireButton) > 10)	Set(FireButton, 100);	
	if(ButtonHold(AdsButton) && ButtonPress(MenuButton)) DisplayMod(OPERATOR_SELECTION_MOD);
	if(ButtonHold(AdsButton) && ButtonPress(ModsButton)) DisplayMod(CONFIG_MOD);
	
	if(currentMod == GAME_MOD){
		if(!abilityActive){			
			//Gun switch 	
			if(ButtonRelease(SwapButton) && get_ptime(SwapButton) < 500){
				if(!ButtonHold(TacticalButton) && !ButtonHold(AbilityButton) && !ButtonHold(LeftButton)){
					activeGun = !activeGun;
				}
				DisplaySwitchGun();	
			}
			//Force Gun switch    	
			if(ButtonHold(AdsButton) && DoubleTab(ForceSwapButton)){ 
				activeGun 	= !activeGun;
				DisplaySwitchGun();
				BlockButton	= ForceSwapButton;
			}
			
			//Pron Shot
			if(ButtonPress(FireButton) && pronShotOn) Set(CrouchButton, 100);  
			//Auto Scan
			if(autoScanOn && ButtonHold(SwapButton) && get_ptime(SwapButton) >= autoScanTime) autoScanActive = TRUE;
	        if(autoScanActive) combo_run(AutoScan);
	        if(ButtonPress(DownButton) || ButtonPress(CrouchButton)	&& combo_running(AutoScan)){autoScanActive = FALSE; combo_stop(AutoScan);}
			//Crouch Spam
			if(crouchSpamOn && ButtonHold(FireButton) 	&& get_ptime(FireButton) > 200) combo_run(CrouchSpam);
			if(crouchSpamOn && !ButtonHold(FireButton) 	&& combo_running(CrouchSpam)) 	combo_stop(CrouchSpam);
			//Lean Spam
			if(leanSpamOn 	&& ButtonHold(AdsButton) 	&& ButtonHold(FireButton)) 		combo_run(LeanSpam);
			if(leanSpamOn	&& !ButtonHold(FireButton)	&& combo_running(LeanSpam)) 	combo_stop(LeanSpam);
			//Teabugging LOL
			if(tBagOn && ButtonHold(DownButton) && get_ptime(DownButton) >= 250) 		combo_run(TeaBag);	
			// Run AutoLean
			if(autoLeanOn && ButtonPress(ReloadButton)){
				autoLeanDelayCountDown = 0;
				autoLeanDelay = TRUE;
			}
			if(autoLeanOn && !ButtonHold(FireButton)){
				if(ButtonHold(AdsButton) && abs(get_val(LxButton)) > autoLeanSpeed){
					if(get_val(LxButton) < 0){
						if(!get_val(SprintButton)){
							Set(SprintButton, 100);
						}
					}else{
						if(!get_val(MeleeButton)){
							if(!autoLeanDelay){								
								Set(MeleeButton, 100);
							}
						}
					}
				}
			}
			//Strafe
			if(strafeOn && ButtonHold(FireButton)) combo_run(Strafe);
			if(strafeOn && !ButtonHold(FireButton) && combo_running(Strafe)) combo_stop(Strafe);
			if(strafeOn && ((get_val(LyButton) <= -70) || (get_val(LyButton) >= 70) || 
						    (get_val(LxButton) <= -70) || (get_val(LxButton) >= 70))) combo_stop(Strafe);
			//FastPick			
			if(fastPickOn && ButtonHold(AdsButton)){
				if(ButtonPress(RightButton)){
					combo_run(FastPickRight);
				}
				if(ButtonPress(LeftButton)){
					combo_run(FastPickLeft);
				}
				if(ButtonPress(UpButton)){
					combo_run(FastPickUp);
				}
				Unset(RightButton);
				Unset(LeftButton);
				Unset(UpButton);
			}

		}
		if(abilityFocus || !abilityActive){
			if(AREnabled) {
		    	if(get_ival(FireButton)){
		    		RightXY = isqrt(pow(get_val(RxButton), 2)) + isqrt(pow(get_val(RyButton), 2));		    		
		    		LeftXY	= isqrt(pow(get_val(LxButton), 2)) + isqrt(pow(get_val(LyButton), 2));
		    		
		    		if(RightXY < RightStickDeadZone && LeftXY < RightStickDeadZone){					
		    			set_polar(POLAR_RS, polarH ,(polarV * 326));
		    		}else{
		    			set_polar(POLAR_RS, polarH ,(polarV - (isqrt(pow(get_val(RyButton), 2))) * 326));
		    		}
		    	}
			}
			//Rapid Fire for all
			if((rf4AllOn || activeGunRF) && rapidFireOn){
				if(ButtonHold(FireButton))	combo_run(RapidFire);
				else						combo_stop(RapidFire);    	
			}
		}
		if(QTEnabled){
			//Quick Toggle		
			if(ButtonHold(AdsButton)){
				if(DoubleTab(UpButton)){
					crouchSpamOn 	= !crouchSpamOn;
					toggleIndex 	= 0;
					toggleValue		= crouchSpamOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);					
				}
				if(DoubleTab(RightButton)){
					strafeOn 		= !strafeOn;
					toggleIndex 	= 3;
					toggleValue		= strafeOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				if(DoubleTab(LeftButton)){			
					fastPickOn 		= !fastPickOn;
					toggleIndex 	= 2;
					toggleValue		= fastPickOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				if(DoubleTab(DownButton)){
					autoLeanOn 		= !autoLeanOn;
					toggleIndex 	= 1;
					toggleValue		= autoLeanOn;
					if(toggleValue) combo_run(ToggleOn);
					else combo_run(ToggleOff)
					combo_run(QuickToggleNotify);
				}
				Unset(RightButton);				
				Unset(DownButton);
				if(ButtonHold(LeftButton)){
					Unset(LeftButton);
					if(ButtonPress(ReloadButton)){
						pronShotOn 		= !pronShotOn;
						toggleIndex 	= 4;
						toggleValue		= pronShotOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(SwapButton)){
						leanSpamOn 		= !leanSpamOn;
						toggleIndex 	= 5;
						toggleValue		= leanSpamOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(CrouchButton)){
						rf4AllOn 		= !rf4AllOn;
						toggleIndex 	= 6;
						toggleValue		= rf4AllOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					if(ButtonPress(SelectButton)){
						rapidFireOn 	= !rapidFireOn;
						toggleIndex 	= 7;
						toggleValue		= rapidFireOn;
						if(toggleValue) combo_run(ToggleOn);
						else combo_run(ToggleOff)
						combo_run(QuickToggleNotify);
					}
					Unset(SwapButton);
					Unset(SelectButton);
					Unset(CrouchButton);
					Unset(ReloadButton);
				}				
				
			}
		}
		
		//Enter/Exit the operator avility
		if(abilityActive){			
			CheckAbilityOff();
		}else{
			DisplayAbility();
		}	
	}
	else if(currentMod == CONFIG_MOD){	
		if(ButtonPress(LeftButton)){
			currentConfigModIndex --;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonPress(RightButton)){
			currentConfigModIndex ++;
			currentConfigModIndex = VerifyMinMax(currentConfigModIndex, 0, 4);
			DisplayConfiguration();
		}
		if(ButtonRelease(SelectButton)){ 			
			if(currentConfigModIndex == 0) DisplayMod(ANTIRECOIL_MOD);
			if(currentConfigModIndex == 1) DisplayMod(GUN_SELECTION_MOD);
			if(currentConfigModIndex == 2) DisplayMod(QUICK_TOGGLE_MOD);	
			if(currentConfigModIndex == 3) DisplayMod(RESET_MOD);
			if(currentConfigModIndex == 4){
				QTEnabled = !QTEnabled; 
				DisplayConfiguration();
				SaveSettings();
			}
		}
		if(ButtonPress(CrouchButton)){ 
			DisplayMod(GAME_MOD);
		}
		UnsetAllButtons();		
	}		    
	else if(currentMod == OPERATOR_SELECTION_MOD){  
		DisplayScrollMode();
		if(ButtonPress(CrouchButton)) DisplayMod(OPERERATOR_TYPE_MOD);
		if(ButtonPress(LeftButton)	&&	!ButtonHold(AdsButton)){
			operatorIndex = VerifyMinMax(operatorIndex --, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonPress(RightButton)	&&	!ButtonHold(AdsButton)){
			operatorIndex = VerifyMinMax(operatorIndex ++, 0, operatorsCount);
			DisplayOperatorSelection();
		}
		if(ButtonPress(LeftButton) 	&&	ButtonHold(AdsButton)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex --, 0, 6)
			DisplayOperatorByYear();
		}
		if(ButtonPress(RightButton)	&&	ButtonHold(AdsButton)){
			operatorsByYearIndex = VerifyMinMax(operatorsByYearIndex ++, 0, 6)
			DisplayOperatorByYear();
		}
		if(ButtonRelease(AdsButton)) DisplayOperatorSelection();			
		if(ButtonPress(SelectButton)){
			activeGun = GUN_PRIMARY;
			gunIndex[GUN_PRIMARY] = 1;
			gunIndex[GUN_SECONDARY] = 1;
			ActivateOperator();
		}
		UnsetAllButtons();
	}     
	else if(currentMod == OPERERATOR_TYPE_MOD){	 
		DisplayScrollMode();
		if(ButtonPress(UpButton) || ButtonPress(DownButton)){
			operatorType 	= !operatorType;
			DisplayMod(OPERERATOR_TYPE_MOD);
			BlockButton = UpButton;
			FncBlockButton = DownButton;
		}		    
		if(ButtonRelease(SelectButton)) { 	  		
			DisplayMod(OPERATOR_SELECTION_MOD);
			BlockButton = SelectButton;
		}	
		UnsetAllButtons();
	}		
	else if(currentMod == ANTIRECOIL_MOD){	
		
	    if(get_val(AdsButton) && get_val(FireButton)){
			if(isqrt(pow(get_val(RxButton), 2) + pow(get_val(RyButton), 2)) < RightStickDeadZone){ 
				set_polar(POLAR_RS, polarH ,(polarV * 326));
			}
		}
			
		//Rapid Fire for all
		if((rf4AllOn || activeGunRF) && rapidFireOn){
			if(ButtonHold(FireButton))	combo_run(RapidFire);
			else						combo_stop(RapidFire);    	
		}

		if(	ButtonRelease(LeftButton) || ButtonRelease(RightButton) ||
			ButtonRelease(DownButton) || ButtonRelease(UpButton) ){
			DisplayAntiRecoilMenu(0);
		}
		if(ButtonPress(LeftButton)){
			AdjustRecoilValue(1);
		}
		if(ButtonPress(RightButton)){
			AdjustRecoilValue(2);
		}
		if(ButtonPress(UpButton)){
			AdjustRecoilValue(3);
		}
		if(ButtonPress(DownButton)){
			AdjustRecoilValue(4);	
		}
		if(ButtonPress(CrouchButton)){
			DisplayMod(CONFIG_MOD);
		}
		if(ButtonPress(SelectButton)){
			if(activeGun == GUN_PRIMARY){
				SavePrimaryGunData();
			}else{
				SaveSecondaryGunData();
			}
			DisplayMod(GAME_MOD);
		}
			
		Unset(UpButton);
		Unset(DownButton);
		Unset(LeftButton);
		Unset(RightButton);
		Unset(SelectButton);
		Unset(CrouchButton);
	}
	else if(currentMod == GUN_SELECTION_MOD){	
		if(ButtonPress(LeftButton)){
			gunIndex[activeGun] --;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
			if(activeGun == GUN_PRIMARY){
				LoadPrimaryGunInfo();
			}else{
				LoadSecondaryGunInfo();
			}
		}
		if(ButtonPress(RightButton)){
			gunIndex[activeGun] ++;
			gunIndex[activeGun] =  VerifyMinMax(gunIndex[activeGun], 1, gunCount[activeGun]);
			DisplayGunSelection();
			if(activeGun == GUN_PRIMARY){
				LoadPrimaryGunInfo();
			}else{
				LoadSecondaryGunInfo();
			}
		}
		if(ButtonPress(SelectButton)){
			if(activeGun == GUN_PRIMARY){
				SavePrimaryGunData();
			}else{
				SaveSecondaryGunData();
			}
			ActivateOperator();
		}
		if(ButtonPress(CrouchButton)) DisplayMod(CONFIG_MOD);	
		UnsetAllButtons();
	}	
	else if(currentMod == CHANGE_SLOT_MOD){
		if(slotNumber == 0){
			if(ButtonPress(LeftButton)){
				secondScriptSlot--;
				if(secondScriptSlot == get_slot()) secondScriptSlot --;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
			}
			if(ButtonPress(RightButton)){
				secondScriptSlot ++;
				if(secondScriptSlot == get_slot()) secondScriptSlot ++;
				secondScriptSlot = VerifyMinMax(secondScriptSlot, 1, 8);
				DisplayEnterSlotNumber();
			}
			if(ButtonPress(SelectButton)){
				slotNumber = secondScriptSlot;
				set_pvar(SPVAR_63, 	secondScriptSlot);
			}	
			if(ButtonPress(CrouchButton)){
				DisplayMod(OPERERATOR_TYPE_MOD);
			}
		}else{				
			load_slot(slotNumber);
		}
		UnsetAllButtons();
	}	
	else if(currentMod == QUICK_TOGGLE_MOD){		
		if(ButtonPress(LeftButton)){
			toggleIndex --;
			toggleIndex =  VerifyMinMax(toggleIndex, 0, 5);
			DisplayQuickToggles();
		}
		if(ButtonPress(RightButton)){
			toggleIndex ++;
			toggleIndex =  VerifyMinMax(toggleIndex, 0, 5);
			DisplayQuickToggles();
		}
		if(ButtonRelease(SelectButton)){
			Unset(SelectButton);
			DisplayMod(QUICK_TOGGLE_EDIT_MOD);
		}
		if(ButtonPress(CrouchButton)){ 
			DisplayMod(CONFIG_MOD);
		}
		UnsetAllButtons();
		
	}
	else if(currentMod == QUICK_TOGGLE_EDIT_MOD){
		if(ButtonPress(LeftButton) || ButtonPress(RightButton)){
			if(toggleIndex == 0) crouchSpamSpeed = EditQTValues(crouchSpamSpeed, 5, 200);
			if(toggleIndex == 1) autoLeanSpeed = EditQTValues(autoLeanSpeed, 5, 200);
			if(toggleIndex == 2) strafeSpeed = EditQTValues(strafeSpeed, 5, 200);
			if(toggleIndex == 3) leanSpamSpeed = EditQTValues(leanSpamSpeed, 5, 200);
			if(toggleIndex == 4) tBagSpeed = EditQTValues(tBagSpeed, 5, 100);
			if(toggleIndex == 5) rapidFireSpeed = EditQTValues(rapidFireSpeed, 5, 200);
			DisplayQuickTogglesEdit();
		}
		if(ButtonRelease(SelectButton)){
			SaveSettings();
			DisplayMod(GAME_MOD);
		}
		if(ButtonPress(CrouchButton)) DisplayMod(QUICK_TOGGLE_MOD);
		UnsetAllButtons();	
	}
	else DisplayScrollMode();	
	ButtonClear();
}
/*
╔═══════Rainbow Six Siege═══════════╗
║	Script specific	functions		║
╚═══════════════════════════════════╝
*/	
function CheckAbilityOff(){
	if(abilityTimeCheck){				
		abilityCountDown += get_rtime();
		if(abilityCountDown >= abilityReleasingTime) {
			CloseAvility();
			return;
		}
	}
	if(operatorIndex == 4)/*DOC	*/{ 
		if(ButtonRelease(SwapButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
	}
	if(operatorIndex == 12)/*CAVEIRA */{ 	
		if(ButtonRelease(TacticalButton)) 	CloseAvility();
		if(ButtonRelease(DownButton)) 		CloseAvility();
		if(ButtonRelease(SwapButton)) 		CloseAvility();
		if(ButtonRelease(AbilityButton)){
			abilityReleasing = TRUE;
			CloseAvility();
		}
	}
	if(operatorIndex == 13)/*ECHO */{ 
		if(abilityDeployCount > 0 && ButtonPress(DownButton)){
			CloseAvility();
			return;
		}
		if(ButtonPress(DownButton) || ButtonPress(CrouchButton)){
			if(inAbilityCams){
				inAbilityCams = FALSE;
			}else{
				CloseAvility();
				return;
			}
		}
	}
	if(operatorIndex == 18)/*MAESTRO*/{
		if(ButtonPress(DownButton) 		&& inAbilityCams){
			inAbilityCams = FALSE;
			return;
		}
		if(ButtonPress(DownButton) 		&& !abilityDeploying){
			CloseAvility();
			return;
		}
		if(ButtonPress(CrouchButton) 	&& !abilityDeploying){
			CloseAvility();
			inAbilityCams = FALSE;
			abilityDeploying = FALSE;
		}
		if(ButtonPress(SwapButton)		&& abilityDeploying){
			activeGun	= !activeGun;
			CloseAvility()
		}
		if(ButtonHold(ReloadButton) 	&& get_ptime(ReloadButton) > 1700){
			if(abilityDeployCount < 2){
				abilityDeployCount ++;
				abilityDeploying = FALSE;
				CloseAvility();
			}
		}
		if(ButtonPress(AbilityButton) 	&& abilityDeployCount < 2 && !inAbilityCams){
			abilityReleasing = TRUE;
			abilityDeploying = FALSE;
			CloseAvility();
		}
	} 
	if(operatorIndex == 20)/*CLASS*/{
		if(ButtonRelease(TacticalButton) 	|| 
			ButtonPress(DownButton)){  
			abilityReleasing = TRUE;
			CloseAvility();
		}
		if(ButtonRelease(AbilityButton)){ 
			abilityReleasing = TRUE;
			CloseAvility();
		}
		if(ButtonRelease(SwapButton)){ 			
			CloseAvility();
		}
		
	}
}
function DisplayAbility(){ 
	if(abilityReleasing){
		abilityReleasing = FALSE;
		return;
	}
	if(operatorIndex == 4)/*DOC	*/{ 
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(10);
			abilityActive = TRUE;
		}
	}
	if(operatorIndex == 12)/*CAVEIRA */{ 	
		if(ButtonRelease(AbilityButton) || ButtonRelease(DownButton)){
			if(activeGun != GUN_SECONDARY){
				 activeGun	= !activeGun;
				 DisplaySwitchGun();
			}
			PrintAvilityName(2);
			abilityActive 			= TRUE;
			abilityReleasingTime 	= 12500;
			abilityCountDown		= 0;
			abilityTimeCheck		= TRUE;
			abilityFocus			= TRUE;
			
		}
	}
	if(operatorIndex == 13)/*ECHO */{ 
		if(ButtonPress(AbilityButton) && !inAbilityCams){
			if(abilityDeployCount < 2){
				abilityDeployCount ++:
			}else{
				PrintAvilityName(4);
				abilityActive = TRUE;
			}
		}
		if(abilityDeployCount > 0 && ButtonPress(DownButton)){
			PrintAvilityName(4);
			abilityActive = TRUE;
		}
		if(abilityDeployCount > 0 && ButtonPress(SwapButton)){
			PrintAvilityName(4);
			abilityActive = TRUE;
		}
		if(abilityDeployCount == 0 && ButtonPress(DownButton)){
			inAbilityCams = TRUE;
		}
	}
	if(operatorIndex == 18)/*MAESTRO*/{ 
		if(ButtonPress(AbilityButton)){
			PrintAvilityName(6);
			abilityActive = TRUE;
			if(abilityDeployCount < 2) abilityDeploying = TRUE;
		}
		if(abilityDeployCount > 0 && ButtonPress(DownButton)){
			PrintAvilityName(6);
			abilityActive = TRUE;
		}
		if(abilityDeployCount == 0 && ButtonPress(DownButton)){
			inAbilityCams = TRUE;
		}
	}
	if(operatorIndex == 20)/*CLASH -*/{
		if(ButtonRelease(AbilityButton)){
			PrintAvilityName(8);
			abilityActive 	= TRUE;		
		}
		if(ButtonRelease(SwapButton)){
			PrintAvilityName(8);
			abilityActive 	= TRUE;	
		}
	}
}
function DisplayGunType(){
	if(operatorIndex == 0)/*SMOKE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{	
				PrintGunType(HANDGUN);
			}
		}	
		return;
	}
	if(operatorIndex == 1)/*MUTE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}		
		return;
	}
	if(operatorIndex == 2)/*CASTLE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(HANDGUN);
			}
		}	
		return;
	}
	if(operatorIndex == 3)/*PULSE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 4)/*DOC*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunType(SUBMACHINEGUN);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunType(SHOTGUN); 				
			}				
		}else{				
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 5)/*ROOK*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunType(SUBMACHINEGUN);
			}else if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 6)/*KAPKAN*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN); 
			}else{	
				PrintGunType(SHOTGUN); 	
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 7)/*TACHANKA*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN); 
			}else{	
				PrintGunType(LIGHTMACHINEGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 8)/*JAGER*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 9)/*BANDIT*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{	
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			PrintGunType(HANDGUN);
		}
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*FROST*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(HANDGUN);			
			}else{
				PrintGunType(SHOTGUN); 
			}			
		}	
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 
			}			
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SHOTGUN); 
			}else{
				PrintGunType(HANDGUN);
			}	
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);									
			}else{
				PrintGunType(SHOTGUN); 
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*MAESTRO*/{ 
		if(activeGun == GUN_PRIMARY){		
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN); 
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}		
	if(operatorIndex == 19)/*ALIBI*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 20)/*CLASH*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			PrintGunType(HANDGUN);
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(SUBMACHINEGUN);
		}		
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(SUBMACHINEGUN);
			}				
		}else{
			PrintGunType(HANDGUN);
		}	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{	
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(HANDGUN); 				
			}	
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE); 
			}else{
				PrintGunType(MACHINEPISTOL);
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}			
		return;
	}
	//══▶Year 6
	if(operatorIndex == 28)/*ARUNI-*/{ 		
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(SUBMACHINEGUN);
			}else{
				PrintGunType(MARKSMANRIFLE); 				
			}				
		}else{
			PrintGunType(HANDGUN);
		}			
		return;
	}
	if(operatorIndex == 29)/*THUNDERBIRD-*/{ 		
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunType(ASSAULTRIFLE);
			}else{
				PrintGunType(SHOTGUN); 				
			}				
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunType(MACHINEPISTOL);
			}else{
				PrintGunType(HANDGUN); 				
			}
		}			
		return;
	}
}
function DisplayGunName(){
	if(operatorIndex == 0)/*SMOKE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(FMG9), FMG9[0]);
			}else{	
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(SMG11), SMG11[0]);
			}else{	
				PrintGunName(sizeof(P226MK25), P226MK25[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 1)/*MUTE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5K), MP5K[0]);
			}else{	
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P226MK25), P226MK25[0]);
			}else{	
				PrintGunName(sizeof(SMG11), SMG11[0]);
			}	
		}		
		return;
	}
	if(operatorIndex == 2)/*CASTLE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(UMP45), UMP45[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(SUPERSHORTY), SUPERSHORTY[0]);
			}else{
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 3)/*PULSE*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(UMP45), UMP45[0]);
			}else{
				PrintGunName(sizeof(M1014), M1014[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(M45MEUSOC), M45MEUSOC[0]);
			}else{
				PrintGunName(sizeof(a57USG), a57USG[0]);
			}
		}
		return;
	}
	if(operatorIndex == 4)/*DOC*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(P90), P90[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P9), P9[0]);
			}else{
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}
		return;
	}
	if(operatorIndex == 5)/*ROOK*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else if(gunIndex[GUN_PRIMARY] == 2){
				PrintGunName(sizeof(P90), P90[0]);
			}else  if(gunIndex[GUN_PRIMARY] == 3){
				PrintGunName(sizeof(SGCQB), SGCQB[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(P9), P9[0]);
			}else{
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 6)/*KAPKAN*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a9X19VSN), a9X19VSN[0]);
			}else{	
				PrintGunName(sizeof(SASG12), SASG12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{	
				PrintGunName(sizeof(GSH18), GSH18[0]);
			}
		}
		return;
	}
	if(operatorIndex == 7)/*TACHANKA*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a9X19VSN), a9X19VSN[0]);
			}else{	
				PrintGunName(sizeof(DP27), DP27[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(PMM), PMM[0]);
			}else{	
				PrintGunName(sizeof(GSH18), GSH18[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 8)/*JAGER*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a416CCARBINE), a416CCARBINE[0]);
			}else{	
				PrintGunName(sizeof(M870), M870[0]);
			}
		}else{	
			PrintGunName(sizeof(P12), P12[0]);
		}	
		return;
	}
	if(operatorIndex == 9)/*BANDIT*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP7), MP7[0]);
			}else{	
				PrintGunName(sizeof(M870), M870[0]);
			}
		}else{	
			PrintGunName(sizeof(P12), P12[0]);
		}
		return;
	}	
	//══▶Year 1
	if(operatorIndex == 10)/*FROST*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(a9MMC1), a9MMC1[0]);
			}else{
				PrintGunName(sizeof(SUPER90), SUPER90[0]);
			}
		}else{	
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(MK19MM), MK19MM[0]);
			}else{
				PrintGunName(sizeof(ITA12S), ITA12S[0]);
			}
		}	
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MPX), MPX[0]);
			}else{
				PrintGunName(sizeof(SPAS12), SPAS12[0]);
			}
		}else{
			PrintGunName(sizeof(D50), D50[0]);
		}	
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(M12), M12[0]);
			}else{
				PrintGunName(sizeof(SPAS15), SPAS15[0]);
			}
		}else{
			PrintGunName(sizeof(LUISON), LUISON[0]);
		}
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5SD), MP5SD[0]);
			}else{
				PrintGunName(sizeof(SUPERNOVA), SUPERNOVA[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BEARING9), BEARING9[0]);
			}else{
				PrintGunName(sizeof(P229RC), P229RC[0]);
			}
		}	
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(VECTOR45ACP), VECTOR45ACP[0]);
			}else{
				PrintGunName(sizeof(ITA12L), ITA12L[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(ITA12S), ITA12S[0]);
			}else{
				PrintGunName(sizeof(USP40), USP40[0]);
			}
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(T5SMG), T5SMG[0]);
			}else{
				PrintGunName(sizeof(SIX12SD), SIX12SD[0]);
			}
		}else{
			PrintGunName(sizeof(Q929), Q929[0]);
		}
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(SCORPIONEVO3A1), SCORPIONEVO3A1[0]);
			}else{
				PrintGunName(sizeof(FO12), FO12[0]);
			}
		}else{
			PrintGunName(sizeof(RG15), RG15[0]);
		}
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(K1A), K1A[0]);
			}else{
				PrintGunName(sizeof(BOSG), BOSG[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(C75AUTO), C75AUTO[0]);
			}else{
				PrintGunName(sizeof(SMG12), SMG12[0]);
			}
		}	
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*MAESTRO*/{ 
		if(activeGun == GUN_PRIMARY){		
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(ALDA), ALDA[0]);
			}else{
				PrintGunName(sizeof(ACS12), ACS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BAILIFF), BAILIFF[0]);
			}else{
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}
		}	
		return;
	}	
	if(operatorIndex == 19)/*ALIBI -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MX4STORM), MX4STORM[0]);
			}else{
				PrintGunName(sizeof(ACS12), ACS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}else{
				PrintGunName(sizeof(BAILIFF), BAILIFF[0]);
			}
		}
		return;
	}
	if(operatorIndex == 20)/*CLASH -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			PrintGunName(sizeof(P10C), P10C[0]);
		}else{
			PrintGunName(sizeof(SPSMG9), SPSMG9[0]);
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AUGA3), AUGA3[0]);
			}else{
				PrintGunName(sizeof(TCSG12), TCSG12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(LFP586), LFP586[0]);
			}else{
				PrintGunName(sizeof(a44MAGSEMIAUTO), a44MAGSEMIAUTO[0]);
			}
		}		
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(COMMANDO9), COMMANDO9[0]);
			}else{
				PrintGunName(sizeof(P10RONI), P10RONI[0]);
			}
		}else{
			PrintGunName(sizeof(SDP9MM), SDP9MM[0]);
		}	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 
		if(activeGun == GUN_PRIMARY){				
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MPX), MPX[0]);
			}else{
				PrintGunName(sizeof(M590A1), M590A1[0]);
			}
		}else{				
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(SMG12), SMG12[0]);
			}else{
				PrintGunName(sizeof(P10C), P10C[0]);
			}
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(VECTOR45ACP), VECTOR45ACP[0]);
			}else{
				PrintGunName(sizeof(TCSG12), TCSG12[0]);
			}
		}else{
			PrintGunName(sizeof(P229RC), P229RC[0]);
		}
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(AUGA2), AUGA2[0]);
			}else{
				PrintGunName(sizeof(MP5K), MP5K[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(KERATOS), KERATOS[0]);
			}else{
				PrintGunName(sizeof(P12), P12[0]);
			}
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(T5SMG), T5SMG[0]);
			}else{
				PrintGunName(sizeof(SPAS12), SPAS12[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BAILIFF410), BAILIFF410[0]);
			}else{
				PrintGunName(sizeof(USP40), USP40[0]);
			}
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(MP5), MP5[0]);
			}else{
				PrintGunName(sizeof(SUPER90), SUPER90[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(RG15), RG15[0]);

			}else{
				PrintGunName(sizeof(PRB92), PRB92[0]);
			}
		}			
		return;
	}
	//══▶Year 6
	if(operatorIndex == 28)/*ARUNI-*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(P10RONI),  P10RONI[0]);
			}else{					
				PrintGunName(sizeof(MK14EBR),  MK14EBR[0]);
			}
		}else{
			PrintGunName(sizeof(PRB92),  PRB92[0]);
		}			
		return;
	}
	if(operatorIndex == 29)/*THUNDERBIRD-*/{ 
		if(activeGun == GUN_PRIMARY){
			if(gunIndex[GUN_PRIMARY] == 1){
				PrintGunName(sizeof(SPEAR308),  SPEAR308[0]);
			}else{					
				PrintGunName(sizeof(SPAS15),  SPAS15[0]);
			}
		}else{
			if(gunIndex[GUN_SECONDARY] == 1){
				PrintGunName(sizeof(BEARING9), BEARING9[0]);

			}else{
				PrintGunName(sizeof(Q929), Q929[0]);
			}
		}			
		return;
	}
}
function LoadGunRF(){
	if(operatorIndex == 0)/*SMOKE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{	
			selectedGunRF[0] = 1; //To DO
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 0;						
		}else{	
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 1)/*MUTE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{	
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{	
			selectedGunRF[1] = 0; 
		}	
		return;
	}
	if(operatorIndex == 2)/*CASTLE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 3)/*PULSE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 4)/*DOC*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){
			selectedGunRF[0] = 0;
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			selectedGunRF[0] = 1;  
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 5)/*ROOK*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else if(gunIndex[GUN_PRIMARY] == 2){
			selectedGunRF[0] = 0;
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			selectedGunRF[0] = 1;  
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 6)/*KAPKAN*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{	
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{	
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 7)/*TACHANKA*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{	
			selectedGunRF[0] = 0;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{	
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 8)/*JAGER*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{	
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1;				
		return;
	}
	if(operatorIndex == 9)/*BANDIT*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{	
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1;				
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*FROST**/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1;
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1;	
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 			
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1;	
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1; 
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*ALIBI -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 19)/*MAESTRO*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}		
	if(operatorIndex == 20)/*CLASH -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 1;
		}else{
			selectedGunRF[0] = 0; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 0; 
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 0; 
		}
		selectedGunRF[1] = 1; 	
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 				
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 0;
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{
			selectedGunRF[0] = 1; 
		}
		selectedGunRF[1] = 1;
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0; 
		}else{
			selectedGunRF[0] = 0; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{
			selectedGunRF[1] = 1; 
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1; 
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 1; 
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1; 	
		return;
	}
	//══▶Year 6
	if(operatorIndex == 28)/*ARUNI*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		selectedGunRF[1] = 1; 	
		return;
	}
	if(operatorIndex == 29)/*THUNDERBIRD*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			selectedGunRF[0] = 0;
		}else{
			selectedGunRF[0] = 1;
		}
		if(gunIndex[GUN_SECONDARY] == 1){
			selectedGunRF[1] = 0; 
		}else{
			selectedGunRF[1] = 1;
		}
		return;
	}
}
function LoadPrimaryGunInfo(){
	gunCount[0] 		= 2;	
	if(operatorIndex == 0)/*SMOKE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,82);
		}else{	
			ConfigurePrimary(20,80);
		}
		return;
	}
	if(operatorIndex == 1)/*MUTE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,92);
		}else{	
			ConfigurePrimary(20,80);
		}
		return;
	}
	if(operatorIndex == 2)/*CASTLE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(26,95);
		}else{
			ConfigurePrimary(40,90);
		}
		return;
	}
	if(operatorIndex == 3)/*PULSE*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(26,93);
		}else{
			ConfigurePrimary(30,90); 
		}
		return;
	}
	if(operatorIndex == 4)/*DOC*/{ 
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,92);
		}else if(gunIndex[GUN_PRIMARY] == 2){
			ConfigurePrimary(27,92);
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			ConfigurePrimary(27,92);  
		}
		return;
	}
	if(operatorIndex == 5)/*ROOK*/{ 
		gunCount[0] = 3;
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,92);
		}else if(gunIndex[GUN_PRIMARY] == 2){
			ConfigurePrimary(29,89);
		}else  if(gunIndex[GUN_PRIMARY] == 3){
			ConfigurePrimary(23,70);  
		}
		return;
	}
	if(operatorIndex == 6)/*KAPKAN*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(26,91); 
		}else{	
			ConfigurePrimary(48,90);
		}
		return;
	}
	if(operatorIndex == 7)/*TACHANKA*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,90); 
		}else{	
			ConfigurePrimary(48,90);
		}
		return;
	}
	if(operatorIndex == 8)/*JAGER*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(38,95);
		}else{	
			ConfigurePrimary(20,85);
		}
		return;
	}
	if(operatorIndex == 9)/*BANDIT*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(38,82);
		}else{	
			ConfigurePrimary(20,85);
		}
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*FROST**/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(34,80);
		}else{
			ConfigurePrimary(40,86);
		}
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,91);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(34,80);
		}else{
			ConfigurePrimary(40,80);
		}
		return;
	}
	if(operatorIndex == 13)/*ECHO -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,90);
		}else{
			ConfigurePrimary(20,85); 
		}
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(29,85);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 			
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,88);
		}else{
			ConfigurePrimary(40,85); 
		}
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(32,67);
		}else{
			ConfigurePrimary(30,90); 
		}
		return;
	}
	if(operatorIndex == 17)/*VIGIL -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(29,99);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*MAESTRO*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(33,91);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}		
	if(operatorIndex == 19)/*ALIBI -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(30,73);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 20)/*CLASH -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(29,90);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,87);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE  -*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,91);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 23)/*WARDEN -*/{ 				
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,91);
		}else{
			ConfigurePrimary(20,80);
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO -*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(29,80); 
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,76); 
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,88);
		}else{
			ConfigurePrimary(35,70);
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,93);
		}else{
			ConfigurePrimary(31,81);
		}
		return;
	}
	//══▶Year 6
	if(operatorIndex == 28)/*ARUNI*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(28,92);
		}else{
			ConfigurePrimary(32,92);
		}
		return;
	}
	if(operatorIndex == 29)/*THUNDERBIRD*/{
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(27,92);
		}else{
			ConfigurePrimary(32,92);
		}
		return;
	}
}
function LoadSecondaryGunInfo(){
	gunCount[1] 		= 2;
	//══▶Original OPERERATOR_TYPE_DEFENDERS
	if(operatorIndex == 0)/*SMOKE*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(32,80);						
		}else{	
			ConfigureSecondary(28,83);
		}
		return;
	}
	if(operatorIndex == 1)/*MUTE*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(32,80); 
		}else{	
			ConfigureSecondary(25,85); 
		}	
		return;
	}
	if(operatorIndex == 2)/*CASTLE*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(28,92);
		}else{
			ConfigureSecondary(24,90);
		}
		return;
	}
	if(operatorIndex == 3)/*PULSE*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(26,92); 
		}else{
			ConfigureSecondary(20,89);
		}
		return;
	}
	if(operatorIndex == 4)/*DOC*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(0,0);
		}else{
			ConfigureSecondary(35,90); 
		}
		return;
	}
	if(operatorIndex == 5)/*ROOK*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(24,87);
		}else{
			ConfigureSecondary(35,90); 
		}
		return;
	}
	if(operatorIndex == 6)/*KAPKAN*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(27,90);
		}else{	
			ConfigureSecondary(21,88); 
		}
		return;
	}
	if(operatorIndex == 7)/*TACHANKA*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(27,90);
		}else{	
			ConfigureSecondary(21,88); 
		}
		return;
	}
	if(operatorIndex == 8)/*JAGER*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(29,86);				
		return;
	}
	if(operatorIndex == 9)/*BANDIT	*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(29,84);				
		return;
	}
	//══▶Year 1
	if(operatorIndex == 10)/*FROST**/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(20,85);
		}else{
			ConfigureSecondary(20,85); 
		}
		return;
	}
	if(operatorIndex == 11)/*VALKYRIE*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(31,90);
		return;
	}
	if(operatorIndex == 12)/*CAVEIRA*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(29,70);	
		return;
	}
	if(operatorIndex == 13)/*ECHO*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(32,92);
		}else{
			ConfigureSecondary(25,83); 
		}
		return;
	}
	//══▶Year 2
	if(operatorIndex == 14)/*MIRA*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(27,70); 
		}else{
			ConfigureSecondary(24,80); 
		}
		return;
	}
	if(operatorIndex == 15)/*LESION*/{ 			
		gunCount[1] = 1;
		ConfigureSecondary(27,91);	
		return;
	}
	if(operatorIndex == 16)/*Ela*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(25,91); 
		return;
	}
	if(operatorIndex == 17)/*VIGIL*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(34,72);
		}else{
			ConfigureSecondary(34,72); 
		}
		return;
	}
	//══▶Year 3
	if(operatorIndex == 18)/*MAESTRO*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(50,90);
		}else{
			ConfigureSecondary(32,87); 
		}
		return;
	}	
	if(operatorIndex == 19)/*ALIBI*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(29,87); 
		}else{
			ConfigureSecondary(40,90);
		}
		return;
	}
	if(operatorIndex == 20)/*CLASH*/{ 
		if(gunIndex[GUN_PRIMARY] == 1){
			ConfigurePrimary(29,90);
		}else{
			ConfigurePrimary(27,70);
		}
		return;
	}
	if(operatorIndex == 21)/*KAID*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(34,90);
		}else{
			ConfigureSecondary(27,70);
		}
		return;
	}
	//══▶Year 4
	if(operatorIndex == 22)/*MOZZIE*/{
		gunCount[1] = 1; 
		ConfigureSecondary(27,91); 	
		return;
	}
	if(operatorIndex == 23)/*WARDEN*/{ 				
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(25,91);
		}else{
			ConfigureSecondary(25,91); 
		}
		return;
	}
	if(operatorIndex == 24)/*GOYO*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(25,85);
		return;
	}
	if(operatorIndex == 25)/*WAMAI*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(29,90); 
		}else{
			ConfigureSecondary(23,89); 
		}
		return;
	}
	//══▶Year 5
	if(operatorIndex == 26)/*ORYX*/{ 
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(35,91);
		}else{
			ConfigureSecondary(24,80);
		}
		return;
	}
	if(operatorIndex == 27)/*Melusi*/{ 
		gunCount[1] = 1;
		ConfigureSecondary(25,91); 	
		return;
	}
	//══▶Year 6
	if(operatorIndex == 28)/*ARUNI*/{
		gunCount[1] = 1;
		ConfigureSecondary(25,83);
	}
	if(operatorIndex == 29)/*THUNDERBIRD*/{
		if(gunIndex[GUN_SECONDARY] == 1){
			ConfigureSecondary(27,83);
		}else{
			ConfigureSecondary(27,83);
		}
	}
}
/*
╔═══════Rainbow Six Siege═══════════╗
║		Main Functions				║
╚═══════════════════════════════════╝
*/	
function ActivateOperator(){
	combo_run(ToggleOn);
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;	
	LoadPrimaryGunFromMemory();
	LoadSecondaryGunFromMemory();
	LoadGunRF();
	DisplayMod(GAME_MOD);
	abilityDeployCount = 0;
	UnsetAllButtons();
}
function AdjustRecoilValue(value){
	if(activeGun == GUN_PRIMARY){
		if(value == 1 || value == 2) primaryPolar[1] = EditARValues(primaryPolar[1]);
		if(value == 3 || value == 4) primaryPolar[0] = EditARValues(primaryPolar[0]);
	}else{
		if(value == 1 || value == 2) secondaryPolar[1] = EditARValues(secondaryPolar[1]);
		if(value == 3 || value == 4) secondaryPolar[0] = EditARValues(secondaryPolar[0]);
	}	
	
	ConfigureActiveGun();
	DisplayAntiRecoilMenu(value);
}
function ConfigurePrimary(valV, valH){
	primaryPolar[0] 	= valV;
	primaryPolar[1] 	= valH;
	polarV				= valV;
	polarH				= valH;
}
function ConfigureSecondary(valV, valH){
	secondaryPolar[0] 	= valV;
	secondaryPolar[1] 	= valH;
	polarV				= valV;
	polarH				= valH;
}
function ConfigureActiveGun(){
	if(activeGun == GUN_PRIMARY){
		polarV		= primaryPolar[0];
		polarH		= primaryPolar[1];
		activeGunRF	= selectedGunRF[0];
	}else{
		polarV		= secondaryPolar[0];
		polarH		= secondaryPolar[1];
		activeGunRF	= selectedGunRF[1];	
	}
}
function CloseAvility(){
	abilityReleasingTime 	= 0;
	abilityCountDown		= 0;
	abilityTimeCheck		= FALSE;
	abilityActive			= FALSE;
	DisplaySwitchGun();	
}
function DisplayAntiRecoilMenuAction(charIndex){
	if(charIndex == 1){
		putc_oled(1, 32); //LEFT
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 2){ //RIGHT
		putc_oled(1, 32);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 3){ //UP
		putc_oled(1, 32);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 132);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	}
	else if(charIndex == 4){//DOWN
		putc_oled(1, 32);
		puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 131);
		puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 133);
		puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
		putc_oled(1, 134);
		puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);		
	}
}
function DisplayAntiRecoilDirectionMenu(){
	putc_oled(1, 131);
	puts_oled(60, 25, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 133);
	puts_oled(50, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 134);
	puts_oled(70, 35, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 132);
	puts_oled(60, 45, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
}
function DisplayAntiRecoilMenu(charIndex){
	ClearScroll(LINE_TOP);
	DisplayFrame();
	putc_oled(1, 86);
	puts_oled(20, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
	if(charIndex == 0) DisplayAntiRecoilDirectionMenu();
	else DisplayAntiRecoilMenuAction(charIndex);

	putc_oled(1, 72);
	puts_oled(100, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
	
	printf(CenterText(sizeof(polarRecoild) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, polarRecoild[0]);
	NumberToString(polarV, FindDigits(polarV[0]), 15, LINE_CENTER);
	NumberToString(polarH, FindDigits(polarH[0]), 90, LINE_CENTER);
}	
function DisplayConfiguration(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;

	DisplayFrame();
	if(currentConfigModIndex == 4){
		printf(CenterText(configuration[currentConfigModIndex + 1] - configuration[currentConfigModIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
		printf(CenterText(toggleStatus[QTEnabled + 1] - toggleStatus[QTEnabled] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 5, OLED_FONT_MEDIUM, OLED_WHITE, toggleStatus[QTEnabled]);
	}else{
		printf(CenterText(sizeof(configurationText) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, configurationText[0]);
		printf(CenterText(configuration[currentConfigModIndex + 1] - configuration[currentConfigModIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER , OLED_FONT_MEDIUM, OLED_WHITE, configuration[currentConfigModIndex]);
	}
	DisplayLeftRight();		    	
	LED(RED);
}
function DisplayEnterSlotNumber(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;
	DisplayFrame();
	
	printf(CenterText(enterSlotMsg[0 + 1] - enterSlotMsg[0] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP, 		OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[0]);
	printf(CenterText(enterSlotMsg[1 + 1] - enterSlotMsg[1] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 10, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[1]);
	printf(CenterText(enterSlotMsg[2 + 1] - enterSlotMsg[2] - 1, OLED_FONT_SMALL_WIDTH), LINE_TOP + 20, OLED_FONT_SMALL, OLED_WHITE, enterSlotMsg[2]);
	
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, 45);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, secondScriptSlot + 48);
	puts_oled(55,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 43);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayGameMode(){
	DisplaySwitchGun();
}			
function DisplayGunSelection(){	
	DisplayFrame();
	DisplayGunIndex();
	DisplayLeftRight();
	DisplayGunName(); 
}
function DisplayGunIndex(){
	ClearScroll(LINE_TOP);
	if(activeGun == GUN_PRIMARY){
		printf(CenterText(gunIndexMsg[0 + 1] - gunIndexMsg[0] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, gunIndexMsg[0]);
	}else{
		printf(CenterText(gunIndexMsg[1 + 1] - gunIndexMsg[1] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, gunIndexMsg[1]);
	}
}
function DisplayMod(modIndex){	
   	currentMod 	 =  modIndex;
	UnsetAllButtons();
   	if(modIndex == OPERERATOR_TYPE_MOD) 	DisplayOperatorType();
   	if(modIndex == OPERATOR_SELECTION_MOD) 	DisplayOperatorSelection();
   	if(modIndex == ANTIRECOIL_MOD)			DisplayAntiRecoilMenu(0);
   	if(modIndex == GUN_SELECTION_MOD)		DisplayGunSelection();
   	if(modIndex == CONFIG_MOD)				DisplayConfiguration();
   	if(modIndex == RESET_MOD)				ResetOperator(); 	
   	if(modIndex == GAME_MOD)				DisplayGameMode();
   	if(modIndex == QUICK_TOGGLE_EDIT_MOD)	DisplayQuickTogglesEdit();    	
    if(modIndex == QUICK_TOGGLE_MOD){
    	toggleIndex = 0;
    	DisplayQuickToggles();
    }
}
function DisplayOperatorType(){
	displayOperatorTypeScrollOn	= TRUE;
	displayOperatorScrollOn		= FALSE;
	ClearScroll(LINE_TOP);
	DisplayFrame();
 	printf(5,25,OLED_FONT_MEDIUM, !operatorType, attackers[0]);		
	putc_oled(1,131);
	puts_oled(5,25,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, !operatorType);	
	printf(5,45,OLED_FONT_MEDIUM, operatorType, defenders[0]);	
	putc_oled(1,132);
	puts_oled(5,45,OLED_FONT_MEDIUM,OLED_FONT_MEDIUM_WIDTH, operatorType);
	ClearScroll(LINE_TOP);
} 	
function DisplayOperatorSelection(){
	if(operatorType == OPERERATOR_TYPE_DEFENDERS){
		currentMod = CHANGE_SLOT_MOD;
		DisplayEnterSlotNumber();
	}else{
		displayOperatorTypeScrollOn	= FALSE;
		displayOperatorScrollOn		= TRUE;
		DisplayFrame();	
		DisplayLeftRight();
		PrintOperatorName(LINE_CENTER);
		ClearScroll(LINE_TOP);
	}
}
function DisplayOperatorByYear(){
	displayOperatorTypeScrollOn	= FALSE;
	displayOperatorScrollOn		= FALSE;	
	DisplayFrame();
	operatorIndex				= operatorsByYear[operatorsByYearIndex];
	
	printf(CenterText(operationName[operatorsByYearIndex + 1] - operationName[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, operationName[operatorsByYearIndex]);
	printf(CenterText(operationName2[operatorsByYearIndex + 1] - operationName2[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, operationName2[operatorsByYearIndex]);
	printf(CenterText(operationYear[operatorsByYearIndex + 1] - operationYear[operatorsByYearIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_WHITE, operationYear[operatorsByYearIndex]);	
}
function DisplaySwitchGun(){
	DisplayFrame();	
	ConfigureActiveGun();
	printf(CenterText(operatorName[operatorIndex + 1] - operatorName[operatorIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);		
	DisplayGunName();
	DisplayGunType();

	if(activeGun == GUN_PRIMARY){
	
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
function DisplayScrollMode(){
	if(displayOperatorTypeScrollOn)	DisplayOperatorTypeScroll();
	if(displayOperatorScrollOn)		DisplayOperatorSelectionScroll();
}
function DisplayOperatorTypeScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorTypeMsg)/sizeof(operatorTypeMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorTypeMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);		
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayOperatorSelectionScroll(){
	messageColumCount --;
	messageSize = sizeof(operatorSelMsg)/sizeof(operatorSelMsg[0]);
	for (messageArrayLine = 0; messageArrayLine < messageSize; messageArrayLine++){
		if(messageColumCount + (10 * messageArrayLine ) > 0 && messageColumCount + (10 * messageArrayLine ) < 127){
			putc_oled(1, operatorSelMsg[messageArrayLine]);
			puts_oled(messageColumCount + (10 * messageArrayLine ), LINE_TOP - 5, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH, 1);
		}
	}

	if(messageColumCount + (10 * messageArrayLine ) < 0 ){
		messageColumCount = 127;
	}
	line_oled(1, 1 , 1 , 22 , 1 , 1 );	
}
function DisplayQuickToggles(){
	DisplayFrame();
	printf(CenterText(toggleValuesMsg[toggleIndex + 1] - toggleValuesMsg[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleValuesMsg[toggleIndex]);
	DisplayLeftRight();		    	
	LED(RED);
}
function DisplayQuickTogglesEdit(){
	DisplayFrame();
	printf(CenterText(toggleValuesMsg[toggleIndex + 1] - toggleValuesMsg[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_TOP, OLED_FONT_MEDIUM, OLED_WHITE, toggleValuesMsg[toggleIndex]);

	if(toggleIndex == 0) NumberToString(crouchSpamSpeed, 	FindDigits(crouchSpamSpeed), 	CenterText(sizeof(crouchSpamSpeed) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 1) NumberToString(autoLeanSpeed, 		FindDigits(autoLeanSpeed), 		CenterText(sizeof(autoLeanSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 2) NumberToString(strafeSpeed, 		FindDigits(strafeSpeed), 		CenterText(sizeof(strafeSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 3) NumberToString(leanSpamSpeed, 		FindDigits(leanSpamSpeed), 		CenterText(sizeof(leanSpamSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 4) NumberToString(tBagSpeed, 			FindDigits(tBagSpeed), 			CenterText(sizeof(tBagSpeed) - 1, 		OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);
	if(toggleIndex == 5) NumberToString(rapidFireSpeed, 	FindDigits(rapidFireSpeed), 	CenterText(sizeof(rapidFireSpeed) - 1, 	OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10);	
		
	LED(RED);
}
function DisplayLeftRight(){
	ClearScroll(LINE_BOTTOM);
	putc_oled(1, 133);
	puts_oled(10, LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	putc_oled(1, 134);
	puts_oled(111,LINE_BOTTOM, OLED_FONT_MEDIUM, OLED_FONT_MEDIUM_WIDTH,1);
	line_oled(1, 1 , 1 , LINE_BOTTOM + 10 , 1 , 1 );
}
function DisplayFrame(){
	cls_oled(0);
	rect_oled(1,1,127,63,0,1);
}
function LoadPrimaryGunFromMemory(){
	LoadPrimaryGunInfo();
	saveVar = (-32768 - operatorIndex) * -1;	
	tempPolar = get_pvar(saveVar, -32768, 32767, 0);
	//old trick to concat int's
	if(tempPolar != 0){
		primaryPolar[0]    = (tempPolar / 100) % 100;  
	    primaryPolar[1]    = 127 - (tempPolar % 100);
	    gunIndex[GUN_PRIMARY] = (tempPolar / 10000) + 1;
	}
}
function LoadSecondaryGunFromMemory(){
	LoadSecondaryGunInfo();
	saveVar = (32737 - operatorIndex) * -1;	
	tempPolar = get_pvar(saveVar, -32768, 32767, 0);
	//old trick to concat int's
	if(tempPolar != 0){
	    secondaryPolar[0]    = (tempPolar / 100) % 100;  
	    secondaryPolar[1]    = 127 - (tempPolar % 100);
	    gunIndex[GUN_SECONDARY] = (tempPolar / 10000) + 1;
	}
}
function LoadSettings(){	
	pval_data		= get_pvar(SPVAR_62, -32767, 32767, 0);
	if(pval_data == 0)  pval_data = 193;
    tBagOn 			= unpack_usigned(pval_data, 0, 1);
	crouchSpamOn	= unpack_usigned(pval_data, 1, 1);
	leanSpamOn 		= unpack_usigned(pval_data, 2, 1);
	pronShotOn 		= unpack_usigned(pval_data, 3, 1);	
	rf4AllOn 		= unpack_usigned(pval_data, 4, 1);
	autoLeanOn 		= unpack_usigned(pval_data, 5, 1);
	rapidFireOn 	= unpack_usigned(pval_data, 6, 1);
	QTEnabled 		= unpack_usigned(pval_data, 7, 1);
}
function LoadSlotNumber(){
	pval_data      	= get_pvar(SPVAR_63, -32767, 32767, 0); 
   
    if(pval_data != 0){
    	slotNumber = pval_data;
    }
}
function PrintAvilityName(position){
	DisplayFrame();
	printf(CenterText(avilityName[position + 1] - avilityName[position] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, avilityName[position]);
	printf(CenterText(avilityName[position + 2] - avilityName[position + 1] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10, OLED_FONT_MEDIUM, OLED_WHITE, avilityName[position + 1]);
}
function PrintOperatorName(line){
	printf(CenterText(operatorName[operatorIndex + 1] - operatorName[operatorIndex] - 1, OLED_FONT_MEDIUM_WIDTH), line, OLED_FONT_MEDIUM, OLED_WHITE, operatorName[operatorIndex]);
}
function PrintGunName(position, gunName){
	printf(CenterText(position - 1 , OLED_FONT_MEDIUM_WIDTH), LINE_CENTER, OLED_FONT_MEDIUM, OLED_WHITE, gunName);
}
function PrintGunType(gunIndex){
	printf(CenterText(gunType[gunIndex + 1] - gunType[gunIndex] - 1, OLED_FONT_SMALL_WIDTH), LINE_BOTTOM, OLED_FONT_SMALL, OLED_WHITE, gunType[gunIndex]);
}
function ResetOperator(){
	polarV = 0;
	polarH = 0;
	SavePrimaryGunData();
	SaveSecondaryGunData();
	ActivateOperator();
	DisplayMod(GAME_MOD);
}
function SavePrimaryGunData(){
	combo_run(SAVE)
	//old trick to concat int's
	if(polarH == 0 && polarV == 0){
		tempPolar = 0;
	}else{
		tempPolar = (gunIndex[GUN_PRIMARY] - 1) * pow(10, 2) + polarV;
		tempPolar = tempPolar * pow(10, 2) + (127 - polarH);
	}
	
	saveVar = (-32768 - operatorIndex) * -1;
	set_pvar(saveVar, tempPolar);
}
function SaveSecondaryGunData(){
	combo_run(SAVE)
	if(polarH == 0 && polarV == 0){
		tempPolar = 0;
	}else{
		tempPolar = (gunIndex[GUN_SECONDARY] - 1) * pow(10, 2) + polarV;
		tempPolar = tempPolar * pow(10, 2) + (127 - polarH);
	}
	
	saveVar = (32737 - operatorIndex) * -1;
	set_pvar(saveVar, tempPolar);
}
function SaveSettings(){
  	pval_data = pack_usigned(pval_data, tBagOn,   		0, 1);
	pval_data = pack_usigned(pval_data, crouchSpamOn,   1, 1);
	pval_data = pack_usigned(pval_data, leanSpamOn,   	2, 1);
	pval_data = pack_usigned(pval_data, pronShotOn,   	3, 1);	
	pval_data = pack_usigned(pval_data, rf4AllOn,   	4, 1);
	pval_data = pack_usigned(pval_data, autoLeanOn,   	5, 1);
	pval_data = pack_usigned(pval_data, rapidFireOn,   	6, 1);
	pval_data = pack_usigned(pval_data, QTEnabled,   	7, 1);
	set_pvar(SPVAR_62,	pval_data);  	
}
function VerifyMinMax(value, min, max){
	if(value > max){
		value = min;
	}
	if(value < min){
		value = max;
	}
	return value;
}
/*
╔═══════Rainbow Six Siege═══════════╗
║			Combos					║
╚═══════════════════════════════════╝
*/
combo AutoScan{
	Set(SwapButton, 100);
	wait(autoScanTime);
	Unset(SwapButton);
	wait(100);
}
combo RapidFire {
    set_val(FireButton, 100);
    wait(40);
    set_val(FireButton, 0);
    wait(40);
    set_val(FireButton, 0);
    wait(rapidFireSpeed);
} 
combo TeaBag(){ 
    Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(tBagSpeed);
	Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(tBagSpeed);
}
combo CrouchSpam{
    Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(crouchSpamSpeed);
	Set(CrouchButton, 100);
	wait(40);
	Set(CrouchButton, 0);
	wait(crouchSpamSpeed);
}
combo LeanSpam{
	set_val(MeleeButton, 100);
	wait(100);
	set_val(MeleeButton, 0);
	wait(leanSpamSpeed);
	set_val(SprintButton, 100);
	wait(100);
	set_val(SprintButton, 0);
	wait(leanSpamSpeed);
}
combo ToggleOn{
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait(150);
	reset_rumble();
}
combo ToggleOff {
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait (150);
    set_rumble(RUMBLE_B, 100);
    wait(150);
    set_rumble(RUMBLE_B, 0);
    wait(150);
    reset_rumble();
}
combo QuickToggleNotify{ 	
   	cls_oled(0);	
   	printf(CenterText(toggleMessage[toggleIndex + 1] - toggleMessage[toggleIndex] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER - 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleMessage[toggleIndex]);
   	printf(CenterText(toggleStatus[toggleValue + 1] - toggleStatus[toggleValue] - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER + 10, OLED_FONT_MEDIUM, OLED_WHITE, toggleStatus[toggleValue]);
   	wait(450);
   	SaveSettings();
   	DisplaySwitchGun();
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
combo SAVE { 	
   	cls_oled(0);						
   	printf(CenterText(sizeof(saveMessage) - 1, OLED_FONT_MEDIUM_WIDTH), LINE_CENTER , OLED_FONT_MEDIUM, OLED_WHITE, saveMessage[0]);
   	call(ToggleOn);
   	wait(250);
   	DisplaySwitchGun();
	if(activeGun == GUN_PRIMARY){
		LED(GREEN);
	}else{
		LED(BLUE);
	}
}
combo Strafe{
	set_val(LxButton, -40); 
	wait(strafeSpeed); 
	set_val(LxButton, 40);
	wait(strafeSpeed);
}
combo FastPickLeft{
	Set(SprintButton, 100);
	wait(100);
	Set(LxButton, -100); 
	wait(200);
	Set(LxButton, 0);
	wait(10);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(LxButton, 100);	
	wait(249);
	Set(LxButton, 0);
	wait(10);
	Set(SprintButton, 100);
	wait(100);
}
combo FastPickRight{
	Set(MeleeButton, 100);
	wait(100);
	Set(LxButton, 100); 
	wait(200);
	Set(LxButton, 0);
	wait(10);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(LxButton, -100);	
	wait(249);
	Set(LxButton, 0);
	wait(10);
	Set(MeleeButton, 100);
	wait(100);
}
combo FastPickUp{
	Set(CrouchButton, 100);
	wait(100);
	Set(CrouchButton, 0); 
	wait(200);
	Set(FireButton, 100); 
	wait(5);
	Set(FireButton, 0); 
	wait(5);
	Set(CrouchButton, 100);
	wait(50);
	Set(CrouchButton, 0); 
	wait(5);
}
/*
╔═══════Rainbow Six Siege═══════════╗
║	    Utilities functions			║
╚═══════════════════════════════════╝
*/
	//Information functions	
int c_val, chr_val;
function EditARValues(value){
	if(get_ival(AdsButton)){
		//Vertical Adjustments
		if(event_press(UpButton)){
	 		value -= 1;                           
	 		if(value < 0) value = 0;   	               	            
		}
		if(event_press(DownButton)){
			value += 1;                           
			if(value > 99 ) value = 99; 	        
		}
		//Horizontal Adjustments
		if(event_press(RightButton)){
	 		value -= 1;                           
	 		if(value < 28 ) value = 28;   	               	            
		}
		if(event_press(LeftButton)){
			value += 1;                           
			if(value > 127) value = 127; 	        
		}
	}
	if(!get_ival(AdsButton)){
		//Vertical Adjustments
		if(event_press(UpButton)){
	 		value -= 10;                           
	 		if(value < 0) value = 0;   	               	            
		}
		if(event_press(DownButton)){
			value += 10;                           
			if(value > 99 ) value = 99; 	        
		}
		//Horizontal Adjustments
		if(event_press(RightButton)){
	 		value -= 10;                           
	 		if(value < 28) value = 28;   	               	            
		}
		if(event_press(LeftButton)){
			value += 10;                           
			if(value > 127) value = 127; 	        
		}
	}
	return value;
}
function ClearScroll(scrollLine){
	for (forIndex = 0; forIndex < 127; forIndex++) {		 
		PrintCharacter(32, forIndex, scrollLine);
	}
}	
	//Buttons functions
function UnsetAllButtons(){
	Unset(MenuButton);
	Unset(ReloadButton);
    Unset(SwapButton);
    Unset(UpButton);
	Unset(DownButton);
	Unset(CrouchButton);
    Unset(SelectButton);
    Unset(LeftButton);
    Unset(RightButton);
    Unset(AdsButton);
    Unset(TacticalButton);
    Unset(ModsButton);
}
function ButtonClear(){
	if(BlockButton){
		Unset(BlockButton);
		BlockButton = 0;
	}
	if(FncBlockButton){
		Unset(FncBlockButton);
		FncBlockButton = 0;
	}
}
function ButtonPress(button){
	return event_press(button);
} 
function ButtonRelease(button){return event_release(button);}
function ButtonHold(button){
	return get_val(button);
} 	
function DoubleTab(button) { 
	if(event_press(button) && get_brtime(button) < 300) return TRUE;                                     
	return 0;                                   
}  
function Set(id,val){set_val(id, val);} 
function Unset(id){set_val(id, 0);}
	//Utilities functions
function EditQTValues(value, min, max){
	if(get_ival(AdsButton)){
		if(event_press(RightButton)){
	 		value += 1;                           
	 		if(value > max ) value = max;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 1;                           
			if(value < min) value = min; 	        
		}
	}else{
		if(event_press(RightButton)){
	 		value += 10;                           
	 		if(value > max ) value = max;   	               	            
		}
		if(event_press(LeftButton)){
			value -= 10;                           
			if(value < min) value = min; 	        
		}
	}
	return value;
}
function CenterText(f_chars,f_font) {                                                         
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}    
function NumberToString(f_val,f_dgts, x_val,y_val) {
 
	i_val = 1;  chr_val = 10000;
    
	if(f_val < 0){          
         putc_oled(i_val,45);    
         i_val += 1;
         f_val = abs(f_val);
	} 
	for(c_val = 5; c_val >= 1; c_val--){
	    if(f_dgts >= c_val) {
            putc_oled(i_val, (f_val / chr_val) + 48);
            f_val = f_val % chr_val;
            i_val +=  1; 
            if(c_val == 4){
                putc_oled(i_val,44);   
                i_val += 1;
            }
        }
        chr_val /= 10;
    }  

    puts_oled(x_val, y_val, 1,i_val - 1, 1);    
} 
function PrintCharacter(character, column, scrollLine){
	if(column > 0 && column < 127){
		putc_oled(1,character);
		puts_oled(column, scrollLine, 0, 1, 1);
	}
}	
function FindDigits(digits) {                         
	//  FindDigits(value)                                
	//        return Number of Digits in Value Passed     		                                                      
    digits = abs(digits);                               
    if(digits / 10000 > 0) return 5;                   
    if(digits /  1000 > 0) return 4;                   
    if(digits /   100 > 0) return 3;                   
    if(digits /    10 > 0) return 2;                   
                          return 1;                  
}
function LED(Colour) {

    set_led(LED_1,duint8(Colour*4));
    set_led(LED_2,duint8((Colour*4) + 1));
    set_led(LED_3,duint8((Colour*4) + 2));
    set_led(LED_4,duint8((Colour*4) + 3));
}
int mask, ret, pval_data;
//position range [0..15]
function pack_usigned(int pvar, int ret, int position, int number_of_bits){
	for(i_val = position; i_val< (number_of_bits + position); i_val++)
	{
		pvar = pvar & (~(1 << i_val));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}
//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	
	for(i_val = 0; i_val< number_of_bits ; i_val++)
	{
		mask = mask | (1 << i_val);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}