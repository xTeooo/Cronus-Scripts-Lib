/*


██╗░░██╗██╗░██████╗░██╗░░██╗░██╗░░░░░░░██╗░█████╗░████████╗███████╗██████╗░██╗░██████╗
██║░░██║██║██╔════╝░██║░░██║░██║░░██╗░░██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗╚█║██╔════╝
███████║██║██║░░██╗░███████║░╚██╗████╗██╔╝███████║░░░██║░░░█████╗░░██████╔╝░╚╝╚█████╗░
██╔══██║██║██║░░╚██╗██╔══██║░░████╔═████║░██╔══██║░░░██║░░░██╔══╝░░██╔══██╗░░░░╚═══██╗
██║░░██║██║╚██████╔╝██║░░██║░░╚██╔╝░╚██╔╝░██║░░██║░░░██║░░░███████╗██║░░██║░░░██████╔╝
╚═╝░░╚═╝╚═╝░╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝░░╚═╝░░░╚═╝░░░╚══════╝╚═╝░░╚═╝░░░╚═════╝░
							
					▄▀█ █▀█ █▀▀ ▀▄▀   █▀ █▀▀ █▀█ █ █▀█ ▀█▀
					█▀█ █▀▀ ██▄ █░█   ▄█ █▄▄ █▀▄ █ █▀▀ ░█░
									
									v 4.1
									
							discord: highwater#0121
						
							Tip me if you use this
					BTC: 1ATQeYNtKrKGDoxQ5PbLETTgtJS2PZjt9r
							 paypal: @highwaterr
					
											
BIG THANKS to SS_Nikolai, FATTO DA ANDRY 85 and TaylorDrift21 for their scripts, there are a
a lot of elements used in this script. All menu displays were modified from Andry's, Aim assist 
from TaylorDrift, and SS_Nikolia for getting me started with a script in the first place.

This script will be more helpful if you have mappable back buttons on your controller
https://www.extremerate.com/  has a few DIY kits that are cheap and easy to install

Feel free to give me suggestions, or anything youve found that gets the most out of this script,
If youre reading this planning on selling it as your own, you like little boys.

___________________________________________________________________________________________________


	OLED screen indications: 					KillSwitch: 
              ———————————————————————————				———————————————————————————
		      |       highwater's       |				|  OFF                    | 
		      |     apex script v4.1    |   			|                         |
		      | < Current Weapon Name > |				|                         |
              ———————————————————————————				———————————————————————————

              ———————————————————————————			Kill Switch (disable everything)
		      |  < primary/secondary >  |				- Turn ON to OFF or OFF to ON 
		      | < barrel >    < sight > |   			- Hold L2 and tap SHARE
		      | < Current Weapon Name > |		
              ———————————————————————————									

Setting weapons
Set  primary     weapon by    HOLDING L2 + PRESSING UP or LEFT    UP    on dpad will cycle through assult rifles											
Set secondary    weapon by    HOLDING L1 + PRESSING UP or LEFT   LEFT   on dpad will cycle through sub machine guns + everything else
Set favorite Primary by    			HOLDING L2 + HOLDING UP      this weapon is chosen from the mod menu
Set favorite Secondary by           HOLDING L1 + HOLDING UP      this weapon is chosen from the mod menu
RESET all choices from primary by   HOLDING L2 + HOLDING LEFT    will reset all primary settings (gun/barrel/sight)
RESET all choices from secondary by HOLDING L2 + HOLDING LEFT    will reset all secondary settings (gun/barrel/sight)
RESET BOTH primary and secondary by HOLDING L2 + PRESSING TOUCHPAD   default has anti-recoil applied, basic values for first dropping in                                                                                  */																					  /*

Setting attachments
Set  primary   sight  by  HOLDING L2 + PRESSING DOWN   DOWN   on dpad will cycle through sights (none/1x, 2x, 3x)											
Set  primary   barrel by  HOLDING L2 + PRESSING RIGHT  RIGHT  on dpad will cycle through barrels (none, white, blue, purple)
Set secondary  sight  by  HOLDING L1 + PRESSING DOWN   DOWN   on dpad will cycle through sights (none/1x, 2x, 3x)											
Set secondary  barrel by  HOLDING L1 + PRESSING RIGHT  RIGHT  on dpad will cycle through barrels (none, white, blue, purple)
This feature is smart enough to know if current weapon does not allow barrels or sights

	Mod Menu: 								Edit Mod: 
              ———————————————————————————				———————————————————————————
		      |      < Mod Name >       |				|  	 < Edit Mod Name >    | 
			  |     press x to edit     | 				|						  |
			  |  < ON > 		< OFF >	|               |		 < value >		  |
		      | 	 toggle ON/OFF      |				|                         |
              ———————————————————————————				———————————————————————————

Enter Menu by HOLDING L2 and PRESSING OPTIONS. While in menu use LEFT/RIGHT on dpad to cycle through the mods.
UP will toggle ON the mod and show "ON." DOWN will toggle OFF the mod and show "OFF." If a mod shows "press x to edit"
you can press X to bring you to the mod edit menu. While in mod edit menu use LEFT/RIGHT to cycle through the edits.
If you'd like to edit a mod value, while HOLDING L2 you can press UP/DOWN to move values by 10/-10 or LEFT or RIGHT to 
edit values by 1/-1. Press CIRCLE to exit Mod Edits and back to mod menu. PRESSING PS button will save your current settings
Exit Mod menu by HOLDING L2 and PRESSING OPTIONs again.


MOD LIST
	
Aim Assist 		- Scroll using UP or DOWN.  Edit the Aim Assist values through menu by pressing x (Handgun mode can be activated using DOWN dpad and CROUCH. a message will show on zen screen while active)

Sticky Aim      - Scroll using Up or DOWN.  Edit the sticky aim values through menu by pressing x (this can be used in addtion to aim assist)

Headshot Assist - Toggle ON or OFF to get an extra aim assist for headshots. Edit these values by pressing x

Strafe Assist   - Toggle ON or OFF to get an extra aim assist for   strafe.  Edit these values by pressing x

Shot Mods		- Press x to edit.        includes       Aim Abuse
														strafe shot
														crouch shot
														 auto ping
				  crouch shot mod needs to to select "Hold" or "toggle" to match your in game crouch settings									 
				  auto ping will normal ping if tapped and enemy ping if held.

Movement        - Press x to edit.        includes     	wall bounce
														super jump
														super glide
				  wall bounce works after a slide and jump, press jump again when hitting the wall
				  super jump works HOLDING JUMP and PRESSING RRELOAD, works when youre not in a jump from the HOLD JUMP action
				  super glide works while HOLDING RELOAD and PRESSING CROUCH, it still needs to be timed at the peak of your climb

Weapon Mods     - Press x to edit.        includes:
								  automatic		will switch between primary/secondary when swap is tapped, unholstering will bring up the weapon that was out. (will not work on default, manual resync still works)
								 alwys primary  will default to selecting the primary weapon, when unholstering (will still use automatic swap feature and the manual resync)
								    manual		will not switch weapons in zen unless ADS is held when you swap weapons (youre no longer able to manually resync primary or secondary)
				 				 Dual Trigger   will switch on zen depending on which trigger you fire with.  R2 becomes your primary trigger, R1 your secondary
				  								this will switch weapons for you when you press a new trigger, Swap should not be used on this option unless to resync or switching to gun from grenade. 
				  								Keep in mind that when using this all fire actions get switched, if youre on secondary grenades are thrown with the secondary trigger or itll desync.
				  								This works with default as well, using a new trigger cycles to next gun.
				  				 Swap between primary and secondary by pressing your weapon swap
								 if this de-syncs you can manually set primary    with  -  HOLD L2 + PRESS TRIANGLE
								 	  								   secondary  with  -  HOLD L2 + PRESS CIRCLE
								 The auto switch of primary/secondary is smart enough to know when you holster and pull 
								 the weapon back out or when you throw a grenade and swap back to gun, this should not unsync easily   				
				  								
				  					none        will only holster on zen when holding SWAP for the holster time
				  				SPRINT/RELOAD   will auto holster while HOLDING RELOAD and PRESSING SPRINT
				  			   sprint+movingfwd will auto holster if your left stick is all the way forward and PRESSING SPRINT
				  				holster types allow you to unholster with ADS or FIRE, using ADS to unholster and forming a habit of it is the best way to prevent weapon desyncing
				  			   
				  			   Choose  Primary  to be used while setting primary and HOLDING UP
				  			   Choose Secondary to be used while setting secondary and HOLDING UP

Auto Armor Swap - Toggle ON or OFF.  allows you to switch armors from loot boxes automatically with 
				  HOLD RELOAD AND PRESS SWAP  do not move anolog sticks while preforming this
				  ** this is also dependent on the loot in the box, some boxes wont have enough
				  loot to push the armor down far enough in the list. mid/late game shouldn't
				  be an issue though. Use the Swap Time to adjust to your cursor speed

Sensitivity     - increase/decrease the ADS X and ADS Y to get anti recoil to match your sensitivity (these numbers need to be the % difference settings you use from mine)
				  increase/decrease the Hipfire X and Hipfire Y to get hipfire anti recoil to match your sensitivity (these numbers need to be the % difference settings you use from mine)
				  set deadzone in the script to match yours

Easy Heal		- ALWAYS ON. while holding square press D-Pad    UP for pheonix
															  RIGHT for battery
			  			  									   LEFT for medkit 
									   						   DOWN for shield cell						
									   						  CROSS for syringe                             

Slide cancel    - ALWAYS ON. moving forward (10-2 range if left stick were a clock face) and crouch will activate it, jump will cancel the slide cancel combo
__________________________________________________________________________________________________________________________________________________________________________________________

My in game alc settings:
						deadzone       = 8       yaw speed    = 300		ADS Yaw speed   = 160  	per optic:  2x = 1.2 
						outer thresh   = 2%		 pitch speed  = 190		ADS pitch speed = 105				3x = 1.4
						response curve = 10		     **everything else is set to 0**						4x = 2.2

My prefered zen settings for the script (just an example for you, use what you'd like)

					-aim assist = v6 ++		   -battsSticky = Sticky aim    -shot mods								-armor swap = ON
					 fire type  = ADS or FIRE   fire type = hipfire only	 aim abuse = not on							
					 AA type    = Linear        sticky size = 16			 strafe    = reload/ads+fire			-sensitivity 
					 Shape      = Tartan Army   sticky wait = 38			 crouch    = Toggle						 ads x and y i keep at 0
					 direction  = ON										 crouch    = reload/hipfire              hipfire x and y i keep at -13
					 Ads Speed  = 10		   -headshot ast = ON			 ping      = reload/ ADS only
					 speed      = 15            hdsht spd    = 7
					 radius     = 15            hold time    = 80			-movement all ON
					 bst onFire = ON
					 Invert Bst = ON           -strafe ast   = ON			-weapon mods
					 Boost  Str = 13			actv time    = 50			 weapon swap = dual trigger
					 Boost  Spd = 13			strafe spd   = 30			 holster     = sprint+movingfwd
					 Tracking   = ON										 primary     = Flatline
					 trckng size = 2										 secondary   = none (use this for shotguns, snipers, bow, 3030)
					 trckng spd  = 2

Heirloom Spin        make this to true if you want to use heirloom spin feature by holding RELOAD while holstered		
					 survival slot button in game setting needs to be turned off for this as well if not youll just throw heatsheild   */
define use_heirloom = FALSE;																					

//--BUTTONS ( Customize To Your Layout ) ** CHANGING THESE VALUES HAS NOT BEEN TESTED TO WORK WITH ALL FEATURES	
define INVERTED				= FALSE; // Make TRUE If you Play Inverted	** not tested **
define ADS                  = PS4_L2;			define FIRE                 = PS4_R2;
define JUMP					= PS4_L1;			define PING                 = PS4_R1;
define TACTICAL  			= PS4_CROSS;		define SPRINT    			= PS4_L3;
define MELEE     			= PS4_CIRCLE;		define SWAP      			= PS4_TRIANGLE;
define PRONE     			= PS4_R3;			define RELOAD    			= PS4_SQUARE;
define AIM_X	 			= PS4_RX;			define AIM_Y	 			= PS4_RY;
define MOVE_X 	 			= PS4_LX;			define MOVE_Y 	 			= PS4_LY;                       
									
//--Block Rumble (Keep Ingame Rumble ON For Rumble Mods To Work Properly)
define Rumble_Block 		= TRUE;																			
									
/*END OF INSTRUCTION  - edit anything below at your own risk 
________________________________________________________________________________________________________	*/

//--Text to display 
const string TITLE               = "highwater's";			const string NAME            = "APEX script v4.1";      
const string PRESS_X_TO_CONTINUE = "Press X to edit";		const string HG_ON           = "Handgun On";
const string TOGGLEONLY          = "Toggle ON/OFF"; 		const string HOLSTER_STR	 = "Holster";
const string OFF                 = "OFF"; 					const string PRIMARY_STR     = "Primary";
const string ON                  = "ON"; 					const string SECONDARY_STR   = "Secondary";
const string SAVE                = "SAVED";					const string LOOTON          = "Swaping";
															const string LOOTOFF         = "Complete";

//--Script Variables (Leave Alone Or Risk Messing Up The Script)
const string Weapons[]={
"Default",		//    0
"R-301",        //    1 
"Hemlock",     	//    2
"Rampage",     	//    3
"Havoc",     	//    4
"Devotion",     //    5
"Flatline",     //    6
"Spitfire",     //    7
"L-Star",     	//    8
"R99",          //    9
"CAR SMG",     	//   10
"Altrntr",      //   11
"Wingman",     	//   12
"Prowler",     	//   13
"RE-45",     	//   14
"Volt",     	//   15
"G7 Scout",     //   16
"NONE",         //   17
"Default RF",   //   18
""				// leave blank
};
	
define PRIMARY_SELECT_START     = 1;
define PRIMARY_SELECT_END       = 9;
define SECONDARY_SELECT_START   = 9;
define SECONDARY_SELECT_END     = 19;

const string Sight_Names[]={"None/1x","2x Bruiser","3x",""};
const int16 Sight_Vals[]={0,15,30};

const string Barrel_Names[]={"None","White","Blue","Purple",""};
const int16 Barrel_Vals[][]={
{  0,   0,   0},   //    0
{  5,  20,  10},   //    1
{ 10,  25,  15},   //    2
{ 15,  30,  20}    //    3
};
const string SCROLL_NAMES[] = {
	"ADS or FIRE","ADS + FIRE","Hipfire Only","Off on FIRE",
	"Taylordrift v1","Taylordrift v2","Taylordrift v4","Taylordrift v5","v5+SpeedBoost","Taylordrift v6","v6 ++","DoGz Polar V6", "Turned Off",// Aim Assist
	"Turned Off","Sticky Aim","TripleSticky",
	"Turned Off","Always On","Reload/ADS+FIRE","Reload/HIPFIRE","Reload/AllFire",
	"Hold","Toggle",
	"Turned Off","Always On","Reload/ADS Only","Reload/FIRE","Reload/ADSorFire",
	"Automatic","Alwys Primary","Manual","Dual Triggr",
	"none","sprint/reload","sprint+movingfwd",
	""};
// Value Name
const string EDIT_VAL_NAMES[]  = { 
    "Fire Type","AA Type","Shape","Speed","Radius","Bst onFire","Invert Bst","Boost Str","Boost Spd","HG Spd","HG Size",// Taylor Assist v1/v2/
	"Fire Type","AA Type","Shape","Direction","Ads Speed","Speed","Radius","Bst onFire","Invert Bst","Boost Str","Boost Spd","Tracking","Track Size","Track Speed","HG Spd","HG Size",// Taylor Assist  v4 - v5          
    "AA Type","Shape","Base Spd","Zone Spd","Fire Spd","Base Powr","Zone Powr","Fire Powr","Deadzone",// DoGz Polar V6 With Taylordrift21 Shapes
	"Fire Type","Sticky Size","Sticky Time",// Batts Aim Assist 
	"ADS Size","ADS Wait","Hipfire S","Hipfire W","ADS/Fire S","ADS/Fire W", // triple sticky
    "HdSht Spd","Hold Time", // HeadShot AA 
    "Actv Time","Strafe Spd",// Speed Strafe			  
	"Aim Abuse","Strafe","Crouch","Crouch","Ping",// Shot Mod
	"Wall Bounce","Super Jump","SuperGlide",// Movement
	"Weapon Swap","Auto Holstr","Primary","Secondary",// weapon Mods
	"Swap Time", // armor swap
	"ADS Y","ADS X","Hipfire Y","Hipfire X","Deadzone", // Sensitivity
    "Vertical","Horizontal","Time","Mag Size", // bullet mod
""};
// Index to find Value Name string - switchable in game with left/right in ModEdit 
int valName_idx;
define AMOUNT_OF_VALNAME_IDX = 70;

const string AIMASSIST      = "Aim Assist";     // modName_idx = 0
const string BATTSASSIST    = "BattsSticky";    // modName_idx = 1
const string HEADSHOTASSIST = "Headsht Ast";    // modName_idx = 2
const string STRAFEASSIST   = "Strafe Ast"		// modName_idx = 3
const string SHOTMODS	    = "Shot Mods";		// modName_idx = 4
const string MOVEMENT       = "Movement";		// modName_idx = 5
const string WEAPONMODS     = "Weapon Mods";    // nodName_idx = 6 
const string AUTOSHIELD     = "Armor Swap";     // modName_idx - 7
const string SENSITIVITY    = "Sensitivity";    // modName_idx = 8
const string BULLETMOD      = "Bullet Mod";		// modName_idx = 9
int time;  int bullet_to_edit;   int mag_size;
int vertical[55];       int horizontal[55];

// Index to find Mod Name string - switchable in game with left/right in ModMenu 
int modName_idx;
// modName # of the last Mod Name string - Used for cycle modName_idx
define LAST_MODNAME_STRING = 9;

int display_title = TRUE;       int ModMenu;
int display_new;                int ModEdit;
int display_switch;             int KillSwitch;
int display_black;              int count_black;

// Variables Used for all mods
int aim_assist;         int headshot_assist;    int crouch_type, crouch_time;
int batts_assist;       int strafe_assist;      int ads_y_sens,ads_x_sens,hf_y_sens,hf_x_sens;
int aim_abuse_type;		int super_glide_toggle; int ads_speed;			int stop_time;
int strafe_type;    	int STRAFE_DELAY = 252; int HandGunAASpd, HandGunAAStr, HGunAASpd, HGunAAStr;
int _strafe;			int find_recoil_vals;   int hand_gun_speed,hand_gun_size;
int _strafe_index;		int wall_bounce_toggle; int Angle,Radius,StrafeAngle;
int auto_ping_type;     int super_jump_toggle;  int holster_type;
int _strafe_rand_1;		int autoshield = 1;     int aa_fire_type, aa_fire_type_v1;
int _strafe_rand_2;		int autoshield_time;    int swap_type;
int aim_assist_type;    int speed_v2;		    int hand_gun_mode;
int aim_assist_shapes;	int radius_v2;		    int sticky_size;
int speed_v1;			int boost_fire_v2;	    int sticky_time;
int radius_v1;			int boost_reducer_v2; 	int base_speed;
int boost_fire_v1;		int boost_strength_v2; 	int zone_speed;
int boost_reducer_v1;	int boost_speed_v2;	    int fire_speed;
int boost_speed_v1;		int tracking;		    int base_power;
int boost_strength_v1;	int tracking_size;		int zone_power;
int shape_direction;	int tracking_speed;		int fire_power;
int headshot_strength;	int strafe_active_time;	int dogz_deadzone;
int headshot_hold_time;	int strafe_size;		int crouch_setting;
int sticky_ads_size;    int sticky_fire_time;   int sticky_fire_size; 
int sticky_ads_time;    int sticky_hip_time;    int sticky_hip_size;   		
             
int current_idx;				   int deadzone;
int quick_primary, quick_secondary;int a,b,c,s,c_val,sens;
int primary_out;				   int holster       = FALSE;
int Aim_Val, Wait_Val;   		   int grenade 	     = FALSE;			
int default = TRUE;				   int slide 		 = FALSE;
int primary; 					   int drone         = FALSE;
int secondary; 					   int color, ping_time;
int primary_sight;				   int secondary_sight;
int primary_barrel;				   int secondary_barrel;
int attachment;					   int inverted = 1;	
int bulleth;					   int bullet;
int rapid_fire_on = FALSE;  	   int timer,timer_on,stop_count;               
							
int pr,vm;       
int vm_count,vm_loops,p_count,ar_y;	
int inch,prh,vmh; 
int vm_counth,p_counth,ar_x;

const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  {48,49,50,51,52,53,54,55,56,57};    

const int16 GUN_INFO[][]         = {
	//TIME	 MAG SIZE  RESTRICTIONS  RAPID FIRE
	{ 410,      55,   		4,  		0},    //Default         0  
	{ 210,      28,    		0,  		0},    //R-301           1
	{ 490,      30,    		0,  		1},    //Hemlock         2 <<<<<<< { 300, 30, 0, 1}, the "1" at the end will enable rapid fire
	{ 790,      40,   		0,  		0},    //Rampage         3                                        "0" for regular fire 
	{ 321,      36,   		3,  		0},    //Havoc           4
	{ 345,      55,   		0,  		0},    //Devoltion       5
	{ 300,      30,   		3,  		0},    //Flatline        6
	{ 605,      55,   		4,  		0},    //Spitfire        7
	{ 265,      27,   		0,  		0},    //L-Star          8
	{ 154,      27,   		1,  		0},    //R99             9 
	{ 173,      27,   		1,  		0},    //CAR-301        10
	{ 270,      27,   		1,  		0},    //Alternator     11
	{ 400,      11,   		2,  		1},    //Wingman        12
	{ 290,       7,   		2,  		1},    //Prowler        13
	{ 190,      25,   		1,  		0},    //RE-45          14 
	{ 232,      28,   		4,  		0},    //Volt           15 
	{ 495,      20,   		4,  		1},    //G7             16
	{   0,       0,   		4,  		0},    //None           17
	{ 410,      55,   		4,  		1}     //Default RF     18
	};       
	const int16 VERTICAL[][]         = {
	{ 41,41,34,34,33,32,33,33,33,33,30,18,16,16,16,14,15,15,18,23,23,23,23,23,23,23,20,20,20,17,17,17,17,17,17,17,21,22,22,22,22,22,22,22,22,17,17,16,20,18,20,16,18,20,12},   //Default         0  
	{ 49,41,32,41,41,35,20,20,20,20,20,20,17,18,17,18,20,16,19,16,17,13,13,12,5,0,0,9,					   			0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //R-301           1
	{ 32,30,30,30,29,28,31,32,30,24,23,31,33,34,34,19,19,19,20,20,12,19,23,25,25,24,24,24,24,24, 		 				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Hemlock         2
	{ 25,28,25,25,25,27,27,20,18,21,21,20,21,21,20,19,19,20,22,23,21,22,22,21,22,22,24,24,21,21,22,22,22,22,22,22,22,20,20,20, 				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Rampage         3 
	{ 47,48,45,49,47,45,28,34,33,33,31,10,29,9,19,18,21,20,21,11,22,22,28,24,27,34,27,26,16,17,26,38,41,41,41,42, 					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Havoc           4
	{ 47,47,48,46,44,45,41,48,43,42,37,38,34,29,30,28,28,27,16,15,14,24,26,21,21,24,24,26,24,21,20,20,20,24,25,25,27,28,28,28,28,28,31,26,28,27,25,25,26,23,25,25,23,23,25},   //Devoltion       5
	{ 49,35,31,32,35,35,20,18,13,20,13,13,12,13,14,14,18,24,21,23,21,17,20,19,20,18,16,18,18,15, 						0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Flatline        6
	{ 36,36,22,31,33,29,20,15,5,11,7,16,19,20,18,16,20,34,14,14,16,16,21,10,10,10,10,10,10,13,14,14,14,13,17,18,18,20,24,22,22,22,23,21,24,22,22,21,17,17,16,20,18,20,12 },    //Spitfire        7
	{ 34,34,33,32,30,36,33,32,31,36,38,36,36,39,38,37,37,36,23,23,24,22,21,25,26,26,26, 						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //L-Star          8
	{ 45,40,40,41,41,41,40,46,46,39,37,35,36,33,21,31,31,25,26,24,24,23,23,21,17,21,15, 						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //R99             9 
	{ 43,39,39,35,37,37,43,48,39,54,44,46,19,14,22,25,20,17,19,21,18,20,17,25,28,28,31, 						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //CAR-301        10
	{ 42,34,34,41,39,39,36,33,32,31,32,30,29,22,22,22,20,21,20,19,14,16,18,17,18,18,19,							  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Alternator     11
	{ 31,29,28,25,25,29,18,18,18,20,22, 										  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Wingman        12
	{ 46,23,15,16,12,11,17, 											  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Prowler        13
	{ 26,28,27,38,32,29,28,27,26,21,19,15,13,12,12,14,14,22,22,25,25,25,25,26,27, 							  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //RE-45          14 
	{ 33,36,41,41,42,37,31,32,40,37,35,18,19,18,20,18,19,21,22,20,20,20,18,13,11,12,16,14,					  		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //Volt           15 
	{0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30, 									0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},    //G7             16
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},    //None           17
	{ 41,41,34,34,33,32,33,33,33,33,30,18,16,16,16,14,15,15,18,23,23,23,23,23,23,23,20,20,20,17,17,17,17,17,17,17,21,22,22,22,22,22,22,22,22,17,17,16,20,18,20,16,18,20,12}};  //Default RF     18       
	const int16 HORIZONTAL[][]         = {
	// per bullet horizontal
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     //Default         0  
	{ -8,10,-12,-12,-10,-8,-14,18,10,-17,-26,-30,2,11,27,32,20,31,13,8,-26,-18,-14,-17,-25,-30, -4,-1,  		    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //R-301           1
	{ 0,2,3,2,0,0,2,3,15,6,5,2,5,11,7,10,9,13,8,4,-2,-1,-1,-1,-1,-2,-1,-1,-1,-1, 									    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Hemlock         2
	{ -6,-5,16,10,-15,1,0,-5,-14,-6,-2,12,18,17,9,1,5,9,6,3,1,4,1,1,0,1,13,13,2,2,2,2,2,2,2,2,2,2,5,7, 									    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Rampage         3 
	{ -4,-11,-16,-2,1,6,12,10,10,-10,0,-16,-18,-20,-19,-18,-11,14,14,13,14,13,23,4,11,11,13,14,22,19,-1,-1,2,-3,-4,-4, 				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Havoc           4
	{ 4,5,5,5,5,4,-9,-8,1,0,13,10,15,4,20,21,22,24,25,18,18,9,3,8,4,7,4,6,18,-12,-13,-18,-17,-15,-13,-10,0,-20,-20,-16,-14,-19,-19,-13,-13,-10,-12,-16,-15,7,19,21,21,21,24},   //Devoltion       5
	{ 3,11,14,12,16,18,8,-19,-25,-19,-24,-11,26,22,24,20,21,16,9,18,20,14,-25,4,-20,-17,-19,-19,-22,-26, 				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Flatline        6
	{ -3,9,5,19,7,-7,-9,-11,-16,-9,-14,6,5,16,19,9,6,9,17,17,17,15,8,-18,-20,-16,-16,-15,-15,-5,9,-2,-3,-2,-10,-2,10,6,3,-2,13,14,14,17,12,0,-1,-1,-13,-15,-17,-16,-17,-18,-15},//Spitfire        7
	{ 14,24,23,15,1,-5,-8,-7,-4,-2,-2,-2,-3,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-3,-2,-2,	 						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //L-Star          8
	{ 0,-3,4,0,0,-9,-8,-11,-10,-6,2,5,8,6,7,-11,-17,-14,-19,39,24,-19,-10,-6,-15,-20,-29, 						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //R99             9 
	{ 10,8,7,-4,16,9,15,15,-5,5,-4,-10,-21,-31,-9,5,25,30,3,-21,-26,-27,-13,-2,10,-2,-1,						  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //CAR-301        10
	{ 0,0,-8,3,-7,8,-9,-6,7,7,-13,-12,-7,-7,6,6,9,10,-9,10,16,15,15,17,16,12,-3, 								  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Alternator     11
	{ -6,-6,0,0,-3,-3,-2,-2,-3,-5,-6, 											  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Wingman        12
	{ 0,6,12,-15,-16,-17,24, 											  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Prowler        13
	{ -1,-4,2,-10,0,-13,-14,-12,-13,-12,-15,-18,-18,-16,-7,-12,-13,-14,-16,-12,-11,-14,-14,-15,-16,			  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //RE-45          14 
	{ 0,-7,-8,0,-6,-4,-8,-8,-7,-8,2,15,13,20,21,15,4,-14,-11,-6,5,9,9,7,7,10,19,15,15, 								  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},     //Volt           15 
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     //G7             16
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     //None           17
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};    //Default RF     18
	

init {
Load();
}

main {
	RemoveStickNoise(); 
	
	if(Rumble_Block)
		block_rumble();

// Display Script Title    
	if(display_title)
	{
		cls_oled(0);
		count_black = 0;
	
		if(KillSwitch)
			print(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	// display OFF centered in X 
		else
		{
			if(primary_out == 1 && current_idx != 0)
			{
				print(center_x(sizeof(PRIMARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, PRIMARY_STR[0]);
				print(center_x(get_barrel_chars(primary_barrel) + 11,OLED_FONT_SMALL_WIDTH) ,24,OLED_FONT_SMALL,OLED_WHITE,Barrel_Names[primary_barrel]);
				print(center_x(get_sight_chars(primary_sight) - 11,OLED_FONT_SMALL_WIDTH) ,24,OLED_FONT_SMALL,OLED_WHITE,Sight_Names[primary_sight]);		   
				print(center_x(get_weapon_chars(current_idx),OLED_FONT_MEDIUM_WIDTH) ,42,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[current_idx]);
			}
			else if(primary_out == 0 && current_idx != 0)
			{
				print(center_x(sizeof(SECONDARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, SECONDARY_STR[0]);
				print(center_x(get_barrel_chars(secondary_barrel) + 11,OLED_FONT_SMALL_WIDTH) ,24,OLED_FONT_SMALL,OLED_WHITE,Barrel_Names[secondary_barrel]);
				print(center_x(get_sight_chars(secondary_sight) - 11,OLED_FONT_SMALL_WIDTH) ,24,OLED_FONT_SMALL,OLED_WHITE,Sight_Names[secondary_sight]);		   
				print(center_x(get_weapon_chars(current_idx),OLED_FONT_MEDIUM_WIDTH) ,42,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[current_idx]);
			  }
			else if(default || current_idx == 0)
			{
				print(5, 5, 1, 1, TITLE[0]);
				print(10, 27, 0, 1, NAME[0]);
				print(center_x(get_weapon_chars(current_idx),OLED_FONT_MEDIUM_WIDTH) ,42,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[current_idx]);
			}	  
		}  		
			display_black = TRUE;	
			display_title = FALSE;
	}
	if(display_switch)
	{
		cls_oled(0);
		count_black = 0;
		if(get_ival(PS4_L2) > 0)
			print(center_x(sizeof(PRIMARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, PRIMARY_STR[0]);
		else
			print(center_x(sizeof(SECONDARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, SECONDARY_STR[0]); 
		if(attachment != 0)
		{
			if(attachment == 1)
				print(center_x(get_barrel_chars(primary_barrel),OLED_FONT_MEDIUM_WIDTH) ,31,OLED_FONT_MEDIUM,OLED_WHITE,Barrel_Names[primary_barrel]);
			if(attachment == 2)
				print(center_x(get_sight_chars(primary_sight),OLED_FONT_MEDIUM_WIDTH) ,31,OLED_FONT_MEDIUM,OLED_WHITE,Sight_Names[primary_sight]);
			if(attachment == -1)
				print(center_x(get_barrel_chars(secondary_barrel),OLED_FONT_MEDIUM_WIDTH) ,31,OLED_FONT_MEDIUM,OLED_WHITE,Barrel_Names[secondary_barrel]);
			if(attachment == -2)
				print(center_x(get_sight_chars(secondary_sight),OLED_FONT_MEDIUM_WIDTH) ,31,OLED_FONT_MEDIUM,OLED_WHITE,Sight_Names[secondary_sight]);
		}
		else
			print(center_x(get_weapon_chars(current_idx),OLED_FONT_MEDIUM_WIDTH) ,31,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[current_idx]);

		attachment = 0;
		display_black = TRUE;	
		display_switch = FALSE;
	}
// Screen saver (OLED off)
	if(display_black && !ModMenu && !KillSwitch)
	{
		count_black += get_rtime();
		if(count_black >= 5000)
		{
			cls_oled(0);
			count_black = 0;
			color = primary_out;
			display_black = FALSE;
		}
	}
// 	Killswitch
	if(get_val(ADS))
	{
		if(event_release(PS4_SHARE))
		{
			KillSwitch = !KillSwitch;	
			if(KillSwitch)        
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);
			display_title = TRUE;
		} 
    // toggle ModMenu ON/OFF
		if(event_release(PS4_OPTIONS) && !KillSwitch)
		{
			ModMenu = !ModMenu;	
			if(!ModMenu)
			{
				ModEdit = FALSE; 		
				combo_run(RUMBLE_OFF);  
				display_title = TRUE;   
			}			
			if(ModMenu)
			{
				modName_idx = 0;        
				combo_run(RUMBLE_ON);	
				display_new = TRUE;		
			}
		}
			set_val(PS4_SHARE, 0);		    
			set_val(PS4_OPTIONS, 0);	
	// reset to default (universal anti-recoil)            -                   HOLD ADS and PRESS TOUCHPAD
		if(event_press(PS4_TOUCH))	
		{
			primary = 0;
			secondary = 0;
			primary_sight = 0;
			primary_barrel = 0;
			secondary_sight = 0;
			secondary_barrel = 0;
			current_idx = 0;
			primary_out = TRUE;
			default = TRUE;
			color = 2;
			display_title = TRUE;
			combo_run(RUMBLE_OFF);
		}
		if(get_ival(PS4_TOUCH))
			set_val(PS4_TOUCH, 0);
	}
// no killswitch detected
	if(!KillSwitch)
	{
// ModMenu
		if(ModMenu) 
		{
			color = 3;
	// toggle ModEdit ON/OFF - only for mods who have adjustable value(s)
			if(modName_idx == 0 && aim_assist != 8 || modName_idx == 1 && batts_assist != 0 || modName_idx > 1)	
			{
				if(event_press(PS4_CROSS) && !ModEdit) // Turn ModEdit ON
				{
					valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // always display first val names available when enter in edition mod
					ModEdit = TRUE;
					combo_run(RUMBLE_ON);
					display_new = TRUE;
				}	
				if(event_press(PS4_CIRCLE) && ModEdit) // Turn ModEdit OFF
				{
					ModEdit = FALSE;
					combo_run(RUMBLE_OFF);
					display_new = TRUE;
				}
			}	
		// ModEdit ON
			if(ModEdit)
			{
				if(get_val(ADS)) // Edit value: hold L2 + UP (+1) or DOWN (-1) or RIGHT (+10) or LEFT (-10)
				{
					//val_I_want_to_edit = edit_val( corresponding valName_idx , val_I_want_to_edit, abs(range min) , range max ); 
                    aa_fire_type        = scroll(valName_idx, 0, aa_fire_type, 0, 3);
                    aim_assist_type     = scroll(valName_idx, 1, aim_assist_type, 0, 2);
					aim_assist_shapes   = scroll(valName_idx, 2, aim_assist_shapes, 0, 12);
					speed_v1            = edit_val(  3 , speed_v1        	, 0, 99  , 1, 10);
					radius_v1           = edit_val(  4 , radius_v1      	, 0, 99  , 1, 10);
					boost_fire_v1    	= edit_val(  5 , boost_fire_v1      , 0,  1  , 1,  1);
					boost_reducer_v1   	= edit_val(  6 , boost_reducer_v1   , 0,  1  , 1,  1);
					boost_strength_v1   = edit_val(  7 , boost_strength_v1  , 0, 40  , 1, 10);
					boost_speed_v1      = edit_val(  8 , boost_speed_v1     , 0, 40  , 1, 10);
					hand_gun_speed      = edit_val(  9 , hand_gun_speed     , 0, 99  , 1, 10);
                    hand_gun_size       = edit_val(  10 , hand_gun_size     , 0, 99  , 1, 10);
                    aa_fire_type        = scroll(valName_idx, 11, aa_fire_type, 0, 3);      
					aim_assist_type     = scroll(valName_idx, 12, aim_assist_type, 0, 2);
					aim_assist_shapes   = scroll(valName_idx, 13, aim_assist_shapes, 0, 12);
					shape_direction     = edit_val( 14 , shape_direction    , 0,  1  , 1,  1  );
					ads_speed           = edit_val( 15 , ads_speed          , 0, 99  , 1, 10  );
				    speed_v2            = edit_val( 16 ,  speed_v2      	, 0, 99  , 1, 10  );
					radius_v2           = edit_val( 17 , radius_v2     		, 0, 99  , 1, 10  );
					boost_fire_v2       = edit_val( 18 , boost_fire_v2  	, 0,  1  , 1,  1  );
					boost_reducer_v2    = edit_val( 19 , boost_reducer_v2   , 0,  1  , 1,  1  );
					boost_strength_v2   = edit_val( 20 , boost_strength_v2  , 0, 40  , 1, 10  );
					boost_speed_v2      = edit_val( 21 , boost_speed_v2  	, 0, 40  , 1, 10  );
					tracking            = edit_val( 22 , tracking   		, 0,  1  , 1,  1  );
					tracking_size       = edit_val( 23 , tracking_size      , 0,  8  , 1,  1  );
					tracking_speed      = edit_val( 24 , tracking_speed     , 0,  8  , 1,  1  );
					hand_gun_speed      = edit_val( 25 , hand_gun_speed     , 0, 99  , 1, 10  );
                    hand_gun_size       = edit_val( 26 , hand_gun_size      , 0, 99  , 1, 10  );
					aim_assist_type     = scroll(valName_idx, 27, aim_assist_type, 0, 2);
					aim_assist_shapes   = scroll(valName_idx, 28, aim_assist_shapes, 0, 12);
					base_speed          = edit_val( 29 , base_speed         , 0, 99  , 1, 10  );
					zone_speed          = edit_val( 30 , zone_speed         , 0, 99  , 1, 10  );
				    fire_speed     	    = edit_val( 31 , fire_speed         , 0, 99  , 1, 10  );	
					base_power     	    = edit_val( 32 , base_power         , 0, 99  , 1, 10  );
					zone_power          = edit_val( 33 , zone_power         , 0, 99  , 1, 10  );
				    fire_power     	    = edit_val( 34 , fire_power         , 0, 99  , 1, 10  );
                    dogz_deadzone       = edit_val( 35 , dogz_deadzone      , 0, 40  , 1, 10  );
                    aa_fire_type_v1     = scroll(valName_idx, 36, aa_fire_type_v1, 0, 3);
                    sticky_size         = edit_val( 37 , sticky_size    	, 0, 99  , 1, 10  );
					sticky_time         = edit_val( 38 , sticky_time    	, 0, 99  , 1, 10  );
				    sticky_ads_size     = edit_val( 39 , sticky_ads_size    , 0, 99  , 1, 10  );
					sticky_ads_time     = edit_val( 40 , sticky_ads_time    , 0, 999 , 1, 10  ); 
					sticky_hip_size	    = edit_val( 41 , sticky_hip_size    , 0, 99  , 1, 10  );
					sticky_hip_time	    = edit_val( 42 , sticky_hip_time    , 0, 999 , 1, 10  );
					sticky_fire_size    = edit_val( 43 , sticky_fire_size   , 0, 99  , 1, 10  ); 
					sticky_fire_time    = edit_val( 44 , sticky_fire_time   , 0, 999 , 1, 10  );
				    headshot_strength   = edit_val( 45 , headshot_strength  , 0, 99  , 1, 10  );
				    headshot_hold_time  = edit_val( 46 , headshot_hold_time , 0, 2000, 1, 100 );
                    strafe_size         = edit_val( 47 , strafe_size	    , 0,  99 , 1, 10  );
                    strafe_active_time  = edit_val( 48 , strafe_active_time , 0, 2000, 1, 100 );
                    aim_abuse_type     	= scroll(valName_idx, 49, aim_abuse_type, 0, 4);
                    strafe_type      	= scroll(valName_idx, 50, strafe_type, 0, 4);
                    crouch_setting     	= edit_val( 51, crouch_setting      , 0, 1, 1, 1);
                    crouch_type     	= scroll(valName_idx, 52, crouch_type, 0, 4);
                    auto_ping_type     	= scroll(valName_idx, 53, auto_ping_type, 0, 4);
                    wall_bounce_toggle  = edit_val( 54, wall_bounce_toggle  , 0, 1, 1, 1);
                    super_jump_toggle   = edit_val( 55, super_jump_toggle   , 0, 1, 1, 1);
                    super_glide_toggle  = edit_val( 56, super_glide_toggle  , 0, 1, 1, 1);
                    swap_type		    = scroll(valName_idx, 57, swap_type, 			0, 3 );
                    holster_type		= scroll(valName_idx, 58, holster_type, 		0, 2 );
                    quick_primary       = scroll(valName_idx, 59, quick_primary,   0, 18);
					quick_secondary     = scroll(valName_idx, 60, quick_secondary, 0, 18);
					autoshield_time     = edit_val( 61 , autoshield_time    , 0, 990 , 1, 10  );
                    ads_y_sens          = edit_val( 62 , ads_y_sens         , 99,  130, 1, 10  );
					ads_x_sens          = edit_val( 63 , ads_x_sens         , 99,  105, 1, 10  );
					hf_y_sens           = edit_val( 64 , hf_y_sens          , 99,  99, 1, 10  );
					hf_x_sens           = edit_val( 65 , hf_x_sens          , 99,  99, 1, 10  );
					deadzone		    = edit_val( 66,  deadzone           , 0 ,  40, 1, 10  );
					vertical[bullet_to_edit]   = edit_val2( 67 , vertical[bullet_to_edit]   , 99,  99 , 1, 10 );
					horizontal[bullet_to_edit] = edit_val2( 68 , horizontal[bullet_to_edit] , 99,  99 , 1, 10 );
					time         	 = edit_val( 69 , time             		, 0,  2000, 1, 10  );
					mag_size         = edit_val( 70 , mag_size         		, 0,  55, 1, 10  );
				}
				else // NOT L2 (if not editing value)
				{
					bullet_to_edit                 = scroll(valName_idx, 71, bullet_to_edit, 0, mag_size  );
					if(event_press(PS4_RIGHT))
					{
						valName_idx += 1;
						display_new = TRUE; 
					}
					if(event_press(PS4_LEFT))
					{
						valName_idx -= 1;
						display_new = TRUE;
					}
					if(modName_idx == 0)
					{
						if(aim_assist == 0 || aim_assist == 1)
							vals_available( 0 , 10 );
						if(aim_assist == 2 || aim_assist == 3 || aim_assist == 4 || aim_assist == 5 || aim_assist == 6)
							vals_available( 11 , 26 );
						if(aim_assist == 7)
							vals_available( 27 , 35 );
					}
					if(modName_idx == 1)
					{
						if(batts_assist == 1)
							vals_available( 36 , 38 );
						if(batts_assist == 2)
							vals_available( 39 , 45);
					}
					if(modName_idx == 2) vals_available(45 , 46 );		    
					if(modName_idx == 3) vals_available(47 , 48 ); 	
					if(modName_idx == 4) vals_available(49 , 53 );
					if(modName_idx == 5) vals_available(54 , 56 );
					if(modName_idx == 6) vals_available(57 , 60 );
					if(modName_idx == 7) vals_available(61 , 61 );
					if(modName_idx == 8) vals_available(62 , 66 );
					if(modName_idx == 9) vals_available(67 , 70 );
				}
			} // ModEdit end
			else // if NOT ModEdit BUT if ModMenu
			{
				if(event_press(PS4_RIGHT))
				{
					modName_idx += 1;
					display_new = TRUE;
				}
				if(event_press(PS4_LEFT))
				{
					modName_idx -= 1;
					display_new = TRUE;
				}
		//Cycle mods name
				if(modName_idx > LAST_MODNAME_STRING) // max column for displaying mod name  
					modName_idx = 0;
				if(modName_idx < 0)
					modName_idx = LAST_MODNAME_STRING;	
			// Toggles (UP to turn ON, DOWN to turn OFF)
			//toggle_I_want_to_edit  = toggle( corresponding modName_idx, toggle_I_want_to_edit )                
				aim_assist                     = scroll(modName_idx, 0, aim_assist,   0, 8 );
				batts_assist                   = scroll(modName_idx, 1, batts_assist, 0, 2 );
				headshot_assist                = toggle( 2, headshot_assist     );
				strafe_assist                  = toggle( 3, strafe_assist       );
				autoshield					   = toggle( 7, autoshield	 		);
				find_recoil_vals		       = toggle( 9, find_recoil_vals		);
			} // if NOT ModEdit BUT if ModMenu end
		// If ModMenu AND ModEdit
			if(event_press(PS4_PS))
				Save ();
			block_all_inputs();
		} // ModMenu ON end
	// Out of menu
		if(!ModMenu)
		{
			deadzone(ADS,FIRE,99,99);
			if(current_idx == 12 || current_idx == 18 || hand_gun_mode) 
	        {
	        	HandGunAASpd     = hand_gun_speed;
	        	HandGunAAStr     = hand_gun_size;
	        	HGunAASpd        = hand_gun_speed;
	        	HGunAAStr        = hand_gun_size;
	        	InitializeShapeChange();
    		}
    		if(current_idx != 12 && current_idx != 18 && !hand_gun_mode)
    		{
    			HandGunAASpd     =  speed_v2;
    			HandGunAAStr     = radius_v2;
    			HGunAASpd        = speed_v1;
	        	HGunAAStr        = radius_v1;
       		}
	//  weapon select
			if(get_val(ADS))
			{	
			// set primary sight							HOLD ADS and PRESS RIGHT
				if(event_press(PS4_DOWN))
				{
					primary_sight += 1;
					if(primary_sight > 2 || (GUN_INFO[current_idx][2] != 0 && GUN_INFO[current_idx][2] <= 2 && primary_sight > 1) || GUN_INFO[current_idx][2] == 4)
						primary_sight = 0;
					attachment = 2;
					display_switch = TRUE;
					color = primary_sight + 4;
					//combo_run(A_RUMBLE);
				}
				if(get_ival(PS4_DOWN))
					set_val(PS4_DOWN, 0);  
			// set primary barrel							HOLD ADS and PRESS DOWN
				if(event_press(PS4_RIGHT))
				{
					primary_barrel += 1;
					if(primary_barrel > 3 || GUN_INFO[current_idx][2] > 1)
						primary_barrel = 0;
					attachment = 1;
					display_switch = TRUE;
					color = primary_barrel + 3;
					//combo_run(A_RUMBLE);
				}
				if(get_ival(PS4_RIGHT))
					set_val(PS4_RIGHT, 0); 
			// select favorite primary
				if(get_ptime(PS4_UP) > 300 && get_val(PS4_UP))
				{
					primary = quick_primary;
					primary_out = TRUE;
					current_idx = primary;
					color = 1;
					display_switch = TRUE;
					//combo_run(P_RUMBLE);
				}
				if(get_ival(PS4_UP))
					set_val(PS4_UP,0);
			// set AR                    -                    HOLD ADS and PRESS D-pad UP REPEAT to cycle through ARs
				if(event_press(PS4_UP))
				{	
					primary += 1;
					if(primary <= PRIMARY_SELECT_START || primary > PRIMARY_SELECT_END)
						primary = PRIMARY_SELECT_START;
					if(primary >= PRIMARY_SELECT_END)
						primary = PRIMARY_SELECT_START;
					primary_out = TRUE;
					current_idx = primary;
					color = 1;
					display_switch = TRUE;
					//combo_run(P_RUMBLE);
				}
				if(get_ival(PS4_UP))
					set_val(PS4_UP, 0);
			// reset primary										HOLD ADS and HOLD LEFT
				if(get_ptime(PS4_LEFT) > 300 && get_val(PS4_LEFT))
				{
					primary = 0;
					primary_sight = 0;
					primary_barrel = 0;
					current_idx = 0;
					color = 2;
					display_title = TRUE;
					combo_run(RUMBLE_OFF);
				}
				if(get_ival(PS4_LEFT))
					set_val(PS4_LEFT, 0);
			// set other                  -                   HOLD ADS and PRESS D-pad LEFT
				if(event_press(PS4_LEFT))
				{
					primary += 1;
					if(primary <= SECONDARY_SELECT_START || primary > SECONDARY_SELECT_END)
						primary = SECONDARY_SELECT_START;
					if(primary >= SECONDARY_SELECT_END)
						primary = SECONDARY_SELECT_START;
					primary_out = TRUE;
					current_idx = primary;
					color = 1;
					display_switch = TRUE;
					//combo_run(P_RUMBLE);
				}
				if(get_ival(PS4_LEFT))
					set_val(PS4_LEFT, 0);
		// manually set primary      -                         HOLD ADS and PRESS triangle
				if(event_press(SWAP) && swap_type != 2) 
				{
					set_val(SWAP,0);
					primary_out = TRUE;
					current_idx = primary;
					color = 1;
					//combo_run(P_RUMBLE);
					display_title = TRUE;
				}
				if(get_ival(SWAP) && swap_type != 2)
					set_val(SWAP,0);
		 // manually set secondary        -                     HOLD ADS and PRESS circle
				if(event_press(MELEE) && swap_type != 2) 
				{
					set_val(MELEE,0);
					primary_out = FALSE;
					current_idx = secondary;
					color = 0;
					//combo_run(S_RUMBLE);
					display_title = TRUE;
				}
				if(get_ival(MELEE))
					set_val(MELEE,0);	
			}	
	//   set secondary
			if(get_val(JUMP))
			{	
			// set secondary sight								HOLD JUMP and PRESS DOWN
				if(event_press(PS4_DOWN))
				{
					secondary_sight += 1;
					if(secondary_sight > 2 || (GUN_INFO[current_idx][2] != 0 && GUN_INFO[current_idx][2] <= 2 && secondary_sight > 1) || GUN_INFO[current_idx][2] == 4)
						secondary_sight = 0;
					attachment = -2;
					display_switch = TRUE;
					color = secondary_sight + 4;
					//combo_run(A_RUMBLE);
				}
				if(get_ival(PS4_DOWN))
					set_val(PS4_DOWN, 0);  
			// set secondary barrel								HOLD JUMP and PRESS RIGHT
				if(event_press(PS4_RIGHT))
				{
					secondary_barrel += 1;
					if(secondary_barrel > 3 || GUN_INFO[current_idx][2] > 1)
						secondary_barrel = 0;
					attachment = -1;
					display_switch = TRUE;
					color = secondary_barrel + 3;
					//combo_run(A_RUMBLE);
				}
				if(get_ival(PS4_RIGHT))
					set_val(PS4_RIGHT, 0); 
			// select favorite secondary
				if(get_ptime(PS4_UP) > 300 && get_val(PS4_UP))
				{
					secondary = quick_secondary;
					primary_out = FALSE;
					current_idx = secondary;
					color = 0;
					display_switch = TRUE;
					//combo_run(S_RUMBLE);
				}
				if(get_ival(PS4_UP))
					set_val(PS4_UP,0);
		    // set AR                    -                   HOLD JUMP and PRESS D-pad UP REPEAT to cycle through ARs
				if(event_press(PS4_UP))
				{	
					secondary += 1;
					if(secondary <= PRIMARY_SELECT_START || secondary > PRIMARY_SELECT_END)
						secondary = PRIMARY_SELECT_START;
					if(secondary >= PRIMARY_SELECT_END)
						secondary = PRIMARY_SELECT_START;
					primary_out = FALSE;
					current_idx = secondary;
					color = 0;
					display_switch = TRUE;
					//combo_run(S_RUMBLE);
				}
				if(get_ival(PS4_UP))
					set_val(PS4_UP, 0);
		 // reset secondary										HOLD JUMP and PRESS CROSS
				if(get_ptime(PS4_LEFT) > 300 && get_val(PS4_LEFT))
				{
					secondary = 0;
					secondary_sight = 0;
					secondary_barrel = 0;
					current_idx = 0;
					color = 2;
					display_title = TRUE;
					combo_run(RUMBLE_OFF);
				}
				if(get_ival(PS4_LEFT))
					set_val(PS4_LEFT, 0);
		 // set other                   -                     HOLD JUMP and PRESS D-pad LEFT
				if(event_press(PS4_LEFT))
				{
					secondary += 1;
					if(secondary <= SECONDARY_SELECT_START || secondary > SECONDARY_SELECT_END)
						secondary = SECONDARY_SELECT_START;
					if(secondary >= SECONDARY_SELECT_END)
						secondary = SECONDARY_SELECT_START;
					primary_out = FALSE;
					current_idx = secondary;
					color = 0;
					display_switch = TRUE;
					//combo_run(S_RUMBLE);
				}
				if(get_ival(PS4_LEFT))
					set_val(PS4_LEFT, 0);
			}
			if(current_idx == 7 || current_idx == 16)
			{
				if(primary_out)
					primary_sight = 1;
				else
					secondary_sight = 1;
			}
				
			if(primary > 0 || secondary > 0)
				default = FALSE;
				
			if(event_press(PS4_RIGHT) && !get_val(ADS) && !get_val(JUMP) && !default)
				grenade = TRUE;
		// Dual trigger	
			if(swap_type == 3)
			{
				if(!primary_out && !get_ival(TACTICAL))
					swap(PING,FIRE);
				if(get_ival(FIRE))
				{
					if(!primary_out && !get_ival(TACTICAL) && get_ptime(TACTICAL) > 500)
					{
						combo_run(SWITCH);
						primary_out = TRUE;
						current_idx = primary;
					}	
				}
				if(get_ival(PING))
				{
					if(primary_out && !get_ival(TACTICAL) && get_ptime(TACTICAL) > 500)
					{
						combo_run(SWITCH);
						primary_out = FALSE;
						current_idx = secondary;
					}	
				}
				
				if (combo_running(SWITCH)) { 
					set_val(FIRE, 0); 
					set_val(PING, 0); 
				}
			}
			if(!grenade && holster && (get_val(ADS) || (get_val(FIRE))) && !timer_on)
			{
				if(swap_type == 1)
				{
					primary_out = TRUE;
					current_idx = primary;
				}
				combo_run(pull_out);
			}
			if(grenade && get_ival(SWAP))
				combo_run(pull_out);
			if(grenade && get_ival(ADS))
				grenade = FALSE;
			if(grenade && holster && get_val(FIRE))
				holster = FALSE;
		// auto holster
			if(((holster_type == 1 && event_press(SPRINT) && get_ival(RELOAD)) || (holster_type == 2 &&event_press(SPRINT) && get_val(MOVE_Y) < -95)) && !holster)
			{
				timer_on = TRUE
				combo_run(auto_holster);
				cls_oled(0);
				print(center_x(sizeof(HOLSTER_STR) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,HOLSTER_STR[0]);
				if(default)
					print(center_x(sizeof(Weapons[0]) - 1,OLED_FONT_SMALL_WIDTH) ,9, 0, 1,Weapons[0]);
				else if(primary_out)
					print(center_x(sizeof(PRIMARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, PRIMARY_STR[0]);
				else if(!primary_out) 
					print(center_x(sizeof(SECONDARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, SECONDARY_STR[0]);
			}
			if(holster && !grenade && get_val(FIRE))
				set_val(FIRE,0);
		//  normal holster
			if(get_ptime(SWAP)>300 && event_release(SWAP) && !holster && holster_type == 0) 
			{
				timer_on = TRUE;
				holster = TRUE;
				cls_oled(0);
				print(center_x(sizeof(HOLSTER_STR) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,HOLSTER_STR[0]);
				if(default)
					print(center_x(sizeof(Weapons[0]) - 1,OLED_FONT_SMALL_WIDTH) ,9, 0, 1,Weapons[0]);
				else if(primary_out)
					print(center_x(sizeof(PRIMARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, PRIMARY_STR[0]);
				else if(!primary_out) 
					print(center_x(sizeof(SECONDARY_STR) - 1, OLED_FONT_SMALL_WIDTH), 9, 0, 1, SECONDARY_STR[0]);
			}
			if(timer_on)
				timer++;
			if((timer > 30 && holster) || (timer > 17 && !holster))
			{
				timer = 0;
				timer_on = FALSE;
			}
		// Switch Primary/secondary       -                   tap weapon swap 
			if(event_release(SWAP) && get_ptime(SWAP)<200 && !default && !combo_running(pull_out)) 
			{
				timer_on = TRUE;
				if(!holster && !grenade && swap_type == 0 && !get_val(ADS) && timer == 0)
					primary_out=!primary_out;
				if(swap_type == 1 && !primary_out && holster)
					primary_out=TRUE;
				if(swap_type == 1 && !holster && !get_val(ADS))
					primary_out=!primary_out;
				if(swap_type == 2 && get_ival(ADS))
					primary_out=!primary_out;
				if(primary_out)
				{
					current_idx = primary;
					if(primary > 0)
						color = 1;
					//set_rumble(RUMBLE_A, 85);
					//reset_rumble();
				}
				else
				{
					current_idx = secondary;
					if(secondary > 0)
						color = 0;
					//set_rumble(RUMBLE_A, 85);
					//reset_rumble();
				}
				display_title = TRUE;
				holster = FALSE;
				grenade = FALSE;
			} 	
			if(holster)
				combo_run(Rainbow_Flash);
			else
				combo_stop(Rainbow_Flash);
	// Hand gun mode
			if(event_press(PS4_DOWN) && get_val(PRONE))
			{
				hand_gun_mode = !hand_gun_mode;
				if(hand_gun_mode)
					print(center_x(sizeof(HG_ON) - 1,OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM_HEIGHT),OLED_FONT_MEDIUM,OLED_WHITE,HG_ON[0]);
				else
					display_title = TRUE;
			}
			if(get_ival(PS4_DOWN) && get_val(PING))
				set_val(PS4_DOWN, 0);
			if(event_press(SWAP))
			{
				rapid_fire_on = FALSE;
				hand_gun_mode = FALSE;
				display_title = TRUE;
			}
	//  Mods
	// Taylordrift Aim Assist
			if(aim_assist == 0 || aim_assist == 1 || aim_assist == 2 || aim_assist == 3 || aim_assist == 4  || aim_assist == 5 || aim_assist == 6 ){ 	// V1 && V6 										
				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
				MaxMagnitude    = (ActualMagnitude < 100);  
				RX              = get_val(AIM_X);
				RY              = get_val(AIM_Y); 
				CycleRefresh    += get_rtime();
				
				if(aim_assist == 0 || aim_assist == 1){ 
					GetAngle(aim_assist_shapes,angleVersionOne,HGunAAStr);
					if(boost_fire_v1 && get_val(FIRE)){
						angleVersionOne += HGunAASpd + BoostAngle;
					}
					else { 
						angleVersionOne += HGunAASpd;
					}
					if(boost_fire_v1){
						if(get_val(FIRE)){ 
							AimAssistBoost = get_rumble(RumbleToUse());
							BoostAngle = boost_speed_v1;
			        		if(AimAssistBoost > 10 && AimAssistBoost < 90){  
					   			BoostedAimAssist  = (boost_strength_v1 + AimAssistBoost / 6); 
				   			}
				   			if(boost_reducer_v1){ 
								if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
									GetAngle(aim_assist_shapes,angleVersionOne,HGunAAStr + inv(boost_strength_v1));
								}else{ 
							   	 	GetAngle(aim_assist_shapes,angleVersionOne,inv(BoostedAimAssist/2));
						   		} 
						   	}else{
						   		if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
									GetAngle(aim_assist_shapes,angleVersionOne,HGunAAStr + boost_strength_v1);
								}else{ 
						   	 		GetAngle(aim_assist_shapes,angleVersionOne,BoostedAimAssist)
						   	    } 
					   		} 
				   		} 
				   		if(event_release(FIRE)){ 
				   			BoostedAimAssist = 0;
				   			AimAssistBoost   = 0;
				   		} 
				   	} 
				} 
				if(aim_assist == 2  || aim_assist == 3  || aim_assist == 5 || aim_assist == 6 ){ 
					GetAngle(aim_assist_shapes,angleVersionFive,HandGunAAStr);
					if(boost_fire_v2 && get_val(FIRE)){ 
						if((abs(get_val(AIM_X)) < 10) * (abs(get_val(AIM_Y)) < 10)) 
						    angleVersionFive += ads_speed + BoostAnglev4;
					    else
						    angleVersionFive +=  HandGunAASpd + BoostAnglev4;
					}else{ 
						if((abs(get_val(AIM_X)) < 10) * (abs(get_val(AIM_Y)) < 10)) 
						    angleVersionFive += ads_speed;
						else
						    angleVersionFive +=  HandGunAASpd;
					} 
					
				    if(boost_fire_v2){
						if(get_val(FIRE)){ 
							AimAssistBoostv4 = get_rumble(RumbleToUse());
							BoostAnglev4 =  boost_speed_v2;
			        		if(AimAssistBoostv4 > 10 && AimAssistBoostv4 < 90){  
					   			BoostedAimAssistv4  = (boost_strength_v2 + AimAssistBoostv4 / 6); 
				   			}
				   			if(boost_reducer_v2){ 
								if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
									GetAngle(aim_assist_shapes,angleVersionFive,HandGunAAStr + inv(boost_strength_v2));
								}else{ 
							   	 	GetAngle(aim_assist_shapes,angleVersionFive,inv(BoostedAimAssistv4/2));
						   		} 
						   	}else{ 
						   		if(!get_rumble(RUMBLE_A) && !get_rumble(RUMBLE_B)){ 
									GetAngle(aim_assist_shapes,angleVersionFive,HandGunAAStr + boost_strength_v2);
								}else{ 
						   	 		GetAngle(aim_assist_shapes,angleVersionFive,BoostedAimAssistv4);
						   	 	} 
					   		} 
				   		}
				   		
				   		if(event_release(FIRE)){ 
				   			BoostedAimAssistv4 = 0;
				   			AimAssistBoostv4   = 0;
				   		} 
				   	} 
			    }
			    if(aim_assist == 2  || aim_assist == 3  || aim_assist == 4 || aim_assist == 5 || aim_assist == 6){ 
			    	Tracking        = (Tracking + tracking_speed) % 360;
				    if(shape_direction){ 
				    	AngleDirection = (get_val(AIM_X) > 0);
				    } 
				    if(tracking){ 
						Tracker1 = (tracking_size * sin(Tracking)/100);
				        Tracker2 = (tracking_size * cos(Tracking)/100);
				    }    
				}
				if(aim_assist == 4){ 
					angleVersionFive += get_rtime();
					GetAngle(aim_assist_shapes,SpeedAngle,HandGunAAStr);
					SpeedAngle = (SpeedAngle  + (angleVersionFive / 100)) % 360;
				} 
				if(AimAssistActivation()){
					if(aim_assist == 0 || aim_assist == 0 && boost_fire_v1){ 
						if(ActualMagnitude < HGunAAStr){
					   		SinAngle -= RX;                                                              
							CosAngle -= RY;
						}else{
							SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
							CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
						}
					}
					if(aim_assist == 0 || aim_assist == 3 || aim_assist == 4){ 
						set_val(AIM_X, clamp(RX + CosAngle, -100, 100));
						set_val(AIM_Y, clamp(RY + SinAngle, -100, 100));
					} 
					if(aim_assist == 1 || aim_assist == 2){ 
						offset(POLAR_RS + 8,SinAngle);
						offset(POLAR_RS + 7,CosAngle);
					}
						
				} 
				if(event_release(ADS) || event_release(FIRE)){ 
			    	angleVersionFive = 0;
			    	Positionv2 = 0;
			    	Position = 0;
			    }
			  
			    if(aim_assist == 5){	
			    	if(AimAssistActivation()){
			    	
				    	if(get_val(FIRE)){ 
				    		PolarAimAssist = get_ptime(FIRE); 
				    	}
						if(PolarAimAssist <= PolarStart){
			         		offset(POLAR_RS + 8,SinAngle);
							offset(POLAR_RS + 7,CosAngle);
			     		}
			     		if((PolarAimAssist > PolarStart) && (PolarAimAssist <= PolarMid)){
			         		set_val(AIM_X, clamp(RX + CosAngle, -100, 100));
							set_val(AIM_Y, clamp(RY + SinAngle, -100, 100));
			     		}
			     		if(PolarAimAssist > PolarMid) {
			         		set_val(AIM_X, clamp(RX + CosAngle, -100, 100));
							set_val(AIM_Y, clamp(RY + SinAngle, -100, 100));
			     		}
			     		if(event_release(FIRE)){ 
			     			PolarAimAssist = 0;
			     		} 
			     	} 
				} 
			
				if(aim_assist == 6){	
			    	
			    	if(AimAssistActivation()){
			    
			    		if(get_val(FIRE)){ 
			    			PolarAimAssistv1 = get_ptime(FIRE);
			    		}
						if(PolarAimAssistv1 <= PolarStart){
			         		set_val(AIM_X, clamp(RX + CosAngle, -100, 100));
							set_val(AIM_Y, clamp(RY + SinAngle, -100, 100));
			     		}
			     		 
			     		if((PolarAimAssistv1 > PolarStart) && (PolarAimAssistv1 <= PolarMid)){
			     			offset(POLAR_RS + 8,SinAngle);
							offset(POLAR_RS + 7,CosAngle);	
			     		}
			     		if(PolarAimAssistv1 > PolarMid) {
			         		offset(POLAR_RS + 8,SinAngle);
							offset(POLAR_RS + 7,CosAngle);
			     		}
			     		if(event_release(FIRE)){ 
			     			PolarAimAssistv1 = 0;
			     		}
		     	  	} 
				} 
			} 
			if(aim_assist == 7){ 
				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
				MaxMagnitude    = (ActualMagnitude < 100);  
				RX              = get_val(AIM_X);
				RY              = get_val(AIM_Y); 
				CycleRefresh    += get_rtime();
				angleVersionOne += Angle;
				GetAngle(aim_assist_shapes,angleVersionOne,Radius);
					
				if ((get_ival(ADS) || get_val(FIRE)) && abs(get_ival(RX)) <= dogz_deadzone && abs(get_ival(RY)) <= dogz_deadzone) {
					
					if (get_val(FIRE)) {
		                Radius = fire_power;
		            	Angle  = fire_speed;
		            }else{   
		                Radius = base_power;
		                Angle  = base_speed;
		            }
		            offset(POLAR_RS + 8,SinAngle);
					offset(POLAR_RS + 7,CosAngle);
		        } 
		        if ((get_ival(ADS) || get_val(FIRE)) && (abs(get_ival(RX)) > dogz_deadzone || abs(get_ival(RY)) > dogz_deadzone)) {
		        
		        	if(ActualMagnitude < 20){
				   		SinAngle -= RX;                                                              
					    CosAngle -= RY;
					}else{
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
					}
					set_val(AIM_X, clamp(RX + CosAngle, -100, 100));
					set_val(AIM_Y, clamp(RY + SinAngle, -100, 100));
		    	} 
		    } 
	 // Sticky Aim
		    if(batts_assist == 1){
				if(AimAssistActivationBatts()){
					combo_run(StickyAim);
				}
			}
	 //  Triple Sticky
			if(batts_assist == 2)
			{					
				if(get_ival(ADS) && !get_ival(FIRE))
				{
					combo_run(Sticky_AA);
					Aim_Val  = sticky_ads_size;
					Wait_Val = sticky_ads_time;
				}
				else if(get_ival(ADS) && get_ival(FIRE))
				{
					combo_run(Sticky_AA);
					Aim_Val  = sticky_fire_size;
					Wait_Val = sticky_fire_time;
				}
				else if(!get_ival(ADS) && get_ival(FIRE))
				{
					combo_run(Sticky_AA);
					Aim_Val  = sticky_hip_size;
					Wait_Val = sticky_hip_time;
				}
				else
					combo_stop(Sticky_AA);
			}
	// headshot assist
			if(headshot_assist == 1) {
				RY = headshot_strength * -1;
				if(get_val(FIRE) && get_ptime(FIRE) < headshot_hold_time * 10) { 	
					offset(AIM_Y,RY);	
				}
			}
	// strafe assist
			if(strafe_assist == 1){ 
				if(get_val(FIRE) && get_ptime(FIRE) < strafe_active_time * 10){ 
					Angle += get_rtime();
					StrafeAngle = (StrafeAngle  + (Angle / 100)) % 360;
					combo_run(StrafeAA);
				}
			}
	// Aim Abuse	
			if(aim_abuse_type > 0)
   			{
   				if(aim_abuse_type == 1 && get_val(FIRE))
   					combo_run(AIM_ABUSE);
   				if(aim_abuse_type == 2 && (get_ival(RELOAD) && get_val(FIRE) && get_ival(ADS)))
     				combo_run(AIM_ABUSE);
     			if(aim_abuse_type == 3 && (get_ival(RELOAD) && get_val(FIRE) && !get_ival(ADS)))
     				combo_run(AIM_ABUSE);
     			if(aim_abuse_type == 4 && get_ival(RELOAD) && get_val(FIRE))
     				combo_run(AIM_ABUSE);
     			if(event_release(FIRE))
     				combo_stop(AIM_ABUSE);
     		}
	// Strafe Shot	
			if(strafe_type > 0)
   			{
   				if(strafe_type == 1 && get_val(FIRE))
   					combo_run(strafe);
   				if(strafe_type == 2 && (get_ival(RELOAD) && get_val(FIRE) && get_ival(ADS)))
     				combo_run(strafe);
     			if(strafe_type == 3 && (get_ival(RELOAD) && get_val(FIRE) && !get_ival(ADS)))
     				combo_run(strafe);
     			if(strafe_type == 4 && get_ival(RELOAD) && get_val(FIRE))
     				combo_run(strafe);
     			if(event_release(FIRE))
     				combo_stop(strafe);
     		}
	//  Crouch Shot
			if(crouch_type > 0)
			{  
				if(crouch_setting)
					crouch_time = 20;
				if(!crouch_setting)
					crouch_time = 110;
				if(crouch_type == 1 && get_val(FIRE))
   					combo_run(CrouchShot);
   				if(crouch_type == 2 && (get_ival(RELOAD) && get_val(FIRE) && get_ival(ADS)))
     				combo_run(CrouchShot);
     			if(crouch_type == 3 && (get_ival(RELOAD) && get_val(FIRE) && !get_ival(ADS)))
     				combo_run(CrouchShot);
     			if(crouch_type == 4 && get_ival(RELOAD) && get_val(FIRE))
     				combo_run(CrouchShot);
     			if(event_release(FIRE))
     				combo_stop(CrouchShot);  
			}	
	// Ping on fire	
			if(auto_ping_type > 0)
   			{
   				if(auto_ping_type == 1 && get_val(FIRE))
   					combo_run(auto_ping);
   				if(auto_ping_type == 2 && (get_ival(RELOAD) && get_ival(ADS)))
     				combo_run(auto_ping);
     			if(auto_ping_type == 3 && (get_ival(RELOAD) && get_val(FIRE)))
     				combo_run(auto_ping);
     			if(auto_ping_type == 4 && (get_ival(RELOAD) || get_val(FIRE)))
     				combo_run(auto_ping);
     			if(event_release(FIRE) || get_ptime(RELOAD) > 400)
     				combo_stop(auto_ping);
     		}
	//  Auto Armor Swap							      				  HOLD RELOAD and tap SWAP
			if(autoshield)
			{	    
				if(get_ival(RELOAD) && event_press(SWAP)) 
         			combo_run(armor_swap);
         		if(get_ival(SWAP) && get_ival(RELOAD))
         			set_val(SWAP, 0);
			} 
	// cancel slide
			if((get_val(MOVE_Y) < -85))//|| (get_val(MOVE_Y) > 95) || (get_val(MOVE_X) < -95) || (get_val(MOVE_X) > 95))
    		{
		      	if(event_release (PRONE))
		         	combo_run(CANCEL_SLIDE);
	    	}         
	    	if(combo_running(SUPER_GLIDE) || (event_press(JUMP) && combo_running(CANCEL_SLIDE))) 
	    	{
		        	combo_stop(CANCEL_SLIDE);
		        	set_val(JUMP, 100);
		    }
	// Heirloom Spin
			if(holster && use_heirloom)
			{
				if(get_ival(RELOAD))
					combo_run(heirloom_spin);
				if(event_release(RELOAD))
					combo_stop(heirloom_spin)
			}
	// Quick Heal
			if (get_val(RELOAD))	
			{
				set_val(PS4_DOWN,0);
				set_val(PS4_UP,0);
				set_val(PS4_RIGHT,0); 
				set_val(PS4_LEFT,0);
				if(event_press(PS4_UP))
					combo_run(fenice);
				if(event_press(PS4_DOWN))
					combo_run(cell);
				if(event_press(PS4_LEFT))
					combo_run(MEDIKIT)
				if(event_press(PS4_RIGHT))
					combo_run(BATTERY);
				if(event_press(TACTICAL))
					combo_run(siringa);
				if(get_ival(TACTICAL))
					set_val(TACTICAL,0);
			}	
	//  Wall Bounce
			if(wall_bounce_toggle)
			{
				if(get_ptime(TACTICAL)>500)
					drone = TRUE;
				if(event_press(PRONE))
					slide = TRUE;
				if(get_val(JUMP) && !drone && slide)
					combo_run(wall_bounce);
			}
	//  Super jump and super glide
			if(super_glide_toggle)
			{
				if(get_ival(RELOAD) && get_val(MOVE_Y) < -90) 
				{
					if(event_press(PRONE)) 
						combo_run(SUPER_GLIDE);	
					if(get_ival(PRONE))
						set_val(PRONE,0);
				}
			}
			if(super_jump_toggle)
			{
				if(get_ival(JUMP))
				{
					if(event_press(RELOAD))
						combo_run(SUPER_JUMP);
					if(get_ival(RELOAD) && get_ival(JUMP) && get_ptime(RELOAD) < 200)
					{
						set_val(RELOAD,0);
						set_val(JUMP,0);
					}
				}
			}
	//  Auto enable Rapid Fire for selected guns
			if(GUN_INFO[current_idx][3]== 1 && get_val(FIRE))
				combo_run(RAPID_FIRE);
			if(rapid_fire_on && get_val(FIRE))
			{
				combo_run(RAPID_FIRE);
			}
			if(event_release(FIRE))
					combo_stop(RAPID_FIRE);
	// Anti-Recoil	
			// get gun fire time
				if(find_recoil_vals && time > 0)
					vm_loops = time / mag_size; // divide total mag time / by number of bullet
				else
					vm_loops = GUN_INFO[current_idx][0] / GUN_INFO[current_idx][1]; // divide total mag time / by number of bullet
    		// resets after fire
    			if(!get_val(FIRE)) 
   				{
   					bullet = 0;
   					bulleth = 0;
       				vm_count = 0;
        			p_count = 0;
       				vm_counth = 0;
        			p_counth = 0;
        			if(!find_recoil_vals){	
        				ar_y = VERTICAL[current_idx][bullet];
        				ar_x = HORIZONTAL[current_idx][bulleth];
        			}
        			else {
        				ar_y = vertical[bullet];
        				ar_x = horizontal[bulleth];
        			}
   				}  
   			// hipfire anti recoil
   				if(!get_val(ADS) && get_val(FIRE))
   				{
   					ar_y = per_bullet_vertical();
            		ar_x = per_bullet_horizontal();
            		OffsetAR(AIM_Y,adjust_recoil((ar_y*inverted), primary_out, GUN_INFO[current_idx][2], hf_y_sens));	
         			OffsetAR(AIM_X,adjust_recoil(ar_x, primary_out, GUN_INFO[current_idx][2], hf_x_sens));
   				}
   			// ads anti recoil
    	 		if(get_val(ADS) && get_val(FIRE))
    			{
            		stop_count++;
            		stop_time = stop_time + get_rtime();
            		if(!find_recoil_vals){
            			ar_y = per_bullet_vertical();
            			ar_x = per_bullet_horizontal();
            		}
            		else {
            			ar_y = edit_bullet_vertical();
            			ar_x = edit_bullet_horizontal();
          			}
          	// Vertical
          			OffsetAR(AIM_Y,adjust_recoil((ar_y*inverted), primary_out, GUN_INFO[current_idx][2], ads_y_sens));	
    	   	// Horizontal
         			OffsetAR(AIM_X,adjust_recoil(ar_x, primary_out, GUN_INFO[current_idx][2], ads_x_sens));
         			
   				}
   				if(!get_val(ADS)){
   					stop_count = 0;
   					stop_time = 0;
   				}
   				set_val(TRACE_6, stop_count);
   		}
   		set_val(TRACE_5, autoshield);
	// Display OLED
		if(display_new) 
		{
	// Clear OLED screen	
			cls_oled(0);
			count_black = 0;// reset screen saver counter
			if(ModEdit)
			{

				display_edit1( 0, center_x(get_vals_chars( 0), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 0], aa_fire_type        ,6 );
                display_edit1( 1, center_x(get_vals_chars( 1), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 1], aim_assist_type     ,4 );
				display_edit1( 2, center_x(get_vals_chars( 2), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 2], aim_assist_shapes   ,5 );
				display_edit ( 3, center_x(get_vals_chars( 3), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 3], speed_v1            ,0 );
				display_edit ( 4, center_x(get_vals_chars( 4), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 4], radius_v1           ,0 );
				display_edit1( 5, center_x(get_vals_chars( 5), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 5], boost_fire_v1       ,1 );
				display_edit1( 6, center_x(get_vals_chars( 6), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 6], boost_reducer_v1    ,1 );
				display_edit ( 7, center_x(get_vals_chars( 7), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 7], boost_strength_v1   ,0 );
				display_edit ( 8, center_x(get_vals_chars( 8), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 8], boost_speed_v1      ,0 );
				display_edit ( 9, center_x(get_vals_chars( 9), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[ 9], hand_gun_speed      ,0 );
                display_edit (10, center_x(get_vals_chars(10), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[10], hand_gun_size       ,0 );
                display_edit1(11, center_x(get_vals_chars(11), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[11], aa_fire_type        ,6 );      
				display_edit1(12, center_x(get_vals_chars(12), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[12], aim_assist_type     ,4 );
				display_edit1(13, center_x(get_vals_chars(13), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[13], aim_assist_shapes   ,5 );
				display_edit1(14, center_x(get_vals_chars(14), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[14], shape_direction     ,1 );
				display_edit (15, center_x(get_vals_chars(15), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[15], ads_speed           ,0 );
			    display_edit (16, center_x(get_vals_chars(16), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[16], speed_v2            ,0 );
				display_edit (17, center_x(get_vals_chars(17), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[17], radius_v2           ,0 );
				display_edit1(18, center_x(get_vals_chars(18), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[18], boost_fire_v2       ,1 );
				display_edit1(19, center_x(get_vals_chars(19), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[19], boost_reducer_v2    ,1 );
				display_edit (20, center_x(get_vals_chars(20), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[20], boost_strength_v2   ,0 );
				display_edit (21, center_x(get_vals_chars(21), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[21], boost_speed_v2      ,0 );
				display_edit1(22, center_x(get_vals_chars(22), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[22], tracking            ,1 );
				display_edit (23, center_x(get_vals_chars(23), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[23], tracking_size       ,0 );
				display_edit (24, center_x(get_vals_chars(24), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[24], tracking_speed      ,0 );
				display_edit (25, center_x(get_vals_chars(25), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[25], hand_gun_speed      ,0 );
                display_edit (26, center_x(get_vals_chars(26), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[26], hand_gun_size       ,0 );
				display_edit1(27, center_x(get_vals_chars(27), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[27], aim_assist_type     ,4 );
				display_edit1(28, center_x(get_vals_chars(28), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[28], aim_assist_shapes   ,5 );
				display_edit (29, center_x(get_vals_chars(29), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[29], base_speed          ,0 );
				display_edit (30, center_x(get_vals_chars(30), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[30], zone_speed          ,0 );
			    display_edit (31, center_x(get_vals_chars(31), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[31], fire_speed     	    ,0 );	
				display_edit (32, center_x(get_vals_chars(32), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[32], base_power     	    ,0 );
				display_edit (33, center_x(get_vals_chars(33), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[33], zone_power          ,0 );
			    display_edit (34, center_x(get_vals_chars(34), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[34], fire_power     	    ,0 );
                display_edit (35, center_x(get_vals_chars(35), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[35], dogz_deadzone       ,0 );
                display_edit1(36, center_x(get_vals_chars(36), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[36], aa_fire_type_v1     ,6 );
                display_edit (37, center_x(get_vals_chars(37), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[37], sticky_size         ,0 );
				display_edit (38, center_x(get_vals_chars(38), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[38], sticky_time         ,0 );
			    display_edit (39, center_x(get_vals_chars(39), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[39], sticky_ads_size     ,0 );
				display_edit (40, center_x(get_vals_chars(40), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[40], sticky_ads_time     ,0 ); 
				display_edit (41, center_x(get_vals_chars(41), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[41], sticky_hip_size	    ,0 );
				display_edit (42, center_x(get_vals_chars(42), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[42], sticky_hip_time	    ,0 );
				display_edit (43, center_x(get_vals_chars(43), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[43], sticky_fire_size    ,0 ); 
				display_edit (44, center_x(get_vals_chars(44), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[44], sticky_fire_time    ,0 );
			    display_edit (45, center_x(get_vals_chars(45), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[45], headshot_strength   ,0 );
			    display_edit (46, center_x(get_vals_chars(46), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[46], headshot_hold_time  ,0 );
                display_edit (47, center_x(get_vals_chars(47), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[47], strafe_size         ,0 );
                display_edit (48, center_x(get_vals_chars(48), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[48], strafe_active_time  ,0 );
                display_edit1(49, center_x(get_vals_chars(49), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[49], aim_abuse_type      ,7 );
                display_edit1(50, center_x(get_vals_chars(50), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[50], strafe_type     	,7 );
                display_edit1(51, center_x(get_vals_chars(51), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[51], crouch_setting      ,2 );
                display_edit1(52, center_x(get_vals_chars(52), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[52], crouch_type     	,7 );
                display_edit1(53, center_x(get_vals_chars(53), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[53], auto_ping_type      ,8 );
                display_edit1(54, center_x(get_vals_chars(54), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[54], wall_bounce_toggle  ,1 );
                display_edit1(55, center_x(get_vals_chars(55), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[55], super_jump_toggle   ,1 );
                display_edit1(56, center_x(get_vals_chars(56), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[56], super_glide_toggle  ,1 );
                display_edit1(57, center_x(get_vals_chars(57), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[57], swap_type		    ,9 );
                display_edit1(58, center_x(get_vals_chars(58), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[58], holster_type		,10);
                display_edit1(59, center_x(get_vals_chars(59), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[59], quick_primary       ,3 );
				display_edit1(60, center_x(get_vals_chars(60), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[60], quick_secondary     ,3 );
				display_edit (61, center_x(get_vals_chars(61), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[61], autoshield_time     ,0 );
                display_edit (62, center_x(get_vals_chars(62), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[62], ads_y_sens          ,0 );
				display_edit (63, center_x(get_vals_chars(63), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[63], ads_x_sens          ,0 );
				display_edit (64, center_x(get_vals_chars(64), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[64], hf_y_sens           ,0 );
				display_edit (65, center_x(get_vals_chars(65), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[65], hf_x_sens           ,0 );
				display_edit (66, center_x(get_vals_chars(66), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[66], deadzone		    ,0 );
				display_edit (67, center_x(get_vals_chars(67), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[67], vertical[bullet_to_edit],1 );
				display_edit (68, center_x(get_vals_chars(68), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[68], horizontal[bullet_to_edit],1 );
				display_edit (69, center_x(get_vals_chars(69), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[69], time         	 	,0 );
				display_edit (70, center_x(get_vals_chars(70), OLED_FONT_MEDIUM_WIDTH), EDIT_VAL_NAMES[70], mag_size + 1      	,0 );
			// Mods that have same value on every Profile
			}	
			else
			{
			// Display Mod Name and ON/OFF
				display_mod2( 0 ,  center_x(sizeof(AIMASSIST)      - 1, OLED_FONT_MEDIUM_WIDTH)  , AIMASSIST[0]     , aim_assist        , 4); 
				display_mod2( 1 ,  center_x(sizeof(BATTSASSIST)    - 1, OLED_FONT_MEDIUM_WIDTH)  , BATTSASSIST[0]   , batts_assist      ,13); 
				display_mod ( 2 ,  center_x(sizeof(HEADSHOTASSIST) - 1, OLED_FONT_MEDIUM_WIDTH)  , HEADSHOTASSIST[0], headshot_assist      );
				display_mod ( 3 ,  center_x(sizeof(STRAFEASSIST)   - 1, OLED_FONT_MEDIUM_WIDTH)  , STRAFEASSIST[0]  , strafe_assist        );
				display_mod2( 4 ,  center_x(sizeof(SHOTMODS)       - 1, OLED_FONT_MEDIUM_WIDTH)  , SHOTMODS[0]      , 0         		, 0);
				display_mod2( 5 ,  center_x(sizeof(MOVEMENT)       - 1, OLED_FONT_MEDIUM_WIDTH)  , MOVEMENT[0]      , 0				    , 0);
				display_mod2( 6 ,  center_x(sizeof(WEAPONMODS)     - 1, OLED_FONT_MEDIUM_WIDTH)  , WEAPONMODS[0]    , 0				    , 0);
				display_mod ( 7 ,  center_x(sizeof(AUTOSHIELD)     - 1, OLED_FONT_MEDIUM_WIDTH)  , AUTOSHIELD[0]    , autoshield           );
				display_mod2( 8 ,  center_x(sizeof(SENSITIVITY)    - 1, OLED_FONT_MEDIUM_WIDTH)  , SENSITIVITY[0]   , 0 				, 0);
				display_mod ( 9 ,  center_x(sizeof(BULLETMOD)      - 1, OLED_FONT_MEDIUM_WIDTH)  , BULLETMOD[0]     , find_recoil_vals     );
			} 	
			display_black = TRUE;
			display_new = FALSE;
		} // display_new end
	led_color();
	} // NOT KillSwitch end
	else
		combo_run(Rainbow_Flash);
} // main end

//                COMBOS
//___________________________________________________________________________________________________
combo StickyAim {
	offset(AIM_Y,sticky_size);
	wait(sticky_time);
	offset(AIM_X,sticky_size);
	offset(MOVE_X,sticky_size);
	wait(sticky_time);
	offset(AIM_Y,inv(sticky_size));
	wait(sticky_time);
	offset(AIM_X,inv(sticky_size));
	offset(MOVE_X,inv(sticky_size));
	wait(sticky_time);
}
combo StrafeAA { 
	offset(PS4_LX,strafe_size);
	wait(SpeedAngle);
	wait(20);
	offset(PS4_LX,inv(strafe_size));
	wait(SpeedAngle);
	wait(20);
} 
combo auto_holster {
	set_val(SWAP, 100);
	wait(240);
	set_val(SWAP, 0);
	holster = TRUE;
}
combo wall_bounce {
	wait(50);
	set_val(MOVE_X,0);
	set_val(MOVE_Y,0);
	slide = FALSE;
	drone = FALSE;
	wait(300);
}
combo SUPER_JUMP {
	set_val(JUMP,0);
	set_val(RELOAD, 100);
	wait(20);
	set_val(RELOAD,0);
	wait(100);
	set_val(JUMP,100):
	wait(20);
	set_val(JUMP, 0);
	wait(20);
	set_val(JUMP, 100);
	wait(20);
	set_val(JUMP, 0);
}
combo SUPER_GLIDE {
	wait(50);
	set_val(JUMP, 100);
	wait(20);
	set_val(PRONE,100);
	wait(1000);
	set_val(JUMP, 0);
	set_val(PRONE,0);
}
combo CrouchShot {
	set_val(PRONE,100);
	wait(crouch_time * 2 + 10);
	set_val(PRONE,0);
	wait(crouch_time);
	wait(150);
}
combo SWITCH {
	set_val(SWAP, 100);
	wait(20);
	set_val(SWAP, 0);
	wait(100);
	display_title = TRUE;
}
combo pull_out {
	set_val(SWAP, 0);
	wait(20);
	set_val(SWAP, 100);
	wait(20);
	set_val(SWAP, 0);
	display_title = TRUE;
	holster = FALSE;
	grenade = FALSE;
	wait(100);
}
combo CANCEL_SLIDE {              
    set_val(PRONE, 100);          
    wait(120);                         
    set_val(PRONE, 0);            
    wait(60);                          
    set_val(PRONE, 100);          
    wait(50);                          
    set_val(PRONE, 100);          
    set_val(JUMP, 100);           
    wait(60);                          
    set_val(PRONE, 0);            
    set_val(JUMP, 100);          
    wait(10);                        
    set_val(JUMP, 0);         
}    
combo auto_ping {	
	set_val(PING,100);
	wait(20);
	set_val(PING,0);
	if(get_ival(RELOAD) && get_ptime(RELOAD) > 120)
		ping_time = 80;
	if(get_ival(RELOAD) && get_ptime(RELOAD) < 120)
		ping_time = 130;
	wait(20);
	wait(ping_time);
}
combo heirloom_spin {	
	set_val(PS4_LEFT,100);
	wait(300);
	set_val(PS4_LEFT,0);
	wait(100);
}
combo armor_swap {
	cls_oled(0);
	print(center_x(sizeof(LOOTON) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,LOOTON[0]); 
	set_val(PS4_SQUARE, 100); 
	wait(850);
	set_val(PS4_SQUARE, 0); 
	set_val(PS4_LY, 100);
	wait(150);  
	set_val(PS4_CROSS, 100); 
	wait(70); 
	set_val(PS4_CROSS, 0);
	wait(10);
	set_val(PS4_LY, 100);
	wait(autoshield_time * 10); 
	set_val(PS4_CROSS, 100);
	wait(70); 
	set_val(PS4_CROSS, 0);
	wait(10);  
	set_val(PS4_CIRCLE, 100);
	wait(15); 	
	set_val(PS4_CIRCLE, 0); 
	set_val(PS4_CIRCLE, 0);
	print(center_x(sizeof(LOOTOFF) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,LOOTOFF[0]);
} 
combo RAPID_FIRE {
	set_val(FIRE, 100);
	wait(13);
	set_val(FIRE, 0);
	wait(13); 
}
combo Rainbow_Flash {
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(255, 128, 0);
	wait(100);
	set_rgb(255, 255, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 255);
	wait(100);
	set_rgb(212, 0, 255);
	wait(100);
}
/*combo P_RUMBLE {						
	//set_ledx(0, 1);
	set_rumble(RUMBLE_B, 85);
	wait(80);
	reset_rumble();
	wait(80);
	set_rumble(RUMBLE_B, 85);
	wait(80);
	reset_rumble();
}
combo S_RUMBLE {						
	//set_ledx(3, 2);
	set_rumble(RUMBLE_B, 85);
	wait(300);
	reset_rumble();
	wait(400);
}
combo A_RUMBLE {						
	//set_ledx(at_color, 2);
	set_rumble(RUMBLE_B, 85);
	wait(300);
	reset_rumble();
	wait(400);
}*/
combo fenice  {wait(20);set_val(XB1_UP, 100);set_val(XB1_RY, 0);wait(175);set_val(XB1_RY, -50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, -100);set_val(XB1_UP, 100);wait(100);set_val(XB1_RY, -50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 0);set_val(XB1_UP, 100);wait(10);set_val(XB1_UP, 100);set_val(XB1_A, 100);wait(75);set_val(XB1_UP, 100);set_val(XB1_A, 0);wait(45);set_val(XB1_UP, 0);wait(10);}
combo siringa {wait(25);set_val(XB1_UP, 100);set_val(XB1_RY, 0);wait(175);set_val(XB1_RY, 50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 100);set_val(XB1_UP, 100);wait(100);set_val(XB1_RY, 50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 0);set_val(XB1_UP, 100);wait(10);set_val(XB1_UP, 100);set_val(XB1_A, 100);wait(75);set_val(XB1_UP, 100);set_val(XB1_A, 0);wait(45);set_val(XB1_UP, 0);wait(10);}
combo MEDIKIT {wait(25);set_val(XB1_UP, 100);set_val(XB1_RY, 0);wait(174);set_val(XB1_RY, -50);set_val(XB1_RX, -50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RX, -100);set_val(XB1_UP, 100);wait(100);set_val(XB1_RY, -50);set_val(XB1_RX, -50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 0);set_val(XB1_RX, 0);set_val(XB1_UP, 100);wait(10);set_val(XB1_UP, 100);set_val(XB1_A, 100);wait(75);set_val(XB1_UP, 100);set_val(XB1_A, 0);wait(45);set_val(XB1_UP, 0);wait(10);}
combo BATTERY {wait(25);set_val(XB1_UP, 100);set_val(XB1_RY, 0);wait(175);set_val(XB1_RY, -50);set_val(XB1_RX, 50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RX, 100);set_val(XB1_UP, 100);wait(100);set_val(XB1_RY, -50);set_val(XB1_RX, 50);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 0);set_val(XB1_RX, 0);set_val(XB1_UP, 100);wait(10);set_val(XB1_UP, 100);set_val(XB1_A, 100);wait(75);set_val(XB1_UP, 100);set_val(XB1_A, 0);wait(45);set_val(XB1_UP, 0);wait(10);}
combo cell    {wait(25);set_val(XB1_UP, 100);set_val(XB1_RY, 0);wait(175);set_val(XB1_RY, 50);set_val(XB1_RX, 20);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 100);set_val(XB1_UP, 100);wait(100);set_val(XB1_RY, 50);set_val(XB1_RX, 20);set_val(XB1_UP, 100);wait(10);set_val(XB1_RY, 0);set_val(XB1_RX, 0);set_val(XB1_UP, 100);wait(10);set_val(XB1_UP, 100);set_val(XB1_A, 100);wait(75);set_val(XB1_UP, 100);set_val(XB1_A, 0);wait(45);set_val(XB1_UP, 0);wait(10);}
combo AIM_ABUSE {
	set_val(ADS,100);
 	wait(105);
 	set_val(ADS,0);
 	wait(105);
}
combo strafe {
	if(_strafe_index == 0)
	{
		_strafe_rand_1 = 110;
		_strafe_rand_2 = 210;
	}
	else
	{
		_strafe_rand_1 = 210;
		_strafe_rand_2 = 110;
	}
	Set_Val(MOVE_X, 100);
	Set_Val(AIM_X, -15);
	_strafe = random((STRAFE_DELAY - _strafe_rand_1), (STRAFE_DELAY + _strafe_rand_1));
	wait(_strafe); 
	wait(54); 
	Set_Val(MOVE_X, -100);
	Set_Val(AIM_X, 15);
	_strafe = random((STRAFE_DELAY - _strafe_rand_2), (STRAFE_DELAY + _strafe_rand_2));
	wait(_strafe); 
	wait(54);
	_strafe_index++;
	if(_strafe_index == 2)
		_strafe_index = 0;
}
combo Sticky_AA {
	a = random(-13, 13)
	Set_Val(AIM_Y,  Aim_Val);
	wait(Wait_Val);
	Set_Val(AIM_X,  Aim_Val);
	Set_Val(MOVE_X, a);
	wait(Wait_Val);
	Set_Val(AIM_Y,  inv(Aim_Val));	
	wait(Wait_Val);
	Set_Val(AIM_X,  inv(Aim_Val));
	Set_Val(MOVE_X, inv(a));
}
combo RUMBLE_ON {set_ledx(2, 2);set_rumble(RUMBLE_B, 50);wait(150);reset_rumble();wait(100);set_rumble(RUMBLE_B, 50);wait(150);reset_rumble();}
combo RUMBLE_OFF {set_ledx(1, 1);set_rumble(RUMBLE_B, 50);wait(300);reset_rumble();wait(400);}
combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	print(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				    // display mods
}   
// 						Functions
//___________________________________________________________________________________________________
function adjust_recoil(val, p, check, s_mod) {
if(p > 0) 
{
	s = (val * Sight_Vals[primary_sight]) / 100;
	if(check < 2)
		b = ((val * Barrel_Vals[primary_barrel][0]) / 100) * -1;
	sens = (val * s_mod) / 100;
	val = val + (s + b + sens);
}
else
{	
	s = (val * Sight_Vals[secondary_sight]) / 100;
	if(check < 2)
		b = ((val * Barrel_Vals[secondary_barrel][0]) / 100) * -1;
	sens = (val * s_mod) / 100;
	val = val + (s + b + sens);
}
return val;	
}
function Set_Val(Input, OutPut) {
set_val(Input, clamp(OutPut * (100 - abs(get_val(Input))) / 100 + get_val(Input), -100, 100));
	return;
}
function led_color() {
if(color==2  || current_idx == 0)
	set_rgb(255,0,0);
if(color==1 && current_idx != 0)
	set_rgb(0,153,153);
if(color==0 && current_idx != 0) 
	set_rgb(51,51,0);   
if(color==3)
	set_rgb(0,0,0);
if(color==4)
	set_rgb(32,32,32);
if(color==5)
	set_rgb(0,25,51);
if(color==6)
	set_rgb(51,0,102);
}
function RemoveStickNoise() {
if (abs(get_val(AIM_Y)) < deadzone && abs(get_val(AIM_X)) < deadzone) 
{
	set_val(AIM_Y, 0);
	set_val(AIM_X, 0);
}

if (abs(get_val(MOVE_X)) < deadzone && abs(get_val(MOVE_Y)) < deadzone) 
{
	set_val(MOVE_X, 0);
	set_val(MOVE_Y, 0);
}
}
function center_x( f_chars, f_font) {
return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}       
function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods

if(valName_idx < f_min)
	valName_idx = f_max;
if(valName_idx > f_max)
	valName_idx = f_min;	
}
function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )
				
if(valName_idx == f_idx)
{
	   if(f_idx == 6 || f_idx == 6 || f_idx == 14 || f_idx == 18 || f_idx == 19 || f_idx == 22 || f_idx == 53 || f_idx == 54 || f_idx == 55)
	   {
		   if(event_press(PS4_UP))
			   f_val = 1;
		   else if(event_press(PS4_DOWN))
			   f_val = 0;
		}
		else
		{
		// +1 or -1															 
			f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
			f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
		// +10 or -10
			f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
			f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
		}
}
return f_val;
}
function edit_val2(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )

if(valName_idx == f_idx && get_val(ADS))
{
		// +1 or -1															 
			f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
			f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
		// +10 or -10
			f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
			f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
}
return f_val;
}
function toggle(f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, PS4_UP, toggle_antirecoil[profile_idx]);

if(event_press(PS4_UP))
{
	if(modName_idx == f_idx)
	{
		f_val = 1;
		combo_run(RUMBLE_ON);
	}
	
	display_new = TRUE;
}
		
if(event_press(PS4_DOWN))
{
	if(modName_idx == f_idx)
	{
		f_val = 0;
		combo_run(RUMBLE_OFF);	
	}		
	display_new = TRUE;
}
return f_val;
}
function scroll(ref, f_idx, f_val, start, limit) { 

if(event_press(PS4_UP))
{
	if(ref == f_idx || f_idx == 71)
	{
		f_val += 1;
		if(f_val > limit)
			f_val = start;
		if(f_val < start)
			f_val = limit;
		combo_run(RUMBLE_ON);
	}
	
	display_new = TRUE;
}
if(event_press(PS4_DOWN))
{
	if(ref == f_idx || f_idx == 71)
	{
		f_val -= 1;
		if(f_val > limit)
			f_val = start;
		if(f_val < start)
			f_val = limit;
		combo_run(RUMBLE_OFF);	
	}		
	display_new = TRUE;
}
return f_val;
}
function display_edit(f_idx, f_string, f_print, f_val, f_type) { // display_edit(0, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0], antirecoil_start[profile_idx]);

	if(valName_idx == f_idx)
	{
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
	// Display value name and value
		if(f_type == 0) {
			number_to_string(f_val, find_digits(f_val), 0);
		}
		else{
			number_to_string(f_val, find_digits(f_val), 0);
			number_to_string(bullet_to_edit + 1, 2, 1);
		}

	}
}
function display_edit1(f_idx, f_string, f_print, f_val, f_type) { // display_edit(0, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0], antirecoil_start[profile_idx]);

	if(valName_idx == f_idx)
	{
	// Display value name and value
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);

		if(f_type == 1) 
		{
			if(f_val == 1)
				print(center_x(sizeof(ON), OLED_FONT_MEDIUM_WIDTH),31,OLED_FONT_MEDIUM,OLED_WHITE,ON[0]);
			else
				print(center_x(sizeof(OFF),OLED_FONT_MEDIUM_WIDTH),31,OLED_FONT_MEDIUM, OLED_WHITE, OFF[0]);		
				
		}
		if(f_type == 3)
			print(center_x(get_weapon_chars(f_val),OLED_FONT_MEDIUM_WIDTH) ,33,OLED_FONT_MEDIUM,OLED_WHITE,Weapons[f_val]);
		if(f_type == 4)
			print(center_x(get_type_chars(aim_assist_type),OLED_FONT_SMALL_WIDTH) ,31,OLED_FONT_SMALL,OLED_WHITE,CurveType[aim_assist_type]);
		if(f_type == 5)
		{
			if(aim_assist_type == 0)	
				print(center_x(get_circ_chars(aim_assist_shapes),OLED_FONT_SMALL_WIDTH) ,31,OLED_FONT_SMALL,OLED_WHITE,CircularCurve[aim_assist_shapes]);
			if(aim_assist_type == 1)	
				print(center_x(get_square_chars(aim_assist_shapes),OLED_FONT_SMALL_WIDTH) ,31,OLED_FONT_SMALL,OLED_WHITE,SquareCurve[aim_assist_shapes]);
			if(aim_assist_type == 2)	
				print(center_x(get_mix_chars(aim_assist_shapes),OLED_FONT_SMALL_WIDTH) ,31,OLED_FONT_SMALL,OLED_WHITE,MixedCurve[aim_assist_shapes]);
		}
		if(f_type == 6)
			print(center_x(get_list_chars(f_val),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val]);
		if(f_type == 7)
			print(center_x(get_list_chars(f_val + 16),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val + 16]);
		if(f_type == 8)
			print(center_x(get_list_chars(f_val + 23),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val + 23]);
		if(f_type == 2)
			print(center_x(get_list_chars(f_val + 21),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val + 21]);
		if(f_type == 9)
			print(center_x(get_list_chars(f_val + 28),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val + 28]);
		if(f_type == 10)
			print(center_x(get_list_chars(f_val + 32),OLED_FONT_SMALL_WIDTH) ,33,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_val + 32]);
	}
}
function display_mod(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
	if(modName_idx == f_idx)
	{
	// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		print(center_x(sizeof(PRESS_X_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,PRESS_X_TO_CONTINUE[0]);
			// Display ON OFF
		if(f_toggle == 1)
			print(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
		else if(f_toggle == 0)
			print(center_x(sizeof(OFF) - 13,OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);		
			print(center_x(sizeof(TOGGLEONLY) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,TOGGLEONLY[0]);
	}
		 
}
function display_mod2(f_idx, f_string, f_print, f_toggle, start) {
	if(modName_idx == f_idx)
	{
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		if(start > 0)
			print(center_x(get_list_chars(f_toggle + start),OLED_FONT_SMALL_WIDTH) ,31,OLED_FONT_SMALL,OLED_WHITE,SCROLL_NAMES[f_toggle + start]);
		print(center_x(sizeof(PRESS_X_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_X_TO_CONTINUE[0]);
	}	 
}
function per_bullet_vertical() { 
    if(bullet <= GUN_INFO[current_idx][1])
    {
    	vm_count++;
    	if (vm_count > (vm_loops * bullet)) { 
    	    bullet += 1;
     		if(VERTICAL[current_idx][bullet - 1] < VERTICAL[current_idx][bullet] )    
        		inc = 1;
    		if(VERTICAL[current_idx][bullet - 1] > VERTICAL[current_idx][bullet] )
        		inc = -1;
        	pr = abs(VERTICAL[current_idx][bullet - 1] - VERTICAL[current_idx][bullet]);
    		vm = vm_loops / pr;
    	 }	
    	 if(pr != 0 || VERTICAL[current_idx][bullet] == 0) {
    	 	p_count++;
    	 	if(vm == 0)
    	 		ar_y = VERTICAL[current_idx][bullet];
    	 	if(p_count > vm && vm != 0) {
    	 		p_count = 0;
    	 		if(inc > 0 && VERTICAL[current_idx][bullet] > ar_y)	
    	 			ar_y += inc;
    	 		if(inc < 0 && VERTICAL[current_idx][bullet] < ar_y)	
    	 			ar_y += inc;
    	 	}
    	 }
    	 set_val(TRACE_4, p_count);
    	 set_val(TRACE_1, vm);
    	 set_val(TRACE_2, pr);
    	 set_val(TRACE_3, vertical);
    }
    else
    	ar_y = 0;
    return ar_y;
}        
function per_bullet_horizontal() { 
    if(bulleth <= GUN_INFO[current_idx][1])
    {
    	vm_counth++;
    	if (vm_counth > (vm_loops * bulleth)) { 
    	    bulleth += 1;	
    		if(HORIZONTAL[current_idx][bulleth - 1] < HORIZONTAL[current_idx][bulleth] )    
    	   		inch = 1;
    		if(HORIZONTAL[current_idx][bulleth - 1] > HORIZONTAL[current_idx][bulleth] )
    	   		inch = -1;
    	   	prh = abs(HORIZONTAL[current_idx][bulleth - 1] - HORIZONTAL[current_idx][bulleth]); 
    		vmh = vm_loops / prh; 
    	 }	
    	 if(prh != 0 || HORIZONTAL[current_idx][bulleth] == 0) {
    	 	p_counth++;
    	 	if(vmh == 0)
    	 		ar_x = HORIZONTAL[current_idx][bulleth];
    	 	if(p_counth > vmh && vmh != 0) {
    	 		p_counth = 0;
    	 		if(inch > 0 && HORIZONTAL[current_idx][bulleth] > ar_x)	
    	 			ar_x += inch;
    	 		if(inch < 0 && HORIZONTAL[current_idx][bulleth] < ar_x)	
    	 			ar_x += inch;
    	 	}
    	 }
    }
    else
    	ar_x = 0;
    return ar_x;
}      
function edit_bullet_vertical() { 
    if(bullet <= mag_size)
    {
    	vm_count++;
    	if (vm_count > (vm_loops * bullet)) { 
    	    bullet += 1;
     		if(vertical[bullet - 1] < vertical[bullet] )    
        		inc = 1;
    		if(vertical[bullet - 1] > vertical[bullet] )
        		inc = -1;
        		pr = abs(vertical[bullet - 1] - vertical[bullet]);
    		vm = vm_loops / pr;
    	 }	
    	 if(pr != 0 || vertical[bullet] == 0) {
    	 	p_count++;
    	 	if(vm == 0)
    	 		ar_y = vertical[bullet];
    	 	if(p_count > vm && vm != 0) {
    	 		p_count = 0;
    	 		if(inc > 0 && vertical[bullet] > ar_y)	
    	 			ar_y += inc;
    	 		if(inc < 0 && vertical[bullet] < ar_y)	
    	 			ar_y += inc;
    	 	}
    	 }
    }
    else
    	ar_y = 0;
    return ar_y;
}   
function edit_bullet_horizontal() { 
    if(bulleth <= mag_size)
    {
    	vm_counth++;
    	if (vm_counth > (vm_loops * bulleth)) { 
    	    bulleth += 1;	
    		if(horizontal[bulleth - 1] < horizontal[bulleth] )    
    	   		inch = 1;
    		if(horizontal[bulleth - 1] > horizontal[bulleth] )
    	   		inch = -1;
    	   	prh = abs(horizontal[bulleth - 1] - horizontal[bulleth]); 
    		vmh = vm_loops / prh; 
    	 }	
    	 if(prh != 0 || horizontal[bulleth] == 0) {
    	 	p_counth++;
    	 	if(vmh == 0)
    	 		ar_x = horizontal[bulleth];
    	 	if(p_counth > vmh && vmh != 0) {
    	 		p_counth = 0;
    	 		if(inch > 0 && horizontal[bulleth] > ar_x)	
    	 			ar_x += inch;
    	 		if(inch < 0 && horizontal[bulleth] < ar_x)	
    	 			ar_x += inch;
    	 	}
    	 }
    }
    else
    	ar_x = 0;
    return ar_x;
}     
function get_weapon_chars(f_idx){
if (Weapons[f_idx + 1] != -1) 
	return Weapons[f_idx + 1] - Weapons[f_idx] - 1;
return sizeof(Weapons) - Weapons[f_idx];		
}
function get_sight_chars(f_idx){
if (Sight_Names[f_idx + 1] != -1) 
	return Sight_Names[f_idx + 1] - Sight_Names[f_idx] - 1;
return sizeof(Sight_Names) - Sight_Names[f_idx];		
}
function get_barrel_chars(f_idx){
if (Barrel_Names[f_idx + 1] != -1) 
	return Barrel_Names[f_idx + 1] - Barrel_Names[f_idx] - 1;
return sizeof(Barrel_Names) - Barrel_Names[f_idx];		
}
function get_vals_chars(f_idx){
if (EDIT_VAL_NAMES[f_idx + 1] != -1) 
	return EDIT_VAL_NAMES[f_idx + 1] - EDIT_VAL_NAMES[f_idx] - 1;
return sizeof(EDIT_VAL_NAMES) - EDIT_VAL_NAMES[f_idx];		
}
function get_list_chars(f_idx){
if (SCROLL_NAMES[f_idx + 1] != -1) 
	return SCROLL_NAMES[f_idx + 1] - SCROLL_NAMES[f_idx] - 1;
return sizeof(SCROLL_NAMES) - SCROLL_NAMES[f_idx];		
}
function get_type_chars(f_idx){
if (CurveType[f_idx + 1] != -1) 
	return CurveType[f_idx + 1] - CurveType[f_idx] - 1;
return sizeof(CurveType) - CurveType[f_idx];		
}
function get_circ_chars(f_idx){
if (CircularCurve[f_idx + 1] != -1) 
	return CircularCurve[f_idx + 1] - CircularCurve[f_idx] - 1;
return sizeof(CircularCurve) - CircularCurve[f_idx];		
}
function get_square_chars(f_idx){
	if (SquareCurve[f_idx + 1] != -1) 
		return SquareCurve[f_idx + 1] - SquareCurve[f_idx] - 1;
	return sizeof(SquareCurve) - SquareCurve[f_idx];
}
function get_mix_chars(f_idx){
	if (MixedCurve[f_idx + 1] != -1) 
		return MixedCurve[f_idx + 1] - MixedCurve[f_idx] - 1;
	return sizeof(MixedCurve) - MixedCurve[f_idx];
}
function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

if(press_hold(f_btn)) 
{
	f_val += f_inc;
  
// Substract    
	if(f_val < inv(f_rng_min)) 
		f_val = inv(f_rng_min); 
   // Add   
	   if(f_val > f_rng_max) 
		f_val = f_rng_max;

	display_new = TRUE;
}
return f_val; 
} 
function OffsetAR( axis,  offset_val) {
set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return;
} 
function number_to_string(f_val,f_digits, f_type) {
/***********************************************************
*  number_to_string(value to convert, # of digits in value)
*
*  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
*   
*      Convert digits to ASCII ANDRY85
*      Add ASCII character to print buffer
*      Print string centered X & Y on OLED
*  
***********************************************************/
i = 1;  c_val = 10000;

if(f_val < 0) //--neg numbers
{          
	 putc_oled(i,45);    //--add leading "-"
	 i += 1;
	 f_val = abs(f_val);
} 

for(c = 5; c >= 1; c--) 
{
	if(f_digits >= c) 
	{
		putc_oled(i,ASCII_NUM[f_val / c_val]);
		f_val = f_val % c_val;
		i +=  1; 
		if(c == 4) 
		{
			putc_oled(i,44);   //--add ","
			i += 1;
		}
	}
	c_val /= 10;
}   
if(f_type == 0)
	puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // adjustable value centered in X
else
	puts_oled(11,35,OLED_FONT_MEDIUM,i - 1,OLED_WHITE);
}  


function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  
f_num = abs(f_num);
if(f_num / 10000 > 0) return 5;
if(f_num /  1000 > 0) return 4;
if(f_num /   100 > 0) return 3;
if(f_num /    10 > 0) return 2;
					  return 1;
}     
function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

return (OLED_HEIGHT  / 2) - (f_size / 2);
}
function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	   && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}
function AimAssistActivation(){ 

	if(aa_fire_type == 0){ 
		if(get_ival(ADS) || get_val(FIRE)){ 
			return TRUE;
		}
	} 
	if(aa_fire_type == 1){ 
		if(get_ival(ADS) && get_val(FIRE)){ 
			return TRUE;
		} 
	} 
	if(aa_fire_type == 2){ 
		if(get_val(FIRE) && !get_ival(ADS)){
			return TRUE;
		} 
	} 
	if(aa_fire_type == 3){ 
		if(!get_val(FIRE)){
			return TRUE;
		} 
	} 
	return 0;
} 
function AimAssistActivationBatts(){ 
	
	if(aa_fire_type_v1 == 0){ 
		if(get_ival(ADS) || get_val(FIRE)){ 
			return TRUE;
		}
	} 
	if(aa_fire_type_v1 == 1){ 
		if(get_ival(ADS) && get_val(FIRE)){ 
			return TRUE;
		} 
	} 
	if(aa_fire_type_v1 == 2){ 
		if(get_val(FIRE) && !get_ival(ADS)){
			return TRUE;
		} 
	} 
	if(aa_fire_type_v1 == 3){ 
		if(!get_val(FIRE)){
			return TRUE;
		} 
	} 
	return 0;
} 
/*
============================================================================================================================================
  Taylor Assist Shapes Functions ()  > > > SKIP PAST BELOW SECTION < < <  NEEDS OPTIMISING - NOT HAPPY!!!   PRETEND YOU DIDN'T SEE IT!                                                                                                                   
============================================================================================================================================
*/
const int8   PolarArray   [] = {-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const int8   LinearArray  [] = { 100,-100,-99,-98,-97,-96,-95,-94,-93,-91,-90,-89,-88,-87,-86,-85,-84,-82,-81,-80,-79,-78,-77,-76,-75,-73,-72,-71,-70,-69,-68,-67,-66,-64,-63,-62,-61,-60,-59,-58,-57,-55,-54,-53,-52,-51,-50,-49,-48,-46,-45,-44,-43,-42,-41,-40,-39,-37,-36,-35,-34,-33,-32,-31,-30,-28,-27,-26,-25,-24,-23,-22,-21,-19,-18,-17,-16,-15,-14,-13,-12,-10,-9,-8,-7,-6,-5,-4,-3,-11,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,100,100,100,99,98,97,96,95,94,93,91,90,89,88,87,86,85,84,82,81,80,79,78,77,76,75,73,72,71,70,69,68,67,66,64,63,62,61,60,59,58,57,55,54,53,52,51,50,49,48,46,45,44,43,42,41,40,39,37,36,35,34,33,32,31,30,28,27,26,25,24,23,22,21,19,18,17,16,15,14,13,12,10,9,8,7,6,5,4,3,1,-1,-1,-2,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-21,-22,-23,-24,-25,-26,-28,-29,-30,-31,-32,-33,-34,-35,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-52,-53,-55,-56,-57,-58,-59,-60,-61,-62,-64,-65,-66,-67,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-82,-83,-84,-85,-86,-87,-88,-89,-91,-92,-93,-94,-95,-96,-97,-98,-100};   
const string CurveType    [] = {"Polar","Linear","Mixed",""};
const string CircularCurve[] = {"Circular","Tall Oval","Wide Oval","Vortex Oval","Spiral","Helix","KITT","Vertical Flare","Tartan Army","Jupiter","Bishop","Blade","Oscilirate",""};
const string SquareCurve  [] = {"Diamond","Tall Diamond","Wide Diamond","Spiral Prism","Spiral Diamond","Helix Diamond","KITT","Vertical Flare","Tartan Army","Jupiter","Bishop","Blade","Oscilirate",""}; 
const string MixedCurve   [] = {"Hexagon","Tall Hex","Wide Hex","Spiral HexV1","SpiralHexV2","Helix Hex","KittHex","Vertical Hex","Tartan Hex","Jupiter Hex","Bishop Hex","Blade Hex","OscilirateHex",""}; 
const int16 aim_assist_shapesnfo[][] = {
// Shape ID - CosAngle - SinAngle - DivisableRadiusCos - DivisableRadiusSin - NonSpiral 
{      0    ,    0     ,    0     ,          1         ,         1          ,     0 }, // Circular 
{      1    ,    0     ,    0     ,          2         ,         1          ,     0 }, // TallOval
{      2    ,    0     ,    0     ,          1         ,         2          ,     0 }, // WideOval
{      3    ,    0     ,    0     ,          2         ,         1          ,     1 }, // SpiralOval 
{      4    ,    0     ,    0     ,          2         ,         1          ,     1 }, // Spiral 
{      5    ,    0     ,    0     ,          1         ,         1          ,     2 }, // Helix 
{      6    ,    0     ,    0     ,          1         ,         0          ,     0 }, // Kitt 
{      7    ,    0     ,    0     ,          0         ,         1          ,     0 }, // Vertical Flare
{      8    ,   45    ,   135     ,          1         ,         1          ,     3 }, // Tartan Flex 
{      9    ,  180    ,   315     ,          1         ,         1          ,     0 }, // Jupiter
{     10    ,  135    ,    45     ,          1         ,         1          ,     0 }, // Bishop
{     11    ,   45    ,   135     ,          1         ,         1          ,     0 }, // Blade
{     12    ,  315    ,   180     ,          1         ,         1          ,     0 }  // Osclirate  
} 

int Tracking,Tracker1,Tracker2;
int CosAngle,SinAngle;
int angleVersionOne,angleVersionFive;
int BoostedAimAssist,AimAssistBoost,BoostAngle; // V1 and V2 AimAssist 
int BoostedAimAssistv4,AimAssistBoostv4,BoostAnglev4; // v4 && v5 AimAssist 
int RX,RY,ActualMagnitude,MaxMagnitude;
int SpiralPosition1,InnerSpiral,OuterSpiral,SpiralPosition2,Position,SpeedAngle,AngleDirection;
int x,y,inc;
int CycleRefresh;
int TimeInterval = 4;
int PolarStart	 = 1000;
int PolarMid   	 = 1200;
int PolarAimAssist, PolarAimAssistv1;
define False     = FALSE;
define True      = TRUE;  

function GetAngle(getShapes,getSinCos,Rad){ 

	if(aim_assist_shapesnfo[getShapes][5] == 0){
		if(AngleDirection){
			SinAngle  = (cos(aim_assist_shapesnfo[getShapes][1] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][3])/100 + Tracker1;
			CosAngle  = (sin(aim_assist_shapesnfo[getShapes][2] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][4])/100 + Tracker2; 
		}else{ 
			CosAngle  = (cos(aim_assist_shapesnfo[getShapes][1] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][3])/100 + Tracker1;
			SinAngle  = (sin(aim_assist_shapesnfo[getShapes][2] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][4])/100 + Tracker2; 
		} 
	} 
	if(aim_assist_shapesnfo[getShapes][5] == 1){ 
		Spiral(Rad);
		if(AngleDirection){
			CosAngle  = (sin(aim_assist_shapesnfo[getShapes][1] + getSinCos) * InnerSpiral)/100 + Tracker1;
			SinAngle  = (cos(aim_assist_shapesnfo[getShapes][2] + getSinCos) * OuterSpiral)/100 + Tracker2;
		}else{ 
			CosAngle  = (cos(aim_assist_shapesnfo[getShapes][1] + getSinCos) * InnerSpiral)/100 + Tracker1;
			SinAngle  = (sin(aim_assist_shapesnfo[getShapes][2] + getSinCos) * OuterSpiral)/100 + Tracker2;
		} 
	}
	if(aim_assist_shapesnfo[getShapes][5] == 2){ 
		Helix();
		CosAngle  = (Rad * y)/100 + Tracker1;
		SinAngle  = (Rad * x)/100 + Tracker2;
	}
	if(aim_assist_shapesnfo[getShapes][5] == 3){ 
		if(Positionv2 == 0){ 
			CosAngle  = (cos(aim_assist_shapesnfo[getShapes][1] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][3])/100 + Tracker1;
			SinAngle  = (sin(aim_assist_shapesnfo[getShapes][2] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][4])/100 + Tracker2; 
		} 
		if(Positionv2 == 1){ 
			CosAngle  = (cos(aim_assist_shapesnfo[getShapes][2] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][3])/100 + Tracker1;
		    SinAngle  = (sin(aim_assist_shapesnfo[getShapes][1] + getSinCos) * Rad/aim_assist_shapesnfo[getShapes][4])/100 + Tracker2; 
		} 
	    Positionv2 ++ 
		if(Positionv2 == 2){ 
		  	Positionv2 = 0;
		}
	} 
} 
int Positionv2;
function InitializeShapeChange() { 
	if(aim_assist_shapesnfo[aim_assist_shapes][0] == 3) {
		if(aim_assist  == 0 || aim_assist  == 1 || aim_assist == 7){ 
			if(!boost_fire_v1){
				InnerSpiral = radius_v1/2;	
				OuterSpiral = radius_v1;
			}else{ 
				InnerSpiral = boost_strength_v1/2;	
				OuterSpiral = boost_strength_v1;
			}
		}
	}
	if(aim_assist_shapesnfo[aim_assist_shapes][0] == 3) {
		if(aim_assist == 2 || aim_assist == 3){ 
			if(!boost_fire_v2){ 
				InnerSpiral = radius_v2/2;	
				OuterSpiral = radius_v2;
			}else{ 
				InnerSpiral = boost_strength_v2/2;	
				OuterSpiral = boost_strength_v2;
			}
		}
	}
	
}

int i;
function Helix(){ 
	inc = (i % 100);
    if(Position == 0){ 
   		x = inc; y = 100 - inc;
   	} 
    else if (Position == 1){ 
    	x = 100 - inc; y = - inc; 
    }
    else if (Position == 2){
    	x = -inc; y = -100 + inc; 
    }
    else if(Position == 3) {  
    	x = -100 + inc; y = inc; 
    }
    Position ++;
   
    if(Position == 4){ 
    	Position = 0;
    }	
 } 
function Spiral(Rad){ 
	
	if(!(CycleRefresh++ % TimeInterval))
	{
		if(!SpiralPosition1)                                
		{
			InnerSpiral -= 1;
			if(InnerSpiral < Rad/2)
				SpiralPosition1 = True;   
		}
		else
		{
		    InnerSpiral += 1;
			if(InnerSpiral > Rad)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;
			if(OuterSpiral < Rad/2)
				SpiralPosition2 = True;
		}
		else
		{
			OuterSpiral += 1;
			if(OuterSpiral > Rad)
				SpiralPosition2 = False
		}
		CycleRefresh = 0;
	}	
}
function correctAngle(angle){
  if(angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function offset(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
  return;
}
function sin(angle){
	
  	if(aim_assist_type == 1)
		return PolarArray[correctAngle(angle)];
	else if(aim_assist_type == 2)
    	return LinearArray[correctAngle(angle)];
    else if(aim_assist_type == 3)
    	return PolarArray[correctAngle(angle)];
    	
    return 0;
}

function cos(angle){
	if(aim_assist_type == 1) 
		return PolarArray[(correctAngle(angle) + 90) % 360];
	else if(aim_assist_type == 2)
    	return LinearArray[(correctAngle(angle) + 90) % 360];
    else if(aim_assist_type == 3)
    	return LinearArray[(correctAngle(angle) + 90) % 360]; 
    	
    return 0;   
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// Use these for 32-bit SPVARs
define MAX_BITS = 32;
define MAX_FW_BITS = 32;
function reset_spvar() {
spvar_current_slot = SPVAR_1; // Change this to say where it's safe to start storing data
spvar_current_bit = 0;
spvar_current_value = 0;
}
// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ 
define FULL_BITMASK = -1;
function get_bit_count(val) {
/*	if (val == (1 << (MAX_FW_BITS - 1))) {
	return MAX_FW_BITS;
}*/
if (val < 0) {
	return get_bit_count(abs(val + 1));
}
spvar_tmp = 0;
do {
	spvar_tmp++;
	val = val >> 1; // Shift the value down 1 bit
} while (val);
return spvar_tmp;
}
function get_bit_count2(min, max) {	
spvar_tmp = max(get_bit_count(min), get_bit_count(max));
if (is_signed2(min, max)) {
	spvar_tmp++;
}
return spvar_tmp;
}
function is_signed2(min, max) { return min < 0 || max < 0; }
function make_full_mask(bits) {	
if (bits == MAX_FW_BITS) {
	return FULL_BITMASK;
}
return (FULL_BITMASK & (~(1 << (MAX_FW_BITS - 1)))) >> (MAX_FW_BITS - bits - 1);
}
function make_sign(bits) { return 1 << clamp(bits - 1, 0, MAX_FW_BITS - 1); }
function make_sign_mask(bits) { return ~make_sign(bits); }
function pack_u(val, bits) { return val & make_full_mask(bits); }
function pack_i(val, bits) {
if (val < 0) {
	return (abs(val) & make_sign_mask(bits)) | make_sign(bits);	
}
return val & make_sign_mask(bits);
}
function unpack_i(val, bits) {
if (val & make_sign(bits)) {
	return 0 - (val & make_sign_mask(bits));
}
return val & make_sign_mask(bits);
}
int spvar_current_bit;
int spvar_current_slot;
int spvar_current_value;
int spvar_tmp;
int spvar_bits;
function read_spvar_slot(slot) { return get_pvar(slot, 0-(FULL_BITMASK & (1 << (MAX_BITS - 1))), 0-((0-(FULL_BITMASK & (1 << (MAX_BITS - 1)))) + 1), 0); }
function save_spvar(val, min, max, save) {
spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value	

if (is_signed2(min, max)) {
	val = pack_i(val, spvar_bits); // Pack as signed value	
}
val = pack_u(val, spvar_bits); // Pack as unsigned value - because this is more inclusive than signed, we don't need an else here - just always do it (micro optimization)

if (spvar_bits > MAX_BITS - spvar_current_bit) { // If we cannot fit the value here, we need to store what we can and move to the next slot
	spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add what we can to the current value
	set_pvar(spvar_current_slot, spvar_current_value); // Force save, we're moving to the next value		
	spvar_current_slot++; // Move to the next slot
	spvar_bits -= (MAX_BITS - spvar_current_bit); // Update the required bits according to our needs for the next slot
	val = val >> (MAX_BITS - spvar_current_bit); // Move the remaining bits to their new location
	spvar_current_bit = 0; // We've hit the end, so we start over
	spvar_current_value = 0; // Reset our value so we start clean
}

spvar_current_value = spvar_current_value | (val << spvar_current_bit); // Add the value to the current position
spvar_current_bit += spvar_bits; // Increment the bit position
if (spvar_current_bit >= MAX_BITS) {
	spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
	set_pvar(spvar_current_slot, spvar_current_value);
	spvar_current_slot++; // move to the next slot
	if (!spvar_current_bit) {
		spvar_current_value = 0; // Reset our value so we start clean
	}
}
if (save) {
	set_pvar(spvar_current_slot, spvar_current_value);
}	
}
function read_spvar(min, max, default) {
spvar_current_value = read_spvar_slot(spvar_current_slot); // Load the value so we always have it where we need it to be
spvar_bits = get_bit_count2(min, max); // Set min to be the bits we're going to need to store this value
spvar_current_value = pack_u(spvar_current_value >> spvar_current_bit, spvar_bits); // Shift our bits into position
if (spvar_bits > MAX_BITS - spvar_current_bit) { // if the value doesn't fit in this variable, we need to fetch the next value aswell and merge them accordingly
	spvar_current_slot++; // Move to the next slot
	spvar_tmp = read_spvar_slot(spvar_current_slot); // load the new slot into a temporary variable
	spvar_tmp = pack_u(spvar_tmp, spvar_bits - (MAX_BITS - spvar_current_bit)); // Get the bits we need
	spvar_tmp = spvar_tmp << (MAX_BITS - spvar_current_bit); // Shift the bits into their correct position
	spvar_current_value = pack_u(spvar_current_value, MAX_BITS - spvar_current_bit);
	spvar_current_value = spvar_current_value | spvar_tmp; // put all bits together again
	spvar_current_bit = spvar_current_bit - MAX_BITS; // Reset the bit position so we get the correct position next
}    
spvar_current_bit += spvar_bits; // move to the next variable position
if (spvar_current_bit >= MAX_BITS) {
	spvar_current_bit -= MAX_BITS; // We went beyond the end here, this is too big apparently
	spvar_current_slot++;
}    
spvar_current_value = pack_u(spvar_current_value, spvar_bits); // Extract all bits included for this value
if (is_signed2(min, max)) { // Check if we have a sign bit
	spvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore signed value
}
if (spvar_current_value < min || spvar_current_value > max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead
	return default;
}
return spvar_current_value;
}
function Load(){ 
reset_spvar();    
					
	aim_assist	        = read_spvar( 1, 8,  8   );
    aa_fire_type        = read_spvar( 1, 2, 0    );
    aim_assist_type     = read_spvar( 1, 2, 0    );
	aim_assist_shapes   = read_spvar( 1, 12, 0   );
	speed_v1            = read_spvar( 1, 99  , 15);
	radius_v1           = read_spvar( 1, 99  , 15);
	boost_fire_v1    	= read_spvar( 0,  1  , 0 );
	boost_reducer_v1   	= read_spvar( 0,  1  , 0 );
	boost_strength_v1   = read_spvar( 1, 40  , 5 );
	boost_speed_v1      = read_spvar( 1, 40  , 5 );
	hand_gun_speed      = read_spvar( 1, 99  , 5 );
    hand_gun_size       = read_spvar( 1, 99  , 5 );
    aa_fire_type        = read_spvar( 1, 3, 0    );      
    aim_assist_type     = read_spvar( 1, 2, 0    );
	aim_assist_shapes   = read_spvar( 1, 12, 0   );
	shape_direction     = read_spvar( 0,  1  , 0 );
	ads_speed           = read_spvar( 1, 99  , 10);
	speed_v2            = read_spvar( 1, 99  , 15);
	radius_v2           = read_spvar( 1, 99  , 15);
	boost_fire_v2       = read_spvar( 0,  1  , 0 );
	boost_reducer_v2    = read_spvar( 0,  1  , 0 );
	boost_strength_v2   = read_spvar( 1, 40  , 5 );
	boost_speed_v2      = read_spvar( 1, 40  , 5 );
	tracking            = read_spvar( 0,  1  , 0 );
	tracking_size       = read_spvar( 1,  8  , 2 );
	tracking_speed      = read_spvar( 1,  8  , 2 );
	hand_gun_speed      = read_spvar( 1, 99  , 5 );
    hand_gun_size       = read_spvar( 1, 99  , 5 );
	aim_assist_type     = read_spvar( 1,  2  , 0 );
	aim_assist_shapes   = read_spvar( 1, 12  , 0 );
	base_speed          = read_spvar( 1, 99  , 11);
	zone_speed          = read_spvar( 1, 99  , 14);
	fire_speed     	    = read_spvar( 1, 99  , 20);	
	base_power     	    = read_spvar( 1, 99  , 11);
	zone_power          = read_spvar( 1, 99  , 15);
	fire_power     	    = read_spvar( 1, 99  , 17);
    dogz_deadzone       = read_spvar( 1, 40  , 8 );
    batts_assist        = read_spvar( 0, 2, 0    );
    aa_fire_type_v1     = read_spvar( 0, 3, 0    );
    sticky_size         = read_spvar( 1, 99  , 10);
    sticky_time         = read_spvar( 1, 99  , 10);
    sticky_ads_size     = read_spvar( 1, 99  , 12);
    sticky_ads_time     = read_spvar( 1, 999 , 28); 
    sticky_hip_size	    = read_spvar( 1, 99  , 16);
    sticky_hip_time	    = read_spvar( 1, 999 , 38);
    sticky_fire_size    = read_spvar( 1, 99  , 16); 
    sticky_fire_time    = read_spvar( 1, 999 , 48);
    headshot_assist     = read_spvar( 0,   1 ,  0);
    headshot_strength   = read_spvar( 1, 99  , 20);
    headshot_hold_time  = read_spvar( 1, 200, 80 );
    strafe_assist       = read_spvar( 0,   1,   0);
    strafe_size         = read_spvar( 1,  99 , 50);
    strafe_active_time  = read_spvar( 1, 200, 30 );
    aim_abuse_type     	= read_spvar( 1, 5, 0    );
    strafe_type      	= read_spvar( 1, 5, 0    );
    crouch_setting     	= read_spvar( 0, 1, 0    );
    crouch_type     	= read_spvar( 1, 5, 0    );
    auto_ping_type     	= read_spvar( 0, 5, 0    );
    wall_bounce_toggle  = read_spvar( 0, 1, 0    );
    super_jump_toggle   = read_spvar( 0, 1, 0    );
    super_glide_toggle  = read_spvar( 0, 1, 0    );
    swap_type		    = read_spvar( 1, 4, 0    );
    holster_type		= read_spvar( 1, 3, 0    );
    quick_primary       = read_spvar( 1, 18, 0   );
    quick_secondary     = read_spvar( 1, 18, 0   );
    autoshield			= read_spvar( 0,  1, 0   );
    autoshield_time     = read_spvar( 1, 99 , 25 );
    ads_y_sens          = read_spvar( -99, 130, 0);
    ads_x_sens          = read_spvar( -99,  105, 0);
    hf_y_sens           = read_spvar( -99,  99, -13 );
    hf_x_sens           = read_spvar( -99,  99, -13 );
    deadzone		    = read_spvar( 1 ,  40, 10);
    vertical[bullet_to_edit]   = read_spvar( -99,  99 , 0 );
    horizontal[bullet_to_edit] = read_spvar( -99,  99 , 0 );
    time         	 = read_spvar( 0,  200, 0    );
    mag_size         = read_spvar( 1,  55,  29     );
}  
function Save () {
	reset_spvar();
	combo_run(SAVE);
											
	save_spvar(aim_assist	      , 1, 8,  		 FALSE);
    save_spvar(aa_fire_type       , 1, 3, 	     FALSE);
    save_spvar(aim_assist_type    , 1, 2,	 	 FALSE);
	save_spvar(aim_assist_shapes  , 1, 12,	     FALSE);
	save_spvar(speed_v1           , 1, 99 ,	     FALSE);
	save_spvar(radius_v1          , 1, 99  ,	 FALSE);
	save_spvar(boost_fire_v1      , 0,  1  ,	 FALSE);
	save_spvar(boost_reducer_v1   , 0,  1  ,	 FALSE);
	save_spvar(boost_strength_v1  , 1, 40  ,	 FALSE);
	save_spvar(boost_speed_v1     , 1, 40  ,	 FALSE);
	save_spvar(hand_gun_speed     , 1, 99  ,	 FALSE);
    save_spvar(hand_gun_size      , 1, 99  ,	 FALSE);
    save_spvar(aa_fire_type       , 1, 3,		 FALSE);      
    save_spvar(aim_assist_type    , 1, 2,		 FALSE);
	save_spvar(aim_assist_shapes  , 1, 12, 		 FALSE);
	save_spvar(shape_direction    , 0,  1  ,	 FALSE);
	save_spvar(ads_speed          , 1, 99  ,	 FALSE);
	save_spvar(speed_v2           , 1, 99  ,	 FALSE);
	save_spvar(radius_v2          , 1, 99  ,	 FALSE);
	save_spvar(boost_fire_v2      , 0,  1  ,	 FALSE);
	save_spvar(boost_reducer_v2   , 0,  1  ,	 FALSE);
	save_spvar(boost_strength_v2  , 1, 40  ,	 FALSE);
	save_spvar(boost_speed_v2     , 1, 40  ,	 FALSE);
	save_spvar(tracking           , 1,  1  ,	 FALSE);
	save_spvar(tracking_size      , 1,  8  ,	 FALSE);
	save_spvar(tracking_speed     , 1,  8  ,	 FALSE);
	save_spvar(hand_gun_speed     , 1, 99  ,	 FALSE);
    save_spvar(hand_gun_size      , 1, 99  ,	 FALSE);
	save_spvar(aim_assist_type    , 1,  2  ,	 FALSE);
	save_spvar(aim_assist_shapes  , 1, 12  ,	 FALSE);
	save_spvar(base_speed         , 1, 99  ,	 FALSE);
	save_spvar(zone_speed         , 1, 99  ,	 FALSE);
	save_spvar(fire_speed     	  , 1, 99  ,	 FALSE);	
	save_spvar(base_power     	  , 1, 99  ,	 FALSE);
	save_spvar(zone_power         , 1, 99  , 	 FALSE);
	save_spvar(fire_power     	  , 1, 99  , 	 FALSE);
	save_spvar(dogz_deadzone      , 1, 40  , 	 FALSE);
    save_spvar(batts_assist       , 1, 2, 		 FALSE);
    save_spvar(aa_fire_type_v1    , 1, 3, 		 FALSE);
    save_spvar(sticky_size        , 1, 99  , 	 FALSE);
    save_spvar(sticky_time        , 1, 99  , 	 FALSE);
    save_spvar(sticky_ads_size    , 1, 99  , 	 FALSE);
    save_spvar(sticky_ads_time    , 1, 999 , 	 FALSE); 
    save_spvar(sticky_hip_size	  , 1, 99  , 	 FALSE);
    save_spvar(sticky_hip_time	  , 1, 999 , 	 FALSE);
    save_spvar(sticky_fire_size   , 1, 99  , 	 FALSE); 
    save_spvar(sticky_fire_time   , 1, 999 , 	 FALSE);
    save_spvar(headshot_assist    , 0,   1,      FALSE);
    save_spvar(headshot_strength  , 1, 99  , 	 FALSE);
    save_spvar(headshot_hold_time , 1, 200,  	 FALSE);
    save_spvar(strafe_assist      , 0,   1,      FALSE);
    save_spvar(strafe_size        , 1,  99 , 	 FALSE);
    save_spvar(strafe_active_time , 1, 200,  	 FALSE);
    save_spvar(aim_abuse_type     , 1, 5,		 FALSE);
    save_spvar(strafe_type        , 1, 5,		 FALSE);
    save_spvar(crouch_setting     , 0, 1,		 FALSE);
    save_spvar(crouch_type     	  , 1, 5,		 FALSE);
    save_spvar(auto_ping_type     , 1, 5,		 FALSE);
    save_spvar(wall_bounce_toggle , 0, 1,		 FALSE);
    save_spvar(super_jump_toggle  , 0, 1,		 FALSE);
    save_spvar(super_glide_toggle , 0, 1,		 FALSE);
    save_spvar(swap_type		  , 1, 4,		 FALSE);
    save_spvar(holster_type		  , 1, 3, 		 FALSE);
    save_spvar(quick_primary      , 1, 18, 		 FALSE);
    save_spvar(quick_secondary    , 1, 18, 		 FALSE);
    save_spvar(autoshield         , 0,  1,       FALSE);
    save_spvar(autoshield_time    , 1, 99 , 	 FALSE);
    save_spvar(ads_y_sens         , -99, 130, 	 FALSE);
    save_spvar(ads_x_sens         , -99,  105,   FALSE);
    save_spvar(hf_y_sens          , -99,  99, 	 FALSE);
    save_spvar(hf_x_sens          , -99,  99,	 FALSE);
    save_spvar(deadzone		      , 1 ,  40, 	 FALSE);
    save_spvar(vertical[bullet_to_edit] , -99,  99 , FALSE );
    save_spvar(horizontal[bullet_to_edit] ,-99,  99 , FALSE);
    save_spvar(time         	  ,1,  200,      FALSE);
    save_spvar( mag_size           , 1,  55,      TRUE);

     								
}