// GPC Online Library
// apexterminated_v5_(zen).gpc

// GPC Online Library
// apexterminated.gpc

//MADE AND DEVED BY Eclipse ENJOY AND IF COPIED, AT LEAST GIVE CREDIT :D //
 
 
 
 /*SetDpadUp */
 int active = 1; //set to 0 and nothing will work.
 int ASSIST = TRUE; //Change TRUE TO FALSE if you DONT want to use Aim assist
 int ARUN = 1; //Auto run toggle change 1 to 2 if you want it Always enabled
 int STRA = FALSE; //Change to TRUE if you want it to aim while strafeing.
 
   /*layout */
    define PS = 0;
    define SHARE = 1;
    define OPTIONS = 2;   
    define RightBumper = 3;
    define RightTrigger = 4;        
    define RightJoystick = 5;        
    define LeftBumper = 6;       
    define LeftTrigger = 7;      
    define LeftJoystick = 8;    
    define RX = 9;       
    define RY = 10;      
    define LX = 11;       
    define LY = 12;      
    define DpadUp = 13;       
    define DpadDown = 14;    
    define DpadLeft = 15;
    define DpadRight = 16;
    define ButtonY = 17;
    define ButtonB = 18;  
    define ButtonA = 19;   
    define ButtonX = 20;
    
    //NOTE ONE RUMBLE ON TWO RUMBLES OFF//
	//aimassist hotkeys//
	define AAHOLD = LeftBumper;
	define AATAP = RightJoystick;
	//dropshot hotkeys//
	define DSHOLD = LeftBumper;
	define DSTAP = ButtonB;
	//AntiRecoil on/off hotkeys//
	define ARHOLD = RightBumper;
	define ARTAP = DpadDown;
	//AntiRecoil High/Low hotkeys//
	define ARHILOHOLD = LeftTrigger;
	define ARHILOTAP = DpadDown;
	//AutoRun hotkeys//
	define AUTORUNHOLD = RightBumper;
	define AUTORUNTAP = DpadUp;
	//RapidFire hotkeys//
	define RFHOLD = RightTrigger;
	define RFTAP = DpadUp;
	//Bunnyhop hotkeys//
	define BHHOLD = RightBumper;
	define BHTAP = ButtonA;
	//SpamPing hotkeys//
	define SPHOLD = RightBumper;
	define SPTAP = RightJoystick;
	//Antitheft hotkeys//
	define ATHOLD = LeftTrigger;
	define ATTAP = ButtonX;
	//Autoloot hotkeys//
	define ALHOLD = RightBumper;
	define ALTAP = DpadRight;
	//autostrafe hotkeys//
	define ASHOLD = LeftTrigger;
	define ASTAP = RightJoystick;
	//strafe time down hotkeys//
	define SDHOLD = LeftTrigger;
	define SDTAP = DpadLeft;
	//strafe time up hotkeys//
	define SUHOLD = LeftTrigger;
	define SUTAP = DpadRight;
	//Anti overheat hotkey//
	define OHHOLD = LeftTrigger;
	define OHTAP = LeftJoystick;
	//Show Active combos//
	define ACHOLD = RightBumper;
	define ACHOLD1 = LeftTrigger;
	define ACTAP = ButtonY;
	//ComboMap//
	define CMHOLD = LeftBumper;
	define CMTAP = DpadLeft;
	









    //Aim assist Values
    int AAPOS = 24;    // Decrease shake
    int AANEG = -24;   // Decrease shake
    int AADEL = 21;// How fAST Aim asist will Run The longer the more :stick: it has.20

    // fire value
    define RF_SPEED = 10; //NO LESS THAN 5 IT MAY NOT GET PICKED DpadUp 
    define RFW_SPEED = 5; //No less than 5 or it wont pick DpadUp...
    define RSF_SPEED = 10;
    define RSW_SPEED = 5;
    define ATF_SPEED = 5;
    define ATW_SPEED = 1;
    
    //stafe values//
    int STRAFEVALUE = 100;  //100 by def stick pressed 100% ex.
    // bottom 2 \/\/ editable in game Left trigger Left = + right = -
    int STRAFEEDIT = 100; // amount it goes DpadUp/DpadDown by.
    int RIGHT_Speed = 200; //How long to go RIGHT 
    int LEFT_Speed = 200; //How long to go LEFT
    int STRAFERUM = 100; // Multiply by number of rumbles to get the strafe time
    //change look values NOTE THIS IS ALWAYS ENABLED ON STRAFE//
    int STRAFEAIMR = -30;//-30
    int STRAFEAIML = 30;//30 by default
   //the lower the more Rumbles can be recieved
    /*values */
    int rumble = -1;
    int rumble_t;
    int BDrop;
    int AR_INDX;
	int ar_INDX;
	int AT_INDX;
	int RF_INDX;
	int AK_INDX;
	int BH_INDX;
	int SF_INDX;
	int FL_INDX;
	int ASSI_INDX = 1:
	int STR_INDX;
	int OH_INDX;
	int v,aRY;
	int TAP_TAP;
	int BBUNNY_onoff;
	int rs_x;
    int rs_y;
    int Heal_combo_count;
    
    
    
    
//antikick randomizer values..
int Move_Press_Min = 50;
int Move_Press_Max = 100;
int Move_Wait_Min = 500; // min 0
int Move_Wait_Max = 1000;// max 2147483647
int Ads_Press_Null = 0; // nulled
int Ads_Press_Min = 50; // min 0
int Ads_Press_Max = 100;// max 100
int Ads_Wait_Min = 200; // min 0
int Ads_Wait_Max = 500; // max 2147483647
int rand;

//dropshot random values//
int DSRAND1 = 100;
int DSRAND2 = 350;
int DSTAPREG = 200;//the min required to "hold" the b button to register.
    
    //whats active wait times inbetween.
    int ActiveWait; // will be set to active wait set to allow for speedy delivery.
    int ActiveWaitSet = 2000;
	int MapActiveWait = 3000;
	
//Strings for active can be changed but it will mess with the active combo map...
const string AimAssistActive = "AIMASSIST";
const string AntiRecoilHigh = "NORECOILHIGH";
const string AntiRecoilLow = "NORECOILLOW";
const string AutoRunActive = "AUTORUN";
const string RapidFireActive = "RapidFire";
const string BunnyHopActive = "BUNNYHOP";
const string AntiThieftActive = "ANTITHIEFT";
const string AutoLootActive = "AUTOLOOT";
const string DropShotActive = "DROPSHOT";
const string AntiOverheatActive = "NOOVERHEAT";
const string StrafeActive = "STRAFE";
const string SpamPingActive = "SPAMPING";




//Strings for hotkeys need to adjust if change hotkeys//
const string AimAssistHotkey = "LB + RJ";
const string AntiRecoilHotkey = "RB + DOWN";
const string AutoRunHotkeys = "RB + UP";
const string RapidFireHotkey = "RT + UP";
const string BunnyHopHotkey = "RB + A";
const string SpamPingHotkey = "RB + RJ";
const string AntiThieftHotkey = "LT + X";
const string AutoLootHotkey = "RB + RIGHT";
const string AutoStrafeHotkey = "LT + RJ";
const string AntiOverheatHotkey = "LT + LJ";
const string DropshotHotkey = "LB + B";
const string ShowActiveHotkey = "RB + LT + Y";






//ANTI OVERHEAT VALUES//
int OVERTIME = 300; // time until overheat and safeguard it.
int CLEARTIME = 50;//time to cool DpadDown

	//FastHeal Swap Values/
int w_x = -100; 
int w_y =  100;
int window_time = 250;
int xy_time = 20;

	//other info//
    const byte ANR_TI[][] =
    {{10,50,140},
    {10,90,150}};
    const int8 AR_V[][] =
    {{-35,-21,-11},//Low Recoil
    {-40,-23,-16}};//High Recoil
    
    
main {

//aim assist toggle//
if (get_val(AAHOLD) && event_press (AATAP))
{
ASSI_INDX = !ASSI_INDX;
rumble = ASSI_INDX;
}

//dropshot toggle//
if(get_val(DSHOLD) && event_press(ButtonB))
{
BDrop = !BDrop;
rumble = BDrop;
}

// anti recoil On/Off toggle//
if(get_val(ARHOLD) && event_press(ARTAP)) 
{
ar_INDX = !ar_INDX;
rumble = ar_INDX;
}

// anti recoil High/Low toggle // 
if(get_val(ARHILOHOLD) && event_press(ARHILOTAP)) 
{
ar_INDX = !ar_INDX;
rumble = ar_INDX;
}

//auto run toggle//
if(get_val (AUTORUNHOLD) && event_press(AUTORUNTAP))
{
	AR_INDX = !AR_INDX;
	rumble = AR_INDX;
}

/*  rapidfire Toggle */
if(get_val (RFHOLD) && event_press(RFTAP))
{
    RF_INDX = !RF_INDX;
	rumble = RF_INDX;
    }

/*bunny hop Toggle */
if(get_val (BHHOLD) && event_press(BHTAP))
{
    BH_INDX = !BH_INDX;
	rumble = BH_INDX;
    }

//SpamPing toggle//
if(get_val (SPHOLD) && event_press(SPTAP))
{
 SF_INDX = !SF_INDX;
	rumble = SF_INDX;
    }

//Anti theft Toggle//      
if(get_val (ATHOLD) && event_press(ATTAP))
{
    AT_INDX = !AT_INDX;
	rumble = AT_INDX;
    }

//auto loot Toggle//
if(get_val (ALHOLD) && event_press(ALTAP))
{
    FL_INDX = !FL_INDX;
	rumble = FL_INDX;
    }

//auto strafe toggle//
if(get_val(ASHOLD) && event_press(ASTAP))
{
    STR_INDX= !STR_INDX;
    rumble = STR_INDX;
    }

//Strafe time down//
if(get_val (SDHOLD) && event_press(SDTAP))
{
    RIGHT_Speed = (RIGHT_Speed + STRAFEEDIT);
    LEFT_Speed = (LEFT_Speed + STRAFEEDIT);
    rumble = (RIGHT_Speed / STRAFERUM);
    }

//Strafe time up//
if(get_val (SUHOLD) && event_press(SUTAP))
{
    RIGHT_Speed = (RIGHT_Speed - STRAFEEDIT);
    LEFT_Speed = (LEFT_Speed - STRAFEEDIT);
    rumble = (RIGHT_Speed / STRAFERUM);
    }

//overheat toggle//
if(get_val(OHHOLD) && event_press(OHTAP))
{
OH_INDX = !OH_INDX;
rumble = OH_INDX; 
}




//display Active Combos//
if(get_val (ACHOLD) && get_val (ACHOLD1) && event_press(ACTAP))
{
combo_run (WhatActive);
}

//Display Combomap//
if (get_val (CMHOLD) && event_press (CMTAP))
{
combo_run (ComboMap);
}





if (active == 1)
{



//Aim assist combo active//
if(ASSIST && ASSI_INDX == 1)
{
    if(get_val(LeftTrigger)) 
    combo_run(AAP);
    else 
    combo_stop(AAP); 
}
    
//dropshot combo active//
if(BDrop == 1 && get_val(RightTrigger))
combo_run(DS);
else
combo_stop(DS);

//Aimassist active//
if(get_val(LeftTrigger) && get_val(RightTrigger)) {
    if(get_ptime(RightTrigger) >= ANR_TI[ar_INDX][0])    
    aRY =  AR_V[ar_INDX][0];
    if(get_ptime(RightTrigger) >= ANR_TI[ar_INDX][1] * 10)
    aRY = AR_V[ar_INDX][1];
    if(get_ptime(RightTrigger) >= ANR_TI[ar_INDX][2] * 10)
    aRY = AR_V[ar_INDX][2];
    if(abs(get_val(RX)) < aRY + 5)
    set_val(RY,XY_VALUE(RY,aRY));}

/* auto run active*/
if(AR_INDX == 1 || ARUN == 2)
	combo_run(AR);
	else
	combo_stop(AR);
    
    
/* rapidFIRE active*/
if(RF_INDX == 1 && get_val(RightTrigger))
	combo_run(RF);
	else
	combo_stop(RF);
	

//Spamping active//
if(SF_INDX == 1 && get_val(RightBumper))
	combo_run(SF);
	else
	combo_stop(SF);


//Antitheft active//
if(AT_INDX ==1 && get_val (ButtonX))
	combo_run(AT);
	else
	combo_stop(AT);


//Auto Loot active//
if(FL_INDX ==1 && get_val (ButtonA))
	combo_run(FL);
	else
	combo_stop(FL);
    
    
//over heat active//
if(OH_INDX ==1 && get_val(RightTrigger))
    combo_run(NOH);
    else
    combo_stop(NOH);    
    
    
    
    
    
//Strafe active//

    if(STR_INDX ==1 && get_val(LeftTrigger) && get_val(RightTrigger) && STRA == TRUE)
    combo_run(StrafeAIM);
    else 
    if(STR_INDX ==1 && get_val(LeftTrigger) && get_val(RightTrigger))
    combo_run(Strafe);
    else
    combo_stop(Strafe);

//bhop double tap and bhop values//
    if(TAP_TAP)
    TAP_TAP -= get_rtime();
    if(event_press(ButtonB)) {
    if(TAP_TAP && get_val(LY) < -95) 
    BBUNNY_onoff = TRUE;
    else
    TAP_TAP = 300;}
    if(BBUNNY_onoff && BH_INDX)  //if both are true then...
    combo_run(BBBBUNNY);
    else
    combo_stop(BBBBUNNY);
	if(get_val(LY) > -50) 
    BBUNNY_onoff = FALSE;
	
	//anti kick toggle//
	if(get_val(RightBumper) && get_val(LeftBumper) && get_val(RightTrigger) && get_val(LeftTrigger) && event_press(ButtonA))
	AK_INDX = !AK_INDX
	//anti kick values
	if(AK_INDX == 1)
	combo_run(AK);
	combo_run(AKAD);
	if(AK_INDX != 1)
	combo_stop(AK);
	combo_stop(AKAD);
	
	if(event_press(DpadLeft)) {
    rs_x = w_x;
    rs_y = w_y;}
    if(rs_x || rs_y)
    combo_run(HEAL); 
	
	
}









	/*rumble run */
    if(rumble >= 0) {
    if(!rumble_t)
    set_rumble(RUMBLE_A,100);
    rumble_t += get_rtime();
    if(rumble_t ==  250)  
    reset_rumble();
    if(rumble_t == 400) {
    rumble--;
    rumble_t = 0;}}
    }
    
    
    
    
    
    
    /*polar aim assist */
    combo AAP {
    set_val(RY,XY_VALUE(RY,AAPOS));
    wait(AADEL)
    set_val(RX,XY_VALUE(RX,AAPOS));
    wait(AADEL)
    set_val(RY,XY_VALUE(RY,AANEG));
    wait(AADEL)
    set_val(RX,XY_VALUE(RX,AANEG));
    wait(AADEL)}
    
    /*function for aim assist */
    function XY_VALUE(_axis,_val) {
    v = get_val(_axis);
    if(abs(v) < 10)
    v = 0;
    if(abs(v) < _val + 5) 
    return v + _val;
    return v;}
    
    //auto run combo
    combo AR
    {
    if(get_val(LY) == -100 && get_val(LeftTrigger) == 0)  
    set_val(LeftJoystick,100);
    }
    
   //bunny hop//
    combo BBBBUNNY
    {
    set_val(ButtonB, 100);
    set_val(ButtonA, 100);
    set_val(ButtonB, 100);
    set_val(ButtonA, 0);
    wait(30);
    set_val(ButtonA, 100):
    set_val(ButtonA, 0);
    set_val(ButtonB, 100);
    set_val(ButtonB, 100);
    set_val(ButtonA, 100);
    wait(30);
    set_val(ButtonB, 100);
    set_val(ButtonA, 0);
    set_val(ButtonA, 100);
    }
   
   // fire combo//
    combo RF {
    set_val(RightTrigger, 100);
	wait(RF_SPEED);
	set_val(RightTrigger, 0);
	wait(RFW_SPEED);
	}
    //anti kick combo//
    combo AK {
    set_val(LX, RANDOMIZE(Move_Press_Max, Move_Press_Min));                                                                 
	wait(RANDOMIZE(Move_Wait_Min, Move_Wait_Max)); 
	set_val(LX, RANDOMIZE(Negatif(Move_Press_Max), Negatif(Move_Press_Min)));
	wait(RANDOMIZE(Move_Wait_Min, Move_Wait_Max)); 
    }
    combo AKAD
{
	set_val(LeftTrigger, RANDOMIZE(Ads_Press_Min, Ads_Press_Max));                                                                  
	wait(RANDOMIZE(Ads_Wait_Min, Ads_Wait_Max)); 
	set_val(LeftTrigger, Ads_Press_Null);
	wait(RANDOMIZE(Ads_Wait_Min, Ads_Wait_Max)); 
}
    //randomizer//
   
   function RANDOMIZE(min, max) 
{ 
    if (!rand)
        rand = 32767;
    rand = rand * 8403 % 32767;
    return (min  - 1) + abs(rand % (max - min));
}
   //spam ping func//
      // fire combo//
    combo SF {
    set_val(RightBumper, 100);
	wait(RSF_SPEED);
	set_val(RightBumper, 0);
	wait(RSW_SPEED);
	}
	//anti theft combo//
     combo AT {
    set_val(ButtonX, 100);
	wait(ATF_SPEED);
	set_val(ButtonX, 0);
	wait(ATW_SPEED);
	}
 	//LOOT BOX AUTO//
 	combo FL {
 	set_val(ButtonA, 100);
	wait(ATF_SPEED);
	set_val(ButtonA, 0);
	wait(ATW_SPEED);
 	}
 	//Strafe combo//
 	combo Strafe {
    set_val(LX,STRAFEVALUE);
    wait(RIGHT_Speed);
    set_val(LX,-STRAFEVALUE);
    wait(LEFT_Speed);
    set_val(LX,-STRAFEVALUE);
    wait(LEFT_Speed);
    set_val(LX,STRAFEVALUE);
    wait(RIGHT_Speed);
 }
 
 	combo StrafeAIM {
    set_val(LX,STRAFEVALUE);
    set_val (RX,STRAFEAIMR);
    wait(RIGHT_Speed);
    set_val(LX,-STRAFEVALUE);
    set_val (RX,STRAFEAIML);
    wait(LEFT_Speed);
    set_val(LX,-STRAFEVALUE);
    set_val (RX,STRAFEAIML);
    wait(LEFT_Speed);
    set_val(LX,STRAFEVALUE);
    set_val (RX,STRAFEAIMR);
    wait(RIGHT_Speed);
 }
 
 //dropshot//
    combo DS {
    wait(random(DSRAND1, DSRAND2));
    set_val(ButtonB, 100);
    wait(DSTAPREG);
    set_val(ButtonB, 0);
  }


//Heal Combo//
    combo HEAL {
    set_val(DpadUp, 100);
    wait(window_time);
    set_val(DpadUp, 100);
    set_val(RX,rs_x);
    set_val(RY,rs_y);
    wait(xy_time);  
    set_val(RX,rs_x);
    set_val(RY,rs_y);
    wait(30);
    wait(30);
    Heal_combo_count += 1;
    w_x = inv(w_x);
    if(Heal_combo_count == 2){
    w_y = inv(w_y);
    Heal_combo_count = 0;}
    rs_x = 0;
    rs_y = 0;}









	combo WhatActive
	{
	wait(500);
	if (ASSI_INDX == 1){
	ActiveWait = ActiveWaitSet;
	cls_oled(1)
	cls_oled(0);
	printf(22,22,0,1,AimAssistActive[0]); // Print on-screen - X, Y, Size, ON/OFF, String name
	printf(22,32,0,1,AimAssistHotkey[0]); // Print on-screen - X, Y, Size, ON/OFF, String name
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (ar_INDX == 1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AntiRecoilHigh[0]);
	printf(22,32,0,1,AntiRecoilHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (ar_INDX != 1)
	{
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AntiRecoilLow[0]);
	printf(22,32,0,1,AntiRecoilHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (AR_INDX == 1)
	{
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AutoRunActive[0]);
	printf(22,32,0,1,AutoRunHotkeys[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (RF_INDX == 1)
	{
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,RapidFireActive[0]);
	printf(22,32,0,1,RapidFireHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (BH_INDX == 1)
	{
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,BunnyHopActive[0]);
	printf(22,32,0,1,BunnyHopHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (AT_INDX == 1)
	{
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AntiThieftActive[0]);
	printf(22,32,0,1,AntiThieftHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (FL_INDX == 1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AutoLootActive[0]);
	printf(22,32,0,1,AutoLootHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (BDrop == 1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,DropShotActive[0]);
	printf(22,32,0,1,DropshotHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (OH_INDX == 1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,AntiOverheatActive[0]);
	printf(22,32,0,1,AntiOverheatHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (STR_INDX == 1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,StrafeActive[0]);
	printf(22,32,0,1,AutoStrafeHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	if (SF_INDX ==1){
	ActiveWait = ActiveWaitSet;
	printf(22,22,0,1,SpamPingActive[0]);
	printf(22,32,0,1,SpamPingHotkey[0]);
	}
	wait(ActiveWait);
	ActiveWait = 0;
	cls_oled(0);
	
	
	
	
	
	wait(10)
	cls_oled(1);
	wait(500)
	cls_oled(0);
	}




//ComboMap//
combo ComboMap
{
	cls_oled(1)
	wait(500)
	cls_oled(0);
	printf(22,22,0,1,AimAssistActive[0]); // Print on-screen - X, Y, Size, ON/OFF, String name
	printf(22,32,0,1,AimAssistHotkey[0]); // Print on-screen - X, Y, Size, ON/OFF, String name
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,AntiRecoilHigh[0]);
	printf(22,32,0,1,AntiRecoilHotkey[0]);
	
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,AutoRunActive[0]);
	printf(22,32,0,1,AutoRunHotkeys[0]);
	
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,RapidFireActive[0]);
	printf(22,32,0,1,RapidFireHotkey[0]);
	
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,BunnyHopActive[0]);
	printf(22,32,0,1,BunnyHopHotkey[0]);
	
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,SpamPingActive[0]);
	printf(22,32,0,1,SpamPingHotkey[0]);
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,AntiThieftActive[0]);
	printf(22,32,0,1,AntiThieftHotkey[0]);
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,AutoLootActive[0]);
	printf(22,32,0,1,AutoLootHotkey[0]);
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,StrafeActive[0]);
	printf(22,32,0,1,AutoStrafeHotkey[0]);
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,AntiOverheatActive[0]);
	printf(22,32,0,1,AntiOverheatHotkey[0]);
	
	wait(MapActiveWait);
	cls_oled(0);
	printf(22,22,0,1,DropShotActive[0]);
	printf(22,32,0,1,DropshotHotkey[0]);
	
	
	
	wait(MapActiveWait);
	wait(100)
	cls_oled(1);
	wait(10)
	cls_oled(0);
}







combo NOH {
	set_val(RightTrigger, 100);
	wait(OVERTIME);
	set_val(RightTrigger,0);
	wait(CLEARTIME);
}




 function Negatif(Val_Positif) 
{
	return (Val_Positif * -1);
}

    
    
    
    
    
    
    