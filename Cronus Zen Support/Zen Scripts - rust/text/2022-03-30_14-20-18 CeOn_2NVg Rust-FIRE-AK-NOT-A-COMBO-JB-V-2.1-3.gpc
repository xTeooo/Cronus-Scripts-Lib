
																																												/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    JB'S Rust AK Anti Recoil        )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*

This is not any scammers crap combo script that does not work at all. You can configure this to any gun any setting any attachment. The timing will need to be changed per gun.

This script allows you to have anti recoil with aiming. Each bullet has a value which can be changed. 

The values are pretty decent at this point. You can fine tune them if need be.

Currently I have it set up for an AK with a holo.

READ ALL THE INSTRUCTIONS BELOW IN GREEN TEXT.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(              In Game Values                        )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
 
 70 - X
 70 - Y
 40 - ADS
 40 - 1 X Zoom
 10 - Dead Zone Left
 10 - Dead Zone Right
 90 - FOV under Graphics. Not sure if this has an effect or not.
																																												*/  

define Ads      = PS4_L2; // DO NOT TOUCH
define Fire     = PS4_R2; // DO NOT TOUCH
                                                                                                                                                                               /*
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Script Stick Drift              )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*

1)	DO NOT SET YOUR IN GAME VALUE TO THIS. 
2)	THIS IS VERY IMPORTANT!!! This allows you to remove stick drift from the script. Move your right stick around and find the highest value in device manager.  
3)	See what your MAX INPUT is for your left stick X and Y when you dont touch it.
4)	I recomend moving it around a little bit and see where it falls.
6)	Mine was 7. It does not matter if it is positive or negative. Thats why 7 is in the dead zone above
7)  Your stick drift cannot exceed a value for the anti recoil below.
8)  LEAVE YOUR IN GAME DEADZONE AT 10 DO NOT SET IT TO THE ONE BELOW
					 																																							*/

define Deadzone = 7; 

																																												/* 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    Anti Recoil Values              )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*

1)	Values below are for the recoil pattern. You can adjust each bullet. The values are pretty solid. You can fine tune them if you want.
2)  I recommend changing values only by increasing or decreasing the value by 1 at a time. Max 2 at a time.
3)  X is Horzontal
4)  Y is Vertical 
                                                                                                                                                                                 */

const int16 dAK[][] = {
	{0,-20,-10,-25,-18,  8, 12, 32,  23,  23,  23,  24,  23,   4, -13, -13, -13, -20, -21, -26, -26, -26, -26,  18,  18,  20,  20,  20,  20,  20,   0},			//X-Axis
	{0, 49, 49, 49, 49, 46, 27, 27,  27,  27,  28,  28,  28,  41,  41,  41,  41,  41,  41,  36,  36,  36,  36,  36,  34,  34,  34,  34,  30,  30,   0}
}

int n,tval,sum,sumX,sumY;
int X[30];
int Y[30];

init
{
    for(n = 0; n < 30; n++)
    {
        X[n] = get_pvar(SPVAR_1+n, -100, 100, dAK[0][n]);
        Y[n] = get_pvar(SPVAR_31+n, -100, 100, dAK[1][n]);
        sumX += abs(X[n]);
        sumY += abs(Y[n]);
        sum = sumX + sumY;
    }
    tval = get_pvar(SPVAR_61, 1, 32767, 130);
    
}

int AntiRecoil_Y; // DO NOT TOUCH
int AntiRecoil_X; // DO NOT TOUCH

int recoil_timer,pertimer,vpower,hpower;

//Menu Instructions

//Press L2/LT + Options/Menu to enter menu

/*In the main page of menu, 
Press CROSS/A to enter value adjustment page,
Press SHARE/VIEW to reset default values*/

/*In the value adjustment page, 
You can increase/decrease values by 10 by holding L2/LT and pressing up/down, or only change values by 1 by only pressing up/down,
Press L1/LB to adjust x values, press R1/RB to adjust y values, press R2/RT to adjust time value
Press left/right to change value id*/

//You can go back to the last page of the menu by pressing Circle/B
//Press Triangle/Y in any page of the menu to exit menu
//Press L2/LT + Triangle/Y inside or outside the menu to save values

//Some other instructions are inside the menu

const uint8 Buttons [] = {
 PS4_L2,PS4_OPTIONS,PS4_LEFT, PS4_RIGHT,PS4_UP,PS4_DOWN,PS4_CROSS,PS4_CIRCLE,PS4_SQUARE,PS4_TRIANGLE,PS4_L1,PS4_R1,PS4_R2};
int Menu; 
int ValuePage;
int XValuePage = TRUE;
int YValuePage = FALSE;
int TimeValuePage = FALSE;
int MainPage;
int ResetPage;
int HelpPage1;
int HelpPage2;
int Title = TRUE;
int blockButton;
int i;
int ValueNumber = 0;
int i_val, c_val, chr_val; 
int SmartSens;


const string GunName = "AK";   //You can change AK to whatever title you want
const string TitleMessage []= {"Press L2/LT +", "Options/Menu"};
const string MainPageMessage1 [] = {"Press Cross/A", "to continue"};
const string MainPageMessage2 [] = {"Press Triangle/Y", "to exit"};
const string MainPageMessage3 [] = {"Press Share/View", "to reset default"};
const string ValuePageMessage [] = {"Press Square/X", "for help"};
const string HelpPage1Message [] = {"Press L1/R1/R2 to", "adjust x/y/time", "Press Left/Right", "to change value id", "Cross/A:Next Page", "Circle/B:Last Page"};
const string HelpPage2Message [] = {"Hold L2 and press", "Up/Down:", "Change value by 10", "Press Up/Down:", "Change value by 1"};
const string ResetMessage [] = {"Are you sure to", "reset all values", "to default?", "YES : Cross/A", "NO : Triangle/Y"};
const string XValueNum[] = {"x_value1","x_value2","x_value3","x_value4","x_value5","x_value6","x_value7","x_value8","x_value9","x_value10","x_value11","x_value12","x_value13","x_value14","x_value15","x_value16","x_value17","x_value18","x_value19","x_value20","x_value21","x_value22","x_value23","x_value24","x_value25","x_value26","x_value27","x_value28","x_value29","x_value30"};
const string YValueNum[] = {"y_value1","y_value2","y_value3","y_value4","y_value5","y_value6","y_value7","y_value8","y_value9","y_value10","y_value11","y_value12","y_value13","y_value14","y_value15","y_value16","y_value17","y_value18","y_value19","y_value20","y_value21","y_value22","y_value23","y_value24","y_value25","y_value26","y_value27","y_value28","y_value29","y_value30"};
const string TimeValue = "time_value";
  																																												/*
 DO NOT CHANGE ANYTHING BELOW. Unless you are configuring for a different weapon. You will need to change the value after get_ptime.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
																																												*/

main {
    set_val(TRACE_1, sum);
    if(get_val(PS4_L2) && event_press(PS4_TRIANGLE))
    {
        SaveValues();
    }
    
    if(sum == 0 && tval == 130)
    {
        sum = 123;
        ResetDefault();
    }
    
    if(Title)
    {
        cls_oled(OLED_BLACK);
        printf(CenterText(sizeof(GunName) - 1, OLED_FONT_MEDIUM_WIDTH), 13, OLED_FONT_MEDIUM, OLED_WHITE, GunName[0]);
        printf(23, 40, OLED_FONT_SMALL, OLED_WHITE, TitleMessage[0]);
        printf(25, 53, OLED_FONT_SMALL, OLED_WHITE, TitleMessage[1]);
    }
    if(MainPage)
    {
        cls_oled(OLED_BLACK);
        printf(20, 0, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage1[0]);
        printf(30, 10, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage1[1]);
        printf(10, 45, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage2[0]);
        printf(43, 55, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage2[1]);
        printf(10, 22, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage3[0]);
        printf(10, 32, OLED_FONT_SMALL, OLED_WHITE, MainPageMessage3[1]);
        
        if(event_press(PS4_CROSS))
        {
            ValuePage = TRUE; 
            MainPage = FALSE; 
        }
        if(event_press(PS4_SHARE))
        {
            ResetPage = TRUE;
            MainPage = FALSE;
        }
    }
    if(ResetPage)
    {
        cls_oled(OLED_BLACK)
        printf(10, 0, OLED_FONT_SMALL, OLED_WHITE, ResetMessage[0]);
        printf(10, 10, OLED_FONT_SMALL, OLED_WHITE, ResetMessage[1]);
        printf(10, 20, OLED_FONT_SMALL, OLED_WHITE, ResetMessage[2]);
        printf(10, 45, OLED_FONT_SMALL, OLED_WHITE, ResetMessage[3]);
        printf(10, 55, OLED_FONT_SMALL, OLED_WHITE, ResetMessage[4]);
        if(event_press(PS4_CROSS))
        {
            ResetDefault();
            combo_run(EXIT);
        }
        if(event_press(PS4_CIRCLE))
        {
            ResetPage = FALSE; 
            MainPage = TRUE;
        }
    }
    if(ValuePage)
    {
        cls_oled(OLED_BLACK);
        printf(15, 40, OLED_FONT_SMALL, OLED_WHITE, ValuePageMessage[0]);
        printf(35, 50, OLED_FONT_SMALL, OLED_WHITE, ValuePageMessage[1]);
        if(event_press(PS4_SQUARE))
        {
            HelpPage1 = TRUE;
            ValuePage = FALSE;
        }
        if(event_press(PS4_CIRCLE))
        {
            ValuePage = FALSE;
            MainPage = TRUE;
            ValueNumber = 0;
            XValuePage = TRUE;
            YValuePage = FALSE;
            TimeValuePage = FALSE;
        }
        if(event_press(PS4_LEFT))
        {
                ValueNumber--;
        }
            if(event_press(PS4_RIGHT))
        {
                ValueNumber++;
        }
        if(ValueNumber < 0) ValueNumber = 29;
        if(ValueNumber > 29) ValueNumber = 0;
        if(event_press(PS4_L1))
        {
            XValuePage = TRUE;
            YValuePage = FALSE;
            TimeValuePage = FALSE;
        }
        if(event_press(PS4_R1))
        {
            XValuePage = FALSE;
            YValuePage = TRUE;
            TimeValuePage = FALSE;
        }
         if(event_press(PS4_R2))
        {
            XValuePage = FALSE;
            YValuePage = FALSE;
            TimeValuePage = TRUE;
        }
                
        if(XValuePage)
        {
            printf(21 , 0 , OLED_FONT_MEDIUM, OLED_WHITE, XValueNum[ValueNumber]);
            NumberToString(X[ValueNumber], FindDigits(X[ValueNumber]), CenterText(FindDigits(X[ValueNumber]), OLED_FONT_MEDIUM_WIDTH), 20);	
            if(event_press(PS4_UP))
            {
                if(get_ival(PS4_L2))
                {
                    X[ValueNumber] += 10;
                }
                else { X[ValueNumber] ++;
                }
            }
            if(event_press(PS4_DOWN))
            {
                if(get_ival(PS4_L2))
                {
                    X[ValueNumber] -= 10;
                }
                else { X[ValueNumber] --;
                }
            }
            if(X[ValueNumber] > 100) X[ValueNumber] = 100;
            if(X[ValueNumber] < -100) X[ValueNumber] = -100;
        }
        if(YValuePage)
        {
            printf(21 , 0 , OLED_FONT_MEDIUM, OLED_WHITE, YValueNum[ValueNumber]);
            NumberToString(Y[ValueNumber], FindDigits(Y[ValueNumber]), CenterText(FindDigits(Y[ValueNumber]), OLED_FONT_MEDIUM_WIDTH), 20);	
            if(event_press(PS4_UP))
            {
                if(get_ival(PS4_L2))
                {
                    Y[ValueNumber] += 10;
                }
                else { Y[ValueNumber] ++;
                }
            }
            if(event_press(PS4_DOWN))
            {
                if(get_ival(PS4_L2))
                {
                    Y[ValueNumber] -= 10;
                }
                else { Y[ValueNumber] --;
                }
            }
            if(Y[ValueNumber] > 100) Y[ValueNumber] = 100;
            if(Y[ValueNumber] < -100) Y[ValueNumber] = -100;
        }
        if(TimeValuePage)
        {
            printf(CenterText(sizeof(TimeValue) - 1, OLED_FONT_MEDIUM_WIDTH), 0, OLED_FONT_MEDIUM, OLED_WHITE, TimeValue[0]);
            NumberToString(tval, FindDigits(tval), CenterText(FindDigits(tval), OLED_FONT_MEDIUM_WIDTH), 20);
            if(event_press(PS4_UP))
            {
                if(get_ival(PS4_L2))
                {
                    tval += 10;
                }
                else { tval ++;
                }
            }
            if(event_press(PS4_DOWN))
            {
                if(get_ival(PS4_L2))
                {
                    tval -= 10;
                }
                else { tval --;
                }
            }
            if(tval < 1) tval = 1;
        }
    }
    
    if(HelpPage1)
    {
        cls_oled(OLED_BLACK);
        printf(0, 0, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[0]);
        printf(0, 10, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[1]);
        printf(0, 20, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[2]);
        printf(0, 30, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[3]);
        printf(0, 40, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[4]);
        printf(0, 50, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[5]);
        if(event_press(PS4_CIRCLE))
        {
            HelpPage1 = FALSE;
            ValuePage = TRUE;
        }
        if(event_press(PS4_CROSS))
        {
            HelpPage2 = TRUE;
            HelpPage1 = FALSE;
        }
    }
    
    if(HelpPage2)
    {
        cls_oled(OLED_BLACK);
        printf(0, 0, OLED_FONT_SMALL, OLED_WHITE, HelpPage2Message[0]);
        printf(0, 10, OLED_FONT_SMALL, OLED_WHITE, HelpPage2Message[1]);
        printf(0, 20, OLED_FONT_SMALL, OLED_WHITE, HelpPage2Message[2]);
        printf(0, 30, OLED_FONT_SMALL, OLED_WHITE, HelpPage2Message[3]);
        printf(0, 40, OLED_FONT_SMALL, OLED_WHITE, HelpPage2Message[4]);
        printf(0, 50, OLED_FONT_SMALL, OLED_WHITE, HelpPage1Message[5]);
        if(event_press(PS4_CIRCLE))
        {
            HelpPage2 = FALSE;
            HelpPage1 = TRUE;
        }
    }
        
    if(blockButton) 
    {
		if(event_release(blockButton)) 
		{
			blockButton = 0;
		}
		else
		{
	    	set_val(blockButton,0);
	    }
	}
	
    if(get_val(PS4_L2) && get_val(PS4_OPTIONS) && get_ptime(PS4_OPTIONS) > 1000)
	    {
        Menu = TRUE;
        MainPage = TRUE;
        Title = FALSE;
        blockButton = PS4_OPTIONS;
        }
    if(Menu)
    {
        BlockButtonPress();
        if(event_press(PS4_TRIANGLE)) 
        {
            combo_run(EXIT);
        }
    }
    
    AntiRecoil_X = X[hpower];
	AntiRecoil_Y = Y[vpower];

    if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= Deadzone) 
	{
        set_val(PS4_LX,0);
        set_val(PS4_LY,0);
    }

    if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= Deadzone) 
    {
        set_val(PS4_RX,0);
        set_val(PS4_RY,0);
    }
   
   
    if(get_val(Fire) && get_val(Ads))
    {
  	    recoil_timer += get_rtime();
  	    pertimer += get_rtime();
	    if(pertimer >= tval)
	    { 
		    vpower++;
	        hpower++;
	        pertimer = 0;
	    }
	    set_val(PS4_RY, SmartSens(AntiRecoil_Y, PS4_RY));
        set_val(PS4_RX, SmartSens(AntiRecoil_X, PS4_RX));      
    }
   
    if(event_release(Fire) || recoil_timer >= tval * 30)
    { 
		vpower       = 0;
	    hpower       = 0;
	    recoil_timer = 0;
	    pertimer = 0;
    }
}

combo EXIT 
{
    wait(100);
    cls_oled(OLED_BLACK); 
    Menu = FALSE;
    MainPage = FALSE; 
    ResetPage = FALSE;
    ValuePage = FALSE; 
    HelpPage1 = FALSE;
    HelpPage2 = FALSE;
    ValueNumber = 0;
    XValuePage = TRUE;
    YValuePage = FALSE;
    TimeValuePage = FALSE;
    Title = TRUE;
}

function SmartSens(f_val, f_axis) { 

    SmartSens = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 

    return clamp(get_val(f_axis) + SmartSens, -100, 100);
}
   
function CenterText(f_chars,f_font)
{
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}

function BlockButtonPress ()
{
    for(i = 0; i < 13; i++)
    {
        if(get_ival(Buttons[i]) || event_press(Buttons[i]))
        {
            set_val(Buttons[i],0);
        }
    }
}

function NumberToString(f_val,f_dgts, x_val,y_val) {
 
	i_val = 1;  chr_val = 10000;
    
	if(f_val < 0){          
         putc_oled(i_val,45);    
         i_val += 1;
         f_val = abs(f_val);
	} 
	for(c_val = 5; c_val >= 1; c_val--){
	    if(f_dgts >= c_val) {
            putc_oled(i_val, (f_val / chr_val) + 48);
            f_val = f_val % chr_val;
            i_val +=  1; 
            if(c_val == 4){
                putc_oled(i_val,44);   
                i_val += 1;
            }
        }
        chr_val /= 10;
    }  

    puts_oled(x_val, y_val, 1,i_val - 1, 1);    
} 

function FindDigits(digits) {                         
	//  FindDigits(value)                                
	//        return Number of Digits in Value Passed     		                                                      
    digits = abs(digits);                               
    if(digits / 10000 > 0) return 5;                   
    if(digits /  1000 > 0) return 4;                   
    if(digits /   100 > 0) return 3;                   
    if(digits /    10 > 0) return 2;                   
                          return 1;                  
}

function SaveValues() 
{
    set_pvar(SPVAR_1, X[0]);
    set_pvar(SPVAR_2, X[1]);
    set_pvar(SPVAR_3, X[2]);
    set_pvar(SPVAR_4, X[3]);
    set_pvar(SPVAR_5, X[4]);
    set_pvar(SPVAR_6, X[5]);
    set_pvar(SPVAR_7, X[6]);
    set_pvar(SPVAR_8, X[7]);
    set_pvar(SPVAR_9, X[8]);
    set_pvar(SPVAR_10, X[9]);
    set_pvar(SPVAR_11, X[10]);
    set_pvar(SPVAR_12, X[11]);
    set_pvar(SPVAR_13, X[12]);
    set_pvar(SPVAR_14, X[13]);
    set_pvar(SPVAR_15, X[14]);
    set_pvar(SPVAR_16, X[15]);
    set_pvar(SPVAR_17, X[16]);
    set_pvar(SPVAR_18, X[17]);
    set_pvar(SPVAR_19, X[18]);
    set_pvar(SPVAR_20, X[19]);
    set_pvar(SPVAR_21, X[20]);
    set_pvar(SPVAR_22, X[21]);
    set_pvar(SPVAR_23, X[22]);
    set_pvar(SPVAR_24, X[23]);
    set_pvar(SPVAR_25, X[24]);
    set_pvar(SPVAR_26, X[25]);
    set_pvar(SPVAR_27, X[26]);
    set_pvar(SPVAR_28, X[27]);
    set_pvar(SPVAR_29, X[28]);
    set_pvar(SPVAR_30, X[29]);
    set_pvar(SPVAR_31, Y[0]);
    set_pvar(SPVAR_32, Y[1]);
    set_pvar(SPVAR_33, Y[2]);
    set_pvar(SPVAR_34, Y[3]);
    set_pvar(SPVAR_35, Y[4]);
    set_pvar(SPVAR_36, Y[5]);
    set_pvar(SPVAR_37, Y[6]);
    set_pvar(SPVAR_38, Y[7]);
    set_pvar(SPVAR_39, Y[8]);
    set_pvar(SPVAR_40, Y[9]);
    set_pvar(SPVAR_41, Y[10]);
    set_pvar(SPVAR_42, Y[11]);
    set_pvar(SPVAR_43, Y[12]);
    set_pvar(SPVAR_44, Y[13]);
    set_pvar(SPVAR_45, Y[14]);
    set_pvar(SPVAR_46, Y[15]);
    set_pvar(SPVAR_47, Y[16]);
    set_pvar(SPVAR_48, Y[17]);
    set_pvar(SPVAR_49, Y[18]);
    set_pvar(SPVAR_50, Y[19]);
    set_pvar(SPVAR_51, Y[20]);
    set_pvar(SPVAR_52, Y[21]);
    set_pvar(SPVAR_53, Y[22]);
    set_pvar(SPVAR_54, Y[23]);
    set_pvar(SPVAR_55, Y[24]);
    set_pvar(SPVAR_56, Y[25]);
    set_pvar(SPVAR_57, Y[26]);
    set_pvar(SPVAR_58, Y[27]);
    set_pvar(SPVAR_59, Y[28]);
    set_pvar(SPVAR_60, Y[29]);
    set_pvar(SPVAR_61, tval);
}

function ResetDefault()
{
    for (n=0; n<30; n++)
    {
        X[n] = dAK[0][n];
        Y[n] = dAK[1][n];
    }
    tval = 130;
    SaveValues();
}
