
// This is not any scammers crap combo script that does not work at all. You can configure this to any gun any setting any attachment. The timing will need to be changed per gun.
// This is set up for the SAR . You will need to get values.

define Ads      = PS4_L2; // DO NOT TOUCH
define Fire     = PS4_R2; // DO NOT TOUCH
define On 	    = TRUE;   // DO NOT TOUCH
define Off      = FALSE;  // DO NOT TOUCH



define RapidFire    = On;  // Turns on ADS Rapid Fire
define RapidFireHip = Off; // Turns on Hip Fire Rapid Fire. Leave this off

define RapidFireHold = 100; //RAPID FIRE TIME. THESE ADDED TOGETHER HAVE TO EQUAL THE STEP TIME.
define RapidFireWait = 100;

define Deadzone = 7; /* DO NOT SET YOUR IN GAME VALUE TO THIS. 
					    THIS IS VERY IMPORTANT!!! This allows you to remove stick drift from the script. Move your right stick around and find the highest value in device manager.  
					    See what your MAX INPUT is for your left stick X and Y when you dont touch it.
					    I recomend moving it around a little bit and see where it falls.
					    Mine was 7. It does not matter if it is positive or negative.
					    Your stick drift cannot exceed a value for the anti recoil below. 
					 */

/* Values below are for the recoil pattern. You can adjust each bullet. 
   I recommend changing values only by increasing or decreasing the value by 1 at a time. Max 2 at a time.
   X is Horzontal
   Y is Vertical 
*/

int X1  =   0; 			//Bullet 1 Leave at 0
int X2  =   0;			//Bullet 2
int X3  =   0;			//Bullet 3
int X4  =   0;			//Bullet 4
int X5  =   0;			//Bullet 5
int X6  =   0;			//Bullet 6
int X7  =   0;			//Bullet 7
int X8  =   0; 			//Bullet 8
int X9  =   0;			//Bullet 9
int X10 =   0;			//Bullet 10
int X11 =   0;   		//Bullet 11
int X12 =   0;			//Bullet 12
int X13 =   0;			//Bullet 13
int X14 =   0;			//Bullet 14
int X15 =   0;			//Bullet 15
int X16 =   0;			//Bullet 16

int Y1  =   0;			//Bullet 1 Leave at 0
int Y2  =   0;			//Bullet 2
int Y3  =   0;			//Bullet 3
int Y4  =   0;			//Bullet 4
int Y5  =   0;			//Bullet 5
int Y6  =   0;			//Bullet 6
int Y7  =   0;			//Bullet 7
int Y8  =   0;			//Bullet 8 
int Y9  =   0;			//Bullet 9
int Y10 =   0;			//Bullet 10
int Y11 =   0;			//Bullet 11
int Y12 =   0;			//Bullet 12
int Y13 =   0;			//Bullet 13
int Y14 =   0;			//Bullet 14
int Y15 =   0;			//Bullet 15
int Y16 =   0;			//Bullet 16


int AntiRecoil_Y; // vertical antirecoil
int AntiRecoil_X; // horizontal antirecoil

// DO NOT CHANGE ANYTHING BELOW. Unless you are configuring for a different weapon. You will need to change the value after get_ptime.

main {
 
   

  if(isqrt(pow(abs(get_ival(PS4_LX)),2) + pow(abs(get_ival(PS4_LY)),2)) <= Deadzone) {
    set_val(PS4_LX,0);
    set_val(PS4_LY,0);
  }

  if(isqrt(pow(abs(get_ival(PS4_RX)),2) + pow(abs(get_ival(PS4_RY)),2)) <= Deadzone) {
    set_val(PS4_RX,0);
    set_val(PS4_RY,0);
  }
   
   
   if(get_val(Fire) && get_val(Ads))
    {
        AntiRecoil_Y = Y1; 
        AntiRecoil_X = X1; 
      
        if(get_ptime(Fire) >= 200)   // Bullet 2 
        {
            
            AntiRecoil_Y = Y2; 
            AntiRecoil_X = X2;
         	
        }
        
        if(get_ptime(Fire) >= 400)  // Bullet 3
        {
           
            AntiRecoil_Y = Y3; 
            AntiRecoil_X = X3;
            
        }
        
        if(get_ptime(Fire) >= 600)  // Bullet 4
        
        {
            
            AntiRecoil_Y = Y4; 
            AntiRecoil_X = X4;
            
        }
        
        
        if(get_ptime(Fire) >= 800)  // Bullet 5
        {
        	
            AntiRecoil_Y = Y5; 
            AntiRecoil_X = X5;
            
        }
        
        
        if(get_ptime(Fire) >= 1000)  // Bullet 6
        {
            
            AntiRecoil_Y = Y6; 
            AntiRecoil_X = X6;
            
        }
        
        
        if(get_ptime(Fire) >= 1200)  // Bullet 7
        {
            
            AntiRecoil_Y = Y7; 
            AntiRecoil_X = X7;
            
        }
        
        
        if(get_ptime(Fire) >= 1400)  // Bullet 8
        {
            
            AntiRecoil_Y = Y8; 
            AntiRecoil_X = X8;
            
        }
        
        
        if(get_ptime(Fire) >= 1600)  // Bullet 9
        {
            
            AntiRecoil_Y = Y9; 
            AntiRecoil_X = X9;
            
        }
        
        
        if(get_ptime(Fire) >= 1800)  // Bullet 10
        {
                        
            AntiRecoil_Y = Y10; 
            AntiRecoil_X = X10;
            
        }

        if(get_ptime(Fire) >= 2000)  // Bullet 11
        {
           
            AntiRecoil_Y = Y11; 
            AntiRecoil_X = X11;
           
        }
        
        
        if(get_ptime(Fire) >= 2200)  // Bullet 12
        {
            
            AntiRecoil_Y = Y12; 
            AntiRecoil_X = X12;
            
        }
        
        
        if(get_ptime(Fire) >= 2400)  // Bullet 13
        {
            
            AntiRecoil_Y = Y13; 
            AntiRecoil_X = X13;
            
        }
        
        
        if(get_ptime(Fire) >= 2600)  // Bullet 14
        {
            
            AntiRecoil_Y = Y14; 
            AntiRecoil_X = X14;
            
        }
        
        
        if(get_ptime(Fire) >= 2800)  // Bullet 15
        {
            
            AntiRecoil_Y = Y15; 
            AntiRecoil_X = X15;
            
        }
        
        
        if(get_ptime(Fire) >= 3000)  // Bullet 16
        {
            
            AntiRecoil_Y = Y16; 
            AntiRecoil_X = X16;
            
        }
                
        if(get_ptime(Fire) >= 3200)  // Bullet 
        {
            
            AntiRecoil_Y = 0; 
            AntiRecoil_X = 0;
            
        }
		 
        
          
        
        
        set_val(PS4_RY, SmartSens(AntiRecoil_Y, PS4_RY));
        set_val(PS4_RX, SmartSens(AntiRecoil_X, PS4_RX));
    
        
    }
    
    
}


int SmartSens;

function SmartSens(f_val, f_axis) { 

    SmartSens = ( (f_val * ( 100 - abs( get_val(f_axis) ) ) ) / 100); 

    return clamp(get_val(f_axis) + SmartSens, -100, 100);
}


main {


    if (RapidFire) {
    
        if (RapidFireHip) {
            
            if (get_ival(Fire)) {
        
                combo_run(RapidFire);
        
            } 
        
        } else if (get_ival(Ads) && get_ival(Fire)) {
        
            combo_run(RapidFire);    
            
        } else {
            
            combo_stop(RapidFire);
        }
    }
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}
