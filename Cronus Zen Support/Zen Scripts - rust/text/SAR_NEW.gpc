
/*
  _   _                       _____               __              _____                                             
 | \ | |                     |  __ \             / _|            / ____|                                            
 |  \| | _____   _____ _ __  | |__) |_ _ _   _  | |_ ___  _ __  | (___   ___ __ _ _ __ ___  _ __ ___   ___ _ __ ___ 
 | . ` |/ _ \ \ / / _ \ '__| |  ___/ _` | | | | |  _/ _ \| '__|  \___ \ / __/ _` | '_ ` _ \| '_ ` _ \ / _ \ '__/ __|
 | |\  |  __/\ V /  __/ |    | |  | (_| | |_| | | || (_) | |     ____) | (_| (_| | | | | | | | | | | |  __/ |  \__ \
 |_|_\_|\___| \_/ \___|_|  _ |_|   \__,_|\__, | |_| \___/|_|    |_____/ \___\__,_|_| |_| |_|_| |_| |_|\___|_|  |___/
  / ____|         (_)     | |             __/ |                                                                     
 | (___   ___ _ __ _ _ __ | |_ ___       |___/                                                                      
  \___ \ / __| '__| | '_ \| __/ __|                                                                                 
  ____) | (__| |  | | |_) | |_\__ \                                                                                 
 |_____/ \___|_|  |_| .__/ \__|___/                                                                                 
                    | |                                                                                             
                    |_|                        
   ____                      _____                          
  / __ \                    / ____|                         
 | |  | |_ __   ___ _ __   | (___   ___  _   _ _ __ ___ ___ 
 | |  | | '_ \ / _ \ '_ \   \___ \ / _ \| | | | '__/ __/ _ \
 | |__| | |_) |  __/ | | |  ____) | (_) | |_| | | | (_|  __/
  \____/| .__/ \___|_| |_| |_____/ \___/ \__,_|_|  \___\___|
  ______| |            _          ______    _ _ _           
 |  ____|_|           | |        |  ____|  | (_) |          
 | |__ _ __ ___  ___  | |_ ___   | |__   __| |_| |_         
 |  __| '__/ _ \/ _ \ | __/ _ \  |  __| / _` | | __|        
 | |  | | |  __/  __/ | || (_) | | |___| (_| | | |_         
 |_|  |_|  \___|\___|  \__\___/  |______\__,_|_|\__|
                                                                                                                    
VIBRATION-25% 
X-70% 
Y-70% 
ADS-40% 
1x-40% 
4x-70%
DEADZONE L-10%
DEADZONE R-10% 
                                                                               

define FIRE_BTN             = PS4_R2;
define ADS_BTN              = PS4_L2;
define SPRINT_BTN           = PS4_L3;
define PRONE_BTN            = PS4_CIRCLE;
define JUMP_BTN             = PS4_CROSS;
define SWITCHWEAPON_BTN     = PS4_TRIANGLE;
define RELOAD_BTN           = PS4_SQUARE;
define MELEE_BTN            = PS4_R3;
define TACTICAL_BTN         = PS4_L1;
define GRANADE_BTN          = PS4_R1;
define UP                   = PS4_UP;
define RIGHT                = PS4_RIGHT;
define DOWN                 = PS4_DOWN;
define LEFT                 = PS4_LEFT;
define RX                   = PS4_RX;
define RY                   = PS4_RY;
define LX                   = PS4_LX;
define LY                   = PS4_LY;
//-------------------------------------------------------------------------------------------
define Blue       =  1;  
define Red        =  2;  
define Green      =  3;  
define Pink       =  4;  
define SkyBlue    =  5;  
define Yellow     =  6;  
define White      =  7;  
define ColorOFF   =  8;  
//--------------------------------------
int RF_hold;
int RF_release;
data(1,// begin of data segment-------- 
  2,0,0,0, //1. Blue     
  0,2,0,0, //2. Red      
  0,0,2,0, //3. Green    
  0,0,0,2, //4. Pink     
  2,0,2,0, //5. SkyBlue 
  0,2,2,0, //6. Yellow   
  2,2,2,2, //7. White    
  0,0,0,0  //8. Color OFF 
); // end of data segment--------------  
// Refresh OLED              
    int display_title = TRUE;
    int display_black;      
    int refresh_OLED;        
    int ModMenu;    
    int ModEdit;   
    int display_EDIT;   
////////////////////////////////////// 
/////////////////////////////////////// 
int count_black;                      
int need_to_be_save;                 
int BlinckColor = 3;                 
int Col_ind;                         
    //const string TITLE = "My Game"; // 18 char max 
    const string TITLE = " My Script "; // 11 char max 
    const string OFF = "OFF";    
    const string ON  = "ON";   
// Index to find Mod Name string - switchable in game with left/right in ModMenu
    int modName_idx;                                                          
// modName # of the last Mod Name string - Used for cycle modName_idx        
   define MAX_MODS_COUNT = 0;                          
// Mod Name      -   Text to Display
  const string RAPIDFIRE       = "Rapid Fire" ; 
//   Toggles L
  int rapidfire_onoff        = FALSE ; 
// Mod VALUES      -   Text to Display
const string RAPIDFIRE_HOLD      = "RF Hold";
const string RAPIDFIRE_RELEASE      = "RF Release" ;
// Index to find Value Name string - switchable in game with left/right in ModEdit
    int valName_idx;                  
                                      
    define AMOUNT_OF_VALNAME_IDX = 1; 
// Constant bytes - Convert numbers array - ASCII_NUM[column number] 
    const int8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
      {48,49,50,51,52,53,54,55,56,57};                
                                                   
// Variables for function number_to_string()  
    int s;                            
    int c,c_val;                  
const string NO_EDIT_VAR1  = "No Edit Variables";//  17 
const string NO_EDIT_VAR2  = "for this MOD";// 12       
const byte Options [] = {
  1 // RAPIDFIRE       # 1
};
const byte OptRange [][] = {
  { 0 , 1 }  // RAPIDFIRE       # 1
};
const byte Min_Max_Options [][]={ 
  { 0 , 1 }  // RAPIDFIRE       # 1
}; 
/////////////////////////////////////////////////////////////////////////////  
///   INITIALIZATION BLOCK                                                      
/////////////////////////////////////////////////////////////////////////////   
init {  
rapidfire_onoff        = get_pvar(SPVAR_1,0,1,0); 
RF_hold            = get_pvar(SPVAR_2, 1,1000, 20);
RF_release         = get_pvar(SPVAR_3, 1,1000, 30);
}// end of init block
///////////////////////////////////////////////////////////////////////////// 
///   MAIN BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
main {//---------------------------------
                                  
   /////////////////////////////////////////
   if(display_EDIT){                
    	 // Clear OLED screen         
       cls_oled(0);                        
       // display_edit(f_idx, f_string, f_print, f_val) 
		if(Options[ modName_idx ] == 0 ){  
			  //--- print label                
		    line_oled(1,45,127,45,1,0);    
		    printf( center_x( 17, OLED_FONT_SMALL_WIDTH ), 20, OLED_FONT_SMALL, 1, NO_EDIT_VAR1[0] ); 
		    printf( center_x( 12, OLED_FONT_SMALL_WIDTH ), 33, OLED_FONT_SMALL, 1, NO_EDIT_VAR2[0] ); 
		}                                                                                            
		else {//----  ELSE BEGIN --------------  
             /////////////////////////////////////////////
             if(valName_idx == 0){ 
                  display_edit(center_x(sizeof(RAPIDFIRE_HOLD        )- 1,OLED_FONT_MEDIUM_WIDTH),RAPIDFIRE_HOLD        [0],RF_hold[0]);
                  RF_hold = edit_val(RF_hold,1,1000 );
             }         
             /////////////////////////////////////////////
             if(valName_idx == 1){ 
                  display_edit(center_x(sizeof(RAPIDFIRE_RELEASE     )- 1,OLED_FONT_MEDIUM_WIDTH),RAPIDFIRE_RELEASE     [0],RF_release[0]);
                  RF_release = edit_val(RF_release,1,1000 );
             }         
		 }//--- ELSE END   ----------- 
   }//  end of display edit  
    if(refresh_OLED)
    { 
        // Clear OLED screen 
        cls_oled(0);       
                           
        line_oled(1,25,127,25,1,1); 
        rect_oled(0, 0,OLED_WIDTH,64,FALSE,1); 
         // Display Value Name and value  
         // Mods that can have different values depending the active Profile 
                                                                                       
         //display_edit( corresponding valName_idx , center_x(sizeof(corresponding_string_to_display) - 1, MEDIUM) , corresponding_string_to_display[0] , val_I_want_to_be_displayed[0] ); 
        // Display Mod Name and togle status  : ON/OFF   
        //display_mod( corresponding modName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , toggle_I_want_to_be_displayed[profile]);
        if(modName_idx == 0)display_mod(0, center_x(sizeof(RAPIDFIRE      )- 1, OLED_FONT_MEDIUM_WIDTH) ,RAPIDFIRE      [0],rapidfire_onoff       ,1);
              
         refresh_OLED = FALSE; 
    } 
     if(display_title){           
          // clear OLED screen    
    	     cls_oled(0);            
    	     printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),13,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]);
	         //printf(center_x(sizeof(TITLE) - 1, OLED_FONT_SMALL_WIDTH),13,OLED_FONT_SMALL,OLED_WHITE,TITLE[0]);
           // screen saver          
	         ModMenu = FALSE;   
           display_title = FALSE;  
           display_black = TRUE;
                                   
    }                            
      
    //-----------------------------
    // Screen saver (OLED off)   
    if(display_black )         
    {                            
        count_black += get_rtime();
        if(count_black >= 5000)   
        {                        
            cls_oled(0);         
            count_black = 0;      
            display_black = FALSE; 
        }                         
    }                           
                                
   /////////////////////////////////////////////////////////
   // MENU EDIT VALUES             
   if(ModEdit){ 
        block_all_inputs(); 
       //--- Exit from EDIT MENU  
       if(event_release(PS4_CIRCLE)){
             ModEdit      = FALSE;           
             display_EDIT = FALSE;           
             ModMenu      = TRUE;            
             refresh_OLED = TRUE;   // display MODS 
       }                    
        ////////////////////////////////////////////////////////////////////////////////  
        //  GO FORWARD                                                                      
        if(!get_val(PS4_L2) && event_press(PS4_DOWN)){            
                                          
        	   valName_idx ++;                 
        	   if(valName_idx > OptRange[ modName_idx ][ 1 ])  valName_idx = OptRange[ modName_idx ][ 1 ]; 
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }          
        ///////////////////////////////////////////////////////////////////////////////  
        //  GO BACK                                                                      
        if(!get_val(PS4_L2) && event_press(PS4_UP)){  
                                                               
        	   valName_idx --;                                      
        	   if(valName_idx < OptRange[ modName_idx ][ 0 ]) valName_idx = OptRange[ modName_idx ][ 0 ];
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }                                                           
            /////////////////////////////////////////////////////// 
   }// end of EDIT MENU    
   /////////////////////////////////////////////////////////
   // EDIT MENU ON/OFF            
   if(get_val(PS4_L2) && event_press(PS4_OPTIONS)){  
        ModMenu = TRUE;  
        // toggle EditMenu ON/OFF                      
                 modName_idx  = 0;                   
                 refresh_OLED = TRUE;   // display Title    
                 display_EDIT = FALSE;        
   }      
   /////////////////////////////////////////////////////////
   // MENU SYSTEM              
   if(ModMenu){  
        block_all_inputs(); 
      //--- Exit from MENU  
      if(event_press(PS4_CIRCLE)){
          ModMenu = FALSE;                     
          ModEdit = FALSE;              
          combo_run(MESSAGE);             
      }                    
      //--- Enter in EDIT MENU 
      if(event_press(PS4_CROSS)){
          ModMenu     = FALSE;   
          valName_idx = OptRange[ modName_idx ][ 0 ]; 
          ModEdit     = TRUE;   
          display_EDIT= TRUE; 
      }                    
                                  
        //Display MOD NAME and togle status 
        // Switch MODs                     
        if( !get_val(PS4_L2) && event_press(PS4_DOWN)){ 
                                          
        	   modName_idx ++;                 
        	   if(modName_idx > 0) modName_idx = 0; 
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( rapidfire_onoff       );   
        	}                                    
          /////////////////////////////////////
        }                          
        if(!get_val(PS4_L2) && event_press(PS4_UP)){  
                                                               
        	  modName_idx --;                                      
        	  if(modName_idx < 0) modName_idx = 0;
          //////////////////////////////////////
        	if(modName_idx == 0 ) { 
        		  blinck( rapidfire_onoff       );   
        	}                                    
          /////////////////////////////////////
          }                        
        	//////////////////////////
                                  
                                  
        // screen saver           
        display_black = FALSE;    
        display_title = FALSE;    
        //////////////////////////////  
        // display mod name and Toggle ON/OFF | Scroll Options 
        if(!get_val(PS4_L2) ){    
             if(event_press(PS4_RIGHT)){ //   go back
                                                  
        	    if(modName_idx == 0 ) { 
                      rapidfire_onoff = f_go_back( rapidfire_onoff ); 
        	    }                                 
                                            
             }// go back 
             if(event_press(PS4_LEFT)){//   go forward
                                                  
        	    if(modName_idx == 0 ) { 
                      rapidfire_onoff = f_go_forward( rapidfire_onoff);   
        	    }                                 
                                            
             }// go forward 
       } 
       refresh_OLED = TRUE;   
       set_val(PS4_DOWN,0); 
       set_val(PS4_UP,0); 
       set_val(PS4_RIGHT,0); 
    } 
    /////////////////////////////////////////////////////////////
    ///    END OF MENU  /////////////////////////////////////////
    /////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////  
    // RAPID FIRE                              
    if(get_ival(PS4_L2) && event_press(PS4_UP)){   
         rapidfire_onoff = !rapidfire_onoff;          
         set_rumble_tipe(rapidfire_onoff); 
    }               
    if(rapidfire_onoff ) { 
       /////////////////////////////////////////
         if(get_val(FIRE_BTN)) {
              combo_run(RAPID_FIRE_cmb);         
         }                                       
       ///////////////////////////////////////// 
    }                                   
                                         
} //  end of main block 
///////////////////////////////////////////////////////////////////////////// 
///   COMBO BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
                       
int exit_wait = 1500;
combo EXIT {     
	wait(exit_wait);     
	cls_oled(0);    
	ModMenu = FALSE;  
	ModEdit = FALSE;    
	display_EDIT = FALSE; 
	display_title = TRUE; 
}                      
int LED_OnOff;       
int rumble_tipe = RUMBLE_A;
       
//=============================================== 
//            LED BLINK                           
//=============================================== 
combo LED_BLINK {                                 
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                            
	wait(100);                                      
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                             
	wait(100);                                      
}                                                 
//=============================================== 
//                 VIBRATE SET_UP                 
//=============================================== 
combo vibrate {                                   
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
}                                                 
//===============================================  
//                 RUMBLE_TIPE                     
//===============================================  
function set_rumble_tipe ( val) {                  
	if( val){ rumble_tipe = RUMBLE_A ; LED_OnOff = Green;}  
	else    { rumble_tipe = RUMBLE_B ; LED_OnOff = Red  ;} 
	combo_run(vibrate);                     
	combo_run(LED_BLINK);                   
}                                         
  int b_dblclick;int dblclick_msecs;  
	int dblclick_count;                 
	//int onoff = FALSE;                 
	define time_to_dblclick  = 300;// time in ms for second click to occur 
function double_click (button) {                      
    if (b_dblclick) {                                 
        dblclick_msecs = dblclick_msecs + get_rtime();
        if ( dblclick_msecs > time_to_dblclick ) {    
            dblclick_count = 0;                       
            dblclick_msecs = 0;                       
            b_dblclick = FALSE;                       
        }                                             
    }                                                 
    if (event_release(button) && get_ptime(button) < 250) { 
        if (dblclick_count == 0) {                    
            b_dblclick = TRUE;                        
        } else if (dblclick_count == 1) {             
            dblclick_count = 0;                       
          return 1;                                   
        }                                              
        dblclick_count = dblclick_count + 1;          
    }                                                 
                                                     
    return 0;                                        
}           
function f_go_forward (f_variable) {
    f_variable       +=1;   
    if(f_variable  > Min_Max_Options[modName_idx][1] )f_variable  = Min_Max_Options[modName_idx][1]; // max option
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

function f_go_back (f_variable) {
    f_variable       -=1;   
    if(f_variable  < Min_Max_Options[modName_idx][0] )f_variable  = Min_Max_Options[modName_idx][0]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}
combo RAPID_FIRE_cmb { 
  set_val(FIRE_BTN, 100);
  wait(RF_hold);
  set_val(FIRE_BTN,   0);
  wait(RF_release); 
} 
define FONT_STATS_INDEX_WIDTH    = 0; 
define FONT_STATS_INDEX_HEIGHT   = 1; 
define FONT_STATS_INDEX_MAXCHARS = 2; 
                                      
                                      
//////////////////////////////////////////////////////////////// 
function horizontal_center_offset(number_characters, font_size) { 
    return (128 - number_characters * FONT_STATS[font_size][FONT_STATS_INDEX_WIDTH]) / 2;
}             
              
const string EXIT_TXT1 = "SETTINGS";  
const string EXIT_TXT2 = "WAS SAVED"; 
                                     
////////////////////////////////////////////////////////////////////////////// 
///  SAVE  
function save_toggles () {  
                    
     set_pvar(SPVAR_1,rapidfire_onoff       ); 
     set_pvar(SPVAR_2,RF_hold); 
     set_pvar(SPVAR_3,RF_release); 
    combo_run(EXIT);                  
      
}// end of save   
                      
combo MESSAGE {       
    wait(20);         
    save_toggles ();  
    cls_oled(0);      
    printf(horizontal_center_offset(sizeof(EXIT_TXT1), OLED_FONT_MEDIUM ), 2, OLED_FONT_MEDIUM, 1, EXIT_TXT1[0]); 
    printf(horizontal_center_offset(sizeof(EXIT_TXT2), OLED_FONT_MEDIUM ), 23, OLED_FONT_MEDIUM, 1, EXIT_TXT2[0]);
    exit_wait = 2000;     
}                        
function blinck ( var){  
	if(var){               
		BlinckColor = Green;
	}else{                 
		BlinckColor = Red;    
	}                       
	combo_run(BLINK_NOTIFY); 
}                           
                            
combo BLINK_NOTIFY {        
	colourled(BlinckColor);   
	wait(300);                 
	colourled(ColorOFF);        
	wait(100);                  
	colourled(BlinckColor);      
	wait(300);                   
	colourled(ColorOFF);          
}                                
                                
const uint8 FONT_STATS[][] = {  
    {  7, 10, 18 }, // Small    
    { 11, 18, 11 }, // Medium   
    { 16, 26,  7 }  // Large    
};                              
                                
function display_edit( f_string, f_print, f_val) {
    printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);  
    number_to_string(f_val, find_digits(f_val));     
}                                                  
function number_to_string(f_val,f_digits) {                  
/*********************************************************** 
 *  number_to_string(value to convert, # of digits in value) 
 *                                                           
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767) 
 *                                                      
 *      Convert digits to ASCII                         
 *      Add ASCII character to print buffer            
 *      Print string centered X & Y on OLED             
*                                                       
***********************************************************/
    s = 1;  c_val = 10000;                            
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(s,45);    //--add leading "-"      
         s += 1;                                      
         f_val = abs(f_val);                          
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(f_digits >= c)                             
        {                                             
            putc_oled(s,ASCII_NUM[f_val / c_val]);    
            f_val = f_val % c_val;                    
            s +=  1;                                  
            if(c == 4)                               
            {                                         
                putc_oled(s,44);   //--add ","        
                s += 1;                               
            }                                        
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(center_x(s - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,s - 1,OLED_WHITE); // adjustable value centered in X 
}                                                     
int n_str_;                  
int horiz_X_center_sufix;    
                             
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) { 
                                                      
    n_str_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(n_str_,45);    //--add leading "-" 
         n_str_ += 1;                                 
         f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c = 5; c >= 1; c--)                           
    {                                                 
        if(f_digits >= c)                             
        {                                              
            putc_oled(n_str_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_WHITE); // adjustable value centered in X
}                                                     
                                                      
function edit_val( f_val, f_min, f_max ) {  // antirecoil = edit_val( 0 , antirecoil, 99  , 99  ) 
    line_oled(1,18,127,18,1,1);                                        
    // print the range values                                          
    // on the left: min value                                          
    print_number(f_min ,find_digits(f_min) ,4 , 22 , OLED_FONT_SMALL); 
    // on the right: max value                                         
    print_number(f_max ,find_digits(f_max) ,97 , 22 , OLED_FONT_SMALL);
                                          
    if(get_val(PS4_L2)){                  
		if(press_hold(PS4_RIGHT)){            
			f_val ++;                           
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_LEFT)){             
			f_val --;                           
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
		if(press_hold(PS4_UP)){               
			f_val +=10;                         
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_DOWN)){             
			f_val -=10;                         
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
	}                                      
    return f_val;                        
}                                        
                                             
                                   
function press_hold(f_btn) {       
//  return TRUE - event_press()    
//- every 250ms when button is held 
	  return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}               
                
function find_digits(f_num) {                         
//  find_digits(value)                                
//        return Number of Digits in Value Passed     
                                                      
    f_num = abs(f_num);                               
    if(f_num / 10000 > 0) return 5;                   
    if(f_num /  1000 > 0) return 4;                   
    if(f_num /   100 > 0) return 3;                   
    if(f_num /    10 > 0) return 2;                   
                          return 1;                  
}                                                     
///////////////////////////////////////////////
//  FUNCTIONS                                 
                                              
function center_x(f_chars,f_font) {           
//  center_x(number of chars,font size);     
//        return X for Centering String Horizontally 
                                                      
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}                                                      
                                                       
function display_mod(f_idx, f_string, mod_name, f_toggle, f_option) {   
        // Display MOD_NAME                                    
        printf(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, mod_name); 
        if(f_option == 1)                              
        {                                                     
        // Display Disable / Enable                                 
            if(f_toggle == 1)                                                             
                printf(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);// Enable 
            else                                                                                               
                printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);// Disable 
        }            
}                    
                      
// COLOR LED function        
//-------------------------------------------------------------- 
                                       
function colourled(Colour) {         
	Col_ind=(Colour*4)- 3;             
	set_led(LED_1,duint8(Col_ind  ));   
	set_led(LED_2,duint8(Col_ind+ 1));  
	set_led(LED_3,duint8(Col_ind+ 2));  
	set_led(LED_4,duint8(Col_ind+ 3));  
}


main {
 
    if(get_val(PS4_L2) && get_val(PS4_R2)) {
        combo_run(AK_RECOIL);     
    } else {                    
        combo_stop(AK_RECOIL);    
    }
 
}

combo AK_RECOIL {





set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY ,  58);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);




set_val(PS4_RX ,  0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


set_val(PS4_RX , 0);
set_val(PS4_RY , 78);
wait(70);
wait(70);
set_val(PS4_RX , 0);
set_val(PS4_RY , 0);


wait(5000)
}
main{
     deadzone(PS4_L2,PS4_R2,99,99);

    

}
main{
    if(get_ival(PS4_L2) > 1)
    set_val(PS4_L2, 100);

    if(get_ival(PS4_R2) > 1)
    set_val(PS4_R2, 100);

   } 