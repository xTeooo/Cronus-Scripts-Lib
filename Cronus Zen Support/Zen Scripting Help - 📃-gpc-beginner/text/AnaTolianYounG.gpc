const uint8 LayoutsMK[] = {0x4,0x5,0x6,0x7,0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,0x80,0x81,0x85,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x90,0x91,0x92,0x93,0x94,0xB6,0xB7,0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB}
int bitindex, varindex,i;
int KBStates_Press[8];
int KBStates_Release[8];

const string Title = "AnaTolianYounG";
const string Mods [] = { "AR" , "RF" ,"AA"}; 
const string State[] = { "OFF","ON"};						

const uint8 Size[] ={3,2};

////// Recoil /////////////
int TaylorLegacyV1        ;  
int TaylorARVert    =   20;
int TaylorARHoriz   =   -2;
int DeadZone        =    7;
int Inverted        =    1;
////// Recoil /////////////

//RAPID FIRE //
define Fire = PS4_R2;
define Ads  = PS4_L2;
define On  = TRUE;
define Off = FALSE;
define RapidFireHold = 30;
define RapidFireWait = 30;
int	   RapidFire   		;
define RapidFireHip = On;
//RAPID FIRE //



/*/////AIM ASSIST/////////////////////////////////////
.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~.
(                    In Game Buttons                 )
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-*
*/
define AimX     = PS4_RX;
define AimY     = PS4_RY;

/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                Mod Values/Times                    ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
define FallOffAARY   = 20; //Aim Asist deÄŸerleri deÄŸiÅŸtirerek en uygun olanÄ±nÄ± bul
define FallOffAARX   = 20;
define FallOffAAWait = 10;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                   Mod Toggles                      ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 
int	   FallOffAssist 	 ;
define FallOffAAHip  = On;
/*
 .~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. 
(                       Main                         ) 
 `-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-* 
*/ 






init {
cls_oled(0);// Clears the oled screen once.

// Prints the strings once.
print(center_x(sizeof(Title) - 1,OLED_FONT_SMALL_WIDTH,2),2,OLED_FONT_SMALL,OLED_WHITE,Title[0]);
print(center_x(2,OLED_FONT_MEDIUM_WIDTH,1)- 8,16,OLED_FONT_MEDIUM,OLED_WHITE,Mods[0]); 
print(center_x(2,OLED_FONT_MEDIUM_WIDTH,2),16,OLED_FONT_MEDIUM,OLED_WHITE,Mods[1]); 
print(center_x(2,OLED_FONT_MEDIUM_WIDTH,3)+ 8,16,OLED_FONT_MEDIUM,OLED_WHITE,Mods[2]);
print(center_x(3,OLED_FONT_SMALL_WIDTH,1)- 8,42,OLED_FONT_SMALL,OLED_WHITE,State[0]); 
print(center_x(3,OLED_FONT_SMALL_WIDTH,2),42,OLED_FONT_SMALL,OLED_WHITE,State[0]); 
print(center_x(3,OLED_FONT_SMALL_WIDTH,3) + 8,42,OLED_FONT_SMALL,OLED_WHITE,State[0])

// Draws the menu once.
rect_oled(0, 0,  127, 63, 0, 1);
line_oled(0, 14, 127, 14, 1, 1);
line_oled(0, 34, 127, 34, 1, 1);
line_oled(0, 14, 127, 14, 1, 1);
line_oled(43, 14, 43, 63, 1, 1);
line_oled(83, 14, 83, 63, 1, 1);


for (i = 0; i < 8; i++) {
        KBStates_Release[i] = -1; 
    }
 }




main {

refresh_kb_states();

	
	if(isqrt(pow(get_ival(PS4_RY), 2) + pow(get_ival(PS4_RX), 2)) <= DeadZone){
		set_val(PS4_RY, 0);
		set_val(PS4_RX, 0);
	}
	
	if(event_press_kb(KEY_F1)){
		TaylorLegacyV1 = !TaylorLegacyV1; // Toggles Anti Recoil On and Off    
		rect_oled(2,  36, 40, 25, 1, TaylorLegacyV1); // Draws the Rectangle for the on and off
		print(center_x(Size[TaylorLegacyV1],OLED_FONT_SMALL_WIDTH,1) - 8 ,42,OLED_FONT_SMALL,!TaylorLegacyV1,State[TaylorLegacyV1]); // Prints on or off
		
	}
	
	if(event_press_kb(KEY_F2)){
		RapidFire = !RapidFire;   // Toggles Rapid Fire On and Off  
		rect_oled(45,  36, 37, 25, 1, RapidFire); // Draws the Rectangle for the on and off
		print(center_x(Size[RapidFire],OLED_FONT_SMALL_WIDTH,2),42,OLED_FONT_SMALL,!RapidFire,State[RapidFire]);  // Prints on or off
	}
		
	if(event_press_kb(KEY_F3)){
		FallOffAssist = !FallOffAssist;  // Toggles Aim Assist On and Off   
		rect_oled(85,  36, 40, 25, 1, FallOffAssist); // Draws the Rectangle for the on and off
		print(center_x(Size[FallOffAssist],OLED_FONT_SMALL_WIDTH,3) + 8 ,42,OLED_FONT_SMALL,!FallOffAssist,State[FallOffAssist]); // Prints on or off
	}

//PASTE OTHER MODS THAT YOU ALWAYS WANT TO BE ON HERE
















////// Recoil /////////////////// Recoil /////////////
 
    if(TaylorLegacyV1)
    {
        if(get_ival(PS4_L2) && get_ival(PS4_R2))
        {
            if(isqrt(pow(get_ival(PS4_RY), 2) + pow(get_ival(PS4_RX), 2)) > DeadZone)
            {
                Set_Val(PS4_RY, ((TaylorARVert - (DeadZone * Inverted))));
                Set_Val(PS4_RX, TaylorARHoriz);
            }

            if(isqrt(pow(get_ival(PS4_RY), 2) + pow(get_ival(PS4_RX), 2)) < DeadZone)
            {
                Set_Val(PS4_RY, (TaylorARVert ) - get_val(PS4_RY) * Inverted);
                Set_Val(PS4_RX, TaylorARHoriz);
            }
        }
    }
    ////// Recoil /////////////////// Recoil /////////////






////// RAPID FIRE /////////////////// RAPID FIRE /////////////
  if (RapidFire) {
    
        if (RapidFireHip) {
            
            if (get_ival(Fire)) {
        
                combo_run(RapidFire);
        
            } 
        
        } else if (get_ival(Ads) && get_ival(Fire)) {
        
            combo_run(RapidFire);    
            
        } else {
            
            combo_stop(RapidFire);
        }
    }

////// RAPID FIRE /////////////////// RAPID FIRE /////////////






////// AIM ASSIST /////////////////// AIM ASSIST /////////////
	
	if (FallOffAssist) {
	    
	        if (get_ival(Ads) || (FallOffAAHip && get_ival(Fire))) {
	        
	            combo_run(FallOffAssist);
	        
	        } else {
	        
	            combo_stop(FallOffAssist); 
	        }
	    }
	
////// AIM ASSIST /////////////////// AIM ASSIST /////////////




}
function set_Val(Input,Output) {

    set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        
    return; 
}

function Set_Val(Stick, Value) {
    set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
        return;
}

combo RapidFire {

    set_val(Fire,100);
    wait(RapidFireHold);
    set_val(Fire,0);
    wait(RapidFireWait);
}

combo FallOffAssist {
   
   set_Val(AimY,inv(FallOffAARY));
   wait(FallOffAAWait);
   set_Val(AimX,FallOffAARX);
   wait(FallOffAAWait);
   set_Val(AimY,FallOffAARY);
   wait(FallOffAAWait);
   set_Val(AimX,inv(FallOffAARX));
   wait(FallOffAAWait);
} 




function refresh_kb_states() {
    bitindex = 0;
    varindex=0;
    for (i = 0; i < sizeof(LayoutsMK); i++) {
        if (bitindex >= 32) {
            bitindex = 0;
            varindex++;
        }
        if (get_keyboard(i)) {
            if (!test_bit(KBStates_Press[varindex], bitindex)) {
               KBStates_Press[varindex] = custom_set_bit(KBStates_Press[varindex], bitindex);
            }
            else {
                KBStates_Release[varindex] = custom_clear_bit(KBStates_Release[varindex], bitindex);
            }
        }
        else {
            if (!test_bit(KBStates_Release[varindex], bitindex)) {
               KBStates_Release[varindex] = custom_set_bit(KBStates_Release[varindex], bitindex);
            }
            else {
               KBStates_Press[varindex] = custom_clear_bit(KBStates_Press[varindex], bitindex);
            }
        }        
     bitindex++;
  }
}

function event_press_kb(btn) {
    bitindex = btn % 32;
    varindex = btn / 32;
    return get_keyboard(btn) && test_bit(KBStates_Release[varindex], bitindex);
}

function event_release_kb(btn) {
    bitindex = btn % 32;
    varindex = btn / 32;
    return !get_keyboard(btn) && test_bit(KBStates_Press[varindex], bitindex);
}

function custom_set_bit(value, bitindex) {
  return value | (1 << bitindex);
}
function custom_clear_bit(value, bitindex) {
  return value & (~(1 << bitindex));
}

function center_x(f_chars,f_font,f_location) {

    return (32 * f_location) - ((f_chars * f_font) / 2);
}
 ú¸‹»‹ºŽ¹Ž½‰¸Ž¸Ž¸