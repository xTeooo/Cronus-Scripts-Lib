const byte picture[] = {117, 54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x03, 0x07, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x3C, 0x7F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xC1, 0xE3, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x1F, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xF0, 0xF8, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x0F, 0x87, 0xC7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x7C, 0x7E, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x83, 0xE3, 0xF1, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x1F, 0x0F, 0x8F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0xF8, 0x3C, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x07, 0xC1, 0xE3, 0xC0, 0x00, 0x07, 0x0E, 0x1C, 0x18, 0x18, 0x0F, 0xF0, 0x38, 0x70, 0xF8, 0x3E, 0x0F, 0x1F, 0xFE, 0x00, 0x7E, 0xF1, 0xF3, 0xE3, 0xE0, 0xFF, 0xC3, 0xE7, 0xC7, 0xC1, 0xF0, 0x78, 0xFF, 0xF8, 0x07, 0xFF, 0x8F, 0xFF, 0xFF, 0x8F, 0xFF, 0x1F, 0xFE, 0x3E, 0x0F, 0x83, 0xC7, 0xFF, 0xE0, 0x3F, 0xFC, 0x7F, 0xFF, 0xFC, 0x7F, 0xF8, 0xFF, 0xF9, 0xF0, 0x7C, 0x1E, 0x3F, 0xFF, 0x01, 0xFF, 0xE3, 0xFF, 0xFF, 0xE0, 0xFF, 0xC7, 0xFF, 0xCF, 0x83, 0xE0, 0xF0, 0x7F, 0xF8, 0x0F, 0x1F, 0x1F, 0xDF, 0x9F, 0x00, 0x1E, 0x3F, 0xBE, 0x7C, 0x1F, 0x07, 0x80, 0x03, 0xC0, 0x78, 0x78, 0xF0, 0xF8, 0xF8, 0x00, 0xF1, 0xE1, 0xF3, 0xE0, 0xF8, 0x3C, 0x00, 0x1E, 0x03, 0xC3, 0xC7, 0x87, 0xC7, 0xC3, 0xFF, 0x8F, 0x0F, 0x9F, 0x07, 0xC1, 0xE0, 0x00, 0xF0, 0x1E, 0x1E, 0x3C, 0x3E, 0x3E, 0x3F, 0xFC, 0x78, 0x7C, 0xF8, 0x3E, 0x0F, 0x00, 0x07, 0x80, 0xF0, 0xF1, 0xE1, 0xF1, 0xF1, 0xFF, 0xE3, 0xC3, 0xE7, 0xC1, 0xF0, 0x78, 0x00, 0x3C, 0x07, 0x87, 0x8F, 0x0F, 0x8F, 0x8F, 0x0F, 0x1E, 0x1F, 0x3E, 0x0F, 0x83, 0xC7, 0x81, 0xE0, 0x3C, 0x3C, 0x78, 0x7C, 0x7C, 0x78, 0x78, 0xF0, 0xF9, 0xF0, 0x7C, 0x1E, 0x3C, 0x0F, 0x01, 0xE1, 0xE3, 0xC3, 0xE3, 0xE3, 0xC3, 0xC7, 0x87, 0xCF, 0x83, 0xE0, 0xF1, 0xE0, 0x78, 0x0F, 0x0F, 0x1E, 0x1F, 0x1F, 0x1E, 0x1E, 0x3C, 0x3E, 0x7C, 0x1F, 0x07, 0x8F, 0x07, 0xC0, 0x7F, 0xF8, 0xF0, 0xF8, 0xF8, 0xFF, 0xF1, 0xE1, 0xF1, 0xFF, 0xF8, 0x3C, 0x7F, 0xFE, 0x03, 0xFF, 0xC7, 0x87, 0xC7, 0xC7, 0xFF, 0x8F, 0x0F, 0x8F, 0xFF, 0xC1, 0xE3, 0xFF, 0xF0, 0x1F, 0xFE, 0x3C, 0x3E, 0x3E, 0x3F, 0xFC, 0x78, 0x7C, 0x7F, 0xFC, 0x0F, 0x1F, 0xFF, 0x80, 0x7F, 0xF1, 0xE1, 0xF1, 0xF0, 0xF9, 0xE3, 0xC3, 0xE1, 0xFF, 0xE0, 0x78, 0x7F, 0xF8, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

main {
	if (get_val(XB1_A)) {
		draw_picture(0, 0, 0);
	}
	else if (get_val(XB1_B)) {
		draw_picture(0, 0, 1);
	}
	if(event_release(XB1_A))
	{
		cls_oled(0); 
	} 
}
int __pictureWidth, __pictureX, __pictureHeight, __pictureY, __pictureBit, __pictureOffset, __pictureData;
int __pictureX2, __pictureY2;
function draw_picture(x, y, invert) {
	__pictureOffset = 1; // Reset the starting point
	__pictureBit = 0; // Reset bit flag
	__pictureWidth = picture[0]; // Fetch the width of what to draw
	__pictureHeight = picture[1]; // Fetch the height of what to draw
	for (__pictureY = 0; __pictureY < __pictureHeight; __pictureY++) { // Loop the Y axis
		__pictureY2 = y + __pictureY;
		if (__pictureY2 < 0 || __pictureY2 >= 64) {
			__pictureY2 -= 64;
		}
		for (__pictureX = 0; __pictureX < __pictureWidth; __pictureX++) { // Loop the X axis
			if (!__pictureBit) { // Check if we've already handled the last bit
				__pictureBit = 8; // Reset the bit flag
				__pictureOffset++; // Move to the next value
				__pictureData = picture[__pictureOffset]; // Fetch the value
			}
			__pictureBit--; // Decrement the bit flag, we're moving to the next bit
			__pictureX2 = x + __pictureX;
			if (__pictureX2 < 0 || __pictureX2 >= 128) {
				__pictureX2 -= 128;
			}
			if (test_bit(__pictureData, __pictureBit)) {
				pixel_oled(__pictureX2, __pictureY2, !invert);
			}
			else {
				pixel_oled(__pictureX2, __pictureY2, invert);
			}
		}
	}
}