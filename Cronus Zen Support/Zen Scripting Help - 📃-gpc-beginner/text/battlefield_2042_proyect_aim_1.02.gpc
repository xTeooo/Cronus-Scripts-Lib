// GPC Online Library
// battlefield_2042_proyect_aim_1.02.gpc

/* 
                               .'. ''.';,'.',..,.....                            
                          ....,'..;;.',...;;.':,..,. ..                         
                      .. .;c,.;' .:c'.,. '::,;:;..,. ';. ..                     
                   ....,..',..'' .';;:lolool:,,'..,'..,. .,. .                  
              .,,..'..,;'...      ;xkdlcloOKXOo, ... ..  .. .,,.                
              .,'..c,.:c;..'..    .;xK0dl;'cOXWNx',,.'c. .:'.;:' .'             
              ... .,..;;....         ,dKNXd.;kXWWO:'.':'.',..;:..,'.            
           '' ,c;..;..;,..   ...      .';lOx,cOXNNx,';c;.',.':c'.;' ''                               
          .,,......;'.'.     .'...'....   .c:;okOXO'.';'..;..,;..,,..,.         
        '..'. .'. .'.'.      .....''.....   .,::cO0' .' .';'.,;..'. .'.         
      .':'.;:..'...,'        ..  .....      ....:KK; 'c..;c,';:'.;;..:, ''      
      .;;..,..... .'.                       ....cKK: ':'.',..,;..;;..:,..'      
      ,cc'.;'.,c' .,.       .                .':oO0;.;c;..,..::',c:,,::..,.     
      .,,..''.... .,.      ...               ..coOx..',...,..',..,,..,,..,'     
      ... ... ... ''        '.               ...c0d....  ';'.'. .,,'.','...     
    ...;; .::. .. ,'        ..               ...c0d,.,c..;c;.;:.',,,,,;,.;,     
    ...,'..,'.....;,        .'               ...lOo..,c'..;'.';.........';...   
   .'..,' .;'.,c;.':,.      .'.               .,cdo..;c;..;;,;c;',;'':' .;...   
   .,..,,..,,......',,'.    ..               .,;,o0:.,;' .''..''.';..,. .;,..   
    ''.'. .'. .....;'..,..  ..      ..    .  .',:dl..,.  ':'.'. .;;..;,.':,..   
    ',.;; .::..;,.':;.,,.....     ...   .... .'....lKKx:',c;.;:.'c:,,:;.,c:'    
    ...;;..,.......,..,''.             ........  ..:okKNKko,.,;..,'..,. .,.     
      ,cc'.;'.,:;..;..:,'.      ..    .......   ......,lxKNkc;;..,' .;. .,.     
      .;,..,,..''..,..'...      ,.   .''....    .........';lkKOl.',..,' .,'     
      .;,....  .. .'. .....     '.   .''...    .............:x0Ol'  .'. .,.     
      .,:'.;:. ,. .;'..  ..     '. .......    .....  .........ckkc. .:, ,,      
        . .,.  .. .''.  ..      .. ....      ....    .... .....l0Kk;.:;.        
          .;' .;'...  ...       .. ...       ...    ..     ..  .l0Ko,;;.        
          .,,..'',.   ..        .. ..               .           .l0k;..         
            ......    ..        ..                               .;l'           
             .;c:.    ..        .. ▌│█║▌║▌║ FIRM EXPLOIT YT ║▌║▌║█│▌                                    
              ...      .        ..                                              
                      .        ..                                               
                      .        ..                                                 

▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▜ 
     ______       _     _________  _________  _____     ________  ________  _____  ________  _____     ______    
    |_   _ \     / \   |  _   _  ||  _   _  ||_   _|   |_   __  ||_   __  ||_   _||_   __  ||_   _|   |_   _ `.  
     | |_) |    / _ \  |_/ | | \_||_/ | | \_|  | |       | |_ \_|  | |_ \_|  | |    | |_ \_|  | |       | | `. \ 
     |  __'.   / ___ \     | |        | |      | |   _   |  _| _   |  _|     | |    |  _| _   | |   _   | |  | | 
    _| |__) |_/ /   \ \_  _| |_      _| |_    _| |__/ | _| |__/ | _| |_     _| |_  _| |__/ | _| |__/ | _| |_.' / 
   |_______/|____| |____||_____|    |_____|  |________||________||_____|   |_____||________||________||______.'  
                                                                                                                                                                                                                                 
                                                           
                222222222222222         000000000            444444444   222222222222222                                                                                                                                                                       
                2:::::::::::::::22     00:::::::::00         4::::::::4  2:::::::::::::::22                                                                                                                                                                     
                2::::::222222:::::2  00:::::::::::::00      4:::::::::4  2::::::222222:::::2                                                                                                                                                                    
                2222222     2:::::2 0:::::::000:::::::0    4::::44::::4  2222222     2:::::2                                                                                                                                                                    
                            2:::::2 0::::::0   0::::::0   4::::4 4::::4              2:::::2                                                                                                                                                                    
                            2:::::2 0:::::0     0:::::0  4::::4  4::::4              2:::::2                                                                                                                                                                    
                         2222::::2  0:::::0     0:::::0 4::::4   4::::4           2222::::2                                                                                                                                                                     
                    22222::::::22   0:::::0 000 0:::::04::::444444::::444    22222::::::22                                                                                                                                                                      
                  22::::::::222     0:::::0 000 0:::::04::::::::::::::::4  22::::::::222                                                                                                                                                                        
                 2:::::22222        0:::::0     0:::::04444444444:::::444 2:::::22222                                                                                                                                                                           
                2:::::2             0:::::0     0:::::0          4::::4  2:::::2                                                                                                                                                                                
                2:::::2             0::::::0   0::::::0          4::::4  2:::::2                                                                                                                                                                                
                2:::::2       2222220:::::::000:::::::0          4::::4  2:::::2       222222                                                                                                                                                                   
                2::::::2222222:::::2 00:::::::::::::00         44::::::442::::::2222222:::::2                                                                                                                                                                   
                2::::::::::::::::::2   00:::::::::00           4::::::::42::::::::::::::::::2                                                                                                                                                                   
                22222222222222222222     000000000             444444444422222222222222222222                                                                                                                                                                                           
                                                                                                                                                     
                                                __           _                       ___    ____ ___ 
              ____  _________  __  _____  _____/ /_   ____ _(_)___ ___     _   __   <  /   / __ \__ \
             / __ \/ ___/ __ \/ / / / _ \/ ___/ __/  / __ `/ / __ `__ \   | | / /   / /   / / / /_/ /
            / /_/ / /  / /_/ / /_/ /  __/ /__/ /_   / /_/ / / / / / / /   | |/ /   / /  _/ /_/ / __/ 
           / .___/_/   \____/\__, /\___/\___/\__/   \__,_/_/_/ /_/ /_/    |___/   /_/  (_)____/____/ 
          /_/               /____/                                                                   
▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
███۞███████ ]▄▄▄▄▄▄▄▄▄▄▄▄▃
▂▄▅█████████▅▄▃▂
I███████████████████].
◥⊙▲⊙▲⊙▲⊙▲⊙▲⊙▲⊙◤... 
 
 
░█▀▀▀ ▀▄░▄▀ ░█▀▀█ ░█─── ░█▀▀▀█ ▀█▀ ▀▀█▀▀ 　░█──░█ ▀▀█▀▀ 　  ─█▀▀█ ░█▄─░█ ░█▀▀▄     ▀▀█▀▀ ─█▀▀█ ░█──░█ ░█─── ░█▀▀▀█ ░█▀▀█ ░█▀▀▄ ░█▀▀█ ▀█▀ ░█▀▀▀ ▀▀█▀▀ 
░█▀▀▀ ─░█── ░█▄▄█ ░█─── ░█──░█ ░█─ ─░█── 　░█▄▄▄█ ─░█── 　  ░█▄▄█ ░█░█░█ ░█─░█     ─░█── ░█▄▄█ ░█▄▄▄█ ░█─── ░█──░█ ░█▄▄▀ ░█─░█ ░█▄▄▀ ░█─ ░█▀▀▀ ─░█── 
░█▄▄▄ ▄▀░▀▄ ░█─── ░█▄▄█ ░█▄▄▄█ ▄█▄ ─░█── 　──░█── ─░█── 　  ░█─░█ ░█──▀█ ░█▄▄▀     ─░█── ░█─░█ ──░█── ░█▄▄█ ░█▄▄▄█ ░█─░█ ░█▄▄▀ ░█─░█ ▄█▄ ░█─── ─░█──    


                            ███████████████████████████████████████████████████████████████████████████ 
                            ██									                                     ██						
                            ██             If you have any question add me on discord:               ██
                            ██                                                                       ██
                            ██			                                                             ██
                            ██             -Exploit YT Moderator/Server creator.                     ██	
                            ██	            Discord ----> https://discord.gg/TJcfFFgpj5	             ██
                            ██                                                                       ██
                            ██             -Wizards n Kings GPC Scripts Moderator FPS                ██
                            ██              Discord ----> https://discord.gg/TJcfFFgpj5		         ██
                            ██									                                     ██  
                            ██	       -Vanguard/ModernWarfare/ColdWar ZEN Scripts Moderator         ██	
                            ██	            Discord ----> https://discord.gg/JxaaMJ59vW	             ██	    
                            ██	                                                                     ██	
                            ██	                      or Exploit YT#4891		                     ██ 
                            ██									                                     ██ 
                            ███████████████████████████████████████████████████████████████████████████

                                                  Credits... Batts - DoNotAtMe - DKGE
                                      Thanks to AverageAim for helping me with AR values on xbox.
                        THANKS TO TAYLORDRIFT FOR BEING MY MENTOR AND AND THANKS FOR HELPING ME WITH THE MENU.


---------------------------------------------------ＭＹ ＣＯＮＦＩＧＵＲＡＴＩＯＮ---------------------------------------------------
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜

                                                        - 𝑷𝑳𝑨𝑻𝑭𝑶𝑹𝑴:
                                                        
                                                             𝑷𝑪
                                           
                                                 𝑼𝒔𝒊𝒏𝒈 𝑿𝒃𝒐𝒙 𝑬𝒍𝒊𝒕𝒆 2 𝑪𝒐𝒏𝒕𝒓𝒐𝒍𝒍𝒆𝒓
                                                      
                                                      
                                                       - 𝑷𝑶𝑳𝑨𝑹 𝑨𝑰𝑴:
                                                      
                                                         𝑽𝒐𝒓𝒕𝒆𝒙 𝑶𝒗𝒂𝒍
                                                         𝑹𝒂𝒅𝒊𝒖𝒔 = 15
                                                         𝑺𝒑𝒆𝒆𝒅  = 27


                                                  - 𝑨𝑵𝑻𝑰 𝑹𝑬𝑪𝑶𝑰𝑳 𝑹𝑼𝑴𝑩𝑳𝑬:

                 𝑻𝒉𝒆 𝒗𝒂𝒍𝒖𝒆𝒔 𝒘𝒆𝒓𝒆 𝒎𝒂𝒅𝒆 𝒇𝒐𝒓 𝒂𝒏𝒕𝒊 𝒓𝒆𝒄𝒐𝒊𝒍 𝒓𝒖𝒎𝒃𝒍𝒆, 𝒊𝒇 𝒚𝒐𝒖 𝒄𝒉𝒐𝒐𝒔𝒆 𝒍𝒆𝒈𝒂𝒄𝒚 𝒚𝒐𝒖 𝒎𝒖𝒔𝒕 𝒎𝒐𝒅𝒊𝒇𝒚 𝒂𝒏𝒕𝒊 𝒓𝒆𝒄𝒐𝒊𝒍 𝒗𝒂𝒍𝒖𝒆𝒔.


                                                - 𝑰𝑴𝑷𝑶𝑹𝑻𝑨𝑵𝑻 𝑰𝑵𝑭𝑶𝑹𝑴𝑨𝑻𝑰𝑶𝑵:

                    𝑰𝒇 𝒘𝒆 𝒑𝒍𝒂𝒚 𝒘𝒊𝒕𝒉 𝒂𝒏𝒕𝒊-𝒓𝒆𝒄𝒐𝒊𝒍 𝒓𝒖𝒎𝒃𝒍𝒆, 𝒕𝒉𝒆 𝒗𝒊𝒃𝒓𝒂𝒕𝒊𝒐𝒏 𝒎𝒖𝒔𝒕 𝒃𝒆 𝒂𝒄𝒕𝒊𝒗𝒂𝒕𝒆𝒅 𝒕𝒐 𝒐𝒃𝒕𝒂𝒊𝒏 𝒕𝒉𝒆 𝒃𝒆𝒔𝒕 𝒓𝒆𝒔𝒖𝒍𝒕.

▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
----------------------------------------------------------------------------------------------------------------------------------   



---------------------------------------------------ＣＲＯＮＵＳＺＥＮ ＭＥＮＵ------------------------------------------------------
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜
                               
                                         1. 𝐋𝟐 + 𝐎𝐏𝐓𝐈𝐎𝐍𝐒 𝐓𝐎 𝐎𝐏𝐄𝐍 𝐓𝐇𝐄 𝐙𝐄𝐍 𝐌𝐄𝐍𝐔
                                   
                           2. 𝐏𝐑𝐄𝐒𝐒 𝐓𝐇𝐄 𝐑𝐈𝐆𝐇𝐓 𝐎𝐑 𝐋𝐄𝐅𝐓 𝐀𝐑𝐑𝐎𝐖 𝐓𝐎 𝐍𝐀𝐕𝐈𝐆𝐀𝐓𝐄 𝐓𝐇𝐄 𝐌𝐄𝐍𝐔 𝐀𝐍𝐃 𝐂𝐇𝐎𝐎𝐒𝐄 𝐌𝐎𝐃𝐒

                           3. 𝑷𝑹𝑬𝑺𝑺 𝑻𝑯𝑬 𝑼𝑷 𝑨𝑵𝑫 𝑫𝑶𝑾𝑵 𝑨𝑹𝑹𝑶𝑾𝑺 𝑻𝑶 𝑨𝑪𝑻𝑰𝑽𝑨𝑻𝑬 𝑶𝑹 𝑫𝑬𝑨𝑪𝑻𝑰𝑽𝑨𝑻𝑬 𝑻𝑯𝑬 𝑴𝑶𝑫𝑺

                                        4. 𝐏𝐑𝐄𝐒𝐒 𝐄𝐐𝐔𝐈𝐒 / 𝐀 𝐓𝐎 𝐄𝐍𝐓𝐄𝐑 𝐓𝐇𝐄 𝐕𝐀𝐋𝐔𝐄𝐒 𝐌𝐎𝐃𝐄.
                         
               5. 𝗟𝟮 + 𝐏𝐑𝐄𝐒𝐒 𝐔𝐏 𝐎𝐑 𝐃𝐎𝐖𝐍 𝐀𝐑𝐑𝐎𝐖 𝐓𝐎 𝐂𝐇𝐀𝐍𝐆𝐄 𝐕𝐀𝐋𝐔𝐄𝐒, 𝐀𝐍𝐃 𝐋𝐄𝐅𝐓 𝐀𝐍𝐃 𝐑𝐈𝐆𝐇𝐓 𝐓𝐎 𝐂𝐇𝐀𝐍𝐆𝐄 𝐓𝐎 𝐎𝐓𝐇𝐄𝐑 𝐕𝐀𝐋𝐔𝐄𝐒
             
                                     6. 𝗣𝗥𝗘𝗦𝗦 𝗖𝗜𝗥𝗖𝗟𝗘 𝗧𝗢 𝗘𝗫𝗜𝗧 𝗠𝗘𝗡𝗨𝗭𝗘𝗡 𝗠𝗢𝗗𝗘 𝗔𝗡𝗗 𝗦𝗔𝗩𝗘 𝗖𝗛𝗔𝗡𝗚𝗘𝗦.
                           
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 ! 7. 𝗪𝗛𝗘𝗡 𝗧𝗨𝗥𝗡𝗜𝗡𝗚 𝗧𝗛𝗘 𝗠𝗢𝗗𝗦 𝗢𝗙𝗙 𝗢𝗥 𝗢𝗡 𝗢𝗥 𝗖𝗛𝗔𝗡𝗚𝗜𝗡𝗚 𝗧𝗛𝗘 𝗦𝗘𝗧𝗧𝗜𝗡𝗚𝗦, 𝗪𝗛𝗘𝗡 𝗘𝗫𝗜𝗧𝗜𝗡𝗚 𝗧𝗛𝗘 𝗢𝗟𝗘𝗗 𝗭𝗘𝗡 𝗠𝗢𝗗𝗘, 𝗔𝗟𝗟 𝗧𝗛𝗘 𝗖𝗛𝗔𝗡𝗚𝗘𝗦 𝗪𝗜𝗟𝗟 𝗕𝗘 𝗦𝗔𝗩𝗘𝗗, !
 !      𝗜𝗙 𝗬𝗢𝗨 𝗥𝗘𝗦𝗘𝗧 𝗧𝗛𝗘 𝗖𝗥𝗢𝗡𝗨𝗦𝗭𝗘𝗡 𝗢𝗥 𝗟𝗢𝗔𝗗 𝗧𝗛𝗘 𝗦𝗖𝗥𝗜𝗣𝗧 𝗜𝗡 𝗧𝗛𝗘 𝗭𝗘𝗡 𝗜𝗡 𝗔 𝗡𝗘𝗪 𝗦𝗟𝗢𝗧, 𝗔𝗟𝗟 𝗬𝗢𝗨𝗥 𝗦𝗘𝗧𝗧𝗜𝗡𝗚𝗦 𝗪𝗜𝗟𝗟 𝗕𝗘 𝗘𝗥𝗔𝗦𝗘𝗗.                 !
 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
---------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------ＡＮＴＩ－ＲＥＣＯＩＬ ＰＲＯＦＩＬＥＳ ＭＥＮＵ-----------------------------------------
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜        	
        	
        𝗘𝗻𝘁𝗲𝗿 𝗪𝗲𝗮𝗽𝗼𝗻 𝗠𝗲𝗻𝘂 = 𝗟𝟮 & 𝗦𝗵𝗮𝗿𝗲/𝗩𝗶𝗲𝘄 ( 𝗬𝗼𝘂 𝗰𝗮𝗻 𝘂𝘀𝗲 𝗶𝘁 𝘁𝗼 𝗲𝘅𝗶𝘁 𝘁𝗵𝗲 𝘄𝗲𝗮𝗽𝗼𝗻 𝗺𝗲𝗻𝘂 ) 𝗢𝗥 𝗽𝗿𝗲𝘀𝘀 𝗖𝗶𝗿𝗰𝗹𝗲 𝘁𝗼 𝗴𝗼 𝗯𝗮𝗰𝗸 𝘁𝗼 𝗠𝗮𝗶𝗻 𝗠𝗲𝗻𝘂      

▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
----------------------------------------------------------------------------------------------------------------------------     


---------------------------------------------------------ＯＴＨＥＲＳ-----------------------------------------------------------------------            
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜               
                                                      
                                                      𝗣𝟭 - 𝗣𝟮 ( 𝗣𝗿𝗼𝗳𝗶𝗹𝗲𝘀 ) 

                                             𝗛𝗼𝗹𝗱 𝗦𝗾𝘂𝗮𝗿𝗲 𝘁𝗼 𝗥𝗲𝘀𝗲𝘁 𝘃𝗮𝗹𝘂𝗲𝘀 𝗶𝗻 𝗘𝗱𝗶𝘁 𝗠𝗲𝗻𝘂

  𝘄𝗲 𝗽𝗿𝗲𝘀𝘀 𝗥𝟮 + 𝗱𝗼𝘂𝗯𝗹𝗲 𝗽𝗿𝗲𝘀𝘀 𝗼𝗳 𝘁𝗵𝗲 𝗿𝗶𝗴𝗵𝘁 𝗮𝗿𝗿𝗼𝘄 𝘄𝗲 𝗲𝗻𝘁𝗲𝗿 𝗸𝗶𝗹𝗹𝘀𝘄𝗶𝘁𝗰𝗵 𝗺𝗼𝗱𝗲, 𝗮𝗻𝗱 𝘄𝗵𝗶𝗹𝗲 𝘄𝗲 𝗮𝗿𝗲 𝗶𝗻 𝘁𝗵𝗲 𝗺𝗼𝗱𝗲, 𝘄𝗲 𝗽𝗿𝗲𝘀𝘀 𝘀𝗾𝘂𝗮𝗿𝗲 / 𝘅 𝘁𝗼 𝗲𝘅𝗶𝘁 𝘁𝗵𝗲 𝗸𝗶𝗹𝗹𝘀𝘄𝗶𝘁𝗰𝗵 𝗺𝗼𝗱𝗲

▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
------------------------------------------------------------------------------------------------------------------------------------------    



                                                   ▒█▀▄▀█ ▒█▀▀▀█ ▒█▀▀▄ ▒█▀▀▀█ ▄ 
                                                   ▒█▒█▒█ ▒█░░▒█ ▒█░▒█ ░▀▀▀▄▄ ░ 
                                                   ▒█░░▒█ ▒█▄▄▄█ ▒█▄▄▀ ▒█▄▄▄█ ▀
                                   ------------------------------------------------------------
                                   ▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜
                                                  -𝐀𝐍𝐓𝐈 𝐑𝐄𝐂𝐎𝐈𝐋 𝐖𝐄𝐀𝐏𝐎𝐍 𝐏𝐑𝐎𝐅𝐈𝐋𝐄𝐒                                        
                                                                      
                                         -𝑻𝑨𝒀𝑳𝑶𝑹𝑫𝑹𝑰𝑭𝑻 (𝐑𝐔𝐌𝐁𝐋𝐄 𝐑𝐄𝐂𝐎𝐈𝐋) & (𝐋𝐄𝐆𝐀𝐂𝐘 𝐑𝐄𝐂𝐎𝐈𝐋)     
   
                                                       -𝐀𝐈𝐌 𝐀𝐒𝐒𝐈𝐒𝐓 𝐏𝐎𝐋𝐀𝐑

                                                       -𝐁𝐀𝐓𝐓𝐒 𝐒𝐓𝐈𝐂𝐊𝐘 𝐀𝐈𝐌

                                                       -𝐑𝐀𝐏𝐈𝐃 𝐅𝐈𝐑𝐄            

                                                       -𝐒𝐓𝐑𝐀𝐅𝐄 𝐒𝐇𝐎𝐓

                                                       -𝐇𝐎𝐋𝐃 𝐁𝐑𝐄𝐀𝐓𝐇

                                                       -𝐀𝐃𝐉𝐔𝐒𝐓𝐀𝐁𝐋𝐄 𝐒𝐄𝐍𝐒𝐄𝐒

                                                       -𝐏𝐑𝐎𝐍𝐄 𝐒𝐇𝐎𝐓

                                                       -𝐉𝐔𝐌𝐏 𝐒𝐇𝐎𝐓

                                                       -𝐄𝐀𝐒𝐘 𝐒𝐏𝐑𝐈𝐍𝐓

                                                       -𝐄𝐍𝐄𝐌𝐘 𝐏𝐈𝐍𝐆

                                                       -𝐉𝐎𝐘𝐒𝐓𝐈𝐂𝐊 𝐂𝐀𝐋𝐈𝐁𝐑𝐀𝐓𝐈𝐎𝐍

                                                       -𝐀𝐋𝐋 𝐁𝐔𝐓𝐓𝐎𝐍 𝐋𝐀𝐘𝐋𝐎𝐔𝐓𝐒 
                                  ▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
                                  ------------------------------------------------------------
                                  © EXPLOIT YT FOR CRONUS ZEN, 2019-2021. ALL RIGHTS RESERVED
-----------------------------------------------------------------------------------------------------------------------------------------------*/

const int8 PolarArray[] = { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};//CREATED by EXPLOIT YT

const string MainMenuId[] = {"ModMenu","Weapon Menu","Settings","QuickToggles",""};

const string ModNames[] = {"Choose AR","Polar Aim","Batts StickyAim","Rapid Fire","Strafe Shot","Hold Breath","Sensitivity",
        
"Prone Shot","JumpShot","AutoRun","Enemy Ping","Layout","Block Rumble","Profile Btn","Rsync Btns","Rapid Fire","StrafeShot","Hold Breath","OnTheFlyRecoil",""};

const string ValNames[]  = { "V Strength","H Strength","Choose Shape","Radius","Speed","Sticky Size","Sticky Time","Rounds/Sec","StrafeTime","General","Ads","Fire","AdsFire",""} 

const string Misc[]      = {"On","Off","Primary","Secondary","Custom Profile","All Profiles","Controller","Prim/Sec","< Quick Toggles >","BattleField 2042","Proyect AIM","v1.02","Deactivated",
        
"KillSwitch","Saved","Disables Prim/Sec","Fire Only","Ads + Bumper","Hold Ads Btn","On + SpeedBoost","AA Shape",""};

const string ARToggle[]      = {"Choose AR","Legacy AR","Rumble AR",""} ; 

const string CircularCurve[]   = {"Circular","Tall Oval","Wide Oval","Vortex Oval","Spiral","Helix",""};

const string Profiles[]        = {"Primary","Secondary",""}; 

const string ProfilesEdit[]    = {"P1","P2",""}; 

const string HoldButtons[]     = { "Select","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS","Dpad Down","Dpad Up","Dpad Left","Dpad Right", ""};

const string PressButtons[]    = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const int8   HoldBtns []       = { -1,  PS4_L2  ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 ,PS4_DOWN,PS4_UP,PS4_LEFT,PS4_RIGHT}; 

const int8   PressBtns[]       = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

const string ControllerLayouts[] = { "Default", "Alternative", "Lefty", "Lefty ALT",""};

const uint8  EditableMain []   = { 1,1,1,1};

const uint8  EditableMods []   = { 1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0};

const uint8  ModRange   [][]   = { 
{   0 ,  10 }, 
{   0 ,  0  }, 
{  11 ,  14 }, 
{  15 ,  18 } 
};
const uint8  ValRange  [][]   = {
{   0 ,   1 }, 
{   2 ,   4 }, 
{   5 ,   6 },
{   7 ,   7 }, 
{   8 ,   8 }, 
{   0 ,   0 }, 
{   9 ,  12 }  
};
const uint8 ModToggleRange[][]= { 
{   0 ,   2 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 }, 
{   0 ,   1 },
{   0 ,   3 }, 
{   0 ,   1 }, 
{   0 ,   8 }  
};
const int16 ValRangeMinMax [][] = {
{ -99 ,  99 , 1 , 10},
{ -99 ,  99 , 1 , 10}, 
{   0 ,   5 , 1 ,  1},
{   0 ,  60 , 1 , 10},
{   0 ,  60 , 1 , 10}, 
{   0 ,  60 , 1 , 10}, 
{   0 ,  60 , 1 , 10}, 
{   0 ,  25 , 1 , 10}, 
{   0 , 990 ,10 ,100}, 
{   0 , 327 , 1 , 10}, 
{   0 , 327 , 1 , 10}, 
{   0 , 327 , 1 , 10}, 
{   0 , 327 , 1 , 10}  
}

/*======================================================================================
░█▀▄▀█ ░█▀▀▀ ░█▄─░█ ░█─░█ 　 ░█──░█ ─█▀▀█ ░█▀▀█ ▀█▀ ─█▀▀█ ░█▀▀█ ░█─── ░█▀▀▀ ░█▀▀▀ ░█▀▀▀█ 
░█░█░█ ░█▀▀▀ ░█░█░█ ░█─░█ 　 ─░█░█─ ░█▄▄█ ░█▄▄▀ ░█─ ░█▄▄█ ░█▀▀▄ ░█─── ░█▀▀▀ ░█▀▀▀ ─▀▀▀▄▄ 
░█──░█ ░█▄▄▄ ░█──▀█ ─▀▄▄▀ 　 ──▀▄▀─ ░█─░█ ░█─░█ ▄█▄ ░█─░█ ░█▄▄█ ░█▄▄█ ░█▄▄▄ ░█▄▄▄ ░█▄▄▄█
======================================================================================*/
int ModORVal                  [3]  ;
int ModOrEditMenu             [4]  ;
int DisplayMenu;
int WeaponMenuIdx;
int WeaponCategory            [2]  ;
int WeaponName                [2]  ; 
int ToggleTaylorAR            [1]  ;
int ToggleAAV3                [2]  ; 
int ToggleBattsStickyAim      [2]  ; 
int TaylorShapes              [2]  ;
int ToggleRapidFire           [2]  ;
int ToggleStrafeShot          [2]  ;
int RateOfFire                [2]  ;
int ToggleTaylorSens;
int TaylorARVert              [2]  ;
int TaylorARHoriz             [2]  ; 
int TaylorRadius              [2]  ;
int TaylorAngle               [2]  ;
int StickySize                [2]  ;
int StickyTime                [2]  ; 
int ToggleHoldBreath          [2]  ;
int ToggleProneShot;
int ToggleJumpShot;
int ToggleEnemyPing;
int DisplayQToggles;
int GeneralSens,AdsSens,FireSens,AdsFireSens;
int StrafeShotTime; 
int HoldTime,RestTime,LedOn,LedOff; 
int ToggleBlockRumble,GenStr; 
int DriveMode,ScreenSaver,BlankScreen,SelectedProfileIdx,ProfileIdx;
int DisplayTitle = TRUE;
define False = FALSE;
define True = TRUE; 
define ActivateButtonCount = 9;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivatePressButton1[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx1[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx;
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping,Buttons;
int TaylorFineTune  = 30  ;
define Small  = 0;
define Medium = 1;
define Large  = 2;
int stringPosition,stringHeight;
int HighLight;  
int SmartRumble,AntirecoilStrength,AntirecoilVertical,AntirecoilHorizontal;
int RX,RY,angle,CosAngle,SinAngle,ActualMagnitude,MaxMagnitude;
int SpiralPosition1,InnerSpiral,OuterSpiral,SpiralPosition2,Position;
int x,y,inc;
int stringLength;
int color; 
int vert = 4;
int InSpiral,OutSpiral;
int CycleRefresh;
define TimeInterval = 4;
int VerticalStrength,HorizontalStrength; 
int ToggleAutoRun; 
int StickDZ[2],STICK_X[2],STICK_Y[2],OffsetX[2],OffsetY[2],ValOutX[2],ValOutY[2],ValPrevX[2],ValPrevY[2],XY[2],ValInY[2],ValInX[2],o[4];
int temp, i_val;
int hairtrigger = TRUE;
int RX_dk_max=  100;
int RX_dk_min= -100;
int RY_dk_max=  100;
int RY_dk_min= -100;
int LX_dk_max=  100;
int LX_dk_min= -100;
int LY_dk_max=  100;
int LY_dk_min= -100;
//========================================================== End Of Variables ======================================================\\
init { 
    Load();
	InitializeShapeChange();
    STICK_X = 9;  STICK_X[1] = 11; 
    STICK_Y = 10; STICK_Y[1] = 12; 
    StickDZ = dk_max(abs(get_val(9)), abs(get_val(10))) + 5;
    StickDZ[1]  = dk_max(abs(get_val(11)), abs(get_val(12))) + 5;
} 
/*-------------------------------------------------
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜
             ▒█▀▄▀█ ░█▀▀█ ▀█▀ ▒█▄░▒█ 
             ▒█▒█▒█ ▒█▄▄█ ▒█░ ▒█▒█▒█ 
             ▒█░░▒█ ▒█░▒█ ▄█▄ ▒█░░▀█
▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
-------------------------------------------------*/
main { 
ActivateAllButtons(); 
Buttons(Buttons);

    if(get_ival(Ads))                                            
	{ 
		if(event_press(PS4_OPTIONS))                               
		{ 
		    MenuStatus(1,1,0,0,0,0);
		    ModORVal[0]  = 0; 
		    combo_run(RumbleOn);
		    
		    if(!ModOrEditMenu[0]){ 
		    	MenuStatus(0,0,0,0,0,1);
		    }    
	    }
	    if(event_press(PS4_SHARE)){
	    	ModOrEditMenu[3] =! ModOrEditMenu[3];
	    	DisplayMenu = TRUE;
	    	WeaponMenuIdx = 0; 
	    	combo_run(RumbleOn);
	    	
	    	if(!ModOrEditMenu[3]){
	    		MenuStatus(0,0,0,0,0,1);
	    	}
	    } 
	    set_val(PS4_OPTIONS,0);  
    } 

    if(!DisplayTitle)                           
    { 
    	if(ModOrEditMenu[0]) 
        {
        	ModORVal[0]  = MenuNavigation(ModORVal[0],0,3); 
        	MenuScroll();
        	vm_tctrl(0);
        	
        	if(event_press(PS4_CIRCLE))
		    {
				MenuStatus(0,0,0,0,0,1);
				InitializeShapeChange();
				Save();
    	    	combo_run(Saved);
			}	
        } 
   		if(ModOrEditMenu[1])       
     	{ 
           	ModORVal[1]   = MenuNavigation(ModORVal[1],ModRange[ModORVal[0]][0],ModRange[ModORVal[0]][1]); 
           	
           Toggles();    
           MenuScroll();
    	} 
    	if(ModOrEditMenu[2])  
	    { 
            ModORVal[2]   = MenuNavigation(ModORVal[2],ValRange[ModORVal[1]][0],ValRange[ModORVal[1]][1]); 
         
            EditValues(); 
            MenuScroll(); 
        } 
        if(ModOrEditMenu[3]) 
        { 
        	WeaponMenu();
        	MenuScroll();  
        } 
        if(ModOrEditMenu[1] || ModOrEditMenu[3]) 
        {
        	VerticalStrength   = GetWeaponValues(0) + TaylorARVert[ProfileIdx]; 
        	HorizontalStrength = GetWeaponValues(1) + TaylorARHoriz[ProfileIdx]; 
        }
    }
    if(DisplayMenu)  
    { 
    	RenderMenu(); 
    } 
    
    if(!ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2] && !ModOrEditMenu[3]) 
	{
	
    	DisplayTitleScreen();  
    	
    	Profiles(); 
    	
        deadzone(Ads,Fire,99,99);
    	
    	led(ProfileIdx);
     	
     	if(ToggleBlockRumble) 
		{
			block_rumble();
		}
		if(get_ival(Fire))
    	{
			if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200)
    	    {
		        DriveMode = TRUE; 
		        combo_run(DriveMode);
    	    }
    	    set_val(PS4_RIGHT,0);
    	} 
		if(DriveMode) 
    	{
			combo_run(Blink);
			LedOn  = 150;
			LedOff = 300;
			
			if(event_press(PS4_SQUARE))
			{
				DriveMode = FALSE;
				combo_run(RumbleOff); 
    		} 
    	} 
   		if(!DriveMode)           
		{
	
		    ToggleRapidFire[ProfileIdx]    = QuickToggleMods(ActivateHoldButton[1] , ActivatePressButton[1]  ,ToggleRapidFire [ProfileIdx] , 3,0,1); 
		    ToggleStrafeShot[ProfileIdx]   = QuickToggleMods(ActivateHoldButton[2] , ActivatePressButton[2]  ,ToggleStrafeShot[ProfileIdx] , 4,0,1);
		    ToggleHoldBreath[ProfileIdx]   = QuickToggleMods(ActivateHoldButton[3] , ActivatePressButton[3]  ,ToggleHoldBreath[ProfileIdx] , 5,0,1);
		   
       	  if(get_ival(Ads))
       		{
       		if(event_press(ActivatePressButton1[4])) 
       			{
       				TaylorARVert[ProfileIdx] = cycle(TaylorARVert[ProfileIdx] + 1,-99,99);
       				DisplayAR();
       			}
       			if(event_press(ActivatePressButton[4])) 
       			{
       				TaylorARVert[ProfileIdx] = cycle(TaylorARVert[ProfileIdx] - 1,-99,99);
       				DisplayAR();
       			}
       			set_val(ActivatePressButton1[4],0); set_val(ActivatePressButton[4],0);
       		}
       		if(event_release(ActivatePressButton1[4]) ||  event_release(ActivatePressButton[4]))
			{
				ScreenSaver = TRUE;
			}
            if(ToggleTaylorAR[ProfileIdx] == 2) 
		    { 
	        	if(get_ival(Ads) && get_ival(Fire))
	        	{
		    		SmartRumble = get_rumble(RumbleToUse());
		    	
			    	if(SmartRumble > 10 && SmartRumble < 90) 
					{
						AntirecoilStrength = VerticalStrength + SmartRumble / 2;
					} 	
					if(SmartRumble < 10) 
					{
						SetVal(PS4_RY,VerticalStrength);
						SetVal(PS4_RX,HorizontalStrength);
					}
					else
					{ 	
						SetVal(PS4_RY,AntirecoilStrength);
						SetVal(PS4_RX,HorizontalStrength);	
					}
	    	    	AntirecoilStrength  = 0; 
	    	    	SmartRumble = 0; 
				}
		     }
		    
		   if(ToggleTaylorAR[ProfileIdx] == 1) 
    		{
       			if(get_ival(Ads) && get_ival(Fire))
        		{ 	
        			combo_run(Antirecoil);
        		}
	        }
			if(ToggleAAV3[ProfileIdx] == 1) 
			{   
				RX = get_val(PS4_RX);                                
				RY = get_val(PS4_RY); 
				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
				MaxMagnitude = (ActualMagnitude < 100);                                  
				angle = angle % 360;
				
				CosAngle = PolarArray[(angle + 270) % 360];  
				SinAngle = PolarArray[angle % 360];
				
			    angle += TaylorAngle[ProfileIdx];
			   
	    		if(get_val(Ads) || get_val(Fire))
	    		{
		        	if(ActualMagnitude < TaylorRadius[ProfileIdx])           
		        	{
			   			SinAngle -= RX;                                                              
						CosAngle -= RY;
					}
					else
					{
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
					}
					GetShapes(TaylorRadius[ProfileIdx]);	
				}
			}
			
			if(ToggleBattsStickyAim[ProfileIdx] == 1){
				if(get_ival(Ads))
					combo_run(StickyAim);
			} 
			if(ToggleRapidFire[ProfileIdx] == 1)
			{
			 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
			    RestTime = HoldTime -get_rtime();
			 	if(RestTime < 0) RestTime = 0;
			    
			  
		 		if(get_ival(Fire))
		 			combo_run(RAPIDFIRE);
		 		else
		    		combo_stop(RAPIDFIRE);
			    
			    LedBlink(150,300);   
			}
		    if(ToggleStrafeShot[ProfileIdx] == 1) 
		    {
		   		if(get_val(Fire))
		        	combo_run(StrafeShot);
				else
		   			combo_stop(StrafeShot);
			}
			if(ToggleTaylorSens) 
	        {
            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
                        
                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
               		GenStr = GeneralSens;
                }
                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    GenStr = AdsSens;
                }  
                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    GenStr = FireSens;   
                }
                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
                { 
                    GenStr = AdsFireSens;
                }
                sensitivity(PS4_RY,NOT_USE,GenStr);
                sensitivity(PS4_RX,NOT_USE,GenStr);
            }
            if(ToggleHoldBreath[ProfileIdx] == 1)
			{
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}
	        if(ToggleJumpShot) 
			{
				if(get_val(Fire))
					combo_run(JumpShot);
			}
			 if(ToggleEnemyPing) 
        	{
        		if(get_ival(Fire) && get_ptime(Fire) >= 1000)
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing);		
        	}
			if(ToggleAutoRun) 
			{
				
			     if(get_val(PS4_LY) < -60) {
			    	set_val(PS4_LY, -100);
			    	set_val(PS4_L3, 100);
		    }
	       
	        if(ToggleProneShot) 
			{
				if(get_val(Fire))
					set_val(Crouch,100);
			}}		  
            
            if (get_console() == PIO_XB1 && get_controller() == PIO_PS4) {swap (PS4_TOUCH,PS4_SHARE);}
            if (get_console() == PIO_XB360 && get_controller() == PIO_PS4) {swap (PS4_TOUCH,PS4_SHARE);
            }
            do { o[i] = get_val(9 + i);
            } while (i = (i + 1) % 4);
            do {
               ValInY[i] = get_oval(STICK_Y[i]);
               ValInX[i] = get_oval(STICK_X[i]); 
    
            if (isqrt(pow(get_val(STICK_X[i]), 2) + pow(get_val(STICK_Y[i]), 2)) <  StickDZ[i]) 
            {
            if (ValInY[i] != ValPrevY[i] || ValInX[i] != ValPrevX[i]) 
            {
                ValPrevX[i] = ValInX[i];
                ValPrevY[i] = ValInY[i];
                XY[i]  = 100;
            }
            if (XY[i]) 
            {
               XY[i] -= get_rtime();
           
            if (XY[i] <= 0) 
           {
              OffsetX[i] = inv(ValInX[i]);
              OffsetY[i] = inv(ValInY[i]);
              offset(STICK_X[i], OffsetX[i]);
              offset(STICK_Y[i], OffsetY[i]);
              ValOutX[i] = inv(get_val(STICK_X[i]));
              ValOutY[i] = inv(get_val(STICK_Y[i]));}}}
              offset(STICK_X[i], OffsetX[i] + ValOutX[i]);
              offset(STICK_Y[i], OffsetY[i] + ValOutY[i]);
           
           } while(i = (i + 1) % 2);
  
           do {
              temp = (i / 2) + XB1_RX;
              i_val = get_val(temp);
    
           if(i_val >= RX_dk_max[i]) set_val(temp, 100);
           if(i_val <= RX_dk_max[i + 1]) set_val(temp, -100);
  
           }while(i = (i + 2) % 8);
  
           if(hairtrigger == TRUE)deadzone(XB1_LT,XB1_RT,99,99);
         }
     }
 }

/*-----------------------------------------------------------------------------------------------------------------------
▛▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝▝ ▜
 ▒█▀▀█ ▒█▀▀▀█ ▒█▀▄▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀▀█ 　 ░█▀▀█ ▒█▄░▒█ ▒█▀▀▄ 　 ▒█▀▀▀ ▒█░▒█ ▒█▄░▒█ ▒█▀▀█ ▀▀█▀▀ ▀█▀ ▒█▀▀▀█ ▒█▄░▒█ ▒█▀▀▀█ 
 ▒█░░░ ▒█░░▒█ ▒█▒█▒█ ▒█▀▀▄ ▒█░░▒█ ░▀▀▀▄▄ 　 ▒█▄▄█ ▒█▒█▒█ ▒█░▒█ 　 ▒█▀▀▀ ▒█░▒█ ▒█▒█▒█ ▒█░░░ ░▒█░░ ▒█░ ▒█░░▒█ ▒█▒█▒█ ░▀▀▀▄▄ 
 ▒█▄▄█ ▒█▄▄▄█ ▒█░░▒█ ▒█▄▄█ ▒█▄▄▄█ ▒█▄▄▄█ 　 ▒█░▒█ ▒█░░▀█ ▒█▄▄▀ 　 ▒█░░░ ░▀▄▄▀ ▒█░░▀█ ▒█▄▄█ ░▒█░░ ▄█▄ ▒█▄▄▄█ ▒█░░▀█ ▒█▄▄▄█
▙ ▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▖▟
------------------------------------------------------------------------------------------------------------------------*/
function GetWeaponValues(i) { 

    if(WeaponCategory[ProfileIdx] == 0) return AssaultRifle[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 1) return SubMachine[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 2) return Aml[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 3) return Lmg[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 4) return Semi[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 5) return SniperRifle[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 6) return BeltGun[WeaponName[ProfileIdx]][i];
    if(WeaponCategory[ProfileIdx] == 7) return Uti[WeaponName[ProfileIdx]][i];
		    
    return 0; 
} 
function GetWeaponStrings(Position){ 

	if(WeaponCategory[ProfileIdx] == 0){ 
		String(AssaultWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 1){
		String(SubMachineWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 2){
		String(AmlWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 3){
		String(LmgWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 4){
		String(SemiWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 5){
		String(SniperRifleWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 6){
		String(BeltGunWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
	if(WeaponCategory[ProfileIdx] == 7){
		String(UtiWeaponNames[WeaponName[ProfileIdx]],Small,Position,0);
	}
} 		
function WeaponMenu() { 

	if(event_press(PS4_DOWN)){ 
		WeaponMenuIdx = cycle(WeaponMenuIdx + 1,0,1)
		DisplayMenu = TRUE;
	} 
	if(event_press(PS4_UP)){ 
		WeaponMenuIdx = cycle(WeaponMenuIdx - 1,0,1)
		DisplayMenu = TRUE;
	} 
	if(event_press(PS4_RIGHT)){ 
		if(WeaponMenuIdx == 0){
			WeaponCategory[ProfileIdx] = cycle(WeaponCategory[ProfileIdx] + 1,0,7);
			WeaponName[ProfileIdx] = 0;
			DisplayMenu = TRUE;
		}
		else if(WeaponMenuIdx == 1){ 
			WeaponName[ProfileIdx] = cycle(WeaponName[ProfileIdx] + 1, WeaponNameRange[WeaponCategory[ProfileIdx]][0],WeaponNameRange[WeaponCategory[ProfileIdx]][1]);
		    DisplayMenu = TRUE;
	    } 
    }
    if(event_press(PS4_LEFT)){ 
		if(WeaponMenuIdx == 0){
			WeaponCategory[ProfileIdx] = cycle(WeaponCategory[ProfileIdx] - 1,0,7);
			WeaponName[ProfileIdx] = 0;
			DisplayMenu = TRUE;
		}
		else if(WeaponMenuIdx == 1){ 
			WeaponName[ProfileIdx] = cycle(WeaponName[ProfileIdx] - 1, WeaponNameRange[WeaponCategory[ProfileIdx]][0],WeaponNameRange[WeaponCategory[ProfileIdx]][1]);  
		    DisplayMenu = TRUE;
		} 
    }
    if(event_press(PS4_TRIANGLE)){ 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 1);
        DisplayMenu = TRUE;   	
    }
    if(event_release(PS4_CIRCLE))
	{
		MenuStatus(1,1,0,0,0,0);
		InitializeShapeChange();
	}		
}  
function GetShapes(f_var){ 

	if(TaylorShapes[ProfileIdx] == 0) 
    {
    	offset(PS4_RY ,(f_var * SinAngle)/100);
    	offset(PS4_RX ,(f_var * CosAngle)/100);	
    }
    if(TaylorShapes[ProfileIdx] == 1) // Tall Oval
    {
		offset(PS4_RY,(f_var   * SinAngle)/100);
		offset(PS4_RX,(f_var/2 * CosAngle)/100);   
    }
    if(TaylorShapes[ProfileIdx] == 2) // Wide Oval
    {
   		offset(PS4_RX,(f_var   * CosAngle)/100);
   		offset(PS4_RY,(f_var/2 * SinAngle)/100);         
	}
    if(TaylorShapes[ProfileIdx] == 3) // SpiralOval
	{
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InnerSpiral -= 1;
				if(InnerSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InnerSpiral += 1;
				if(InnerSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OuterSpiral -= 1;
				if(OuterSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OuterSpiral += 1;
				if(OuterSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
	    offset(PS4_RX,(OuterSpiral * CosAngle)/100);
	    offset(PS4_RY,(InnerSpiral * SinAngle)/100);   
	}
    if(TaylorShapes[ProfileIdx] == 4) // Spiral
	{
		if(!(CycleRefresh++ % TimeInterval))
		{
			if(!SpiralPosition1)                                
			{
				InSpiral -= 1;
				if(InSpiral < f_var/2)
					SpiralPosition1 = True;   
			}
			else
			{
			    InSpiral += 1;
				if(InSpiral > f_var)
					SpiralPosition1 = False;
			}
			if(!SpiralPosition2)
			{
				OutSpiral -= 1;
				if(OutSpiral < f_var/2)
					SpiralPosition2 = True;
			}
			else
			{
				OutSpiral += 1;
				if(OutSpiral >  f_var)
					SpiralPosition2 = False;
			}
			CycleRefresh = 0;
		}
    	offset(PS4_RX,(OutSpiral * CosAngle)/100);
    	offset(PS4_RY,(InSpiral  * SinAngle)/100);
	}
    if(TaylorShapes[ProfileIdx] == 5) // Helix
	{
		
		inc = (i % 100);
	    if(Position == 0){ 
	   		x = inc; y = 100 - inc;} 
	    else if (Position == 1){ 
	    	x = 100 - inc; y = - inc;}
	    else if (Position == 2){
	    	x = -inc; y = -100 + inc;}
	    else if(Position == 3){  
	    	x = -100 + inc; y = inc;}
	    Position ++;
	   
	    if(Position == 4){ 
	    	Position = 0;
	    }	
	 	offset(PS4_RX,(f_var * x)/100);
        offset(PS4_RY,(f_var * y)/100);
	} 
}
function Toggles() {
ToggleTaylorAR       [ProfileIdx] = ToggleSwitch(1, 0,ToggleTaylorAR       [ProfileIdx]);
ToggleAAV3           [ProfileIdx] = ToggleSwitch(1, 1,ToggleAAV3           [ProfileIdx]);
ToggleBattsStickyAim [ProfileIdx] = ToggleSwitch(1, 2,ToggleBattsStickyAim [ProfileIdx]);
ToggleRapidFire      [ProfileIdx] = ToggleSwitch(1, 3,ToggleRapidFire      [ProfileIdx]);
ToggleStrafeShot     [ProfileIdx] = ToggleSwitch(1, 4,ToggleStrafeShot     [ProfileIdx]);
ToggleHoldBreath     [ProfileIdx] = ToggleSwitch(1, 5,ToggleHoldBreath     [ProfileIdx]);
ToggleTaylorSens 			      = ToggleSwitch(1, 6,ToggleTaylorSens                 );
ToggleProneShot      [ProfileIdx] = ToggleSwitch(1, 7,ToggleProneShot      [ProfileIdx]);
ToggleJumpShot       [ProfileIdx] = ToggleSwitch(1, 8,ToggleJumpShot       [ProfileIdx]);
ToggleAutoRun                     = ToggleSwitch(1, 9,ToggleAutoRun        [ProfileIdx]);
ToggleEnemyPing      [ProfileIdx] = ToggleSwitch(1,10,ToggleEnemyPing      [ProfileIdx]);
Buttons                           = ToggleSwitch(1,11,Buttons                          );
ToggleBlockRumble                 = ToggleSwitch(1,12,ToggleBlockRumble                );
ActivateIndividualBtnIdx          = ToggleSwitch(1,13,ActivateIndividualBtnIdx         ); 

ButtonActivation(0,ModORVal[1],14);                                                                    
ButtonActivation(1,ModORVal[1],15);                                                                    
ButtonActivation(2,ModORVal[1],16);                                                                    
ButtonActivation(3,ModORVal[1],17); 
ButtonActivationAR(4,ModORVal[1],18); 
}
function EditValues(){ 
TaylorARVert      [ProfileIdx] = EditableValues( 0,   TaylorARVert     [ProfileIdx]);
TaylorARHoriz     [ProfileIdx] = EditableValues( 1,   TaylorARHoriz    [ProfileIdx]);
TaylorShapes      [ProfileIdx] = ToggleSwitch  ( 2, 2,TaylorShapes     [ProfileIdx]);
TaylorRadius      [ProfileIdx] = EditableValues( 3,   TaylorRadius     [ProfileIdx]);
TaylorAngle       [ProfileIdx] = EditableValues( 4,   TaylorAngle      [ProfileIdx]);
StickySize        [ProfileIdx] = EditableValues( 5,   StickySize       [ProfileIdx]);
StickyTime        [ProfileIdx] = EditableValues( 6,   StickyTime       [ProfileIdx]);
RateOfFire        [ProfileIdx] = EditableValues( 7,   RateOfFire       [ProfileIdx]);
StrafeShotTime                 = EditableValues( 8,   StrafeShotTime               );
GeneralSens                    = EditableValues( 9,   GeneralSens                  );
AdsSens                        = EditableValues(10,   AdsSens                      );
FireSens                       = EditableValues(11,   FireSens                     );
AdsFireSens                    = EditableValues(12,   AdsFireSens                  );
}
function RenderMenu(){ 
	rect_oled(2,3,127,50,1,0);
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE); 
	line_oled(0, 50,127 , 50, 1, 1); 	
	led(ProfileIdx);
	
	if(ModOrEditMenu[1] || ModOrEditMenu[2] || ModOrEditMenu[3]) {
			line_oled(0, 25,127 , 25, 1, 1); 	
	}
	if(ModOrEditMenu[3]){ 
	
		if(WeaponMenuIdx == 0)
        {
       		rect_oled(115,28, 6, 8, OLED_WHITE, OLED_WHITE); 
			rect_oled(6,28, 6, 8, OLED_WHITE, OLED_WHITE);  
		}
		if(WeaponMenuIdx == 1)
		{
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); 
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   
		}
		String(WeaponCatNames[WeaponCategory[ProfileIdx]],Small,1,0);
		String(Profiles[ProfileIdx],Small,-24,0); 
		GetWeaponStrings(12);	
	} 	
	else if(ModOrEditMenu[2]) 
	{ 	
		String(ValNames[ModORVal[2]],Small,-24,0);
		if(ModORVal[2] >= 0 && ModORVal[2] <= 1){ 
			printf(15,34,OLED_FONT_SMALL,OLED_WHITE,ProfilesEdit[ProfileIdx]);
			GetWeaponStrings(-12);
		}
	    DisplayMods(2,2,7,Profiles[ProfileIdx],Small,-12); 
	    DisplayMods(2,8,12,Misc[5],Small,-12); 
	    DisplayToggleOptions(2,2,CircularCurve[TaylorShapes[ProfileIdx]]);
	    
	}
	else if(ModOrEditMenu[1])
	{
	    led(ProfileIdx);
	    String(ModNames[ModORVal[1]],Small,-24,0);
		DisplayMods(1, 0, 5,Profiles[ProfileIdx],Small,-12); 
	    DisplayMods(1, 6,10,Misc[5],Small,-12); 
	    DisplayMods(1,11,12,Misc[6],Small,-12);
	    DisplayMods(1,13,14,Misc[7],Small,-12);
	    DisplayMods(1,15,18,Misc[8],Small,-12);
	    
	    DisplayToggleOptions(1, 0,ARToggle[ToggleTaylorAR[ProfileIdx]]);
	    DisplayToggle(1,1,ToggleAAV3[ProfileIdx]);
	    DisplayToggle(1,2,ToggleBattsStickyAim[ProfileIdx]);
	    DisplayToggle(1,3,ToggleRapidFire[ProfileIdx]);
	    DisplayToggle(1,4,ToggleStrafeShot[ProfileIdx]); 
	    DisplayToggle(1,5,ToggleHoldBreath[ProfileIdx])
	    DisplayToggle(1,6,ToggleTaylorSens)
	    DisplayToggle(1,7,ToggleProneShot)
	    DisplayToggle(1,8,ToggleJumpShot)
	    DisplayToggle(1,9,ToggleAutoRun)
	    DisplayToggle(1,10,ToggleEnemyPing)
	    DisplayToggleOptions(1,11,ControllerLayouts[Buttons]);
	    DisplayToggle       (1,12,ToggleBlockRumble)
	    DisplayToggleOptions(1,13,PressButtons[ActivateIndividualBtnIdx]);
	}
	else 
	{
		for(i = 0;i < GetEntriesStrings(0); i++) 
		{
			if(i == ModORVal[0]) 
			{
				color = OLED_BLACK;
			}else{
	    		color = OLED_WHITE;
			}
		 	printf(64 - ((GetCharsStrings(i) * OLED_FONT_SMALL_WIDTH) / 2),vert,OLED_FONT_SMALL,color,MainMenuId[i])
			vert += 12
		}
		vert = 4;	
	}
	DisplayMenu = FALSE;
}
function MenuNavigation(f_index,f_min,f_max) {
	if(!get_val(Ads))
	{
		if(ModOrEditMenu[0]) 
	    {
		    if(event_press(PS4_UP)) 
		    {
		    	f_index = cycle(f_index - 1, f_min , f_max);
		    	DisplayMenu = TRUE;	
		    }
		    if(event_press(PS4_DOWN)) 
		    {
		        f_index = cycle(f_index + 1, f_min , f_max);
		        DisplayMenu = TRUE;	
		    } 
		}
		if(!ModOrEditMenu[0])
		{
			if(event_press(PS4_RIGHT))
			{  
				f_index = cycle(f_index + 1,f_min,f_max); 
				DisplayMenu = TRUE;
			}
			if(event_press(PS4_LEFT)) 
			{  
		        f_index = cycle(f_index - 1,f_min,f_max);
		        DisplayMenu = TRUE;
			}  
	    } 
	    BlockButtons(); 
	}
    if(event_release(PS4_CROSS))
	{
		if(ModOrEditMenu[0]) 
		{
    		if(EditableMain[ModORVal[0]] != 0)  
			{
				MenuStatus(1,0,1,0,0,0);
				ModORVal[1] = ModRange[ ModORVal[0] ][ 0 ]; 
			} 
	    }
	}
	if(event_press(PS4_CROSS))
	{
		if(ModOrEditMenu[1]) 
		{
			if(EditableMods[ModORVal[1]] != 0) 
			{
				MenuStatus(1,0,0,1,0,0);
				ModORVal[2] = ValRange[ ModORVal[1] ][ 0 ];
				InitializeShapeChange();
				cls_oled(0);	
			}
		}
		if(!ModOrEditMenu[2]){
			if(ModORVal[0] == 1 && !ModOrEditMenu[1]) 
        	{
	        	MenuStatus(1,0,0,0,1,0)
				cls_oled(0);
			}
		} 
    }
    if(event_release(PS4_CIRCLE) && !ModOrEditMenu[0])
    {
    	if(ModOrEditMenu[1]) 
    	{
    		MenuStatus(1,1,0,0,0,0);
    		InitializeShapeChange();
		}
		else if(ModOrEditMenu[2]) 
		{
			MenuStatus(1,0,1,0,0,0);
			InitializeShapeChange();
		}
	}
	if(get_ival(PS4_SQUARE) && get_ptime(PS4_SQUARE) > 300){ 
		TaylorARVert[ProfileIdx] = 0;
		TaylorARHoriz[ProfileIdx] = 0;
		DisplayMenu = TRUE;
	} 
	if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 1);
        DisplayMenu = TRUE;   	
    }
    BlockButtons();
return f_index; 
}
function EditableValues(f_idx,ValueIndex) {

    if(ModORVal[2] == f_idx) 
    { 
        if(get_ival(Ads))  
        {    
            if(event_press(PS4_RIGHT)) 
            {
               ValueIndex = cycle(ValueIndex + ValRangeMinMax[ModORVal[2]][2],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]);
               DisplayMenu = TRUE;  
            }
            if(event_press(PS4_LEFT))  
            {	
                ValueIndex = cycle(ValueIndex - ValRangeMinMax[ModORVal[2]][2],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]); 
                DisplayMenu = TRUE;
            }
            if(event_press(PS4_UP)) 
            {
               ValueIndex = cycle(ValueIndex + ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]);
               DisplayMenu = TRUE;  
            }
            if(event_press(PS4_DOWN))  
            {	
                ValueIndex = cycle(ValueIndex - ValRangeMinMax[ModORVal[2]][3],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]); 
                DisplayMenu = TRUE;
            }
            BlockButtons();
        }
        if(f_idx >= 0 && f_idx <= 2)
			number_to_string(GetWeaponValues(ModORVal[2]) + ValueIndex,find_digits(GetWeaponValues(ModORVal[2]) + ValueIndex)); 
 
    	else 
    		number_to_string(ValueIndex, find_digits(ValueIndex));
         
        set_val(TRACE_2,ValueIndex);
    }
    return ValueIndex;                
 }
function ToggleSwitch(f_mod,f_idx,f_val) { 
	  
	if(ModORVal[f_mod] == f_idx) 
	{
		if(event_press(PS4_UP))
   		{
   			if(ModOrEditMenu[1])
	        	f_val = cycle(f_val + 1,ModToggleRange[ModORVal[1]][0],ModToggleRange[ModORVal[1]][1]);
	        else
	        	f_val = cycle(f_val + ValRangeMinMax[ModORVal[2]][2],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]);
	     
	        if(!f_val)
	            combo_run(RumbleOff);
	        else
	            combo_run(RumbleOn);

	       DisplayMenu = TRUE;
	       
        }
   		if(event_press(PS4_DOWN))
   		{
   			if(ModOrEditMenu[1])
            	f_val = cycle(f_val - 1, ModToggleRange[ModORVal[1]][0],ModToggleRange[ModORVal[1]][1]);
            else
            	f_val = cycle(f_val - ValRangeMinMax[ModORVal[2]][2],ValRangeMinMax[ModORVal[2]][0],ValRangeMinMax[ModORVal[2]][1]);
            
            if(!f_val)
                combo_run(RumbleOff);
            else
                combo_run(RumbleOn); 
            
            DisplayMenu = TRUE;
    	}
	}      	  
    return f_val;
}
function QuickToggleMods(f_hold, f_press,f_val,f_idx,f_min,f_max) {  
	if (f_hold == 0 || f_press == 0) return f_val;

	if(get_ival(f_hold))
	{
		if(event_press(f_press)) 
		{
			ModORVal[1] = f_idx; 
			f_val = cycle(f_val ++, f_min, f_max);
			DisplayQToggles = TRUE;
	     
	        if(!f_val)
	            combo_run(RumbleOff);
	        else
	            combo_run(RumbleOn);	
	    } 
	    else if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 40))
		{
			ModORVal[1] = f_idx;
			f_val = 0;
			DisplayQToggles = TRUE;
			combo_run(RumbleOff);
		} 
	    set_val(f_press, 0) 
	} 
	if(DisplayQToggles) 
	{
		combo_run(QuickToggles);
		ScreenSaver = FALSE;
		cls_oled(OLED_BLACK);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
		String(ModNames[ModORVal[1]],Small,-22,0);
		String(Profiles[ProfileIdx],Small,-5,0);
		
		if(f_val == 1) 
			String(Misc[0],Small,20,0);
	    else 
	        String(Misc[1],Small,20,0); 
	    
	    DisplayQToggles = FALSE; 
	} 
    return f_val;
} 
function DisplayTitleScreen(){ 

	if(DisplayTitle)                                            
    { 	
   		cls_oled(OLED_BLACK);
   	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	String(Misc[9],Small,-22,0);
    	String(Misc[10],Small,-5,0);
    	String(Misc[11],Small,10,0);
    	String(Profiles[ProfileIdx],Small,25,0);
    	DisplayTitle = FALSE;
        ScreenSaver  = TRUE; 
	}
	
	if(ScreenSaver) 
	{
    	BlankScreen += get_rtime();
    	
		if(BlankScreen >= 10000)
		{
			cls_oled(OLED_BLACK);
			BlankScreen = 0;
			ScreenSaver = FALSE; 
    	} 
    }
}
function Profiles() { 
	
	if(ActivateIndividualButton) 
	{ 
		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])) 
		{
			SelectedProfileIdx =! SelectedProfileIdx;
			
			if(ModOrEditMenu[1]) 
				DisplayMenu = TRUE; 
			else
    			DisplayTitle = TRUE;
    	
    	}
    	if(SelectedProfileIdx) 
    	   	ProfileIdx = 1;
    	else
    	   	ProfileIdx = 0; 
		
		if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
			set_val(ActivatePressButton[0], 0);	
	}
} 
function DisplayAR() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 27, OLED_WIDTH - 1, 27, 1, OLED_WHITE);
	String(ValNames[0],Small,-22,0);
	number_to_string(TaylorARVert[ProfileIdx],find_digits(TaylorARVert[ProfileIdx]));  
}	
function InitializeShapeChange() { 
	if(TaylorShapes[ProfileIdx] == 3) { 
		InnerSpiral = TaylorRadius[ProfileIdx]/2;	
		OuterSpiral = TaylorRadius;
	}
} 
combo Antirecoil{
// Vertical
AntirecoilVertical = get_val(PS4_RY) + VerticalStrength;  
if(AntirecoilVertical > 100) AntirecoilVertical = 100;
if(abs(get_val(PS4_RY)) < abs(VerticalStrength) +  5)
set_val(PS4_RY, (AntirecoilVertical));
// Horizontal
AntirecoilHorizontal = get_val(PS4_RX) + HorizontalStrength;
if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
if(abs(get_val(PS4_RX)) < abs(HorizontalStrength)  + 5)
set_val(PS4_RX, AntirecoilHorizontal);
}
combo StickyAim {
offset(PS4_RY,StickySize);
wait(StickyTime);
offset(PS4_RX,StickySize);
offset(PS4_LX,StickySize);
wait(StickyTime);
offset(PS4_RY,StickySize * -1);
wait(StickyTime);
offset(PS4_RX,StickySize * -1);
offset(PS4_LX,StickySize * -1);
wait(StickyTime);
}
function dk_min(a, b) { 
if(a<=b) return a; return b; 
}
function dk_max(a, b) { 
if(a>=b) return a; return b; 
}
function dk_clamp(v, lo, hi) { 
return dk_min(hi, dk_max(v, lo)); 
}
function get_oval(io) { 
return o[io- 9]; 
}
function offset( axis,  offset_val) {
set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return;
}
function SetVal( axis,  offset_val) {
set_val(axis, clamp(offset_val * (100 - abs(get_ival(axis))) / 100 + get_ival(axis), -100, 100));
return;
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo JumpShot {
set_val(Jump,100);
wait(100);
}
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(2000); 
}
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
} 
combo QuickToggles{ 
wait(1500) 
DisplayTitle  = TRUE; 
reset_leds(); 
InitializeShapeChange();
} 
combo Saved { 
cls_oled(0); 
String(Misc[14],Medium,0,0);
wait(2000);
DisplayTitle = TRUE; 
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo DriveMode { 
cls_oled(0);
String(Misc[15],Medium,-15,0);
String(Misc[13],Medium,10,0);
wait(1500);
DisplayTitle = TRUE;
} 
combo StrafeShot{ 
offset(PS4_LX, 100);
wait(StrafeShotTime);
wait(50);
offset(PS4_LX, -100);
wait(StrafeShotTime);
wait(20);
}
function LedBlink(f_on,f_off) {
	LedOn  = f_on;
	LedOff = f_off;
	combo_run(BLINK);
}
function MenuStatus(f_display,f_mainmenu,f_modmenu,f_editmenu,f_adjustables,f_displaytitle) { 

    DisplayMenu      = f_display;
	ModOrEditMenu[0] = f_mainmenu;
	ModOrEditMenu[1] = f_modmenu;
	ModOrEditMenu[2] = f_editmenu;
	ModOrEditMenu[3] = f_adjustables;
	DisplayTitle     = f_displaytitle;
	
} 
function DisplayToggleOptions(f_name,f_idx,f_string){
	if(ModORVal[f_name] == f_idx) 
	{
		String(f_string,Small,6,0);
    } 
 }
function DisplayToggle(f_name,f_idx,f_toggle){

	if(ModORVal[f_name] == f_idx)
	{
    	if(f_toggle == 1)
    		String(Misc[0],Small,6,0);   
    	else 
    	    String(Misc[1],Small,6,0);   
    } 	     
}
function DisplayMods(f_mod,f_min,f_max,f_string,f_size,f_pos){ 
 
 if(ModORVal[f_mod] >= f_min && ModORVal[f_mod] <= f_max || ModORVal[f_mod] == f_min)
 {
 	String(f_string,f_size,f_pos,0);
 }
}
function String (stringLabel,fontSize,offsetY,offsetX) {
    
    if (fontSize == Small) {
        stringPosition = (127 - get_string_length(stringLabel) * 7) / 2;
        stringHeight = (64 - 10) / 2;
    } 
    
    else if (fontSize == Medium) {
        stringPosition = (127 - get_string_length(stringLabel) * 10) / 2;
        stringHeight = (64 - 16) / 2;
    }
    
    else if (fontSize == Large) {
        stringPosition = (127 - get_string_length(stringLabel) * 15) / 2;
        stringHeight = (64 - 21) / 2;
    }
    Print(stringPosition,stringHeight,stringLabel,fontSize,offsetY,offsetX);
}
function get_string_length(offset) { 
    stringLength = 0;
    while (duint8(offset++)) { stringLength++; }
    return stringLength + 1;
}
function Print (positionString,heightString,captionString,sizeFont,offSetY,offSetX) {
    
        printf(positionString + offSetX,heightString + offSetY,sizeFont,1,captionString);
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function GetEntriesStrings(x) {
  	do{ 
		if(MainMenuId[x++] == -1) 
          break; 
	}while (1);
  	return x;
}
function GetCharsStrings(x){
	if (MainMenuId[x + 1] != -1) return MainMenuId[x + 1] - MainMenuId[x] - 1;
 	return sizeof(MainMenuId) - MainMenuId[x];
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100) 
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100) 
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
    {
        return RUMBLE_B;
    }
    return 0;
}
function ButtonActivation(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_DOWN))
     	{
			HighLight = cycle(HighLight + 1,0,1);
			DisplayMenu = TRUE;
		}
		if(event_press(PS4_UP))
		{
			HighLight = cycle(HighLight - 1,0,1);
			DisplayMenu = TRUE;
		}
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(HighLight == 0) 
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 10 );
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             	
             		DisplayMenu = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(HighLight == 0)
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 10 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
             		DisplayMenu = TRUE;
            }
        }
        if(HighLight == 0)
        {
       		rect_oled(115,28, 6, 8, OLED_WHITE, OLED_WHITE); 
			rect_oled(6,28, 6, 8, OLED_WHITE, OLED_WHITE);   
		}
		if(HighLight == 1)
		{
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE);
		    rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   
		} 
        String(HoldButtons[ActivateHoldBtnIdx[i]],Small,1,0);
       	String(PressButtons[ActivatePressBtnIdx[i]],Small,12,0);
     }  
 }
 function ButtonActivationAR(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_DOWN))
     	{
			HighLight = cycle(HighLight + 1,0,1);
			DisplayMenu = TRUE;
		}
		if(event_press(PS4_UP))
		{
			HighLight = cycle(HighLight - 1,0,1);
			DisplayMenu = TRUE;
		}
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(HighLight == 0) 
             		ActivatePressBtnIdx1[i]= cycle(ActivatePressBtnIdx1[i] + 1, 0 , 8 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             	
             		DisplayMenu = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(HighLight == 0) 
             		ActivatePressBtnIdx1[i]= cycle(ActivatePressBtnIdx1[i] - 1, 0 , 8 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 );
             		
             		DisplayMenu = TRUE;
            }
        }
        if(HighLight == 0)
        {
       		rect_oled(115,28, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 1
			rect_oled(6,28, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 1
		}
		if(HighLight == 1)
		{
		    rect_oled(115,40, 6, 8, OLED_WHITE, OLED_WHITE); // HighLight 2
   			rect_oled(6,40, 6, 8, OLED_WHITE, OLED_WHITE);   // HighLight 2
		} 
        String(PressButtons[ActivatePressBtnIdx1[i]],Small,1,0);
       	String(PressButtons[ActivatePressBtnIdx[i]],Small,12,0);
     }  
 }
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivatePressButton1[i]        = PressBtns[clamp(ActivatePressBtnIdx1[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_MEDIUM_WIDTH),30,OLED_FONT_MEDIUM,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );

const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint Reload  WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_RB }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_RB }, // ALTERNATIVE = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_LB }, // LEFTY = 2
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_RS ,XB1_X, XB1_Y, XB1_LB }};// LEFT ALTERNATIVE = 3
	
function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
}
int mask;
int ret;
int pval_data;
function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}
function Load(){ 

 pval_data = get_pvar(SPVAR_1, -32767, 32767, 0);
 TaylorARVert[0]       = unpack_int16_to_int8(pval_data, 0);
 TaylorARVert[1]       = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_2, -32767, 32767, 0);
 TaylorARHoriz[0]      = unpack_int16_to_int8(pval_data, 0);
 TaylorARHoriz[1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_3, 1, 32767, pack_int8_to_int16(0, 0));
 TaylorShapes[0]         = unpack_int16_to_int8(pval_data,0);
 TaylorShapes[1]         = unpack_int16_to_int8(pval_data,1);
 
 pval_data = get_pvar(SPVAR_4, 1, 32767, pack_int8_to_int16(15,15));
 TaylorRadius[0]          = unpack_int16_to_int8(pval_data, 0);
 TaylorRadius[1]          = unpack_int16_to_int8(pval_data, 1);
  
 pval_data = get_pvar(SPVAR_5, 1, 32767, pack_int8_to_int16(15,15));
 TaylorAngle[0]         = unpack_int16_to_int8(pval_data, 0);
 TaylorAngle[1]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_6, 1, 32767, pack_int8_to_int16(15,15));
 StickySize[0]         = unpack_int16_to_int8(pval_data, 0);
 StickySize[1]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_7, 1, 32767, pack_int8_to_int16(15,15));
 StickyTime[0]         = unpack_int16_to_int8(pval_data, 0);
 StickyTime[1]         = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_8, 1, 32767, pack_int8_to_int16(1,1));
 RateOfFire[0]         = unpack_int16_to_int8(pval_data, 0);
 RateOfFire[1]         = unpack_int16_to_int8(pval_data, 1);
 
 StrafeShotTime      = get_pvar(SPVAR_9,    1, 999,  500);
 GeneralSens         = get_pvar(SPVAR_10,   1, 327,  100); 
 AdsSens             = get_pvar(SPVAR_11,   1, 327,  100); 
 FireSens            = get_pvar(SPVAR_12,   1, 327,  100);
 AdsFireSens         = get_pvar(SPVAR_13,   1, 327,  100);
 
 pval_data = get_pvar(SPVAR_14, 1, 32767, 0);
 ToggleTaylorAR[0]     = unpack_usigned(pval_data, 0, 1);
 ToggleTaylorAR[1]     = unpack_usigned(pval_data, 1, 1);
 ToggleAAV3[0]	       = unpack_usigned(pval_data, 2, 1);
 ToggleAAV3[1]	       = unpack_usigned(pval_data, 3, 1);
 ToggleBattsStickyAim[0]= unpack_usigned(pval_data, 4, 1);
 ToggleBattsStickyAim[1]= unpack_usigned(pval_data, 5, 1);
 ToggleRapidFire[0]    = unpack_usigned(pval_data, 6, 1);
 ToggleRapidFire[1]	   = unpack_usigned(pval_data, 7, 1);
 ToggleStrafeShot[0]   = unpack_usigned(pval_data, 8, 1);
 ToggleStrafeShot[1]   = unpack_usigned(pval_data, 9, 1);
 ToggleHoldBreath[0]   = unpack_usigned(pval_data,10, 1);
 ToggleHoldBreath[1]   = unpack_usigned(pval_data,11, 1);
 
 pval_data = get_pvar(SPVAR_15, 1, 32767, 0);
 ToggleTaylorSens      = unpack_usigned(pval_data, 0, 1);
 ToggleProneShot	   = unpack_usigned(pval_data, 1, 1);
 ToggleJumpShot        = unpack_usigned(pval_data, 2, 1);
 ToggleBlockRumble     = unpack_usigned(pval_data, 3, 1);
 ToggleAutoRun 		   = unpack_usigned(pval_data, 4, 1);
 
 pval_data = get_pvar(SPVAR_16, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateIndividualBtnIdx    = unpack_int16_to_int8(pval_data, 0);
 Buttons     				 = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_17, 1, 32767, pack_int8_to_int16(0, 0));
 WeaponName [0]      = unpack_int16_to_int8(pval_data, 0);
 WeaponName [1]      = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_18, 1, 32767, pack_int8_to_int16(0, 0));
 WeaponCategory [0]   = unpack_int16_to_int8(pval_data, 0);
 WeaponCategory [1]   = unpack_int16_to_int8(pval_data, 1);
 
 pval_data = get_pvar(SPVAR_19, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [0]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[0]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_20, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [1]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[1]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_21, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [2]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[2]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_22, 1, 32767, pack_int8_to_int16(0, 0));
 ActivateHoldBtnIdx [3]      = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[3]      = unpack_int16_to_int8(pval_data, 1);

 pval_data = get_pvar(SPVAR_23, 1, 32767, pack_int8_to_int16(0, 0));
 ActivatePressBtnIdx1[4]     = unpack_int16_to_int8(pval_data, 0);
 ActivatePressBtnIdx[4]      = unpack_int16_to_int8(pval_data, 1);
 
 } 
function Save(){ 

 pval_data = pack_int8_to_int16(TaylorARVert[0],TaylorARVert[1]);    
 set_pvar(SPVAR_1,pval_data); 
 pval_data = pack_int8_to_int16(TaylorARHoriz[2],TaylorARHoriz[0]);    
 set_pvar(SPVAR_2,pval_data);
  pval_data = pack_int8_to_int16(TaylorARHoriz[1],TaylorARHoriz[2]);    
 set_pvar(SPVAR_2,pval_data);
 pval_data = pack_int8_to_int16(TaylorShapes[0],TaylorShapes[1]);    
 set_pvar(SPVAR_3,pval_data);
 pval_data = pack_int8_to_int16(TaylorRadius[0],TaylorRadius[1]);    
 set_pvar(SPVAR_4,pval_data); 
 pval_data = pack_int8_to_int16(TaylorAngle[0],TaylorAngle[1]);    
 set_pvar(SPVAR_5,pval_data);
 pval_data = pack_int8_to_int16(StickySize[0],StickySize[1]);    
 set_pvar(SPVAR_6,pval_data);
 pval_data = pack_int8_to_int16(StickyTime[0],StickyTime[1]);    
 set_pvar(SPVAR_7,pval_data);
 pval_data = pack_int8_to_int16(RateOfFire[0],RateOfFire[1]);    
 set_pvar(SPVAR_8,pval_data);
 set_pvar(SPVAR_9,StrafeShotTime); 
 set_pvar(SPVAR_10,GeneralSens         ); 
 set_pvar(SPVAR_11,AdsSens             ); 
 set_pvar(SPVAR_12,FireSens            ); 
 set_pvar(SPVAR_13,AdsFireSens         );
 
 pval_data = pack_usigned(pval_data, ToggleTaylorAR[0]   ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleTaylorAR[1]   ,1, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV3[0]       ,2, 1);
 pval_data = pack_usigned(pval_data, ToggleAAV3[1]       ,3, 1);
 pval_data = pack_usigned(pval_data, ToggleBattsStickyAim[0],4, 1);
 pval_data = pack_usigned(pval_data, ToggleBattsStickyAim[1],5, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[0]     ,6, 1);
 pval_data = pack_usigned(pval_data, ToggleRapidFire[1]     ,7, 1);
 pval_data = pack_usigned(pval_data, ToggleStrafeShot[0]    ,8, 1);
 pval_data = pack_usigned(pval_data, ToggleStrafeShot[1]    ,9, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[0]    ,10, 1);
 pval_data = pack_usigned(pval_data, ToggleHoldBreath[1]    ,11, 1);
 set_pvar(SPVAR_14,pval_data);
 
 pval_data = pack_usigned(pval_data, ToggleTaylorSens    ,0, 1);
 pval_data = pack_usigned(pval_data, ToggleProneShot    , 1, 1);
 pval_data = pack_usigned(pval_data, ToggleJumpShot     , 2, 1);
 pval_data = pack_usigned(pval_data, ToggleBlockRumble  , 3, 1);
 pval_data = pack_usigned(pval_data, ToggleAutoRun      , 4, 1);
 set_pvar(SPVAR_15,pval_data);

 pval_data = pack_int8_to_int16(ActivateIndividualBtnIdx,Buttons);    
 set_pvar(SPVAR_16,pval_data);
 
 pval_data = pack_int8_to_int16(WeaponName[0],WeaponName[1]);     
 set_pvar(SPVAR_17,pval_data);
 
 pval_data = pack_int8_to_int16(WeaponCategory[0],WeaponCategory[1]);     
 set_pvar(SPVAR_18,pval_data);
 
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[0],ActivatePressBtnIdx [0]);     
 set_pvar(SPVAR_19,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[1],ActivatePressBtnIdx [1]);     
 set_pvar(SPVAR_20,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[2],ActivatePressBtnIdx [2]);     
 set_pvar(SPVAR_21,pval_data);
  
 pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[3],ActivatePressBtnIdx [3]);     
 set_pvar(SPVAR_22,pval_data);
  
 pval_data = pack_int8_to_int16(ActivatePressBtnIdx1[4],ActivatePressBtnIdx [4]);     
 set_pvar(SPVAR_23,pval_data);
 
 }
const uint8 WeaponNameRange[][] = { 
{ 0 , 3 },// AR \\
{ 0 , 3 },// SMG \\
{ 0 , 2 },// AML \\
{ 0 , 2 },// LMG \\
{ 0 , 2 },// SEMI\\
{ 0 , 2 },// SR \\
{ 0 , 2 },// BG \\
{ 0 , 2 } // UTI \\
}
const string WeaponCatNames[] = {
"Assault R", "SMG", "AML", "LMG", "Semi Auto", "SniperRifle", "BeltGun", "UTI", ""};
const string AssaultWeaponNames    [] = {"M5A3","AK24","SCAR-M GL","AC-42",""};
const string SubMachineWeaponNames [] = {"PBX-45","PP-29","MP-9","K-30",""};
const string AmlWeaponNames        [] = {"LCMG","PKP-BP","DDM4",""};
const string LmgWeaponNames        [] = {"SAW-K","PKP Pecheneg","KAC LWAMG",""}; 
const string SemiWeaponNames       [] = {"DM7","SVK","VCAR",""};
const string SniperRifleWeaponNames[] = {"SWS-10","DXR-1","NTW-50",""};
const string BeltGunWeaponNames    [] = {"G57","MP28","M44",""}; 
const string UtiWeaponNames        [] = {"MCS-800","GVT 45-70","12M AUTO",""};

const int16 AssaultRifle[][] = { 
{ 35 ,-10},//M5A3
{ 30 , -3},//AK24
{ 44 , -1},//SCAR-M GL
{ 39 , -7} //AC-42
}; 
const int16 SubMachine[][] = { 
{ 40 , -5},//PBX-45
{ 41 , -4},//PP-29
{ 35 , -2},//MP-9
{ 37 ,  9} //K-30
}; 
const int16 Aml[][] = { 
{ 39 , 6 },//LCMG
{ 48 , 4 },//PKP-BP
{ 37 , 0 },//DDM4
{ 40 , 0 } //NULL
}; 
const int16 Lmg[][] = { 
{ 15 , 0 },//SAW-K
{ 15 , 0 },//PKP Pecheneg
{ 15 , 0 },//KAC LWAMG
{ 15 , 0 } //NULL
}; 
const int16 Semi[][] = { 
{ 19 , 0 },//DM7
{ 15 , 0 },//SVK
{ 15 , 0 },//VCAR
{ 15 , 0 } //NULL
}; 
const int16 SniperRifle[][] = { 
{ 15 , 0 },//SWS-10
{ 15 , 0 },//DXR-1
{ 15 , 0 },//NTW-50
{ 15 , 0 } //NULL
}; 
const int16 BeltGun[][] = { 
{ 15 , 0 },//G57
{ 19 , 0 },//MP28
{ 15 , 0 },//M44
{ 15 , 0 } //NULL
}; 
const int16 Uti[][] = { 
{ 15 , 0 },//MCS-800
{ 15 , 0 },//GVT 45-70
{ 15 , 0 },//12M AUTO
{ 15 , 0 } //NULL 
}; 

int introScrollTimer, introScrollPauseTime;
int introScrollTextOffset;
int introScrollTextIndex;
int introScrollCharIndex = 1;

function MenuScroll() {
    introScrollTimer += get_rtime();
    if(introScrollTimer >= introScrollPauseTime) {
        introScrollPauseTime = 30;
        for (introScrollTextIndex = 1; introScrollTextIndex <= 18; introScrollTextIndex++) {
            if (introScrollTextIndex + introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + (introScrollTextOffset - sizeof(MENU_SCROLL_TEXT))]);
            }
            else {
                putc_oled(introScrollTextIndex, MENU_SCROLL_TEXT[introScrollTextIndex + introScrollTextOffset]);
            }
        }
        puts_oled(1, 53,OLED_FONT_SMALL, introScrollTextIndex, OLED_WHITE);
        introScrollTextOffset++;
        if (introScrollTextOffset >= sizeof(MENU_SCROLL_TEXT)) {
            introScrollTextOffset = 0;
        }
        introScrollCharIndex--;
        if (introScrollCharIndex < 1) {
            introScrollCharIndex = 18;
            introScrollPauseTime = 2000;

        }
        introScrollTimer = 0;
    }
}
const uint8 MENU_SCROLL_TEXT[] = {
//    1			2		   3		4	     5		     6		   7		  8		     9         10	       11	   12		  13	  14		 15		  16		17        18
     _space, _left,	   _space,   _right,	_space,    _N,	      _e,         _x,       _t,        _space,    _M,      _o,       _d,     _slash,    _V,      _a,       _l,       _space,        
     _space,   _o,	     _r,     _space,    _up,	  _space,	  _down,	 _space,	_F,        _o,		  _r,	   _space,   _T,     _o, 	     _g,	  _g,		_l,	      _e,
     _space, _X,       _slash,       _A,       _space,     _F,	  _o,	      _r,		_space,	   _E,	      _d,	   _i,		  _t,		 _space,	 _M,	  _e,		_n,      _u,
     _space, _space,  _O,        _slash,   _B, _space,     _T,       _o,       _space,     _E,       _x,         _i,       _t,      _space,    _M,     _e,        _n,     _u,
     _space, _Y,_triangle, _space, _C,_h,_a,_n,_g,_e, _space, _P,_r,_o,_f,_i,_l,_e,
     _space,   _H,	  _o,	    _l,		_d,	      _space,	 _L,	    _2, 	    _slash,    _L,	  _T,    _space,		_left,       _space, _O, _r, _space,_right,
     _space,   _T,	   _o,    _space,   _A,	    _d, _j,	      _u,	 _s,	_t,     _space,		   _V,	  _a,		 _l, 	     _u,	  _e,		_s,	     _space,
     _space, _O,	   _r,     _space,    _B,   _u,		_t,	      _t,		 _o,		_n,	        _space,		   _C,		  _h,		 _o,	 _i,	  _c,		_e,      _s
};    

define  _0 = 48,   _A = 65,   _K = 75,   _U =  85,   _e = 101,   _o = 111,   _y       = 121,    _plus      = 43, _slash     = 47 , _dot     =  46;
define  _1 = 49,   _B = 66,   _L = 76,   _V =  86,   _f = 102,   _p = 112,   _z       = 122;
define  _2 = 50,   _C = 67,   _M = 77,   _W =  87,   _g = 103,   _q = 113,   _space   =  32;
define  _3 = 51,   _D = 68,   _N = 78,   _X =  88,   _h = 104,   _r = 114,   _bang    =  33;
define  _4 = 52,   _E = 69,   _O = 79,   _Y =  89,   _i = 105,   _s = 115,   _quote   =  34;
define  _5 = 53,   _F = 70,   _P = 80,   _Z =  90,   _j = 106,   _t = 116,   _hash    =  35;
define  _6 = 54,   _G = 71,   _Q = 81,   _a =  97,   _k = 107,   _u = 117,   _dollar  =  36;
define  _7 = 55,   _H = 72,   _R = 82,   _b =  98,   _l = 108,   _v = 118,   _percent =  37;
define  _8 = 56,   _I = 73,   _S = 83,   _c =  99,   _m = 109,   _w = 119,   _and     =  38;
define  _9 = 57,   _J = 74,   _T = 84,   _d = 100,   _n = 110,   _x = 120,   _tick    =  39;
define _left     = 133,   _right = 134,_up       = 131,_down     = 132,_cross    = 127, _circle   = 128, _triangle = 130;
/*
╔════════════════════════════════════════════════════════════════════════════════════════╗    																			  
║   d88888b db    db d8888b. db       .d88b.  d888888b d888888b      db    db d888888b   ║
║   88'     `8b  d8' 88  `8D 88      .8P  Y8.   `88'   `~~88~~'      `8b  d8' `~~88~~'   ║
║   88ooooo  `8bd8'  88oodD' 88      88    88    88       88          `8bd8'     88      ║
║   88~~~~~  .dPYb.  88~~~   88      88    88    88       88            88       88      ║       
║   88.     .8P  Y8. 88      88booo. `8b  d8'   .88.      88            88       88      ║    
║   Y88888P YP    YP 88      Y88888P  `Y88P'  Y888888P    YP            YP       YP      ║   
╚════════════════════════════════════════════════════════════════════════════════════════╝		
			  © EXPLOIT YT FOR CRONUS ZEN, 2019-2021. ALL RIGHTS RESERVED.*/