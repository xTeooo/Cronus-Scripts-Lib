define Fire     = PS4_R2; //PS4_R2
define Ads      = PS4_L2; //PS4_L2
define N_Weapon = PS4_R1; //PS4_R1
define P_Weapon = PS4_L1; //PS4_L1
define Pickaxe  = PS4_TRIANGLE;  //PS4_TRIANGLE
define Reload   = PS4_SQUARE  //PS4_SQUARE
define Jump     = PS4_L3;  //PS4_CROSS
define Crouch   = PS4_CROSS; //PS4_R3
define Ping     = PS4_RIGHT; //PS4_RIGHT
define Edit     = PS4_CIRCLE;  //PS4_CIRCLE
define Select   = PS4_R2; //PS4_R2   
define Confirm  = PS4_TOUCH;  //PS4_CIRCLE
define Reset    = PS4_R3; //PS4_R3
define Build    = PS4_CIRCLE;  //PS4_CIRCLE
define Switch   = PS4_RIGHT;//PS4_RIGHT
define Wall     = PS4_R2; //PS4_R2
define Floor    = PS4_R1; //PS4_R1
define Ramp     = PS4_L2; //PS4_L2
define Roof     = PS4_L1; //PS4_L1
define Up       = PS4_UP; //PS4_UP
define Down     = PS4_DOWN; //PS4_DOWN
define Left     = PS4_LEFT; //PS4_LEFT
define Right    = PS4_RIGHT;//PS4_RIGHT;
define RX       = PS4_RX;   //PS4_RX;
define RY       = PS4_RY;   //PS4_RY;
define LX       = PS4_LX;   //PS4_LX;
define LY       = PS4_LY;   //PS4_LY;
define On       = TRUE;
define Off      = FALSE;



int InstaEditReset  = FALSE;
int QuickEditAssist = TRUE;
int InstaFastReset  = FALSE;
int DoubleEdits     = TRUE;



define EditHold     =  On;



int EditHoldTime   = 100;//IF YOU HAVE HOLD TIME ON YOU EDIT BUTTON MATCH THE TIME
int EditDelay      = 15; //DELAY BEFORE EDIT ASSIST BUTTON TRIGGERS HOLDING OF SELECT
int EditSense      = 45; //SET IN GAME EDIT SENSE TO MAXIMUM SENSE 5.0X (SET 0 - 100)



int Edit1,Edit2;
int EditT;



int Shunt;



define EditAssist    = PS4_TOUCH;   //EDIT BUTTON IN GAME CANNOT HAVE HOLD TIME (USED AS EDIT ASSIT BUTTON)
define FastReset     = PS4_R3; //ONE BUTTON RESET DOES MATCH IN GAME TO ANYTHING
define DoubleEdit    = PS4_RIGHT;



int EditSensitivity = FALSE; //IF YOU WANT EDIT SENSITIVITY CONTROL USE THESE TWO SETTINGS (ON/OFF HERE)
int AA1    			       = TRUE; 
int AA2                    = TRUE; 
int AA3  				   = TRUE;
int AA4                    = TRUE;
int NOADSAA				   = TRUE;
int aaon 				   = TRUE;
int Antirecoil             = TRUE;
int Strafe     			   = FALSE;
int RapidFire	  		   = TRUE;
int DropShot 			   = FALSE;
int AA_Strength  		   = 15; 
int NOADSAA_Strength       = 14; 
int tt_aim_speed           = 100;
int AA4_HOLD       		   = 260;
int AA4_RELEASE   	       = 5;
int AntiRecoil             = 22;
int ast    			       = 74;
int aaValue				   = 11;
int SPEED 				   = 100;
int SnapShot_hold; 
int SnapShot_rest;
int Anti_Recoil;  
int interval_t, angle, angle2;
int x_stick, y_stick, cos_angle, sin_angle;
int edit = PS4_TOUCH;
int confirm = PS4_TOUCH;
int pickaxe = PS4_TRIANGLE;
int PerfectAccuracy  = TRUE;//100% Accuracy - R2/RT
int STICKY__AIM    = TRUE;  //Incremental Aim Assist - L2
int aa__shake=17;
int aa_delay=20;
int release=25;
int rumble_type = RUMBLE_A;   //RUMBLE
 



main {

	swap(PS4_TOUCH,PS4_SHARE);
	block_rumble();
	
	if(get_val(edit)) {
	    combo_run(off);
	}
	if (get_val(PS4_R2)) {
  PerfectAccuracy = !PerfectAccuracy;
  combo_run(cPerfectAccuracy);
set_val(PS4_R2, 0);
      } else {
  combo_stop(cPerfectAccuracy);
}
if(event_press(PS4_L2)){
   rumble_A_if_true(STICKY__AIM);
   STICKY__AIM =! STICKY__AIM;
   }
if(STICKY__AIM){
    if(get_val(PS4_L2) > 98 && (abs(get_val(9)) > 19 ^^ abs(get_val(10)) > 19)) combo_run(AA_XY);
    else combo_stop(AA_XY);
}

	if (QuickEditAssist) {
	 	if (!get_ival(Ads) && get_ival(EditAssist)) {
			EditAssist();
			Edit1 = On;
		}

		if (event_release(EditAssist)) {
			combo_run(Confirm);
			EditT = Off;
			Edit1 = Off;
		}
	}

    if (InstaFastReset && !get_ival(Ads) && event_press(FastReset)) { 
        Shunt = FastReset;
        combo_run(FastReset);
    }

    if (InstaEditReset) {
        if (EditHold && get_ival(Edit) && get_ptime(Edit) > EditHoldTime || !EditHold && event_press(Edit)) {
                Edit1 = On;
                Edit2 = On;
        }

        if (Edit2) {
            if (event_release(Select)) {
                combo_run (Confirm);
    			Edit1 = Off;
                Edit2 = Off;
    		}
            if (DoubleEdits && event_press(DoubleEdit)) {
                Shunt = DoubleEdit;
                combo_run(DoubleEdit);
                Edit1 = Off;
                Edit2 = Off;
            }
        }
    }

    if (Edit1 || Edit2) {
        if (EditSensitivity) {
            stickize (RX,RY,EditSense);
        }

            if (event_press(Reset)) {
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off;
            }

                if (event_press(Pickaxe) || event_press(Build) || event_press(Ads)) {
                    Edit1 = Off;
                    Edit2 = Off;
                }
    }

    if(get_val(pickaxe))
        combo_run (waiit);

    if(get_val(confirm))
        combo_run (waiit);
    
    if(AA3){
        if(get_val(PS4_L2) && get_val(PS4_R2)){
        sensitivity(PS4_RX,0,tt_aim_speed); 
        sensitivity(PS4_RY,0,tt_aim_speed);}}
    
    if(AA1){   
    if(get_val(PS4_L2)> 1){ combo_run(Auto_Aim);
        Shake();} 

    if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19)
        combo_stop(Auto_Aim);}

    if(DropShot){ 
        if(get_val(PS4_R3) && get_ptime(PS4_R3) > 125){
            combo_run(CROUCH);}}
    
    if(NOADSAA){   
        if(get_val(PS4_R2)> 1){ combo_run(Auto_Aim2);}
        if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19)
            combo_stop(Auto_Aim2);
    }
    
    if(AA2){
        if(get_val(PS4_L2) && get_val(PS4_R2)){
        SnapShot_hold = 140;
        SnapShot_rest = 0;
        combo_run(SnapShot);
    }
    else if(combo_running(SnapShot))
        combo_stop(SnapShot);
    }

    if(Antirecoil){
        if(get_val(PS4_L2) && get_val(PS4_R2))
            combo_run(AntiRecoil);
        if(abs(get_val(PS4_RY)) > 36 || abs(get_val(PS4_RX)) > 36)
            combo_stop (AntiRecoil);
    }

    if(AA4){
        if(get_val(PS4_L2)> 1){
            combo_run(AA4);}
        if(event_release(PS4_L2)){ 
            combo_stop(AA4);
        }
    }

    if(get_val(PS4_L2) && event_press(PS4_RIGHT)){
        RapidFire = !RapidFire;

	    if(RapidFire && get_val(PS4_R2))
	        combo_run(Rapiid_Fire);

	    if(Strafe){
	        if(get_val(PS4_L2) > 95 && get_val(PS4_R2)){
	            combo_run(Auto_Strafe);}
	        if(abs(get_val(PS4_LX)) > 40 || abs(get_val(PS4_LY)) > 40){
	            combo_stop(Auto_Strafe);
	        }
	    }
    }

}



combo Auto_Aim {
	set_val(10, (AA_Strength)); wait(10)
	set_val(9, (AA_Strength)); wait(10)
	set_val(10, AA_Strength * -1); wait(10)
	set_val(9, AA_Strength * -1); wait(10)}



combo Auto_Aim2 {
	set_val(10, (NOADSAA_Strength)); wait(10)
	set_val(9, (NOADSAA_Strength)); wait(10)
	set_val(10, NOADSAA_Strength * -1); wait(10)
	set_val(9, NOADSAA_Strength * -1); wait(10)
}



combo SnapShot { 
	set_val(PS4_L2, 100);
	wait(SnapShot_hold);
	set_val(PS4_L2, 0);
	wait(SnapShot_rest);}



combo AA4 {//.
	set_val(PS4_L2, 100);
	wait(AA4_HOLD);
	set_val(PS4_L2, 0);
	wait(AA4_RELEASE);}



combo AntiRecoil { 
	if(get_val(PS4_R2)) {
	Anti_Recoil = get_val(10) + AntiRecoil;
	if(Anti_Recoil > 100) Anti_Recoil = 100;
	set_val(10, Anti_Recoil);}}
	combo Auto_Strafe {
	set_val(PS4_LX,-30);
	wait(ast);
	set_val(PS4_LX, 30);
	wait(ast);
	if(ast < 160){ast = ast + 10;}
	else {ast = 100;}}
	combo CROUCH {
	set_val(PS4_R3,100);
	wait(75);
	set_val(PS4_R3,0);
	wait(50);}



combo FastReset {
    set_val(EditAssist,100);
    wait(50)
    set_val(Reset,100);
    wait(50);
    combo_run(Confirm);
}
combo AA_XY {
    set_val(10,xy_val(10,aa__shake));
    wait(aa_delay);
    set_val(9,xy_val(9,aa__shake));
    set_val(11,xy_val(11,aa__shake));
    wait(aa_delay);
    set_val(10,xy_val(10,aa__shake * -1));
    wait(aa_delay);
    set_val(9,xy_val(9,aa__shake * -1));
    set_val(11,xy_val(11,aa__shake * -1));
    wait(aa_delay);
}


combo DoubleEdit {
    set_val(Select,100);
    wait(20);
    set_val(Confirm,100);
    wait(20);
    wait(100);
    set_val(EditAssist,100);
    wait(20);
    set_val(Select,100);
    wait(20);
    set_val(Confirm,100);
    wait(20);
}



combo InstantReset {
    wait(20)
    combo_run(Confirm);
}



combo Confirm {
    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}



combo Rapiid_Fire {
	set_val(PS4_R2, 100); 
	set_val(PS4_R2, 0); 
	wait(1);
}



combo waiit {
	wait(500);
	AA1				       = TRUE;
	AA2      			   = TRUE;
	AA3					   = TRUE;
	AA4		               = TRUE;
	Antirecoil             = TRUE;
	Strafe				   = FALSE;
	RapidFire	  		   = FALSE;
	NOADSAA				   = TRUE;
	DropShot 			   = TRUE;}



combo off {
	AA1    				   = TRUE;
	AA2     			   = TRUE;
	AA3					   = TRUE;
	AA4		               = TRUE;
	Antirecoil             = TRUE;
	Strafe     			   = FALSE;
	RapidFire	  		   = FALSE;
	NOADSAA				   = TRUE;
	DropShot 			   = TRUE;
	wait(100);
}
combo cPerfectAccuracy {
set_val(PS4_R2,100);
wait(100);
wait(50);
set_val(PS4_R2,100);
}



const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};



function Shake() {
angle2 = (angle2 + SPEED) % 360;
Set_polar(2,angle2, aaValue);
} 



function EditAssist () {

    EditT += get_rtime();
        if (get_ival(EditAssist)) {
            if (EditT >= EditDelay)
                  Press(Select);
          }
}



function Press (Button) {

    if (get_ival(Button))
        return;
            set_val(Button, 100);
}
function rumble_A_if_true(var) {
    if (var) rumble_type = RUMBLE_A;
    else rumble_type = RUMBLE_B;
    combo_run(VIBRATE);
}
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < release)
    return f_val;
    return get_val(f_axis);
}
combo VIBRATE {
    set_rumble(rumble_type, 0);
    wait(1);
    reset_rumble();
}



function Set_polar(stick, angle, radius){
x_stick = 8 + stick; 
y_stick = 9 + stick;
if(angle < 0) angle = 360 + (angle % 360);
angle = (angle + 90) % 360;
radius = clamp(radius, 0, 100);
sin_angle = Polar_Array[angle];
cos_angle = Polar_Array[(angle + 90) % 360];
offset(x_stick, inv(radius * cos_angle / 100));
offset(y_stick, inv(radius * sin_angle / 100));
return;}



function offset(int axis, int offset_val) {
set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return
}