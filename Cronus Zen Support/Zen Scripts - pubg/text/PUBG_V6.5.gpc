/*
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 									**** PUBG - CRONUS ZEN for Controller + MnK ****                              							
                               						 	Ver 6.5
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜                                						

          										  ***** CREDITS *****
							Based on PUBG ITALIA ZEN EDITION ENGLISH VERSION V6 by ANDRY 85
										https://www.paypal.com/paypalme/andry1985

						For help, check: https://discord.gg/cronuszen and visit Zen Scripts / PUBG

          										  ***** FEATURES *****

With this script you can select and set all the weapons through the menu, for each weapon you can set the vertical recoil,
there is stance tracking, you can also adjust the reduction of the recoil if you are kneeling or lying down.

You must configure the Recoil Values and Timings for each gun, these values change according to your in-game settings and
are unique to each user.
 
In the script you can also set the recoil boost for 2x/3x/4x/6x/8x scopes.

Rapid fire can be activated on the weapons that allow it, and then for each profile you can enable T-Bag, Jumpshot, Strafe,
Autolean, Peekshot, Crouch on ADS.
 
Hold-breath, if activated, works on all profiles; while the Quickscope, if activated, works only if the sniper is selected.

There is Drive and Grenade mode, allowing you to perform these actions without activating other mods by mistake.

There is option to fast toogle multiple mods. Within the script you have to set whether you play using a controller or M&K. 
If you play with a controller, you can also connect a keyboard to perform a quick profile reset and use the keypad (NUMPAD)
to equip weapons and sights quickly, the keys assigned to each weapon have been written below (They can also be modified
in the M&K QUICK SELECT	section).
 
* Fast Gun Selection via Keyboard (Default Values):
	ACE 32 			Key 1
	AK47		    Key 2
	M416	        Key 3
	SCAR_L 		    Key 4
	K2 			    Key 5
	UZI  		    Key 6
	AUG 		    Key 7
	G36 		    Key 8
	QBZ		        Key 9
	BERYL 			Key .
	VECTOR 			Key *
	P90 		    Key /
	MP5K			Key 0
	Sniper 			Key  PAGEUP
	SLR 			Key  PAGEDOWN
	SKS				Key  FIND
	Mini 14 		Key  CANC
		
* Fast Scope Selection via Keyboard (Default Values):
	Increase Scope  Key + (Numpad)
	Decrease Scope  Key - (Numpad)
	Reset   		Enter (Numpad)

* RESET Key, if assigned in Fast Toggle, resets the Primary and Secondary profiles to Generic Profile with 1x Scope

PROFILE COLORS
	- Primary Profile: GREEN 
	- Secondary Profile: RED
	- Looting Profile: BLUE

QUICK ENABLING
	- Auto Lean = Hold XB1_LT and press XB1_UP for more than 300ms				
	- Rapid Fire = Hold XB1_LT and press XB1_LEFT for more than 300ms
	- Strafe = Hold XB1_LT and press XB1_RIGHT for more than 300ms
	- Peek Shot =  Hold XB1_LT and press XB1_DOWN for more than 300ms
	- T-Bag = Hold XB1_B (Crouch Button) and press XB1_DOWN for more than 300ms
	- Crouch on ADS = Hold XB1_A (Jump Button) and press XB1_RIGHT for more than 300ms
	- Drive Mode = Hold XB1_LT and double tap XB1_RIGHT. Press B to exit vehicle and drive mode simultaneously
    - Grenade Mode = Activated with XB1_RIGHT and Deactivation with XB1_Y

Finally, you can enable or disable the Screensaver in the Mod Menu
 

|=============================================================================================================================|                                          
| Please READ THE INSTRUCTIONS before programming the script on your Zen. 			  										  |
| In the following section you can change some buttons according to your personal preferences.                                |
| TRUE means ON, FALSE means OFF 												   									 		  |                 
|=============================================================================================================================|

/* Choose your 1 button to change profile (Usually same button to change weapons) */
	define button_change_weapon = XB1_Y;

/* Resync Profiles */										    		   
	define primary_resync_button = XB1_LT;
	define secondary_resync_button = XB1_Y;

/* Generic (Looting) is an additional profile (#3) you can choose to avoid activating some modes by mistake   
   To enter Looting profile in game press both buttons defined below
   DO NOT USE the same button you use to switch between primary and secondary weapon */ 
   	define pubg_generic = XB1_RS;
   	define pubg_generic_2 = XB1_DOWN;

/* If you are not using the Default keys you need to change the keys below */
 	define crouch_button = XB1_B; /* Crouch */
	define jump_button = XB1_A; /* Jump */

/*  How to Use the Zen Menu:
    - Enter menu mode: Press LT and Press OPTIONS/MENU
    - To edit any mod in the menu: Press A to edit
    - Navigate between mods in the Zen Menu: Press right or left via the arrows on the D-PAD
    - Enable or disable mods: Press UP to ACTIVATE, Press DOWN to DISABLE
    - Change Primary and Secondary weapon in the menu: Press Y
    - Mod Edit mode in Zen Menu: Press A to Edit, Press B to Exit
    - To Edit patameters: Keep LT pressed and RIGHT to increase +1
                                              LEFT to decrease -1
                                              UP to increase +10
                                              DOWN to decrease -10
    - Navigate between editable values in Edit mode: Click Right or Left
    - Save changes: Press XBOX Button
    - Exit Menu Mode after saving: Hold LT and press OPTIONS/MENU
    - Disable ALL activated mods: Hold LT and double click SHARE/VIEW
*/


/*=============================================================================================================================                                          
| 															SCRIPT				  											  |
| 							DO NOT TOUCH FROM HERE DOWN UNLESS YOU UNDERSTAND WHAT YOU ARE DOING						      |                 
|=============================================================================================================================| */

// Text to display
	const string TITLE = "PUBG V6.5";
	const string PRESS_A_TO_CONTINUE = "Press A to EDIT";
	const string PRESS_A_TO_GO = "Press A to CONFIRM";
	const string TOGGLE_ONLY = "Toggle Only";
	const string ALL_PROFILES = "All Profiles";
	const string NOT_AVAILABLE = "Unavailable";
	const string GUN_IN_USE = "Current Weapon";
	const string OFF = "OFF";
	const string ON = "ON";
	const string SAVE = "SAVE";
	const string DRIVEON = "Drive ON";
	const string DRIVEOFF = "Drive OFF";
	const string NADEON = "Grenade ON";
	const string NADEOFF = "Grenade OFF";
	const string PRESS_A_TO_ASSIGN = "Press A to ASSIGN";
	const string PRESS_KEY_TO_USE = "Press Key To USE";
	const string PRESS_B_TO_GO = "Press B To EXIT";
	const string CONTROL_OR_MK = "Controller or M&K";
	const string Position[] = { "Standing", "Crouch", "Prone", ""}
	const string Weapons[] = {
	//  0		  1		   2		3		4        5       6        7     8       9     10     11       12      13      14
	"Generic", "BERYL", "ACE32", "AK47", "GROZA", "M416", "SCAR-L", "K2", "G36C", "QBZ", "AUG", "P90", "UZI", "VECTOR", "MP5K",
	//
	//15      16       17       18       19      20	    21	    22        23       24      25     26      27     28
	"MP9", "PP-19", "TOMMY", "UMP45", "DP-28", "M249", "MG3", "M16A4", "MK47", "MINI14", "MK12", "MK14", "QBU", "SKS",
	//
	//29   	 30	     31        32      33
	"SLR", "VSS", "SHOTGUN", "O12", "SNIPER", ""};

	const string Optics[] = {
	//0    1	 2	   3	 4	   5
	"1x", "2x", "3x", "4x", "6x", "8x", ""};

	const string PROFILE_1 = "Primary";
	const string PROFILE_2 = "Secondary";
	const string PROFILE_3 = "Looting";

// Keyboard Mapping
	const string MKbutton[] = {
	"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X",
	"Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "ENTER", "ESC", "BACKSPACE", "TAB", "SPACE", "MINUS", "EQUAL",
	"LEFTBRACE", "RIGHTBRACE", "BACKSLASH", "HASHTILDE", "SEMICOLON", "APOSTROPHE", "GRAVE", "COMMA", "DOT", "SLASH", "CAPSLOCK",
	"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "SYSRQ", "SCROLLLOCK", "PAUSE", "INSERT", "HOME",
	"PAGEUP", "DELETE", "END", "PAGEDOWN", "RIGHT", "LEFT", "DOWN", "UP", "NUMLOCK", "KPASTERISK", "KPMINUS", "KPPLUS", "KPENTER",
	"KP1", "KP2", "KP3", "KP4", "KP5", "KP6", "KP7", "KP8", "KP9", "KP0", "KPDOT", ""};
	const uint8 LayoutsMK[] = {
	KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R,
	KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_0,
	KEY_ENTER, KEY_ESC, KEY_BACKSPACE, KEY_TAB, KEY_SPACE, KEY_MINUS, KEY_EQUAL, KEY_LEFTBRACE, KEY_RIGHTBRACE, KEY_BACKSLASH,
	KEY_HASHTILDE, KEY_SEMICOLON, KEY_APOSTROPHE, KEY_GRAVE, KEY_COMMA, KEY_DOT, KEY_SLASH, KEY_CAPSLOCK, KEY_F1, KEY_F2, KEY_F3,
	KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_F10, KEY_F11, KEY_F12, KEY_SYSRQ, KEY_SCROLLLOCK, KEY_PAUSE, KEY_INSERT,
	KEY_HOME, KEY_PAGEUP, KEY_DELETE, KEY_END, KEY_PAGEDOWN, KEY_RIGHT, KEY_LEFT, KEY_DOWN, KEY_UP, KEY_NUMLOCK, KEY_KPASTERISK,
	KEY_KPMINUS, KEY_KPPLUS, KEY_KPENTER, KEY_KP1, KEY_KP2, KEY_KP3, KEY_KP4, KEY_KP5, KEY_KP6, KEY_KP7, KEY_KP8, KEY_KP9, KEY_KP0,
	KEY_KPDOT};
	const string PADMK[] = { "Controller", "M&K", ""}
	const string fastoogle[] = {
		"Rapid Fire", "Burst Fire", "Strafe", "T-Bag", "Jump Shot", "Peek Shot", "Auto Lean", "Crouch ADS", "Auto Run", "Reset", ""}

// Mod Names (modName_idx = i)
	const string WEAPON = "Weapon";
	const string ANTIRECOIL = "Anti Recoil";
	const string OPTICS = "Scope";
	const string OPTICSET = "Scope Set";
	const string RAPIDFIRE = "Rapid Fire";
	const string BURSTFIRE = "Burst Fire";
	const string STRAFE = "Strafe";
	const string TBAG = "T-Bag";
	const string JUMPSHOT = "Jump Shot";
	const string HOLD_BREATH = "Hold Breath";
	const string PEEK = "Peek Shot";
	const string AUTOLEAN = "Auto Lean";
	const string AUTORUN = "Crouch ADS";
	const string SWAP = "Swap Tr/Bu";
	const string QUIK = "Quickscope";
	const string AUTORUN1 = "Auto Run";
	const string FASTTOGLE = "M&K Toggle";
	const string PADORMK = "Input";
    const string SCREENSAVER = "ScreenSaver";

// Index to find Mod Name string - switchable in game with left/right in ModMenu 
	int modName_idx;

// modName # of the last Mod Name string - Used for cycle modName_idx
	define LAST_MODNAME_STRING = 18;

// # of the last modName_idx that has a value that can be edited
	define LAST_EDITABLE_STRING = 4;

// Value Names (valName_idx = i)
	const string X1 = "1x";
	const string X2 = "2x";
	const string X3 = "3x";
	const string X4 = "4x";
	const string X6 = "6x";
	const string X8 = "8x";
	const string CURRENT_OPTIC = "Scope";
	const string ANTIRECOIL_START = "ARV Start";
	const string ANTIRECOIL_MID = "ARV Mid";
	const string ANTIRECOIL_END = "ARV End";
	const string ANTIRECOIL_TIME = "ARV Time";
	const string RECOIL_HIP = "Hip";
	const string RECOIL_CROUCH = "Crounch";
	const string RECOIL_PRONE = "Prone";
	const string RATE_OF_FIRE = "Rounds/sec";
	const string BURSTFIRE_HOLD = "BF Hold";
	const string BURSTFIRE_RELEASE = "BF Release";
	const string AMP_STRAFE = "Amp strafe";
	const string SPEED_STRAFE = "Vel strafe";

// Index to find Value Name string - switchable in game with left/right in ModEdit 
	int valName_idx;
	define AMOUNT_OF_VALNAME_IDX = 18;

// Values for Profile 3 (Looting)
	int antirecoil_start[34];
	int antirecoil_mid[34];
	int antirecoil_end[34];
	int antirecoil_time[34];
	int rate_of_fire[34];
	int weapon_name[33];
	int correction_opticsweap[34]

/* Used to define Profiles and also define # of profile to find, edit, and display the right index */
	int profile_idx;

// Multi toggles
	int toggle_antirecoil[3];
	int toggle_rapidfire[34]; 
	int toggle_burstfire[3];
	int toggle_holdbreath;
	int toggle_jumpshot[3];

// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 3;

// Amount of Multi toggles - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 4;

// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57};
						      // 0   1   2   3   4   5   6   7   8   9  (Column numbers)

// Variables for function number_to_string() 
	int i;
	int c, c_val;
	data(
		// Green       Red       SkyBlue       Blue         
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,
		// Yellow     White        Pink         OFF        
		0, 3, 3, 0, 3, 3, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0);

// Refresh OLED
	int display_title = TRUE;
	int display_new; 
	int display_black;
	int pubg_loot_profile;

// BurstFire
	int burstfire_hold;
	int burstfire_release;

// ModMenu / ModEdit / KillSwitch
	int ModMenu;	
	int ModEdit;
	int ModToogle;
	int KillSwitch;
	int count_black;
	int profile_1or2;
 
// Mod values   
	int controller_or_mk;
    int screen_saver;
	int p, inc, inc_2, pr, pr_2, vm, vm_2; 
	int vm_count, vm_loops, p_count, v, ar_y;
	int quickscope; 
	int optic[6];
	int auto_run;
	int x1;
	int x2;
	int x3;
	int x4;
	int x6;
	int x8;
	int optic_recoil;
	int crouch_value;
	int hip_value;
	define movy = XB1_LY;
	define movx = XB1_LX;
	define adsy = XB1_RY;
	define adsx = XB1_RX;

// Dropshot   
	int tbag_on[3];   
	int peekshot_on[3];
	int leanright_on;
	int leanleft_on:
	int autolean_on[3];
	int autodown_on_ads[3];

// Strafe 
	int strafe_on[3];       
	int amp_strafe[3];
	int vel_strafe[3];

// Change Weapon 1 or 2
	define weapon_change = TRUE;
	define two_button_press = TRUE;

// Loot
	int loot = TRUE;
	int DriveMode;
	int NadeMode;

// Toggles
	int swap_on;
	int quickscope_on;
	int hold_time;                                                    
	int rest_time;
	int led_on;
	int led_off;

// Rainbow LED
	int incled = 1, decled, colorledx[3];
	int MAX_TIME_TO_CHECK = 5000;
	int double_tap;
	int q;											
	int double__tap[30];
	int MK; 
	int KBStates_Press[8];
	int KBStates_Release[8];
	int bitindex, varindex;
	int fast_toogle;
	int rapid_mk, burst_mk, strafe_mk, tbag_mk, jump_mk, peekshot_mk, autolean_mk, crouch_ads_mk, autorun_mk;
	int RESET;
	int CharacterPosition;
	int prone_value;
	define CharacterStanding = 0;
	define CharacterCrouch = 1;
	define CharacterProne = 2;

/*=============================================================================================================================                                          
| 															SCRIPT				  											  |
| 														 MAIN SECTION						      							  |                 
|=============================================================================================================================| */	

init {
	colorledx = 255;
	Load();
	for (i = 0; i < 8; i++) {
		KBStates_Release[i] = -1;
	}
	while (q < 30) {
		double__tap[q] = -1;
		q++;
	}
}

main {
	refresh_kb_states();
	MK = supported_key_pressed();
	block_rumble();

	if (controller_or_mk == 0) {
		if (abs(get_val(movy)) < 8 && abs(get_val(movx)) < 8) {
			set_val(movy, 0);
			set_val(movx, 0);
		}
		if (abs(get_val(adsy)) < 8 && abs(get_val(adsx)) < 8) {
			set_val(adsy, 0);
			set_val(adsx, 0);
		}
	}
	if (event_press(XB1_MENU)) { loot = !loot; }
	if (event_release(XB1_B)) { loot = TRUE; }
	set_val(TRACE_1, profile_idx);
	set_val(TRACE_2, modName_idx);
	set_val(TRACE_3, MK);
	set_val(TRACE_4, CharacterPosition);
	set_val(TRACE_5, (spvar_current_slot - SPVAR_1) + (spvar_current_bit > 0));
	set_val(TRACE_6, ((spvar_current_slot - SPVAR_1) * 32) + spvar_current_bit);

	// Crossover
	if (get_controller() != PIO_PS4) // If XBOX controller:
	{
        if (get_console() == PIO_PS4) // If PS4 console:
        {
            swap(PS4_SHARE, PS4_TOUCH);

            if (get_val(PS4_R3) && event_press(PS4_TOUCH))
            {
                set_val(PS4_SHARE, 100);
                set_val(PS4_TOUCH, 0);
                set_val(PS4_R3, 0);
            }
        }
    }
/*=============================================================================================================================                                          
| 														 DISPLAY TITLE						      							  |                 
|=============================================================================================================================| */

	if (display_title) {
		cls_oled(0);
		count_black = 0;// Reset screen saver counter

		if (KillSwitch) {
			print(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH), 8, OLED_FONT_LARGE, OLED_WHITE, OFF[0]);

		}
		else {
            print(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH), 1, OLED_FONT_MEDIUM, OLED_WHITE, TITLE[0]);
            print(center_x(get_input_chars(controller_or_mk), OLED_FONT_SMALL_WIDTH), 18, OLED_FONT_SMALL, OLED_WHITE, PADMK[controller_or_mk]);
            print(center_x(get_position_chars(CharacterPosition), OLED_FONT_SMALL_WIDTH), 35, OLED_FONT_SMALL, OLED_WHITE, Position[CharacterPosition]);
            print(1, 47, 1, 1, Weapons[weapon_name[profile_idx]]);
			print(100, 47, 1, 1, Optics[optic[profile_idx]]);

			display_black = TRUE;
			display_title = FALSE;
		}
	}
	// Screen saver (OLED off)
	if (display_black && !screen_saver && !ModMenu && !KillSwitch && !DriveMode && !NadeMode) {
		count_black += get_rtime();
		if (count_black >= 3000) {
			cls_oled(0);
			count_black = 0;
			display_black = FALSE;
		}
	}
/*=============================================================================================================================                                          
| 													      M&K QUICK SELECT					      							  |                 
|=============================================================================================================================| */

	if (RESET != 0) {
		if (event_press_kb(RESET) && !ModMenu && !ModEdit && !ModToogle) {
			weapon_name[0] = 0
			weapon_name[1] = 0
			display_title = TRUE
			optic[0] = 0
			optic[1] = 0
		}
	}
	if (event_press_kb(KEY_KP1) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 2
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP2) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 3
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP3) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 5
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP4) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 6
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP5) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 7
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP6) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 12
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP7) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 10
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP8) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 8
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP9) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 9
		display_title = TRUE
	}
	if (event_press_kb(KEY_KP0) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 14
		display_title = TRUE
	}
	if (event_press_kb(KEY_KPENTER) && !ModMenu && !ModEdit && !ModToogle) {
		optic[profile_idx] = 0
		display_title = TRUE
	}
	if (event_press_kb(KEY_KPASTERISK) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 13
		display_title = TRUE
	}
	if (event_press_kb(KEY_KPSLASH) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 11
		display_title = TRUE
	}
	if (event_press_kb(KEY_KPDOT) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 1
		display_title = TRUE
	}
	if (event_press_kb(KEY_PAGEUP) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 31
		display_title = TRUE
	}
	if (event_press_kb(KEY_PAGEDOWN) && !ModMenu && !ModEdit && !ModToogle) {
		weapon_name[profile_idx] = 29
		display_title = TRUE
	}
	if (event_press_kb(KEY_END) && !ModMenu && !ModEdit & !ModToogle) {
		weapon_name[profile_idx] = 28
		display_title = TRUE
	}
	if (event_press_kb(KEY_INSERT) && !ModMenu && !ModEdit & !ModToogle) {
		weapon_name[profile_idx] = 24
		display_title = TRUE
	}
/*=============================================================================================================================                                          
| 													        KILL SWITCH 					      							  |                 
|=============================================================================================================================| */

	if (get_val(XB1_LT)) {
		// Kill Switch	
		if (event_release(XB1_VIEW)) {
			KillSwitch = !KillSwitch;

			if (KillSwitch)
				combo_run(RUMBLE_OFF);
			else
				combo_run(RUMBLE_ON);

			display_title = TRUE;
		}
		if (event_press(XB1_RIGHT) && get_brtime(XB1_RIGHT) <= 200 && !ModMenu && !ModEdit) {
			DriveMode = TRUE;
			combo_run(DRIVEMODE_ON);
		}
/*=============================================================================================================================                                          
| 													          MOD MENU		    			      							  |                 
|=============================================================================================================================| */

		// Toggle ModMenu ON/OFF
		if (event_release(XB1_MENU) && !KillSwitch && !DriveMode && !NadeMode) {
			ModMenu = !ModMenu;
			loot = TRUE;

			if (!ModMenu) {
				ModEdit = FALSE;
				combo_run(RUMBLE_OFF);
				display_title = TRUE; 
			}
			if (ModMenu) {
				modName_idx = 0;
				combo_run(RUMBLE_ON);
				display_new = TRUE;
			}
		}
		set_val(XB1_VIEW, 0);
		set_val(XB1_MENU, 0);
	}
	if (DriveMode) {
		if (event_release(XB1_B)) {
			DriveMode = FALSE;
			combo_stop(DRIVEMODE_ON);
			combo_run(DRIVEMODE_OFF);
		}
		combo_run(RGB);
	}
	if (!ModMenu && !ModEdit && !DriveMode && loot && !KillSwitch) {
		// Standing Position
		if (CharacterStanding == CharacterPosition)
		{
			if (event_press(XB1_B)) {
				CharacterPosition = CharacterCrouch;
				display_title = TRUE;
			}
			else if (get_ival(XB1_B) && get_ptime(XB1_B) > 200) {
				CharacterPosition = CharacterProne;
				display_title = TRUE;
			}
		}
		// Crouch Position 
		else if (CharacterCrouch == CharacterPosition)
		{
			if (event_press(XB1_A) || event_press(XB1_B)) {
				CharacterPosition = CharacterStanding;
				display_title = TRUE;
			}
			else if (get_ival(XB1_B) && get_ptime(XB1_B) > 200) {
				CharacterPosition = CharacterProne;
				display_title = TRUE;
			}
		}
		// Prone Position
		else if (CharacterProne == CharacterPosition) 
		{
			if (event_press(XB1_A)) {
				CharacterPosition = CharacterStanding;
				display_title = TRUE;
			}
			else if (event_press(XB1_B)) {
				CharacterPosition = CharacterCrouch;
				display_title = TRUE;
			}
		}
	}
	if (event_press(XB1_RIGHT) && !get_val(XB1_LT) && !get_val(XB1_RB) && !ModMenu && !ModEdit && !get_val(XB1_VIEW)) {
		NadeMode = TRUE;
		combo_run(NADEMODE_ON);
	}
	if (NadeMode) {
		if (event_press(XB1_Y)) {
			NadeMode = FALSE;
			combo_stop(NADEMODE_ON);
			combo_run(NADEMODE_OFF);
		}
		combo_run(RGB);
	}
	if (!KillSwitch) {
		if (!DriveMode) {
			if (!NadeMode) {
				if (ModMenu) {
					// Toggle ModEdit ON/OFF - only for mods who have adjustable value(s)
					if (modName_idx == 1 || modName_idx == 3 || modName_idx == 4 || modName_idx == 5 || modName_idx == 6)	
					{
						if (event_press(XB1_A) && !ModEdit)
						{
							valName_idx = AMOUNT_OF_VALNAME_IDX + 1;
							ModEdit = TRUE;
							combo_run(RUMBLE_ON);
							display_new = TRUE;
						}
						if (event_press(XB1_B) && ModEdit)
						{
							ModEdit = FALSE;
							combo_run(RUMBLE_OFF);
							display_new = TRUE;
							valName_idx = 0
						}
					}
					if (modName_idx == 16) {
						if (event_press(XB1_A) && !ModToogle)
						{
							ModToogle = TRUE;
							ModEdit = FALSE;
							DriveMode = FALSE;
							display_new = TRUE;

						}
						if (event_press(XB1_B) && ModToogle)
						{
							ModToogle = FALSE;
							ModEdit = FALSE;
							DriveMode = FALSE;
							display_new = TRUE;
						}
					}
					// ModEdit ON
					if (ModEdit) {
						if (get_val(XB1_LT)) // Edit value: hold LT + UP (+1) or DOWN (-1) or RIGHT (+10) or LEFT (-10)
						{
							// Mods that can have different values depending the active Profile 	
							x1 = edit_val(0, x1, 0, 50, 1, 10);
							x2 = edit_val(1, x2, 0, 50, 1, 10);
							x3 = edit_val(2, x3, 0, 50, 1, 10);
							x4 = edit_val(3, x4, 0, 50, 1, 10);
							x6 = edit_val(4, x6, 0, 50, 1, 10);
							x8 = edit_val(5, x8, 0, 50, 1, 10);
							correction_opticsweap[weapon_name[profile_idx]] = edit_val(6, correction_opticsweap[weapon_name[profile_idx]], 20, 20, 1, 10);
							antirecoil_start[weapon_name[profile_idx]] = edit_val(7, antirecoil_start[weapon_name[profile_idx]], 0, 99, 1, 10);
							antirecoil_mid[weapon_name[profile_idx]] = edit_val(8, antirecoil_mid[weapon_name[profile_idx]], 0, 99, 1, 10);
							antirecoil_end[weapon_name[profile_idx]] = edit_val(9, antirecoil_end[weapon_name[profile_idx]], 0, 99, 1, 10);
							antirecoil_time[weapon_name[profile_idx]] = edit_val(10, antirecoil_time[weapon_name[profile_idx]], 0, 99, 1, 10);
							hip_value = edit_val(11, hip_value, 50, 50, 1, 10);
							crouch_value = edit_val(12, crouch_value, 50, 50, 1, 10);
							prone_value = edit_val(13, prone_value, 50, 50, 1, 10);
							rate_of_fire[weapon_name[profile_idx]] = edit_val(14, rate_of_fire[weapon_name[profile_idx]], 0, 25, 1, 10);
							burstfire_hold = edit_val(15, burstfire_hold, 0, 990, 10, 100);
							burstfire_release = edit_val(16, burstfire_release, 0, 990, 10, 100);
							amp_strafe[profile_idx] = edit_val(17, amp_strafe[profile_idx], 0, 990, 1, 10);
							vel_strafe[profile_idx] = edit_val(18, vel_strafe[profile_idx], 0, 990, 1, 10);

						}
						else
						{
							if (event_press(XB1_RIGHT)) {
								valName_idx += 1;
								display_new = TRUE;
							}
							if (event_press(XB1_LEFT)) {
								valName_idx -= 1;
								display_new = TRUE;
							}
							if (modName_idx == 1) vals_available(7, 13);
							if (modName_idx == 3) vals_available(0, 6);
							if (modName_idx == 4) vals_available(14, 14);
							if (modName_idx == 5) vals_available(15, 16);
							if (modName_idx == 6) vals_available(17, 18);
						} 
					} 
					else // Toggles
					{
						if (event_press(XB1_RIGHT)) {
							modName_idx += 1;
							display_new = TRUE;
						}
						if (event_press(XB1_LEFT)) {
							modName_idx -= 1;
							display_new = TRUE;
						}
						// Cycle mods
						if (modName_idx > LAST_MODNAME_STRING) 
							modName_idx = 0;
						if (modName_idx < 0)
							modName_idx = LAST_MODNAME_STRING;
						// Switch profiles	
						if (event_press(XB1_Y)) {
							profile_idx += 1;
							display_new = TRUE;
						}
						// Cycle profiles	
						if (profile_idx > (AMOUNT_OF_PROFILES - 1))
							profile_idx = 0;
						// Mods
						weapon_name[profile_idx] = toggle(0, weapon_name[profile_idx]);
						toggle_antirecoil[profile_idx] = toggle(1, toggle_antirecoil[profile_idx]);
						optic[profile_idx] = toggle(2, optic[profile_idx]);
						toggle_rapidfire[weapon_name[profile_idx]] = toggle(4, toggle_rapidfire[weapon_name[profile_idx]]);
						toggle_burstfire[profile_idx] = toggle(5, toggle_burstfire[profile_idx]);
						strafe_on[profile_idx] = toggle(6, strafe_on[profile_idx]);
						tbag_on[profile_idx] = toggle(7, tbag_on[profile_idx]);
						toggle_jumpshot[profile_idx] = toggle(8, toggle_jumpshot[profile_idx]);
						toggle_holdbreath = toggle(9, toggle_holdbreath);
						peekshot_on[profile_idx] = toggle(10, peekshot_on[profile_idx]);
						autolean_on[profile_idx] = toggle(11, autolean_on[profile_idx]);
						autodown_on_ads[profile_idx] = toggle(12, autodown_on_ads[profile_idx]);
						swap_on = toggle(13, swap_on);
						quickscope_on = toggle(14, quickscope_on);
						auto_run = toggle(15, auto_run);
						fast_toogle = MKtoggle(16, fast_toogle);
						controller_or_mk = toggle(17, controller_or_mk);
                        screen_saver = toggle(18, screen_saver);
					}
					if (event_press(XB1_XBOX))
						Save();

					block_all_inputs();
				}
				// M&K toggles
				if (ModToogle) {
					cls_oled(0);
					print(center_x(sizeof(PRESS_KEY_TO_USE) - 1, OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_WHITE, PRESS_KEY_TO_USE[0]);
					print(center_x(sizeof(PRESS_B_TO_GO) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, PRESS_B_TO_GO[0]);
					if (fast_toogle == 0) {
						if (get_keyboard(LayoutsMK[i])) {
							rapid_mk = MK;
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (rapid_mk != 0) {
							print(center_x(mkbutton(rapid_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[rapid_mk - 4]);
						}
					}
					if (fast_toogle == 1) {
						if (get_keyboard(LayoutsMK[i])) {
							burst_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (burst_mk != 0) {
							print(center_x(mkbutton(burst_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[burst_mk - 4]);
						}
					}
					if (fast_toogle == 2) {
						if (get_keyboard(LayoutsMK[i])) {
							strafe_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (strafe_mk != 0) {
							print(center_x(mkbutton(strafe_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[strafe_mk - 4]);
						}
					}
					if (fast_toogle == 3) {
						if (get_keyboard(LayoutsMK[i])) {
							tbag_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (tbag_mk != 0) {
							print(center_x(mkbutton(tbag_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[tbag_mk - 4]);
						}
					}
					if (fast_toogle == 4) {
						if (get_keyboard(LayoutsMK[i])) {
							jump_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (jump_mk != 0) {
							print(center_x(mkbutton(jump_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[jump_mk - 4]);
						}
					}
					if (fast_toogle == 5) {
						if (get_keyboard(LayoutsMK[i])) {
							peekshot_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (peekshot_mk != 0) {
							print(center_x(mkbutton(peekshot_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[peekshot_mk - 4]);
						}
					}
					if (fast_toogle == 6) {
						if (get_keyboard(LayoutsMK[i])) {
							autolean_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (autolean_mk != 0) {
							print(center_x(mkbutton(autolean_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[autolean_mk - 4]);
						}
					}
					if (fast_toogle == 7) {
						if (get_keyboard(LayoutsMK[i])) {
							crouch_ads_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (crouch_ads_mk != 0) {
							print(center_x(mkbutton(crouch_ads_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[crouch_ads_mk - 4]);
						}
					}
					if (fast_toogle == 8) {
						if (get_keyboard(LayoutsMK[i])) {
							autorun_mk = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (autorun_mk != 0) {
							print(center_x(mkbutton(autorun_mk - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[autorun_mk - 4]);
						}
					}
					if (fast_toogle == 9) {
						if (get_keyboard(LayoutsMK[i])) {
							RESET = MK
							print(center_x(mkbutton(i), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[i]);
						}
						else if (RESET != 0) {
							print(center_x(mkbutton(RESET - 4), OLED_FONT_MEDIUM_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, MKbutton[RESET - 4]);
						}
					}
				}
				if (!ModMenu) {
					if (tbag_on[profile_idx]) {
						if (get_val(XB1_LT) && get_ival(XB1_RT)) { combo_run(TBAG); }
						led_on = 400;
						led_off = 400;
						combo_run(BLINKTBAG);
					}
					if (swap_on)
					{
						swap(XB1_RB, XB1_RT);
						swap(XB1_LB, XB1_LT);
					}
					// Speed Toggles
					autolean_on[profile_idx] = speed_toggle(XB1_LT, XB1_UP, autolean_on[profile_idx], 11);
					toggle_rapidfire[weapon_name[profile_idx]] = speed_toggle(XB1_LT, XB1_LEFT, toggle_rapidfire[weapon_name[profile_idx]], 4);
					strafe_on[profile_idx] = speed_toggle(XB1_LT, XB1_RIGHT, strafe_on[profile_idx], 6);
					peekshot_on[profile_idx] = speed_toggle(XB1_LT, XB1_DOWN, peekshot_on[profile_idx], 10);
					autodown_on_ads[profile_idx] = speed_toggle(jump_button, XB1_RIGHT, autodown_on_ads[profile_idx], 12);
					tbag_on[profile_idx] = speed_toggle(crouch_button, XB1_DOWN, tbag_on[profile_idx], 7);
					weapon_name[profile_idx] = speed_toggle_weapon(XB1_RB, weapon_name[profile_idx], 0);
					optic[profile_idx] = speed_toggle_optic(XB1_RB, optic[profile_idx], 2);

					if (MK != -1) {
						optic[profile_idx] = speed_toggle_opticMKplus(KEY_KPPLUS, optic[profile_idx], 2);
						optic[profile_idx] = speed_toggle_opticMKminus(KEY_KPMINUS, optic[profile_idx], 2);
						toggle_rapidfire[weapon_name[profile_idx]] = speed_toggleMK(rapid_mk, toggle_rapidfire[weapon_name[profile_idx]], 4);
						toggle_burstfire[profile_idx] = speed_toggleMK(burst_mk, toggle_burstfire[profile_idx], 5);
						strafe_on[profile_idx] = speed_toggleMK(strafe_mk, strafe_on[profile_idx], 6);
						toggle_jumpshot[profile_idx] = speed_toggleMK(jump_mk, toggle_jumpshot[profile_idx], 8);
						peekshot_on[profile_idx] = speed_toggleMK(peekshot_mk, peekshot_on[profile_idx], 10);
						autolean_on[profile_idx] = speed_toggleMK(autolean_mk, autolean_on[profile_idx], 11);
						tbag_on[profile_idx] = speed_toggleMK(tbag_mk, tbag_on[profile_idx], 7);
						autodown_on_ads[profile_idx] = speed_toggleMK(crouch_ads_mk, autodown_on_ads[profile_idx], 12);
						auto_run = speed_toggleMK(autorun_mk, auto_run, 15);
					}
					// Hair Trigger
					deadzone(XB1_LT, XB1_RT, 99, 99);

					if (get_val(pubg_generic) && event_press(pubg_generic_2)) {
						profile_idx = 2;
						pubg_loot_profile = TRUE;
						display_title = TRUE;
					}
					if (pubg_loot_profile && get_val(pubg_generic) && get_ptime(pubg_generic) > 1000)
						pubg_loot_profile = FALSE;
					if (strafe_on[profile_idx]) {
						if (get_val(XB1_RT)) {
							combo_run(STRAFE);
						} else {
							combo_stop(STRAFE);
						}
						led_on = 200;
						led_off = 400;
						combo_run(BLINKSTRAFE);

					}
					if (toggle_holdbreath) {
						if (get_val(XB1_LT) && get_ptime(XB1_LT) > 500 && !get_val(XB1_RB))
							set_val(XB1_LB, 100);
					}
					if (quickscope_on && weapon_name[profile_idx] == 31) {
						if (event_release(XB1_LT))
							combo_run(QUICK);
					}
					if (auto_run) {
						if (get_val(XB1_LY) <= -85 && !get_val(XB1_LT) && !get_val(XB1_RT))
							combo_run(AUTORUN);
						else
							combo_stop(AUTORUN);
					}
					if (autodown_on_ads[profile_idx]) {
						if (event_press(XB1_LT)) {
							combo_run(CROUCH);
							CharacterPosition = CharacterCrouch
							display_title = TRUE;
						}
						if (event_release(XB1_LT)) {
							combo_run(CROUCH)
							CharacterPosition = CharacterStanding;
							display_title = TRUE;
						}
					}
					if (autolean_on[profile_idx]) {
						if (get_val(XB1_LT) && get_ival(XB1_LX) <= -65 || get_val(XB1_LB) && get_ival(XB1_LX) <= -65) {
							set_val(XB1_LS, 100);
						}
						if (get_val(XB1_LT) && get_ival(XB1_LX) >= +65 || get_val(XB1_LB) && get_ival(XB1_LX) >= +65) {
							set_val(XB1_RS, 100);
						}
					}
					if (toggle_jumpshot[profile_idx]) {
						if (get_val(XB1_RT)) {
							combo_run(TURBO_JUMP)
						}
						led_on = 400;
						led_off = 600;
						combo_run(BLINKJUMP);
					}
					if (peekshot_on[profile_idx])  // (10)
					{
						if (get_ival(XB1_LT)) {
							combo_run(PEEKSHOT);
						}
						if (get_val(XB1_RT) || get_val(XB1_LS) || get_val(XB1_RS)) {
							combo_stop(PEEKSHOT);
						}
					}
					// Switch Profiles
					if (loot) {
						if (weapon_change) {
							if (event_release(button_change_weapon) && get_ptime(button_change_weapon) < 250) {
								profile_1or2 = !profile_1or2;
								if (ModMenu)
									display_new = TRUE;
								else
									display_title = TRUE;
							}
							if (event_release(button_change_weapon) && get_ptime(button_change_weapon) > 500 && get_ptime(button_change_weapon) < MAX_TIME_TO_CHECK) {
								profile_1or2 = !profile_1or2;
								double_click(XB1_Y)
							}
						}
						if (two_button_press) {
							if (get_val(primary_resync_button) && (get_val(secondary_resync_button))) {
								set_val(secondary_resync_button, 0);

								if (ModMenu)
									display_new = TRUE;
								else
									display_title = TRUE;

							}
						}
						if (!pubg_loot_profile) {
							if (profile_1or2)
								profile_idx = 1;
							else
								profile_idx = 0;
						}
					}
				}
				// Anti Recoil
				if (optic[profile_idx] == 0) {
					optic_recoil = x1
				}
				if (optic[profile_idx] == 1) {
					optic_recoil = x2 + correction_opticsweap[weapon_name[profile_idx]]
				}
				if (optic[profile_idx] == 2) {
					optic_recoil = x3 + correction_opticsweap[weapon_name[profile_idx]]
				}
				if (optic[profile_idx] == 3) {
					optic_recoil = x4 + correction_opticsweap[weapon_name[profile_idx]]
				}
				if (optic[profile_idx] == 4) {
					optic_recoil = x6 + correction_opticsweap[weapon_name[profile_idx]]
				}
				if (optic[profile_idx] == 5) {
					optic_recoil = x8 + correction_opticsweap[weapon_name[profile_idx]]
				}
				if (toggle_antirecoil[profile_idx] == 1) {
					vm_loops = (antirecoil_time[weapon_name[profile_idx]] * 10) / 2;
					if ((antirecoil_start[weapon_name[profile_idx]] + optic_recoil) < (antirecoil_mid[weapon_name[profile_idx]] + optic_recoil))
						inc = 1;
					else
						inc = -1;
					if ((antirecoil_mid[weapon_name[profile_idx]] + optic_recoil) < (antirecoil_end[weapon_name[profile_idx]] + optic_recoil))
						inc_2 = 1;
					else
						inc_2 = -1;
					pr = abs((antirecoil_start[weapon_name[profile_idx]] + optic_recoil) - (antirecoil_mid[weapon_name[profile_idx]] + optic_recoil));
					pr_2 = abs((antirecoil_mid[weapon_name[profile_idx]] + optic_recoil) - (antirecoil_end[weapon_name[profile_idx]] + optic_recoil));
					vm = vm_loops / pr;
					vm_2 = vm_loops / pr_2;

					if (!get_val(XB1_RT)) {
						p = 0;
						vm_count = 0;
						p_count = 0;
						ar_y = (antirecoil_start[weapon_name[profile_idx]] + optic_recoil);
					}
					if (get_val(XB1_LT) && get_val(XB1_RT) && CharacterPosition == 0) {
						p = p_cycle();
						if (p != -1)
							ar_y = p_val();
						else
							ar_y = (antirecoil_end[weapon_name[profile_idx]] + optic_recoil);
						OffsetAR(XB1_RY, ar_y);
					}
					if (get_val(XB1_LT) && get_val(XB1_RT) && CharacterPosition == 1) {
						p = p_cycle();
						if (p != -1)
							ar_y = p_val();
						else
							ar_y = (antirecoil_end[weapon_name[profile_idx]] + optic_recoil);
						OffsetAR(XB1_RY, ar_y - ((ar_y * crouch_value) / 100));
					}
					if (get_val(XB1_LT) && get_val(XB1_RT) && CharacterPosition == 2) {
						p = p_cycle();
						if (p != -1)
							ar_y = p_val();
						else
							ar_y = (antirecoil_end[weapon_name[profile_idx]] + optic_recoil);
						OffsetAR(XB1_RY, ar_y - ((ar_y * prone_value) / 100));
					}
					if (get_val(XB1_LB) && get_val(XB1_RT) && !get_val(XB1_LT)) {
						p = p_cycle();
						if (p != -1)
							ar_y = p_val();
						else
							ar_y = (antirecoil_end[weapon_name[profile_idx]] + optic_recoil);
						OffsetAR(XB1_RY, ar_y + ((ar_y * hip_value) / 100));
					}
				}
				// Rapid Fire
				if (toggle_rapidfire[weapon_name[profile_idx]] == 1) {
					hold_time = 500 / rate_of_fire[weapon_name[profile_idx]];
					rest_time = hold_time - 20;
					if (rest_time < 0)
						rest_time = 0;
					if (get_val(XB1_RT))
						combo_run(RAPIDFIRE);
					else
						combo_stop(RAPIDFIRE);
					led_on = 400;
					led_off = 400;
					combo_run(BLINKRAPID);
				}
				// Burst Fire
				if (toggle_burstfire[profile_idx] == 1) {
					hold_time = burstfire_hold;
					rest_time = burstfire_release;
					if (get_val(XB1_RT))
						combo_run(BURSTFIRE);
					led_on = 400;
					led_off = 400;
					combo_run(BLINKBURSTFIRE);
				}
				if (event_release(XB1_RT))
					combo_stop(BURSTFIRE);
			}
			// Refresh Display
			if (display_new) {
				cls_oled(0);
				count_black = 0;

				if (ModEdit) {
					// Display Value Name and value
					display_edit(0, center_x(sizeof(X1) - 1, OLED_FONT_MEDIUM_WIDTH), X1[0], x1);
					display_edit(1, center_x(sizeof(X2) - 1, OLED_FONT_MEDIUM_WIDTH), X2[0], x2);
					display_edit(2, center_x(sizeof(X3) - 1, OLED_FONT_MEDIUM_WIDTH), X3[0], x3);
					display_edit(3, center_x(sizeof(X4) - 1, OLED_FONT_MEDIUM_WIDTH), X4[0], x4);
					display_edit(4, center_x(sizeof(X6) - 1, OLED_FONT_MEDIUM_WIDTH), X6[0], x6);
					display_edit(5, center_x(sizeof(X8) - 1, OLED_FONT_MEDIUM_WIDTH), X8[0], x8);
					display_edit(6, center_x(sizeof(CURRENT_OPTIC) - 1, OLED_FONT_MEDIUM_WIDTH), CURRENT_OPTIC[0], correction_opticsweap[weapon_name[profile_idx]]);
					display_edit(7, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL_START[0], antirecoil_start[weapon_name[profile_idx]]);
					display_edit(8, center_x(sizeof(ANTIRECOIL_MID) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL_MID[0], antirecoil_mid[weapon_name[profile_idx]]);
					display_edit(9, center_x(sizeof(ANTIRECOIL_END) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL_END[0], antirecoil_end[weapon_name[profile_idx]]);
					display_edit(10, center_x(sizeof(ANTIRECOIL_TIME) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL_TIME[0], antirecoil_time[weapon_name[profile_idx]]);
					display_edit(11, center_x(sizeof(RECOIL_HIP) - 1, OLED_FONT_MEDIUM_WIDTH), RECOIL_HIP[0], hip_value);
					display_edit(12, center_x(sizeof(RECOIL_CROUCH) - 1, OLED_FONT_MEDIUM_WIDTH), RECOIL_CROUCH[0], crouch_value);
					display_edit(13, center_x(sizeof(RECOIL_PRONE) - 1, OLED_FONT_MEDIUM_WIDTH), RECOIL_PRONE[0], prone_value);
					display_edit(14, center_x(sizeof(RATE_OF_FIRE) - 1, OLED_FONT_MEDIUM_WIDTH), RATE_OF_FIRE[0], rate_of_fire[weapon_name[profile_idx]]);
					display_edit(15, center_x(sizeof(BURSTFIRE_HOLD) - 1, OLED_FONT_MEDIUM_WIDTH), BURSTFIRE_HOLD[0], burstfire_hold);
					display_edit(16, center_x(sizeof(BURSTFIRE_RELEASE) - 1, OLED_FONT_MEDIUM_WIDTH), BURSTFIRE_RELEASE[0], burstfire_release);
					display_edit(17, center_x(sizeof(AMP_STRAFE) - 1, OLED_FONT_MEDIUM_WIDTH), AMP_STRAFE[0], amp_strafe[profile_idx]);
					display_edit(18, center_x(sizeof(SPEED_STRAFE) - 1, OLED_FONT_MEDIUM_WIDTH), SPEED_STRAFE[0], vel_strafe[profile_idx]);
				}
				else {
					// Display Mod Name and ON/OFF
					display_mod3(0, center_x(sizeof(WEAPON) - 1, OLED_FONT_MEDIUM_WIDTH), WEAPON[0], weapon_name[profile_idx]);
					display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH), ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
					display_mod6(2, center_x(sizeof(OPTICS) - 1, OLED_FONT_MEDIUM_WIDTH), OPTICS[0], optic[profile_idx]);
					display_mod7(3, center_x(sizeof(OPTICSET) - 1, OLED_FONT_MEDIUM_WIDTH), OPTICSET[0]);
					display_mod5(4, center_x(sizeof(RAPIDFIRE) - 1, OLED_FONT_MEDIUM_WIDTH), RAPIDFIRE[0], toggle_rapidfire[weapon_name[profile_idx]]);
					display_mod(5, center_x(sizeof(BURSTFIRE) - 1, OLED_FONT_MEDIUM_WIDTH), BURSTFIRE[0], toggle_burstfire[profile_idx]);
					display_mod(6, center_x(sizeof(STRAFE) - 1, OLED_FONT_MEDIUM_WIDTH), STRAFE[0], strafe_on[profile_idx]);
					display_mod1(7, center_x(sizeof(TBAG) - 1, OLED_FONT_MEDIUM_WIDTH), TBAG[0], tbag_on[profile_idx]);
					display_mod1(8, center_x(sizeof(JUMPSHOT) - 1, OLED_FONT_MEDIUM_WIDTH), JUMPSHOT[0], toggle_jumpshot[profile_idx]);
					display_mod1(9, center_x(sizeof(HOLD_BREATH) - 1, OLED_FONT_MEDIUM_WIDTH), HOLD_BREATH[0], toggle_holdbreath);
					display_mod1(10, center_x(sizeof(PEEK) - 1, OLED_FONT_MEDIUM_WIDTH), PEEK[0], peekshot_on[profile_idx]);
					display_mod1(11, center_x(sizeof(AUTOLEAN) - 1, OLED_FONT_MEDIUM_WIDTH), AUTOLEAN[0], autolean_on[profile_idx]);
					display_mod1(12, center_x(sizeof(AUTORUN) - 1, OLED_FONT_MEDIUM_WIDTH), AUTORUN[0], autodown_on_ads[profile_idx]);
					display_mod1(13, center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH), SWAP[0], swap_on);
					display_mod1(14, center_x(sizeof(QUIK) - 1, OLED_FONT_MEDIUM_WIDTH), QUIK[0], quickscope_on);
					display_mod1(15, center_x(sizeof(AUTORUN1) - 1, OLED_FONT_MEDIUM_WIDTH), AUTORUN1[0], auto_run);
					display_mod10(16, center_x(sizeof(FASTTOGLE) - 1, OLED_FONT_MEDIUM_WIDTH), FASTTOGLE[0], fast_toogle);
					display_mod11(17, center_x(sizeof(PADORMK) - 1, OLED_FONT_MEDIUM_WIDTH), PADORMK[0], controller_or_mk);
                    display_mod12(18, center_x(sizeof(SCREENSAVER) - 1, OLED_FONT_MEDIUM_WIDTH), SCREENSAVER[0], screen_saver);
				}
				// Display Profile only on mods that may have a different value depending on the Profile
				if (modName_idx == 0 || modName_idx == 1 || modName_idx == 2 || modName_idx == 4 || modName_idx == 5 || modName_idx == 6 || modName_idx == 7 || modName_idx == 8 || modName_idx == 10 || modName_idx == 11 || modName_idx == 12)  // idx from 0 to 4 are mods that can have different values depending the active Profile
				{
					if (profile_idx == 0)
						print(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, PROFILE_1[0]);
					else if (profile_idx == 1)
						print(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, PROFILE_2[0]);
					else if (profile_idx == 2)
						print(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, PROFILE_3[0]);
					if (valName_idx == 11 || valName_idx == 12 || valName_idx == 13) {
						print(center_x(sizeof(ALL_PROFILES) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, ALL_PROFILES[0]);
					}
				}
				else if (modName_idx == 3 || modName_idx == 13 || modName_idx == 14 || modName_idx == 15 || modName_idx == 9 ) 
				{
					print(center_x(sizeof(ALL_PROFILES) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, ALL_PROFILES[0]);
					if (valName_idx == 6) {
						print(center_x(sizeof(GUN_IN_USE) - 1, OLED_FONT_SMALL_WIDTH), 23, OLED_FONT_SMALL, OLED_WHITE, GUN_IN_USE[0]);
					}
				}
				display_black = TRUE;
				display_new = FALSE;
			}
		}
		led(profile_idx);
	}
}

/*=============================================================================================================================                                          
| 															SCRIPT				  											  |
| 														 COMBO SECTION						      							  |                 
|=============================================================================================================================| */		

combo QUICK{
	set_val(XB1_RT, 100);
	wait(30);
	set_val(XB1_RT, 0);
}

combo AUTORUN{
	set_val(XB1_LS, 100);
	wait(50);
	set_val(XB1_LS, 0);
	wait(32767);
	wait(32767);
}

combo CROUCH {
	set_val(XB1_B, 100);
	wait(150);
	wait(150);
}

combo STRAFE {
	set_val(11, 100);
	wait(amp_strafe);
	wait(vel_strafe);
	set_val(11, -100);
	wait(amp_strafe);
	wait(vel_strafe);
}

combo TBAG {
	set_val(XB1_B, 100);
	wait(150);
	set_val(XB1_B, 0);
	wait(150);
} 

combo BURSTFIRE {
	wait(hold_time);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
}
        
combo RAPIDFIRE {
	wait(hold_time);
	set_val(XB1_RT, 0);
	wait(rest_time);
}
    
combo PEEKSHOT {
	set_val(XB1_LS, 100);
	set_led(LED_2, 1);
	wait(50);
	wait(50);
	wait(200);
	set_val(XB1_RS, 100);
	set_led(LED_2, 0);
	wait(50);
	wait(50);
	wait(200);
}                    

combo TURBO_JUMP {
	set_val(XB1_A, 100);
	wait(60);
	set_val(XB1_A, 0);
	wait(40);
	set_val(XB1_A, 0);
}  
   
combo RUMBLE_ON {
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

combo RUMBLE_OFF {
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

combo SAVE {
	cls_oled(0);						
	print(center_x(sizeof(SAVE) - 1, OLED_FONT_LARGE_WIDTH), center_y(OLED_FONT_LARGE_HEIGHT), OLED_FONT_LARGE, OLED_WHITE, SAVE[0]);
	wait(10)
	call(RUMBLE_ON);						
	wait(150);
	call(RUMBLE_ON);
	wait(1000);
	display_new = TRUE;
}

combo DRIVEMODE_ON {
	cls_oled(0);
	print(center_x(sizeof(DRIVEON) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, DRIVEON[0]); 
}

combo DRIVEMODE_OFF {
	cls_oled(0);
	print(center_x(sizeof(DRIVEOFF) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, DRIVEOFF[0]); 
	wait(500);
	display_title = TRUE;
}

combo NADEMODE_ON {
	cls_oled(0);
	wait(100);
	print(center_x(sizeof(NADEON) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, NADEON[0]);
}

combo NADEMODE_OFF {
	cls_oled(0);
	print(center_x(sizeof(NADEOFF) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, NADEOFF[0]);
	wait(500);
	display_title = TRUE;
}

combo CROUCHMODE_OFF {
	cls_oled(0);
	print(center_x(sizeof(CmOff) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, CmOff[0]); 
	wait(100);
	display_title = TRUE;
}

combo CROUCHMODE_ON {
	cls_oled(0);
	print(center_x(sizeof(CrmOn) - 1, OLED_FONT_MEDIUM_WIDTH), center_y(OLED_FONT_MEDIUM_HEIGHT), OLED_FONT_MEDIUM, OLED_WHITE, CrmOn[0]);
	wait(100);
}

combo RGB {
	wait(5);
	set_rgb(colorledx, colorledx[1], colorledx[2]);
	colorledx[decled] -= 5; colorledx[incled] += 5;
	if (!colorledx[decled]) { incled = (incled + 1) % 3; decled = (decled + 1) % 3; }
}
  
combo BLINKRAPID {
	led(profile_idx);
	wait(led_on);
	led(7);
	wait(led_off);
}

combo BLINKBURSTFIRE {
	led(profile_idx);
	wait(led_on);
	led(6);
	wait(led_off);
}

combo BLINKSTRAFE {
	led(profile_idx);
	wait(led_on);
	led(3);
	wait(led_off);
}

combo BLINKTBAG {
	led(profile_idx);
	wait(led_on);
	led(4);
	wait(led_off);
}

combo BLINKJUMP {
	led(profile_idx);
	wait(led_on);
	led(5);
	wait(led_off);
}

/*=============================================================================================================================                                          
| 															SCRIPT				  											  |
| 														   FUNCTIONS						      							  |                 
|=============================================================================================================================| */	

function double_click(button) {
	if (double__tap[button] >= 0) {
		double__tap[button] += get_rtime();
		if (double__tap[button] > 450)
			double__tap[button] = -1;
	}
	if (event_release(button) && get_ptime(button) <= 200) {
		if (double__tap[button] < 0) {
			double__tap[button] = 0;
		} else {
			double__tap[button] = -1;
			return 1;
		}
	}
	return 0;
}

function vals_available(f_min, f_max) {
	if (valName_idx < f_min)
		valName_idx = f_max;
	if (valName_idx > f_max)
		valName_idx = f_min;
}

function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {
	if (valName_idx == f_idx) {
		// +1 or -1															 
		f_val = value_change(f_val, XB1_LEFT, inv(f_inc1), f_min, f_max);
		f_val = value_change(f_val, XB1_RIGHT, f_inc1, f_min, f_max);
		// +10 or -10
		f_val = value_change(f_val, XB1_DOWN, inv(f_inc2), f_min, f_max);
		f_val = value_change(f_val, XB1_UP, f_inc2, f_min, f_max);
	}
	return f_val;
}

function MKtoggle(f_idx, f_val) {
	if (event_press(XB1_UP)) {
		if (modName_idx == f_idx && !ModToogle) {
			// Increase
			f_val += 1;
			// Limits
			if (f_val > 9)
				f_val = 0;
			if (f_val < 0)
				f_val = 9;
			combo_run(RUMBLE_ON);
		}
		display_new = TRUE;
	}
	if (event_press(XB1_DOWN)) {
		if (modName_idx == f_idx && !ModToogle) {
			// decrease
			f_val -= 1;
			// Limits
			if (f_val > 9)
				f_val = 0;
			if (f_val < 0)
				f_val = 9;
			combo_run(RUMBLE_ON);
		}
		display_new = TRUE;
	}
	return f_val;
}

function speed_toggleMK(f_press, f_val, f_string) {
	if (event_press_kb(f_press))
	{
		modName_idx = f_string;
		if (f_val == 0) {
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		else if (f_val == 1) {
			f_val = 0;
			combo_run(RUMBLE_OFF);
		}
		display_new = TRUE;
	}
	return f_val;
}

function speed_toggle(f_hold, f_press, f_val, f_string) {
	if (get_val(f_hold) && !get_val(XB1_LB)) {
		if (get_val(f_press) && get_ptime(f_press) == 300)
		{
			modName_idx = f_string;
			if (f_val == 0) {
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else if (f_val == 1) {
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			display_new = TRUE;
		}
		set_val(f_press, 0)
	}
	return f_val;
}

function speed_toggle_weapon(f_hold, f_val, f_string) {
	if (get_val(f_hold)) {
		if (event_press(XB1_UP))
		{
			modName_idx = f_string
			{
				f_val += 1;
				// Limits
				if (f_val > 33)
					f_val = 0;
				if (f_val < 0)
					f_val = 33;
			}
			display_new = TRUE;
		}
		if (event_press(XB1_DOWN))
		{
			modName_idx = f_string
			// Decrease
			{
				f_val -= 1;
				// Limits
				if (f_val > 33)
					f_val = 0;
				if (f_val < 0)
					f_val = 33;
			}
			display_new = TRUE;
		}
		set_val(XB1_DOWN, 0)
		set_val(XB1_UP, 0)
	}
	if (event_release(f_hold)) {
		display_title = TRUE;
	}
	return f_val;
}

function speed_toggle_optic(f_hold, f_val, f_string) {
	if (get_val(f_hold)) {
		if (event_press(XB1_RIGHT))
		{
			modName_idx = f_string
			{
				f_val += 1;
				// Limits
				if (f_val > 5)
					f_val = 0;
				if (f_val < 0)
					f_val = 5;
			}
			display_new = TRUE;
		}
		if (event_press(XB1_LEFT))
		{
			modName_idx = f_string
			// Decrease
			{
				f_val -= 1;
				// Limits
				if (f_val > 5)
					f_val = 0;
				if (f_val < 0)
					f_val = 5;
			}
			display_new = TRUE;
		}
		set_val(XB1_LEFT, 0)
		set_val(XB1_RIGHT, 0)
	}
	if (event_release(f_hold)) {
		display_title = TRUE;
	}
	return f_val;
}

function speed_toggle_opticMKplus(f_hold, f_val, f_string) {
	if (event_press_kb(f_hold)) {
		modName_idx = f_string
		{
			f_val += 1;
			// Limits
			if (f_val > 5)
				f_val = 0;
			if (f_val < 0)
				f_val = 5;
		}
		display_new = TRUE;
	}
	return f_val;
}

function speed_toggle_opticMKminus(f_hold, f_val, f_string) {
	if (event_press_kb(f_hold)) {
		modName_idx = f_string
		{
			f_val -= 1;
			// Limits
			if (f_val > 5)
				f_val = 0;
			if (f_val < 0)
				f_val = 5;
		}
		display_new = TRUE;
	}
	return f_val;
}

function toggle(f_idx, f_val) {
	if (event_press(XB1_UP)) {
		if (modName_idx == f_idx) {
			if (modName_idx == 0) {
				// Increase
				f_val += 1;
				// Limits
				if (f_val > 33)
					f_val = 0;
				if (f_val < 0)
					f_val = 33;
			}
			else if (modName_idx == 2) {
				// Increase
				f_val += 1;
				// Limits
				if (f_val > 5)
					f_val = 0;
				if (f_val < 0)
					f_val = 5;
			}
			else
				f_val = 1;
			combo_run(RUMBLE_ON);
		}
		display_new = TRUE;
	}
	if (event_press(XB1_DOWN)) {
		if (modName_idx == f_idx) {
			if (modName_idx == 0) {
				// Decrease
				f_val -= 1;
				// Limits
				if (f_val > 33)
					f_val = 0;
				if (f_val < 0)
					f_val = 33;
			}
			else if (modName_idx == 2) {
				// Decrease
				f_val -= 1;
				// Limits
				if (f_val > 5)
					f_val = 0;
				if (f_val < 0)
					f_val = 5;
			}
			else
				f_val = 0;
			combo_run(RUMBLE_OFF);
		}
		display_new = TRUE;
	}
	return f_val;
}

function display_edit(f_idx, f_string, f_print, f_val) {
	if (valName_idx == f_idx) {
		// Display value name and value
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display AntiRecoil Time value x 100 so 1,000 (displayed) = 1 second - script value is 10
		if (f_idx == 10)
			number_to_string(f_val * 100, find_digits(f_val * 100));
		// Display editable values 
		else
			number_to_string(f_val, find_digits(f_val));
	}
}

function display_mod(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		if (f_toggle == 1)
			print(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, ON[0]);
		else if (f_toggle == 0)
			print(center_x(sizeof(OFF) - 13, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
		print(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, PRESS_A_TO_CONTINUE[0]);
	}
}

function display_mod1(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		if (f_toggle == 1)
			print(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, ON[0]);
		else if (f_toggle == 0)
			print(center_x(sizeof(OFF) - 13, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
		print(center_x(sizeof(TOGGLE_ONLY) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, TOGGLE_ONLY[0]);
	}
}

function display_mod3(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		if (f_toggle)
			print(center_x(get_weapon_chars(weapon_name[profile_idx]), OLED_FONT_MEDIUM_WIDTH), 48, OLED_FONT_MEDIUM, OLED_WHITE, Weapons[weapon_name[profile_idx]]);
		else if (f_toggle == 0)
			print(center_x(get_weapon_chars(weapon_name[profile_idx]), OLED_FONT_MEDIUM_WIDTH), 48, OLED_FONT_MEDIUM, OLED_WHITE, Weapons[weapon_name[profile_idx]]);
	}
}

function display_mod7(f_idx, f_string, f_print) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		print(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, PRESS_A_TO_CONTINUE[0]);
	}
}

function display_mod5(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		if ((weapon_name[profile_idx]) <= 21 || (weapon_name[profile_idx]) == 30 || (weapon_name[profile_idx]) == 31 || (weapon_name[profile_idx]) == 32 || (weapon_name[profile_idx]) == 33) {
			print(center_x(sizeof(NOT_AVAILABLE) - 1, OLED_FONT_SMALL_WIDTH), 35, OLED_FONT_SMALL, OLED_WHITE, NOT_AVAILABLE[0]);
			print(center_x(sizeof(GUN_IN_USE) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, GUN_IN_USE[0]);
		}
		if ((weapon_name[profile_idx]) == 22 || (weapon_name[profile_idx]) == 23 || (weapon_name[profile_idx]) == 24 || (weapon_name[profile_idx]) == 25 || (weapon_name[profile_idx]) == 26 || (weapon_name[profile_idx]) == 27 || (weapon_name[profile_idx]) == 28 || (weapon_name[profile_idx]) == 29) {
			if (f_toggle == 1)
				print(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, ON[0]);
			else if (f_toggle == 0)
				print(center_x(sizeof(OFF) - 13, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
			print(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, PRESS_A_TO_CONTINUE[0]);
		}
	}
}

function display_mod6(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);

		if (f_toggle)
			print(center_x(get_optic_chars(optic[profile_idx]), OLED_FONT_MEDIUM_WIDTH), 48, OLED_FONT_MEDIUM, OLED_WHITE, Optics[optic[profile_idx]]);
		else if (f_toggle == 0)
			print(center_x(get_optic_chars(optic[profile_idx]), OLED_FONT_MEDIUM_WIDTH), 48, OLED_FONT_MEDIUM, OLED_WHITE, Optics[optic[profile_idx]]);
	}
}

function display_mod10(f_idx, f_string, f_print, MKtoggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		if (MKtoggle)
			print(center_x(fasttoogle_MK(fast_toogle) + 5, OLED_FONT_SMALL_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, fastoogle[fast_toogle]);
		else if (MKtoggle == 0)
			print(center_x(fasttoogle_MK(fast_toogle) + 5, OLED_FONT_SMALL_WIDTH), 25, OLED_FONT_MEDIUM, OLED_WHITE, fastoogle[fast_toogle]);
		print(center_x(sizeof(PRESS_A_TO_ASSIGN) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, PRESS_A_TO_ASSIGN[0]);
	}
}

function display_mod11(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		if (f_toggle == 1)
			print(center_x(input_method_in_use(1), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, PADMK[1]);
		else if (f_toggle == 0)
			print(center_x(input_method_in_use(0), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_WHITE, PADMK[0]);
		print(center_x(sizeof(CONTROL_OR_MK) - 1, OLED_FONT_SMALL_WIDTH), 26, OLED_FONT_SMALL, OLED_WHITE, CONTROL_OR_MK[0]);
	}
}

function display_mod12(f_idx, f_string, f_print, f_toggle) {
	if (modName_idx == f_idx) {
		// Display MOD_NAME
		print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
		// Display ON OFF
		if (f_toggle == 1)
			print(center_x(sizeof(OFF) + 10, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
		else if (f_toggle == 0)
			print(center_x(sizeof(ON) - 13, OLED_FONT_SMALL_WIDTH), 37, OLED_FONT_SMALL, OLED_WHITE, ON[0]);
		print(center_x(sizeof(TOGGLE_ONLY) - 1, OLED_FONT_SMALL_WIDTH), 50, OLED_FONT_SMALL, OLED_WHITE, TOGGLE_ONLY[0]);
	}
}

function input_method_in_use(f_idx) {
	if (PADMK[f_idx + 1] != -1)
		return PADMK[f_idx + 1] - PADMK[f_idx] - 1;
	return sizeof(PADMK) - PADMK[f_idx];
}

function mkbutton(f_idx) {
	if (MKbutton[f_idx + 1] != -1)
		return MKbutton[f_idx + 1] - MKbutton[f_idx] - 1;
	return sizeof(MKbutton) - MKbutton[f_idx];
}

function get_weapon_chars(f_idx) {
	if (Weapons[f_idx + 1] != -1)
		return Weapons[f_idx + 1] - Weapons[f_idx] - 1;
	return sizeof(Weapons) - Weapons[f_idx];
}

function fasttoogle_MK(f_idx) {
	if (fastoogle[f_idx + 1] != -1)
		return fastoogle[f_idx + 1] - fastoogle[f_idx] - 1;
	return sizeof(fastoogle) - fastoogle[f_idx];
}

function get_optic_chars(f_idx) {
	if (Optics[f_idx + 1] != -1)
		return Optics[f_idx + 1] - Optics[f_idx] - 1;
	return sizeof(Optics) - Optics[f_idx];
}

function get_position_chars(f_idx) {
	if (Position[f_idx + 1] != -1)
		return Position[f_idx + 1] - Position[f_idx] - 1;
	return sizeof(Position) - Position[f_idx];
}

function get_input_chars(f_idx) {
	if (PADMK[f_idx + 1] != -1)
		return PADMK[f_idx + 1] - PADMK[f_idx] - 1;
	return sizeof(PADMK) - PADMK[f_idx];
}

function value_change(f_val, f_btn, f_inc, f_rng_min, f_rng_max) {
	if (press_hold(f_btn)) {
		f_val += f_inc;
		// Substract    
		if (f_val < inv(f_rng_min))
			f_val = inv(f_rng_min);
		// Add   
		if (f_val > f_rng_max)
			f_val = f_rng_max;
		display_new = TRUE;
	}
	return f_val;
}

function p_val() {
	p_count++;
	if (p_count == vm[p]) {
		p_count = 0;
		ar_y += inc[p];
	}
	return ar_y;
}

function p_cycle() {
	vm_count++;
	if (vm_count > vm_loops) {
		if (!p) {
			vm_count = 0;
			return 1;
		}
		else {
			vm_count = vm_loops;
			return -1;
		}
	}
	return p;
}

function OffsetAR(axis, offset_val) {
	set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
	return;
}

function number_to_string(f_val, f_digits) {
	i = 1; c_val = 10000;
	if (f_val < 0) //--neg numbers
	{
		putc_oled(i, 45);
		i += 1;
		f_val = abs(f_val);
	}
	for (c = 5; c >= 1; c--) {
		if (f_digits >= c) {
			putc_oled(i, ASCII_NUM[f_val / c_val]);
			f_val = f_val % c_val;
			i += 1;
			if (c == 4) {
				putc_oled(i, 44);
				i += 1;
			}
		}
		c_val /= 10;
	}
	puts_oled(center_x(i - 1, OLED_FONT_LARGE_WIDTH), 37, OLED_FONT_LARGE, i - 1, OLED_WHITE);
}

function find_digits(f_num) {
	f_num = abs(f_num);
	if (f_num / 10000 > 0) return 5;
	if (f_num / 1000 > 0) return 4;
	if (f_num / 100 > 0) return 3;
	if (f_num / 10 > 0) return 2;
	return 1;
}

function center_x(f_chars, f_font) {
	return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

function center_y(f_size) {
	return (OLED_HEIGHT / 2) - (f_size / 2);
}

function press_hold(f_btn) {
	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250
		&& get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function led(f_color) {
	for (i = 0; i <= 3; i++) {
		set_led(i, duint8((f_color * 4) + i));
	}
}

function reset_spvar() {
	spvar_current_slot = SPVAR_1;
	spvar_current_bit = 0;
	spvar_current_value = 0;
}

/*=============================================================================================================================                                          
| 													ZEN RELATED FUNCTIONS				  									  |
| 						      DO NOT TOUCH ANYTHING BELOW THIS UNLESS YOU KNOW WHAT YOU ARE DOING                    		  |                 
|=============================================================================================================================| */	

int spvar_current_bit,
	spvar_current_slot,
	spvar_current_value,
	spvar_tmp,
	spvar_bits;

// Function used to count the number of bits used by the given value
function get_bit_count(val) {
	spvar_tmp = 0;
	while (val) {
		spvar_tmp++;
		val = abs(val >> 1);
	}
	return spvar_tmp;
}

// Function used to count the number of bits used by 2 given values
function get_bit_count2(val1, val2) {
	spvar_tmp = max(get_bit_count(val1), get_bit_count(val2));
	if (is_signed2(val1, val2)) {
		spvar_tmp++;
	}
	return spvar_tmp;
}

// Function used to determine if either of 2 given values is negative
function is_signed2(val1, val2) { return val1 < 0 || val2 < 0; }

// Function used to generate a bitmask for the sign bit
function make_sign(bits) { return 1 << clamp(bits - 1, 0, 31); }

// Function used to generate a full bitmask
function make_full_mask(bits) {
	if (bits == 32) {
		return -1;
	}
	return 0x7FFFFFFF >> (31 - bits);
}

// Function used to generate a bitmask for just the bits required for the value part of a signed range
function make_sign_mask(bits) { return make_full_mask(bits - 1); }

// Function used to pack a value that has potential for being negative
function pack_i(val, bits) {
	if (val < 0) {
		return (abs(val) & make_sign_mask(bits)) | make_sign(bits);
	}
	return val & make_sign_mask(bits);
}

// Function used to unpack (restore) a value that has potential for being negative
function unpack_i(val, bits) {
	if (val & make_sign(bits)) {
		return 0 - (val & make_sign_mask(bits));
	}
	return val & make_sign_mask(bits);
}

// Function used to read the value of a SPVAR without any limits
function read_spvar_slot(slot) { return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0); }

// Function used to save your value in the SPVARs
function save_spvar(val, min, max) {
	spvar_bits = get_bit_count2(min, max);
	val = clamp(val, min, max);
	
	if (is_signed2(min, max)) {
		val = pack_i(val, spvar_bits);
	}
	val = val & make_full_mask(spvar_bits);
	if (spvar_bits >= 32 - spvar_current_bit) {
		spvar_current_value = spvar_current_value | (val << spvar_current_bit);
		set_pvar(spvar_current_slot, spvar_current_value);
		spvar_current_slot++;
		spvar_bits -= (32 - spvar_current_bit);
		val = val >> (32 - spvar_current_bit);
		spvar_current_bit = 0;
		spvar_current_value = 0;
	}
	spvar_current_value = spvar_current_value | (val << spvar_current_bit);
	spvar_current_bit += spvar_bits;
	if (!spvar_current_bit) {
		spvar_current_value = 0;
	}
	set_pvar(spvar_current_slot, spvar_current_value);
}

// Function used to read your value from the SPVARs
function read_spvar(min, max, def) {
	spvar_bits = get_bit_count2(min, max);
	spvar_current_value = (read_spvar_slot(spvar_current_slot) >> spvar_current_bit) & make_full_mask(spvar_bits);

	if (spvar_bits >= 32 - spvar_current_bit) {
		spvar_current_value = (spvar_current_value & make_full_mask(32 - spvar_current_bit)) | ((read_spvar_slot(spvar_current_slot + 1) & make_full_mask(spvar_bits - (32 - spvar_current_bit))) << (32 - spvar_current_bit));
	}
	spvar_current_bit += spvar_bits;
	spvar_current_value = spvar_current_value & make_full_mask(spvar_bits);
	if (spvar_current_bit >= 32) {
		spvar_current_slot++;
		spvar_current_bit -= 32;
	}
	if (is_signed2(min, max)) {
		spvar_current_value = unpack_i(spvar_current_value, spvar_bits);
	}
	if (spvar_current_value < min || spvar_current_value > max) {
		return def;
	}
	// Return the retrieved value to the user since it's within the expected range
	return spvar_current_value;
}

function Load() {
	reset_spvar();
	if (read_spvar(0, 1, 0)) {
		antirecoil_start[0] = read_spvar(0, 99, 0);
		antirecoil_mid[0] = read_spvar(0, 99, 0);
		antirecoil_end[0] = read_spvar(0, 99, 0);
		antirecoil_time[0] = read_spvar(0, 99, 0);
		antirecoil_start[1] = read_spvar(0, 99, 0);
		antirecoil_mid[1] = read_spvar(0, 99, 0);
		antirecoil_end[1] = read_spvar(0, 99, 0);
		antirecoil_time[1] = read_spvar(0, 99, 0);
		antirecoil_start[2] = read_spvar(0, 99, 0);
		antirecoil_mid[2] = read_spvar(0, 99, 0);
		antirecoil_end[2] = read_spvar(0, 99, 0);
		antirecoil_time[2] = read_spvar(0, 99, 0);
		antirecoil_start[3] = read_spvar(0, 99, 0);
		antirecoil_mid[3] = read_spvar(0, 99, 0);
		antirecoil_end[3] = read_spvar(0, 99, 0);
		antirecoil_time[3] = read_spvar(0, 99, 0);
		antirecoil_start[4] = read_spvar(0, 99, 0);
		antirecoil_mid[4] = read_spvar(0, 99, 0);
		antirecoil_end[4] = read_spvar(0, 99, 0);
		antirecoil_time[4] = read_spvar(0, 99, 0);
		antirecoil_start[5] = read_spvar(0, 99, 0);
		antirecoil_mid[5] = read_spvar(0, 99, 0);
		antirecoil_end[5] = read_spvar(0, 99, 0);
		antirecoil_time[5] = read_spvar(0, 99, 0);
		antirecoil_start[6] = read_spvar(0, 99, 0);
		antirecoil_mid[6] = read_spvar(0, 99, 0);
		antirecoil_end[6] = read_spvar(0, 99, 0);
		antirecoil_time[6] = read_spvar(0, 99, 0);
		antirecoil_start[7] = read_spvar(0, 99, 0);
		antirecoil_mid[7] = read_spvar(0, 99, 0);
		antirecoil_end[7] = read_spvar(0, 99, 0);
		antirecoil_time[7] = read_spvar(0, 99, 0);
		antirecoil_start[8] = read_spvar(0, 99, 0);
		antirecoil_mid[8] = read_spvar(0, 99, 0);
		antirecoil_end[8] = read_spvar(0, 99, 0);
		antirecoil_time[8] = read_spvar(0, 99, 0);
		antirecoil_start[9] = read_spvar(0, 99, 0);
		antirecoil_mid[9] = read_spvar(0, 99, 0);
		antirecoil_end[9] = read_spvar(0, 99, 0);
		antirecoil_time[9] = read_spvar(0, 99, 0);
		antirecoil_start[10] = read_spvar(0, 99, 0);
		antirecoil_mid[10] = read_spvar(0, 99, 0);
		antirecoil_end[10] = read_spvar(0, 99, 0);
		antirecoil_time[10] = read_spvar(0, 99, 0);
		antirecoil_start[11] = read_spvar(0, 99, 0);
		antirecoil_mid[11] = read_spvar(0, 99, 0);
		antirecoil_end[11] = read_spvar(0, 99, 0);
		antirecoil_time[11] = read_spvar(0, 99, 0);
		antirecoil_start[12] = read_spvar(0, 99, 0);
		antirecoil_mid[12] = read_spvar(0, 99, 0);
		antirecoil_end[12] = read_spvar(0, 99, 0);
		antirecoil_time[12] = read_spvar(0, 99, 0);
		antirecoil_start[13] = read_spvar(0, 99, 0);
		antirecoil_mid[13] = read_spvar(0, 99, 0);
		antirecoil_end[13] = read_spvar(0, 99, 0);
		antirecoil_time[13] = read_spvar(0, 99, 0);
		antirecoil_start[14] = read_spvar(0, 99, 0);
		antirecoil_mid[14] = read_spvar(0, 99, 0);
		antirecoil_end[14] = read_spvar(0, 99, 0);
		antirecoil_time[14] = read_spvar(0, 99, 0);
		antirecoil_start[15] = read_spvar(0, 99, 0);
		antirecoil_mid[15] = read_spvar(0, 99, 0);
		antirecoil_end[15] = read_spvar(0, 99, 0);
		antirecoil_time[15] = read_spvar(0, 99, 0);
		antirecoil_start[16] = read_spvar(0, 99, 0);
		antirecoil_mid[16] = read_spvar(0, 99, 0);
		antirecoil_end[16] = read_spvar(0, 99, 0);
		antirecoil_time[16] = read_spvar(0, 99, 0);
		antirecoil_start[17] = read_spvar(0, 99, 0);
		antirecoil_mid[17] = read_spvar(0, 99, 0);
		antirecoil_end[17] = read_spvar(0, 99, 0);
		antirecoil_time[17] = read_spvar(0, 99, 0);
		antirecoil_start[18] = read_spvar(0, 99, 0);
		antirecoil_mid[18] = read_spvar(0, 99, 0);
		antirecoil_end[18] = read_spvar(0, 99, 0);
		antirecoil_time[18] = read_spvar(0, 99, 0);
		antirecoil_start[19] = read_spvar(0, 99, 0);
		antirecoil_mid[19] = read_spvar(0, 99, 0);
		antirecoil_end[19] = read_spvar(0, 99, 0);
		antirecoil_time[19] = read_spvar(0, 99, 0);
		antirecoil_start[20] = read_spvar(0, 99, 0);
		antirecoil_mid[20] = read_spvar(0, 99, 0);
		antirecoil_end[20] = read_spvar(0, 99, 0);
		antirecoil_time[20] = read_spvar(0, 99, 0);
		antirecoil_start[21] = read_spvar(0, 99, 0);
		antirecoil_mid[21] = read_spvar(0, 99, 0);
		antirecoil_end[21] = read_spvar(0, 99, 0);
		antirecoil_time[21] = read_spvar(0, 99, 0);
		antirecoil_start[22] = read_spvar(0, 99, 0);
		antirecoil_mid[22] = read_spvar(0, 99, 0);
		antirecoil_end[22] = read_spvar(0, 99, 0);
		antirecoil_time[22] = read_spvar(0, 99, 0);
		antirecoil_start[23] = read_spvar(0, 99, 0);
		antirecoil_mid[23] = read_spvar(0, 99, 0);
		antirecoil_end[23] = read_spvar(0, 99, 0);
		antirecoil_time[23] = read_spvar(0, 99, 0);
		antirecoil_start[24] = read_spvar(0, 99, 0);
		antirecoil_mid[24] = read_spvar(0, 99, 0);
		antirecoil_end[24] = read_spvar(0, 99, 0);
		antirecoil_time[24] = read_spvar(0, 99, 0);
		antirecoil_start[25] = read_spvar(0, 99, 0);
		antirecoil_mid[25] = read_spvar(0, 99, 0);
		antirecoil_end[25] = read_spvar(0, 99, 0);
		antirecoil_time[25] = read_spvar(0, 99, 0);
		antirecoil_start[26] = read_spvar(0, 99, 0);
		antirecoil_mid[26] = read_spvar(0, 99, 0);
		antirecoil_end[26] = read_spvar(0, 99, 0);
		antirecoil_time[26] = read_spvar(0, 99, 0);
		antirecoil_start[27] = read_spvar(0, 99, 0);
		antirecoil_mid[27] = read_spvar(0, 99, 0);
		antirecoil_end[27] = read_spvar(0, 99, 0);
		antirecoil_time[27] = read_spvar(0, 99, 0);
		antirecoil_start[28] = read_spvar(0, 99, 0);
		antirecoil_mid[28] = read_spvar(0, 99, 0);
		antirecoil_end[28] = read_spvar(0, 99, 0);
		antirecoil_time[28] = read_spvar(0, 99, 0);
		antirecoil_start[29] = read_spvar(0, 99, 0);
		antirecoil_mid[29] = read_spvar(0, 99, 0);
		antirecoil_end[29] = read_spvar(0, 99, 0);
		antirecoil_time[29] = read_spvar(0, 99, 0);
		antirecoil_start[30] = read_spvar(0, 99, 0);
		antirecoil_mid[30] = read_spvar(0, 99, 0);
		antirecoil_end[30] = read_spvar(0, 99, 0);
		antirecoil_time[30] = read_spvar(0, 99, 0);
		antirecoil_start[31] = read_spvar(0, 99, 0);
		antirecoil_mid[31] = read_spvar(0, 99, 0);
		antirecoil_end[31] = read_spvar(0, 99, 0);
		antirecoil_time[31] = read_spvar(0, 99, 0);
		antirecoil_start[32] = read_spvar(0, 99, 0);
		antirecoil_mid[32] = read_spvar(0, 99, 0);
		antirecoil_end[32] = read_spvar(0, 99, 0);
		antirecoil_time[32] = read_spvar(0, 99, 0);
		antirecoil_start[33] = read_spvar(0, 99, 0);
		antirecoil_mid[33] = read_spvar(0, 99, 0);
		antirecoil_end[33] = read_spvar(0, 99, 0);
		antirecoil_time[33] = read_spvar(0, 99, 0);
		toggle_antirecoil[0] = read_spvar(0, 1, 0);
		toggle_antirecoil[1] = read_spvar(0, 1, 0);
		toggle_antirecoil[2] = read_spvar(0, 1, 0);
		toggle_rapidfire[22] = read_spvar(0, 1, 0);
		toggle_rapidfire[23] = read_spvar(0, 1, 0);
		toggle_rapidfire[24] = read_spvar(0, 1, 0);
		toggle_rapidfire[25] = read_spvar(0, 1, 0);
		toggle_rapidfire[26] = read_spvar(0, 1, 0);
		toggle_rapidfire[27] = read_spvar(0, 1, 0);
		toggle_rapidfire[28] = read_spvar(0, 1, 0);
		toggle_rapidfire[29] = read_spvar(0, 1, 0);
		toggle_burstfire[0] = read_spvar(0, 1, 0);
		toggle_burstfire[1] = read_spvar(0, 1, 0);
		toggle_burstfire[2] = read_spvar(0, 1, 0);
		autolean_on[0] = read_spvar(0, 1, 0);
		peekshot_on[0] = read_spvar(0, 1, 0);
		autolean_on[1] = read_spvar(0, 1, 0);
		autolean_on[2] = read_spvar(0, 1, 0);
		peekshot_on[1] = read_spvar(0, 1, 0);
		peekshot_on[2] = read_spvar(0, 1, 0);
		autodown_on_ads[0] = read_spvar(0, 1, 0);
		autodown_on_ads[1] = read_spvar(0, 1, 0);
		autodown_on_ads[2] = read_spvar(0, 1, 0);
		tbag_on[0] = read_spvar(0, 1, 0);
		tbag_on[1] = read_spvar(0, 1, 0);
		tbag_on[2] = read_spvar(0, 1, 0);
		toggle_jumpshot[0] = read_spvar(0, 1, 0);
		toggle_jumpshot[1] = read_spvar(0, 1, 0);
		toggle_jumpshot[2] = read_spvar(0, 1, 0);
		toggle_holdbreath = read_spvar(0, 1, 0);
		strafe_on[0] = read_spvar(0, 1, 0);
		strafe_on[1] = read_spvar(0, 1, 0);
		strafe_on[2] = read_spvar(0, 1, 0);
		amp_strafe[0] = read_spvar(0, 999, 0);
		vel_strafe[0] = read_spvar(0, 999, 0);
		amp_strafe[1] = read_spvar(0, 999, 0);
		vel_strafe[1] = read_spvar(0, 999, 0);
		amp_strafe[2] = read_spvar(0, 999, 0);
		vel_strafe[2] = read_spvar(0, 999, 0);
		burstfire_hold = read_spvar(0, 999, 0);
		burstfire_release = read_spvar(0, 999, 0);
		swap_on = read_spvar(0, 1, 0);
		quickscope_on = read_spvar(0, 1, 0);
		weapon_name[0] = read_spvar(0, 33, 0);
		weapon_name[1] = read_spvar(0, 33, 0);
		weapon_name[2] = read_spvar(0, 33, 0);
		optic[0] = read_spvar(0, 5, 0);
		optic[1] = read_spvar(0, 5, 0);
		optic[2] = read_spvar(0, 5, 0);
		x1 = read_spvar(0, 50, 0);
		x2 = read_spvar(0, 50, 0);
		x3 = read_spvar(0, 50, 0);
		x4 = read_spvar(0, 50, 0);
		x6 = read_spvar(0, 50, 0);
		x8 = read_spvar(0, 50, 0);
		rate_of_fire[22] = read_spvar(1, 25, 0);
		rate_of_fire[23] = read_spvar(1, 25, 0);
		rate_of_fire[24] = read_spvar(1, 25, 0);
		rate_of_fire[25] = read_spvar(1, 25, 0);
		rate_of_fire[26] = read_spvar(1, 25, 0);
		rate_of_fire[27] = read_spvar(1, 25, 0);
		rate_of_fire[28] = read_spvar(1, 25, 0);
		rate_of_fire[29] = read_spvar(1, 25, 0);
		correction_opticsweap[0] = read_spvar(-20, 20, 0);
		correction_opticsweap[1] = read_spvar(-20, 20, 0);
		correction_opticsweap[2] = read_spvar(-20, 20, 0);
		correction_opticsweap[3] = read_spvar(-20, 20, 0);
		correction_opticsweap[4] = read_spvar(-20, 20, 0);
		correction_opticsweap[5] = read_spvar(-20, 20, 0);
		correction_opticsweap[6] = read_spvar(-20, 20, 0);
		correction_opticsweap[7] = read_spvar(-20, 20, 0);
		correction_opticsweap[8] = read_spvar(-20, 20, 0);
		correction_opticsweap[9] = read_spvar(-20, 20, 0);
		correction_opticsweap[10] = read_spvar(-20, 20, 0);
		correction_opticsweap[11] = read_spvar(-20, 20, 0);
		correction_opticsweap[12] = read_spvar(-20, 20, 0);
		correction_opticsweap[13] = read_spvar(-20, 20, 0);
		correction_opticsweap[14] = read_spvar(-20, 20, 0);
		correction_opticsweap[15] = read_spvar(-20, 20, 0);
		correction_opticsweap[16] = read_spvar(-20, 20, 0);
		correction_opticsweap[17] = read_spvar(-20, 20, 0);
		correction_opticsweap[18] = read_spvar(-20, 20, 0);
		correction_opticsweap[19] = read_spvar(-20, 20, 0);
		correction_opticsweap[20] = read_spvar(-20, 20, 0);
		correction_opticsweap[21] = read_spvar(-20, 20, 0);
		correction_opticsweap[22] = read_spvar(-20, 20, 0);
		correction_opticsweap[23] = read_spvar(-20, 20, 0);
		correction_opticsweap[24] = read_spvar(-20, 20, 0);
		correction_opticsweap[25] = read_spvar(-20, 20, 0);
		correction_opticsweap[26] = read_spvar(-20, 20, 0);
		correction_opticsweap[27] = read_spvar(-20, 20, 0);
		correction_opticsweap[28] = read_spvar(-20, 20, 0);
		correction_opticsweap[29] = read_spvar(-20, 20, 0);
		correction_opticsweap[30] = read_spvar(-20, 20, 0);
		correction_opticsweap[31] = read_spvar(-20, 20, 0);
		correction_opticsweap[32] = read_spvar(-20, 20, 0);
		correction_opticsweap[33] = read_spvar(-20, 20, 0);
		rapid_mk = read_spvar(0, 99, 0);
		burst_mk = read_spvar(0, 99, 0);
		strafe_mk = read_spvar(0, 99, 0);
		jump_mk = read_spvar(0, 99, 0);
		tbag_mk = read_spvar(0, 99, 0);
		peekshot_mk = read_spvar(0, 99, 0);
		autolean_mk = read_spvar(0, 99, 0);
		crouch_ads_mk = read_spvar(0, 99, 0);
		autorun_mk = read_spvar(0, 99, 0);
		RESET = read_spvar(0, 99, 0);
		hip_value = read_spvar(-50, 50, 0);
		crouch_value = read_spvar(-50, 50, 0);
		prone_value = read_spvar(-50, 50, 0);
		controller_or_mk = read_spvar(0, 1, 0);
        screen_saver = read_spvar(0, 1, 0);
	}
	else {
		amp_strafe[0] = 300;
		vel_strafe[0] = 100;
		amp_strafe[1] = 300;
		vel_strafe[1] = 100;
		amp_strafe[2] = 300;
		vel_strafe[2] = 100;
		burstfire_hold = 120;
		burstfire_release = 120;
		toggle_rapidfire[22] = 1;
		toggle_rapidfire[23] = 1;
		toggle_rapidfire[24] = 1;
		toggle_rapidfire[25] = 1;
		toggle_rapidfire[26] = 1;
		toggle_rapidfire[27] = 1;
		toggle_rapidfire[28] = 1;
		toggle_rapidfire[29] = 1;
		rate_of_fire[22] = 13;
		rate_of_fire[23] = 13;
		rate_of_fire[24] = 13;
		rate_of_fire[25] = 13;
		rate_of_fire[26] = 13;
		rate_of_fire[27] = 13;
		rate_of_fire[28] = 13;
		rate_of_fire[29] = 13;
	}
}

function Save() {
	reset_spvar();
	combo_run(SAVE);
	save_spvar(1, 0, 1);
	save_spvar(antirecoil_start[0], 0, 99);
	save_spvar(antirecoil_mid[0], 0, 99);
	save_spvar(antirecoil_end[0], 0, 99);
	save_spvar(antirecoil_time[0], 0, 99);
	save_spvar(antirecoil_start[1], 0, 99);
	save_spvar(antirecoil_mid[1], 0, 99);
	save_spvar(antirecoil_end[1], 0, 99);
	save_spvar(antirecoil_time[1], 0, 99);
	save_spvar(antirecoil_start[2], 0, 99);
	save_spvar(antirecoil_mid[2], 0, 99);
	save_spvar(antirecoil_end[2], 0, 99);
	save_spvar(antirecoil_time[2], 0, 99);
	save_spvar(antirecoil_start[3], 0, 99);
	save_spvar(antirecoil_mid[3], 0, 99);
	save_spvar(antirecoil_end[3], 0, 99);
	save_spvar(antirecoil_time[3], 0, 99);
	save_spvar(antirecoil_start[4], 0, 99);
	save_spvar(antirecoil_mid[4], 0, 99);
	save_spvar(antirecoil_end[4], 0, 99);
	save_spvar(antirecoil_time[4], 0, 99);
	save_spvar(antirecoil_start[5], 0, 99);
	save_spvar(antirecoil_mid[5], 0, 99);
	save_spvar(antirecoil_end[5], 0, 99);
	save_spvar(antirecoil_time[5], 0, 99);
	save_spvar(antirecoil_start[6], 0, 99);
	save_spvar(antirecoil_mid[6], 0, 99);
	save_spvar(antirecoil_end[6], 0, 99);
	save_spvar(antirecoil_time[6], 0, 99);
	save_spvar(antirecoil_start[7], 0, 99);
	save_spvar(antirecoil_mid[7], 0, 99);
	save_spvar(antirecoil_end[7], 0, 99);
	save_spvar(antirecoil_time[7], 0, 99);
	save_spvar(antirecoil_start[8], 0, 99);
	save_spvar(antirecoil_mid[8], 0, 99);
	save_spvar(antirecoil_end[8], 0, 99);
	save_spvar(antirecoil_time[8], 0, 99);
	save_spvar(antirecoil_start[9], 0, 99);
	save_spvar(antirecoil_mid[9], 0, 99);
	save_spvar(antirecoil_end[9], 0, 99);
	save_spvar(antirecoil_time[9], 0, 99);
	save_spvar(antirecoil_start[10], 0, 99);
	save_spvar(antirecoil_mid[10], 0, 99);
	save_spvar(antirecoil_end[10], 0, 99);
	save_spvar(antirecoil_time[10], 0, 99);
	save_spvar(antirecoil_start[11], 0, 99);
	save_spvar(antirecoil_mid[11], 0, 99);
	save_spvar(antirecoil_end[11], 0, 99);
	save_spvar(antirecoil_time[11], 0, 99);
	save_spvar(antirecoil_start[12], 0, 99);
	save_spvar(antirecoil_mid[12], 0, 99);
	save_spvar(antirecoil_end[12], 0, 99);
	save_spvar(antirecoil_time[12], 0, 99);
	save_spvar(antirecoil_start[13], 0, 99);
	save_spvar(antirecoil_mid[13], 0, 99);
	save_spvar(antirecoil_end[13], 0, 99);
	save_spvar(antirecoil_time[13], 0, 99);
	save_spvar(antirecoil_start[14], 0, 99);
	save_spvar(antirecoil_mid[14], 0, 99);
	save_spvar(antirecoil_end[14], 0, 99);
	save_spvar(antirecoil_time[14], 0, 99);
	save_spvar(antirecoil_start[15], 0, 99);
	save_spvar(antirecoil_mid[15], 0, 99);
	save_spvar(antirecoil_end[15], 0, 99);
	save_spvar(antirecoil_time[15], 0, 99);
	save_spvar(antirecoil_start[16], 0, 99);
	save_spvar(antirecoil_mid[16], 0, 99);
	save_spvar(antirecoil_end[16], 0, 99);
	save_spvar(antirecoil_time[16], 0, 99);
	save_spvar(antirecoil_start[17], 0, 99);
	save_spvar(antirecoil_mid[17], 0, 99);
	save_spvar(antirecoil_end[17], 0, 99);
	save_spvar(antirecoil_time[17], 0, 99);
	save_spvar(antirecoil_start[18], 0, 99);
	save_spvar(antirecoil_mid[18], 0, 99);
	save_spvar(antirecoil_end[18], 0, 99);
	save_spvar(antirecoil_time[18], 0, 99);
	save_spvar(antirecoil_start[19], 0, 99);
	save_spvar(antirecoil_mid[19], 0, 99);
	save_spvar(antirecoil_end[19], 0, 99);
	save_spvar(antirecoil_time[19], 0, 99);
	save_spvar(antirecoil_start[20], 0, 99);
	save_spvar(antirecoil_mid[20], 0, 99);
	save_spvar(antirecoil_end[20], 0, 99);
	save_spvar(antirecoil_time[20], 0, 99);
	save_spvar(antirecoil_start[21], 0, 99);
	save_spvar(antirecoil_mid[21], 0, 99);
	save_spvar(antirecoil_end[21], 0, 99);
	save_spvar(antirecoil_time[21], 0, 99);
	save_spvar(antirecoil_start[22], 0, 99);
	save_spvar(antirecoil_mid[22], 0, 99);
	save_spvar(antirecoil_end[22], 0, 99);
	save_spvar(antirecoil_time[22], 0, 99);
	save_spvar(antirecoil_start[23], 0, 99);
	save_spvar(antirecoil_mid[23], 0, 99);
	save_spvar(antirecoil_end[23], 0, 99);
	save_spvar(antirecoil_time[23], 0, 99);
	save_spvar(antirecoil_start[24], 0, 99);
	save_spvar(antirecoil_mid[24], 0, 99);
	save_spvar(antirecoil_end[24], 0, 99);
	save_spvar(antirecoil_time[24], 0, 99);
	save_spvar(antirecoil_start[25], 0, 99);
	save_spvar(antirecoil_mid[25], 0, 99);
	save_spvar(antirecoil_end[25], 0, 99);
	save_spvar(antirecoil_time[25], 0, 99);
	save_spvar(antirecoil_start[26], 0, 99);
	save_spvar(antirecoil_mid[26], 0, 99);
	save_spvar(antirecoil_end[26], 0, 99);
	save_spvar(antirecoil_time[26], 0, 99);
	save_spvar(antirecoil_start[27], 0, 99);
	save_spvar(antirecoil_mid[27], 0, 99);
	save_spvar(antirecoil_end[27], 0, 99);
	save_spvar(antirecoil_time[27], 0, 99);
	save_spvar(antirecoil_start[28], 0, 99);
	save_spvar(antirecoil_mid[28], 0, 99);
	save_spvar(antirecoil_end[28], 0, 99);
	save_spvar(antirecoil_time[28], 0, 99);
	save_spvar(antirecoil_start[29], 0, 99);
	save_spvar(antirecoil_mid[29], 0, 99);
	save_spvar(antirecoil_end[29], 0, 99);
	save_spvar(antirecoil_time[29], 0, 99);
	save_spvar(antirecoil_start[30], 0, 99);
	save_spvar(antirecoil_mid[30], 0, 99);
	save_spvar(antirecoil_end[30], 0, 99);
	save_spvar(antirecoil_time[30], 0, 99);
	save_spvar(antirecoil_start[31], 0, 99);
	save_spvar(antirecoil_mid[31], 0, 99);
	save_spvar(antirecoil_end[31], 0, 99);
	save_spvar(antirecoil_time[31], 0, 99);
	save_spvar(antirecoil_start[32], 0, 99);
	save_spvar(antirecoil_mid[32], 0, 99);
	save_spvar(antirecoil_end[32], 0, 99);
	save_spvar(antirecoil_time[32], 0, 99);
	save_spvar(antirecoil_start[33], 0, 99);
	save_spvar(antirecoil_mid[33], 0, 99);
	save_spvar(antirecoil_end[33], 0, 99);
	save_spvar(antirecoil_time[33], 0, 99);
	save_spvar(toggle_antirecoil[0], 0, 1);
	save_spvar(toggle_antirecoil[1], 0, 1);
	save_spvar(toggle_antirecoil[2], 0, 1);
	save_spvar(toggle_rapidfire[22], 0, 1);
	save_spvar(toggle_rapidfire[23], 0, 1);
	save_spvar(toggle_rapidfire[24], 0, 1);
	save_spvar(toggle_rapidfire[25], 0, 1);
	save_spvar(toggle_rapidfire[26], 0, 1);
	save_spvar(toggle_rapidfire[27], 0, 1);
	save_spvar(toggle_rapidfire[28], 0, 1);
	save_spvar(toggle_rapidfire[29], 0, 1);
	save_spvar(toggle_burstfire[0], 0, 1);
	save_spvar(toggle_burstfire[1], 0, 1);
	save_spvar(toggle_burstfire[2], 0, 1);
	save_spvar(autolean_on[0], 0, 1);
	save_spvar(peekshot_on[0], 0, 1);
	save_spvar(autolean_on[1], 0, 1);
	save_spvar(autolean_on[2], 0, 1);
	save_spvar(peekshot_on[1], 0, 1);
	save_spvar(peekshot_on[2], 0, 1);
	save_spvar(autodown_on_ads[0], 0, 1);
	save_spvar(autodown_on_ads[1], 0, 1);
	save_spvar(autodown_on_ads[2], 0, 1);
	save_spvar(tbag_on[0], 0, 1);
	save_spvar(tbag_on[1], 0, 1);
	save_spvar(tbag_on[2], 0, 1);
	save_spvar(toggle_jumpshot[0], 0, 1);
	save_spvar(toggle_jumpshot[1], 0, 1);
	save_spvar(toggle_jumpshot[2], 0, 1);
	save_spvar(toggle_holdbreath, 0, 1);
	save_spvar(strafe_on[0], 0, 1);
	save_spvar(strafe_on[1], 0, 1);
	save_spvar(strafe_on[2], 0, 1);
	save_spvar(amp_strafe[0], 0, 999);
	save_spvar(vel_strafe[0], 0, 999);
	save_spvar(amp_strafe[1], 0, 999);
	save_spvar(vel_strafe[1], 0, 999);
	save_spvar(amp_strafe[2], 0, 999);
	save_spvar(vel_strafe[2], 0, 999);
	save_spvar(burstfire_hold, 0, 999);
	save_spvar(burstfire_release, 0, 999);
	save_spvar(swap_on, 0, 1);
	save_spvar(quickscope, 0, 1);
	save_spvar(weapon_name[0], 0, 33);
	save_spvar(weapon_name[1], 0, 33);
	save_spvar(weapon_name[2], 0, 33);
	save_spvar(optic[0], 0, 5);
	save_spvar(optic[1], 0, 5);
	save_spvar(optic[2], 0, 5);
	save_spvar(x1, 0, 50);
	save_spvar(x2, 0, 50);
	save_spvar(x3, 0, 50);
	save_spvar(x4, 0, 50);
	save_spvar(x6, 0, 50);
	save_spvar(x8, 0, 50);
	save_spvar(rate_of_fire[22], 1, 25);
	save_spvar(rate_of_fire[23], 1, 25);
	save_spvar(rate_of_fire[24], 1, 25);
	save_spvar(rate_of_fire[25], 1, 25);
	save_spvar(rate_of_fire[26], 1, 25);
	save_spvar(rate_of_fire[27], 1, 25);
	save_spvar(rate_of_fire[28], 1, 25);
	save_spvar(rate_of_fire[29], 1, 25);
	save_spvar(correction_opticsweap[0], -20, 20);
	save_spvar(correction_opticsweap[1], -20, 20);
	save_spvar(correction_opticsweap[2], -20, 20);
	save_spvar(correction_opticsweap[3], -20, 20);
	save_spvar(correction_opticsweap[4], -20, 20);
	save_spvar(correction_opticsweap[5], -20, 20);
	save_spvar(correction_opticsweap[6], -20, 20);
	save_spvar(correction_opticsweap[7], -20, 20);
	save_spvar(correction_opticsweap[8], -20, 20);
	save_spvar(correction_opticsweap[9], -20, 20);
	save_spvar(correction_opticsweap[10], -20, 20);
	save_spvar(correction_opticsweap[11], -20, 20);
	save_spvar(correction_opticsweap[12], -20, 20);
	save_spvar(correction_opticsweap[13], -20, 20);
	save_spvar(correction_opticsweap[14], -20, 20);
	save_spvar(correction_opticsweap[15], -20, 20);
	save_spvar(correction_opticsweap[16], -20, 20);
	save_spvar(correction_opticsweap[17], -20, 20);
	save_spvar(correction_opticsweap[18], -20, 20);
	save_spvar(correction_opticsweap[19], -20, 20);
	save_spvar(correction_opticsweap[20], -20, 20);
	save_spvar(correction_opticsweap[21], -20, 20);
	save_spvar(correction_opticsweap[22], -20, 20);
	save_spvar(correction_opticsweap[23], -20, 20);
	save_spvar(correction_opticsweap[24], -20, 20);
	save_spvar(correction_opticsweap[25], -20, 20);
	save_spvar(correction_opticsweap[26], -20, 20);
	save_spvar(correction_opticsweap[27], -20, 20);
	save_spvar(correction_opticsweap[28], -20, 20);
	save_spvar(correction_opticsweap[29], -20, 20);
	save_spvar(correction_opticsweap[30], -20, 20);
	save_spvar(correction_opticsweap[31], -20, 20);
	save_spvar(correction_opticsweap[32], -20, 20);
	save_spvar(correction_opticsweap[33], -20, 20);
	save_spvar(rapid_mk, 0, 99);
	save_spvar(burst_mk, 0, 99);
	save_spvar(strafe_mk, 0, 99);
	save_spvar(jump_mk, 0, 99);
	save_spvar(tbag_mk, 0, 99);
	save_spvar(peekshot_mk, 0, 99);
	save_spvar(autolean_mk, 0, 99);
	save_spvar(crouch_ads_mk, 0, 99);
	save_spvar(autorun_mk, 0, 99);
	save_spvar(RESET, 0, 99);
	save_spvar(hip_value, -50, 50);
	save_spvar(crouch_value, -50, 50);
	save_spvar(prone_value, -50, 50);
	save_spvar(controller_or_mk, 0, 1);
    save_spvar(screen_saver, 0, 1);
}

function supported_key_pressed() {
	for (i = 0; i < sizeof(LayoutsMK); i++) {
		if (get_keyboard(LayoutsMK[i])) { return LayoutsMK[i]; }
	}
	return -1;
}

function refresh_kb_states() {
	bitindex = 0;
	varindex = 0;
	for (i = 0; i < sizeof(LayoutsMK); i++) {
		if (bitindex >= 32) {
			bitindex = 0;
			varindex++;
		}
		if (get_keyboard(i)) {
			if (!test_bit(KBStates_Press[varindex], bitindex)) {
				KBStates_Press[varindex] = custom_set_bit(KBStates_Press[varindex], bitindex);
			}
			else {
				KBStates_Release[varindex] = custom_clear_bit(KBStates_Release[varindex], bitindex);
			}
		}
		else {
			if (!test_bit(KBStates_Release[varindex], bitindex)) {
				KBStates_Release[varindex] = custom_set_bit(KBStates_Release[varindex], bitindex);
			}
			else {
				KBStates_Press[varindex] = custom_clear_bit(KBStates_Press[varindex], bitindex);
			}
		}
		bitindex++;
	}
}

function event_press_kb(btn) {
	bitindex = btn % 32;
	varindex = btn / 32;
	return get_keyboard(btn) && test_bit(KBStates_Release[varindex], bitindex);
}

function event_release_kb(btn) {
	bitindex = btn % 32;
	varindex = btn / 32;
	return !get_keyboard(btn) && test_bit(KBStates_Press[varindex], bitindex);
}

function custom_set_bit(value, bitindex) {
	return value | (1 << bitindex);
}

function custom_clear_bit(value, bitindex) {
	return value & (~(1 << bitindex));
}