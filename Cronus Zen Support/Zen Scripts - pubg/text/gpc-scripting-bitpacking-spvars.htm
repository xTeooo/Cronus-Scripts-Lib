<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>GPC Scripting - Bitpacking SPVARs - Cronus GPC Script Guide</title><meta name="description" content="Here is how to Bitpack SPVARS. - Cronus GPC Script Guide"/><meta name="image" content=""/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="GPC Scripting - Bitpacking SPVARs - Cronus GPC Script Guide"/><meta name="twitter:description" content="Here is how to Bitpack SPVARS. - Cronus GPC Script Guide"/><meta name="twitter:image" content=""/><meta property="og:title" content="GPC Scripting - Bitpacking SPVARs - Cronus GPC Script Guide"/><meta property="og:type" content="product"/><meta property="og:image" content=""/><meta property="og:description" content="Here is how to Bitpack SPVARS. - Cronus GPC Script Guide"/><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"/><link rel="shortcut icon" href="https://archbee-image-uploads.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/zsgFLXoUp0mm_qZP-HyC3_cronusnuwhite.png"/><meta name="next-head-count" content="14"/><link rel="preconnect" href="https://cdn.archbee.com"/><meta http-equiv="X-UA-Compatible" content="IE=edge"/><meta name="apple-mobile-web-app-capable" content="yes"/><link type="text/css" href="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/public/normalize.css"/><style data-emotion-css=""></style><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"/><link rel="preload" href="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/css/868400a73a5ad8dd.css" as="style"/><link rel="stylesheet" href="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/css/868400a73a5ad8dd.css" data-n-g=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/webpack-8a0ecf8e7ec40271.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/framework-15f2633acd1af090.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/main-8731c6753172ee2b.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/pages/_app-0cdfe59de74efa36.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/a8e3d9c0-da84342245d38e02.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/1c2031c8-b2cce517057a5c67.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/1cc2734a-d0782981ce7e45b5.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/dc7690e1-87dba81a2ec10f5b.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/0d668eb9-9c6c0bf32782692c.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/1743016e-eda3091633f66327.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/0fadf1af-2a0143249c58e99c.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/3860-1e1c2d543d82b458.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/5902-b69ffc0b18df9028.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/4883-b3a50bed77535428.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/8775-53e5db38f5b327ff.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/1350-fa71213e6637c663.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/4163-30748979d98e6d19.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/2074-ce29ef561e29c1a2.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/3395-8c5960ade71d55db.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/872-648f0bbc04f5d125.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/chunks/pages/public/%5B%5B...slug%5D%5D-6956444e19fcc04b.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/T78ke_kUKm_6HftMGeMiV/_buildManifest.js" defer=""></script><script src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/_next/static/T78ke_kUKm_6HftMGeMiV/_ssgManifest.js" defer=""></script><style id="__jsx-3598682086">#nprogress{pointer-events:none}#nprogress .bar{background:#5c98ce;position:fixed;z-index:1031;top:0;left:0;width:100%;height:2px}#nprogress .peg{display:block;position:absolute;right:0px;width:100px;height:100%;-webkit-box-shadow:0 0 5px#0070f3,0 0 5px#0070f3;-moz-box-shadow:0 0 5px#0070f3,0 0 5px#0070f3;box-shadow:0 0 5px#0070f3,0 0 5px#0070f3;opacity:1;-webkit-transform:rotate(3deg)translate(0px,-4px);-ms-transform:rotate(3deg)translate(0px,-4px);-moz-transform:rotate(3deg)translate(0px,-4px);-o-transform:rotate(3deg)translate(0px,-4px);transform:rotate(3deg)translate(0px,-4px)}</style></head><body><div id="__next"><link rel="dns-prefetch" href="https://app.archbee.com"/><link rel="preconnect" href="https://app.archbee.com"/><link rel="dns-prefetch" href="https://cdn.archbee.com"/><link rel="preconnect" href="https://cdn.archbee.com"/><div class="h-full" style="visibility:hidden"><div class="ab-space ab-collection min-h-full min-w-full bg-white dark:bg-gray-900 dark:text-white"><div class="ab-space-container ab-collection-container flex flex-col w-full justify-center"><div class="ab-top-navbar flex flex-col z-20 sticky top-0 items-center bg-gray-50 dark:bg-gray-850 border-b border-gray-200 dark:border-gray-700" id="ab-top-navbar"><div class="w-full mx-auto px-7"><div class="flex items-center justify-between w-full py-4"><div class="relative flex justify-start items-center" style="max-width:160px;min-height:48px"><a class="w-full" href="https://beta.cronusmax.com" aria-label="website logo"><img src="https://archbee-image-uploads.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/mVazwQo-BIf6oPRZaRCvC_cronuslogolight.png" class="block mx-auto py-1" style="max-height:48px" alt="website logo"/></a></div><div class="flex items-center"><div class="flex text-gray-400 cursor-pointer mx-4"><div class="flex xl:hidden items-center"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#9ca3af" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-4 cursor-pointer css-gwy9yg"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-4 cursor-pointer"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg></div><span class="cursor-pointer inline-block w-5 h-5"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="ab-theme-switcher stroke-current"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg></span></div></div><div class="hidden xl:flex flex-1 justify-end"><a href="https://shop.cronusmax.com" class="text-gray-400 dark:text-gray-500 underline px-2">Buy Cronus</a><a href="https://cronusmax.com/gpclib/" class="text-gray-400 dark:text-gray-500 underline px-2">GPC Library</a><a href="https://gamepacks.cronusmax.com" class="text-gray-400 dark:text-gray-500 underline px-2">GamePacks (16bit)</a><a href="https://www.youtube.com/cronusmax" class="text-gray-400 dark:text-gray-500 underline px-2">YouTube</a><a href="https://forums.cronusmax.com/" class="text-gray-400 dark:text-gray-500 underline px-2">Forums</a><a href="https://discord.gg/cronuszen" class="text-gray-400 dark:text-gray-500 underline px-2">Discord</a></div></div><div class="no-print hidden xl:flex w-full pt-1"><div class="ab-public-space-links-wrap flex items-center flex-1 -left-4"><div class="ab-public-space-link flex rounded-md p-3 mx-1 cursor-pointer rounded-bl-none rounded-br-none border border-b-0 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800" role="link" tabindex="0"><div class="w-auto max-w-150 truncate text-ellipsis" title="Cronus Zen Guide"><span class="mr-1">📘</span>Cronus Zen Guide</div></div><div class="ab-public-space-link flex rounded-md p-3 mx-1 cursor-pointer rounded-bl-none rounded-br-none border border-b-0 border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800" role="link" tabindex="0"><div class="w-auto max-w-150 truncate text-ellipsis" title="GamePacks (32bit)"><span class="mr-1">📗</span>GamePacks (32bit)</div></div><div class="ab-public-space-link flex rounded-md p-3 mx-1 cursor-pointer rounded-bl-none rounded-br-none border border-b-0 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900" role="link" tabindex="0"><div class="w-auto max-w-150 truncate text-ellipsis font-semibold" title="GPC Script Guide"><span class="mr-1">📗</span>GPC Script Guide</div></div></div></div></div></div><div class="w-full ab-space-content ab-collection-content mx-auto relative xl:flex xl:flex-row justify-between px-7 xl:px-0"><div class="ab-tree-navigation no-print border-r border-gray-200 dark:border-gray-700 sticky flex-col transition-width transition-slowest ease w-300 hidden xl:flex pb-6" style="height:calc(100vh - undefinedpx);max-height:calc(100vh - undefinedpx)"><div class="os-host"><div class="os-resize-observer-host"></div><div class="os-padding"><div class="os-viewport"><div class="os-content"><div class="flex w-full xl:hidden"><div class="flex flex-col w-full p-6 mb-7 bg-gray-200 border-b border-gray-300 dark:bg-gray-700 dark:border-gray-600"><div class="flex justify-between font-semibold items-center text-gray-700 dark:text-gray-200 mb-4 "><span>Navigate through spaces</span><div class="text-gray-400 dark:text-gray-500 cursor-pointer"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="strike-current"><circle cx="12" cy="12" r="10"></circle><polyline points="8 12 12 16 16 12"></polyline><line x1="12" y1="8" x2="12" y2="16"></line></svg></div></div><div class="ab-public-space-link flex flex-col rounded-md font-semibold cursor-pointer mb-2 border shadow-sm border-gray-300 bg-gray-50 dark:border-gray-600 dark:bg-gray-800 css-0"><div class="w-auto truncate text-ellipsis p-4 text-gray-700 dark:text-gray-400" title="Cronus Zen Guide"><span class="mr-1">📘</span>Cronus Zen Guide</div></div><div class="ab-public-space-link flex flex-col rounded-md font-semibold cursor-pointer mb-2 border shadow-sm border-gray-300 bg-gray-50 dark:border-gray-600 dark:bg-gray-800 css-0"><div class="w-auto truncate text-ellipsis p-4 text-gray-700 dark:text-gray-400" title="GamePacks (32bit)"><span class="mr-1">📗</span>GamePacks (32bit)</div></div><div class="ab-public-space-link flex flex-col rounded-md font-semibold cursor-pointer mb-2 border shadow-sm border-gray-300 bg-gray-50 dark:border-gray-600 dark:bg-gray-800 css-1iyflbc"><div class="w-auto truncate text-ellipsis p-4 font-semibold" title="GPC Script Guide"><span class="mr-1">📗</span>GPC Script Guide</div></div></div></div><div class="flex justify-center"><div class="flex h-11 items-center border px-2.5 rounded-md border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#9ca3af" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="css-dki5kt"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg><input class="ab-search-input border-none bg-transparent placeholder-gray-400::placeholder w-full" placeholder="Search..." value=""/><kbd class="inline-flex justify-center items-center shadow p-2 mx-1 rounded border border-gray-300 dark:border-gray-700 align-middle leading-3 cursor-default text-gray-600 dark:text-gray-400" style="height:22px;min-width:22px">⌘</kbd><kbd class="inline-flex justify-center items-center shadow p-2 mx-1 rounded border border-gray-300 dark:border-gray-700 align-middle leading-3 cursor-default text-gray-600 dark:text-gray-400" style="height:22px;min-width:22px">K</kbd></div></div><div class="w-full relative overflow-x-hidden pl-6 xl:pl-0"><div title="GPC SCRIPTING"><a href="/gpc" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-lg text-gray-900 dark:text-white css-wo1xh2" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="GPC SCRIPTING"><span class="mr-1.5">📑</span><span class="truncate">GPC SCRIPTING</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform rotate-90"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a><div class="flex-1 max-w-full pl-6"><div title="What&#x27;s New in 32bit?"><a href="/gpc/whats-new-in-32bit-with-gpc-scripting" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="What&#x27;s New in 32bit?"><span class="truncate">What&#x27;s New in 32bit?</span></div></a></div><div title="Introduction"><a href="/gpc/introduction" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="Introduction"><span class="truncate">Introduction</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a></div><div title="Variables"><a href="/gpc/gpc-scripting-variables" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Variables"><span class="truncate">Variables</span></div></a></div><div title="Basic GPC Structure"><a href="/gpc/basic-gpc-structure-with-gpc-scripting" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Basic GPC Structure"><span class="truncate">Basic GPC Structure</span></div></a></div><div title="Definitions"><a href="/gpc/gpc-scripting-definitions" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Definitions"><span class="truncate">Definitions</span></div></a></div><div title="Data Section"><a href="/gpc/data-section" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Data Section"><span class="truncate">Data Section</span></div></a></div><div title="Remapping"><a href="/gpc/remapping" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Remapping"><span class="truncate">Remapping</span></div></a></div><div title="Const Arrays"><a href="/gpc/gpc-scripting-const-arrays" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Const Arrays"><span class="truncate">Const Arrays</span></div></a></div><div title="Init Section"><a href="/gpc/gpc-scripting-init-section" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Init Section"><span class="truncate">Init Section</span></div></a></div><div title="Main Section"><a href="/gpc/gpc-scripting-main-section" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Main Section"><span class="truncate">Main Section</span></div></a></div><div title="Combo Section"><a href="/gpc/gpc-scripting-combo-section" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Combo Section"><span class="truncate">Combo Section</span></div></a></div><div title="User Created Functions"><a href="/gpc/gpc-scripting-user-created-functions" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="User Created Functions"><span class="truncate">User Created Functions</span></div></a></div><div title="Identifiers"><a href="/gpc/identifiers" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Identifiers"><span class="truncate">Identifiers</span></div></a></div><div title="Constants"><a href="/gpc/gpc-scripting-constants" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="Constants"><span class="truncate">Constants</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a></div><div title="Functions"><a href="/gpc/gpc-scripting-functions" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="Functions"><span class="truncate">Functions</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a></div><div title="Device Functions"><a href="/gpc/gpc-scripting-device-functions" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Device Functions"><span class="truncate">Device Functions</span></div></a></div><div title="Remapping"><a href="/gpc/gpc-scripting-remapping" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-9whsf3" title="Remapping"><span class="truncate">Remapping</span></div></a></div><div title="Advanced Samples"><a href="/gpc/gpc-scripting-advanced-samples" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="Advanced Samples"><span class="truncate">Advanced Samples</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a></div><div title="API Samples"><a href="/gpc/gpc-scripting-api-samples" class="ab-tree-navigation-link text-lg cursor-pointer select-none flex items-center justify-between pr-0  ab-tree-navigation-link-inactive text-gray-600 dark:text-gray-300 css-1qawfwf" role="link" tabindex="0"><div class="flex items-center css-1ydoibe" title="API Samples"><span class="truncate">API Samples</span></div><div class="flex flex-col" aria-label="expandable"><div class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="stroke-current text-gray-400 transform"><polyline points="9 18 15 12 9 6"></polyline></svg></div></div></a></div></div></div></div></div></div></div><div class="os-scrollbar os-scrollbar-horizontal "><div class="os-scrollbar-track"><div class="os-scrollbar-handle"></div></div></div><div class="os-scrollbar os-scrollbar-vertical"><div class="os-scrollbar-track"><div class="os-scrollbar-handle"></div></div></div><div class="os-scrollbar-corner"></div></div><div class="my-2 hidden"><a href="https://www.archbee.com/?utm_campaign=hosted-docs&amp;utm_medium=referral&amp;utm_source=beta.cronusmax.com" target="_blank" class="flex flex-col unselectable border dark:border-gray-200 border-gray-900 px-4 py-4 cursor-pointer rounded-lg mx-auto dark:bg-gray-50 sticky bottom-0 bg-gray-800"><div class="flex items-center justify-center"><span class="text-white dark:text-gray-500">Docs powered by <span class="dark:text-blue-700 text-white font-black">archbee </span></span><img src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/public/archbee-logo-symbol.svg" class="ml-4"/></div></a></div></div><div class="ab-center-column md:flex justify-center grow overflow-y-auto xl:overflow-x-hidden xl:px-7"><div class="w-full max-w-[760px]" id="main-column"><div><div class="flex flex-col justify-center pt-10"><div class="flex flex-1 w-full justify-center pb-0"><div class="flex flex-initial flex-col w-full"><h1 class="ab-doc-name h1 font-bold text-5xl w-full max-w-full mt-0 pb-2 break-words break-words mb-6">Bitpacking SPVARs</h1><div class="flex flex-initial flex-col xl:flex-row"><div class="w-full flex flex-col xl:flex-row relative electron-no-drag text-lg bg-white text-gray-600 dark:bg-gray-900 dark:text-gray-300 break-words w-full flex-initial max-w-full"><div data-cy="archbee-editor" data-slate-editor="true" data-key="fy11_fCUzOfowDaO60Avv" class="archbee-editor w-full" autoCorrect="off" spellcheck="false" style="outline:none;white-space:pre-wrap;word-wrap:break-word;min-width:0;-webkit-user-modify:read-only"><div data-block-key="8YsssOHUyUeSP7K2UPnsc" data-block-type="paragraph" class="mb-5" data-slate-object="block" data-key="8YsssOHUyUeSP7K2UPnsc"><p data-slate-object="block" data-key="8YsssOHUyUeSP7K2UPnsc" class="ab-paragraph w-full mt-0 leading-7 text-gray-600 dark:text-gray-300 break-words css-i4o1yn"><span data-slate-object="text" data-key="g5q_LG65yKDlplNLUGi_N"><span data-slate-leaf="true" data-offset-key="g5q_LG65yKDlplNLUGi_N:0"><span data-slate-string="true">How you can make the most of packing SPVARs?  This sample shows how you can save data across multiple SPVARs when needed and utilize the SPVARs in the most efficient way possible.</span></span></span></p></div><div data-slate-void="true" data-key="h-FNuYXkMoIHpJVE7Elyu"><div><div data-block-key="h-FNuYXkMoIHpJVE7Elyu" data-block-type="code-editor-v2" class="mb-8" data-slate-object="block" data-key="h-FNuYXkMoIHpJVE7Elyu"><div class="ab-code-editor code-editor max-w-full w-full grow relative flex flex-col"><div class="flex w-full bg-gray-700 justify-between rounded-t-md"><div class="flex w-300 flex-1 overflow-x-auto"><div class="flex items-center"><div class="flex" data-rbd-droppable-id="language-droppable" data-rbd-droppable-context-id="11847"><div class="flex" data-rbd-draggable-context-id="11847" data-rbd-draggable-id="pd5Zu9erahGVNweMNQdGZ"><div class="flex items-center py-2.5 px-4 cursor-pointer text-white bg-gray-800 rounded-t">GPC</div></div></div></div></div><div class="flex justify-center items-center mr-2.5 pl-2 cursor-pointer" title="Copy"><span class="mx-2 text-gray-600">|</span><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg></div></div><div class="bg-gray-800 p-3 h-full w-full flex-col rounded-b-md shadow"><div class="w-full bg-gray-800 h-full shadow" style="height:20px"></div></div></div></div></div></div><div data-block-key="KY0aQNSc6ldwV1bpDE7Sa" data-block-type="paragraph" class="mb-5" data-slate-object="block" data-key="KY0aQNSc6ldwV1bpDE7Sa"><p data-slate-object="block" data-key="KY0aQNSc6ldwV1bpDE7Sa" class="ab-paragraph w-full mt-0 leading-7 text-gray-600 dark:text-gray-300 break-words css-i4o1yn"><span data-slate-object="text" data-key="VnyK8PUpxD6lbdydeaTL2"><span data-slate-leaf="true" data-offset-key="VnyK8PUpxD6lbdydeaTL2:0"><span data-slate-zero-width="n" data-slate-length="0">﻿<br/></span></span></span></p></div></div></div></div></div></div><div class="flex flex-col"><div class="no-print flex flex-col justify-end sm:flex-col w-full max-w-full pt-16"><div class="2xl:flex 2xl:justify-between pt-7 2xl:pb-7 mb-7 2xl:mb-0 border-t border-gray-200 dark:border-gray-700"><div class="flex flex-1 mb-7 2xl:mb-0"></div></div><div class="shadow-sm 2xl:border-t border-gray-200 dark:border-gray-700 2xl:mb-7"></div><div class="flex w-full flex-col-reverse sm:flex-row dark:border-gray-700"><a title="Custom OLED Buttons" class="ab-nav-right flex w-full 2xl:max-w-400 justify-between items-center mb-7 rounded cursor-pointer py-3 px-4 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800 hover:border-gray-200 dark:hover:border-gray-700 hover:shadow-sm css-985r4f" href="/gpc/custom-oled-buttons"><div class="truncate"><div class="text-gray-400 dark:text-gray-400 text-xs mt-0.5">UP NEXT</div><div class="ab-nav-right-text flex flex-col text-left max-w-full font-bold text-lg line-clamp-1" style="color:#5c98ce">Custom OLED Buttons</div></div><div class="ml-3"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="navigation-arrow stroke-current text-gray-300 dark:text-gray-500 transition-all"><circle cx="12" cy="12" r="10"></circle><polyline points="12 16 16 12 12 8"></polyline><line x1="8" y1="12" x2="16" y2="12"></line></svg></div></a></div><div class="flex justify-center"><div class="my-2 hidden"><a href="https://www.archbee.com/?utm_campaign=hosted-docs&amp;utm_medium=referral&amp;utm_source=beta.cronusmax.com" target="_blank" class="flex flex-col unselectable border dark:border-gray-200 border-gray-900 px-4 py-4 cursor-pointer rounded-lg mx-auto dark:bg-gray-50 sticky bottom-0 bg-gray-800"><div class="flex items-center justify-center"><span class="text-white dark:text-gray-500">Docs powered by <span class="dark:text-blue-700 text-white font-black">archbee </span></span><img src="https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a/public/archbee-logo-symbol.svg" class="ml-4"/></div></a></div></div></div></div></div></div></div></div><div class="hidden"><div class="w-0 h-0 fixed right-0 bottom-0 xl:h-screen xl:w-1/3 xl:min-w-[33.33%] bg-white dark:bg-gray-900"><div class="overflow-hidden"><div id="code-drawer-anchors" class="relative"></div><div id="ab-code-drawer"></div></div></div></div></div></div></div></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"hostname":"beta.cronusmax.com","pdfExport":false,"docSpaceId":"PUBLISHED-n8vmukt5UQjWbpRAZd0QE","docId":"/gpc/gpc-scripting-bitpacking-spvars","_doc":{"id":"PUBLISHED-x5gOHnSfDdfrkrM-ehrAH","name":"Bitpacking SPVARs","icon":"◼️","title":"GPC Scripting - Bitpacking SPVARs","previewImageURL":"","urlKey":"gpc/gpc-scripting-bitpacking-spvars","description":"Here is how to Bitpack SPVARS.","urlAlias":null,"data":{"object":"value","document":{"key":"fy11_fCUzOfowDaO60Avv","data":{},"nodes":[{"key":"8YsssOHUyUeSP7K2UPnsc","data":{},"type":"paragraph","nodes":[{"key":"g5q_LG65yKDlplNLUGi_N","text":"How you can make the most of packing SPVARs?  This sample shows how you can save data across multiple SPVARs when needed and utilize the SPVARs in the most efficient way possible.","marks":[],"object":"text"}],"object":"block"},{"key":"h-FNuYXkMoIHpJVE7Elyu","data":{"languages":[{"id":"pd5Zu9erahGVNweMNQdGZ","code":"// Define 6 variables to use in this example\r\nint var1, var2, var3, var4, var5, var6;\r\n\r\ninit {\r\n\tLoad(); // Load our settings from flash or set the defaults\t\r\n}\r\n\r\nmain {\r\n\t\r\n\t// Display the various values in TRACE_1 to TRACE_6 so we can see what happens when we press the buttons below\r\n\tset_val(TRACE_1, var1);\r\n\tset_val(TRACE_2, var2);\r\n\tset_val(TRACE_3, var3);\r\n\tset_val(TRACE_4, var4);\r\n\tset_val(TRACE_5, var5);\r\n\tset_val(TRACE_6, var6);\t\r\n\t\r\n\t// Press Right on the d-pad to increment the values\r\n\tif(event_press(PS4_RIGHT)) {\r\n\t\tvar1 = clamp(var1 +  1,    0,    30);\r\n\t\tvar2 = clamp(var2 + 20,    0, 30000);\r\n\t\tvar3 = clamp(var3 + 10,  -99,    99);\r\n\t\tvar4 = clamp(var4 +  1,    0,    50);\r\n\t\tvar5 = clamp(var5 + 40, -200,   200);\r\n\t\tvar6 = clamp(var6 + 10,    0,    60);\t\t\r\n\t}\r\n\t// Press Left on the d-pad to decrement the values\r\n\tif(event_press(PS4_LEFT)) {\r\n\t\tvar1 = clamp(var1 -  1,    0,    30);\r\n\t\tvar2 = clamp(var2 - 20,    0, 30000);\r\n\t\tvar3 = clamp(var3 - 10,  -99,    99);\r\n\t\tvar4 = clamp(var4 -  1,    0,    50);\r\n\t\tvar5 = clamp(var5 - 40, -200,   200);\r\n\t\tvar6 = clamp(var6 - 10,    0,    60);\t\t\r\n\t}\r\n\t\r\n\t// Press A/Cross to save\r\n\tif(event_press(PS4_CROSS)){ \r\n\t\tSave();\r\n\t}\r\n\t// Press X/Square to load\r\n\tif(event_press(PS4_SQUARE)){ \r\n\t\tLoad();\r\n\t}\r\n}\r\n\r\n\r\n// This is an example of how this can be used for loading values - NOTE: the ranges here must match what you have in your save function!\r\nfunction Load() {\r\n\treset_spvar(); // Always reset the spvar state before reading to ensure that we're reading from the same location as we last saved\r\n\tif (read_spvar(0, 1, 0)) { // Read and check the first bit, if it's set, we know something should've been saved, otherwise we fall back on our default setting\r\n\t\tvar1 = read_spvar(   0,    30, 0); // Read var1 with a value within the range 0 to 30 with a default value of 0\r\n\t\tvar2 = read_spvar(\t 0, 30000, 0); // Read var2 with a value within the range 0 to 30000 with a default value of 0\r\n\t\tvar3 = read_spvar( -99,    99, 0); // Read var3 with a value within the range -99 to 99 with a default value of 0\r\n\t\tvar4 = read_spvar(   0,    50, 0); // Read var4 with a value within the range 0 to 50 with a default value of 0\r\n\t\tvar5 = read_spvar(-200,   200, 0); // Read var5 with a value within the range -200 to 200 with a default value of 0\r\n\t\tvar6 = read_spvar(   0,    60, 0); // Read var6 with a value within the range 0 to 60 with a default value of 0\r\n\t}\r\n\telse {\r\n\t\tvar1 = 1; // Set var1 to it's default value of 1\r\n\t\tvar2 = 2; // Set var2 to it's default value of 2\r\n\t\tvar3 = 5; // Set var3 to it's default value of 5\r\n\t\tvar4 = 4; // Set var4 to it's default value of 4\r\n\t\tvar5 = 5; // Set var5 to it's default value of 5\r\n\t\tvar6 = 6; // Set var6 to it's default value of 6\r\n\t}\r\n}\r\n\r\n// This is an example of how this can be used for saving values - NOTE: the ranges here must match what you have in your load function!\r\nfunction Save(){ \r\n\treset_spvar(); // Always reset the spvar state before saving to ensure that we're saving at the same location as we will later read\r\n\tsave_spvar(   1,\t0,     1); // Save a constant 1 to denote previously saved data, this range uses 1 bit\r\n\t// At this point we're using 1 bit in SPVAR_1\r\n\tsave_spvar(var1, \t0,    30); // Save var1 with a range between 0 and 30, this range uses 5 bits\r\n\t// At this point we're using 6 bits in SPVAR_1\r\n\tsave_spvar(var2, \t0, 30000); // Save var2 with a range between -0 and 30000, this range uses 15 bits\r\n\t// At this point we're using 21 bits in SPVAR_1\r\n\tsave_spvar(var3,  -99,    99); // Save var3 with a range between -99 and 99, this range uses 8 bits\r\n\t// At this point we're using 29 bits in SPVAR_1\r\n\tsave_spvar(var4, \t0,    50); // Save var4 with a range between 0 and 50, this range uses 6 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 3 bits in SPVAR_2 - var4 is saved across both SPVAR_1 (the last 3 bits) and SPVAR_2 (the first 3 bits)\r\n\tsave_spvar(var5, -200,   200); // Save var5 with a range between -200 and 200, this range uses 9 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 18 bits in SPVAR_2\r\n\tsave_spvar(var6, \t0,    60); // Save var6 with a range between 0 and 60, this range uses 6 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 24 bits in SPVAR_2\r\n}\r\n// Function used to reset the SPVAR state to where we begin, this one you can change if you like, the rest you should leave as-is or you risk breaking the logic of this. YOU HAVE BEEN WARNED!\r\nfunction reset_spvar() {\r\n\tspvar_current_slot = SPVAR_1; // Change this to say where it's safe to start storing data\r\n\tspvar_current_bit = 0; // Should always be 0, unless you're using part of the first SPVAR in which case you should also change the next line to include the value you are storing in the bits you are using\r\n\tspvar_current_value = 0;\r\n\t\r\n\tspvar_total_bits = 0; // Reset the total bits counter to 0\r\n}\r\n\r\nint spvar_total_bits; \t\t// Variable used for you to know how many bits are used in total\r\n\r\nfunction get_total_spvars() { return (spvar_total_bits / 32) + (spvar_total_bits % 32 != 0) + 1; }\r\n\r\n// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ \r\n\r\nint spvar_current_bit, \t\t// Variable used to keep track of the next available bit\r\n\tspvar_current_slot,\t\t// Variable used to keep track of the currently used SPVAR slot\r\n\tspvar_current_value,\t// Variable used to keep track of the current value with all the bits from the previous variables saved in the current SPVAR\r\n\tspvar_tmp,\t\t\t\t// Variable used temporarily during the various calculation steps\r\n\tspvar_bits;\t\t\t\t// Variable used to keep track of the number of bits required to represent the currently saved/loaded variable\r\n\r\n// Function used to count the number of bits used by the given value\r\nfunction get_bit_count(val) {\r\n\tspvar_tmp = 0; // We need to start at 0, we use spvar_tmp here as we need to track the bits during our loop below\r\n\tval = abs(val); // Force value to be positive\r\n\twhile (val) { // Loop while val is anything but 0\r\n\t\tspvar_tmp++; // Increment the bit count by 1\r\n\t\tval = val \u003e\u003e 1; // Shift the value down 1 bit, once we have no more bits set this will result in 0\r\n\t}\r\n\treturn spvar_tmp;\r\n}\r\n// Function used to count the number of bits used by 2 given values\r\nfunction get_bit_count2(val1, val2) {\t\r\n\tspvar_tmp = max(get_bit_count(val1), get_bit_count(val2)); // Get the highest bit count required for either min or max\r\n\tif (is_signed2(val1, val2)) { // Check if we need to know if the value is negative or not\r\n\t\tspvar_tmp++; // If we need to track if the saved value is negative, we need 1 bit for that specifically - the others are used to store the actual value\r\n\t}\r\n\tspvar_total_bits += spvar_tmp;\r\n\treturn spvar_tmp;\r\n}\r\n// Function used to determine if either of 2 given values is negative\r\nfunction is_signed2(val1, val2) { return val1 \u003c 0 || val2 \u003c 0; }\r\n// Function used to generate a bitmask for the sign bit, this will always be the highest bit in the range we're requesting it for, to do that - we need to start with the lowest bit set and move it up the number of steps there is between 1 and the bits we need, this needs to be a maximum of 31 but can never be negative\r\nfunction make_sign(bits) { return 1 \u003c\u003c clamp(bits - 1, 0, 31); }\r\n// Function used to generate a full bitmask (essentially all bits set up to and including the number of bits given)\r\nfunction make_full_mask(bits) {\t\r\n\tif (bits == 32) { // If we're wanting a bitmask for all bits, we can simply return -1 (which is all bits set to 1)\r\n\t\treturn -1;\r\n\t}\r\n\treturn 0x7FFFFFFF \u003e\u003e (31 - bits); // What we do here is basically take a value with all bits except the highest set and shift them down as many times as we need to get a mask that fits the bit count we're looking for\r\n}\r\n// Function used to generate a bitmask for just the bits required for the value part of a signed range, this means all the bits below the sign bit\r\nfunction make_sign_mask(bits) { return make_full_mask(bits - 1); }\r\n// Function used to pack a value that has potential for being negative in a way that we use the least number of bits we really need to represent the value\r\nfunction pack_i(val, bits) {\r\n\tif (val \u003c 0) { // Check if we have a negative value, if so - handle it accordingly\r\n\t\treturn (abs(val) \u0026 make_sign_mask(bits)) | make_sign(bits); // Get the positive version of the value and keep the bits that are within range of what we're doing and add the sign bit since we have a negative value and return the result\r\n\t}\r\n\treturn val \u0026 make_sign_mask(bits); // Get the bits that are within our range\r\n}\r\n// Function used to unpack (restore) a value that has potential for being negative, essentially reversing what pack_i does above\r\nfunction unpack_i(val, bits) {\r\n\tif (val \u0026 make_sign(bits)) { // Check if the stored value is supposed to be negative\r\n\t\treturn 0 - (val \u0026 make_sign_mask(bits)); // Retrieve the stored positive value and subtract it from 0 (resulting in the same value except negative), return the result\r\n\t}\r\n\treturn val \u0026 make_sign_mask(bits); // Retrieve the stored positive value and return it\r\n}\r\n// Function used to read the value of a SPVAR without any limits\r\nfunction read_spvar_slot(slot) { return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0); }\r\n// Function used to save your value in the SPVARs, this is the function you'll be calling when saving a value. You need to provide the value to save aswell as the range (minimum and maximum value, this is how we determine how many bits to use when saving this value)\r\nfunction save_spvar(val, min, max) {\r\n\tspvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range\r\n\t\r\n\tval = clamp(val, min, max); // Make sure the value is within our defined range to begin with\r\n\t\r\n\tif (is_signed2(min, max)) { // If either min or max is negative, we need to pack this value as a possibly negative value\r\n\t\tval = pack_i(val, spvar_bits); // Pack as signed value (possibly negative)\r\n\t}\r\n\tval = val \u0026 make_full_mask(spvar_bits); // Pack as unsigned value (always positive), this essentially just makes the resulting value not have any extra bits set - it's safe to use after the signed packing since we're not using any bits outside of the unsigned range anyways\r\n\t\r\n\tif (spvar_bits \u003e= 32 - spvar_current_bit) { // Check if there is not enough bits remaining to save this value as-is. if there aren't enough bits, we save what we can here and store the remaining bits in the next spvar, if this means we're hitting the end, we can make this smaller by handling the case where we use all bits here aswell\r\n\t\tspvar_current_value = spvar_current_value | (val \u003c\u003c spvar_current_bit); // Add what we can to the current value where there is bits available to use\r\n\t\tset_pvar(spvar_current_slot, spvar_current_value); // Save the current SPVAR before advancing to the next one\r\n\t\tspvar_current_slot++; // Move to the next slot\r\n\t\tspvar_bits -= (32 - spvar_current_bit); // Update the required bits according to our needs for the next slot, if we don't do this here, we'll screw up the saved value by moving it too far out of range\r\n\t\tval = val \u003e\u003e (32 - spvar_current_bit); // Move the remaining bits down, discarding the bits we've already saved\r\n\t\tspvar_current_bit = 0; // Reset the current bit counter since we're starting with a new SPVAR\r\n\t\tspvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways\r\n\t}\r\n\t\r\n\tspvar_current_value = spvar_current_value | (val \u003c\u003c spvar_current_bit); // Merge the current SPVAR value with our currently value where there is space to keep our value\r\n\tspvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are currently saving data at\r\n\tif (!spvar_current_bit) {\r\n\t\tspvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways\r\n\t}\r\n\tset_pvar(spvar_current_slot, spvar_current_value); // Save the SPVAR with the current value, this won't write anything to flash unless the value changed - so we can do this for each variable saved to no risk missing anything\r\n}\r\n// Function used to read your value from the SPVARs, this is the function you'll be calling when reading a value. You need to provide the range (minimum and maximum value, this is how we determine how many bits to use when reading the value) aswell as a default value if what we read is out of range\r\nfunction read_spvar(min, max, def) {\r\n\tspvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range\r\n\tspvar_current_value = (read_spvar_slot(spvar_current_slot) \u003e\u003e spvar_current_bit) \u0026 make_full_mask(spvar_bits); // Read the current SPVAR value from flash and shift them into position, we'll handle split values next\r\n\t\r\n\tif (spvar_bits \u003e= 32 - spvar_current_bit) { // Check if we are dealing with a split SPVAR value, essentially if the current position means we're using more than 32 bits in the SPVAR, we need to retrieve the missing bits from the next SPVAR and put them back to our current value, we use the same space saving trick here as in the save function\r\n\t\tspvar_current_value = (spvar_current_value \u0026 make_full_mask(32 - spvar_current_bit)) | ((read_spvar_slot(spvar_current_slot + 1) \u0026 make_full_mask(spvar_bits - (32 - spvar_current_bit))) \u003c\u003c (32 - spvar_current_bit));\r\n\t\t//Below is a breakdown of the line above, with each step done one at a time instead of all at once - this however increases codesize - the below code is to explain how it all works tho\r\n\t\t//spvar_tmp = read_spvar_slot(spvar_current_slot + 1); // Read the SPVAR slot coming after the initial one we used to spvar_tmp from flash, we need to maintain the data we've read thus far, but also add on what we have in flash for the next SPVAR\r\n\t\t//spvar_tmp = spvar_tmp \u0026 make_full_mask(spvar_bits - (32 - spvar_current_bit)); // Extract the bits we need need (the ones that didn't fit in the previous SPVAR)\r\n\t\t//spvar_tmp = spvar_tmp \u003c\u003c (32 - spvar_current_bit); // Move the bits into their original position, they were stored at the beginning of the new SPVAR but belong at the top of the currently read value\r\n\t\t//spvar_current_value = (spvar_current_value \u0026 make_full_mask(32 - spvar_current_bit)) | spvar_tmp; // put all bits together again with the part read from the first SPVAR cleaned up to only include the bits from this variable/value and not all bits set in the upper range like they normally are\r\n\t}\t\r\n\tspvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are will be reading data from next\r\n\tspvar_current_value = spvar_current_value \u0026 make_full_mask(spvar_bits); // Extract all bits included for this value and discard any other bits\r\n\tif (spvar_current_bit \u003e= 32) {\r\n\t\tspvar_current_slot++; // Move to the next SPVAR slot\r\n\t\tspvar_current_bit -= 32; // Remove 32 from the spvar_current_bit tracker since we've gone beyond what we can do here\r\n\t}\r\n\t\r\n\tif (is_signed2(min, max)) { // Check if the value can be negative and handle it accordingly\r\n\t\tspvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore the signed, possibly negative value\r\n\t}\r\n\t\r\n\tif (spvar_current_value \u003c min || spvar_current_value \u003e max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead\r\n\t\treturn def; // This can be changed to min instead as a reasonable default with the default parameter being removed if you don't need to have a override value for the default when out of range, that will save a bit of code size\r\n\t}\r\n\t\r\n\t// Return the retrieved value to the user since it's within the expected range\r\n\treturn spvar_current_value;\r\n}\r\n}","language":"apex","customLabel":"GPC"}],"selectedLanguageId":"pd5Zu9erahGVNweMNQdGZ"},"type":"code-editor-v2","nodes":[{"key":"avUoWJQ85DLOSwQmImbN9","text":"","marks":[],"object":"text"}],"object":"block"},{"key":"KY0aQNSc6ldwV1bpDE7Sa","data":{},"type":"paragraph","nodes":[{"key":"VnyK8PUpxD6lbdydeaTL2","text":"","marks":[],"object":"text"}],"object":"block"}],"object":"document"}},"version":587,"privacy":"shared with team","shareableToken":"SDSIFmhYJ1m54E0rS2Ev8","tags":[],"children":[],"createdBy":{"id":"","firstName":"","lastName":"","email":"","profilePhotoURL":""},"lastModifiedBy":{"id":"","firstName":"","lastName":"","email":"","profilePhotoURL":""},"contributorsDetails":[{"id":"JK2hYr6gZD0M2NkTtYIuX","email":"","fullName":"Keith Siegel","profilePhotoURL":"https://s3.amazonaws.com/archbee-animals/lion.png"},{"id":"oHqHheSqX00UInPoJkWM5","email":"","fullName":"Xbl Jedi","profilePhotoURL":"https://archbee-profile-photos.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/AC3aLnDtrwdYiCkw3x18i_.blob"},{"id":"EG_XZRl28-xFF3UA0jEvZ","email":"","fullName":"MaxADMIN","profilePhotoURL":"https://archbee-profile-photos.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/lo3ffBD2oAs-EC85n1dMP_.blob"}],"watchers":[],"isArchbeeBrandVisible":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1","docSpaceId":"PUBLISHED-n8vmukt5UQjWbpRAZd0QE","updatedAt":"2022-08-07T22:45:55.000Z","createdAt":"2021-12-08T17:53:40.000Z","deletedAt":null,"editable":false,"expanded":true,"reusableContentVariables":[{"name":"copy","scope":"global","content":"©2013-2022","contentVariableId":"rZqIWxKAK9L6VaH3SiJpv"},{"name":"lib","scope":"global","content":"3460","contentVariableId":"lQAjp3hxIXtR60jlNiftJ"},{"name":"gp","scope":"global","content":"155","contentVariableId":"0cl7V199CNkE8vMxtMyGn"},{"name":"oldfw","scope":"global","content":"2.0.3-beta.105","contentVariableId":"nLBJViRP-Mmqi5g4LhLQ1"},{"name":"zs","scope":"global","content":"1.2.1-beta.105","contentVariableId":"oeLoGTKyAgzIvH1WICFB1"},{"name":"fw","scope":"global","content":"2.1.0-beta.35","contentVariableId":"WkEzFGUR7Aw26wbGo1-_A"}],"reusableContentDocRefs":{},"rightDoc":{"id":"PUBLISHED-Fmc6ZF0ZTCREXUtwC6miK","icon":"","name":"Custom OLED Buttons","urlKey":"gpc/custom-oled-buttons","children":[],"expanded":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1"}},"_docSpace":{"id":"PUBLISHED-n8vmukt5UQjWbpRAZd0QE","name":"Cronus GPC Script Guide","icon":"📗","type":"team","publicDocsTree":[{"id":"PUBLISHED-hpYP2GA2S8lov9otB1kQS","icon":"📑","name":"GPC SCRIPTING","urlKey":"gpc","children":[{"id":"PUBLISHED-EIyQ3l1bkgSmMUYwJU4XC","icon":"","name":"What's New in 32bit?","urlKey":"gpc/whats-new-in-32bit-with-gpc-scripting","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-6runzDsWXMAOXNcc2a_zl","icon":"","name":"Introduction","urlKey":"gpc/introduction","children":[{"id":"PUBLISHED-EkvT0X8gGeAjMuaKPcHEB","icon":"","name":"GPC Explained","urlKey":"gpc/gpc-explained","children":[],"expanded":false,"parentDocId":"PUBLISHED-6runzDsWXMAOXNcc2a_zl"},{"id":"PUBLISHED-2flxicAqZ-SrPknFc3ThW","icon":"","name":"Basic Syntax","urlKey":"gpc/basic-syntax","children":[],"expanded":false,"parentDocId":"PUBLISHED-6runzDsWXMAOXNcc2a_zl"},{"id":"PUBLISHED-MBDsgocwRnT8dKzeAlTb2","icon":"","name":"A Simple Tutorial","urlKey":"gpc/a-simple-tutorial","children":[],"expanded":false,"parentDocId":"PUBLISHED-6runzDsWXMAOXNcc2a_zl"}],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-VnK-J2FeEYTw_ux3wym4r","icon":"","name":"Variables","urlKey":"gpc/gpc-scripting-variables","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-TJvJ0-GObEZkiXC68Cj_a","icon":"","name":"Basic GPC Structure","urlKey":"gpc/basic-gpc-structure-with-gpc-scripting","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-tJimy-aiczE9BNB2TYFYc","icon":"","name":"Definitions","urlKey":"gpc/gpc-scripting-definitions","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-tqq0l5aV7qDVste87mpZg","icon":"","name":"Data Section","urlKey":"gpc/data-section","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-FueI_VqmKjVg3OLYUxnj5","icon":"","name":"Remapping","urlKey":"gpc/remapping","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-l1fYDA8P1s2OfBth4pzgA","icon":"","name":"Const Arrays","urlKey":"gpc/gpc-scripting-const-arrays","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-NZ4XL05jz1ZQu9Dd1Jzh5","icon":"","name":"Init Section","urlKey":"gpc/gpc-scripting-init-section","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-wCDBH9H0ggMrMgWTIYNI3","icon":"","name":"Main Section","urlKey":"gpc/gpc-scripting-main-section","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-FsqUTPQf-ZgOPnJJyP6U8","icon":"","name":"Combo Section","urlKey":"gpc/gpc-scripting-combo-section","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-yVYbJABmpc9T40EcEdFSK","icon":"","name":"User Created Functions","urlKey":"gpc/gpc-scripting-user-created-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-pEcu9SAR__nsnXLQnlfdQ","icon":"","name":"Identifiers","urlKey":"gpc/identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-vI-DWN21YmMieX-sK2as0","icon":"","name":"Constants","urlKey":"gpc/gpc-scripting-constants","children":[{"id":"PUBLISHED-M0EsY15eEXxywMqyQJtSz","icon":"◼️","name":"Zen","urlKey":"gpc/gpc-scripting-zen-constants","children":[{"id":"PUBLISHED-qwo67iO0ie2IpQC21b_Hx","icon":"◽","name":"OLED","urlKey":"gpc/gpc-scripting-oled-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-M0EsY15eEXxywMqyQJtSz"},{"id":"PUBLISHED-L6RHahw1sRN3Awxw4slc5","icon":"◽","name":"ASCII Constants","urlKey":"gpc/gpc-scripting-ascii-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-M0EsY15eEXxywMqyQJtSz"},{"id":"PUBLISHED-rBdfRItA3rz8WknOqNKIp","icon":"◽","name":"PIO","urlKey":"gpc/gpc-scripting-pio-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-M0EsY15eEXxywMqyQJtSz"}],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-fKn71YgZ97YjgT7jSGaOr","icon":"◼️","name":"Keyboard","urlKey":"gpc/gpc-scripting-keyboard-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q","icon":"◼️","name":"Controller","urlKey":"gpc/controller-constants","children":[{"id":"PUBLISHED-JDPLomMcUzUKudLsmC9T6","icon":"◽","name":"Polar","urlKey":"gpc/gpc-scripting-polar-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-ywpwV0Ada9KWj9S3jPXM4","icon":"◽","name":"LED","urlKey":"gpc/gpc-scripting-led-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-a-_JkghOCbBs9Nrw34B5i","icon":"◽","name":"Rumble","urlKey":"gpc/gpc-scripting-rumble-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-qBlN5mjgb7_OfWzJZmZhJ","icon":"◽","name":"PlayStation 5","urlKey":"gpc/playstation-5","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-QJAHnYmpIO3KkXZ-4wRe6","icon":"◽","name":"PlayStation 4","urlKey":"gpc/gpc-scripting-ps4-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-iL3J_oFHdUmQ4Q3XLYCT0","icon":"◽","name":"PlayStation 3","urlKey":"gpc/gpc-scripting-ps3-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-OUwTUQEeWK9eyis_t4Pl_","icon":"◽","name":"Xbox Series X/S","urlKey":"gpc/gpc-scripting-xbox-series-xs-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-iy5YXUUD30Km4B3z6p6Y6","icon":"◽","name":"Xbox One","urlKey":"gpc/xbox-one","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-k2D2z1B-fE6Z1Gglw3wr2","icon":"◽","name":"Xbox 360","urlKey":"gpc/gpc-scripting-xbox-360-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-kmBxxdFtHKQtTjcX0eL9S","icon":"◽","name":"Nintendo Switch","urlKey":"gpc/gpc-scripting-nintendo-switch-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"},{"id":"PUBLISHED-mMG5RIxiUPBnzN_tNmZ-P","icon":"◽","name":"Nintendo WII","urlKey":"gpc/gpc-scripting-nintendo-wii-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-hILOgyAa-DSULfXiVkI6Q"}],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-mhdQXp8849eMe7fxxrddv","icon":"◼️","name":"Racing Wheel","urlKey":"gpc/gpc-scripting-racing-wheel-constants","children":[{"id":"PUBLISHED-AzAHI3eVvNOllhrACvK0Y","icon":"◽","name":"G29","urlKey":"gpc/gpc-scripting-g29-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"},{"id":"PUBLISHED-2qYk_vVzCT1H9N14nUN3h","icon":"◽","name":"G27","urlKey":"gpc/gpc-scripting-g27-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"},{"id":"PUBLISHED--WUryba-L-hxf44S5CLKk","icon":"◽","name":"G25","urlKey":"gpc/gpc-scripting-g25-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"},{"id":"PUBLISHED-sSkJyR2GCi29OoUspmK_b","icon":"◽","name":"DF","urlKey":"gpc/gpc-scripting-df-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"},{"id":"PUBLISHED-B3-Kv_WGVJgi2_YwCPRtm","icon":"◽","name":"DF GT","urlKey":"gpc/gpc-scripting-df-gt-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"},{"id":"PUBLISHED-0zPGt7ZHbH0JAJBQaMxwq","icon":"◽","name":"DF Pro","urlKey":"gpc/gpc-scripting-df-pro-identifiers","children":[],"expanded":false,"parentDocId":"PUBLISHED-mhdQXp8849eMe7fxxrddv"}],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-DPN2iH8mmfbVrUtdyurx4","icon":"◼️","name":"Trace","urlKey":"gpc/gpc-scripting-trace-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-Ptic5Mjor42f8TtHOAvA_","icon":"◼️","name":"Memory","urlKey":"gpc/gpc-scripting-memory-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-l899aXpx_hxgPSpV2ozyM","icon":"◼️","name":"Operator Types","urlKey":"gpc/operator-types","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-HRdSZU8vRh2TXBzDZ6Rue","icon":"◼️","name":"Misc","urlKey":"gpc/gpc-scripting-misc-constants","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-fo9M72-7rvVzdkGS9uyde","icon":"◼️","name":"Persistent Memory","urlKey":"gpc/persistent-memory","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"},{"id":"PUBLISHED-Ewtyjws7A_QvBaKNAhcKV","icon":"◼️","name":"Flow Control","urlKey":"gpc/flow-control","children":[],"expanded":false,"parentDocId":"PUBLISHED-vI-DWN21YmMieX-sK2as0"}],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG","icon":"","name":"Functions","urlKey":"gpc/gpc-scripting-functions","children":[{"id":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1","icon":"◼️","name":"Internal Functions","urlKey":"gpc/gpc-scripting-internal-functions","children":[{"id":"PUBLISHED-h1DkY5ZMfXzAblNLU22PS","icon":"◽","name":"Bit Functions","urlKey":"gpc/gpc-scripting-bit-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1"},{"id":"PUBLISHED--m1iBXQjaDRiv0mvlFexT","icon":"◽","name":"Combo Functions","urlKey":"gpc/gpc-scripting-combo-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1"},{"id":"PUBLISHED-7B7TaVhfM58PGrKpQ40xY","icon":"◽","name":"Math Functions","urlKey":"gpc/gpc-scripting-math-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1"},{"id":"PUBLISHED-MnByBJvuA-70EtUwsB-J8","icon":"◽","name":"Device Functions","urlKey":"gpc/MnBy-gpc-scripting-device-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1"},{"id":"PUBLISHED-kefHSOSOdthztS87OP_sZ","icon":"◽","name":"OLED Display Functions","urlKey":"gpc/gpc-scripting-oled-display-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-6X4tDH9S1AwsM1YbUM1f1"}],"expanded":false,"parentDocId":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG"},{"id":"PUBLISHED-vAVJmCMjX2u-AXqfwMRJ2","icon":"◼️","name":"Console Functions","urlKey":"gpc/gpc-scripting-console-functions","children":[{"id":"PUBLISHED-i03F-bangx2NPOOWkelTM","icon":"◽","name":"Core Console Functions","urlKey":"gpc/gpc-scripting-core-console-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-vAVJmCMjX2u-AXqfwMRJ2"}],"expanded":false,"parentDocId":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG"},{"id":"PUBLISHED-Cv0iyDNOBqMAvSTWJZ0EI","icon":"◼️","name":"Controller Functions","urlKey":"gpc/gpc-scripting-controller-functions","children":[{"id":"PUBLISHED-05culJGgGOcUK_dDW4sNU","icon":"◽","name":"Core Controller Functions","urlKey":"gpc/gpc-scripting-core-controller-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-Cv0iyDNOBqMAvSTWJZ0EI"},{"id":"PUBLISHED-L5u2t8f0L35BlB1y3LP6R","icon":"◽","name":"Rumble Functions","urlKey":"gpc/gpc-scripting-rumble-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-Cv0iyDNOBqMAvSTWJZ0EI"},{"id":"PUBLISHED-z1QvPHAsU6qdl9VFxOw4V","icon":"◽","name":"LED Functions","urlKey":"gpc/gpc-scripting-led-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-Cv0iyDNOBqMAvSTWJZ0EI"}],"expanded":false,"parentDocId":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG"},{"id":"PUBLISHED-9z-PfTYpqQRRT_NCTliN3","icon":"◼️","name":"Keyboard Functions","urlKey":"gpc/gpc-scripting-keyboard-functions","children":[{"id":"PUBLISHED-WvB2-qghSaQjuGXchqSVV","icon":"◽","name":"Core Keyboard Functions","urlKey":"gpc/gpc-scripting-core-keyboard-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-9z-PfTYpqQRRT_NCTliN3"}],"expanded":false,"parentDocId":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG"},{"id":"PUBLISHED-6cC-u-iDandqpjRbup8vl","icon":"","name":"Device Functions","urlKey":"gpc/device-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-WOjKV2HJQfs3dC0mlgCbG"}],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-Mj7fsyBmndu5iggiFRS--","icon":"","name":"Device Functions","urlKey":"gpc/gpc-scripting-device-functions","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-zB1F_7r2XZwZFncLUD6Fr","icon":"","name":"Remapping","urlKey":"gpc/gpc-scripting-remapping","children":[],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-eqiBeizweLkv7rcDBPZB1","icon":"","name":"Advanced Samples","urlKey":"gpc/gpc-scripting-advanced-samples","children":[{"id":"PUBLISHED-x5gOHnSfDdfrkrM-ehrAH","icon":"◼️","name":"Bitpacking SPVARs","urlKey":"gpc/gpc-scripting-bitpacking-spvars","children":[],"expanded":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1"},{"id":"PUBLISHED-Fmc6ZF0ZTCREXUtwC6miK","icon":"","name":"Custom OLED Buttons","urlKey":"gpc/custom-oled-buttons","children":[],"expanded":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1"}],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"},{"id":"PUBLISHED-UMmowgxym-ZT4EtOJIIYq","icon":"","name":"API Samples","urlKey":"gpc/gpc-scripting-api-samples","children":[{"id":"PUBLISHED-PXz9cXX7IasDDDuEljQSt","icon":"◼️","name":"SendMsgAppSample","urlKey":"gpc/gpc-scripting-sendmsgappsample","children":[],"expanded":false,"parentDocId":"PUBLISHED-UMmowgxym-ZT4EtOJIIYq"}],"expanded":false,"parentDocId":"PUBLISHED-hpYP2GA2S8lov9otB1kQS"}],"expanded":true,"parentDocId":"","isFoldedByDefault":false}],"hostingTitle":"Cronus GPC Script Guide","logoRedirectURL":"https://beta.cronusmax.com","hostingColor":"#5c98ce","isIndexable":true,"template":"stripe","contentLayout":"two-column","darkHostingColor":"#5c98ce","hostname":"beta.cronusmax.com","hostnamePath":"gpc","proxyDomain":null,"publicLogoURL":"https://archbee-image-uploads.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/mVazwQo-BIf6oPRZaRCvC_cronuslogolight.png","darkPublicLogoURL":"https://archbee-image-uploads.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/nuSw6YqerwC7liEa8mRlX_cronuslogodark.png","publicTheme":"dark","faviconURL":"https://archbee-image-uploads.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/zsgFLXoUp0mm_qZP-HyC3_cronusnuwhite.png","spaceLinks":[{"icon":"📘","label":"Cronus Zen Guide","docSpaceId":"PUBLISHED-O_7gdKboURiGanlXGvyUY","hostnamePath":"","versionLinks":[]},{"icon":"📗","label":"GamePacks (32bit)","docSpaceId":"PUBLISHED-66W2uPbtMakU3nras2dxH","hostnamePath":"gamepacks-32bit","versionLinks":[]},{"icon":"📗","label":"GPC Script Guide","docSpaceId":"PUBLISHED-n8vmukt5UQjWbpRAZd0QE","hostnamePath":"gpc","versionLinks":[]}],"externalLinks":[{"url":"https://shop.cronusmax.com","label":"Buy Cronus"},{"url":"https://cronusmax.com/gpclib/","label":"GPC Library"},{"url":"https://gamepacks.cronusmax.com","label":"GamePacks (16bit)"},{"url":"https://www.youtube.com/cronusmax","label":"YouTube"},{"url":"https://forums.cronusmax.com/","label":"Forums"},{"url":"https://discord.gg/cronuszen","label":"Discord"}],"versionLinks":[],"landingPageType":"first-doc","landingTemplate":"","landingPageHeaderText":"","landingPageSubheaderText":"","footerTemplate":"","headerIncludes":"","jwtRedirectURL":"","googleAnalyticsId":"","intercomId":"","isArchbeeBrandVisible":false,"i18nLanguage":"en","showReadTime":false,"showLastUpdate":false,"showContributors":false,"showDocFeedback":false,"revisions":[],"customJS":"","customCSS":"","createdAt":"2022-05-11T02:18:52.000Z","showPdfBookLink":false,"pdfBookLink":"","protectionType":"None","isAuthenticated":true,"doc":{"id":"PUBLISHED-x5gOHnSfDdfrkrM-ehrAH","name":"Bitpacking SPVARs","icon":"◼️","title":"GPC Scripting - Bitpacking SPVARs","previewImageURL":"","urlKey":"gpc/gpc-scripting-bitpacking-spvars","description":"Here is how to Bitpack SPVARS.","urlAlias":null,"data":{"object":"value","document":{"key":"fy11_fCUzOfowDaO60Avv","data":{},"nodes":[{"key":"8YsssOHUyUeSP7K2UPnsc","data":{},"type":"paragraph","nodes":[{"key":"g5q_LG65yKDlplNLUGi_N","text":"How you can make the most of packing SPVARs?  This sample shows how you can save data across multiple SPVARs when needed and utilize the SPVARs in the most efficient way possible.","marks":[],"object":"text"}],"object":"block"},{"key":"h-FNuYXkMoIHpJVE7Elyu","data":{"languages":[{"id":"pd5Zu9erahGVNweMNQdGZ","code":"// Define 6 variables to use in this example\r\nint var1, var2, var3, var4, var5, var6;\r\n\r\ninit {\r\n\tLoad(); // Load our settings from flash or set the defaults\t\r\n}\r\n\r\nmain {\r\n\t\r\n\t// Display the various values in TRACE_1 to TRACE_6 so we can see what happens when we press the buttons below\r\n\tset_val(TRACE_1, var1);\r\n\tset_val(TRACE_2, var2);\r\n\tset_val(TRACE_3, var3);\r\n\tset_val(TRACE_4, var4);\r\n\tset_val(TRACE_5, var5);\r\n\tset_val(TRACE_6, var6);\t\r\n\t\r\n\t// Press Right on the d-pad to increment the values\r\n\tif(event_press(PS4_RIGHT)) {\r\n\t\tvar1 = clamp(var1 +  1,    0,    30);\r\n\t\tvar2 = clamp(var2 + 20,    0, 30000);\r\n\t\tvar3 = clamp(var3 + 10,  -99,    99);\r\n\t\tvar4 = clamp(var4 +  1,    0,    50);\r\n\t\tvar5 = clamp(var5 + 40, -200,   200);\r\n\t\tvar6 = clamp(var6 + 10,    0,    60);\t\t\r\n\t}\r\n\t// Press Left on the d-pad to decrement the values\r\n\tif(event_press(PS4_LEFT)) {\r\n\t\tvar1 = clamp(var1 -  1,    0,    30);\r\n\t\tvar2 = clamp(var2 - 20,    0, 30000);\r\n\t\tvar3 = clamp(var3 - 10,  -99,    99);\r\n\t\tvar4 = clamp(var4 -  1,    0,    50);\r\n\t\tvar5 = clamp(var5 - 40, -200,   200);\r\n\t\tvar6 = clamp(var6 - 10,    0,    60);\t\t\r\n\t}\r\n\t\r\n\t// Press A/Cross to save\r\n\tif(event_press(PS4_CROSS)){ \r\n\t\tSave();\r\n\t}\r\n\t// Press X/Square to load\r\n\tif(event_press(PS4_SQUARE)){ \r\n\t\tLoad();\r\n\t}\r\n}\r\n\r\n\r\n// This is an example of how this can be used for loading values - NOTE: the ranges here must match what you have in your save function!\r\nfunction Load() {\r\n\treset_spvar(); // Always reset the spvar state before reading to ensure that we're reading from the same location as we last saved\r\n\tif (read_spvar(0, 1, 0)) { // Read and check the first bit, if it's set, we know something should've been saved, otherwise we fall back on our default setting\r\n\t\tvar1 = read_spvar(   0,    30, 0); // Read var1 with a value within the range 0 to 30 with a default value of 0\r\n\t\tvar2 = read_spvar(\t 0, 30000, 0); // Read var2 with a value within the range 0 to 30000 with a default value of 0\r\n\t\tvar3 = read_spvar( -99,    99, 0); // Read var3 with a value within the range -99 to 99 with a default value of 0\r\n\t\tvar4 = read_spvar(   0,    50, 0); // Read var4 with a value within the range 0 to 50 with a default value of 0\r\n\t\tvar5 = read_spvar(-200,   200, 0); // Read var5 with a value within the range -200 to 200 with a default value of 0\r\n\t\tvar6 = read_spvar(   0,    60, 0); // Read var6 with a value within the range 0 to 60 with a default value of 0\r\n\t}\r\n\telse {\r\n\t\tvar1 = 1; // Set var1 to it's default value of 1\r\n\t\tvar2 = 2; // Set var2 to it's default value of 2\r\n\t\tvar3 = 5; // Set var3 to it's default value of 5\r\n\t\tvar4 = 4; // Set var4 to it's default value of 4\r\n\t\tvar5 = 5; // Set var5 to it's default value of 5\r\n\t\tvar6 = 6; // Set var6 to it's default value of 6\r\n\t}\r\n}\r\n\r\n// This is an example of how this can be used for saving values - NOTE: the ranges here must match what you have in your load function!\r\nfunction Save(){ \r\n\treset_spvar(); // Always reset the spvar state before saving to ensure that we're saving at the same location as we will later read\r\n\tsave_spvar(   1,\t0,     1); // Save a constant 1 to denote previously saved data, this range uses 1 bit\r\n\t// At this point we're using 1 bit in SPVAR_1\r\n\tsave_spvar(var1, \t0,    30); // Save var1 with a range between 0 and 30, this range uses 5 bits\r\n\t// At this point we're using 6 bits in SPVAR_1\r\n\tsave_spvar(var2, \t0, 30000); // Save var2 with a range between -0 and 30000, this range uses 15 bits\r\n\t// At this point we're using 21 bits in SPVAR_1\r\n\tsave_spvar(var3,  -99,    99); // Save var3 with a range between -99 and 99, this range uses 8 bits\r\n\t// At this point we're using 29 bits in SPVAR_1\r\n\tsave_spvar(var4, \t0,    50); // Save var4 with a range between 0 and 50, this range uses 6 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 3 bits in SPVAR_2 - var4 is saved across both SPVAR_1 (the last 3 bits) and SPVAR_2 (the first 3 bits)\r\n\tsave_spvar(var5, -200,   200); // Save var5 with a range between -200 and 200, this range uses 9 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 18 bits in SPVAR_2\r\n\tsave_spvar(var6, \t0,    60); // Save var6 with a range between 0 and 60, this range uses 6 bits\r\n\t// At this point we're using 32 bits in SPVAR_1 and 24 bits in SPVAR_2\r\n}\r\n// Function used to reset the SPVAR state to where we begin, this one you can change if you like, the rest you should leave as-is or you risk breaking the logic of this. YOU HAVE BEEN WARNED!\r\nfunction reset_spvar() {\r\n\tspvar_current_slot = SPVAR_1; // Change this to say where it's safe to start storing data\r\n\tspvar_current_bit = 0; // Should always be 0, unless you're using part of the first SPVAR in which case you should also change the next line to include the value you are storing in the bits you are using\r\n\tspvar_current_value = 0;\r\n\t\r\n\tspvar_total_bits = 0; // Reset the total bits counter to 0\r\n}\r\n\r\nint spvar_total_bits; \t\t// Variable used for you to know how many bits are used in total\r\n\r\nfunction get_total_spvars() { return (spvar_total_bits / 32) + (spvar_total_bits % 32 != 0) + 1; }\r\n\r\n// ------ DO NOT TOUCH ANYTHING BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING! ------ \r\n\r\nint spvar_current_bit, \t\t// Variable used to keep track of the next available bit\r\n\tspvar_current_slot,\t\t// Variable used to keep track of the currently used SPVAR slot\r\n\tspvar_current_value,\t// Variable used to keep track of the current value with all the bits from the previous variables saved in the current SPVAR\r\n\tspvar_tmp,\t\t\t\t// Variable used temporarily during the various calculation steps\r\n\tspvar_bits;\t\t\t\t// Variable used to keep track of the number of bits required to represent the currently saved/loaded variable\r\n\r\n// Function used to count the number of bits used by the given value\r\nfunction get_bit_count(val) {\r\n\tspvar_tmp = 0; // We need to start at 0, we use spvar_tmp here as we need to track the bits during our loop below\r\n\tval = abs(val); // Force value to be positive\r\n\twhile (val) { // Loop while val is anything but 0\r\n\t\tspvar_tmp++; // Increment the bit count by 1\r\n\t\tval = val \u003e\u003e 1; // Shift the value down 1 bit, once we have no more bits set this will result in 0\r\n\t}\r\n\treturn spvar_tmp;\r\n}\r\n// Function used to count the number of bits used by 2 given values\r\nfunction get_bit_count2(val1, val2) {\t\r\n\tspvar_tmp = max(get_bit_count(val1), get_bit_count(val2)); // Get the highest bit count required for either min or max\r\n\tif (is_signed2(val1, val2)) { // Check if we need to know if the value is negative or not\r\n\t\tspvar_tmp++; // If we need to track if the saved value is negative, we need 1 bit for that specifically - the others are used to store the actual value\r\n\t}\r\n\tspvar_total_bits += spvar_tmp;\r\n\treturn spvar_tmp;\r\n}\r\n// Function used to determine if either of 2 given values is negative\r\nfunction is_signed2(val1, val2) { return val1 \u003c 0 || val2 \u003c 0; }\r\n// Function used to generate a bitmask for the sign bit, this will always be the highest bit in the range we're requesting it for, to do that - we need to start with the lowest bit set and move it up the number of steps there is between 1 and the bits we need, this needs to be a maximum of 31 but can never be negative\r\nfunction make_sign(bits) { return 1 \u003c\u003c clamp(bits - 1, 0, 31); }\r\n// Function used to generate a full bitmask (essentially all bits set up to and including the number of bits given)\r\nfunction make_full_mask(bits) {\t\r\n\tif (bits == 32) { // If we're wanting a bitmask for all bits, we can simply return -1 (which is all bits set to 1)\r\n\t\treturn -1;\r\n\t}\r\n\treturn 0x7FFFFFFF \u003e\u003e (31 - bits); // What we do here is basically take a value with all bits except the highest set and shift them down as many times as we need to get a mask that fits the bit count we're looking for\r\n}\r\n// Function used to generate a bitmask for just the bits required for the value part of a signed range, this means all the bits below the sign bit\r\nfunction make_sign_mask(bits) { return make_full_mask(bits - 1); }\r\n// Function used to pack a value that has potential for being negative in a way that we use the least number of bits we really need to represent the value\r\nfunction pack_i(val, bits) {\r\n\tif (val \u003c 0) { // Check if we have a negative value, if so - handle it accordingly\r\n\t\treturn (abs(val) \u0026 make_sign_mask(bits)) | make_sign(bits); // Get the positive version of the value and keep the bits that are within range of what we're doing and add the sign bit since we have a negative value and return the result\r\n\t}\r\n\treturn val \u0026 make_sign_mask(bits); // Get the bits that are within our range\r\n}\r\n// Function used to unpack (restore) a value that has potential for being negative, essentially reversing what pack_i does above\r\nfunction unpack_i(val, bits) {\r\n\tif (val \u0026 make_sign(bits)) { // Check if the stored value is supposed to be negative\r\n\t\treturn 0 - (val \u0026 make_sign_mask(bits)); // Retrieve the stored positive value and subtract it from 0 (resulting in the same value except negative), return the result\r\n\t}\r\n\treturn val \u0026 make_sign_mask(bits); // Retrieve the stored positive value and return it\r\n}\r\n// Function used to read the value of a SPVAR without any limits\r\nfunction read_spvar_slot(slot) { return get_pvar(slot, 0x80000000, 0x7FFFFFFF, 0); }\r\n// Function used to save your value in the SPVARs, this is the function you'll be calling when saving a value. You need to provide the value to save aswell as the range (minimum and maximum value, this is how we determine how many bits to use when saving this value)\r\nfunction save_spvar(val, min, max) {\r\n\tspvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range\r\n\t\r\n\tval = clamp(val, min, max); // Make sure the value is within our defined range to begin with\r\n\t\r\n\tif (is_signed2(min, max)) { // If either min or max is negative, we need to pack this value as a possibly negative value\r\n\t\tval = pack_i(val, spvar_bits); // Pack as signed value (possibly negative)\r\n\t}\r\n\tval = val \u0026 make_full_mask(spvar_bits); // Pack as unsigned value (always positive), this essentially just makes the resulting value not have any extra bits set - it's safe to use after the signed packing since we're not using any bits outside of the unsigned range anyways\r\n\t\r\n\tif (spvar_bits \u003e= 32 - spvar_current_bit) { // Check if there is not enough bits remaining to save this value as-is. if there aren't enough bits, we save what we can here and store the remaining bits in the next spvar, if this means we're hitting the end, we can make this smaller by handling the case where we use all bits here aswell\r\n\t\tspvar_current_value = spvar_current_value | (val \u003c\u003c spvar_current_bit); // Add what we can to the current value where there is bits available to use\r\n\t\tset_pvar(spvar_current_slot, spvar_current_value); // Save the current SPVAR before advancing to the next one\r\n\t\tspvar_current_slot++; // Move to the next slot\r\n\t\tspvar_bits -= (32 - spvar_current_bit); // Update the required bits according to our needs for the next slot, if we don't do this here, we'll screw up the saved value by moving it too far out of range\r\n\t\tval = val \u003e\u003e (32 - spvar_current_bit); // Move the remaining bits down, discarding the bits we've already saved\r\n\t\tspvar_current_bit = 0; // Reset the current bit counter since we're starting with a new SPVAR\r\n\t\tspvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways\r\n\t}\r\n\t\r\n\tspvar_current_value = spvar_current_value | (val \u003c\u003c spvar_current_bit); // Merge the current SPVAR value with our currently value where there is space to keep our value\r\n\tspvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are currently saving data at\r\n\tif (!spvar_current_bit) {\r\n\t\tspvar_current_value = 0; // Reset our value so we start clean, we aren't currently using any bits anyways\r\n\t}\r\n\tset_pvar(spvar_current_slot, spvar_current_value); // Save the SPVAR with the current value, this won't write anything to flash unless the value changed - so we can do this for each variable saved to no risk missing anything\r\n}\r\n// Function used to read your value from the SPVARs, this is the function you'll be calling when reading a value. You need to provide the range (minimum and maximum value, this is how we determine how many bits to use when reading the value) aswell as a default value if what we read is out of range\r\nfunction read_spvar(min, max, def) {\r\n\tspvar_bits = get_bit_count2(min, max); // Set spvar_bits to the number of bits we need for this range\r\n\tspvar_current_value = (read_spvar_slot(spvar_current_slot) \u003e\u003e spvar_current_bit) \u0026 make_full_mask(spvar_bits); // Read the current SPVAR value from flash and shift them into position, we'll handle split values next\r\n\t\r\n\tif (spvar_bits \u003e= 32 - spvar_current_bit) { // Check if we are dealing with a split SPVAR value, essentially if the current position means we're using more than 32 bits in the SPVAR, we need to retrieve the missing bits from the next SPVAR and put them back to our current value, we use the same space saving trick here as in the save function\r\n\t\tspvar_current_value = (spvar_current_value \u0026 make_full_mask(32 - spvar_current_bit)) | ((read_spvar_slot(spvar_current_slot + 1) \u0026 make_full_mask(spvar_bits - (32 - spvar_current_bit))) \u003c\u003c (32 - spvar_current_bit));\r\n\t\t//Below is a breakdown of the line above, with each step done one at a time instead of all at once - this however increases codesize - the below code is to explain how it all works tho\r\n\t\t//spvar_tmp = read_spvar_slot(spvar_current_slot + 1); // Read the SPVAR slot coming after the initial one we used to spvar_tmp from flash, we need to maintain the data we've read thus far, but also add on what we have in flash for the next SPVAR\r\n\t\t//spvar_tmp = spvar_tmp \u0026 make_full_mask(spvar_bits - (32 - spvar_current_bit)); // Extract the bits we need need (the ones that didn't fit in the previous SPVAR)\r\n\t\t//spvar_tmp = spvar_tmp \u003c\u003c (32 - spvar_current_bit); // Move the bits into their original position, they were stored at the beginning of the new SPVAR but belong at the top of the currently read value\r\n\t\t//spvar_current_value = (spvar_current_value \u0026 make_full_mask(32 - spvar_current_bit)) | spvar_tmp; // put all bits together again with the part read from the first SPVAR cleaned up to only include the bits from this variable/value and not all bits set in the upper range like they normally are\r\n\t}\t\r\n\tspvar_current_bit += spvar_bits; // Move up the counter of next available bit to where we are will be reading data from next\r\n\tspvar_current_value = spvar_current_value \u0026 make_full_mask(spvar_bits); // Extract all bits included for this value and discard any other bits\r\n\tif (spvar_current_bit \u003e= 32) {\r\n\t\tspvar_current_slot++; // Move to the next SPVAR slot\r\n\t\tspvar_current_bit -= 32; // Remove 32 from the spvar_current_bit tracker since we've gone beyond what we can do here\r\n\t}\r\n\t\r\n\tif (is_signed2(min, max)) { // Check if the value can be negative and handle it accordingly\r\n\t\tspvar_current_value = unpack_i(spvar_current_value, spvar_bits); // Restore the signed, possibly negative value\r\n\t}\r\n\t\r\n\tif (spvar_current_value \u003c min || spvar_current_value \u003e max) { // Check if the value is below our specified min or above our specified max, if so - return the default value instead\r\n\t\treturn def; // This can be changed to min instead as a reasonable default with the default parameter being removed if you don't need to have a override value for the default when out of range, that will save a bit of code size\r\n\t}\r\n\t\r\n\t// Return the retrieved value to the user since it's within the expected range\r\n\treturn spvar_current_value;\r\n}\r\n}","language":"apex","customLabel":"GPC"}],"selectedLanguageId":"pd5Zu9erahGVNweMNQdGZ"},"type":"code-editor-v2","nodes":[{"key":"avUoWJQ85DLOSwQmImbN9","text":"","marks":[],"object":"text"}],"object":"block"},{"key":"KY0aQNSc6ldwV1bpDE7Sa","data":{},"type":"paragraph","nodes":[{"key":"VnyK8PUpxD6lbdydeaTL2","text":"","marks":[],"object":"text"}],"object":"block"}],"object":"document"}},"version":587,"privacy":"shared with team","shareableToken":"SDSIFmhYJ1m54E0rS2Ev8","tags":[],"children":[],"createdBy":{"id":"","firstName":"","lastName":"","email":"","profilePhotoURL":""},"lastModifiedBy":{"id":"","firstName":"","lastName":"","email":"","profilePhotoURL":""},"contributorsDetails":[{"id":"JK2hYr6gZD0M2NkTtYIuX","email":"","fullName":"Keith Siegel","profilePhotoURL":"https://s3.amazonaws.com/archbee-animals/lion.png"},{"id":"oHqHheSqX00UInPoJkWM5","email":"","fullName":"Xbl Jedi","profilePhotoURL":"https://archbee-profile-photos.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/AC3aLnDtrwdYiCkw3x18i_.blob"},{"id":"EG_XZRl28-xFF3UA0jEvZ","email":"","fullName":"MaxADMIN","profilePhotoURL":"https://archbee-profile-photos.s3.amazonaws.com/IwUlH55FdaPsVELSqm1Fc/lo3ffBD2oAs-EC85n1dMP_.blob"}],"watchers":[],"isArchbeeBrandVisible":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1","docSpaceId":"PUBLISHED-n8vmukt5UQjWbpRAZd0QE","updatedAt":"2022-08-07T22:45:55.000Z","createdAt":"2021-12-08T17:53:40.000Z","deletedAt":null,"editable":false,"expanded":true,"reusableContentVariables":[{"name":"copy","scope":"global","content":"©2013-2022","contentVariableId":"rZqIWxKAK9L6VaH3SiJpv"},{"name":"lib","scope":"global","content":"3460","contentVariableId":"lQAjp3hxIXtR60jlNiftJ"},{"name":"gp","scope":"global","content":"155","contentVariableId":"0cl7V199CNkE8vMxtMyGn"},{"name":"oldfw","scope":"global","content":"2.0.3-beta.105","contentVariableId":"nLBJViRP-Mmqi5g4LhLQ1"},{"name":"zs","scope":"global","content":"1.2.1-beta.105","contentVariableId":"oeLoGTKyAgzIvH1WICFB1"},{"name":"fw","scope":"global","content":"2.1.0-beta.35","contentVariableId":"WkEzFGUR7Aw26wbGo1-_A"}],"reusableContentDocRefs":{},"rightDoc":{"id":"PUBLISHED-Fmc6ZF0ZTCREXUtwC6miK","icon":"","name":"Custom OLED Buttons","urlKey":"gpc/custom-oled-buttons","children":[],"expanded":false,"parentDocId":"PUBLISHED-eqiBeizweLkv7rcDBPZB1"}}},"isHosted":true,"isMobile":false,"isBot":false,"isWidget":false,"docs":[]}},"page":"/public/[[...slug]]","query":{"slug":[null,"%2Fgpc%2Fgpc-scripting-bitpacking-spvars"],"hostname":"beta.cronusmax.com","isHosted":"true","isWidget":"false"},"buildId":"T78ke_kUKm_6HftMGeMiV","assetPrefix":"https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a","runtimeConfig":{"NEXT_PUBLIC_ENV":"live","NEXT_PUBLIC_DOMAIN":"app.archbee.com","NEXT_PUBLIC_ASSET_PREFIX":"https://cdn.archbee.com/3b9af6ccb500747edf3281518f962b59ea2f620a","NEXT_PUBLIC_VERSION":"3b9af6ccb500747edf3281518f962b59ea2f620a"},"isFallback":false,"customServer":true,"gip":true,"scriptLoader":[]}</script></body></html>