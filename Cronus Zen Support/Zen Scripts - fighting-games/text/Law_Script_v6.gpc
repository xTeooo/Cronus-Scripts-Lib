//Posted by justframe, a member of the Cronus Community - https://cronusmax.com/forums
 
//Posted : Sunday 21st of June, 2020 20:26 CST6CDT  
 
 
 
 
int forward
int back
int SWITCH



unmap XB1_LY
unmap XB1_LX


 
main {   


if (get_ival(XB1_RB)) { combo_run(maxcmb); }
if (event_release(XB1_RB)) { combo_stop(maxcmb); }

set_val(XB1_RB, 0);

if (get_val(XB1_RY) < -80) { set_val(XB1_RB, 100); }


if (get_val(XB1_VIEW))  {
    combo_run(taunt);
    }



 if (get_val (9) >= 80) {         
 combo_run(stomp);
 }


if(get_ival(11) >= 80) {
combo_run(Triplekick);}


   if (get_val (10) >= 80) {  
combo_run(wakeup);
            }
            
            
            
            
            
    if (event_press(XB1_X)) { combo_run(punisher); }
if (event_release(XB1_X)) { combo_stop(punisher); }
            
            
            

if (get_val(XB1_DOWN)&& get_val(back))  {
    combo_stop(SSF);
    combo_stop(KBD);
    combo_run(iWD);
    set_val(XB1_DOWN, 100);
    set_val(back, 100);
}
if (event_press(XB1_LT))  {
    combo_run(Tenhit);

}
    if(event_release(XB1_LT)) {
    combo_stop(Tenhit);      
}







if (get_val(XB1_Y))  {
    set_val(XB1_Y, 0);
    combo_run(x);
}
    if(event_release(XB1_Y)) {
    combo_stop(x);      
}
    if (event_press(XB1_LB))  {
    combo_run(Tenhit2);
}       
    if(event_release(XB1_LB)) {
    combo_stop(Tenhit2);  
}
    if (event_press(XB1_RT))  {
    combo_run(Combo1);
}   
    
    if(event_release(XB1_RT)) {
    combo_stop(Combo1);  
}

  
if (get_val(XB1_UP))  {
set_val(XB1_UP, 0);
    combo_run(SSB);
}

if (get_val(XB1_DOWN))  {
    set_val(XB1_DOWN, 0)
    combo_run(SSF);
}






    
    if (event_press (XB1_LS)) { forward=16;back=15; } //Combo facing Right
    if (event_press (XB1_RS)) { forward=15;back=16; } //Combo facing Left
 
    if(get_val(XB1_LS)) { 
        SWITCH = TRUE;             
    } else if(get_val(XB1_RS)) {
        SWITCH = FALSE; 
        }  
 
  if (SWITCH) {
  set_val(XB1_LEFT, 0);
  if( get_lval(XB1_LEFT) ) combo_run (KBD );
  if( get_lval(XB1_RIGHT) ) combo_run (iWR);
  }
  else if (!SWITCH) {
  set_val(XB1_RIGHT, 0);
  if( get_lval(XB1_LEFT) ) combo_run (iWR);
  if( get_lval(XB1_RIGHT) ) combo_run (KBD );
  }

}

  combo Tenhit {
    set_val(forward, 100);
    wait(20);
    set_val(XB1_B, 100);
    set_val(XB1_A, 100);
    wait(120);
    set_val(XB1_B, 100);
    set_val(XB1_A, 0);
    wait(10);
    set_val(XB1_B, 0);
    wait(210);
    set_val(XB1_B, 100);
    wait(120);
    set_val(XB1_B, 0);
    wait(900);
    set_val(forward, 100);
    wait(70);
    set_val(forward, 0);
    wait(80);
    set_val(forward, 100);
    wait(300);
    set_val(forward, 0);
    set_val(XB1_B, 100);
	wait(40);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 100);
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(50);
	set_val(XB1_UP, 0);
	wait(760);
	////////////////////
	 set_val(forward, 100);
    wait(80);
    set_val(forward, 0);
    wait(50);
    set_val(forward, 100);
    wait(80);
	
	
//////////////////////
set_val(XB1_B, 100);
	wait(90);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(40);
	set_val(back, 100);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(70);
	set_val(back, 100);
	set_val(XB1_A, 0);
	wait(40);
	set_val(back, 0);
	wait(70);
	set_val(forward, 100);
	wait(130);
	set_val(forward, 0);
	wait(110);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(XB1_B, 0);
		set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	wait(30);
	set_val(XB1_B, 0);
	wait(30);
	set_val(forward, 100);
	wait(20);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	set_val(XB1_B, 100);
	wait(30);
	set_val(XB1_B, 0);
}

combo Tenhit2 {
    set_val(XB1_LB, 0);
    set_val(forward, 100);
    set_val(XB1_DOWN, 100);
    set_val(XB1_X, 100);
    wait(80);
    set_val(XB1_X, 0);
    set_val(forward, 0);
    set_val(XB1_DOWN, 0);
    wait(80);
    set_val(XB1_A, 100);
    wait(200);
    set_val(XB1_A, 0);
    wait(200);
    set_val(XB1_Y, 100);
    wait(200);
    set_val(XB1_Y, 0);
    wait(100);
    set_val(XB1_Y, 100);
    wait(200);
    set_val(XB1_Y, 0);
    wait(200);
    set_val(XB1_A, 100);
    wait(200);
    set_val(XB1_A, 0);
    wait(200);
    set_val(XB1_A, 100);
    wait(200);
    set_val(XB1_A, 0);
    wait(200);
    set_val(XB1_A, 100);
    wait(200);
    set_val(XB1_A, 0);
    wait(200);
    set_val(XB1_B, 100);
    wait(200);
    set_val(XB1_B, 0);
    wait(200);
    set_val(XB1_B, 100);
    wait(200);
    set_val(XB1_B, 0);
    wait(200);
    set_val(XB1_B, 100);
    wait(200);
    set_val(XB1_B, 0);
    wait(200);
}
combo Combo1 {
set_val(XB1_UP, 100);
	set_val(forward, 100);
	wait(10);
	set_val(XB1_UP, 100);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(170);
	set_val(XB1_UP, 100);
	set_val(forward, 0);
	set_val(XB1_B, 0);
	wait(20);
	set_val(XB1_UP, 0);
	wait(520);
	set_val(XB1_UP, 100);
	wait(120);
	set_val(XB1_UP, 0);
	wait(100);
set_val(XB1_B, 100);
	wait(40);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 100);
	wait(50);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(XB1_A, 0);
	wait(50);
	set_val(XB1_UP, 0);
	wait(800);
	set_val(back, 100);
	set_val(XB1_Y, 100);
	wait(20);
	set_val(back, 0);
	set_val(XB1_Y, 0);
	wait(700);
	set_val(back, 100);
	set_val(XB1_Y, 100);
	wait(20);
	set_val(back, 0);
	set_val(XB1_Y, 0);
	wait(700);
	set_val(back, 100);
	set_val(XB1_Y, 100);
	wait(20);
	set_val(back, 0);
	set_val(XB1_Y, 100);
	wait(90);
	set_val(XB1_X, 100);
	wait(20);
	wait(900);
set_val(forward, 100);
	wait(60);
	set_val(forward, 0);
	wait(80);
	set_val(forward, 100);
	wait(470);
	//////////////////////////////////
set_val(XB1_B, 100);
	wait(90);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(40);
	set_val(back, 100);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(70);
	set_val(back, 100);
	set_val(XB1_A, 0);
	wait(40);
	set_val(back, 0);
	wait(70);
	set_val(forward, 100);
	wait(130);
	set_val(forward, 0);
	wait(110);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(XB1_B, 0);
		set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	wait(30);
	set_val(XB1_B, 0);
	wait(30);
	set_val(forward, 100);
	wait(20);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	set_val(XB1_B, 100);
	wait(30);
	set_val(XB1_B, 0);
	////////////////////
	
	
}

combo maxcmb {
    set_val(back, 100);
    wait(50);
    set_val(back,0);
    wait(20);
    set_val(forward, 100);
    wait(30);
    set_val(forward, 0);
    wait(30);
    set_val(forward, 100);
    wait(30);
    set_val(forward, 100);
    set_val(XB1_B, 100);
    set_val(XB1_A, 100);
    wait(20);
    set_val(forward, 0);
    set_val(XB1_B, 100);
    set_val(XB1_A, 100);
    wait(950);
    set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 100);
	wait(40);
	set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 100);
	set_val(XB1_B, 100);
	wait(140);
	set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 100);
	set_val(XB1_B, 0);
	wait(90);
	set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 100);
	set_val(XB1_A, 100);
	wait(120);
	set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 100);
	set_val(XB1_A, 0);
	wait(630);
	set_val(XB1_UP, 100);
	set_val(XB1_RIGHT, 0);
	wait(20);
	set_val(XB1_UP, 0);
	wait(400);

	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(120);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_A, 0);
	wait(140);
	set_val(XB1_B, 100);
	wait(130);
	set_val(XB1_B, 0);
	wait(1000);
set_val(forward, 100);
	wait(60);
	set_val(forward, 0);
	wait(80);
	set_val(forward, 100);
	wait(340);
	//////////////////////////////////
set_val(XB1_B, 100);
	wait(90);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(40);
	set_val(back, 100);
	set_val(XB1_B, 0);
	set_val(XB1_A, 100);
	wait(70);
	set_val(back, 100);
	set_val(XB1_A, 0);
	wait(40);
	set_val(back, 0);
	wait(70);
	set_val(forward, 100);
	wait(130);
	set_val(forward, 0);
	wait(110);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(XB1_B, 0);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	wait(30);
	set_val(XB1_B, 0);
	wait(30);
	set_val(forward, 100);
	wait(20);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	wait(30);
	set_val(forward, 0);
	set_val(XB1_B, 100);
	wait(300);
	set_val(XB1_B, 0);}
  
    
 
 


combo KBD {
set_val(back, 100);
wait(20);
wait(20);
set_val(back, 100);
wait(190);
set_val(back, 100);
set_val(XB1_DOWN, 100);
wait(20);
wait(20);
}


combo SSF  {
    set_val(back, 100);
    wait(20);
    set_val(XB1_DOWN,100);
    wait(20);
    wait(200);
} // end combo
combo SSB  {
    set_val(back,100);
    wait(20);
    set_val(XB1_UP,100);
    wait(20);
    wait(200);
    }
    
    
    combo iWR  {
    set_val(forward,100);
    wait(20);
    wait(20);
    set_val(forward,100);
    wait(20);
    wait(20);
    set_val(forward,100);
    wait(20);
    wait(500);
    }
    
    
    
    combo iWD  {
  set_val(XB1_DOWN, 100);
  set_val(back, 100);
    }
    
    
    
    
    
        combo taunt  {
    set_val(XB1_DOWN, 100);
    set_val(forward, 100);
    wait(120);
    set_val(XB1_DOWN, 0);
    set_val(forward, 0);
    wait(100);
    
    }
    
    
    combo x {
    set_val(XB1_DOWN, 100);
    wait(20);
    set_val(XB1_DOWN, 100);
    set_val(forward, 100);
    set_val(XB1_Y, 100);
    wait(20);
    set_val(forward, 0);
    set_val(XB1_Y, 0);
    wait(550);
    set_val(XB1_B, 100);
    wait(120);
    set_val(XB1_B, 0);
    wait(70);
    set_val(XB1_UP, 100);
    wait(30);
    set_val(XB1_UP, 100);
    set_val(XB1_A, 100);
    wait(100);
    set_val(XB1_UP, 100);
    set_val(XB1_A, 0);
    wait(20);
    set_val(XB1_UP, 0);
    wait(750);
    set_val(back, 100);
    set_val(XB1_Y, 100);
    wait(90);
    set_val(back, 100);
    set_val(XB1_Y, 0);
    wait(70);
    set_val(back, 0);
    wait(20);
    set_val(XB1_X, 100);
    wait(90);
    set_val(XB1_X, 0);
    wait(1000);
    set_val(forward, 100);
    wait(70);
    set_val(forward, 0);
    wait(90);
    set_val(forward, 100);
    wait(200);
    set_val(forward, 0);
    wait(50);
    set_val(XB1_B, 100);
    wait(40);
    set_val(XB1_B, 100);
    set_val(XB1_A, 100);
    wait(80);
    set_val(back, 100);
    set_val(XB1_B, 0);
    set_val(XB1_A, 100);
    wait(90);
    set_val(back, 100);
    set_val(XB1_A, 0);
    wait(30);
    set_val(back, 0);
    wait(70);
    set_val(forward, 100);
    wait(150);
    set_val(forward, 0);
    wait(210);
    set_val(forward, 100);
    wait(40);
    set_val(forward, 100);
    set_val(XB1_A, 100);
    wait(90);
    set_val(forward, 0);
    set_val(XB1_A, 100);
    wait(30);
    set_val(XB1_A, 0);
}




combo punisher {
	set_val(XB1_X, 100);
	wait(90);
	set_val(XB1_X, 100);
	wait(30);
	set_val(XB1_Y, 100);
	set_val(XB1_X, 0);
	wait(80);
	set_val(XB1_Y, 100);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_Y, 0);
	set_val(XB1_A, 100);
	wait(110);
	set_val(XB1_A, 0);
}





combo wakeup {
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(90);
	set_val(XB1_B, 0);
	set_val(XB1_A, 0);
}

combo rage{
set_val(XB1_Y, 100);
	set_val(XB1_X, 100);
	wait(50);
	set_val(XB1_Y, 0);
	set_val(XB1_X, 0);
}

combo stomp{
	set_val(XB1_UP, 100);
	set_val(forward, 100);
	wait(20);
	set_val(XB1_UP, 100);
	set_val(forward, 100);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(160);
	set_val(XB1_UP, 0);
	set_val(forward, 0);
	set_val(XB1_B, 100);
	set_val(XB1_A, 100);
	wait(20);
	set_val(XB1_B, 100);
	set_val(XB1_A, 0);
	wait(20);
	set_val(XB1_B, 0);
}

combo Triplekick
{
	set_val(XB1_DOWN, 100);
	set_val(forward, 100);
	wait(70);
	set_val(XB1_DOWN, 100);
	set_val(forward, 100);
	set_val(XB1_A, 100);
	wait(50);
	set_val(XB1_DOWN, 100);
	set_val(forward, 0);
	set_val(XB1_A, 100);
	wait(10);
	set_val(XB1_DOWN, 0);
	set_val(XB1_A, 100);
	wait(50);
	set_val(XB1_A, 0);
	wait(160);
	set_val(XB1_A, 100);
	wait(80);
	set_val(XB1_A, 0);
	wait(190);
	set_val(XB1_A, 100);
	wait(90);
	set_val(XB1_A, 0);}