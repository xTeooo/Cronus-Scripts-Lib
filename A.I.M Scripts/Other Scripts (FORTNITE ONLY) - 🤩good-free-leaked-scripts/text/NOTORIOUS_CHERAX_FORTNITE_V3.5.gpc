																																																/*
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmss      ``-/++ooyhddddddhyso+++:-`      `:yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdd+`  `-:+ydmmNMMMMMMMMMMMMMMMMMMMMNNmdhs+:.`  -hdNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm/   .:shNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmho-`  -sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+   :smMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmo.  .sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd/`  -hdhhmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhddo-  .yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/`  `.o++sdNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh+++/.   /hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMo`   `+hNNdyyhmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhyhmNmy/`   yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.  .+dho:--://///oymMMMMMMMMMMMMMMMMMMMMMMMMNmy+/////:-./sdh/  `sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM  .:/:.:shdmNmmmdddNMMMMMMMMMMMMMMMMMMMMMMMMNmddmmmNNmdy+:-:/:  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   `./dmdyoo++oshmNMMMMMMMMMMMMMMMMMMMMMMMMMMMNmys+++oshdmy/``  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   `/mMNy/`     `.-+shhdmNNmhdNMMMNddmNNmdhys/-``     `+dNNd:   oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   :hMMm/`          ```.-:::odNMMMNh+:::-```           .smMNh.  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM   :hMMm+.             `-/odNmho+odNmho:.              .smMNh.  oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/` `:ydMNs:.--``     `-odNMmo-`   `:ymMNd/.`     `.--.:hNNds-  -hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd.  `.yMMNmddmdhysssyhmNMMN+`   `   -sNMMNdhysssyhdddhmMMms.   sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM`  `/hNMMMMMMMNmmmmNMMMMMMm/::+sys/::smMMMMMMNmdmNNMMMMMMMNy:  `sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM/`  .+shmmmmds/:/smMMMMMMMNmNNNMMMNNmmNMMMMMMNms::+ydmNmdhs/.  :hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+-.  `.--.`  `:shdhydNNmmdddmmmmmdddmNNNhyhddy-` ``.--.` `--hNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNh.   .:+-`  ``.-/oosssso+oo+/+oo+osysso+/-..`  `:+:`  `:NNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd+   :sms:`  .sNNNmmNNNmmmmdmmmmNNNmmNNdo`  ./ydy`  -sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM`   :dMNy: `+mNh+/sdy::+ssy/-+yhs:omNh/  +hNNh.   sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy.  `:MMNo.  .:.   ``         ``   --.  `dMMd/   +mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM-  .sMMNo.                      `      .dNMmo`  +dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM+` .+hNNmy/.  .:/:`.:---:--:-..:+:` `-+yNNmy/`  -yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+`  -/smNm+`:yNmhdNNmmNmmNmdhmNy--omNdo/.` ..yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdoo` `-smNho/+sssyysssosyysoo+/sdNmo`    :NNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd-  `/dNNmmmmddddddddddmmmmmNNy/  `-.`/MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MNmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm/`   .:/oymmNMMMMMMMMNNmmy+/:.   -:.`/mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmNM
M-                                                                ``-+ossysoo/-``                                                                   -M
M.                                                                      ```                                                                         .M
M.     `:////:   .///:` `../////:-.`   `://////////-``.-://///..`    ://////////:.   `.///////////. `.-//////..`    ////-    `-///-``-///////////:. .M
M.     dNMMMMM. /dMMMo/ohNMMNNNMMMMm+-+dNMMMMMMNNNy+ohMMMNNNNMMMd+` oNMMMNNNNMMMMM. -smNMMMMMMNNms+odMMMNNNMMMMd/ `oMMMd+    oNMMM/odMMMNNNNNNNNd+. .M
M.   `oMMMMMMMy/hMMMdodMMNh+.../dMMMd/`..yNMMmo...odMMMy+-..:mMMMh::MMMNh++++hNMMM:``..-mMMMh:...smMMNy/-../mMMMy:/MMMNo    +dMMNs:dMMMN+++++/-.`   .M
M.  `:NMMNNNMMNNNMMm:NMMNh`    :hMMMy-  -NMMNy`  /dMMMh`    .mMMMy/mMMMNNNMMMNNmh+    .sMMMd/   +mMMNy    `-mMMMs/mMMMs.   -dMMNd``smNNNNNNMMNd`    .M
M.  :mMMMo+hMMMMMMm:-NMMMmo::+smMMMy-  -mMMMy.   omMMMmo::+smMMMyohMMMhymMMMNh/`   --:oMMMMs--- sNMMMm+::+ymMMMs-/MMMMy/:/oNMMNh. --/ooooodNMMM/`   .M
M. :hMMMs-`/MMMMMmo  odNMMMNNMMNmy:`  -hMMMy- `/ `+hNMMMNNMMNmy:-sMMMd: `:yNMMms::dNNNMMMMMNNd+ `odNMMMNNMMNms-` -hNMMMNNNMMmh/.:hNNNNNNNNMMMms     .M
M. `----`  `-----.`   .---------.     `----`   -   `---------.  `----.`    ------------------.    `---------.     `---------.` `.------------.      .M
MyssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssyM 	
 

 
         ░█████╗░██╗░░██╗███████╗██████╗░░█████╗░██╗░░██╗  ███████╗░█████╗░██████╗░████████╗███╗░░██╗██╗████████╗███████╗
         ██╔══██╗██║░░██║██╔════╝██╔══██╗██╔══██╗╚██╗██╔╝  ██╔════╝██╔══██╗██╔══██╗╚══██╔══╝████╗░██║██║╚══██╔══╝██╔════╝
         ██║░░╚═╝███████║█████╗░░██████╔╝███████║░╚███╔╝░  █████╗░░██║░░██║██████╔╝░░░██║░░░██╔██╗██║██║░░░██║░░░█████╗░░
         ██║░░██╗██╔══██║██╔══╝░░██╔══██╗██╔══██║░██╔██╗░  ██╔══╝░░██║░░██║██╔══██╗░░░██║░░░██║╚████║██║░░░██║░░░██╔══╝░░
         ╚█████╔╝██║░░██║███████╗██║░░██║██║░░██║██╔╝╚██╗  ██║░░░░░╚█████╔╝██║░░██║░░░██║░░░██║░╚███║██║░░░██║░░░███████╗
         ░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝  ╚═╝░░░░░░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚══╝╚═╝░░░╚═╝░░░╚══════╝
 
 
 
 ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★                                                        
 ★                                                   ✖ NOTORIOUS CHERAX FORTNITE ✖                                             ★
 ★                                                                                                                               ★
 ★                                                     ★ OPEN MENU = L2 & OPTIONS ★                                              ★ 
 ★                                                      ★ PRESS X TO ENABLE MODS ★                                               ★
 ★                                                     ★ PRESS SQUARE TO EDIT MODS ★                                             ★
 ★                                                                                                                                ★
 ★                                                           QUICK TOGGLE                                                         ★ 
 ★                                                      DROP SHOT = L2 & D-PAD DOWN                                               ★ 
 ★                                                      RAPIDFIRE = L2 & D-PAD LEFT                                               ★ 
 ★                                                    EDIT ASSIST = L3                                                            ★ 
 ★                                            INSTANT RESET BULID = D-PAD RIGHT(cannot be bound in game)                          ★ 
 ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ 

                                                                                                                                                                                                                                                                                                                                                                                          /*


█████████████████████████████████████████████████████████████████████████████
█▄─▄─▀█▄─██─▄█─▄─▄─█─▄─▄─█─▄▄─█▄─▀█▄─▄███▄─▄████▀▄─██▄─█─▄█─▄▄─█▄─██─▄█─▄─▄─█
██─▄─▀██─██─████─█████─███─██─██─█▄▀─█████─██▀██─▀─███▄─▄██─██─██─██─████─███
▀▄▄▄▄▀▀▀▄▄▄▄▀▀▀▄▄▄▀▀▀▄▄▄▀▀▄▄▄▄▀▄▄▄▀▀▄▄▀▀▀▄▄▄▄▄▀▄▄▀▄▄▀▀▄▄▄▀▀▄▄▄▄▀▀▄▄▄▄▀▀▀▄▄▄▀▀




                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */
    define FIRE      = PS4_R2;
    define ADS       = PS4_L2;
    define PREVIOUS  = PS4_L1;
    define NEXT      = PS4_R1;
    define SPRINT    = PS4_L3;
    define CROUCH    = PS4_R3;
	define PICKAXE   = PS4_TRIANGLE;
    define BUILD     = PS4_CIRCLE;
    define JUMP      = PS4_CROSS;
    define RELOAD    = PS4_SQUARE;
	define AIM_X	 = PS4_RX;
	define AIM_Y	 = PS4_RY;
	define STRAFE 	 = PS4_LX;
	define WALK 	 = PS4_LY;
	define UNBOUND_BUTTON  = PS4_RIGHT;
	define EDIT_ASSIST_BUTTON = PS4_L3;
	define DELAY1             =    100; 
	define RAPID_FIRE_BUTTON =    PS4_LEFT;	
	define DROP_SHOT_BUTTON  =    PS4_DOWN;	
	define MENU_OPEN_BUTTON  = PS4_OPTIONS;	
	
	
	int ADS_ASSIST      = TRUE; 	
	int ADS_PATTERN     = Circle; 	
	int ADSFIRE_ASSIST  = TRUE; 	
	int ADSFIRE_PATTERN = Tall_Oval;
	int HIPFIRE_ASSIST  = TRUE; 	
	int HIPFIRE_PATTERN = Wide_Oval;
	int DRIFT_ASSIST    = TRUE; 	
	int DRIFT_PATTERN   = Ellipse; 	
	define UNDER_BOOST 	=  3;	
	define OVER_BOOST  	=  2;	
	define SIDE_BOOST  	=  1;	
	define AA_SPEED 	= 12;	
	int wait_time_correction;
	int ads_grenade_sens, ads_fire_sens, Sens, actual_sens;
	int Notoriousangle;
	int Notorious_POLAR_AN_AIM_CORRECTION;
	int fuckd_POLAR_AN_AIM_CORRECTION;
	int anti_recoil;
	int ptime;
	int EDIT, HOLD1;
	int SHUNT;
	int tap; 
	int R2_block;
	int BuildMode = FALSE;
	int INC = 1, DEC, COLOUR[3];
	int color = 1; 
	int Notorioussteps, DIRECTION, INVERT;
	int x_Out, y_Out, angle_Out, x_Out9, y_Out9, angle_Out9, angle9, xx9[2], y9[2], angle2, xaa, yaa;
	int Notoriousradius;
	int BRIGHTNESS = 3;
	int ANGLE;
	define STEP_INTERVAL = 1;
	define STEPSS = 8;
	define Tall_Oval = 1;
	define Wide_Oval = 2;
	define Ellipse = 3;
	define Circle = 4;

	int ANTI_RECOIL;
	int DropShotSpeed
	int ASSIST;
	int OVAL_BIG;
	int OVAL_SMALL;
	int in_game_menu_sens;
	int rapid_fire_speed;


	int c_b;
	int ss = TRUE;
	int ZS;
	int sel = 1;
	int mod = 1;
	define NumofMods = 15;
	int display = TRUE;


int Notorious_Polar;
int fuckdPolar;
int Aim__Abuse;
int Rapid_Fire;
int DropShot;
int Anti_Recoil;
int PUMP_SMG;
int PUMPWALL;
int ChickenMode;
int FAST_RESET;
int AimSensCorrections;
int EDIT_ASSIST;
int PerfectAccuracy = TRUE;
int Ramp_Floor_Wall;
int QuickBox;
int WindoWEditShot;

const string t_text[] = {
"NOTORIOUS",  
"polar aimbot",	  
"CHEAT XIIX",    
"AimAbuseV9",	   	 
"Rapid Fire",		  
"Drop Shot",		  
"Anti Recoil",		  
"Pump SMG", 		  
"Pump Wall",	      
"Pussy Mode",		  
"Fast Reset",	  	 
"Aim Corrections", 	  
"Edit Assist",		  
"Ramp Floor Wall",	  
"Safety Box",         
"Window Edit Shot",	  
"OFF",				  
"ON",				  
"Width",			  
"Height",			  
"Vertical",			  
"Horizontal",		  
"RPS"				  
};

init {
	if(get_pvar(SPVAR_64, 0, 9999, 0) != 1486) {
		set_pvar(SPVAR_64, 1486):
		reset_script_var();
		save();		
	}
	
	load_pvar();
	
	if(rapid_fire_speed > 1)
	wait_time_correction = -10;

	COLOUR = 255; 
	
	combo_run(niko); }
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |M|A|I|N| | |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
main {

if(ZS == 0) {
    
	  	
		if(Ramp_Floor_Wall) {
		if(get_val(PS4_SQUARE))
				combo_run(RAMPFLOORWALL);
		}
	    

		
		if(QuickBox) {	
		if(get_val(UNBOUND_BUTTON))
			combo_run(TUNNELBOX);
		}
		

		
	if (FAST_RESET) {
	if (event_press(UNBOUND_BUTTON)) { 
		set_val(UNBOUND_BUTTON, 0)	
			combo_run(RESET); }
	}
		

		
   if(WindoWEditShot) {
	if(event_press(UNBOUND_BUTTON))
		combo_run(WindowEditShot);
	}
		

	    
	if (PUMPWALL) {
	if(get_val(FIRE) && event_press(NEXT)) {
		SHUNT = NEXT;
		combo_run(PUMPWALL);
	}
	if (SHUNT) {
		if (event_release(SHUNT)) {
			SHUNT = FALSE;
	} else {
      set_val (SHUNT,FALSE); }
		}
	}
	    //PUMP WALL - END

		//EDIT ASSIST - START
	if (EDIT_ASSIST) {
	if (get_ival(EDIT_ASSIST_BUTTON)) {
		ASSIST();
		EDIT = TRUE;
	}
	if (event_release (EDIT_ASSIST_BUTTON)) {
		combo_run (CONFIRM);
		HOLD1 = FALSE;
		EDIT = FALSE;
		}
	}		
		//EDIT ASSIST - END

	//BUILD MODE - START
if(event_press(BUILD)) {
	BuildMode = !BuildMode;
	}

	if(event_press(PICKAXE)) {
	BuildMode = FALSE;
	}
	
	if(event_press(CROUCH)) {
	BuildMode = FALSE;
	}

	if(!BuildMode) {

	    //RAPIDFIRE - START
	    if(get_val(PS4_L2) && event_press(RAPID_FIRE_BUTTON)) {
	    	combo_run (vibrate);
	        combo_restart(BLIINK);
			Rapid_Fire = !Rapid_Fire;
		}
		if(Rapid_Fire) {
		if(get_ival(FIRE)) {
			combo_run(Rapid__Fire);	}
			if(event_release(FIRE)) {
			combo_stop(Rapid__Fire);
			}
		}
		//RAPIDFIRE - END
			
		//PERFECT ACCURACY - START
		if (get_val(ADS) && get_val(NEXT)) {
	PerfectAccuracy = !PerfectAccuracy;
	combo_run(PerfectionAccuracy);
		set_val(NEXT, 0);
		} else {
	combo_stop(PerfectionAccuracy);
	}
		//PERFECT ACCURACY - END

		//DROPSHOT - START
		if(get_val(PS4_L2) && event_press(DROP_SHOT_BUTTON)) {
	        combo_run (vibrate);
	        combo_restart(BLIIINK);
			DropShot=!DropShot;
		}
		if (DropShot) {
	    	if(get_val(FIRE))combo_run(DroppShott); 
		}
		//DROPSHOT - END
	
	//PUMP SMG - START
	if (PUMP_SMG) {
	if (R2_block) {
	set_val(ADS, 0);
	set_val(FIRE, 0);}
	if (get_val(ADS) && event_press(FIRE)) {
	if (!tap) { 
	tap = TRUE;
	combo_run(Double_Tact_R1);
	set_val(FIRE, 0);}
	}
	if (event_press(ADS)) {
	tap = FALSE;}
	}
	//PUMP SMG - END

	    //Notorious POLAR - START		
      if (Notorious_Polar) {
        Notorious_POLAR_AN_AIM_CORRECTION = 1;
      } else {
        Notorious_POLAR_AN_AIM_CORRECTION = 0;
      }
      if (Notorious_POLAR_AN_AIM_CORRECTION) {
        if (get_ival(ADS) || (get_ival(FIRE))) {
          if (isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) <= Notoriousradius) {
            Notoriousangle = (Notoriousangle + Notorioussteps) % 360;
            set_polar(POLAR_RS, Notoriousangle, Notoriousradius * random(326, 328));
          }
        }
      }
		//Notorious POLAR - END

	    //fuckd POLAR - START
      if (fuckdPolar) {
        fuckd_POLAR_AN_AIM_CORRECTION = 1;
      } else {
        fuckd_POLAR_AN_AIM_CORRECTION = 0;
      }
      if (fuckd_POLAR_AN_AIM_CORRECTION) {
        AIMASSIST();
      }
		//fuckd POLAR - END

	    //CHICKEN MODE - START
		if (ChickenMode) {
		if(get_val(FIRE)) {
			combo_run(ChickenStrafe);
			combo_run(ChickenDrop); }
			if (event_release(FIRE)) {
			combo_stop(ChickenStrafe);
			combo_stop(ChickenDrop); }	  	
	  	    }
	  	//CHICKEN MODE - END	
	  	
	  	//AUTO AIM - START
	if(Aim__Abuse) {
   if(get_val(ADS) > 95) {
      combo_run(Aim_Abuse); }
   if(event_release(ADS)) { 
	  combo_stop(Aim_Abuse); }
	}
		//AUTO AIM - END

		//AIM CORRECTION - START
  if (AimSensCorrections) {
    ads_grenade_sens = 100 - (in_game_menu_sens);
    ads_fire_sens    =  96 - (in_game_menu_sens);
    actual_sens      = 100;
    if (!get_ival(ADS) && !get_ival(FIRE) && !get_ival(PREVIOUS) && !get_ival(NEXT)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && !get_ival(FIRE)) {
      Sens = ads_grenade_sens;
    } else if (!get_ival(ADS) && get_ival(FIRE)) {
      Sens = actual_sens;
    } else if (get_ival(ADS) && get_ival(FIRE)) {
      Sens = ads_fire_sens;
    } else if (get_ival(NEXT) || get_ival(PREVIOUS)) {
      Sens = ads_grenade_sens;
    }
    if (isqrt(abs(get_ival(AIM_X)) * abs(get_ival(AIM_X)) + abs(get_ival(AIM_Y)) * abs(get_ival(AIM_Y))) > 30) {
      if (Sens > 100) Sens = 100;
      sensitivity(AIM_X, NOT_USE, Sens);
      sensitivity(AIM_Y, NOT_USE, Sens);
		}
	}		//AIM CORRECTION - END
			
		//ANTIRECOIL - START
	if(Anti_Recoil) {
	if (get_val(ADS) && get_val(FIRE)) {
         combo_run(AntiRecoil); } 
		}
		//ANTIRECOIL - END

		//BUILDMODE - START
	}
		//BUILD MODE - END
		
		if(get_ival(ADS) && event_press(MENU_OPEN_BUTTON)) {
			ZS = 1;
			combo_stop(RGB);
			display = TRUE;
		}
		combo_run(RGB); 
	}
	niko_check();
	if(ZS == 1) {
		block_all_inputs();
		block_all_outputs();
		if(event_press(PS4_CROSS) && (mod == 1))Notorious_Polar = !Notorious_Polar
		if(event_press(PS4_CROSS) && (mod == 2))fuckdPolar = !fuckdPolar
		if(event_press(PS4_CROSS) && (mod == 3))Aim__Abuse = !Aim__Abuse
		if(event_press(PS4_CROSS) && (mod == 4))Rapid_Fire = !Rapid_Fire
		if(event_press(PS4_CROSS) && (mod == 5))DropShot = !DropShot
		if(event_press(PS4_CROSS) && (mod == 6))Anti_Recoil = !Anti_Recoil
		if(event_press(PS4_CROSS) && (mod == 7))PUMP_SMG = !PUMP_SMG
		if(event_press(PS4_CROSS) && (mod == 8))PUMPWALL = !PUMPWALL
		if(event_press(PS4_CROSS) && (mod == 9))ChickenMode = !ChickenMode
		if(event_press(PS4_CROSS) && (mod == 10))FAST_RESET = !FAST_RESET
		if(event_press(PS4_CROSS) && (mod == 11))AimSensCorrections = !AimSensCorrections
		if(event_press(PS4_CROSS) && (mod == 12))EDIT_ASSIST = !EDIT_ASSIST
		if(event_press(PS4_CROSS) && (mod == 13))Ramp_Floor_Wall = !Ramp_Floor_Wall
		if(event_press(PS4_CROSS) && (mod == 14))QuickBox = !QuickBox
		if(event_press(PS4_CROSS) && (mod == 15))WindoWEditShot = !WindoWEditShot

		if(event_press(PS4_SQUARE) && mod == 1) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 2) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 4) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 5) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 6) {
			ZS = 2;
			display = TRUE;
		}
		if(event_press(PS4_SQUARE) && mod == 11) {
			ZS = 2;
			display = TRUE;
		}
		if(mod == 1) {
			if(Notorious_Polar) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 2) {
			if(fuckdPolar) { set_rgb(0,255,0) }
			else { set_rgb(255,0,0) }
		}
		if(mod == 3) {
			if(Aim__Abuse) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 4) {
			if(Rapid_Fire) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 5) {
			if(DropShot) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 6) {
			if(Anti_Recoil) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 7) {
			if(PUMP_SMG) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 8) {
			if(PUMPWALL) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 9) {
			if(ChickenMode) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 10) {
			if(FAST_RESET) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 11) {
			if(AimSensCorrections) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 12) {
			if(EDIT_ASSIST) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 13) {
			if(Ramp_Floor_Wall) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 14) {
			if(QuickBox) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(mod == 15) {
			if(WindoWEditShot) {set_rgb(0,255,0) }
			else{set_rgb(255,0,0) }
		}
		if(event_press(PS4_UP)) {
			mod --;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			mod ++;
			display = TRUE;
		}
		if(mod > NumofMods) mod = 1
		if(mod < 1) mod = NumofMods
		
		if(event_press(PS4_CIRCLE)) {
			ZS = 0;
			save();
			frame = -1;
			combo_restart(niko);
			display = TRUE;
		}
	}
	
	if(ZS == 2) {
		block_all_inputs();
		block_all_outputs();

		if(ptime != 100)
			ptime += get_rtime();

	if(event_press(PS4_CIRCLE) && (mod == 11 || 6 || 5 || 4 || 2 || 1)) {
			save();
			ZS = 1;
			display = TRUE;
		}
		if(event_press(PS4_UP)) {
			sel ++ ;
			display = TRUE;
		}
		if(event_press(PS4_DOWN)) {
			sel -- ;
			display = TRUE;
		}
		if(sel < 0) sel = 0
		if(sel > 2) sel = 2
		
    if (Notoriousradius < 1) Notoriousradius = 1;
    if (Notoriousradius > 50) Notoriousradius = 50;
    if (Notorioussteps < 1) Notorioussteps = 1;
    if (Notorioussteps > 50) Notorioussteps = 50;
    if (ASSIST < 1) ASSIST = 1;
    if (ASSIST > 50) ASSIST = 50;
    if (OVAL_BIG < 1) OVAL_BIG = 1;
    if (OVAL_BIG > 50) OVAL_BIG = 50;
    if (OVAL_SMALL < 1) OVAL_SMALL = 1;
    if (OVAL_SMALL > 50) OVAL_SMALL = 50;
	if(DropShotSpeed < 1) DropShotSpeed = 1;
	if(DropShotSpeed > 100) DropShotSpeed = 100;
	if(in_game_menu_sens < 1) in_game_menu_sens = 1;
	if(in_game_menu_sens > 20) in_game_menu_sens = 20;
	if(ANTI_RECOIL < 1) ANTI_RECOIL = 1;
	if(ANTI_RECOIL > 50) ANTI_RECOIL = 50;
	if(rapid_fire_speed < 1) rapid_fire_speed = 1;
	if(rapid_fire_speed > 15) rapid_fire_speed = 15;

		if(mod == 1) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				Notoriousradius = Notoriousradius + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				Notoriousradius = Notoriousradius - 1;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				Notorioussteps = Notorioussteps + 1;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				Notorioussteps = Notorioussteps - 1;
				display = TRUE;
			}
		}
		if(mod == 2) {
			if(sel == 2 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				ASSIST = ASSIST + 1;
				display = TRUE;
			}
			if(sel == 2 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				ASSIST = ASSIST - 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				OVAL_BIG = OVAL_BIG + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				OVAL_BIG = OVAL_BIG - 1;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				OVAL_SMALL = OVAL_SMALL + 1;
				display = TRUE;
			}
			if(sel == 0 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				OVAL_SMALL = OVAL_SMALL - 1;
				display = TRUE;
			}
		}
		if(mod == 4) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				rapid_fire_speed = rapid_fire_speed + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				rapid_fire_speed = rapid_fire_speed - 1;
				display = TRUE;
			}
		}
		if(mod == 5) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				DropShotSpeed = DropShotSpeed + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				DropShotSpeed = DropShotSpeed - 1;
				display = TRUE;
			}
		}
		if(mod == 6) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				ANTI_RECOIL = ANTI_RECOIL + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				ANTI_RECOIL = ANTI_RECOIL - 1;
				display = TRUE;
			}
		}
		if(mod == 11) {
			if(sel == 1 && (event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 500))) {
				in_game_menu_sens = in_game_menu_sens + 1;
				display = TRUE;
			}
			if(sel == 1 && (event_press(PS4_LEFT) ||  (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 500))) {
				in_game_menu_sens = in_game_menu_sens - 1;
				display = TRUE;
			}
		}
	}
	if(ss) {	
		if(ZS == 0) text1()
		if(ZS == 1) text2()
		rect_oled(0, 0, 128, 64, 0, 1);
    	c_b += get_rtime();
		ssaver()
    	if(c_b >= 9000) {
      		cls_oled(0);
      		c_b = 0;
      		ss = FALSE;
    	}
	}
	
	if(display) {
		cls_oled(0);
		c_b = 0;
		if(ZS == 0) {
			printf (center_x(get_chars(0),OLED_FONT_SMALL_WIDTH),18,0,1,t_text[0]);
		}
		
		if(ZS == 1) {
			printf (center_x(get_chars(mod),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL_HEIGHT),0,1,t_text[mod]);
		}
		
		if(ZS == 2) {
			printf (center_x(get_chars(mod),OLED_FONT_SMALL_WIDTH),3,0,1,t_text[mod]);
			if(mod == 1) {
				number_to_string(Notoriousradius,find_digits(Notoriousradius), 22);
				number_to_string(Notorioussteps,find_digits(Notorioussteps), 41);
			}
			if(mod == 2) {
				number_to_string(ASSIST,find_digits(ASSIST), 20);
				number_to_string(OVAL_BIG,find_digits(OVAL_BIG), 33);
				number_to_string(OVAL_SMALL,find_digits(OVAL_SMALL), 46);
			}
			if(mod == 4) {
				number_to_string(rapid_fire_speed,find_digits(rapid_fire_speed), 25);
			}
			if(mod == 5) {
				number_to_string(DropShotSpeed,find_digits(DropShotSpeed), 25);
			}
			if(mod == 6) {
				number_to_string(ANTI_RECOIL,find_digits(ANTI_RECOIL), 25);
			}
			if(mod == 11) {
				number_to_string(in_game_menu_sens,find_digits(in_game_menu_sens), 25);
			}
			if(sel == 2)line_oled(30,20,40,20,3,1)
			if(sel == 1)line_oled(30,33,40,33,3,1)
			if(sel == 0)line_oled(30,46,40,46,3,1)
		}
		rect_oled(0,0,128,64,0,1);
		ss = TRUE;
		display = FALSE;
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |C|O|M|B|O| |S|E|C|T|I|O|N| | | | | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/ 
combo RGB {
	wait(10);
	set_rgb(COLOUR / BRIGHTNESS, COLOUR[1] / BRIGHTNESS, COLOUR[2] / BRIGHTNESS);
	COLOUR[DEC] -= 2; 
	COLOUR[INC] += 2;
	if (!COLOUR[DEC]) { 
	INC = (INC + 1) % 3; 
	DEC = (DEC + 1) % 3; }
}
combo PUMPWALL {
	set_val(FIRE,100);
	wait(52);
 	set_val(BUILD,100);
    wait(52);
    set_val(FIRE,100);
    wait(52);
    set_val(BUILD,100);
	wait(50);
	wait(30);
}
combo ChickenStrafe {
	set_val(STRAFE,100);
	wait(420);
	set_val(STRAFE,-100);
	wait(420);
}
combo AntiRecoil {
	anti_recoil = get_val(PS4_RY) + ANTI_RECOIL;
	if (anti_recoil > 100) anti_recoil = 100;
	set_val(PS4_RY, anti_recoil);
}
combo ChickenDrop {
	set_val(CROUCH,100);
	wait(random(30,100));
	wait(random(60,250));
	set_val(SPRINT,100);
}
combo BOOST {
  offset2(AIM_X, ASSIST + SIDE_BOOST);
  wait(30);
  offset2(AIM_X, (ASSIST + SIDE_BOOST) * -1);
  wait(30);
}
combo UNDER {
  offset2(AIM_X, ASSIST + UNDER_BOOST);
  wait(30);
  offset2(AIM_Y, ASSIST + UNDER_BOOST + 1);
  wait(30);
  offset2(AIM_X, (ASSIST + UNDER_BOOST) * -1);
  wait(30);
  offset2(AIM_Y, (ASSIST + UNDER_BOOST + 1) * -1);
  wait(30);
}
combo OVER {
  offset2(AIM_X, ASSIST + OVER_BOOST);
  wait(40);
  offset2(AIM_Y, ASSIST + OVER_BOOST + 1);
  wait(40);
  offset2(AIM_X, (ASSIST + OVER_BOOST) * -1);
  wait(40);
  offset2(AIM_Y, (ASSIST + OVER_BOOST + 1) * -1);
  wait(40);
}
combo WindowEditShot {
	set_val(FIRE, 100);	
	wait(90);
	set_val(FIRE, 0);
	wait(90);
	set_val(BUILD, 100);
	wait(50);
	set_val(BUILD, 0);
	wait(50);
	set_val(FIRE, 100);
	wait(50);
	set_val(FIRE, 0);
	wait(50);
	set_val(BUILD, 100);
	wait(125);
	set_val(BUILD, 0);
	wait(125);
	set_val(FIRE, 100);
	wait(100);
	wait(200);
	set_val(BUILD, 100);
	wait(100);
	set_val(BUILD, 0);
	wait(100);
}
combo RESET {
	set_val(BUILD, 100);
	wait(125)
	set_val(BUILD, 0);		
	wait(30);
	set_val(CROUCH, 100);
	wait(100);
	set_val(CROUCH, 0);
	wait(30);
	set_val(BUILD, 100);
	wait(100)
	set_val(BUILD, 0);		
	wait(30);
}
combo Double_Tact_R1 { 
	R2_block = TRUE;
	set_val(FIRE, 100);
	wait(10);
	wait(10);
	set_val(ADS, 100);
	set_val(SPRINT, 100);
	set_val(NEXT, 100);
	wait(15);
	R2_block = FALSE;
}
combo CONFIRM {
	set_val(BUILD, 100);
	wait(50);
	set_val(BUILD, 0);
	wait(100);
}
combo RAMPFLOORWALL {
	set_val(ADS, 100);
	wait(100);
	set_val(NEXT, 100);
	wait(110);
	set_val(FIRE, 100);
	wait(110);
}
combo TUNNELBOX {
	wait(20);
	set_val(BUILD, 100);
	wait(30);
	set_val(AIM_Y, 100);
	wait(30);
	set_val(FIRE, 100);
	set_val(AIM_X, 100);
	wait(430);
	set_val(AIM_Y, -60);
	wait(50);
	set_val(AIM_Y, -100);
	wait(120);
	set_val(NEXT, 100);
	wait(40);
	set_val(AIM_Y, 100);
	wait(120);
	set_val(BUILD, 100);
	wait(30);
}
combo Aim_Abuse {
	set_val(ADS, 100);
	wait(random(440, 730)); // Hold Time Between 360ms and 600ms
	set_val(ADS, 0);
	wait(random(55, 95));  //  Release Time Between 45ms and 85ms 
}
combo vibrate {     
	set_rumble(RUMBLE_A, 75);      
	wait(225);                         
	reset_rumble();                    
}
combo BLIINK {                                       
	if(Rapid_Fire) set_rgb (0,255,0); 
	else  set_rgb (255,0,0);
	wait(1000);
	set_rgb (0,0,0); 
}
combo BLIIINK {                                       
	if(DropShot) set_rgb (0,255,0); 
	else  set_rgb (255,0,0);
	wait(1000);
	set_rgb (0,0,0); 
}
combo PerfectionAccuracy {
	set_val(FIRE,100);
	wait(100);
	wait(252);
	set_val(FIRE,100);
}
combo Rapid__Fire {
	set_val(FIRE, 100);
	wait(20 * rapid_fire_speed);
	set_val(FIRE, 0);
	wait(10 * rapid_fire_speed - wait_time_correction);
	set_val(FIRE, 0); 
}
combo DroppShott {
	set_val(CROUCH,100);
	wait(40);
	wait(DropShotSpeed);
	set_val(CROUCH,100);
}
int frame;
combo niko {
	wait(20);
	image_oled(0, 10, color, TRUE, frames[frame]);
	frame ++;
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | |F |U | N | C | T | I | O | N | S | | | | | | | | | | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/
function save() {
	set_pvar(SPVAR_1,  Notorious_Polar);
	set_pvar(SPVAR_2,  fuckdPolar);
	set_pvar(SPVAR_3,  Aim__Abuse);
	set_pvar(SPVAR_4,  Rapid_Fire);
	set_pvar(SPVAR_5,  DropShot);
	set_pvar(SPVAR_6,  Anti_Recoil);
	set_pvar(SPVAR_7,  PUMP_SMG);
	set_pvar(SPVAR_8,  PUMPWALL);
	set_pvar(SPVAR_9,  ChickenMode);
	set_pvar(SPVAR_10, FAST_RESET);
	set_pvar(SPVAR_11, AimSensCorrections);
	set_pvar(SPVAR_12, EDIT_ASSIST);
	set_pvar(SPVAR_13, Ramp_Floor_Wall);
	set_pvar(SPVAR_14, QuickBox);
	set_pvar(SPVAR_15, WindoWEditShot);

	set_pvar(SPVAR_16, Notoriousradius);
	set_pvar(SPVAR_17, Notorioussteps);
	set_pvar(SPVAR_18, ASSIST);
	set_pvar(SPVAR_19, OVAL_BIG);
	set_pvar(SPVAR_20, OVAL_SMALL);
	set_pvar(SPVAR_21, rapid_fire_speed);
	set_pvar(SPVAR_22, DropShotSpeed);
	set_pvar(SPVAR_23, in_game_menu_sens);
	set_pvar(SPVAR_24, ANTI_RECOIL);
}
function load_pvar() {
	Notorious_Polar	 	 = get_pvar(SPVAR_1,  0, 1, 0);
	fuckdPolar		 = get_pvar(SPVAR_2,  0, 1, 0);
	Aim__Abuse 			 = get_pvar(SPVAR_3,  0, 1, 0);
	Rapid_Fire 			 = get_pvar(SPVAR_4,  0, 1, 0);
	DropShot 			 = get_pvar(SPVAR_5,  0, 1, 0);
	Anti_Recoil 	   	 = get_pvar(SPVAR_6,  0, 1, 0);
	PUMP_SMG 			 = get_pvar(SPVAR_7,  0, 1,	0);
	PUMPWALL 			 = get_pvar(SPVAR_8,  0, 1, 0);
	ChickenMode 		 = get_pvar(SPVAR_9,  0, 1, 0);
	FAST_RESET	 		 = get_pvar(SPVAR_10, 0, 1, 0);
	AimSensCorrections	 = get_pvar(SPVAR_11, 0, 1, 0);
	EDIT_ASSIST			 = get_pvar(SPVAR_12, 0, 1, 0);
	Ramp_Floor_Wall 	 = get_pvar(SPVAR_13, 0, 1, 0);
	QuickBox			 = get_pvar(SPVAR_14, 0, 1, 0);
	WindoWEditShot		 = get_pvar(SPVAR_15, 0, 1, 0);
	
	Notoriousradius 		 = get_pvar(SPVAR_16,    0,  50, 15); 
	Notorioussteps 		 = get_pvar(SPVAR_17,    0,  50, 15);
	ASSIST			 	 = get_pvar(SPVAR_18,    0,  50, 15); 
	OVAL_BIG			 = get_pvar(SPVAR_19,    0,  50, 13);
	OVAL_SMALL	     	 = get_pvar(SPVAR_20,    0,  50, 13);
	rapid_fire_speed	 = get_pvar(SPVAR_21,    0,  15,  2);
	DropShotSpeed     	 = get_pvar(SPVAR_22,    0, 100, 45);
	in_game_menu_sens 	 = get_pvar(SPVAR_23,    0,  20, 12);
	ANTI_RECOIL	 		 = get_pvar(SPVAR_24,    0,  50, 11);
}
function reset_script_var() {
	Notorious_Polar    	 = 0;
	fuckdPolar		 = 0;
    Aim__Abuse           = 0;
    Rapid_Fire           = 0;
    DropShot             = 0;
    Anti_Recoil          = 0;
    PUMP_SMG             = 0;
    PUMPWALL             = 0;
    ChickenMode          = 0;
    FAST_RESET 		     = 0;
    AimSensCorrections   = 0;
	EDIT_ASSIST		     = 0;
	Ramp_Floor_Wall      = 0;
	QuickBox		     = 0;
	WindoWEditShot       = 0;

	Notoriousradius 	  	 = 15;
	Notorioussteps  	  	 = 15;
	ASSIST	 			 = 15;
	OVAL_BIG			 = 13;
	OVAL_SMALL			 = 13;
	rapid_fire_speed     =  2;
	DropShotSpeed     	 = 45;
	in_game_menu_sens 	 = 12;
	ANTI_RECOIL 	  	 = 11;
}
function niko_check() {
	if(!combo_running(niko) && frame <= 15)combo_restart(niko);
}
const uint8 ASCII_NUM[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
int i;
int c,c_val;
function number_to_string(f_val, f_digits, f_pos) {
	i = 1;
	c_val = 10000;
	if (f_val < 0) {
		putc_oled(i, 45);
		i += 1;
		f_val = abs(f_val);
	}
	for (c = 5; c >= 1; c--) {
		if (f_digits >= c) {
			putc_oled(i, ASCII_NUM[f_val / c_val]);
			f_val = f_val % c_val;
			i += 1;
			if (c == 4) {
				putc_oled(i, 44);
				i += 1;
			}
		}
		c_val /= 10;
	}
    if(mod == 2) puts_oled(center_x(i - 1, OLED_FONT_SMALL_WIDTH), f_pos ,OLED_FONT_SMALL, i - 1, OLED_WHITE);
	else puts_oled(center_x(i - 1, OLED_FONT_MEDIUM_WIDTH), f_pos, OLED_FONT_MEDIUM, i - 1, OLED_WHITE);
}
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
} 
function ASSIST () {
		HOLD1 += get_rtime();
	if (get_ival(EDIT_ASSIST_BUTTON)) {
	if (HOLD1 >= DELAY1)
  		PRESS (FIRE);
  	}
}
function PRESS (BUTTON) {
	if (get_ival(BUTTON))
		return;
		set_val(BUTTON, 100);
}
function AIMASSIST() {
	angle9 = (angle9 + AA_SPEED + DIRECTION) % 360;
		if ((get_ival(AIM_X) > ASSIST) && !INVERT) {
    INVERT = TRUE;
	}
		if ((get_ival(AIM_X) < -ASSIST) && INVERT) {
	INVERT = FALSE;
    }
		if (INVERT) {
    DIRECTION = 344;
	}
		if (!INVERT) {
    DIRECTION = 0;
	}
	if (ADS_ASSIST) {
		if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X)) + abs(get_val(AIM_Y)) * abs(get_val(AIM_Y))) <= ASSIST) {
	if (get_val(ADS) && !get_val(FIRE)) {
		if (ADS_PATTERN == 1) {
    		TALL();
    }
		if (ADS_PATTERN == 2) {
    		WIDE();
	}
		if (ADS_PATTERN == 3) {
  			set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL);
	}
		if (ADS_PATTERN == 4) {
			Shake();
			}			
		}
	}
}
	if (DRIFT_ASSIST){
		if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X))) >= ASSIST) {
	if (get_val(ADS) && !get_val(FIRE)) {
		if (DRIFT_PATTERN == 1) {
			TALL_OVAL();
	}
		if (DRIFT_PATTERN == 2) {
		    WIDE_OVAL();
	}
		if (DRIFT_PATTERN == 3) {
		  	set_ellipse(POLAR_RS,angle9,OVAL_BIG,OVAL_SMALL);
	}
		if (DRIFT_PATTERN == 4){
			combo_run(BOOST);
    	}	
	}
}
		if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X))) >= ASSIST) {
	if (get_val(ADS) && !get_val(FIRE)) {
		if (DRIFT_PATTERN == 1) {
    		TALL_OVAL();
	}
		if (DRIFT_PATTERN == 2) {
		    WIDE_OVAL();
	}
		if (DRIFT_PATTERN == 3) {
			set_ellipse(POLAR_RS,angle9,OVAL_BIG,OVAL_SMALL);
	}
		if (DRIFT_PATTERN == 4){
			combo_run(BOOST);
			}	
		}
	}
}
	if (ADSFIRE_ASSIST) {
		if ((get_ival(ADS) && (get_val(FIRE)))) {
	if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X)) + abs(get_val(AIM_Y)) * abs(get_val(AIM_Y))) <= ASSIST) {
			if (ADSFIRE_PATTERN == 1) {
				TALL();
	}
			if (ADSFIRE_PATTERN == 2) {
				WIDE();
	}
			if (ADSFIRE_PATTERN == 3) {
			  	set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL);
	}
			if (ADSFIRE_PATTERN == 4) {
				combo_run(UNDER);
    }
}
	if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X)) + abs(get_val(AIM_Y)) * abs(get_val(AIM_Y))) > ASSIST) {
		if (ADSFIRE_PATTERN == 1) {
			TALL_OVAL();
	}
		if (ADSFIRE_PATTERN == 2) {
			WIDE_OVAL();
	}
		if (ADSFIRE_PATTERN == 3) {
			set_ellipse(POLAR_RS, angle9, OVAL_BIG,OVAL_SMALL);
	}
		if (ADSFIRE_PATTERN == 4) {
			combo_run(OVER);
			}	
		}
	}
}
	if (HIPFIRE_ASSIST) {
		if ((!get_ival(ADS) && (get_val(FIRE)))) {
	if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X)) + abs(get_val(AIM_Y)) * abs(get_val(AIM_Y))) <= ASSIST) {
			if (HIPFIRE_PATTERN == 1) {
    			TALL();
    }
			if (HIPFIRE_PATTERN == 2){
			    WIDE();
    }
			if (HIPFIRE_PATTERN == 3) {
  				set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL);
	}
			if (HIPFIRE_PATTERN == 4) {
				combo_run(UNDER);
    }	
}
	if (isqrt(abs(get_val(AIM_X)) * abs(get_val(AIM_X)) + abs(get_val(AIM_Y)) * abs(get_val(AIM_Y))) > ASSIST) {
		if (HIPFIRE_PATTERN == 1) {
			TALL_OVAL();
	}
		if (HIPFIRE_PATTERN == 2) {
			WIDE_OVAL();
}
		if (HIPFIRE_PATTERN == 3) {
  			set_ellipse(POLAR_RS, angle9, OVAL_BIG, OVAL_SMALL);
	}
		if (HIPFIRE_PATTERN == 4) {
			combo_run(OVER);
				}	
			}
		}
	}
}
function TALL() {
    angle2 = (angle2 + AA_SPEED + DIRECTION) % 360;
	set_polar(POLAR_RS,angle2,OVAL_SMALL * 327);
    xaa = get_val(POLAR_RX);
	set_polar(POLAR_RS,angle2,OVAL_BIG * 327);
    yaa = get_val(POLAR_RY);
	set_val(POLAR_RX, get_ival(POLAR_RX));
    set_val(POLAR_RY, get_ival(POLAR_RY));
	set_val(POLAR_RY, yaa);
    set_val(POLAR_RX, xaa);
}
function WIDE() {
    angle2 = (angle2 + AA_SPEED + DIRECTION) % 360;
    set_polar(POLAR_RS,angle2,OVAL_BIG * 327);
    xaa = get_val(POLAR_RX);
	set_polar(POLAR_RS,angle2,OVAL_SMALL * 327);
    yaa = get_val(POLAR_RY);
	set_val(POLAR_RX,get_ival(POLAR_RX));
    set_val(POLAR_RY,get_ival(POLAR_RY));
	set_val(POLAR_RY, yaa);
    set_val(POLAR_RX, xaa);
}
function TALL_OVAL() {
	ANGLE = (ANGLE + STEPSS + DIRECTION) % 360;
    f_set_polar(2,ANGLE, OVAL_SMALL);
	xaa = get_val(AIM_X);
	f_set_polar(2, ANGLE, OVAL_BIG);
	yaa = get_val(AIM_Y);
	set_val(AIM_X, get_ival(AIM_X));
	set_val(AIM_Y, get_ival(AIM_Y));
	set_val(AIM_Y, yaa);
	set_val(AIM_X, xaa);
}
function WIDE_OVAL() {
    ANGLE = (ANGLE + STEPSS + DIRECTION) % 360;
    f_set_polar(2,ANGLE, OVAL_BIG);
	xaa = get_val(AIM_X);
	f_set_polar(2, ANGLE, OVAL_SMALL);
	yaa = get_val(AIM_Y);
	set_val(AIM_X, get_ival(AIM_X));
	set_val(AIM_Y, get_ival(AIM_Y));
	set_val(AIM_Y, yaa);
	set_val(AIM_X, xaa);
}
function Shake() { 
	angle2 = (angle2 + AA_SPEED + DIRECTION) % 360;
    set_polar(POLAR_RS,angle2, ASSIST * 327);
  	xaa = get_val(POLAR_RX);
  	yaa = get_val(POLAR_RY);
	set_val(POLAR_RX, get_ival(POLAR_RX));
  	set_val(POLAR_RY, get_ival(POLAR_RY));
	set_val(POLAR_RX, xaa);
  	set_val(POLAR_RY, yaa);
}
function set_ellipse(stick,angle9,width,height) {
	Set_polar(stick, angle9, width);
  	xx9[stick/4] = get_val(stick + 7);
  	Set_polar(stick, angle9, height);
  	y9[stick/4] = get_val(stick + 8);
  	set_val(stick + 7,offset3(stick + 7, xx9[stick / 4]));
  	set_val(stick + 8,offset3(stick + 8, y9[stick / 4]));
}
function Set_polar(stick,angle9,radius) {
  	set_val(7 + stick, (cos(angle9) * radius) / 100);
  	set_val(8 + stick, (sin(angle9) * radius) / 100);
  		return;
}
function f_set_polar(stick, angle, radius) {
  	offset2(7 + stick, f_clamp((f_cos(angle) * radius) / 100,-100, 100));
  	offset2(8 + stick, f_clamp((f_sin(angle) * radius) / 100,-100, 100));
  		return;
}
function f_min(a,b) { 
  if(a <= b) 
  return a; return b; 
}
function f_max(a,b) { 
  if(a >= b) 
  return a; return b;
}
function f_clamp(v, lo, hi) { 
  return f_min(hi, f_max(v, lo)); 
}
function cos (angle9) {
	if (angle9 < 0) 
		angle9 = (angle9 % 360) + 360;
		angle9 = (angle9 % 360);
		x_Out9 = 100;
		y_Out9 = 100;
		angle_Out9 = angle9 % 45;
	if (angle9 < 45) {
		y_Out9 = (100 * angle_Out9) / 45; 
	}
		else if (angle9 < 90)  { 
		x_Out9 = (100 * (45 - angle_Out9)) / 45; 
	}
			else if (angle9 < 135) { 
		x_Out9 = (-100 * angle_Out9) / 45; 
	}
			else if (angle9 < 180) {
		y_Out9 = (100 * (45 - angle_Out9)) / 45; x_Out9 = -100; 
	}
			else if (angle9 < 225) {
		y_Out9 = (100 * angle_Out9) / 45; x_Out9 = -100; 
	}
			else if (angle9 < 270) { 
		x_Out9 = (-100 * (45 - angle_Out9)) / 45; y_Out9 = -100; 
	}
			else if (angle9 < 315) { 
		x_Out9 = (100 * angle_Out9) / 45; y_Out9 = -100; 
	}
			else { y_Out9 = ( 100 * (45 - angle_Out9)) / 45; 
	}
		angle_Out9 = abs(y_Out9);
	if (abs(x_Out9) > angle_Out9) 
		angle_Out9 = abs(x_Out9);
			
			return (x_Out9 * angle_Out9 / isqrt((pow(x_Out9, 2) + pow(y_Out9,2))));
}
function f_cos(angle) {
	if (angle < 0) angle = (angle % 360) + 360;
		angle = (angle % 360);
		x_Out = 100;
		y_Out = 100;
		angle_Out = angle % 45;
	if (angle < 45) { 
		y_Out = (100 * angle_Out) / 45; 
	}
			else if (angle < 90)  { 
		x_Out = (100 * (45 - angle_Out)) / 45; 
	}
			else if (angle < 135) { 
		x_Out = (-100 * angle_Out) / 45; 
	}
			else if (angle < 180) { 
		y_Out = (100 * (45 - angle_Out)) / 45; x_Out = -100; 
	}
			else if (angle < 225) { 
		y_Out = (100 * angle_Out) / 45; x_Out = -100; 
	}
			else if (angle < 270) { 
		x_Out = (-100 * (45 - angle_Out)) / 45; y_Out = -100; 
	}
			else if (angle < 315) { 
		x_Out = (100 * angle_Out) / 45; y_Out = -100; 
			} else {
		y_Out = ( 100 * (45 - angle_Out)) / 45; 
	}
		angle_Out = abs(y_Out);
	if (abs(x_Out) > angle_Out) angle_Out = abs(x_Out);
		
		return (x_Out * angle_Out / isqrt((pow(x_Out, 2) + pow(y_Out, 2))));
}
function offset2(axis,offset_val) {
      set_val(axis,clamp13(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100, 100));
    return;
}
function offset3(axis, offset_val) { 
	return clamp13(offset_val * (100 - abs(get_ival(axis))) / 100 + get_ival(axis),-100, 100); 
}
function clamp13(v, lo, hi) { 
	if(v < lo) 
		return lo; 
	if(v > hi) 
		return hi; 
	return v; 
}
function f_sin(angle) { 
	return (f_cos(angle - 90)); 
}
function sin (angle9) { 
	return (cos(angle9 - 90)); 
}
define yy  = 2;
int x1 = 60,x2 = 68,x3 = 76,x4 = 84,x5 = 92,x6 = 100,x7 = 108,x8 = 116,x9 = 124,x10 = 132,x11 = 140,x12 = 148,x13 = 156,x14 = 164,x15 = 172,x16 = 180,x17 = 188,x18 = 196,x19 = 204,x20 = 212,x21 = 220,x22 = 228,x23 = 236,x24 = 244,x25 = 252,x26 = 260,x27 = 268,x28 = 276;

function text1() {
	putc_oled(1,ASCII_UPPER_F);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_B);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_Y);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_N);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x17,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x18,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x19,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_U);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x21,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x22,yy,0,1,1);
	
	fall();
}

function text2() {
	putc_oled(1,ASCII_UPPER_P);
	puts_oled(x1,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_R);
	puts_oled(x2,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x3,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x4,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_S);
	puts_oled(x5,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x6,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_X);
	puts_oled(x7,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x8,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x9,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x10,yy,0,1,1);
	putc_oled(1,ASCII_SPACE);
	puts_oled(x11,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x12,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x13,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x14,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_G);
	puts_oled(x15,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_L);
	puts_oled(x16,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x17,yy,0,1,1);

	putc_oled(1,ASCII_SPACE);
	puts_oled(x18,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x20,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_O);
	puts_oled(x21,yy,0,1,1);
	
	putc_oled(1,ASCII_SPACE);
	puts_oled(x22,yy,0,1,1);
	
	putc_oled(1,ASCII_UPPER_E);
	puts_oled(x23,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_D);
	puts_oled(x24,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_I);
	puts_oled(x25,yy,0,1,1);
	putc_oled(1,ASCII_UPPER_T);
	puts_oled(x26,yy,0,1,1);

	rect_oled(x19 - 4,yy,9,9,0,1)
	rect_oled(x19 - 3,yy + 1,7,7,0,0)
	rect_oled(x19 + 5,yy,1,9,1,0)
	fall();
}

function fall() {
	x1--;x2--;x3--;x4--;x5--;x6--;x7--;x8--;x9--;x10--;
	x11--;x12--;x13--;x14--;x15--;x16--;x17--;x18--;x19--;x20--;
	x21--;x22--;x23--;x24--;x25--;x26--;x27--;x28--;
}
function block_all_outputs() {
	set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 );    set_val(PS4_SQUARE, 0 );
}
function center_x(f_chars,f_font) {
      return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function center_y(f_size) {
    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 
function get_chars(x) {
      if (t_text[x + 1] != -1) return t_text[x + 1] - t_text[x] - 1;
      return sizeof(t_text) - t_text[x];
}
const image frames[] = { {124, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF, 0xC7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x3F, 0xFF, 0xFF, 0xE0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xF1, 0xFF, 0xFF, 0xFC, 0x78, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3F, 0xFF, 0xFF, 0xF0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0xFF, 0xFF, 0xF8, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0xCF, 0x98, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x1F, 0xE0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x07, 0x87, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0xE0, 0x3C, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1C, 0x01, 0xE0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8F, 0xC0, 0x1F, 0xCF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC7, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE3, 0xFF, 0xFF, 0xFE, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3F, 0xFF, 0xFF, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0F, 0xFF, 0xFF, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xFF, 0xFF, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0E, 0x65, 0x11, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x40, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE1, 0x9B, 0xCE, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1F, 0xFF, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xFF, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xE7, 0xFC, 0x3F, 0xF3, 0xFE, 0x1F, 0xFC, 0x7F, 0xF3, 0xFE, 0x1E, 0x1E, 0x7F, 0xF0, 0x3F, 0x3C, 0xFF, 0xE7, 0xFE, 0xFF, 0xF3, 0xFF, 0xCF, 0xFE, 0xFF, 0xF3, 0xC1, 0xEF, 0xFE, 0x03, 0xF3, 0xDE, 0x1F, 0x0F, 0x1F, 0x0F, 0x3C, 0x3C, 0x1E, 0x1F, 0x0F, 0x3C, 0x1E, 0xF0, 0x00, 0x7F, 0xFB, 0xC0, 0xF1, 0xE1, 0xE0, 0xF3, 0xFF, 0xC1, 0xE1, 0xE0, 0xF3, 0xC3, 0xCF, 0xF8, 0x07, 0xFF, 0xBC, 0x1E, 0x1E, 0x1C, 0x0F, 0x7F, 0xF8, 0x1E, 0x1C, 0x0F, 0x78, 0x3C, 0xFF, 0xC0, 0xF7, 0xFB, 0xC1, 0xE3, 0xC3, 0xE1, 0xF7, 0xFC, 0x03, 0xC3, 0xE1, 0xF7, 0x87, 0x83, 0xFC, 0x0F, 0x3F, 0x3E, 0x7C, 0x3C, 0x1F, 0x3E, 0xF3, 0xC0, 0x3C, 0x1F, 0x3E, 0x7C, 0xF8, 0x03, 0xC0, 0xF3, 0xF3, 0xFF, 0x83, 0xC1, 0xFF, 0xCF, 0x1E, 0x3F, 0xF9, 0xFF, 0xC7, 0xFF, 0x3F, 0xFC, 0x1E, 0x3E, 0x1F, 0xF0, 0x78, 0x0F, 0xF1, 0xE0, 0xFF, 0xFF, 0x0F, 0xF0, 0x3F, 0xE3, 0xFF, 0x80
} }
function ssaver(){
	line_oled(0,13,127,13,1,1)
	rect_oled(0,0,15,14,1,0)
	rect_oled(0,0,15,14,0,1)
	if(c_b < 1000) {
    	putc_oled(1,ASCII_DIGIT9);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 1000) {
    	putc_oled(1,ASCII_DIGIT8);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 2000) {
    	putc_oled(1,ASCII_DIGIT7);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 3000) {
    	putc_oled(1,ASCII_DIGIT6);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 4000) {
    	putc_oled(1,ASCII_DIGIT5);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 5000) {
    	putc_oled(1,ASCII_DIGIT4);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 6000) {
    	putc_oled(1,ASCII_DIGIT3);
		puts_oled(4,3,0,1,1);
	}
	if(c_b > 7000) {
    	putc_oled(1,ASCII_DIGIT2);
		puts_oled(4,3,0,1,1);
	}
	if(c_b >= 8000) {
    	putc_oled(1,ASCII_DIGIT1);
		puts_oled(4,3,0,1,1);
	}
}
/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | | | | | | | | | | | | | | | E | N | D | | | | | | | | | |S | S| _ | | | | | | | | | |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+*/