
/*
=============================================================================================================================
  Instructions - Please Read                                                                                            
=============================================================================================================================
        /*------------------------------- INSTRUCTIONS PLEASE READ ------------------------------------------
        =====================================================================================================
        Enter Mod Menu                        = hold ADS & press PS4_OPTIONS  
        -----------------------------------------------------------------------------------------------------
        Scroll between MODs  Go back          = PS4_UP 
        -----------------------------------------------------------------------------------------------------
        Scroll between MODs  Go forward       = PS4_DOWN 
        -----------------------------------------------------------------------------------------------------
        Scroll between Options Go back        = PS4_RIGHT 
        -----------------------------------------------------------------------------------------------------
        Scroll between Options Go forward     = PS4_LEFT 
        -----------------------------------------------------------------------------------------------------
        Exit Menu                             = PS4_CIRCLE 
        -----------------------------------------------------------------------------------------------------
        Enter Edit Menu To Change Values      = PS4_CROSS 
        -----------------------------------------------------------------------------------------------------
        Exit Edit Menu To Mod Menu            = PS4_CIRCLE
        -----------------------------------------------------------------------------------------------------
        Edit Menu - change values by 1        = hold ADS & press LEFT(decrease by 1)/RIGHT(increase by 1)
        -----------------------------------------------------------------------------------------------------
        Edit Menu - change values by 10       = hold ADS & press DOWN(decrease by 10)/UP(increase by 10)
        -----------------------------------------------------------------------------------------------------
        ====================================================================================================*/
//===============================================================
//    BUTTON LAYOUT                                              
//===============================================================
define FIRE_BTN             = PS4_R2;
define ADS_BTN              = PS4_L2;
define SPRINT_BTN           = PS4_L3;
define PRONE_BTN            = PS4_CIRCLE;
define JUMP_BTN             = PS4_CROSS;
define SWITCHWEAPON_BTN     = PS4_TRIANGLE;
define RELOAD_BTN           = PS4_SQUARE;
define MELEE_BTN            = PS4_R3;
define TACTICAL_BTN         = PS4_L1;
define GRANADE_BTN          = PS4_R1;
define UP                   = PS4_UP;
define RIGHT                = PS4_RIGHT;
define DOWN                 = PS4_DOWN;
define LEFT                 = PS4_LEFT;
define RX                   = PS4_RX;
define RY                   = PS4_RY;
define LX                   = PS4_LX;
define LY                   = PS4_LY;
//===============================================================
//    ADJUSTABLE VARIABLES                                       
//===============================================================
// Index to find Value Name string - switchable in game with left/right in ModEdit
    int adjust_variable_idx;                  
int RF_hold;
int RF_release;
int dynamicF_hold;
int dynamicF_rest;
int smartF_hold;
int smartF_rest;
int burstF_hold;
int burstF_rest;
int AimAssistTime;
int AimAssistSize;
int AR_Primary_V = 25;
int AR_Primary_H = 0;
int AR_Second_V = 15;
int AR_Second_H = 0;
int polar_aasist_radius;
int polar_aasist_steps;
int HeadStep;
int HeadMax;
//---Adjustable Variables Count                          
define AMOUNT_OF_VALNAME_IDX = 17; 
//===============================================================
//    MODS TOGGLE VARIABLES                                      
//===============================================================
// Number of MODS -----------------------------------------------
define MAX_MODS_COUNT = 13;                          
// Index to find Mod Toggle Variable 
int modName_idx;  
//  MODS Toggles ------------------------------------------------
  int rapidfire_onoff = 0 ; 
  int dynamic_fire_onoff = 0 ; 
  int smart_fire_onoff = 0 ; 
  int burst_fire_onoff = 0 ; 
  int ToggleBattsStickyAim = 0 ; 
  int auto_heal_on_off = 0 ; 
  int fast_reload_on_off = 0 ; 
  int holster_weapon_on_off = 0 ; 
  int easy_batery_on_off = 0 ; 
  int USE_HAIR_TRIGGER = 0 ; 
  int rumble_onoff = 0 ; 
  int AR_Prim_Sec_onoff = 1 ; 
  int polar_aim_assist_onoff = 1 ; 
  int Head_Assist_onoff = 1 ; 
//===============================================================
//    MODS TEXT TO DISPLAY                                       
//===============================================================
// Mod Name      -   Text to Display
  const string RAPIDFIRE            = "Rapid Fire" ; 
  const string DYNAMICFIRE          = "Dynamc Fire" ; 
  const string SMARTFIRE            = "Smart Fire" ; 
  const string BURSTFIRE            = "Burst Fire" ; 
  const string BATTSSTICKYAIM       = "Sticky Aim3" ; 
  const string APEXAUTOHEAL         = "Auto Heal" ; 
  const string APEXFASTRELOAD       = "Fast Reload" ; 
  const string APEXHOLSTERWEAP      = "Holster W" ; 
  const string EASYBATERY           = "Easy Batery" ; 
  const string HAIRTRIGGERS         = "Hair Trigg" ; 
  const string RUMBLESONOFF         = "Rumbles" ; 
  const string AR_PRIM_SECOND       = "AR Profiles" ; 
  const string POLARAIMASSIST_TD    = "TD Polar AA" ; 
  const string MOD67_2_VARIABLES    = "Head Assist" ; 
// Mod VALUES      -   Text to Display
const string RAPIDFIRE_HOLD         = "RF Hold";
const string RAPIDFIRE_RELEASE      = "RF Release" ;
const string DYNAMICFIRE_HOLD       = "DynF Hold";
const string DYNAMICFIRE_RELEASE    = "DynF Rest" ;
const string SMARTFIRE_HOLD       = "Smart Hold";
const string SMARTFIRE_RELEASE    = "Smart Rest" ;
const string BURSTFIRE_HOLD       = "Burst Hold";
const string BURSTFIRE_RELEASE    = "Burst Rest" ;
const string AIMASSIST_TIME         = "AA Time";
const string AIMASSISTSIZE      = "AA Size" ;
const string AR_PRIMARY_V           = "AR Prim V" ;
const string AR_PRIMARY_H           = "AR Prim H" ;
const string AR_SECOND_VERTICAL     = "AR Second V" ;
const string AR_SECOND_HORIZONTAL   = "AR Secon H" ;
const string POLAR_ASSIST_RADIUS    = "PA Radius" ;
const string POLAR_ASSIST_STEPS     = "PA Steps" ;
const string EDITVAR_1_MOD67      = "Head Step";
const string EDITVAR_2_MOD67      = "Head Max" ;
//===============================================================
//    TITLE STRING                                               
//===============================================================
const string TITLE = "WARZONE $"; // 11 char max 
const string OFF   = "OFF";    
const string ON    = "ON";   
const string SCRIPT_ONOFF  = "SCRIPT WAS";   
// Constant bytes - Convert numbers array - ASCII_NUM[column number] 
const int8 ASCII_NUM[] =                          
//      0  1  2  3  4  5  6  7  8  9  (column numbers)
      {48,49,50,51,52,53,54,55,56,57};                
                                                   
const string NO_EDIT_VAR1  = "No Edit Variables";//  17 
const string NO_EDIT_VAR2  = "for this MOD";// 12       
const uint8 Options [] = {
  9 , // RAPIDFIRE # 1
  9 , // DYNAMICFIRE # 2
  9 , // SMARTFIRE # 3
  9 , // BURSTFIRE # 4
  1 , // BATTSSTICKYAIM # 5
  1 , // APEXAUTOHEAL # 6
  1 , // APEXFASTRELOAD # 7
  1 , // APEXHOLSTERWEAP # 8
  1 , // EASYBATERY # 9
  1 , // HAIRTRIGGERS # 10
  1 , // RUMBLESONOFF # 11
  24 , // AR_PRIM_SECOND # 12
  30 , // POLARAIMASSIST_TD # 13
  67 // MOD67_2_VARIABLES # 14
};
const uint8 EditVal [] = {
  1 , // RAPIDFIRE # 1
  3 , // DYNAMICFIRE # 2
  3 , // SMARTFIRE # 3
  3 , // BURSTFIRE # 4
  1 , // BATTSSTICKYAIM # 5
  0 , // APEXAUTOHEAL # 6
  0 , // APEXFASTRELOAD # 7
  0 , // APEXHOLSTERWEAP # 8
  0 , // EASYBATERY # 9
  0 , // HAIRTRIGGERS # 10
  0 , // RUMBLESONOFF # 11
  1 , // AR_PRIM_SECOND # 12
  1 , // POLARAIMASSIST_TD # 13
  1 // MOD67_2_VARIABLES # 14
};
const uint8 OptRange [][] = {
  { 0 , 1 }, // RAPIDFIRE # 1
  { 2 , 3 }, // DYNAMICFIRE # 2
  { 4 , 5 }, // SMARTFIRE # 3
  { 6 , 7 }, // BURSTFIRE # 4
  { 8 , 9 }, // BATTSSTICKYAIM # 5
  { 0 , 0 }, // APEXAUTOHEAL # 6
  { 0 , 0 }, // APEXFASTRELOAD # 7
  { 0 , 0 }, // APEXHOLSTERWEAP # 8
  { 0 , 0 }, // EASYBATERY # 9
  { 0 , 0 }, // HAIRTRIGGERS # 10
  { 0 , 0 }, // RUMBLESONOFF # 11
  { 10 , 13 }, // AR_PRIM_SECOND # 12
  { 14 , 15 }, // POLARAIMASSIST_TD # 13
  { 16 , 17 }  // MOD67_2_VARIABLES # 14
};
const uint8 Min_Max_Options [][]={ 
  { 0 , 3 }, // RAPIDFIRE # 1
  { 0 , 3 }, // DYNAMICFIRE # 2
  { 0 , 3 }, // SMARTFIRE # 3
  { 0 , 3 }, // BURSTFIRE # 4
  { 0 , 1 }, // BATTSSTICKYAIM # 5
  { 0 , 1 }, // APEXAUTOHEAL # 6
  { 0 , 1 }, // APEXFASTRELOAD # 7
  { 0 , 1 }, // APEXHOLSTERWEAP # 8
  { 0 , 1 }, // EASYBATERY # 9
  { 0 , 1 }, // HAIRTRIGGERS # 10
  { 0 , 1 }, // RUMBLESONOFF # 11
  { 0 , 2 }, // AR_PRIM_SECOND # 12
  { 0 , 5 }, // POLARAIMASSIST_TD # 13
  { 0 , 2 }  // MOD67_2_VARIABLES # 14
}; 
       
const string EditVarStr []={ 
"RF Hold", // 1
"RF Release", // 2
"DynF Hold", // 3
"DynF Rest", // 4
"Smart Hold", // 5
"Smart Rest", // 6
"Burst Hold", // 7
"Burst Rest", // 8
"AA Time", // 9
"AA Size", // 10
"AR Prim V", // 11
"AR Prim H", // 12
"AR Second V", // 13
"AR Secon H", // 14
"PA Radius", // 15
"PA Steps", // 16
"Head Step", // 17
"Head Max"  // 18
};
/////////////////////////////////////////////////////////////////////////////  
define TimeToShowIntroPicture = 10;
/////////////////////////////////////////////////////////////////////////////  
///   INITIALIZATION BLOCK                                                      
/////////////////////////////////////////////////////////////////////////////   
init {  
rapidfire_onoff              = get_pvar(SPVAR_1,1,3,0); 
dynamic_fire_onoff           = get_pvar(SPVAR_2,1,3,0); 
smart_fire_onoff             = get_pvar(SPVAR_3,1,3,0); 
burst_fire_onoff             = get_pvar(SPVAR_4,1,3,0); 
ToggleBattsStickyAim         = get_pvar(SPVAR_5,0,1,0); 
auto_heal_on_off             = get_pvar(SPVAR_6,0,1,0); 
fast_reload_on_off           = get_pvar(SPVAR_7,0,1,0); 
holster_weapon_on_off        = get_pvar(SPVAR_8,0,1,0); 
easy_batery_on_off           = get_pvar(SPVAR_9,0,1,0); 
USE_HAIR_TRIGGER             = get_pvar(SPVAR_10,0,1,0); 
rumble_onoff                 = get_pvar(SPVAR_11,0,1,0); 
AR_Prim_Sec_onoff            = get_pvar(SPVAR_12,1,2,1); 
polar_aim_assist_onoff       = get_pvar(SPVAR_13,1,5,1); 
Head_Assist_onoff            = get_pvar(SPVAR_14,1,2,1); 
RF_hold                  = get_pvar(SPVAR_15, 1,1000, 20);
RF_release               = get_pvar(SPVAR_16, 1,1000, 30);
dynamicF_hold            = get_pvar(SPVAR_17, 30, 60, 40);
dynamicF_rest            = get_pvar(SPVAR_18, 30, 70, 33);
smartF_hold              = get_pvar(SPVAR_19, 30, 60, 40);
smartF_rest              = get_pvar(SPVAR_20, 100, 800, 350);
burstF_hold              = get_pvar(SPVAR_21, 100, 800, 510);
burstF_rest              = get_pvar(SPVAR_22, 100, 800, 350);
AimAssistTime            = get_pvar(SPVAR_23, 1,100, 20);
AimAssistSize            = get_pvar(SPVAR_24, 1,100, 15);
AR_Primary_V              = get_pvar(SPVAR_25, 1,99, 25);
AR_Primary_H              = get_pvar(SPVAR_26,-99,99, 0);
AR_Second_V               = get_pvar(SPVAR_27, 1,99, 15);
AR_Second_H               = get_pvar(SPVAR_28,-99,99, 0);
polar_aasist_radius       = get_pvar(SPVAR_29, 1,30, 15);
polar_aasist_steps        = get_pvar(SPVAR_30,1,30, 15);
HeadStep                 = get_pvar(SPVAR_31, 1,100,2 );
HeadMax                  = get_pvar(SPVAR_32, 1,100,30);
}// end of init block
///////////////////////////////////////////////////////////////////////////// 
///   MAIN BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
main {//---------------------------------
                                  
   /////////////////////////////////////////
 if(get_ival(ADS_BTN)){
     if(event_press(PS4_SHARE)){
         EntireScript_OnOff    = !EntireScript_OnOff;
         blinck(EntireScript_OnOff);
         cls_oled(0);
         draw_rectangle();
         //display_mod(f_idx, f_string, mod_name, f_toggle, f_option)
         display_mod( center_x(sizeof(SCRIPT_ONOFF)- 1, OLED_FONT_MEDIUM_WIDTH) ,SCRIPT_ONOFF [0],EntireScript_OnOff ,1);
         show_mesage_time = 2000;
 		 //--- Set Virtual Machine Speed to Default if script is OFF    
 		 if(!EntireScript_OnOff) set_Virtual_Machine_Speed(VM_Default); 
     }
 }
                          
 if(show_mesage_time){
     show_mesage_time -= get_rtime();
     if(show_mesage_time <= 0) {
         cls_oled(0);    
     }
 }
                               
//============================================================
// KILL SWITCH FOR ENTIRE SCRIPT
//============================================================
 if(EntireScript_OnOff){
  //--- Set Virtual Machine Speed to Default for MENU                     
	if(ModEdit || ModMenu) set_Virtual_Machine_Speed(VM_Default);
    if(display_EDIT){                
    	  // Clear OLED screen         
        cls_oled(0);                        
       // display_edit(f_idx, f_string, f_print, f_val) 
		if(EditVal[ modName_idx ] == 0 ){  
			  //--- print label                
		    line_oled(1,45,127,45,1,0);    
		    print( center_x( 17, OLED_FONT_SMALL_WIDTH ), 20, OLED_FONT_SMALL, 1, NO_EDIT_VAR1[0] ); 
		    print( center_x( 12, OLED_FONT_SMALL_WIDTH ), 33, OLED_FONT_SMALL, 1, NO_EDIT_VAR2[0] ); 
		}                                                                                            
		else {//----  ELSE BEGIN --------------  
          display_edit( adjust_variable_idx [adjust_variable_idx + 1]);
          adjust_variable_idx [adjust_variable_idx + 1] = edit_val(adjust_variable_idx [adjust_variable_idx + 1] );
		}//--- ELSE END   ----------- 
   }//  end of display edit  
    if(refresh_OLED)
    { 
        // Clear OLED screen 
        cls_oled(0);       
                           
        // Draw Rectangle 
        draw_rectangle(); 
        // Display Mod Name and togle status  : ON/OFF   
        if(modName_idx == 0)display_mod( center_x(sizeof(RAPIDFIRE)- 1, OLED_FONT_MEDIUM_WIDTH) ,RAPIDFIRE[0],rapidfire_onoff,Options[ modName_idx ]);
        if(modName_idx == 1)display_mod( center_x(sizeof(DYNAMICFIRE)- 1, OLED_FONT_MEDIUM_WIDTH) ,DYNAMICFIRE[0],dynamic_fire_onoff,Options[ modName_idx ]);
        if(modName_idx == 2)display_mod( center_x(sizeof(SMARTFIRE)- 1, OLED_FONT_MEDIUM_WIDTH) ,SMARTFIRE[0],smart_fire_onoff,Options[ modName_idx ]);
        if(modName_idx == 3)display_mod( center_x(sizeof(BURSTFIRE)- 1, OLED_FONT_MEDIUM_WIDTH) ,BURSTFIRE[0],burst_fire_onoff,Options[ modName_idx ]);
        if(modName_idx == 4)display_mod( center_x(sizeof(BATTSSTICKYAIM)- 1, OLED_FONT_MEDIUM_WIDTH) ,BATTSSTICKYAIM[0],ToggleBattsStickyAim,Options[ modName_idx ]);
        if(modName_idx == 5)display_mod( center_x(sizeof(APEXAUTOHEAL)- 1, OLED_FONT_MEDIUM_WIDTH) ,APEXAUTOHEAL[0],auto_heal_on_off,Options[ modName_idx ]);
        if(modName_idx == 6)display_mod( center_x(sizeof(APEXFASTRELOAD)- 1, OLED_FONT_MEDIUM_WIDTH) ,APEXFASTRELOAD[0],fast_reload_on_off,Options[ modName_idx ]);
        if(modName_idx == 7)display_mod( center_x(sizeof(APEXHOLSTERWEAP)- 1, OLED_FONT_MEDIUM_WIDTH) ,APEXHOLSTERWEAP[0],holster_weapon_on_off,Options[ modName_idx ]);
        if(modName_idx == 8)display_mod( center_x(sizeof(EASYBATERY)- 1, OLED_FONT_MEDIUM_WIDTH) ,EASYBATERY[0],easy_batery_on_off,Options[ modName_idx ]);
        if(modName_idx == 9)display_mod( center_x(sizeof(HAIRTRIGGERS)- 1, OLED_FONT_MEDIUM_WIDTH) ,HAIRTRIGGERS[0],USE_HAIR_TRIGGER,Options[ modName_idx ]);
        if(modName_idx == 10)display_mod( center_x(sizeof(RUMBLESONOFF)- 1, OLED_FONT_MEDIUM_WIDTH) ,RUMBLESONOFF[0],rumble_onoff,Options[ modName_idx ]);
        if(modName_idx == 11)display_mod( center_x(sizeof(AR_PRIM_SECOND)- 1, OLED_FONT_MEDIUM_WIDTH) ,AR_PRIM_SECOND[0],AR_Prim_Sec_onoff,Options[ modName_idx ]);
        if(modName_idx == 12)display_mod( center_x(sizeof(POLARAIMASSIST_TD)- 1, OLED_FONT_MEDIUM_WIDTH) ,POLARAIMASSIST_TD[0],polar_aim_assist_onoff,Options[ modName_idx ]);
        if(modName_idx == 13)display_mod( center_x(sizeof(MOD67_2_VARIABLES)- 1, OLED_FONT_MEDIUM_WIDTH) ,MOD67_2_VARIABLES[0],Head_Assist_onoff,Options[ modName_idx ]);
              
         refresh_OLED = FALSE; 
    } 
    if(display_title){           
          // clear OLED screen    
    	    cls_oled(0);            
    	    // Display Script Title      
          DrawLogo(0, 0, 0);
           // screen saver          
	         ModMenu = FALSE;   
           display_title = FALSE;  
           display_black = TRUE;
                                   
    }                            
      
    //-----------------------------
    // Screen saver (OLED off)   
    if(display_black )         
    {                            
        count_black += get_rtime();
        if(count_black >= TimeToShowIntroPicture)   
        {                        
            cls_oled(0);         
            count_black = 0;      
            display_black = FALSE; 
        }                         
    }                           
                                
   /////////////////////////////////////////////////////////
   // MENU EDIT VALUES             
   if(ModEdit){ 
        block_all_inputs(); 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        } 
       //--- Exit from EDIT MENU  
       if(event_release(PS4_CIRCLE)){
             ModEdit      = FALSE;           
             display_EDIT = FALSE;           
             ModMenu      = TRUE;            
             refresh_OLED = TRUE;   // display MODS 
       }                    
        ////////////////////////////////////////////////////////////////////////////////  
        //  GO FORWARD                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_DOWN)){            
                                          
        	   adjust_variable_idx ++;                 
        	   if(adjust_variable_idx > OptRange[ modName_idx ][ 1 ])  adjust_variable_idx = OptRange[ modName_idx ][ 1 ]; 
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }          
        ///////////////////////////////////////////////////////////////////////////////  
        //  GO BACK                                                                      
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	   adjust_variable_idx --;                                      
        	   if(adjust_variable_idx < OptRange[ modName_idx ][ 0 ]) adjust_variable_idx = OptRange[ modName_idx ][ 0 ];
             refresh_OLED = FALSE;      
             display_EDIT = TRUE;        
        }                                                           
            /////////////////////////////////////////////////////// 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        }
   }// end of EDIT MENU    
   /////////////////////////////////////////////////////////
   // EDIT MENU ON/OFF            
   if(get_ival(ADS_BTN) && event_press(PS4_OPTIONS)){  
        ModMenu = TRUE;  
        // toggle EditMenu ON/OFF                      
                 modName_idx  = 0;                   
                 refresh_OLED = TRUE;   // display Title    
                 display_EDIT = FALSE;        
                 MenuTimeOut  = menu_time_active;
   }      
   /////////////////////////////////////////////////////////
   // MENU SYSTEM              
   if(ModMenu){  
        block_all_inputs(); 
      //--- Exit from MENU  
      if(event_press(PS4_CIRCLE)){
          ModMenu = FALSE;                     
          ModEdit = FALSE;              
          combo_run(MESSAGE);             
      }                    
      //--- Enter in EDIT MENU 
      if(event_press(PS4_CROSS)){
          ModMenu             = FALSE;   
          adjust_variable_idx = OptRange[ modName_idx ][ 0 ]; 
          ModEdit             = TRUE;   
          display_EDIT        = TRUE; 
      }                    
                                  
        //Display MOD NAME and togle status 
        // Switch MODs                     
        if( !get_ival(ADS_BTN) && event_press(PS4_DOWN)){ 
                                          
        	   modName_idx ++;                 
        	   if(modName_idx > MAX_MODS_COUNT) modName_idx = 0; 
             //////////////////////////////////////
        	   blinck( modName_idx[modName_idx + 1]); 
             //////////////////////////////////////
        }                          
        if(!get_ival(ADS_BTN) && event_press(PS4_UP)){  
                                                               
        	  modName_idx --;                                      
        	  if(modName_idx < 0) modName_idx = MAX_MODS_COUNT;
             //////////////////////////////////////
        	   blinck( modName_idx[modName_idx + 1]); 
             //////////////////////////////////////
          }                        
        	//////////////////////////
                                  
                                  
        // screen saver           
        display_black = FALSE;    
        display_title = FALSE;    
        //////////////////////////////  
        // display mod name and Toggle ON/OFF | Scroll Options 
        if(!get_ival(ADS_BTN) ){    
             if(event_press(PS4_RIGHT)){ //   go back
                 modName_idx[modName_idx + 1] = f_go_back( modName_idx[modName_idx + 1] ); 
             }// go back 
             if(event_press(PS4_LEFT)){//   go forward
                 modName_idx[modName_idx + 1] = f_go_forward( modName_idx[modName_idx + 1] );
             }// go forward 
       } 
        refresh_OLED = TRUE;   
        set_val(PS4_RIGHT,0); 
        set_val(PS4_LEFT,0); 
        set_val(PS4_UP,0); 
        set_val(PS4_DOWN,0); 
        if(MenuTimeOut){
            CheckIfBtnIsPressed();
        }
    } 
    /////////////////////////////////////////////////////////////
    ///    END OF MENU  /////////////////////////////////////////
    /////////////////////////////////////////////////////////////
//========================================================================================================== 
   if(!ModEdit && !ModMenu){//  code for MODS
             //--- LED COLOR INDICATION        
             combo_run(Blink_MOD_ON);          
        //===========================================
        //   Apex Auto Heal                          
        //===========================================
        if (auto_heal_on_off) {    
            
            if (event_release(FIRE_BTN) && get_ptime(FIRE_BTN) > 600) {
                
                combo_run(Heal_cmb);
            }
        }
        //===========================================
        //   Apex Fast Reload                        
        //===========================================
            if (fast_reload_on_off) {
                if (event_release(FIRE_BTN) && get_ptime(FIRE_BTN) > 300) {
                    combo_run(APEX_FAST_RELOAD_cmb);
                }
            }
        //===========================================
        //   Apex Holster Weapon                     
        //===========================================
            if (holster_weapon_on_off) {
                if (!get_ival(ADS_BTN) && event_press(SPRINT_BTN)) {
                     Weapon = TRUE;
                    combo_run (Holster_cmb);
                }
                if (Weapon) {
                    if (get_ival(ADS_BTN) || get_ival(FIRE_BTN)) {
                        combo_run (Holster_cmb);
                        Weapon = FALSE;
                    }
                }
            }
              
        //===========================================
        //   Apex Easy Battery                      
        //===========================================
            if (easy_batery_on_off) {
                if (get_ival(ADS_BTN)) {
                    if (event_press(GRANADE_BTN)) {
                        combo_run(Easy_Battery_cmb);
                    }    
                    set_val(GRANADE_BTN,0);
                }
            }

        //===========================================
        //   RAPID FIRE ON/OFF
        //===========================================
        if(rapidfire_onoff && KS_RapidFire ) { 
            /////////////////////////////////////////
            if ((rapidfire_onoff == 2 && get_ival(ADS_BTN) && get_ival(FIRE_BTN)) || (rapidfire_onoff == 1 && get_ival(FIRE_BTN) && !get_ival(ADS_BTN)) || (rapidfire_onoff == 3 && get_ival(FIRE_BTN))) {
                 combo_run(RAPID_FIRE_cmb);         
            }                                       
            ///////////////////////////////////////// 
        }                                   
                                         
			//---HEAD SHOT ASSIST 
			if(Head_Assist_onoff) {
			
				if (get_ival(ADS_BTN) && get_ival(FIRE_BTN) || (Head_Assist_onoff == HeadHipAssist && get_ival(FIRE_BTN))) {
					if (abs(get_ival(RY)) < HeadMax) { 
						Head += HeadStep;
						combo_run(HeadAssist_cmb);
					}	
				}             
				if (!get_ival(FIRE_BTN)) Head = 0;
				
				if (Head >= HeadMax) combo_stop(HeadAssist_cmb);
			}
        //===========================================
        //   DYNAMIC FIRE                            
        //===========================================
        if (dynamic_fire_onoff && KS_DynamicFire) {
            if ((dynamic_fire_onoff == 2 && get_ival(ADS_BTN) && get_ival(FIRE_BTN)) || (dynamic_fire_onoff == 1 && get_ival(FIRE_BTN) && !get_ival(ADS_BTN))  || (dynamic_fire_onoff == 3 && get_ival(FIRE_BTN))) {
                dynamic_wait = dynamicF_rest * 10 - (get_ival(FIRE_BTN) * 3);
                combo_run(DynaFire);
            } else {
                combo_stop(DynaFire);
            }
        }

        //===========================================
        //   SMART FIRE                            
        //===========================================
        if (smart_fire_onoff && KS_SmartFire) {
            if ((smart_fire_onoff == 2 && get_ival(ADS_BTN) && get_ival(FIRE_BTN)) || (smart_fire_onoff == 1 && get_ival(FIRE_BTN) && !get_ival(ADS_BTN)) || (smart_fire_onoff == 3 && get_ival(FIRE_BTN)) ) {
                combo_run(SmartFire_cmb);
            } else {
                combo_stop(SmartFire_cmb);
            }
        }

        //===========================================
        //   BURST FIRE                            
        //===========================================
        if (burst_fire_onoff && KS_BurstFire) {
            if ((burst_fire_onoff == 2 && get_ival(ADS_BTN) && get_ival(FIRE_BTN)) || (burst_fire_onoff == 1 && get_ival(FIRE_BTN) && !get_ival(ADS_BTN)) || (burst_fire_onoff == 3 && get_ival(FIRE_BTN))) {
                combo_run(BurstFire_cmb);
            } else {
                combo_stop(BurstFire_cmb);
            }
        }

            //===========================================
            //   IN GAME RUMBLE                          
            //===========================================
            if(!rumble_onoff)
                block_rumble();
                                
            //--- CLEAR OLED SCREEN after message                                       
            if(time_to_clear_screen){               
                time_to_clear_screen -= get_rtime();
                if(time_to_clear_screen <= 0 ){     
                    QT_MESSAGE_TIMEOUT();     
                }                              
            }            
                          
            //======================================================
            //   ANTI RECOIL PRIMARY / SECONDARY WEAPON MOD24
            //======================================================
            if(AR_Prim_Sec_onoff){
                if(get_ival(PS4_SHARE) && event_press(PS4_UP) ) {
                    KS_AR_Prim_Sec = !KS_AR_Prim_Sec;
                    set_rumble_tipe(KS_AR_Prim_Sec);
                    display_MOD_status(KS_AR_Prim_Sec,sizeof(AR_PRIM_SECOND)- 1,AR_PRIM_SECOND[0]);
                    set_val(PS4_UP,0);
                }
            }
            //---Anti Recoil Primary/Secondary Weapon
            if(AR_Prim_Sec_onoff && KS_AR_Prim_Sec){
                
                //---2. Manually Switch
                if(AR_Prim_Sec_onoff == 2){
                    if(get_ival(PS4_SHARE)){
                        if(event_press(PS4_TRIANGLE)){
                            primary_weapon = TRUE;// Primary
                            set_profile_notify( PRIMARY_Profile, RUMBLE_A);// one heavy rumble
                            display_ar_profile();
                        }
                        set_val(PS4_TRIANGLE,0);
                    }
                    if(get_ival(PS4_SHARE)){
                        if(event_press(PS4_CIRCLE)){
                            primary_weapon = FALSE;// Secondary
                            set_profile_notify( SECONDARY_Profile, RUMBLE_A);// two heavy rumbles
                            display_ar_profile();
                        }
                        set_val(PS4_CIRCLE,0);
                    }
                    
                }//manualy
                //---1. Automatic Switch
                if(AR_Prim_Sec_onoff == 1){
                    if(get_ival(PS4_TOUCH) || get_ival(XB1_VIEW)){
                        if(event_press(SWITCHWEAPON_BTN)){
                            primary_weapon = TRUE;// Re-sync to Primary
                            set_profile_notify( PRIMARY_Profile, RUMBLE_A);// one heavy rumble
                            display_ar_profile();
                        }
                        set_val(SWITCHWEAPON_BTN,0);
                    }
                    else if(event_press(SWITCHWEAPON_BTN)){
                        primary_weapon = !primary_weapon; 
                        display_ar_profile();
                        if(primary_weapon)
                        {
                            set_profile_notify(PRIMARY_Profile, RUMBLE_A);// one heavy rumble
                        }
                        else
                        {
                            set_profile_notify(SECONDARY_Profile, RUMBLE_A);
                        }

                    }
                }// Automatic
            }
            //--- end of Anti Recoil Profiles Switch
     
            //======================================================
            //   ANTI RECOIL PRIMARY WEAPON 
            //======================================================
            //======================================================
            if(AR_Prim_Sec_onoff  && primary_weapon && KS_AR_Prim_Sec) {   
                // hold RS/R3 + UP/DOWN (Vertical Recoil) or LEFT/RIGHT(Horizontal Recoil) 
                if(get_ival(PS4_TRIANGLE)){                              
                    if(event_press(XB1_UP)) {
                        AR_Primary_V +=1;
                        on_the_fly_display(center_x(sizeof(AR_PRIMARY_V)- 1,OLED_FONT_MEDIUM_WIDTH),AR_PRIMARY_V[0],AR_Primary_V);
                    }
                    if(event_press(XB1_DOWN)){
                        AR_Primary_V -=1;
                        on_the_fly_display(center_x(sizeof(AR_PRIMARY_V)- 1,OLED_FONT_MEDIUM_WIDTH),AR_PRIMARY_V[0],AR_Primary_V);
                    }
                    //horizontal------------------------------------   
                    if(event_press(XB1_LEFT)){
                        AR_Primary_H     -=1;
                        on_the_fly_display(center_x(sizeof(AR_PRIMARY_H)- 1,OLED_FONT_MEDIUM_WIDTH),AR_PRIMARY_H[0],AR_Primary_H);
                    }
                    if(event_press(XB1_RIGHT)){
                        AR_Primary_H     +=1;
                        on_the_fly_display(center_x(sizeof(AR_PRIMARY_H)- 1,OLED_FONT_MEDIUM_WIDTH),AR_PRIMARY_H[0],AR_Primary_H);
                    }
                    //--- SAVE AR VALUES   
                    if(event_press(PS4_PS)){ 
                        combo_run(MESSAGE);        
                    } 
                    set_val(PS4_PS,0); 
                                        
                    set_val(PS4_UP,0); set_val(PS4_RIGHT,0); set_val(PS4_DOWN,0);set_val(PS4_LEFT,0); 
                }// get RS
                
                if( abs(get_ival(RX)) > AR_Release_Prim || abs(get_ival(RY)) > AR_Release_Prim) { 
                    combo_stop (AntiRecoilPrimary);                            
                }                                                       
                                                                  
                if( get_ival(ADS_BTN) && get_ival(FIRE_BTN)) {
                    combo_run(AntiRecoilPrimary);   
                }                 
                                
            }
            //======================================================    
            //   ANTI RECOIL SECONDARY WEAPON 
            //======================================================
            //======================================================
            if(AR_Prim_Sec_onoff  && !primary_weapon && KS_AR_Prim_Sec) {   
                // hold RS/R3 + UP/DOWN (Vertical Recoil) or LEFT/RIGHT(Horizontal Recoil) 
                if(get_ival(PS4_TRIANGLE)){                              
                    if(event_press(XB1_UP)) {
                        AR_Second_V +=1;
                        on_the_fly_display(center_x(sizeof(AR_SECOND_VERTICAL)- 1,OLED_FONT_MEDIUM_WIDTH),AR_SECOND_VERTICAL[0],AR_Second_V);
                    }
                    if(event_press(XB1_DOWN)){
                        AR_Second_V -=1;
                        on_the_fly_display(center_x(sizeof(AR_SECOND_VERTICAL)- 1,OLED_FONT_MEDIUM_WIDTH),AR_SECOND_VERTICAL[0],AR_Second_V);
                    }
                    //horizontal------------------------------------   
                    if(event_press(XB1_LEFT)){
                        AR_Second_H     -=1;
                        on_the_fly_display(center_x(sizeof(AR_SECOND_HORIZONTAL)- 1,OLED_FONT_MEDIUM_WIDTH),AR_SECOND_HORIZONTAL[0],AR_Second_H);
                    }
                    if(event_press(XB1_RIGHT)){
                        AR_Second_H     +=1;
                        on_the_fly_display(center_x(sizeof(AR_SECOND_HORIZONTAL)- 1,OLED_FONT_MEDIUM_WIDTH),AR_SECOND_HORIZONTAL[0],AR_Second_H);
                    }
                    set_val(PS4_UP,0); set_val(PS4_RIGHT,0); set_val(PS4_DOWN,0);set_val(PS4_LEFT,0); 
                    //--- SAVE AR VALUES   
                    if(event_press(PS4_PS)){ 
                        combo_run(MESSAGE);        
                    } 
                    set_val(PS4_PS,0); 
                      
                }// get RS
                
                if( abs(get_ival(RX)) > AR_Release_Second || abs(get_ival(RY)) > AR_Release_Second) { 
                    combo_stop (ARSecondary);                            
                }                                                       
                                                                      
                if( get_ival(ADS_BTN) && get_ival(FIRE_BTN)) {
                    combo_run(ARSecondary);   
                }                 
            }
            //======================================================    
            //===========================================
            //   Batts Sticky Aim 
            //===========================================
            if(ToggleBattsStickyAim){
                if(get_ival(FIRE_BTN))
                    combo_run(StickyAim);
            }

    //===========================================
    //   DoNotAtMe Polar Aim Assist with Taylordrift21 shapes 
    //===========================================
              if(polar_aim_assist_onoff){
                               
                  actual_X = get_ival(RX);   
                  actual_Y = get_ival(RY); 
                  
                  actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
                  max_Magnitude = (actual_Magnitude < 100);                      
                                                                        
                  if(!(time++ % STEP_INTERVAL)){                                  
                   angle += polar_aasist_steps;                                                 
                  }                                                               
                  angle = angle % 360;                                            
                  sin_angle_tdrift = Polar_Array[angle % 360];                           
                  cos_angle_tdrift = Polar_Array[(angle + 270) % 360]; 
                                  
                  if(get_ival(ADS_BTN) && get_ival(FIRE_BTN)){ 
                      if(actual_Magnitude <= polar_aasist_radius){                                                      
                          sin_angle_tdrift -= actual_Y;                                                              
                          cos_angle_tdrift -= actual_X;                                                                 
                      }else {                                                                                       
                          sin_angle_tdrift = (sin_angle_tdrift * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                          cos_angle_tdrift = (cos_angle_tdrift * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                      }                                                  
                      GetShapes(polar_aasist_radius); 
                  } 
              } 
            //===========================================
            //   HAIR TRIGGERS 
            //===========================================
            if(USE_HAIR_TRIGGER)
            {                                 
                 deadzone(PS4_L2,PS4_R2,99,99);
            }                                 

        } //  end of MODS CODE 
    } //  ENTIRE SCRIPT KILL SWITCH 
} //  end of main block 
///////////////////////////////////////////////////////////////////////////// 
///   COMBO BLOCK                                                             
/////////////////////////////////////////////////////////////////////////////
const int16 ValRange [][] ={
{ 1,1000 }, // RF_hold
{ 1,1000 }, // RF_release
{ 30,60 }, // dynamicF_hold
{ 30,70 }, // dynamicF_rest
{ 30,60 }, // smartF_hold
{ 100,800 }, // smartF_rest
{ 100,800 }, // burstF_hold
{ 100,800 }, // burstF_rest
{ 1,100 }, // AimAssistTime
{ 1,100 }, // AimAssistSize
{ 1,99 }, // AR_Primary_V
{ -99,99 }, // AR_Primary_H
{ 1,99 }, // AR_Second_V
{ -99,99 }, // AR_Second_H
{ 1,30 }, // polar_aasist_radius
{ 1,30 }, // polar_aasist_steps
{ 1,100 }, // HeadStep
{ 1,100 }  // HeadMax
};       
       
//-- VM Speed
define VM_Default = 0;
function set_Virtual_Machine_Speed (f_speed){
    if     (f_speed == 0) vm_tctrl(-0);//10 ms Default
    else if(f_speed == 1) vm_tctrl(-2);// 8 ms
    else if(f_speed == 2) vm_tctrl(-4);// 6 ms
    else if(f_speed == 3) vm_tctrl(-6);// 4 ms
    else if(f_speed == 4) vm_tctrl(-8);// 2 ms
    else if(f_speed == 5) vm_tctrl(-9);// 1 ms
}
           
//=============================================== 
//         ANTIRECOIL PRIMARY                
//=============================================== 
int KS_AR_Prim_Sec  = TRUE;
int AR_Release_Prim = 70;
int ar_prim_v, ar_prim_h;
int Invert            =  1; //  
combo AntiRecoilPrimary {                                
   //--- vertical_recoil                           
     ar_prim_v = get_ival(RY) + (AR_Primary_V * Invert);
     if(ar_prim_v > 100) ar_prim_v = 100;       
     set_val(RY, ar_prim_v);                     
                                                    
   //--- Horizontal_Recoil                          
                                                    
     ar_prim_h = get_ival(RX) + (AR_Primary_H );
    if(ar_prim_h >100) ar_prim_h = 100;           
    else if(ar_prim_h < -100) ar_prim_h = -100;  
    set_val(RX,ar_prim_h);                       
}                                        

//=============================================== 
//         ANTIRECOIL SECONDARY                
//=============================================== 
int AR_Release_Second = 70;
int ar_second_v, ar_second_h;
combo ARSecondary {                                
   //--- vertical_recoil                           
     ar_second_v = get_ival(RY) + (AR_Second_V * Invert );
     if(ar_second_v > 100) ar_second_v = 100;       
     set_val(RY, ar_second_v);                     
                                                    
   //--- Horizontal_Recoil                          
                                                    
     ar_second_h = get_ival(RX) + (AR_Second_H );
    if(ar_second_h >100) ar_second_h = 100;           
    else if(ar_second_h < -100) ar_second_h = -100;  
    set_val(RX,ar_second_h);                       
}//======================================================    
        
const string AR_PRIMARY_LABEL       = "PRIMARY AR" ;
const string AR_SECONDARY_LABEL     = "SECOND  AR" ;            
function display_ar_profile(){  
    if(!ModMenu && !ModEdit ){                                           
        // Clear OLED Screen                          
        cls_oled(0); // will clear oled                  
        if( primary_weapon ){
            print(sizeof(AR_PRIMARY_LABEL)- 1 ,3,OLED_FONT_MEDIUM,OLED_WHITE,AR_PRIMARY_LABEL[0]);// Primary AR Profile 
        }
        else {           
            print(sizeof(AR_SECONDARY_LABEL)- 1,3,OLED_FONT_MEDIUM,OLED_WHITE,AR_SECONDARY_LABEL[0]);//Secondary AR Profile                              
        }             
        print(center_x(sizeof(ON)- 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);
        time_to_clear_screen = 1500; 
    } 

}

function print_QT (f_cheract_size ,  f_label ){   
     rect_oled(1,1,127,63,0,1);                   
     line_oled(1,20,127,20,1,1);                   
     print( center_x( f_cheract_size , OLED_FONT_MEDIUM_WIDTH)    , 2 , OLED_FONT_MEDIUM , OLED_WHITE, f_label);   
}
int primary_weapon = TRUE;
int message_timeout;
int time_to_clear_screen;
function QT_MESSAGE_TIMEOUT (){     
	// Clear OLED Screen              
	cls_oled(0); // will clear oled   
	display_title  = FALSE;           
}                                  
                                      
                       
int exit_wait = 1500;
combo EXIT {     
	wait(exit_wait);     
	cls_oled(0);    
	ModMenu = FALSE;  
	ModEdit = FALSE;    
	display_EDIT = FALSE; 
	display_title = FALSE; 
}                      
int LED_OnOff;       
int rumble_tipe = RUMBLE_A;
       
//=============================================== 
//            LED BLINK                           
//=============================================== 
combo LED_BLINK {                                 
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                            
	wait(100);                                      
	colourled(LED_OnOff);                           
	wait(200);                                      
	colourled(ColorOFF);                             
	wait(100);                                      
}                                                 
//=============================================== 
//            PROFILE VIBRATE 1 , 2 ,3                           
//=============================================== 
int profile_numbr;                                
combo PROFILES_VIBRATE_NOTIFY {                    
    if(profile_numbr >= 1) set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                   
    wait(100);                                       
    if(profile_numbr > 1)set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                  
    wait(100);                                       
    if(profile_numbr > 2)set_rumble(rumble_tipe, 100);
    wait(300);                                       
    reset_rumble();                                 
}
define PRIMARY_Profile   = 1;
define SECONDARY_Profile = 2;
function set_profile_notify(f_profile,rumbl_type){
    profile_numbr = f_profile;
    rumble_tipe   = rumbl_type;
    combo_run(PROFILES_VIBRATE_NOTIFY);
}

//=============================================== 
//                 VIBRATE SETUP                 
//=============================================== 
combo vibrate {                                   
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
	wait(100);                                       
	set_rumble(rumble_tipe, 100);                   
	wait(300);                                       
	reset_rumble();                                 
}                                                 
//===============================================  
//                 RUMBLE_TIPE                     
//===============================================  
function set_rumble_tipe ( val) {                  
	if( val){ rumble_tipe = RUMBLE_A ; LED_OnOff = Green;}  
	else    { rumble_tipe = RUMBLE_B ; LED_OnOff = Red  ;} 
	combo_run(vibrate);                     
	combo_run(LED_BLINK);                   
}                                         
//===============================================  
//             DOUBLE CLICK 
//===============================================  
int b_dblclick;

function double_click (button) {                      
    if (b_dblclick) {                                 
        b_dblclick -=get_rtime();                                      
    }                                                 
    if (event_press(button) ) {
        if(b_dblclick){
            b_dblclick = 0;
            return TRUE;
        }else{
            b_dblclick = 300;
            return FALSE;
        }
    }                                                 
    return FALSE;                                        
}           

define ColorOFF  = 0;
define Blue      = 1;
define Red       = 2;
define Green     = 3;
define Pink      = 4;
define SkyBlue   = 5;
define Yellow    = 6;
define White     = 7;
                      
data(                 
  0,0,0, //0. ColorOFF
  2,0,0, //1. Blue     
  0,2,0, //2. Red      
  0,0,2, //3. Green    
  2,2,0, //4. Pink     
  2,0,2, //5. SkyBlue 
  0,2,2, //6. Yellow   
  2,2,2  //7. White    
); // end of data segment-------------- 
// COLOR LED function        
//-------------------------------------------------------------- 
                                       
int data_indx;
function colourled(color) {  
    for( data_indx = 0; data_indx < 3; data_indx++ ) {
        set_led(data_indx,duint8 ((color * 3) + data_indx));
    }
}

// Refresh OLED              
    int display_title = TRUE;
    int display_black;      
    int refresh_OLED;        
    int ModMenu;    
    int ModEdit;   
    int display_EDIT;   
    int EntireScript_OnOff = TRUE;// Kill Swith For Entire Script   
    int show_mesage_time; 
////////////////////////////////////// 
/////////////////////////////////////// 
int count_black;                      
int need_to_be_save;                 
int BlinckColor = 3;                 
int Col_ind;                         
combo StickyAim {
	offset_Batts_sticky(PS4_RY,AimAssistSize);
	wait(AimAssistTime);
	offset_Batts_sticky(PS4_RX,AimAssistSize);
	offset_Batts_sticky(PS4_LX,AimAssistSize);
	wait(AimAssistTime);
	offset_Batts_sticky(PS4_RY,inv(AimAssistSize));
	wait(AimAssistTime);
    offset_Batts_sticky(PS4_RX,inv(AimAssistSize));
    offset_Batts_sticky(PS4_LX,inv(AimAssistSize));
    wait(AimAssistTime);
}
function offset_Batts_sticky(Stick,Value) {
  set_val(Stick, clamp(Value * (100 - abs(get_ival(Stick))) / 100 + get_ival(Stick), -100, 100));
  return;
}

//===============================================================
//   MODS COMBO SECTION
//===============================================================
combo Heal_cmb {
    wait(50);
    set_val(UP,100);
    wait(100);
    set_val(RX,-100);
    wait(10);
}
combo APEX_FAST_RELOAD_cmb {
    wait(50);
    set_val(RELOAD_BTN,100);
    wait(50);
    set_val(RELOAD_BTN,100);
    wait(50);
}
int Weapon;
combo Holster_cmb {
    wait(20);
    set_val(SWITCHWEAPON_BTN,100);
    wait(300);
}

combo Easy_Battery_cmb {
    wait(50);
    set_val(UP,100);
    wait(100);
    set_val(RX,100);
    wait(10);
}
int KS_RapidFire = TRUE;
combo RAPID_FIRE_cmb { 
  set_val(FIRE_BTN, 100);
  wait(RF_hold);
  set_val(FIRE_BTN,   0);
  wait(RF_release); 
} 
int KS_DynamicFire = TRUE;
int dynamic_wait;
combo DynaFire {
    set_val(FIRE_BTN,100);
    wait(dynamicF_hold);
    set_val(FIRE_BTN,0);
    wait(dynamic_wait);
}
int KS_SmartFire = TRUE;
combo SmartFire_cmb {
    set_val(FIRE_BTN,100);
    wait(smartF_hold);
    set_val(FIRE_BTN,0);
    wait(smartF_rest);
}
int KS_BurstFire = TRUE;
combo BurstFire_cmb {
    set_val(FIRE_BTN,100);
    wait(burstF_hold);
    set_val(FIRE_BTN,0);
    wait(burstF_rest);
}
define HeadAssist      = 1;                          
define HeadHipAssist   = 2;  
int Head;
combo HeadAssist_cmb{
	set_val(RY,inv(Head) + get_ival(RY));
}

   //=======================================
   //  DISPLAY EDIT VALUE ON THE FLY        
   //=======================================
function on_the_fly_display (f_string, f_print, f_val){
    cls_oled(0);  
    line_oled(1,18,127,18,1,1);
    print(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);  
    number_to_string(f_val, find_digits(f_val));
    time_to_clear_screen  = 2000;
}      
       
define ACTIVE_WHEN_ADS    = TRUE;                     
define ACTIVE_WHEN_FIRING = TRUE;  
define STEP_INTERVAL =  1;                            

const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};                                    

// Variables \\
int Position,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral; 
int MinRadius = 1;  // Leave Alone , This can be left alone and not need adjusted. \\
int time;                                             
int angle, cos_angle_tdrift, sin_angle_tdrift;                      
int actual_X, actual_Y, actual_Magnitude, max_Magnitude; 
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
    {
        InnerSpiral -= 1;
        if(InnerSpiral < MinRadius)
            SpiralPosition1 = TRUE;
    }
    else
    {
        InnerSpiral += 1;
        if(InnerSpiral > f_var)
            SpiralPosition1 = FALSE;
    }
    if(!SpiralPosition2)
    {
        OuterSpiral -= 1;
        if(OuterSpiral < MinRadius)
            SpiralPosition2 = TRUE;
    }
    else
    {
        OuterSpiral += 1;
        if(OuterSpiral >  f_var)
            SpiralPosition2 = FALSE;
    } 
    if( polar_aim_assist_onoff == 1)                    
    { 
        sin_angle_tdrift = (sin_angle_tdrift * f_var) /100;
        cos_angle_tdrift = (cos_angle_tdrift * f_var) /100;  
    } 
    if( polar_aim_assist_onoff == 2)        
    { 
        sin_angle_tdrift = (sin_angle_tdrift * f_var)/100;
        cos_angle_tdrift = (cos_angle_tdrift * f_var/2)/100; 
    }
    if( polar_aim_assist_onoff == 3)                     
    { 
        cos_angle_tdrift = (cos_angle_tdrift * f_var) /100;  
        sin_angle_tdrift = (sin_angle_tdrift * f_var/2)/100;  
    } 
    if( polar_aim_assist_onoff == 4)                  
    {
        sin_angle_tdrift = (sin_angle_tdrift * InnerSpiral) /100;
        cos_angle_tdrift = (cos_angle_tdrift * OuterSpiral) /100;  
    }
    if( polar_aim_assist_onoff == 5)
    {
        if(Position == 0 || Position == 1)
        {  
            actual_X = (get_ival(RX)) + ((cos_angle_tdrift * f_var))/100;
        }
        if(Position == 2 || Position == 3)
        {  
            actual_Y = (get_ival(RY)) + ((sin_angle_tdrift * f_var))/100;
        }
            Position++;        
            
        if(Position == 4)
        {
            Position = 0;
        }    
    }
    if(polar_aim_assist_onoff == 5 )
    {
           set_val(RX, actual_X);
           set_val(RY, actual_Y); 
    } 
    else
    {
        set_val(RX, calculate(actual_X + cos_angle_tdrift, -100, 100));
        set_val(RY, calculate(actual_Y + sin_angle_tdrift, -100, 100)); 
          
    }   
 }
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
define FONT_STATS_INDEX_WIDTH    = 0; 
define FONT_STATS_INDEX_HEIGHT   = 1; 
define FONT_STATS_INDEX_MAXCHARS = 2; 
                                      
                                      
//////////////////////////////////////////////////////////////// 
function horizontal_center_offset(number_characters, font_size) { 
    return (128 - number_characters * FONT_STATS[font_size][FONT_STATS_INDEX_WIDTH]) / 2;
}             
              
const string EXIT_TXT1 = "SETTINGS";  
const string EXIT_TXT2 = "WAS SAVED"; 
                                     
////////////////////////////////////////////////////////////////////////////// 
///  SAVE  
function save_toggles () {  
                    
     set_pvar(SPVAR_1,rapidfire_onoff); 
     set_pvar(SPVAR_2,dynamic_fire_onoff); 
     set_pvar(SPVAR_3,smart_fire_onoff); 
     set_pvar(SPVAR_4,burst_fire_onoff); 
     set_pvar(SPVAR_5,ToggleBattsStickyAim); 
     set_pvar(SPVAR_6,auto_heal_on_off); 
     set_pvar(SPVAR_7,fast_reload_on_off); 
     set_pvar(SPVAR_8,holster_weapon_on_off); 
     set_pvar(SPVAR_9,easy_batery_on_off); 
     set_pvar(SPVAR_10,USE_HAIR_TRIGGER); 
     set_pvar(SPVAR_11,rumble_onoff); 
     set_pvar(SPVAR_12,AR_Prim_Sec_onoff); 
     set_pvar(SPVAR_13,polar_aim_assist_onoff); 
     set_pvar(SPVAR_14,Head_Assist_onoff); 
     set_pvar(SPVAR_15,RF_hold); 
     set_pvar(SPVAR_16,RF_release); 
     set_pvar(SPVAR_17,dynamicF_hold); 
     set_pvar(SPVAR_18,dynamicF_rest); 
     set_pvar(SPVAR_19,smartF_hold); 
     set_pvar(SPVAR_20,smartF_rest); 
     set_pvar(SPVAR_21,burstF_hold); 
     set_pvar(SPVAR_22,burstF_rest); 
     set_pvar(SPVAR_23,AimAssistTime); 
     set_pvar(SPVAR_24,AimAssistSize); 
     set_pvar(SPVAR_25,AR_Primary_V); 
     set_pvar(SPVAR_26,AR_Primary_H); 
     set_pvar(SPVAR_27,AR_Second_V); 
     set_pvar(SPVAR_28,AR_Second_H); 
     set_pvar(SPVAR_29,polar_aasist_radius); 
     set_pvar(SPVAR_30,polar_aasist_steps); 
     set_pvar(SPVAR_31,HeadStep); 
     set_pvar(SPVAR_32,HeadMax); 
    combo_run(EXIT);                  
      
}// end of save   
                      
combo MESSAGE {       
    wait(20);         
    save_toggles ();  
    cls_oled(0);      
    print(horizontal_center_offset(sizeof(EXIT_TXT1), OLED_FONT_MEDIUM ), 2, OLED_FONT_MEDIUM, 1, EXIT_TXT1[0]); 
    print(horizontal_center_offset(sizeof(EXIT_TXT2), OLED_FONT_MEDIUM ), 23, OLED_FONT_MEDIUM, 1, EXIT_TXT2[0]);
    exit_wait = 2000;     
}                        
function blinck ( var){  
	if(var){               
		BlinckColor = Green;
	}else{                 
		BlinckColor = Red;    
	}                       
	combo_run(BLINK_NOTIFY); 
}                           
                            
combo BLINK_NOTIFY {        
	colourled(BlinckColor);   
	wait(300);                 
	colourled(ColorOFF);        
	wait(100);                  
	colourled(BlinckColor);      
	wait(300);                   
	colourled(ColorOFF);          
}                                
int MOD_Color;
int blink_n ;
combo Blink_MOD_ON   {
    colourled(ColorOFF);   
    if( blink_n == 1 ) {
        if(rapidfire_onoff && KS_RapidFire ){colourled(Pink);}
    } 
    if( blink_n == 2 ) {
        if(AR_Prim_Sec_onoff && primary_weapon){colourled(Green);}
    } 
    if( blink_n == 3 ) {
        if(AR_Prim_Sec_onoff && !primary_weapon){colourled(Blue);}
    } 
    wait(500);                 
    colourled(ColorOFF);   
    wait(1000);
    blink_n +=1; 
    if( blink_n > 3)blink_n = 1; 
}                                
                                
                                
const uint8 FONT_STATS[][] = {  
    {  7, 10, 18 }, // Small    
    { 11, 18, 11 }, // Medium   
    { 16, 26,  7 }  // Large    
};                              
                                
function display_edit(  f_val) {
    print(2, 5, OLED_FONT_SMALL, OLED_WHITE, EditVarStr[adjust_variable_idx]); 
    number_to_string(f_val, find_digits(f_val));     
}       
        
function f_go_forward (f_variable) {
    f_variable       +=1;   
    if(f_variable  > Min_Max_Options[modName_idx][1] )f_variable  = Min_Max_Options[modName_idx][0]; // max option
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}

function f_go_back (f_variable) {
    f_variable       -=1;   
    if(f_variable  < Min_Max_Options[modName_idx][0] )f_variable  = Min_Max_Options[modName_idx][1]; 
    need_to_be_save = TRUE;       
    blinck( f_variable );
    return f_variable;
}
// Variables for function number_to_string()  
int ssss;                            
int c_c_c,c_val;   
function number_to_string(f_val,f_digits) {                  
//=======================================================
//  number_to_string(value to convert, # of digits in value) 
//                                                           
//  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767) 
//                                                      
//      Convert digits to ASCII                         
//      Add ASCII character to print buffer            
//      Print string centered X & Y on OLED             
//                                                       
//======================================================
    ssss = 1;  c_val = 10000;                            
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(ssss,45);    //--add leading "-"      
         ssss += 1;                                      
         f_val = abs(f_val);                          
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                             
            putc_oled(ssss,ASCII_NUM[f_val / c_val]);    
            f_val = f_val % c_val;                    
            ssss +=  1;                                  
            if(c_c_c == 4)                               
            {                                         
                putc_oled(ssss,44);   //--add ","        
                ssss += 1;                               
            }                                        
        }                                             
        c_val /= 10;                                  
    }                                                
    puts_oled(center_x(ssss - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,ssss - 1,OLED_WHITE); // adjustable value centered in X 
}                                                     
int n_str_;                  
int horiz_X_center_sufix;    
                             
function print_number(f_val,f_digits ,print_s_x , print_s_y , f_font) { 
                                                      
    n_str_ = 1;  c_val = 10000;                       
                                                      
    if(f_val < 0) //--neg numbers                     
    {                                                 
         putc_oled(n_str_,45);    //--add leading "-" 
         n_str_ += 1;                                 
         f_val = abs(f_val);                          
                                                      
    }                                                 
                                                      
    for(c_c_c = 5; c_c_c >= 1; c_c_c--)                           
    {                                                 
        if(f_digits >= c_c_c)                             
        {                                              
            putc_oled(n_str_,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;                    
            n_str_ +=  1;                             
                                                      
        }                                             
        c_val /= 10;                                  
    }                                                 
    puts_oled(print_s_x,print_s_y,f_font,n_str_ - 1,OLED_WHITE); // adjustable value centered in X
}                                       
                                                      
                                                      
int f_min, f_max;
function edit_val( f_val ) {  // antirecoil = edit_val( 0 , antirecoil, 99  , 99  ) 
    line_oled(1,18,127,18,1,1);                                        
    f_min = ValRange[adjust_variable_idx][0];                          
    f_max = ValRange[adjust_variable_idx][1];                          
    print_number(f_min ,find_digits(f_min) ,4 , 22 , OLED_FONT_SMALL); 
    // on the right: max value                                         
    print_number(f_max ,find_digits(f_max) ,97 , 22 , OLED_FONT_SMALL);
                                          
    if(get_ival(ADS_BTN)){                  
		if(press_hold(PS4_RIGHT)){            
			f_val ++;                           
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_LEFT)){             
			f_val --;                           
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
		if(press_hold(PS4_UP)){               
			f_val +=10;                         
			if(f_val > f_max ) f_val = f_max;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
                                          
		if(press_hold(PS4_DOWN)){             
			f_val -=10;                         
			if(f_val < f_min ) f_val = f_min;   
			display_EDIT = TRUE;                
			need_to_be_save = TRUE;             
		}                                     
	}                                      
    return f_val;                        
}                                        
                                             
                                   
function press_hold(f_btn) {       
//  return TRUE - event_press()    
//- every 250ms when button is held 
	  return event_press(f_btn) || get_ival(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}               
                
function find_digits(f_num) {                         
//  find_digits(value)                                
//        return Number of Digits in Value Passed     
                                                      
    f_num = abs(f_num);                               
    if(f_num / 10000 > 0) return 5;                   
    if(f_num /  1000 > 0) return 4;                   
    if(f_num /   100 > 0) return 3;                   
    if(f_num /    10 > 0) return 2;                   
                          return 1;                  
}                                                     
///////////////////////////////////////////////
//  FUNCTIONS                                 
                                              
function center_x(f_chars,f_font) {           
//  center_x(number of chars,font size);     
//        return X for Centering String Horizontally 
                                                      
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2); 
}                                                      
                                                       
function draw_rectangle()        
{
    line_oled(1,25,127,25,1,1); 
    rect_oled(0, 0,OLED_WIDTH,64,FALSE,1); 
}
const string ModOption_24_0 = "Disable"; 
const string ModOption_24_1 = "Automatic"; 
const string ModOption_24_2 = "Manually"; 
const string ModOption_30_0 = "Disable"; 
const string ModOption_30_1 = "Circular"; 
const string ModOption_30_2 = "Tall Oval"; 
const string ModOption_30_3 = "Wide Oval"; 
const string ModOption_30_4 = "Spiral"; 
const string ModOption_30_5 = "Helix"; 
const string ModOption_67_0 = "Disable"; 
const string ModOption_67_1 = "Head Assist"; 
const string ModOption_67_2 = "HHip Assist"; 
define ShotModOptions = 31;
define FireModOptions =  9;
const string ModOption_31_0 = "Disable"; 
const string ModOption_31_1 = "Fire Only"; 
const string ModOption_31_2 = "ADS & Fire"; 
const string ModOption_31_3 = "ADS Only"; 
const string ModOption_31_4 = "On Fire"; 
function display_mod( f_string, mod_name, f_toggle, f_option) {   
        // Display MOD_NAME                                    
        print(f_string, 3, OLED_FONT_MEDIUM, OLED_WHITE, mod_name); 
        if(f_option == 1)                              
        {                                                     
        // Display Disable / Enable                                 
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);// Enable 
            else                                                                                               
                print(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);// Disable 
        }            
        if(f_option == ShotModOptions)// 31    
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                           
            if(f_toggle == 3)                                                             
                print(center_x(sizeof(ModOption_31_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_3[0]);// ADS Only
                                                                                                                           
        }            
        if(f_option == FireModOptions)// 9 FireModOptions   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_31_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_31_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_1[0]);// Fire Only
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_31_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_2[0]);// ADS & Fire
                                                                                                                 
            if(f_toggle == 3)                                                             
                print(center_x(sizeof(ModOption_31_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_31_4[0]);// On Fire
                                                                                                                 
        }         

        if(f_option == 24)   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_24_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_24_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_24_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_24_1[0]);// Automatic
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_24_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_24_2[0]);// Manually
                                                                                                                           
        }            
        if(f_option == 30)   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_30_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_30_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_1[0]);// Circular
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_30_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_2[0]);// Tall Oval
                                                                                                                           
            if(f_toggle == 3)                                                             
                print(center_x(sizeof(ModOption_30_3)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_3[0]);// Wide Oval
                                                                                                                           
            if(f_toggle == 4)                                                             
                print(center_x(sizeof(ModOption_30_4)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_4[0]);// Spiral
                                                                                                                           
            if(f_toggle == 5)                                                             
                print(center_x(sizeof(ModOption_30_5)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_30_5[0]);// Helix
                                                                                                                           
        }            
        if(f_option == 67)   
        {                                                     
            if(f_toggle == 0)                                                             
                print(center_x(sizeof(ModOption_67_0)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_0[0]);// Disable
                                                                                                                           
            if(f_toggle == 1)                                                             
                print(center_x(sizeof(ModOption_67_1)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_1[0]);// Head Assist
                                                                                                                           
            if(f_toggle == 2)                                                             
                print(center_x(sizeof(ModOption_67_2)  - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE, ModOption_67_2[0]);// HHip Assist
                                                                                                                           
        }            
}//display mod end           
/*     
======================================================
     Logo Picture : FORTNITE
======================================================
*/                                                    
                               
 const int16 BOOT_LOGO[] = { 
128, 56,
    
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
    
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    
0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF
,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    
0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF
,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xE000,0x7FFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    
0xE000,0x7FFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0x8003,0xE000,0x7E0F,0xF001,0xF800,0x060F,0x01FF,0xFFFF,0x8003,0xE000,0x7801,
0xF000,0x7800,0x000F,0x0100,0xFFFF,0x8003,0xE000,0x7000,0xF000,0x3800,0x000F,0x0100,0x8000,0x8003,
    
0xE000,0x6000,0xF000,0x1800,0x0007,0x0100,0x8000,0x8003,0xE000,0x4000,0x7000,0x1800,0x0007,0x0100,0x8000,0x8003,0xE01F,0xC000,
0x7000,0x0800,0x0003,0x0100,0x8000,0x8003,0xE01F,0xC040,0x3000,0x0800,0x0003,0x0100,0x8000,0x8003,
    
0xE01F,0x8040,0x3018,0x0780,0x0003,0x0100,0x8000,0x807F,0xE01F,0x8040,0x3018,0x0780,0xF801,0x0100
,0x8000,0x807F,0xE01F,0x8040,0x3018,0x0780,0xF801,0x0100,0x800F,0x807F,0xE01F,0x80E0,0x1018,0x0780,0xF800,0x0100,0xF80F,0x807F,
    
0xE001,0x80E0,0x1018,0x0780,0xF800,0x0100,0xF80F,0x8007,0xE001,0x80E0,0x1018,0x0780,0xF800,0x0100,0xF80F,0x8007,0xE001,0x80E0,
0x1018,0x0F80,0xF800,0x0100,0xF80F,0x8007,0xE001,0x80E0,0x1000,0x0F80,0xF800,0x0100,0xF80F,0x8007,
    
0xE001,0x80E0,0x1000,0x1F80,0xF800,0x0100,0xF80F,0x8007,0xE001,0x80E0,0x1000,0x1F80,0xF800,0x0100,0xF80F,0x8007,0xE001,0x80E0,
0x1000,0x3F80,0xF800,0x0100,0xF80F,0x8007,0xE01F,0x8040,0x3000,0x3F80,0xF808,0x0100,0xF80F,0x807F,
    
0xE01F,0x8040,0x3000,0x3F80,0xF808,0x0100,0xF80F,0x807F,0xE01F,0x8040,0x3000,0x1F80,0xF808,0x0100,0xF80F,0x807F,0xE01F,0x8040,
0x3010,0x1F80,0xF80C,0x0100,0xF80F,0x807F,0xE01F,0xC040,0x3010,0x1F80,0xF80C,0x0100,0xF80F,0x807F,
    
0xE01F,0xC000,0x7010,0x0F80,0xF80E,0x0100,0xF80F,0x807F,0xE01F,0xC000,0x7018,0x0F80,0xF80E,0x0100,0xF80F,0x8003,0xE01F,0xE000,
0xF018,0x0F80,0xF80F,0x0100,0xF80F,0x8003,0xE01F,0xF001,0xF018,0x0780,0xF80F,0x0100,0xF80F,0x8003,
    
0xE01F,0xF803,0xF01C,0x0780,0xF80F,0x0100,0xF80F,0x8003,0xE01F,0xFE0F,0xFFFC,0x07FF,0xFFFF,0xFF00,0xF80F,0x8003,0xE01F,0xFFFF,
0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xF80F,0x8003,0xE01F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0x8003,
    
0xE01F,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF
,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
    
0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,
0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF
 } // picture 
/*     
======================================================
     DrawLogo(x, y, invert)                            
====================================================== 
*/                                                    
int logoX,logoX2,logoY, logoY2;                       
int logoBit,logoOffset,logoData;                      
                                                      
function DrawLogo(x, y, invert) {                     
    logoOffset = 2;                                    
    logoBit = 16;                                           
    for (logoY = 0; logoY < BOOT_LOGO[1]; logoY++) {         // Loop the Y axis 
        for (logoX = 0; logoX < BOOT_LOGO[0]; logoX++) {     // Loop the X axis 
            logoData = BOOT_LOGO[logoOffset]          
            logoX2 = x + logoX;                       
            logoY2 = y + logoY;                       
            if (logoX2 < 0 || logoX2 >= 128) {        
                logoX2 -= 128;                        
            }                                         
            if (logoY2 < 0 || logoY2 >= 64) {         
                logoY2 -= 64;                         
            }                                         
            if (test_bit(logoData, logoBit - 1)) {     
                pixel_oled(logoX2, logoY2, !invert);   
            }else{                                     
                pixel_oled(logoX2, logoY2, invert);    
            }                                            
            logoBit--;             // Decrement the bit flag, we are moving to the next bit 
            if (!logoBit) {     // Check if we have just handled the last bit  
                logoBit = 16;     // Reset the bit flag     
                logoOffset++;     // Move to the next value 
            }  
        }   
    }    
}     
      
const uint8 MenuButtons [] = {  
  PS4_RIGHT , //0. Up
  PS4_LEFT , //1. Down
  PS4_UP , //2. go back
  PS4_DOWN , //3. go forward
  PS4_CROSS , //4. enter in Edit Menu
  PS4_CIRCLE , //5. exit  Menu
  PS4_OPTIONS , //5. enter in  Menu
  PS4_L2     //6. hold ADS
};//--- End Menu Buttons  

int menu_btn_indx;
int MenuTimeOut;
define menu_time_active = 30000;
function CheckIfBtnIsPressed (){  
    for(menu_btn_indx = 0; menu_btn_indx < 7; menu_btn_indx++){
         if(event_press(MenuButtons[menu_btn_indx]) ){
             MenuTimeOut = menu_time_active;
         }
         if(MenuTimeOut){              
            MenuTimeOut -=1;
            if(MenuTimeOut <= 0 ){    
                ModMenu = FALSE;      
                ModEdit = FALSE;      
                display_EDIT  = FALSE; 
                display_black = TRUE; 
            }
        }
    }
}

function display_MOD_status(f_val,f_size,f_label){  
    if(!ModMenu && !ModEdit){                                           
        // Clear OLED Screen                          
        cls_oled(0); // will clear oled   
        print(f_size, 3, OLED_FONT_MEDIUM ,OLED_WHITE, f_label);   
        if( f_val ){
            print(center_x(sizeof(ON)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, ON[0]);//MOD is ON
        }
        else{
            print(center_x(sizeof(OFF)  - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE, OFF[0]);// MOD is OFF
        }    
        time_to_clear_screen = 1500; 
    } 
}
