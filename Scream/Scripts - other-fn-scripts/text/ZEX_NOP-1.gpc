/*

██╗                                                                                                                                                                          ██╗
██║                                                                                                                                                                          ██║
██║    █████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗    ██║
██║    ╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝    ██║
██║                                                                                                                                                                          ██║
╚═╝                                                                                                                                                                          ╚═╝
                                                                                                                                                                                
██╗    ████████╗██╗  ██╗███████╗    ██████╗ ███████╗███████╗████████╗    ███████╗███╗   ██╗    ███████╗███████╗███╗   ██╗    ███████╗ ██████╗██████╗ ██╗██████╗ ████████╗    ██╗
██║    ╚══██╔══╝██║  ██║██╔════╝    ██╔══██╗██╔════╝██╔════╝╚══██╔══╝    ██╔════╝████╗  ██║    ╚══███╔╝██╔════╝████╗  ██║    ██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝    ██║
██║       ██║   ███████║█████╗      ██████╔╝█████╗  ███████╗   ██║       █████╗  ██╔██╗ ██║      ███╔╝ █████╗  ██╔██╗ ██║    ███████╗██║     ██████╔╝██║██████╔╝   ██║       ██║
██║       ██║   ██╔══██║██╔══╝      ██╔══██╗██╔══╝  ╚════██║   ██║       ██╔══╝  ██║╚██╗██║     ███╔╝  ██╔══╝  ██║╚██╗██║    ╚════██║██║     ██╔══██╗██║██╔═══╝    ██║       ██║
██║       ██║   ██║  ██║███████╗    ██████╔╝███████╗███████║   ██║       ██║     ██║ ╚████║    ███████╗███████╗██║ ╚████║    ███████║╚██████╗██║  ██║██║██║        ██║       ██║
╚═╝       ╚═╝   ╚═╝  ╚═╝╚══════╝    ╚═════╝ ╚══════╝╚══════╝   ╚═╝       ╚═╝     ╚═╝  ╚═══╝    ╚══════╝╚══════╝╚═╝  ╚═══╝    ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝       ╚═╝
                                                                                                                                                                                
██╗                                                                                                                                                                          ██╗
██║                                                                                                                                                                          ██║
██║    █████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗    ██║
██║    ╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝    ██║
██║                                                                                                                                                                          ██║
╚═╝                                                                                                                                                                          ╚═╝
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
 |===============================| 
 |           FEATURES            |
 |-------------------------------|         
 | - 5 AA boosters               |         
 | - Tracking AA                 |
 | - Hipfire AA                  |           
 | - Tracking AA                 |		   
 | - Ghostys AA                  |
 | - Anti-Recoil                 |
 | - Rapid-Fire                  |
 | - Ghost-Peeks                 |
 | - Fast-Reset                  |
 | - Pickup Macro                |
 | - KBM SUPPORT (DM @GHOSTYFC)  |
 |===============================|
 
╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝
                                                                           
                                     
█████╗█████╗█████╗█████╗█████╗█████╗ 
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝ 
                                     
                                     
                                     
██████╗ ██╗███╗   ██╗██████╗ ███████╗
██╔══██╗██║████╗  ██║██╔══██╗██╔════╝
██████╔╝██║██╔██╗ ██║██║  ██║███████╗
██╔══██╗██║██║╚██╗██║██║  ██║╚════██║
██████╔╝██║██║ ╚████║██████╔╝███████║
╚═════╝ ╚═╝╚═╝  ╚═══╝╚═════╝ ╚══════╝
                                     
                                     
                                     
█████╗█████╗█████╗█████╗█████╗█████╗ 
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                       
*/

define Fire = XB1_RT; //PS4_R2
define Ads = XB1_LT; //PS4_L2
define Pickupbutton = XB1_X; //PS4_SQUARE
define N_Weapon = XB1_RB; //PS4_R1
define P_Weapon = XB1_LB; //PS4_L1
define Pickaxe = XB1_Y;  //PS4_L3
define Jump = XB1_A;  //PS4_CROSS
define Crouch = XB1_RS; //PS4_R3
define Ping = XB1_LEFT; //PS4_RIGHT
define Edit = XB1_LS;  //PS4_DOWN  
define Build = XB1_B;  //PS4_CIRCLE
define Switch = XB1_RIGHT;//PS4_RIGHT
define Wall = XB1_RT; //PS4_R2
define Floor = XB1_RB; //PS4_R1
define Ramp = XB1_LT; //PS4_L2
define Roof = XB1_LB; //PS4_L1
define Up = XB1_UP; //PS4_UP
define Down = XB1_DOWN; //PS4_DOWN
define Left = XB1_LEFT; //PS4_LEFT
define Right = XB1_RIGHT;//PS4_RIGHT
define RX = XB1_RX;   //PS4_RX
define RY = XB1_RY;   //PS4_RY
define LX = XB1_LX;   //PS4_LX
define LY = XB1_LY;   //PS4_LY
define Select = XB1_RT; //PS4_R1
define Confirm = XB1_LT; //PS4_R3		
define Reset = XB1_RS; //PS4_L1
define EditAssist = XB1_LS; //PS4_RIGHT
define FastResetB = XB1_RS;  //PS4_DOWN
define MenuEnterHold = XB1_LT; //PS4_L2

// MENU 
define MenuEnterPress = XB1_MENU; //PS4_OPTONS
define MenuExitPress = XB1_Y; //PS4_TRIANGLE
define ChangeMenuPress = XB1_RS; //PS4_RS
define FindSlotHold = XB1_A; //PS4_CROSS
define FindSlotPress = XB1_LEFT; //PS4_LEFT

// IGNORE (DO NOT TOUCH)
define PRX = POLAR_RX;
define PRY = POLAR_RY;
define RS = POLAR_RS;
define On = TRUE;
define Off = FALSE;

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

                                                                     
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                    
                                    
                                    
███╗   ███╗ ██████╗ ██████╗ ███████╗
████╗ ████║██╔═══██╗██╔══██╗██╔════╝
██╔████╔██║██║   ██║██║  ██║███████╗
██║╚██╔╝██║██║   ██║██║  ██║╚════██║
██║ ╚═╝ ██║╚██████╔╝██████╔╝███████║
╚═╝     ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝
                                    
                                    
                                    
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                      
*/
        
int ModSwitch;
int AA1 = On; 
int AA2 = On; 
int AA3 = On; 
int AA4 = On; 
int AA5 = On;
int Tracking = Off; 
int HipfireAA = Off;
int GhostysAA = On; 
int ARecoil = On; 
int RapidFire = Off; 
int GhostPeeks = On; 
int FastReset = Off;
int PickupM = Off; 

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

                                                                                                                                 
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                  
                                                                  
                                                                  
███████╗███████╗████████╗████████╗██╗███╗   ██╗ ██████╗ ███████╗  
██╔════╝██╔════╝╚══██╔══╝╚══██╔══╝██║████╗  ██║██╔════╝ ██╔════╝  
███████╗█████╗     ██║      ██║   ██║██╔██╗ ██║██║  ███╗███████╗  
╚════██║██╔══╝     ██║      ██║   ██║██║╚██╗██║██║   ██║╚════██║  
███████║███████╗   ██║      ██║   ██║██║ ╚████║╚██████╔╝███████║  
╚══════╝╚══════╝   ╚═╝      ╚═╝   ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝  
                                                                  
                                                                  
                                                                  
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                                                
*/

// AA1
int AA1_Strength = 70;
int AA1_Strength2 = 30; // STRENTGH 1 + 6 SO FOR EXAMPLE: AA1_STRENGTH = 5 THEREFORE AA1_STRENTGH2 = AA1_STRENGTH + 6
int AA1Speed = 25;

// AA2
int AA2_Hold; 
int AA2_Rest;

// AA3
int AA3_Speed = 95;

// AA4
int AA4_Hold = 260;
int AA4_Release = 5;

// AA5
int AA5_Strength =  4;
int AA5_Strength2 =  7;
int AA5_Speed = 20;
int AA5Delay = 10;

// TRACKING
int Taim  = 95;

// HIPFIRE
int HFstrength = 20;

// GHOSTYSAA
int GAA_hold = 260;
int GAA_release = 5;

// GHOSTPEEK
int GPCrouch = 100;
int GPcooldown = 100; 

// ANTI-RECOIL
int Anti_Recoil = 100; 
int AntiRecoil = 16; 

// RAPID-FIRE
int Rfire = 100; 

//IGNORE (DO NOT TOUCH)
init
{
    combo_run(Boot);
}

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝


█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                    
                                    
                                    
███╗   ███╗ █████╗ ██╗███╗   ██╗    
████╗ ████║██╔══██╗██║████╗  ██║    
██╔████╔██║███████║██║██╔██╗ ██║    
██║╚██╔╝██║██╔══██║██║██║╚██╗██║    
██║ ╚═╝ ██║██║  ██║██║██║ ╚████║    
╚═╝     ╚═╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝    
                                    
                                    
                                    
█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                
*/

main
{
    if(AA1)
    {   
		if(get_val(Ads)> 1)
		{ 
			combo_run(AA1s);
			AA1Shake();
		} 
		if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
		{
			combo_stop(AA1s);
		}
		
	 }	
	  
	if(AA2)
	{                             
		if(get_val(Ads) && get_val(Fire))
		{   
			AA2_Hold = 140;
			AA2_Rest = 0;            
			combo_run(AA2s);
		} 
		
		else if 
		
		(combo_running(AA2s))
		{     
			combo_stop(AA2s);
		}
	}
	
	if(AA3)
	{
		if(get_val(Ads) && get_val(Fire))
		{
			sensitivity(RX,0,AA3_Speed); 
			sensitivity(RY,0,AA3_Speed);
		}
	}
	
    if(AA4)
    {
		if(get_val(Ads)> 1)
		{
			combo_run(AA4s);
		}
		if(event_release(Ads))
		{ 
			combo_stop(AA4s);
		}
	 }
	 
	 if (AA5) 
	 {           
     	if (get_ival(Ads) && !get_ival(Fire) && AxisAim <= AA5_Strength2) 
     	{   	
       		set_polar(RS,AA5Speed = (AA5Speed + AA5_Speed) % 360,(abs(get_ival(PRX)) + abs(get_ival(PRY)) / 4) + AA5_Strength * 328);
        }
           if (get_ival(Fire) || get_ival(Ads) && get_ival(Fire) && AxisAim <= AA5_Strength2 || get_ival(Ads) && AxisAim > AA5_Strength2) 
        {
 			combo_run(AA5s);
        }
     }
		
	if(GhostysAA)
	{
		if(get_val(Ads)> 1)
		{
			combo_run(GAAs);
		}
		 if(event_release(Ads))
		{ 
			combo_stop(GAAs);
		}
	}
			
	if(Tracking)
	{
		if(get_val(Ads) && get_val(Fire))
		{
			sensitivity(RX ,0,Taim); 
			sensitivity(RY ,0,Taim);
		}
	}
		
	if(HipfireAA)
	{   
		if(get_val(Fire)> 1)
		{ 
			combo_run(HFAAs);
		}
		if(abs(get_val(9)) > 19 || abs(get_val(10)) > 19) 
		{
		combo_stop(HFAAs);
		}
	}
		
	if(ARecoil)
    {                               
		if(get_val(Ads) && get_val(Fire)) 
		{      
			combo_run(ARecoilS); 
		}               
		if(event_release(Ads))
		{ 
			combo_stop (ARecoilS); 
		}
	}	
			
	if (PickupM)
    {
    	if (get_val(Pickupbutton)) 
        {
        	combo_run(Pickup);
        }
            else
        { 
            combo_stop(Pickup);
        }
            
    }
		
	if (RapidFire)
	{
		if (get_val(Ads))
		{
			combo_run(RapidFireS);
		}
			if (event_release(Ads))
		{
			combo_stop(RapidFireS);
		}
	}
          
	if (FastReset)
	{
    	if (!get_ival(Ads) && event_press(FastResetB)) 
    	{ 
        	combo_run(FastResetM);
     	}  
	}
		
	if (GhostPeeks)
	{
		if (get_val(Ads) && get_val(Right)) 
		{
			combo_run(GhostPeek);
			set_val(Right, 0);
		} 
			else 
		{
			combo_stop(GhostPeek);
		}
	}
		
    if (!MainMenu && get_ival(MenuEnterHold) && event_press(MenuEnterPress))
    {
		MenuToggle(On, On, On, On, Off);
    }
    
    if (MainMenu)
    {

        Scroll();
        combo_stop(Boot);
        MenuTimeout += get_rtime();
	
   if (get_ival(Up) || get_ival(Down) || get_ival(Left) || get_ival(Right) || event_press(MenuExitPress))
        {

            MenuTimeout = Off;
        }

   if (MenuTimeout >= TimeoutLimitM || event_press(MenuExitPress))
        {

            MenuToggle(Off, Off, Off, Off, Off);
        }

   if (event_press(ChangeMenuPress))
        {

            MenuValues = !MenuValues;
            MenuSwitch = !MenuSwitch;
            ModIndex = On;
            Update = On;
        }
	
   if (MenuValues)
        {

            ModDigit[ModIndex] = PrintMod(ModDigit[ModIndex], ModDigitMin[ModIndex], ModDigitMax[ModIndex], 1, IndexMinValues, IndexMaxValues, ModValue[ModIndex]);
        }

   if (MenuSwitch)
        {

            ModSwitch[ModIndex] = PrintMod(ModSwitch[ModIndex], Off, On, 1, IndexMinSwitches, IndexMaxSwitches, ModToggle[ModIndex]);
        }
        BlockButton(Down); BlockButton(Up); BlockButton(Left); BlockButton(Right); BlockButton(ChangeMenuPress);
	}    

    if (!MainMenu && Saver)
    {
        ScreenTime();
        Saver();
    }

    if (!MainMenu && get_ival(FindSlotHold) && event_press(FindSlotPress))
    {
        Saver = Off;
        ScreenTime = Off;
        Slot = On;
        combo_run(Boot);
    }

    if (ToggleTime)
    {
        TimeToggle();
    }

    if (Shunt)
    {
        if (event_release(Shunt))
        {
            Shunt = Off;
        }
        else
        {
            set_val(Shunt, Off);
        }
    }
}

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

 
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                      
                                                      
                                                      
 ██████╗ ██████╗ ███╗   ███╗██████╗  ██████╗ ███████╗ 
██╔════╝██╔═══██╗████╗ ████║██╔══██╗██╔═══██╗██╔════╝ 
██║     ██║   ██║██╔████╔██║██████╔╝██║   ██║███████╗ 
██║     ██║   ██║██║╚██╔╝██║██╔══██╗██║   ██║╚════██║ 
╚██████╗╚██████╔╝██║ ╚═╝ ██║██████╔╝╚██████╔╝███████║ 
 ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═════╝  ╚═════╝ ╚══════╝ 
                                                      
                                                      
                                                      
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                       
*/

combo AA1s 
{          
	set_val(10, (AA1_Strength)); wait(10)
	set_val(9, (AA1_Strength)); wait(10)
	set_val(10, AA1_Strength * -1); wait(10)
	set_val(9, AA1_Strength * -1); wait(10)
}

combo AA2s 
{ 
	set_val(Ads, 100);    
	wait(AA2_Hold);                
	set_val(Ads, 0);      
	wait(AA2_Rest);
}

combo AA4s 
{
	set_val(Ads, 100);
	wait(AA4_Hold);
	set_val(Ads, 0);
	wait(AA4_Release);
}

combo AA5s
{
	Set_Val(RX,Power);
	Set_Val(RY,Power);
	wait(AA5Delay);
	Set_Val(RX,Power * -1);
	Set_Val(RY,Power * -1);
	wait(AA5Delay);
}

combo GAAs 
{
	set_val(Ads, 100);
	wait(GAA_hold);
	set_val(Ads, 0);
	wait(GAA_release);
}

combo HFAAs 
{          
	set_val(10, (HFstrength)); wait(10)
	set_val(9, (HFstrength)); wait(10)
	set_val(10, HFstrength * -1); wait(10)
	set_val(9, HFstrength * -1); wait(10)
}

combo GhostPeek 
{
	set_val(Crouch,GPCrouch);
	wait(30);
	set_val(Crouch,GPCrouch);
	wait(30);
	set_val(Crouch,GPCrouch);
	wait(GPcooldown);
	wait(200);
}

combo FastResetM
{
	set_val(EditAssist,100);
    wait(40)
    set_val(Reset,100);        
    wait(40);
    combo_run(Confirm);
}

combo Confirm 
{
    set_val(Confirm,100);
    wait(50);
    set_val(Confirm,0);
    wait(100);
}

combo RapidFireS
{
	set_val(Fire, 100)
	wait(75);
	set_val(Fire, 0);
	wait(100);
}

combo ARecoilS 
{ 
		Anti_Recoil = get_val(10) + AntiRecoil;
		if(Anti_Recoil > 100) Anti_Recoil = 100;
		set_val(10, Anti_Recoil);
}

combo Pickup 
{
    set_val(Pickupbutton,200); 
    wait(5);
    set_val(Pickupbutton,0); 
    wait(1);
}

combo Boot
{

    wait(Slot);
    if (Slot == 20000)    
        cls_oled(0);
        
        if (Slot) {
        cls_oled(0);
        printf(5, 10, 0, 1, MiscString[3]);
        printf(5, 25, 0, 1, MiscString[4]);
        printf(18, 45, 0, 1, MiscString[5]);
        NumX = 32; NumY = 15; NumS = 0;
        FindDigit(get_slot(), DigitValue(get_slot()));
        Slot = Off;
    }

    wait(20000);
    cls_oled(0);
    Clear = On;
    Saver = On;
    ScreenTime = On;
}

combo VibrateBlink
{
    
    if (Modled) {
        set_rgb(255, 0, 0);
        set_rumble(RUMBLE_B, 70);
    }    
        else {
        set_rgb(0, 255, 0);
        set_rumble(RUMBLE_A, 35);
    }
    wait(150);
    set_rgb(0,0,0);
    wait(250);
    
    if (Modled)
        set_rgb(255,0,0);
    
        else
            set_rgb(0,255,0);

    reset_rumble();
    reset_leds();
}

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

                                                                                                                                                         
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                              
                                                                              
                                                                              
███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗    
██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝    
█████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗    
██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║    
██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║    
╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝    
                                                                              
                                                                              
                                                                              
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                                                                      
*/

function AA1Shake() 
{ 
	Angle1 = (Angle1 + AA1Speed) % 360;
	Set_polar(2,Angle1, AA1_Strength2);
}

function Set_polar(stick, angle, radius)
{
	x_stick = 8 + stick; 
	y_stick = 9 + stick;
	if(angle < 0) angle = 360 + (angle % 360);
	angle = (angle + 90) % 360;
	radius = clamp(radius, 0, 100);
	sin_angle = Polar_Array[angle];
	cos_angle = Polar_Array[(angle + 90) % 360];
	offset(x_stick, inv(radius * cos_angle / 100));
	offset(y_stick, inv(radius * sin_angle / 100));
	return;
}

function offset(int axis, int offset_val) 
{
	set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
	return
}

function Press(Button)
{

    if (get_ival(Button))
        return;
    set_val(Button, 100);
}

function Set_Val(Input, Output)
{

    set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
    return;
}

function Toggle(ModT, ModP)
{

    Modled = ModT;
    ToggleT = 0;
    ToggleTime = On;
    combo_run(VibrateBlink);

    if (ToggleName)
    {
        Saver = 0;
        cls_oled(0);
        printf(5, 2, 0, 1, MiscString[8]);
        rect_oled(0, 11, 128, 20, 0, 1);
        rect_oled(2, 13, 124, 16, 0, 1);
        rect_oled(0, 32, 128, 20, 0, 1);
        rect_oled(2, 34, 124, 16, 0, 1);
        printf(5, 17, 0, 1, ModP);

        if (ModT)
        {
            printf(36, 38, 0, 1, MiscString[7]);
        }
        else
        {
            printf(41, 38, 0, 1, MiscString[6]);
        }
        ToggleName = Off;
    }
}

function TimeToggle()
{

    ToggleT += get_rtime();

    if (ToggleT >= 3500)
    {
        cls_oled(0);
        ToggleTime = Off;
        ToggleT = 0;
    }
}

function Saver()
{
    if (Saver)
    {

        TimeS += get_rtime();

        for (ii = 0; ii <= 10; ii++)
        {
            putc_oled(1, Saver_Scroll[0][ii]);
            puts_oled(LineA + -30 + ii * 7, 2, 0, 1, 1);
        }

        for (jj = 0; jj <= 10; jj++)
        {
            putc_oled(1, Saver_Scroll[1][jj]);
            puts_oled(LineA + 100 + jj * 7, 15, 0, 1, 1);
        }

        for (ll = 0; ll <= 10; ll++)
        {
            putc_oled(1, Saver_Scroll[2][ll]);
            puts_oled(LineB + -50 + ll * 7, 28, 0, 1, 1);
        }

        for (oo = 0; oo <= 10; oo++)
        {
            putc_oled(1, Saver_Scroll[3][oo]);
            puts_oled(LineC + 10 + oo * 7, 41, 0, 1, 1);
        }

        for (xx = 0; xx <= 10; xx++)
        {
            putc_oled(1, Saver_Scroll[4][xx]);
            puts_oled(LineC + 127 + xx * 7, 53, 0, 1, 1);
        }

        if (TimeS == 50)
        {
            LineA += 2;
            LineB -= 2;
            LineC += 1;
            TimeS = 0;
        }
    }

    if (!Saver)
        cls_oled(0);
}

function ScreenTime()
{

    if (Clear)
    {
        Ms = 0; Sec = 0; Min = 0;
        Clear = Off;
    }

    if (ScreenTime)
    {
        Ms += get_rtime();

        if (Ms >= 1000)
        {
            Ms = 0;
            Sec += 1
        }
        if (Sec == 60)
        {
            Sec = 0;
            Min += 1;
        }
        if (Min == TimeoutLimit)
        {
            Saver = 0;
            Ms = 0;
            Sec = 0;
            Min = 0;
            ScreenTime = 0;
            cls_oled(0);
        }
    }
}

function BlockButton(Button)
{

    if (!get_ival(Button))
        return;
    set_val(Button, Off);
}

function MenuToggle(Main, Vals, Indx, Print, Toggle)
{

    cls_oled(0);
    MainMenu = Main;
    MenuValues = Vals;
    ModIndex = Indx;
    Update = Print;
    MenuSwitch = Toggle;
    MenuTimeout = Off;

    if (!MainMenu)
    {
        ScreenTime = 1;
        Saver = 1;
        Clear = On;
    }
}

function PrintMod(ModVal, ModValMin, ModValMax, ModValInc, IndexMin, IndexMax, ModValLbl)
{

    if (Update)
    {

        rect_oled(2, 2, 127, 46, 1, 0);
        Grid();
        printf(6, 25, 0, 1, MiscString[0]);
        NumX = -43; NumY = 10; NumS = -1;
        FindDigit(ModIndex, DigitValue(ModIndex));
        printf(5, 8, 0, 1, ModValLbl);

        if (MenuValues)
        {

            NumX = 0; NumY = 0; NumS = 0;
            FindDigit(ModVal, DigitValue(ModVal));
        }
        if (MenuSwitch)
        {

            if (ModVal)
            {

                printf(51, 24, 1, 1, MiscString[1]);
            }
            else
            {
                printf(46, 24, 1, 1, MiscString[2]);
            }
        }
        Update = Off;
    }

    if (event_press(Up) || get_ival(Up) && get_ptime(Up) >= 450)
    {

        Update = On;
        ModVal += ModValInc;

        if (ModVal >= ModValMax)
        {
            ModMonitor(ModValLbl);
            return ModValMax;
        }
    }

    if (event_press(Down) || get_ival(Down) && get_ptime(Down) >= 450)
    {

        Update = On;
        ModVal -= ModValInc;

        if (ModVal <= ModValMin)
        {
            ModMonitor(ModValLbl);
            return ModValMin;
        }
    }

    if (event_press(Right))
    {

        Update = On;
        ModIndex += 1;

        if (ModIndex > IndexMax) ModIndex = IndexMin;
    }

    if (event_press(Left))
    {
        Update = On;
        ModIndex -= 1;

        if (ModIndex < IndexMin) ModIndex = IndexMax;
    }
    return ModVal;
}

function ModMonitor(Mon)
{

    if (Mon == ModToggle[1])
    {
    }
    if (Mon == ModToggle[2])
    {
    }
    if (Mon == ModToggle[3])
    {
    }
    if (Mon == ModToggle[7])
    {
    }
}

function Grid()
{

    line_oled(126, 20, 2, 20, 2, 1);
    rect_oled(1, 1, 127, 63, 0, 1);
    line_oled(126, 46, 2, 46, 2, 1);
    line_oled(28, 20, 28, 46, 2, 1);
}

function Scroll()
{

    ScrollTime += get_rtime();

    if (ScrollTime >= ScrollWait)
    {
        ScrollWait = ScrollSpeed;

        for (ScrollIndex = 1; ScrollIndex <= 17; ScrollIndex++)
        {

            if (ScrollIndex + ScrollLine >= sizeof(Scroll))
            {
                putc_oled(ScrollIndex, Scroll[ScrollIndex + (ScrollLine - sizeof(Scroll))]);
            }
            else
            {
                putc_oled(ScrollIndex, Scroll[ScrollIndex + ScrollLine]);
            }
        }
        puts_oled(ScrollX, ScrollY, 0, ScrollIndex, 1);
        ScrollLine++;

        if (ScrollLine >= sizeof(Scroll))
        {
            ScrollLine = 0;
        }
        ScrollChar--;

        if (ScrollChar < 1)
        {
            ScrollChar = 17;
            ScrollWait = ScrollDelay;
        }
        ScrollTime = 0;
    }
}

function FindDigit(Digit, Digits)
{

    if (Digit < 0)
    {
        putc_oled(Number, 45);
        Number += 1;
        Digit = abs(Digit);
        Count = 1;
    }
    else
        Count = 0;

    if (Digits == 5)
    {
        putc_oled(Number, FontDigits[Digit / 10000]);
        Digit = Digit % 10000;
        Number += 1;
    }
    if (Digits >= 4)
    {
        putc_oled(Number, FontDigits[Digit / 1000]);
        Digit = Digit % 1000;
        Number += 1;
    }
    if (Digits >= 3)
    {
        putc_oled(Number, FontDigits[Digit / 100]);
        Digit = Digit % 100;
        Number += 1;
    }
    if (Digits >= 2)
    {
        putc_oled(Number, FontDigits[Digit / 10]);
        Digit = Digit % 10;
        Number += 1;
    }
    putc_oled(Number, FontDigits[Digit]);
    puts_oled(CenterMod(Digits + Count, 1) + NumX, 25 + NumY, 1 + NumS, Number, 1);
    Number = 1;
}

function DigitValue(Number)
{

    Number = abs(Number);
    if (Number / 10000 > 0) return 5;
    if (Number / 1000 > 0) return 4;
    if (Number / 100 > 0) return 3;
    if (Number / 10 > 0) return 2;
    return 1;
}

function CenterMod(Character, Font)
{
    Position = Character * FontSize[Font][0];
    Position = (127 - Position) / 2;
    return Position;
}

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝


█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝
                              
                              
                              
 █████╗ ███████╗ ██████╗██╗██╗
██╔══██╗██╔════╝██╔════╝██║██║
███████║███████╗██║     ██║██║
██╔══██║╚════██║██║     ██║██║
██║  ██║███████║╚██████╗██║██║
╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝╚═╝
                              
                              
                              
█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝                                                           
*/

define SPACE = 32; /*¦¦       ¦¦*/	define _0 = 48, A = 65, K = 75, U = 85, e = 101, o = 111, y = 121;
define EXCLAMATION = 33; /*¦¦   !   ¦¦*/	define _1 = 49, B = 66, L = 76, V = 86, f = 102, p = 112, z = 122;
define QUOTE = 34; /*¦¦   "   ¦¦*/	define _2 = 50, C = 67, M = 77, W = 87, g = 103, q = 113;
define HASH = 35; /*¦¦   #   ¦¦*/	define _3 = 51, D = 68, N = 78, X = 88, h = 104, r = 114;
define DOLLAR = 36; /*¦¦   $   ¦¦*/	define _4 = 52, E = 69, O = 79, Y = 89, i = 105, s = 115;
define PERCENT = 37; /*¦¦   %   ¦¦*/	define _5 = 53, F = 70, P = 80, Z = 90, j = 106, t = 116;
define AND = 38; /*¦¦   &   ¦¦*/	define _6 = 54, G = 71, Q = 81, a = 97, k = 107, u = 117;
define APOSTROPHE = 39; /*¦¦       ¦¦*/	define _7 = 55, H = 72, R = 82, b = 98, l = 108, v = 118;
define O_BRACKET = 40; /*¦¦   (   ¦¦*/	define _8 = 56, I = 73, S = 83, c = 99, m = 109, w = 119;
define C_BRACKET = 41; /*¦¦   )   ¦¦*/	define _9 = 57, J = 74, T = 84, d = 100, n = 110, x = 120;
define ASTERISK = 42; /*¦¦   *   ¦¦*/
define PLUS = 43; /*¦¦   +   ¦¦*/
define COMMA = 44; /*¦¦   ,   ¦¦*/
define MINUS = 45; /*¦¦   -   ¦¦*/
define FULLSTOP = 46; /*¦¦   .   ¦¦*/
define F_SLASH = 47; /*¦¦   /   ¦¦*/
define COLON = 58; /*¦¦   :   ¦¦*/
define SEMICOLON = 59; /*¦¦   ;   ¦¦*/
define B_ARROW = 60; /*¦¦   <   ¦¦*/
define EQUAL = 61; /*¦¦   =   ¦¦*/
define F_ARROW = 62; /*¦¦   >   ¦¦*/
define QUESTION = 63; /*¦¦   ?   ¦¦*/
define AT = 64; /*¦¦   @   ¦¦*/
define O_SQUARE = 91; /*¦¦   [   ¦¦*/
define b_SLASH = 92; /*¦¦   \   ¦¦*/
define C_SQUARE = 93; /*¦¦   ]   ¦¦*/
define U_ARROW = 94; /*¦¦   ^   ¦¦*/
define UNDERSCORE = 95; /*¦¦   _   ¦¦*/
define TICK = 96; /*¦¦   `   ¦¦*/
define O_CURLY = 123; /*¦¦   {   ¦¦*/
define BAR = 124; /*¦¦   |   ¦¦*/
define C_CURLY = 125; /*¦¦   }   ¦¦*/
define WAVE = 126; /*¦¦   ~   ¦¦*/
define CROSS = 127; /*¦¦   PS  ¦¦*/
define CIRCLE = 128; /*¦¦   PS  ¦¦*/
define SQUARE = 129; /*¦¦   PS  ¦¦*/
define TRIANGLE = 130; /*¦¦   PS  ¦¦*/
define UP = 131; /*¦¦ PS+XB ¦¦*/
define DOWN = 132; /*¦¦ PS+XB ¦¦*/
define LEFT = 133; /*¦¦ PS+XB ¦¦*/
define RIGHT = 134; /*¦¦ PS+XB ¦¦*/
define VIEW = 135; /*¦¦   XB  ¦¦*/
define MENU = 136; /*¦¦   XB  ¦¦*/

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

                                                                                             
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝
                                                                                                
                                                                                                
                                                                                                
███████╗ ██████╗██████╗  ██████╗ ██╗     ██╗          █████╗ ██████╗ ██████╗  █████╗ ██╗   ██╗  
██╔════╝██╔════╝██╔══██╗██╔═══██╗██║     ██║         ██╔══██╗██╔══██╗██╔══██╗██╔══██╗╚██╗ ██╔╝  
███████╗██║     ██████╔╝██║   ██║██║     ██║         ███████║██████╔╝██████╔╝███████║ ╚████╔╝   
╚════██║██║     ██╔══██╗██║   ██║██║     ██║         ██╔══██║██╔══██╗██╔══██╗██╔══██║  ╚██╔╝    
███████║╚██████╗██║  ██║╚██████╔╝███████╗███████╗    ██║  ██║██║  ██║██║  ██║██║  ██║   ██║     
╚══════╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝     
                                                                                                
                                                                                                
                                                                                                
█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗
╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝                                                                                                                                                                                                                                                                               
*/

const uint8 FontSize[][] = { { 7, 10, 18 },{ 11, 18, 11 },{ 16, 26, 7 } };
const uint8 FontDigits[] = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };
const string MiscString[] = { "MOD" , "ON" , "OFF" , "MADE BY GHOSTY" , "FOLLOW @GHOSTYFC + @CONSOLEARAB" , "ON TWITTER" , "V2.O" , "GPC Slot:", "Enabled", "Disabled", "Mod Toggle On/Off" };
const string ModToggle[] = { "AA1","AA2","AA3","AA4", "AA5","TrackingAA","HipFireAA","ARecoil","GhostysAA", "ARecoil", "RapidFire", "GhostPeeks", "FastReset", "PickupM"};
const string ModValue[] = { "AA1","AA2","AA3","AA4", "AA5","TrackingAA","HipFireAA","ARecoil","GhostysAA","ARecoil","RapidFire","GhostPeeks", "FastReset","PickupM"};
const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
const int16 ModDigitMin[] = { 0, 1, 1, 10, 1, 20, 10, 1, 40, 50, 50, 30, 30, 100, 10, 20, 1000 };
const int16 ModDigitMax[] = { 0, 40, 40, 150, 80, 750, 60, 100, 1500, 3000, 3000, 1000, 1000, 200, 200, 100, 9000 };
const string AntiRecoilL = "Master AntiRecoil";
const string FireModL = " Master Fire Mod";
define TimeoutLimit = 2;
define TimeoutLimitM = 20000;
define IndexMinSwitches = 1;
define IndexMaxSwitches = 16;
define IndexMinValues = 1;
define IndexMaxValues = 16;
int Position, Update, MenuTimeout, Count, MainMenu, ModIndex, MenuValues, MenuSwitch, NumX, NumY, NumS, Clear, Shunt;
int Number = 1, Slot = 20000;
int ScrollTime, ScrollWait, ScrollLine, ScrollIndex, ScrollChar;
int ScrollSpeed = 70;
int ScrollDelay = 950;
int ScrollX = 8;
int ScrollY = 50;
int ToggleT, ToggleTime, ToggleName, Modled, AntiRecoilMod, DropShotMod, StrafeShotMod, FireMod;
int power,Ypower,Xpower,Power,CountPower,AxisXY,Increment;
int LineA, LineB, LineC, ii, jj, ll, oo, xx, TimeS;
int x_stick, y_stick, cos_angle, sin_angle;
int Saver, Ms, Sec, Min, ScreenTime;
int ModDigit, AA5Speed, AxisAim, Angle1;


const uint8 Scroll[] = {/* 
 ¦¦> 0 < ¦¦  ¦¦> 1 < ¦¦  ¦¦> 2 < ¦¦  ¦¦> 3 < ¦¦  ¦¦> 4 < ¦¦  ¦¦> 5 < ¦¦  ¦¦> 6 < ¦¦  ¦¦> 7 < ¦¦  ¦¦> 8 < ¦¦  ¦¦> 9 < ¦¦ ¦¦> 10 < ¦¦ ¦¦> 11 < ¦¦ ¦¦> 12 < ¦¦ ¦¦> 13 < ¦¦ ¦¦> 14 < ¦¦ ¦¦> 15 < ¦¦ ¦¦> 16 < ¦¦*/
    SPACE   ,  SPACE   ,  TRIANGLE ,   SPACE   ,     O     ,     r     ,   SPACE   ,     Y     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     E     ,     x     ,     i     ,     t     ,   SPACE   ,
    SPACE   ,  CROSS   ,   SPACE   ,     O     ,     r     ,   SPACE   ,     A     ,   SPACE   ,     T     ,     o     ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,    MENU   ,
    SPACE   ,   UP     ,   SPACE   ,     O     ,     r     ,   SPACE   ,   DOWN    ,   SPACE   ,     T     ,     o     ,   SPACE   ,     A     ,     d     ,     j     ,     u     ,     s     ,     t     ,
    SPACE   ,  LEFT    ,   SPACE   ,     O     ,     r     ,   SPACE   ,   RIGHT   ,   SPACE   ,     N     ,     e     ,     x     ,     t     ,   SPACE   ,     M     ,     o     ,     d     ,   SPACE   };

const uint8 Saver_Scroll[][] = {/*
    ¦¦ 0 ¦¦  1 ¦¦  2 ¦¦  3 ¦¦  4 ¦¦  5 ¦¦  6 ¦¦  7 ¦¦  8  ¦¦  9  ¦¦  10 ¦¦ */
    { SPACE,  P  ,  S  ,SPACE,  v  ,SPACE,  X  ,  B  ,  O   ,  X   ,SPACE},
    { SPACE,  Z  ,  E  ,  N  ,SPACE,  v  ,SPACE,  M  ,  A   ,  X   ,SPACE},
    { F  ,  O  ,  R  ,  T  ,  N  ,  I  ,  T  ,  E  , HASH , _1   ,SPACE},
    { C  ,  O  ,  D  ,SPACE,  v  ,SPACE,  A  ,  P  ,  E   ,  X   ,SPACE},
    { A  ,  B  ,  X  ,  Y  ,SPACE,  v  ,SPACE,CROSS,CIRCLE,SQUARE,TRIANGLE}  
};

/*

╔═╗╔═╗╦  ╦  ╔═╗╦ ╦  ╦ ╦╔═╗  ╔═╗╔╗╔  ╔╦╗╦ ╦╦╔╦╗╔╦╗╔═╗╦═╗        
╠╣ ║ ║║  ║  ║ ║║║║  ║ ║╚═╗  ║ ║║║║   ║ ║║║║ ║  ║ ║╣ ╠╦╝ o       
╚  ╚═╝╩═╝╩═╝╚═╝╚╩╝  ╚═╝╚═╝  ╚═╝╝╚╝   ╩ ╚╩╝╩ ╩  ╩ ╚═╝╩╚═ o       
╔═╗╦ ╦╔═╗╔═╗╔╦╗╦ ╦╔═╗╔═╗     ╔═╗╔═╗╔╗╔╔═╗╔═╗╦  ╔═╗  ╔═╗╦═╗╔═╗╔╗ 
║ ╦╠═╣║ ║╚═╗ ║ ╚╦╝╠╣ ║       ║  ║ ║║║║╚═╗║ ║║  ║╣   ╠═╣╠╦╝╠═╣╠╩╗
╚═╝╩ ╩╚═╝╚═╝ ╩  ╩ ╚  ╚═╝  ┘  ╚═╝╚═╝╝╚╝╚═╝╚═╝╩═╝╚═╝  ╩ ╩╩╚═╩ ╩╚═╝

*/