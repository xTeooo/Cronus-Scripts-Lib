/*https://www.python.org/ftp/python/3.10.1/python-3.10.1-amd64.exe Vendetta AIMBOT Computer Vision.py Zen script by Notoriouscriptz.com

                                         `mNMMMMMMNMMMMMMNNNMMNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMdy.`                             
                                   `hmMMMMMNNNNMNNNNNMMNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMNNNNmh-                             
                                    :yNMMMMNNNMMNNNNMMMMMNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNMMMMMMMMMMMNMMMNNNNNNNN/.                            
                                    `/yNNMNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMNNMMMMMMMMNMNNNNNNNNNNNNNNNm/`                            
                                     `.yhmNNNNNNNNNNMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMNNNMNNMMMMNNNNNNNNNNNNNmNNNNNNNNmh-`                             
                                       `-+hmNMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMNNNNNNNNNNMMNNNmh+:                               
                                          -/ymMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNMNNNNmNNmNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmdo/.                                 
                                            `/omNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNmmNNNNNmNNMMMNNNNNNNMMMMMMMMNNMMMMMMMNNNmdhy/:-`                                   
                                              `-/ommmNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMNNNNNNNMMMMMMMMMMMMMMMMMMNMNNNmmdhyo/-..                                       
                                                  .-:+shhhdmmNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNmmdhhyy+/:..`                                            
                                                       ```.-:+oymmmmmmmmmmmNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdddddhyy++/:-.``                                                  
                                                              /yNNNNNNNmmmmmmmNNNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNmddhhhhhddddddy+-``                                                        
                                                             /yNMMMMMMMMMMMMMMNmhddmNNNMMMMMMMMMNNNNNNMMMMMMMMMMMMMMMMMMNNmdhdmNNNNNNNMMMMN/-                                                           
                                                            `dNMMMMMMMMMMMMMMMNh.`      ````...:/syy+//////::::--..```       ydMMMMMMMMMMNm+-                                                           
                                                            `mNMMMMMMMMMMMMMMMNh:`              `/++                         hmMMMMMMMMMMNN+-                                                           
                                                           -/MMMMMMMMMMMMMMMMMNdo-`             `+oo                         mNMMMMMMMMMMNN+-                                                           
                                                          .smMMMMMMMMMMMMMMMMMNd+/:.`         `.:sss                       :+MMMMMMMMMMMMNms/                                                           
                                                         `smMMMMMMMMMMMMMMMMMMMd+/+hs+:.`..`.:s+/sss      ```     ```....-.ohMMMMMMMMMMMMNNs/                                                           
                                                         .dNMMMMMMMNNMMMMMMMMMMMm/:oyhdo-`` `-s--hso             ``..sy/oo:ymMMMMMMMMMMMMMNy+`                                                          
                                                        `-NMMMMMMMMysodmMMMMMMMMMho.:/dhy/-`  ```so+     `        ./yys:-:+dMMMMMMMMMMdhmNMds:`                                                         
                                                        ohMMMMMMMMMmy--:ydNMMMMMMMm:-.osyddhso/:/yhdo/:syy/-```-:+hhh:-:.-mNMMMMMMMmd+::mNMNho.`                                                        
                                                      `.dMMMMMMMMMMMNd+-./oNNMMMMMMm+.-/+/ohdmmmmNNNs+-dNMmmhhddddy+-:-`+sMMMMMMMmh/-.ohMMMNmy+:`                                                       
                                                      `-dMMMMMMMMMMMMMNd-.`/smMMMMMMmh`-:/:.--/osyso`` :+hddhhho:.`.:..-hMMMMMMNs+`.-hNMMMMMNNyo:`                                                      
                                                     ./hNMMMMMMMMMMMMMMMdo: .:dmMMMMMMs: ://.`           ````     ..`./dNMMMMNh+``-shMMMMMMMMMmdy:`                                                     
                                               `-:ooshmMMMMMMMMMMMMMMMMMMNm/- -+dNMMMMMh+`.:..    ``:-.-.`       ```.ydMMMMNm:- :+hNMMMMMMMMMMNmh+:                                                     
                                            .shdmmNMMMMMMMMMMMMMMMMMMMMMMMMmy+``.ydMMMMMN:-`..     `dmmho         `/dNMMMMNo- .:hmMMMMMMMMMMMMMNmyo:.                                                   
                                         `/sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNms/` .ymMMMMMh/.`    `-NNMy+       `-mNMMMMdy ``+ymMMMMMMMMMMMMMMMMNmdhs+.`                                                
                                      `:+yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmh:`  /sMMMMMNs/`   :oMNmNy`     -smMMMMms-` -/mNMMMMMMMMMMMMMMMMMMNNNmmds/.`                                             
                                   `:+smNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmy:`  `+hMMMMNd+.  -/MNNNy    .:mNMMMMs/   .+yMMMMMMMMMMMMMMMMMMMMMMMNNMNNhso/:.`                                        
                               `./sdmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNyo``  ./mNMMMNs+``.MMMy+ `./ymMMMNh/`  `.odNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmdhy+/-`                                   
                            .:+ydNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmo-`   -+dMMMNNho+NMMyo/shNMMMNd:.   `/oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNyo:.`                               
                         `-/dmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNy+`   `-ydMMMMNNMMMNNNMMMMMh+.   `.+dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmyo/:-`                           
                       `.shMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo:`   `-ymMMMMMMMMMMMMMhs``  ``+yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmdy+:`                        
                      .ohMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNds--.```/sNMMMMMMMMNmo-` `../smMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmyo:`                     
                     .ymMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNyys/- `.ohNMMMMMNo:` `/+oyhNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmo/`                   
                    :oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdys:.` -/NNMmy:` `-/yhdMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmy-`                 
                  `.ymMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmdo/`  /+y-` `.oydmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMho                 
                  -ymMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmds:`  `  `+ymNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd:`               
                 :oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNo-   `-ymNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd:               
                `dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm/.  `.syyyhMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNs/              
               -oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmo:   .:os+.`.sdMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmh``            
              .+NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmy:`  `.+oo+:`   :oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm+-            
              ohMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmh:.   .:/oyho+/.`   :yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNy+.           
              ydMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmmMMMMMMMMNy+`   `.:/+mNMdy/:-`   .-dNMMMMMMMMNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMds/           
              dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm+oNMMMMMNds.`  ``.-+ymMMMMNh+:-.`   -+dNMMMMMNmydMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNho.`         
              dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmh+sMMMMNm+-``` `.-/omNMMMMMMMdy/-.`` ``.shMMMMNN-sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmd/-         
            `.NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNm/+mNNmo:   ``.-:odNMMMMMMMMMMNds/..``  `-smMMNm/yNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNo:         
            :sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmmN+/-ss-`    `../sNMMMMMMMMMMMMMMmd:-.`    `/sms:shMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMds-`       
           `oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNy+::+ss+-.`      `-+mNMMMMMMMMMMMMMMMMMdo-``    ``..-yhhoo+hmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd+`       
           +hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhs+----:/::---`` -oNMMMmmMMMMMMMMMNNNMMMmh.` ....-:///:-..-oyMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNd.       
          `mNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdmmNhs:+so+--:+ss+:`/odmdh+/NMMMMMMMMdh/ymNNm/:.+oso/---//+:/smNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.       
          `NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNmddmmNdyooommdo+:/+hyy:-:///shMMMMMMMMMNmo+++++:+yyyo/:/oydhs+ohNNhhhNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmy+`  
                                                                    
                                                                    - VENDETTA COMPUTER VISION AIMBOT .PY VERSION 1.3  by NOTORIOUS -
 
          
                                                   ██▒   █▓   ▓█████     ███▄    █    ▓█████▄    ▓█████    ▄▄▄█████▓   ▄▄▄█████▓    ▄▄▄      
                                                  ▓██░   █▒   ▓█   ▀     ██ ▀█   █    ▒██▀ ██▌   ▓█   ▀    ▓  ██▒ ▓▒   ▓  ██▒ ▓▒   ▒████▄    
                                                   ▓██  █▒░   ▒███      ▓██  ▀█ ██▒   ░██   █▌   ▒███      ▒ ▓██░ ▒░   ▒ ▓██░ ▒░   ▒██  ▀█▄  
                                                     ▒██ █░░   ▒▓█  ▄    ▓██▒  ▐▌██▒   ░▓█▄   ▌   ▒▓█  ▄    ░ ▓██▓ ░    ░ ▓██▓ ░    ░██▄▄▄▄██ 
                                                     ▒▀█░     ░▒████▒   ▒██░   ▓██░   ░▒████▓    ░▒████▒     ▒██▒ ░      ▒██▒ ░     ▓█   ▓██▒
                                                     ░ ▐░     ░░ ▒░ ░   ░ ▒░   ▒ ▒     ▒▒▓  ▒    ░░ ▒░ ░     ▒ ░░        ▒ ░░       ▒▒   ▓▒█░
                                                     ░ ░░      ░ ░  ░   ░ ░░   ░ ▒░    ░ ▒  ▒     ░ ░  ░       ░           ░         ▒   ▒▒ ░
                                                       ░░        ░         ░   ░ ░     ░ ░  ░       ░        ░           ░           ░   ▒   
                                                       ░        ░  ░            ░       ░          ░  ░                                 ░  ░
                                                        ░                               ░                                                     
                                   
                                                                        
                     ┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━♔━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
                                                                      OPEN OLED MENU        |         HOLD OPTIONS 
                                                                        SELECT CHEAT        |           X/A
                                                                        ENABLE MOD          |         Right D-Pad         
                                                                         BACK OUT           |          Cirle/B
                                                                      CLOSE OLED MENU       |         HOLD OPTIONS
                      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━QUICK TOGGLES━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                                                                       RAPID FIRE           |         LEFT-DPED + X
                                                                    AKIMBO RAPID FIRE       |      LEFT D-PAD + SQUARE
                                                                     COMPUTER VISION        |       HOLD L2 + OPTIONS
                     ┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━♔━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙
                                                                                                                                   

                                     

*/ //QUICK TOGGLE DEFINE BUTTONS
               
define ON_OFF_BUTTON 			        = PS4_LEFT;                   define NOTORIOUS_RAPID_FIRE 			    = PS4_CROSS;
                                                                     
define AKIMBO_NOTORIOUS_RAPID_FIRE 	    = PS4_SQUARE;                 define JITTERS_BUTTON 				    = PS4_CIRCLE;                

define PING_BUTTON					    = PS4_UP;                     define ZIGZAG_DOUBLE_PRESS	            = PS4_LEFT;

define CROUCH_BUTTON 				    = PS4_CIRCLE;                 define JUMP_BUTTON  				        = PS4_CROSS;

define SWAP_BUTTON					    = PS4_TRIANGLE;               define MELEE_BUTTON					    = PS4_R3;

define SPRINT_BUTTON				    = PS4_L3;                     define CW_COMPUTER_VISIONZ2    			=  80;	

define CVx1COMPUTER_VISIONZ2 			=  80;                                                                                                             

int RESET_SLOT_DATA					                    = 204;
int USE_QUICK_SCOPE					                    = FALSE; // SET TO TRUE IF YOU WANT QUICK SCOPE ENABLED BY DEFAULT	
int RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON 		= FALSE; // SET TO TRUE IF YOU WANT RAPID FIRE ON BOTH GUNS


/*
import os
import sys
import platform
import setuptools

SCRIPT_DIR=os.path.dirname(os.path.abspath(__file__))

def main():
    os.chdir(SCRIPT_DIR)

    package_name = 'opencv'
    package_version = os.environ.get('OPENCV_VERSION', '4.5.4')  # TODO

    long_description = 'Open Source Computer Vision Library Python bindings'  # TODO

    setuptools.setup(
        name=package_name,
        version=package_version,
        url='https://github.com/opencv/opencv',
        license='Apache 2.0',
        description='OpenCV python bindings',
        long_description=long_description,
        long_description_content_type="text/markdown",
        packages=setuptools.find_packages(),
        maintainer="OpenCV Team",
        install_requires="numpy",
        classifiers=[
          'Development Status :: 5 - Production/Stable',
          'Environment :: Console',
          'Intended Audience :: Developers',
          'Intended Audience :: Education',
          'Intended Audience :: Information Technology',
          'Intended Audience :: Science/Research',
          'License :: Apache 2.0 License',
          'License :: Vendetta 1.4 License'
          'Operating System :: MacOS',
          'Operating System :: Microsoft :: Windows',
          'Operating System :: POSIX',
          'Operating System :: Unix',
          'Programming Language :: Python',
          'Programming Language :: Python :: 2',
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3',
          'Programming Language :: Python :: 3.4',
          'Programming Language :: Python :: 3.5',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: 3.8',
          'Programming Language :: Python :: 3.9',
          'Programming Language :: C++',
          'Programming Language :: Python :: Implementation :: CPython',
          'Topic :: Scientific/Engineering',
          'Topic :: Scientific/Engineering :: Image Recognition',
          'Topic :: Software Development',
          'Topic :: Software Development :: Libraries',
        ],
    )

if __name__ == '__main__':
    main()
Traceback (most recent call last):
  File "test.py", line 13, in <module>
    img[30:180, 91:256] = eye
ValueError: could not broadcast input array from shape (0,0,3) into shape (150,165,3)
In [13]: img2[:100, :100]=roi
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-13-85de95cf3ded> in <module>()
----> 1 img2[:100, :100]=roi

ValueError: could not broadcast input array from shape (200,100,3) into shape (100,100,3)
In [13]: img2[:100, :100]=roi
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-13-85de95cf3ded> in <module>()
----> 1 img2[:100, :100]=roi

ValueError: could not broadcast input array from shape (200,100,3) into shape (100,100,3)

import numpy as np
numpy_zeros = np.zeros(shape=(6, 6))
print(numpy_zeros)
cv2.imshow('PS4 shareplay'PC capture card null, image)
 cv2.waitKey()
 cv2.destroyAllWindows()
 
*/

                                                                                                                                                                                                                                                                                                                                                        const image NOTORIOUSCRIPTZ = {128, 64, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xC0, 0x00, 0x3F, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFC, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x0F, 0xFC, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x07, 0xFC, 0xFF, 0xFF, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x03, 0xF8, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x80, 0xFF, 0xF8, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x20, 0xFF, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x74, 0xFF, 0xC0, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x08, 0x04, 0x1C, 0xFF, 0x84, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x04, 0x02, 0x00, 0x06, 0x14, 0x02, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x02, 0x02, 0x00, 0x00, 0x28, 0x0C, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x03, 0x01, 0x20, 0xC0, 0x40, 0x18, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01, 0x80, 0x8F, 0xF7, 0x90, 0x30, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0xC0, 0x8F, 0xFF, 0xA0, 0x60, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x60, 0x4E, 0x0F, 0xC0, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x30, 0x2F, 0x1F, 0x81, 0x80, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x18, 0x0F, 0x1F, 0x83, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x0C, 0x0E, 0x1F, 0x06, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x1E, 0x0E, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x07, 0x06, 0x1C, 0x0C, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x03, 0x03, 0x18, 0x1C, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x38, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x70, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x80, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x7C, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F};
                                                                                                                                                                                                                                                                                                                                                                  const image NOTORIOUSCRIPTZ1 = {119, 38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x1F, 0xE0, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x01, 0xFC, 0x3E, 0x3E, 0x0E, 0x00, 0x38, 0x3E, 0x7F, 0xE3, 0xFF, 0x8F, 0xF8, 0x7F, 0xC7, 0x07, 0xFC, 0x7C, 0x7C, 0x7F, 0x80, 0x78, 0x7C, 0xFF, 0xC7, 0xFF, 0x3F, 0xF8, 0xFF, 0xCF, 0x1F, 0xFC, 0xF8, 0xF9, 0xFF, 0x80, 0xF0, 0xF3, 0xFF, 0xCF, 0xFE, 0x7F, 0xF1, 0xFF, 0xDC, 0x3F, 0xFD, 0xF1, 0xF3, 0xFF, 0x03, 0xF1, 0xF7, 0xCF, 0x1F, 0xF9, 0xF9, 0xE3, 0xFF, 0xBC, 0x7C, 0xF3, 0xE3, 0xE3, 0x1F, 0x07, 0xE3, 0xEF, 0x8E, 0x07, 0xC3, 0xE3, 0xC7, 0x9F, 0x79, 0xF1, 0xE7, 0xC7, 0xDF, 0x1C, 0x0F, 0xE7, 0xDF, 0x1E, 0x0F, 0x87, 0xC7, 0xCE, 0x1F, 0xF3, 0xE3, 0xEF, 0x8F, 0x9E, 0x00, 0x1F, 0xCF, 0xBE, 0x3C, 0x1F, 0x0F, 0x8F, 0x1C, 0x3D, 0xE7, 0xC7, 0xDF, 0x1F, 0x0F, 0x00, 0x3F, 0xDF, 0x7C, 0x78, 0x3C, 0x1F, 0x1E, 0x3C, 0xFB, 0xCF, 0x8F, 0xBE, 0x3E, 0x1F, 0x00, 0x7F, 0xBC, 0xF8, 0xF0, 0x7C, 0x3E, 0x3E, 0x7F, 0xE7, 0x9F, 0x1F, 0x7C, 0x7C, 0x3F, 0x80, 0xFF, 0xF9, 0xF1, 0xE0, 0xF8, 0x7C, 0x7C, 0xFF, 0x8F, 0x1E, 0x3E, 0xF8, 0xF8, 0x7F, 0x81, 0xE7, 0xFB, 0xE3, 0xC1, 0xE0, 0xF8, 0xF9, 0xFF, 0x9E, 0x7C, 0x7D, 0xF1, 0xF0, 0x3F, 0x03, 0xCF, 0xE7, 0xC7, 0x83, 0xC1, 0xF1, 0xF3, 0xCF, 0xBC, 0xF8, 0xFB, 0xE3, 0xE0, 0x3F, 0x07, 0x8F, 0xCF, 0x8F, 0x07, 0x83, 0xE3, 0xE7, 0x8F, 0x78, 0xF1, 0xF3, 0xC7, 0xFE, 0x3E, 0x0F, 0x1F, 0xCF, 0x3E, 0x0F, 0x01, 0xC7, 0xCF, 0x1E, 0xF0, 0xF3, 0xE7, 0x87, 0xAE, 0x7C, 0x1E, 0x1F, 0x9F, 0xFC, 0x1E, 0x07, 0xFF, 0x9E, 0x39, 0xE3, 0xFF, 0xCF, 0xFE, 0x7F, 0xF8, 0x3C, 0x3F, 0x3F, 0xF8, 0x3C, 0x0F, 0xFE, 0x3C, 0x41, 0xC7, 0xFF, 0x1F, 0xFC, 0xFF, 0xE0, 0x78, 0x3C, 0x7F, 0xE0, 0x70, 0x0F, 0xFC, 0x78, 0xF3, 0x07, 0xFE, 0x1F, 0xF0, 0xFF, 0x80, 0xF8, 0x38, 0x3F, 0x80, 0xC0, 0x0F, 0xF0, 0xF1, 0xFF, 0x07, 0xF8, 0x1F, 0xC0, 0x7E, 0x00};


                                                                                                                                                               






                                                                                                                                                                                                                                                                                                                                                                                            const string STATE[] =                                       { "OFF", "ON", "" }
                                                                                                                                                                                                                          const string MAX_MIN[] =                                     { "HIGH: ", "LOW: ", "" }
                                                                                                                                                                                                                                                                        const string Menu[] =                                        { "Controller", "HEAD PING", "NO RECOIL", "POLAR" ,
		                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "AIMBOT", "VISIONTRACE", "EVIL AIM", "CHEATS","Notoriouscriptz", "" }
                                                                                                                                                                                                                          const string CONTROLLER[] =                                  { "Flipped TR", "Hair TR","RUMBLE", "INVERTED", "" }
                                                                                                                                                                                                                                                                                                                                                   const string MOVE[] =                                        { "AUTO", "TIME", "POWER", "SWAY" ,"" }
                                                                                                                                                                                                                          const string SE_AR[] =                                       { "TYPE", "STRENGHT","" }
                                                                                                                                                                                                                                                                                                                                                                                                               const string SE_AR_T[] =                                     { "Disabled","NOTORIOUS AR", "RUMBLE AR","" }
                                                                                                                                                                                                                          const string UNFAIR_AIM[] =                                  { "Type" , "Angle" , "Radius", ""}
                                                                                                                                                                                                                                                                                                                                                       const string UNFAIR_AIM_T[] =                                { "Regular", "XII Angle" , "XII Radius", "Notorious P", ""}
                                                                                                                                                                                                                          const string PYTHONCVOPENCV[] =                              { "AIM BONE", "SHAPE", "POWER","" }
                                                                                                                                                                                                                                                                                                                                                               const string PYTHONCVOPENCV_SUB_T[] =                        { "Disabled", "SILENT", "ARM","LEG","CHEST","STICKY","HEADSHOT", "RANDOM","" }
                                                                                                                                                                                                                          const string PYTHONCVOPENCV_SUB_C[] =                        { "Circular", "Square", "triangle",""}
                                                                                                                                                                                                                                                                                                                                                        const string PYTHONCV_SCAN[] =                              { "PythonCV", "STRENGHT","" }
                                                                                                                                                                                                                          const string PYTHONCV_pipgetupdate6T[] =                            { "Disabled", "x3","x2","x1","" }
                                                                                                                                                                                                                          const string SA[] =                                          { "TYPE","RES","" }
                                                                                                                                                                                                                          const string SA_T[] =                                        { "Disabled", "LASER", "RANDOM", "VENDETTA", "" }
                                                                                                                                                                                                                          const string MODS[] =                                        { "Slide C.", "Rapid fire", "Quick scope", "Turbo melee",
		                                                                                                                                                                                                                                                                                 "Hold breath", "Bunny hop", "Easy plate", "Auto ping","Fast run","Dance","" }		
                                                                                                                                                                                                                          const string SLIDE_C[] =                                     { "Disabled", "Warzone", "MW Rumble", "CW Classical",
		                                                                                                                                                                                                                                                                                 "CW Rumble","" }
		
                                                                                                                                                                

define DISABLED						= 0;
define ENABLED						= 1;int USE_PYTHONCV_MOVE_SENSITIVITY;int PYTHONCV_MOVEMENT_THRESHOLD;int FRONTAL_MVT_SENS;
int DRIFT_MVT_SENS;		int NOTORIOUS_VENDETTA		;int NOTORIOUS_VENDETTAX;int NOTORIOUS_VENDETTAXQ ;int NOTORIOUS_PYTHO90N	;int SCRIPTKILL3R	;int PIP_INSTALL_OPENCV	;int PIP_INSTALL_HEADCAL	;int PIP_INSTALL_COMPUTERVISION	;
int PIP_GET_UPDATE2    ;define COMPUTER_VISIONZ2 					= 120;define ONETAP_VENDETTA 		= 160;int SHELL_RUN_DELAY	;define BASIC       					= 0x00; define PYTHONCV						= 0x01; define HEADSH0TXZ 					= 0x02; 
define NOTORIOUSCRIPTZPIPX     				= 0x03;  
define SLOW_TRIG	 				= 0x04; 
define RANDOM	 					= 0x05; 
int RMode							= NOTORIOUSCRIPTZPIPX;int RPressTime						= 16; int RPauseTime						= 16; int RPressure						= 25;int RStep							= 8; int RDyn 							= 1; 
int min_random						= 1;
int max_random						= 31;
define UPDATE_TIME					= 32;                      define NOTORIOUS_VENDETTA_COMPUTERVISI0NXQ			= 1;              define USE_PYTHONCV_COMPUTERVISI0NXQ			= 2; int AR_TYPE	;
int AR_STRENGTH   			 ; 	define PYTHONCV_COMPUTERVISI0NXQ_UPDATE_CYCLE			= UPDATE_TIME;define PYTHONCV_COMPUTERVISI0NXQ_MIN_RECOIL_PERSENT	= 25;define PYTHONCV_COMPUTERVISI0NXQ_ARRAY_LENGTH			= 64;define PYTHONCV_COMPUTERVISI0NXQ_INDEX_MASK 			= PYTHONCV_COMPUTERVISI0NXQ_ARRAY_LENGTH - 1; define REGULAR						= 0;
define RANDOM_ANGLE					= 1;
define RANDOM_RADIUS				= 2;
define Unbeatable					= 3; int	 aim_assist;int MAX_ANGLE;int MIN_ANGLE;int MAX_RADIUS;int MIN_RADIUS;define REGULAROPENCV					= 1;define RANDOM_SPEED					= 2;define pipgetupdate5SPEED					= 3;define RANDOM_STRENGTH				= 4;define pipgetupdate5STRENGTH				= 5;define UnbeatableOPENCV				= 6; define TUNNELOPENCV					= 7;
int PYTHONCVOPENCV_TYPE	; define SINOPENCV						= 0;define SQUAREOPENCV					= 1;define STAIRSOPENCV					= 2;int PYTHONCV_CARRIEROPENCV;		int PYTHONCVOPENCV_UPDATE_PARAMETERS	= 2 * UPDATE_TIME;
int MAX_PYTHONCVOPENCV_STRENGTH;
int MIN_PYTHONCVOPENCV_STRENGTH;int MAX_PYTHONCVOPENCV_SPEED			= 5;  int MIN_PYTHONCVOPENCV_SPEED			= 1;  define HORIZONTALOPENCV				= 2;define VERTICALOPENCV				= 1;define FULLOPENCV					= 0;

define USE_AXISNOTORIOUSKXK				= FULLOPENCV;	define BORDER_SCAN					= 1;define DIAGONAL_SCAN				= 2;define FULL_SCAN					= 3;int PYTHONCV_pipgetupdate6TYPE				= BORDER_SCAN;int PYTHONCV_pipgetupdate6UPDATE_CYCLE		= 2 * UPDATE_TIME; 
int PYTHONCV_pipgetupdate6HOLD_TIME			= UPDATE_TIME; 
int PYTHONCV_pipgetupdate6POWER;	define FIXED_RESOLUTION				= 1;	define RANDON_RESOLUTION			= 2;	define PYTHONCV_RESOLUTION			= 3;	int DRAWBOXCV_RESOLUTION_TYPE; int RESOLUTION;

define AA_MAGNITUDE					= 75;	
define CVHEADPINGZ_UPDATE_CYCLE 	= UPDATE_TIME ;  	
define SMOOTHING				 	= 1;  	
int STRAFE_DELAY ;
define DZ_LIMIT						= 10; 
int ADS_BUTTON;int FIRE_BUTTON;define  _MAX_W = 6;int rumble;int angle;int polar_radius;int Actual_Rx;int Last_Rx;int Actual_Ry;int Last_Ry;int mvt_predection_update_cycle_counter;int mvt_direction;int smoothing;int polar_ar_ry;int angle_increment;int _ret;int resolution;int resolution_inc_dec;int _ret1;int _Rx;int _Ry;int magnitude_ok;int ls_sensitivity;int polar_pipgetupdate6strength int pipgetupdate6step;
int PYTHONCV_pipgetupdate6update_cycle; int ar_cycle; int ar_index; int ar_strength; int ar_buffer; int ar_strength_sum; int i;
int PYTHONCV_scan;  int rx_carrier; int ry_carrier; int wave_angle; int wave_type; int wave_carrier; int PYTHONCVOPENCV_update_parameters; int PYTHONCVOPENCV_strength; int PYTHONCVOPENCV_speed; int pipgetupdate5PYTHONCVOPENCV_strength; int pipgetupdate5speed_sign; int pipgetupdate5strength_sign;int maxOPENCV_strength; int minOPENCV_strength; int minOPENCV_speed; int minOPENCV; int maxOPENCV; int PYTHONCVOPENCV_update; int axisNOTORIOUSKXK; int toggle_rapid_fire; 
int Col_ind					;define BLACK 					= 0; define WHITE 					= 1; define SMALL 					= 0; define MEDIUM 					= 1; define LARGE 					= 2; define FIXED_ANGULAR_RECOIL		= 2;
define WIDTH = 0, HEIGHT = 1, LENGTH = 2; define MAIN_MENU 				= 1; define MENU_SHIFT 				= 3; define SUB_MENU_1 				= MAIN_MENU << MENU_SHIFT; define SUB_MENU_2 				= SUB_MENU_1 << MENU_SHIFT; define SUB_MENU_3 				= SUB_MENU_2 << MENU_SHIFT; define SUB_MENU_4 				= SUB_MENU_3 << MENU_SHIFT;
define LED_OFF       			= -2;                           
define Light_Blue   		 	=  1;                           
define Light_Red     			=  2;                           
define Light_Green   			=  3;                           
define Light_Pink    			=  4;                           
define Light_SkyBlue 			=  5;                           
define Light_Yellow  			=  6;                           
define Light_White   			=  7;                           
define Blue          			=  8;                           
define Red           			=  9;                           
define Green         			= 10;                           
define Pink          			= 11;                           
define SkyBlue       			= 12;                           
define Yellow        			= 13;                           
define White         			= 14;                           
define Dim_Blue      			= 15;                           
define Dim_Red       			= 16;                           
define Dim_Green     			= 17;                           
define Dim_Pink      			= 18;                           
define Dim_SkyBlue   			= 19;                           
define Dim_Yellow    			= 20;                           
define Dim_White     			= 21;   int Refresh_Screen = FALSE	; int ModMenu = 0				; int Menu_State				; int Actual_Screen			;
int Screen_dodge_lvl_1		;
int Screen_dodge_lvl_2		;
int Screen_dodge_lvl_3		;
int Screen_dodge_lvl_4		; int Inc_Dec					; int up_down					; int index_1					; int End_Screen				; int screen_saver			; int screen_off				;	 int KillSwitch				;
int ptime					;
int USE_FLIPPED_TRIG;
define WALK    = 0;
define SPRINT  = 1;
int state;
int INVERTED;
int slide_enable = FALSE;
int rapid_fire_on;
int Click ;
define  timelimit = 304;
int	Click_strafe;
int strafe_mode = 0;


 
data(1,          
      1,0,0,0,                         
      0,1,0,0,                            
      0,0,1,0,                          
      0,0,0,1,                            
      1,0,1,0,                         
      0,1,1,0,                          
      1,1,1,1,                          
      2,0,0,0,                                  
      0,2,0,0,                                  
      0,0,2,0,                               
      0,0,0,2,                                  
      2,0,2,0,                               
      0,2,2,0,                                
      2,2,2,2,                               
      3,0,0,0,                              
      0,3,0,0,                             
      0,0,3,0,                            
      0,0,0,3,                             
      3,0,3,0,                          
      0,3,3,0,                           
      3,3,3,3                              
); 

init
{

	screen_off = FALSE;
	colourled(Blue);
	
	KillSwitch = 0;

	combo_run(UNFAIR_intro);
	combo_run(start);
	
	if(get_pvar(SPVAR_64, 0, 9999, -9999) != RESET_SLOT_DATA)
	{
		set_pvar(SPVAR_64, RESET_SLOT_DATA):
		reset_script_var();
		save_pvar();		
	}
 
	load_pvar();
	init_UNFAIR_aim();
	
}

main
{

	vm_tctrl(-2);
	
	if(Click_strafe > 0) Click_strafe = Click_strafe - get_rtime();     
	if(event_press(ZIGZAG_DOUBLE_PRESS) && Click_strafe <= 0) 
	{
	        Click_strafe = timelimit; 
	} 
	else if(event_press(ZIGZAG_DOUBLE_PRESS) && Click_strafe > 0) 
	{
		strafe_mode = !strafe_mode;
	}
	
	
	if(rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
	{
		if(Click > 0) Click = Click - get_rtime();     
		if(event_press(PS4_CIRCLE) && Click <= 0) 
	    {
	        Click = timelimit; 
	    } 
		else if(event_press(PS4_CIRCLE) && Click > 0) 
	    {
	        set_led(0,0);
			set_led(1,0);
			set_led(2,0);
			
			if(!toggle_rapid_fire)
			{
				toggle_rapid_fire = rapid_fire_on; 
			}
			else
			{
				toggle_rapid_fire = 0;	
				colourled(Blue);
			}	
	    }
	}
	
	if(event_release(SWAP_BUTTON) && get_ptime(SWAP_BUTTON) <= 496 && rapid_fire_on && RAPID_FIRE_FOR_PRIMARY_AND_SECONDARY_WEAPON == FALSE)
	{
		set_led(0,0);
		set_led(1,0);
		set_led(2,0);
		
		if(!toggle_rapid_fire)
		{
			toggle_rapid_fire = rapid_fire_on; 
		}
		else
		{
			toggle_rapid_fire = 0;	
			colourled(Blue);
		}	
	}
	

		
	screen_saver += get_rtime();
 	
 	if((screen_saver >= 30000) && (!ModMenu) && (screen_off == FALSE))
 	{
 		cls_oled(0);
 		screen_saver = 0;
 		screen_off = TRUE;
 	}
 	
 	if((get_ival(ADS_BUTTON) > 50 && event_release(PS4_OPTIONS)) && !ModMenu)
	{			
			set_val(PS4_OPTIONS, 0);
			combo_run(EXIT); 
			combo_run(cvibrate);
			
			KillSwitch = !KillSwitch;
			
			if(!KillSwitch)
			{		
				
				
			
				
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
				colourled(Blue);
			}	
			else
			{
			
				toggle_rapid_fire = 0;
				rapid_fire_on = 0;
				combo_stop(rapid_fire_Led);
				combo_stop(sprint);	
				combo_stop(cRapidFire);
				combo_stop(cJitters);
				combo_stop(Quick_Scope);
				combo_stop(HOLD_BREATH);
				combo_stop(BUNNYHOP);
				combo_stop(TURBO_MELEE);
				combo_stop(easy_plate);	
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);		
			}
	}
	
	
	if(KillSwitch )
	{
		
		
		combo_run(Alert);
	}
		
 	
 	if(!NOTORIOUS_VENDETTA)
 	{
 		block_rumble();
 	}
 	
	if((get_ival(PS4_L2) < 50) && event_release(PS4_OPTIONS) && get_ptime(PS4_OPTIONS) >= 496
	&& !KillSwitch)
	{
		ModMenu = !ModMenu;
		
		set_val(PS4_OPTIONS, 0);
		
		combo_run(EXIT); 
		combo_run(cvibrate);
		combo_stop(sprint);	

		if(ModMenu)
		{
			load_pvar();
			strafe_mode = 0;
			Menu_State = MAIN_MENU;
			screen_off = FALSE;		
			screen_saver = 0;

			cls_oled(BLACK);
			rect_oled( 0 , 0,128 , 64, 0, 1 );
			//line_oled(28, 17, 100, 17, 1, 1);
			rect_oled(0 , 0,128 , 20, 1, 1 );
			rect_oled(2 , 2,124 , 16, 0, 0 );
			printf(center_x(get_menu(8),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,Menu[8]);
			printf(center_x(get_menu(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM)+ 8,MEDIUM,WHITE,Menu[Actual_Screen]);
			//set_ledx(2, 1);
			//set_led(3, 2);
		}
		else
		{
			Refresh_Screen = FALSE;
			Actual_Screen = 0;
			Screen_dodge_lvl_1 = 0;
			Screen_dodge_lvl_2 = 0;
			Screen_dodge_lvl_3 = 0;
			Screen_dodge_lvl_4 = 0;
			End_Screen = FALSE;
			cls_oled(WHITE);
			
			
			
			save_pvar();
			init_UNFAIR_aim();
		}
	}

	if(screen_saver >= 30000 && ModMenu)
	{
		Refresh_Screen = FALSE;
		Actual_Screen = 0;
		Screen_dodge_lvl_1 = 0;
		Screen_dodge_lvl_2 = 0;
		Screen_dodge_lvl_3 = 0;
		Screen_dodge_lvl_4 = 0;
		End_Screen = FALSE;
		cls_oled(WHITE);
		draw_picture(0);
		
		save_pvar();
		init_UNFAIR_aim();
		ModMenu = !ModMenu;
		screen_saver = 0;		
	}


	if(ModMenu)
	{
		Inc_Dec = 0;
				
		if(ptime != 104)
			ptime += get_rtime();
				
		if(event_press(PS4_RIGHT) ||  (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 496 && ptime == 104 ))
		{
			Inc_Dec = 1;
			Refresh_Screen = TRUE;
			//set_ledx(0, 1);
			//set_led(3, 3);
			screen_saver = 0;
			ptime = 0;
		}
		else if(event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) > 248 && ptime == 104))
		{
			Inc_Dec = -1;
			Refresh_Screen = TRUE;
			//set_ledx(0, 1);
			//set_led(3, 3);
			screen_saver = 0;
			ptime = 0;
		}
		else if(event_press(PS4_CIRCLE) && Menu_State != MAIN_MENU)
		{
			Menu_State = Menu_State >> MENU_SHIFT;
			Refresh_Screen = TRUE;
			Actual_Screen = Screen_dodge_lvl_1;
			Screen_dodge_lvl_1 = Screen_dodge_lvl_2;
			Screen_dodge_lvl_2 = Screen_dodge_lvl_3;
			Screen_dodge_lvl_3 = Screen_dodge_lvl_4;
			Screen_dodge_lvl_4 = 0;
			End_Screen = FALSE;
			Inc_Dec = 0;
			up_down = 0;
			index_1 = 0;
			//index_2 = 0;
			//index_3 = 0;
			Inc_Dec = 0;
			//set_ledx(1, 1);
			//set_led(3, 3);
			screen_saver = 0;

		}
		else if(event_press(PS4_CROSS)&& Menu_State < SUB_MENU_4)
		{
			Refresh_Screen = TRUE;
			Inc_Dec = 0;
			up_down = 0;
			if(End_Screen == FALSE)
			{
				Menu_State = Menu_State << MENU_SHIFT;
				Screen_dodge_lvl_4 = Screen_dodge_lvl_3;
				Screen_dodge_lvl_3 = Screen_dodge_lvl_2
				Screen_dodge_lvl_2 = Screen_dodge_lvl_1
				Screen_dodge_lvl_1 = Actual_Screen;
				Actual_Screen = 0;
				index_1 = 0;
				//index_2 = 0;
				//index_3 = 0;
				//set_ledx(0, 1);
				//set_led(3, 3);
				screen_saver = 0;
			}
		}
		
		else if(event_press(PS4_UP))
		{
			if(	   (Menu_State == SUB_MENU_2 && Screen_dodge_lvl_2 == 3 && (Screen_dodge_lvl_1 == 1 || Screen_dodge_lvl_1 == 2 ))
					|| (Menu_State == SUB_MENU_2 && Screen_dodge_lvl_1 == 2 && Screen_dodge_lvl_2 == 4)
				)
			{
				up_down = 1;
				Inc_Dec = 0;
				Refresh_Screen = TRUE;
				//set_ledx(0, 1);
				//set_led(3, 3);
				screen_saver = 0;
			}
		}
		else if(event_press(PS4_DOWN))
		{
			if(	   (Menu_State == SUB_MENU_2 && Screen_dodge_lvl_2 == 3 && (Screen_dodge_lvl_1 == 1 || Screen_dodge_lvl_1 == 2 ))
					|| (Menu_State == SUB_MENU_2 && Screen_dodge_lvl_1 == 2 && Screen_dodge_lvl_2 == 4)
				)
			{
				up_down = -1;
				Inc_Dec = 0;
				Refresh_Screen = TRUE;
				//set_ledx(3, 1);
				//set_led(3, 3);
				screen_saver = 0;
			}
		}
		
		block_btn();

		if(Refresh_Screen == TRUE)
		{
			Refresh_Screen = FALSE;

			if(Menu_State == MAIN_MENU)
			{
				Actual_Screen = check_range(update_val(Actual_Screen), 7, 0);

				cls_oled(BLACK);
				rect_oled( 0 , 0,128 , 64, 0, 1 );
				rect_oled(0 , 0,128 , 20, 1, 1 );
				rect_oled(2 , 2,124 , 16, 0, 0 );
				//line_oled(28, 17, 100, 17, 1, 1);
				printf(center_x(get_menu(8),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,Menu[8]);
				printf(center_x(get_menu(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,Menu[Actual_Screen]);

			}
			else if(Menu_State == SUB_MENU_1)
			{
				cls_oled(BLACK);
				rect_oled( 0 , 0,128 , 64, 0, 1 );

				Actual_Screen = update_val(Actual_Screen);
				rect_oled(0 , 0,128 , 20, 1, 1 );
				rect_oled(2 , 2,124 , 16, 0, 0 );

				printf(center_x(get_menu(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,Menu[Screen_dodge_lvl_1]);
				//line_oled(0, 20, 127, 20, 2, 1);

				if(Screen_dodge_lvl_1 == 0)
				{
					Actual_Screen = check_range(Actual_Screen, 3, 0);
					printf(center_x(get_controller_m(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,CONTROLLER[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 1)
				{
					Actual_Screen = check_range(Actual_Screen, 3, 0);
					printf(center_x(get_move(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,MOVE[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 2)
				{
					Actual_Screen = check_range(Actual_Screen, 1, 0);
					printf(center_x(get_ar(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,SE_AR[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 3)
				{
					Actual_Screen = check_range(Actual_Screen, 2, 0);
					printf(center_x(get_UNFAIR_aim_t(aim_assist),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,UNFAIR_AIM_T[aim_assist]);
				}
				else if(Screen_dodge_lvl_1 == 4)
				{
					Actual_Screen = check_range(Actual_Screen, 2, 0);
					printf(center_x(get_PYTHONCVOPENCV(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,PYTHONCVOPENCV[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 5)
				{
					Actual_Screen = check_range(Actual_Screen, 1, 0);
					printf(center_x(get_PYTHONCV_scan(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,PYTHONCV_SCAN[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 6)
				{
					Actual_Screen = check_range(Actual_Screen, 1, 0);
					printf(center_x(get_DRAWBOXCV_m(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,SA[Actual_Screen]);
				}
				else if(Screen_dodge_lvl_1 == 7)
				{
					Actual_Screen = check_range(Actual_Screen, 9, 0);
					printf(center_x(get_mods(Actual_Screen),OLED_FONT_MEDIUM_WIDTH),center_y(OLED_FONT_MEDIUM) + 8,MEDIUM,WHITE,MODS[Actual_Screen]);
				}
			}
			else if(Menu_State == SUB_MENU_2)
			{
				cls_oled(BLACK);
				rect_oled(0 , 0,128 , 64, 0, 1 );
				rect_oled(0 , 0,128 , 20, 1, 1 );
				rect_oled(2 , 2,124 , 16, 0, 0 );

				Actual_Screen = update_val(Actual_Screen);

				if(Screen_dodge_lvl_2 == 0)
				{
					End_Screen = TRUE;
					printf(center_x(get_controller_m(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,CONTROLLER[Screen_dodge_lvl_1]);

					if(Screen_dodge_lvl_1 == 0)
					{
						USE_FLIPPED_TRIG = check_range(update_val(USE_FLIPPED_TRIG), 1, 0);
						printf(center_x(get_state(USE_FLIPPED_TRIG),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[USE_FLIPPED_TRIG]);
						
						if(USE_FLIPPED_TRIG == 0)
						{
						 	ADS_BUTTON 	= PS4_L2;
							FIRE_BUTTON = PS4_R2;
						}
						else
						{
							ADS_BUTTON 	= PS4_L1;
							FIRE_BUTTON = PS4_R1;
						}
					}
					else if(Screen_dodge_lvl_1 == 1)
					{			
						
						NOTORIOUS_VENDETTAX = check_range(update_val(NOTORIOUS_VENDETTAX), 1, 0);
						printf(center_x(get_state(NOTORIOUS_VENDETTAX),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[NOTORIOUS_VENDETTAX]);
					}				
					else if(Screen_dodge_lvl_1 == 2)
					{
						
						NOTORIOUS_VENDETTA = check_range(update_val(NOTORIOUS_VENDETTA), 1, 0);
						printf(center_x(get_state(NOTORIOUS_VENDETTA),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[NOTORIOUS_VENDETTA]);
					}
					else if(Screen_dodge_lvl_1 == 3)
					{
						
						INVERTED = check_range(update_val(INVERTED), 1, 0);
						printf(center_x(get_state(INVERTED),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[INVERTED]);
					}

				}
				else if(Screen_dodge_lvl_2 == 1)
				{
					End_Screen = TRUE;
					printf(center_x(get_move(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,MOVE[Screen_dodge_lvl_1]);

					if(Screen_dodge_lvl_1 == 0)
					{
						USE_PYTHONCV_MOVE_SENSITIVITY = check_range(update_val(USE_PYTHONCV_MOVE_SENSITIVITY), 1, 0);
						printf(center_x(get_state(USE_PYTHONCV_MOVE_SENSITIVITY),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[USE_PYTHONCV_MOVE_SENSITIVITY]);

					}
					else if(Screen_dodge_lvl_1 == 1)
					{
						PYTHONCV_MOVEMENT_THRESHOLD = check_range(update_val(PYTHONCV_MOVEMENT_THRESHOLD), 100, 0);
						NumberToString(PYTHONCV_MOVEMENT_THRESHOLD,FindDigits(PYTHONCV_MOVEMENT_THRESHOLD), 0, 4, OLED_WHITE);
						print_progress_bar(PYTHONCV_MOVEMENT_THRESHOLD, 100);
						
					}
					else if(Screen_dodge_lvl_1 == 2)
					{
						FRONTAL_MVT_SENS = check_range(update_val(FRONTAL_MVT_SENS), 300, 0);
						NumberToString(FRONTAL_MVT_SENS,FindDigits(FRONTAL_MVT_SENS), 0, 4, OLED_WHITE);
						print_progress_bar(FRONTAL_MVT_SENS, 300);
					}
					if(Screen_dodge_lvl_1 == 3)
					{
						DRIFT_MVT_SENS = check_range(update_val(DRIFT_MVT_SENS), 300, 0);
						NumberToString(DRIFT_MVT_SENS,FindDigits(DRIFT_MVT_SENS), 0, 4, OLED_WHITE);
						print_progress_bar(DRIFT_MVT_SENS, 300);
					}
					
				}
				else if(Screen_dodge_lvl_2 == 2)
				{
					End_Screen = TRUE;
					
					printf(center_x(get_ar(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,SE_AR[Screen_dodge_lvl_1]);

					if(Screen_dodge_lvl_1 == 0)
					{
						AR_TYPE = check_range(update_val(AR_TYPE), 2, 0);
						printf(center_x(get_ar_t(AR_TYPE),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,SE_AR_T[AR_TYPE]);		
					}
					else if(Screen_dodge_lvl_1 == 1)
					{
						AR_STRENGTH = check_range(update_val(AR_STRENGTH), 100, 0);
						NumberToString(AR_STRENGTH,FindDigits(AR_STRENGTH), 0, 4, OLED_WHITE);
						print_progress_bar(AR_STRENGTH, 100);						
					}
				}
				else if(Screen_dodge_lvl_2 == 3)
				{
					End_Screen = TRUE;
						
					printf(center_x(get_UNFAIR_aim(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,UNFAIR_AIM[Screen_dodge_lvl_1]);
					
					if(Screen_dodge_lvl_1 == 0)
					{					
					
						
						aim_assist = check_range(update_val(aim_assist), 3, 0);
						printf(center_x(get_UNFAIR_aim_t(aim_assist),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,UNFAIR_AIM_T[aim_assist]);						
					}
					else if(Screen_dodge_lvl_1 == 1)
					{			
						if(Inc_Dec == 0)
						{
							index_1 = index_1 + 1 * up_down;

							if(index_1 < 0)
							index_1 = 1;
							else if(index_1 > 1)
							index_1 = 0;
						}

						if(index_1 == 0)
						{
							rect_oled( 0 , 20,128 , 22,1, 1 );

							MAX_ANGLE = check_range(update_val(MAX_ANGLE), 45, 0);

							printf(5,27,SMALL,BLACK,MAX_MIN[0]);
							printf(5,49,SMALL,WHITE,MAX_MIN[1]);

							rect_oled( 35 , 23,((MAX_ANGLE * 70)/45) , 14, 1, 0 );
							rect_oled( 35 , 23, 70 , 15,0, 0 );

							if(MIN_ANGLE >MAX_ANGLE)
							MIN_ANGLE = MAX_ANGLE;

							rect_oled( 35 , 46,((MIN_ANGLE * 70)/(MAX_ANGLE)) , 14, 1, 1 );
							rect_oled( 35 , 46, 70 , 15,0, 1 );

							NumberToString(MAX_ANGLE,FindDigits(MAX_ANGLE), 53, 0, OLED_BLACK);
							NumberToString(MIN_ANGLE,FindDigits(MIN_ANGLE), 53, 22, OLED_WHITE);
						}
						else
						{
							rect_oled( 0 , 44,128 , 22,1, 1 );

							MIN_ANGLE = update_val(MIN_ANGLE);
							MIN_ANGLE = check_range(MIN_ANGLE, MAX_ANGLE, 0);

							printf(5,27,SMALL,WHITE,MAX_MIN[0]);
							printf(5,49,SMALL,BLACK,MAX_MIN[1]);

							rect_oled( 35 , 23,((MAX_ANGLE * 70)/45) , 14, 1, 1 );
							rect_oled( 35 , 23, 70 , 15,0, 1 );

							rect_oled( 35 , 46,((MIN_ANGLE * 70)/(MAX_ANGLE)) , 14, 1, 0 );
							rect_oled( 35 , 46, 70 , 15,0, 0 );

							NumberToString(MAX_ANGLE,FindDigits(MAX_ANGLE), 53, 0, OLED_WHITE);
							NumberToString(MIN_ANGLE,FindDigits(MIN_ANGLE), 53, 22, OLED_BLACK);
						}
					}
					else if(Screen_dodge_lvl_1 == 2)
					{
						if(Inc_Dec == 0)
						{
							index_1 = index_1 + 1 * up_down;

							if(index_1 < 0)
							index_1 = 1;
							else if(index_1 > 1)
							index_1 = 0;
						}

						if(index_1 == 0)
						{
							rect_oled( 0 , 20,128 , 22,1, 1 );

							MAX_RADIUS = check_range(update_val(MAX_RADIUS), 32, 0);

							printf(5,27,SMALL,BLACK,MAX_MIN[0]);
							printf(5,49,SMALL,WHITE,MAX_MIN[1]);

						

							rect_oled( 35 , 23,((MAX_RADIUS * 70)/32) , 14, 1, 0 );
							rect_oled( 35 , 23, 70 , 15,0, 0 );

							if(MIN_RADIUS >MAX_RADIUS)
							MIN_RADIUS = MAX_RADIUS;

							rect_oled( 35 , 46,((MIN_RADIUS * 70)/(MAX_RADIUS)) , 14, 1, 1 );
							rect_oled( 35 , 46, 70 , 15,0, 1 );

							NumberToString(MAX_RADIUS,FindDigits(MAX_RADIUS), 53, 0, OLED_BLACK);
							NumberToString(MIN_RADIUS,FindDigits(MIN_RADIUS), 53, 22, OLED_WHITE);
						}
						else
						{
							rect_oled( 0 , 44,128 , 22,1, 1 );

							MIN_RADIUS = update_val(MIN_RADIUS);
							MIN_RADIUS = check_range(MIN_RADIUS, MAX_RADIUS, 0);

							printf(5,27,SMALL,WHITE,MAX_MIN[0]);
							printf(5,49,SMALL,BLACK,MAX_MIN[1]);

							rect_oled( 35 , 23,((MAX_RADIUS * 70)/32) , 14, 1, 1 );
							rect_oled( 35 , 23, 70 , 15,0, 1 );

							rect_oled( 35 , 46,((MIN_RADIUS * 70)/(MAX_RADIUS)) , 14, 1, 0 );
							rect_oled( 35 , 46, 70 , 15,0, 0 );

							NumberToString(MAX_RADIUS,FindDigits(MAX_RADIUS), 53, 0, OLED_WHITE);
							NumberToString(MIN_RADIUS,FindDigits(MIN_RADIUS), 53, 22, OLED_BLACK);
						}
					}
				}
				else if(Screen_dodge_lvl_2 == 4)
				{
					End_Screen = TRUE;
					printf(center_x(get_PYTHONCVOPENCV(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,PYTHONCVOPENCV[Screen_dodge_lvl_1]);
					
					if(Screen_dodge_lvl_1 == 0)
					{
						
						PYTHONCVOPENCV_TYPE = check_range(update_val(PYTHONCVOPENCV_TYPE), 7, 0);
						printf(center_x(get_PYTHONCVOPENCV_t(PYTHONCVOPENCV_TYPE),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,PYTHONCVOPENCV_SUB_T[PYTHONCVOPENCV_TYPE]);
					}
					else if(Screen_dodge_lvl_1 == 1)
					{
						
						PYTHONCV_CARRIEROPENCV = check_range(update_val(PYTHONCV_CARRIEROPENCV), 2, 0);
						printf(center_x(get_PYTHONCVOPENCV_c(PYTHONCV_CARRIEROPENCV),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,PYTHONCVOPENCV_SUB_C[PYTHONCV_CARRIEROPENCV]);

					}
					else if(Screen_dodge_lvl_1 == 2)
					{
						if(Inc_Dec == 0)
						{
							index_1 = index_1 + 1 * up_down;

							if(index_1 < 0)
							index_1 = 1;
							else if(index_1 > 1)
							index_1 = 0;
						}

						if(index_1 == 0)
						{
							rect_oled( 0 , 20,128 , 22,1, 1 );

							MAX_PYTHONCVOPENCV_STRENGTH = check_range(update_val(MAX_PYTHONCVOPENCV_STRENGTH), 20, 0);

							printf(5,27,SMALL,BLACK,MAX_MIN[0]);
							printf(5,49,SMALL,WHITE,MAX_MIN[1]);

						

							rect_oled( 35 , 23,((MAX_PYTHONCVOPENCV_STRENGTH * 70)/20) , 14, 1, 0 );
							rect_oled( 35 , 23, 70 , 15,0, 0 );

							if(MIN_PYTHONCVOPENCV_STRENGTH >MAX_PYTHONCVOPENCV_STRENGTH)
							MIN_PYTHONCVOPENCV_STRENGTH = MAX_PYTHONCVOPENCV_STRENGTH;

							rect_oled( 35 , 46,((MIN_PYTHONCVOPENCV_STRENGTH * 70)/(MAX_PYTHONCVOPENCV_STRENGTH)) , 14, 1, 1 );
							rect_oled( 35 , 46, 70 , 15,0, 1 );

							NumberToString(MAX_PYTHONCVOPENCV_STRENGTH,FindDigits(MAX_PYTHONCVOPENCV_STRENGTH), 53, 0, OLED_BLACK);
							NumberToString(MIN_PYTHONCVOPENCV_STRENGTH,FindDigits(MIN_PYTHONCVOPENCV_STRENGTH), 53, 22, OLED_WHITE);
						}
						else
						{
							rect_oled( 0 , 44,128 , 22,1, 1 );

							MIN_PYTHONCVOPENCV_STRENGTH = update_val(MIN_PYTHONCVOPENCV_STRENGTH);
							MIN_PYTHONCVOPENCV_STRENGTH = check_range(MIN_PYTHONCVOPENCV_STRENGTH, MAX_PYTHONCVOPENCV_STRENGTH, 0);

							printf(5,27,SMALL,WHITE,MAX_MIN[0]);
							printf(5,49,SMALL,BLACK,MAX_MIN[1]);

							rect_oled( 35 , 23,((MAX_PYTHONCVOPENCV_STRENGTH * 70)/20) , 14, 1, 1 );
							rect_oled( 35 , 23, 70 , 15,0, 1 );

							rect_oled( 35 , 46,((MIN_PYTHONCVOPENCV_STRENGTH * 70)/(MAX_PYTHONCVOPENCV_STRENGTH)) , 14, 1, 0 );
							rect_oled( 35 , 46, 70 , 15,0, 0 );

							NumberToString(MAX_PYTHONCVOPENCV_STRENGTH,FindDigits(MAX_PYTHONCVOPENCV_STRENGTH), 53, 0, OLED_WHITE);
							NumberToString(MIN_PYTHONCVOPENCV_STRENGTH,FindDigits(MIN_PYTHONCVOPENCV_STRENGTH), 53, 22, OLED_BLACK);
						}
					}
				}
				else if(Screen_dodge_lvl_2 == 5)
				{
					End_Screen = TRUE;
					printf(center_x(get_PYTHONCV_scan(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,PYTHONCV_SCAN[Screen_dodge_lvl_1]);
					
					if(Screen_dodge_lvl_1 == 0)
					{
						PYTHONCV_pipgetupdate6TYPE = check_range(update_val(PYTHONCV_pipgetupdate6TYPE), 3, 0);
						printf(center_x(get_PYTHONCV_pipgetupdate6t(PYTHONCV_pipgetupdate6TYPE),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,PYTHONCV_pipgetupdate6T[PYTHONCV_pipgetupdate6TYPE]);
						
					}
					else if(Screen_dodge_lvl_1 == 1) 
					{
						PYTHONCV_pipgetupdate6POWER = check_range(update_val(PYTHONCV_pipgetupdate6POWER), 20, 0);
						NumberToString(PYTHONCV_pipgetupdate6POWER,FindDigits(PYTHONCV_pipgetupdate6POWER), 0, 4, OLED_WHITE);
						print_progress_bar(PYTHONCV_pipgetupdate6POWER, 20);
					}
				}
				else if(Screen_dodge_lvl_2 == 6)
				{
					printf(center_x(get_DRAWBOXCV_m(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,SA[Screen_dodge_lvl_1]);
					End_Screen = TRUE;
					
					if(Screen_dodge_lvl_1 == 0)
					{
						DRAWBOXCV_RESOLUTION_TYPE = check_range(update_val(DRAWBOXCV_RESOLUTION_TYPE), 3, 0);
						printf(center_x(get_DRAWBOXCV_t(DRAWBOXCV_RESOLUTION_TYPE),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,SA_T[DRAWBOXCV_RESOLUTION_TYPE]);
						
					}
					else if(Screen_dodge_lvl_1 == 1)
					{
						RESOLUTION = check_range(update_val(RESOLUTION), 12, 0);
						NumberToString(RESOLUTION,FindDigits(RESOLUTION), 0, 4, OLED_WHITE);
						print_progress_bar(RESOLUTION, 12);
						
					}
				}
				else if(Screen_dodge_lvl_2 == 7)
				{
					End_Screen = TRUE;
					printf(center_x(get_mods(Screen_dodge_lvl_1),OLED_FONT_SMALL_WIDTH),center_y(OLED_FONT_SMALL) - 20,SMALL,BLACK,MODS[Screen_dodge_lvl_1]);				
					
					if(Screen_dodge_lvl_1 == 0)
					{
						NOTORIOUS_VENDETTAXQ = check_range(update_val(NOTORIOUS_VENDETTAXQ), 4, 0);
						printf(center_x(get_slide_c(NOTORIOUS_VENDETTAXQ),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,SLIDE_C[NOTORIOUS_VENDETTAXQ]);
						
					}
					else if(Screen_dodge_lvl_1 == 1)
					{
						RPressTime = check_range(update_val((RPressTime/8)), 10, 0) * 8;
						NumberToString(RPressTime,FindDigits(RPressTime), 0, 4, OLED_WHITE);
						print_progress_bar(RPressTime, 80);
						
						RPauseTime = RPressTime;
					} 
					else if(Screen_dodge_lvl_1 == 2)
					{
						SHELL_RUN_DELAY = check_range(update_val((SHELL_RUN_DELAY/8)), 30, 0) * 8;
						NumberToString(SHELL_RUN_DELAY,FindDigits(SHELL_RUN_DELAY), 0, 4, OLED_WHITE);
						print_progress_bar(SHELL_RUN_DELAY, 240);						
					}
					else if(Screen_dodge_lvl_1 == 3)
					{
						SCRIPTKILL3R = check_range(update_val(SCRIPTKILL3R), 1, 0);
						printf(center_x(get_state(SCRIPTKILL3R),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[SCRIPTKILL3R]);
					}
					else if(Screen_dodge_lvl_1 == 4)
					{
						PIP_INSTALL_HEADCAL = check_range(update_val(PIP_INSTALL_HEADCAL), 1, 0);
						printf(center_x(get_state(PIP_INSTALL_HEADCAL),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[PIP_INSTALL_HEADCAL]);
					}
					else if(Screen_dodge_lvl_1 == 5)
					{
						PIP_INSTALL_OPENCV = check_range(update_val(PIP_INSTALL_OPENCV), 1, 0);
						printf(center_x(get_state(PIP_INSTALL_OPENCV),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[PIP_INSTALL_OPENCV]);
					}
					else if(Screen_dodge_lvl_1 == 6)
					{
						NOTORIOUS_PYTHO90N = check_range(update_val(NOTORIOUS_PYTHO90N), 1, 0);
						printf(center_x(get_state(NOTORIOUS_PYTHO90N),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[NOTORIOUS_PYTHO90N]);
					}
					else if(Screen_dodge_lvl_1 == 7)
					{
						PIP_INSTALL_COMPUTERVISION = check_range(update_val(PIP_INSTALL_COMPUTERVISION), 1, 0);
						printf(center_x(get_state(PIP_INSTALL_COMPUTERVISION),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[PIP_INSTALL_COMPUTERVISION]);
					}
					else if(Screen_dodge_lvl_1 == 8)
					{
						PIP_GET_UPDATE2 = check_range(update_val(PIP_GET_UPDATE2), 1, 0);
						printf(center_x(get_state(PIP_GET_UPDATE2),OLED_FONT_MEDIUM_WIDTH) + 3,center_y(OLED_FONT_MEDIUM) + 8 ,MEDIUM,WHITE,STATE[PIP_GET_UPDATE2]);
					}
					else if(Screen_dodge_lvl_1 == 9)
					{
						STRAFE_DELAY = check_range(update_val((STRAFE_DELAY/8)), 100, 0) * 8;
						NumberToString(STRAFE_DELAY,FindDigits(STRAFE_DELAY), 0, 4, OLED_WHITE);
					}
				}
			}
		}
	}
	
	set_val(TRACE_1, INVERTED);
	
	
	

	if(NOTORIOUS_VENDETTAX)
	{
		if(get_ival(PS4_R2) > 10)
		set_val(PS4_R2, 100);

		if(get_ival(PS4_L2)> 10)
		set_val(PS4_L2, 100);
	}

	Actual_Rx = get_ival(PS4_RX);
	Actual_Ry = get_ival(PS4_RY);
	
	
	if(!KillSwitch)
	{
		
		if(get_ival(ON_OFF_BUTTON) )
		{
			if(event_press(NOTORIOUS_RAPID_FIRE) )
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
				
				if(!toggle_rapid_fire || toggle_rapid_fire != 1)
				{
					toggle_rapid_fire = 1;
					rapid_fire_on = 1;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}
			else if (event_press(AKIMBO_NOTORIOUS_RAPID_FIRE) )
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
				
				if(!toggle_rapid_fire || toggle_rapid_fire != 2)
				{
					toggle_rapid_fire = 2;
					rapid_fire_on = 2;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}
			else if (event_press(JITTERS_BUTTON))
			{
				combo_run(cvibrate);
				set_led(0,0);
				set_led(1,0);
				set_led(2,0);
				
				if(!toggle_rapid_fire || toggle_rapid_fire != 3)
				{
					toggle_rapid_fire = 3;
					rapid_fire_on = 3;
				}
				else
				{
					toggle_rapid_fire = 0;
					rapid_fire_on = 0;
					colourled(Blue);
				}
			}		
		}
		
		
			
		if ((toggle_rapid_fire == 1 && get_ival(FIRE_BUTTON) > 10) || (toggle_rapid_fire == 2 && (get_ival(FIRE_BUTTON) > 10 || get_ival(ADS_BUTTON) > 10) ))
		{   
		   	
				combo_run(cRapidFire);
		}
		
		if ((toggle_rapid_fire == 3 && (get_ival(FIRE_BUTTON) > 10 || get_ival(ADS_BUTTON) > 10) ))
		{
			combo_run(cJitters);
		}
		
		if (combo_running(cRapidFire))
		{
		  	if(
		  		(toggle_rapid_fire == 1  && event_release(FIRE_BUTTON)) ||		
		  		(toggle_rapid_fire == 2  && get_ival(FIRE_BUTTON) < 10 && get_ival(ADS_BUTTON) < 10)
		  	  )
		  		combo_stop(cRapidFire); 
		  	
		 }
		 
		 if (combo_running(cJitters))
		{
		  	if(	
		  		(toggle_rapid_fire == 3  && get_ival(FIRE_BUTTON) < 10 && get_ival(ADS_BUTTON) < 10)
		  	  )
		  		combo_stop(cJitters); 
		  	
		 }
	
		
		if(USE_PYTHONCV_MOVE_SENSITIVITY)
		{
			_ret = isqrt(pow(get_ival(PS4_LX), 2) + pow(PS4_LY, 2));
			
			if(_ret <= USE_PYTHONCV_MOVE_SENSITIVITY)
			{
			
				ls_sensitivity = FRONTAL_MVT_SENS;
			}
			else
			{
				ls_sensitivity = DRIFT_MVT_SENS;
			}
			
			sensitivity(PS4_LX, NOT_USE, ls_sensitivity);
			sensitivity(PS4_LY, NOT_USE, ls_sensitivity);
		}
		
		if((get_val(ADS_BUTTON) > 50) || (get_val(FIRE_BUTTON)> 50))
		{				
			
			if(PIP_INSTALL_COMPUTERVISION && (get_val(FIRE_BUTTON)> 50))
				combo_run(auto_ping)
			
			
			magnitude_ok = check_magnitude(AA_MAGNITUDE, Actual_Rx, Last_Rx, Actual_Ry, Last_Ry);
	
			if(mvt_predection_update_cycle_counter > CVHEADPINGZ_UPDATE_CYCLE)
			{
				_ret = get_mvt_direction(Actual_Rx, Last_Rx);
	
				if(_ret != 0)
				{
					mvt_direction = _ret;
					mvt_predection_update_cycle_counter = 0;
	
					if(mvt_direction == -1 && magnitude_ok == FALSE)
					{
						angle = 180;
					}
				}
			}
	
			mvt_predection_update_cycle_counter++;
	
			if( magnitude_ok == TRUE)
			{
				polar_ar_ry = 0;
				rx_carrier = 0;
				ry_carrier = 0;
	
				if((AR_TYPE) && (((get_val(ADS_BUTTON) > 50) && (get_val(FIRE_BUTTON)> 50)) || combo_running(cRapidFire) || combo_running(cJitters) ))
				{
					if(AR_TYPE == NOTORIOUS_VENDETTA_COMPUTERVISI0NXQ)
					{
						if(INVERTED == 1)
							polar_ar_ry = get_polar_val(inv(get_RUMBLE_EVIL_STRENGTH()));
						else
							polar_ar_ry = get_polar_val(get_RUMBLE_EVIL_STRENGTH());
					}
					else
					{
						if(INVERTED == 1)
							polar_ar_ry = get_polar_val(inv(AntiRecoil(Actual_Rx, Actual_Ry, ar_strength)));
						else
							polar_ar_ry = get_polar_val(AntiRecoil(Actual_Rx, Actual_Ry, ar_strength));
						
						ar_cycle++;
			
						if(ar_cycle == PYTHONCV_COMPUTERVISI0NXQ_UPDATE_CYCLE)
						{ 
							ar_index = (ar_index + 1) & (PYTHONCV_COMPUTERVISI0NXQ_INDEX_MASK);
										
							if(abs(get_ival(PS4_RY)) >= DZ_LIMIT) 
							{
								ar_buffer[ar_index] = get_ival(PS4_RY);
							}
							else
							{
								ar_buffer[ar_index] = 0;
							}
				
							ar_cycle = 0;
						}
						
						if(event_release(PS4_RY) && abs(get_val(PS4_RY)) < DZ_LIMIT)
						{		
							ar_strength_sum = 0;
							
							for(i = 0; i <= ar_index; i++)
							{
								ar_strength_sum += ar_buffer[i];
							}
							ar_strength += (ar_strength_sum/(ar_index + 1));		
							ar_index = 0;
						}
					}
				}
				else
				{
					ar_strength = AR_STRENGTH;
					ar_index =0;
					ar_strength_sum = 0;
				}
				
				if(!(PYTHONCV_pipgetupdate6update_cycle % PYTHONCV_pipgetupdate6UPDATE_CYCLE) && (PYTHONCV_pipgetupdate6TYPE) )
				{
					PYTHONCV_scan = TRUE;
				}
				else
				{
					PYTHONCV_scan = FALSE;
				}
				
				if(PYTHONCV_pipgetupdate6TYPE)			
				{
					PYTHONCV_pipgetupdate6update_cycle += 1;
				}
				
				if((!(smoothing % SMOOTHING)) && PYTHONCV_scan == FALSE)
				{			
					if(PYTHONCVOPENCV_TYPE)
					{				
						
						
						if(wave_carrier == SINOPENCV)
						{
							set_polar(POLAR_RS, wave_angle, PYTHONCVOPENCV_strength);
							rx_carrier = get_val(POLAR_RX);
							ry_carrier = get_val(POLAR_RY);
							
							wave_angle = ((wave_angle + (mvt_direction * PYTHONCVOPENCV_speed))%360);
						}
						else if(wave_carrier == SQUAREOPENCV)
						{
							combo_run(combo_squareOPENCV);
						}
						else if(wave_carrier == STAIRSOPENCV)
						{
							combo_run(combo_stairsOPENCV);
						}
	
						if(wave_type == REGULAROPENCV)
						{						
							if(wave_carrier == SINOPENCV)
							{				
								PYTHONCVOPENCV_strength = maxOPENCV_strength;
							}
							else
							{
								rx_carrier = PYTHONCVOPENCV_strength;
								ry_carrier = rx_carrier;
							}
							
							PYTHONCVOPENCV_speed = minOPENCV_speed;
						}
						else
						{						
							PYTHONCVOPENCV_update_parameters++;
							
							if(PYTHONCVOPENCV_update_parameters >= PYTHONCVOPENCV_UPDATE_PARAMETERS)
							{
								PYTHONCVOPENCV_update_parameters = 0;
								PYTHONCVOPENCV_update = 1;
								
								if(wave_type == RANDOM_SPEED)
								{
									PYTHONCVOPENCV_speed = random(MIN_PYTHONCVOPENCV_SPEED, MAX_PYTHONCVOPENCV_SPEED);
								}
								else if(wave_type == pipgetupdate5SPEED)
								{
									PYTHONCVOPENCV_speed = PYTHONCVOPENCV_speed + (1 * pipgetupdate5speed_sign);
									
									if(PYTHONCVOPENCV_speed >= MAX_PYTHONCVOPENCV_SPEED)
									{
										pipgetupdate5speed_sign = -1;
									}
									else if(PYTHONCVOPENCV_speed <= MIN_PYTHONCVOPENCV_SPEED)
									{
										pipgetupdate5speed_sign = 1;
									}
								}
								else if(wave_type == RANDOM_STRENGTH)
								{
									PYTHONCVOPENCV_strength = random(minOPENCV, maxOPENCV);
									PYTHONCVOPENCV_strength = get_polar_val(PYTHONCVOPENCV_strength);
								}
								else if(wave_type == pipgetupdate5STRENGTH)
								{
									if(wave_carrier == SINOPENCV)
									{
										pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
																
										if(pipgetupdate5PYTHONCVOPENCV_strength >= MAX_PYTHONCVOPENCV_STRENGTH)
										{
											pipgetupdate5strength_sign = -1;
										}
										else if(pipgetupdate5PYTHONCVOPENCV_strength <= MIN_PYTHONCVOPENCV_STRENGTH)
										{
											pipgetupdate5strength_sign = 1;
										}
									}
								
									PYTHONCVOPENCV_strength = get_polar_val(pipgetupdate5PYTHONCVOPENCV_strength);
								}
								else if(wave_type == UnbeatableOPENCV)
								{
									PYTHONCVOPENCV_speed = random(MIN_PYTHONCVOPENCV_SPEED, MAX_PYTHONCVOPENCV_SPEED);
									
									PYTHONCVOPENCV_strength = random(minOPENCV, maxOPENCV);
									PYTHONCVOPENCV_strength = get_polar_val(PYTHONCVOPENCV_strength);							
								}
								else if(wave_type == TUNNELOPENCV)
								{
									if(wave_carrier == SINOPENCV)
									{
										pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
																
										if(pipgetupdate5PYTHONCVOPENCV_strength >= MAX_PYTHONCVOPENCV_STRENGTH)
										{
											pipgetupdate5strength_sign = -1;
										}
										else if(pipgetupdate5PYTHONCVOPENCV_strength <= MIN_PYTHONCVOPENCV_STRENGTH)
										{
											pipgetupdate5strength_sign = 1;
										}
									}
									
									PYTHONCVOPENCV_strength = get_polar_val(pipgetupdate5PYTHONCVOPENCV_strength);
																
									PYTHONCVOPENCV_speed = PYTHONCVOPENCV_speed + (1 * pipgetupdate5speed_sign);
									
									if(PYTHONCVOPENCV_speed >= MAX_PYTHONCVOPENCV_SPEED)
									{
										pipgetupdate5speed_sign = -1;
									}
									else if(PYTHONCVOPENCV_speed <= MIN_PYTHONCVOPENCV_SPEED)
									{
										pipgetupdate5speed_sign = 1;
									}						
								}							
							}
							
							if(wave_carrier != SINOPENCV)
							{
								rx_carrier = PYTHONCVOPENCV_strength;
								ry_carrier = PYTHONCVOPENCV_strength;
								
								//set_val(TRACE_1, rx_carrier);
							}
						}
					}
					
					set_polar(POLAR_RS,angle, polar_radius);
									
					if(aim_assist == Unbeatable)
					{
						polar_radius = get_polar_radius(random(MIN_RADIUS,MAX_RADIUS));
						angle_increment = random(MIN_ANGLE,MAX_ANGLE);
					}
					else if(aim_assist == RANDOM_ANGLE)
					{
						angle_increment = random(MIN_ANGLE,MAX_ANGLE);
					}
					else if(aim_assist == RANDOM_RADIUS)
					{
						polar_radius = get_polar_radius(random(MIN_RADIUS,MAX_RADIUS));
					}
		
					angle = update_angle(angle, angle_increment, mvt_direction);		
				}
				
				if(PYTHONCV_scan == TRUE)
				{					
					combo_run(COMBO_PYTHONCV_SCAN);			
				}
				
				if(axisNOTORIOUSKXK == VERTICALOPENCV)
				{
					rx_carrier = 0;	
				}
				else if(axisNOTORIOUSKXK == HORIZONTALOPENCV)
				{
					ry_carrier = 0;	
					
					if(wave_carrier != SINOPENCV)
					{
						rx_carrier *= mvt_direction;
					}
				}
				else
				{
					if(wave_carrier != SINOPENCV)
					{
						rx_carrier *= mvt_direction;
					}
				}
				
				if(DRAWBOXCV_RESOLUTION_TYPE)
				{
					_ret = polar_clamp(get_val(POLAR_RY)  , rx_carrier);
					_ret = polar_clamp(_ret , polar_ar_ry);
					_Ry = polar_clamp(_ret, get_ival(POLAR_RY));
					_ret = get_polar_val(resolution);
					_ret1 = _ret/2;
	
					if((_Ry > (-32768 + _ret1)) && (_Ry < (32767 - _ret1)))
					{
						_Ry = get_DRAWBOXCV(_Ry, _ret);
					}
	
					_Rx = polar_clamp(rx_carrier , get_val(POLAR_RX));
					_Rx = polar_clamp(_Rx, get_ival(POLAR_RX));
	
					if((_Rx > (-32768 + _ret1)) && (_Rx < (32767 - _ret1)))
					{
						_Rx = get_DRAWBOXCV(_Rx, _ret);
					}
	
					set_val(POLAR_RX, _Rx);
					set_val(POLAR_RY, _Ry);
					
					if(DRAWBOXCV_RESOLUTION_TYPE == RANDON_RESOLUTION)
					{
						resolution = random(4,8);
					}
					else if(DRAWBOXCV_RESOLUTION_TYPE == PYTHONCV_RESOLUTION)
					{
						if(resolution == 4)
							resolution_inc_dec = 1;
						else if(resolution == 8)
							resolution_inc_dec = -1;
		
						resolution = resolution + (resolution_inc_dec * 1);
					}
				}
				else			{
					_ret = polar_clamp(get_val(POLAR_RX) ,rx_carrier);	
					set_val(POLAR_RX, polar_clamp( _ret, (get_ival(POLAR_RX))));
					
					_ret = polar_clamp(get_val(POLAR_RY) ,polar_ar_ry);	
					_ret = polar_clamp(_ret, ry_carrier);	
					set_val(POLAR_RY, polar_clamp(_ret, get_ival(POLAR_RY)));
				}
				
				smoothing++;
			}
		}
		else
		{
			angle = 0;
			smoothing = 0;
			PYTHONCV_pipgetupdate6update_cycle = 0;
			mvt_predection_update_cycle_counter = CVHEADPINGZ_UPDATE_CYCLE + 1;
			magnitude_ok = TRUE;
		}	
	
		Last_Rx = Actual_Rx;
		Last_Ry = Actual_Ry;
	
		if(NOTORIOUS_VENDETTAXQ) 
	    {
	        if(
	            (get_ival(PS4_LY) < -85) || (get_ival(PS4_LY) > 85) || 
	            (get_ival(PS4_LX) < -85) || (get_ival(PS4_LX) > 85)
	            ) 
	        {
	            slide_enable = 0;
	            
	            if(event_release(CROUCH_BUTTON))
	            {
	                if (NOTORIOUS_VENDETTAXQ == 1) 
	                {
	                    slide_enable = 1;
	                }
	                else if (NOTORIOUS_VENDETTAXQ == 2) 
	                {
	                    if(
	                    ((get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26))
	                    )
	                    {
	                        slide_enable = 1;
	                    }
	                }
	                else if (NOTORIOUS_VENDETTAXQ == 3) 
	                {
	                    slide_enable = 2;
	                }
	                else if (NOTORIOUS_VENDETTAXQ == 4) 
	                {
	                    if(
	                    ((get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36))
	                    )
	                    {
	                        slide_enable = 2;
	                    }
	                }
	            }
	            
	            if(slide_enable)
	            {
	                combo_stop(sprint);    
	                state = WALK;
	                
	                if(slide_enable == 1)
	                    combo_run(CANCEL_SLIDE_MW);
	                else if(slide_enable == 2)
	                    combo_run(CANCEL_SLIDE_CW);        
	            }
	        }                
	    }

	
		if(NOTORIOUS_PYTHO90N)
		{
			if(get_val(SWAP_BUTTON)&& get_ptime(SWAP_BUTTON)>350)
			combo_run(easy_plate);
	
			if(combo_running(easy_plate) && (get_ival(ADS_BUTTON)>10 || get_ival(FIRE_BUTTON)>10 || get_val(PS4_SQUARE)))
			{
				combo_stop(easy_plate);
				set_val(MELEE_BUTTON, 100);
			}
		}
	
		if(SCRIPTKILL3R)
		{
			if(get_val(MELEE_BUTTON))
			{
				combo_run(TURBO_MELEE);
			}
			else
			{
				if(combo_running(TURBO_MELEE))
				combo_stop(TURBO_MELEE);
			}
		}
	
		if(PIP_INSTALL_OPENCV)
		{
			if (get_ival(JUMP_BUTTON) && get_ptime(JUMP_BUTTON) > 200)
			{
				combo_run(BUNNYHOP);
			}
			else
			{
				if(combo_running(BUNNYHOP))
				combo_stop(BUNNYHOP);
			}
		}
	
		if(PIP_INSTALL_HEADCAL)
		{
			if(get_val(ADS_BUTTON))
			set_val(SPRINT_BUTTON,100);
	
			if(get_val(PS4_LY) <-90 && get_val(ADS_BUTTON) && get_ptime(ADS_BUTTON) > 200 && combo_running(HOLD_BREATH))
			combo_stop(HOLD_BREATH);
	
			if(event_press(ADS_BUTTON))
			combo_run(HOLD_BREATH);
	
			if(get_val(ADS_BUTTON) && get_lval(SPRINT_BUTTON))
			set_val(SPRINT_BUTTON,0);
		}
	
		if(USE_QUICK_SCOPE)
		{
			if(event_release(ADS_BUTTON) && get_ptime(ADS_BUTTON) < ONETAP_VENDETTA)
				combo_run(Quick_Scope);
		}
		
		
		
		if(toggle_rapid_fire)
		{
			combo_run(rapid_fire_Led);
		}
		
		if(PIP_GET_UPDATE2 && (!combo_running(CANCEL_SLIDE_MW) || combo_running(CANCEL_SLIDE_CW)) )
		{
			if(state == WALK)
			{			
				if(get_ival(PS4_LY)< -80 && get_ival(PS4_R2) < 10 && get_ival(PS4_L2) < 10)
				{
					combo_run(sprint);	
					state = SPRINT;
				}	
			}
			else if( state == SPRINT)
			{	
				if(get_ival(PS4_R2) >= 10 || get_ival(PS4_L2) >= 10 || (get_ival(PS4_LY) >= -80 ))
				{
					state = WALK;
					combo_stop(sprint);	
				}
			}
		}
	}
	
	if(strafe_mode && ( (get_val(FIRE_BUTTON)> 50) || combo_running(cRapidFire) || combo_running(cJitters) ))
		combo_run(strafe);	
	
}

 

combo sprint
{
	set_val(PS4_L3, 100);
	wait(128);
	set_val(PS4_L3, 0);
	wait(128);
	set_val(PS4_L3, 100);
	wait(128);
	set_val(PS4_L3, 0);
	wait(128);
}



function get_mvt_direction( _val, _lval)
{
	if (abs(_val - _lval) <= 2)
		return 0;

	if (_val < _lval) //move left
		return -1;

	if (_val > _lval)
		return 1;

	return 0;
}


function polar_clamp( _val, _ival)
{
	_ret = (_val / 10) + (_ival / 10);

	if (_ret < -3276)
		return -32768;

	if (_ret > 3276)
		return 32767;

	return _val + _ival;
}




function get_polar_radius( _radius)
{
	if (_radius > 100)
		_radius = 100;

	_radius = (_radius * 327) + ((_radius * 67) / 100);

	return _radius;
}



function get_polar_val( _val)
{
	if (_val > 100)
		_val = 100;

	if (_val < -100)
		_val = -100;

	if (_val >= 0)
		_ret = (_val * 327) + ((_val * 67) / 100);
	else
		_ret = (_val * 327) + ((_val * 68) / 100);

	return _ret;
}



function update_angle( _angle, _angle_increment, _mvt_direction)
{

	_angle = _angle + (_mvt_direction * _angle_increment);

	if (_angle < 0)
	{
		_angle += 360;
	}

	return (_angle % 360);
}



function check_magnitude( _mag, _x_val, _x_lval, _y_val, _y_lval)
{

	if (isqrt(pow((_x_val - _x_lval), 2) + pow((_y_val - _y_lval), 2)) <= _mag)
	{
		return TRUE;
	}

	return FALSE;
}



function get_RUMBLE_EVIL_STRENGTH()
{
	rumble = get_rumble(RumbleToUse());

	if (rumble > 10 && rumble < 90)
	{
		return (rumble - AR_STRENGTH);
	}

	return 0;
}



function RumbleToUse()
{
	if (get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B))
	{
		return RUMBLE_A;
	}

	if (get_rumble(RUMBLE_A) == 100)
	{
		return RUMBLE_B;
	}

	if (get_rumble(RUMBLE_B) == 100)
	{
		return RUMBLE_A;
	}

	if (get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B))
	{
		return RUMBLE_A;
	}

	if (get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B))
	{
		return RUMBLE_B;
	}

	return 0;
}


function get_DRAWBOXCV( _axis, _resolution)
{
	if (_axis >= 0)
	{
		_ret = (_axis % _resolution);

		if (_ret >= (_resolution / 2))
		{
			_axis = _axis + (_resolution - _ret);
		}
		else
		{
			_axis -= _ret;
		}
	}
	else
	{
		_ret = (_axis % _resolution);

		if (abs(_ret) >= (_resolution / 2))
		{
			_axis = _axis - (_resolution + _ret);
		}
		else
		{
			_axis += abs(_ret);
		}
	}

	return _axis;
}



int MinARecoilToApply;
int MovementARecoilToApply;
function AntiRecoil(CurrentX, CurrentY, ARecoilToApply)
{
    MinARecoilToApply = (PYTHONCV_COMPUTERVISI0NXQ_MIN_RECOIL_PERSENT * ARecoilToApply)/100;
    MovementARecoilToApply = ((100 - PYTHONCV_COMPUTERVISI0NXQ_MIN_RECOIL_PERSENT) * ((ARecoilToApply * (100 - isqrt(pow(CurrentX, 2) + pow(CurrentY,2)))) / (100 + abs(CurrentX) + (pow(CurrentY,2)/2))))/100;
   
   return clamp((MinARecoilToApply + MovementARecoilToApply),-100,(100 - MinARecoilToApply));
}


combo CANCEL_SLIDE_CW {
	set_val(CROUCH_BUTTON, 100);
    wait(CW_COMPUTER_VISIONZ2);
	set_val(CROUCH_BUTTON, 0);
	wait(20);
	set_val(SPRINT_BUTTON, 0);
	set_val(ADS_BUTTON, 100);
	wait(10);
	set_val(ADS_BUTTON, 0);
	set_val(CROUCH_BUTTON, 100);
	set_val(SPRINT_BUTTON, 100);
	wait(20);
	set_val(CROUCH_BUTTON, 0);
	set_val(SPRINT_BUTTON, 0);
	wait(20);
}



combo CANCEL_SLIDE_MW {
	set_val(CROUCH_BUTTON, 100);
	wait(CVx1COMPUTER_VISIONZ2); 
	set_val(CROUCH_BUTTON, 0);
	wait(60);
	set_val(CROUCH_BUTTON, 100);
	wait(50);
	set_val(CROUCH_BUTTON, 100);
	set_val(JUMP_BUTTON, 100);
	wait(60);
	set_val(CROUCH_BUTTON, 0);
	set_val(JUMP_BUTTON, 100);
	wait(10);
	set_val(JUMP_BUTTON, 0);
}


combo easy_plate
{
	set_val(SWAP_BUTTON,100);
	wait(6000); 
}



combo TURBO_MELEE
{
	set_val(MELEE_BUTTON, 100);
	wait(40);
	set_val(MELEE_BUTTON, 0);
	wait(32);
}


combo BUNNYHOP
{
	set_val(JUMP_BUTTON, 100);
	wait(32);
	set_val(JUMP_BUTTON, 0);
	wait(32);
	set_val(JUMP_BUTTON, 100);
	wait(32);
	set_val(JUMP_BUTTON, 0);
	wait(32);
}



combo HOLD_BREATH
{
	set_val(SPRINT_BUTTON,0);
	wait(64);
	set_val(SPRINT_BUTTON,100);
	wait(112);
	set_val(SPRINT_BUTTON,0);
	wait(112);
}



combo Quick_Scope
{
	set_val(ADS_BUTTON,100);
	wait(SHELL_RUN_DELAY);
	set_val(ADS_BUTTON,100);
	set_val(FIRE_BUTTON,100);
	wait(40);
	set_val(ADS_BUTTON,100);
	wait(40);
}



 combo Alert
 {
	set_led(1, 2);
 	wait(496);
 	set_led(1,0);
 	wait(496);
 }
 

 
 combo COMBO_PYTHONCV_SCAN
 {
	_ret = mvt_direction * polar_pipgetupdate6strength;
	
	if(PYTHONCV_pipgetupdate6TYPE == BORDER_SCAN)
	{		
		if(pipgetupdate6step == 0)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
		else if(pipgetupdate6step == 1)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else if(pipgetupdate6step == 2)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) , inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
	}
	else if(PYTHONCV_pipgetupdate6TYPE == DIAGONAL_SCAN)
	{
		if(pipgetupdate6step == 0)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
		else if(pipgetupdate6step == 1)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
			
		}
		else if(pipgetupdate6step == 2)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) , inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
	}
	else
	{
		if(pipgetupdate6step == 0)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
		else if(pipgetupdate6step == 1)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else if(pipgetupdate6step == 2)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else if(pipgetupdate6step == 3)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) , inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
		else if(pipgetupdate6step == 4)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
		else if(pipgetupdate6step == 5)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
			
		}
		else if(pipgetupdate6step == 6)
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) ,_ret));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , polar_pipgetupdate6strength));
		}
		else
		{
			set_val(POLAR_RX, polar_clamp(get_ival(POLAR_RX) , inv(_ret)));
			set_val(POLAR_RY, polar_clamp(get_ival(POLAR_RY) , inv(polar_pipgetupdate6strength)));
		}
	}


	wait(PYTHONCV_pipgetupdate6HOLD_TIME);
	
	pipgetupdate6step += 1;

	if(PYTHONCV_pipgetupdate6TYPE == FULL_SCAN)
	{
		if(pipgetupdate6step == 8)
		pipgetupdate6step = 0;
	}
	else
	{
		if(pipgetupdate6step == 4)
		pipgetupdate6step = 0;
	}
 }
 
 
 
combo combo_squareOPENCV
{	
	pipgetupdate5PYTHONCVOPENCV_strength = MIN_PYTHONCVOPENCV_STRENGTH - 1;
	pipgetupdate5strength_sign = 1;
	
	minOPENCV = MIN_PYTHONCVOPENCV_STRENGTH;
	maxOPENCV = MAX_PYTHONCVOPENCV_STRENGTH;
	
	if(wave_type == REGULAROPENCV || wave_type == RANDOM_SPEED || wave_type == pipgetupdate5SPEED )
	{											
		PYTHONCVOPENCV_strength = maxOPENCV_strength;						
	}	
	
	wait(8);
	
	if(((wave_type == pipgetupdate5STRENGTH) || (wave_type == TUNNELOPENCV)) && PYTHONCVOPENCV_update == 1 )
	{
		PYTHONCVOPENCV_update = 0;
		
		pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
								
		if(pipgetupdate5PYTHONCVOPENCV_strength >= MAX_PYTHONCVOPENCV_STRENGTH)
		{
			pipgetupdate5strength_sign = -1;
		}
		else if(pipgetupdate5PYTHONCVOPENCV_strength <= MIN_PYTHONCVOPENCV_STRENGTH)
		{
			pipgetupdate5strength_sign = 1;
		}
	}
	
	wait(272 + ((_MAX_W - PYTHONCVOPENCV_speed) * 136));
	
	pipgetupdate5PYTHONCVOPENCV_strength = (inv(MIN_PYTHONCVOPENCV_STRENGTH)) + 1;
	pipgetupdate5strength_sign = -1;
	
	if(wave_type == REGULAROPENCV || wave_type == RANDOM_SPEED || wave_type == pipgetupdate5SPEED )
	{											
		PYTHONCVOPENCV_strength = inv(maxOPENCV_strength);					
	}
	
	minOPENCV = inv(MAX_PYTHONCVOPENCV_STRENGTH);
	maxOPENCV = inv(MIN_PYTHONCVOPENCV_STRENGTH);
	
	wait(8);
	
	if(((wave_type == pipgetupdate5STRENGTH) || (wave_type == TUNNELOPENCV)) && PYTHONCVOPENCV_update == 1 )
	{
		PYTHONCVOPENCV_update = 0;
		
		pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
								
		if(pipgetupdate5PYTHONCVOPENCV_strength >= inv(MIN_PYTHONCVOPENCV_STRENGTH))
		{
			pipgetupdate5strength_sign = -1;
		}
		else if(pipgetupdate5PYTHONCVOPENCV_strength <= inv(MAX_PYTHONCVOPENCV_STRENGTH))
		{
			pipgetupdate5strength_sign = 1;
		}
	}
	
	wait(272 + ((_MAX_W - PYTHONCVOPENCV_speed) * 136));	
}
 
 
combo combo_stairsOPENCV
{
	minOPENCV = MIN_PYTHONCVOPENCV_STRENGTH;
	maxOPENCV = MAX_PYTHONCVOPENCV_STRENGTH;
	
	if(wave_type == REGULAROPENCV || wave_type == RANDOM_SPEED || wave_type == pipgetupdate5SPEED )
	{											
		PYTHONCVOPENCV_strength = maxOPENCV_strength;						
	}
	
	pipgetupdate5PYTHONCVOPENCV_strength = MIN_PYTHONCVOPENCV_STRENGTH - 1;
	pipgetupdate5strength_sign = 1;
	
	wait(8);
	
	if(((wave_type == pipgetupdate5STRENGTH) || (wave_type == TUNNELOPENCV)) && PYTHONCVOPENCV_update == 1 )
	{
		PYTHONCVOPENCV_update = 0;
		
		pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
								
		if(pipgetupdate5PYTHONCVOPENCV_strength >= MAX_PYTHONCVOPENCV_STRENGTH)
		{
			pipgetupdate5strength_sign = -1;
		}
		else if(pipgetupdate5PYTHONCVOPENCV_strength <= MIN_PYTHONCVOPENCV_STRENGTH)
		{
			pipgetupdate5strength_sign = 1;
		}
	}
	
	wait(272 + ((_MAX_W - PYTHONCVOPENCV_speed) * 136));
	
	minOPENCV = -1;
	maxOPENCV = 1;
	
	PYTHONCVOPENCV_strength = 0;
	pipgetupdate5PYTHONCVOPENCV_strength = 0;
	
	wait(272 + (PYTHONCVOPENCV_speed * 136));
	
	minOPENCV = inv(MAX_PYTHONCVOPENCV_STRENGTH);
	maxOPENCV = inv(MIN_PYTHONCVOPENCV_STRENGTH);
	
	pipgetupdate5PYTHONCVOPENCV_strength = (inv(MIN_PYTHONCVOPENCV_STRENGTH)) + 1;
	pipgetupdate5strength_sign = -1;
	
	if(wave_type == REGULAROPENCV || wave_type == RANDOM_SPEED || wave_type == pipgetupdate5SPEED )
	{											
		PYTHONCVOPENCV_strength = inv(maxOPENCV_strength);						
	}
	
	wait(8);
	
	if(((wave_type == pipgetupdate5STRENGTH) || (wave_type == TUNNELOPENCV)) && PYTHONCVOPENCV_update == 1 )
	{
		PYTHONCVOPENCV_update = 0;
		
		pipgetupdate5PYTHONCVOPENCV_strength = pipgetupdate5PYTHONCVOPENCV_strength + (1 * pipgetupdate5strength_sign);
								
		if(pipgetupdate5PYTHONCVOPENCV_strength >= inv(MIN_PYTHONCVOPENCV_STRENGTH))
		{
			pipgetupdate5strength_sign = -1;
		}
		else if(pipgetupdate5PYTHONCVOPENCV_strength <= inv(MAX_PYTHONCVOPENCV_STRENGTH))
		{
			pipgetupdate5strength_sign = 1;
		}
	}
	
	wait(272 + ((_MAX_W - PYTHONCVOPENCV_speed) * 136));
	
	minOPENCV = -1;
	maxOPENCV = 1;
	
	PYTHONCVOPENCV_strength = 0;
	pipgetupdate5PYTHONCVOPENCV_strength = 0;
	
	wait(272 + ((_MAX_W - PYTHONCVOPENCV_speed) * 136));
}


 
 int cled;
 combo rapid_fire_Led
 {
	if(toggle_rapid_fire == 2)
		cled = 3;
	else 
		cled = 2;

	set_led(cled,2);
	
	if(toggle_rapid_fire == 3)
		set_led(0,2);
	
 	wait(496);
 	
 	if(toggle_rapid_fire == 3)
 		set_led(0,0);
 		
	set_led(1,0);
	set_led(2,0);
	set_led(3,0);
 	
 	wait(496);
 }
 


combo cJitters 
{
   	set_val(ADS_BUTTON,100);
   	set_val(FIRE_BUTTON,0);
    wait(8);
    set_val(ADS_BUTTON,100);
    set_val(FIRE_BUTTON,100);
    wait(8);
    set_val(ADS_BUTTON,0);
    set_val(FIRE_BUTTON,100);
    wait(8);
    wait(8);
 }
 

 
int wtime;
combo cRapidFire 
{ 
  set_val(FIRE_BUTTON,100);
     
  if(toggle_rapid_fire == 2)
  	set_val(ADS_BUTTON,100);
   
  if(RMode == RANDOM)
 	 wtime = random(min_random,max_random);
  else 
  	wtime = RPressTime;
  
  wait(wtime);
  
  set_val(FIRE_BUTTON,0);
  
   if(toggle_rapid_fire == 2)
  	set_val(ADS_BUTTON,0);
  
  if(RMode == RANDOM)
 	 wtime = random(min_random,max_random);
  else 
  	wtime = RPauseTime;
  
  wait(wtime);

  set_val(FIRE_BUTTON,0);
  
   if(toggle_rapid_fire == 2)
  	set_val(ADS_BUTTON,0);
  	
  wtime = 0;
  
 if (RMode == HEADSH0TXZ) 
 { 
	if (get_ival(FIRE_BUTTON) < RPressure) 
	{	
		wtime = RStep ;
	}
 }
 else if (RMode == PYTHONCV) 
 { 	
	wtime = (get_ival(FIRE_BUTTON) * RDyn)/100 ;
 }
 
 wait(wtime);
}


combo cvibrate  
    {
         set_val(ON_OFF_BUTTON, 0);
         set_val(NOTORIOUS_RAPID_FIRE, 0);
         set_val(AKIMBO_NOTORIOUS_RAPID_FIRE, 0);
         set_val(JITTERS_BUTTON, 0);
         set_rumble(RUMBLE_A, 100);
         wait(300);
         reset_rumble();
     }

 

function center_x( f_chars, f_font) {
	return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function center_y( f_size) {
	return (OLED_HEIGHT / 2) - (f_size + 12 / 2);
}


function print_progress_bar( val, max_val) {
	rect_oled(14, 45, ((val * 100) / max_val), 15, 1, 1);
	rect_oled(14, 45, 100, 15, 0, 1);
}

function update_val( val) {
	val = val + (1 * Inc_Dec);

	return val;
}

function check_range( val, max_val, min_val) {
	if (val > max_val) {
		val = min_val;
	} else if (val < min_val) {
		val = max_val;
	}

	return val;
}

define FONT_WIDTH = 0;
define FONT_HEIGHT = 1;

const uint8 FONT_STATS[][] = {
		{ OLED_FONT_SMALL_WIDTH, OLED_FONT_SMALL_HEIGHT }, {
				OLED_FONT_MEDIUM_WIDTH, OLED_FONT_MEDIUM_HEIGHT }, {
				OLED_FONT_LARGE_WIDTH, OLED_FONT_LARGE_HEIGHT } };

function CenterX( f_chars, f_font) {
	return (OLED_WIDTH / 2) - ((f_chars * FONT_STATS[f_font][FONT_WIDTH]) / 2);
}

function CenterY( f_size) {
	return (OLED_HEIGHT / 2) - (FONT_STATS[f_size][FONT_HEIGHT] / 2);

}
int bufferindex_1;
int charindex_1, digitindex_1;
int font = 1;
function NumberToString( f_val, f_digits, x, y, color) {

	bufferindex_1 = 1;
	digitindex_1 = 10000;
	if (f_val < 0) {                     
		putc_oled(bufferindex_1, 45);    
		bufferindex_1 += 1;
		f_val = abs(f_val);
	}
	for (charindex_1 = 5; charindex_1 >= 1; charindex_1--) {
		if (f_digits >= charindex_1) {
			putc_oled(bufferindex_1, (f_val / digitindex_1) + 48);
			f_val %= digitindex_1;
			bufferindex_1++;
			if (charindex_1 == 4) {
				putc_oled(bufferindex_1, 44);  
				bufferindex_1++;
			}
		}
		digitindex_1 /= 10;
	}

	puts_oled(CenterX(bufferindex_1 - 1, font) + x, CenterY(font) + y, font,
			bufferindex_1 - 1, color);

}

function FindDigits( f_number) {
	f_number = abs(f_number);
	if (f_number / 10000 > 0)
		return 5;
	if (f_number / 1000 > 0)
		return 4;
	if (f_number / 100 > 0)
		return 3;
	if (f_number / 10 > 0)
		return 2;
	return 1;
}

int __pictureWidth, __pictureX, __pictureHeight, __pictureY, __pictureBit, 
        __pictureOffset, __pictureData;
function draw_picture( invert) {
	__pictureOffset = 1; // Reset the starting point
	__pictureBit = 0; // Reset bit flag
	

	for (__pictureY = 0; __pictureY < __pictureHeight; __pictureY++) { // Loop the Y axis
		for (__pictureX = 0; __pictureX < __pictureWidth; __pictureX++) { // Loop the X axis
			if (!__pictureBit) { // Check if we've already handled the last bit
				__pictureBit = 16; // Reset the bit flag
				__pictureOffset++; // Move to the next value
				
			}
			__pictureBit--; // Decrement the bit flag, we're moving to the next bit
			if (test_bit(__pictureData, __pictureBit)) {
				pixel_oled(__pictureX, __pictureY, !invert);
			}
			else {
				pixel_oled(__pictureX, __pictureY, invert);
			}
		}
	}
}


function get_state( x ) {
	if (STATE[x + 1] != -1)
		return STATE[x + 1] - STATE[x] - 1;
	return sizeof(STATE) - STATE[x];
}

function get_menu( x ) {
	if (Menu[x + 1] != -1)
		return Menu[x + 1] - Menu[x] - 1;
	return sizeof(Menu) - Menu[x];
}

function get_controller_m( x ) {
	if (CONTROLLER[x + 1] != -1)
		return CONTROLLER[x + 1] - CONTROLLER[x] - 1;
	return sizeof(CONTROLLER) - CONTROLLER[x];
}

function get_move( x ) {
	if (MOVE[x + 1] != -1)
		return MOVE[x + 1] - MOVE[x] - 1;
	return sizeof(MOVE) - MOVE[x];
}

function get_ar( x ) {
	if (SE_AR[x + 1] != -1)
		return SE_AR[x + 1] - SE_AR[x] - 1;
	return sizeof(SE_AR) - SE_AR[x];
}

function get_ar_t( x ) {
	if (SE_AR_T[x + 1] != -1)
		return SE_AR_T[x + 1] - SE_AR_T[x] - 1;
	return sizeof(SE_AR_T) - SE_AR_T[x];
}

function get_UNFAIR_aim( x ) {
	if (UNFAIR_AIM[x + 1] != -1)
		return UNFAIR_AIM[x + 1] - UNFAIR_AIM[x] - 1;
	return sizeof(UNFAIR_AIM) - UNFAIR_AIM[x];
}

function get_UNFAIR_aim_t( x ) {
	if (UNFAIR_AIM_T[x + 1] != -1)
		return UNFAIR_AIM_T[x + 1] - UNFAIR_AIM_T[x] - 1;
	return sizeof(UNFAIR_AIM_T) - UNFAIR_AIM_T[x];
}

function get_PYTHONCVOPENCV( x ) {
	if (PYTHONCVOPENCV[x + 1] != -1)
		return PYTHONCVOPENCV[x + 1] - PYTHONCVOPENCV[x] - 1;
	return sizeof(PYTHONCVOPENCV) - PYTHONCVOPENCV[x];
}

function get_PYTHONCVOPENCV_t( x ) {
	if (PYTHONCVOPENCV_SUB_T[x + 1] != -1)
		return PYTHONCVOPENCV_SUB_T[x + 1] - PYTHONCVOPENCV_SUB_T[x] - 1;
	return sizeof(PYTHONCVOPENCV_SUB_T) - PYTHONCVOPENCV_SUB_T[x];
}

function get_PYTHONCVOPENCV_c( x ) {
	if (PYTHONCVOPENCV_SUB_C[x + 1] != -1)
		return PYTHONCVOPENCV_SUB_C[x + 1] - PYTHONCVOPENCV_SUB_C[x] - 1;
	return sizeof(PYTHONCVOPENCV_SUB_C) - PYTHONCVOPENCV_SUB_C[x];
}

function get_PYTHONCV_scan( x ) {
	if (PYTHONCV_SCAN[x + 1] != -1)
		return PYTHONCV_SCAN[x + 1] - PYTHONCV_SCAN[x] - 1;
	return sizeof(PYTHONCV_SCAN) - PYTHONCV_SCAN[x];
}

function get_PYTHONCV_pipgetupdate6t( x ) {
	if (PYTHONCV_pipgetupdate6T[x + 1] != -1)
		return PYTHONCV_pipgetupdate6T[x + 1] - PYTHONCV_pipgetupdate6T[x] - 1;
	return sizeof(PYTHONCV_pipgetupdate6T) - PYTHONCV_pipgetupdate6T[x];
}

function get_DRAWBOXCV_m( x ) {
	if (SA[x + 1] != -1)
		return SA[x + 1] - SA[x] - 1;
	return sizeof(SA) - SA[x];
}

function get_DRAWBOXCV_t( x ) {
	if (SA_T[x + 1] != -1)
		return SA_T[x + 1] - SA_T[x] - 1;
	return sizeof(SA_T) - SA_T[x];
}


function get_mods( x ) {
	if (MODS[x + 1] != -1)
		return MODS[x + 1] - MODS[x] - 1;
	return sizeof(MODS) - MODS[x];
}
 
function get_slide_c( x ) {
	if (SLIDE_C[x + 1] != -1)
		return SLIDE_C[x + 1] - SLIDE_C[x] - 1;
	return sizeof(SLIDE_C) - SLIDE_C[x];
}

function block_btn() 
{
	set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	
	
	set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);
}  



 
combo EXIT 
    {
    wait(150);
    set_val(PS4_OPTIONS, 100);
    wait(150);
    set_val(PS4_OPTIONS, 0);
    }
	


function reset_script_var()
{
	USE_PYTHONCV_MOVE_SENSITIVITY	= DISABLED;
	PYTHONCV_MOVEMENT_THRESHOLD		= 40;
	FRONTAL_MVT_SENS				= 100;
	DRIFT_MVT_SENS					= 125;

	USE_FLIPPED_TRIG				= DISABLED;
	NOTORIOUS_VENDETTA						= DISABLED;
	NOTORIOUS_VENDETTAX				= DISABLED;
	NOTORIOUS_VENDETTAXQ 				= 0;
	NOTORIOUS_PYTHO90N					= DISABLED;
	SCRIPTKILL3R					= DISABLED;
	PIP_INSTALL_OPENCV					= DISABLED;
	PIP_INSTALL_HEADCAL					= DISABLED;
	PIP_INSTALL_COMPUTERVISION					= DISABLED;
	PIP_GET_UPDATE2					= DISABLED;
	SHELL_RUN_DELAY					= 160;
	RPressTime						= 32; 
	RPauseTime						= RPressTime;  /////////
	AR_TYPE							= DISABLED;
	AR_STRENGTH   					= 32;
	aim_assist 						= REGULAR;
	MAX_ANGLE 						= 18;  
	MIN_ANGLE 						= 12;
	MAX_RADIUS 						= 12;	
	MIN_RADIUS 						= 6;
	PYTHONCVOPENCV_TYPE = DISABLED;
	PYTHONCV_CARRIEROPENCV			= SINOPENCV;
	MAX_PYTHONCVOPENCV_STRENGTH		= 12;
	MIN_PYTHONCVOPENCV_STRENGTH		= 6;
	PYTHONCV_pipgetupdate6TYPE				= DISABLED;
	PYTHONCV_pipgetupdate6POWER			= 18;
	DRAWBOXCV_RESOLUTION_TYPE 		= DISABLED;
	RESOLUTION 						= 12;
	ADS_BUTTON 						= PS4_L2;
	FIRE_BUTTON 					= PS4_R2;
	INVERTED 						= 0;
	STRAFE_DELAY					= 0;
}


function load_pvar()
{
	USE_PYTHONCV_MOVE_SENSITIVITY					= get_pvar(SPVAR_1, 0, 100, -100); 
	PYTHONCV_MOVEMENT_THRESHOLD						= get_pvar(SPVAR_2, 0, 100, -100);
	FRONTAL_MVT_SENS					= get_pvar(SPVAR_3, 0, 300, -300); 
	DRIFT_MVT_SENS			= get_pvar(SPVAR_4, 0, 300, -300) ;
	USE_FLIPPED_TRIG					= get_pvar(SPVAR_5, 0, 100, -100);
	NOTORIOUS_VENDETTA			= get_pvar(SPVAR_6, 0, 100, -100);
	NOTORIOUS_VENDETTAX						= get_pvar(SPVAR_7,0, 100, -100);
	NOTORIOUS_VENDETTAXQ 					= get_pvar(SPVAR_8, 0, 100, -100);
	NOTORIOUS_PYTHO90N						= get_pvar(SPVAR_9,  0, 100, -100);
	SCRIPTKILL3R					= get_pvar(SPVAR_10, 0, 100, -100);
	PIP_INSTALL_OPENCV				= get_pvar(SPVAR_11, 0, 100, -100);
	PIP_INSTALL_HEADCAL		= get_pvar(SPVAR_12, 0, 100, -100);
	PIP_INSTALL_COMPUTERVISION		= get_pvar(SPVAR_14, 0, 1, 0 ); 
	SHELL_RUN_DELAY 	    = get_pvar(SPVAR_15, 0, 300, -300); 
	RPressTime	= get_pvar(SPVAR_16, 0, 100, -100);
	AR_TYPE 				= get_pvar(SPVAR_17, 0, 100, -100); 
	AR_STRENGTH 						= get_pvar(SPVAR_18, 0, 100, -100); 
	aim_assist 						= get_pvar(SPVAR_19, 0, 100, -100); 
	MAX_ANGLE 	    			= get_pvar(SPVAR_20, 0, 100, -100); 
	MIN_ANGLE			= get_pvar(SPVAR_21, 0, 100, -100); 
	MAX_RADIUS						= get_pvar(SPVAR_22, 0, 100, -100);
	MIN_RADIUS						= get_pvar(SPVAR_23, 0, 100, -100);
	PYTHONCVOPENCV_TYPE 					= get_pvar(SPVAR_24, 0, 100, -100); 
	PYTHONCV_CARRIEROPENCV 						= get_pvar(SPVAR_25, 0, 100, -100); 
	MAX_PYTHONCVOPENCV_STRENGTH						= get_pvar(SPVAR_26, 0, 100, -100); 
	MIN_PYTHONCVOPENCV_STRENGTH 				= get_pvar(SPVAR_27, 0, 100, -100);
	PYTHONCV_pipgetupdate6TYPE						= get_pvar(SPVAR_28, 0, 100, -100); 
	PYTHONCV_pipgetupdate6POWER 				= get_pvar(SPVAR_29, 0, 100, -100); 
	DRAWBOXCV_RESOLUTION_TYPE 		= get_pvar(SPVAR_30, 0, 100, -100);
	RESOLUTION			= get_pvar(SPVAR_31, 0, 100, -100);
	PIP_GET_UPDATE2		= get_pvar(SPVAR_32, 0, 100, -100);
	INVERTED		= get_pvar(SPVAR_33, 0, 100, -100);
	STRAFE_DELAY	= get_pvar(SPVAR_34, 0, 1000, -1000);
			
}


function save_pvar()
{
	set_pvar(SPVAR_1, USE_PYTHONCV_MOVE_SENSITIVITY);
	set_pvar(SPVAR_2, PYTHONCV_MOVEMENT_THRESHOLD);
	set_pvar(SPVAR_3, FRONTAL_MVT_SENS);
	set_pvar(SPVAR_4, DRIFT_MVT_SENS);
	set_pvar(SPVAR_5, USE_FLIPPED_TRIG);
	set_pvar(SPVAR_6, NOTORIOUS_VENDETTA);
	set_pvar(SPVAR_7, NOTORIOUS_VENDETTAX);
	set_pvar(SPVAR_8, NOTORIOUS_VENDETTAXQ);
	set_pvar(SPVAR_9,  NOTORIOUS_PYTHO90N);
	set_pvar(SPVAR_10, SCRIPTKILL3R);
	set_pvar(SPVAR_11, PIP_INSTALL_OPENCV);
	set_pvar(SPVAR_12, PIP_INSTALL_HEADCAL);
	set_pvar(SPVAR_14, PIP_INSTALL_COMPUTERVISION);
	set_pvar(SPVAR_15, SHELL_RUN_DELAY);
	set_pvar(SPVAR_16, RPressTime);
	set_pvar(SPVAR_17, AR_TYPE);
	set_pvar(SPVAR_18, AR_STRENGTH);
	set_pvar(SPVAR_19, aim_assist);
	set_pvar(SPVAR_20, MAX_ANGLE);
	set_pvar(SPVAR_21, MIN_ANGLE);
	set_pvar(SPVAR_22, MAX_RADIUS);
	set_pvar(SPVAR_23, MIN_RADIUS);
	set_pvar(SPVAR_24, PYTHONCVOPENCV_TYPE);
	set_pvar(SPVAR_25, PYTHONCV_CARRIEROPENCV);
	set_pvar(SPVAR_26, MAX_PYTHONCVOPENCV_STRENGTH);
	set_pvar(SPVAR_27, MIN_PYTHONCVOPENCV_STRENGTH);
	set_pvar(SPVAR_28, PYTHONCV_pipgetupdate6TYPE);
	set_pvar(SPVAR_29, PYTHONCV_pipgetupdate6POWER);
	set_pvar(SPVAR_30, DRAWBOXCV_RESOLUTION_TYPE);
	set_pvar(SPVAR_31, RESOLUTION);
	set_pvar(SPVAR_32, PIP_GET_UPDATE2);
	set_pvar(SPVAR_33, INVERTED);
	set_pvar(SPVAR_34, STRAFE_DELAY);
	
	
}

function init_UNFAIR_aim()
{
	mvt_direction = 1;
	mvt_predection_update_cycle_counter = 0;

	polar_radius = get_polar_radius(MAX_RADIUS);
	angle_increment = MAX_ANGLE;
	
	ar_strength = AR_STRENGTH;
	
	polar_pipgetupdate6strength = get_polar_val(PYTHONCV_pipgetupdate6POWER);

	if(DRAWBOXCV_RESOLUTION_TYPE)
	{
		if(DRAWBOXCV_RESOLUTION_TYPE == RANDON_RESOLUTION)
			resolution = random(4,8);
		else
			resolution = RESOLUTION;

		resolution_inc_dec = -1;
	}
	
	magnitude_ok = TRUE;	
	
	maxOPENCV_strength = get_polar_val(MAX_PYTHONCVOPENCV_STRENGTH);
	
	minOPENCV_strength = get_polar_val(MIN_PYTHONCVOPENCV_STRENGTH);
	minOPENCV_speed  = MIN_PYTHONCVOPENCV_SPEED;
	
	
	{
		wave_type  = PYTHONCVOPENCV_TYPE;
		wave_carrier = PYTHONCV_CARRIEROPENCV;
	}
	
	if(wave_type == REGULAROPENCV)
	{
		PYTHONCVOPENCV_strength = maxOPENCV_strength;
		PYTHONCVOPENCV_speed = minOPENCV_speed;
	} 
	else
	{
		PYTHONCVOPENCV_strength = minOPENCV_strength;
		PYTHONCVOPENCV_speed = minOPENCV_speed;
				
		pipgetupdate5strength_sign = 1;
		pipgetupdate5speed_sign = 1;
	}
	
	pipgetupdate5PYTHONCVOPENCV_strength = MIN_PYTHONCVOPENCV_STRENGTH;
	
	minOPENCV = MIN_PYTHONCVOPENCV_STRENGTH;
	maxOPENCV = MAX_PYTHONCVOPENCV_STRENGTH;
	
	axisNOTORIOUSKXK = USE_AXISNOTORIOUSKXK;
	
	RPauseTime	= RPressTime; 
	
	if(USE_FLIPPED_TRIG == 0)
	{
		ADS_BUTTON 	= PS4_L2;
		FIRE_BUTTON = PS4_R2;
	}
	else
	{
		ADS_BUTTON 	= PS4_L1;
		FIRE_BUTTON = PS4_R1;
	}
}



combo auto_ping { 
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(24)
	set_val(PING_BUTTON,100)
	wait(24)
	set_val(PING_BUTTON,0)
	wait(2000)
}



int cdelay = 370;
combo UNFAIR_intro
{
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay);
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 20);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 40);
	cls_oled(0);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 60);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 80);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 100);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 110);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 130);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 150);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 170);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 190);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 212);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
		wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
		wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
	wait(cdelay - 228);
	
	cls_oled(0);
	image_oled(0, 0, TRUE, TRUE, NOTORIOUSCRIPTZ[0]);
}


    
    function colourled(Colour) 
    {                         
        Col_ind=(Colour*4)- 3;                              
        set_led(LED_1,duint8(Col_ind  ));                    
        set_led(LED_2,duint8(Col_ind+ 1));                   
        set_led(LED_3,duint8(Col_ind+ 2));                   
        set_led(LED_4,duint8(Col_ind+ 3));                   
    }  



combo start 
    {
        colourled(Blue);
        wait(200);    
        colourled(Green);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(SkyBlue);
        wait(200);
        colourled(Blue);
        wait(200);    
        colourled(SkyBlue);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Yellow);
        wait(200);
        colourled(White);
        wait(200);
        colourled(Pink);
        wait(200);
        colourled(Red);
        wait(200);
        colourled(Green);
        wait(200);
        colourled(Blue);
    }
   

int _strafe;
int _strafe_index;
int _strafe_rand_1;
int _strafe_rand_2;

   combo strafe 
   {
	   if(_strafe_index == 0)
	   {
	   		_strafe_rand_1 = 80;
	   		_strafe_rand_2 = 160;
	   }
	   else
	   {
	   		_strafe_rand_1 = 160;
	   		_strafe_rand_2 = 80;
	   }
	   
	   
	   set_val(PS4_LX, 100); 
	   _strafe = random((STRAFE_DELAY - _strafe_rand_1), (STRAFE_DELAY + _strafe_rand_1));
	   wait(_strafe); 
	   wait(56); 
	   set_val(PS4_LX, -100);
	   _strafe = random((STRAFE_DELAY - _strafe_rand_2), (STRAFE_DELAY + _strafe_rand_2));
	   wait(_strafe); 
	   wait(56);
	   
	   _strafe_index++;
	   if(_strafe_index == 2)
	   	_strafe_index = 0;   
   }