/*https://www.notoriouscriptz.com/spartan-aim-notoriouscriptz

                                                              ..                                                                                                                                        
                                                        ..::::^J?7!^:.                                                                                                                                  
                                                    .::^^^^^^^^YYYYYYJ7~^.                                                                                                                              
                                                  .:^^^^^^^~!~~P555YY5YJJ?!^                                                     ......                                                                 
                                                .:^^::^^^^^^^!~P5JY555YYYYYY?^                                            .:~!77???????777!~^.                                                          
                                               .:::^^:^^^~^^^!~5YYY555Y5YYYYYY!                                          ^?JJ?JJJJ???????????7~.                                                        
                                              .::::^^^~^~~^^~!!5555P55Y5YYYYYYP7                                        :JJ?:..~???????????????7.                                                       
                                             ..:::^^^^^^^~^^!7755555YYYYYYYYY5G#!                                       ^JJ!   .????????????777?^                                                       
                                             ..:::^^^^^~~^^^~!75YY55YYYYJYYYY5B&#:                                      ^JJ?!^~7??????????777777^                                                       
                                             ....:^^^~~~~^:^!7755555YYYYYYY55PB&&7                                      ^JJJJJJ??????????7777777^                                                       
                                              ...:^^~!!!!~~^:!?555555YY55555PGB#B!                                      .:::::::::::~??777777777^                                                       
                                              ..::^~!!77!!!!~~!Y5JJ555555P55PB&BP^                             .^!777777777777777!!!7?7777777777:.PGGGGPY!                                              
                                            .  .::^~7??777!!!!J7!!JYY5PP5P5PBBBG5:                            ~?JJJJJJJJ?????????????77777777777:.########P:                                            
                                            .  ..:^~!7???777~^JY~~7??555GP5YJ?BG5.                           !JJJJJJ???????????????7777777777777:.B########P                                            
                                              .     .:^~!777~:7J7!~~~~!~^^:   JG5.                          ^JJJJJ???????????????777777777777777::##########!                                           
                                          ..  ^.          .::^??:....         !P5:                          7JJJJ???????????????777777777777777! ?##########5                                           
                                              :^^:.         :^7~^          .~Y5Y~.                         .?JJ???????????????????77777777777!^ 7###########B:                                          
                                               .:^~~~:.     :^^?Y        ~?YBG5?                           .JJ?????????????!~^^^^^^^^^::::::::!P#########BBB#~                                          
                                               .:::^~!!!:   :.!Y5:   ::^~7!!P55~                           .?????????????~.^7JYYYYYYYYYYYYYYPB########BBBBBBB~                                          
                                               ...::::^~:  :::JY5?   ^:::^^!YP5.                           .???????????7:.5#########################BBBBBBBBB:                                          
                                                ...:::^~: :^:~YP55:  :::::^?555.                            !J?????????^ G&######################BBBBBBBBBBB5                                           
                                             .   ...:^^~: ..:!YP57. .::::~^!55P:                            :?????????7 !&#####################BBBBBBBBBBBBB~                                           
                                             .   ....:^~.    :7~.    :~::!?J55G~                             ~????????7 7###################BBBBBBBBBBBBBBBJ                                            
                                             .   ....:^~.           .!7!:?5PPPG^                              ~???????7 7########################BBBBBBBBBJ                                             
                                             .   ...::^!.           .?77~?PPPBB:                               .^~!!~~~ 7###########PYYYYYYYYYYYYYYYYYYY?^                                              
                                             ........:^!            .7?7!^~YG#G                                         7###########5!!!!!!!!!!7:                                                       
                                              .....::::^             7J7!~^JP#!                                         7#########BB#########BB#7                                                       
                                               .::::::^^             !5YJJ?7G7                                          7#######BBBBBBBBB5!~?GBB7                                                       
                                                .:::^^^~             ^YJYY5J7                                           !####BBBBBBBBBBBG.   JBB!                                                       
                                                 .^^^^!~             :JJJJ57                                             Y##BBBBBBBBBBBBBY^^7GB5.                                                       
                                                   :^^7^              ?YYJ^                                               !5B###BBBBBBBBB#BBB5!                                                         
                                                    .:!.              7Y7.                                                  :~?Y5PGGGGGP5Y?!:                                                           
                                                                      ..                                                          .....                                                                 
                        .. .                        .                       .                    .                                             .                                                        
                    .!JYJJYY.  .^?JJJJJ7^          ~5^         ^???JJJ7:   :YJ?777777777?7      .Y7        :!77:        .:~~:.                 J?         :?J^.            ~!        ^7                 
                   .YP?:...!.   :PY:.:^JP?        :5PY         .P5:::~5P^  .!~^^^!P5~~~~!7      ?PP^        .JP5^        .55.     .....       7PP~         ?P:            :P5.      :55.                
                   ^P5.         .5Y    .P5.       J5JP!        .5Y    ~P7        :PJ           !P?PY         !PYP?.       5Y                 ^P?55.        7P:           .YPP^     .YPP^                
                    ?PJ.        .5Y    7P7       !P: 5P:       .5Y   :YY.        :PJ          :P7 ?P!        7P:~55~     .5Y                .5J !P?        ?P:           J57P7     ?57P7                
                     !557.      :P5!7?YY!       ^P7:^~PJ       .5Y~JYJ!.         :PJ         .Y5:^:55:       ?P: .JP?.   .5Y                J5:^:YP^       JP.          !P^ 55.   !P^:PY                
                      .!55!     :PY~~^:        .5Y ~? JP!      :PJ:YP!           :PJ         ?P^:J:~PJ       7P:   ~5P!  .5J               !P~.?^^PY.      Y5.         ^P!  JP7  !P!  YP:               
                         7PJ.   :PJ            ?P^    :PP:     ^PY  ?P7          :P?        ~P7     YP!      ?P:    .?PY^.5Y              ^P?     ?P?      Y5.        .5?   ~P5 ^P7   ?P!               
                          YP^   :PJ           7P7      7PJ     :PY   7PJ.        ^P?       ^PY      ^P5:     ?P:      ~5PJ5J             :55.     :5P^     Y5.       .YY.   .5P?5?    ~PY               
                   :!:...!PY.   ^PJ          ~PJ       .YP!    :PY    ~P5:       ^P7      .5P:       7PJ     JP:       .7PPJ             YP^       ~PY.    Y5.       ?P^     7PPJ     .5P:              
                   ^5YYYYY?.   .~5?.        :JY~        !5Y^. .^YJ:    ^YJ^.    .~5?.    .7Y?.       :Y5!.  .?P^.        ^YJ           .!Y?.       :Y57:  :Y5^     .757      :5Y.     .J5!.             
                   ......      .....                    .....     .       .     .....                .....  ..::.         .^                        ....  ....      ...       ..      .....             

 ...  ....                                                                          ..          ..                                                                                                                                                   .................::^::^:....:^^^^^~~~!~!!!!!!!!77777777
       .:::.                             ..        .       ....                                .::                                                                    ..                  ...  ....                   .           .......................::::::::...:^^~~~!~~!~^^^~!777?JJYYYYYY5Y555PP5PPP5
   ...   ....                             ......    ..     .....                               ...                                                                 ......                   .             ..          .....       ..........................::::::..:^^^^^~~~~~~~~~~~~!7?JJYY5555555555555PP
   ..::..                               .. .. ..  ..............                         ... ......          .......   ..                           ...:^^^^^::..     .   ..         ................    ...   ..... .......       ...........................:::::::^^~~^^~!!~^~!777!!~!!77?JY5555555555PPP
..   .:::::..           #&&&&&&&&&&&&&&&&&7 .     G&&&&&&&&&&&P   G&&&&&&&&&&&&&&&Y     J&&&&&P..~&&&&&&B   Y&&&&&&&&&&&&&&&&##BGPJ!:           :?P#&@@@@@@@@@@@&#GJ^.    B&&&&&&&&&&&&&&&&&&&&&&&&&&?     .   ...............    ...............:::::........::::^^^^^~~~^~~~!!!!!7JJJJJ??777?JYYYY555PPPPP
...    .:::::::.       !@@@@@@@@@@@@@@@@@@#...    #@@@@@@@@@@@B   #@@@@@@@@@@@@@@@@.   .&@@@@&:..^&@@@@@&.  P@@@@@@@@@@@@@@@@@@@@@@@@#?       7#@@@@@@@@@@@@@@@@@@@@@&Y.  &@@@@@@@@@@@@@@@@@@@@@@@@@@5         ............................::::::::::::::.....::::^^^^^~~~^^~~~!77777??JJYYJJ??JJJY5555555PP
.............::^^.     B@@@@@@@@@@@@@@@@@@@~  ..  #@@@@@@@@@@@B   B@@@@@@@@@@@@@@@@?   ~@@@@@&^..~&@@@@@&.  P@@@@@@@@@@@@&&&@@@@@@@@@@@B    .B@@@@@@@@@@@B5P@@@@@@@@@@@&^ &@@@@@@@@@@@@@@@@@@@@@@@@@@5 .................................:::::::::::::::::::::..::::^^^~~~~~~~~!!7????7???JJJJJJJYJJY55555555
..   .:^^....::^~!^:. .@@@@@@@@@@@@@@@@@@@@B      #@@@@@@@@@@@B ..#@@@@@@@@@@@@@@@@#   G@@@@@B~:.:G@@@@@&.  P@@@@@@@@@@@&...?@@@@@@@@@@@?   Y@@@@@@@@@@@#.. 5@@@@@@@@@@@B !?????7G@@@@@@@@@@@@Y?JJJJJ~ ...........................:.:::::^^^^^^:::^^^^^^^:::::::::::^^~~~~!~~!!77?JJ???????JJJJJJJYYYY55555P
   . ..:^^:...::::::^.Y@@@@@@@@@@P&@@@@@@@@@:     #@@@@@@@@@@@B   B@@@@@@@@@@@@@@@@@~ .@@@@@@~.   !@@@@@&.  P@@@@@@@@@@@&.  .&@@@@@@@@@@P . B@@@@@@@@@@@G   J@@@@@@@@@@@&        ?@@@@@@@@@@@@.          .........................::::^^^~~~~~^^^^^^~^^^^^::::::::::^^~~~~!!!77????J??????JJJJYYYYY555YY555P
   ...:^^^^.......:.::&@@@@@@@@@@.#@@@@@@@@@5     #@@@@@@@@@@@B   B@@@@@@@@@@@@@@@@@G 7@@@@@&..   .@@@@@&   P@@@@@@@@@@@&   .@@@@@@@@@@@5 ..#@@@@@@@@@@@G   ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@:   .      ........................:::^^^~~~!!!!!!~~~~~~~~~^^^^^^^:::^^^~~!!7777????JJJJJJ?JJJYYYYYYYY555YY555
     ...:~~^........:7@@@@@@@@@@B.P@@@@@@@@@&.    #@@@@@@@@@@@B   B@@@@@@@@@@B@@@@@@@:B@@@@@@7.    &@@@@&   P@@@@@@@@@@@&?7?B@@@@@@@@@@B:  .&@@@@@@@@@@@G   ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@:           ......................::^^~~~!!!!!!7777!!~~~~!!~~~~~^^^^^^^^^~!7????J???JJJYYYJJJJJYYYYYYYYYYY5555
          .^^:...::..G@@@@@@@@@@7.?@@@@@@@@@@7    #@@@@@@@@@@@B   B@@@@@@@@@@?&@@@@@@B@@@@@@@~.   7@@@@@&   P@@@@@@@@@@@@@@@@@@@@@@#57: ....&@@@@@@@@@@@G.. ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@:          ...........::::.....:::^^^~~!!!7777777????77!!!!!~~~~^^^^^^^^^~!7???JJJJ???JJYYYYYYYYYYYY55YYYYY555
             ...^~!!~&@@@@@@@@@&. .@@@@@@@@@@#    #@@@@@@@@@@@B   B@@@@@@@@@@~P@@@@@@@@@@@@@B..   &@@@@@&   P@@@@@@@@@@@@@@@@@@@@@@@&#G7....&@@@@@@@@@@@G . ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@:     .   .............:::.::::^^^^^~~~!7777777777?JJJJJ???77!!!~~~~~~^^^~!!7???7?J????JJJYYYYYYYYYY5555YYY555
                .^!~P@@@@@@@@@@B:..B@@@@@@@@@@~   #@@@@@@@@@@@B   B@@@@@@@@@@~~@@@@@@@@@@@@@?.    &@@@@@&   P@@@@@@@@@@@&!!7G@@@@@@@@@@@B...&@@@@@@@@@@@P   ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@:.    ................:::::^~~~!!!!!!!!!777??????????JJJ?JJJJJJ?7!!!!!~^~~~!7??????JJJJJJJYYYYYYYY555555Y55555
                   :#@@@@@@@@@@GJYYB@@@@@@@@@@B   #@@@@@@@@@@@B   B@@@@@@@@@@~ #@@@@@@@@@@@&^.   :@@@@@@&   P@@@@@@@@@@@&.  :@@@@@@@@@@@@? .&@@@@@@@@@@@G   ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@: .   ..  .........:::^^^^^^^^~~!77??J?77!77?????7???JJ?77JJJYYJJ??777!~~~~!!7??J?JJJ?JJJJJYYYYYYY5555555YYY55
                   :@@@@@@@@@@@@@@@@@@@@@@@@@@@.  #@@@@@@@@@@@B   B@@@@@@@@@@^ 7@@@@@@@@@@@G..   !@@@@@@&.. P@@@@@@@@@@@&...:&@@@@@@@@@@@5 .#@@@@@@@@@@@G   ?@@@@@@@@@@@@.       ?@@@@@@@@@@@@.  .         ....:::^^^^^^^^^^^^~~!!7?????7?????7777????!~?JJYYYJJJJJ?!!~~~~!7?JJJJJJJ??JJJJJJJJJYY55555555YY5
                   Y@@@@@@@@@@@@@@@@@@@@@@@@@@@5  #@@@@@@@@@@@B   B@@@@@@@@@@^ .&@@@@@@@@@@7..   J@@@@@@&...P@@@@@@@@@@@&.. .&@@@@@@@@@@@5 .B@@@@@@@@@@@G~^ ?@@@@@@@@@@@&        ?@@@@@@@@@@@@.  .     ........::^^^~~^^^^^^^^~~~!!77777??????????????^:!JJYYYYJJJJ?7!~~~!!7?JJYYYJJJJJJJJJJJJ?JJY5555555555
                   &@@@@@@@@@@@&#&&&@@@@@@@@@@@&. #@@@@@@@@@@@B   B@@@@@@@@@@:  5@@@@@@@@@&...   J@@@@@@&.. P@@@@@@@@@@@&..:Y@@@@@@@@@@@@Y  Y@@@@@@@@@@@#?7 5@@@@@@@@@@@B        ?@@@@@@@@@@@@.  ..     ........::^^^^^^^^::^^^~~~!!!!!77??????JJJJ??7:.:7YJYYJJJJJ??777!!!7?JYYYYYJJJJJYYYYYYYYJJYYY5555555
                  ~@@@@@@@@@@@@7..^!&@@@@@@@@@@@Y.#@@@@@@@@@@@B   B@@@@@@@@@@:  :@@@@@@@@@? ..   G@@@@@@&.  P@@@@@@@@@@@@&&@@@@@@@@@@@@@@^  .B@@@@@@@@@@@&#B@@@@@@@@@@@&.        ?@@@@@@@@@@@@.   ...   ....:^:::::^^::::::::^^^~~~!~~~!!7?????JJJJJJ7::.^JJJJYYYYJJJ???7!77?JJYYYYYJJJJYYYYY555555555555555
                  B@@@@@@@@@@@@.    G@@@@@@@@@@@&^&@@@@@@@@@@@B   #@@@@@@@@@@~...#@@@@@@@@: ..   #@@@@@@&   P@@@@@@@@@@@@@@@@@@@@@@@@@@&7   ..7#@@@@@@@@@@@@@@@@@@@@@&?          ?@@@@@@@@@@@@.         ....:^^~~^::^::^^^:::^^^~~~~~~~~!!!77??JJJYJJ?.:..~JJJYYYJJJ?7??777??JYYJJYJJJJYY5555555555PPP555555
                 .######&##&&&G     7&&&&&&&&&&#&!G&&&&&&&&##&5   P&####&&&&&J!!~Y&&&&&&&G..:.  .#&&&&#&G   J&&&&&&&&&&&&&&&&#####BGPJ^.   ... .^?P#&&@@@@@@@@@&&#P7:            !&####&&&&&##.     ..........:^~~^:::::^~~^^^^^^~~~~~~~~~!!!77??JJJY?.:...?Y55555YJ???????JJJJJJJJYJJJYY55555555PPPPP555555
                        .  .:::       ...:^~::. .....:::^^^:...   ..... ...:^~!!~~^^^^^^^::.^. ..::...             ...............           .. ......:J5GGJ^::...                  .^^^^::..       ...........::^~^::::^^~~!!~~~~~~~~~~~~~!!777????J?...  ^5555YYYJ?????JJJJJJYYYJJJJY555555555PPPPP5555555
                        . ::...           ....    ......:::::::........  ....::^^^^::::.....^. .......   .            ......... ...  .     ...........^7JY??    .......           .~~.........       ..........::::^^::::^^~~!77!!!!~~~~~~!!!7777?????..:. .!YYYJJJJJ????JYYYY5555YYYYYYYY5555PPPPPP55555555
                          ::.              ....      .....:::^^^^:........  ...:::::::.....:^. ........   .....         ...........  ....   ....... ..~7????.    ......    .:.       ...........     ...........:::::::::^^~~!77!!!!!!~~!!!!!777???JJ?..^^. ~???JJJJYYJJJJJJYY55PPPPP55YYYY555PPPPPPGPP55555
                       .. ..                ...         ..:^:::::::.....      .............:^............ .......        ........ ..  ...     .    ...~JJ?!~      ......  ..         ......::.         .........:::::::::::^^~!77!!!!777!!!!777???JJJJ7:^?:.77777??JJYYYYYYJJJ555PPPGGPPPPP555PPPGGGGGGGGPPP
                          .                               ..:^:.............     .....     .....    ............ ..      .......       ...    ..   ...~JJ!^      ............  ..     ..:7PB#GP5J~:.   ..........:::::::..::^^~~!!7777777777777???JJJJJ7^: .77!!77777??JYYYYJJYY555PGGGGGGGGGGPPPGGGGGGGBBBG
.                         .. ...                            ...:::... ......               :.            ....     .....  ...  .  .  .......   ....  ...!~. ..      .............:.:^:..^G@@@@@@@@@&BJ~. ...::.......:::....:^^^^^~~!7????777???????JJJ??:...777!7777??JJJJJJY555555PPPPGGGBBBBBBBGGGGGGBBBBB
.                  .......... .^!^.                           ..:^^:.....:.....   ...     .:.             ....  .....................   ...   .....  ..77:...        ......:....^:...::^?G&&@@@@@@@&#GP?^.:!^.:::..........::::::^^~!!!7???????????JJJJJ^:..7?777777?JYYYYYJYY5PP5PPPPPGGGBBBBBBB#BBBBBGBBBB
.                .......::... .^!?Y7:                             .::.................    .:.              . .........................   ..   ......  .7!:.....      .........:^!^:::::^:.:^!5&@@@@@#PPY57~!::...::..::.........:::^^~~!7??????????JYYYJ~:..~YJJ?????JJYY55555PPPPPGGGGGGGBBBBBBBB##BBBBBBB#
..                .........  .!777777!^.                           .................. ....::              .~. .   ....................  ....  ........:7~:.......     ......:^~~?~:::::^::...:~?P#&@&GPYJ?!^:^:::::::^::..........:::^~~!7?????????JYYYY!...~5YYYYYYJJJYY5555PPPGGGGGBBBBGGBBBBBBBB##BBBBBBB
...        .   ....::......   ~~^::::~!7!^:.                                ....:.........::              ^J.     .....................................:^:..........  .....^~~~!!7:::^~~^^^:^~~^~7YP#&B5J!^:::::::^^^^^::......:::::::^~!7?????????JJYYY7.. ^55555YYYY555555PPPGGGGGGGBBBBBBBB#########BBBBB
....       ..     .........   .:...:....:^~!~^:.                              ............~.              7?.          ............    .....:::...::...:~:................:^~~!7?P!^^~~!!!!!~~~^::^^~7??~^:::::::::^^^^::......:^^~~~~~~~!777??????JJYY5J.. :5P5555555PPPPPPPGGGGGGGGGBBBBBBBBB##########BBB
^^::..    ...     ....:::..    ........:::::^^^:::.:.                   ..      .........:!.             .~~:           ...................:::::.......:^:.....:::...:....::^77~!P?!~!!!!!?7!77!!~~~~:.^:..::.:::::^^^::.......::^~!77777777777????JJJYYY:. .Y555PP555PPPGPGGGGGBBBGGBBBBBBBBB###B##########
^^^^::... ...   ..........     ..........::::::::^~^..:.                ..:..      .......^.             :~~.          ...............:::::::^^^:......:^:.....:^^:.......::^?J~!?Y~^^~!!~!!~!?PGGP5J^.........:::::^^^:::.....::^~~!77??JJJJJ?7??JJJJJYY^...?555555555PPGGGBBBBBBBBBBBBBBBBBB##BJB#B#####&#
!!77?7!^.  ..             .    ......:::::.::.:~~^7!^!7?J5P5J!:.          ...:..    .....               .^~~:.          ...........:::::::^^^^^^^:.....^:......:::.......::^~7Y7!7Y~^^!!!~~~7!!?PG5P5~...   ....:^^^^^^^::::..::^~~!!!!77?JYYYYYJJ?JJYYYY~...7P555555555PPPGGGGBBBBBBBBB#BBB####G~G#?Y######
7JY55PPPY^..                   .........::.::~!7!7Y~!!!7YG#&@&#B57:        ..::..    ..        ...      ..^J~.......   ............::^:::^^^^^^^:::...:~:......::::.......:^~JP?~7J!^:^!!!!~~~~~!!7?5Y^...   ...:^^^^^^^^^:^^^^^~!777777???JJYYY555YYYY557.. ~5555555PPPGGBGGGGGGGBBBBBB########P:5P!^P&&###
!7?JY5PGBB7.                   ..........:^^~7???5?!~!!7???YG#&&#GPY!.        ....             ............!~........................:::::^^^^:::::...:^:...............:.:::!P5?7JJ^:^~!7!^::^::^^^??:...... ...^^^^^^^^^^~!!7777????JJJJJYYYYYYY55PP55PJ...^P55555PPPGGGBBBBBBGGGGBBBBBB######5:JY!:!B#&&#
~~!7?JJ?J5~ ^?^.     ........  .........::^~7???7Y??!?YYY?7~!JGBGGP55Y~.        ...            ............^:......:::...............::^~^^^^^^::::::::^:.::::::::..........:^77!^~?!^^~~^^^::^~~~^..  .  ...... .~~~^^^^^^~7??JJ???JJYYY5555YYYYYYY5PGGPY:..:J75555PPPGGBBBBBBBBBBBBBBBBBB#####5.!Y!^^Y####
.::^~77777:.~PP5J!^^!?Y5J!^.   .........::!?YP5JJGPGGPP55YY????Y55Y??J?!:          .          .............~~........::::......::....::~!7!^^^^^::::^^^^::^~~~~~~^:::........::^:::^??~^^:::::^^:...:.    ......  .^~~~^^^~!7?JJYYJJJJYYY555YY555YYYY5PPPP^...!^5PPPPGGGGBBBBBBBBBBBBB##BBBB####P.^77^:!B&##
...::^^^~^:.^?Y5P55J7~!?JYJ~.  .:......::^7Y55YJ555GGGGGGGGGGY77777~~7!~^.         ...        .............^~..::^^^^^::.......^:...::^~!7?7^^^^^::^^^^^..^^~~^^~~^^^^^......:.:::.:JY!~:::.     .::.::. ..    ..   :~!~~~!???JJJYY55YYYYYYYYYYYYYYY555PPP~...^.JGPPPGGGGGGBBBBBB###############P.:^^^:^P###
J!^:::..::..:!77?JYYJJ!:  :^.  .^:^~^^:::^75Y?JJP5J55JY5P5YJJYY?7^....:::..                   ...... .........:::^~!!!~~^:.....^....:^^~!!7~:!7!!~^^^^:^..:^^^^^~~^:^^~:           .~?!!.      .^:....~7~...         :~!!77JYJ??JY555555P5PP555555555PPPPP!. .:.7GGPGGGGGGGBBBBBB5P#############P::5?^~Y####
J55Y?~:.:...:^^::^~!~~!77^.    ....:^~^^^!JYJ7?YPP55YY?!!!!~~7J!^.     ....                   ................::^^~~~~!!~^:...::...::^~!77!:.^?JJJ!^^^:^.:^:^~~!^^!!^^~^  .. .^. .  .7!7:    :::^:^7~^~:.....         :!77?JJYJJJYY555PPP?JPPPPPPPPPPPGGGG?. ...!PPPPGGGP5GBBBBBB!~PG###########P::GG~~B&&&&
!??JYYJ7!:....::^::^^:^^~7?~.     ...:^::~JY?!7?J!~~~~~~:^^^^^^:..                 .           ...............::^^~~~~!!~^:::::..::::^~!7!:..:7??JJ7~^::.::.^~!7^^7?7!~~: :!^^?!^:...~JJ!      .:~!^:....  ......      ^77??JJYJJYY555PPY~~5PPPPPPPPGGGGBB5. ...~GGGPPPG5!PGGBBBP^:~Y#B#########G:.5B!^P&#&&
5P55YYYYY^.:!~::::::^:.::^~~.   .    ..  ..:^!?P?^.     .:...                      .          .... ...........::^^~~~~~!~^^^^^:.~!!^:~!!7~....!JJJJJ7^::.::.:^~!^:7JYYJ??~:~?!^::^!7.:YY!^:..:!^^~^.....    ..!YY       ~?77?JYYYY5555PP?^^?PPPPPPGGGGGGGBP.  ..^GBBBBGGJ:JPPGGBY...^B##########B:.5#7^P&##&
555YY5YJ?:.:JY?~~~~~~:..::~~.  .J?:      :.. :B&P~        .                        .         .................::^^~~~~~!~^~^~~^.!77^:7??7:....~7?JJJJ!^:.:..:^:^:.~?JJYJJ7...::^7??!^.YY!^:. .?~.^~:....    ..7?.       .?J???YYY555555Y~^:~5PPPGGGGGGGGBBG:  ..^PBBBBBBJ.!55BBBJ....P#B#########^.5&5^G&&##
Y55PP55Y7..:7??!!77!^:...:^~:. .~Y57.  .^~~^:Y&#P!.    :^^:....                    .                ..........::^^~~~~!~~~~^!^::!77:.!??!^:.:7J7?JYY57^:.:...^^^:.:!7????J~        ~! !?!^:7. .:^~7^:..... ....          :JYYYYY55PP555J~~^:!YPPPGGGGGGGGPG~  ..^J5PBBBB7:^JYG##B!..^G#######BB##^.5#P:P&&&#
5P5P5YYY?..:~~!!~!!!^:...::~:. .~!7JJ~..... :#&#P7^^:.:::^:^:....                  .                  ..........::^~~~!!!!!!7^.^777:.~??!~^.^JYYJ7?YY!:......~77!::777????J^ .     .^.:~:...    .!J?^........:::.      .  :?Y5YYY5PPJ?77Y!^~~~YPPGGG55GGP?Y~   ..7?JGGGB5^~55BBBBG~.~P######G?5#B~.YB5:5#G##
?YYYJ???7..^7!!!^^^^^^::..:^^.  JPY?!JY:....JPG5J?7^::^......                      ..           .    ............::^^~~!!7?J?^.~?7!:.:!!7~^^^!???~~JY~...~:.^?JJJ:.7JJ??~^?J.          .         !J7~:.......:::.     .....^J55555Y5?!!~J7^7!^JP5?YP55PP57?!   ..77!PGGBB!^55BBPPBJ.~YG#####5!JB#~.YB5:JGYPB
.^~~~~~!~..^??7~^^^:^^::::::..  ~Y55Y?~.... :~. .77: .:......   .          ..       ..         . ......... ......::::^^~!???7:.~?7!:.:!!!~^.:!7?7^^7?^..:?:.7JJYJ^.!YYYJ!^!Y!..       ..:::.     .7Y?^:..:::::::.     .:::::^?JY55Y5Y!!!??!77^?PY~!555PP5?J?.   .?!!PGGGB?^Y5GBJJGP.:JGBB#BBJ!7G#!.7J7~YPJYG
  ..:^^~^..:~!!^::............  .:^:^^  .:.  :.     ....::..                ...     ..        ................:....:::^^~~!7!:.~J?7:.:!77!:.^7?J?!~77:..^?!~?JYYJ~.~Y55Y!^!YY:...     ~??77!7:.   !Y?~::^^^:^::^      .:7!^77!^75P5P57!?P?^??^7GY~~YPPGGGY?J.   .?~~5GGGG?:J5GB?7PG:.7GBBBBBP77GG!^^^:!YB#GG
    .:^^:...^~~~^:.............  ..     ..   .      ...::..                   ..   ...      ..................:::.:::^^~~~~!~..~??7^.:!7?7:.^??JJ7!J7:..^J~^JYYYY7.:YPPP?~?PP!....  .^?YJ?J??!~:. .~?!^^^^~!!^^PP:     :?J?7JY~^YPP55?!?PJ:?J^7BY~~?PPPGGY?Y:   .?!~5GGGGJ:?5GBJ~5B~.~PBBBBBB?7J7~~!~::^7YPG
..    ......~~~^...::........... .:.    ..           ..:..                      .   .  :.   .............. ...:::::^^^~~~~!!~..~777^..!7?7:.~??JJ7!J7...!Y~^J5555J::JPGGJ~?PGY....  .^~^:::::::..  :7!^^^!!!!^?G&@#J:   !??JYJ!:JPPPPJ!7P?:7J^!PG?!PGPPGGY7Y^   .Y7!GBBBBY:?5PB5!5B!.:5BBBBBG7!!!!!7~:^^^^^~
...        ...:^^::............. ..     ..   .^^^^~:.:....                       .75P?JP5JGGJ~:..........  ...::::^^^^^~~~!!~..~!!!^..!77!:.~??JJ7!Y7...7Y~~Y555PY^:?GGGY!?GGP:...   ..  .....:.    !?7!~^!J~!5P#@@@?YJ^!JJJJYJ^YGPPGJ!?GY^!?^^?Y?!5GPGGGY7Y!   .?!!5PGBB5:75PB5!5B!..?5PGBGJ7777777!^!!~^^^
...         .:^~!^:............. ...    ..   .:. .::::...                       .JPB&&J:::!7?YPPJ^....... ....:::::^^^^^~~~!^..~!!!^..!77!:.~77?J?!Y7...J5^~5PPPP5~.7PPGY!75YJ^....                 :JJ77!?^ .::^^!~:!?!^^^^~!!~7?????!?GJ^^^:::!7~JP5555J7Y7   .7!7JY5G#P^!55BY~YB7..!YYYY7^^~!!!!7!^!~~~~~
.....      .:^^:::..........:... ..     .    .^::^~^^:...                      .Y~:?P57:     ..~??:::.... ....:::::^^^^^~~~~:..~!77~..~7?7::~!!777757...J5^~PGGGGP7:!PGGY~~~^::....                  :~!7!.        ....:::::^^^^^^^^~~!7?~~^~:....:!YY??YJ7?7   .?77JYYPBP^!PY5J~?57:.:JJJ?~:^^^~~~77~~~^:::
......    . .................... ...    .    ....::.....                     .7P#5J5?~~:...   .:^~:::::.. ....:::^^^~~~~~^~^:..^!77~..!?7~!?J5PPYJ?J~...Y5^~PPPGGG?:^7!~~:^^:..:...                  .^^:      ......:::::::^^^^^^^^^~~^~~~!!!~~^:..:~!?JJ?YJ.  .77?JYY55Y^~5YYY!7Y!:..?J?7^...:~~^^~^::....
...........      ..    ... .....  ..    .            ..                      :5P5J~^^~77!7?^ .~77!^:::::.....:^~~~!!7?JJJJ?7:.:^!!7!..!7^~J5PGB##B57:...7!:.:!???J7^^::::.::.......                                .....:::::^^^^~~~~~~~~~~~~!!!!7~:..:?JJJY5.   ^7?JYYJYY^:?JJ?~7Y!:. ^!77.    ...^~.      
...........       ...:^~~^^:...  .....       .       ..                      ^B&GGY7!7?7!^:...~!^:^^^^^:..:.::!777?JJY5PPPP5^.^~JJJ7:.!~^YPPPGB#BGP?....::^:..::^^::::::...:.:~~~:.                               .......:::^^^^^~~~!!!!~~~~~~~~~~!!~:.~YYJY5^   :7??JJJYJ^:!7!!~~!^:. .......... .7J^   .:~
........        .:~~!~~~^^^^^^::^^^::.      .::.                            .JYYJ??77Y5J77~^.......:^~!:..^..:?JJYY555P5J7!!:.!!5GGP^.~::!??YPGGBGP7.:...:~:^^^:.:........^YB#G?~!~.                            .......::::::::^^^~~~~!~~~~~!!!~!!~!!!~~?YYPP~   .7?7?JJYY~:~7!!~:.... ..........~!7J7^:^~~^
...           .^~~!~~~::.......::::....  .~^^^^^..                           !5J!^::^!!^::.:: ..  ^: .^..:~.:^J5Y5555PY~~!!~..77YPPP~.~. ..^557~!!~:.:.  .^^::~Y#&Y:......!5YP5J7!^..                       ....:::^^^~~~~~~~~~~~^~~~~~~!!!!~!!!!!!!!!!~~~!??~   .?Y??JY5Y!:~77!^...:.. .......  :~!7~:^^:. 
^:.        .:^^^^^~~~!~~~^:...  .......  ^57~~~~:....                       .J555J7!J55Y!^~. ..  .~J^ ...:^.:^J5555YJ?!^^~~:..:75GPJ^.: :^.^P7...:^:...  .::!B@@@&&P!.... .:.^YGG57:.                     ......:::::^^^^~~~~~!!!7!!77!!77777777!!!!!!!!!~~~!7    !5YJ?J55!:^7?7^. .... .......         . ..
^~^.      .^^^^^^^:::::::^^^:::......... ^J7~!?7^.........              .....::::.  .:.....:~~....:^~.   ...::?!~7??!~~~~^:.. ...:~~^::.~?Y?Y??Y557^...   ~B@@@&&&&&Y^     .....^~~!                                .........:::^^^^^^~~~~!!!777777777!!!~~~~~.   :!!!7?5P7:~???^......   .....   .. ...   .
^~^:....:^~^^^^^^^^::::::.....::::.....   :~7?J?!:..::::.           . ............         .:.......:    ...:......:~!~^^.... ............~:..?7!~:....  ?&@&&&&&&&?..^: .....    .                        ...               ............:::^^^~~!~!!!!!!!~~~~^.  !Y7^!?YY7:~J7~.....::. ::....       .    .
!!~^^~~~^^^:::.......... ...    .....  .^^::^^~~::...                     .........           .......     ..:. ..:........... ....... ... .. .:.~~:... .J##BGGB##B?....:G#J^:...  ..^!!~:......           ....::::::::.....              ..::^~~~^^^:^^~~~~~~~~^: :~^.:7?7!7?:         ........            .
J7~^^::..                            .!PG5!~~^^...             ........::::::::^^^^..          ....     :: .::..:^^~~........ ...... ..:. ^7~7?:!7^:!?5&&GY??Y55Y!. ..~&&&&#G5J5? 7PP5YY5YJJY?^  .::::...        ....::::::::.........        ..:^~^^^:::::^^^^^^:.:...~7J?:.            ......:.           
^:.                                 .:?PP?!^^77...                       ............     .           ....   .^^~~:.      .. ..........::..^^^:^G##&@@@@#P?!~~!7~. ..?&&#&##BGPPP:~PP5555YYY!..^77!~~^^^::::::...      ..::::::................    ..:^^:.....::^:^^:..!PY.               .... :^           
.           ............           .                                               ..      .          ...   ...:^!^...    .. .::^......::~  .!G&@@@@@@@@&&#GJ~.:: ..Y&###&&###BG#?.YGP5Y55J..~5PYYYJ??777!!!!!~~^^::.... ............ ..... .......    .:::......:::::^5?         .....   ....              
        .......... .                                                      .        ..                       .^^:  .::^^:.    ..::.......~!7G&@@@&&&&@@&&&#BGY!:....J#########&###G.~B5JP5^.~5GGGPPPPPPPPPP5PP55YJ7!~^:::::....    .......                .....  ...:^YB7        .::^~^^^^^:..               
     ..........               ......           .:^~^^^^^^^:::..           :!J7^:.:...   . :^~~!^          .  :^~. ... ....^7!^^:........7B@@&&#####BBBGP5J7^..... !BBB###&&&&&&##B^.~..:..JGBBBBBBBBBBBB##B#####BGPY?!~^^::::::                            ..      :G#~       ..~~^?J~^!^^^~:...::^~^...  . 
    ......         ..       ..:^~7?JJ7~^^^^~7?JY555Y55PPPPPP55PPY?~:.....  .:5B#GP^..   . ..                 ....7JJJ??JPB#&&&#P?^:^~75##BBGGGPP5YYJJ??7~^..    . YBBB###&&&&&####PY7^. .?G###&#&&&&&&&&&&&&&&&&&&#BG5J7~^^::..                                   .P&~      .~~~~~:^~:~!::::::^^!J7!^.      
  .....                  .:!J5GBBGGGGGGPPPGBBBBPGGGGGBB#&&&#P##&&&&#5!:......!P5!^...                          .~!7?JYYY55GGPPGGBB#&&&&GYY5YYJ?7!!~^^:::..      . JGGB###&&&&&####P???. 7G#&&&&&&&&&&&&&&&&&&&&&&&#BGG5J?!^^:..                                   P@!      .7J?:.:^::^::^:::::.::.       .:~
 ....        ..        :?PB##B#BB#########&&##GGPGGBB#&&&@&##&&&@@@@@@&P!~~~~:    ...             ...          ..:^!7?JJ?7!~~~~~!5#BBGPY7777!~^^:::.....          7PGGB##&########JY7: :?5GB#&&&&&&&&@&@@@&@&&&&##BBGP5Y?7~^::.         .                        5@Y      .?5?J::.:~~^::::.:::.....!~~~7J5GB
::..    .:^^^^^:..   :JPBBBBBB##&&&&&&&&&&##BGP55GGGB#&&&&&&@@@@@@@@@&#Y^.        ...   . .~7?7Y55PGP!          ...:^~!777~:::..:??5G55?!~^:::.....          ..   ^5PGB###BBBBB##&#5. :!7YPGB&&&&&&&&&&&&&&&&##BGPP5YYJ?7!~^:...                                J@G.     ~Y7PJ~^^..:::...:::.......J&&##BBB#
.   .~J5555J?7~^:   .7?JY5PGBB##&&&&&&&&&#BGP555PGGGB&&#B&&@@@@@@@&BJ:            ...  ^J^JG5G5PGPG5P5J:          ....:^~~~::.:^777Y57!~^:.....          .....    .JPGBBBBGBB#B#BY!~!?J55Y5PB##&&&&&&&&&##BBGGP5YJ?77!~~^^:....                                !@#.     7GB5!!::^....^:.:...::...::.7&&&BGG#
  ~P&&&#BGPY?!^:.   .:~!7?YPGGB#########BGG5YYYYPGGBBGPB&&&&&&&&G?:            .:....  !7~?77?!~!~::::^^             .....:::::!J7~!??77~:...        ........      ~5GPPPPGGGB##BGGGP555P55PPGB#######BBGP5YYJ?!!~^^::.....                                   .&&^ .  .JBPY?:^^.............::::::.:.!##PY5G
Y#@@@@&#GPJ7~:.      ..:~!7JY55PGGGGGGGPP5YJ????JY5P5?YB##&&&BJ^            .^7?Y^..   :..^^:.::..                    ... ....:^~^^^!7!~^:.....     ........       .!JYJJY5555B#BBBBBG5YYJJY55PPGGGPP555YJ?!~~^::...                     .........            P#7 .. .Y##5?J:^:^^....::::::::^:::^:...7G5Y5P
@@@@@&#G5J!^.         ..::^~!7??JJJY555YJJ?7!!777?JJ?J?5PG#BY:          .:~??7!!~...     .. ...                             .......:::::::......  ........        .~:^~~!777??J55PGGPP5J7~~!77????777!!!~^^::...                         ....::.....         !&&:    JBPGYJ??!::^^:::::::::^~~^:::^::.:JY?JY
@@@&&BG5?~:.           ....:^~!!~~~!!!!!~^^:^^^~!77!!7~!PG?.         .^77~^^:^:.....                        ..   .               ............     .....         .!55?..::::^^^^~!7??????7~:.:::::::::...                                 ....:::::...       .B@J    ^BPYG?PJ~!:::^^:^:^::^^^^^^::::::.:^!~~!
@@&#GPJ!^.             ..:::^^^^:::::::.......:~!7??!~JY!.         :7J~^::..........    ..                                           .....                     :75GP5! ....:::^!?5GBPY????7~:...                                         ......:::....      5@G.   .GGPY5GJJ~!:~^^::^:::^^^^^^::::::^:::~77~
&#BPY7~:.              ..::::...............:^!!?JJY5Y^          :!J!!:.:.:.........     .                                                         .~^..      :?5GP5J~  .:^!JPB#&@@@&&&&###BP5?!^..                                        ....::::.....   !&&^   .YBG#PPP77^:!!^^::::::^~^^^^^::::::^^^^!PP
BPY?!^..               ....   ....::::^^~7JY5GGGPGPJ:         .~?7~^!~.. ::........      .. ..                         .                    .      ~YJ?^.    :?5PPYJ7:  ^!?YGB##&&&&&&&&&&&&#BGPY?!~^:..                                     ....:....... .&@Y.   ~B&BGGBJ!^~:~::^^::::^:~^^^^^^^^^^^~^~!!JP
Y?!^:.                 ..:.....::^~!!77?J5PGGB###Y:         .!YJ7!^::..  ..........   .........                         ..           ........:.      ^!:     !J5Y?7~:. .!J5Y555PPB##BGGB#####BGGGGGPY?!~::.............                        ...........5@#. ..:B@&B#BJ5~^!:~:^~^~^:::::^::::^^^^^^!~~77!?
~::..                  :^^::::...::^~~!!7?J55PGP~         .^JYY7^^::.. ......:.....   .^::.....                           .....................:      ..    !YY?!^:..   ~??7!!7?JY5PPYJJ55PPPPPP55YJ7!~^^::::^^^^^:::::...                      .........^&&7  ..P@@&G5G5?^:^::..:~~~~^:::^:::::^^^^^^~~~!~^
..                     .^~~^^^:::::^~!!?JJY5PP7.        .~YJ?~!!::........::^^^:...   ^:::.....                            ......................           7PPYJ!^..   ^^^^~!?Y55YYJJ?777777?77!!~^^^^^^~~~~!7777!~^::..                         .......5@B:  .?@&@BY#Y~~^::..::~~~^^^:::^::::::^^^:::::~~^
                       .:~!!!~^^^~!?JYYYYY5PY:        :~7JYJ??7^:!:::.::::~^:^~^.:.   ^::......                             ...... ................      ... .JY?~^.   .::^7Y5PGGP5J??7?77!!~^^::.::::^~~~~^^::::::::....                          .....~&@5   .P&&&G5?:7^....:^^^~~!7~^^::::::::::::::::^~^
                       .:~!!~~~!7JY55PP5Y55~         ^7!J?!!77!!~^^^:::..::^^~!^.:.  .^::.......                              ...  .................      .57.?PY7^.   :~!J5PPPPP5YJ???JJYJJJ?77!!!!!~~~~~^^:..:::::::..   ...                      ....J&#:   ^#@##55:~7:^...:::^:^!!^^^::^^::::.....::::^^
                       .:^~~^~~!7JJY55YYY?.        :~!?!J~~~~~!!~~!^^^:.::^~~7?^..   .^:........                                    .............  ..      :~ !J!~:    :!?JJJYY5YYJJ?JJJJJJYY5555YYYJ?7!~^^::^~77!~^:.........                         :B&J    7BBGP?7:~:::..::^:::~~!^:::^::::::.....:::::.
                        .^^^:::^~!!777?YJ.        .!?~!!^^!^^~~~~^~^^:.::^~~!77:..   .::::......                                     .... .:......  ..        ...      .!!!777??J???7????JYYYYYYYJJJ?7~~^:::~7JYJ7~:... . ...                          7&#^   .5B5P?^?:~:.:.::::::^~~~::^:::::::........::..
                        .:::::::::^^^~?^        .^^~J7^!^~^:~~^~~~^^:::^^~~~~~~...   ::.:......                                       .   ..  ...    ..                .^~^~~~!77?????77???????77!!~^^:::..::^~~^:.............                        G&J    :YPJ7!!7:^.^..^:.::::^^:::::::::::............
                        .......:....:!:        .^!!~~!^::::~^^!~~!~^^::::^^^~~^...   ::........  .                                                   .:!^               ::::::^~!7????7!~~~~~~^^^::............:::.............                       :GG~    ~??J!7!^:^~!::::..:::::::::..:::::............
                        ..:::..::..:!:        :7!!77~!^^~:^!~^^~~~~^::..:^^~~!^...   .........   .                                                 .!5Y!:               ......::~!!777~^:::::..............   .........:::::...                       YPY:   .7Y!:^!^!~^::.....::::::::....::.............. 
                        .:^^^:.:..^!:        ^77Y7~!::^~^:^^^!!!!~~^:...::^~~~:...   ..........                                                 .^77~:.                 ......::^~~~!!!~:::.......   .......   ......::^^:::...                      .JJ!    .~77~~?~~^::::::^.:^::^::::...::...............
                         .:^^:..::~.       .~?7!::^!:^:^^^~!~!!!!!~^:.:.::^^~~:..    ........                                                .^?7~.      .              ::^~~~!!!!!~!!~~^:::::....::::^^^::......:^^^~^^^:::....                     ~5J:    :^^~7~^:::^..::^~.^~::::::::::^::..............
                         ........:.       :7!~7. .  .....:^^^^^::^::......:::^...    ......                                                :~!~:                        ::^~~!!!~~^^^^^::::::^^^^~~!~~~^^:.....:^^^^^^::........                     !?!.  . .::::..^...  .....:.....::.........^.. .. . .. 


  
  
  
█░█ █▀█ █░█░█   ▀█▀ █▀█   █░█ █▀ █▀▀   █▀▀ █▀█ █▀▄▀█ █▀█ █░█ ▀█▀ █▀▀ █▀█   █░█ █ █▀ █ █▀█ █▄░█
█▀█ █▄█ ▀▄▀▄▀   ░█░ █▄█   █▄█ ▄█ ██▄   █▄▄ █▄█ █░▀░█ █▀▀ █▄█ ░█░ ██▄ █▀▄   ▀▄▀ █ ▄█ █ █▄█ █░▀█



╋┏┓
┏┛┃
┗┓┃
╋┃┃
┏┛┗┓
┗━━┛ Open our Spartan Aim MOD LOADER (download from the website) and enter your License Key inside the loader and then enter it down below.
     
     
 

┏━━━┓
┃┏━┓┃
┗┛┏┛┃
┏━┛┏┛
┃┃┗━┓
┗━━━┛ Run the loader and download Pyhton from the menu.
                        
      
      
 
┏━━━┓
┃┏━┓┃
┗┛┏┛┃
┏┓┗┓┃
┃┗━┛┃
┗━━━┛ enable computer vision for the CronusZEN and build and run the script as it is now.



┏┓╋┏┓
┃┃╋┃┃
┃┗━┛┃
┗━━┓┃
╋╋╋┃┃
╋╋╋┗┛ choose the weapon you want to use. It will customize the recoil and object detection settings to the gun you have choosen.





┏━━━┓
┃┏━━┛
┃┗━━┓
┗━━┓┃
┏━━┛┃
┗━━━┛ Enabling mods from the Zen menu GREEN = ON RED = OFF (do not enable all mods at once)









                   !DO NOT BE FOOLED THIS DOES NOT WORK WITHOUT THE LOADER DO NOT OPEN A SUPPORT TICKET IF YOU DO NOT HAVE A VALID LICENSE KEY YOU WILL BE IGNORED!
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             
                                                             
                           ▒█▀▀▀ █▀▀▄ ▀▀█▀▀ █▀▀ █▀▀█ 　 █░░█ █▀▀█ █░░█ █▀▀█ 　 █░░ ░▀░ █▀▀ █▀▀ █▀▀▄ █▀▀ █▀▀ 　 █░█ █▀▀ █░░█ 
                           ▒█▀▀▀ █░░█ ░░█░░ █▀▀ █▄▄▀ 　 █▄▄█ █░░█ █░░█ █▄▄▀ 　 █░░ ▀█▀ █░░ █▀▀ █░░█ ▀▀█ █▀▀ 　 █▀▄ █▀▀ █▄▄█ 
                           ▒█▄▄▄ ▀░░▀ ░░▀░░ ▀▀▀ ▀░▀▀ 　 ▄▄▄█ ▀▀▀▀ ░▀▀▀ ▀░▀▀ 　 ▀▀▀ ▀▀▀ ▀▀▀ ▀▀▀ ▀░░▀ ▀▀▀ ▀▀▀ 　 ▀░▀ ▀▀▀ ▄▄▄█
                           ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
                                                        --  
                           ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
                           


*/

	define CallOfDutyButtonLayoutSettings				=		 0;	 // Choose The Number From Below That Corresponds To Your CallOfDutyButtonLayoutSettings
define Sticks				=		 0;	 define Ping_BTN			= 	PS4_UP;	 int    INVERTED				=		 1;	 
																																																																																																		/*
0 = Default  1 =	Tactical    2 = Lefty   3 = N0M4D/CHARLIE   4 = N0M4D/CHARLIE Tactical_BTN    5 = N0M4D/CHARLIE LEFTY   6 = Bumper Jumper    7 = Bumper Jumper Tactical   8 = One-Hand Gunslinger   
9 = Stick & Move   10 = Brawler   11 = Beasty   12 = Bumper Ping   13 = Bumper Ping Tactical   14 = Default Swapped   15 = Tactical Swapped   16 = Bumper Jumper Swapped
17 = Bumper Jumper Tactical Swapped   18 = Stick & Move Swapped   19 = Beasty Swapped   20 = Bumper Ping   21 = Bumper Ping Tactical






Aimbot powered by real-time object detection with neural networks, GPU accelerated with Nvidia. Optimized for use with the Call Of Duty series.

import cv2
import numpy as np
import win32gui, win32ui, win32con, win32api

def grab_screen(region=None):

    hwin = win32gui.GetDesktopWindow()

    if region:
            left,top,x2,y2 = region
            width = x2 - left + 1
            height = y2 - top + 1
    else:
        width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
        height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
        left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
        top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)

    hwindc = win32gui.GetWindowDC(hwin)
    srcdc = win32ui.CreateDCFromHandle(hwindc)
    memdc = srcdc.CreateCompatibleDC()
    bmp = win32ui.CreateBitmap()
    bmp.CreateCompatibleBitmap(srcdc, width, height)
    memdc.SelectObject(bmp)
    memdc.BitBlt((0, 0), (width, height), srcdc, (left, top), win32con.SRCCOPY)
    
    signedIntsArray = bmp.GetBitmapBits(True)
    img = np.fromstring(signedIntsArray, dtype='uint8')
    img.shape = (height,width,4)

    srcdc.DeleteDC()
    memdc.DeleteDC()
    win32gui.ReleaseDC(hwin, hwindc)
    win32gui.DeleteObject(bmp.GetHandle())

    return cv2.cvtColor(img, cv2.COLOR_BGRA2RGB)

















																																																																																										*/


				                                        define SpartanQuickAim		   = TRUE; 
				                                        define CallOfDutyDeadZone	   =   12; 
				                                        define SpartanAALock		   = FALSE;  				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        define NotoriousRageXSpeedBoost		= FALSE;
				                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         int DRIFT_Value					=  3;	
				                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         int DRIFT_Wait_Value			= 30;
				                                   				                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                             define QuadStrafeAssist			=  14;	
				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        define SCDLCW		= 160;	
				                                      		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                          define MWSCDL		= 120;	
				                                       		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         define BF2042SCDL	= 140;	
				                                       		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         define MW2SCDL		= 300;  
				                                       		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         define THRESHOLD				=  83;	
				                                      		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                          define BOUNCEPRONE			= PS4_R3;	


				                                       		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                        		                                       				                                        				                                        				                                        				                                        				                                        				                                        				                                        				                                         int HAIRTRIG			= TRUE;


				                                        			                                        			                                        			                                        			                                        			                                        			                                        			                                        			                                        			                                        define thisISSPARTA			= FALSE;


	                                                                																																																																																						    define notoriouscriptz2293887744hfh7848487556SwitchToggle			=	TRUE;		
																																																																																							                                      int    notoriouscriptz2293887744hfh7848487556SwitchMethod			=	   1;		
													
													
													
																																																																																							                                              define notoriouscriptz2293887744hfh7848487556SwitchHoldButton		=	  PS4_DOWN;	
																																																																																							                                               define notoriouscriptz2293887744hfh7848487556SwitchDblTapButton	= PS4_TRIANGLE;	

	
																																																																																						                                       	define SPARTAN22LKOP				=	   TRUE;	
																																																																																						                                       	define QuickToggleHoldButton	=    PS4_L2;	
																																																																																						                                        	define RapidFireSPARTAN2020938384786755				= PS4_RIGHT;	
																																																																																						                                                                        	define DropShotSPARTAN2020938384786755				=  PS4_DOWN;	
																																																																																						                                                             	define BunnyHopSPARTAN2020938384786755				=  PS4_LEFT;	
																																																																																							define JumpShotSPARTAN2020938384786755				=    PS4_UP;	
																																																																																														/*
*/
init {
																																												Load_PVARs();

	Colour = 255;

																																												combo_run(NOTOIROUSTHAGOD);

																																												if(INVERTED == 2)
		Inverted = -1;
	else
																																													Inverted = 1;

	if(NotoriousSpartan32aimbotv3s == 4)
	{
		InnerDeathFog = NotoriousSpartan32Radius / 2;
		OuterDeathFog = NotoriousSpartan32Radius;
	}

	aR_Strength = (AR_Strength / 2) + AR_Strength;

	if(VerticalStart < VerticalEnd)
		VertVal = 1;
	else
		VertVal = -1;

	VertCalc = (VerticalTime / 10) / (abs(VerticalStart - VerticalEnd));

	if(HorizontalStart < HorizontalEnd)
		HorizVal = 1;
																																																																																							else
		HorizVal = -1;

	HorizCalc = (HorizontalTime / 10) / (abs(HorizontalStart - HorizontalEnd));
}

main {
																																																																																							RightStickRadius	= isqrt(pow(get_ival(AimX)  , 2) + pow(get_ival(AimY), 2));
	LeftStickRadius		= isqrt(pow(get_ival(Strafe), 2) + pow(get_ival(Walk), 2));
	SmartRumble			= get_rumble(RumbleToUse());
																																																																																							Running				= LeftStickRadius >= 95 && get_ival(Walk) < -THRESHOLD;

																																																																																							if(SpartanQuickAim)
	{
		if(RightStickRadius <= CallOfDutyDeadZone)
		{
			set_val(AimY, 0);
			set_val(AimX, 0);
		}

																																																																																								if(LeftStickRadius <= CallOfDutyDeadZone)
		{
			set_val(Strafe, 0);
			set_val(Walk  , 0);
		}
	}

 	if(get_console() == PIO_PS4)
    {
        if(get_controller() != PIO_PS4) 
        {
            if(get_ival(PS4_SHARE)) 
            {
   																																																																																						             if(get_ival(PS4_R3)) 
                {
                    set_val(PS4_SHARE, 100);
     																																																																																						               set_val(PS4_TOUCH,   0);
                    set_val(PS4_R3   ,   0);
       																																																																																						         }
                else 
                {
                    set_val(PS4_TOUCH, 100);
                    set_val(PS4_SHARE,   0);
                }
            }
        }
    }
    else if(get_console() == PIO_XB360) 
    {
        if(get_controller() == PIO_PS4) 
            swap(PS4_TOUCH, PS4_SHARE);
    }

	                   Buttons(CallOfDutyButtonLayoutSettings);
	ControllerRSLS(Sticks);

	
	if(RumbleBlock)
		block_rumble();
	

	
	if(HAIRTRIG)
	{
																																																																																								if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);

																																																																																								if(get_ival(PS4_L2) > 10) 
			set_val(PS4_L2, 100);
	}
	

	
	if(thisISSPARTA)
																																																																																							{
																																																																																								if(RunRumble && !combo_running(cVibrate2))
		{
			RunRumble -= 1;
			combo_restart(cVibrate2);
		}

																																																																																								if(get_battery() <= 5) 
		{
			MS += get_rtime();

			if(MS == 5000)
			{
				Rumble(FALSE, 3);
				MS = 0;
			}
		}
	}
	

	
	if(UseAutoRun && !AutoRun_KS)
	{
		switch(UseAutoRun)
		{
			case 1 :
			{
				Sprinting = TRUE;
			break;
			}

			case 2 :
			{
				if (!get_val(Ads_BTN) && get_val(Walk) < -THRESHOLD)
				{
					combo_run(cRun);
				}

				if(get_val(Sprint_BTN) && get_val(Walk) < -THRESHOLD)
																																																																																										{
					Sprinting = TRUE;
				}

																																																																																										if(Sprinting)
				{
																																																																																											if(get_ival(Walk) > -THRESHOLD)
					{
						Sprinting = FALSE;
					}
				}
			break;
			}

			case 3 :
			{
																																																																																										if(!get_ival(Ads_BTN) && (!combo_running(SpartanMWSlideCancel) || combo_running(cCancelSlideCW)) && isqrt(pow(abs(get_ival(Strafe)), 2) + pow(abs(get_ival(Walk)), 2)) >= 97 && get_ival(Walk) <= -72 &&
					!(isqrt(pow(abs(get_lval(Strafe)), 2) + pow(abs(get_lval(Walk)), 2)) >= 97 && get_lval(Walk) <= -72))
						combo_run(cRun);
			break;
			}

			case 4 :
			{
				leftStick = Get_Polar(POLAR_LS, POLAR_RADIUS);

				if(event_release(Sprint_BTN) && get_ptime(Sprint_BTN) <= 200 && leftStick > THRESHOLD)
				{
					combo_run(cTacSprint);
				}

				if(leftStick < THRESHOLD && combo_running(cTacSprint) || get_val(Ads_BTN) || get_val(Fire_BTN))
				{
					combo_stop(cTacSprint);
				}
			break;
			}
		}
	}

																																																																																								if(event_press(Reload_BTN))
		{
			combo_run(cStopSprint);
		}

		if(event_press(Ads_BTN) || event_press(Fire_BTN))
		{
			combo_stop(cStopSprint);
			AutoRun_KS = FALSE;
		}
	

	
	if(notoriouscriptz2293887744hfh7848487556SwitchToggle)
	{
		switch(notoriouscriptz2293887744hfh7848487556SwitchMethod)
		{
																																																																																									case 1 :
			{
																																																																																										if(get_ival(notoriouscriptz2293887744hfh7848487556SwitchHoldButton))
				{
					if(event_press(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton))
					{
						notoriouscriptz2293887744hfh7848487556Switch	= !notoriouscriptz2293887744hfh7848487556Switch;
																																																																																												Frame		=	 -1;
																																																																																												Display		=  TRUE;
						combo_restart(NOTOIROUSTHAGOD);
						combo_run(cVibrate);
						LEDBlink(notoriouscriptz2293887744hfh7848487556Switch);
					}
						set_val(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton, 0);
				}
			break;
			}

			case 2 :
			{
				if(get_ival(notoriouscriptz2293887744hfh7848487556SwitchHoldButton))
				{
					if(DoubleClick(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton))
					{
																																																																																												notoriouscriptz2293887744hfh7848487556Switch	= !notoriouscriptz2293887744hfh7848487556Switch;
						Frame		=	 -1;
																																																																																												Display		=  TRUE;
						combo_restart(NOTOIROUSTHAGOD);
						combo_run(cVibrate);
						LEDBlink(notoriouscriptz2293887744hfh7848487556Switch);
					}
						set_val(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton, 0);
				}
			break;
			}

			case 3 :
			{
				if(DoubleClick(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton))
				{
					notoriouscriptz2293887744hfh7848487556Switch	= !notoriouscriptz2293887744hfh7848487556Switch;
					Frame		=	 -1;
					Display		=  TRUE;
					combo_restart(NOTOIROUSTHAGOD);
					combo_run(cVibrate);
					LEDBlink(notoriouscriptz2293887744hfh7848487556Switch);
				}
					set_val(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton, 0);
			break;
			}

			case 4 :
			{
				if(get_ival(notoriouscriptz2293887744hfh7848487556SwitchHoldButton))
				{
					if(DoubleClick(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton))
					{
						driveMode	=  TRUE;
						notoriouscriptz2293887744hfh7848487556Switch	=  TRUE;
						Frame		=	 -1;
						Display		=  TRUE;
						combo_restart(NOTOIROUSTHAGOD);
						combo_run(cVibrate);
					}
						set_val(notoriouscriptz2293887744hfh7848487556SwitchDblTapButton, 0);
				}
			break;
			}
		}

		if(driveMode)
		{
			if(event_press(PS4_SQUARE))
			{
				driveMode	= FALSE;
				notoriouscriptz2293887744hfh7848487556Switch	= FALSE;
			}
		}
	}
	

	if(!notoriouscriptz2293887744hfh7848487556Switch)
	{
		if(ZenScreen == MenuClose)
		{

		//
		if(SPARTAN22LKOP)
		{
			if(get_ival(QuickToggleHoldButton))
			{
																																																																																										if(event_press(RapidFireSPARTAN2020938384786755))
				{
					RapidFireToggle = !RapidFireToggle;
																																																																																											combo_run(cVibrate);
																																																																																											LEDBlink(RapidFireToggle);
				}

				if(event_press(DropShotSPARTAN2020938384786755))
				{
					StandardDropShot = !StandardDropShot;
					combo_run(cVibrate);
					LEDBlink(StandardDropShot);
				}

				if(event_press(BunnyHopSPARTAN2020938384786755))
				{
					BunnyHop = !BunnyHop;
					combo_run(cVibrate);
					LEDBlink(BunnyHop);
				}

				if(event_press(JumpShotSPARTAN2020938384786755))
				{
					JumpShot = !JumpShot;
					combo_run(cVibrate);
					LEDBlink(JumpShot);
				}
					set_val(RapidFireSPARTAN2020938384786755, 0);
																																																																																																																																																																																	set_val(DropShotSPARTAN2020938384786755 , 0);
					set_val(BunnyHopSPARTAN2020938384786755 , 0);
					set_val(JumpShotSPARTAN2020938384786755 , 0);
			}
		}
		

	    
																																																																																								if(RapidFireToggle)
		{
																																																																																									if(get_ival(Fire_BTN) || ScopeShot == 2 && get_ival(Ads_BTN) || ScopeShot == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cRapidFire);
			}

			if(event_release(Fire_BTN) || ScopeShot == 2 && event_release(Ads_BTN) || ScopeShot == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cRapidFire);
			}
		}

																																																																																								if(AkimboRapidFireToggle)
		{
																																																																																									if(get_ival(Fire_BTN) || ScopeShot == 2 && get_ival(Ads_BTN) || ScopeShot == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cAkimboRapid);
			}

			if(event_release(Fire_BTN) || ScopeShot == 2 && event_release(Ads_BTN) || ScopeShot == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cAkimboRapid);
			}
		}

																																																																																								if(BurstFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShot == 2 && get_ival(Ads_BTN) || ScopeShot == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(cBurstFire);
			}

			if(event_release(Fire_BTN) || ScopeShot == 2 && event_release(Ads_BTN) || ScopeShot == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cBurstFire);
			}
		}

																																																																																								if(DynamicRapidFireToggle)
		{
			if(get_ival(Fire_BTN) || ScopeShot == 2 && get_ival(Ads_BTN) || ScopeShot == 3 && get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
																																																																																										deadzone(PS4_L2, PS4_R2, 10, 10);
																																																																																										Fire_Rate = 1000 / get_ival(Fire_BTN) * 2;
				combo_run(cDynaFire);
			}

			if(event_release(Fire_BTN) || ScopeShot == 2 && event_release(Ads_BTN) || ScopeShot == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(cDynaFire);
			}
		}
		

		
																																																																																								switch(AntiRecoilType)
		{
			case 1 : 
			{
																																																																																										if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					if(get_controller() == PIO_XB1)
					{
						if(SmartRumble > 10 && SmartRumble < 90)
						{
							AntirecoilStrength = (NotoriousSpartan32ARVert * Inverted) + SmartRumble / 2;
						}
					}
					else
					{
						if(SmartRumble > 10 && SmartRumble < 90)
						{
							AntirecoilStrength = (NotoriousSpartan32ARVert * Inverted) + SmartRumble / 3;
						}
					}

						if(SmartRumble < 10)
						{
							Set_Val(AimY, (NotoriousSpartan32ARVert) - get_val(AimY) * Inverted);
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
						else
						{
							Set_Val(AimY, AntirecoilStrength * Inverted);
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
				}

					if(event_release(Fire_BTN))
					{
						AntirecoilStrength  = 0;
						SmartRumble         = 0;
					}
			break;
			}

			case 2 : 
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					if(RightStickRadius > DeadZone)
					{
						Set_Val(AimY, ((NotoriousSpartan32ARVert - (DeadZone * Inverted))));
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}

					if(RightStickRadius < DeadZone)
					{
						Set_Val(AimY, (NotoriousSpartan32ARVert ) - get_val(AimY) * Inverted);
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}
				}
			break;
			}

			case 3 : 
			{
				if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					antirecoilBoostTimer += get_rtime();

					if(antirecoilBoostTimer < doubleStrengthTime)
					{
						if(get_controller() == PIO_XB1)
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = ((NotoriousSpartan32ARVert * Inverted) * 2) + SmartRumble / 2;
							}
						}
						else
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = ((NotoriousSpartan32ARVert * Inverted) * 2) + SmartRumble / 4;
							}
						}
					}

					if(antirecoilBoostTimer > doubleStrengthTime)
					{
						if(get_controller() == PIO_XB1)
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = (NotoriousSpartan32ARVert * Inverted) + SmartRumble / 2;
							}
						}
						else
						{
							if(SmartRumble > 10 && SmartRumble < 90)
							{
								AntirecoilStrength = (NotoriousSpartan32ARVert * Inverted) + SmartRumble / 3;
							}
						}
					}

					if(RightStickRadius > DeadZone)
					{
						if(SmartRumble < 10)
						{
							Set_Val(AimY, ((NotoriousSpartan32ARVert - (DeadZone * Inverted))));
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
						else
						{
							Set_Val(AimY, ((AntirecoilStrength - (DeadZone * Inverted))));
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
					}

					if(RightStickRadius < DeadZone)
					{
						if(SmartRumble < 10)
						{
							Set_Val(AimY, (NotoriousSpartan32ARVert) - get_val(AimY) * Inverted);
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
						else
						{
							Set_Val(AimY, AntirecoilStrength * Inverted);
							Set_Val(AimX, NotoriousSpartan32ARHoriz);
						}
					}
				}

				if(event_release(Fire_BTN))
				{
					SmartRumble				= 0;
					AntirecoilStrength		= 0;
					antirecoilBoostTimer	= 0;
				}
			break;
			}

			case 4 : 
			{
																																																																																										if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
				{
					antirecoilBoostTimer += get_rtime();

																																																																																											if(antirecoilBoostTimer < doubleStrengthTime)
					{
						legacyRecoilStrength = (NotoriousSpartan32ARVert * 2);
					}

																																																																																											if(antirecoilBoostTimer > doubleStrengthTime)
					{
						legacyRecoilStrength = NotoriousSpartan32ARVert;
					}

																																																																																											if(RightStickRadius > DeadZone)
					{
						Set_Val(AimY, ((legacyRecoilStrength - (DeadZone * Inverted))));
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}

					if(RightStickRadius < DeadZone)
					{
						Set_Val(AimY, (legacyRecoilStrength) - get_val(AimY) * Inverted);
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}
				}

				if(event_release(Fire_BTN))
				{
					antirecoilBoostTimer = 0;
				}
			break;
			}

			case 5 : 
			{
				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!(RefreshRate % _RefreshRate))
					{
						PreviousRX = CurrentRX;
						PreviousRY = CurrentRY;
					}

					CurrentRX = get_val(AimX);
					CurrentRY = get_val(AimY);

					if(Check_Magnitude(CurrentRX, PreviousRX, CurrentRY, PreviousRY))
					{
						set_val(AimY, clamp(CurrentRY + RumbleDeathfogAR(), -100, 100));
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}
						RefreshRate += get_rtime();
				}
				else
				{
																																																																																											CurrentRX	= 0;
																																																																																											CurrentRY	= 0;
																																																																																											PreviousRX	= 0;
																																																																																																																																																																																	PreviousRY	= 0;
					RefreshRate	= 0;
				}
			break;
			}

			case 6 : 
			{
				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!(RefreshRate % _RefreshRate))
					{
						PreviousRX = CurrentRX;
						PreviousRY = CurrentRY;
					}

					CurrentRX = get_val(AimX);
					CurrentRY = get_val(AimY);

					if(Check_Magnitude(CurrentRX, PreviousRX, CurrentRY, PreviousRY))
					{
						set_val(AimY, clamp(CurrentRY + DynamicDeathfogAR(AR_Strength, CurrentRY, CurrentRX), -100, 100));
						Set_Val(AimX, NotoriousSpartan32ARHoriz);
					}
						RefreshRate += get_rtime();
				}
				else
				{
					CurrentRX	= 0;
					CurrentRY	= 0;
					PreviousRX	= 0;
					PreviousRY	= 0;
					RefreshRate	= 0;
				}
			break;
			}

			case 7 : 
			{
				if(!get_val(Ads_BTN) && !get_val(Fire_BTN))
				{
																																																																																											AxisY_		=	VerticalStart;
																																																																																											VertCount	=				0;
																																																																																											VertNum		=				0;
																																																																																											AxisX		= HorizontalStart;
																																																																																											HorizCount	=				0;
																																																																																											HorizNum	=				0;
				}

				if(get_val(Ads_BTN) && get_val(Fire_BTN))
				{
					if(!CompleteY())
						AxisY_ = VertiVal();
					else
						AxisY_ = VerticalEnd;

																																																																																											if(ApplyYVal() > 100)
					{
						set_val(AimY, 100);
					}
					else
						set_val(AimY, ApplyYVal());
				
					if(!CompleteX())
						AxisX = HoriVal();
					else
						AxisX = HorizontalEnd;

					if(ApplyXVal() > 100)
					{
						set_val(AimX, 100);
					}
					else
						set_val(AimX, ApplyXVal());
				}
			break;
			}
		}
		

		
																																																																																								if(AimAbuse)
		{
			if(get_ival(Ads_BTN))
				combo_run(cAimAbuse);
			if(event_release(Ads_BTN))
				combo_stop(cAimAbuse);
		}
		
		
		
		if(StandardDropShot)
		{
			if(get_ival(Fire_BTN))
				combo_run(Dropshot);
		}

		if(NOTORIOUSTHAGODlaiDropShot)
		{
			if(get_val(Fire_BTN) && event_press(Crouch_BTN))
			{
				combo_run(Dropshot);
			}

			if(event_release(Fire_BTN))
			{
				combo_stop(Dropshot);
			}
		}
		

		
		if(QuadSticky)
		{
			if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
			{
				combo_run(cStickyAA);
				StickyValue	= ADS_Size;
				WaitValue	= ADS_Wait_Value;
			}
			else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				combo_run(cStickyAA);
				StickyValue	= ADS_FIRE_Size;
				WaitValue	= ADS_FIRE_Wait_Value;
			}
			else if(!get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				combo_run(cStickyAA);
				StickyValue	= HIPFIRE_Size;
				WaitValue	= HIPFIRE_Wait_Value;
			}
			else if(isqrt(abs(get_val(AimX)) * abs(get_val(AimX)) + abs(get_val(AimY)) * abs(get_val(AimY))) <= 100)
			{
				combo_run(cStickyAA);
				StickyValue	= DRIFT_Value;
				WaitValue	= DRIFT_Wait_Value;
			}
			else
			{
				combo_stop(cStickyAA);
			}
		}
		

		
		if (SS_NOTORIOUSTHAGODlai_Aim)
		{
																																																																																									if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				combo_run(NOTOIROUSTHAGODAim);
			}

			if(event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_stop(NOTOIROUSTHAGODAim)
			}
		}
		

		
		if(NotoriousSpartan32aimbotv3s)
		{
																																																																																									CycleRefresh	+= get_rtime();
																																																																																									polarAngle		 = get_polar(POLAR_RS, POLAR_ANGLE);
			Angle			 = (Angle + NotoriousSpartan32Angle) % 360;

			if(aimbotv3Direction)
			{
				aimbotv3Direction = (get_val(AimX) > 0);
			}

			if(NotoriousSpartan32Tracking)
			{
				TrackingAngle	 = (TrackingAngle + TrackingSpeed)	   % 360;
																																																																																										TrackingAngleOne = (TrackingSize  * sin(TrackingAngle) / 100);
																																																																																										TrackingAngleTwo = (TrackingSize  * cos(TrackingAngle) / 100);
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				NotoriousSpartan32aimbotv3s(POLAR_RS, Angle, NotoriousSpartan32Radius);
			}
		}
		

		
																																																																																								if(NotoriousRageXPolar)
		{
			if(get_ival(Fire_BTN))
			{
				if(SpartanAALock)
				{
					NotoriousRageXRadius = _PolarRadius + _PolarRBoost;
				}

				if(NotoriousRageXSpeedBoost)
				{
					NotoriousRageXAngle = _PolarAngle + _PolarABoost;
				} 
			}
			else
			{
				NotoriousRageXRadius = _PolarRadius;
				NotoriousRageXAngle  = _PolarAngle;
			}

			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				if(RightStickRadius <= 20)
				{
					set_polar(POLAR_RS, NotoriousRageXSpeed = (NotoriousRageXSpeed + NotoriousRageXAngle) % 360, (NotoriousRageXRadius * random(326, 328)) + get_polar(POLAR_RS, 0));
				}
				else
				{
					combo_run(cPolar);
				}
			}
		}
		

		
		if (SmokeDTimeAA)
		{
			if(get_ival(Ads_BTN) || get_ival(Fire_BTN))
			{
				SmokeDTimeAim();
			}

			if(event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				AAT 	= 0;
				AxisT	= 0;
			}
		}
		

		
		if(SteadyAimToggle)
		{
			CurrentRX = get_val(AimX);
			CurrentRY = get_val(AimY);

			if(RightStickRadius < 20)
			{
																																																																																										CurrentRX = GetSteadyAim(CurrentRX, SteadyAimResolution);
																																																																																										CurrentRY = GetSteadyAim(CurrentRY, SteadyAimResolution);
			}
				set_val(AimX, clamp(CurrentRX, -100, 100));
				set_val(AimY, clamp(CurrentRY, -100, 100));
		}
		

		
																																																																																								if(ToggleSpeedStrafe)
		{
			if(LeftStickRadius >= 0)
			{
				StrafeAngle += StrafeAssistSpeed * get_rtime();
			}
			else
			{
				StrafeAngle -= StrafeAssistSpeed * get_rtime();
			}

			if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
																																																																																										Set_Val(Strafe, (StrafeAssistRadius * 2 * cos(StrafeAngle) / 100));
																																																																																										Set_Val(Walk  , (StrafeAssistRadius * 2 * sin(StrafeAngle) / 100));
			}
		}
		

		
		switch(FastMeleeToggle)
		{
			case 1 :
			{
				if(get_val(Melee_BTN) && get_ptime(Melee_BTN) >= 200)
				{
					combo_run(cFastMelee);
				}

																																																																																										if(combo_running(cFastMelee) && (get_ival(Ads_BTN) || get_ival(Fire_BTN)))
				{
					combo_stop(cFastMelee);
				}
			break;
			}

																																																																																									case 2 :
			{
																																																																																										if(get_val(Melee_BTN))
				{
					combo_run(cFastMelee);
				}

				if(event_release(Melee_BTN))
				{
					combo_stop(cFastMelee);
				}
			break;
			}
		}
		
		if(Smart_Grenade)
		{
			if(combo_running(cCookAndRelease) && (CookTime == 1028) && (Main_Button_Pressed(Lethal_BTN) || DoubleClick(Lethal_BTN)))
			{
				combo_stop(cCookAndRelease);
			}

			if(get_ival(Lethal_BTN) && get_ptime(Lethal_BTN) < 200)
			{
				CookTime = 1028;
				combo_run(cCookAndRelease);
			}

			if(get_ival(Lethal_BTN) && get_ptime(Lethal_BTN) > 200)
			{
				CookTime = 3200;
				combo_run(cCookAndRelease);
			}
		}
		

		
		if(DolphinDiveToggle)
		{
			if (get_ival(Crouch_BTN) && get_ptime(Crouch_BTN) > 300 && isqrt(abs(get_ival(Strafe)) * abs(get_ival(Strafe)) + abs(get_ival(Walk)) * abs(get_ival(Walk))) >= 77)
			{
				combo_run(cDolphinJump);
			}
			else
			{
				combo_stop(cDolphinJump);
			}
		}
		

		
		if(StrafeToggle)
		{
			if(get_ival(Fire_BTN))
				combo_run(SpartanZigZag);
		}
		

		
		if(BunnyHop)
		{
			if(get_ival(Jump_BTN) && get_ptime(Jump_BTN) > 200)
				combo_run(cBunnyHop);
			else 
				combo_stop(cBunnyHop);
		}
		
		
		
		switch(QuickScope)
		{
			case 1 :
			{
				if(Trigger_Toggle == TRUE && get_ival(Reload_BTN) || Trigger_Toggle == TRUE && get_ival(Lethal_BTN))
				{
					set_val(Reload_BTN, 0);
					set_val(Lethal_BTN, 0);
				}
				else if(event_release(Reload_BTN) || event_release(Lethal_BTN))
				{
					Trigger_Toggle = FALSE;
				}

				if(event_press(Ads_BTN))
				{ 
					Trigger_Toggle = TRUE; 
				}
				else if(get_ival(Ads_BTN) && get_ptime(Ads_BTN) > 140)
				{
					set_val(Sprint_BTN, 100); 
				}
				else if(Trigger_Toggle == TRUE && event_release(Ads_BTN))
				{
					combo_run(cQuickScope);
				}
					if(event_press(Sprint_BTN))
					{
						combo_run(cHoldBreath);
					}
			break;
			}

			case 2 :
			{
				if(event_release(Ads_BTN) && get_ptime(Ads_BTN) <= 250)
				{
					combo_run(cQuickScope);
				}
			break;
			}
		}
		

		
		if(AutoReload)
		{
			if(event_release(Fire_BTN) || ScopeShot == 2 && event_release(Ads_BTN) || ScopeShot == 3 && event_release(Ads_BTN) || event_release(Fire_BTN))
			{
				combo_run(cReload);
			}
		}
		

		
		if(CancelReload)
		{
			if(event_press(Fire_BTN))
				FirstShotBeforeReload = TRUE; 

				if(event_press(Reload_BTN) && FirstShotBeforeReload)
				{
					ReloadInProgress 	  = TRUE;
					FirstShotBeforeReload = FALSE;
				}

				if(get_val(Reload_BTN) && get_ptime(Reload_BTN) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(cCancelReload);
				}

				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
					ReloadTime = 0;

				if(ReloadTime > MaxReloadTime)
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime && event_press(Fire_BTN))
					combo_run(cCancelReload);
		}
		

		switch(GhostPeakToggle)
		{
			case 1 :
			{
				if(get_ival(Fire_BTN) && event_press(Crouch_BTN) && get_ptime(Crouch_BTN) < 1720)
				{
					combo_run(cGhostPeak);
				}

				if(combo_running(cGhostPeak) && !get_val(Fire_BTN))
				{
					combo_stop(cGhostPeak);
				}
			break;
			}

			case 2 :
			{
				if(get_ival(Fire_BTN) && event_press(Crouch_BTN) && get_ptime(Crouch_BTN) < 1720)
				{
					combo_run(cGhostPeakMW2);
				}

				if(combo_running(cGhostPeakMW2) && !get_val(Fire_BTN))
				{
					combo_stop(cGhostPeakMW2);
				}
			break;
			}
		}
		

		
		if(PerfectAccuracy)
		{
			if(get_ival(Lethal_BTN) > 10 && get_ptime(Lethal_BTN) <= get_ptime(Ads_BTN) && get_ival(Ads_BTN) > 80)
			{
				SingleShot = TRUE;

				if(SingleShot)
				{
					if(get_ival(Lethal_BTN))
						combo_run(SpartanGodlyAccuracy);
						newHold =       40;
						newRest =      150;
						block(Lethal_BTN, get_ptime(Lethal_BTN) + 50);
				}

				if(SingleShot && event_release(Lethal_BTN))
					SingleShot = FALSE;
			}

			if(get_ival(Lethal_BTN) > 10 && get_ptime(Lethal_BTN) <= get_ptime(Ads_BTN) && get_ival(Ads_BTN) < 80 && get_ival(Ads_BTN) > 10)
			{
				BurstShot = TRUE;

				if(BurstShot)
				{
					if(get_ival(Lethal_BTN))
						combo_run(SpartanGodlyAccuracy);
						newHold = burstHold;
						newRest = burstRest;
						block(Lethal_BTN, get_ptime(Lethal_BTN) + 50);
				}

				if(BurstShot && event_release(Lethal_BTN))
					BurstShot = FALSE;
			}
		}
		

		
		switch(ScopeShot)
		{
			case 1 :
			{
				if(get_ival(Fire_BTN) && !get_ival(Ads_BTN))
					set_val(Ads_BTN, 100);
			break;
			}

			case 2 :
			{
				if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
					set_val(Fire_BTN, 100);
			break;
			}

			case 3 :
			{
				if(get_ival(Ads_BTN))
					set_val(Fire_BTN, 100);
				else if(get_ival(Fire_BTN))
					set_val(Ads_BTN, 100);
			break;
			}
		}
		

		
		if(Prone_Rise)
		{
            if(get_ival(Fire_BTN))
                combo_run(cProneRise);
			if(event_release(Fire_BTN))
				combo_stop(cProneRise);
		}
	   

		
		if(Strafe_Jump)
		{
			if(get_ival(Fire_BTN))
			{
				combo_run(cJumpyShot);
				combo_run(SpartanZigZag);
			}
		}
		
	    
	   
		if(Pussy_Mode)
		{
			if(get_ival(Fire_BTN))
			{
				combo_run(SpartanZigZag);
				combo_run(cDropping_Shot);
			}
		}
			  
	  		
	  	
		if(HoldBreath)
		{
			if(get_ival(Ads_BTN))
				set_val(Sprint_BTN, 100);

			if(get_ival(Walk) < -90 && get_ival(Ads_BTN) && get_ptime(Ads_BTN) > 200)
				combo_stop(cHoldBreath);       

			if(event_press(Ads_BTN)) 
				combo_run(cHoldBreath);

			if(get_ival(Ads_BTN) && get_lval(Sprint_BTN)) 
				set_val(Sprint_BTN, 0);  
		}
		

		
		if(Running)
		{
			SlideEnable = 0;

			if(event_release(Crouch_BTN))
			{
				switch(SlideCancelMode)
				{
					case 1 :
					{
						SlideEnable = 1;
					break
					}

					case 2 :
					{
						if(get_rumble(RUMBLE_A) == 87 || get_rumble(RUMBLE_A) == 26)
						{
							SlideEnable = 1;
						}
					break;
					}

					case 3 :
					{
						SlideEnable = 2;
					break;
					}

					case 4 :
					{
						if(get_rumble(RUMBLE_A) == 100 || get_rumble(RUMBLE_A) == 36)
						{
							SlideEnable = 2;
						}
					break;
					}

					case 5 :
					{
						SlideEnable = 3;
					break;
					}

					case 6 :
					{
						SlideEnable = 4;
					break;
					}

					case 7 :
					{
						SlideEnable = 5;
					break;
					}

					case 8 :
					{
						SlideEnable = 6;
					break;
					}
				}

				switch(SlideEnable)
				{
					case 1 :
					{
						combo_run(SpartanMWSlideCancel);
					break;
					}

					case 2 :
					{
						combo_run(cCancelSlideCW);
					break;
					}

					case 3 :
					{
						combo_run(cBFCancelSlide);
					break;
					}

					case 4 :
					{
						combo_run(cMW2CancelSlideStandard);
					break;
					}

					case 5 :
					{
						combo_run(SpartanMWSlideCancel2Tac);
					break;
					}

					case 6 :
					{
						combo_run(SpartanMWSlideCancel2Lethal);
					break;
					}
				}
			}
		}
		
		
		
		switch(AutoPing)
		{
			case 1 :
			{
				if(event_press(Ads_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 2 :
			{
				if(event_press(Fire_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 3 :
			{
				if(get_ival(Ads_BTN) && event_press(Fire_BTN))
					combo_run(cAutoPing);
			break;
			}

			case 4 :
			{
				if(get_ival(Ads_BTN) && event_press(Tactical_BTN))
					combo_run(cAutoPing);
					set_val(Tactical_BTN, 0);
			break;
			}
		}
		
		
		
		if(AimSensCorrections)
		{
			ADS_Grenade_Sens = 100 - (InGame_Menu_Sens);
			ADS_Fire_Sens    =  96 - (InGame_Menu_Sens);
			Actual_Sens      = 100;

			if (!get_ival(Ads_BTN) && !get_ival(Fire_BTN) && !get_ival(Lethal_BTN) && !get_ival(Tactical_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && !get_ival(Fire_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}
			else if (!get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = Actual_Sens;
			}
			else if(get_ival(Ads_BTN) && get_ival(Fire_BTN))
			{
				Sens = ADS_Fire_Sens;
			}
			else if(get_ival(Tactical_BTN) || get_ival(Lethal_BTN))
			{
				Sens = ADS_Grenade_Sens;
			}

			if(RightStickRadius > NotoriousRageXRadius)
			{
				if(Sens > 100)
					Sens = 100;
					sensitivity(AimX, NOT_USE, Sens);
					sensitivity(AimY, NOT_USE, Sens);
			}
		}
		

		
		if(Auto_Blow)
		{
			if(event_release(Lethal_BTN))
				combo_run(cBoom);
		}
		
		if(HeadShotAssist)
		{
			RY = inv(HeadShotStrength);

			if(get_ival(Fire_BTN) && get_ptime(Fire_BTN) < HeadShotHoldTime)
			{
				Set_Val(AimY, RY);
			}
		}
		

		
		if(Toggle_EasyProne)
		{
			if(get_ival(Fire_BTN) && event_press(BOUNCEPRONE))
			{
				combo_run(cEasyProne);
			}

			if(get_ival(BOUNCEPRONE) && event_press(Fire_BTN))
			{
				combo_run(cEasyProne);
			}

			if(get_ival(BOUNCEPRONE)&& event_release(Fire_BTN))
			{
				combo_run(cGetUp);
			}

			if(get_ival(Fire_BTN)&& event_release(BOUNCEPRONE))
			{
				combo_run(cGetUp);
			}
		}
		

		
		if(JumpShot)
		{
			if(get_ival(Fire_BTN))
				combo_run(cJumpyShot);
			if(event_release(Fire_BTN))
				combo_stop(cJumpyShot);
		}
		

		if(get_ival(Ads_BTN) && event_press(PS4_OPTIONS))
		{
			ZenScreen	= MainMods;
			combo_stop(cRGB);
			Display		= TRUE;
		}
			combo_run(cRGB); 
	}

	NOTORIOUSTHAGOD_ChecK();

	if(ZenScreen == MainMods)
	{
		block_all_inputs();
		block_all_outputs();

		if(RumbleBlock)
			block_rumble();

		AntiRecoilType     		= ToggleSwitch(1,  AntiRecoilType			, 0,	 7);
		NotoriousSpartan32aimbotv3s  	   		= ToggleSwitch(2,  NotoriousSpartan32aimbotv3s				, 0,	11);
		NotoriousSpartan32Tracking	   		= ToggleSwitch(3,  NotoriousSpartan32Tracking			, 0,	 1);
		NotoriousRageXPolar  	   		= ToggleSwitch(4,  NotoriousRageXPolar			, 0,	 1);
		QuadSticky  	   		= ToggleSwitch(5,  QuadSticky				, 0,	 1);
		SS_NOTORIOUSTHAGODlai_Aim			= ToggleSwitch(6,  SS_NOTORIOUSTHAGODlai_Aim			, 0,	 1);
		SmokeDTimeAA				= ToggleSwitch(7,  SmokeDTimeAA				, 0,	 1);
																																																																																								SteadyAimToggle			= ToggleSwitch(8,  SteadyAimToggle			, 0,	 1);
																																																																																								AimAbuse  	   	   		= ToggleSwitch(9,  AimAbuse					, 0,	 1);
																																																																																								ToggleSpeedStrafe  		= ToggleSwitch(10, ToggleSpeedStrafe		, 0,	 1);
																																																																																								AimSensCorrections 		= ToggleSwitch(11, AimSensCorrections		, 0,	 1);
																																																																																								SlideCancelMode    		= ToggleSwitch(12, SlideCancelMode			, 0,	 8);
																																																																																								RapidFireToggle    		= ToggleSwitch(13, RapidFireToggle			, 0,	 1);
																																																																																								AkimboRapidFireToggle	= ToggleSwitch(14, AkimboRapidFireToggle	, 0,	 1);
																																																																																								BurstFireToggle			= ToggleSwitch(15, BurstFireToggle			, 0,	 1);
																																																																																								DynamicRapidFireToggle	= ToggleSwitch(16, DynamicRapidFireToggle	, 0,	 1);
																																																																																								JumpShot	  	   		= ToggleSwitch(17, JumpShot					, 0,	 1);
																																																																																								ScopeShot	  	   		= ToggleSwitch(18, ScopeShot				, 0,	 3);
		QuickScope		   		= ToggleSwitch(19, QuickScope				, 0,	 2);
		StrafeToggle	   		= ToggleSwitch(20, StrafeToggle				, 0,	 1);
		StandardDropShot		= ToggleSwitch(21, StandardDropShot			, 0,	 1);
		NOTORIOUSTHAGODlaiDropShot			= ToggleSwitch(22, NOTORIOUSTHAGODlaiDropShot			, 0,	 1);
		HoldBreath	  	   		= ToggleSwitch(23, HoldBreath				, 0,	 1);
																																																																																								AutoPing		   		= ToggleSwitch(24, AutoPing					, 0,	 4);
		Prone_Rise	  	   		= ToggleSwitch(25, Prone_Rise				, 0,	 1);
		Pussy_Mode	   		= ToggleSwitch(26, Pussy_Mode				, 0,	 1);
		Strafe_Jump	   	   		= ToggleSwitch(27, Strafe_Jump				, 0,	 1);
																																																																																								Smart_Grenade	   		= ToggleSwitch(28, Smart_Grenade			, 0,	 1);
		BunnyHop    	   		= ToggleSwitch(29, BunnyHop					, 0,	 1);
		Auto_Blow	  	   		= ToggleSwitch(30, Auto_Blow				, 0,	 1);
																																																																																								Toggle_EasyProne   		= ToggleSwitch(31, Toggle_EasyProne			, 0,	 1);
																																																																																								CancelReload	   		= ToggleSwitch(32, CancelReload				, 0,	 1);
																																																																																								UseAutoRun	   	   		= ToggleSwitch(33, UseAutoRun				, 0,	 4);
																																																																																								FastMeleeToggle			= ToggleSwitch(34, FastMeleeToggle			, 0,	 2);
																																																																																								PerfectAccuracy	   		= ToggleSwitch(35, PerfectAccuracy			, 0,	 1);
																																																																																								HeadShotAssist	   		= ToggleSwitch(36, HeadShotAssist			, 0,	 1);
																																																																																								RumbleBlock		   		= ToggleSwitch(37, RumbleBlock				, 0,	 1);
																																																																																								AutoReload		   		= ToggleSwitch(38, AutoReload				, 0,	 1);
																																																																																								DolphinDiveToggle		= ToggleSwitch(39, DolphinDiveToggle		, 0,	 1);
																																																																																								GhostPeakToggle			= ToggleSwitch(40, GhostPeakToggle			, 0,	 2);

		if(event_press(PS4_SQUARE))
		{
			if(EditableMods[Mod] == 1)
			{
				ZenScreen	= EditMods;
				Display		= TRUE;
			}
		}

		if(event_press(PS4_UP))
		{
			Mod		= Cycle(Mod - 1, 1, NumOfMods);
			Display	= TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Mod		= Cycle(Mod + 1, 1, NumOfMods);
			Display	= TRUE;
		}

		if(event_press(PS4_CIRCLE))
		{
			ZenScreen	= MenuClose;
			Pin			= random(102, 999);
			Save();
			Frame		= -1;
			combo_restart(NOTOIROUSTHAGOD);
			Display		= TRUE;
		}
	}

																																																																																							if(ZenScreen == EditMods)
	{
		block_all_inputs();
		block_all_outputs();

		if(RumbleBlock)
			block_rumble();

																																																																																								if(event_press(PS4_CIRCLE))
		{
			ZenScreen	= MainMods;
			Display		= TRUE;
		}

																																																																																								if(event_press(PS4_UP))
		{
			Scroll	= Cycle(Scroll + 1, 0, 2);
			Display = TRUE;
		}

		if(event_press(PS4_DOWN))
		{
			Scroll	= Cycle(Scroll - 1, 0, 2);
			Display = TRUE;
		}

			if(Mod == 1 && AntiRecoilType == 3 || Mod == 1 && AntiRecoilType == 4)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display	= TRUE;
					}
						NotoriousSpartan32ARVert	= EditValues(1, NotoriousSpartan32ARVert , 1, -100, 100);
						NotoriousSpartan32ARHoriz	= EditValues(0, NotoriousSpartan32ARHoriz, 1, -100, 100);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display	= TRUE;
					}
						DeadZone			= EditValues(1, DeadZone          ,   1,    0,   20);
						doubleStrengthTime	= EditValues(0, doubleStrengthTime,  50,  100, 2000);
				}
			}
			else if(Mod == 1 && AntiRecoilType == 5 || Mod == 1 && AntiRecoilType == 6)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				AR_Strength		= EditValues(1, AR_Strength  , 1, -100, 100);
				NotoriousSpartan32ARHoriz	= EditValues(0, NotoriousSpartan32ARHoriz, 1, -100, 100);
			}
																																																																																									else if(Mod == 1 && AntiRecoilType == 1 || Mod == 1 && AntiRecoilType == 2)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

																																																																																										NotoriousSpartan32ARVert	= EditValues(1, NotoriousSpartan32ARVert , 1, -100, 100);
				NotoriousSpartan32ARHoriz	= EditValues(0, NotoriousSpartan32ARHoriz, 1, -100, 100);
			}
			else if(Mod == 1 && AntiRecoilType == 7)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 2)
					Scroll = 2;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
																																																																																												VerticalStart	= EditValues(2, VerticalStart,   1, -100,  100);
						VerticalEnd		= EditValues(1, VerticalEnd  ,   1, -100,  100);
						VerticalTime	= EditValues(0, VerticalTime , 100,    0, 9000);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						HorizontalStart	= EditValues(2, HorizontalStart,   1, -100,  100);
						HorizontalEnd	= EditValues(1, HorizontalEnd  ,   1, -100,  100);
						HorizontalTime	= EditValues(0, HorizontalTime , 100,    0, 9000);
				}
			}

			if(Mod == 2)
			{
																																																																																										if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

																																																																																										NotoriousSpartan32Radius = EditValues(1, NotoriousSpartan32Radius, 1, 0,  50);
				NotoriousSpartan32Angle  = EditValues(0, NotoriousSpartan32Angle , 1, 0, 100);
			}

																																																																																									if(Mod == 3)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

																																																																																										TrackingSize	= EditValues(1, TrackingSize , 1, 0, 10);
				TrackingSpeed	= EditValues(0, TrackingSpeed, 1, 0, 10);
			}

			if(Mod == 4)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						_PolarRadius = EditValues(1, _PolarRadius, 1, 0, 50);
						_PolarAngle  = EditValues(0, _PolarAngle , 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						_PolarRBoost = EditValues(1, _PolarRBoost, 1, 0, 50);
						_PolarABoost = EditValues(0, _PolarABoost, 1, 0, 50);
				}
			}

			if(Mod == 5)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 2)
					Scroll = 2;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						ADS_Size 	  = EditValues(2, ADS_Size     , 1, 0, 50);
						ADS_FIRE_Size = EditValues(1, ADS_FIRE_Size, 1, 0, 50);
						HIPFIRE_Size  = EditValues(0, HIPFIRE_Size , 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
																																																																																												ADS_Wait_Value 		= EditValues(2, ADS_Wait_Value     , 10, 0, 100);
																																																																																												ADS_FIRE_Wait_Value = EditValues(1, ADS_FIRE_Wait_Value, 10, 0, 100);
						HIPFIRE_Wait_Value  = EditValues(0, HIPFIRE_Wait_Value , 10, 0, 100);
				}
			}

			if(Mod == 6)
			{
				Scroll = 1;

				if(Tab == 0)
				{
					if(event_press(PS4_R1))
					{
						Tab += 1;
						Display = TRUE;
					}
						AimAssistStrength = EditValues(1, AimAssistStrength, 1, 0, 50);
				}

				if(Tab == 1)
				{
					if(event_press(PS4_L1))
					{
						Tab -= 1;
						Display = TRUE;
					}
						AimAssistWaitTime = EditValues(1, AimAssistWaitTime, 10, 0, 100);
				}
			}

			if(Mod == 7)
			{
				Scroll = 1;

				Strength = EditValues(1, Strength, 1, 0, 10);
			}

			if(Mod == 8)
			{
				Scroll = 1;

				SteadyAimResolution	= EditValues(1, SteadyAimResolution , 1, 0, 100);
			}

			if(Mod == 10)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

																																																																																										StrafeAssistRadius	= EditValues(1, StrafeAssistRadius, 1, 0,  50);
																																																																																										StrafeAssistSpeed	= EditValues(0, StrafeAssistSpeed , 1, 0, 100);
			}

			if(Mod == 11)
			{
				Scroll = 1;

				InGame_Menu_Sens = EditValues(1, InGame_Menu_Sens, 1, 0, 100);
			}

			if(Mod == 13)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				RapidHold = EditValues(1, RapidHold, 10, 0, 3000);
				RapidRest = EditValues(0, RapidRest, 10, 0, 3000);
			}

			if(Mod == 19)
			{
				Scroll = 1;

				QS_Delay = EditValues(1, QS_Delay, 10, 0, 3000);
			}

			if(Mod == 20)
			{
				Scroll = 1;

				StrafeDelay = EditValues(1, StrafeDelay, 10, 0, 3000);
			}

			if(Mod == 21 || Mod == 22)
			{
				Scroll = 1;

				DropShotSpeed = EditValues(1, DropShotSpeed, 10, 0, 100);
			}

			if(Mod == 24)
			{
				Scroll = 1;

				AutoPingDelay = EditValues(1, AutoPingDelay, 10, 0, 5000);
			}

			if(Mod == 32)
			{
				Scroll = 1;

				MaxReloadTime = EditValues(1, MaxReloadTime, 100, 0, 9999);
			}

			if(Mod == 33)
			{
				Scroll = 1;

				AutoRunDelay = EditValues(1, AutoRunDelay, 100, 0, 9999);
			}

			if(Mod == 35)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

				burstHold = EditValues(1, burstHold, 10, 0, 3000);
				burstRest = EditValues(0, burstRest, 10, 0, 3000);
			}

			if(Mod == 36)
			{
				if(Scroll < 0)
					Scroll = 0;
				if(Scroll > 1)
					Scroll = 1;

																																																																																										HeadShotStrength = EditValues(1, HeadShotStrength,   1, 0,   99);
																																																																																										HeadShotHoldTime = EditValues(0, HeadShotHoldTime, 100, 0, 2000);
			}
		}
	}

	if(screenSaver)
	{
		if(ZenScreen == MenuClose)
			TexT1();
		if(ZenScreen == MainMods)
			TexT2();

		rect_oled(0, 0, 128, 64, 0, 1);
		CountDown += get_rtime();
		ScreenSaver();

		if(CountDown >= 9000)
    	{
      		cls_oled(0);
      		CountDown	=     0;
      		screenSaver	= FALSE;
    	}
	}

	if(Display)
	{
		cls_oled(0);
		CountDown = 0;

	if(!notoriouscriptz2293887744hfh7848487556Switch)
	{

		if(ZenScreen == MenuClose)
		{
			print(CenterX(GetChars(0), OLED_FONT_SMALL_WIDTH), 18, 0, 1, ModsString[0]);
		}

		if(ZenScreen == MainMods)
		{
			print(CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), CenterY(OLED_FONT_MEDIUM_HEIGHT), 0, 1, ModsString[Mod]);

			if(Mod == 1)
			{
				switch(AntiRecoilType)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF)				- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(NotoriousSpartan32RUMBLEV1)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, NotoriousSpartan32RUMBLEV1[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(NotoriousSpartan32LEGACYV1)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, NotoriousSpartan32LEGACYV1[0]);
					break;
					}
					
					case 3 :
					{
						print(CenterX(sizeof(NotoriousSpartan32RUMBLEV2)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, NotoriousSpartan32RUMBLEV2[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(NotoriousSpartan32LEGACYV2)	- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, NotoriousSpartan32LEGACYV2[0]);
					break;
					}

					case 5 :
					{
						print(CenterX(sizeof(DeathfogRUMBLE)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DeathfogRUMBLE[0]);
					break;
					}

					case 6 :
					{
						print(CenterX(sizeof(DeathfogDYNAMIC)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DeathfogDYNAMIC[0]);
					break;
					}

					case 7 :
					{
						print(CenterX(sizeof(PROGRESSIVE)		- 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, PROGRESSIVE[0]);
					break;
					}
				}
			}

			if(Mod == 2)
			{
				print(CenterX(AimAssistaimbotv3P_Chars(NotoriousSpartan32aimbotv3s), OLED_FONT_SMALL_WIDTH), 49, OLED_FONT_SMALL, OLED_WHITE, AimPatternsPC[NotoriousSpartan32aimbotv3s]);
			}

			if(Mod == 12)
			{
				switch(SlideCancelMode)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF) 	      - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(MWSTANDARD)  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MWSTANDARD[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(MW_RUMBLE)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW_RUMBLE[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(CWSTANDARD)  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CWSTANDARD[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(CW_RUMBLE)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, CW_RUMBLE[0]);
					break;
					}

					case 5 :
					{
						print(CenterX(sizeof(BFSTANDARD)  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BFSTANDARD[0]);
					break;
					}

					case 6 :
					{
						print(CenterX(sizeof(MW2STANDARD)  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2STANDARD[0]);
					break;
					}

					case 7 :
					{
						print(CenterX(sizeof(MW2TACTICAL)  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2TACTICAL[0]);
					break;
					}

					case 8 :
					{
						print(CenterX(sizeof(MW2LETHAL)	  - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2LETHAL[0]);
					break;
					}
				}
			}

			if(Mod == 18)
			{
				switch(ScopeShot)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF)         - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(RIGHTTRIG)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, RIGHTTRIG[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(LEFTTRIG)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, LEFTTRIG[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(BOTHTRIG)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, BOTHTRIG[0]);
					break;
					}
				}
			}

			if(Mod == 19)
			{
				switch(QuickScope)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF)         - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(AIM__FIRE)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AIM__FIRE[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(DBL__TAP)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, DBL__TAP[0]);
					break;
					}
				}
			}

			if(Mod == 24)
			{
				switch(AutoPing)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF) 	      - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(ADS_)        - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ADS_[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(FIRE_)       - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, FIRE_[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(ADS_FIRE)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ADS_FIRE[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(ADS_TAC)     - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, ADS_TAC[0]);
					break;
					}
				}
			}

			if(Mod == 33)
			{
				switch(UseAutoRun)
				{
					case 0 :
					{
						print(CenterX(sizeof(OFF) 	      - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, OFF[0]);	
					break;
					}

					case 1 :
					{
						print(CenterX(sizeof(REGULAR_)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, REGULAR_[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(EXPLOIT_)    - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, EXPLOIT_[0]);
					break;
					}

					case 3 :
					{
						print(CenterX(sizeof(_BETTERAS)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, _BETTERAS[0]);
					break;
					}

					case 4 :
					{
						print(CenterX(sizeof(MW2TacSprint)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2TacSprint[0]);
					break;
					}
				}
			}

			if(Mod == 34)
			{
				switch(FastMeleeToggle)
				{
					case 1 :
					{
						print(CenterX(sizeof(AUTOMATIC)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, AUTOMATIC[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(MANUAL)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MANUAL[0]);
					break;
					}
				}
			}

			if(Mod == 40)
			{
				switch(GhostPeakToggle)
				{
					case 1 :
					{
						print(CenterX(sizeof(STANDARDGhostPeak)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, STANDARDGhostPeak[0]);
					break;
					}

					case 2 :
					{
						print(CenterX(sizeof(MW2GhostPeak)   - 1, OLED_FONT_SMALL_WIDTH), 42, OLED_FONT_SMALL, OLED_WHITE, MW2GhostPeak[0]);
					break;
					}
				}
			}
		}

	if(ZenScreen == EditMods)
	{
		print(CenterX(GetChars(Mod), OLED_FONT_SMALL_WIDTH), 3, 0, 1, ModsString[Mod]);

		if(Mod == 36)
		{
			NumberToStringRegular(HeadShotStrength, FindDigits (HeadShotStrength), 23);
			NumberToStringSmall(HeadShotHoldTime  , FindDigits (HeadShotHoldTime), 41);
		}

		if(Mod == 35)
		{
			NumberToStringRegular(burstHold, FindDigits (burstHold), 23);
			NumberToStringRegular(burstRest, FindDigits (burstRest), 41);
		}

		if(Mod == 33)
		{
			NumberToStringSmall(AutoRunDelay, FindDigits (AutoRunDelay), 25);
		}

		if(Mod == 32)
		{
			NumberToStringSmall(MaxReloadTime, FindDigits (MaxReloadTime), 25);
		}

		if(Mod == 24)
		{
			NumberToStringSmall(AutoPingDelay, FindDigits (AutoPingDelay), 25);
		}

		if(Mod == 21 || Mod == 22)
		{
			NumberToStringRegular(DropShotSpeed, FindDigits (DropShotSpeed), 25);
		}

		if(Mod == 20)
		{
			NumberToStringRegular(StrafeDelay, FindDigits (StrafeDelay), 25);
		}

		if(Mod == 19)
		{
			NumberToStringRegular(QS_Delay, FindDigits (QS_Delay), 25);
		}

		if(Mod == 13)
		{
			NumberToStringRegular(RapidHold, FindDigits (RapidHold), 23);
			NumberToStringRegular(RapidRest, FindDigits (RapidRest), 41);
		}

		if(Mod == 11)
		{
			NumberToStringRegular(InGame_Menu_Sens, FindDigits (InGame_Menu_Sens), 25);
		}

		if(Mod == 10)
		{
			NumberToStringRegular(StrafeAssistRadius, FindDigits (StrafeAssistRadius), 23);
			NumberToStringRegular(StrafeAssistSpeed , FindDigits (StrafeAssistSpeed) , 41);
		}

		if(Mod == 8)
		{
			NumberToStringRegular(SteadyAimResolution, FindDigits (SteadyAimResolution), 25);
		}

		if(Mod == 7)
		{
			NumberToStringRegular(Strength, FindDigits (Strength), 25);
		}

		if(Mod == 6)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(AimAssistStrength, FindDigits (AimAssistStrength), 25);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(AimAssistWaitTime, FindDigits (AimAssistWaitTime), 25);
			}
		}

		if(Mod == 5)
		{
			if(Tab == 0)
			{
				NumberToStringSmall(ADS_Size     , FindDigits (ADS_Size)     , 20);
				NumberToStringSmall(ADS_FIRE_Size, FindDigits (ADS_FIRE_Size), 33);
				NumberToStringSmall(HIPFIRE_Size , FindDigits (HIPFIRE_Size) , 46);
			}

			if(Tab == 1)
			{
				NumberToStringSmall(ADS_Wait_Value     , FindDigits (ADS_Wait_Value)     , 20);
				NumberToStringSmall(ADS_FIRE_Wait_Value, FindDigits (ADS_FIRE_Wait_Value), 33);
				NumberToStringSmall(HIPFIRE_Wait_Value , FindDigits (HIPFIRE_Wait_Value) , 46);
			}
		}

		if(Mod == 4)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(_PolarRadius, FindDigits (_PolarRadius), 23);
				NumberToStringRegular(_PolarAngle , FindDigits (_PolarAngle) , 43);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(_PolarRBoost, FindDigits (_PolarRBoost), 23);
				NumberToStringRegular(_PolarABoost, FindDigits (_PolarABoost), 41);
			}
		}

		if(Mod == 3)
		{
			NumberToStringRegular(TrackingSize , FindDigits (TrackingSize) , 23);
			NumberToStringRegular(TrackingSpeed, FindDigits (TrackingSpeed), 41);
		}

		if(Mod == 2)
		{
			NumberToStringRegular(NotoriousSpartan32Radius, FindDigits (NotoriousSpartan32Radius), 23);
			NumberToStringRegular(NotoriousSpartan32Angle , FindDigits (NotoriousSpartan32Angle) , 43);
		}

		if(Mod == 1 && AntiRecoilType == 3 || Mod == 1 && AntiRecoilType == 4)
		{
			if(Tab == 0)
			{
				NumberToStringRegular(NotoriousSpartan32ARVert , FindDigits (NotoriousSpartan32ARVert) , 23);
				NumberToStringRegular(NotoriousSpartan32ARHoriz, FindDigits (NotoriousSpartan32ARHoriz), 41);
			}

			if(Tab == 1)
			{
				NumberToStringRegular(DeadZone        , FindDigits (DeadZone)          , 23);
				NumberToStringSmall(doubleStrengthTime, FindDigits (doubleStrengthTime), 41);
			}
		}
		else if(Mod == 1 && AntiRecoilType == 5 || Mod == 1 && AntiRecoilType == 6)
		{
			NumberToStringRegular(AR_Strength  , FindDigits (AR_Strength)  , 23);
			NumberToStringRegular(NotoriousSpartan32ARHoriz, FindDigits (NotoriousSpartan32ARHoriz), 41);
		}
		else if(Mod == 1 && AntiRecoilType == 1 || Mod == 1 && AntiRecoilType == 2)
		{
			NumberToStringRegular(NotoriousSpartan32ARVert , FindDigits (NotoriousSpartan32ARVert) , 23);
			NumberToStringRegular(NotoriousSpartan32ARHoriz, FindDigits (NotoriousSpartan32ARHoriz), 41);
		}
		else if(Mod == 1 && AntiRecoilType == 7)
		{
			if(Tab == 0)
			{
				NumberToStringSmall(VerticalStart, FindDigits (VerticalStart), 20);
				NumberToStringSmall(VerticalEnd  , FindDigits (VerticalEnd)  , 33);
				NumberToStringSmall(VerticalTime , FindDigits (VerticalTime) , 46);
			}

			if(Tab == 1)
			{
				NumberToStringSmall(HorizontalStart, FindDigits (HorizontalStart), 20);
				NumberToStringSmall(HorizontalEnd  , FindDigits (HorizontalEnd)  , 33);
				NumberToStringSmall(HorizontalTime , FindDigits (HorizontalTime) , 46);
			}
		}

			if(Scroll == 2)
				line_oled(30, 20, 40, 20, 3, 1);
			if(Scroll == 1)
				line_oled(30, 33, 40, 33, 3, 1);
			if(Scroll == 0)
				line_oled(30, 46, 40, 46, 3, 1);
			}
		}
		else 
		{
			rect_oled(0, 0, 128, 64, 0, 1);

			if(notoriouscriptz2293887744hfh7848487556SwitchMethod == 4)
			{
				print(CenterX(GetChars(12), OLED_FONT_SMALL_WIDTH), 34, 0, 1, ModsString[42]);
			}
			else
			{
				print(CenterX(GetChars(12), OLED_FONT_SMALL_WIDTH), 34, 0, 1, ModsString[41]);
			}
		}
			rect_oled(0, 0, 128, 64, 0, 1);
			screenSaver	=  TRUE;
			Display		= FALSE;
	}
}

combo cRGB {
	wait(10);

	set_rgb(Colour, Colour[1], Colour[2]);

	Colour[Decrease]--;
	Colour[Increase]++;

	if(!Colour[Decrease])
	{
		Increase = (Increase + 1) % 3;
		Decrease = (Decrease + 1) % 3;
	}
}

combo cVibrate {
	set_rumble(RUMBLE_A, 90);
	wait(230);
	reset_rumble();
}

combo cVibrate2 {
	set_rumble(RumbleSide, 100);
	wait(RumbleTime);
	reset_rumble();
	wait(100);
}

combo cFlashGreen {
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(0, 255, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo cFlashRed {
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(100);
	set_rgb(0, 0, 0);
	wait(100);
	set_rgb(255, 0, 0);
	wait(2000);
	set_rgb(0, 0, 0);
}

combo cStickyAA {
	StrafeRandom = random(inv(QuadStrafeAssist), QuadStrafeAssist)

																																																																																							Set_Val(AimY,   StickyValue);
	wait(WaitValue);
	Set_Val(AimX,   StickyValue);
	Set_Val(Strafe, StrafeRandom);
	wait(WaitValue);
	Set_Val(AimY,   inv(StickyValue));
																																																																																							wait(WaitValue);
	Set_Val(AimX,   inv(StickyValue));
	Set_Val(Strafe, StrafeRandom);
	wait(WaitValue);
}

combo NOTOIROUSTHAGODAim {
	WaitStrength	= random(AimAssistWaitTime / 2 , AimAssistWaitTime);
	AimStrength		= random(inv(AimAssistStrength), AimAssistStrength);
	StrafeRandom	= random(inv(QuadStrafeAssist) , QuadStrafeAssist)

	Set_Val(AimY,	AimStrength);
	wait(WaitStrength);
	Set_Val(AimX,	AimStrength);
	Set_Val(Strafe,	StrafeRandom);
																																																																																							wait(WaitStrength);
	Set_Val(AimY,	inv(AimStrength));
	wait(WaitStrength);
																																																																																							Set_Val(AimX,	inv(AimStrength));
	Set_Val(Strafe, inv(StrafeRandom));
	wait(WaitStrength);
}

combo cPolar {
	Set_Ival(AimX, NotoriousRageXRadius);
	wait(20);
																																																																																							Set_Ival(AimY, NotoriousRageXRadius);
																																																																																							wait(20);
	Set_Ival(AimX, inv(NotoriousRageXRadius));
	wait(20);
	Set_Ival(AimY, inv(NotoriousRageXRadius));
	wait(20);
}

combo cCookAndRelease() {
	if(CookTime == 1028)

	set_val(Lethal_BTN, 100);
																																																																																							wait(CookTime);
	set_val(Lethal_BTN, 0);
	wait(100);
}

combo cAutoPing {
	set_val(Ping_BTN, 0);
	wait(100);
																																																																																							set_val(Ping_BTN, 100);
	wait(50);
																																																																																							set_val(Ping_BTN, 0);
	wait(50);
	set_val(Ping_BTN, 100);
	wait(50);
	set_val(Ping_BTN, 0);
	wait(AutoPingDelay);
}

combo cFastMelee {
	set_val(Melee_BTN, 100);
	wait(35);
	set_val(Melee_BTN, 0);
	wait(30);
}

combo cDolphinJump{
	wait(200);
																																																																																							set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN,0);
	wait(30);
																																																																																							set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN,0);
	wait(30);
}

combo cTacSprint { 
    set_val(Sprint_BTN, 100);
    wait(60);
    set_val(Sprint_BTN, 0);
    wait(1100);
    set_val(Melee_BTN, 100);
    wait(40);
    set_val(Melee_BTN, 0);
    wait(1000);
}

combo cRun {
	Sprinting = 1;
	set_val(Sprint_BTN, 100);
	wait(30);
}

combo cStopSprint {
	AutoRun_KS = TRUE;
	wait(AutoRunDelay);
	AutoRun_KS = FALSE;
}

combo cEasyProne {
    set_val(Crouch_BTN, 100);
    wait(350);
}

combo cGetUp {
																																																																																						    set_val(Jump_BTN, 100);
    wait(80);
}

combo cAimAbuse {
	set_val(Ads_BTN, 100);
																																																																																							wait(random(220, 420)); 
	set_val(Ads_BTN, 0);
	wait(random(90, 220));  
}

combo cReload {
	wait(20);
	set_val(Reload_BTN, 100);
	wait(50);
	wait(20);
	set_val(Reload_BTN, 0);
}

combo cCancelReload {
    set_val(Swap_BTN, 100);
    wait(20);
    wait(20)
    set_val(Swap_BTN, 100);
    wait(20);

    ReloadInProgress = FALSE; 
}

combo cGhostPeak{
	set_val(Crouch_BTN, 100);
	wait(675);
	set_val(Crouch_BTN, 0);
	wait(145);
																																																																																							set_val(Jump_BTN, 100);
	wait(30);
																																																																																							set_val(Jump_BTN, 0);
	wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
																																																																																							wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(600);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
}

combo cGhostPeakMW2 {
	set_val(Crouch_BTN, 100);
	wait(100);
	set_val(Walk, 100);
	wait(30);
	set_val(Crouch_BTN, 100);
	wait(750);
	set_val(Crouch_BTN, 0);
	set_val(Walk, 0);
	wait(100);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(600);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
	wait(60);
}

combo cBunnyHop {
    set_val(Jump_BTN, 100);
    wait(60);
    set_val(Jump_BTN, 0);
    wait(60);
    set_val(Jump_BTN, 100);
    wait(60);
    set_val(Jump_BTN, 0);
    wait(60);
}

combo cRapidFire {
    wait(RapidHold);
    set_val(Fire_BTN, 0);
    wait(RapidRest);
}

combo cAkimboRapid {
    set_val(Fire_BTN, 100);
    set_val(Ads_BTN, 100);
    wait(60);
    set_val(Fire_BTN, 0);
    set_val(Ads_BTN, 0);
	wait(30);
}

combo cBurstFire {
	wait(420);
    set_val(Fire_BTN, 0);
	wait(190);
}

combo cDynaFire {
	wait(Fire_Rate + 10);
	set_val(Fire_BTN, 0);
	wait(Fire_Rate + 10);
}

combo cBoom   {
    wait(830);
	set_val(Reload_BTN, 100);
	wait(60); 
	set_val(Reload_BTN, 0);
	wait(60);
	set_val(Reload_BTN, 100);
	wait(60);
	set_val(Reload_BTN, 0);
}

combo cProneRise {
	set_val(Crouch_BTN, 100);
	wait(570);
	set_val(Crouch_BTN, 0);
	wait(160);
	set_val(Jump_BTN, 100);
	wait(570);
	set_val(Jump_BTN, 0);
	wait(160);
}

combo cDropping_Shot {
	set_val(Crouch_BTN, 100);
	wait(random(45, 110));
	wait(random(65, 260));
	set_val(Crouch_BTN, 100);
}

combo cJumpyShot {
	set_val(Jump_BTN, 100);
	wait(100);
	set_val(Jump_BTN, 0);
	wait(100);
}

combo cQuickScope { 
	set_val(Fire_BTN, 0); 
	set_val(Sprint_BTN, 100);
	set_val(Ads_BTN, 100); 
	wait(QS_Delay);
	set_val(Sprint_BTN, 100);
	set_val(Ads_BTN, 100); 
	set_val(Fire_BTN, 100); 
	wait(50); 
}

combo cHoldBreath {
	set_val(Sprint_BTN, 0);
	wait(80);
	set_val(Sprint_BTN, 100);
	wait(100);
	set_val(Sprint_BTN, 0);
	wait(80);
}

combo Dropshot {
	set_val(Crouch_BTN, 100);
	wait(125);
	wait(DropShotSpeed);
	set_val(Crouch_BTN, 100);
}

combo SpartanMWSlideCancel2Tac {
	set_val(Crouch_BTN, 100);
	wait(80);
	set_val(Crouch_BTN, 0);
	wait(MW2SCDL);
	set_val(Ads_BTN, 100);
	wait(550);
	set_val(Ads_BTN, 0);
	wait(100);
	set_val(Jump_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(40);
}

combo cMW2CancelSlideStandard {
	set_val(Crouch_BTN, 100);
	wait(80);
	set_val(Crouch_BTN, 0);
	wait(MW2SCDL);
	wait(20);
	set_val(Swap_BTN, 100);
	wait(20);
	set_val(Swap_BTN, 0);
	wait(20);
	set_val(Swap_BTN, 100);
	wait(20);
	set_val(Swap_BTN, 0);
	wait(600);
	set_val(Jump_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(40);
}

combo SpartanMWSlideCancel2Lethal {
	wait(350);
	set_val(Lethal_BTN,100);
	wait(100);
	set_val(Swap_BTN,100);
	wait(30);
	set_val(Swap_BTN, 0);
	wait(30);
	set_val(Lethal_BTN, 0);
	wait(450);
	set_val(Jump_BTN, 100);
	wait(30);
	set_val(Jump_BTN, 0);
}

combo cBFCancelSlide { 
	set_val(Jump_BTN, 100);
	wait(BF2042SCDL);
	set_val(Crouch_BTN, 100);
	wait(40);
	set_val(Jump_BTN, 0);
	wait(60);
	set_val(Crouch_BTN, 0);
	wait(10);
	set_val(Jump_BTN, 100);
	wait(10);
	set_val(Sprint_BTN, 100);
	wait(60);
	set_val(Sprint_BTN, 0);
	wait(10);
}

combo cCancelSlideCW {
	set_val(Crouch_BTN, 100);
    wait(SCDLCW);
	set_val(Crouch_BTN, 0);
	wait(20);
	set_val(Sprint_BTN, 0);
	set_val(Ads_BTN, 100);
	wait(10);
	set_val(Ads_BTN, 0);
	set_val(Crouch_BTN, 100);
	set_val(Sprint_BTN, 100);
	wait(20);
	set_val(Crouch_BTN, 0);
	set_val(Sprint_BTN, 0);
	wait(20);
}

combo SpartanMWSlideCancel {
	set_val(Crouch_BTN, 100);
	wait(MWSCDL);
	set_val(Crouch_BTN, 0);
	wait(60);
	set_val(Crouch_BTN, 100);
	wait(50);
	set_val(Crouch_BTN, 100);
	set_val(Jump_BTN, 100);
	wait(60);
	set_val(Crouch_BTN, 0);
	set_val(Jump_BTN, 100);
	wait(10);
	set_val(Jump_BTN, 0);
}

combo SpartanGodlyAccuracy {
	set_val(Fire_BTN, 100);
	wait(newHold);
	set_val(Fire_BTN, 0);
	wait(newRest);
}

combo SpartanZigZag {
	if(StrafeIndex == 0)
	{
		RandomizedStrafeOne = 110;
		RandomizedStrafeTwo = 210;
	}
	else
	{
		RandomizedStrafeOne = 210;
		RandomizedStrafeTwo = 110;
	}

	Set_Val(Strafe, 100);

	Strafe = random((StrafeDelay - RandomizedStrafeOne), (StrafeDelay + RandomizedStrafeOne));

	wait(Strafe); 
	wait(54); 
	Set_Val(Strafe, inv(100));

	Strafe = random((StrafeDelay - RandomizedStrafeTwo), (StrafeDelay + RandomizedStrafeTwo));

	wait(Strafe); 
	wait(54);

	StrafeIndex++;

	if(StrafeIndex == 2)
		StrafeIndex = 0;
}

combo NOTOIROUSTHAGOD {
	wait(20);
	image_oled(0, 10, Color, FALSE, Frames[Frame]);
	Frame ++;
}

																																																																																						function Load_PVARs() {
																																																																																							doubleStrengthTime		= get_pvar(SPVAR_1,     0,	2000,	600);
																																																																																							QS_Delay				= get_pvar(SPVAR_2,     1,  3000,   285);
	StrafeDelay				= get_pvar(SPVAR_3,     1,  3000,   400);
	burstHold				= get_pvar(SPVAR_4,     1,  3000,   240);
	burstRest				= get_pvar(SPVAR_5,     1,  3000,   180);
																																																																																							RapidHold				= get_pvar(SPVAR_6,     1,  3000,    60);
	RapidRest				= get_pvar(SPVAR_7,     1,  3000,    30);
	RapidBurstHold			= get_pvar(SPVAR_8,     1,  3000,   420);
	RapidBurstRest			= get_pvar(SPVAR_9,     1,  3000,   190);
																																																																																							HeadShotHoldTime		= get_pvar(SPVAR_10,    1,  4000,  1500);
	AutoPingDelay			= get_pvar(SPVAR_11,    1,  6000,  2000);
	MaxReloadTime			= get_pvar(SPVAR_12,    1,  9999,  1860);
																																																																																							AutoRunDelay			= get_pvar(SPVAR_13,    1,  9999,  1890);
																																																																																							VerticalTime			= get_pvar(SPVAR_14,    1,  9999,  2000);
																																																																																							HorizontalTime			= get_pvar(SPVAR_15,    1,  9999,  2400);
																																																																																							AR_Strength				= get_pvar(SPVAR_16, -100,	 100,	 20);

																																																																																							Reset_SPVAR();

	Strength				= Read_PVAR(	1,	 10,	2);
	TrackingSize			= Read_PVAR(    1,   10,    2);
	TrackingSpeed			= Read_PVAR(    1,   10,    3);
	DeadZone				= Read_PVAR(	1,	 20,	8);
	NotoriousSpartan32Radius			= Read_PVAR(    1,   50,   15);
	_PolarRadius			= Read_PVAR(    1,   50,   10);
																																																																																							_PolarAngle				= Read_PVAR(    1,   50,   15);
																																																																																							_PolarRBoost			= Read_PVAR(    1,   50,    5);
																																																																																							_PolarABoost			= Read_PVAR(    1,   50,    8);
																																																																																							ADS_Size				= Read_PVAR(    1,   50,   14);
																																																																																							ADS_FIRE_Size			= Read_PVAR(    1,   50,   16);
																																																																																							HIPFIRE_Size			= Read_PVAR(    1,   50,   18);
																																																																																							InGame_Menu_Sens		= Read_PVAR(    1,   50,   10);
	AimAssistStrength		= Read_PVAR(    1,   50,   15);
	AimAssistWaitTime		= Read_PVAR(    1,  100,   36);
	NotoriousSpartan32Angle				= Read_PVAR(    1,  100,   15);
	StrafeAssistRadius		= Read_PVAR(    1,  100,   25);
	StrafeAssistSpeed		= Read_PVAR(    1,  100,   25);
	ADS_Wait_Value			= Read_PVAR(    1,  100,   30);
	ADS_FIRE_Wait_Value		= Read_PVAR(    1,  100,   20);
	HIPFIRE_Wait_Value		= Read_PVAR(    1,  100,   30);
	HeadShotStrength		= Read_PVAR(    1,  100,   15);
	NotoriousSpartan32ARVert			= Read_PVAR(    1,  100,   20);
	DropShotSpeed			= Read_PVAR(    1,  100,   40);
	NOTORIOUSTHAGODlaiDropShotSpeed	= Read_PVAR(    1,  100,   40);
	SteadyAimResolution		= Read_PVAR(    1,  100,   11);
	NotoriousSpartan32ARHoriz			= Read_PVAR( -100,  100,    0);
	VerticalStart			= Read_PVAR( -100,  100,   15);
	VerticalEnd				= Read_PVAR( -100,  100,   20);
	HorizontalStart			= Read_PVAR( -100,  100,    0);
	HorizontalEnd			= Read_PVAR( -100,  100,    0);

	AntiRecoilType			= Read_PVAR(    0,    7,    0);
	NotoriousSpartan32aimbotv3s			= Read_PVAR(    0,   11,    0);
	NotoriousSpartan32Tracking			= Read_PVAR(    0,    1,    0);
	NotoriousRageXPolar			= Read_PVAR(    0,    1,    0);
	QuadSticky				= Read_PVAR(    0,    1,    0);
	SS_NOTORIOUSTHAGODlai_Aim			= Read_PVAR(    0,    1,    0);
																																																																																							SmokeDTimeAA				= Read_PVAR(    0,    1,    0);
																																																																																							SteadyAimToggle			= Read_PVAR(    0,    1,    0);
	AimAbuse				= Read_PVAR(    0,    1,    0);
																																																																																							ToggleSpeedStrafe		= Read_PVAR(    0,    1,    0);
	AimSensCorrections		= Read_PVAR(    0,    1,    0);
																																																																																							RapidFireToggle			= Read_PVAR(    0,    1,    0);
	AkimboRapidFireToggle	= Read_PVAR(    0,    1,    0);
																																																																																							BurstFireToggle			= Read_PVAR(    0,    1,    0);
																																																																																							DynamicRapidFireToggle	= Read_PVAR(    0,    1,    0);
	SlideCancelMode			= Read_PVAR(    0,    8,    0);
																																																																																							JumpShot				= Read_PVAR(    0,    1,    0);
	ScopeShot				= Read_PVAR(    0,    3,    0);
																																																																																							QuickScope				= Read_PVAR(    0,    2,    0);
																																																																																							StrafeToggle			= Read_PVAR(    0,    1,    0);
	StandardDropShot		= Read_PVAR(    0,    1,    0);
	NOTORIOUSTHAGODlaiDropShot			= Read_PVAR(    0,    1,    0);
	HoldBreath				= Read_PVAR(    0,    1,    0);
	AutoPing				= Read_PVAR(    0,    4,    0);
	Prone_Rise				= Read_PVAR(    0,    1,    0);
	Pussy_Mode			= Read_PVAR(    0,    1,    0);
	Strafe_Jump				= Read_PVAR(    0,    1,    0);
	Smart_Grenade			= Read_PVAR(    0,    1,    0);
	BunnyHop				= Read_PVAR(    0,    1,    0);
	Auto_Blow				= Read_PVAR(    0,    1,    0);
	Toggle_EasyProne		= Read_PVAR(    0,    1,    0);
	CancelReload			= Read_PVAR(    0,    1,    0);
	UseAutoRun				= Read_PVAR(    0,    4,    0);
	FastMeleeToggle			= Read_PVAR(    0,    2,    0);
	PerfectAccuracy			= Read_PVAR(    0,    1,    0);
	HeadShotAssist			= Read_PVAR(    0,    1,    0);
	RumbleBlock				= Read_PVAR(    0,    1,    0);
	AutoReload				= Read_PVAR(    0,    1,    0);
	DolphinDiveToggle		= Read_PVAR(    0,    1,    0);
	GhostPeakToggle			= Read_PVAR(	0,	  2,	0)
	Pin 					= Read_PVAR(  101,  999,  101);

	set_val(TRACE_2, (PVAR_Current_Slot - SPVAR_17) + (PVAR_Current_Bit > 0));
}

function Save() {
																																																																																							set_pvar(SPVAR_1,  doubleStrengthTime);
																																																																																							set_pvar(SPVAR_2,  QS_Delay);
																																																																																							set_pvar(SPVAR_3,  StrafeDelay);
	set_pvar(SPVAR_4,  burstHold);
	set_pvar(SPVAR_5,  burstRest);
	set_pvar(SPVAR_6,  RapidHold);
	set_pvar(SPVAR_7,  RapidRest);
	set_pvar(SPVAR_8,  RapidBurstHold);
	set_pvar(SPVAR_9,  RapidBurstRest);
	set_pvar(SPVAR_10, HeadShotHoldTime);
	set_pvar(SPVAR_11, AutoPingDelay);
	set_pvar(SPVAR_12, MaxReloadTime);
	set_pvar(SPVAR_13, AutoRunDelay);
	set_pvar(SPVAR_14, VerticalTime);
	set_pvar(SPVAR_15, HorizontalTime);
	set_pvar(SPVAR_16, AR_Strength);

	Reset_SPVAR();
 
	Save_PVAR(Strength		       	,    1,     10,  FALSE);
	Save_PVAR(TrackingSize       	,    1,     10,  FALSE);
	Save_PVAR(TrackingSpeed      	,    1,     10,  FALSE);
	Save_PVAR(DeadZone	      		,    1,     20,  FALSE);	
	Save_PVAR(NotoriousSpartan32Radius       	,    1,     50,  FALSE);
	Save_PVAR(_PolarRadius       	,    1,     50,  FALSE);
	Save_PVAR(_PolarAngle        	,    1,     50,  FALSE);
	Save_PVAR(_PolarRBoost       	,    1,     50,  FALSE);
	Save_PVAR(_PolarABoost       	,    1,     50,  FALSE);
	Save_PVAR(ADS_Size           	,    1,     50,  FALSE);
	Save_PVAR(ADS_FIRE_Size      	,    1,     50,  FALSE);
	Save_PVAR(HIPFIRE_Size       	,    1,     50,  FALSE);
	Save_PVAR(InGame_Menu_Sens   	,    1,     50,  FALSE);
	Save_PVAR(AimAssistStrength   	,    1,     50,  FALSE);
	Save_PVAR(AimAssistWaitTime		,    1,    100,  FALSE);
	Save_PVAR(NotoriousSpartan32Angle        	,    1,    100,  FALSE);
	Save_PVAR(StrafeAssistRadius	,    1,    100,  FALSE);
	Save_PVAR(StrafeAssistSpeed		,    1,    100,  FALSE);
	Save_PVAR(ADS_Wait_Value     	,    1,    100,  FALSE);
	Save_PVAR(ADS_FIRE_Wait_Value	,    1,    100,  FALSE);
	Save_PVAR(HIPFIRE_Wait_Value 	,    1,    100,  FALSE);
	Save_PVAR(HeadShotStrength   	,    1,    100,  FALSE);
	Save_PVAR(NotoriousSpartan32ARVert   		,    1,    100,  FALSE);
	Save_PVAR(DropShotSpeed			,    1,    100,  FALSE);
	Save_PVAR(NOTORIOUSTHAGODlaiDropShotSpeed	,    1,    100,  FALSE);
	Save_PVAR(SteadyAimResolution	,    1,    100,  FALSE);
	Save_PVAR(NotoriousSpartan32ARHoriz 		, -100,    100,  FALSE);
	Save_PVAR(VerticalStart			, -100,    100,  FALSE);
	Save_PVAR(VerticalEnd			, -100,    100,  FALSE);
	Save_PVAR(HorizontalStart		, -100,    100,  FALSE);
	Save_PVAR(HorizontalEnd			, -100,    100,  FALSE);

	Save_PVAR(AntiRecoilType		,	   0,    7,  FALSE);
	Save_PVAR(NotoriousSpartan32aimbotv3s		  	,	   0,   11,  FALSE);
	Save_PVAR(NotoriousSpartan32Tracking  	  	,	   0,    1,  FALSE);
	Save_PVAR(NotoriousRageXPolar	  		,	   0,    1,  FALSE);
	Save_PVAR(QuadSticky	  	  	,	   0,    1,  FALSE);
	Save_PVAR(SS_NOTORIOUSTHAGODlai_Aim		,	   0,    1,  FALSE);
																																																																																							Save_PVAR(SmokeDTimeAA			,	   0,    1,  FALSE);
																																																																																							Save_PVAR(SteadyAimToggle		,	   0,    1,  FALSE);
	Save_PVAR(AimAbuse				,	   0,    1,  FALSE);
																																																																																							Save_PVAR(ToggleSpeedStrafe  	,	   0,    1,  FALSE);
																																																																																							Save_PVAR(AimSensCorrections 	,	   0,    1,  FALSE);
	Save_PVAR(RapidFireToggle	  	,	   0,    1,  FALSE);
	Save_PVAR(AkimboRapidFireToggle	,	   0,    1,  FALSE);
	Save_PVAR(BurstFireToggle	  	,	   0,    1,  FALSE);
	Save_PVAR(DynamicRapidFireToggle,	   0,    1,  FALSE);
	Save_PVAR(SlideCancelMode	  	,	   0,    8,  FALSE);
	Save_PVAR(JumpShot	  	  	  	,	   0,    1,  FALSE);
	Save_PVAR(ScopeShot	  	  		,	   0,    3,  FALSE);
	Save_PVAR(QuickScope		  	,	   0,    2,  FALSE);
	Save_PVAR(StrafeToggle		  	,	   0,    1,  FALSE);
	Save_PVAR(StandardDropShot		,	   0,    1,  FALSE);
	Save_PVAR(NOTORIOUSTHAGODlaiDropShot		,	   0,    1,  FALSE);
	Save_PVAR(HoldBreath		  	,	   0,    1,  FALSE);
	Save_PVAR(AutoPing			  	,	   0,    4,  FALSE);
	Save_PVAR(Prone_Rise		  	,	   0,    1,  FALSE);
	Save_PVAR(Pussy_Mode		  	,	   0,    1,  FALSE);
	Save_PVAR(Strafe_Jump		  	,	   0,    1,  FALSE);
	Save_PVAR(Smart_Grenade	  		,	   0,    1,  FALSE);
	Save_PVAR(BunnyHop		  	  	,	   0,    1,  FALSE);
	Save_PVAR(Auto_Blow		  		,	   0,    1,  FALSE);
	Save_PVAR(Toggle_EasyProne	  	,	   0,    1,  FALSE);
	Save_PVAR(CancelReload		  	,	   0,    1,  FALSE);
	Save_PVAR(UseAutoRun		  	,	   0,    4,  FALSE);
	Save_PVAR(FastMeleeToggle		,	   0,    2,  FALSE);
	Save_PVAR(PerfectAccuracy	  	,	   0,    1,  FALSE);
	Save_PVAR(HeadShotAssist	  	,	   0,    1,  FALSE);
	Save_PVAR(RumbleBlock		  	,	   0,    1,  FALSE);
	Save_PVAR(AutoReload		  	,	   0,    1,  FALSE);
	Save_PVAR(DolphinDiveToggle		,	   0,    1,  FALSE);
	Save_PVAR(GhostPeakToggle		,	   0,	 2,	  TRUE);
	Save_PVAR(Pin					, 	 101,  999,   TRUE);

	set_val(TRACE_3, (PVAR_Current_Slot - SPVAR_17) + (PVAR_Current_Bit > 0));
}

int PVAR_Current_Slot,
	PVAR_Current_Bit,
	PVAR_Current_Value;
int PVAR_Temp;
int PVAR_Full_Bitmask = -1;
int PVAR_Bits;

function Reset_SPVAR() {
	PVAR_Current_Slot	= SPVAR_17;
	PVAR_Current_Bit	=		 0;
	PVAR_Current_Value	=		 0;
}

function Get_Bit_Count(b_Val) {
	if(b_Val < 0)
		return Get_Bit_Count(abs(b_Val + 1));

		PVAR_Temp = 0;

		do
		{
			PVAR_Temp++;
			b_Val = b_Val >> 1;
		}
			while (b_Val);
	return PVAR_Temp;
}

function Get_Bit_Count_2(f_Min, f_Max) {
	PVAR_Temp = max(Get_Bit_Count(f_Min), Get_Bit_Count(f_Max));

	if(Is_Signed_2(f_Min, f_Max))
		PVAR_Temp++;
	return PVAR_Temp;
}

function Is_Signed_2(f_Min, f_Max) {
	return f_Min < 0 || f_Max < 0;
}

function Make_Full_Mask(f_Bits) {
	if(f_Bits == 32)
		return PVAR_Full_Bitmask;
	return (PVAR_Full_Bitmask & (~(1 << (32 - 1)))) >> (32 - f_Bits - 1);
}

function Make_Sign(f_Bits) {
	return 1 << clamp(f_Bits - 1, 0, 32 - 1);
}

function Make_Sign_Mask(f_Bits) {
	return ~Make_Sign(f_Bits);
}

function Pack_Unsigned(b_Val, f_Bits) {
	return b_Val & Make_Full_Mask(f_Bits);
}

function Pack_Signed(b_Val, f_Bits) {
	if(b_Val < 0)
		return (abs(b_Val) & Make_Sign_Mask(f_Bits)) | Make_Sign(f_Bits);
	return b_Val & Make_Sign_Mask(f_Bits);
}

function Unpack_Signed(b_Val, f_Bits) {
	if(b_Val & Make_Sign(f_Bits))
		return 0 - (b_Val & Make_Sign_Mask(f_Bits));
	return b_Val & Make_Sign_Mask(f_Bits);
}

function Read_SPVAR_Slot(f_Slot) {
	return get_pvar(f_Slot, 0 - (PVAR_Full_Bitmask & (1 << (32 - 1))), 0 - ((0 - (PVAR_Full_Bitmask & (1 << (32 - 1)))) + 1), 0);
}

function Save_PVAR(b_Val, f_Min, f_Max, f_Save) {
	PVAR_Bits = Get_Bit_Count_2(f_Min, f_Max);

	if(Is_Signed_2(f_Min, f_Max))
		b_Val = Pack_Signed(b_Val, PVAR_Bits);
		b_Val = Pack_Unsigned(b_Val, PVAR_Bits);

			if(PVAR_Bits > 32 - PVAR_Current_Bit)
			{
				PVAR_Current_Value = PVAR_Current_Value | (b_Val << PVAR_Current_Bit);
				set_pvar(PVAR_Current_Slot, PVAR_Current_Value);
				PVAR_Current_Slot++;
				PVAR_Bits -= (32 - PVAR_Current_Bit);
				b_Val = b_Val >> (32 - PVAR_Current_Bit);
				PVAR_Current_Bit = 0;
				PVAR_Current_Value = 0;
			}

	PVAR_Current_Value = PVAR_Current_Value | (b_Val << PVAR_Current_Bit);
	PVAR_Current_Bit += PVAR_Bits;

	if(PVAR_Current_Bit >= 32)
	{
		PVAR_Current_Bit -= 32;
		set_pvar(PVAR_Current_Slot, PVAR_Current_Value);
		PVAR_Current_Slot++;

			if (!PVAR_Current_Bit)
				PVAR_Current_Value = 0;
	}

	if(f_Save)
		set_pvar(PVAR_Current_Slot, PVAR_Current_Value);
}

function Read_PVAR(f_Min, f_Max, f_Default) {
	PVAR_Current_Value	= Read_SPVAR_Slot(PVAR_Current_Slot);
	PVAR_Bits			= Get_Bit_Count_2(f_Min, f_Max);
	PVAR_Current_Value	= Pack_Unsigned(PVAR_Current_Value >> PVAR_Current_Bit, PVAR_Bits);

	if(PVAR_Bits > 32 - PVAR_Current_Bit)
	{
		PVAR_Current_Slot++;
		PVAR_Temp = Read_SPVAR_Slot(PVAR_Current_Slot);
		PVAR_Temp = Pack_Unsigned(PVAR_Temp, PVAR_Bits - (32 - PVAR_Current_Bit));
		PVAR_Temp = PVAR_Temp << (32 - PVAR_Current_Bit);
		PVAR_Current_Value = Pack_Unsigned(PVAR_Current_Value, (PVAR_Bits - (32 - PVAR_Current_Bit)));
		PVAR_Current_Value = PVAR_Current_Value | PVAR_Temp;
		PVAR_Current_Bit = PVAR_Current_Bit - 32;
	}

	PVAR_Current_Bit += PVAR_Bits;

	if(PVAR_Current_Bit >= 32)
	{
		PVAR_Current_Bit -= 32;
		PVAR_Current_Slot++;
	}

	PVAR_Current_Value = Pack_Unsigned(PVAR_Current_Value, PVAR_Bits);

	if(Is_Signed_2(f_Min, f_Max))
		PVAR_Current_Value = Unpack_Signed(PVAR_Current_Value, PVAR_Bits);

	if(PVAR_Current_Value < f_Min || PVAR_Current_Value > f_Max)
		return f_Default;

	return PVAR_Current_Value;
}

function block_all_outputs() {
	set_val(PS4_L2      , 0);
	set_val(PS4_R2      , 0);
	set_val(PS4_L1      , 0);
	set_val(PS4_R1      , 0);
	set_val(PS4_L3      , 0);
	set_val(PS4_R3      , 0);
	set_val(PS4_UP      , 0);
	set_val(PS4_DOWN    , 0);
	set_val(PS4_LEFT    , 0);
	set_val(PS4_RIGHT   , 0);
	set_val(PS4_CROSS   , 0);
	set_val(PS4_SQUARE  , 0);
	set_val(PS4_CIRCLE  , 0);
	set_val(PS4_TRIANGLE, 0);
}

function NOTORIOUSTHAGOD_ChecK() {
	if(!combo_running(NOTOIROUSTHAGOD) && Frame <= 15)
		combo_restart(NOTOIROUSTHAGOD);
}

function Main_Button_Pressed(Except) {
	if(Except != -1 && event_press(Except))
		return FALSE;
	if(event_press(Lethal_BTN))
		return TRUE;
	return FALSE;
}

function LEDBlink(Toggle) {
    if(Toggle)
        combo_run(cFlashGreen);
    else
        combo_run(cFlashRed);
}

function Check_Magnitude(_XVal, _XLVal, _YVal, _YLVal) {
	if(isqrt(pow((_XVal - _XLVal), 2) + pow((_YVal - _YLVal), 2) ) <= 500)
	{
		return TRUE;
	}
		return FALSE;
}

function RumbleDeathfogAR() {	
	ReT = max(get_rumble(RUMBLE_A), get_rumble(RUMBLE_B));

	if (ReT > 10 && ReT < 90)
	{
		return(ReT - AR_Strength * Inverted);
	}
		return 0;
}

function DynamicDeathfogAR(AR_Strength, CurrentRY, CurrentRX) {
	if(get_ptime(Fire_BTN))
	{
		AxisY = (get_ptime(Fire_BTN) / (160));

		aR_Strength = (AR_Strength / 2) + AR_Strength * Inverted;

		if(AxisY > aR_Strength)
			AxisY = aR_Strength;

		AxisY = AxisY +  AR_Strength - ((abs(CurrentRX * CurrentRX) + abs(CurrentRY * CurrentRY)) / 1000);
	}
		return AxisY;
}

function RumbleToUse() {
	if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) == 100) 
	{
		return RUMBLE_B;
	}

	if(get_rumble(RUMBLE_B) == 100) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_A;
	}

	if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
	{
		return RUMBLE_B;
	}
		return 0;
}

function GetSteadyAim(Axis, _Resolution) {
	if (Axis >= 0)
	{
		ReT = (Axis % _Resolution);

		if (ReT >= (_Resolution / 2))
			Axis = Axis + (_Resolution - ReT);
		else
			Axis -= ReT;
	}
	else
	{
		ReT = (Axis % _Resolution);

		if (abs(ReT) >= (_Resolution / 2))
			Axis = Axis - (_Resolution + ReT);
		else
			Axis += abs(ReT);
	}
		return Axis;
}

function NotoriousSpartan32aimbotv3s(Stick, Angle, Rad) {
	if(NotoriousSpartan32aimbotv3s == 1)
	{  
	 	if(aimbotv3Direction)
		{
	  		Set_Val(Stick + 8, (Rad * sin(Angle)) / 100 + TrackingAngleOne);
	 		Set_Val(Stick + 7, (Rad * cos(Angle)) / 100 + TrackingAngleTwo);
	 	}
		else
		{
	 		Set_Val(Stick + 8, (Rad * cos(Angle)) / 100 + TrackingAngleTwo);
	 		Set_Val(Stick + 7, (Rad * sin(Angle)) / 100 + TrackingAngleOne);
	 	}
 	}

 	if(NotoriousSpartan32aimbotv3s == 2)
	{ 		
  		if(aimbotv3Direction)
		{
  		    Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + TrackingAngleOne);
  			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + TrackingAngleTwo);
  		}
		else
		{
  			Set_Val(Stick + 8, (Rad     * cos(Angle))  / 100 + TrackingAngleTwo);
  			Set_Val(Stick + 7, (Rad / 2 * sin(Angle))  / 100 + TrackingAngleOne);
  		}
  	}

  	if(NotoriousSpartan32aimbotv3s == 3)
	{
  	    if(aimbotv3Direction)
		{
  		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle))  / 100 + TrackingAngleOne);
  			Set_Val(Stick + 7, (Rad     * cos(Angle))  / 100 + TrackingAngleTwo);
  	    }
		else
		{ 
  	    	Set_Val(Stick + 8, (Rad / 2 * cos(Angle))  / 100 + TrackingAngleTwo);
  			Set_Val(Stick + 7, (Rad     * sin(Angle))  / 100 + TrackingAngleOne);
  		} 
  	}

  	if(NotoriousSpartan32aimbotv3s == 4)
	{
		DeathFog(Rad);

			if(aimbotv3Direction)
			{ 
				Set_Val(Stick + 8, (InnerDeathFog * sin(Angle)) / 100 + TrackingAngleOne);
				Set_Val(Stick + 7, (OuterDeathFog * cos(Angle)) / 100 + TrackingAngleTwo);
			}
			else
			{
				Set_Val(Stick + 8, (InnerDeathFog * cos(Angle)) / 100 + TrackingAngleTwo);
				Set_Val(Stick + 7, (OuterDeathFog * sin(Angle)) / 100 + TrackingAngleOne);
			}
  	}

	if(NotoriousSpartan32aimbotv3s == 5)
	{
		Helix();

		Set_Val(Stick + 8, (Rad * X)  / 100 + TrackingAngleOne);
		Set_Val(Stick + 7, (Rad * Y)  / 100 + TrackingAngleTwo);
	}

	if(NotoriousSpartan32aimbotv3s == 6) 
	{ 
		Set_Val(Stick + 8, (Rad * cos(Angle)) / 100 + TrackingAngleTwo);
	}

	if(NotoriousSpartan32aimbotv3s == 7)
	{ 
		if(Position == 0)
		{
			Set_Val(Stick + 7, (Rad * cos(135 + Angle)) / 100 + TrackingAngleTwo);
		    Set_Val(Stick + 8, (Rad * sin(45  + Angle)) / 100 + TrackingAngleOne);
		} 

		if(Position == 1)
		{
			Set_Val(Stick + 7, (Rad * cos(45  + Angle)) / 100 + TrackingAngleTwo);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + TrackingAngleOne);
	    }  

		Position ++;

		if(Position == 2)
		{
		  	Position = 0;
		}
    }

    if(NotoriousSpartan32aimbotv3s == 8)
	{ 
    	Set_Val(Stick + 7, (Rad * cos(315 + Angle))  / 100 + TrackingAngleTwo);
  		Set_Val(Stick + 8, (Rad * sin(180 + Angle))  / 100 + TrackingAngleOne);
  	}

	if(NotoriousSpartan32aimbotv3s == 9)
	{
    	Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleTwo);
  		Set_Val(Stick + 8, (Rad * sin(315 + Angle)) / 100 + TrackingAngleOne);
  	}

	if(NotoriousSpartan32aimbotv3s == 10)
	{
		if(polarAngle < 45)
		{
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + TrackingAngleTwo); 
		} 
		else if(polarAngle <  90)
		{ 
			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad   	* sin(Angle)) / 100 + TrackingAngleTwo);
		} 
		else if(polarAngle < 135)
		{ 
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + TrackingAngleTwo); 
		}  
		else if(polarAngle < 180)
		{
		    Set_Val(Stick + 7, (Rad		* cos(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + TrackingAngleTwo); 
		}
		else if(polarAngle < 225)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + TrackingAngleTwo); 
		}  
		else if(polarAngle < 270)
		{ 
		    Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad 	* sin(Angle)) / 100 + TrackingAngleTwo); 
		}
		else if(polarAngle < 315)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + TrackingAngleTwo); 
		}
		else
		{ 
		  	Set_Val(Stick + 7, (Rad 	*   cos(Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle))   / 100 + TrackingAngleTwo); 
		}
	}

	if(NotoriousSpartan32aimbotv3s == 11)
	{
		if(anglePosition == 0)
		{ 
			Set_Val(Stick + 7, (Rad     * cos(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + TrackingAngleTwo);
		} 

		if(anglePosition == 1)
		{  
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + TrackingAngleTwo); 
		} 

		if(anglePosition == 2)
		{  
			Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + TrackingAngleTwo);
		}  

		if(anglePosition == 3)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + TrackingAngleTwo); 
		}

		if(anglePosition == 4)
		{  
		    Set_Val(Stick + 7, (Rad     * cos(Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad / 2 * sin(Angle)) / 100 + TrackingAngleTwo);
		}  

		if(anglePosition == 5)
		{ 
		    Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne); 
		    Set_Val(Stick + 8, (Rad * sin(225 + Angle)) / 100 + TrackingAngleTwo); 
		}

		if(anglePosition == 6)
		{ 
		   Set_Val(Stick + 7, (Rad / 2 * cos(Angle)) / 100 + TrackingAngleOne); 
		   Set_Val(Stick + 8, (Rad     * sin(Angle)) / 100 + TrackingAngleTwo);
		}

		if(anglePosition == 7)
		{ 
			Set_Val(Stick + 7, (Rad * cos(180 + Angle)) / 100 + TrackingAngleOne);
		    Set_Val(Stick + 8, (Rad * sin(135 + Angle)) / 100 + TrackingAngleTwo);
	    } 

	    Timer++;

		if(Timer >= NotoriousSpartan32Angle)
		{
			anglePosition ++;
			Timer = 0;
		}

		if(anglePosition == 8) 
			anglePosition = 0;
	}
}

function CorrectAngle(angle) {
	if (angle < 0)
		angle = 360	   + (angle % 360);
		angle = (angle + 90)	% 360;
	return angle;
}

function sin(angle) {
	return PolarArray[CorrectAngle(angle)];
}

function cos(angle) {
	return PolarArray[(CorrectAngle(angle) + 90) % 360];
}

function Helix(){ 
	Inc = (Inc % 100);

	if(Position == 0)
	{
		X = Inc;
		Y = 100 - Inc;
	}
	else if (Position == 1)
	{
		X = 100 - Inc;
		Y = - Inc;
	}
	else if (Position == 2)
	{
		X = -Inc;
		Y = -100 + Inc;
	}
	else if(Position == 3)
	{
		X = -100 + Inc;
		Y = Inc;
	}

	Position ++;

	if(Position == 4)
	{
		Position = 0;
	}
}

function DeathFog(x_Var) {
	if(!(CycleRefresh++ % 4))
	{
		if(!DeathFogPosition1)
		{
			InnerDeathFog -= 1;

			if(InnerDeathFog < x_Var / 2)
				DeathFogPosition1 = TRUE;
		}
		else
		{
		    InnerDeathFog += 1;

			if(InnerDeathFog > x_Var)
				DeathFogPosition1 = FALSE;
		}
		if(!DeathFogPosition2)
		{
			OuterDeathFog -= 1;

			if(OuterDeathFog < x_Var / 2)
				DeathFogPosition2 = TRUE;
		}
		else
		{
			OuterDeathFog += 1;

			if(OuterDeathFog >  x_Var)
				DeathFogPosition2 = FALSE;
		}
			CycleRefresh = 0;
	}
}

function SmokeDTimeAim() {
	AAT += get_rtime();

	if (!AxisT)
		Set_Val(AimY, AAT * Strength / 10);

	if (AxisT == 1)  
		Set_Val(AimX, AAT * Strength / 10);

	if (AxisT == 2)  
		Set_Val(AimY, inv(AAT * Strength / 10));

	if (AxisT == 3)
	{
		Set_Val(AimX, inv(AAT * Strength / 10));

		if (AAT > 50)
		{
			AAT		= 0;
			AxisT	= 0;
		}
	}
	else if (AAT > 50)
	{
		AAT		 = 0;
		AxisT	+= 1;
	}
}

function Get_Polar(Stick, AngleOrRadius) {
	if (AngleOrRadius)
		return (360 - get_polar(Stick, POLAR_ANGLE)) % 360;
	return isqrt(~(pow(get_val(42 + Stick), 2) + pow(get_val(43 + Stick), 2))) + 1;
}

function Set_Val(Stick, Value) {
	set_val(Stick, clamp(Value * (100 - abs(get_val(Stick))) / 100 + get_val(Stick), -100, 100));
		return;
}

function Set_Ival(Stick, Output) {
	set_val(Stick, clamp(Output * (100 - abs(get_ival(Stick))) / 100 + get_ival(Stick), -100, 100));
		return;
}

function CompleteY() {
	VertCount++;

	if(VertCount > VerticalTime / 10)
	{
		VertCount = VerticalTime / 10;
		return 1;
	}
		return 0;
}

function VertiVal() {
	VertNum++;

	if(VertNum == VertCalc)
	{
		VertNum = 0;
		AxisY_ += VertVal;
	}
		return AxisY_;
}

function ApplyYVal() {
	Y_Axis = get_val(AimY);

	if(abs(Y_Axis) < 10)
		Y_Axis = 0;
	if(abs(Y_Axis) > AxisY_ + 5)
		return Y_Axis;
	return Y_Axis + (AxisY_);
}

function CompleteX() {
	HorizCount++;

	if(HorizCount > HorizontalTime / 10)
	{
		HorizCount = HorizontalTime / 10;
		return 1;
	}
		return 0;
}

function HoriVal() {
	HorizNum++;

	if(HorizNum == HorizCalc)
	{
		HorizNum = 0;
		AxisX += HorizVal;
	}
		return AxisX;
}

function ApplyXVal() {
	X_Axis = get_val(AimX);

	if(abs(X_Axis) < 10)
		X_Axis = 0;
	if(abs(X_Axis) > abs(AxisX + 5))
		return X_Axis;
	return X_Axis + AxisX;
}

function Rumble(x_Var, x_Num) {
	if(x_Var)
	{
		if(!x_Num)
			RunRumble = 1;
		else
			RunRumble = x_Num;

		RumbleSide = RUMBLE_A;
		RumbleTime = 300;
	}
	else 
	{
		if(!x_Num)
			RunRumble = 2;
		else
			RunRumble = x_Num;

			RumbleSide = RUMBLE_B;
			RumbleTime = 150;
	}
}

function DoubleClick(Button) {
	if (DoubleTap[Button] >= 0)
	{
		DoubleTap[Button] += get_rtime();

		if (DoubleTap[Button] > 450)
			DoubleTap[Button] = -1;
	}

		if (event_release(Button) && get_ptime(Button) <= 200)
		{
			if (DoubleTap[Button] < 0)
			{
				DoubleTap[Button] = 0;
			}
			else
			{
				DoubleTap[Button] = -1;
				return 1;
			}
		}
			return 0;
}

function NumberToStringRegular(f_Value, f_Digits, f_Idx) {
	I 			 =     1;
	digitindex_1 = 10000;

	if(f_Value < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value = abs(f_Value);
	}

		for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
		{
			if(f_Digits >= charindex_1)
			{
				putc_oled(I, (f_Value / digitindex_1) + 48);
				f_Value %= digitindex_1;
				I++;

				if(charindex_1 == 4)
				{
					putc_oled(I, 44);
					I++;
				}
			}
				digitindex_1 /= 10;
		}
			puts_oled(CenterX(I - 1, OLED_FONT_MEDIUM_WIDTH), f_Idx, OLED_FONT_MEDIUM, I - 1, OLED_WHITE);
}

function NumberToStringSmall(f_Value2, f_Digits2, f_Idx2) {
	I 			 =     1;
	digitindex_1 = 10000;

	if(f_Value2 < 0)
	{
		putc_oled(I, 45);
		I += 1;
		f_Value2 = abs(f_Value2);
	}

		for (charindex_1 = 5; charindex_1 >= 1; charindex_1--)
		{
			if(f_Digits2 >= charindex_1)
			{
				putc_oled(I, (f_Value2 / digitindex_1) + 48);
				f_Value2 %= digitindex_1;
				I++;

				if(charindex_1 == 4)
				{
					putc_oled(I, 44);
					I++;
				}
			}
				digitindex_1 /= 10;
		}
			puts_oled(CenterX(I - 1, OLED_FONT_SMALL_WIDTH), f_Idx2, OLED_FONT_SMALL, I - 1, OLED_WHITE);
}

function FindDigits(Number) {
    logVal = 0;

    do
    {
        Number /= 10;
        logVal++;
    }
        while (Number);
    return logVal;
}

function CenterX(f_Chars, f_Font) {
	return (OLED_WIDTH / 2) - ((f_Chars * f_Font) / 2);
}

function CenterY(f_Size) {
	return (OLED_HEIGHT / 2) - (f_Size / 2);
}

function GetChars(X) {
	if(ModsString[X + 1] != -1)
		return ModsString[X + 1] - ModsString[X] - 1;
	return sizeof(ModsString) - ModsString[X];
}

function Cycle(Value, Min, Max) {
	if(Value > Max)
		return Min;
	if(Value < Min)
		return Max;
	return Value;
}

function EditValues(ValIdx, ValueIndex, ValIncrement, Min, Max) {
	if(Scroll == ValIdx)
	{
		if(event_press(PS4_RIGHT) || (get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT) >= 400))
		{
			ValueIndex = Cycle(ValueIndex + ValIncrement, Min, Max); 
			Display    = TRUE;
		}

		if(event_press(PS4_LEFT) || (get_ival(PS4_LEFT) && get_ptime(PS4_LEFT) >= 400))
		{
			ValueIndex = Cycle(ValueIndex - ValIncrement, Min, Max);
			Display	   = TRUE;
		}
	}
		return ValueIndex;
}

function ToggleSwitch(ModIdx, ModVar, Min, Max) {
	if(Mod == ModIdx)
	{
		if(event_press(PS4_CROSS))
		{ 
			ModVar  = Cycle(ModVar + 1, Min, Max);
			Display = TRUE;
		}

			if(ModVar) 
				set_rgb(0, 255, 0);
			else
				set_rgb(255, 0, 0);
	}
		return ModVar;
}

function AimAssistaimbotv3P_Chars(f_Idx) {
	if(AimPatternsPC[f_Idx + 1] != -1)
		return AimPatternsPC[f_Idx + 1] - AimPatternsPC[f_Idx] - 1;
	return sizeof(AimPatternsPC) - AimPatternsPC[f_Idx];
}

function Buttons(Type) {
	Fire_BTN		= CallOfDutyButtonLayoutSettingss[Type][0];
	Ads_BTN			= CallOfDutyButtonLayoutSettingss[Type][1];
	Lethal_BTN		= CallOfDutyButtonLayoutSettingss[Type][2];
	Tactical_BTN	= CallOfDutyButtonLayoutSettingss[Type][3];
	Jump_BTN		= CallOfDutyButtonLayoutSettingss[Type][4];
	Crouch_BTN		= CallOfDutyButtonLayoutSettingss[Type][5];
	Melee_BTN		= CallOfDutyButtonLayoutSettingss[Type][6];
	Sprint_BTN		= CallOfDutyButtonLayoutSettingss[Type][7];
	Reload_BTN		= CallOfDutyButtonLayoutSettingss[Type][8];
	Swap_BTN		= CallOfDutyButtonLayoutSettingss[Type][9];
}

function ControllerRSLS(sticks) {
	AimY	= StickCallOfDutyButtonLayoutSettingss[sticks][0];
	AimX	= StickCallOfDutyButtonLayoutSettingss[sticks][1];
	Walk	= StickCallOfDutyButtonLayoutSettingss[sticks][2];
	Strafe	= StickCallOfDutyButtonLayoutSettingss[sticks][3];
}

const byte Frames [] = {125, 63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF1, 0xFD, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x43, 0xF8, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x06, 0x1F, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x3F, 0xFF, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x09, 0xFF, 0xFF, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x43, 0xFF, 0xFE, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x10, 0x3F, 0xFF, 0xF8, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xBF, 0xFF, 0xE0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7F, 0xFF, 0xFF, 0x80, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x03, 0xDF, 0xFF, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x7F, 0xFF, 0xFF, 0xF0, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x07, 0xFF, 0xFF, 0xFE, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0xF5, 0xFF, 0xFF, 0xF0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFE, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x07, 0xFB, 0xFF, 0xFF, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x3F, 0xEF, 0xFF, 0xFF, 0x80, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x30, 0x00, 0x00, 0xFF, 0x7F, 0xFF, 0xFC, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x01, 0x80, 0x00, 0x0F, 0xFE, 0xFF, 0xFF, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x1C, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFE, 0x00, 0x0C, 0x07, 0xE7, 0xCF, 0xE0, 0x04, 0x04, 0x00, 0xC0, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x20, 0x21, 0x08, 0x08, 0x00, 0x20, 0x20, 0x06, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0x01, 0x08, 0x40, 0x40, 0x01, 0x01, 0x00, 0x30, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x08, 0x08, 0x42, 0x02, 0x00, 0x09, 0xF8, 0x03, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0xE0, 0x00, 0x20, 0x42, 0x10, 0x10, 0x0F, 0xC8, 0x00, 0x18, 0x00, 0x00, 0x05, 0xFF, 0xFE, 0x07, 0x00, 0x01, 0x02, 0x10, 0x80, 0x80, 0x02, 0x40, 0x00, 0xC0, 0x00, 0x00, 0xFB, 0xFF, 0x90, 0x38, 0x00, 0x08, 0x1F, 0x84, 0x04, 0x00, 0x12, 0x00, 0x06, 0x00, 0x00, 0x87, 0xC1, 0xC3, 0xE1, 0xC0, 0x00, 0x40, 0x84, 0x20, 0x20, 0x00, 0x90, 0x00, 0x30, 0x00, 0x06, 0x7F, 0x1E, 0x1F, 0x1F, 0x00, 0x02, 0x04, 0x21, 0x01, 0x00, 0x04, 0x80, 0x01, 0x80, 0x00, 0x19, 0xF0, 0xF1, 0xFD, 0xE0, 0x00, 0x10, 0x21, 0x08, 0x08, 0x00, 0x24, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0x87, 0x87, 0xDF, 0x00, 0x00, 0x81, 0x08, 0x40, 0x40, 0x3F, 0x3F, 0x00, 0x20, 0x00, 0x00, 0xF0, 0x1C, 0x3F, 0xF8, 0x00, 0x04, 0x0F, 0xCF, 0x82, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x03, 0xE0, 0xF0, 0x7F, 0xC0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x0F, 0x07, 0x8F, 0xFC, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x18, 0xBC, 0x7F, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xC5, 0xE1, 0xFF, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x1F, 0x99, 0xF8, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x32, 0xFC, 0xCF, 0xC0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x01, 0x8F, 0xC7, 0xFE, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x1C, 0x1C, 0x37, 0xF0, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x60, 0xC0, 0xDF, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x00, 0x0F, 0xFE, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x77, 0xE0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xC0, 0x03, 0xFF, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0E, 0x00, 0x1F, 0xF8, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x20, 0x00, 0xFF, 0xC0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x01, 0x00, 0x07, 0xDE, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x02, 0x00, 0x0F, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x10, 0x00, 0x3F, 0xC0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x80, 0x01, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x0C, 0x00, 0x0F, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0xE0, 0x00, 0x7E, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x03, 0xE0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x18, 0x00, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0xC0, 0x00, 0xF1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x86, 0x00, 0x07, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};const int8 PolarArray		[]		= { -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100};
const uint8 EditableMods	[]		= {
	1,	
	1,	
	1,	
	1,	
	1,	
	1,	
	1,	
	1,
	1,	
	0,	
	1,	
	1,	
	0,	
	1,	
	0,	
	0,	
	0,	
	0,	
	0,	
	1,	
	1,	
	1,	
	1,	
	0,	
	1,	
	0,	
	0,	
	0,	
	0,	
	0,	
	0,	
	0,
	1,	
	1,	
	0,	
	1,	
	1,	
	0,	
	0,	
	0,	
	0,	
	0	
};
const uint8 CallOfDutyButtonLayoutSettingss			[][]	= {
        
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_L2, PS4_R2, PS4_L1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_R1, PS4_L2, PS4_L1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_L2, PS4_L1, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_L3, 		PS4_R3 ,PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_CROSS,  PS4_L1, 	  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_L1, PS4_L2, PS4_R2, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_L1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R2, PS4_L2, PS4_R1, PS4_R1, 	  PS4_CROSS,  PS4_R3, 	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE },
    { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_CROSS,  PS4_L2, 	  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_L2, 	  PS4_R3, 	  PS4_CIRCLE,  PS4_CROSS,   PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R3, PS4_CROSS,  PS4_L1, 	  PS4_CIRCLE,  PS4_R1, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_CIRCLE,  PS4_R3, 		PS4_L3, PS4_SQUARE, PS4_TRIANGLE }, 
    { PS4_R1, PS4_L1, PS4_R2, PS4_R2, 	  PS4_CROSS,  PS4_R3,	   PS4_CIRCLE,  PS4_L3, PS4_SQUARE, PS4_TRIANGLE }  
};
const uint8  StickCallOfDutyButtonLayoutSettingss	[][]	= {
	
	{ PS4_RY, PS4_RX, PS4_LY, PS4_LX }, 
	{ PS4_LY, PS4_LX, PS4_RY, PS4_RX }, 
	{ PS4_RY, PS4_LX, PS4_LY, PS4_RX }, 
	{ PS4_LY, PS4_RX, PS4_LY, PS4_LX }  
};


    int StrafeDelay;
	int AR_Strength;
	int InGame_Menu_Sens;
	int NotoriousSpartan32Radius;
	int NotoriousSpartan32Angle;
	int TrackingSpeed;
	int TrackingSize;
	int DropShotSpeed;
	int NOTORIOUSTHAGODlaiDropShotSpeed;
	int burstHold;
	int burstRest;
	int QS_Delay;
	int MaxReloadTime;
	int AutoRunDelay;
	int StrafeAssistRadius;
	int StrafeAssistSpeed;
	int _PolarRadius;
	int _PolarAngle;
	int _PolarRBoost;
	int _PolarABoost;
	int ADS_Size;
	int ADS_FIRE_Size;
	int HIPFIRE_Size;
	int ADS_Wait_Value;
	int ADS_FIRE_Wait_Value;
	int HIPFIRE_Wait_Value;
	int HeadShotStrength;
	int HeadShotHoldTime;
	int NotoriousSpartan32ARVert;
	int NotoriousSpartan32ARHoriz;
	int RapidHold;
	int RapidRest;
	int RapidBurstHold;
	int RapidBurstRest;
	int AutoPingDelay;
	int VerticalStart;
	int VerticalEnd;
	int VerticalTime;
	int HorizontalStart;
	int HorizontalEnd;
	int HorizontalTime;
	int Strength;
	int AimAssistStrength;
	int AimAssistWaitTime;
	int SteadyAimResolution;


	int RY;
	int MS;
	int ReT;
	int AxisY;
	int Frame;
	int logVal;
	int newHold;
	int newRest;
	int VertVal;
	int VertNum;
	int Inverted;
	int CookTime;
	int DeadZone;
	int VertCalc;
	int HorizVal;
	int HorizNum;
	int leftStick;
	int CurrentRX;
	int CurrentRY;
	int VertCount;
	int HorizCalc;
	int RunRumble;
	int driveMode;
	int Sprinting;
	int Fire_Rate;
	int BurstShot;
	int DoubleTap;
	int Running;
	int PreviousRX;
	int PreviousRY;
	int AxisT, AAT;
	int HorizCount;
	int RumbleSide;
	int RumbleTime;
	int SingleShot;
	int polarAngle;
	int AutoRun_KS;
	int aR_Strength;
	int StrafeAngle;
	int StrafeIndex;
	int RefreshRate;
	int StrafeRandom;
	int CycleRefresh;
	int X_Axis, AxisX;
	int Y_Axis, AxisY_;
	int Trigger_Toggle;
	int doubleStrengthTime;
	int RandomizedStrafeOne;
	int RandomizedStrafeTwo;
	int Angle, I, Inc, X, Y;
	int legacyRecoilStrength;
	int antirecoilBoostTimer;
	int anglePosition, Timer;
	int StickyValue, WaitValue;
	int AimY, AimX, Walk, Strafe;
	int WaitStrength, AimStrength;
	int charindex_1, digitindex_1;
	int SmartRumble, AntirecoilStrength;
	int RightStickRadius, LeftStickRadius;
	int NotoriousRageXSpeed, NotoriousRageXRadius, NotoriousRageXAngle;
	int TrackingAngle, TrackingAngleOne, TrackingAngleTwo;
	int ADS_Grenade_Sens, ADS_Fire_Sens, Sens, Actual_Sens;
	int FirstShotBeforeReload, ReloadInProgress, ReloadTime;
	int DeathFogPosition1, InnerDeathFog, OuterDeathFog, DeathFogPosition2, Position;
	int Ads_BTN, Fire_BTN, Lethal_BTN, Tactical_BTN, Jump_BTN, Crouch_BTN, Melee_BTN, Sprint_BTN, Reload_BTN, Swap_BTN;
	int X1 = 60, X2 = 68, X3 = 76, X4 = 84, X5 = 92, X6 = 100, X7 = 108, X8 = 116, X9 = 124, X10 = 132, X11 = 140, X12 = 148, X13 = 156, X14 = 164, X15 = 172, X16 = 180, X17 = 188, X18 = 196, X19 = 204, X20 = 212, X21 = 220, X22 = 228, X23 = 236, X24 = 244, X25 = 252, X26 = 260, X27 = 268, X28 = 276;
	int aimbotv3Direction	    	    =  TRUE;
	int SlideEnable 				= FALSE;
	int Pin							=	101;
	int Color 						=     1;
	int Increase					= 1, Decrease, Colour[3];	
	int _RefreshRate 				= 				  8 * 10;	
	enum { MenuClose, MainMods, EditMods }


int AntiRecoilType;
int NotoriousSpartan32aimbotv3s;
int NotoriousSpartan32Tracking;
int NotoriousRageXPolar;
int QuadSticky;
int SS_NOTORIOUSTHAGODlai_Aim;
int SmokeDTimeAA;
int SteadyAimToggle;
int AimAbuse;
int ToggleSpeedStrafe;
int AimSensCorrections;
int SlideCancelMode;
int RapidFireToggle;
int AkimboRapidFireToggle;
int BurstFireToggle;
int DynamicRapidFireToggle;
int JumpShot;
int ScopeShot;
int QuickScope;
int StrafeToggle;
int StandardDropShot;
int NOTORIOUSTHAGODlaiDropShot;
int HoldBreath;
int AutoPing;
int Prone_Rise;
int Pussy_Mode;
int Strafe_Jump;
int Smart_Grenade;
int BunnyHop;
int Auto_Blow;
int Toggle_EasyProne;
int CancelReload;
int UseAutoRun;
int FastMeleeToggle;
int PerfectAccuracy; 
int HeadShotAssist;
int RumbleBlock;
int AutoReload;
int DolphinDiveToggle;
int GhostPeakToggle;



	define NumOfMods	=   40;
	int    Scroll		=    1;
	int    Mod			=    2;
	int    Tab			=    0;
	int    screenSaver	= TRUE;
	int    Display		= TRUE;
	int    ZenScreen;
	int    notoriouscriptz2293887744hfh7848487556Switch;                                                                                                                             
	int    CountDown;

//--Mods
	                                                                                                                                                                                                                                                                                                                                                                                     const string ModsString[]	= {
	                                                                                                                                                                                                                                                                                                                                                                                       "Python CV Not Active",	
	                                                                                                                             "ANTI RECOIL",			
	                                                                                                                             "CHOOSE LOCK ON",			
		                                                                                                                                                                                                                                                                                                                                                                                     "PYHTON AIMBOT",		
	                                                                                                                                                                                                                                                                                                                                                                                     	"POLAR AIMABUSE",		
	                                                                                                                                                                                                                                                                                                                                                                                     	"SILENT AIMBOT",		
		                                                                                                                                                                                                                                                                                                                                                                                     "AIM ABUSE V3",	
		                                                                                                                                                                                                                                                                                                                                                                                     "LOCK ON",		
		                                                                                                                                                                                                                                                                                                                                                                                     "NOTOIROUS AA",
		                                                                                                                                                                                                                                                                                                                                                                                     "WARZONE BULLY AA",			
		                                                                                                                                                                                                                                                                                                                                                                                     "STARFE",		
		                                                                                                                                                                                                                                                                                                                                                                                     "WZ BULLY AIMBOT",		
	                                                                                                                                                                                                                                                                                                                                                                                     	"SLIDE CANCEL",			// 12
	                                                                                                                                                                                                                                                                                                                                                                                     	"RAPID FIRE",			// 13
	                                                                                                                                                                                                                                                                                                                                                                                     	"AKIMBO RAPID FIRE",	// 14
	                                                                                                                                                                                                                                                                                                                                                                                     	"BURST RAPID FIRE",		// 15
		                                                                                                                                                                                                                                                                                                                                                                                     "OG RAPID FIRE",	// 16
		                                                                                                                                                                                                                                                                                                                                                                                     "JUMPSHOT",			// 17
		                                                                                                                                                                                                                                                                                                                                                                                     "NO SCOPE",			// 18
		                                                                                                                                                                                                                                                                                                                                                                                     "QUICK SCOPE",			// 19
		                                                                                                                                                                                                                                                                                                                                                                                     "STRAFE",				// 20
		                                                                                                                                                                                                                                                                                                                                                                                     "OG DROPSHOT",	// 21
		                                                                                                                                                                                                                                                                                                                                                                                     "NEW DROPSHOT",		// 22
	                                                                                                                                                                                                                                                                                                                                                                                     	"HOLD BREATH",		// 23
	                                                                                                                                                                                                                                                                                                                                                                                     	"AUTO PING",			// 24
	                                                                                                                                                                                                                                                                                                                                                                                     	"WHACK A MOLE",			// 25
	                                                                                                                                                                                                                                                                                                                                                                                     	"ZIG ZAG",			// 26
	                                                                                                                                                                                                                                                                                                                                                                                     	"MANIAC JUMP",			// 27
	                                                                                                                                                                                                                                                                                                                                                                                     	"SMART LETHAL",		// 28
	                                                                                                                                                                                                                                                                                                                                                                                     	"BUNNYHOP",			// 29
	                                                                                                                                                                                                                                                                                                                                                                                     	"SMART C4",				// 30
	                                                                                                                                                                                                                                                                                                                                                                                     	"QUICK DROP",			// 31
	                                                                                                                                                                                                                                                                                                                                                                                     	"QUICK RELOAD",			// 32
	                                                                                                                                                                                                                                                                                                                                                                                     	"AUTO RUN",				// 33
	                                                                                                                                                                                                                                                                                                                                                                                     	"QUICK MELEE",			// 34
	                                                                                                                                                                                                                                                                                                                                                                                     	"HEAD PREDICTION",		// 35
		                                                                                                                                                                                                                                                                                                                                                                                     "HEADSHOT ONETAP",		// 36
		                                                                                                                                                                                                                                                                                                                                                                                     "BLOCK RUMBLE",			// 37
	                                                                                                                                                                                                                                                                                                                                                                                     	"QUICK RELOAD",			// 38
		                                                                                                                                                                                                                                                                                                                                                                                     "DOLPHIN DIVE",			// 39
		                                                                                                                                                                                                                                                                                                                                                                                     "GHOST PEEK",			// 40 -
		                                                                                                                                                                                                                                                                                                                                                                                     "KILLSWITCH",			// 41 --
	                                                                                                                                                                                                                                                                                                                                                                                     	"DRIVE KS"			// 42 --
};


	                                                                                                                                                                                                                                                                                                                                                                                     	                                                                                                                                                                                                                                                                                                                                                                                     const string AimPatternsPC[] = { "< AIM BONE >","CHEST", "NECK + HEAD", "HEAD + ARM", "NECK + CHEST", "RAGE X", "FRENZY", "RUMBLE AUTO", "LONG R. HEAD", "LONG R. CHEST", "NUCLEAR", "RANDOM AREA", "" };


	                                                                                                                                                                                                                                                                                                                                                                                     const string OFF				= "NONE";
	                                                                                                                                                                                                                                                                                                                                                                                     const string NotoriousSpartan32RUMBLEV1		= "NOTORIOUS AR";
	                                                                                                                                                                                                                                                                                                                                                                                     const string NotoriousSpartan32LEGACYV1		= "RUMBLE AR";
	                                                                                                                                                                                                                                                                                                                                                                                     const string NotoriousSpartan32RUMBLEV2		= "SMOKED RUMBLE";
	                                                                                                                                                                                                                                                                                                                                                                                     const string NotoriousSpartan32LEGACYV2		= "OG ANTI RECOIL";
	                                                                                                                                                                                                                                                                                                                                                                                     const string DeathfogRUMBLE			= "WARZONE BULLY AR";
	                                                                                                                                                                                                                                                                                                                                                                                     const string DeathfogDYNAMIC		= "SPARTAN AR";
	                                                                                                                                                                                                                                                                                                                                                                                     const string PROGRESSIVE		= "SPARTAN STEPS V2";


	                                                                                                                                                                                                                                                                                                                                                                                     const string MWSTANDARD			= "MW / VG";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW_RUMBLE			= "MW / VG SPARTAN";
	                                                                                                                                                                                                                                                                                                                                                                                     const string CWSTANDARD			= "COLD WAR";
	                                                                                                                                                                                                                                                                                                                                                                                     const string CW_RUMBLE			= "COLD WAR SPARTAN";
	                                                                                                                                                                                                                                                                                                                                                                                     const string BFSTANDARD			= "BF2042";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW2STANDARD		= "MW2 NOTORIOUS";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW2TACTICAL		= "MW2 SPARTAN";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW2LETHAL			= "MW2 GRENADE";


	                                                                                                                                                                                                                                                                                                                                                                                     const string ADS_				= "ON ADS";
	                                                                                                                                                                                                                                                                                                                                                                                     const string FIRE_				= "ON FIRE"; 
	                                                                                                                                                                                                                                                                                                                                                                                     const string ADS_FIRE			= "ADS WITH FIRE";
	                                                                                                                                                                                                                                                                                                                                                                                     const string ADS_TAC			= "ADS WITH TACTICAL";


	                                                                                                                                                                                                                                                                                                                                                                                     const string RIGHTTRIG			= "RIGHT TRIG";
	                                                                                                                                                                                                                                                                                                                                                                                     const string LEFTTRIG			= "LEFT TRIG";
	                                                                                                                                                                                                                                                                                                                                                                                     const string BOTHTRIG			= "TWO TRIG";


	                                                                                                                                                                                                                                                                                                                                                                                     const string STANDARDGhostPeak 	= "GHOST PEAK V1";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW2GhostPeak		= "MW2 GHOST PEAK";


	                                                                                                                                                                                                                                                                                                                                                                                     const string AUTOMATIC			= "TURBO";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MANUAL				= "ON PRESS";


	                                                                                                                                                                                                                                                                                                                                                                                     const string AIM__FIRE			= "RELEASE ADS";
	                                                                                                                                                                                                                                                                                                                                                                                     const string DBL__TAP			= "DOUBLE TAP";


	                                                                                                                                                                                                                                                                                                                                                                                     const string REGULAR_			= "IN GAME AUTO";
	                                                                                                                                                                                                                                                                                                                                                                                     const string EXPLOIT_			= "SPARTAN AUTO";
	                                                                                                                                                                                                                                                                                                                                                                                     const string _BETTERAS			= "FAST AUTO";
	                                                                                                                                                                                                                                                                                                                                                                                     const string MW2TacSprint		= "INIFINITE TAC SPR";

function TexT1() {
		                                                                                                                                                                                                                                                                                                                                                                                     putc_oled(1, ASCII_UPPER_S);
	puts_oled(X1, 2, 0, 1, 1);
	                                                                                                                                                                                                                                                                                                                                                                                     	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_A);
	puts_oled(X3, 2, 0, 1, 1);
	                                                                                                                                                                                                                                                                                                                                                                                     	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_A);
	                                                                                                                                                                                                                                                                                                                                                                                     	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_A);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_M);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_C);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_V);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_B);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_Y);
	puts_oled(X17, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X18, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X19, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X21, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X22, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X23, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X24, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X25, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_U);
	puts_oled(X26, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X27, 2, 0, 1, 1);

	




	

	FaLL();
}

function TexT2() {
	
    
	putc_oled(1, ASCII_UPPER_W);
	puts_oled(X2, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_W);
	puts_oled(X3, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_W);
	puts_oled(X4, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
	puts_oled(X5, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_N);
	puts_oled(X6, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X7, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X8, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X9, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X10, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X11, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X12, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_U);
	puts_oled(X13, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_S);
	puts_oled(X14, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_C);
	puts_oled(X15, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_R);
	puts_oled(X16, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_I);
	puts_oled(X17, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_P);
	puts_oled(X18, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_T);
	puts_oled(X19, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_Z);
	puts_oled(X20, 2, 0, 1, 1);
	putc_oled(1, ASCII_SPACE);
    puts_oled(X21, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_C);
	puts_oled(X22, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_O);
	puts_oled(X23, 2, 0, 1, 1);
	putc_oled(1, ASCII_UPPER_M);
	puts_oled(X24, 2, 0, 1, 1);
	
	rect_oled(X19 - 4, 2,  9, 9, 0,    1);
	rect_oled(X19 - 3, 2 + 1, 7, 7, 0, 0);
	rect_oled(X19 + 5, 2,  1, 9, 1,    0);

	FaLL();
}

	                                                                                                                                                                                                                                                                                                                                                                                     	                                                                                                                                                                                                                                                                                                                                                                                     function FaLL() {
	X1--;X2--;X3--;X4--;X5--;X6--;X7--;X8--;X9--;X10--;
		                                                                                                                                                                                                                                                                                                                                                                                     	                                                                                                                                                                                                                                                                                                                                                                                     X11--;X12--;X13--;X14--;X15--;X16--;X17--;X18--;X19--;X20--;
	                                                                                                                                                                                                                                                                                                                                                                                     	                                                                                                                                                                                                                                                                                                                                                                                     	X21--;X22--;X23--;X24--;X25--;X26--;X27--;X28--;
}

function ScreenSaver() {
	line_oled(0, 13, 127, 13, 1, 0);
	rect_oled(0,  0,  15, 14, 1, 0);
	rect_oled(0,  0,  15, 14, 0, 0);

	
}
