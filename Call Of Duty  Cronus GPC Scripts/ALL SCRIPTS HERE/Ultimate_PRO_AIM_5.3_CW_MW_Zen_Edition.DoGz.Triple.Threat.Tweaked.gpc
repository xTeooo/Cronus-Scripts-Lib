/*
								___________                .__                       .___        .__   _____   __   ________   ____ 
								\__    ___/_____    ___.__.|  |    ____  _______   __| _/_______ |__|_/ ____\_/  |_ \_____  \ /_   |
								  |    |   \__  \  <   |  ||  |   /  _ \ \_  __ \ / __ | \_  __ \|  |\   __\ \   __\ /  ____/  |   |
								  |    |    / __ \_ \___  ||  |__(  <_> ) |  | \// /_/ |  |  | \/|  | |  |    |  |  /       \  |   |
								  |____|   (____  / / ____||____/ \____/  |__|   \____ |  |__|   |__| |__|    |__|  \_______ \ |___|
								                \/  \/                                \/                                    \/      

													
													 ____ ___ .__     __   .__                    __             
													|    |   \|  |  _/  |_ |__|  _____  _____   _/  |_   ____    
													|    |   /|  |  \   __\|  | /     \ \__  \  \   __\_/ __ \   
													|    |  / |  |__ |  |  |  ||  Y Y  \ / __ \_ |  |  \  ___/   
													|______/  |____/ |__|  |__||__|_|  /(____  / |__|   \___  >  
													                                 \/      \/             \/   
													                                 
																										                               	
													__________ __________ ________       _____   .___    _____    
													\______   \\______   \\_____  \     /  _  \  |   |  /     \   
													 |     ___/ |       _/ /   |   \   /  /_\  \ |   | /  \ /  \  
													 |    |     |    |   \/    |    \ /    |    \|   |/    Y    \ 
													 |____|     |____|_  /\_______  / \____|__  /|___|\____|__  / 
													                   \/         \/          \/              \/  
													

																	
																	 .________    _______   
																	 |   ____/    \   _  \  
																	 |____  \     /  /_\  \ 
																	 /       \    \  \_/   \
																	/______  / /\  \_____  /  PRO AIM Series  
																	       \/  \/        \/ 
																	       
																	      	  v5.3  
																	        FEATURING 
																						       
					
					________             ________         ___________.__             ___________.__   ________ .__     ___________        __________  
					\______ \    ____   /  _____/ ________\__    ___/|  |__    ____  \_   _____/|__| /  _____/ |  |__  \__    ___/  ____  \______   \ 
					 |    |  \  /  _ \ /   \  ___ \___   /  |    |   |  |  \ _/ __ \  |    __)  |  |/   \  ___ |  |  \   |    |   _/ __ \  |       _/ 
					 |    `   \(  <_> )\    \_\  \ /    /   |    |   |   Y  \\  ___/  |     \   |  |\    \_\  \|   Y  \  |    |   \  ___/  |    |   \ 
					/_______  / \____/  \______  //_____ \  |____|   |___|  / \___  > \___  /   |__| \______  /|___|  /  |____|    \___  > |____|_  / 
					        \/                 \/       \/                \/      \/      \/                \/      \/                 \/         \/  
					
                                                                   TRIPLE THREAT AIM ASSIST!!!!


Script Author : TaylorDrift21

Credits : DoGzTheFiGhTeR , Noozbar , Batts , Excalibur , DontAtMe, Cronus Community 

Shout To : C14H3R Team, Ceorin , ThePopPop, CROW ,Zkultra , SouthernCalibronia , Sak Dunker , Rumour , SANDICHRI  

*** S C R I P T  I N F O R M A T I O N ***
==========================================

If you are looking for a script with great features and BEST aim assist there is to offer... this script is the one for you... 

/---------------------------------------------- B R A N D   N E W    S N I P E R   M O D E --------------------------------------\
==================================================================================================================================
                                     Sniper Assist - Steady Aim - Sniper Sens - QuickScope - HoldBreath
                                    ====================================================================
                                    				What Does Sniper Mode Do You Ask? ? ?
                                    			   =======================================
        When you enable Sniper Mode, Sniper Assist Automatically Enables - Sniper Sens Automatically Enables - HoldBreath Automatically Enables
        =======================================================================================================================================
You can choose your own settings for Sniper Mode, then what happens when you switch Sniper Mode ON, The Assist - Sens  switches over to what you have set in the menu...
========================================================================================================================================================================
  This Sniper Mode is the Best There is for when you use your sniper setup in game, without the needed hassle like other scripts to reduce values or deactivate mods.
  ===================================================================================================================================================================
Try it out, you won't be dissapointed, to activate Sniper Mode PRESS L2 & Double Tap Dpad Left - This will activate and deactivate Sniper Mode (Slow LED Flash When Enabled) 
============================================================================================================================================================================

                                 *** T a y l o r  A s s i s t *** *** B a t t s  S t i c k y  A i m ***
                                 ===   W i t h  R u m b l e               W i t h  R u m b l e      ===
                                 ==         B o o s t                          B o o s t             ==
                                 ======================================================================

                                                   *** T a y l o r  S h a p e s ***
                                                   ================================
                              *** C i r c u l a r = = T a l l  O v a l = = W i d e  O v a l = = S p i r a l ***
                              =================================================================================

                                       *** R u m b l e  A R *** *** P r o g g r e s s i v e  A R ***
                                       =============================================================

                                         F e a t u r i n g  N o o z b a r ' s  S m a r t  S e n s 
                                         ========================================================
            
                                                 L O A D S  M O R E  F E A T U R E S. . .
                                                 ========================================
                    
                                  O L E D  M E N U  W I T H  L O A D S  O F  C U S T O M I S A T I O N S 
                                  ======================================================================
      
          C H O O S E  Y O U R  O W N  B U T T O N S  V I A  T H E  Z E N  M E N U  F O R  3 X  P R O F I L E S == Q U I C K  T O G G L E S 
          =================================================================================================================================
            
************************************************************************************************************************************************************************************
////////////////\\\\\\\\\\\\\\\\\////////////\\\\\\\\\\///////////\\\\\\\\\\\\////////////\\\\\\\\\\\\\///////\\\\\\\\\\\\\\///////////\\\\\\\\\\\\///////////\\\\\\\\\\\///////\\\\
I N S T R U C T I O N S. . . . P L E A S E   R E A D 
====================================================================================================================================================================================
These instructions below are here to help you understand how to operate the script so that you can use it fluently without issues which makes the experience much better ! ! ! 
====================================================================================================================================================================================
*** M e n u  N a v i g a t i o n ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Enter The Menu --------------------- Press L2/LT And Options -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit The Menu  --------------------- Press Circle/B          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Menu Navigation--------------------- Press Left OR Right     -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Turn Mods On OR Off ---------------- Press UP OR Down        -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Enter Drive Mode   ----------------- Hold L2 and Double Tap Right ------ Drive Mode Is A KillSwitch --------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit Drive Mode  ------------------- Press Square/X          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** Enter Edit Menu ( While Still In Mod Menu ) ***          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mod's That Are Editable                                      -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AntiRecoil - Aim Assist - Rapid Fire - Akimbo Rf - Burst Fire - Taylor Sens - Cancel Reload - Controller Congfig - Profile Settings - Quick Toggles --------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Edit Mods    ----------------------- Press Cross/A           -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Change Values ---------------------- Hold L2 and Press Left Or Right To Decrease/Increase Values By 1 ------------------------------------------------------------------------------ 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Change Values ---------------------- Hold L2 and Press UP Or Down To Decrease/Increase Values By 10  -------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit Edit Menu ( Back To Mod Menu )  Press Circle/B  -------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** A L L  A B O V E  I S  B A S I C  C O N F I G ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** M e n u  S e t t i n g s ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** C o n t r o l l e r  C o n f i g *** ---------  Press Up OR Down To Change Controller Layouts ---
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** P r o f i l e  C o n f i g ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Use Profiles  === This Is The Master Switch For Using The 3 profiles In The Script
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Default Press === Default Press Means That When You Press The Button To Switch Profiles As You Normally Would
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Default Press === When Disabled, When Changing Profiles You Quick Tap The Button To Change Profile Instead
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Profile Button == Press UP OR Down To Select The Button Of Your Choice To Change Profiles 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resync Button === This Is 2 Buttons To Choose From Hold L2 and Press Left Or Right To Choose Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resync Button === You Use The Resync Button As Another Option For Switching Profiles Using 2 Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Warzone Profile = Choose Buttons For Changing To Warzone Profile Hold L2 and Press Left And Right 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** Q u i c k  T o g g l e s  C o n f i g ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quick Toggles Choose Your Own Buttons For Each Quick Toggle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hold L2 and Press Left Or Right To Choose Your Own Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Press Up and Down To Select Which Button You Wish To Change 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/

const int8 polar_LUT[] = {  
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
};

const string MainMenuId[] = { "AntiRecoil","Aim Assists","DoGz Triple","Fire Mods","- Next +","Sniper Mods","Misc Mods", "Profiles","Controller","QuickToggles",""}; // Main Menu 
//                                 0            1                  2            3           4           5            6               7               8            9              

const string ModNames[] = {  "AR Type","Progressive AR","Double Impact","Batts AA","DoGz Triple Threat","Rapid Fire","Akimbo Fire","Burst Fire","StrafeShot",
//                               0            1                2            3               4                5            6            7             8                               

                            "Sniper Assist/Sens","QuickScope","HoldBreath","Taylor Sens","Slide Cancel","Prone Shot","Jump Shot","Bunny Hop","Fast Melee","Enemy Ping","Profile Button","Resync Buttons","Warzone Profile",
//                                 9                  10           11             12            13           14           15          16          17            18           19                20               21                       

                            "Use Profiles","Default Press","Weapon Names","Title Screen","Controller Layout","Block Rumble","Rapid Fire","Akimbo Fire","Prone Shot","Jump Shot","Fast Melee","Use Profiles",""};
//                                22             23               24            25                26            27            28           29          30          31              32              33   

const string ValNames[] = { "Vertical","Horizontal", // Legacy AR / Rumble AR 
					    //      0            1

							"Vertical Start","Vertical End","Vertical Time","Horiz Start","Horiz End","Horiz Time", // Progressive AR 
                       //           2               3               4              5            6           7

							"RumbleBoost","AA Shape","Radius","Steps","DeadZone","Min Radius","Boost Strength","Boost Steps","Sticky Size","Sticky Time","Boost Strength", // Taylor AA & V2 & Batts 
                       //        8          9         10       11      12           13            14             15              16            17             18
                       
                            "Power", "Speed","PolarBoost","SpeedBoost","Polar Release","Power Reducer","Prog Power","Prog Wait","Prog Release","DoGz Power",  // DoGz Triple Threat
                       //      19       20       21           22            23               24             25           26            27           28
                       
                            "Rounds/Sec", "Rounds/Sec", "Hold Time", "Release Time","StrafeShot Time",  // Fire Mods 
                       //        29           30            31             32              33
                       
                            "Sniper Strength", "Sniper Time", "Steady Aim","General Sens","Ads Sens","Fire Sens","Ads Fire Sens", "QuickScope Delay",  // Sniper Mods 
                       //          34                35             36             37         38         39           40                 41             
                       
                            "General Sens", "Ads Sens","Fire Sens","Ads Fire Sens","Slide Cancel Delay", ""};// Misc Mods
                       //         42           43           44           45                46 
                       
const string Misc[] = { 	"Taylordrift21","On","Off","Min","Max", // Misc
//                     //       0            1    2     3     4 
							"Primary","Secondary","Warzone Profile", // Profiles
					   //       5          6              7              
							"Drive Mode","Activated","Deactivated","Sniper Mode",  //DriveMode - SniperMode 
                       //        8            9            10            11
                            "Legacy AR","Mw Rumble AR","Cw Rumble AR","Polar AR", // AR Type
                       //        12          13             14            15
                            "AA Type","Taylor AA v1","Taylor AA v2", // AA Type
                       //        16         17              18  
                            "On","On + Boost","Ads + Fire","Fire + Boost","Ads + Fire + Boost",// Activator For AA
                       //       19          20          21           22                23 
                            "Circular","Tall Oval","Wide Oval","Spiral","Helix", // AA Shape 
                       //       24          25          26        27       28  
                           
                            "S.Aim/Sens Off", "SteadyAim On",  // Sniper Assist
                       //         29               30
                            "Modern Warfare","Cold War", // Slide Cancel
                       //          32             33
                            "Press Up/Down","Hold L2","Press X/A to edit","Saved","PRO AIM","Press Up/Down","PRO AIM 5.3",
                       //      33       34             35            36       37            38            39 
                            "S.Aim + Sens","Sens Only",""};
// Display Choosable Buttons Via Menu \\ 
const string HoldButtons[]       = { "< Select >","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS", ""};

const string PressButtons[]      = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const int8   HoldBtns []         = { -1,  PS4_L2      ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 }; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };


const string ControllerLayouts[] = { "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped",""}
const string Weapons[]={ // Weapon Names Displayed On Title Screen \ Total 48;
"Ground Loot","Tactical Rifle","Assault Rifle","Shotgun",
"SMG","LMG","Launcher","Hand Gun","Melee","Shield","Sniper",
"KAR98","CR-56 AMAX","FARA 83","SP-R 208","MAC-10","MP5","Kilo 141","Grau 5.56",
"FAL","Krig-6","C58","MG 82","HDR","Sykov","MP7","M4A1","Bullfrog","RAM-7","AK-47",
"AK-74u","Nail Gun","PPsh-41","AUG","XM4","Swiss K31","M13","M16","Milano","DMR 14",
"M19","Diamatti","AS VAL","FFAR 1","Groza","FENNEC","PKM","Bruen","Tundra",""} ;

const string Loadouts[] = { 
"Loadout 1","Loadout 2","Loadout 3",
"Loadout 4","Loadout 5","Loadout 6","Loadout 7","Loadout 8",""} 
// All Toggles For Mods That Can Be Used Seperately On 3 Profiles \\


// These Are Variables Used That Are Dependant On My Menu Structure \\

int MainMenuIdx,MainMenu;
int ModNameIdx,ModMenu;
int ValNameIdx,EditMenu; 
int DisplayTitle = TRUE; 
int UpdateScreen;
int ProfileIdx;
int ScreenSaver,BlankScreen;
int SniperMode,DriveMode; 
int SmartSens_side,SmartSens;


define AmountOfModNameIdx  = 31; 
define AmountOfMainMenuIdx = 3;
define AmountOfValNameIdx  = 46;
define AmountOfProfileIdx  =  2;

// AR Toggles \\
int ToggleARType[3]; 
int ToggleProgressive[3];
// AR Vals \\
int TaylorStrength[3];
int HorizStrength[3];
int VerticalStart             [3]  ;
int VerticalEnd               [3]  ;
int VerticalTime              [3]  ;
int HorizontalStart           [3]  ;
int HorizontalEnd             [3]  ;
int HorizontalTime            [3]  ;
int WeaponNamesIdx            [3]  ; 

// AA Toggle \\
int ToggleTaylorAssist;    // choices
int ToggleBattsAimAssist;  // Choices
int ToggleDoGzAA;
int TriggerAction; // Choices
int TaylorShapes; // Choices
int Reducer;// Toggle; 

// AA Vals \\
int TaylorRadius;
int TaylorAngle;
int DeadZone;
int TaylorRadiusMin;
int TaylorBoost;
int TaylorAngleBoost;
int AimAssistSize;
int AimAssistTime;
int StickyBoost;
int PolarPower;
int PolarSpeed;
int PowerBoost;
int SpeedBoost;
int PolarRelease;
int ProgPower;
int ProgWait;
int ProgressionRelease;
int DoGzPower;
// Fire Toggles \\
int ToggleRapidFire [3];
int ToggleAkimboRf  [3];
int ToggleBurstFire;
int ToggleStrafeShot;
// Fire Vals \\
int RateOfFire      [3];
int AkimboRoF       [3];
int BurstFireHold;
int BurstFireRelease;
int StrafeShotTime;
// Sniper Toggles \\
int ToggleSniperAssist;
int ToggleQuickScope;
int ToggleHoldBreath;
// Sniper Vals \\
int SniperStrength;
int SniperTime;
int SteadyAim;
int SniperGenSens;
int SniperAdsSens;
int SniperFireSens;
int SniperAdsFireSens;
int QuickScopeDelay;
// Misc Toggles \\
int ToggleTaylorSens;
int ToggleCancelSlide;
int ToggleProneShot;
int ToggleJumpShot;
int ToggleBunnyHop;
int ToggleFastMelee;
int ToggleEnemyPing;
// Misc Vals \\
int GeneralSens;
int AdsSens;
int FireSens;
int AdsFireSens;
int SlideCancelDelay; 
// Profile Vals \\
int ActivateIndividualBtnIdx
int ToggleMasterProfileSwitch;
int ToggleDefaultBtn;
int RumbleBoost; 
// Button Vals \\
int Buttons;
int ToggleBlockRumble;

// Button Activation \\
define ActivateButtonCount = 8;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int QuickToggleActive,ToggleWidth,ToggleWidth1,ToggleFont,ToggleFont1,TogglePosition;
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping;
int SelectedProfileIdx,WarzoneLootProfile;
int SniperStr;
int RX,RY,angle,CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,AntirecoilStrength,PolarStrength,Angle,AngleBoost,GetAngle;
int PY,PX;
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int ar_y; 
int v;
int v_x
int i_val_h,i_pnt_h, i_num_h,i_cnt_h,ar_x;
int AntirecoilVertical; 
int AntirecoilHorizontal;
int AssistInv,AssistNeg,Assist3,AssistVal,Radius1,Axis,Time;
int ProgMin,ProgInc,WaitMin,WaitInc,ProgValue,WaitValue,Flow,ProgStrength,ProgDelay,ActualX,ActualY,Steps;
int HoldTime,RestTime,LedOn,LedOff,Str;
define Step =  1;
define Radius2 = 10
define Radius3 = 100;
define False              = FALSE;
define True               = TRUE; 
int ToggleHairTriggers    = TRUE;
int AimAssistVal
int GenStr,SniperAAT,SniperAAS,SniperTStr,s_val,StickyStrength;
int TaylorFineTune = 30;
int ProneSpeed = 60; 
int LoadoutIdx;

const int8 DamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};  

init { 

	SteadyAim = (360 / SteadyAim) / 2;
	
	
    
    Load(); 
    
    
    
	/*Do Not Touch Below*/
	WaitMin = (ProgWait / 2);
	WaitInc = (ProgWait / 2);
	ProgValue = ProgMin;
	WaitValue = WaitMin;
	ProgMin = inv(ProgPower);
	AssistNeg = inv(DoGzPower);
	AssistInv = (DoGzPower - 1);
	ProgInc = 2;
	ProgStrength = TRUE;
	ProgDelay = TRUE;
	/*Do Not Touch Above*/
	
} 
main { 

	ActivateAllButtons();
	Buttons(Buttons);

	if(get_ival(Ads))   
    {
    	if(event_press(PS4_OPTIONS))
    	{
    		MainMenu = TRUE;
    		EditMenu = FALSE;
    		ModMenu  = FALSE;
    		MainMenuIdx = 0; 
    		UpdateScreen = TRUE; 
    		DisplayTitle = FALSE;
    		combo_run(RumbleOn); 
    		
    		if(!MainMenu)
    			DisplayTitle = TRUE; 
    	}
    	if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModMenu && !EditMenu && !MainMenu)
        {
        	DriveMode = TRUE;
            combo_run(DriveModeOnOff);
        }
        if(event_press(PS4_LEFT) && get_brtime(PS4_LEFT) <= 200 && !EditMenu && !ModMenu && !MainMenu)
        {
        	SniperMode =! SniperMode; 
            combo_run(SniperModeOnOff);
        }
    	set_val(PS4_OPTIONS,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); 
    }
    if(!DisplayTitle)  
    {
    	if(MainMenu)     // Main Menu    
     	{ 
            MainMenuIdx    = ModORValNavi(MainMenuIdx,0,9); // Min & Max OF Mods (Mod Menu) 
           
            if(event_press(PS4_CIRCLE))
		    {
				DisplayTitle = TRUE; 
				MainMenu = FALSE;
				UpdateScreen = FALSE;
				combo_run(RumbleOff);
				WaitMin = (ProgWait / 2);
	            WaitInc = (ProgWait / 2);
	            ProgValue = ProgMin;
	            WaitValue = WaitMin;
	            ProgMin = inv(ProgPower);
	            AssistNeg = inv(DoGzPower);
	            AssistInv = (DoGzPower - 1);
	            ProgInc = 2;
	            ProgStrength = TRUE;
	            ProgDelay = TRUE;
    	    	Save();
    	    	combo_run(Saved);
			}	
    	} 
    	if(ModMenu)   // Mod Menu 
	    { 
            ModNameIdx    = ModORValNavi(ModNameIdx,0,34);
            
            ToggleARType        [ProfileIdx]       = ToggleSwitch(ModNameIdx == 0,ToggleARType      [ProfileIdx],0,3);// Taylor Legacy/RumbleAR/PolarAR                 //
			ToggleProgressive   [ProfileIdx]       = ToggleSwitch(ModNameIdx == 1,ToggleProgressive [ProfileIdx],0,1);// Batts/Noozbar Progressive AR                   \\
			ToggleTaylorAssist   				   = ToggleSwitch(ModNameIdx == 2,ToggleTaylorAssist            ,0,2);// Taylor Double Impact AA                        //
			ToggleBattsAimAssist                   = ToggleSwitch(ModNameIdx == 3,ToggleBattsAimAssist          ,0,2);// Batts Sticky Aim Assist                        \\
			ToggleDoGzAA                           = ToggleSwitch(ModNameIdx == 4,ToggleDoGzAA                  ,0,1);// DoGz Triple Threat                             //
			ToggleRapidFire     [ProfileIdx]       = ToggleSwitch(ModNameIdx == 5,ToggleRapidFire   [ProfileIdx],0,1);// Rapid Fire        								\\
       		ToggleAkimboRf      [ProfileIdx]       = ToggleSwitch(ModNameIdx == 6,ToggleAkimboRf    [ProfileIdx],0,1);// Akimbo Rapid Fire 								//
            ToggleBurstFire                        = ToggleSwitch(ModNameIdx == 7,ToggleBurstFire               ,0,1);// BurstFire         								\\
            ToggleStrafeShot    				   = ToggleSwitch(ModNameIdx == 8,ToggleStrafeShot              ,0,1);// StrafeShot        								//
            ToggleSniperAssist    				   = ToggleSwitch(ModNameIdx == 9,ToggleSniperAssist            ,0,3);// SniperAssist     								\\
			ToggleQuickScope                       = ToggleSwitch(ModNameIdx ==10,ToggleQuickScope              ,0,1);// QuickScope       								//
        	ToggleHoldBreath                       = ToggleSwitch(ModNameIdx ==11,ToggleHoldBreath              ,0,1);// HoldBreath        								\\   
        	ToggleTaylorSens    				   = ToggleSwitch(ModNameIdx ==12,ToggleTaylorSens              ,0,1);// Taylor Sens                                    //
        	ToggleCancelSlide                 	   = ToggleSwitch(ModNameIdx ==13,ToggleCancelSlide             ,0,2);// Cancel Slide - Modern Warfare - Cold War       \\
        	ToggleProneShot                        = ToggleSwitch(ModNameIdx ==14,ToggleProneShot               ,0,1);// Prone Shot                                     //
        	ToggleJumpShot                         = ToggleSwitch(ModNameIdx ==15,ToggleJumpShot                ,0,1);// Jump Shot                                      \\
        	ToggleBunnyHop                         = ToggleSwitch(ModNameIdx ==16,ToggleBunnyHop                ,0,1);// Bunny Hop                                      //
        	ToggleFastMelee                        = ToggleSwitch(ModNameIdx ==17,ToggleFastMelee               ,0,1);// Fast Melee                                     \\
         	ToggleEnemyPing                        = ToggleSwitch(ModNameIdx ==18,ToggleEnemyPing               ,0,1);// Enemy Ping                                     //                
            ActivateIndividualBtnIdx               = ToggleSwitch(ModNameIdx ==19,ActivateIndividualBtnIdx      ,0,8);// Profile Button Selection                       \\
        	ButtonActivation(0,ModNameIdx,20);                                                                        // Profile Resync Buttons                         //
         	ButtonActivation(1,ModNameIdx,21);                                                                        // Warzone Profile Buttons                        \\
        	ToggleMasterProfileSwitch              = ToggleSwitch(ModNameIdx ==22,ToggleMasterProfileSwitch     ,0,1);// Master Profile Toggle                          //
        	ToggleDefaultBtn                       = ToggleSwitch(ModNameIdx ==23,ToggleDefaultBtn              ,0,1);// Default Profile Press                          \\
        	WeaponNamesIdx[ProfileIdx]             = ToggleSwitch(ModNameIdx ==24,WeaponNamesIdx[ProfileIdx]    , 0, 48);
        	LoadoutIdx					           = ToggleSwitch(ModNameIdx ==25,LoadoutIdx                    ,  0, 8);
        	Buttons                                = ToggleSwitch(ModNameIdx ==26,Buttons                      ,0,21);// Controller Layouts                             //
        	ToggleBlockRumble                      = ToggleSwitch(ModNameIdx ==27,ToggleBlockRumble            , 0,1);// Block Rumble                                   \\
        	ButtonActivation(2,ModNameIdx,28);                                                                        // Profile Resync Buttons                         //
         	ButtonActivation(3,ModNameIdx,29); 
         	ButtonActivation(4,ModNameIdx,30);
         	ButtonActivation(5,ModNameIdx,31);
         	ButtonActivation(6,ModNameIdx,32); 
         	ButtonActivation(7,ModNameIdx,33);  
            
            if(MainMenuIdx == 0) ModNameIdx = cycle(ModNameIdx,0,1);
        	if(MainMenuIdx == 1) ModNameIdx = cycle(ModNameIdx,2,3);
        	if(MainMenuIdx == 2) ModNameIdx = cycle(ModNameIdx,4,4)
        	if(MainMenuIdx == 3) ModNameIdx = cycle(ModNameIdx,5,8);
        	if(MainMenuIdx == 5) ModNameIdx = cycle(ModNameIdx,9,11);
            if(MainMenuIdx == 6) ModNameIdx = cycle(ModNameIdx,12,18);
            if(MainMenuIdx == 7) ModNameIdx = cycle(ModNameIdx,19,25);
            if(MainMenuIdx == 8) ModNameIdx = cycle(ModNameIdx,26,27);
            if(MainMenuIdx == 9) ModNameIdx = cycle(ModNameIdx,28,33);
     
        }
        if(EditMenu)   // Edit Menu 
        {
        	ValNameIdx    = ModORValNavi(ValNameIdx,0,47);
        	
        	TaylorStrength   [ProfileIdx]     = EditValues(ValNameIdx , 0,TaylorStrength   [ProfileIdx],100,99, -99, 99);
        	HorizStrength    [ProfileIdx]     = EditValues(ValNameIdx , 1,HorizStrength    [ProfileIdx],100,99, -99, 99);
        	VerticalStart    [ProfileIdx]     = EditValues(ValNameIdx , 2,VerticalStart    [ProfileIdx],100,99 ,-99, 99);
        	VerticalEnd      [ProfileIdx]     = EditValues(ValNameIdx , 3,VerticalEnd      [ProfileIdx],100,99 ,-99, 99);
        	VerticalTime     [ProfileIdx]     = EditValues(ValNameIdx , 4,VerticalTime     [ProfileIdx],100,99 ,  0, 99);
        	HorizontalStart  [ProfileIdx]     = EditValues(ValNameIdx , 5,HorizontalStart  [ProfileIdx],100,99 ,-99, 99);
       	    HorizontalEnd    [ProfileIdx]     = EditValues(ValNameIdx , 6,HorizontalEnd    [ProfileIdx],100,99 ,-99, 99);
            HorizontalTime   [ProfileIdx]     = EditValues(ValNameIdx , 7,HorizontalTime   [ProfileIdx],100,99 ,  0, 99);
            RumbleBoost      			      = EditSwitch(ValNameIdx ==8,RumbleBoost,0,1);
            TaylorShapes      			      = EditSwitch(ValNameIdx ==9,TaylorShapes,0,5);
            TaylorRadius          			  = EditValues(ValNameIdx ,10,TaylorRadius                  ,100,99,  0, 99);
        	TaylorAngle                       = EditValues(ValNameIdx ,11,TaylorAngle                   ,100,99,  0, 99);
        	DeadZone                          = EditValues(ValNameIdx ,12,DeadZone                      ,100,20,  0, 20);
        	TaylorRadiusMin                   = EditValues(ValNameIdx ,13,TaylorRadiusMin               ,100,20,  0, 20); 
        	TaylorBoost                       = EditValues(ValNameIdx ,14,TaylorBoost                   ,100,40,  0, 40);
        	TaylorAngleBoost                  = EditValues(ValNameIdx ,15,TaylorAngleBoost              ,100,40,  0, 40);
        	AimAssistSize        			  = EditValues(ValNameIdx ,16,AimAssistSize                 ,100,99,  0, 99);
        	AimAssistTime        			  = EditValues(ValNameIdx ,17,AimAssistTime                 ,100,99,  0, 99);
        	StickyBoost         			  = EditValues(ValNameIdx ,18,StickyBoost                   ,100,40,  0, 40);
        	PolarPower          			  = EditValues(ValNameIdx ,19,PolarPower                    ,100,99,  0, 99);
        	PolarSpeed           			  = EditValues(ValNameIdx ,20,PolarSpeed                    ,100,99,  0, 99);
        	PowerBoost            			  = EditValues(ValNameIdx ,21,PowerBoost                    ,100,10,  0, 40);
        	SpeedBoost            			  = EditValues(ValNameIdx ,22,SpeedBoost                    ,100,40,  0, 40);
        	PolarRelease            		  = EditValues(ValNameIdx ,23,PolarRelease                  ,100,60,  0, 60);
            Reducer    			              = EditSwitch(ValNameIdx ==24,Reducer                      ,  0,  1);
            ProgPower           			  = EditValues(ValNameIdx ,25,ProgPower                     ,100,40,  0, 40);
            ProgWait            			  = EditValues(ValNameIdx ,26,ProgWait                      ,100,20,  0, 20);
            ProgressionRelease            	  = EditValues(ValNameIdx ,27,ProgressionRelease            ,100,60,  0, 60);
            DoGzPower               		  = EditValues(ValNameIdx ,28,DoGzPower                     ,100,35,  0, 35);
            RateOfFire       [ProfileIdx]     = EditValues(ValNameIdx ,29,RateOfFire       [ProfileIdx] ,100,25,  0, 25);
            AkimboRoF        [ProfileIdx]     = EditValues(ValNameIdx ,30,AkimboRoF        [ProfileIdx] ,100,25,  0, 25);
            BurstFireHold         			  = EditValues(ValNameIdx ,31,BurstFireHold    			    ,33,332,  0,990);
        	BurstFireRelease                  = EditValues(ValNameIdx ,32,BurstFireRelease              ,33,332,  0,990);
        	StrafeShotTime                    = EditValues(ValNameIdx ,33,StrafeShotTime                ,33,332, 0,990);
        	SniperStrength                    = EditValues(ValNameIdx ,34,SniperStrength                ,100,40,  0, 40);
        	SniperTime                        = EditValues(ValNameIdx ,35,SniperTime                    ,100,40,  0, 40);
        	SteadyAim                         = EditValues(ValNameIdx ,36,SteadyAim                     ,100,90,  0, 90);
        	SniperGenSens                     = EditValues(ValNameIdx ,37,SniperGenSens                 ,98,327,  0,327);
        	SniperAdsSens                     = EditValues(ValNameIdx ,38,SniperAdsSens                 ,98,327,  0,327);
            SniperFireSens                    = EditValues(ValNameIdx ,39,SniperFireSens                ,98,327,  0,327);
        	SniperAdsFireSens                 = EditValues(ValNameIdx ,40,SniperAdsFireSens             ,98,327,  0,327);
        	QuickScopeDelay                   = EditValues(ValNameIdx ,41,QuickScopeDelay               ,54,320,  0,600);
        	GeneralSens                       = EditValues(ValNameIdx ,42,GeneralSens                   ,98,327,  0,327);
        	AdsSens                           = EditValues(ValNameIdx ,43,AdsSens                       ,98,327,  0,327);
            FireSens                          = EditValues(ValNameIdx ,44,FireSens                      ,98,327,  0,327);
        	AdsFireSens                       = EditValues(ValNameIdx ,45,AdsFireSens                   ,98,327,  0,327);
        	SlideCancelDelay                  = EditValues(ValNameIdx ,46,SlideCancelDelay              ,100,200,  0,200);
            
            if(ModNameIdx == 0) ValNameIdx = cycle(ValNameIdx,0,1);
    		if(ModNameIdx == 1) ValNameIdx = cycle(ValNameIdx,2,7);
    		if(ModNameIdx == 2) ValNameIdx = cycle(ValNameIdx,8,15);
    		if(ModNameIdx == 3) ValNameIdx = cycle(ValNameIdx,16,18);
    		if(ModNameIdx == 4) ValNameIdx = cycle(ValNameIdx,19,28);
    		if(ModNameIdx == 5) ValNameIdx = cycle(ValNameIdx,29,29);
    		if(ModNameIdx == 6) ValNameIdx = cycle(ValNameIdx,30,30);
    		if(ModNameIdx == 7) ValNameIdx = cycle(ValNameIdx,31,32);
    		if(ModNameIdx == 8) ValNameIdx = cycle(ValNameIdx,33,33);
    		if(ModNameIdx == 9) ValNameIdx = cycle(ValNameIdx,34,40);
    		if(ModNameIdx ==10) ValNameIdx = cycle(ValNameIdx,41,41);
    		if(ModNameIdx ==12) ValNameIdx = cycle(ValNameIdx,42,45);
    		if(ModNameIdx ==13) ValNameIdx = cycle(ValNameIdx,46,46);
        }
    }
    if(UpdateScreen)    
    { 
        cls_oled(OLED_BLACK);
        led(ProfileIdx);
        
        if(EditMenu) 
        {
        	printf(center_x(get_valName_chars(ValNameIdx), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,ValNames[ValNameIdx]);
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	
        	
        }
   		else if(ModMenu) 
        { 	
        	printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); 
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
			line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
			    
			    if(ModNameIdx >= 0 && ModNameIdx <= 19 || ModNameIdx >= 22 && ModNameIdx <= 25)
			    {
			    	line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
			    		
			    } 
			    if(ModNameIdx >= 2 && ModNameIdx <= 4 || ModNameIdx >= 7 && ModNameIdx <= 10 || ModNameIdx >= 12 && ModNameIdx <= 13)
			    {
			    	printf(center_x(get_misc_chars(35), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[35]);
			    } 
				if(ModNameIdx == 11 || ModNameIdx >= 14 && ModNameIdx <= 18) 
				{
					printf(center_x(get_misc_chars(37), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[37]);
				}
				if(ModNameIdx == 19 || ModNameIdx >= 22 && ModNameIdx <= 23 || ModNameIdx == 25) 
				{
					printf(center_x(get_misc_chars(38), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[38]);
				}
    		    if(ModNameIdx >= 0 && ModNameIdx <= 1 || ModNameIdx >= 5 && ModNameIdx <= 6 || ModNameIdx == 24)
    		    {
    		    	if(ProfileIdx == 0) 
        				printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
           	    	else if(ProfileIdx == 1) 
            			printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
            		else if(ProfileIdx == 2) 
            	    	printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
            	} 
        	
        }
        else 
        {
            
            printf(5,5,0,1, MainMenuId[0]);
    		printf(5,18,0,1,MainMenuId[1]);
    		printf(5,30,0,1,MainMenuId[2]);
    		printf(5,42,0,1,MainMenuId[3]);
    		printf(5,54,0,1,MainMenuId[4]);
    	
	    	if(MainMenuIdx >= 5 && MainMenuIdx <= 9)
			{ 
				cls_oled(0);
				rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
				printf(5,5,0,1,MainMenuId[5]);
	    		printf(5,18,0,1,MainMenuId[6]);
	    		printf(5,30,0,1,MainMenuId[7]);
	    		printf(5,42,0,1,MainMenuId[8]);
	    		printf(5,54,0,1,MainMenuId[9]);
	    	}	
	    	 
				RectOled(0,5,4,1);
				RectOled(1,6,15,14);
				RectOled(2,7,28,26);
				RectOled(3,8,40,38);
		    	RectOled(4,9,51,50);
					
       
        }			
        UpdateScreen = FALSE; 
    } 
    if(!MainMenu && !ModMenu && !EditMenu)                      // If NOT In Either Menu's \\ 
	{
    	if(DisplayTitle)                                            // Display Title - Display Screen \\
    	{ 
       		cls_oled(OLED_BLACK);
       	  	printf(center_x(get_loadout_chars(LoadoutIdx), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,Loadouts[LoadoutIdx]); 
			printf(center_x(get_misc_chars(39), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[39]);
			printf(center_x(get_weapon_chars(WeaponNamesIdx[ProfileIdx]), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Weapons[WeaponNamesIdx[ProfileIdx]]);
				
			if(ProfileIdx == 0) 
    			printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
       	    else if(ProfileIdx == 1) 
        		printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
        	else if(ProfileIdx == 2) 
        	    printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[7]); 
        	
        
        	DisplayTitle = FALSE;
            ScreenSaver  = TRUE; 
    	}
    	// Display a Blank Screen after 10 seconds ( Prevents Screen Burn on The OLED Screen ) 
    	
    	if(ScreenSaver) 
    	{
        	BlankScreen += get_rtime();
        	
    		if(BlankScreen >= 10000)
    		{
    			cls_oled(OLED_BLACK);
    			BlankScreen = 0;
    			ScreenSaver = FALSE; 
        	} 
        }
        led(ProfileIdx);
            
        if(ToggleMasterProfileSwitch) 
        {
        	if(ActivateIndividualButton) 
        	{ 
        		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 && !ToggleDefaultBtn || ToggleDefaultBtn && ActivateIndividualButton && event_press(ActivateIndividualButton) || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])) 
        		{
    				SelectedProfileIdx =! SelectedProfileIdx;
    				WarzoneLootProfile = FALSE;
    
    				if(ModMenu) 
    					UpdateScreen = TRUE; 
        			else
            			DisplayTitle = TRUE;
            		
            	if(!WarzoneLootProfile) 
            	{
            		if(SelectedProfileIdx) 
            	   		ProfileIdx = 1;
            		else
            	   		ProfileIdx = 0; 
    			}
    			
	    	} 
	    	if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
	    		set_val(ActivatePressButton[0], 0);
	    	}
      	} 
        if(ActivateHoldButton[1]) 
        {
        	if(get_ival(ActivateHoldButton[1]) && get_ival(ActivatePressButton[1]))
            {
             	ProfileIdx = 2; 
	       	   	WarzoneLootProfile = TRUE;
	       	    
	       	    if(ModMenu) 
    				UpdateScreen = TRUE; 
        		else
            		DisplayTitle = TRUE;
	       	}           
	       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1]))
	    		set_val(ActivatePressButton[1], 0);   
   	        }   	 
	    }
	    if(!ModMenu && !MainMenu)
		{
	 		//vm_tctrl(-6);
	 		
	    	if(DriveMode) 
	       	{
	       		LedOn  = 150;
				LedOff = 300;
				combo_run(Blink);
				
	       		if(event_press(PS4_SQUARE) && !EditMenu)
	       		{
	       				DriveMode = FALSE;
	       			
	       		}
	       			set_val(TRACE_3,DriveMode);
	       	}		
        	if(SniperMode || WeaponNamesIdx[ProfileIdx] == 9)
        	{
        		LedOn  = 1300;
				LedOff = 500;
				combo_run(Blink1);
				
    			SniperStr        = SniperStrength;
    			SniperTStr       = SniperTime;
    			SniperAAT        = SniperTime;
    			SniperAAS        = SniperStrength;
    		
    			
    			if(ToggleSniperAssist == 2 || ToggleSniperAssist == 3) 
	            {
	            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
	                        
	                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	               		Str = SniperGenSens;
	                }
	                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	                    Str = SniperAdsSens;
	                }  
	                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	                    Str = SniperFireSens;   
	                }
	                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
	                { 
	                    Str = SniperAdsFireSens;
	                }
	                sensitivity(PS4_RY,NOT_USE,Str);
	                sensitivity(PS4_RX,NOT_USE,Str);
	            }
	            if(ToggleSniperAssist == 1 || ToggleSniperAssist == 2) 
				{
					if(isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> DeadZone ) 
					{
						s_val = f_atan2(get_val(POLAR_RY)/256, get_val(POLAR_RX)/256);
			  
			            if ((get_val(POLAR_RY) > 0)) s_val = f_map(0, SteadyAim, 0, 180, (s_val * SteadyAim) / 180);
			            	else s_val = f_map(0, SteadyAim, 180, 360, (((s_val - 180) * SteadyAim) / 180));
			  
			            f_set_polar(POLAR_RS, s_val, isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))), FALSE);
						 	
					}
				}
        	} 
        	if(!SniperMode)
        	{ 
       			SniperStr        = TaylorRadius;
       			SniperTStr       = TaylorAngle;
       			SniperAAT        = AimAssistTime; 
       			SniperAAS        = AimAssistVal; 
       		}    	
	    }
	    if(ToggleHairTriggers) 
		{	
			if(get_ival(PS4_R2) > 10) 
				set_val(PS4_R2, 100);
	
			if(get_ival(PS4_L2) > 10)
				set_val(PS4_L2, 100);
		} 
	    if(ToggleBlockRumble) 
	    {
			block_rumble();
	    } 
	    if(!DriveMode) 
	    {
	   	 		 ToggleRapidFire[ProfileIdx]  = Quick_Toggle(ActivateHoldButton[2] , ActivatePressButton[2],ToggleRapidFire[ProfileIdx], 5); 
		    	 ToggleAkimboRf[ProfileIdx]   = Quick_Toggle(ActivateHoldButton[3] , ActivatePressButton[3],ToggleAkimboRf[ProfileIdx],  6); 
		         ToggleProneShot              = Quick_Toggle(ActivateHoldButton[4] , ActivatePressButton[4],ToggleProneShot,            14);
		         ToggleJumpShot               = Quick_Toggle(ActivateHoldButton[5] , ActivatePressButton[5],ToggleJumpShot,             15);
		         ToggleFastMelee              = Quick_Toggle(ActivateHoldButton[6] , ActivatePressButton[6],ToggleFastMelee,            17);
		    	 ToggleMasterProfileSwitch    = Quick_Toggle(ActivateHoldButton[7] ,ActivatePressButton[7],ToggleMasterProfileSwitch  ,22); 
		    	
	    		if(ToggleARType[ProfileIdx] == 1) 
    			{
	       			if(get_ival(Fire)) 
	        		{ 	
	        			combo_run(Antirecoil);
	        		}
	        	}
		        if(ToggleARType[ProfileIdx] == 2 || ToggleARType[ProfileIdx] == 3) 
		        {
		        	if(get_ival(Fire))
		        	{
						if(!get_rumble(RUMBLE_A) || !get_rumble(RUMBLE_B))  
				    		
							SmartSens(TaylorStrength[ProfileIdx], PS4_RY);
							
			    		else
			    		{
			    			if(ToggleARType[ProfileIdx] == 2) 
			    				SmartRumble = get_rumble(RumbleToUse())
			    			else if(ToggleARType[ProfileIdx] == 3) 
			    				AntirecoilStrength = get_rumble(RUMBLE_A)/2;
			    			
						}
						if(AntirecoilStrength > 10 && AntirecoilStrength < 90) 
						{
							AntirecoilStrength = TaylorStrength[ProfileIdx] + SmartRumble / 4;
						} 	
						if(AntirecoilStrength < 10) 
						{
							SmartSens(TaylorStrength[ProfileIdx], PS4_RY);
							SmartSens(HorizStrength[ProfileIdx],PS4_RX); 
						}
						else
						{ 	
							SmartSens(AntirecoilStrength,PS4_RY);  
							SmartSens(HorizStrength[ProfileIdx],PS4_RX); 	
						}
	    	    		AntirecoilStrength  = 0; 
	    	    		SmartRumble = 0; 
				    }
				}
				if(ToggleProgressive[ProfileIdx] == 1)  
				{
				// Vertical
	    			// Adding or subtracting
					if(VerticalStart[ProfileIdx] < VerticalEnd[ProfileIdx])
						i_val = 1;
					else
						i_val = -1;
	    			// Iteration point for progression 
	    			 
				    i_pnt = (VerticalTime[ProfileIdx] * 10) / (abs(VerticalStart[ProfileIdx] - VerticalEnd[ProfileIdx])); 
	
				// Horizontal
	    			// Adding or subtracting
					if(HorizontalStart[ProfileIdx] < HorizontalEnd[ProfileIdx])
						i_val_h = 1;
					else
						i_val_h = -1;
	    		// Iteration point for progression 
	    			i_pnt_h = (HorizontalTime[ProfileIdx] * 10) / (abs(HorizontalStart[ProfileIdx] - HorizontalEnd[ProfileIdx]));
	    				
				// Reset counters/pointers
					if(!get_ival(Fire))  
					{
						// Vertical
						ar_y = VerticalStart[ProfileIdx];
						i_cnt = 0;
						i_num = 0;
						// Horizontal
						ar_x = HorizontalStart[ProfileIdx];
						i_cnt_h = 0;
						i_num_h = 0;
					}
				// If Fire button is held
	    			if(get_ival(Fire)) 
	    			{
				        // Vertical
	        			if(!p_complete())  
	    	   				ar_y = p_val();
	    				else
	           			    ar_y = VerticalEnd[ProfileIdx];
	           			    
	           			if(y_val() < 100)
				    	   	set_val(PS4_RY,y_val()); 
			
		          		// Horizontal
	       			 	if(!p_complete_x())
	    	            	ar_x = p_val_x();
	    	         	else
	                    	ar_x = HorizontalEnd[ProfileIdx];
	         
	    	  			 if(x_val() < 100)
				    	   	set_val(PS4_RX,x_val()); 
						
	    			}
		        }
		        if(ToggleTaylorAssist == 1 && ToggleTaylorAssist != 2) 
				{     
					RX = get_val(PS4_RX);                                
	    			RY = get_val(PS4_RY); 
	  				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
	  				MaxMagnitude = (ActualMagnitude < 100);             
				
					                       
					angle += SniperTStr + GetAngle;                                    
					angle = angle % 360;  
					CosAngle = DamPolar[(angle + 270) % 360];  
					SinAngle = DamPolar[angle % 360];
	    
	   		   		if(RumbleBoost)
	    			{
	    				if(get_ival(Fire))
	    				{
	    					SmartRumble = get_rumble(RumbleToUse());
	    					GetAngle = TaylorAngleBoost;
	    					
	    		        if(SmartRumble) 
	    		        {
	    				    PolarStrength  = (TaylorRadius + TaylorBoost + TaylorAngleBoost + SmartRumble / 10); 
	    					SmartRumble    = 0;
	    			    }
	    			}
	    			if(event_release(Fire)) 
    				{
    					GetAngle = 0; 
    				} 
	    		}
	    	    if(get_ival(Ads) || get_ival(Fire))
	    		{
	        		if(ActualMagnitude < TaylorRadius)           
	        		{
	           			SinAngle -= RY;                                                              
						CosAngle -= RX;
		    		}
		   			else 
		   			{     
						SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
						CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
					} 
					if(!RumbleBoost) 
					{
						GetShapes(SniperStr); 
					}
						else
						{
							if(!get_rumble(RumbleToUse()))
		    					GetShapes(SniperStr); 
		    				else 
		    					GetShapes(PolarStrength); 
	    				} 
	    				PolarStrength = 0; 
	    				SmartRumble   = 0; 
					}
				} 
				if(ToggleTaylorAssist == 2 && ToggleTaylorAssist != 1) 
				{ 
					Angle = (Angle + SniperTStr + AngleBoost) % 360;
				
					if(RumbleBoost)
		    		{
		    			if(get_ival(Fire))
		    			{
		    				SmartRumble = get_rumble(RumbleToUse());
		    				AngleBoost = TaylorAngleBoost;
		    					
		    		    if(SmartRumble) 
		    		    {
		    			 	PolarStrength  = (SniperStr + TaylorBoost + TaylorAngleBoost + SmartRumble / 10);  
		    				SmartRumble    = 0;
		    			}
		    		}
		    		if(event_release(Fire)) 
		    		{
		    			AngleBoost = 0; 
		    		} 
		    	} 
				if((get_val(Ads) || get_val(Fire)) && isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> DeadZone)  
				{
					if(!RumbleBoost) 
					{
						GetRShapes(SniperStr); 
					}
						else
						{
							if(!get_rumble(RumbleToUse()))
		    					GetRShapes(SniperStr); 
		    				else 
		    					GetRShapes(PolarStrength); 
	    				} 
	    				PolarStrength = 0; 
	    				SmartRumble   = 0; 
					}	 
			    } 
			    if(ToggleBattsAimAssist == 1) 
			    {
				    if(get_ival(Fire))	     
					{
						RX = get_val(PS4_RX);
		            	RY = get_val(PS4_RY);
		   
	    				AimAssistVal = AimAssistSize; 
						combo_run(StickyAim)
				    }
				} 
   				if(ToggleBattsAimAssist == 2)   	 
	    		{
	    			if(get_ival(Fire))
	    			{
	    				SmartRumble = get_rumble(RumbleToUse());
	    		
	        			if(SmartRumble) 
	    				{
	    					StickyStrength  = (AimAssistSize + StickyBoost + SmartRumble / 4); 
	    					SmartRumble    = 0;
	    				}
	    				AimAssistVal = StickyStrength; 
	    				combo_run(StickyAim);
		            } 
		            StickyStrength = 0; 
    			} 
				if (ToggleDoGzAA) {
	        
			        Axis = isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)));
			        ActualX = get_val(PS4_RX);   
			        ActualY = get_val(PS4_RY);           
			        ActualMagnitude = isqrt(pow(ActualX, 2) + pow(ActualY, 2));  
			        MaxMagnitude = (ActualMagnitude < 100);                      
				    
			        if (!(Time++ % Step)) {                                  
			        	
			        	Angle += PolarSpeed + Steps;                                                 
			        }                                                               
			            
			            Angle = Angle % 360;                                            
			            SinAngle = DamPolar[Angle % 360];                           
			            CosAngle = DamPolar[(Angle + 270) % 360];                  
			            CosAngle = (CosAngle * PolarPower) / Radius1;                         
			            SinAngle = (SinAngle * PolarPower) / Radius1;                          
			        
			        
			        if ((get_val(Ads) || get_val(Fire)) && Axis <= PolarRelease) { 
			        
			            if (get_val(Fire)) {	
			               	
			               	Radius1 =  PowerBoost * Radius2;
			            	Steps = SpeedBoost;
			            }
			            	else {
			                	
			                	Radius1 =  Radius3;
			               		Steps = FALSE;
			               	}
			               
			            if (ActualMagnitude <= PolarPower) {                                                      
			                
			                SinAngle -= ActualY;                                                              
			                CosAngle -= ActualX;                                                                 
			            }
			            else {
			            
			                	SinAngle = (SinAngle * (200 - ((abs(ActualY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
			                	CosAngle = (CosAngle * (200 - ((abs(ActualX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
			            	}                                                  
			            
			            if (!Reducer) {
			            
			                set_val(PS4_RX,clamp(ActualX + CosAngle,-100,100));
			                set_val(PS4_RY,clamp(ActualY + SinAngle,-100,100)); 
			            }
			            	else {
			                	
			                	Set_Val(PS4_RX,clamp(ActualX + CosAngle,-100,100));
			                	Set_Val(PS4_RY,clamp(ActualY + SinAngle,-100,100));    	
			            	}
			        }
			            
			            if (get_ival(Ads) >= 80 && Axis <= ProgressionRelease) {
			            	
			            	if ((!Reducer && !combo_running(Assist2)) || (Reducer && !combo_running(Assist2R))) {
			                    
			                	ProgValue = Assist2(ProgValue,ProgMin,ProgPower,ProgInc,ProgStrength,1);
			                    WaitValue = Assist2(WaitValue,WaitMin,ProgWait,WaitInc,ProgDelay,2);
			                    
			                    if (!Reducer) {
				                    
				                    combo_run(Assist2);
				                }
				                	else {
				                		
				                		combo_run(Assist2R);
			                		}
			                			
			                	if (!ToggleDoGzAA) Flow = !Flow;
			                }
				    	}
				    
				    if (get_ival(Ads) >= 80) {
			        	
			        	Assist3 = TRUE;
			        	Assist3();
			        }
			        
			        if (event_release(Ads) || event_release(Fire)) {
			        	
			        	Assist3 = FALSE;
			        }
			
                } 
           
				if(ToggleRapidFire[ProfileIdx]  == 1) 
		    	{ 
		    	 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
	   		     	RestTime = HoldTime -get_rtime();
	    	     	if(RestTime < 0) RestTime = 0;
				    
				 	if(get_val(Fire))
				    	    
				 		combo_run(RAPIDFIRE);
				 	else
				    	combo_stop(RAPIDFIRE);
				    		
				    LedOn  = 150;
				    LedOff = 300;
				    combo_run(BLINK);
				}
				if(ToggleAkimboRf[ProfileIdx]   == 1) 
	            { 	
	                if(get_val(Fire))
	                    combo_run(ARF);
	                else 
	                    combo_stop(ARF);
	                    
	                LedOn  = 150;
				    LedOff = 300;
				    combo_run(BLINK);               
	            }
	            if(ToggleBurstFire  == 1)
	            {
	             // Hold and Release
			        HoldTime = BurstFireHold;
			    	RestTime = BurstFireRelease;
				
	             // Run combo
	                if(get_val(Fire))	
	    		    	combo_run(BurstFire);
	    	        else
	    	            combo_stop(BurstFire);
	
			        LedOn  = 200;
	    	        LedOff = 1000;
	    	        combo_run(BLINK);
	            }
	            if(ToggleStrafeShot == 1) 
		        {
		       		if(get_val(Fire))
			        	combo_run(StrafeShot);
		   			else
			   			combo_stop(StrafeShot);
				}
				if(ToggleTaylorSens  == 1 && !SniperMode) 
	            {
	            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
	                        
	                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	               		GenStr = GeneralSens;
	                }
	                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	                    GenStr = AdsSens;
	                }  
	                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
	                { 
	                    GenStr = FireSens;   
	                }
	                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
	                { 
	                    GenStr = AdsFireSens;
	                }
	                sensitivity(PS4_RY,NOT_USE,GenStr);
	                sensitivity(PS4_RX,NOT_USE,GenStr);
	            }
	    
				if(ToggleHoldBreath || SniperMode) 
	            {
		       		if(get_val(Ads))
			    		set_val(Sprint, 100);
		                      
		   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
		       			combo_stop(HoldBreath);       
		                    
		   			if(event_press(Ads)) 
		       			combo_run(HoldBreath);
		  
		   			if(get_val(Ads) && get_lval(Sprint)) 
		       			set_val(Sprint, 0);  
				} 
				if(ToggleEnemyPing) 
	        	{
	        		if(get_val(Fire))
		         		combo_run(EnemyPing); 
		     		else
		         		combo_stop(EnemyPing); 
		     
	        	}
	        	if(ToggleCancelSlide == 1)
				{
					if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
					{
						if(event_release(Crouch))
							combo_run(CancelSlideMW)
							
						if(combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
		                    combo_stop(CancelSlideMW)
					}
				}
				if(ToggleCancelSlide == 2)
				{
					if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
					{
						if(event_release(Crouch))
							combo_run(CancelSlideCW)
							
						if(combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
		                    combo_stop(CancelSlideCW)
					}
				}
				if(ToggleBunnyHop)
	            {
	                if(get_ival(Jump) && get_ptime(Jump) > 200) 
	                	combo_run(Bunnyhop); 
	            } 
	            if(ToggleProneShot)   
				{
					if(get_val(Fire) && get_ptime(Fire) > ProneSpeed)
						set_val(Crouch,100);
				}
				if(ToggleJumpShot)
				{
					if(get_val(Fire))
						combo_run(JumpShot);
				}
				if(ToggleQuickScope)
				{
					if(event_press(Ads) && get_ptime(Ads) < 140)
					combo_run(Quick_Scope);
				}
				if(ToggleFastMelee)
				{
					if(get_val(Melee))
					combo_run(FastMelee);
	
					if(get_val(Ads) && event_press(Melee) < 500)
					combo_stop(FastMelee);
				}
				set_val(TRACE_1,TaylorAngle);
				set_val(TRACE_2,SniperTStr);
				set_val(TRACE_3,Angle);
				set_val(TRACE_4,TaylorRadius); 
				set_val(TRACE_5,SniperStr);
				
			}
       
        // Switch Profiles Activation \\ 
    }
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}			   
combo StickyAim {
set_val(PS4_RY,RY + SniperAAS);
wait(SniperAAT);
set_val(PS4_RX,RX + SniperAAS);
set_val(PS4_LX,get_ival(PS4_LX) + SniperAAS);
wait(SniperAAT);
set_val(PS4_RY,RY + SniperAAS * -1);
wait(SniperAAT);
set_val(PS4_RX,RX + SniperAAS * -1);
set_val(PS4_LX,get_ival(PS4_LX) + SniperAAS);
wait(SniperAAT);
}
function GetRShapes(f_var){ 

	if(TaylorShapes == 1) 
	{ 
		set_polar(POLAR_RS,Angle,f_var * 328/2)
	}
	if(TaylorShapes == 2) 
	{ 
		set_polar(POLAR_RS,Angle,f_var * 328/2)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,TaylorRadiusMin * 327)
		PX = get_val(POLAR_RX);			
	}
	if(TaylorShapes == 3) 
	{ 
	    set_polar(POLAR_RS,Angle,TaylorRadiusMin * 327)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,f_var * 327/2)
		PX = get_val(POLAR_RX);			
	}
	if(TaylorShapes == 4)
	{
		if(!SpiralPosition1)                                
		{
			InnerSpiral -= 1;
			if(InnerSpiral < TaylorRadiusMin)
				SpiralPosition1 = True;
		}
		else
		{
	    	InnerSpiral += 1;
			if(InnerSpiral > f_var)
				SpiralPosition1 = False;
		}
		if(!SpiralPosition2)
		{
			OuterSpiral -= 1;
			if(OuterSpiral < TaylorRadiusMin)
				SpiralPosition2 = True;
		}
		else
		{
			OuterSpiral += 1;
			if(OuterSpiral >  f_var)
				SpiralPosition2 = False;
		}
		set_polar(POLAR_RS,Angle,InnerSpiral * 327/2)
		PY = get_val(POLAR_RY);
		set_polar(POLAR_RS,Angle,OuterSpiral * 327/2)
		PX = get_val(POLAR_RX);		
	}
	if(TaylorShapes == 5) 
	{
		if(Position == 0)
    	{  
    	    set_polar(POLAR_RS,Angle,f_var)
    		PX = get_val(POLAR_RX)  + (Angle + f_var) * 327/10;	
    	}
    	if(Position == 1) 
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PY = get_val(POLAR_RY) + (Angle + f_var) * 327/10;
    	}
    	if(Position == 2)
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PX = get_val(POLAR_RX) + (Angle + f_var) * 327/10 * -1 ;	
    	}
    	if(Position == 3)
    	{
    		set_polar(POLAR_RS,Angle,f_var)
    		PY = get_val(POLAR_RY) + (Angle + f_var) * 327/10 * -1 ;
    	}
    	Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
	}
	set_val(POLAR_RY,GetPolar(get_val(POLAR_RY) + PY  ,get_ival(POLAR_RY)));
    set_val(POLAR_RX,GetPolar(get_val(POLAR_RX) + PX  ,get_ival(POLAR_RX)));  
}
int Position;   
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TaylorRadiusMin)
			SpiralPosition1 = True;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = False;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TaylorRadiusMin)
			SpiralPosition2 = True;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = False;
	} 
	if(TaylorShapes == 1)                    
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
	} 
	if(TaylorShapes == 2)        
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * TaylorRadiusMin) )/100; 
	}
	if(TaylorShapes == 3)                     
	{ 
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
        RY = (get_val(PS4_RY))  + ( (SinAngle * TaylorRadiusMin) )/100;
       
	} 
	if(TaylorShapes == 4)                  
	{
        RY = (get_val(PS4_RY))  + ( (SinAngle * InnerSpiral) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * OuterSpiral) )/100;  
	}
    if(TaylorShapes == 5)
	{
		if(Position == 0 || Position == 1)
    	{  
		    RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;
		}
	    if(Position == 2 || Position == 3)
		{  
		    RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
		}
			Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
    } 
    set_val(PS4_RX,RX);
	set_val(PS4_RY,RY);
}
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(SlideCancelDelay);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(SlideCancelDelay);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo Quick_Scope {
set_val(Ads,100);
wait(QuickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}         
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo Bunnyhop{
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
}
combo JumpShot {
set_val(Jump,100);
wait(100);
}
combo Assist2 {

	set_val(PS4_RY,Step * -ProgValue);
	wait(WaitValue);
	set_val(PS4_RX,Step * -ProgValue);
	wait(WaitValue);
	set_val(PS4_RY,ProgValue);
	wait(WaitValue);
	set_val(PS4_RX,ProgValue);
	wait(WaitValue);	
}

combo Assist2R {

	Set_Val(PS4_RY,Step * -ProgValue);
	wait(WaitValue);
	Set_Val(PS4_RX,Step * -ProgValue);
	wait(WaitValue);
	Set_Val(PS4_RY,ProgValue);
	wait(WaitValue);
	Set_Val(PS4_RX,ProgValue);
	wait(WaitValue);
}

function Assist3 () {
	
	if (Assist3) {

		AssistVal ++;
	
	    if (AssistVal >= DoGzPower)  AssistVal = AssistInv;
	    	
	    	AssistInv --;
	    
	    if (AssistInv <= AssistNeg)  AssistInv = AssistVal;
	    	
	    	AssistVal ++;
	    
	    if (get_ival(Ads)) {	
	    	
	    	if (!Reducer) {
	    		
	    		set_val(PS4_RX,get_val(PS4_RX) + AssistVal);
	    		set_val(PS4_RY,get_val(PS4_RY) + AssistVal);
	    	}
	    		else {
	    			
	    			Set_Val(PS4_RX,get_val(PS4_RX) + AssistVal);
	    			Set_Val(PS4_RY,get_val(PS4_RY) + AssistVal);
	    		}
	    }
	    
	    if (get_ival(Fire)) {	
	    	
	    	if (!Reducer) {
	    	
	    		set_val(PS4_RX,get_val(PS4_RX) + AssistVal);
	    		set_val(PS4_RY,get_val(PS4_RY) + AssistVal);
	    	}
	    		else {
	    			
	    			Set_Val(PS4_RX,get_val(PS4_RX) + AssistVal);
	    			Set_Val(PS4_RY,get_val(PS4_RY) + AssistVal);
	    		}
		} 		
	}
}

function Assist2 (Value,Min,Max,Increment,Direction,Invert) {
    
    if (Direction) {
        
        Value += Increment;
    
    	if (Value <= Max) return Value;
    		
    	if (Value > Max) {
        	
        	Flow[Invert] = FALSE;
    		return Value - Increment;
    	}
	}
	else {
        
        Value -= Increment;    
    
    	if (Value >= Min) return Value;
    	
    	if (Value < Min) {
   		 
   		 	Flow[Invert] = TRUE;
         	return Value + Increment;
       	}
	} 
   		 return FALSE;    
}

function Set_Val(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input),-100,100));
        return; 
}	    	
combo Antirecoil{
// Vertical
   AntirecoilVertical = get_val(PS4_RY) + TaylorStrength[ProfileIdx];  
   if(AntirecoilVertical > 100) AntirecoilVertical = 100;
   if(abs(get_val(PS4_RY)) < abs(TaylorStrength[ProfileIdx]) +  5)
   set_val(PS4_RY, (AntirecoilVertical));
// Horizontal
   AntirecoilHorizontal = get_val(PS4_RX) + HorizStrength[ProfileIdx];
   if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
   if(abs(get_val(PS4_RX)) < abs(HorizStrength[ProfileIdx])  + 5)
   set_val(PS4_RX, AntirecoilHorizontal);
}
combo DriveModeOnOff { 
cls_oled(0); 
if(DriveMode){ 
printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);
printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);} 
if(!DriveMode){ 
printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[8]);
printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);} 
wait(1500);
DisplayTitle = TRUE;
} 
combo SniperModeOnOff{ 
cls_oled(0);
if(SniperMode){
printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);}
if(!SniperMode){
printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);}
wait(1500);
DisplayTitle = TRUE;
}
combo StrafeShot{ 
set_val(PS4_LX, 100);
wait(StrafeShotTime);
wait(50);
set_val(PS4_LX, -100);
wait(StrafeShotTime);
wait(20);
}
combo BurstFire { 
wait(HoldTime);
call(RAPIDFIRE);
call(RAPIDFIRE);
call(RAPIDFIRE);
call(RAPIDFIRE);
}
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
}
combo ARF {
set_val(Fire,100);
set_val(Ads,100);
wait(40);
set_val(Fire,0);
set_val(Ads,0);
wait(AkimboRoF[ProfileIdx]);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(2000); 
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo Saved { 
cls_oled(0); 
printf(center_x(get_misc_chars(36), OLED_FONT_MEDIUM_WIDTH),20,OLED_FONT_MEDIUM,OLED_WHITE,Misc[36]);
wait(2000);
DisplayTitle = TRUE; 
} 
combo QuickToggles{ 
wait(1500) 
DisplayTitle   = TRUE; 
reset_leds(); 
}   
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) >= get_rumble(RUMBLE_B)) 
        return RUMBLE_A;
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
        return RUMBLE_B;
        
    return 0;
}			   
function SmartSens(f_val, f_axis) { 

	if(f_val < 0)
		SmartSens_side = -1; // Left / Up for inverted ar
	else 
		SmartSens_side = 1; // Right / Down for standard ar

	if(SmartSens_side == -1) // if AntiRecoil_ has a negative value (Left or Up) 
	{
	    if(get_ival(f_axis) > 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + abs(f_val))) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100);
	
	// Set SmartSens AntiRecoil
		if(get_ival(f_axis) >= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens);
	}
	
	else // if(SmartSens_side == 1) so if AntiRecoil_ has a positive value (Right or Down)
	{
	    if(get_ival(f_axis) < 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + inv(f_val))) / 100);
	    
	// Set SmartSens AntiRecoil
	    if(get_ival(f_axis) <= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens)
	}
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > VerticalTime[ProfileIdx] * 10) {
    	//--avoid stack overflow
        i_cnt = VerticalTime[ProfileIdx] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
    	i_num = 0;
    	//--adjust ar_y 
    	ar_y += i_val ;
    }
    return ar_y;
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > HorizontalTime[ProfileIdx] * 10) {
    	//--avoid stack overflow
        i_cnt_h = HorizontalTime[ProfileIdx] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) {
        //--reset counter
    	i_num_h = 0;
    	//--adjust ar_x 
    	ar_x += i_val_h;
    }
    return ar_x;
}
function y_val() { 
    v = get_val(PS4_RY);
    if(abs(v) < 10)
        v = 0;    
    if(abs(v) > abs(ar_y + 5))
        return v;   
    return v + ar_y;           
}
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}

// Toggle Function \\ 
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
 
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            UpdateScreen = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            UpdateScreen = TRUE;
            combo_run(RumbleOff); 
    	}
    	
    	if(ModNameIdx == 0) 
		{
			if(f_val == 0)
				printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	   		else if(f_val == 1)
	    		printf(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);
	    	else if(f_val == 2) 
	    	 	printf(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
	    	else if(f_val == 3) 
	    	 	printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[14]); 
	    	 
	    } 
	    else if(ModNameIdx == 2)
	    {
	    	if(f_val == 0)
				printf(center_x(get_misc_chars(16), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[16]);
	    	else if(f_val == 1)
				printf(center_x(get_misc_chars(17), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[17]);
	   		else if(f_val == 2)
	    		printf(center_x(get_misc_chars(18), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[18]);
	   
	    } 
	    else if(ModNameIdx == 3)
	    {
	    	if(f_val == 0)
	    	    printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	    	else if(f_val == 1)
				printf(center_x(get_misc_chars(19), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[19]);
	   		else if(f_val == 2)
	    		printf(center_x(get_misc_chars(20), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[20]);
	    } 
	    else if(ModNameIdx == 9)
	    {
	    	if(f_val == 0)
	    	    printf(center_x(get_misc_chars(29), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[29]);
	    	else if(f_val == 1)
				printf(center_x(get_misc_chars(30), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[30]);
	    	else if(f_val == 2)
				printf(center_x(get_misc_chars(40), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[40]);
			else if(f_val == 3)
				printf(center_x(get_misc_chars(41), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[41]);
			
	    } 
	    else if(ModNameIdx == 13)
	    {
	    	if(f_val == 0)
	    	    printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	    	else if(f_val == 1)
				printf(center_x(get_misc_chars(31), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[31]);
			else if(f_val == 2)
	    		printf(center_x(get_misc_chars(32), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[32]);	
	  
	    }
	    else if(ModNameIdx == 19)
	    {
	    	printf(center_x(get_PressButton_chars(ActivateIndividualBtnIdx), OLED_FONT_MEDIUM_WIDTH),40,OLED_FONT_MEDIUM,OLED_WHITE,PressButtons[ActivateIndividualBtnIdx]);
	    }
	    else if(ModNameIdx == 24) 
        {
        	printf(center_x(get_weapon_chars(WeaponNamesIdx[ProfileIdx]), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Weapons[WeaponNamesIdx[ProfileIdx]]);
        }
        else if(ModNameIdx == 25) 
        {
        	printf(center_x(get_loadout_chars(LoadoutIdx), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Loadouts[LoadoutIdx]);
        }
	    else if(ModNameIdx == 26)
	    {
	    	printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
	    }
    	else
    	{
    		if(f_val == 1)
    			printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
    		else if(f_val == 0)
    			printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
    			
    	}	
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}	
function EditSwitch(f_name,f_val,f_min,f_max) { 
 
    if(f_name) 
    {       
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            UpdateScreen = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            UpdateScreen = TRUE;
            combo_run(RumbleOff); 
    	}
		if(ValNameIdx == 9)
		{
			if(f_val == 0)
				printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
	        else if(f_val == 1)
				printf(center_x(get_misc_chars(24), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[24]);
	   		else if(f_val == 2)
	    		printf(center_x(get_misc_chars(25), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[25]);
	    	else if(f_val == 3) 
	    	 	printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);
	    	else if(f_val == 4) 
	    	 	printf(center_x(get_misc_chars(27), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[27]);
	    	else if(f_val == 5) 
	    	 	printf(center_x(get_misc_chars(28), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,Misc[28]);
		}
		else
		{
			if(f_val == 1)
				printf(center_x(get_misc_chars(1), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[1]);
	        else if(f_val == 0)
	    		printf(center_x(get_misc_chars(2), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,Misc[2]);
        }
        	printf(center_x(get_misc_chars(33), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,Misc[33]);
        
		set_val(PS4_UP,0); set_val(PS4_DOWN,0); // Block Buttons 
    }
    return f_val;
}	
function EditValues(f_idx,f_num,ValueIndex,f_maxvalues,divide,ValueIndexMin,ValueIndexMax) { 

    if(f_num == f_idx) 
    { 
        if(get_ival(Ads)) 
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex + 1, ValueIndexMin,ValueIndexMax);
                UpdateScreen = TRUE;   
            }
            if(event_press(PS4_LEFT))    
            {
                ValueIndex = cycle(ValueIndex - 1, ValueIndexMin,ValueIndexMax); 
                UpdateScreen = TRUE;    
            }
            if(event_press(PS4_UP)) 
            {
                ValueIndex = cycle(ValueIndex + 10, ValueIndexMin,ValueIndexMax);
                UpdateScreen = TRUE;   
            }
            if(event_press(PS4_DOWN))    
            {
                ValueIndex = cycle(ValueIndex - 10, ValueIndexMin,ValueIndexMax); 
                UpdateScreen = TRUE;    
            }
            
            set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0);
        }
 		if(f_idx == 4 || f_idx == 7)
 		{
 			number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100) );
 			printf(14,34,0,1,Misc[3]);
 	        printf(92,34,0,1,Misc[4]);
 	    	rect_oled(14, 20, 100, 12, 0, 1);
 	   
 	    	if(ValueIndex >= 1)
		    {
 				rect_oled(14, 20, ((ValueIndex * 100)/ValueIndexMax), 12, 1, 1);
 				rect_oled(14, 20, 100, 12, 0, 1);
 				
	        }
 		}
 		else
 		{
	 		number_to_string(ValueIndex,find_digits(ValueIndex));
	 		printf(14,34,0,1,Misc[3]);
	 	    printf(92,34,0,1,Misc[4]);
	 		rect_oled(14, 20, 100, 12, 0, 1);
	 	
			if(ValueIndex >= 1)
			{
	 			rect_oled(14, 20, ((ValueIndex * f_maxvalues)/divide), 12, 1, 1); 
	 			rect_oled(14, 20, 100, 12, 0, 1);
		    }
		    if(ValueIndex <= -1) 
		    {
		    	rect_oled(14 ,20,100 , 10,1, 1 );
		    	rect_oled(14, 20, ((ValueIndex * 100)/ValueIndexMin), 10, 1, 0);
		    	rect_oled(14, 20, 100, 10, 0, 1);
			}
 	    }
    }
    return ValueIndex;                
 }
function Quick_Toggle(f_hold, f_press, f_val, f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			ModNameIdx = f_idx; 
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn); 
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff); 
			}
			DisplayQuickToggles();
			combo_run(QuickToggles);
			if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
    	} 
	    set_val(f_press, 0)
   } 
   return f_val;
}
function DisplayQuickToggles() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
    line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
	printf(center_x(get_modName_chars(ModNameIdx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModNameIdx]); 
	        
    if(ProfileIdx == 0) 
        printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
    else if(ProfileIdx == 1) 
        printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
    else if(ProfileIdx == 2) 
        printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[7]); 
     
} 
function DisplayMods(f_name,f_min,f_max,f_string,f_pos){ 

	if(ModNameIdx >= f_min && ModNameIdx <= f_max) 
	{
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
		
        line_oled(0, 33, OLED_WIDTH - 1, 33, 1, OLED_WHITE);
	    line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		printf(center_x(get_misc_chars(f_string), OLED_FONT_SMALL_WIDTH),f_pos,OLED_FONT_SMALL,OLED_WHITE,Misc[f_string]);
    } 
}
function RectOled(f_name,f_names,f_vert,f_pos) {

	if(MainMenuIdx == f_name || MainMenuIdx == f_names)
	{
		rect_oled(115,f_vert, 6, 10, OLED_WHITE, OLED_WHITE);
		putc_oled(1, 133);
		puts_oled(95,f_pos, OLED_FONT_MEDIUM, 1, 1);// LEFT
		
	} 	
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	
function ModORValNavi(f_modorval,f_min,f_max) { 
	if(MainMenu) 
	{
	    if(!get_val(Ads))
		{
	    	if(event_press(PS4_UP)) 
	        {
	           	f_modorval = cycle(f_modorval - 1, 0 , 9);
	   			UpdateScreen = TRUE;   
	    	}
	    	if(event_press(PS4_DOWN)) 
	    	{
	        	f_modorval = cycle(f_modorval + 1, 0 , 9);
	            UpdateScreen = TRUE; 
	    	}
	      BlockButtons(); 
	    }
	}
	if(!MainMenu) 
	{
		if(!get_val(Ads))
		{
			if(event_press(PS4_RIGHT))  
			{     
		        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
		        UpdateScreen = TRUE;   
	   		}     
			if(event_press(PS4_LEFT)) 
			{  
		        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
		        UpdateScreen = TRUE;
			} 
	     BlockButtons(); 
		}
	} 
    if(event_release(PS4_CROSS))
	{
		if(MainMenu) 
		{
		 	if(f_modorval >= 0 && f_modorval <=3 || f_modorval >= 5 && f_modorval <= 9)
		 	{
				ModMenu = TRUE;
				ModNameIdx = AmountOfModNameIdx + 1;
				MainMenu = FALSE;
				EditMenu = FALSE;
				UpdateScreen = TRUE;
			} 
	    }
	}
	if(event_press(PS4_CROSS))
	{
		if(ModMenu) 
		{
			if(f_modorval >= 0 && f_modorval <= 10 || f_modorval >= 12 && f_modorval <= 13) 
			{
				EditMenu = TRUE;
				ValNameIdx = AmountOfValNameIdx + 1; 
				ModMenu = FALSE;
				MainMenu = FALSE; 
				UpdateScreen = TRUE;
			}
		}	
    }
    if(event_release(PS4_CIRCLE) && !MainMenu)
    {
    	if(ModMenu) 
    	{
			MainMenu = TRUE;
			ModMenu = FALSE;
			UpdateScreen = TRUE;
			DisplayTitle = FALSE;
		}
		else if(EditMenu) 
		{
			EditMenu = FALSE;
			ModMenu  = TRUE;
			UpdateScreen = TRUE;	
		}
	}
	if(event_press(PS4_TRIANGLE)) 
	{ 
		ProfileIdx = cycle(ProfileIdx + 1, 0, AmountOfProfileIdx);
		UpdateScreen = TRUE;   	
	}
    BlockButtons();
return f_modorval; 
}
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function ButtonActivation(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_UP) || event_press(PS4_DOWN))
     	{
			 QuickToggleActive =! QuickToggleActive;
			 UpdateScreen = TRUE;
     	}
     	if(!QuickToggleActive)
     	{
		 	 ToggleWidth    = OLED_FONT_SMALL_WIDTH;
		 	 ToggleFont     = OLED_FONT_SMALL;
		 	 TogglePosition = 50;
		 	 ToggleWidth1   = OLED_FONT_MEDIUM_WIDTH;
		 	 ToggleFont1    = OLED_FONT_MEDIUM;
		}
	 	else
	    {
		     ToggleWidth    = OLED_FONT_MEDIUM_WIDTH;
		     ToggleFont     = OLED_FONT_MEDIUM;
		     TogglePosition = 43;
		     ToggleWidth1   = OLED_FONT_SMALL_WIDTH;
		     ToggleFont1    = OLED_FONT_SMALL;
	    } 
	   
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(!QuickToggleActive) 
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 6 ); 
             	else 
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             		UpdateScreen = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(!QuickToggleActive)
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 6 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
             		UpdateScreen = TRUE;
            }
        }
        printf(center_x(get_HoldButton_chars(ActivateHoldBtnIdx[i])  ,ToggleWidth1),30,ToggleFont1,OLED_WHITE,HoldButtons[ActivateHoldBtnIdx[i]]);
        printf(center_x(get_PressButton_chars(ActivatePressBtnIdx[i]),ToggleWidth),TogglePosition,ToggleFont,OLED_WHITE,PressButtons[ActivatePressBtnIdx[i]]); 
     }
 } 
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}

function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_PressButton_chars(f_idx){
	if (PressButtons[f_idx + 1] != -1) 
		return PressButtons[f_idx + 1] - PressButtons[f_idx] - 1;
	return sizeof(PressButtons) - PressButtons[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function get_HoldButton_chars(f_idx){
	if (HoldButtons[f_idx + 1] != -1) 
		return HoldButtons[f_idx + 1] - HoldButtons[f_idx] - 1;
	return sizeof(HoldButtons) - HoldButtons[f_idx];		
}
function get_weapon_chars(f_idx){
	if (Weapons[f_idx + 1] != -1) 
		return Weapons[f_idx + 1] - Weapons[f_idx] - 1;
	return sizeof(Weapons) - Weapons[f_idx];		
}
function get_loadout_chars(f_idx){
	if (Loadouts[f_idx + 1] != -1) 
		return Loadouts[f_idx + 1] - Loadouts[f_idx] - 1;
	return sizeof(Loadouts) - Loadouts[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
combo Blink1{
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
}			   
int Output;
function GetPolar (Current,Received) {         
    
    Output = Current / 10 + Received / 10;
    
        if(Output <= -3276) return -32768; 
        if(Output >=  3276) return  32767; 

    return Current + Received; 
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),39,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}
int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
//------------------------------------------------------------------------------
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
int mask;
int ret;
int pval_data;
function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}

function Load() {

	pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
	ToggleProgressive      [0]= unpack_usigned(pval_data, 0, 1);
    ToggleProgressive      [1]= unpack_usigned(pval_data, 1, 1);
    ToggleProgressive      [2]= unpack_usigned(pval_data, 2, 1);
    ToggleDoGzAA              = unpack_usigned(pval_data, 3, 1);
    Reducer                   = unpack_usigned(pval_data, 4, 1);
	ToggleRapidFire  [0]      = unpack_usigned(pval_data, 5, 1);
	ToggleRapidFire  [1]      = unpack_usigned(pval_data, 6, 1);
	ToggleRapidFire  [2]      = unpack_usigned(pval_data, 7, 1);
	ToggleAkimboRf   [0]      = unpack_usigned(pval_data, 8, 1);
	ToggleAkimboRf   [1]      = unpack_usigned(pval_data, 9, 1);
	ToggleAkimboRf   [2]      = unpack_usigned(pval_data,10, 1);
	ToggleBurstFire           = unpack_usigned(pval_data,11, 1);
    ToggleStrafeShot          = unpack_usigned(pval_data,12, 1);
    
    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    ToggleQuickScope          = unpack_usigned(pval_data,0, 1);
    ToggleHoldBreath          = unpack_usigned(pval_data,1, 1);
	ToggleTaylorSens       	  = unpack_usigned(pval_data,2, 1);
	ToggleProneShot           = unpack_usigned(pval_data,3, 1);
    ToggleJumpShot            = unpack_usigned(pval_data,4, 1);
    ToggleBunnyHop            = unpack_usigned(pval_data,5, 1);
    ToggleFastMelee           = unpack_usigned(pval_data,6, 1);
    ToggleEnemyPing           = unpack_usigned(pval_data,7, 1);
    ToggleMasterProfileSwitch = unpack_usigned(pval_data,8, 1);
    ToggleDefaultBtn          = unpack_usigned(pval_data,9, 1);
    ToggleBlockRumble         = unpack_usigned(pval_data,10, 1);
    RumbleBoost               = unpack_usigned(pval_data,11, 1); 
    
    pval_data = get_pvar(SPVAR_3, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleARType[0]          = unpack_int16_to_int8(pval_data, 0);
	ToggleTaylorAssist       = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_4, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleBattsAimAssist     = unpack_int16_to_int8(pval_data, 0);
	TriggerAction            = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_5, 1, 32767, pack_int8_to_int16(0, 0));
	TaylorShapes                = unpack_int16_to_int8(pval_data, 0);
	ToggleCancelSlide           = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_6, 1, 32767, pack_int8_to_int16(0,0));
	Buttons                     = unpack_int16_to_int8(pval_data, 0);
	ActivateIndividualBtnIdx    = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_7, -32767, 32767, 0);
	TaylorStrength  [0]       = unpack_int16_to_int8(pval_data, 0);
	TaylorStrength  [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_8, -32767, 32767, 0);
	TaylorStrength  [2]       = unpack_int16_to_int8(pval_data, 0);
	HorizStrength   [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_9, -32767, 32767, 0);
	HorizStrength   [1]       = unpack_int16_to_int8(pval_data, 0);
	HorizStrength   [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_10, -32767, 32767, 0);
	VerticalStart   [0]       = unpack_int16_to_int8(pval_data, 0);
	VerticalStart   [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_11, -32767, 32767, 0);
	VerticalStart   [2]       = unpack_int16_to_int8(pval_data, 0);
	VerticalEnd     [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_12, -32767, 32767, 0);
	VerticalEnd     [1]       = unpack_int16_to_int8(pval_data, 0);
	VerticalEnd     [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_13, 1, 32767, 0);
	VerticalTime    [0]       = unpack_int16_to_int8(pval_data, 0);
	VerticalTime    [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_14, 1, 32767, 0);
	VerticalTime    [2]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalTime  [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_15,-32767, 32767, 0);
	HorizontalStart [0]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalStart [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_16,-32767, 32767, 0);
	HorizontalStart [2]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalEnd   [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_17,-32767, 32767, 0);
	HorizontalEnd   [1]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalEnd   [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_18, 1, 32767, 0);
	HorizontalTime    [1]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalTime    [2]       = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_19, 1, 32767, pack_int8_to_int16(15,15));
	TaylorRadius                = unpack_int16_to_int8(pval_data, 0);
	TaylorAngle                 = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_20, 1, 32767, pack_int8_to_int16(8,5));
	DeadZone                  = unpack_int16_to_int8(pval_data, 0);
	TaylorRadiusMin           = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_21, 1, 32767, pack_int8_to_int16(10,5));
	TaylorBoost                = unpack_int16_to_int8(pval_data, 0);      
	TaylorAngleBoost           = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_22, 1, 32767, pack_int8_to_int16(15,10));
	AimAssistSize          = unpack_int16_to_int8(pval_data, 0);
	AimAssistTime          = unpack_int16_to_int8(pval_data, 1);
	

	pval_data = get_pvar(SPVAR_23, 1, 32767, pack_int8_to_int16(10,8));
	StickyBoost              = unpack_int16_to_int8(pval_data, 0);
	PolarPower               = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_24, 1, 32767, pack_int8_to_int16(20,5));
	PolarSpeed               = unpack_int16_to_int8(pval_data, 0);
	PowerBoost               = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_25, 1, 32767, pack_int8_to_int16(20,20));
	SpeedBoost               = unpack_int16_to_int8(pval_data, 0);
	PolarRelease             = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_26, 1, 32767, pack_int8_to_int16(7,2));
	ProgPower                = unpack_int16_to_int8(pval_data, 0);
	ProgWait                 = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_27, 1, 32767, pack_int8_to_int16(25,5));
	ProgressionRelease       = unpack_int16_to_int8(pval_data, 0);
	DoGzPower                = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_28, 1, 32767, pack_int8_to_int16(1,1));
	RateOfFire        [0]       = unpack_int16_to_int8(pval_data, 0);
	RateOfFire        [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_29, 1, 32767, pack_int8_to_int16(1,1));
	RateOfFire        [2]       = unpack_int16_to_int8(pval_data, 0);
	AkimboRoF         [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_30, 1, 32767, pack_int8_to_int16(1,1));
	AkimboRoF         [1]       = unpack_int16_to_int8(pval_data, 0);
	AkimboRoF         [2]       = unpack_int16_to_int8(pval_data, 1);
	
	BurstFireHold               = get_pvar(SPVAR_31,   1,   999,  150); 
   	BurstFireRelease            = get_pvar(SPVAR_32,   1,   999,  150); 
   	StrafeShotTime              = get_pvar(SPVAR_33,   1,   999,  500);
   	
   	pval_data = get_pvar(SPVAR_34, 1, 32767, pack_int8_to_int16(10,10));
	SniperStrength              = unpack_int16_to_int8(pval_data, 0);
	SniperTime                  = unpack_int16_to_int8(pval_data, 1);
	
	SteadyAim                   = get_pvar(SPVAR_35,   1,   90,  12);
	SniperGenSens               = get_pvar(SPVAR_36,   1, 327,  100);
	SniperAdsSens               = get_pvar(SPVAR_37,   1, 327,  100); 
    SniperFireSens              = get_pvar(SPVAR_38,   1, 327,  100); 
    SniperAdsFireSens           = get_pvar(SPVAR_39,   1, 327,  100); 
    QuickScopeDelay             = get_pvar(SPVAR_40,  50, 600,  350);
    
	GeneralSens                 = get_pvar(SPVAR_41,   1, 327,  100); 
	AdsSens                     = get_pvar(SPVAR_42,   1, 327,  100); 
    FireSens                    = get_pvar(SPVAR_43,   1, 327,  100);
	AdsFireSens                 = get_pvar(SPVAR_44,   1, 327,  100); 
	SlideCancelDelay            = get_pvar(SPVAR_45,   1, 200,  120); 
	
	pval_data = get_pvar(SPVAR_46, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [0]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[0]      = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_47, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [1]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[1]      = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_48, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [2]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[2]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_49, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [3]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[3]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_50, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [4]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[4]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_51, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [5]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[5]      = unpack_int16_to_int8(pval_data, 1);

	pval_data = get_pvar(SPVAR_52, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [6]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[6]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_53, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [7]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[7]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_54, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleARType[1]          = unpack_int16_to_int8(pval_data, 0);
	ToggleARType[2]          = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_55, 1, 32767, pack_int8_to_int16(0, 0));
	WeaponNamesIdx[0]          = unpack_int16_to_int8(pval_data, 0);
	WeaponNamesIdx[1]          = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_56, 1, 32767, pack_int8_to_int16(0, 0));
	WeaponNamesIdx[2]          = unpack_int16_to_int8(pval_data, 0);
	LoadoutIdx                 = unpack_int16_to_int8(pval_data, 1);
	
	ToggleSniperAssist 		   = get_pvar(SPVAR_57,   0,   3,  0);
		
  } 
function Save(){ 


  pval_data = pack_usigned(pval_data, ToggleProgressive      [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleProgressive      [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleProgressive      [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleDoGzAA                 ,3, 1);
  pval_data = pack_usigned(pval_data, Reducer                      ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [0]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [1]   ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [2]   ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [0]   ,8, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [1]   ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [2]  ,10, 1);
  pval_data = pack_usigned(pval_data, ToggleBurstFire             ,11, 1);
  pval_data = pack_usigned(pval_data, ToggleStrafeShot            ,12, 1);
  set_pvar(SPVAR_1,pval_data);
  
 
  pval_data = pack_usigned(pval_data, ToggleQuickScope             ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleHoldBreath             ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorSens             ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleProneShot              ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleJumpShot               ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleBunnyHop               ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleFastMelee              ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleEnemyPing              ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleMasterProfileSwitch   , 8, 1);
  pval_data = pack_usigned(pval_data, ToggleDefaultBtn            ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleBlockRumble           ,10, 1);
  pval_data = pack_usigned(pval_data, RumbleBoost                 ,11, 1);
  set_pvar(SPVAR_2,pval_data);
 
  pval_data = pack_int8_to_int16(ToggleARType[0],ToggleTaylorAssist);    
  set_pvar(SPVAR_3,pval_data); 
                                                                              
  pval_data = pack_int8_to_int16(ToggleBattsAimAssist,TriggerAction);    
  set_pvar(SPVAR_4,pval_data);  
                                                          
  pval_data = pack_int8_to_int16(TaylorShapes,ToggleCancelSlide);     
  set_pvar(SPVAR_5,pval_data);
  
  pval_data = pack_int8_to_int16(Buttons,ActivateIndividualBtnIdx);     
  set_pvar(SPVAR_6,pval_data);
                                                         
  pval_data = pack_int8_to_int16(TaylorStrength[0],TaylorStrength[1]);     
  set_pvar(SPVAR_7,pval_data);  
                                                      
  pval_data = pack_int8_to_int16(TaylorStrength[2],HorizStrength[0]);     
  set_pvar(SPVAR_8,pval_data);
  
  pval_data = pack_int8_to_int16(HorizStrength[1],HorizStrength[2]);     
  set_pvar(SPVAR_9,pval_data);
  
   pval_data = pack_int8_to_int16(VerticalStart[0],VerticalStart[1]);     
  set_pvar(SPVAR_10,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalStart[2],VerticalEnd[0]);     
  set_pvar(SPVAR_11,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalEnd[1],VerticalEnd[2]);     
  set_pvar(SPVAR_12,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalTime[0],VerticalTime[1]);     
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalTime[2],HorizontalTime[0]);     
  set_pvar(SPVAR_14,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalStart[0],HorizontalStart[1]);     
  set_pvar(SPVAR_15,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalStart[2],HorizontalEnd[0]);     
  set_pvar(SPVAR_16,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalEnd[1],HorizontalEnd[2]);     
  set_pvar(SPVAR_17,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalTime[1],HorizontalTime[2]);     
  set_pvar(SPVAR_18,pval_data);
                                                     
  pval_data = pack_int8_to_int16(TaylorRadius,TaylorAngle);     
  set_pvar(SPVAR_19,pval_data);
                                                      
  pval_data = pack_int8_to_int16(DeadZone,TaylorRadiusMin);     
  set_pvar(SPVAR_20,pval_data);
  
  pval_data = pack_int8_to_int16(TaylorBoost,TaylorAngleBoost);     
  set_pvar(SPVAR_21,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistSize,AimAssistTime);     
  set_pvar(SPVAR_22,pval_data);
  
  pval_data = pack_int8_to_int16(StickyBoost,PolarPower);     
  set_pvar(SPVAR_23,pval_data);
  
  pval_data = pack_int8_to_int16(PolarSpeed,PowerBoost);     
  set_pvar(SPVAR_24,pval_data);
  
  pval_data = pack_int8_to_int16(SpeedBoost,PolarRelease);     
  set_pvar(SPVAR_25,pval_data);
  
  pval_data = pack_int8_to_int16(ProgPower,ProgWait);     
  set_pvar(SPVAR_26,pval_data);
  
  pval_data = pack_int8_to_int16(ProgressionRelease,DoGzPower);     
  set_pvar(SPVAR_27,pval_data);
  
  pval_data = pack_int8_to_int16(RateOfFire[0],RateOfFire[1]);     
  set_pvar(SPVAR_28,pval_data);
  
  pval_data = pack_int8_to_int16(RateOfFire[2],AkimboRoF[0]);     
  set_pvar(SPVAR_29,pval_data);
  
  pval_data = pack_int8_to_int16(AkimboRoF[1],AkimboRoF[2]);     
  set_pvar(SPVAR_30,pval_data);
  
  set_pvar(SPVAR_31,BurstFireHold       );   
  set_pvar(SPVAR_32,BurstFireRelease    );  
  set_pvar(SPVAR_33,StrafeShotTime      ); 
  
  pval_data = pack_int8_to_int16(SniperStrength,SniperTime);     
  set_pvar(SPVAR_34,pval_data);
  
  set_pvar(SPVAR_35,SteadyAim      ); 
  set_pvar(SPVAR_36,SniperGenSens       );
  set_pvar(SPVAR_37,SniperAdsSens       ); 
  set_pvar(SPVAR_38,SniperFireSens      );
  set_pvar(SPVAR_39,SniperAdsFireSens   );  
  set_pvar(SPVAR_40,QuickScopeDelay     );   
  set_pvar(SPVAR_41,GeneralSens         ); 
  set_pvar(SPVAR_42,AdsSens             ); 
  set_pvar(SPVAR_43,FireSens            ); 
  set_pvar(SPVAR_44,AdsFireSens         ); 
  set_pvar(SPVAR_45,SlideCancelDelay    ); 
 
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[0],ActivatePressBtnIdx [0]);     
  set_pvar(SPVAR_46,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[1],ActivatePressBtnIdx [1]);     
  set_pvar(SPVAR_47,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[2],ActivatePressBtnIdx [2]);     
  set_pvar(SPVAR_48,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[3],ActivatePressBtnIdx [3]);     
  set_pvar(SPVAR_49,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[4],ActivatePressBtnIdx [4]);     
  set_pvar(SPVAR_50,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[5],ActivatePressBtnIdx [5]);     
  set_pvar(SPVAR_51,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[6],ActivatePressBtnIdx [6]);     
  set_pvar(SPVAR_52,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[7],ActivatePressBtnIdx [7]);     
  set_pvar(SPVAR_53,pval_data);
  
  pval_data = pack_int8_to_int16(ToggleARType[1],ToggleARType[2]);     
  set_pvar(SPVAR_54,pval_data);
  
  pval_data = pack_int8_to_int16(WeaponNamesIdx[0],WeaponNamesIdx[1]);     
  set_pvar(SPVAR_55,pval_data);
  
  pval_data = pack_int8_to_int16(WeaponNamesIdx[2],LoadoutIdx);     
  set_pvar(SPVAR_56,pval_data);
  
  set_pvar(SPVAR_57,ToggleSniperAssist);


} 








