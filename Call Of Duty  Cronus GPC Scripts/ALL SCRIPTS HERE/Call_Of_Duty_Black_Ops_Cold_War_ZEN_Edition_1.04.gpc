/*                                                                                                                                   
  ______      ___       __       __           ______    _______     _______   __    __  .___________.____    ____    
 /      |    /   \     |  |     |  |         /  __  \  |   ____|   |       \ |  |  |  | |           |\   \  /   /    
|  ,----'   /  ^  \    |  |     |  |        |  |  |  | |  |__      |  .--.  ||  |  |  | `---|  |----` \   \/   /     
|  |       /  /_\  \   |  |     |  |        |  |  |  | |   __|     |  |  |  ||  |  |  |     |  |       \_    _/      
|  `----. /  _____  \  |  `----.|  `----.   |  `--'  | |  |        |  '--'  ||  `--'  |     |  |         |  |        
 \______|/__/     \__\ |_______||_______|    \______/  |__|        |_______/  \______/      |__|         |__| 
 
                                    NUMBER 1 SCRIPT WORLDWIDE!!!!!                                                                                     
         .______    __           ___        ______  __  ___      ______   .______        _______.   
         |   _  \  |  |         /   \      /      ||  |/  /     /  __  \  |   _  \      /       |   
         |  |_)  | |  |        /  ^  \    |  ,----'|  '  /     |  |  |  | |  |_)  |    |   (----`   
         |   _  <  |  |       /  /_\  \   |  |     |    <      |  |  |  | |   ___/      \   \       
         |  |_)  | |  `----. /  _____  \  |  `----.|  .  \     |  `--'  | |  |      .----)   |      
         |______/  |_______|/__/     \__\  \______||__|\__\     \______/  | _|      |_______/ 
         
                                      50 BILLION DOWNLOADS                                                       
          ______   ______    __       _______     ____    __    ____      ___      .______      
         /      | /  __  \  |  |     |       \    \   \  /  \  /   /     /   \     |   _  \     
        |  ,----'|  |  |  | |  |     |  .--.  |    \   \/    \/   /     /  ^  \    |  |_)  |    
        |  |     |  |  |  | |  |     |  |  |  |     \            /     /  /_\  \   |      /     
        |  `----.|  `--'  | |  `----.|  '--'  |      \    /\    /     /  _____  \  |  |\  \----.
         \______| \______/  |_______||_______/        \__/  \__/     /__/     \__\ | _| `._____| v1.04
                                                                                         
                                    NO OTHER SCRIPT NEEDED!!!!!
                                    
        THIS SCRIPT IS SIMPLY THE BEST, THIS SCRIPT HAS EVERYTHING IN IT TO TAKE OUT YOUR OPPONENTS
        
                                      AND DOMINATE THEM!!!!!

.___________.     ___      ____    ____  __        ______   .______       _______  .______       __   _______ .___________. ___    __  
|           |    /   \     \   \  /   / |  |      /  __  \  |   _  \     |       \ |   _  \     |  | |   ____||           ||__ \  /_ | 
`---|  |----`   /  ^  \     \   \/   /  |  |     |  |  |  | |  |_)  |    |  .--.  ||  |_)  |    |  | |  |__   `---|  |----`   ) |  | | 
    |  |       /  /_\  \     \_    _/   |  |     |  |  |  | |      /     |  |  |  ||      /     |  | |   __|      |  |       / /   | | 
    |  |      /  _____  \      |  |     |  `----.|  `--'  | |  |\  \----.|  '--'  ||  |\  \----.|  | |  |         |  |      / /_   | | 
    |__|     /__/     \__\     |__|     |_______| \______/  | _| `._____||_______/ | _| `._____||__| |__|         |__|     |____|  |_| 
                                     
                                                  SCRIPT AUTHOR 
                                                                                                                                       
                                                                                                              
CREDITS... NOOZBAR,BATTS,DOGZTHEFIGHTER,NUKEONE a.k.a BONEFISHER,DONOTATME,SWIZZY,EXCALIBUR,ITZSNACKS,SWEET EVIL,DJANGOKILL...

Massive thank you to the guys above for their support, they are always helping me improve and for that I am grateful...

/*----------------------------------------------------------------------------------------------------------------------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SCRIPT INSTRUCTIONS PLEASE READ!!! //////////////////////////////////////
------------------------------------------------------------------------------------------------------------------------------
NOW THAT YOU HAVE CHOSEN YOUR BUTTONS... NOW TIME TO HAVE A QUICK READ OF THE INSTRUCTIONS TO ACCESS THE MENU ON THE ZEN... 
------------------------------------------------------------------------------------------------------------------------------
Enter Mod Menu... Hold L2/L2 and tap OPTIONS/Menu button... Exit Mod Menu by pressing CIRCLE/B...
------------------------------------------------------------------------------------------------------------------------------
Navigate Menu... Press Left & Right
------------------------------------------------------------------------------------------------------------------------------
Turn Mods ON/OFF... Press UP or DOWN 
------------------------------------------------------------------------------------------------------------------------------
Edit Mods (antirecoil for example) Press CROSS/A  < Editable values will display 
------------------------------------------------------------------------------------------------------------------------------
Change Values in Edit Menu... Hold L2 & Press Left or Right to increase or decrease a value by 1, UP or Down to increase by 10
------------------------------------------------------------------------------------------------------------------------------
Changing Profiles While in Mod Menu... Primary - Secondary... Press TRIANGLE/Y
------------------------------------------------------------------------------------------------------------------------------
PROFILE BUTTONS IN ZEN MENU... Profile buttons are used to change from your primary profile to secondary profile, you can 
choose 1 button press or 2 button press or you can use both...
------------------------------------------------------------------------------------------------------------------------------
1 Button Press Button... To Choose your button PRESS UP or DOWN to Select Your Buttons...
------------------------------------------------------------------------------------------------------------------------------
2 Button Press Button... To Choose your buttons HOLD L2 AND Press LEFT & RIGHT to Select Your Buttons...
------------------------------------------------------------------------------------------------------------------------------
If you accidentally change the profiles in game and want to get back to your correct profile, USE the re-sync button which 
will allow you to change profile without changing weapon in game, to use the resync button here is how...
------------------------------------------------------------------------------------------------------------------------------
Resync Profiles Without Changing Weapon In Game... Hold L3/LS and press TRIANGLE to return back to profile...
------------------------------------------------------------------------------------------------------------------------------
Saving all your values/toggles... While in the Mod Menu... Press XBOX/PS button... this will automatically SAVE and return to
title screen...
------------------------------------------------------------------------------------------------------------------------------
KillSwitch... The KillSwitch to activate... Hold L2/LT and Press SHARE/VIEW button... Hold CIRCLE/B to Deactivate KillSwitch
------------------------------------------------------------------------------------------------------------------------------

*/
 const int8 polar_LUT[] = {  /// DoNotAtMe Steady Aim ARRAY
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
};
const string _ON = "On"; 
const string _OFF = "Off"; 
int modName_idx,profile_idx,display_screen,count_black;
int amount_of_profiles = 2; 
define amount_of_editable_mods = 8;
define amount_of_values = 22; 
define modName_idx_max = 18;
define mods_not_on_all_profiles = 9;
int display_title = TRUE;
int SCREENSAVER; 
int toggle_legacyar[2];
int toggle_antirecoil[2];
int toggle_rapidfire[2];
int toggle_strafeShot[2]; 
int toggle_burstfire[2];
int toggle_taylorassist[2];
int toggle_batts_sticky[2];
int toggle_quickscope[2];
int toggle_holdbreath[2]; 
int toggle_DoGz_Recoil[2]; 
int antirecoil_start[2]; 
int antirecoil_end[2];
int antirecoil_time[2];
int antirecoil_horizontal[2]; 
int antirecoil_vertical[2]; 
int antirecoilH_start[2]; 
int antirecoilH_end[2];
int antirecoilH_time[2];
int AntirecoilVertical; 
int AntirecoilHorizontal;
int rate_of_fire[3];
int btn_layout;
int singlebutton_idx;
int active_name; 
int firstholdbutton_idx;
int secondpressbutton_idx;
int press = 0;
int hold_press = 0;
int second_press; 
int name_width;
int name_font;
int name_y;
int cat_width;
int cat_font;
int swap_on;
int inverted_on; 
int burstfire_hold;
int burstfire_release;
int strafeShot_time;
int toggle_jump_shot; 
int RADIUS; 
int STEADY_AIM,STEADY_VALUE;
int ARC_VAL; 
int ARC___VAL; 
int DIVIDE;
int DOGZ_RELEASE; 
int DOGZ_RUMBLE =  FALSE;
define _CROSS = 129;
define VIB_A      = RUMBLE_A;
int ARC,ARC__VAL,ARC____VAL,ARC_V;
int profile_1or2;
int killswitch;
int STEPS,stickyaim_size,stickyaim_time,quickscopedelay; 
define TRIANGLE = PS4_TRIANGLE,R1 = PS4_R1,L1 = PS4_L1,L2 = PS4_L2,R2 = PS4_R2,DOWN = PS4_DOWN,UP = PS4_UP;
define SSA1 = 84; define SSA2 = 65; define SSA3 = 89; define SSA4 = 76; define SSA5 = 79;define SSA6 = 82; define SSA7 = 68; define SSA8 = 82; define SSA9 = 73;define SSA10 = 70;
define SSA11 = 82;define SSA13 = 50;define SSA14 = 49;define SAVER = 5000;define SAVER1 = 10; int SSMU1 = 1;int SSMU2 = 8;int SSMU3 = 15;int SSMU4 = 22;int SSMU5 = 29;int SSMU6 = 36;
int SSMU7 = 43;int SSMU8 = 50;int SSMU9 = 57;int SSMU10 = 64;int SSMU11 = 71;int SSMU12 = 78;int SSMU13 = 85;int SSMU14 = 92;
// RapidFire / BurstFire
int hold_time;                                                    
int rest_time;
int led_on;
int led_off;
int cancel_slide,easy_plate,enemy_ping,valName_idx;
int q;											
int double__tap[30];
init {
while(q < 30) 
{double__tap[q] = -1;       
q++;}}
// Anti-Recoil Variables
int i_val;                                                        
int i_pnt;                                                        
int i_num;                                                        
int i_cnt;                                                        
int v,ar_y;
int invert; // -1 for inverted, 1 for standard
// Horizontal
int i_val_h;
int i_pnt_h;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;  
// DoNotAtMe Polar Aim
define ACTIVE_WHEN_ADS    =  TRUE;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  TRUE;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE 
define X                  =  PS4_RX;                                    
define Y                  =  PS4_RY;
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2; 
int time;                                             
int angle;                      
int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
  
    const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
   80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
   6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
   -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
   -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
   -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
   -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
   9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
   82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 
    
init {
    ScreenActive(TITLE_SCREEN);
    STEADY_AIM = (360 / STEADY_AIM) / 2;
    toggle_legacyar[0]       = get_pvar(SPVAR_1, 0, 1, 0 );     antirecoil_vertical[0]   = get_pvar(SPVAR_10, -99, 99, 20);
	toggle_antirecoil[0]     = get_pvar(SPVAR_2, 0, 1, 0 );     antirecoil_horizontal[0] = get_pvar(SPVAR_11, -99, 99, 0);
    toggle_rapidfire[0]      = get_pvar(SPVAR_3, 0, 1, 0 );     antirecoil_start[0]      = get_pvar(SPVAR_12, -99, 99, 0);         
    toggle_burstfire[0]      = get_pvar(SPVAR_4, 0, 1, 0);      antirecoil_end[0]        = get_pvar(SPVAR_13, -99, 99, 0); 
    toggle_strafeShot[0]     = get_pvar(SPVAR_5, 0, 1, 0);      antirecoil_time[0]       = get_pvar(SPVAR_14, -99, 99, 0);
    toggle_taylorassist[0]   = get_pvar(SPVAR_6, 0, 1, 0);      antirecoilH_start[0]     = get_pvar(SPVAR_15, -99, 99, 0);
    toggle_batts_sticky[0]   = get_pvar(SPVAR_7, 0, 1, 0);      antirecoilH_end[0]       = get_pvar(SPVAR_16, -99, 99, 0); 
    toggle_quickscope[0]     = get_pvar(SPVAR_8, 0, 1, 0);      antirecoilH_time[0]      = get_pvar(SPVAR_17, -99, 99, 0);	
    toggle_holdbreath[0]     = get_pvar(SPVAR_9, 0, 1, 0);      rate_of_fire[0]          = get_pvar(SPVAR_18,  1, 25, 1);
    toggle_DoGz_Recoil[0]    = get_pvar(SPVAR_59,0, 1, 0);
	                                                         
	toggle_legacyar[1]       = get_pvar(SPVAR_19, 0, 1, 0 );    antirecoil_vertical[1]   = get_pvar(SPVAR_28, -99, 99, 20);
	toggle_antirecoil[1]     = get_pvar(SPVAR_20, 0, 1, 0 );    antirecoil_horizontal[1] = get_pvar(SPVAR_29, -99, 99, 0);
    toggle_rapidfire[1]      = get_pvar(SPVAR_21, 0, 1, 0 );    antirecoil_start[1]      = get_pvar(SPVAR_30, -99, 99, 0);         
    toggle_burstfire[1]      = get_pvar(SPVAR_22, 0, 1, 0);     antirecoil_end[1]        = get_pvar(SPVAR_31, -99, 99, 0); 
    toggle_strafeShot[1]     = get_pvar(SPVAR_23, 0, 1, 0);     antirecoil_time[1]       = get_pvar(SPVAR_32, -99, 99, 0);
    toggle_taylorassist[1]   = get_pvar(SPVAR_24, 0, 1, 0);     antirecoilH_start[1]     = get_pvar(SPVAR_33, -99, 99, 0);
    toggle_batts_sticky[1]   = get_pvar(SPVAR_25, 0, 1, 0);     antirecoilH_end[1]       = get_pvar(SPVAR_34, -99, 99, 0); 
    toggle_quickscope[1]     = get_pvar(SPVAR_26, 0, 1, 0);     antirecoilH_time[1]      = get_pvar(SPVAR_35, -99, 99, 0);	
    toggle_holdbreath[1]     = get_pvar(SPVAR_27, 0, 1, 0);     rate_of_fire[1]          = get_pvar(SPVAR_36,  1, 25, 1);
    toggle_DoGz_Recoil[1]    = get_pvar(SPVAR_60, 0, 1, 0);
    
    burstfire_hold           = get_pvar(SPVAR_37,  1, 999, 150); 
   	burstfire_release        = get_pvar(SPVAR_38,  1, 999, 150); 
   	strafeShot_time          = get_pvar(SPVAR_39,  1, 999, 500); 
    RADIUS                   = get_pvar(SPVAR_40,  1, 99, 20 );
    STEPS                    = get_pvar(SPVAR_41,  1, 99, 20 );
    STEADY_AIM               = get_pvar(SPVAR_42,  1,  90,30 );
    stickyaim_size           = get_pvar(SPVAR_43,  1,  50,25 ); 
    stickyaim_time           = get_pvar(SPVAR_44,  1,  99,20 );
    quickscopedelay          = get_pvar(SPVAR_45, 50, 600,350);
    easy_plate               = get_pvar(SPVAR_46,  0,   1, 0 );   
    enemy_ping               = get_pvar(SPVAR_47,  0,   2, 0 );
    cancel_slide             = get_pvar(SPVAR_48,  0,   1, 0 ); 
    btn_layout               = get_pvar(SPVAR_49,  0,  11, 0 ); 
    swap_on                  = get_pvar(SPVAR_50,  0, 1, 0);
    inverted_on              = get_pvar(SPVAR_51,  0, 1, 0);	
    toggle_jump_shot         = get_pvar(SPVAR_52,  0, 1, 0);
    singlebutton_idx         = get_pvar(SPVAR_53,  0, 3, 0);
    firstholdbutton_idx      = get_pvar(SPVAR_54,  0, 4, 0);
    secondpressbutton_idx    = get_pvar(SPVAR_55,  0, 2, 0); 
    ARC_VAL                  = get_pvar(SPVAR_56, 99, 99, 40 );      
    DIVIDE                   = get_pvar(SPVAR_57,  10, 20, 3 ); 
    ARC___VAL                = get_pvar(SPVAR_58,  99,  99,60 );
    DOGZ_RELEASE             = get_pvar(SPVAR_59,  99,  99,40 );															
} 
main {
        Button_Layout();
        
        Switch_Buttons(); 
        
        CheckInput();  
  
		if(activeScreen == TITLE_SCREEN) {
		    TitleScreen();
		}
		if(activeScreen == MOD_MENU) {
		   ModMenu();
		}
		if(activeScreen == EDIT_MENU) {
		   EditMenu(); 		 	
        }
}   
/*
============================================================================================================================
   CheckInput() - Handles all controller input and sets active screen
============================================================================================================================
*/
function CheckInput() {
    //--Entering Mod Menu   
    if(get_val(AIM_BTN)) {
	    if(get_ival(XB1_MENU)) {
	        ScreenActive(MOD_MENU);
	     	  modName_idx = 0;                                                       
	    } 
   } 
   // Mod Menu
   if(activeScreen == MOD_MENU)
   {   
      if(modName_idx <= amount_of_editable_mods) 
      {
         if(event_press(PS4_CROSS))
         { 
             valName_idx = amount_of_values + 1;
             ScreenActive(EDIT_MENU);
         }
          block_function(); 
      } 
	  if(!get_ival(AIM_BTN))
	  { 
	       if(event_press(PS4_RIGHT))
	       { 
	            modName_idx ++;
	            if(modName_idx > modName_idx_max)
	            modName_idx = 0;
	            updateScreen = TRUE; 
	       } 
	       if(event_press(PS4_LEFT))
	       { 
	            modName_idx --; 
	            if(modName_idx < 0) 
			    modName_idx = modName_idx_max;
				updateScreen = TRUE; 
	       }
	 }
	 if(event_press(PS4_TRIANGLE))
     {
                profile_idx += 1;
                if(profile_idx > amount_of_profiles - 1) 
                profile_idx = 0;
     }
     if(event_press(PS4_PS))
     {
                Save(); 
          
     }
     if(event_press(PS4_CIRCLE)) 
     {
	      if(SCREEN_DATA[activeScreen][PARENT]) 
	      {
	           ScreenActive(TITLE_SCREEN);
	           display_title = TRUE; 
	      }
	          	                     	
	      } 
	 }
// Edit Menu
     if(activeScreen == EDIT_MENU)
     {
          block_function();
          
          if(!get_val(AIM_BTN))
	      { 
	           if(event_press(PS4_RIGHT))
	           { 
	                valName_idx += 1; 
	                if(valName_idx > 22) 
	                valName_idx = 0;
	                updateScreen = TRUE;
	           } 
	           if(event_press(PS4_LEFT))
	           { 
	               valName_idx -= 1; 
	               if(valName_idx < 0) 
	               valName_idx = 22;
	               updateScreen = TRUE; 
	           }
	           if(modName_idx == 0) mod_limits (0,1); 
               if(modName_idx == 1) mod_limits (2,7);
               if(modName_idx == 2) mod_limits (8,12);
               if(modName_idx == 3) mod_limits (13,13); 
               if(modName_idx == 4) mod_limits (14,15);
               if(modName_idx == 5) mod_limits (16,18);
               if(modName_idx == 6) mod_limits (19,20);
               if(modName_idx == 7) mod_limits (21,21);  
               if(modName_idx == 8) mod_limits (22,22); 
              
	     }
	     if(event_press(PS4_CIRCLE))
	     {
	          if(SCREEN_DATA[activeScreen][PARENT])
	          {
	                 ScreenActive(lastScreen);                                            
	          }
	         
	     }           
	    
 }
 if(!activeScreen == MOD_MENU)
 {
 if (event_press(PS4_SHARE) && ((!swap_on && get_ival(AIM_BTN)) || (swap_on && get_ival(TACTICAL_BTN)))) 
 { 
    		  killswitch = TRUE; 
    		  combo_run(KILLSWITCH); 
    		  }
    		  if(killswitch){
              set_ledx(1, 1);
              }
              if(killswitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) 
              { 
              killswitch = FALSE; 
              combo_run(KILLSWITCH_OFF);                   
 
                }
				if(press && event_release(press)&& get_ptime(press)<150 || (get_val(PS4_L3) && event_release(PS4_TRIANGLE)))
        		{
        	    	profile_1or2=!profile_1or2;
        	    	display_title = TRUE; 	
    			}
           		if(hold_press &&  get_ival(hold_press) && event_release(second_press))
        		{
        	    	profile_1or2=!profile_1or2;
        	    	display_title = TRUE; 	
        }
    	if(get_val(PS4_L3))
    	    set_val(PS4_TRIANGLE, 0);
   
        // If Profile 2
        	if(profile_1or2)
        		profile_idx = 1;
     
        // If Profile 1
        	else	
        		profile_idx = 0;
}   
if(!activeScreen == MOD_MENU && !killswitch)
{
        deadzone(PS4_L2,PS4_R2,99,99);
        
        if(toggle_legacyar[profile_idx] == 1)
        {
		if(get_val(FIRE_BTN))
			combo_run(ANTIRECOIL);
		  else
			combo_stop(ANTIRECOIL);
	     
	}
// If Anti-Recoil is enable for the active profile , Made by Batts & Noozbar 
	if(toggle_antirecoil[profile_idx] == 1)
	{
	// Antirecoil by Batts	
		// Vertical
    	if( antirecoil_start[profile_idx] < antirecoil_end[profile_idx])
    	    i_val = 1; 
    	else
    	    i_val = -1;
        
    	i_pnt = (antirecoil_time[profile_idx] * 10) / (abs(antirecoil_start[profile_idx] - antirecoil_end[profile_idx])); 
    	
    	// Horizontal		
    	if(antirecoilH_start[profile_idx] < antirecoilH_end[profile_idx])
    	    i_val_h = 1; 
    	else
    	    i_val_h = -1;
        
    	i_pnt_h = (antirecoilH_time[profile_idx] * 10) / (abs(antirecoilH_start[profile_idx] - antirecoilH_end[profile_idx])); 
    	
    	if(!get_val(FIRE_BTN)) 
   		{
   			// Vertical
   			ar_y = antirecoil_start[profile_idx];
   			i_cnt = 0;
   			i_num = 0;
   			
   			// Horizontal
   			ar_x = antirecoilH_start[profile_idx];
   			i_cnt_h = 0;
   			i_num_h = 0;
   		}   
    	
    	if(toggle_burstfire[profile_idx] != 1 && get_val(AIM_BTN) && get_val(FIRE_BTN) || toggle_burstfire[profile_idx] == 1 && get_val(FIRE_BTN) && get_ptime(FIRE_BTN) <= hold_time)
    	{
   		    // Vertical
   		    if(!p_complete())  
   		        ar_y = p_val();
   		    else
   		        ar_y = antirecoil_end[profile_idx];
            
			if(y_val() < 100)
    	   		set_val(PS4_RY,y_val()); 
    	   		
    	   	// Horizontal	
   		    if(!p_complete_x())  
   		        ar_x = p_val_x();
   		    else
   		        ar_x = antirecoilH_end[profile_idx];
            
			if(x_val() < 100)
    	   		set_val(PS4_RX,x_val()); 
   		}		
	}
	// DoGzTheFiGhTeR made the DoGz Recoil if you didn't already know that by the name LOL 
	if (toggle_DoGz_Recoil[profile_idx] == 1) {
    if (DOGZ_RUMBLE) {
    if (get_ival (AIM_BTN) && get_ival (FIRE_BTN) && abs(get_ival(PS4_RY)) <= DOGZ_RELEASE && abs(get_ival(PS4_RX)) <= DOGZ_RELEASE && get_rumble(VIB_A)) {
	ARC = TRUE;
	DoGz_ARC();
	}
}
	else
    if (!DOGZ_RUMBLE && get_val(AIM_BTN) && get_val(FIRE_BTN) > 70 && abs(get_ival(PS4_RY)) <= DOGZ_RELEASE && abs(get_ival(PS4_RX)) <= DOGZ_RELEASE) {
	ARC = TRUE;
	DoGz_ARC();
	}	
    if (event_release(AIM_BTN) || event_release(FIRE_BTN)) {
	ARC = FALSE;
	}
}
	// If RapidFire is enable for the active profile // This Rapid Fire was From NoozBar
	if(toggle_rapidfire[profile_idx] == 1)
	{
	// Rate of Fire Calculation
    	hold_time = 500 / rate_of_fire[profile_idx]; 
   		rest_time = hold_time - 20;
    	if(rest_time < 0) rest_time = 0;
    
    // Run combo
    	if(get_val(FIRE_BTN))
    		combo_run(RAPIDFIRE);
    	else
    		combo_stop(RAPIDFIRE);
    		
    	led_on = 150;
    	led_off = 300;
    	combo_run(BLINK);
	}
	// If BurstFire is enable for the active profile // NoozBar
	if(toggle_burstfire[profile_idx] == 1)
	{
    // Hold and Release
		hold_time = burstfire_hold;
		rest_time = burstfire_release;
			
    // Run combo
    	if(get_val(PS4_R2))	
    		combo_run(BURSTFIRE);
    	else
    		combo_stop(BURSTFIRE);

		led_on = 200;
    	led_off = 1000;
    	combo_run(BLINK);
	}
	/// The ORIGINAL CREATOR of this is DoNotAtMe, He created the Polar Aim and Steady Aim... I just put them both together to create a great Aim Assist hence why I called it by my name :) 
	if(toggle_taylorassist[profile_idx] == 1)
	{
    
      vm_tctrl(VM_INTERVAL); 
                         
      actual_X = get_val(X);   
      actual_Y = get_val(Y);           
      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
      max_Magnitude = (actual_Magnitude < 100);                      
                                                                  
      if(!(time++ % STEP_INTERVAL)){                                  
	         angle += STEPS;                                                 
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * RADIUS) / 100;                         
      sin_angle = (sin_angle * RADIUS) / 100;                          
                                                                         
      if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN))))
   	  { 
    	 vm_tctrl(VM_INTERVAL);
           if(actual_Magnitude <= RADIUS){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
           }                                                  
           set_val(X, calculate(actual_X + cos_angle, -100, 100));
           set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
     }
     else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) {
    			vm_tctrl(0); 
  	 }
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
			
	} 
	// Batts is the creator of Sticky Aim, we need this in any script :D  
    if(toggle_batts_sticky[profile_idx] == 1) 
    {
       if(get_val(FIRE_BTN))
           combo_run(STICKY_AIM);
       else 
           combo_stop(STICKY_AIM); 
    }
    if(toggle_strafeShot[profile_idx] == 1) // Noozbar
	{
		// Run combo
	   if(get_val(PS4_R2))
		   combo_run(STRAFESHOT);
	   else
		   combo_stop(STRAFESHOT);
	}
	if(toggle_quickscope[profile_idx] == 1) // ItzSnackz
    {
	   if(!swap_on && event_release(AIM_BTN) && get_ptime(AIM_BTN) < 140 || swap_on && event_release(TACTICAL_BTN) && get_ptime(TACTICAL_BTN) < 140)
  	       combo_run(Quick_Scope);
    }
    if(toggle_holdbreath[profile_idx] == 1) // ItzSnackz
    {
	   if(get_val(AIM_BTN))
		   set_val(SPRINT_BTN, 100);
	                      
	   if(get_val(PS4_LY) <-90 && get_val(AIM_BTN) && get_ptime(AIM_BTN) > 200)
	       combo_stop(CH);       
	                    
	   if(event_press(AIM_BTN)) 
	       combo_run(CH);
	  
	   if(get_val(AIM_BTN) && get_lval(SPRINT_BTN)) 
	       set_val(SPRINT_BTN, 0);       
    }
    if(toggle_jump_shot) // ItzSnackz 
    {
       if(get_val(FIRE_BTN)) 
          combo_run(JUMP_ON_SHOT); 
    } 
    if(easy_plate) // I don't who the original author is however I made some improvements (Credit to who done this) 
    {
	   if(get_val(SWITCH_BTN)&&get_ptime(SWITCH_BTN)>350)
		   combo_run(easy_plate);
			    
	   if(get_val(AIM_BTN)>10 || get_val(FIRE_BTN)>10 || get_val(RELOAD_BTN))
		   combo_stop(easy_plate);	
    }
    if(enemy_ping == 1) // Not sure of Author but I made some improvements to this too (Credit to who done this) 
    {
       if(get_val(AIM_BTN) && double_click(PS4_UP))
	       combo_run(AUTO_PING); 
    }
    if(enemy_ping == 2)
    {
       if(get_val(AIM_BTN) && double_click(PS4_UP))
	       combo_run(AUTO_PING);
	   if(!swap_on && event_press(FIRE_BTN) || swap_on && event_press(LETHAL_BTN))
           combo_run(AUTO_PING);        			 
    }
    if(cancel_slide) // Skadzey made this I think   
    {                                                                                                  
	   if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
	   {
		  if(event_release (CROUCH_BTN))
			   combo_run(CANCEL_SLIDE)                                            
		  }                                 
    } 
	if(inverted_on)
			invert = -1;
		else
			invert = 1;
  }
}	 
/*
============================================================================================================================
   Functions() for each of the screens
============================================================================================================================
*/        
function TitleScreen (){ 
if(display_title){ 
cls_oled(0);
SCREENSAVER = FALSE; 
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
printf(center_x(get_char(MISC_TXT, 0), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 0));
printf(center_x(get_char(MISC_TXT, 1), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 1));
printf(center_x(get_char(MISC_TXT, 2), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 2));

if(profile_idx == 0) 
         printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  
 if(profile_idx == 1)
         printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 
         
  display_title = FALSE;
  display_screen = TRUE; 
 }
 if(display_screen)
 {
     count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_screen = FALSE;
    		SCREENSAVER = TRUE; 
    	}
} 
 if (SCREENSAVER) { 
		DGT += get_rtime();
		if (DGT >= 100) {
			SD1 += 2;
			TP1 += 1;
			TP2 -= 1;
			DGT  = 0;
		}
				DGR += get_rtime();
				
				if (DGR >= 30) {
					Y_1 += 1;
					Y_2 += 2;
					Y_3 += 3;
					Y_4 += 4;
					Y_5 += 5;
					Y_6 += 6;
					Y_7 += 7;
					Y_8 += 8;
					DGR  = 0;
				}
						NAME();
						MSC += get_rtime();
						if(MSC >= 1000) {
							MSC = 0;
							RT += 1;
						}
							if(RT == 90) {
								SCREENSAVER = 0;
								RT = 0;
								cls_oled(0);		
							}
						}
 if(killswitch)
    led(7);
 else
    led(profile_idx); 
}
function ModMenu(){ 
if(updateScreen){
  cls_oled(0);
  rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
  line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
  printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx]);
  
if(modName_idx == 0){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 toggle_legacyar[profile_idx] = !toggle_legacyar[profile_idx]; 
   }
if(toggle_legacyar[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_legacyar[profile_idx]){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}     
if(modName_idx == 1){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 toggle_antirecoil[profile_idx] = !toggle_antirecoil[profile_idx]; 
   }
if(toggle_antirecoil[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_antirecoil[profile_idx]){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}
if(modName_idx == 2){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 toggle_DoGz_Recoil[profile_idx] = !toggle_DoGz_Recoil[profile_idx]; 
   }
if(toggle_DoGz_Recoil[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_DoGz_Recoil[profile_idx]){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}
if(modName_idx == 3) {
     if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                toggle_rapidfire[profile_idx] =! toggle_rapidfire[profile_idx];
     }
if(toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 4) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_burstfire[profile_idx] = !toggle_burstfire[profile_idx]; 
   }
if(toggle_burstfire[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_burstfire[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
    }
  }
if(modName_idx == 5) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_taylorassist[profile_idx] = !toggle_taylorassist[profile_idx]; 
   }
if(toggle_taylorassist[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_taylorassist[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
    }
  }
if(modName_idx == 6) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_batts_sticky[profile_idx] =! toggle_batts_sticky[profile_idx];
   }
if(toggle_batts_sticky[profile_idx]){
       printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_batts_sticky[profile_idx]){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
   }
}
if(modName_idx == 7) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_strafeShot[profile_idx] =! toggle_strafeShot[profile_idx];
   }
if(toggle_strafeShot[profile_idx]){
       printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_strafeShot[profile_idx]){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
   }
}
if(modName_idx == 8){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_quickscope[profile_idx] =! toggle_quickscope[profile_idx];
}
if(toggle_quickscope[profile_idx]){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_quickscope[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 9){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_holdbreath[profile_idx] =! toggle_holdbreath[profile_idx];
}
if(toggle_holdbreath[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_holdbreath[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 10){ 
 if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_jump_shot =! toggle_jump_shot;
}
if(toggle_jump_shot){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_jump_shot){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 11){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       cancel_slide =! cancel_slide;
}
if(cancel_slide){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!cancel_slide){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(modName_idx == 12){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       easy_plate =! easy_plate;
}
if(easy_plate){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
   }
if(!easy_plate){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 13){
                            if(event_press(XB1_UP)) 
                            {
                                 enemy_ping += 1;
                                 if(enemy_ping > 2) 
 	                             enemy_ping = 0;           
                            }
                            if(event_press(XB1_DOWN)) 
                            {
                                 enemy_ping -= 1; 
                                 if(enemy_ping < 0) 
 	                             enemy_ping = 2;   
                            } 

if(enemy_ping == 0){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
if(enemy_ping == 1){
     printf(center_x(get_char(MISC_TXT, 18), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 18));   
}
if(enemy_ping == 2){
     printf(center_x(get_char(MISC_TXT, 19), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 19));
     }
}
if(modName_idx == 14) { 
  printf(center_x(get_singlebutton_chars(singlebutton_idx), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SINGLEBUTTON[singlebutton_idx]);
  
if(event_press(PS4_DOWN))
{
              singlebutton_idx ++; 
              if(singlebutton_idx > 3 ) singlebutton_idx = 0;
              
        }   
        if(event_press(PS4_UP))
        {
              singlebutton_idx --; 
              if(singlebutton_idx < 0) singlebutton_idx = 3; 
             
        }
}
if(modName_idx == 15){ 
   if(event_press(PS4_UP) || event_press(PS4_DOWN))
   {
		active_name = !active_name; 	
   }
   if(!active_name)
   {
		name_width = OLED_FONT_SMALL_WIDTH;
		name_font = OLED_FONT_SMALL;
		name_y = 50;
		cat_width = OLED_FONT_MEDIUM_WIDTH;
		cat_font = OLED_FONT_MEDIUM;
	}
	else
	{
		name_width = OLED_FONT_MEDIUM_WIDTH;
		name_font = OLED_FONT_MEDIUM;
		name_y = 43;
		cat_width = OLED_FONT_SMALL_WIDTH;
		cat_font = OLED_FONT_SMALL;
	} 
	if(get_ival(AIM_BTN))
	{
    if(event_press(PS4_RIGHT)) 
    {
       if(!active_name) 
       firstholdbutton_idx += 1; 
       else 
       secondpressbutton_idx += 1;  
   }        
   if(event_press(PS4_LEFT)) 
   {
      if(!active_name)
      firstholdbutton_idx -= 1;    
      else
      secondpressbutton_idx -= 1;
   } 
   if(firstholdbutton_idx > 4) firstholdbutton_idx = 0; 
   if(secondpressbutton_idx > 2) secondpressbutton_idx = 0; 
   if(firstholdbutton_idx < 0) firstholdbutton_idx = 4;
   if(secondpressbutton_idx < 0) secondpressbutton_idx = 2;  
 }
} 
if(modName_idx == 16){ 
printf(center_x(get_button_chars(btn_layout), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER[btn_layout]);
if(event_press(PS4_UP))
{
       
            btn_layout += 1;
            if(btn_layout > 11) 
            btn_layout = 0;
}
if(event_press(PS4_DOWN))
{
      
            btn_layout -= 1; 
            if(btn_layout < 0)
            btn_layout = 11;
       }
}
if(modName_idx == 17){ 
 if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       swap_on =! swap_on;
}
if(swap_on){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!swap_on){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 18){ 
 if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       inverted_on =! inverted_on;
}
if(inverted_on){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!inverted_on){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
  
} 
if(modName_idx == 14){ 
     
      printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
 
} 
if(modName_idx == 15){ 
     printf(center_x(get_doublebutton_chars(firstholdbutton_idx), cat_width),30,cat_font,OLED_WHITE,FIRSTHOLDBUTTON[firstholdbutton_idx]);
     printf(center_x(get_doublepressbutton_chars(secondpressbutton_idx), name_width),name_y,name_font,OLED_WHITE,SECONDPRESSBUTTON[secondpressbutton_idx]);
}
else if(modName_idx  < mods_not_on_all_profiles)  
{
if(profile_idx == 0) 
     printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
else if(profile_idx == 1)
     printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 

     }
   } 
 }
   
function EditMenu(){ 
if(updateScreen){ 
cls_oled(0); 
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
printf(center_x(get_valName_chars(valName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES[valName_idx]);
if(valName_idx == 0) {
      Display_Values(valName_idx,antirecoil_vertical[profile_idx]);
      antirecoil_vertical[profile_idx] = Edit_Values(antirecoil_vertical[profile_idx],0,99,1,10);    
      }
if(valName_idx == 1) {
      Display_Values(valName_idx,antirecoil_horizontal[profile_idx]);
      antirecoil_horizontal[profile_idx] = Edit_Values(antirecoil_horizontal[profile_idx],-99,99,1,10);
      }

if(valName_idx == 2) {
      Display_Values(valName_idx,antirecoil_start[profile_idx]);
      antirecoil_start[profile_idx] = Edit_Values(antirecoil_start[profile_idx],0,99,1,10);    
      }
if(valName_idx == 3) {
      Display_Values(valName_idx,antirecoil_end[profile_idx]);
      antirecoil_end[profile_idx] = Edit_Values(antirecoil_end[profile_idx],0,99,1,10);
      }
if(valName_idx == 4) {
      Display_Values(valName_idx,antirecoil_time[profile_idx]);
      antirecoil_time[profile_idx] = Edit_Values(antirecoil_time[profile_idx],0,99,1,10);
      }
if(valName_idx == 5) { 
      Display_Values(valName_idx,antirecoilH_start[profile_idx]);
      antirecoilH_start[profile_idx] = Edit_Values(antirecoilH_start[profile_idx] ,-99 , 99 , 1 , 10); 
      }
if(valName_idx == 6) { 
      Display_Values(valName_idx,antirecoilH_end[profile_idx]);
      antirecoilH_end[profile_idx] = Edit_Values(antirecoilH_end[profile_idx] ,-99 , 99 , 1 , 10); 
      }      
if(valName_idx == 7) { 
      Display_Values(valName_idx,antirecoilH_time[profile_idx]);
      antirecoilH_time[profile_idx] = Edit_Values(antirecoilH_time[profile_idx] ,0 , 99 , 1 , 10); 
      } 
if(valName_idx == 8) { 
      Display_Values(valName_idx,ARC_VAL);
      ARC_VAL = Edit_Values(ARC_VAL,0,100,1,10);
      }
if(valName_idx == 9) {
      Display_Values(valName_idx,ARC___VAL);
      ARC___VAL = Edit_Values(ARC___VAL,0,100,1,10);
      } 
if(valName_idx == 10) {
      Display_Values(valName_idx,DIVIDE);
      DIVIDE = Edit_Values(DIVIDE,-10,20,1,10);
      }
if(valName_idx == 11) {
      Display_Values(valName_idx,DOGZ_RELEASE);
      DOGZ_RELEASE = Edit_Values(DOGZ_RELEASE,0,100,1,10);
}
if(valName_idx == 12) {
       if(event_press(PS4_UP) || event_press(PS4_DOWN)){
              DOGZ_RUMBLE =! DOGZ_RUMBLE;
}
if(DOGZ_RUMBLE){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!DOGZ_RUMBLE){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}
if(valName_idx == 13) {
      Display_Values(valName_idx,rate_of_fire[profile_idx]);
      rate_of_fire[profile_idx] = Edit_Values(rate_of_fire[profile_idx],0,25,1,10);
      }
if(valName_idx == 14) { 
      Display_Values(valName_idx,burstfire_hold); 
      burstfire_hold    = Edit_Values(burstfire_hold , 0 , 990  , 10 , 100);
      }
if(valName_idx == 15) { 
      Display_Values(valName_idx,burstfire_release); 
      burstfire_release = Edit_Values(burstfire_release , 0 , 990  , 10 , 100);
      }
if(valName_idx == 16) { 
      Display_Values(valName_idx,RADIUS);
      RADIUS = Edit_Values(RADIUS,0,99,1,10);
      }
if(valName_idx == 17) {
      Display_Values(valName_idx,STEPS);
      STEPS = Edit_Values(STEPS,0,99,1,10);
      }
if(valName_idx == 18) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
      } 
if(valName_idx == 19) { 
      Display_Values(valName_idx,stickyaim_size);
      stickyaim_size = Edit_Values(stickyaim_size,0,99,1,10);
      }
if(valName_idx == 20) { 
      Display_Values(valName_idx,stickyaim_time);
      stickyaim_time = Edit_Values(stickyaim_time,0,99,1,10);
      }
if(valName_idx == 21) { 
      Display_Values(valName_idx,strafeShot_time);
      strafeShot_time = Edit_Values(strafeShot_time , 0,  9990 , 10 , 100 );
     }
if(valName_idx == 22){ 
      Display_Values(valName_idx,quickscopedelay);
      quickscopedelay = Edit_Values(quickscopedelay,0,600,1,10);
      }
   } 
}

combo KILLSWITCH {
    cls_oled(OLED_BLACK)
    set_ledx(1, 1);
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 6));  
    printf(center_x(get_char(MISC_TXT, 7), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 7));  
    printf(center_x(get_char(MISC_TXT, 8), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 8));
    wait(2000)
    call(RUMBLE_ON);
    wait(130);
    call(RUMBLE_ON);
    ScreenActive(TITLE_SCREEN);
    display_title = TRUE; 
} 
combo KILLSWITCH_OFF { 
 cls_oled(OLED_BLACK); 
 rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
 printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));  
 wait(2000)
 call(RUMBLE_OFF);
 wait(130)
 ScreenActive(TITLE_SCREEN); 
 display_title = TRUE; 
}
combo RUMBLE_ON {						
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
}
combo RUMBLE_OFF {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
}
combo SAVE { 
	cls_oled(0);						
	printf(center_x(get_char(MISC_TXT, 9), OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 9));  
	wait(2000);
	ScreenActive(TITLE_SCREEN);
	display_title = TRUE; 
	call(RUMBLE_ON);
	wait(150);
	call(RUMBLE_ON);}	
	
	combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(PS4_RY) + antirecoil_vertical[profile_idx];  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) +  5)
    set_val(PS4_RY, (AntirecoilVertical * invert));
// Horizontal
    AntirecoilHorizontal = get_val(PS4_RX) + antirecoil_horizontal[profile_idx];
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx])  + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}
combo RAPIDFIRE { 
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time);
    }	
combo BLINK {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}
combo BURSTFIRE { 
    wait(hold_time);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
	call(RAPIDFIRE);
    }
    combo STRAFESHOT { // StrafeShot
    set_val(PS4_LX,xy_val(PS4_LX, 100));
    wait(strafeShot_time);
    wait(50);
    set_val(PS4_LX,xy_val(PS4_LX, 100*-1));
    wait(strafeShot_time);
    wait(50);
}
combo STICKY_AIM {
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
    wait(stickyaim_time);
    }
    combo CANCEL_SLIDE {              
    /*set_val(CROUCH_BTN, 100);          
    wait(120);                         
    set_val(CROUCH_BTN, 0);            
    wait(60);                          
    set_val(CROUCH_BTN, 100);          
    wait(50);                          
    set_val(CROUCH_BTN, 100);          
    set_val(JUMP_BTN, 100);           
    wait(60);                          
    set_val(CROUCH_BTN, 0);            
    set_val(JUMP_BTN, 100);          
    wait(10);                        
    set_val(JUMP_BTN, 0);*/
    
    wait(23);
    set_val(CROUCH_BTN, 100);
    wait(23);
    set_val(CROUCH_BTN, 100);
    wait(21);
    set_val(CROUCH_BTN, 0);
	wait(100);
} 
combo AUTO_PING{
    set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	}
combo Quick_Scope {
 set_val(AIM_BTN,100);
 wait(quickscopedelay); 
 set_val(AIM_BTN,100);
 set_val(FIRE_BTN,100);
 wait(40);
 set_val(AIM_BTN,100);
 wait(40); }        
   
 combo CH {
	set_val(SPRINT_BTN,0);
	wait(60);
	set_val(SPRINT_BTN,100);
	wait(110);
	set_val(SPRINT_BTN,0);
	wait(110);}

combo easy_plate {
	set_val(SWITCH_BTN,100);
	wait(6000)}//time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating 
combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}
 combo JUMP_ON_SHOT {
    set_val(JUMP_BTN,100);
    wait(100);}
    int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}
combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
function p_complete() { // Antirecoil

    i_cnt++;
    if(i_cnt > antirecoil_time[profile_idx] * 10) 
    {
        i_cnt = antirecoil_time[profile_idx] * 10;
        return 1;
    }    
    return 0;
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_val() { // Antirecoil

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function y_val() { // Antirecoil

    v = get_val(10);
    
    if(abs(v) < 10)
        v = 0;
        
    if(abs(v) > ar_y + 5)
        return v;
        
    return v + (ar_y * invert);           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > antirecoilH_time[profile_idx] * 10) 
    {
        i_cnt_h = antirecoilH_time[profile_idx] * 10 ;
        return 1;
    }
    return 0;
}   

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) 
    {
    	i_num_h = 0;
    	ar_x += i_val_h;
    }
    return ar_x;
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}

function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function Edit_Values(value,min,max,increase_value,increase_value_more) {  
 	    if(get_val(AIM_BTN) && event_press(PS4_RIGHT)) 
		{
			value += increase_value;                           
			if(value > max ) value = max;   	               	            
		}                                                                       
		if(get_val(AIM_BTN) && event_press(PS4_LEFT)) 
        {
			value -= increase_value;                           
			if(value < min ) value = min; 	        
		}
		if(get_val(AIM_BTN) && event_press(PS4_UP))
		{
		   value += increase_value_more;
		   if(value > max ) value = max; 
		}
		if(get_val(AIM_BTN) && event_press(PS4_DOWN))
		{
		   value -= increase_value_more;
		   if(value < min ) value = min;
		}
		return value;  
   }
   function Display_Values(idx,value) {
  
   if(valName_idx == idx)
   {
      if(idx == 4 || idx == 7)
    	number_to_string(value * 100, find_digits(value * 100) );
    else
      number_to_string(value, find_digits(value));             
   }
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
 function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}  
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; 
define MISC_TXT = 0 
function get_modName_chars(f_idx){
	if (MODNAMES[f_idx + 1] != -1) 
		return MODNAMES[f_idx + 1] - MODNAMES[f_idx] - 1;
	return sizeof(MODNAMES) - MODNAMES[f_idx];		
}
function get_valName_chars(f_idx){
	if (VALNAMES[f_idx + 1] != -1) 
		return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
	return sizeof(VALNAMES) - VALNAMES[f_idx];		
}
function get_button_chars(f_idx){
	if (CONTROLLER[f_idx + 1] != -1) 
		return CONTROLLER[f_idx + 1] - CONTROLLER[f_idx] - 1;
	return sizeof(CONTROLLER) - CONTROLLER[f_idx];		
}
function get_singlebutton_chars(f_idx){
	if (SINGLEBUTTON[f_idx + 1] != -1) 
		return SINGLEBUTTON[f_idx + 1] - SINGLEBUTTON[f_idx] - 1;
	return sizeof(SINGLEBUTTON) - SINGLEBUTTON[f_idx];		
}
function get_doublebutton_chars(f_idx){
	if (FIRSTHOLDBUTTON[f_idx + 1] != -1) 
		return FIRSTHOLDBUTTON[f_idx + 1] - FIRSTHOLDBUTTON[f_idx] - 1;
	return sizeof(FIRSTHOLDBUTTON) - FIRSTHOLDBUTTON[f_idx];		
}
function get_doublepressbutton_chars(f_idx){
	if (SECONDPRESSBUTTON[f_idx + 1] != -1) 
		return SECONDPRESSBUTTON[f_idx + 1] - SECONDPRESSBUTTON[f_idx] - 1;
	return sizeof(SECONDPRESSBUTTON) - SECONDPRESSBUTTON[f_idx];		
}
function get_char(f_array_idx1,f_idx){

  if(f_array_idx1 == MISC_TXT)
     {
        if(MISC[f_idx + 1] != -1) 
  	    return MISC[f_idx + 1] - MISC[f_idx] - 1;
  		return sizeof(MISC) - MISC[f_idx];
    }
  	return -1;
}
function get_strings(f_array_idx1,f_idx){
	if(f_array_idx1 >= 0 && f_array_idx1 <= 17)
		return MISC[f_idx];
    return -1;
}
int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;
const string MODNAMES[] ={
   "Legacy AR", "Progressive AR","DoGz Recoil","Rapid Fire","Burst Fire","Taylor Assist","Sticky Aim","Strafe Shot","QuickScope","HoldBreath",
//       0              1             2             3               4              5            6           7	
   "Jump Shot","Slide Cancel","Easy Plates","Enemy Ping","1 Button Press","2 Button Press","Controller Layout","Flipped Triggers","Inverted Y","" };
//       8                 9            10              11                  12              13
const string VALNAMES[]={
   "AR Vertical","AR Horiz","Vertical Start","Vertical End","Vertical Time","Horizontal Start","Horizontal End","Horizontal Time","Strength","Invert Flow","Divide","Release","DoGz Rumble","Rounds/Sec","Hold",
//       0             1             2               3              4                 5                 6                7               8          9	
   "Release","Radius","Steps","Steady Aim","Sticky Size","Sticky Time","StrafeShot Time","QuickScope Delay",""} 
//      10               11             12       13        14          15             16               17 
const string MISC[]={
"Call Of Duty","Black Ops","Cold War"," Primary "," Secondary "," All Profiles ","KillSwitch ON","Hold Circle/B","to turn OFF","SAVED","Sniper Mode","Activated","Deactivated","Press X to edit",
//    0              1          2           3            4              5                6               7              8          9         10           11            12             13
"KillSwitch OFF","Press Cross/A","Press Square/X","Off","ADS Only","ADS & Fire","KillSwitch OFF"," Profile Button ",""}
//    14             14               15           16       17         18            
const string CONTROLLER[]={
   "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast",""}
//     0         1         2           3  4                 5                   6                  7                  8                 9          10        11
const string SINGLEBUTTON[]={ 
"v Select ^","Triangle","Dpad Down","Dpad UP",""}; 
const string FIRSTHOLDBUTTON[]={
"< Select >","< L2 >","< R2 >","< L1 >","< R1 >",""}; 
const string SECONDPRESSBUTTON[]={
"< Select >","Dpad Down","Dpad UP",""}; 
function mod_limits(min_limit, max_limit) { 

	if(valName_idx > max_limit) valName_idx = min_limit;
	if(valName_idx < min_limit) valName_idx = max_limit; 		
}
function Switch_Buttons(){

       if(singlebutton_idx == 1)
       {
           press = TRIANGLE; 
       }
       if(singlebutton_idx == 2) 
       { 
           press = DOWN;
       }
       if(singlebutton_idx == 3)
       {
           press = UP;
       }
       if(firstholdbutton_idx == 1)
       {
           hold_press = L2; 
       }
       if(firstholdbutton_idx == 2)
       {
           hold_press = R2; 
       }
       if(firstholdbutton_idx == 3)
       {
           hold_press = L1;
       }
       if(firstholdbutton_idx == 4)
       {
           hold_press = R1;
       }
       if(secondpressbutton_idx == 1)
       {
           second_press = DOWN;
       }
       if(secondpressbutton_idx == 2)
       {
           second_press = UP; 
       }
     
   }
function block_function() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(JUMP_BTN   , 0 ); 	set_val(CROUCH_BTN, 0 ); 	set_val(RELOAD_BTN, 0 ); 	set_val(SWITCH_BTN , 0);
set_val(TACTICAL_BTN , 0 ); set_val(LETHAL_BTN , 0 ); 	set_val(SPRINT_BTN , 0 ); 	set_val(MELEE_BTN  , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}
/*
============================================================================================================================
   OLED SCREENS
============================================================================================================================
*/
 
define TITLE_SCREEN   = 0;
define MOD_MENU       = 1;
define EDIT_MENU      = 2;
//--defined names for columns makes it easier when writing the code
//--SCREEN_DATA[][] Columns
define ID          = 0;      	//--screen ID from list above
define TIMEOUT     = 1;        	//--screen times out if no activity 
define LED         = 2;       	//--cycle leds during this menu  
define PARENT      = 3;       	//--return to lastScreen when B/Circle pressed
define BLOCK_INPUT = 4;		    //--block all controler input 

//--common items for all screens
const int8 SCREEN_DATA[][] = {
//    ID              TIMEOUT        LED              PARENT	  BLOCK_INPUT	 
    {TITLE_SCREEN,       TRUE,		 TRUE,	          FALSE,		 FALSE},
    {MOD_MENU,           TRUE,		 TRUE,	           TRUE,	      TRUE},
    {EDIT_MENU,          TRUE,		 TRUE,	           TRUE,	      TRUE}  
};

int activeScreen,lastScreen,updateScreen;

/*
============================================================================================================================
   ScreenActive()
      one function to set passed ID as the active screen
============================================================================================================================
*/
function ScreenActive(screenID) {
    lastScreen = activeScreen;
    activeScreen = screenID;
    updateScreen = TRUE;
} 
function DoGz_ARC () {
if (ARC){
	ARC__VAL   = ARC_VAL / DIVIDE;
	ARC____VAL = ARC_VAL / DIVIDE;
	ARC_VAL ++;
if (ARC_VAL + ARC_V >= ARC___VAL + ARC_V) {
	ARC_VAL = ARC__VAL;
	}
	ARC__VAL --;
if (ARC__VAL <= ARC____VAL) {
	ARC__VAL = ARC_VAL;
	}
	ARC_VAL ++;
	set_val (PS4_RY,get_ival(PS4_RY) + ARC_VAL + ARC_V);
	}
}
function  NAME(){
		cls_oled(0);
		combo_run(RACE);
		combo_run(RN);
	if (Y_1 > 64)  
		Y_1 =  0;
	if (Y_2 > 64)  
		Y_2 =  0;
	if (Y_3 > 64)  
		Y_3 =  0;
	if (Y_4 > 64)  
		Y_4 =  0;
	if (Y_5 > 64)  
		Y_5 =  0;
	if (Y_6 > 64)  
		Y_6 =  0;
	if (Y_7 > 64)  
		Y_7 =  0;
	if (Y_8 > 64)  
		Y_8 =  0;
	if (SD1 > 105) 
		SD1 = -50;
	if (TP1 > 45)  
		TP1 =  0;
	if (TP2 < 0)   
		TP2 = 55;
		putc_oled(1,RN1);
		puts_oled(X_1,Y_1,0,1,1);
		putc_oled(1,RN2);
		puts_oled(X_2,Y_2,0,1,1);
		putc_oled(1,RN3);
		puts_oled(X_3,Y_3,0,1,1);
		putc_oled(1,RN4);
		puts_oled(X_4,Y_4,0,1,1);
		putc_oled(1,RN5);
		puts_oled(X_5,Y_5,0,1,1);
		putc_oled(1,RN6);
		puts_oled(X_6,Y_6,0,1,1);
		putc_oled(1,RN7);
		puts_oled(X_7,Y_7,0,1,1);
		putc_oled(1,RN8);
		puts_oled(X_8,Y_8,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
		putc_oled(1,SSA2);
		puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
		putc_oled(1,SSA3);
		puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
		putc_oled(1,SSA4);
		puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
		putc_oled(1,SSA5);
		puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
		putc_oled(1,SSA6);
		puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
		putc_oled(1,SSA7);
		puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
		putc_oled(1,SSA8);
		puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1);
		putc_oled(1,SSA9);
		puts_oled(SSMU9 + SD1,TP1 + 18,0,1,1);
		putc_oled(1,SSA10);
		puts_oled(SSMU10 + SD1,TP2 + 20,0,1,1);
		putc_oled(1,SSA11);
		puts_oled(SSMU11 + SD1,TP1 + 22,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU12 + SD1,TP2 + 24,0,1,1);
		putc_oled(1,SSA13);
		puts_oled(SSMU13 + SD1,TP1 + 26,0,1,1);
		putc_oled(1,SSA14);
		puts_oled(SSMU14 + SD1,TP2 + 28,0,1,1);
}
function Button_Layout() {
    if (btn_layout == 0) // Default
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  
								       
	}
	else if (btn_layout == 1) // Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1;
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
							       	   CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  					       	   
	}
	else if (btn_layout == 2) // Lefty
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   MELEE_BTN     = PS4_L3;
									   SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  							   
	}
	else if (btn_layout == 3) // N0M4D/Charlie
	{
		JUMP_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;   
		CROUCH_BTN   = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN   = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN   = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									  SPRINT_BTN    = PS4_L3;
								      MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						      
	}
	else if (btn_layout == 4) // N0M4D/Charlie Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 5) // N0M4D/Charlie Lefty
	{
		JUMP_BTN      = PS4_CROSS;     AIM_BTN       = PS4_L1; 
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    FIRE_BTN      = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   MELEE_BTN     = PS4_L3;
								       SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 6) // Bumper Jumper
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 7) // Bumper Jumper Tactical
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1; 
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
								       
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 8) // One-Hand-Gunslinger
	{
		JUMP_BTN      = PS4_CROSS;     FIRE_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 9) // Stick and Move
	{
		MELEE_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       JUMP_BTN      = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 10) // Brawler
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 11) // Beast
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
	    if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	int RT,MSC,SD1,DGT,DGR,TP1,TP2;
// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
int JUMP_BTN, CROUCH_BTN, RELOAD_BTN, SWITCH_BTN, TACTICAL_BTN,LETHAL_BTN,AIM_BTN,FIRE_BTN,SPRINT_BTN, MELEE_BTN;
function Save(){ 
   combo_run(SAVE)
   
   	set_pvar(SPVAR_1,toggle_legacyar[0]);           set_pvar(SPVAR_10,antirecoil_vertical[0]); 
	set_pvar(SPVAR_2,toggle_antirecoil[0]);         set_pvar(SPVAR_11,antirecoil_horizontal[0]);
    set_pvar(SPVAR_3,toggle_rapidfire[0]);          set_pvar(SPVAR_12 ,antirecoil_start[0]     );
    set_pvar(SPVAR_4,toggle_burstfire[0]);          set_pvar(SPVAR_13 ,antirecoil_end[0]       );  
    set_pvar(SPVAR_5,toggle_strafeShot[0]);         set_pvar(SPVAR_14 ,antirecoil_time[0]      );  
	set_pvar(SPVAR_6,toggle_taylorassist[0]);       set_pvar(SPVAR_15 ,antirecoilH_start[0]);      
	set_pvar(SPVAR_7,toggle_batts_sticky[0]);       set_pvar(SPVAR_16 ,antirecoilH_end[0]);
	set_pvar(SPVAR_8,toggle_quickscope[0]);         set_pvar(SPVAR_17 ,antirecoilH_time[0]);
	set_pvar(SPVAR_9,toggle_holdbreath[0]);         set_pvar(SPVAR_18,rate_of_fire[0]);
	set_pvar(SPVAR_59,toggle_DoGz_Recoil[0]);
	      
	set_pvar(SPVAR_19,toggle_legacyar[1]);           set_pvar(SPVAR_28,antirecoil_vertical[1]); 
	set_pvar(SPVAR_20,toggle_antirecoil[1]);         set_pvar(SPVAR_29,antirecoil_horizontal[1]);
    set_pvar(SPVAR_21,toggle_rapidfire[1]);          set_pvar(SPVAR_30 ,antirecoil_start[1]     );
    set_pvar(SPVAR_22,toggle_burstfire[1]);          set_pvar(SPVAR_31 ,antirecoil_end[1]       );  
    set_pvar(SPVAR_23,toggle_strafeShot[1]);         set_pvar(SPVAR_32 ,antirecoil_time[1]      );  
	set_pvar(SPVAR_24,toggle_taylorassist[1]);       set_pvar(SPVAR_33,antirecoilH_start[1]);      
	set_pvar(SPVAR_25,toggle_batts_sticky[1]);       set_pvar(SPVAR_34 ,antirecoilH_end[1]);
	set_pvar(SPVAR_26,toggle_quickscope[1]);         set_pvar(SPVAR_35 ,antirecoilH_time[1]);
	set_pvar(SPVAR_27,toggle_holdbreath[1]);         set_pvar(SPVAR_36,rate_of_fire[1]);
	set_pvar(SPVAR_60,toggle_DoGz_Recoil[1]);
	
	set_pvar(SPVAR_37, burstfire_hold );   
	set_pvar(SPVAR_38, burstfire_release );                                                      
    set_pvar(SPVAR_39, strafeShot_time   );                                               
	set_pvar(SPVAR_40, RADIUS           );
    set_pvar(SPVAR_41, STEPS            );
    set_pvar(SPVAR_42, STEADY_AIM      );  
    set_pvar(SPVAR_43,stickyaim_size); 
    set_pvar(SPVAR_44,stickyaim_time);
    set_pvar(SPVAR_45,quickscopedelay);
    set_pvar(SPVAR_46, easy_plate);
    set_pvar(SPVAR_47, enemy_ping); 
    set_pvar(SPVAR_48, cancel_slide); 
    set_pvar(SPVAR_49, btn_layout);  
    set_pvar(SPVAR_50, swap_on );  
    set_pvar(SPVAR_51, inverted_on );  
    set_pvar(SPVAR_52, toggle_jump_shot); 
    set_pvar(SPVAR_53, singlebutton_idx); 
    set_pvar(SPVAR_54, firstholdbutton_idx); 
    set_pvar(SPVAR_55, secondpressbutton_idx); 
	set_pvar(SPVAR_56,ARC_VAL               );     
	set_pvar(SPVAR_57,DIVIDE                ); 
	set_pvar(SPVAR_58, ARC___VAL                 );
	set_pvar(SPVAR_59, DOGZ_RELEASE              ); 
  
} 