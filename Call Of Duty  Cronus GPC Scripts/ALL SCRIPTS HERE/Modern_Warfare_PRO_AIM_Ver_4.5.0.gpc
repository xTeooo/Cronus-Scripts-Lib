/* 

  _____               .___                          __      __                   _____                         
  /     \    ____    __| _/  ____  _______   ____   /  \    /  \_____   _______ _/ ____\_____   _______   ____  
 /  \ /  \  /  _ \  / __ | _/ __ \ \_  __ \ /    \  \   \/\/   /\__  \  \_  __ \\   __\ \__  \  \_  __ \_/ __ \ 
/    Y    \(  <_> )/ /_/ | \  ___/  |  | \/|   |  \  \        /  / __ \_ |  | \/ |  |    / __ \_ |  | \/\  ___/ 
\____|__  / \____/ \____ |  \___  > |__|   |___|  /   \__/\  /  (____  / |__|    |__|   (____  / |__|    \___  >
        \/              \/      \/              \/         \/        \/                      \/              \/ 
        
                          __________ __________ ________       _____   .___    _____   
                          \______   \\______   \\_____  \     /  _  \  |   |  /     \  
                           |     ___/ |       _/ /   |   \   /  /_\  \ |   | /  \ /  \ 
                           |    |     |    |   \/    |    \ /    |    \|   |/    Y    \
                           |____|     |____|_  /\_______  / \____|__  /|___|\____|__  /   Modern Warfare PRO AIM Zen Edition 4.5.0
                                             \/         \/          \/              \/      

.___________.     ___      ____    ____  __        ______   .______       _______  .______       __   _______ .___________. ___    __  
|           |    /   \     \   \  /   / |  |      /  __  \  |   _  \     |       \ |   _  \     |  | |   ____||           ||__ \  /_ | 
`---|  |----`   /  ^  \     \   \/   /  |  |     |  |  |  | |  |_)  |    |  .--.  ||  |_)  |    |  | |  |__   `---|  |----`   ) |  | | 
    |  |       /  /_\  \     \_    _/   |  |     |  |  |  | |      /     |  |  |  ||      /     |  | |   __|      |  |       / /   | | 
    |  |      /  _____  \      |  |     |  `----.|  `--'  | |  |\  \----.|  '--'  ||  |\  \----.|  | |  |         |  |      / /_   | | 
    |__|     /__/     \__\     |__|     |_______| \______/  | _| `._____||_______/ | _| `._____||__| |__|         |__|     |____|  |_| Script Author
    
    
___________                  __                  .__                  
\    _____/  ____  _____   _/  |_  __ __ _______ |__|  ____     ____  
 |    __)  _/ __ \ \__  \  \   __\|  |  \\_  __ \|  | /    \   / ___\ 
 |     \   \  ___/  / __ \_ |  |  |  |  / |  | \/|  ||   |  \ / /_/  >
 \___  /    \___  >(____  / |__|  |____/  |__|   |__||___|  / \___  / 
     \/         \/      \/                                \/ /_____/  
                                     
 
             36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\||||||||||||||||||||||||||||||  TRIPLE AIM - POLAR - DOGZ ASSIST - PROGRESSION ASSIST ||||||||||||||||||||||||||||||
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936        36936
     36936   36936        36936
      369    36936          369
		   	  369	
                                                                                                                                       
❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤

Credits: 
I would like to thank everyone here who helped me get this script working as I wanted, all you guys have been amazing in helping me learn more and
support you give me, I really appreciate, you all inspire me to do more and learn more.. Once again Thank You ❤❤❤

Noozbar   < My Hero :D 
Batts     < The Reducer 
DoGz      < Absolute Creative Legend
Swizzy    < Ruthless but honest and a really nice guy :) 
Fadexz    < Really Nice Guy, I use his Cancel Reload (Works Great) 

These are the guys that have helped me... They are all awesome :) 

Credits to those who's code I may have used/changed or got ideas from...
DjangoKill, Sweet Evil , Excalibur , Itzsnackz << Thank you for being in this community, your work is very inspirational!!                                                                                                               


Massive thank you to the guys above for their support, they are always helping me improve and for that I am grateful...

/*----------------------------------------------------------------------------------------------------------------------------
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SCRIPT INSTRUCTIONS PLEASE READ!!! //////////////////////////////////////
------------------------------------------------------------------------------------------------------------------------------
NOW THAT YOU HAVE CHOSEN YOUR BUTTONS... NOW TIME TO HAVE A QUICK READ OF THE INSTRUCTIONS TO ACCESS THE MENU ON THE ZEN... 
------------------------------------------------------------------------------------------------------------------------------
Enter Mod Menu... Hold L2/L2 and tap OPTIONS/Menu button... Exit Mod Menu by pressing CIRCLE/B...
------------------------------------------------------------------------------------------------------------------------------
Navigate Menu... Press Left & Right
------------------------------------------------------------------------------------------------------------------------------
Turn Mods ON/OFF... Press UP or DOWN 
------------------------------------------------------------------------------------------------------------------------------
Edit Mods (antirecoil for example) Press CROSS/A  < Editable values will display 
------------------------------------------------------------------------------------------------------------------------------
Change Values in Edit Menu... Hold L2 & Press Left or Right to increase or decrease a value by 1, UP or Down to increase by 10
------------------------------------------------------------------------------------------------------------------------------
Changing Profiles While in Mod Menu... Primary - Secondary... Press TRIANGLE/Y
------------------------------------------------------------------------------------------------------------------------------
PROFILE BUTTONS IN ZEN MENU... Profile buttons are used to change from your primary profile to secondary profile, you can 
choose 1 button press or 2 button press or you can use both...
------------------------------------------------------------------------------------------------------------------------------
1 Button Press Button... To Choose your button PRESS UP or DOWN to Select Your Buttons...
------------------------------------------------------------------------------------------------------------------------------
2 Button Press Button... To Choose your buttons HOLD L2 AND Press LEFT & RIGHT to Select Your Buttons...
------------------------------------------------------------------------------------------------------------------------------
If you accidentally change the profiles in game and want to get back to your correct profile, USE the re-sync button which 
will allow you to change profile without changing weapon in game, to use the resync button here is how...
------------------------------------------------------------------------------------------------------------------------------
Resync Profiles Without Changing Weapon In Game... Hold L3/LS and press TRIANGLE to return back to profile...
------------------------------------------------------------------------------------------------------------------------------
Saving all your values/toggles... While in the Mod Menu... Press XBOX/PS button... this will automatically SAVE and return to
title screen...
------------------------------------------------------------------------------------------------------------------------------
KillSwitch... The KillSwitch to activate... Hold L2/LT and Press SHARE/VIEW button... Hold CIRCLE/B to Deactivate KillSwitch
------------------------------------------------------------------------------------------------------------------------------
Activate Driving Mode... Hold L2 and Double Click LEFT... When you exit the vehicle this will disable
------------------------------------------------------------------------------------------------------------------------------
Activate Sniper Mode... Hold L2 and Double Click RIGHT... DO the same again to disable
------------------------------------------------------------------------------------------------------------------------------

*/
 const int8 polar_LUT[] = {  /// DoNotAtMe Steady Aim ARRAY
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
};
const string MODNAMES[] ={
   "Legacy AR", "Progressive AR","Rapid Fire","Cancel Reload","Taylor Assist","Sticky Aim","DoGz Polar","DoGz Assist","DoGz Progression","QuickScope","HoldBreath",
//       0              1             2             3               4              5            6           7	               8            9
   "Enemy Ping","Easy Plates","Cancel Slide","Jump Shot","Drop Shot","Prone Shot","BunnyHop","Fast Melee","1 Button Press","2 Button Press","Controller Layout","Inverted Y","" };
//       10          11             12           13               14                 15                16                17                 
const string VALNAMES[]={
   "AR Vertical","AR Horiz","Vertical Start","Vertical End","Vertical Time","Horizontal Start","Horizontal End","Horizontal Time","Rounds/Sec","Reload Time",
//       0             1             2               3              4                 5                 6                7               8         	
   "Radius","Steps","Steady Aim","Sticky Size","Sticky Time","Radius","Angle","Steady Aim","Boost","Shake","Input","Release","DoGz High Value","DoGz Low Value","Release","Positive Value","Negative Value","Wait","Release",
//     9      10         11           12           13           14      15      16       17     18       19          20                   21           22           23                24          25      26
   "QuickScope Delay",""} 
//     2
const string MISC[]={
"Modern Warfare","PRO AIM","4.5.0"," Primary "," Secondary "," All Profiles ","KillSwitch ON","Hold Circle/B","to turn OFF","SAVED","Sniper Mode","Activated","Deactivated","Press X to edit",
//    0              1          2           3            4              5                6               7              8          9         10           11            12             13
"KillSwitch OFF","Press Cross/A","Press Square/X","Off","ADS Only","ADS & Fire","KillSwitch OFF"," Profile Button ","Warzone","Driving Mode","Activated","Deactivated","Sniper Mode", ""}
 
const string CONTROLLER[]={
   "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast",
   
   "Default Flipped","Tactical Flipped","B.Jumper Flipped","B.JumprTac Flipped","Stick&Move Flipped",""}
   
const string SINGLEBUTTON[]={ 
"v Select ^","Triangle","Dpad Down","Dpad UP",""}; 

const string FIRSTHOLDBUTTON[]={
"< Select >","< L2 >","< R2 >","< L1 >","< R1 >",""}; 

const string SECONDPRESSBUTTON[]={
"< Select >","Dpad Down","Dpad UP",""};
const string _ON = "On"; 
const string _OFF = "Off"; 


// Variables for the script
int modName_idx; // Index to mods 
int valName_idx; // Index to adjustable values
int profile_idx; // Index to profiles 
int profile_1or2;// Used to switch profiles

// Defined variables used in the script 
int    amount_of_profiles       =  2; // Amount of Profiles on the script 
define amount_of_editable_mods  =  8; // Amount of Editable ModName_idx
define amount_of_values         = 29; // Amount of Editable ValName_idx 
define modName_idx_max          = 22; // Amount of ModName_idx
define mods_not_on_all_profiles =  3; // Mods Used On Selected Profiles

// Display Title Variable, defined as TRUE; because when the script loads it will display title screen
int display_title = TRUE;

// Mods that can be used independantly on the 2 profiles 
int toggle_legacyar[2];
int toggle_antirecoil[2];
int toggle_rapidfire[2];

// Adjustable Values that can have different values dependant on profile
int antirecoil_start[2],antirecoil_end[2],antirecoil_time[2],antirecoil_horizontal[2],antirecoil_vertical[2],antirecoilH_start[2],antirecoilH_end[2],antirecoilH_time[2];
int rate_of_fire[3];

// Toggles for mods
int toggle_taylorassist,toggle_batts_sticky,toggle_quickscope,toggle_holdbreath; 
int toggle_easy_plates,toggle_dropshot,toggle_proneshot,toggle_bunnyhop,toggle_cancel_reload;
int inverted_on,toggle_jump_shot,toggle_fastmelee; 
int toggle_cancel_slide,enemy_ping;

// Adjustable Values for Drop Shot/Prone Shot
int Prone_Speed = 80; //Prone On Shot - How long before you prone
int DS_Speed    = 60; //Drop Shot

// Variables Used for switch profile buttons
int press        = 0;
int hold_press   = 0;
int second_press = 0; 
int Buttons,singlebutton_idx,active_name,firstholdbutton_idx,secondpressbutton_idx;
int name_width,name_font,name_y,cat_width,cat_font;

// AR Variables
int AntirecoilVertical; 
int AntirecoilHorizontal;

// Anti-Recoil Variables
int i_val;                                                        
int i_pnt;                                                        
int i_num;                                                        
int i_cnt;                                                        
int v,ar_y;
int invert; // -1 for inverted, 1 for standard
// Horizontal
int i_val_h;
int i_pnt_h;
int i_num_h;
int i_cnt_h;
int v_x,ar_x;  
// RapidFire / BurstFire
int hold_time;                                                    
int rest_time;
int led_on;
int led_off;

// Reload Cancel
int reloading;
int reloading_time;
int did_shoot_before_reload;
int max_reload_time_for_cancel;

// Sweet Evils Saving SPVAR Method
int mask;
int ret;
int pval_data;

// Batts Sticky Aim Variables
int stickyaim_size,stickyaim_time;

// DoGzTheFigherz Triple Aim
define PRX		  = POLAR_RX;
define PRY		  = POLAR_RY;
define RS         = POLAR_RS;
define VIB_A      = RUMBLE_A;
define X          = PS4_RX;                                    
define Y          = PS4_RY;
int DoGz_AIM_ASSIST;   
int PROGRESSION_ASSIST;
int POLAR_ASSIST;  
//PROGRESSION ASSIST SETTINGS
define AAMIN  = -6;// MINIMUM VALUE  
define AAMAX  =  6;// MAXIMUM VALUE  
define AAVAL  =  6;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS
// DON'T TOUCH THESE BELOW
int D_AS;
int AS = AAMIN;  
int AW = AAWMIN;
int PROG;
int AAS = 1;   
int AAD = 1;
//POLAR ASSIST SETTINGS
int RADIUS;
int ANGLE;
int POLAR_BOOST;
int POLAR_SHAKE;
int A_B_S;
int POLAR_RELEASE;
int POLAR_RADIUS,POLAR_ANGLE,SPEED;
//DoGz ASSIST VALUES
int DoGz_ASSIST_RELEASE;
define VMCR   =  0;// DEFAULT VM SPEED
int D__AS;  
int D__AS1    =  4; // INVERT DIRECTION VALUE
int D___AS;
int D_AS1; 
//POLAR CONDITIONS
define ACTIVE_WHEN_ADS    =  TRUE;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  TRUE;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   =  TRUE;   
define POLAR_SHAKE_FIRE   =  TRUE;
int VM                    =  TRUE;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )   
int POSI          =   0;    
int NEGI          =   0;        
int WA            =   0;          
int PROG_RELEASE  =   15;  

// DoNotAtMe Polar Aim
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2;
int RADIUS2,STEPS; 
int STEADY_AIM,STEADY_VALUE;
int SCREENSAVER;
int time,angle;                                                                
int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
  
const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};   

// Variables Used In Various Parts of the Script
define TRIANGLE = PS4_TRIANGLE,R1 = PS4_R1,L1 = PS4_L1,L2 = PS4_L2,R2 = PS4_R2,DOWN = PS4_DOWN,UP = PS4_UP;
define SSA1 = 84; define SSA2 = 65; define SSA3 = 89; define SSA4 = 76; define SSA5 = 79;define SSA6 = 82; define SSA7 = 68; define SSA8 = 82; define SSA9 = 73;define SSA10 = 70;
define SSA11 = 82;define SSA13 = 50;define SSA14 = 49;define SAVER = 5000;define SAVER1 = 10; int SSMU1 = 1;int SSMU2 = 8;int SSMU3 = 15;int SSMU4 = 22;int SSMU5 = 29;int SSMU6 = 36;
int SSMU7 = 43;int SSMU8 = 50;int SSMU9 = 57;int SSMU10 = 64;int SSMU11 = 71;int SSMU12 = 78;int SSMU13 = 85;int SSMU14 = 92;
int killswitch,display_screen,count_black,quickscopedelay;
int q;											
int double__tap[30];
init {
while(q < 30) 
{double__tap[q] = -1;       
q++;}}

init {
    ScreenActive(TITLE_SCREEN);
    STEADY_AIM = (360 / STEADY_AIM) / 2;
    
    pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
    toggle_legacyar[0]        = unpack_usigned(pval_data, 0,  1);
    toggle_legacyar[1]        = unpack_usigned(pval_data, 1,  1);
    toggle_antirecoil[0]      = unpack_usigned(pval_data, 2,  1);
    toggle_antirecoil[1]      = unpack_usigned(pval_data, 3,  1);
    toggle_rapidfire[0]       = unpack_usigned(pval_data, 4,  1);
    toggle_rapidfire[1]       = unpack_usigned(pval_data, 5,  1);
    toggle_taylorassist       = unpack_usigned(pval_data, 6,  1);
    toggle_batts_sticky       = unpack_usigned(pval_data, 7,  1);
    toggle_quickscope         = unpack_usigned(pval_data, 8,  1);
    toggle_holdbreath         = unpack_usigned(pval_data, 9,  1);
    toggle_easy_plates        = unpack_usigned(pval_data, 10,  1);
    toggle_cancel_slide       = unpack_usigned(pval_data, 11,  1);
    toggle_jump_shot          = unpack_usigned(pval_data, 12,  1);
    toggle_dropshot           = unpack_usigned(pval_data, 13,  1);
    
    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    toggle_proneshot          = unpack_usigned(pval_data, 0,  1);
    toggle_bunnyhop           = unpack_usigned(pval_data, 1,  1);
    toggle_fastmelee          = unpack_usigned(pval_data, 2,  1);
    POLAR_ASSIST              = unpack_usigned(pval_data, 3,  1);
    DoGz_AIM_ASSIST           = unpack_usigned(pval_data, 4,  1);
    PROGRESSION_ASSIST        = unpack_usigned(pval_data, 5,  1);
    inverted_on               = unpack_usigned(pval_data, 6,  1);
    toggle_cancel_reload      = unpack_usigned(pval_data, 7,  1); 
    
    pval_data = get_pvar(SPVAR_3, 1, 32767, 0);                                              
    antirecoil_vertical[0]    = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_vertical[1]    = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_4, -32767, 32767, 0);                                              
    antirecoil_horizontal[0]  = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_horizontal[1]  = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_5, 1, 32767, 0);                                              
    antirecoil_start[0]       = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_start[1]       = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_6, 1, 32767, 0);                                              
    antirecoil_end[0]         = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_end[1]         = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_7, 1, 32767, 0);                                              
    antirecoil_time[0]        = unpack_int16_to_int8(pval_data, 0);    
    antirecoil_time[1]        = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_8,-32767, 32767, 0);                                              
    antirecoilH_start[0]      = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_start[1]      = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_9,-32767, 32767, 0);                                              
    antirecoilH_end[0]        = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_end[1]        = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_10,1, 32767, 0);                                              
    antirecoilH_time[0]        = unpack_int16_to_int8(pval_data, 0);    
    antirecoilH_time[1]        = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_11, 1, 32767,pack_int8_to_int16(1,1));                                 
    rate_of_fire[0]            = unpack_int16_to_int8(pval_data, 0);                  
    rate_of_fire[1]            = unpack_int16_to_int8(pval_data, 1);    
    
    pval_data = get_pvar(SPVAR_12, 1, 32767,pack_int8_to_int16(20,20));
    RADIUS2                    = unpack_int16_to_int8(pval_data, 0);  
    STEPS                      = unpack_int16_to_int8(pval_data, 1);  
    
    pval_data = get_pvar(SPVAR_13, 1, 32767,pack_int8_to_int16(0,25));
    enemy_ping                 = unpack_int16_to_int8(pval_data, 0);  
    STEADY_AIM                 = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_14, 1, 32767,pack_int8_to_int16(8,20));
    RADIUS                     = unpack_int16_to_int8(pval_data, 0);  
    ANGLE                      = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_15, 1, 32767,pack_int8_to_int16(5,20));
    POLAR_BOOST                = unpack_int16_to_int8(pval_data, 0);  
    POLAR_SHAKE                = unpack_int16_to_int8(pval_data, 1); 
    
    pval_data = get_pvar(SPVAR_16, 1, 32767,pack_int8_to_int16(2,15));
    A_B_S                      = unpack_int16_to_int8(pval_data, 0);  
    POLAR_RELEASE              = unpack_int16_to_int8(pval_data, 1); 
   
    pval_data = get_pvar(SPVAR_17, 1, 32767,pack_int8_to_int16(20,20));        
    stickyaim_size             = unpack_int16_to_int8(pval_data, 0);                                  
    stickyaim_time             = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_18, 1, 32767,pack_int8_to_int16(0,50));        
    Buttons                    = unpack_int16_to_int8(pval_data, 0);                                  
    DoGz_ASSIST_RELEASE        = unpack_int16_to_int8(pval_data, 1);
    
    pval_data = get_pvar(SPVAR_19, 1, 32767,pack_int8_to_int16(0,0));        
    singlebutton_idx           = unpack_int16_to_int8(pval_data, 0);                                  
    firstholdbutton_idx        = unpack_int16_to_int8(pval_data, 1);
    
    D___AS                     = get_pvar(SPVAR_20, -35, 35, 5 ); 
    D_AS1                      = get_pvar(SPVAR_21, -35, 35, -5): 
    quickscopedelay            = get_pvar(SPVAR_22,  50,600,350); 
    enemy_ping                 = get_pvar(SPVAR_23,   0,  2, 0 );
    secondpressbutton_idx      = get_pvar(SPVAR_24,   0,  2, 0);
    max_reload_time_for_cancel = get_pvar(SPVAR_25,   1,  5000, 2000);
    
    
                                                       												
} 
main {
	Buttons(Buttons);
    
    Switch_Buttons(); 
        
    if(activeScreen == TITLE_SCREEN) 
    {
	    TitleScreen();
	}
	if(activeScreen == MOD_MENU)
	{
		ModMenu();
    }
	if(activeScreen == EDIT_MENU) 
	{
		EditMenu(); 		 	
    }
/*========================================================================================================
////////////////////////////////////// Enter Mod Menu \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
========================================================================================================*/
    if(get_val(Ads))
	{
        if(get_ival(PS4_OPTIONS))
        { 
	   
	        ScreenActive(MOD_MENU);
	     	modName_idx = 0;   
	     
        }
        set_val(PS4_OPTIONS, 0);
    } 
    if(activeScreen == MOD_MENU)
    {   
        block_function();
        if(modName_idx <= amount_of_editable_mods) 
        {
            if(event_press(PS4_CROSS))
            { 
               valName_idx = amount_of_values + 1;
               ScreenActive(EDIT_MENU);
            }
        
        } 
        
	    if(!get_ival(Ads))
		{ 
	        if(event_press(PS4_RIGHT))
	        { 
	            modName_idx ++;
	            if(modName_idx > modName_idx_max)
	            modName_idx = 0;
	            updateScreen = TRUE; 
	        } 
	        
	        if(event_press(PS4_LEFT))
	        { 
	            modName_idx --; 
	            if(modName_idx < 0) 
			    modName_idx = modName_idx_max;
				updateScreen = TRUE; 
	        }
                block_function();
                set_val(PS4_CIRCLE, 0);
	    }
	    if(event_press(PS4_TRIANGLE))
        {
                profile_idx += 1;
                
                if(profile_idx > amount_of_profiles - 1) 
                profile_idx = 0;
        }
        if(event_press(PS4_PS))
        {
                Save();   
        
        }
        if(event_press(PS4_CIRCLE)) 
        {
	        if(SCREEN_DATA[activeScreen][PARENT]) 
	        {
	                ScreenActive(TITLE_SCREEN);
	                display_title = TRUE;
                    Save();
	               
	        }
	    }
	          
	} 
    if(activeScreen == EDIT_MENU)
    {
              block_function();
          
           if(!get_val(Ads))
	       { 
	           if(event_press(PS4_RIGHT))
	           { 
	                valName_idx += 1; 
	                if(valName_idx > 29) 
	                valName_idx = 0;
	                updateScreen = TRUE;
	           } 
	           if(event_press(PS4_LEFT))
	           { 
	               valName_idx -= 1; 
	               if(valName_idx < 0) 
	               valName_idx = 29;
	               updateScreen = TRUE; 
	           }
	           if(modName_idx == 0) mod_limits (0,1); 
               if(modName_idx == 1) mod_limits (2,7);
               if(modName_idx == 2) mod_limits (8,8);
               if(modName_idx == 3) mod_limits (9,9); 
               if(modName_idx == 4) mod_limits (10,12); 
               if(modName_idx == 5) mod_limits (13,14);
               if(modName_idx == 6) mod_limits (15,21);
               if(modName_idx == 7) mod_limits (22,24);
               if(modName_idx == 8) mod_limits (25,28);  
               if(modName_idx == 9) mod_limits (29,29); 
              
	     }
	     if(event_press(PS4_CIRCLE))
	     {
	          if(SCREEN_DATA[activeScreen][PARENT])
	          {
	                 ScreenActive(lastScreen);
	               
	          } 
	     } 
 }
 if(!activeScreen == MOD_MENU)
 {
        if(get_val(Ads))
        {
            set_val(PS4_SHARE,0); 
        }
        if(get_ival(Ads) && event_press(PS4_SHARE))
        { 
            killswitch = TRUE; 
            combo_run(KILLSWITCH); 
        }
        if(killswitch)
        {
            set_ledx(1, 1);
        }
        if(killswitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) 
        {
            killswitch = FALSE; 
            combo_run(KILLSWITCH_OFF);          
}
if(press && event_release(press)&& get_ptime(press)<150 || (get_val(PS4_L3) && event_release(PS4_TRIANGLE)))
{
        	profile_1or2=!profile_1or2;
        	display_title = TRUE; 	
}
if(hold_press &&  get_ival(hold_press) && event_release(second_press))
{
        	profile_1or2=!profile_1or2;
        	display_title = TRUE; 	
}
   
    	    if(get_val(PS4_L3))
    	       set_val(PS4_TRIANGLE, 0);
   
        // If Profile 2
        	if(profile_1or2)
        		profile_idx = 1;
     
        // If Profile 1
        	else	
        		profile_idx = 0;
} 
/*=== When we are NOT in ModMenu OR WeaponMenu.. Activate/Deactivate Driving Mode OR Sniper Mode ===*/

if(!activeScreen == MOD_MENU  && !killswitch)
{
        if(get_val(Ads)) 
        { 
            if(event_press(PS4_LEFT) && get_brtime(PS4_LEFT) <= 200) 
            {
                driving_mode = TRUE;
                combo_run(DRIVING_MODE);
            } 
           
          set_val(PS4_LEFT, 0);
        }
        if(driving_mode)
        {
           if(event_press(Reload)) 
           {
               driving_mode = FALSE;
               combo_run(DRIVING_OFF); 
           }
        }  
        if(get_val(Ads))
        {
          if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200)
          {
              sniper_mode =!sniper_mode; 
              combo_run(SNIPER_MODE); 
    
              if(!sniper_mode)
              {
                 combo_run(SNIPER_OFF); 
                 toggle_holdbreath = FALSE; 
              }
                
              if(sniper_mode) 
              { 
                toggle_holdbreath = TRUE;                
              }
          }
          set_val(PS4_RIGHT, 0);
       }  
 
       deadzone(PS4_L2,PS4_R2,99,99);
       
       if(inverted_on)
		  invert = -1;
	   else
		   invert = 1;
			
      if(toggle_legacyar[profile_idx] == 1 && !driving_mode)
      {
		 if(get_val(Fire))
			combo_run(ANTIRECOIL);
		  else
			combo_stop(ANTIRECOIL);
	     
	  }
// If Anti-Recoil is enable for the active profile , Made by Batts & Noozbar 
	  if(toggle_antirecoil[profile_idx] == 1 && !driving_mode)
	  {
	// Antirecoil by Batts	
		// Vertical
    	 if( antirecoil_start[profile_idx] < antirecoil_end[profile_idx])
    	    i_val = 1; 
    	 else
    	    i_val = -1;
        
    	i_pnt = (antirecoil_time[profile_idx] * 10) / (abs(antirecoil_start[profile_idx] - antirecoil_end[profile_idx])); 
    	
    	// Horizontal		
    	if(antirecoilH_start[profile_idx] < antirecoilH_end[profile_idx])
    	    i_val_h = 1; 
    	else
    	    i_val_h = -1;
        
    	i_pnt_h = (antirecoilH_time[profile_idx] * 10) / (abs(antirecoilH_start[profile_idx] - antirecoilH_end[profile_idx])); 
    	
    	if(!get_val(Fire)) 
   		{
   			// Vertical
   			ar_y = antirecoil_start[profile_idx];
   			i_cnt = 0;
   			i_num = 0;
   			
   			// Horizontal
   			ar_x = antirecoilH_start[profile_idx];
   			i_cnt_h = 0;
   			i_num_h = 0;
   		}   
    	
    	if(get_val(Ads) && get_val(Fire))
    	{
   		    // Vertical
   		    if(!p_complete())  
   		        ar_y = p_val();
   		    else
   		        ar_y = antirecoil_end[profile_idx];
            
			if(y_val() < 100)
    	   		set_val(PS4_RY,y_val()); 
    	   		
    	   	// Horizontal	
   		    if(!p_complete_x())  
   		        ar_x = p_val_x();
   		    else
   		        ar_x = antirecoilH_end[profile_idx];
            
			if(x_val() < 100)
    	   		set_val(PS4_RX,x_val()); 
   	    }
   	}
	// If RapidFire is enable for the active profile // This Rapid Fire was From NoozBar
	if(toggle_rapidfire[profile_idx] == 1)
	{
	// Rate of Fire Calculation
    	hold_time = 500 / rate_of_fire[profile_idx]; 
   		rest_time = hold_time - 20;
    	if(rest_time < 0) rest_time = 0;
    
    // Run combo
    	if(get_val(Fire))
    		combo_run(RAPIDFIRE);
    	else
    		combo_stop(RAPIDFIRE);
    		
    	led_on = 150;
    	led_off = 300;
    	combo_run(BLINK);
	}
	/// The ORIGINAL CREATOR of this is DoNotAtMe, He created the Polar Aim and Steady Aim... I just put them both together to create a great Aim Assist hence why I called it by my name :) 
	if(toggle_taylorassist && !driving_mode && !sniper_mode)
	{
    
      vm_tctrl(VM_INTERVAL); 
                         
      actual_X = get_val(X);   
      actual_Y = get_val(Y);           
      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
      max_Magnitude = (actual_Magnitude < 100);                      
                                                                  
      if(!(time++ % STEP_INTERVAL)){                                  
	         angle += STEPS;                                                 
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * RADIUS2) / 100;                         
      sin_angle = (sin_angle * RADIUS2) / 100;                          
                                                                         
      if((ACTIVE_WHEN_ADS && get_val(Ads)) || (ACTIVE_WHEN_FIRING && get_val(Fire)))
   	  { 
    	 vm_tctrl(VM_INTERVAL);
           if(actual_Magnitude <= RADIUS2){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
           }                                                  
           set_val(X, calculate(actual_X + cos_angle, -100, 100));
           set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
     }
     else if (!get_ival(Ads) && !get_ival(Fire)) {
    			vm_tctrl(0); 
  	 }
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
			
	}
    
    POLAR_RADIUS = RADIUS;
    POLAR_ANGLE  = ANGLE;
if (POLAR_ASSIST && !driving_mode && !sniper_mode && get_val(Ads) && abs(get_ival(PS4_RX)) <= POLAR_RELEASE && abs(get_ival(PS4_RY)) <= POLAR_RELEASE) 
{
    if (POLAR_BOOST_FIRE && get_val(Fire)) 
    {
	    POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
	}
	else 
	{
	    POLAR_RADIUS = POLAR_RADIUS;
	}
    if (POLAR_SHAKE_FIRE && get_val(Fire)) 
    {
	    POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
	}
	else
	{
	    POLAR_ANGLE = POLAR_ANGLE;
	}    
    set_polar(POLAR_RS,SPEED = (SPEED + POLAR_ANGLE) % 360,abs(get_ival(POLAR_RX)) / A_B_S + POLAR_RADIUS * 328);
    }
    else if (!get_ival(Ads) && !get_ival(Fire)) {
    		       vm_tctrl(0); 
  	     }
  		 if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
}
if (PROGRESSION_ASSIST && !driving_mode && !sniper_mode && get_val(Ads) >= 80) 
{
    if (!combo_running(AAS)) 
    {
	    AS = PROGRESSION(AS,AAMIN + NEGI,AAMAX + POSI,AAVAL,AAS,1);
        AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
        combo_run(AAS);
    }
    if (abs(get_val(PS4_RY))> PROG_RELEASE || abs(get_val(PS4_RX)) > PROG_RELEASE) {
	    combo_stop(AAS);
	}
}
if (DoGz_AIM_ASSIST && !driving_mode && !sniper_mode && abs(get_val(PS4_RX)) < DoGz_ASSIST_RELEASE && abs(get_val(PS4_RY)) < DoGz_ASSIST_RELEASE) {
    if (get_val(Ads) > 80)
    {
	    D_AS = TRUE;
	    AIM();
    }
    if (event_release(Ads) || event_release(Fire)){
	   D_AS = FALSE;
	   vm_tctrl(VMCR); 
	}
}
// Batts is the creator of Sticky Aim, we need this in any script :D  
if(toggle_batts_sticky && !driving_mode && !sniper_mode) 
{
       if(get_val(Fire))
           combo_run(STICKY_AIM);
       else 
           combo_stop(STICKY_AIM); 
}
 /*== QuickScope ==*/
	if(toggle_quickscope) 
    {
	   if(event_press(Ads) && get_ptime(Ads) < 140)
  	       combo_run(Quick_Scope);
    }
    /*== HoldBreath ==*/
    if(toggle_holdbreath) 
    {
	   if(get_val(Ads))
		   set_val(Sprint, 100);
	                      
	   if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       combo_stop(CH);       
	                    
	   if(event_press(Ads)) 
	       combo_run(CH);
	  
	   if(get_val(Ads) && get_lval(Sprint)) 
	       set_val(Sprint, 0);  
	}       
    /*== Jump Shot ==*/
    if(toggle_jump_shot) 
    {
       if(get_val(Fire)) 
          combo_run(JUMP_ON_SHOT); 
    } 
    
    if(enemy_ping == 1) 
    {
       if(get_val(Ads) && double_click(Ping))
	       combo_run(AUTO_PING); 
    }
    if(enemy_ping == 2)
    {
       if(get_val(Ads) && double_click(Ping))
	       combo_run(AUTO_PING);
	   if(event_press(Fire))
           combo_run(AUTO_PING);        			 
    }
    /*== Cancel Slide ==*/
    if(toggle_cancel_slide) 
    {                                                                                                  
	   if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
	   {
		  if(event_release(Crouch))
			   combo_run(CANCEL_SLIDE)                                            
	   }                                 
    }
    if(toggle_proneshot)  // Prone Shot 
	{ 
	    if(get_val(Fire) && get_ptime(Fire) > Prone_Speed)  
             set_val(Crouch,100);    
    }
    if(toggle_dropshot)  // Drop Shot
    {
        if(get_val(Fire))
             combo_run(DS);
    }  
    if(toggle_bunnyhop) // Bunny Hop
    {
        if (get_ival(Jump) && get_ptime(Jump) > 200) 
             combo_run(BUNNYHOP); 
    } 
    if(toggle_easy_plates)
    {
	    if(get_val(Swap)&&get_ptime(Swap)>350)
		    combo_run(easy_plate);
		    
	    if(get_val(Ads)>10 || get_val(Fire)>10 || get_val(Reload))
		    combo_stop(easy_plate);	
    }  
    if(toggle_fastmelee) 
    {
        if(get_val(Melee)) 
			combo_run(FAST_MELEE);
		else
			combo_stop(FAST_MELEE);
    } 
    if(toggle_cancel_reload) 
    {   
       if(event_press(Fire))
       did_shoot_before_reload = TRUE;

       if(event_press(Reload) && did_shoot_before_reload) 
       {
          reloading = TRUE;
          did_shoot_before_reload = FALSE;
       }
       if(get_val(Reload) && get_ptime(Reload) >= 250) 
       {
          reloading = FALSE;
          combo_stop(Reload_Cancel);
       }
       if(reloading)
          reloading_time += get_rtime();
          else reloading_time = 0;

       if(reloading_time > max_reload_time_for_cancel)
          reloading = FALSE;

       if(reloading_time > 0 && reloading_time <= max_reload_time_for_cancel && event_press(Fire))
          combo_run(Reload_Cancel);
       }
   }
/*
============================================================================================================================
   Functions() for each of the screens
============================================================================================================================
*/        
function TitleScreen (){ 
if(display_title)
{ 
         cls_oled(0);
         SCREENSAVER = FALSE; 
         rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
         printf(center_x(get_char(MISC_TXT, 0), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 0));
         printf(center_x(get_char(MISC_TXT, 1), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 1));
         printf(center_x(get_char(MISC_TXT, 2), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 2));

         if(profile_idx == 0) 
              printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  
         if(profile_idx == 1)
              printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 
         
         display_title = FALSE;
         display_screen = TRUE; 
 }
 if(display_screen)
 {
        count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_screen = FALSE;
    		SCREENSAVER = TRUE; 
    	}
} 
if (SCREENSAVER) 
{ 
		DGT += get_rtime();
		if (DGT >= 100) 
		{
			SD1 += 2;
			TP1 += 1;
			TP2 -= 1;
			DGT  = 0;
		}
			DGR += get_rtime();
				
		if (DGR >= 30) 
	    {
			Y_1 += 1;
			Y_2 += 2;
			Y_3 += 3;
			Y_4 += 4;
		    Y_5 += 5;
			Y_6 += 6;
			Y_7 += 7;
			Y_8 += 8;
			DGR  = 0;
	    }
			NAME();
			MSC += get_rtime();
			
	    if(MSC >= 1000) 
		{
			MSC = 0;
			RT += 1;
	    }
		if(RT == 90) 
		{
			SCREENSAVER = 0;
			RT = 0;
			cls_oled(0);		
		}
}
if(killswitch)
     led(7);
  else
     led(profile_idx); 
}
/*======================================================================================================================================
////////////////////////////////////////////// Mod Menu Display & Toggles \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
======================================================================================================================================*/
function ModMenu(){


      cls_oled(0);
      rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
      line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
      printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx]);
  
if(modName_idx == 0){
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_legacyar[profile_idx] = !toggle_legacyar[profile_idx]; 
     }
     if(toggle_legacyar[profile_idx])
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_legacyar[profile_idx])
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}      
if(modName_idx == 1)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_antirecoil[profile_idx] = !toggle_antirecoil[profile_idx]; 
     }
     if(toggle_antirecoil[profile_idx])
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_antirecoil[profile_idx])
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 2) 
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_rapidfire[profile_idx] =! toggle_rapidfire[profile_idx];
     }
     if(toggle_rapidfire[profile_idx])
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_rapidfire[profile_idx])
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 3)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_cancel_reload = !toggle_cancel_reload; 
     }
     if(toggle_cancel_reload)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_cancel_reload)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 4)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_taylorassist = !toggle_taylorassist; 
     }
     if(toggle_taylorassist)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_taylorassist)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 5) 
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_batts_sticky =! toggle_batts_sticky;
     }
     if(toggle_batts_sticky)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_batts_sticky)
     { 
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 6) 
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        POLAR_ASSIST = !POLAR_ASSIST; 
     }
     if(POLAR_ASSIST)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
    
     }
     if(!POLAR_ASSIST)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 7)
{  
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
          DoGz_AIM_ASSIST = !DoGz_AIM_ASSIST; 
     }
     if(DoGz_AIM_ASSIST)
     {
          printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!DoGz_AIM_ASSIST)
     {
          printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 8)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        PROGRESSION_ASSIST = !PROGRESSION_ASSIST; 
     }
     if(PROGRESSION_ASSIST)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!PROGRESSION_ASSIST)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 9)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_quickscope =! toggle_quickscope;
     }
     if(toggle_quickscope)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_quickscope)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 10)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_holdbreath =! toggle_holdbreath;
     }
     if(toggle_holdbreath)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_holdbreath)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 11)
{
     if(event_press(XB1_UP)) 
     {
         enemy_ping += 1;
         if(enemy_ping > 2) 
 	     enemy_ping = 0;           
     }
     if(event_press(XB1_DOWN)) 
     {
         enemy_ping -= 1; 
         if(enemy_ping < 0) 
 	     enemy_ping = 2;   
     } 
     if(enemy_ping == 0)
     { 
         printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
     if(enemy_ping == 1)
     {
        printf(center_x(get_char(MISC_TXT, 18), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 18));   
     }
     if(enemy_ping == 2)
     {
        printf(center_x(get_char(MISC_TXT, 19), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 19));
     }
}
if(modName_idx == 12)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_easy_plates =! toggle_easy_plates;
     }
     if(toggle_easy_plates)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_easy_plates)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(modName_idx == 13)
{
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_cancel_slide =! toggle_cancel_slide;
     }
     if(toggle_cancel_slide)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_cancel_slide)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(modName_idx == 14)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_jump_shot =! toggle_jump_shot;
     }
     if(toggle_jump_shot)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_jump_shot)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 15)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_dropshot =! toggle_dropshot;
     }
     if(toggle_dropshot)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_dropshot)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 16)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_proneshot =! toggle_proneshot;
     }
     if(toggle_proneshot)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_proneshot)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 17)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_bunnyhop =! toggle_bunnyhop;
     }
     if(toggle_bunnyhop)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_bunnyhop)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 18)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        toggle_fastmelee =! toggle_fastmelee;
     }
     if(toggle_fastmelee)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!toggle_fastmelee)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 19) 
{ 
     printf(center_x(get_singlebutton_chars(singlebutton_idx), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SINGLEBUTTON[singlebutton_idx]);
  
     if(event_press(PS4_DOWN))
     {
         singlebutton_idx ++; 
         if(singlebutton_idx > 3 ) singlebutton_idx = 0;       
     }   
     if(event_press(PS4_UP))
     {
         singlebutton_idx --; 
         if(singlebutton_idx < 0) singlebutton_idx = 3;       
     }
}
if(modName_idx == 20)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 active_name = !active_name; 	
        }
        if(!active_name)
        {
		   name_width = OLED_FONT_SMALL_WIDTH;
		   name_font = OLED_FONT_SMALL;
		   name_y = 50;
		   cat_width = OLED_FONT_MEDIUM_WIDTH;
		   cat_font = OLED_FONT_MEDIUM;
	    }
	    else
	    {
		   name_width = OLED_FONT_MEDIUM_WIDTH;
		   name_font = OLED_FONT_MEDIUM;
		   name_y = 43;
		   cat_width = OLED_FONT_SMALL_WIDTH;
		   cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(PS4_L2))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!active_name) 
             firstholdbutton_idx += 1; 
             else 
             secondpressbutton_idx += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!active_name)
             firstholdbutton_idx -= 1;    
             else
             secondpressbutton_idx -= 1;
         } 
             if(firstholdbutton_idx > 4) firstholdbutton_idx = 0; 
             if(secondpressbutton_idx > 2) secondpressbutton_idx = 0; 
             if(firstholdbutton_idx < 0) firstholdbutton_idx = 4;
             if(secondpressbutton_idx < 0) secondpressbutton_idx = 2;  
         }
}     
if(modName_idx == 21)
{ 
        printf(center_x(get_button_chars(Buttons), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER[Buttons]);
         
     if(event_press(PS4_UP))
     {
        Buttons += 1;
        if(Buttons > 16) 
        Buttons = 0;
     }
     if(event_press(PS4_DOWN))
     {
        Buttons -= 1; 
        if(Buttons < 0)
        Buttons = 16;
     }
}
if(modName_idx == 22)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
        inverted_on =! inverted_on;
     }
     if(inverted_on)
     {
        printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
     }
     if(!inverted_on)
     {
        printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(modName_idx == 19)
{ 
        printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
} 
if(modName_idx == 20)
{ 
        printf(center_x(get_doublebutton_chars(firstholdbutton_idx), cat_width),30,cat_font,OLED_WHITE,FIRSTHOLDBUTTON[firstholdbutton_idx]);
        printf(center_x(get_doublepressbutton_chars(secondpressbutton_idx), name_width),name_y,name_font,OLED_WHITE,SECONDPRESSBUTTON[secondpressbutton_idx]);
     }
     else if(modName_idx  < mods_not_on_all_profiles)  
     {
        if(profile_idx == 0) 
            printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
        else if(profile_idx == 1)
            printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 
     }
  } 

/*====================================================================================================================================
//////////////////////////////////////////// Display Edit Menu & Display Adjustable Values \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
====================================================================================================================================*/
function EditMenu(){ 
if(updateScreen)
{ 
      cls_oled(0); 
      rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
      line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
      printf(center_x(get_valName_chars(valName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES[valName_idx]);

if(valName_idx == 0) {
      Display_Values(valName_idx,antirecoil_vertical[profile_idx]);
      antirecoil_vertical[profile_idx] = Edit_Values(antirecoil_vertical[profile_idx],0,99,1,10);    
}
if(valName_idx == 1) {
      Display_Values(valName_idx,antirecoil_horizontal[profile_idx]);
      antirecoil_horizontal[profile_idx] = Edit_Values(antirecoil_horizontal[profile_idx],-99,99,1,10);
}
if(valName_idx == 2) {
      Display_Values(valName_idx,antirecoil_start[profile_idx]);
      antirecoil_start[profile_idx] = Edit_Values(antirecoil_start[profile_idx],0,99,1,10);    
}
if(valName_idx == 3) {
      Display_Values(valName_idx,antirecoil_end[profile_idx]);
      antirecoil_end[profile_idx] = Edit_Values(antirecoil_end[profile_idx],0,99,1,10);
}
if(valName_idx == 4) {
      Display_Values(valName_idx,antirecoil_time[profile_idx]);
      antirecoil_time[profile_idx] = Edit_Values(antirecoil_time[profile_idx],0,99,1,10);
}
if(valName_idx == 5) { 
      Display_Values(valName_idx,antirecoilH_start[profile_idx]);
      antirecoilH_start[profile_idx] = Edit_Values(antirecoilH_start[profile_idx] ,-99 , 99 , 1 , 10); 
}
if(valName_idx == 6) { 
      Display_Values(valName_idx,antirecoilH_end[profile_idx]);
      antirecoilH_end[profile_idx] = Edit_Values(antirecoilH_end[profile_idx] ,-99 , 99 , 1 , 10); 
}      
if(valName_idx == 7) { 
      Display_Values(valName_idx,antirecoilH_time[profile_idx]);
      antirecoilH_time[profile_idx] = Edit_Values(antirecoilH_time[profile_idx] ,0 , 99 , 1 , 10); 
} 
if(valName_idx == 8) {
      Display_Values(valName_idx,rate_of_fire[profile_idx]);
      rate_of_fire[profile_idx] = Edit_Values(rate_of_fire[profile_idx],0,25,1,10);
}
if(valName_idx == 9) {
      Display_Values(valName_idx,max_reload_time_for_cancel);
      max_reload_time_for_cancel = Edit_Values(max_reload_time_for_cancel,0,5000,10,100);
}
if(valName_idx == 10) { 
      Display_Values(valName_idx,RADIUS2);
      RADIUS2 = Edit_Values(RADIUS2,0,99,1,10);
}
if(valName_idx == 11) {
      Display_Values(valName_idx,STEPS);
      STEPS = Edit_Values(STEPS,0,99,1,10);
}
if(valName_idx == 12) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
} 
if(valName_idx == 13) { 
      Display_Values(valName_idx,stickyaim_size);
      stickyaim_size = Edit_Values(stickyaim_size,0,99,1,10);
}
if(valName_idx == 14) { 
      Display_Values(valName_idx,stickyaim_time);
      stickyaim_time = Edit_Values(stickyaim_time,0,99,1,10);
}
if(valName_idx == 15) {
      Display_Values(valName_idx,RADIUS);
      RADIUS = Edit_Values(RADIUS,0,99,1,10);    
}
if(valName_idx == 16) {
      Display_Values(valName_idx,ANGLE);
      ANGLE = Edit_Values(ANGLE,0,99,1,10);    
}
if(valName_idx == 17) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
}
if(valName_idx == 18) {
      Display_Values(valName_idx,POLAR_BOOST);
      POLAR_BOOST = Edit_Values(POLAR_BOOST,0,30,1,10);
}
if(valName_idx == 19) {
       Display_Values(valName_idx,POLAR_SHAKE);
       POLAR_SHAKE = Edit_Values(POLAR_SHAKE,0,50,1,10);    
}
if(valName_idx == 20) {
      Display_Values(valName_idx,A_B_S);
      A_B_S = Edit_Values(A_B_S,0,5,1,10);
}
if(valName_idx == 21) {
      Display_Values(valName_idx,POLAR_RELEASE);
      POLAR_RELEASE = Edit_Values(POLAR_RELEASE,0,50,1,10);
}
if(valName_idx == 22) {
      Display_Values(valName_idx,D___AS);
      D___AS = Edit_Values(D___AS,-35,35,1,10);
}
if(valName_idx == 23) {
      Display_Values(valName_idx,D_AS1);
      D_AS1 = Edit_Values(D_AS1,-35,35,1,10);
}     
if(valName_idx == 24) { 
      Display_Values(valName_idx,DoGz_ASSIST_RELEASE);
      DoGz_ASSIST_RELEASE = Edit_Values(DoGz_ASSIST_RELEASE,0,100,1,10);
}
if(valName_idx == 25) {
      Display_Values(valName_idx,POSI);
      POSI = Edit_Values(POSI,-30,30,1,10);
}
if(valName_idx == 26) {
      Display_Values(valName_idx,NEGI);
      NEGI = Edit_Values(NEGI,-30,30,1,10);
} 
if(valName_idx == 27) {
      Display_Values(valName_idx,WA);
      WA = Edit_Values(WA,2,99,1,10);
}
if(valName_idx == 28) {
      Display_Values(valName_idx,PROG_RELEASE);
      PROG_RELEASE = Edit_Values(PROG_RELEASE,8,90,1,10);
}
if(valName_idx == 29) { 
      Display_Values(valName_idx,quickscopedelay);
      quickscopedelay = Edit_Values(quickscopedelay,0,600,1,10);
      }
   } 
}
/*======== Function to limit values per mods ===========*/
function mod_limits(min_limit, max_limit) { 

	  if(valName_idx > max_limit) valName_idx = min_limit;
	  if(valName_idx < min_limit) valName_idx = max_limit; 		
}
/*================= Function to edit values ===========================*/
function Edit_Values(value,min,max,increase_value,increase_value_more) {  
if(get_val(Ads))  
{
     if(event_press(PS4_RIGHT))
     {
	     value += increase_value;                           
	     if(value > max ) value = max;   	               	            
     }                                                                       
     if(event_press(PS4_LEFT)) 
     {
	     value -= increase_value;                           
	     if(value < min ) value = min; 	        
	 }
     if(event_press(PS4_UP))
	 {
		 value += increase_value_more;
		 if(value > max ) value = max; 
	 }
	 if(event_press(PS4_DOWN))
	 {
		 value -= increase_value_more;
		 if(value < min ) value = min;
	 }
   }
   return value;  
}
/*====== Display Values ======*/
function Display_Values(idx,value) {
  
   if(valName_idx == idx)
   {
      if(idx == 4 || idx == 7)
    	 number_to_string(value * 100, find_digits(value * 100) );
      else
         number_to_string(value, find_digits(value));             
   }
}
function AIM() {
	if (D_AS) 
	{
	   if (D_AS && VM) 
	   {
		   vm_tctrl(-2);
	   }
		   D__AS ++;
		   
	   if (D__AS >= D___AS)  D__AS = D__AS1;
	
		   D__AS1 --;
		
	   if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
	
		   D__AS ++;
		   
	   if (get_val(Ads)) 
	   {	
		   set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		   set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	   }
	   if (get_val(Fire)) 
	   {	
		   set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		   set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	   }
	}
	   else
	     vm_tctrl(0); 
} 
function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if (FLOW) 
{
    VALUE += INCREMENT;
    
    if (VALUE <= MAX)  
    return VALUE;
    
  if (VALUE > MAX) 
  {
        ID = 0;
    return VALUE - INCREMENT;
  }
	}
    else 
    {
       VALUE -= INCREMENT;    
    if (VALUE >= MIN)  
        return VALUE;
if (VALUE < MIN) 
{
   	 ID = 1;
     return VALUE + INCREMENT;
    }
   } 
   return FALSE;    
}
int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     	
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }

function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}
combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
function p_complete() { 

    i_cnt++;
    if(i_cnt > antirecoil_time[profile_idx] * 10) 
    {
        i_cnt = antirecoil_time[profile_idx] * 10;
        return 1;
    }    
    return 0;
}  
function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  
function y_val() { 

    v = get_val(10);
    
    if(abs(v) < 10)
        v = 0;
        
    if(abs(v) > ar_y + 5)
        return v;
        
    return v + (ar_y * invert);           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > antirecoilH_time[profile_idx] * 10) 
    {
        i_cnt_h = antirecoilH_time[profile_idx] * 10 ;
        return 1;
    }
    return 0;
}   
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) 
    {
    	i_num_h = 0;
    	ar_x += i_val_h;
    }
    return ar_x;
} 
function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
 }
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
 function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}  
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; 
define MISC_TXT = 0 
function get_modName_chars(f_idx){
	if (MODNAMES[f_idx + 1] != -1) 
		return MODNAMES[f_idx + 1] - MODNAMES[f_idx] - 1;
	return sizeof(MODNAMES) - MODNAMES[f_idx];		
}
function get_valName_chars(f_idx){
	if (VALNAMES[f_idx + 1] != -1) 
		return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
	return sizeof(VALNAMES) - VALNAMES[f_idx];		
}
function get_button_chars(f_idx){
	if (CONTROLLER[f_idx + 1] != -1) 
		return CONTROLLER[f_idx + 1] - CONTROLLER[f_idx] - 1;
	return sizeof(CONTROLLER) - CONTROLLER[f_idx];		
}
function get_singlebutton_chars(f_idx){
	if (SINGLEBUTTON[f_idx + 1] != -1) 
		return SINGLEBUTTON[f_idx + 1] - SINGLEBUTTON[f_idx] - 1;
	return sizeof(SINGLEBUTTON) - SINGLEBUTTON[f_idx];		
}
function get_doublebutton_chars(f_idx){
	if (FIRSTHOLDBUTTON[f_idx + 1] != -1) 
		return FIRSTHOLDBUTTON[f_idx + 1] - FIRSTHOLDBUTTON[f_idx] - 1;
	return sizeof(FIRSTHOLDBUTTON) - FIRSTHOLDBUTTON[f_idx];		
}
function get_doublepressbutton_chars(f_idx){
	if (SECONDPRESSBUTTON[f_idx + 1] != -1) 
		return SECONDPRESSBUTTON[f_idx + 1] - SECONDPRESSBUTTON[f_idx] - 1;
	return sizeof(SECONDPRESSBUTTON) - SECONDPRESSBUTTON[f_idx];		
}
function get_char(f_array_idx1,f_idx){

  if(f_array_idx1 == MISC_TXT)
     {
        if(MISC[f_idx + 1] != -1) 
  	    return MISC[f_idx + 1] - MISC[f_idx] - 1;
  		return sizeof(MISC) - MISC[f_idx];
    }
  	return -1;
}
function get_strings(f_array_idx1,f_idx){
	if(f_array_idx1 >= 0 && f_array_idx1 <= 17)
		return MISC[f_idx];
    return -1;
}
int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;
function Switch_Buttons(){

       if(singlebutton_idx == 1)
       {
           press = TRIANGLE; 
       }
       if(singlebutton_idx == 2) 
       { 
           press = DOWN;
       }
       if(singlebutton_idx == 3)
       {
           press = UP;
       }
       if(firstholdbutton_idx == 1)
       {
           hold_press = L2; 
       }
       if(firstholdbutton_idx == 2)
       {
           hold_press = R2; 
       }
       if(firstholdbutton_idx == 3)
       {
           hold_press = L1;
       }
       if(firstholdbutton_idx == 4)
       {
           hold_press = R1;
       }
       if(secondpressbutton_idx == 1)
       {
           second_press = DOWN;
       }
       if(secondpressbutton_idx == 2)
       {
           second_press = UP; 
       }
     
   }
combo KILLSWITCH {
    cls_oled(OLED_BLACK)
    set_ledx(1, 1);
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 6));  
    printf(center_x(get_char(MISC_TXT, 7), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 7));  
    printf(center_x(get_char(MISC_TXT, 8), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 8));
    wait(2000)
    call(RUMBLE_ON);
    wait(130);
    call(RUMBLE_ON);
    ScreenActive(TITLE_SCREEN);
    display_title = TRUE; 
} 
combo KILLSWITCH_OFF { 
    cls_oled(OLED_BLACK); 
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));  
    wait(2000)
    call(RUMBLE_OFF);
    wait(130)
    ScreenActive(TITLE_SCREEN); 
    display_title = TRUE; 
}
combo RUMBLE_ON {						
   set_ledx(2, 2);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
   wait(100);
   set_rumble(RUMBLE_B, 50);
   wait(150);
   reset_rumble();
}
combo RUMBLE_OFF {						
   set_ledx(1, 1);
   set_rumble(RUMBLE_A, 50);
   wait(300);
   reset_rumble();
   wait(400);
}
combo SAVE { 
   cls_oled(0);						
   printf(center_x(get_char(MISC_TXT, 9), OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 9));  
   wait(2000);
   ScreenActive(TITLE_SCREEN);
   display_title = TRUE; 
   call(RUMBLE_ON);
   wait(150);
   call(RUMBLE_ON);}
   
combo DRIVING_MODE { 
   cls_oled(OLED_BLACK);
   printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
   printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
   wait(3000);
   call(RUMBLE_ON);
   wait(150);
   display_title = TRUE; 
}
combo DRIVING_OFF {
   cls_oled(OLED_BLACK);
   printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
   wait(3000);
   call(RUMBLE_OFF);
   wait(150); 
   display_title = TRUE; 
} 
combo SNIPER_MODE { 
   cls_oled(OLED_BLACK); 
   printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
   printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
   wait(3000);
   call(RUMBLE_ON);
   wait(150);
   display_title = TRUE; 
}
combo SNIPER_OFF { 
   cls_oled(OLED_BLACK); 
   printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
   wait(3000);
   call(RUMBLE_OFF);
   wait(150);
   display_title = TRUE; 
}	
combo ANTIRECOIL {
// Vertical
   AntirecoilVertical = get_val(PS4_RY) + antirecoil_vertical[profile_idx];  
   if(AntirecoilVertical > 100) AntirecoilVertical = 100;
   if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) +  5)
   set_val(PS4_RY, (AntirecoilVertical * invert));
// Horizontal
   AntirecoilHorizontal = get_val(PS4_RX) + antirecoil_horizontal[profile_idx];
   if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
   if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx])  + 5)
   set_val(PS4_RX, AntirecoilHorizontal);
}
combo easy_plate{
   set_val(Swap,100);
   wait(6000)
}	
combo RAPIDFIRE { 
   wait(hold_time);
   set_val(Fire, 0);
   wait(rest_time);
}	
combo BLINK {
   led(profile_idx);
   wait(led_on);
   led(7);
   wait(led_off);
}
combo STICKY_AIM {
   set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
   wait(stickyaim_time);
   set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
   set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
   wait(stickyaim_time);
   set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
   wait(stickyaim_time);
   set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
   set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
   wait(stickyaim_time);
}
combo CANCEL_SLIDE {              
   set_val(Crouch, 100);          
   wait(120);                         
   set_val(Crouch, 0);            
   wait(60);                          
   set_val(Crouch, 100);          
   wait(50);                          
   set_val(Crouch, 100);          
   set_val(Jump, 100);           
   wait(60);                          
   set_val(Crouch, 0);            
   set_val(Jump, 100);          
   wait(10);                        
   set_val(Jump, 0);
} 

combo AUTO_PING{
   set_val(PS4_UP,100);
   wait(20)
   set_val(PS4_UP,0);
   wait(20)
   set_val(PS4_UP,100);
   wait(20)
   set_val(PS4_UP,0);
}
combo Quick_Scope {
   set_val(Ads,100);
   wait(quickscopedelay); 
   set_val(Ads,100);
   set_val(Fire,100);
   wait(40);
   set_val(Ads,100);
   wait(40); 
}         
 combo CH {
	set_val(Sprint,0);
	wait(60);
	set_val(Sprint,100);
	wait(110);
	set_val(Sprint,0);
	wait(110);}

combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}
combo AAS{
	set_val(PS4_RY, 1 * - AS);
	wait(AW);
	set_val(PS4_RX, 1 * - AS);
	wait(AW);
	set_val(PS4_RY,AS);
	wait(AW);
	set_val(PS4_RX,AS);
	wait(AW);
}
combo DS {
    set_val(Crouch,100);
    wait(40);
    set_val(Crouch,0);
    wait(DS_Speed);
}
combo BUNNYHOP{
    set_val(Jump, 100);
    wait(30);
    set_val(Jump, 0);
    wait(30);
    set_val(Jump, 100);
    wait(30);
    set_val(Jump, 0);
    wait(30);
}
combo FAST_MELEE {
    set_val(Melee, 100);
    wait(35);
    set_val(Melee, 0);
    wait(30);  
}
combo JUMP_ON_SHOT {
    set_val(Jump,100);
    wait(100);
}
combo Reload_Cancel {
 set_val(XB1_Y,100);
 wait(20);
 wait(20)
 set_val(XB1_Y,100);
 wait(20);
 reloading = FALSE; }
function block_function() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(Jump       , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(Reload    , 0 ); 	set_val(Swap        , 0);
set_val(Tactical   , 0 );   set_val(Lethal    , 0 ); 	set_val(Sprint    , 0 ); 	set_val(Melee       , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}
const uint8 BUTTONS[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 12
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 14 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 15 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }};// STICK AND MOVE SWAPPED = 16
	
function Buttons(Type) {
	
	Fire     = BUTTONS[Type][0];
	Ads      = BUTTONS[Type][1];
	Lethal   = BUTTONS[Type][2];
	Tactical = BUTTONS[Type][3];
	Jump     = BUTTONS[Type][4];
	Crouch   = BUTTONS[Type][5];
	Melee    = BUTTONS[Type][6];
	Sprint   = BUTTONS[Type][7];
	Reload   = BUTTONS[Type][8];
	Swap     = BUTTONS[Type][9];
	Ping     = BUTTONS[Type][10];
	
}
int Fire;
int Ads;
int Lethal;
int Tactical;
int Jump;
int Crouch;
int Melee;
int Sprint;
int Reload;
int Swap;
int Ping;
int driving_mode,sniper_mode;
/*
============================================================================================================================
   OLED SCREENS
============================================================================================================================
*/
define TITLE_SCREEN   = 0;
define MOD_MENU       = 1;
define EDIT_MENU      = 2;
//--defined names for columns makes it easier when writing the code
//--SCREEN_DATA[][] Columns
define ID          = 0;      	//--screen ID from list above
define TIMEOUT     = 1;        	//--screen times out if no activity 
define LED         = 2;       	//--cycle leds during this menu  
define PARENT      = 3;       	//--return to lastScreen when B/Circle pressed
define BLOCK_INPUT = 4;		    //--block all controler input 

//--common items for all screens
const int8 SCREEN_DATA[][] = {
//    ID              TIMEOUT        LED              PARENT	  BLOCK_INPUT	 
    {TITLE_SCREEN,       TRUE,		 TRUE,	          FALSE,		 FALSE},
    {MOD_MENU,           TRUE,		 TRUE,	           TRUE,	      TRUE},
    {EDIT_MENU,          TRUE,		 TRUE,	           TRUE,	      TRUE}  
};
int activeScreen,lastScreen,updateScreen;
/*
============================================================================================================================
   ScreenActive()
      one function to set passed ID as the active screen
============================================================================================================================
*/
function ScreenActive(screenID) {
    lastScreen = activeScreen;
    activeScreen = screenID;
    updateScreen = TRUE;
} 
function  NAME(){
		cls_oled(0);
		combo_run(RACE);
		combo_run(RN);
	if (Y_1 > 64)  
		Y_1 =  0;
	if (Y_2 > 64)  
		Y_2 =  0;
	if (Y_3 > 64)  
		Y_3 =  0;
	if (Y_4 > 64)  
		Y_4 =  0;
	if (Y_5 > 64)  
		Y_5 =  0;
	if (Y_6 > 64)  
		Y_6 =  0;
	if (Y_7 > 64)  
		Y_7 =  0;
	if (Y_8 > 64)  
		Y_8 =  0;
	if (SD1 > 105) 
		SD1 = -50;
	if (TP1 > 45)  
		TP1 =  0;
	if (TP2 < 0)   
		TP2 = 55;
		putc_oled(1,RN1);
		puts_oled(X_1,Y_1,0,1,1);
		putc_oled(1,RN2);
		puts_oled(X_2,Y_2,0,1,1);
		putc_oled(1,RN3);
		puts_oled(X_3,Y_3,0,1,1);
		putc_oled(1,RN4);
		puts_oled(X_4,Y_4,0,1,1);
		putc_oled(1,RN5);
		puts_oled(X_5,Y_5,0,1,1);
		putc_oled(1,RN6);
		puts_oled(X_6,Y_6,0,1,1);
		putc_oled(1,RN7);
		puts_oled(X_7,Y_7,0,1,1);
		putc_oled(1,RN8);
		puts_oled(X_8,Y_8,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
		putc_oled(1,SSA2);
		puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
		putc_oled(1,SSA3);
		puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
		putc_oled(1,SSA4);
		puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
		putc_oled(1,SSA5);
		puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
		putc_oled(1,SSA6);
		puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
		putc_oled(1,SSA7);
		puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
		putc_oled(1,SSA8);
		puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1);
		putc_oled(1,SSA9);
		puts_oled(SSMU9 + SD1,TP1 + 18,0,1,1);
		putc_oled(1,SSA10);
		puts_oled(SSMU10 + SD1,TP2 + 20,0,1,1);
		putc_oled(1,SSA11);
		puts_oled(SSMU11 + SD1,TP1 + 22,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU12 + SD1,TP2 + 24,0,1,1);
		putc_oled(1,SSA13);
		puts_oled(SSMU13 + SD1,TP1 + 26,0,1,1);
		putc_oled(1,SSA14);
		puts_oled(SSMU14 + SD1,TP2 + 28,0,1,1);
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	int RT,MSC,SD1,DGT,DGR,TP1,TP2;
// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
//position range [0..15]
function pack_usigned(int pvar, int ret, int position, int number_of_bits)
{
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}

//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits)
{
	mask = 0;
	ret = 0;
	
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}

//position range [0..1]   |  ret range = [-127..127]
function pack_int8_to_int16(int var1, int var2)
{
	ret = 0;
	
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}

	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
	
	return ret;
}
//position range [0..1]   |  ret range = [-127..127]
function unpack_int16_to_int8(int pvar, int var)
{
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	
	return ret;
}
function Save(){ 

  combo_run(SAVE)
   
  pval_data = pack_usigned(pval_data, toggle_legacyar[0],   0, 1);
  pval_data = pack_usigned(pval_data, toggle_legacyar[1],   1, 1);
  pval_data = pack_usigned(pval_data, toggle_antirecoil[0], 2, 1); 
  pval_data = pack_usigned(pval_data, toggle_antirecoil[1], 3, 1); 
  pval_data = pack_usigned(pval_data, toggle_rapidfire[0],  4, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[1],  5, 1);
  pval_data = pack_usigned(pval_data, toggle_taylorassist,  6, 1);
  pval_data = pack_usigned(pval_data, toggle_batts_sticky,   7,1);
  pval_data = pack_usigned(pval_data, toggle_quickscope,     8,1);
  pval_data = pack_usigned(pval_data, toggle_holdbreath,     9,1);
  pval_data = pack_usigned(pval_data, toggle_easy_plates,   10,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_slide,  11,1);
  pval_data = pack_usigned(pval_data, toggle_jump_shot,     12,1);
  pval_data = pack_usigned(pval_data, toggle_dropshot,      13,1);
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_usigned(pval_data, toggle_proneshot,      0,1);
  pval_data = pack_usigned(pval_data, toggle_bunnyhop,       1,1);
  pval_data = pack_usigned(pval_data, toggle_fastmelee,      2,1);
  pval_data = pack_usigned(pval_data, POLAR_ASSIST,          3,1);
  pval_data = pack_usigned(pval_data, DoGz_AIM_ASSIST,       4,1);
  pval_data = pack_usigned(pval_data, PROGRESSION_ASSIST,    5,1);
  pval_data = pack_usigned(pval_data, inverted_on,           6,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_reload,  7,1);
  set_pvar(SPVAR_2,pval_data);
  
  // AR Temp Values                                                          
  pval_data = pack_int8_to_int16(antirecoil_vertical[0],antirecoil_vertical[1]);    
  set_pvar(SPVAR_3,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_horizontal[0],antirecoil_horizontal[1]);     
  set_pvar(SPVAR_4,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_start[0],antirecoil_start[1]);     
  set_pvar(SPVAR_5,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_end[0],antirecoil_end[1]);     
  set_pvar(SPVAR_6,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoil_time[0],antirecoil_time[1]);     
  set_pvar(SPVAR_7,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_start[0],antirecoilH_start[1]);     
  set_pvar(SPVAR_8,pval_data);  
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_end[0],antirecoilH_end[1]);     
  set_pvar(SPVAR_9,pval_data);
  
  // AR Temp Values                                                         
  pval_data = pack_int8_to_int16(antirecoilH_time[0],antirecoilH_time[1]);     
  set_pvar(SPVAR_10,pval_data);
                                                        
  pval_data = pack_int8_to_int16(rate_of_fire[0],rate_of_fire[1]);         
  set_pvar(SPVAR_11,pval_data); 
  
  pval_data = pack_int8_to_int16(RADIUS2,STEPS);
  set_pvar(SPVAR_12,pval_data); 
  
  pval_data = pack_int8_to_int16(enemy_ping,STEADY_AIM);
  set_pvar(SPVAR_13,pval_data); 
  
  pval_data = pack_int8_to_int16(RADIUS,ANGLE);
  set_pvar(SPVAR_14,pval_data);
  
  pval_data = pack_int8_to_int16(POLAR_BOOST,POLAR_SHAKE);
  set_pvar(SPVAR_15,pval_data); 
  
  pval_data = pack_int8_to_int16(A_B_S,POLAR_RELEASE);
  set_pvar(SPVAR_16,pval_data); 
  
  pval_data = pack_int8_to_int16(stickyaim_size,stickyaim_time);
  set_pvar(SPVAR_17,pval_data); 
  
  pval_data = pack_int8_to_int16(Buttons,DoGz_ASSIST_RELEASE);
  set_pvar(SPVAR_18,pval_data); 
  
  pval_data = pack_int8_to_int16(singlebutton_idx,firstholdbutton_idx);
  set_pvar(SPVAR_19,pval_data); 
  
  set_pvar(SPVAR_20,D___AS);
  set_pvar(SPVAR_21,D_AS1);
  set_pvar(SPVAR_22,quickscopedelay);
  set_pvar(SPVAR_23,enemy_ping);
  set_pvar(SPVAR_24,secondpressbutton_idx); 
  set_pvar(SPVAR_25,max_reload_time_for_cancel); 
  
 
} 