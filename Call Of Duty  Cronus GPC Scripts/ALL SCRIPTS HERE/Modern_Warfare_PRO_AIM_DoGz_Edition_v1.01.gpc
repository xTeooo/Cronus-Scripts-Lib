/*

 /$$      /$$                 /$$                                     /$$      /$$                      /$$$$$$                                    /$$$$$$$                            /$$$$$$  /$$              
| $$$    /$$$                | $$                                    | $$  /$ | $$                     /$$__  $$                                  | $$__  $$                          /$$__  $$|__/              
| $$$$  /$$$$  /$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$  /$$$$$$$       | $$ /$$$| $$  /$$$$$$   /$$$$$$ | $$  \__//$$$$$$   /$$$$$$   /$$$$$$       | $$  \ $$ /$$$$$$   /$$$$$$       | $$  \ $$ /$$ /$$$$$$/$$$$ 
| $$ $$/$$ $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$| $$__  $$      | $$/$$ $$ $$ |____  $$ /$$__  $$| $$$$   |____  $$ /$$__  $$ /$$__  $$      | $$$$$$$//$$__  $$ /$$__  $$      | $$$$$$$$| $$| $$_  $$_  $$
| $$  $$$| $$| $$  \ $$| $$  | $$| $$$$$$$$| $$  \__/| $$  \ $$      | $$$$_  $$$$  /$$$$$$$| $$  \__/| $$_/    /$$$$$$$| $$  \__/| $$$$$$$$      | $$____/| $$  \__/| $$  \ $$      | $$__  $$| $$| $$ \ $$ \ $$
| $$\  $ | $$| $$  | $$| $$  | $$| $$_____/| $$      | $$  | $$      | $$$/ \  $$$ /$$__  $$| $$      | $$     /$$__  $$| $$      | $$_____/      | $$     | $$      | $$  | $$      | $$  | $$| $$| $$ | $$ | $$
| $$ \/  | $$|  $$$$$$/|  $$$$$$$|  $$$$$$$| $$      | $$  | $$      | $$/   \  $$|  $$$$$$$| $$      | $$    |  $$$$$$$| $$      |  $$$$$$$      | $$     | $$      |  $$$$$$/      | $$  | $$| $$| $$ | $$ | $$
|__/     |__/ \______/  \_______/ \_______/|__/      |__/  |__/      |__/     \__/ \_______/|__/      |__/     \_______/|__/       \_______/      |__/     |__/       \______/       |__/  |__/|__/|__/ |__/ |__/
                                                                   
                                                                       MODERN WARFARE PRO AIM DoGz Edition

                                                                                                                                                                                                                 
  $$$$$$$$                  /$$                           /$$           /$$  /$$$$$$   /$$      /$$$$$$    /$$        
|__  $$__/                 | $$                          | $$          |__/ /$$__  $$ | $$     /$$__  $$ /$$$$        
   | $$  /$$$$$$  /$$   /$$| $$  /$$$$$$   /$$$$$$   /$$$$$$$  /$$$$$$  /$$| $$  \__//$$$$$$  |__/  \ $$|_  $$        
   | $$ |____  $$| $$  | $$| $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$| $$| $$$$   |_  $$_/    /$$$$$$/  | $$        
   | $$  /$$$$$$$| $$  | $$| $$| $$  \ $$| $$  \__/| $$  | $$| $$  \__/| $$| $$_/     | $$     /$$____/   | $$        
   | $$ /$$__  $$| $$  | $$| $$| $$  | $$| $$      | $$  | $$| $$      | $$| $$       | $$ /$$| $$        | $$        
   | $$|  $$$$$$$|  $$$$$$$| $$|  $$$$$$/| $$      |  $$$$$$$| $$      | $$| $$       |  $$$$/| $$$$$$$$ /$$$$$$   Script Author     
   |__/ \_______/ \____  $$|__/ \______/ |__/       \_______/|__/      |__/|__/        \___/  |________/|______/      
                  /$$  | $$                                                                                           
                 |  $$$$$$/                                                                                           
                  \______/                                                                                                      	                               

            36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\||||||||||||||||||||||||||||||  TRIPLE AIM - POLAR - DOGZ ASSIST - PROGRESSION ASSIST ||||||||||||||||||||||||||||||
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936        36936
     36936   36936        36936
      369    36936          369
		   	  369	

CREDITS... Noozbar,DoGzTheFiGhTeR,Batts,Excalibur,Swizzy,DoNotAtMe. 

INSTRUCTIONS........
SETUP MENU...
PRESS UP & DOWN TO NAVIGATE or LEFT OR RIGHT TO NAVIGATE TO WARZONE PROFILE BUTTON/CONTROLLER CONFIG...
     _______________________
     |  PROFILE BUTTONS    |
     |  1 BUTTON PRESS     | PRESS CROSS/A TO EDIT/ PRESS UP AND DOWN TO CHANGE/PRESS CIRCLE/B TO EXIT BACK TO THIS SCREEN 
     |  2 BUTTON PRESS     | PRESS CROSS/A TO EDIT/ PRESS LEFT AND RIGHT TO CHANGE/PRESS CIRCLE/B TO EXIT BACK TO THIS SCREEN
     |   BOTH BUTTONS      | PRESS CROSS/A TO EDIT/ PRESS UP AND DOWN TO CHANGE / PRESS LEFT AND RIGHT TO NAVIGATE / PRESS CIRCLE/B TO EXIT         
     -----------------------
  <<  PRESS LEFT OR RIGHT  >>  TO ACCESS WARZONE PROFILE BUTTONS/CONTROLLER CONFIG/FLIPPED TRIGGERS
 
TO CHANGE BUTTONS ON THE WARZONE PROFILE AND BUTTON CONFIG > HOLD L2 & PRESS LEFT OR RIGHT TO CHANGE...

PRESS CIRCLE/B WHICH WILL TAKE YOU TO MOD MENU...

THE SETUP MENU CAN BE ACCESSED VIA MOD MENU "Configuration" WHICH WILL TAKE YOU BACK TO THIS SCREEN...

WARNING                WARNING                        WARNING                       WARNING                                            WARNING 
                                      DO NOT USE SAME BUTTONS FOR WARZONE PROFILE!!!!! 
                       IF YOU INTEND ON USING BOTH BUTTONS MAKE SURE TO DEACTIVATE 1 BUTTON PRESS & 2 BUTTON PRESS!!! 
ENTER MOD MENU
                HOLD L2 & PRESS OPTIONS TO ENTER THE MOD MENU << DO THE SAME TO EXIT MOD MENU..
EDITING VALUES 
                HOLD L2 AND PRESS LEFT OR RIGHT TO INCREASE AND DECREASE VALUES BY 1 OR PRESS UP & DOWN TO INCREASE AND DECREASE BY 10...
                PRESS CIRCLE/B TO EXIT TO MOD MENU...
DOGZ EDITION
                PRESS SQUARE/X TO EDIT THE MODS AVAILABLE IN DOGZ EDITION...
                PRESS CIRCLE/B TO EXIT TO MAIN MENU...
SAVING YOUR VALUES...
                WHILE IN MOD MENU, WHEN YOU HAVE FINISHED ADJUSTING MODS ETC... 
                PRESS XBOX/PS TO SAVE THEN EXIT THE MOD MENU...
KILLSWITCH 
                HOLD L2 & PRESS SHARE/MENU BUTTON TO ACTIVATE KILLSWITCH...
NEW FEATURES...

DRIVING MODE... (THIS WILL STOP SCREEN SHAKING WHEN DRIVING) 

                TO ACTIVATE DRIVING MODE, HOLD L2 AND HOLD LEFT TO ACTIVATE BEFORE JUMPING INTO A VEHICLE...
                WHEN YOU EXIT THE VEHICLE IT WILL AUTOMATICALLY DISABLE...

SNIPER MODE...  (THIS WILL ACTIVATE HOLDBREATH AND DEACTIVATE AIM ASSISTS)
                TO ACTIVATE SNIPER MODE, HOLD L2 AND HOLD RIGHT TO ACTIVATE WHEN USING A SNIPER
                USE THE SAME BUTTONS TO DEACTIVATE...
                
#####################################################################################################################################################

 */
 
 const int8 data1[]={-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,
	  -90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,
	  -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,
	  -14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,
	  51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,
	  92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,
	  99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,
	  70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,
	  13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,
	  -42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,
	  -78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,
	  -98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100}; 
//======================================================================================================================================================
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ VARIABLES ////////////////////////////////////////////////////////////////////////////////////
//======================================================================================================================================================
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 ); 
const string PRESS     = "Press"; 
const string _ON       = "On";
const string _OFF      = "Off";
const string MISC[]={
"Taylordrift21"," Primary "," Secondary","to enter setup","1 Button Press","2 Button Press","Both","Profile Buttons","Warzone Profile","Button Layout","Single Button","Double Buttons","Both Buttons",
//   0                 1          2              3                 4               5            6           7                  8               9               10              11              12
" All Profiles ","KillSwitch ON","Hold Circle/B","to turn OFF","SAVED","Driving Mode","Sniper Mode","Activated","Deactivated","Press X to edit","KillSwitch OFF","Press Cross/A","Press Square/X","Warzone",
//    13               14               15            16         17         18            19            20            21              22               23                 24          25             26
"Off","ADS Only","ADS & Fire","MW Pro Aim","DoGz Edition",""}
// 27           
const string WARZONEHOLDBUTTON[]={ 
"None Selected","L2","R2","L1","R1",""}; 
const string WARZONEPRESSBUTTON[]={ 
"None","Dpad Down","Dpad Up",""}; 
const string SINGLEBUTTON[]={ 
"v   Select   ^","Triangle","Dpad Down","Dpad UP",""}; 
const string FIRSTHOLDBUTTON[]={
"< Select Button >","< L2 >","< R2 >","< L1 >","< R1 >",""}; 
const string SECONDPRESSBUTTON[]={
"< Select Button >","< Dpad Down >","< Dpad UP >",""}; 
const string BOTHSINGLEBUTTON[]={
"None","Triangle","Dpad Down","Dpad UP",""}; 
const string BOTHHOLDBUTTON[]={ 
"None","L2","R2","L1","R1",""};
const string BOTHPRESSBUTTON[]={
"None","Dpad Down","Dpad UP",""}; 
const string CONTROLLER_LAYOUT[]={
   "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast",""}
//     0         1         2           3                 4                 5                   6                  7                  8                 9          10        11
const string FLIPPED[]={
"Off","Flipped Triggers",""}
const string MODNAME[] ={
  "Legacy AR","Antirecoil","Rapid Fire","DoGz Edition","Taylor Assist","Batts Sticky Aim","Quick Scope","Hold Breath","Easy Plates","Enemy Ping","Cancel Slide","Prone Shot","Drop Shot","Bunnyhop","Configuration",""};
// Mod_idx 0           1              2           3             4                 5               6            7            8            9
const string VALNAMES[]={
  "AR Vertical","AR Horizontal","AR Start","AR End","AR Time", "AR Horizontal","Rounds/Sec","Radius","Steps","Steady Aim","Sticky Size","Sticky Time","QScope Delay",""};
const string DOGZTHEFIGHTER[]={
"DoGz Polar","DoGz PolarV2","DoGz Assist","DoGz Progression","DoGz Smart Recoil",""}; 
const string DOGZTHEFIGHTER1[]={
   "Radius","Angle","Steady Aim","Boost","Shake","Input","Release","Radius Min","Radius Max","Radius Value","Polar Angle Min","Polar Angle Max","Angle Value","Polar Release","DoGz High Value","DoGz Low Value","Release",
   "Positive Value","Negative Value","Wait","Release","Strength","Invert Flow","Divide","Release","DoGz Rumble",""}
//     0        1       2       3       4        5             6                7             8             9              10           11      12
// Variables for all mods including variables for functions \\
define TRIANGLE = PS4_TRIANGLE,R1 = PS4_R1,L1 = PS4_L1,L2 = PS4_L2,R2 = PS4_R2,DOWN = PS4_DOWN,UP = PS4_UP;
int JUMP_BTN, CROUCH_BTN, RELOAD_BTN, SWITCH_BTN, TACTICAL_BTN,LETHAL_BTN,AIM_BTN,FIRE_BTN,SPRINT_BTN, MELEE_BTN;
int display_screen; 
int count_black,display_title,setup_display_menu;
int display_setup_screen = TRUE; 
int press = TRUE;
int hold_press = TRUE;
int warzone_hold_press = TRUE;
int DoGz_display_menu,DoGz_display,DoGz_display_edit,DoGz_idx,DoGz_edit_menu,DoGz_idx1; 
int activate_single_profile,activate_double_profile,activate_both_profile; 
int toggle_legacyar[3];
int toggle_antirecoil[2];
int toggle_rapidfire[3];
int toggle_taylorassist,toggle_batts_sticky,toggle_holdbreath,toggle_quickscope;
int cancel_slide,easy_plate,enemy_ping,toggle_proneshot,toggle_dropshot,toggle_bunnyhop; 
int bothholdbutton_idx,bothpressbutton_idx,bothsinglebutton_idx,active,active_btn,singlebutton_idx,firstholdbutton_idx,secondpressbutton_idx;
int setup_idx,_active,swap_on,btn_layout,setup_menu,select,second_press,warzone_press; 
int profile_idx,profile_1or2,warzone_loot_profile,warzoneholdbutton_idx,warzonepressbutton_idx; 
int driving_mode,sniper_mode,killswitch; 
int mod_menu,edit_menu,mod_idx,val_idx; 
define amount_of_editable_mods = 6;
define mods_not_on_all_profiles = 3;
define DoGz_idx_max = 4;
define mod_idx_max = 14; 
define amount_of_values = 12;
define amount_of_dogz = 17; 
int amount_of_profiles = 3;
int display_menu,display_edit_menu;
int antirecoil_start[2]; 
int antirecoil_end[2];
int antirecoil_time[2];
int antirecoil_horizontal[2]; 
int antirecoil_vertical[3]; 
int antirecoil_horizontal1[3];
int AntirecoilVertical; 
int AntirecoilHorizontal;
int rate_of_fire[3];
int Prone_Speed = 80; //Prone On Shot - How long before you prone
int DS_Speed = 60; //Drop Shot
int i_val,i_pnt,i_num,i_cnt,v,ar_y,x_ref;
int hold_time,rest_time,led_on,led_off;
int q;											
int double__tap[30];
init {
while(q < 30) 
{double__tap[q] = -1;       
q++;}}
int STEADY_VALUE; 
int ARC_VAL; 
int ARC___VAL; 
int DIVIDE;
int DOGZ_RELEASE; 
int DOGZ_RECOIL;
int DOGZ_RUMBLE =  FALSE;
define _CROSS = 129;
define VIB_A      = RUMBLE_A;
int ARC,ARC__VAL,ARC____VAL,ARC_V;
// DoGzTheFigherz Triple Aim
define PXS   = FALSE;
define PYS   = FALSE;
	
// DO NOT TOUCH \\
int   PPFX  = PXS;    
int   PPFY  = PYS;    
int   PVID;      
int   PFD   = TRUE;  
int   PPFD  = TRUE; 
define PRX		  = POLAR_RX;
define PRY		  = POLAR_RY;
define RS         = POLAR_RS;
define X          = PS4_RX;                                    
define Y          = PS4_RY;
int DoGz_AIM_ASSIST;   
int PROGRESSION_ASSIST;
int POLAR_ASSIST;  
int POLAR_ASSISTV2; 
//PROGRESSION ASSIST SETTINGS
define AAMIN  = -6;// MINIMUM VALUE  
define AAMAX  =  6;// MAXIMUM VALUE  
define AAVAL  =  6;// STEPS   
define AAWMIN =  1;// MIN WAIT   
define AAWMAX =  2;// MAXIMUM WAIT   
define AAWVAL =  1;// STEPS
// DON'T TOUCH THESE BELOW
int D_AS;
int AS = AAMIN;  
int AW = AAWMIN;
int AAS = 1;   
int AAD = 1;
int PXA;    
int PXSE;    
int PVSI;   	
int PYA;   
int PYSE;   
int PVS;  	
int REL;
//POLAR ASSIST SETTINGS
int RADIUS;
int RADIUS1; 
int ANGLE;
int POLAR_BOOST;
int POLAR_SHAKE;
int A_B_S;
int POLAR_RELEASE;
int POLAR_RADIUS,POLAR_ANGLE,SPEED;
//DoGz ASSIST VALUES
int DoGz_ASSIST_RELEASE;
define VMCR   =  0;// DEFAULT VM SPEED
int D__AS;  
int D__AS1    =  4; // INVERT DIRECTION VALUE
int D___AS;
int D_AS1; 
//POLAR CONDITIONS
define ACTIVE_WHEN_ADS    =  TRUE;// POLAR ASSSIT PRESSING AIM
define ACTIVE_WHEN_FIRING =  TRUE;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
define POLAR_BOOST_FIRE   =  TRUE;   
define POLAR_SHAKE_FIRE   =  TRUE;
int VM                    =  TRUE;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )   
int POSI          =   0;    
int NEGI          =   0;        
int WA            =   0;          
int PROG_RELEASE  =   20;   
int STEPS,stickyaim_size,stickyaim_time,quickscopedelay; 
int STEADY_AIM;                
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2; 
int time;                                             
int angle, cos_angle, sin_angle;                      
int actual_X, actual_Y, actual_Magnitude, max_Magnitude,angle_Out;
const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
    80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
    6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
    -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
    -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
    -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
    -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
     9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
    82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 
      
    init{ 
    STEADY_AIM = (360 / STEADY_AIM) / 2;
 // Primary 
	toggle_legacyar[0]   = get_pvar(SPVAR_1, 0, 1, 0   );       antirecoil_vertical[0]    = get_pvar(SPVAR_4,  -99,  99, 0 );
	toggle_antirecoil[0] = get_pvar(SPVAR_2, 0, 1, 0   );       antirecoil_horizontal[0]  = get_pvar(SPVAR_5,  -99,  99, 0 );      
	toggle_rapidfire[0]  = get_pvar(SPVAR_3, 0, 1, 0   );       antirecoil_start[0]       = get_pvar(SPVAR_6,  -99,  99, 0 );
	                                                            antirecoil_end[0]         = get_pvar(SPVAR_7,  -99,  99, 0 );         
	                                                            antirecoil_time[0]        = get_pvar(SPVAR_8,  -99,  99, 0 );           
	                                                            antirecoil_horizontal[0]  = get_pvar(SPVAR_9,  -99,  99, 0 );  
	                                                            rate_of_fire[0]           = get_pvar(SPVAR_10,   1,  25, 1 );                                                           
//  Secondary
    toggle_legacyar[1]   = get_pvar(SPVAR_11,0, 1, 0   );       antirecoil_vertical[1]    = get_pvar(SPVAR_14, -99,  99, 0 );
	toggle_antirecoil[1] = get_pvar(SPVAR_12,0, 1, 0   );       antirecoil_horizontal[1]  = get_pvar(SPVAR_15, -99,  99, 0 );      
	toggle_rapidfire[1]  = get_pvar(SPVAR_13,0, 1, 0   );       antirecoil_start[1]       = get_pvar(SPVAR_16, -99,  99, 0 );
	                                                            antirecoil_end[1]         = get_pvar(SPVAR_17, -99,  99, 0 );         
	                                                            antirecoil_time[1]        = get_pvar(SPVAR_18, -99,  99, 0 );           
	                                                            antirecoil_horizontal[1]  = get_pvar(SPVAR_19, -99,  99, 0 );  
	                                                            rate_of_fire[1]           = get_pvar(SPVAR_20,   1,  25, 1 );	                                                
//  Warzone Profile
	toggle_legacyar[2]   = get_pvar(SPVAR_21,0, 1, 0   );       antirecoil_vertical[2]    = get_pvar(SPVAR_23, -99,  99, 0 );
	toggle_rapidfire[2]  = get_pvar(SPVAR_22,0, 1, 0   );       antirecoil_horizontal[2]  = get_pvar(SPVAR_24, -99,  99, 0 );      
	                                                            rate_of_fire[2]           = get_pvar(SPVAR_25,   1,  25, 1 );      
                                                                                                                     
    POLAR_ASSIST        = get_pvar(SPVAR_26, 0, 1, 0    );      enemy_ping                = get_pvar(SPVAR_39,   0,   2, 0 );
    DoGz_AIM_ASSIST     = get_pvar(SPVAR_27, 0, 1, 0    );      easy_plate                = get_pvar(SPVAR_40,   0,   1, 0 );                                                        
    PROGRESSION_ASSIST  = get_pvar(SPVAR_28, 0, 1, 0    );      swap_on                   = get_pvar(SPVAR_41,   0,   1, 0 );
    RADIUS              = get_pvar(SPVAR_29, 1, 100, 8  );      btn_layout                = get_pvar(SPVAR_42,   0,  11, 0 ); 
    ANGLE               = get_pvar(SPVAR_30, 1, 50, 20  );      cancel_slide              = get_pvar(SPVAR_43,   0,   1, 0 ); 
    POLAR_BOOST         = get_pvar(SPVAR_31, 1, 30, 5   );      toggle_proneshot          = get_pvar(SPVAR_44,   0,   1, 0 );
    POLAR_SHAKE         = get_pvar(SPVAR_32, 1, 50, 20  );      toggle_dropshot           = get_pvar(SPVAR_45,   0,   1, 0 ); 
    A_B_S               = get_pvar(SPVAR_33, 1, 5, 2    );      toggle_bunnyhop           = get_pvar(SPVAR_46,   0,   1, 0 );  
    POLAR_RELEASE       = get_pvar(SPVAR_34, 1, 50, 15  );      RADIUS1                   = get_pvar(SPVAR_47,   1,  99,20 );  
    D___AS              = get_pvar(SPVAR_35, 35, 35, 5  );      STEPS                     = get_pvar(SPVAR_48,   1,  99,20 );
    D_AS1               = get_pvar(SPVAR_36, 35, 35, -5 ):      STEADY_AIM                = get_pvar(SPVAR_49,   1,  90,30 );
    DoGz_ASSIST_RELEASE = get_pvar(SPVAR_37, 1, 100, 50 );      stickyaim_size            = get_pvar(SPVAR_50,   1,  50,20 ); 
    quickscopedelay     = get_pvar(SPVAR_38, 50, 600,350);      stickyaim_time            = get_pvar(SPVAR_51,   1,  99,20 );
    ARC_VAL             = get_pvar(SPVAR_52, 99, 99, 50 );      ARC___VAL                 = get_pvar(SPVAR_53,  99,  99,60 );
    DIVIDE              = get_pvar(SPVAR_54,  10, 20, 3 );      DOGZ_RELEASE              = get_pvar(SPVAR_55,  99,  99,40 );
    PXA                 = get_pvar(SPVAR_56, 1, 20, 10  );      PXSE                      = get_pvar(SPVAR_57,   1,  40,25);
    PVSI                = get_pvar(SPVAR_58, 1, 40, 1  );       PYA                       = get_pvar(SPVAR_59,   1, 360,-160); 
    PYSE                = get_pvar(SPVAR_60, 1, 360,160 );      PVS                       = get_pvar(SPVAR_61,   1, 170,80); 
    REL                 = get_pvar(SPVAR_62, 1, 40, 25  ); 
    

  }
/*===========================================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MAIN SECTION ////////////////////////////////////////////////////////////////
===========================================================================================================================*/
    main{ 
    set_val(TRACE_1, AAMIN );
    set_val(TRACE_2,swap_on);
    set_val(TRACE_3,enemy_ping); 
    

       TitleScreen(); 
       
       Setup_Display_Screen();
       
       Setup_Input();
       
       Button_Layout(); 
       
       if(setup_display_menu)     { 
        Display_Setup_Mods();     }
        
       if(activate_single_profile){ 
        single_press_profile();   }
        
       if(activate_double_profile){ 
        double_button_press();    }
        
       if(activate_both_profile)  {
        switch_profiles();        } 
     
/*==========================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MOD MENU //////////////////////////////////////////
==========================================================================================*/
       if(get_val(AIM_BTN) && event_press(PS4_OPTIONS)) 
       {
                                mod_menu =! mod_menu; 
                                display_menu = TRUE;
                                DoGz_display_menu = FALSE;
                                DoGz_edit_menu = FALSE; 
                                DoGz_display = FALSE; 
                                edit_menu = FALSE; 
                                display_title = FALSE; 
                                mod_idx = 0; 
      if(!mod_menu) 
      {  
                      mod_menu = FALSE;
                      display_menu = FALSE; 
                      display_title = TRUE;
                      setup_menu = FALSE;
                      setup_display_menu = FALSE; 
                      DoGz_display = FALSE;
                      DoGz_edit_menu = FALSE; 
                     
                      }
                          } 
                          if(mod_menu)
                          { 
                           if(mod_idx <= amount_of_editable_mods)
                           {
                             if(event_press(PS4_CROSS) && !edit_menu && mod_idx != 3)
                             {
                                  val_idx = amount_of_values + 1;
                                  edit_menu = TRUE;
                                  mod_menu = FALSE; 
                                  display_edit_menu = TRUE;   
                             }
                             
                             }
                             if(event_press(PS4_RIGHT))
                             { 
                                 mod_idx += 1; 
                                 display_menu = TRUE;
                             } 
                             if(event_press(PS4_LEFT))
                             {
                                 mod_idx -= 1; 
                                 display_menu = TRUE; 
                             }
                             if(!get_val(PS4_L2) && event_press(PS4_PS))
                             { 
                                 Save(); 
                             }
                             if(event_press(PS4_TRIANGLE))
                             {
                                 profile_idx += 1;
                                 if(profile_idx > amount_of_profiles - 1) 
                                 profile_idx = 0;
                             }
                             if(mod_idx > mod_idx_max) 
				                mod_idx = 0;
			                 if(mod_idx < 0)
			                	mod_idx = mod_idx_max;
                             
                                ModMenu (); 
                                block_btn();
                      }
/*=====================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ EDIT MENU //////////////////////////////////////////////////
=====================================================================================================*/
                      if(edit_menu)
                      { 
                            if(event_press(PS4_CIRCLE)) 
                            { 
                                 edit_menu  = FALSE;
                                 display_edit_menu = FALSE; 
                                 setup_display_menu = FALSE; 
                                 display_menu = TRUE; 
                                 mod_menu = TRUE;       
                            }
                            if(!get_ival(PS4_L2) && event_press(PS4_RIGHT))
                            {
                                val_idx += 1;
                                display_edit_menu = TRUE; 
                            }
                            if(!get_ival(PS4_L2) && event_press(PS4_LEFT))
                            { 
                                val_idx -= 1;
                                display_edit_menu = TRUE; 
                            }
                                if(mod_idx == 0) mod_limits (0,1); 
                                if(mod_idx == 1) mod_limits (2,5);
                                if(mod_idx == 2) mod_limits (6,6);
                                if(mod_idx == 4) mod_limits (7,9); 
                                if(mod_idx == 5) mod_limits (10,11);
                                if(mod_idx == 6) mod_limits (12,12);
                               
                                EditMenu();
                                block_btn();
}
/*=====================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ DoGz MENU /////////////////////////////////////////
=====================================================================================*/
if(mod_idx == 3)
{ 
                            if(event_press(PS4_CROSS) && !DoGz_display_menu)
                            { 
                                DoGz_idx = 0; 
                                mod_menu = FALSE; 
                                display_menu = FALSE; 
                                DoGz_display_menu = TRUE; 
                                DoGz_display = TRUE;                              
if(!DoGz_display_menu)
{ 
                                mod_menu = TRUE;
                                display_menu = TRUE;
                            }       
}                              
if(DoGz_display_menu)
{ 
                            if(event_press(PS4_SQUARE) && !DoGz_edit_menu)
                            {
                                  DoGz_idx1 = amount_of_dogz + 1; 
                                  DoGz_edit_menu = TRUE; 
                                  DoGz_display_edit = TRUE; 
                                  DoGz_display_menu = FALSE; 
                            }
                            if(event_press(PS4_CIRCLE)) 
                            { 
                                 DoGz_display_menu = FALSE;
                                 DoGz_display = FALSE; 
                                 display_menu = TRUE; 
                                 mod_menu = TRUE;       
                            }
                            if(!get_ival(PS4_L2) && event_press(PS4_RIGHT))
                            {
                                DoGz_idx += 1; 
                                DoGz_display = TRUE; 
                            }
                            if(!get_ival(PS4_L2) && event_press(PS4_LEFT))
                            { 
                                DoGz_idx -= 1;
                                DoGz_display = TRUE;
                            }
                            if(DoGz_idx > DoGz_idx_max) 
				                 DoGz_idx = 0;
			                if(DoGz_idx < 0)
			                	 DoGz_idx = DoGz_idx_max;
			                	
			                     DoGz_Triple();
			                     block_btn();
}
if(DoGz_edit_menu)
{ 
                           if(event_press(PS4_CIRCLE)) 
                           { 
                                 DoGz_edit_menu  = FALSE;
                                 DoGz_display_edit = FALSE; 
                                 mod_menu = FALSE;
                                 display_menu = FALSE; 
                                 DoGz_display_menu = TRUE; 
                                 DoGz_display = TRUE; 
                           }
                           if(!get_ival(PS4_L2) && event_press(PS4_RIGHT))
                           {
                                DoGz_idx1 += 1;
                           }
                           if(!get_ival(PS4_L2) && event_press(PS4_LEFT))
                           { 
                                DoGz_idx1 -= 1;
                           }
                            if(DoGz_idx == 0)mod_limits1(0, 6);     
		    		        if(DoGz_idx == 1)mod_limits1(7, 13); 
		    		        if(DoGz_idx == 2)mod_limits1(14,16); 
		    		        if(DoGz_idx == 3)mod_limits1(17,20);
		    		        if(DoGz_idx == 4)mod_limits1(21,25); 
		    		           
		    		           DoGz_Menu();
		    		           block_btn();
		    		       } 	    		     	    		       	    		               		       
}
/*=====================================================================================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ DRIVING MODE && SNIPER MODE //////////////////////////////////////////////////////////////////////////
=====================================================================================================================================================================*/
if(!mod_menu && !killswitch && !edit_menu && !setup_menu && !DoGz_display_menu && !DoGz_edit_menu && !activate_single_profile && !activate_double_profile && !activate_both_profile) { 
/*=============================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SWITCH PROFILES //////////////////////////////////////////////////
=============================================================================================================*/
                    if(press && event_release(press)&& get_ptime(press)<150 || (get_val(PS4_L3) && event_release(PS4_TRIANGLE)))
                     {
        	                profile_1or2=!profile_1or2; 
        	                display_title = TRUE; 
        	                   
                     }
                     if(hold_press &&  get_ival(hold_press) && event_release(second_press) && get_ptime(second_press)<150)
                     {
        	                profile_1or2=!profile_1or2;
        	                display_title = TRUE; 
        	                
                     }
                           if(get_val(PS4_L3))
		                    	set_val(PS4_TRIANGLE, 0);
		                    	
                            if(profile_1or2)
        		               profile_idx = 1;
        	                else	
        		               profile_idx = 0;      
                     }
                     if(warzone_hold_press && get_ival(warzone_hold_press) && event_release(warzone_press) && get_ptime(second_press)<150) 
                     {
                            profile_idx = 2; 
	       	                warzone_loot_profile = !warzone_loot_profile;
	       	                display_title = TRUE; 
	    
                     if(!warzone_loot_profile)
                     {
    				        if(profile_1or2)
	    				        profile_idx = 1;
	    			        else 	
	    			        	profile_idx = 0; 
                     }
          
}
if(!mod_menu && !edit_menu && !setup_menu && !DoGz_display_menu && !DoGz_edit_menu && !activate_single_profile && !activate_double_profile && !activate_both_profile) { 
if(get_val(PS4_L2))
{
    set_val(PS4_RIGHT,0); 
}
if(get_val(AIM_BTN) && get_ival(PS4_RIGHT) && get_ptime(PS4_RIGHT)> 800)
{
    sniper_mode = TRUE; 
    toggle_holdbreath = TRUE; 
    combo_run(SNIPER_MODE); 
}  
if(sniper_mode) 
{
                     if(event_press(PS4_CIRCLE))
                     {
                     sniper_mode = FALSE; 
                     combo_run(SNIPER_OFF);
                     toggle_holdbreath = FALSE; 
                     }                 
                          
}
if(!mod_menu && !edit_menu && !setup_menu && !DoGz_display_menu && !DoGz_edit_menu && !activate_single_profile && !activate_double_profile && !activate_both_profile) { 
if(get_val(PS4_L2))
{
    set_val(PS4_LEFT,0); 
}
if(get_val(AIM_BTN) && get_ival(PS4_LEFT) && get_ptime(PS4_LEFT)> 800)
{
    driving_mode = TRUE;
    combo_run(DRIVING_MODE);
}                 
if(driving_mode)
{
                     if(event_press(PS4_CIRCLE)) 
                     {
                            driving_mode = FALSE;
                            combo_run(DRIVING_OFF); 
                     }
           } 
 }
/*===========================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ KILLSWITCH /////////////////////////////////////////////
===========================================================================================*/

    		         if (event_press(PS4_SHARE) && ((!swap_on && get_ival(PS4_L2)) || (swap_on && get_ival(PS4_L1)))) 
    		         { 
    		                killswitch = TRUE; 
    		                combo_run(KILLSWITCH); 
    		         }
                     if(killswitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) 
                     { 
                            killswitch = FALSE; 
                            combo_run(KILLSWITCH_OFF);       
                     
           
}
if(!mod_menu && !setup_menu && !killswitch)
{
if(toggle_legacyar[profile_idx] == 1 && !driving_mode)
{
		if(get_val(FIRE_BTN))
			combo_run(ANTIRECOIL);
		  else
			combo_stop(ANTIRECOIL);
}
if(toggle_antirecoil[profile_idx] == 1 && !driving_mode)
{
	 		  if(antirecoil_start[profile_idx] < antirecoil_end[profile_idx])
	    	   		i_val = 1; 
	    		else
	    	    	i_val = -1;
	    		i_pnt = (antirecoil_time[profile_idx] * 10) / (abs(antirecoil_start[profile_idx] - antirecoil_end[profile_idx])); 
	    	
	    		if(!get_val(FIRE_BTN)) 
	    		{
					ar_y = antirecoil_start[profile_idx];
	    	    	i_cnt = 0;
	    	    	i_num = 0;
	    		}     
	    	    if(get_val(FIRE_BTN))
	    		{
	    	    	if(!p_complete())  
						ar_y = p_val();
	    	    	else
	    	        	ar_y = antirecoil_end[profile_idx];
	            
					if(y_val() < 100)
	           			set_val(PS4_RY,y_val()); 
	           	
					combo_run(X_VAL);	
	    		}
	    		if(abs(get_val(PS4_RX)) > abs(antirecoil_horizontal[profile_idx]) + 5)
	  	  			combo_stop(X_VAL);          
}
if(!killswitch){ 
if (DOGZ_RECOIL && !driving_mode) {
if (DOGZ_RUMBLE) {
if (get_ival (AIM_BTN) && get_ival (FIRE_BTN) && abs(get_ival(PS4_RY)) <= DOGZ_RELEASE && abs(get_ival(PS4_RX)) <= DOGZ_RELEASE && get_rumble(VIB_A)) {
	ARC = TRUE;
	DoGz_ARC();
	}
}
	else
if (!DOGZ_RUMBLE && get_val(AIM_BTN) && get_val(FIRE_BTN) > 70 && abs(get_ival(PS4_RY)) <= DOGZ_RELEASE && abs(get_ival(PS4_RX)) <= DOGZ_RELEASE) {
	ARC = TRUE;
	DoGz_ARC();
	}	

if (event_release(AIM_BTN) || event_release(FIRE_BTN)) {
	ARC = FALSE;
	}
}
/*==============================================================================================================
////////////////////////////////////////// RAPID FIRE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
==============================================================================================================*/
if(toggle_rapidfire[profile_idx] == 1 && !driving_mode)
{
         hold_time = 500 / rate_of_fire[profile_idx]; 
           rest_time = hold_time - 20;
           if(rest_time < 0) rest_time = 0;
	    	// Run combo
	    		if(get_val(FIRE_BTN))
	    			combo_run(RAPIDFIRE);
	    		else
	    			combo_stop(RAPIDFIRE);
	    		
	    		led_on = 150;
	    		led_off = 300;
	    		combo_run(BLINK);
}
/*=============================================================================================================
//////////////////////////////////////// POLAR AIM & STICKY AIM \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
=============================================================================================================*/
if(toggle_taylorassist && !driving_mode && !sniper_mode)
{
  				actual_X = get_val(X);
		  		actual_Y = get_val(Y);
		  		actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));
		  		max_Magnitude = (actual_Magnitude < 100);
  
				if (!(time++ % STEP_INTERVAL))
				{
    				angle += STEPS;
  				}
  				angle = angle % 360;
  				sin_angle = Polar_Array[angle % 360];
		  		cos_angle = Polar_Array[(angle + 270) % 360];
		  		cos_angle = (cos_angle * RADIUS1) / 100;
		  		sin_angle = (sin_angle * RADIUS1) / 100;
		  
  				if ((ACTIVE_WHEN_ADS && get_val(AIM_BTN) || (ACTIVE_WHEN_FIRING && get_val(FIRE_BTN))))
   				{ 
    				vm_tctrl(VM_INTERVAL);
    				if (actual_Magnitude <= RADIUS1)
    				{
      					sin_angle -= actual_Y;
      					cos_angle -= actual_X;
    				}
    				else 
    				{
				      	sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
				      	cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude;
				    }
    				set_val(X, calculate(actual_X + cos_angle, -100, 100));
    				set_val(Y, calculate(actual_Y + sin_angle, -100, 100));
  				}
 				else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) {
    				vm_tctrl(0); 
  				}
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}        
} 

   POLAR_RADIUS = RADIUS;
   POLAR_ANGLE  = ANGLE;
if (PROGRESSION_ASSIST && !driving_mode && !sniper_mode && get_val(AIM_BTN) >= 80) {
if (!combo_running(AAS)) {
	AS = PROGRESSION(AS,AAMIN + NEGI,AAMAX + POSI,AAVAL,AAS,1);
    AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
    combo_run(AAS);
    	}
if (abs(get_val(PS4_RY))> PROG_RELEASE || abs(get_val(PS4_RX)) > PROG_RELEASE) {
	combo_stop(AAS);
	}
}
   POLAR_RADIUS = RADIUS;
   POLAR_ANGLE  = ANGLE;
if (POLAR_ASSIST && !driving_mode && !sniper_mode && get_val(AIM_BTN) && abs(get_ival(PS4_RX)) <= POLAR_RELEASE && abs(get_ival(PS4_RY)) <= POLAR_RELEASE) {
if (POLAR_BOOST_FIRE && get_val(FIRE_BTN)) {
	POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
	}
	else {
	POLAR_RADIUS = POLAR_RADIUS;
	}
if (POLAR_SHAKE_FIRE && get_val(FIRE_BTN)) {
	POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
	}
	else {
	POLAR_ANGLE = POLAR_ANGLE;
	}    
    set_polar(POLAR_RS,SPEED = (SPEED + POLAR_ANGLE) % 360,abs(get_ival(POLAR_RX)) / A_B_S + POLAR_RADIUS * 328);
    }
    else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) {
    		       vm_tctrl(0); 
  	     }
  		 if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  		 {
  				   STEADY_VALUE = atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
		 if (get_val(POLAR_RY) > 0) 
  				   STEADY_VALUE =  map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   		 else
   				   STEADY_VALUE = map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  	Set_polar1(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
	}        
}
if (DoGz_AIM_ASSIST && !driving_mode && !sniper_mode && abs(get_val(PS4_RX)) < DoGz_ASSIST_RELEASE && abs(get_val(PS4_RY)) < DoGz_ASSIST_RELEASE) {
if (get_val(AIM_BTN) > 80) {
	D_AS = TRUE;
	AIM();
}
if (event_release(AIM_BTN) || event_release(FIRE_BTN)){
	D_AS = FALSE;
	vm_tctrl(VMCR); 
	}
}
if(POLAR_ASSISTV2 && !driving_mode && !sniper_mode){
if (get_val(AIM_BTN) || get_val(FIRE_BTN)) {
    if (abs(get_ival(PS4_RX)) < REL && abs(get_ival(PS4_RY)) < REL) {
    		
    	PPFX = PolarFlow(PPFX,PXS + PXA,PXSE,PVSI,PFD,1);
        PPFY = PolarFlow(PPFY,PYS + PYA,PYSE,PVS,PPFD,2);
       	    
   		set_polar(POLAR_RS,PPFY,(abs(get_ival(POLAR_RX)) + abs(get_ival(POLAR_RY))) / 4 + 327 * PPFX);
   		}
    }
}
if(toggle_batts_sticky && !driving_mode && !sniper_mode)
{
			    if(get_val(AIM_BTN))
			   		combo_run(STICKY_AIM);
			    else 
			    	combo_stop(STICKY_AIM); 
}
/*================================================================================================================================================
///////////////////////////////////////////////////// HOLD BREATH & QUICKSCOPE \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
================================================================================================================================================*/
if(toggle_holdbreath)
{
	          	if(get_val(AIM_BTN))
					set_val(SPRINT_BTN, 100);
	                      
	          	if(get_val(PS4_LY) <-90 && get_val(AIM_BTN) && get_ptime(AIM_BTN) > 200)
	              	combo_stop(CH);       
	                    
	          	if(event_press(AIM_BTN)) 
	              	combo_run(CH);
	  
	          	if(get_val(AIM_BTN) && get_lval(SPRINT_BTN)) 
	              	set_val(SPRINT_BTN, 0);       
}
if(toggle_quickscope)
{
	      		if(!swap_on && event_release(AIM_BTN) && get_ptime(AIM_BTN) < 140 || swap_on && event_release(TACTICAL_BTN) && get_ptime(TACTICAL_BTN) < 140)
	          		combo_run(Quick_Scope);
}
/*==============================================================================================================================================
/////////////////////////////////////////////////// ENEMY PING & EASY PLATES \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
==============================================================================================================================================*/
if(enemy_ping == 1)
{
    if(get_val(AIM_BTN) && double_click(PS4_UP))
	      combo_run(AUTO_PING); 
}
if(enemy_ping == 2)
{
    if(get_val(AIM_BTN) && double_click(PS4_UP))
	      combo_run(AUTO_PING);
	if(!swap_on && event_press(FIRE_BTN) || swap_on && event_press(LETHAL_BTN))
          combo_run(AUTO_PING);        			 
 }      
if(easy_plate)
{
		  		if(get_val(SWITCH_BTN)&&get_ptime(SWITCH_BTN)>350)
			  		combo_run(easy_plate);
			    
		  		if(get_val(AIM_BTN)>10 || get_val(FIRE_BTN)>10 || get_val(RELOAD_BTN))
			  		combo_stop(easy_plate);	
}
/*==============================================================================================================================================
////////////////////////////////////////////////// SLIDE MODS & DROP MODS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
==============================================================================================================================================*/
if(cancel_slide)  
{                                                                                                  
	    		if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
	    		{
			      	if(event_release (CROUCH_BTN))
			         	combo_run(CANCEL_SLIDE)                                            
		    	}                                 
} 
if(toggle_proneshot) 
{ 
	     		if(get_val(FIRE_BTN) && get_ptime(FIRE_BTN) > Prone_Speed)
	          		set_val(CROUCH_BTN,100); 
}
if(toggle_dropshot) 
{ 
	     		if(get_val(FIRE_BTN))
	            	combo_run(DS);
}
if(toggle_bunnyhop) 
{ 
	     		if (get_val(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) 
	             	combo_run(BUNNYHOP); 
                }
        }
}
if(killswitch)
    led(7);
else
    led(profile_idx); 
}


function Setup_Input(){
if(display_setup_screen) { 

                            if(event_press(PS4_SQUARE))
                            {
                                 setup_menu = TRUE;
                                 setup_display_menu = TRUE;
                                 display_setup_screen = FALSE; 
                                 Display_Setup_Mods(); 
                                 combo_run(RUMBLE_ON);
                                 active_btn = 0; 
                            }                                 
}
if(setup_menu)
{
                            if(event_release(PS4_CIRCLE)) 
                            {   
                                 setup_menu = FALSE;
                                 mod_menu = TRUE; 
                                 setup_display_menu = FALSE; 
                                 display_menu = TRUE; 
                                 combo_run(RUMBLE_ON);     
                            }
                            if(!get_val(PS4_L2) && event_press(PS4_RIGHT)) 
                            {
                                 setup_idx += 1;
                                 if(setup_idx > 2) 
                                 setup_idx = 0; 
                                 setup_display_menu = TRUE; 
                            }
                            if(!get_val(PS4_L2) && event_press(PS4_LEFT)) 
                            {
                                 setup_idx -= 1; 
                                 if(setup_idx < 0)
                                 setup_idx = 2;  
                                 setup_display_menu = TRUE; 
                            } 
                            block_btn();
}
if(setup_idx == 0){
                            if(event_press(XB1_UP)) 
                            {
 	                             active_btn -= 1; 
                                 if(active_btn < 0) 
 	                             active_btn = 2;     
                            }
                            if(event_press(XB1_DOWN)) 
                            {
                                 active_btn += 1;
                                 if(active_btn > 2) 
 	                             active_btn = 0;   
                            } 
}
if(setup_idx == 1) { 
                            if(get_val(PS4_L2) && event_press(PS4_RIGHT))
                            {
                            if(select == 0) 
                            { 
                                 warzoneholdbutton_idx += 1; 
                                 if(warzoneholdbutton_idx > 4) warzoneholdbutton_idx = 0;     
                            }
                            if(select == 1) 
                            {
                                 warzonepressbutton_idx += 1; 
                                 if(warzonepressbutton_idx > 2) warzonepressbutton_idx = 0;    
                            }
                            } 
                            if(get_val(PS4_L2) && event_press(PS4_LEFT))  
                            {
                            if(select == 0)
                            {      
                                 warzoneholdbutton_idx -= 1; 
                                 if(warzoneholdbutton_idx < 0) warzoneholdbutton_idx = 4; 
                            }    
                            if(select == 1)
                            {
                                 warzonepressbutton_idx -= 1;
                                 if(warzonepressbutton_idx < 0) warzonepressbutton_idx = 2;  
                            }
                   }
          }
}  
function Setup_Display_Screen(){
if(display_setup_screen) {  
           cls_oled(OLED_BLACK); 
           rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	   line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
           putc_oled(1,_CROSS);
           puts_oled(80,7,1,1,1);
           printf(22,10,OLED_FONT_SMALL,OLED_WHITE,PRESS[0]);  
           printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  // medium si 
           }
}
function Display_Setup_Mods(){ 
   Switch_Buttons();
if(setup_display_menu){  
if(setup_idx == 0) { 
          cls_oled(OLED_BLACK); 
          rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
          printf(center_x(get_char(MISC_TXT, 7), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 7));  
          printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4));  
          printf(center_x(get_char(MISC_TXT, 5), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 5)); 
          printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),52,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT,6));
if(active_btn == 0) 
{
           rect_oled(1, 19, 127, 15, OLED_WHITE, OLED_WHITE); 
           printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_BLACK,get_strings(MISC_TXT, 4)); 
}
if(active_btn == 1) 
{
           rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
           printf(center_x(get_char(MISC_TXT, 5), OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_BLACK,get_strings(MISC_TXT, 5));  
}
if(active_btn == 2)
{
           rect_oled(1, 51, 127, 15, OLED_WHITE, OLED_WHITE);
           printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_strings(MISC_TXT, 6));                      
                
} 
if(active_btn == 0) 
{ 
         if(event_press(PS4_CROSS) && !activate_single_profile)
         {
               activate_single_profile = TRUE; 
               setup_menu = FALSE;
               edit_menu = FALSE;
         }
       
}
if(active_btn == 1) 
{ 
         if(event_press(PS4_CROSS) && !activate_double_profile)
         {
               activate_double_profile = TRUE;   
               setup_menu = FALSE; 
         }      
} 
if(active_btn == 2) 
{ 
         if(event_press(PS4_CROSS))
         {
               activate_both_profile = TRUE;  
               setup_menu = FALSE;
               active = 0;      
         }
     }
   
}
if(setup_idx == 1) { 

         cls_oled(OLED_BLACK); 
         rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	 line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
         printf(center_x(get_char(MISC_TXT, 8), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 8));
         printf(center_x(get_chars(WARZONE_HOLD_BUTTON,warzoneholdbutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,get_string(WARZONE_HOLD_BUTTON,warzoneholdbutton_idx[profile_idx]));
         printf(center_x(get_chars(WARZONE_PRESS_BUTTON,warzonepressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(WARZONE_PRESS_BUTTON,warzonepressbutton_idx));
                         
        if(event_press(PS4_UP))
 	    {
 	         select -= 1; 
 	         if(select < 0) 
 	         select = 1;    
 	    }
 	    if(event_press(PS4_DOWN))
 	    {
 	         select += 1;
 	         if(select > 1) 
 	         select = 0;        
        }                         
        if(select == 0)
        {
              rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
              printf(center_x(get_chars(WARZONE_HOLD_BUTTON,warzoneholdbutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_BLACK,get_string(WARZONE_HOLD_BUTTON,warzoneholdbutton_idx[profile_idx]));        
        }
        if(select == 1) 
        {
              rect_oled(1, 52, 127, 15, OLED_WHITE, OLED_WHITE); 
              printf(center_x(get_chars(WARZONE_PRESS_BUTTON,warzonepressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(WARZONE_PRESS_BUTTON,warzonepressbutton_idx));   
        }     
    
} 
if(setup_idx == 2) // button layout
{
        cls_oled(OLED_BLACK);
        rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
        printf(center_x(get_char(MISC_TXT, 9), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 9)); 
        printf(center_x(get_chars(FLIPPED_TXT,swap_on), OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,get_string(FLIPPED_TXT,swap_on));
        printf(center_x(get_chars(CONTROLLER_LAYOUT_TXT,btn_layout), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(CONTROLLER_LAYOUT_TXT,btn_layout));
       
//================================================================================================================================================           

if(get_val(PS4_L2) && event_press(PS4_RIGHT)) 
{
       if(_active == 0)
       {
            swap_on += 1;
            if(swap_on > 1)
            swap_on = 0;    
       }
       if(_active == 1) 
       { 
            btn_layout += 1;
            if(btn_layout > 11) 
            btn_layout = 0;
       }                     
}
if(get_val(PS4_L2) && event_press(PS4_LEFT)) 
{
       if(_active == 0)
       {
            swap_on -= 1;
            if(swap_on < 0)
            swap_on = 1;
       }
       if(_active == 1) 
       { 
            btn_layout -= 1; 
            if(btn_layout < 0)
            btn_layout = 11;
       }                                             
} 
if(event_press(PS4_UP)) 
{
 	      _active -= 1; 
          if(_active < 0) 
 	      _active = 1;
 	                         
}
if(event_press(PS4_DOWN)) 
{
          _active += 1;
          if(_active > 1) 
 	      _active = 0;                          
}  
if(_active == 0) 
{ 
           rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
           printf(center_x(get_chars(FLIPPED_TXT,swap_on), OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_BLACK,get_string(FLIPPED_TXT,swap_on));
}
if(_active == 1)
{
           rect_oled(1, 51, 127, 15, OLED_WHITE, OLED_WHITE);
           printf(center_x(get_chars(CONTROLLER_LAYOUT_TXT,btn_layout), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(CONTROLLER_LAYOUT_TXT,btn_layout));
          
     }
    }
   } 
}
function single_press_profile(){
//============================================================================================================================================================
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ PRINT TO DISPLAY ///////////////////////////////////////////////////////////////////////////
//============================================================================================================================================================
         if(activate_single_profile) { 
         setup_display_menu = FALSE; 
         cls_oled(OLED_BLACK); 
         rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	 line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
         printf(center_x(get_char(MISC_TXT, 10), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 10));  
         printf(center_x(get_chars(SINGLE_BUTTON_TXT,singlebutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,get_string(SINGLE_BUTTON_TXT,singlebutton_idx));
//============================================================================================================================================================
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SWITCH PROFILE BUTTONS ///////////////////////////////////////////////////////////////////////
//============================================================================================================================================================        
        if(event_press(PS4_DOWN))
        {
              singlebutton_idx ++; 
              if(singlebutton_idx > 3 ) singlebutton_idx = 0;
              
        }   
        if(event_press(PS4_UP))
        {
              singlebutton_idx --; 
              if(singlebutton_idx < 0) singlebutton_idx = 3; 
             
        }
        if(event_release(PS4_CIRCLE)) { 
        activate_single_profile = FALSE;
        setup_menu = TRUE; 
        setup_display_menu = TRUE; 
         
    }
    block_btn();
}
}
function double_button_press(){
          if(activate_double_profile){
          setup_display_menu = FALSE; 
          cls_oled(OLED_BLACK);
          rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	  line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
          printf(center_x(get_char(MISC_TXT, 11), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 11));  
          printf(center_x(get_chars(FIRST_HOLD_BUTTON,firstholdbutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,get_string(FIRST_HOLD_BUTTON,firstholdbutton_idx));
          printf(center_x(get_chars(SECOND_PRESS_BUTTON,secondpressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(SECOND_PRESS_BUTTON,secondpressbutton_idx));
              
 if(event_press(PS4_RIGHT)) 
 {
              if(active == 0) 
              {
                    firstholdbutton_idx ++; 
                    if(firstholdbutton_idx > 4) firstholdbutton_idx = 0; 
              }
              if(active == 1)
              {
                    secondpressbutton_idx ++; 
                    if(secondpressbutton_idx > 2) secondpressbutton_idx = 0;   
              }        
} 
if(event_press(PS4_LEFT)) 
{
              if(active == 0)
              {
                    firstholdbutton_idx --;
                    if(firstholdbutton_idx < 0) firstholdbutton_idx = 4; 
              }
              if(active == 1) 
              {
                    secondpressbutton_idx --;
                    if(secondpressbutton_idx < 0) secondpressbutton_idx = 2;  
              }        
        }
        if(event_press(PS4_UP))
        {
 	                active -= 1; 
 	                if(active < 0) 
 	                active = 1;        
 	    }
 	    if(event_press(PS4_DOWN))
 	    {
 	                active += 1;
 	                if(active > 1) 
 	                active = 0;         
 	    }
        if(active == 0)
        {
              rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE); 
              printf(center_x(get_chars(FIRST_HOLD_BUTTON,firstholdbutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_BLACK,get_string(FIRST_HOLD_BUTTON,firstholdbutton_idx));
        }
        if(active == 1) 
        {
              rect_oled(1, 52, 127, 15, OLED_WHITE, OLED_WHITE);
              //rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
              printf(center_x(get_chars(SECOND_PRESS_BUTTON,secondpressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(SECOND_PRESS_BUTTON,secondpressbutton_idx));
        }
        if(event_release(PS4_CIRCLE)){ 
        activate_double_profile = FALSE;
        setup_display_menu = TRUE; 
        setup_menu = TRUE; 
        } 
        block_btn();
   } 
}   
function switch_profiles(){
//============================================================================================================================================================
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ PRINT TO DISPLAY ///////////////////////////////////////////////////////////////////////////
//============================================================================================================================================================
         if(activate_both_profile){ 
         setup_display_menu = FALSE; 
         cls_oled(OLED_BLACK); 
         rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
         printf(center_x(get_char(MISC_TXT, 12), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 12));  
        // printf(center_x(get_char(MISC_TXT, 5), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 5)); 
         printf(center_x(get_chars(BOTH_SINGLE_BUTTON,bothsinglebutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,get_string(BOTH_SINGLE_BUTTON,bothsinglebutton_idx));
         printf(center_x(get_chars(BOTH_HOLD_BUTTON,bothholdbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(BOTH_HOLD_BUTTON,bothholdbutton_idx));
         printf(center_x(get_chars(BOTH_PRESS_BUTTON,bothpressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(BOTH_PRESS_BUTTON,bothpressbutton_idx));
        
       
//============================================================================================================================================================
//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SWITCH PROFILE BUTTONS ///////////////////////////////////////////////////////////////////////
//============================================================================================================================================================         
        if(event_press(PS4_DOWN))
        {
              if(active == 0) 
              { 
                    bothsinglebutton_idx += 1; 
                    if(bothsinglebutton_idx > 3) bothsinglebutton_idx = 0;     
              }
              if(!get_val(PS4_L2) && active == 1)
              {
                    bothholdbutton_idx += 1; 
                    if(bothholdbutton_idx > 4) bothholdbutton_idx = 0;    
              }
              if(!get_val(PS4_L2) && active == 2)
              {
                    bothpressbutton_idx += 1; 
                    if(bothpressbutton_idx > 2) bothpressbutton_idx = 0;    
              }        
       }  
       if(event_press(PS4_UP))
       {
              if(active == 0)
              {      
                    bothsinglebutton_idx -= 1; 
                    if(bothsinglebutton_idx < 0) bothsinglebutton_idx = 3;     
              }
              if(active == 1)
              {
                    bothholdbutton_idx -= 1;
                    if(bothholdbutton_idx < 0) bothholdbutton_idx = 4; 
              }
              if(active == 2)
              {
                    bothpressbutton_idx -= 1;
                    if(bothpressbutton_idx < 0) bothpressbutton_idx = 2;  
              }         
       }
       if(event_press(PS4_LEFT)) 
 	   {
 	                active -= 1; 
 	                if(active < 0) 
 	                active = 2;        
 	   }
 	   if(event_press(PS4_RIGHT)) 
 	   {
 	                active += 1;
 	                if(active > 2) 
 	                active = 0;       
 	         
 	   }
       if(active == 0)
       {
              rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
              printf(center_x(get_chars(BOTH_SINGLE_BUTTON,bothsinglebutton_idx), OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_BLACK,get_string(BOTH_SINGLE_BUTTON,bothsinglebutton_idx));
       }
       if(active == 1) 
       {
              rect_oled(1, 52, 55, 15, OLED_WHITE, OLED_WHITE); 
              printf(center_x(get_chars(BOTH_HOLD_BUTTON,bothholdbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(BOTH_HOLD_BUTTON,bothholdbutton_idx));
       }      
       if(active == 2) 
       {
             rect_oled(60, 52, 127, 15, OLED_WHITE, OLED_WHITE); 
             printf(center_x(get_chars(BOTH_PRESS_BUTTON,bothpressbutton_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(BOTH_PRESS_BUTTON,bothpressbutton_idx));
           
       } 
       if(event_release(PS4_CIRCLE)){
             activate_both_profile = FALSE;
             setup_menu = TRUE;
             setup_display_menu = TRUE; 
      } 
      block_btn();
   } 
}        
function TitleScreen (){ 
if(display_title){ 
cls_oled(0);
count_black = 0; 
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
printf(center_x(get_char(MISC_TXT, 0), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 0));
printf(center_x(get_char(MISC_TXT, 30), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 30));
printf(center_x(get_char(MISC_TXT, 31), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 31));
 if(warzone_loot_profile){ 
          printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26)); 
 }
 else
 if(profile_idx == 0) 
         printf(center_x(get_char(MISC_TXT, 1), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 1));  
 if(profile_idx == 1)
         printf(center_x(get_char(MISC_TXT, 2), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 2)); 
              
      display_screen = TRUE;
      display_title = FALSE; 
    
 }
    if(!mod_menu && !edit_menu && !setup_menu) { 
     if(display_screen)
     {
     count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_screen = FALSE;	
    	}
} 
if(killswitch)
    led(7);
else
    led(profile_idx); 
} 
} 
function DoGz_Menu(){ 
if(DoGz_display_edit){ 
cls_oled(OLED_BLACK);
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
printf(center_x(get_chars(DOGZTHEFIGHTERZ1,DoGz_idx1), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_string(DOGZTHEFIGHTERZ1,DoGz_idx1));                         
                       
if(DoGz_idx1 == 0) {
      Display_Values1(DoGz_idx1,RADIUS);
      RADIUS = Edit_Values(RADIUS,0,99,1,10);    
}
if(DoGz_idx1 == 1) {
      Display_Values1(DoGz_idx1,ANGLE);
      ANGLE = Edit_Values(ANGLE,0,99,1,10);    
      }
if(DoGz_idx1 == 2) { 
      Display_Values1(DoGz_idx1,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
      }
if(DoGz_idx1 == 3) {
      Display_Values1(DoGz_idx1,POLAR_BOOST);
      POLAR_BOOST = Edit_Values(POLAR_BOOST,0,30,1,10);
      }
if(DoGz_idx1 == 4) {
       Display_Values1(DoGz_idx1,POLAR_SHAKE);
       POLAR_SHAKE = Edit_Values(POLAR_SHAKE,0,50,1,10);    
      }
if(DoGz_idx1 == 5) {
      Display_Values1(DoGz_idx1,A_B_S);
      A_B_S = Edit_Values(A_B_S,0,5,1,10);
      }
if(DoGz_idx1 == 6) {
      Display_Values1(DoGz_idx1,POLAR_RELEASE);
      POLAR_RELEASE = Edit_Values(POLAR_RELEASE,0,50,1,10);
      }
if(DoGz_idx1 == 7) {                          /// POLAR V2
      Display_Values1(DoGz_idx1,PXA);
      PXA = Edit_Values(PXA,1,20,1,10);
      }
if(DoGz_idx1 == 8) {                                
      Display_Values1(DoGz_idx1,PXSE);
      PXSE = Edit_Values(PXSE,1,40,1,10);
      }     
if(DoGz_idx1 == 9) { 
      Display_Values1(DoGz_idx1,PVSI);
      PVSI = Edit_Values(PVSI,1,40,1,10);
      }
if(DoGz_idx1 == 10) {
      Display_Values1(DoGz_idx1,PYA);
      PYA = Edit_Values(PYA,-360,360,1,10);
      }
if(DoGz_idx1 == 11) {
      Display_Values1(DoGz_idx1,PYSE);
      PYSE = Edit_Values(PYSE,-360,360,1,10);
      } 
if(DoGz_idx1 == 12) {
      Display_Values1(DoGz_idx1,PVS);
      PVS = Edit_Values(PVS,1,170,1,10);
      }
if(DoGz_idx1 == 13) {
      Display_Values1(DoGz_idx1,REL);
      REL = Edit_Values(REL,10,40,1,10);
      }
if(DoGz_idx1 == 14) {
      Display_Values1(DoGz_idx1,D___AS);
      D___AS = Edit_Values(D___AS,-35,35,1,10);
      }
if(DoGz_idx1 == 15) {
      Display_Values1(DoGz_idx1,D_AS1);
      D_AS1 = Edit_Values(D_AS1,-35,35,1,10);
      }     
if(DoGz_idx1 == 16) { 
      Display_Values1(DoGz_idx1,DoGz_ASSIST_RELEASE);
      DoGz_ASSIST_RELEASE = Edit_Values(DoGz_ASSIST_RELEASE,0,100,1,10);
      }
if(DoGz_idx1 == 17) {
      Display_Values1(DoGz_idx1,POSI);
      POSI = Edit_Values(POSI,-30,30,1,10);
      }
if(DoGz_idx1 == 18) {
      Display_Values1(DoGz_idx1,NEGI);
      NEGI = Edit_Values(NEGI,-30,30,1,10);
      } 
if(DoGz_idx1 == 19) {
      Display_Values1(DoGz_idx1,WA);
      WA = Edit_Values(WA,2,99,1,10);
      }
if(DoGz_idx1 == 20) {
      Display_Values1(DoGz_idx1,PROG_RELEASE);
      PROG_RELEASE = Edit_Values(PROG_RELEASE,8,90,1,10);
      }
if(DoGz_idx1 == 21) {
      Display_Values1(DoGz_idx1,ARC_VAL);
      ARC_VAL = Edit_Values(ARC_VAL,0,100,1,10);
      }
if(DoGz_idx1 == 22) {
      Display_Values1(DoGz_idx1,ARC___VAL);
      ARC___VAL = Edit_Values(ARC___VAL,0,100,1,10);
      } 
if(DoGz_idx1 == 23) {
      Display_Values1(DoGz_idx1,DIVIDE);
      DIVIDE = Edit_Values(DIVIDE,-10,20,1,10);
      }
if(DoGz_idx1 == 24) {
      Display_Values1(DoGz_idx1,DOGZ_RELEASE);
      DOGZ_RELEASE = Edit_Values(DOGZ_RELEASE,0,100,1,10);
}
if(DoGz_idx1 == 25) {
       if(event_press(PS4_UP) || event_press(PS4_DOWN)){
              DOGZ_RUMBLE =! DOGZ_RUMBLE;
   }
if(DOGZ_RUMBLE){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!DOGZ_RUMBLE){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
 }
 }
}
function DoGz_Triple(){ 
if(DoGz_display){                           
cls_oled(OLED_BLACK); 
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
printf(center_x(get_chars(DOGZTHEFIGHTERZ,DoGz_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_string(DOGZTHEFIGHTERZ,DoGz_idx));

if(DoGz_idx == 0) { 
    printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));  
    if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 POLAR_ASSIST = !POLAR_ASSIST; 
   }
if(POLAR_ASSIST){
     printf(center_x(sizeof(_ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_ON[0]);
    
}
if(!POLAR_ASSIST){
   printf(center_x(sizeof(_OFF) - 12, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_OFF[0]); 
   }
}
if(DoGz_idx == 1){
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25)); 
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 POLAR_ASSISTV2 = !POLAR_ASSISTV2;
   }
if(POLAR_ASSISTV2){
    printf(center_x(sizeof(_ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_ON[0]);
}
if(!POLAR_ASSISTV2){ 
    printf(center_x(sizeof(_OFF) - 12, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_OFF[0]); 
   }
}
if(DoGz_idx == 2){ 
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));  
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 DoGz_AIM_ASSIST = !DoGz_AIM_ASSIST; 
   }
if(DoGz_AIM_ASSIST){
   printf(center_x(sizeof(_ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_ON[0]);
}
if(!DoGz_AIM_ASSIST){
   printf(center_x(sizeof(_OFF) - 12, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_OFF[0]); 
   
   }
}
if(DoGz_idx == 3){
   printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));  
if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 PROGRESSION_ASSIST = !PROGRESSION_ASSIST; 
   }
if(PROGRESSION_ASSIST){
     printf(center_x(sizeof(_ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_ON[0]);
}
if(!PROGRESSION_ASSIST){
  printf(center_x(sizeof(_OFF) - 12, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_OFF[0]); 
   
   }
}
if(DoGz_idx == 4){ 
    printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));  
    if(event_press(PS4_UP) || event_press(PS4_DOWN)){
        DOGZ_RECOIL = !DOGZ_RECOIL; 
     }
if(DOGZ_RECOIL){
    printf(center_x(sizeof(_ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_ON[0]);
}
if(!DOGZ_RECOIL){ 
    printf(center_x(sizeof(_OFF) - 12, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,_OFF[0]); 
   
}
}
}
}
function ModMenu(){ 
if(display_menu) { 
       cls_oled(OLED_BLACK);
       rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
       line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
       printf(center_x(get_chars(MODNAMES,mod_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_string(MODNAMES,mod_idx));
       
if(mod_idx == 0){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 toggle_legacyar[profile_idx] = !toggle_legacyar[profile_idx]; 
   }
if(toggle_legacyar[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_legacyar[profile_idx]){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}     
if(mod_idx == 1){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                 toggle_antirecoil[profile_idx] = !toggle_antirecoil[profile_idx]; 
   }
if(toggle_antirecoil[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_antirecoil[profile_idx]){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
}
if (mod_idx == 2) {
     if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                toggle_rapidfire[profile_idx] =! toggle_rapidfire[profile_idx];
     }
if(toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(mod_idx == 3){ 
     printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));  
     }
if(mod_idx == 4) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_taylorassist = !toggle_taylorassist; 
   }
if(toggle_taylorassist){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_taylorassist){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
    }
  }
if(mod_idx == 5) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_batts_sticky =! toggle_batts_sticky;
   }
if(toggle_batts_sticky){
       printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_batts_sticky){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
   }
}
if(mod_idx == 6){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_quickscope =! toggle_quickscope;
}
if(toggle_quickscope){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_quickscope){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(mod_idx == 7){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_holdbreath =! toggle_holdbreath;
}
if(toggle_holdbreath){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_holdbreath){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(mod_idx == 8){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       easy_plate =! easy_plate;
}
if(easy_plate){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
   }
if(!easy_plate){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(mod_idx == 9){
                            if(event_press(XB1_UP)) 
                            {
                                 enemy_ping += 1;
                                 if(enemy_ping > 2) 
 	                             enemy_ping = 0;           
                            }
                            if(event_press(XB1_DOWN)) 
                            {
                                 enemy_ping -= 1; 
                                 if(enemy_ping < 0) 
 	                             enemy_ping = 2;   
                            } 

if(enemy_ping == 0){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
if(enemy_ping == 1){
     printf(center_x(get_char(MISC_TXT, 28), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 28));   
}
if(enemy_ping == 2){
     printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29));
     }
}
if(mod_idx == 10){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       cancel_slide =! cancel_slide;
}
if(cancel_slide){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!cancel_slide){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(mod_idx == 11){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_proneshot =! toggle_proneshot;
}
if(toggle_proneshot){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_proneshot){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     
     }
} 
if(mod_idx == 12){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_dropshot =! toggle_dropshot;
}
if(toggle_dropshot){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
    
}
if(!toggle_dropshot){
    printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(mod_idx == 13){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_bunnyhop =! toggle_bunnyhop;
}
if(toggle_bunnyhop){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_bunnyhop){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(mod_idx == 14) {
 printf(center_x(get_char(MISC_TXT, 22), OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 22)); 
 if(event_press(PS4_CROSS) && !edit_menu && !setup_menu) 
 { 
     mod_menu = FALSE; 
     setup_menu = TRUE;
     cls_oled(OLED_BLACK); 
     setup_display_menu = TRUE; 
     setup_idx = 0;
     active_btn = 0; 
 }
 }
if(mod_idx < mods_not_on_all_profiles)  
{
if(profile_idx == 0) 
     printf(center_x(get_char(MISC_TXT, 1), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 1));  	
else if(profile_idx == 1)
     printf(center_x(get_char(MISC_TXT, 2), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 2));  
else if(profile_idx == 2) 
      printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26)); 
 
     }
     else
     {
     printf(center_x(get_char(MISC_TXT, 13), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 13)); 
     }
     }
     }
function EditMenu(){
if(display_edit_menu){ 
       cls_oled(OLED_BLACK); 
       rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
       line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
       printf(center_x(get_chars(VALNAME_TXT,val_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_string(VALNAME_TXT,val_idx));
if(val_idx == 0) {
      Display_Values(val_idx,antirecoil_vertical[profile_idx]);
      antirecoil_vertical[profile_idx] = Edit_Values(antirecoil_vertical[profile_idx],0,99,1,10);    
      }
if(val_idx == 1) {
      Display_Values(val_idx,antirecoil_horizontal1[profile_idx]);
      antirecoil_horizontal1[profile_idx] = Edit_Values(antirecoil_horizontal1[profile_idx],-99,99,1,10);
      }

if(val_idx == 2) {
      Display_Values(val_idx,antirecoil_start[profile_idx]);
      antirecoil_start[profile_idx] = Edit_Values(antirecoil_start[profile_idx],0,99,1,10);    
      }
if(val_idx == 3) {
      Display_Values(val_idx,antirecoil_end[profile_idx]);
      antirecoil_end[profile_idx] = Edit_Values(antirecoil_end[profile_idx],0,99,1,10);
      }
if(val_idx == 4) {
      Display_Values(val_idx,antirecoil_time[profile_idx]);
      antirecoil_time[profile_idx] = Edit_Values(antirecoil_time[profile_idx],0,99,1,10);
      }
if(val_idx == 5) { 
      Display_Values(val_idx,antirecoil_horizontal[profile_idx]);
      antirecoil_horizontal[profile_idx] = Edit_Values(antirecoil_horizontal[profile_idx],-99,99,1,10);
      }
if(val_idx == 6) {
      Display_Values(val_idx,rate_of_fire[profile_idx]);
      rate_of_fire[profile_idx] = Edit_Values(rate_of_fire[profile_idx],0,25,1,10);
      }     
if(val_idx == 7) { 
      Display_Values(val_idx,RADIUS1);
      RADIUS1 = Edit_Values(RADIUS1,0,99,1,10);
      }
if(val_idx == 8) {
      Display_Values(val_idx,STEPS);
      STEPS = Edit_Values(STEPS,0,99,1,10);
      }
if(val_idx == 9) { 
      Display_Values(val_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
      } 
if(val_idx == 10) { 
      Display_Values(val_idx,stickyaim_size);
      stickyaim_size = Edit_Values(stickyaim_size,0,99,1,10);
      }
if(val_idx == 11) { 
      Display_Values(val_idx,stickyaim_time);
      stickyaim_time = Edit_Values(stickyaim_time,0,99,1,10);
      }
if(val_idx == 12){ 
      Display_Values(val_idx,quickscopedelay);
      quickscopedelay = Edit_Values(quickscopedelay,0,600,1,10);
      }
   } 
} 
function AIM() {
	if (D_AS) {
	if (D_AS && VM) {
		vm_tctrl(-2);
	}
		D__AS ++;
	if (D__AS >= D___AS)  D__AS = D__AS1;
		D__AS1 --;
	if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
		D__AS ++;
	if (get_val(AIM_BTN)) {	
		set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	}
	if (get_val(FIRE_BTN)) {	
		set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		set_val(PS4_RY,get_val(PS4_RY) + D__AS);
		}
	}
	else
	vm_tctrl(0); 
} 
function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if (FLOW) {
    VALUE += INCREMENT;
if (VALUE <= MAX)  
    return VALUE;
if (VALUE > MAX) {
        ID = 0;
    return VALUE - INCREMENT;}
	}
else {
    VALUE -= INCREMENT;    
if (VALUE >= MIN)  
    return VALUE;
if (VALUE < MIN) {
   	ID = 1;
    return VALUE + INCREMENT;
    	}
	} 
   		 return FALSE;    
}
 function DoGz_ARC () {
if (ARC){
	ARC__VAL   = ARC_VAL / DIVIDE;
	ARC____VAL = ARC_VAL / DIVIDE;
	ARC_VAL ++;
if (ARC_VAL + ARC_V >= ARC___VAL + ARC_V) {
	ARC_VAL = ARC__VAL;
	}
	ARC__VAL --;
if (ARC__VAL <= ARC____VAL) {
	ARC__VAL = ARC_VAL;
	}
	ARC_VAL ++;
	set_val (PS4_RY,get_ival(PS4_RY) + ARC_VAL + ARC_V);
	}
}
function PolarFlow(PFB,PSV,PFV,PV,PF,PID) {
if(PF) {
	PFB += PV;
if(PFB <= PFV)  
    return PFB;
if(PFB > PFV) {
	PVID[PID] = 0;
		return PFB - PV;
    }
}
else {
	PFB -= PV;    
if(PFB >= PSV)  
	return PFB;
if(PFB < PSV) {
	PVID[PID] = 1; 
		return PFB + PV;
	}
} 
   	return FALSE;    
}  
combo STICKY_AIM {
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
    wait(stickyaim_time);
    } 
 combo X_VAL { // Antirecoil Horizontal  // Noozbar/Batts
	x_ref = get_val(PS4_RX) + antirecoil_horizontal[profile_idx];
    if(x_ref > 100) x_ref = 100;
    set_val(PS4_RX, x_ref);
	}
combo BLINK {                            
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
    }

combo RAPIDFIRE {                      
    wait(hold_time);
    set_val(FIRE_BTN, 0);
    wait(rest_time);
  }	
  combo DRIVING_MODE { 
    cls_oled(OLED_BLACK);
    cls_oled(OLED_BLACK); 
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 18), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 18));
    printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));
    wait(3000);
    call(RUMBLE_ON);
    wait(150);
    display_title = TRUE; 
}
combo DRIVING_OFF {
    cls_oled(OLED_BLACK);
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 18), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 18));
    printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
    wait(3000);
    call(RUMBLE_OFF);
    wait(150); 
    display_title = TRUE; 
    } 
combo SNIPER_MODE { 
    cls_oled(OLED_BLACK); 
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 19), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 19));
    printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));
    wait(3000);
    call(RUMBLE_ON);
    wait(150);
    display_title = TRUE; 
    }
combo SNIPER_OFF { 
    cls_oled(OLED_BLACK);
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 19), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 19));
    printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
    wait(3000);
    call(RUMBLE_OFF);
    wait(150);
    display_title = TRUE; 
    }
combo KILLSWITCH {
    cls_oled(OLED_BLACK) 
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 14), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 14));  
    printf(center_x(get_char(MISC_TXT, 15), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 15));  
    printf(center_x(get_char(MISC_TXT, 16), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 16));
    wait(2000)
    call(RUMBLE_ON);
    wait(130);
    call(RUMBLE_ON);
} 
combo KILLSWITCH_OFF { 
 cls_oled(OLED_BLACK); 
 rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
 printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));  
 wait(2000)
 call(RUMBLE_OFF);
 wait(130)
 display_title = TRUE; 
}
combo RUMBLE_ON {						
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
}
combo RUMBLE_OFF {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
}
combo AAS{
	set_val(PS4_RY, 1 * - AS);
	wait(AW);
	set_val(PS4_RX, 1 * - AS);
	wait(AW);
	set_val(PS4_RY,AS);
	wait(AW);
	set_val(PS4_RX,AS);
	wait(AW);
}
combo SAVE { 
	cls_oled(0);						
	printf(center_x(get_char(MISC_TXT, 17), OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 17));  
	wait(2000)
	call(RUMBLE_ON);												
	wait(150);
	call(RUMBLE_ON);		
	wait(4000);}
combo CANCEL_SLIDE {              
    set_val(CROUCH_BTN, 100);          
    wait(120);                         
    set_val(CROUCH_BTN, 0);            
    wait(60);                          
    set_val(CROUCH_BTN, 100);          
    wait(50);                          
    set_val(CROUCH_BTN, 100);          
    set_val(JUMP_BTN, 100);           
    wait(60);                          
    set_val(CROUCH_BTN, 0);            
    set_val(JUMP_BTN, 100);          
    wait(10);                        
    set_val(JUMP_BTN, 0);         
} 
combo AUTO_PING{
    set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	}
 combo DS {
    set_val(CROUCH_BTN,100);
    wait(40);
    set_val(CROUCH_BTN,0);
    wait(DS_Speed);}
combo BUNNYHOP
{
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
}
combo Quick_Scope {
 set_val(AIM_BTN,100);
 wait(quickscopedelay); 
 set_val(AIM_BTN,100);
 set_val(FIRE_BTN,100);
 wait(40);
 set_val(AIM_BTN,100);
 wait(40); }        
   
 combo CH {
	set_val(SPRINT_BTN,0);
	wait(60);
	set_val(SPRINT_BTN,100);
	wait(110);
	set_val(SPRINT_BTN,0);
	wait(110);}

combo easy_plate {
	set_val(SWITCH_BTN,100);
	wait(6000)}//time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating 
combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(PS4_RY) + antirecoil_vertical[profile_idx];  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) +  5)
    set_val(PS4_RY, (AntirecoilVertical));
// Horizontal
    AntirecoilHorizontal = get_val(PS4_RX) + antirecoil_horizontal1[profile_idx];
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal1[profile_idx])  + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}
/*===============================================================================
\\\\\\\\\\\\\\\\\\\\\\\ FUNCTIONS/COMBO FOR VARIOUS MODS  \\\\\\\\\\\\\\\\\\\\\\\
===============================================================================*/
// Antirecoil // Noozbar/Batts
function p_complete() { 

    i_cnt++;
    if(i_cnt > antirecoil_time[profile_idx] * 10) 
    {
        i_cnt = antirecoil_time[profile_idx] * 10;
        return 1;
    }    
    return 0;
}  

function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  

function y_val() {
    v = get_val(PS4_RY);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > abs(ar_y + 5))
        return v;
    return v + ar_y;
}
function Display_Values(idx,value) {
   if(val_idx == idx)
   {
      if(idx == 4)
    	number_to_string(value * 100, find_digits(value * 100) );
    else
      number_to_string(value, find_digits(value));             
   }
}
function Display_Values1(idx,value) {
   if(DoGz_idx1 == idx)
   {
      number_to_string(value, find_digits(value));             
   }
}
function Edit_Values(value,min,max,increase_value,increase_value_more) {  
 	    if(get_val(PS4_L2) && event_press(PS4_RIGHT)) 
		{
			value += increase_value;                           
			if(value > max ) value = max;   	               	            
		}                                                                       
		if(get_val(PS4_L2) && event_press(PS4_LEFT)) 
        {
			value -= increase_value;                           
			if(value < min ) value = min; 	        
		}
		if(get_val(PS4_L2) && event_press(PS4_UP))
		{
		   value += increase_value_more;
		   if(value > max ) value = max; 
		}
		if(get_val(PS4_L2) && event_press(PS4_DOWN))
		{
		   value -= increase_value_more;
		   if(value < min ) value = min;
		}
		return value;  
   }
		
define MISC_TXT = 0;
define MODNAMES = 0;
define VALNAME_TXT = 2;
define SINGLE_BUTTON_TXT = 3;
define BOTH_SINGLE_BUTTON = 4;
define FIRST_HOLD_BUTTON = 5;
define WARZONE_HOLD_BUTTON = 6;
define WARZONE_PRESS_BUTTON = 7;
define SECOND_PRESS_BUTTON = 8; 
define BOTH_HOLD_BUTTON = 9;
define BOTH_PRESS_BUTTON = 10;
define CONTROLLER_LAYOUT_TXT = 11; 
define FLIPPED_TXT = 12; 
define DOGZTHEFIGHTERZ = 13;
define DOGZTHEFIGHTERZ1 = 14; 
function get_char(f_array_idx1,f_idx){

  if(f_array_idx1 == MISC_TXT)
     {
        if(MISC[f_idx + 1] != -1) 
  	    return MISC[f_idx + 1] - MISC[f_idx] - 1;
  		return sizeof(MISC) - MISC[f_idx];
    }
  	return -1;
}
function get_chars(f_array_idx, f_idx){
	if(f_array_idx == MODNAMES)
	{
  		if(MODNAME[f_idx + 1] != -1) 
  			return MODNAME[f_idx + 1] - MODNAME[f_idx] - 1;
  	
  		return sizeof(MODNAME) - MODNAME[f_idx];
  	}
  	if(f_array_idx == VALNAME_TXT)
	{
  		if(VALNAMES[f_idx + 1] != -1) 
  			return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
  	
  		return sizeof(VALNAMES) - VALNAMES[f_idx];
  	}
  	 if(f_array_idx == SINGLE_BUTTON_TXT)
    {
        if (SINGLEBUTTON[f_idx + 1] != -1) 
		return SINGLEBUTTON[f_idx + 1] - SINGLEBUTTON[f_idx] - 1;
	    return sizeof(SINGLEBUTTON) - SINGLEBUTTON[f_idx];
	}
	if(f_array_idx == BOTH_SINGLE_BUTTON)
	{
	    if (BOTHSINGLEBUTTON[f_idx + 1] != -1) 
		return BOTHSINGLEBUTTON[f_idx + 1] - BOTHSINGLEBUTTON[f_idx] - 1;
	    return sizeof(BOTHSINGLEBUTTON) - BOTHSINGLEBUTTON[f_idx];	
	}
	if(f_array_idx == FIRST_HOLD_BUTTON)
	{
	    if (FIRSTHOLDBUTTON[f_idx + 1] != -1) 
		return FIRSTHOLDBUTTON[f_idx + 1] - FIRSTHOLDBUTTON[f_idx] - 1;
	    return sizeof(FIRSTHOLDBUTTON) - FIRSTHOLDBUTTON[f_idx];
	}
	if(f_array_idx == WARZONE_HOLD_BUTTON)
	{
	    if (WARZONEHOLDBUTTON[f_idx + 1] != -1) 
	    return WARZONEHOLDBUTTON[f_idx + 1] - WARZONEHOLDBUTTON[f_idx] - 1;
	    return sizeof(WARZONEHOLDBUTTON) - WARZONEHOLDBUTTON[f_idx];
	}
	if(f_array_idx == WARZONE_PRESS_BUTTON) 
	{
	    if (WARZONEPRESSBUTTON[f_idx + 1] != -1) 
		return WARZONEPRESSBUTTON[f_idx + 1] - WARZONEPRESSBUTTON[f_idx] - 1;
	    return sizeof(WARZONEPRESSBUTTON) - WARZONEPRESSBUTTON[f_idx];	
	}
	if(f_array_idx == SECOND_PRESS_BUTTON)
	{
	    if (SECONDPRESSBUTTON[f_idx + 1] != -1) 
		return SECONDPRESSBUTTON[f_idx + 1] - SECONDPRESSBUTTON[f_idx] - 1;
	    return sizeof(SECONDPRESSBUTTON) - SECONDPRESSBUTTON[f_idx];
	}
	if(f_array_idx == BOTH_HOLD_BUTTON)
	{
	    if (BOTHHOLDBUTTON[f_idx + 1] != -1) 
		return BOTHHOLDBUTTON[f_idx + 1] - BOTHHOLDBUTTON[f_idx] - 65;
	    return sizeof(BOTHHOLDBUTTON) - BOTHHOLDBUTTON[f_idx];	
	}
	if(f_array_idx == BOTH_PRESS_BUTTON)
	{
	    if (BOTHPRESSBUTTON[f_idx + 1] != -1) 
		return BOTHPRESSBUTTON[f_idx + 1] - BOTHPRESSBUTTON[f_idx] + 65;
	    return sizeof(BOTHPRESSBUTTON) - BOTHPRESSBUTTON[f_idx];		
    } 
    if(f_array_idx == CONTROLLER_LAYOUT_TXT)
    {
        if (CONTROLLER_LAYOUT[f_idx + 1] != -1) 
		return CONTROLLER_LAYOUT[f_idx + 1] - CONTROLLER_LAYOUT[f_idx] - 1;
	    return sizeof(CONTROLLER_LAYOUT) - CONTROLLER_LAYOUT[f_idx];
	}
	if(f_array_idx == FLIPPED_TXT)
	{
	    if (FLIPPED[f_idx + 1] != -1) 
		return FLIPPED[f_idx + 1] - FLIPPED[f_idx] - 1;
	    return sizeof(FLIPPED) - FLIPPED[f_idx];
	}
	if(f_array_idx == DOGZTHEFIGHTERZ)
	{
	    if (DOGZTHEFIGHTER[f_idx + 1] != -1) 
		return DOGZTHEFIGHTER[f_idx + 1] - DOGZTHEFIGHTER[f_idx] - 1;
	    return sizeof(DOGZTHEFIGHTER) - DOGZTHEFIGHTER[f_idx];
	}
	if(f_array_idx == DOGZTHEFIGHTERZ1)
	{
	    if (DOGZTHEFIGHTER1[f_idx + 1] != -1) 
		return DOGZTHEFIGHTER1[f_idx + 1] - DOGZTHEFIGHTER1[f_idx] - 1;
	    return sizeof(DOGZTHEFIGHTER1) - DOGZTHEFIGHTER1[f_idx];
	}   
  		return -1;
 }
 function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}
function get_string(f_array_idx, f_idx) {
	if(f_array_idx == MODNAMES)
	    return MODNAME[f_idx];
	if(f_array_idx == VALNAME_TXT)
	    return VALNAMES[f_idx];
	if(f_array_idx == SINGLE_BUTTON_TXT)
	    return SINGLEBUTTON[f_idx];
	if(f_array_idx == BOTH_SINGLE_BUTTON)
	    return BOTHSINGLEBUTTON[f_idx];
	if(f_array_idx == FIRST_HOLD_BUTTON)
	    return FIRSTHOLDBUTTON[f_idx];
	if(f_array_idx == WARZONE_HOLD_BUTTON)
	    return WARZONEHOLDBUTTON[f_idx];
	if(f_array_idx == WARZONE_PRESS_BUTTON)
	    return WARZONEPRESSBUTTON[f_idx]
	if(f_array_idx == SECOND_PRESS_BUTTON)
	    return SECONDPRESSBUTTON[f_idx]
	if(f_array_idx == BOTH_HOLD_BUTTON)
	    return BOTHHOLDBUTTON[f_idx];
	if(f_array_idx == BOTH_PRESS_BUTTON)
	    return BOTHPRESSBUTTON[f_idx];
	if(f_array_idx == CONTROLLER_LAYOUT_TXT)
	    return CONTROLLER_LAYOUT[f_idx];
	if(f_array_idx == FLIPPED_TXT)
	    return FLIPPED[f_idx]; 	
	if(f_array_idx == DOGZTHEFIGHTERZ)
	    return DOGZTHEFIGHTER[f_idx]; 
	if(f_array_idx == DOGZTHEFIGHTERZ1)
	    return DOGZTHEFIGHTER1[f_idx];    
	return -1;
}
function get_strings(f_array_idx1,f_idx){
	if(f_array_idx1 >= 0 && f_array_idx1 <= 17)
		return MISC[f_idx];
    return -1;
}
function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function mod_limits(min_limit, max_limit) { 

	if(val_idx > max_limit) val_idx = min_limit;
	if(val_idx < min_limit) val_idx = max_limit; 		
}
function mod_limits1(min_limit, max_limit) { 

	if(DoGz_idx1 > max_limit) DoGz_idx1 = min_limit;
	if(DoGz_idx1 < min_limit) DoGz_idx1 = max_limit; 		
} 
  
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}		
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
	int sin_angle1,cos_angle1; 
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
function Set_polar1(stick,angle,radius,offset) {
if (angle < 0) 
	angle = 360 + (angle % 360);
	
	angle = (angle + 90) % 360;
	sin_angle1 = data1[angle];
  	cos_angle1 = data1[(angle + 90) % 360];
if (offset) {
    offset1(7 + stick, (cos_angle1 * radius) / 100);
    offset1(8 + stick, (sin_angle1 * radius) / 100);
  	} 
else {
    set_val(7 + stick, (cos_angle1 * radius) / 100);
    set_val(8 + stick, (sin_angle1 * radius) / 100);
  	}
  	return;
}
function atan2(y, x) {
if (x >= 0 && y > 0) 
	angle_Out = -90;
else if (x  < 0 && y >= 0) 
	angle_Out = 90;
else if (x <= 0 && y < 0) 
	angle_Out = -270;
else 
	angle_Out = 270;
	
	x = abs(x);
  	y = abs(y);
if (x < y) 
	angle_Out += (x * 45 / y);
else if (x > y) 
	angle_Out += 90 - (y * 45 / x);
else 
	angle_Out += 45;

  	angle_Out = abs(angle_Out % 360);
		return (angle_Out);
}
function offset1(axis,offset_val) {
  	set_val(axis,clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis),-100,100));
  		return;
}
function map (inMin,inMax,outMin,outMax,x) {
  	return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}    
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     	
function Button_Layout() {
    if (btn_layout == 0) // Default
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  
								       
	}
	else if (btn_layout == 1) // Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1;
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
							       	   CROUCH_BTN    = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  					       	   
	}
	else if (btn_layout == 2) // Lefty
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   MELEE_BTN     = PS4_L3;
									   SPRINT_BTN    = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  							   
	}
	else if (btn_layout == 3) // N0M4D/Charlie
	{
		JUMP_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;   
		CROUCH_BTN   = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN   = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN   = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									  SPRINT_BTN    = PS4_L3;
								      MELEE_BTN     = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						      
	}
	else if (btn_layout == 4) // N0M4D/Charlie Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 5) // N0M4D/Charlie Lefty
	{
		JUMP_BTN      = PS4_CROSS;     AIM_BTN       = PS4_L1; 
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    FIRE_BTN      = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   MELEE_BTN     = PS4_L3;
								       SPRINT_BTN    = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 6) // Bumper Jumper
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 7) // Bumper Jumper Tactical
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1; 
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
								       
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 8) // One-Hand-Gunslinger
	{
		JUMP_BTN      = PS4_CROSS;     FIRE_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 9) // Stick and Move
	{
		MELEE_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       JUMP_BTN      = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 10) // Brawler
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 11) // Beast
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
	    if(swap_on && !edit_menu && !setup_menu)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
}
	
/*=============================================================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SWITCH BUTTONS ///////////////////////////////////////////////////////////////////
=============================================================================================================================================*/
function Switch_Buttons(){

       if(singlebutton_idx == 1  || bothsinglebutton_idx == 1)
       {
           press = TRIANGLE; 
       }
       if(singlebutton_idx == 2 || bothsinglebutton_idx == 2)
       { 
           press = DOWN;
       }
       if(singlebutton_idx == 3 || bothsinglebutton_idx == 3) 
       {
           press = UP;
       }
       if(firstholdbutton_idx == 1 ||  bothholdbutton_idx == 1) 
       {
           hold_press = L2; 
       }
       if(firstholdbutton_idx == 2 ||  bothholdbutton_idx == 2) 
       {
           hold_press = R2; 
       }
       if(firstholdbutton_idx == 3 ||  bothholdbutton_idx == 3)
       {
           hold_press = L1;
       }
       if(firstholdbutton_idx == 4 ||  bothholdbutton_idx == 4)
       {
           hold_press = R1;
       }
       if(secondpressbutton_idx == 1 || bothpressbutton_idx == 1) 
       {
           second_press = DOWN;
       }
       if(secondpressbutton_idx == 2 || bothpressbutton_idx == 2) 
       {
           second_press = UP; 
       }
       if(warzoneholdbutton_idx == 1) 
       {
          warzone_hold_press = L2; 
       }
       if(warzoneholdbutton_idx == 2) 
       {
          warzone_hold_press = R2;
       }
       if(warzoneholdbutton_idx == 3) 
       {
          warzone_hold_press = L1;
       }
       if(warzoneholdbutton_idx == 4)
       {
          warzone_hold_press = R1; 
       } 
       if(warzonepressbutton_idx == 1)
       {
          warzone_press = DOWN; 
       }
       if(warzonepressbutton_idx == 2)
       {
          warzone_press = UP; 
       } 
   }
function Save(){ 
   combo_run(SAVE)
   
    set_pvar(SPVAR_1,toggle_legacyar[0]     );      set_pvar(SPVAR_4,  antirecoil_vertical[0]    );
    set_pvar(SPVAR_2,toggle_antirecoil[0]   );      set_pvar(SPVAR_5,  antirecoil_horizontal1[0] );       
    set_pvar(SPVAR_3,toggle_rapidfire[0]    );      set_pvar(SPVAR_6,  antirecoil_start[0]       );    
                                                    set_pvar(SPVAR_7,  antirecoil_end[0]         );           
	                                                set_pvar(SPVAR_8,  antirecoil_time[0]        );      
	                                                set_pvar(SPVAR_9,  antirecoil_horizontal[0]  );   
	                                                set_pvar(SPVAR_10, rate_of_fire[0]           );                                        
	                                                     
// Profile 2
	set_pvar(SPVAR_11,toggle_legacyar[1]    );      set_pvar(SPVAR_14, antirecoil_vertical[1]    );
    set_pvar(SPVAR_12,toggle_antirecoil[1]  );      set_pvar(SPVAR_15, antirecoil_horizontal1[1] );       
    set_pvar(SPVAR_13,toggle_rapidfire[1]   );      set_pvar(SPVAR_16, antirecoil_start[1]       );    
                                                    set_pvar(SPVAR_17, antirecoil_end[1]         );           
	                                                set_pvar(SPVAR_18, antirecoil_time[1]        );      
	                                                set_pvar(SPVAR_19, antirecoil_horizontal[1]  );   
	                                                set_pvar(SPVAR_20, rate_of_fire[1]           );                                                
// Profile 3
	set_pvar(SPVAR_21,toggle_legacyar[2]    );      set_pvar(SPVAR_23, antirecoil_vertical[2]    );
    set_pvar(SPVAR_22,toggle_rapidfire[2]   );      set_pvar(SPVAR_24, antirecoil_horizontal1[2] );      
                                                    set_pvar(SPVAR_25, rate_of_fire[2]           );    
	                                                                       
    set_pvar(SPVAR_26,POLAR_ASSIST          );      set_pvar(SPVAR_39, enemy_ping                ); 
    set_pvar(SPVAR_27,DoGz_AIM_ASSIST       );      set_pvar(SPVAR_40, easy_plate                );
    set_pvar(SPVAR_28,PROGRESSION_ASSIST    );      set_pvar(SPVAR_41, swap_on                   );  
    set_pvar(SPVAR_29,RADIUS                );      set_pvar(SPVAR_42, btn_layout                );
    set_pvar(SPVAR_30,ANGLE                 );      set_pvar(SPVAR_43, cancel_slide              );
    set_pvar(SPVAR_31,POLAR_BOOST           );      set_pvar(SPVAR_44, toggle_proneshot          ); 
    set_pvar(SPVAR_32,POLAR_SHAKE           );      set_pvar(SPVAR_45, toggle_dropshot           ); 
    set_pvar(SPVAR_33,A_B_S                 );      set_pvar(SPVAR_46, toggle_bunnyhop           );
    set_pvar(SPVAR_34,POLAR_RELEASE         );      set_pvar(SPVAR_47, RADIUS1                   );
    set_pvar(SPVAR_35,D___AS                );      set_pvar(SPVAR_48, STEPS                     );
    set_pvar(SPVAR_36,D_AS1                 );      set_pvar(SPVAR_49, STEADY_AIM                );
    set_pvar(SPVAR_37,DoGz_ASSIST_RELEASE   );		set_pvar(SPVAR_50, stickyaim_size            );
	set_pvar(SPVAR_38,quickscopedelay       );      set_pvar(SPVAR_51, stickyaim_time            );
	set_pvar(SPVAR_52,ARC_VAL               );      set_pvar(SPVAR_53, ARC___VAL                 );
	set_pvar(SPVAR_54,DIVIDE                );      set_pvar(SPVAR_55, DOGZ_RELEASE              ); 
	set_pvar(SPVAR_56,PXA                   );      set_pvar(SPVAR_57, PXSE                      );
	set_pvar(SPVAR_58,PVSI                  );      set_pvar(SPVAR_59, PYA                       );
	set_pvar(SPVAR_60,PYSE                  );      set_pvar(SPVAR_61, PVS                       );
	set_pvar(SPVAR_62,REL                   ); 
} 
function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(JUMP_BTN   , 0 ); 	set_val(CROUCH_BTN, 0 ); 	set_val(RELOAD_BTN, 0 ); 	set_val(SWITCH_BTN , 0);
set_val(TACTICAL_BTN , 0 ); set_val(LETHAL_BTN , 0 ); 	set_val(SPRINT_BTN , 0 ); 	set_val(MELEE_BTN  , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
/*set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);*/
}  