/*

 ★★   ★  ★★★★ ★★★★  ★★★★ ★★★★★     ★     ★★★★                       
 ★ ★  ★  ★   ★ ★   ★     ★  ★   ★    ★ ★    ★    ★  GRAND MERCI À NOOZBAR POUR LA FABRICATION DE CE MODÈLE SCRIPT ET MERCI DE VOTRE SOUTIEN
 ★ ★  ★  ★   ★ ★   ★   ★    ★  ★    ★   ★   ★ ★        
 ★  ★ ★  ★   ★ ★   ★  ★     ★   ★  ★★★★★   ★    ★        VOUS AVEZ M'AIDÉ À APPRENDRE TELLEMENT DÉJÀ ET J'APPRÉCIE QUE TRÈS BEAUCOUP 
 ★   ★★  ★★★★ ★★★★  ★★★★ ★★★★★ ★     ★  ★     ★               
 
☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺
                      ☺☺☺☺☺☺   ☺☺☺☺    ☺☺    ☺☺☺☺☺☺          ☺☺          ☺☺☺         ☺☺☺☺☺☺          ☺☺☺    ☺☺         ☺☺            ☺☺☺        ☺☺☺☺☺☺       ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺☺☺☺☺   ☺☺   ☺☺☺☺☺   ☺☺☺☺    ☺☺    ☺☺☺☺☺☺    ☺☺☺   ☺☺   ☺☺☺☺   ☺☺☺    ☺☺     ☺☺☺☺   ☺☺☺☺   ☺☺☺    ☺☺   ☺☺☺☺☺☺☺☺☺☺☺☺    ☺☺☺☺☺            ☺☺☺   ☺☺   ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺☺☺☺☺   ☺☺    ☺☺☺☺   ☺☺☺☺    ☺☺    ☺☺☺☺☺☺    ☺☺☺   ☺☺   ☺☺☺☺   ☺☺☺    ☺☺      ☺☺☺   ☺☺☺☺   ☺☺☺    ☺☺   ☺☺☺☺☺☺☺☺☺☺☺☺    ☺☺☺☺    ☺☺☺      ☺☺   ☺☺☺   ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺☺☺☺           ☺☺☺           ☺☺    ☺☺☺☺☺☺    ☺☺☺   ☺☺        ☺☺☺☺☺    ☺☺      ☺☺☺         ☺☺☺☺    ☺☺       ☺☺☺☺☺☺☺☺    ☺☺☺☺☺☺☺☺☺☺      ☺☺☺☺☺☺☺☺☺   ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺☺☺    ☺☺☺☺     ☺☺☺☺☺☺☺☺☺☺   ☺☺    ☺☺☺☺☺☺    ☺☺☺   ☺☺   ☺☺☺☺  ☺☺☺☺    ☺☺     ☺☺☺☺   ☺☺☺☺  ☺☺☺☺    ☺☺   ☺☺☺☺☺☺☺☺☺☺☺☺    ☺☺☺☺☺☺☺☺       ☺☺☺☺☺☺☺☺☺☺   ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺☺    ☺☺☺☺☺☺     ☺☺☺☺☺☺☺☺☺   ☺☺    ☺☺☺☺☺☺    ☺☺☺   ☺☺   ☺☺☺☺   ☺☺☺    ☺☺    ☺☺☺☺☺   ☺☺☺☺   ☺☺☺    ☺☺   ☺☺☺☺☺☺☺☺☺☺☺☺    ☺☺☺☺☺☺       ☺☺☺☺☺☺☺☺☺☺☺☺   ☺☺☺☺☺☺
☺☺☺☺☺☺    ☺    ☺☺☺☺☺☺☺☺                ☺☺        ☺☺          ☺☺   ☺☺☺☺    ☺☺        ☺☺☺☺☺☺☺   ☺☺☺☺    ☺☺    ☺☺   ☺☺☺☺☺☺☺☺☺☺☺☺    ☺☺☺☺              ☺☺            ☺☺
☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺☺    
                                          
//#################################################################################################
//######################################### Sweet_EviL_14 #########################################
//################################################################################################# 
//#     _________                      __    ___________     .__.____       ____   _____          #
//#    /   _____/_  _  __ ____   _____/  |_  \_   _____/__  _|__|    |     /_   | /  |  |         #
//#    \_____  \\ \/ \/ // __ \_/ __ \   __\  |    __)_\  \/ /  |    |      |   |/   |  |_        #
//#    /        \\     /\  ___/\  ___/|  |    |        \\   /|  |    |___   |   /    ^   /        #
//#   /_______  / \/\_/  \___  >\___  >__|   /_______  / \_/ |__|_______ \  |___\____   |         #
//#           \/             \/     \/               \/                 \/           |__|         #
//#                                            													  #
//#################################################################################################
//####################### Sweet_EviL_14 GENERIC_SMART_ORBITAL_AIM_ASSIST ##########################
//#################################################################################################     


*/
              define USE_CIRCULAR_SHAPE 	= 1; // 0 = USE_LINEAR_SHAPE --> scaning x axis according to mvt direction
/*============================================================================================================================                                          
                        PLEASE READ BELOW SO YOU KNOW HOW TO CHANGE YOUR BUTTONS FOR SWITCH PROFILE  
                  
    TO CHANGE THE BUTTONS, REPLACE THEM WITH WHAT YOU WOULD LIKE FOR EXAMPLE = PS4_CIRCLE; << REMEMBER TO PUT A SEMICOLON
 
                              ========== SWITCH BUTTONS FOR ALL PROFILES =============
                         
                                 SINGLE BUTTON PRESS TO SWITCH PROFILES - YOU CHOOSE                                      */             
 define one_button_press = FALSE;   define profile_switch_button1 = PS4_TRIANGLE;                                          /*
============================================================================================================================                                 
                                       PRESS 2 BUTTONS TO CHANGE PROFILES                                                 */                                    
                                   define profile_switch_button2 = PS4_L2; 
 define two_button_press = TRUE;   define profile_switch_button3 = PS4_DOWN; 
/*==========================================================================================================================
             TAP TRIANGLE FOR WEAPON PROFILE SWITCH, THIS WILL NOT INTERFERE WITH PUTTING PLATES ON IN WARZONE                      
             HOLD TRIANGLE FOR 1 SECOND TO ACTIVATE THE WARZONE PROFILE, THEN PRESS TRIANGLE TO RETURN BACK TO 
             PREVIOUS WEAPON PROFILES, YOU HAVE THE OPTION TO USE A 2 BUTTON METHOD TO CHANGE PROFILE AS WELL  
/*==========================================================================================================================
       OPEN ZEN MENU TO ENABLE THIS BUTTON TO CHANGE PROFILE!! IF YOU WANT TO CHANGE THE BUTTONS REPLACE THE ABOVE!!! 
/*==========================================================================================================================
  ******** CANCEL SLIDE BUTTONS ************************
*/         define user_defined_crouch_button = PS4_CIRCLE; // Replace with R3 if you play tactical     
           define user_defined_jump_button = PS4_CROSS; // Replace CROSS with L1 if you use bumper jumper layout 
//LIST OF CONTROLLER IDENTIFIERS FOR THE PROFILE SWITCH BUTTON
/*
PS4_L1 - PS4_L2 - PS4_L3 - PS4_R1 - PS4_R2 - PS4_R3 - PS4_CROSS - PS4_SQUARE - PS4_CIRCLE - PS4_TRIANGLE - PS4_UP - PS4_DOWN

PS4_LEFT - PS4_RIGHT
 
                             PLEASE READ THE INSTRUCTIONS BELOW ON HOW TO ACTIVATE MODS   
============================================================================================================================
==== Enter Mod Menu                                         ===== Hold L2/LT and tap OPTIONS/MENU                        ===
============================================================================================================================
==== To edit any mods in the modMenu                        ===== Press CROSS/A to EDIT                                  ===
============================================================================================================================
==== Navigate between every mod and toggles on the ZEN Menu ===== Tap LEFT or RIGHT on the D-PAD                         ===
============================================================================================================================
==== Enable or Disable the diplayed mod                     ===== Tap UP for ON == Tap DOWN for OFF                      ===
============================================================================================================================
==== Switch Loadouts In Mod Menu                            ===== Tap Y/Triangle                                         ===
============================================================================================================================
==== Switch Loadouts In Game                                ===== USER DEFINED BUTTONS                                   ===
============================================================================================================================
==== Edit availble Mods                                     ===== Press CROSS/A OR Press CIRCLE/B to Exit Mod            ===
============================================================================================================================
==== Edit Values In available Mods                          ===== Hold L2/LT & Tap RIGHT to increase + 1                 ===
                                                            =====              Tap LEFT to decrease  - 1                 ===
                                                            =====              Tap UP   to increase  + 10                ===
                                                            =====              Tap DOWN to decrease  - 10                ===
============================================================================================================================ 
==== Navigate between values available in the editable mods ===== Tap LEFT Or RIGHT                                      ===
============================================================================================================================
==== To SAVE all mods that have been edited & enabled       ===== Press XBOX/PS Button == Screen Will diplay "SAVED"     ===
============================================================================================================================
==== To exit Mod Menu once you have saved it                ===== Hold L2/LT and Tap OPTIONS/MENU                        ===
============================================================================================================================
==== Kill Switch (Disable Everything)                       ===== Hold LT/L2 & Double Tap SHARE/VIEW                     ===

*/
 
// Text to display 
	const string TITLE = "BETA"; // 11 char max
	const string PRESS_A_TO_CONTINUE = "Press A to Edit";
	const string OFF = "OFF"; 
	const string ON = "ON"; 
	const string SAVE= "SAVED";
	const string PROFILE_1 = "Primary": // or primary weapon
	const string PROFILE_2 = "Secondary": // or secondary weapon
	const string PROFILE_3 = "Warzone"; // or Warzone loot 
	const string ALLPROFILES = "All Profiles"; 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Mod Name // Profile 1 
	const string ANTIRECOIL1  = "Legacy AR";         // modName_idx = 0
    const string RAPIDFIRE    = "RapidFire";         // modName_idx = 1
    const string SWEETEVIL    = "EvilOrbital";        // modName_idx = 2
 	const string CANCELSLIDE  = "CancelSlide";        // modName_idx = 3
 	const string EASY_PLATE   = "Easy Plates";       // modName_idx = 4
	const string AUTO_PING    = "Enemy Ping";        // modName_idx = 5
 	const string AUTORUN      = "AutoRun";           // modName_idx = 6
 	const string SWAP         = "Swap Tr/Bu";        // modName_idx - 7
 	
	
	
// Index to find Mod Name string - switchable in game with left/right in ModMenu 
	int modName_idx;
    
// modName # of the last Mod Name string - Used for cycle modName_idx
	define LAST_MODNAME_STRING = 7;

// # of the last modName_idx that has a value that can be edited
	define LAST_EDITABLE_STRING = 2;

    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Value Name
	// modName_idx = 0 = Legacy AR 
	const string ANTIRECOIL_VERTICAL      = "AR Vertical"; 		 // valName_idx = 0  
	const string ANTIRECOIL_HORIZONTAL    = "AR Horiz";		     // valName_idx = 1
    // modName_idx = 1 = Rapid Fire
	const string RATE_OF_FIRE             = "Rounds/sec";	     // valName_idx = 2
	// modName_idx = 3 = Sweet Evil Polar   
	const string RADUIS                   = "Radius";            // valName_idx = 3
	const string ANGLE4                   = "Angle";             // valName-idx = 4
	const string VMUPDATE                 = "VM Update";         // valName_idx = 5
	const string MAGNITUDE                = "Magnitude";         // valName_idx = 6


   
	
// Index to find Value Name string - switchable in game with left/right in ModEdit 
	int valName_idx;
	
	define AMOUNT_OF_VALNAME_IDX = 6;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Values for [3] profiles/weapons
	
	int rate_of_fire[3];
	int antirecoil_vertical[3];  
	int antirecoil_horizontal[3];
	
/* Used to define Profiles and also define # of profile to find, edit, and display the right index */
	int profile_idx; 
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Multi toggles
// for 3 Profiles: profile_idx = 0, 1 and 2
    int toggle_rapidfire[3]; 
	int toggle_legacyar[3]; 
	int toggle_sweet_evil; 
// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 3;  
	
// Amount of multi toggle - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 2;
	 //define per_profile_idx = 4; 
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};

// Variables for function number_to_string() 
	int i;
	int c,c_val;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

data(
//    Blue      Pink    SkyBlue    Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//   Yellow    White      Red       OFF        
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
     
// Refresh OLED
	int display_title = TRUE;
	int display_new; 
	int display_black;
	int warzone_loot_weapon; // Special weapon
	 
    
// ModMenu / ModEdit / KillSwitch
	int ModMenu;	
	int ModEdit;
	int KillSwitch;
    int count_black; // for screen saver
    int profile_1or2;
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// Anti Recoil values   
    int AntirecoilVertical; 
	int AntirecoilHorizontal;
	
	int invert1 = 1;
    int cancel_slide; 
   // EnemyPing & Easy Plates // Credit to who done these codes :) 
   int enemy_ping;
   int easy_plate;
// Toggles
   int autorun_on;
   int swap_on;
    
   int hold_time;                                                    
   int rest_time;
   int led_on;
   int led_off;
     // Double tap 
    int q;											
    int double__tap[30];
    init {
    while(q < 30) 
    {double__tap[q] = -1;       
    q++;}}

// Sweet Evil Polar
const int16 Lookup_Table[] =
{
	0, 	1,  3,  5,  6,  8,  10, 12, 13, 15,
	17, 19, 20, 22, 24, 25, 27, 29, 30, 32,
	34, 35, 37, 39, 40, 42, 43, 45, 46, 48,
	50, 51, 52, 54, 55, 57, 58, 60, 61, 62,
	64, 65, 66, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 89, 90, 91, 92, 92, 93,
	93, 94, 95, 95, 96, 96, 97, 97, 98, 98,
	98, 98, 99, 99, 99, 99, 99, 99, 99, 99,
	100
}
int _Angle;
int _Polar_Process_Done;
int _Increment; 

//please when you load your slot don't touch you controller for 1s to save you joystick offset/drift
int X_JOY_OFFSET;
int Y_JOY_OFFSET; 

int X_Magnitude;
int Y_Magnitude;
int Sinus;
int Cosinus;
int RX_Polar;
int RY_Polar;
int Angle_Increment;
int Raduis; 
int VM_UPDATE;
int MAX_MAGNITUDE;


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 
init{
// Profile 1
	// Toggles 
	// Values
	toggle_legacyar[0]       = get_pvar(SPVAR_1, 0, 1, 0 );     antirecoil_vertical[0]   = get_pvar(SPVAR_3, -99, 99, 0);
	toggle_rapidfire[0]      = get_pvar(SPVAR_2, 0, 1, 0 );     antirecoil_horizontal[0] = get_pvar(SPVAR_4, -99, 99, 0);
                                                                rate_of_fire[0]          = get_pvar(SPVAR_5,  1, 25, 1);       
	                                                          
	                                                            
// Profile 2 ===================================================================================================================
	// Toggles                                                  // Values
    toggle_legacyar[1]       = get_pvar(SPVAR_6, 0, 1, 0 );    antirecoil_vertical[1]   = get_pvar(SPVAR_8, -99, 99, 0);
	toggle_rapidfire[1]      = get_pvar(SPVAR_7, 0, 1, 0 );    antirecoil_horizontal[1] = get_pvar(SPVAR_9, -99, 99, 0);
                                                               rate_of_fire[1]         = get_pvar(SPVAR_10,  1, 25, 1 );
	                                                            
	                                                       
																
// Profile 3 ===================================================================================================================                                                         
   toggle_legacyar[2]       = get_pvar(SPVAR_11, 0, 1, 0 );     antirecoil_vertical[2]   = get_pvar(SPVAR_13, -99, 99, 0);
   toggle_rapidfire[2]      = get_pvar(SPVAR_12, 0, 1, 0 );     antirecoil_horizontal[2] = get_pvar(SPVAR_14, -99, 99, 0);
                                                                rate_of_fire[2]          = get_pvar(SPVAR_15,  1, 25, 1 );
	                                                           	
	                                                            
// All Profiles ================================================================================================================                                                         
	toggle_sweet_evil     = get_pvar(SPVAR_16, 0, 1, 0);        
	                                                            
	autorun_on            = get_pvar(SPVAR_17, 0, 1, 0);	    
	enemy_ping            = get_pvar(SPVAR_18, 0, 1, 0);        
	easy_plate            = get_pvar(SPVAR_19, 0, 1, 0);        Raduis                   = get_pvar(SPVAR_22, 1, 30, 8 );
	cancel_slide          = get_pvar(SPVAR_20, 0, 1, 0);        Angle_Increment          = get_pvar(SPVAR_23, 1, 25, 16 );  
	swap_on               = get_pvar(SPVAR_21, 0, 1, 0);        VM_UPDATE                = get_pvar(SPVAR_24, 1, 30, 8 ); 
	                                                            MAX_MAGNITUDE            = get_pvar(SPVAR_25, 1, 15, 10 );  
	
	_Angle  = 360;
    _Polar_Process_Done = TRUE;
    _Increment = FALSE;
    
    X_JOY_OFFSET = get_val(PS4_RX);
	Y_JOY_OFFSET = get_val(PS4_RY); 
	
	set_val(TRACE_1, X_JOY_OFFSET);
    set_val(TRACE_2, Y_JOY_OFFSET);
	
	
}

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                                     MAIN SECTION                                                      |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
main {

	set_val(TRACE_1, profile_idx);
	set_val(TRACE_2, modName_idx);
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Crossover
    if(get_controller() != PIO_PS4) // If XBOX controller:
    {
        if(get_console() == PIO_PS4) // If PS4 console:
        {
            swap(PS4_SHARE,PS4_TOUCH); // View = TouchPad
        
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) //  RS + View = ScreenShot
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
        }
	}
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     DISPLAY TITLE                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

// Display Script Title    
    if(display_title)
    {
    	cls_oled(0);	// clear OLED screen
    	count_black = 0;// reset screen saver counter
    	
    	if(KillSwitch)
    	{
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	// display OFF centered in X 
			                                                                    // display Battery
		}
    	else
    	{
    		printf(center_x(sizeof(TITLE) - 1, OLED_FONT_MEDIUM_WIDTH),13,OLED_FONT_MEDIUM,OLED_WHITE,TITLE[0]);
    		// display TITLE centered in X 
    		if(warzone_loot_weapon)
    			printf(center_x(sizeof(PROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]);
    		
    		else
    		{
    		if(profile_idx == 0)
    			printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); 
    		if(profile_idx == 1)
    			printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),45,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]);
    		
    		    
    	    }
    		display_black = TRUE;	// screen saver
    		display_title = FALSE;
    	}
    }
   
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Screen saver (OLED off)
    if(display_black && !ModMenu && !KillSwitch)
    {
    	count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_black = FALSE;
    	}
    }
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                      KILL SWITCH                                                      |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
  
	if(get_val(PS4_L2))
	{
	// Kill Switch	
		if(event_release(PS4_SHARE))
		{
			KillSwitch = !KillSwitch;
			
			if(KillSwitch)        
				combo_run(RUMBLE_OFF);	// rumble and LED blink
			else
				combo_run(RUMBLE_ON);	// rumble and LED blink
			
    		//display_black = FALSE;
			display_title = TRUE;
		}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       MOD MENU                                                        |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

	// toggle ModMenu ON/OFF
		if(event_release(PS4_OPTIONS) && !KillSwitch)
		{
			ModMenu = !ModMenu;
			
			if(!ModMenu)
			{
				ModEdit = FALSE; 		// close ModEdit too
				//save ();				// save function
				//combo_run(EXIT_SAVE);	// rumble, blink and display SAVED then display TITLE
				combo_run(RUMBLE_OFF);  // rumble and LED blink
				display_title = TRUE;   // display Title
			}
			
			if(ModMenu)
			{
				modName_idx = 0;        // start to the first adjustable value
				combo_run(RUMBLE_ON);	// rumble and LED blink
				display_new = TRUE;		// display mod name, profile, ON/OFF and value
			}
		}
		set_val(PS4_SHARE, 0);		    // block
		set_val(PS4_OPTIONS, 0);		// block
	} // L2 end

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
if(!KillSwitch)
{
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
// ModMenu

 
	if(ModMenu) 
	{
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            MOD EDIT                                               |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

	// toggle ModEdit ON/OFF - only for mods who have adjustable value(s)
		if(modName_idx   <= LAST_EDITABLE_STRING)	// if ANTIRECOIL (so modName_idx = 0) or AA or RAPIDFIRE or BURSTFIRE or StrafeShot is diplayed 
		{
			if(event_press(PS4_CROSS) && !ModEdit) // Turn ModEdit ON
			{
				valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // always display first val names available when enter in edition mod
				ModEdit = TRUE;
				combo_run(RUMBLE_ON);
				display_new = TRUE;
			}
			
			if(event_press(PS4_CIRCLE) && ModEdit) // Turn ModEdit OFF
			{
				ModEdit = FALSE;
				combo_run(RUMBLE_OFF);
				display_new = TRUE;
			}
		}
	
           /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
           |                                          EDIT VALUES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
            
	// ModEdit ON
		if(ModEdit)
		{
			if(get_val(PS4_L2)) // Edit value: hold L2 + UP (+1) or DOWN (-1) or RIGHT (+10) or LEFT (-10)
			{
			// Mods that can have different values depending the active Profile
			
    		  //val_I_want_to_edit[profile] = edit_val( corresponding valName_idx , val_I_want_to_edit[profile], abs(range min) , range max ); 	
			    antirecoil_vertical[profile_idx]   = edit_val( 0 , antirecoil_vertical[profile_idx]  , 0  ,   99 , 1 , 10   ); 
				antirecoil_horizontal[profile_idx] = edit_val( 1 , antirecoil_horizontal[profile_idx], 99 ,   99 , 1 , 10   );
			    rate_of_fire[profile_idx]          = edit_val( 2 , rate_of_fire[profile_idx]         ,  1 ,   25 , 1 , 10   );
			    Raduis                             = edit_val( 3 , Raduis                            , 0  , 30 , 1 , 10 ); 
			    Angle_Increment                    = edit_val( 4 , Angle_Increment                   , 0  , 25 , 1 , 10 ) ; 
			    VM_UPDATE                          = edit_val( 5 , VM_UPDATE                         , 9 , 30 , 1 , 10 ); 
			    MAX_MAGNITUDE                      = edit_val( 6 , MAX_MAGNITUDE                     , 0 , 15 , 1 , 10 ); 
			   
			}

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        VALUES AVAILABLE                                           |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

			else // NOT L2 (if not editing value)
			{
			
			// Navigate value name
				if(event_press(PS4_RIGHT))
				{
					valName_idx += 1;
					display_new = TRUE; // Display value name and value
				}
				if(event_press(PS4_LEFT))
				{
					valName_idx -= 1;
					display_new = TRUE;
				}
			
			// Adjustable values available for each of the mods (exemple: Anti-Recoil have 4 values per profile: 0 = antirecoil_start[<active profile>], 1 = antirecoil_end[], 2 = at_t, 3 = at_h  
			 // if(modName_idx == 0) <so if I display Anti-Recoil>  vals_available( 0 , 3  ); <vals_available are valName_idx 0, 1, 2 or 3>
				
				if(modName_idx == 0) vals_available(0  , 1 ); 
				if(modName_idx == 1) vals_available(2  , 2 );		
				if(modName_idx == 2) vals_available(3  , 6 );
				
				
				
			} // NOT SQUARE (if not editing value) end
		} // ModEdit end

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            TOGGLES                                                |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

		else // if NOT ModEdit BUT if ModMenu
		{
	
	// Navigate mods name
	     	if(event_press(PS4_RIGHT))
			{
				modName_idx += 1;
				display_new = TRUE;
			}
			if(event_press(PS4_LEFT))
			{
				modName_idx -= 1;
				display_new = TRUE;
			}
			
		// Cycle mods name
			if(modName_idx > LAST_MODNAME_STRING) // max column for displaying mod name  
				modName_idx = 0;
			if(modName_idx < 0)
				modName_idx = LAST_MODNAME_STRING;
			
			
		// Switch profiles	
			if(event_press(PS4_TRIANGLE))
			{
				profile_idx += 1;
				display_new = TRUE;
			}
		// Cycle profiles	
			if(profile_idx > (AMOUNT_OF_PROFILES - 1))
				profile_idx = 0;
			
		// Toggles (UP to turn ON, DOWN to turn OFF)
    		// Mods that can have different ON/OFF status depending the active Profile
    		
		  //toggle_I_want_to_edit[profile]  = toggle( corresponding modName_idx, toggle_I_want_to_edit[profile] );
			toggle_legacyar[profile_idx]   = toggle( 0, toggle_legacyar[profile_idx] ); 
			toggle_rapidfire[profile_idx]  = toggle( 1, toggle_rapidfire[profile_idx] ); 
			toggle_sweet_evil              = toggle( 2, toggle_sweet_evil );
            cancel_slide                   = toggle( 3, cancel_slide ); 
            easy_plate                     = toggle( 4, easy_plate);
            enemy_ping                     = toggle( 5, enemy_ping );
            autorun_on                     = toggle( 6, autorun_on  );
			swap_on                        = toggle( 7, swap_on     );
			
		
			// Mods that have same ON/OFF status on every Profiles
    		
		  //toggle_I_want_to_edit = toggle( corresponding modName_idx, toggle_I_want_to_edit );
		
		} // if NOT ModEdit BUT if ModMenu end
		
	// If ModMenu AND ModEdit
		if(event_press(PS4_PS))
			save ();
			
		//block_btn (); // block ALL btn (exept L2_R2_RX_RY_LX_LY to test antirecoil, rapidfire and burstfire against a wall without leaving ModEdit and ModMenu)
		block_all_inputs();

	} // ModMenu ON end


							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                              NOT MOD MENU AND NOT MOD EDIT                                             |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — */	 
	if(!ModMenu)
	{
	if(swap_on) // (6)
	{
			swap(PS4_R1, PS4_R2);
			swap(PS4_L1, PS4_L2);
	}
		
    if(get_val(PS4_TRIANGLE) && get_ptime(PS4_TRIANGLE) > 1000)
    {
        warzone_loot_weapon = TRUE;
        display_title = TRUE;
    }
        if(warzone_loot_weapon && double_click(PS4_TRIANGLE))  
           warzone_loot_weapon = FALSE;
         
   
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        SPEED TOGGLES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	// Speed Toggles
	
	  //toggle_I_want_to_edit[profile]  = speed_toggle( hold BTN1, hold BTN2 300ms   , toggle_I_want_to_edit[profile] , corresponding modName_idx );
		toggle_rapidfire[profile_idx]  = speed_toggle( PS4_L2, PS4_UP   , toggle_rapidfire[profile_idx] , 2 );
		
		// We can add as many speed toogle as we need

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	// Hair Trigger
   	deadzone(PS4_L2,PS4_R2,99,99);
   	 	
  
 
    	 	
  
  if(toggle_sweet_evil) 
  { 
   vm_tctrl(VM_UPDATE);
    
	if(get_val(PS4_L2))
	{
		if(_Polar_Process_Done == TRUE)
		{
			_Polar_Process_Done = FALSE;
					       	
			if(get_lval(PS4_RX)<= get_val(PS4_RX))
			{
				_Angle = 360;  	// add right boost mvt
				_Increment = FALSE;
			}
			else
			{
				_Angle = 180;  // add lest boost mvt  
				_Increment = TRUE;
			}
		}
		
		X_Magnitude = isqrt(pow((get_lval(PS4_RX) - get_val(PS4_RX)), 2));
		
		if(USE_CIRCULAR_SHAPE == 1)
		{
    		Y_Magnitude = isqrt(pow((get_lval(PS4_RY) - get_val(PS4_RY)), 2));
    	}
		
		if((X_Magnitude <= MAX_MAGNITUDE) && (Y_Magnitude <= MAX_MAGNITUDE))
		{
			Set_Polar(_Angle);
		                
			if(_Increment == TRUE)
			{
				_Angle+= Angle_Increment; 
		        	
				if(_Angle >= 360)
				{
					_Angle -= 360;
				}
	        		
	  	        if((_Angle <= 180 + (Angle_Increment/2)) && (_Angle > (180 - (Angle_Increment + (Angle_Increment/2)))))
	        	{
					_Polar_Process_Done = TRUE;
	        	}
			}
			else
			{
				_Angle-= Angle_Increment;
		        	
				if( (_Angle <= 0))
				{
					_Polar_Process_Done = TRUE;
				}
			}
		}
		else
		{
			_Polar_Process_Done = TRUE;		
		}
	}
	else
	{
		_Angle = 360;
		_Increment = FALSE;
		_Polar_Process_Done = TRUE;
	}
}


  if(enemy_ping)
  {
	  if(get_val(PS4_L2)&&double_click(PS4_UP)||event_press(PS4_R2))
	      combo_run(auto_ping);
	        
      if(!get_val(PS4_L2))
		   combo_stop(auto_ping);
  }
		  
  if(easy_plate)
  {
	  if(get_val(PS4_TRIANGLE)&&get_ptime(PS4_TRIANGLE)>350)
		  combo_run(easy_plate);
		    
	  if(get_val(PS4_L2)>10 || get_val(PS4_R2)>10 || get_val(PS4_SQUARE))
		  combo_stop(easy_plate);	
  }
		
 
		if(autorun_on) // (5)
		{
    		if(get_val(PS4_LY) < -60)
    		{
    	    	set_val(PS4_LY, -100);
    	    	set_val(PS4_L3, 100);
    		}
		}
		
  if(cancel_slide)  
  {                                                                                                  
    	if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
    	{
		      if(event_release (user_defined_crouch_button))
		         combo_run(CANCEL_SLIDE)                                            
	    }                                               
                                               
  } 
		
	
  	/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  	|                                                     SWITCH PROFILE                                                    |
  	◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
  
	// Switch Profiles - tap TRIANGLE/Y to switch profile 1 or 2 - double tap for profile 3 - hold R3/RS + tap for sync color
			if(one_button_press) 
			{ 
				if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150)
        		{
        	    	profile_1or2=!profile_1or2; 
        	    	
     
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	} 
     
           	  if(two_button_press) 
           	  { 
           		if(get_lval(profile_switch_button2) && (event_press(profile_switch_button3)))
        		{
        	    	profile_1or2=!profile_1or2;
        	    
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	} 
    	
               // If Profile 2
    		if(profile_1or2)
    			profile_idx = 1;
    		
    	// If Profile 1
    		else 	
    			profile_idx = 0; 
              
    
	} // ModMenu OFF end

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                   FEATURES THAT WORK EVERYTIME (MOD MENU/EDIT OR NOT)                                 |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

 
    if(toggle_legacyar[profile_idx] == 1)
	{
		if(get_val(PS4_R2))
			 combo_run(ANTIRECOIL);
		    else
			 combo_stop(ANTIRECOIL);
	}


  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    RAPID FIRE (1)                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/  
  if(toggle_rapidfire[profile_idx] == 1)
	{
	// Rate of Fire Calculation
    	hold_time = 500 / rate_of_fire[profile_idx]; 
   		rest_time = hold_time - 20;
    	if(rest_time < 0) rest_time = 0;
    
    // Run combo
    	if(get_val(PS4_R2))
    		combo_run(RAPIDFIRE);
    	else
    		combo_stop(RAPIDFIRE);
    		
    	led_on = 150;
    	led_off = 300;
    	combo_run(BLINK);
	}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    REFRESH DISPLAY                                                    |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
	if(display_new) 
	{
	// Clear OLED screen	
		cls_oled(0);
    	count_black = 0;// reset screen saver counter
		
		if(ModEdit)
		{
	    // Display Value Name and value
    		// Mods that can have different values depending the active Profile
    		
		  //display_edit( corresponding valName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , val_I_want_to_be_displayed[profile] );
			display_edit( 0 , center_x(sizeof(ANTIRECOIL_VERTICAL) - 1, OLED_FONT_MEDIUM_WIDTH)   , ANTIRECOIL_VERTICAL[0]   , antirecoil_vertical[profile_idx]   );
			display_edit( 1 , center_x(sizeof(ANTIRECOIL_HORIZONTAL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_HORIZONTAL[0] , antirecoil_horizontal[profile_idx] );	
			display_edit( 2 , center_x(sizeof(RATE_OF_FIRE)      - 1, OLED_FONT_MEDIUM_WIDTH)     , RATE_OF_FIRE[0]      , rate_of_fire[profile_idx]    );
		    display_edit( 3 , center_x(sizeof(RADUIS) - 1, OLED_FONT_MEDIUM_WIDTH) , RADUIS[0] ,  Raduis );
		    display_edit( 4 , center_x(sizeof(ANGLE4) - 1, OLED_FONT_MEDIUM_WIDTH) , ANGLE4[0] ,  Angle_Increment );
		    display_edit( 5 , center_x(sizeof(VMUPDATE) - 1, OLED_FONT_MEDIUM_WIDTH) , VMUPDATE[0] ,  VM_UPDATE );
		    display_edit( 6 , center_x(sizeof(MAGNITUDE) - 1, OLED_FONT_MEDIUM_WIDTH), MAGNITUDE[0] , MAX_MAGNITUDE ); 
		  
			// Mods that have same value on every Profile
		}
		else
		{
	    // Display Mod Name and ON/OFF
    		// Mods that can have different ON/OFF status depending the active Profile
    		
		  //display_mod( corresponding modName_idx , center_x(sizeof(corresponding_string_to_display) - 1, OLED_FONT_MEDIUM_WIDTH) , corresponding_string_to_display[0] , toggle_I_want_to_be_displayed[profile]);
		    display_mod( 0 ,  center_x(sizeof(ANTIRECOIL1) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL1[0] , toggle_legacyar[profile_idx]);
			display_mod( 1 ,  center_x(sizeof(RAPIDFIRE)   - 1, OLED_FONT_MEDIUM_WIDTH)  , RAPIDFIRE[0] , toggle_rapidfire[profile_idx]);
			display_mod( 2 , center_x(sizeof(SWEETEVIL)   - 1, OLED_FONT_MEDIUM_WIDTH) , SWEETEVIL[0]   , toggle_sweet_evil ); 
            display_mod( 3 , center_x(sizeof(CANCELSLIDE) - 1, OLED_FONT_MEDIUM_WIDTH) , CANCELSLIDE[0]    , cancel_slide ); 
            display_mod( 4, center_x(sizeof(EASY_PLATE)  - 1, OLED_FONT_MEDIUM_WIDTH)  , EASY_PLATE[0]    , easy_plate);
            display_mod( 5 , center_x(sizeof(AUTO_PING)   - 1, OLED_FONT_MEDIUM_WIDTH)  , AUTO_PING[0]     , enemy_ping); 
		    display_mod( 6 ,  center_x(sizeof(AUTORUN) - 1, OLED_FONT_MEDIUM_WIDTH) , AUTORUN[0] , autorun_on);
			display_mod( 7 ,  center_x(sizeof(SWAP) - 1, OLED_FONT_MEDIUM_WIDTH)    , SWAP[0]    , swap_on);
			
		
	} 	
	// Display Profile only on mods that may have a different value depending on the Profile

		if(modName_idx < AMOUNT_OF_MULTI_TOGGLE)  // idx from 0 to 4 are mods that can have different values depending the active Profile
		{
			if(profile_idx == 0)
			   // display_mod( 0 ,  center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0] , toggle_antirecoil[profile_idx]); // profile_idx = profile_idx = Profile
    			printf(center_x(sizeof(PROFILE_1) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); // print Profile 1
    			//line_oled(0, 26, 39, 26, 5, 1); // print a line to the left to say profile 1
    			
    		else if(profile_idx == 1)
    				printf(center_x(sizeof(PROFILE_2) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]); // print Profile 2
    				
    			//line_oled(44, 26, 83, 26, 5, 1); // print a line in the middle to say Profile 2
    		else if(profile_idx == 2)
    				printf(center_x(sizeof(PROFILE_3) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_3[0]); // print Profile 3
         
    	
    	//line_oled(88, 26, 127, 26, 5, 1); // print a line to the right to say Profile 3
		}
		else // Mods that work on every profiles print the 3 lines (disable this if you prefer display the text Profile X
    	{
    		printf(center_x(sizeof(ALLPROFILES) - 1,OLED_FONT_SMALL_WIDTH) ,23,OLED_FONT_SMALL,OLED_WHITE,ALLPROFILES[0]); // print Profile 3
    		//line_oled(0, 26, 39, 26, 5, 1);
    		//line_oled(44, 26, 83, 26, 5, 1);
    		//line_oled(88, 26, 127, 26, 5, 1);
    	}
    	
		display_black = TRUE;
        display_new = FALSE;
    } // display_new end
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
} // NOT KillSwitch end

	led(profile_idx);

} // main end
 
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     COMBO SECTION                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	


combo RAPIDFIRE { 
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time);
    }
combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(PS4_RY) + (antirecoil_vertical[profile_idx]);  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) + 5)
    set_val(PS4_RY, (AntirecoilVertical * invert1));
// Horizontal
    AntirecoilHorizontal = get_val(PS4_RX) +  (antirecoil_horizontal[profile_idx]);
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx]) + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}
combo CANCEL_SLIDE {              
    set_val(user_defined_crouch_button, 100);          
    wait(120);                         
    set_val(user_defined_crouch_button, 0);            
    wait(60);                          
    set_val(user_defined_crouch_button, 100);          
    wait(50);                          
    set_val(user_defined_crouch_button, 100);          
    set_val(user_defined_jump_button, 100);           
    wait(60);                          
    set_val(user_defined_crouch_button, 0);            
    set_val(user_defined_jump_button, 100);          
    wait(10);                        
    set_val(user_defined_jump_button, 0);         
}                             

combo auto_ping
	{set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	}
combo easy_plate
	{set_val(PS4_TRIANGLE,100);
	wait(6000)}//time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating
  
   
combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				   // display mods
}
combo BLINK {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
function Set_Polar(Angle)
{   
    if(Angle <= 90)
    {        
        Cosinus = (Lookup_Table[90 - Angle]);
        Sinus = (Lookup_Table[Angle]);
    }
    else if (Angle <= 180)
    {
        Cosinus = (-Lookup_Table[Angle - 90]);
        Sinus = (Lookup_Table[180 - Angle]);
    }
    else if (Angle <= 270)
    {
        Cosinus = (-Lookup_Table[270 - Angle]);
        Sinus = (-Lookup_Table[Angle - 180]);
    }
    else if (Angle <= 360)
    {
        Cosinus = (Lookup_Table[Angle - 270]);
        Sinus   = (-Lookup_Table[360 - Angle]);
    }
 
	RX_Polar = (get_lval(PS4_RX)) - X_JOY_OFFSET + ( (Cosinus * Raduis) )/100;
	    
	if( RX_Polar > 100)
	{
	   RX_Polar = 100;
	}    
	else if( RX_Polar < -100)
	{
	   RX_Polar = -100;
	}
 
	if(USE_CIRCULAR_SHAPE == 1)
	{
		RY_Polar = (get_lval(PS4_RY)) - Y_JOY_OFFSET + ( (Sinus   * Raduis) )/100;
	 	
	    if( RY_Polar > 100)
	    {
	        RY_Polar = 100;
	    }    
	    else if( RY_Polar < -100)
	    {
	        RY_Polar = -100;
	   
	   	}
	} 
	
    if(USE_CIRCULAR_SHAPE == 1)
    {
    	set_val(PS4_RX, RX_Polar);
    	set_val(PS4_RY, RY_Polar);
    }
    else
    {
    	set_val(PS4_RX, RX_Polar);
    }
}
     

function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       FUNCTIONS                                                       |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods

	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;	
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function edit_val(f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )
					
	if(valName_idx == f_idx)
	{
    // +1 or -1															 
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2
	
	}

	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function speed_toggle(f_hold, f_press, f_val, f_string) {  // toggle_aimassist[profile_idx] = speed_toggle(PS4_R3, PS4_UP, toggle_aimassist[profile_idx], #cons_string for this toggle);
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 30))  // Hold second button 300ms or more
		{
			modName_idx = f_string;
			
			if(f_val == 0)
			{
				if(f_string == 2) // If RapidFire is enable, 
				
		
				f_val = 1;
				combo_run(RUMBLE_ON);
			}
			else
			{
				f_val = 0;
				combo_run(RUMBLE_OFF);
			}
			display_new = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function toggle(f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, PS4_UP, toggle_antirecoil[profile_idx]);
	
	if(event_press(PS4_UP))
	{
		if(modName_idx == f_idx)
		{
			
				
		
				
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE;
	}
			
	if(event_press(PS4_DOWN))
	{
		if(modName_idx == f_idx)
		{
			f_val = 0;
			combo_run(RUMBLE_OFF);
		}		
		display_new = TRUE;
	}
	return f_val;
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_edit(f_idx, f_string, f_print, f_val) { // display_edit(0, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0], antirecoil_start[profile_idx]);

    	if(valName_idx == f_idx)
    	{
		// Display value name and value
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
    		
    	// Display AntiRecoil Time value x 100 so 1,000 (displayed) = 1 second - script value is 10
    	
    			
    	
    	// Display editable values 
    		
    			number_to_string(f_val, find_digits(f_val));
    	}
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function display_mod(f_idx, f_string, f_print, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(modName_idx == f_idx)
    	{
		// Display MOD_NAME
    		printf(f_string, 0, OLED_FONT_MEDIUM, OLED_WHITE, f_print);
        		// Display ON OFF
    			if(f_toggle == 1)
    				printf(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    			else if(f_toggle == 0)
    				printf(center_x(sizeof(OFF) - 13,OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);		
        	
       
    	
    	else
    	printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]);
    	}
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
      
    // Substract    
        if(f_val < inv(f_rng_min)) 
        	f_val = inv(f_rng_min); 
   	// Add   
       	if(f_val > f_rng_max) 
        	f_val = f_rng_max;

        display_new = TRUE;
    }
    return f_val; 
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function number_to_string(f_val,f_digits) {
/***********************************************************
 *  number_to_string(value to convert, # of digits in value)
 *
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
 *   
 *      Convert digits to ASCII
 *      Add ASCII character to print buffer
 *      Print string centered X & Y on OLED
 *  
***********************************************************/
    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); // adjustable value centered in X
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_x(f_chars,f_font) {
//  center_x(number of chars,font size);  
//	    return X for Centering String Horizontally

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 


// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function save () {
	combo_run(SAVE);

// Profile 1
	// Toggles                                       // Values
	set_pvar(SPVAR_1,toggle_legacyar[0]);           set_pvar(SPVAR_3,antirecoil_vertical[0]); 
	set_pvar(SPVAR_2,toggle_rapidfire[0]);          set_pvar(SPVAR_4,antirecoil_horizontal[0]);
                                                    set_pvar(SPVAR_5,rate_of_fire[0]);
                                                    
	                                               
// Profile 2
	// Toggles                                       // Values
	set_pvar(SPVAR_6,toggle_legacyar[1]);          set_pvar(SPVAR_8,antirecoil_vertical[1]); 
	set_pvar(SPVAR_7,toggle_rapidfire[1]);         set_pvar(SPVAR_9,antirecoil_horizontal[1]);
                                                   set_pvar(SPVAR_10,rate_of_fire[1]);
                                                    
// Profile 3
	// Toggles                                       // Value
	set_pvar(SPVAR_11,toggle_legacyar[2]);          set_pvar(SPVAR_13,antirecoil_vertical[2]); 
	set_pvar(SPVAR_12,toggle_rapidfire[2]);         set_pvar(SPVAR_14,antirecoil_horizontal[2]);
                                                    set_pvar(SPVAR_15,rate_of_fire[2]);
                                                    

    set_pvar(SPVAR_16,toggle_sweet_evil);             
	set_pvar(SPVAR_17,autorun_on);                        
    set_pvar(SPVAR_18,enemy_ping);                 
    set_pvar(SPVAR_19,easy_plate);                 
    set_pvar(SPVAR_20,cancel_slide);               
    set_pvar(SPVAR_21,swap_on); 
    set_pvar(SPVAR_22,Raduis);
    set_pvar(SPVAR_23,Angle_Increment); 
    set_pvar(SPVAR_24,VM_UPDATE ); 
    set_pvar(SPVAR_25,MAX_MAGNITUDE ); 
	
	
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
/*
function block_btn() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(PS4_CROSS  , 0 ); 	set_val(PS4_CIRCLE, 0 ); 	set_val(PS4_SQUARE, 0 ); 	set_val(PS4_TRIANGLE, 0);
set_val(PS4_L1     , 0 ); 	set_val(PS4_R1    , 0 ); 	set_val(PS4_L3    , 0 ); 	set_val(PS4_R3      , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);
//set_val(PS4_LX, 0); 		set_val(PS4_LY, 0); 		set_val(PS4_RX, 0); 		set_val(PS4_RY, 0);
//set_val(PS4_L2, 0); 		set_val(PS4_R2, 0);
}   */