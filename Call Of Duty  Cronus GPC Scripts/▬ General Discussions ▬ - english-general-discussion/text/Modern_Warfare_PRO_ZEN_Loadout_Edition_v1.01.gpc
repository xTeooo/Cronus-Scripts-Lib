/*

  __  __               _                          __          __                  __                       
 |  \/  |             | |                         \ \        / /                 / _|                      
 | \  / |   ___     __| |   ___   _ __   _ __      \ \  /\  / /    __ _   _ __  | |_    __ _   _ __    ___ 
 | |\/| |  / _ \   / _` |  / _ \ | '__| | '_ \      \ \/  \/ /    / _` | | '__| |  _|  / _` | | '__|  / _ \
 | |  | | | (_) | | (_| | |  __/ | |    | | | |      \  /\  /    | (_| | | |    | |   | (_| | | |    |  __/
 |_|  |_|  \___/   \__,_|  \___| |_|    |_| |_|       \/  \/      \__,_| |_|    |_|    \__,_| |_|     \___|
                                                                                                           
                                                                                                           

  _                            _                   _         ______       _   _   _     _                 
 | |                          | |                 | |       |  ____|     | | (_) | |   (_)                
 | |        ___     __ _    __| |   ___    _   _  | |_      | |__      __| |  _  | |_   _    ___    _ __  
 | |       / _ \   / _` |  / _` |  / _ \  | | | | | __|     |  __|    / _` | | | | __| | |  / _ \  | '_ \ 
 | |____  | (_) | | (_| | | (_| | | (_) | | |_| | | |_      | |____  | (_| | | | | |_  | | | (_) | | | | |
 |______|  \___/   \__,_|  \__,_|  \___/   \__,_|  \__|     |______|  \__,_| |_|  \__| |_|  \___/  |_| |_|
                                                                                                          
                                                                                                          


.___________.     ___      ____    ____  __        ______   .______       _______  .______       __   _______ .___________. ___    __  
|           |    /   \     \   \  /   / |  |      /  __  \  |   _  \     |       \ |   _  \     |  | |   ____||           ||__ \  /_ | 
`---|  |----`   /  ^  \     \   \/   /  |  |     |  |  |  | |  |_)  |    |  .--.  ||  |_)  |    |  | |  |__   `---|  |----`   ) |  | | 
    |  |       /  /_\  \     \_    _/   |  |     |  |  |  | |      /     |  |  |  ||      /     |  | |   __|      |  |       / /   | | 
    |  |      /  _____  \      |  |     |  `----.|  `--'  | |  |\  \----.|  '--'  ||  |\  \----.|  | |  |         |  |      / /_   | | 
    |__|     /__/     \__\     |__|     |_______| \______/  | _| `._____||_______/ | _| `._____||__| |__|         |__|     |____|  |_| 
                                     
                                                  SCRIPT AUTHOR 
❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤

Credits: 
I would like to thank everyone here who helped me get this script working as I wanted, all you guys have been amazing in helping me learn more and
support you give me, I really appreciate, you all inspire me to do more and learn more.. Once again Thank You ❤❤❤

Noozbar   < My Hero :D 
Batts     < The Reducer 
DoGz      < Absolute Legend
Swizzy    < Ruthless but honest and a really nice guy :) 
DoNotAtMe < Jarvis(Iron Man's talking computer,but the quieter one)< Mastermind to my loadouts/Loops

These are the guys that have helped me... They are all awesome :) 

Credits to those who's code I may have used/changed or got ideas from...
DjangoKill, Sweet Evil , Excalibur , Itzsnackz << Thank you for being in this community, your work is very inspirational!!  

====================================================================================================================================================

 
 __  .__   __. .______     ______   .______      .___________.     ___      .__   __. .___________.
|  | |  \ |  | |   _  \   /  __  \  |   _  \     |           |    /   \     |  \ |  | |           |
|  | |   \|  | |  |_)  | |  |  |  | |  |_)  |    `---|  |----`   /  ^  \    |   \|  | `---|  |----`
|  | |  . `  | |   ___/  |  |  |  | |      /         |  |       /  /_\  \   |  . `  |     |  |     
|  | |  |\   | |  |      |  `--'  | |  |\  \----.    |  |      /  _____  \  |  |\   |     |  |     
|__| |__| \__| | _|       \______/  | _| `._____|    |__|     /__/     \__\ |__| \__|     |__|     
                                                                                                   
 _____                       _     _     _                _                 _                           _     _                       
|  __ \                     | |   | |   | |              (_)               | |                         | |   (_)                      
| |__) |   ___    __ _    __| |   | |_  | |__     ___     _   _ __    ___  | |_   _ __   _   _    ___  | |_   _    ___    _ __    ___ 
|  _  /   / _ \  / _` |  / _` |   | __| | '_ \   / _ \   | | | '_ \  / __| | __| | '__| | | | |  / __| | __| | |  / _ \  | '_ \  / __|
| | \ \  |  __/ | (_| | | (_| |   | |_  | | | | |  __/   | | | | | | \__ \ | |_  | |    | |_| | | (__  | |_  | | | (_) | | | | | \__ \
|_|  \_\  \___|  \__,_|  \__,_|    \__| |_| |_|  \___|   |_| |_| |_| |___/  \__| |_|     \__,_|  \___|  \__| |_|  \___/  |_| |_| |___/
                                                                                                                                       

◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸◹◺◿◸											
	
	OLED screen indications:            TITLE SCREEN 
                               ———————————————————————————————
		                      |         G   A   M   E          |
		                      |       T   I   T   L   E        |  
		                      |      Current Weapon Name       |
		                      |Current Loadout|Current Profile |
                               ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
	OLED screen indications in Mod Menu: Enter/Exit Mod Menu: Hold L2 & Press Options Button
	
	To Enter Edit Menu: Press CROSS/A on Mods with adjustable values
                              ———————————————————————————————
		- First line:         |       Active Mod Name       |
		- Second line:        |       Current profile       | ▻▻▻  This shows you which profile you are on in mod menu 
		- Third line          |       ON / OFF status       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
	OLED screen indications in Edit Menu: Press CIRCLE/B to return to Mod Menu
                              ———————————————————————————————
		- First line:         |      Active Value Name      |
		- Second line:        |       Current Weapon        | ▻▻▻  This shows which weapon you are on.
		- Third line          |       Editable  Value       |
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

	OLED screen indications in Weapon Mod Screen: 
	
    Enter Weapon Mod Screen: Hold L2 & Press XBOX/PS Button... Exit Weapon Mod Screen: Press CIRCLE/B 
                              ———————————————————————————————
		- First line:         |       Current profile       | > > > indicates which profile you are on
		- Second line:        |       Custom Loadout        | > > > indicates which custom loadout you are on
		- Second line:        |   Current Weapon Categoty   | > > > indicates which weapon category you are on 
		- Third line          |     Current Weapon Name     | > > > indicate which weapon you are on
                              ———————————————————————————————
                       ⬆    PRESS DPAD UP OR DOWN  to Navigate   ⬇  
                       
                     ⬅⬅⬅ PRESS DPAD LEFT OR RIGHT to Navigate ➨➨➨
               L2/LB  \\ PRESS L2/LB OR R2/RB to Change Loadout // R2/RB      
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜		

	OLED screen indications in KillSwitch: 
                              ———————————————————————————————
                              |         SCRIPT OFF          | ▻▻▻  indicate that the script is muted
                              |                             | 
                              |   Hold CIRCLE/B to turn ON  | 
                              ———————————————————————————————
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModWeapon:
	
Open ModWeapon (L2/LT + PS/XBOX to open or exit)
		Choose which profile you want to modify (Primary, Secondary or Warzone Profile) by pressing TRIANGLE/Y
		Choose your Loadout you wish to assign your weapon category or Weapon Name.. Press L2/LB or R2/RB to change loadout
		To switch between Weapon Category and Weapon Name, press UP or DOWN
		When the second line (Weapon Category) is in large text, you can only navigate between the different categories with LEFT or RIGHT.
		When the third line (Weapon Name) is in large text, you can only navigate between the different weapons of the active category with LEFT or RIGHT.
		Tap CIRCLE/B to close ModWeapon
		Tap SQUARE/X to go to Mod Menu	
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModMenu:

	Open ModMenu (L2/LT + OPTIONS/MENU to open or exit)
		Choose which profile you want to modify (Primary, Secondary or SideArm) by pressing TRIANGLE/Y
		Navigate between the different MODS with LEFT or RIGHT
			- tap UP to turn ON
			- tap DOWN to turn OFF 
		
		Activate the mods you want on each profile...
		
	If the mod displayed has one or more editable values, pressing CROSS/A will open the ModEdit
			
〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	

How to use the ModEdit:

		Navigate between the different value with LEFT or RIGHT
		Change/edit the value by holding down L2/LT then tap UP or RIGHT to increase value and tap DOWN or LEFT to decrease value
	    Hold CROSS/A 500ms to reset Antirecoil temporary values and Rate of Fire temporary values of the active profile
		To exit ModEdit and go back to ModMenu, tap CIRCLE to go back to Mod Menu
	
Switch profiles:
		- You can now Choose your profile Buttons for In Game.. Primary - Secondary - Warzone 
		- Single Button - Choose the button of your choice by pressing UP or DOWN - This Button will allow you change profiles while IN GAME...
		- 2 Button Press - Choose the buttons of your choice by HOLDING L2/LT and PRESS LEFT or RIGHT - These buttons will allow you to change profiles while IN GAME...
		- INPORTANT - You can USE both Single Button & 2 Button Press for switching profiles...
		- Warzone Profile Button - Choose your Buttons to switch to Warzone Profile by HOLDING L2/LT and PRESS LEFT or RIGHT...
		**** INPORTANT ***
		DO NOT CHOOSE THE SAME BUTTONS FOR PRIMARY AND SECONDARY PROFILES FOR WARZONE PROFILE <<< WILL NOT WORK

		- In Mod Menu/Edit/Weapon
			- Tap TRIANGLE/Y to loop profile 1, 2, 3, 1, 2, 3 ...

〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜	
		
	Kill Switch (disable everything)
		- Turn ON to OFF or OFF to ON
			- Hold aiming button and tap SHARE/VIEW 
			- Tap PS/XBOX 
		- Turn ON (disable everything)
			- Tap OPTIONS/MENU
			- Tap Map button
		- Turn OFF (enable everything)
			- Double tap CIRCLE/B
			- Hold CIRCLE/B more than 600ms
____________________________________________________________________________________________________________________________________________________
*/	
/*== Not many people know this, this Polar LUT Array is to be placed at the top of the script in order for the Steady Aim To Work Correctly ==*/
 const int8 polar_LUT[] = {  
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
}; 
/*=== Init Section, this is where the script loads default values/settings in order for everything to work ===*/						
init {
 do {
 loadout_0[i] = get_pvar(SPVAR_1 + i, -32768, 32767, -1);
 weapon_category[i%3]    = (0xff00 & loadout_0[i%3 + SLOT_[i>2]]) >> 8;
 weapon_name[i%3]    = ((0xff & loadout_0[i%3 + SLOT_[i>2]]));
 } while(i = (i + 1) % 15);
 
 weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
 weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
                 
 weapon_category_idx = weapon_category[profile_idx];
 weapon_name_idx = weapon_name[profile_idx];
 
 SLOT_[0] = 0;
 SLOT_[1] = 3;
 SLOT_[2] = 6;
 SLOT_[3] = 9;
 SLOT_[4] = 12;
 ScreenActive(TITLE_SCREEN);// Display Title Screen When the Script Loads 
 STEADY_AIM = (360 / STEADY_AIM) / 2;// This is needed here to load for STEADY AIM which is apart of the Aim Assist
 PROFILE_INDEX[0] = A_RIFLE[weapon_name_idx][4]; 
 PROFILE_INDEX[1] = SMG[weapon_name_idx][4];
 PROFILE_INDEX[2] = LMG[weapon_name_idx][4];
 PROFILE_INDEX[3] = SHOTGUN[weapon_name_idx][4];
 PROFILE_INDEX[4] = SNIPER[weapon_name_idx][4];
 PROFILE_INDEX[5] = HANDGUN[weapon_name_idx][4];
 
pval_data = get_pvar(SPVAR_16, 1, 32767, 0);
toggle_rapidfire[0]       = unpack_usigned(pval_data, 0,  1);
toggle_rapidfire[1]       = unpack_usigned(pval_data, 1,  1);
toggle_rapidfire[2]       = unpack_usigned(pval_data, 2,  1);
toggle_taylorassist       = unpack_usigned(pval_data, 3,  1);
toggle_batts_sticky       = unpack_usigned(pval_data, 4,  1);
toggle_quickscope         = unpack_usigned(pval_data, 5,  1);
toggle_holdbreath         = unpack_usigned(pval_data, 6,  1);
toggle_cancel_slide       = unpack_usigned(pval_data, 7,  1);
toggle_jump_shot          = unpack_usigned(pval_data, 8,  1);

pval_data = get_pvar(SPVAR_17, 1, 32767, 0);                        
toggle_antirecoil[0]   = unpack_int16_to_int8(pval_data, 0);        
toggle_antirecoil[1]   = unpack_int16_to_int8(pval_data, 1);       
pval_data = get_pvar(SPVAR_18, 1, 32767, 0); 
toggle_antirecoil[2]    = unpack_int16_to_int8(pval_data, 0);
btn_layout              = unpack_int16_to_int8(pval_data, 1); 

pval_data = get_pvar(SPVAR_19, 1, 32767, 0);                                              
antirecoil_start[0]         = unpack_int16_to_int8(pval_data, 0);    
antirecoil_start[1]         = unpack_int16_to_int8(pval_data, 1);    
pval_data = get_pvar(SPVAR_20, 1, 32767, 0);
antirecoil_start[2]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_start[3]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_21, 1, 32767, 0); 
antirecoil_start[4]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_start[5]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_22, 1, 32767, 0);                                              
antirecoil_start[6]         = unpack_int16_to_int8(pval_data, 0);    
antirecoil_start[7]         = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_23, 1, 32767, 0);
antirecoil_start[8]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_start[9]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_24, 1, 32767, 0);
antirecoil_start[10]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_start[11]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_25, 1, 32767, 0);                                         
antirecoil_start[12]         = unpack_int16_to_int8(pval_data, 0);   
antirecoil_start[13]         = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_26, 1, 32767, 0);    
antirecoil_start[14]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_end[14]           = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_27, 1, 32767, 0);                                             
antirecoil_end[0]           = unpack_int16_to_int8(pval_data, 0);    
antirecoil_end[1]           = unpack_int16_to_int8(pval_data, 1);    
pval_data = get_pvar(SPVAR_28, 1, 32767, 0);
antirecoil_end[2]           = unpack_int16_to_int8(pval_data, 0);
antirecoil_end[3]           = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_29, 1, 32767, 0); 
antirecoil_end[4]           = unpack_int16_to_int8(pval_data, 0);
antirecoil_end[5]           = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_30, 1, 32767, 0);                        
antirecoil_end[6]           = unpack_int16_to_int8(pval_data, 0);  
antirecoil_end[7]           = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_31, 1, 32767, 0);
antirecoil_end[8]           = unpack_int16_to_int8(pval_data, 0);
antirecoil_end[9]           = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_32, 1, 32767, 0);                                            
antirecoil_end[10]          = unpack_int16_to_int8(pval_data, 0);    
antirecoil_end[11]          = unpack_int16_to_int8(pval_data, 1);  
pval_data = get_pvar(SPVAR_33, 1, 32767, 0);  
antirecoil_end[12]          = unpack_int16_to_int8(pval_data, 0);
antirecoil_end[13]          = unpack_int16_to_int8(pval_data, 1); 
pval_data = get_pvar(SPVAR_34, 1, 32767, 0);                                            
antirecoil_time[0]          = unpack_int16_to_int8(pval_data, 0);    
antirecoil_time[1]          = unpack_int16_to_int8(pval_data, 1);    
pval_data = get_pvar(SPVAR_35, 1, 32767, 0); 
antirecoil_time[2]          = unpack_int16_to_int8(pval_data, 0);
antirecoil_time[3]          = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_36, 1, 32767, 0); 
antirecoil_time[4]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_time[5]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_37, 1, 32767, 0);                                           
antirecoil_time[6]          = unpack_int16_to_int8(pval_data, 0);   
antirecoil_time[7]          = unpack_int16_to_int8(pval_data, 1);    
pval_data = get_pvar(SPVAR_38, 1, 32767, 0); 
antirecoil_time[8]          = unpack_int16_to_int8(pval_data, 0);
antirecoil_time[9]          = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_39, 1, 32767, 0);
antirecoil_time[10]         = unpack_int16_to_int8(pval_data, 0);
antirecoil_time[11]         = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_40, 1, 32767, 0);                                             
antirecoil_time[12]         = unpack_int16_to_int8(pval_data, 0);   
antirecoil_time[13]         = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_41, 1, 32767, 0); 
antirecoil_time[14]         = unpack_int16_to_int8(pval_data, 0); 
rate_of_fire[2]             = unpack_int16_to_int8(pval_data, 0);
pval_data = get_pvar(SPVAR_42, -32767, 32767, 0);                                  
antirecoil_horizontal[0]    = unpack_int16_to_int8(pval_data, 0);   
antirecoil_horizontal[1]    = unpack_int16_to_int8(pval_data, 1);  
pval_data = get_pvar(SPVAR_43, -32767, 32767, 0); 
antirecoil_horizontal[2]    = unpack_int16_to_int8(pval_data, 0);
antirecoil_horizontal[3]    = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_44, -32767, 32767, 0); 
antirecoil_horizontal[4]    = unpack_int16_to_int8(pval_data, 0);
antirecoil_horizontal[5]    = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_45, -32767, 32767, 0);                   
antirecoil_horizontal[6]    = unpack_int16_to_int8(pval_data, 0);  
antirecoil_horizontal[7]    = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_46, -32767, 32767, 0);
antirecoil_horizontal[8]    = unpack_int16_to_int8(pval_data, 0);
antirecoil_horizontal[9]    = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_47, -32767, 32767, 0);                                   
antirecoil_horizontal[10]   = unpack_int16_to_int8(pval_data, 0);   
antirecoil_horizontal[11]   = unpack_int16_to_int8(pval_data, 1);   
pval_data = get_pvar(SPVAR_48, -32767, 32767, 0); 
antirecoil_horizontal[12]   = unpack_int16_to_int8(pval_data, 0); 
antirecoil_horizontal[13]   = unpack_int16_to_int8(pval_data, 1);
antirecoil_horizontal[14]   = get_pvar(SPVAR_49,-99,-99,0);
pval_data = get_pvar(SPVAR_50, 1, 32767, 0);                                 
rate_of_fire[0]    = unpack_int16_to_int8(pval_data, 0);                  
rate_of_fire[1]    = unpack_int16_to_int8(pval_data, 1);              
pval_data = get_pvar(SPVAR_51, 1, 32767,pack_int8_to_int16(20,20));
RADIUS                       = unpack_int16_to_int8(pval_data, 0);  
STEPS                        = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_52, 1, 32767,pack_int8_to_int16(0,25));
enemy_ping                   = unpack_int16_to_int8(pval_data, 0);  
STEADY_AIM                   = unpack_int16_to_int8(pval_data, 1);
pval_data = get_pvar(SPVAR_53, 1, 32767,pack_int8_to_int16(20,20));        
stickyaim_size   = unpack_int16_to_int8(pval_data, 0);                                  
stickyaim_time   = unpack_int16_to_int8(pval_data, 1);                    
quickscopedelay  = get_pvar(SPVAR_54, 50, 600,350);

} 

main {
        set_val(TRACE_1,activeScreen == TITLE_SCREEN); 
        set_val(TRACE_2,activeScreen == MOD_MENU); 
        set_val(TRACE_3,activeScreen == EDIT_MENU); 
        set_val(TRACE_4,activeScreen == WEAPON_MOD); 

        Buttons(Buttons);
        
        Switch_Buttons(); 
        
        CheckInput();  
  
		if(activeScreen == TITLE_SCREEN) {
		    TitleScreen();
		}
		if(activeScreen == WEAPON_MOD){
		    WeaponMod();
		} 
		if(activeScreen == MOD_MENU) {
		   ModMenu();
		}
		if(activeScreen == EDIT_MENU) {
		   EditMenu(); 		 	
        }
}   
/*============================================================================================================
///////////////////////////////////////// WEAPON MENU \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
============================================================================================================*/
function CheckInput() {

        if(get_ival(Ads))
        {
            if(event_press(PS4_PS))
            { 
                 ScreenActive(WEAPON_MOD);
                 
                 highLight = 0;
                 
                 weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                 weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
                 
                 weapon_category_idx = weapon_category[profile_idx];
                 weapon_name_idx = weapon_name[profile_idx];
             
            }
        }
        if(activeScreen == WEAPON_MOD)     // Display Weapon Menu 
        {
            /*============ Limit Weapon Names ===========*/
                 weapon_name_limits(0, amount_A_RIFLE);
	             weapon_name_limits(1, amount_SMG    );
	             weapon_name_limits(2, amount_LMG    );
	             weapon_name_limits(3, amount_RIFLE  );
		         weapon_name_limits(4, amount_SHOTGUN);
		         weapon_name_limits(5, amount_SNIPER );
	             weapon_name_limits(6, amount_HANDGUN);
	        
	       /*======== Change Loadouts ========*/
           if(event_press(PS4_R1)) 
           {
                 slot_idx +=1;
                 if(slot_idx > 4) slot_idx = 0;
                 profile_idx = 0;
                 
           /*======== Load the Weapon Category & Weapon Name Per Loadout ========================*/     
                 weapon_category_idx = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                 weapon_name_idx =     ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
           }
           /*======== Change Loadouts ========*/
	       if (event_press(PS4_L1)) 
	       { 
	             slot_idx -=1; 
	             if(slot_idx < 0) slot_idx = 4; 
	             profile_idx = 0;
	       /*======== Load the Weapon Category & Weapon Name Per Loadout ========================*/          
                 weapon_category_idx = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                 weapon_name_idx = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
	       }
	       /*======= Change the selection/highLight,Weapon Category - Weapon Name ===============*/
           if(event_press(XB1_UP)) 
           {
 	             highLight -= 1;
                 if(highLight < 0) 
 	             highLight = 1;        
           }       
           if(event_press(XB1_DOWN)) 
           {
              highLight += 1;
              if(highLight > 1) 
 	          highLight = 0;  
           }
           /*======= Change Weapon Category OR Weapon Name ================*/
           if(event_press(PS4_RIGHT))
	       {
	          if(!(highLight & 1)) 
	          {
                    weapon_category_idx += 1;
                    if(weapon_category_idx > 6) weapon_category_idx = 0;
                    weapon_name_idx = 0;                
              }
                    weapon_name_idx += highLight & 1;
           }     
	       if(event_press(PS4_LEFT))
	       { 
	         if(!(highLight & 1)) 
	         {

                    weapon_category_idx -= 1;
                    if(weapon_category_idx < 0) weapon_category_idx = 6; 
	                weapon_name_idx = 0; 
             }
                    weapon_name_idx -= highLight & 1;
           } 
           /*============================== Exit Weapon Menu to Mod Menu ==============================================
           ////////////////////////// Save Weapon Category & Weapon Name On Exit \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
           ==========================================================================================================*/
	       if(event_press(PS4_SQUARE)) 
           { 
                    ScreenActive(MOD_MENU);
	                updateScreen = TRUE; 
	                modName_idx = 0; 
                    loadout_0[profile_idx + SLOT_[slot_idx]] = (weapon_category_idx << 8) | (0x00ff & weapon_name_idx);
                    save_loadout[profile_idx + SLOT_[slot_idx]] = loadout_0[profile_idx + SLOT_[slot_idx]];
           }
           /*============================= Exit Weapon Menu to Title Screen ==========================================
           //////////////////////// Save Weapon Category & Weapon Name On Exit \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
           =========================================================================================================*/
           if(event_press(PS4_CIRCLE)) 
           {
	           if(SCREEN_DATA[activeScreen][PARENT]) 
	           {
	              ScreenActive(TITLE_SCREEN);
	              display_title = TRUE;
	             // weapon_category_idx = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                 // weapon_name_idx =     ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
                  loadout_0[profile_idx + SLOT_[slot_idx]] = (weapon_category_idx << 8) | (0x00ff & weapon_name_idx);
                  save_loadout[profile_idx + SLOT_[slot_idx]] = loadout_0[profile_idx + SLOT_[slot_idx]]   
	              Save();
	           }
	          
           }
           block_function(); 
	} 
    /*========================================================================================================
    ////////////////////////////////////// Enter Mod Menu \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    ==========================================================================================================
    \\\\\\\\\\\\\\\\\\\\\\\\\ LOAD Loadout Weapon Category & Weapon Name /////////////////////////////////////
    ========================================================================================================*/
    if(get_val(Ads))
    {
         if(get_ival(PS4_OPTIONS))
         { 
	   
	        ScreenActive(MOD_MENU);
	        updateScreen = TRUE; 
	     	modName_idx = 0;
            
	     	weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
            weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
                 
            weapon_category_idx = weapon_category[profile_idx];
            weapon_name_idx = weapon_name[profile_idx];
        } 
    } 
    if(activeScreen == MOD_MENU)
    {   
        if(modName_idx <= amount_of_editable_mods) 
        {
            if(event_press(PS4_CROSS))
            { 
               valName_idx = amount_of_values + 1;
               ScreenActive(EDIT_MENU);
            }
        
        } 
        
	    if(!get_ival(PS4_L2))
		{ 
	        if(event_press(PS4_RIGHT))
	        { 
	            modName_idx ++;
	            if(modName_idx > modName_idx_max)
	            modName_idx = 0;
	            updateScreen = TRUE; 
	        } 
	        
	        if(event_press(PS4_LEFT))
	        { 
	            modName_idx --; 
	            if(modName_idx < 0) 
			    modName_idx = modName_idx_max;
				updateScreen = TRUE; 
	        }
                block_function();
	        }
            if(event_press(PS4_CIRCLE)) 
            {
	            if(SCREEN_DATA[activeScreen][PARENT]) 
	            {
	                ScreenActive(TITLE_SCREEN);
	                display_title = TRUE;
                    Save();
	          
	            }
	             
	        }
	       
		}
	    /*=========================================================================================================
	    //////////////////////////////////////// Edit Menu \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	    =========================================================================================================*/
	    if(activeScreen == EDIT_MENU)
        {
           block_function();
          
           if(!get_ival(PS4_L2))
	       { 
	           if(event_press(PS4_RIGHT))
	           { 
	                         valName_idx += 1; 
	          
	           /*=============== We need to skip some valName_idx due to a change in a toggle ================*/
			        if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2)  
			        {								
							if(valName_idx == 2)
								valName_idx = 3;
							if(valName_idx > 3)
								valName_idx = 1; 
				    } 
	           }             
	           if(event_press(PS4_LEFT))
	           { 
	                        valName_idx -= 1; 
	                        
	          /*=============== We need to skip some valName_idx due to a change in a toggle ================*/
	          
	               if(modName_idx == 0 && toggle_antirecoil[profile_idx] == 2)
			       {								
							if(valName_idx == 2)
								valName_idx = 3;
							if(valName_idx > 3)
								valName_idx = 1;
	               }
	          }
	          /*=============== We need to limit valName_idx and some changes for a toggle ================*/
	          
	          if(modName_idx == 0) 
			  {
				   if(toggle_antirecoil[profile_idx] == 2)
						    mod_limits( 1 , 3  );// AntiRecoil Standard
					    else
					     	mod_limits( 0 , 3  );// AntiRecoil Progressive
			  } 
                            if(modName_idx == 1) mod_limits (4,4);
                            if(modName_idx == 2) mod_limits (5,7);
                            if(modName_idx == 3) mod_limits (8,9);
                            if(modName_idx == 4) mod_limits (10,10);
              }
              if(get_ival(PS4_CROSS) && get_ptime(PS4_CROSS) == 500)
		      {
				  antirecoil_start[loadout_profile_flag] = 0;
				  antirecoil_end[loadout_profile_flag] = 0;
				  antirecoil_time[loadout_profile_flag] = 0;
				  antirecoil_horizontal[loadout_profile_flag] = 0;
				  rate_of_fire[profile_idx] = 0;
				  combo_run(RUMBLE_ON);
		      }
              /*=============== Exit Back to Mod Menu ================*/
	          if(event_press(PS4_CIRCLE))
	          {
	               if(SCREEN_DATA[activeScreen][PARENT])
	               {
	                   ScreenActive(lastScreen);
	                 
	               }
	          }
        }
        /*===============================================================================================================================================
        //////////////// Load & Save Weapon Categories & Weapon Names Per Loadout <<< Pretty clever isn't it << DoNotAtMe Created this \\\\\\\\\\\\\\\\\\
        =================================================================================================================================================
        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ SWITCH PROFILES /////////////////////////////////////////////////////////////////////////
        ===============================================================================================================================================*/
        if(activeScreen == MOD_MENU || activeScreen == WEAPON_MOD || activeScreen == EDIT_MENU)
        {  
            if(event_press(XB1_Y)) 
            {
                    loadout_0[profile_idx + SLOT_[slot_idx]] = (weapon_category_idx << 8) | (0x00ff & weapon_name_idx);
                    save_loadout[profile_idx + SLOT_[slot_idx]] = loadout_0[profile_idx + SLOT_[slot_idx]];
            }
            if(event_release(XB1_Y)) 
            {
                    profile_idx += 1;
                    if(profile_idx > amount_of_profiles - 1) 
                    profile_idx = 0;
                    weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                    weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
                    weapon_category_idx = weapon_category[profile_idx];
                    weapon_name_idx = weapon_name[profile_idx];
                    
            }
            if(!get_val(Ads) && event_press(PS4_PS))
            { 
                Save(); 
            } 
            /*=================================================================================================
            //////////////// We needed to do this in order to save temp values in the array \\\\\\\\\\\\\\\\\\\
            ===================================================================================================
            \\\\\\\\\\\\\\\\\\\\\\\ Each Loadout & Profile Seperate to AR values //////////////////////////////
            =================================================================================================*/
            
                    if (slot_idx == 0 && profile_idx == 0) loadout_profile_flag = 0;
                    if (slot_idx == 0 && profile_idx == 1) loadout_profile_flag = 1;
                    if (slot_idx == 0 && profile_idx == 2) loadout_profile_flag = 2;                                                             
                    if (slot_idx == 1 && profile_idx == 0) loadout_profile_flag = 3;
                    if (slot_idx == 1 && profile_idx == 1) loadout_profile_flag = 4;
                    if (slot_idx == 1 && profile_idx == 2) loadout_profile_flag = 5;                                                             
                    if (slot_idx == 2 && profile_idx == 0) loadout_profile_flag = 6;
                    if (slot_idx == 2 && profile_idx == 1) loadout_profile_flag = 7;
                    if (slot_idx == 2 && profile_idx == 2) loadout_profile_flag = 8;                                                              
                    if (slot_idx == 3 && profile_idx == 0) loadout_profile_flag = 9;
                    if (slot_idx == 3 && profile_idx == 1) loadout_profile_flag = 10;
                    if (slot_idx == 3 && profile_idx == 2) loadout_profile_flag = 11;
                    if (slot_idx == 4 && profile_idx == 0) loadout_profile_flag = 12;
                    if (slot_idx == 4 && profile_idx == 1) loadout_profile_flag = 13; 
                    if (slot_idx == 4 && profile_idx == 2) loadout_profile_flag = 14;
                    
		   /*==========================================================================================================================================
		   ///////////////////////////////////// Get Final Antirecoil Values From The Weapon Arrays \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		   ==========================================================================================================================================*/
                   
                    final_antirecoil_start       = get_weapon_values(weapon_category_idx,weapon_name_idx,0) + antirecoil_start[loadout_profile_flag];
                    final_antirecoil_end         = get_weapon_values(weapon_category_idx,weapon_name_idx,1) + antirecoil_end[loadout_profile_flag];
                    final_antirecoil_time        = get_weapon_values(weapon_category_idx,weapon_name_idx,2) + antirecoil_time[loadout_profile_flag];
                    final_antirecoil_horizontal  = get_weapon_values(weapon_category_idx,weapon_name_idx,3) + antirecoil_horizontal[loadout_profile_flag];
                    final_rate_of_fire           = get_weapon_values(weapon_category_idx,weapon_name_idx,4) + rate_of_fire[loadout_profile_flag];     		 
               
 }
 
 /*===================================================================================================================
 //////////////////////////// Display Title & NOT in ModMenu OR WeaponMenu OR EditMenu \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 =====================================================================================================================
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ Activate the KillSwitch (Disables everything) ////////////////////////////////////
 ===================================================================================================================*/
 
 if(!activeScreen == MOD_MENU || !activeScreen == WEAPON_MOD || !activeScreen == EDIT_MENU)
 {
       if(get_val(Ads))
       {
            set_val(PS4_SHARE,0); 
       }
       if(get_ival(Ads) && event_press(PS4_SHARE))
       { 
            killswitch = TRUE; 
            combo_run(KILLSWITCH); 
       }
       if(killswitch)
       {
            set_ledx(1, 1);
       }
       if(killswitch && (get_val(PS4_CIRCLE) && get_ptime(PS4_CIRCLE) >= 500)) 
       {
            killswitch = FALSE; 
            combo_run(KILLSWITCH_OFF); 
            
}
/*==================================================================================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\ Switch Profile Buttons... Primary - Secondary //////////////////////////////////////////
====================================================================================================================
/////////////////////// Load & Save Weapon Category & Weapon Name For Loadouts \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
==================================================================================================================*/
if(press && event_release(press)&& get_ptime(press)<150 || (get_val(PS4_L3) && event_release(PS4_TRIANGLE)))
{
        	 
				profile_idx += 1;
                if(profile_idx > amount_of_profiles1 - 1) 
                profile_idx = 0; 
       
                weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
       
                weapon_category_idx = weapon_category[profile_idx];
                weapon_name_idx = weapon_name[profile_idx];
        	   
                if(activeScreen == MOD_MENU)
    	              updateScreen = TRUE;   
    	        else if(activeScreen == WEAPON_MOD) 
    	                ScreenActive(WEAPON_MOD); 
    	             else 
    		             display_title = TRUE;
    			           ScreenActive(TITLE_SCREEN);
    			   			    		
}
if(hold_press &&  get_ival(hold_press) && event_release(second_press))
{
				profile_idx += 1;
                if(profile_idx > amount_of_profiles1 - 1) 
                profile_idx = 0;
       
                weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
                weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
       
                weapon_category_idx = weapon_category[profile_idx];
                weapon_name_idx = weapon_name[profile_idx];
       
                if(activeScreen == MOD_MENU)
    	              updateScreen = TRUE;   
    	        else if(activeScreen == WEAPON_MOD) 
    	                ScreenActive(WEAPON_MOD);
    	              else 
    		              display_title = TRUE;
    			           ScreenActive(TITLE_SCREEN);
        	    		
      }
/*=== Resync Buttons For Profiles ===*/

      if(get_val(PS4_L3))
    	  set_val(PS4_TRIANGLE, 0);
     
          if(profile_idx)
               profile_idx = 1;  
            else	
                 profile_idx = 0;
                
      } 
/*========= Warzone Profile Buttons to switch from Primary or Secondary Profile ==========*/

      if(warzone_hold_press && get_ival(warzone_hold_press) && event_press(warzone_press)) 
      {
               profile_idx = 2; 
	       	   warzone_loot_profile = !warzone_loot_profile;
	       	   
	       	   weapon_category[profile_idx] = (0xff00 & loadout_0[profile_idx + SLOT_[slot_idx]]) >> 8;
               weapon_name[profile_idx]     = ((0xff & loadout_0[profile_idx + SLOT_[slot_idx]]));
       
               weapon_category_idx = weapon_category[profile_idx];
               weapon_name_idx = weapon_name[profile_idx];
       
               if(activeScreen == MOD_MENU)
    	            updateScreen = TRUE;   
    	          else if(activeScreen == WEAPON_MOD) 
    	                    ScreenActive(WEAPON_MOD);
    	                  else 
    		                  display_title = TRUE;
    			                ScreenActive(TITLE_SCREEN);
        	               
     } 
/*=== When we are NOT in ModMenu OR WeaponMenu.. Activate/Deactivate Driving Mode OR Sniper Mode ===*/

     if(!activeScreen == MOD_MENU || !activeScreen == WEAPON_MOD)
     {
        if(get_val(Ads)) 
        { 
            if(event_press(PS4_DOWN) && get_brtime(PS4_DOWN) <= 200) 
            {
                driving_mode = TRUE;
                combo_run(DRIVING_MODE);
            } 
           
          set_val(PS4_DOWN, 0);
        }
        
        if(driving_mode)
        {
           if(event_press(Reload)) 
           {
               driving_mode = FALSE;
               combo_run(DRIVING_OFF); 
           }
        }  
        
        if(get_val(Ads))
        {
          if(event_press(PS4_UP) && get_brtime(PS4_UP) <= 200)
          {
              sniper_mode =!sniper_mode; 
              combo_run(SNIPER_MODE); 
    
              if(!sniper_mode)
              {
                 combo_run(SNIPER_OFF); 
                 toggle_holdbreath = FALSE; 
              }
                
              if(sniper_mode) 
              { 
                toggle_holdbreath = TRUE;                
              }
          }
          set_val(PS4_UP, 0);
       }
        
     } 
     
/*=== When We Are NOT in ModMenu OR WeaponMenu and Killswitch is NOT Active ===*/

     if(!activeScreen == MOD_MENU || !activeScreen == WEAPON_MOD && !killswitch)
     {   
                  deadzone(PS4_L2,PS4_R2,99,99);
/*=== Legacy AR and Progressive AR Depending On The Toggle ===*/

	    if(toggle_antirecoil[profile_idx] && !driving_mode)
        {
		    if(toggle_antirecoil[profile_idx] == 2 && !driving_mode)
				           final_antirecoil_start = final_antirecoil_end;
				    
	 		  if(final_antirecoil_start < final_antirecoil_end)
	    	   		i_val = 1; 
	    		else
	    	    	i_val = -1;
	    		i_pnt = (final_antirecoil_time * 10) / (abs(final_antirecoil_start - final_antirecoil_end)); 
	    	
	    		if(!get_val(Fire)) 
	    		{
					ar_y = final_antirecoil_start;
	    	    	i_cnt = 0;
	    	    	i_num = 0;
	    		}     
	    	    if(get_val(Fire))
	    		{
	    	    	if(!p_complete())  
						ar_y = p_val();
	    	    	else
	    	        	ar_y = final_antirecoil_end;
	            
					if(y_val() < 100)
	           			set_val(PS4_RY,y_val()); 
	           	
					combo_run(X_VAL);	
	    		}
	    		if(abs(get_val(PS4_RX)) > abs(final_antirecoil_horizontal) + 5)
	  	  			combo_stop(X_VAL);
       }
/*==== Rapid Fire and NOT driving Mode (means if driving mode active, Rapid Fire is Disabled) ====*/

	   if(toggle_rapidfire[profile_idx] == 1 && !driving_mode)
	   {
	
    	    hold_time = 500 / final_rate_of_fire; 
   		    rest_time = hold_time - 20;
    	    if(rest_time < 0) rest_time = 0;
    
    
    	        if(get_val(Fire))
    		        combo_run(RAPIDFIRE);
    	         else
    	  	        combo_stop(RAPIDFIRE);
    		
                 	led_on = 150;
    	            led_off = 300;
    	            combo_run(BLINK);
	  }
/*==== TaylorAssist Active AND not Driving Mode OR Sniper Mode (When either driving mode or sniper mode is active, AIM assist disables) ====*/

	  if(toggle_taylorassist && !driving_mode && !sniper_mode)
	  {
    
          vm_tctrl(VM_INTERVAL); 
                         
          actual_X = get_val(X);   
          actual_Y = get_val(Y);           
          actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
          max_Magnitude = (actual_Magnitude < 100);                      
                                                                  
          if(!(time++ % STEP_INTERVAL)){                                  
	         angle += STEPS;                                                 
          }                                                               
             angle = angle % 360;                                            
             sin_angle = Polar_Array[angle % 360];                           
             cos_angle = Polar_Array[(angle + 270) % 360];                  
             cos_angle = (cos_angle * RADIUS) / 100;                         
             sin_angle = (sin_angle * RADIUS) / 100;                          
                                                                         
         if ((ACTIVE_WHEN_ADS && get_val(Ads) || (ACTIVE_WHEN_FIRING && get_val(Fire))))
   	     { 
    	     vm_tctrl(VM_INTERVAL);
             if(actual_Magnitude <= RADIUS)
             {                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
             }
             else 
             {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
             }                                                  
                set_val(X, calculate(actual_X + cos_angle, -100, 100));
                set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
     }
/*=== This is where I incorperated Steady Aim in to DoNotAtMe Polar Aim Assist which of course the Steady Aim was created By DoNotAtMe, I just put it together to work as 1 aim assist
     ============================== I see many scripters copy this from my scripts LOL... ===*/
     
     else if (!get_ival(Ads) && !get_ival(Fire)) 
     {
    			vm_tctrl(0); 
  	 }
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
			
	} 
/*==== Batts Sticky AIM Active AND not Driving Mode OR Sniper Mode (When either driving mode or sniper mode is active, AIM assist disables) ====*/

    if(toggle_batts_sticky && !driving_mode && !sniper_mode) 
    {
       if(get_val(Fire) || get_val(Ads))
           combo_run(STICKY_AIM);
       else 
           combo_stop(STICKY_AIM); 
    }
    /*== QuickScope ==*/
	if(toggle_quickscope) 
    {
	   if(event_press(Ads) && get_ptime(Ads) < 140 || event_release(Tactical) && get_ptime(Tactical) < 140)
  	       combo_run(Quick_Scope);
    }
    /*== HoldBreath ==*/
    if(toggle_holdbreath) 
    {
	   if(get_val(Ads))
		   set_val(Sprint, 100);
	                      
	   if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       combo_stop(CH);       
	                    
	   if(event_press(Ads)) 
	       combo_run(CH);
	  
	   if(get_val(Ads) && get_lval(Sprint)) 
	       set_val(Sprint, 0);  
	}       
    /*== Jump Shot ==*/
    if(toggle_jump_shot) 
    {
       if(get_val(Fire)) 
          combo_run(JUMP_ON_SHOT); 
    } 
    /*== I see many people copy this from my script, I came up with this idea, You can choose which how you want Enemy Ping to work, (ADS Only OR ADS & Fire) ==*/
    if(enemy_ping == 1) 
    {
       if(get_val(Ads) && double_click(PS4_UP))
	       combo_run(AUTO_PING); 
    }
    if(enemy_ping == 2)
    {
       if(get_val(Ads) && double_click(PS4_UP))
	       combo_run(AUTO_PING);
	   if(event_press(Fire))
           combo_run(AUTO_PING);        			 
    }
    /*== Cancel Slide ==*/
    if(toggle_cancel_slide) 
    {                                                                                                  
	   if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
	   {
		  if(event_release (Crouch))
			   combo_run(CANCEL_SLIDE)                                            
		  }                                 
       } 
    }
 }
 
 
/*=== Display Title Screen Function() ===*/

function TitleScreen (){ 
if(activeScreen == TITLE_SCREEN) { 
if(display_title){ 
cls_oled(0);
SCREENSAVER = FALSE; 
rect_oled(1, 25, 126, 20, OLED_BLACK, OLED_WHITE); // Middle Rect (Weapon_Name) 
rect_oled(1, 45, 62, 19, OLED_BLACK, OLED_WHITE);  // Left Bottom Rect (Loadout_Number) 
rect_oled(61, 45, 65, 19, OLED_BLACK, OLED_WHITE); // Right Bottom Rect (Profile_Number)
printf(center_x(get_char(MISC_TXT, 0), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 0));
printf(center_x(get_chars(WEAPON_NAMES,weapon_name_idx), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,get_string(WEAPON_NAMES,weapon_name_idx)); 
printf(center_x(get_loadout1_chars(slot_idx), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,LOADOUT_DISPLAY[slot_idx]);

if(profile_idx == 0) 
         printf(center_x(sizeof(PRIMARY) - 10, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRIMARY[0]);        
if(profile_idx == 1)
         printf(center_x(sizeof(SECONDARY) - 10, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,SECONDARY[0]);    
if(warzone_loot_profile) 
         printf(center_x(sizeof(WARZONE) - 10, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,WARZONE[0]);     
  display_title = FALSE;
  display_screen = TRUE; 
 
 }
 if(display_screen)
 {
     count_black += get_rtime();
    	if(count_black >= 10000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_screen = FALSE;
    		SCREENSAVER = TRUE;  
    	}
 } 
 if (SCREENSAVER) 
 { 
		DGT += get_rtime();
		if (DGT >= 100) 
		{
			SD1 += 2;
			TP1 += 1;
			TP2 -= 1;
			DGT  = 0;
		}
				DGR += get_rtime();
				
				if (DGR >= 30) 
				{
					Y_1 += 1;
					Y_2 += 2;
					Y_3 += 3;
					Y_4 += 4;
					Y_5 += 5;
					Y_6 += 6;
					Y_7 += 7;
					Y_8 += 8;
					DGR  = 0;
				}
						NAME();
						MSC += get_rtime();
						if(MSC >= 5000) 
						{
							MSC = 0;
							RT += 1;
						}
							if(RT == 90) 
							{
								SCREENSAVER = 0;
								RT = 0;
								cls_oled(0);		
							}
						}
                        if(killswitch)
                               led(7);
                            else
                               led(profile_idx); 
               } 
}
/*=== Weapon Menu Display Function() ===*/
function WeaponMod(){ 

        cls_oled(OLED_BLACK);
        line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
        rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
	    printf(center_x(get_loadout_chars(slot_idx), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,LOADOUTS[slot_idx]);
	    printf(center_x(get_weapon_category_chars(weapon_category_idx), OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_WHITE,WEAPON_CAT_NAMES[weapon_category_idx]);
	    printf(center_x(get_chars(WEAPON_NAMES,weapon_name_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_WHITE,get_string(WEAPON_NAMES,weapon_name_idx)); 
	  
	    if(profile_idx == 0) 
           printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  
        if(profile_idx == 1)
           printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4));
        if(profile_idx == 2) 
           printf(center_x(get_char(MISC_TXT, 22), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 22)); 
	     
	    if(highLight == 0) 
	    {
	       rect_oled(1, 35, 127, 15, OLED_WHITE, OLED_WHITE);
	       printf(center_x(get_weapon_category_chars(weapon_category_idx), OLED_FONT_SMALL_WIDTH),38,OLED_FONT_SMALL,OLED_BLACK,WEAPON_CAT_NAMES[weapon_category_idx]);
	    }
	    if(highLight == 1) 
	    {
	       rect_oled(1, 51, 127, 15, OLED_WHITE, OLED_WHITE);
	       printf(center_x(get_chars(WEAPON_NAMES,weapon_name_idx), OLED_FONT_SMALL_WIDTH),53,OLED_FONT_SMALL,OLED_BLACK,get_string(WEAPON_NAMES,weapon_name_idx));   
	    }
	        
} 
/*=== Mod Menu & Toggle Display Function ===*/
function ModMenu(){ 
if(updateScreen){
  cls_oled(0);
  rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
  line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
  printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx]);
  

if(modName_idx == 0){
   if(event_press(PS4_UP)) 
   { 
       toggle_antirecoil[profile_idx] += 1
       if(toggle_antirecoil[profile_idx] > 2) 
       toggle_antirecoil[profile_idx] = 0;
   } 
   if(event_press(PS4_DOWN)) 
   { 
       toggle_antirecoil[profile_idx] -= 1
       if(toggle_antirecoil[profile_idx] < 0) 
       toggle_antirecoil[profile_idx] = 2;                 
   }
if(toggle_antirecoil[profile_idx] == 0){
   printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
   }
if(toggle_antirecoil[profile_idx] == 1){ 
  printf(center_x(get_char(MISC_TXT, 28), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 28));  
   } 
if(toggle_antirecoil[profile_idx] == 2){ 
  printf(center_x(get_char(MISC_TXT, 27), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 27)); 
  
   } 
}
if(modName_idx == 1) {
     if(event_press(PS4_UP) || event_press(PS4_DOWN)){
                toggle_rapidfire[profile_idx] =! toggle_rapidfire[profile_idx];
     }
if(toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_rapidfire[profile_idx]){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
     }
}
if(modName_idx == 2) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_taylorassist = !toggle_taylorassist; 
   }
if(toggle_taylorassist){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_taylorassist){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]); 
    }
  }
if(modName_idx == 3) {
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_batts_sticky =! toggle_batts_sticky;
   }
if(toggle_batts_sticky){
       printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_batts_sticky){ 
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
   }
}
if(modName_idx == 4){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_quickscope =! toggle_quickscope;
}
if(toggle_quickscope){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_quickscope){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 5){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_holdbreath =! toggle_holdbreath;
}
if(toggle_holdbreath){
     printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_holdbreath){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 6){ 
 if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_jump_shot =! toggle_jump_shot;
}
if(toggle_jump_shot){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_jump_shot){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
}
if(modName_idx == 7){
   if(event_press(PS4_UP) || event_press(PS4_DOWN)){
       toggle_cancel_slide =! toggle_cancel_slide;
}
if(toggle_cancel_slide){
      printf(center_x(sizeof(_ON) - 1, OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,_ON[0]);
}
if(!toggle_cancel_slide){
     printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
} 
if(modName_idx == 8)
{
     if(event_press(XB1_UP)) 
     {
         enemy_ping += 1;
         if(enemy_ping > 2) 
 	     enemy_ping = 0;           
     }
     if(event_press(XB1_DOWN)) 
     {
         enemy_ping -= 1; 
         if(enemy_ping < 0) 
 	     enemy_ping = 2;   
     } 
     if(enemy_ping == 0)
     { 
         printf(center_x(sizeof(_OFF) - 1, OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,OLED_WHITE,_OFF[0]);
     }
     if(enemy_ping == 1)
     {
        printf(center_x(get_char(MISC_TXT, 18), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 18));   
     }
     if(enemy_ping == 2)
     {
        printf(center_x(get_char(MISC_TXT, 19), OLED_FONT_MEDIUM_WIDTH),42,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 19));
     }
}
if(modName_idx == 9) 
{ 
        printf(center_x(get_singlebutton_chars(singlebutton_idx), OLED_FONT_MEDIUM_WIDTH),37,OLED_FONT_MEDIUM,OLED_WHITE,SINGLEBUTTON[singlebutton_idx]);
  
     if(event_press(PS4_DOWN))
     {
         singlebutton_idx ++; 
         if(singlebutton_idx > 3 ) singlebutton_idx = 0;       
     }   
     if(event_press(PS4_UP))
     {
         singlebutton_idx --; 
         if(singlebutton_idx < 0) singlebutton_idx = 3;       
     }
}
if(modName_idx == 10)
{ 
     if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		 active_name = !active_name; 	
        }
        if(!active_name)
        {
		   name_width = OLED_FONT_SMALL_WIDTH;
		   name_font = OLED_FONT_SMALL;
		   name_y = 50;
		   cat_width = OLED_FONT_MEDIUM_WIDTH;
		   cat_font = OLED_FONT_MEDIUM;
	    }
	    else
	    {
		   name_width = OLED_FONT_MEDIUM_WIDTH;
		   name_font = OLED_FONT_MEDIUM;
		   name_y = 43;
		   cat_width = OLED_FONT_SMALL_WIDTH;
		   cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(PS4_L2))
	 {
         if(event_press(PS4_RIGHT)) 
         {
             if(!active_name) 
             firstholdbutton_idx += 1; 
             else 
             secondpressbutton_idx += 1;  
         }        
         if(event_press(PS4_LEFT)) 
         {
             if(!active_name)
             firstholdbutton_idx -= 1;    
             else
             secondpressbutton_idx -= 1;
         } 
             if(firstholdbutton_idx > 4) firstholdbutton_idx = 0; 
             if(secondpressbutton_idx > 2) secondpressbutton_idx = 0; 
             if(firstholdbutton_idx < 0) firstholdbutton_idx = 4;
             if(secondpressbutton_idx < 0) secondpressbutton_idx = 2;  
         }
}     
if(modName_idx == 11)
{ 
	 if(event_press(PS4_UP) || event_press(PS4_DOWN))
     {
		active_name1 = !active_name1; 	
     }
        if(!active_name1)
        {
		    name_width = OLED_FONT_SMALL_WIDTH;
		    name_font = OLED_FONT_SMALL;
		    name_y = 50;
		    cat_width = OLED_FONT_MEDIUM_WIDTH;
		    cat_font = OLED_FONT_MEDIUM;
	    }
	    else
	    {
		    name_width = OLED_FONT_MEDIUM_WIDTH;
		    name_font = OLED_FONT_MEDIUM;
		    name_y = 43;
		    cat_width = OLED_FONT_SMALL_WIDTH;
	  	    cat_font = OLED_FONT_SMALL;
	 } 
	 if(get_ival(PS4_L2))
	 {
        if(event_press(PS4_RIGHT)) 
        {
            if(!active_name1) 
            warzoneholdbutton_idx += 1; 
            else 
            warzonepressbutton_idx += 1;  
        }        
        if(event_press(PS4_LEFT)) 
        {
            if(!active_name1)
            warzoneholdbutton_idx -= 1;    
            else
            warzonepressbutton_idx -= 1;
        } 
            if(warzoneholdbutton_idx  > 4) warzoneholdbutton_idx  = 0; 
            if(warzonepressbutton_idx > 2) warzonepressbutton_idx = 0; 
            if(warzoneholdbutton_idx  < 0) warzoneholdbutton_idx  = 4;
            if(warzonepressbutton_idx < 0) warzonepressbutton_idx = 2;  
        }
} 
if(modName_idx == 12){ 
printf(center_x(get_button_chars(Buttons), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER[Buttons]);
if(event_press(PS4_UP))
{
       
            Buttons += 1;
            if(Buttons > 16) 
            Buttons = 0;
}
if(event_press(PS4_DOWN))
{
      
            Buttons -= 1; 
            if(Buttons < 0)
            Buttons = 16;
       }
}
if(modName_idx == 9){ 
     
      printf(center_x(get_char(MISC_TXT, 21), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 21));
 
} 
if(modName_idx == 10){ 
     printf(center_x(get_doublebutton_chars(firstholdbutton_idx), cat_width),30,cat_font,OLED_WHITE,FIRSTHOLDBUTTON[firstholdbutton_idx]);
     printf(center_x(get_doublepressbutton_chars(secondpressbutton_idx), name_width),name_y,name_font,OLED_WHITE,SECONDPRESSBUTTON[secondpressbutton_idx]);
}
if(modName_idx == 11){ 
     printf(center_x(get_warzoneholdbutton_chars(warzoneholdbutton_idx), cat_width),30,cat_font,OLED_WHITE,WARZONEHOLDBUTTON[warzoneholdbutton_idx]);
     printf(center_x(get_warzonepressbutton_chars(warzonepressbutton_idx), name_width),name_y,name_font,OLED_WHITE,WARZONEPRESSBUTTON[warzonepressbutton_idx]);
}
else if(modName_idx  < mods_not_on_all_profiles)  
{
if(profile_idx == 0) 
     printf(center_x(get_char(MISC_TXT, 3), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 3));  	
else if(profile_idx == 1)
     printf(center_x(get_char(MISC_TXT, 4), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 4)); 
else if(profile_idx == 2)
     printf(center_x(get_char(MISC_TXT, 22), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 22)); 

     }
   } 
 }  
function EditMenu(){ 
if(updateScreen){ 
cls_oled(0); 
rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
if(valName_idx == 1 && toggle_antirecoil[profile_idx] == 2) 
printf(center_x(get_char(MISC_TXT, 29), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 29)); 
else
printf(center_x(get_valName_chars(valName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES[valName_idx]);
printf(center_x(get_chars(WEAPON_NAMES,weapon_name_idx), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,get_string(WEAPON_NAMES,weapon_name_idx)); 

if(valName_idx == 0) {
      Display_Values(valName_idx,antirecoil_start[loadout_profile_flag]);
      antirecoil_start[loadout_profile_flag] = Edit_Values(antirecoil_start[loadout_profile_flag],0,99,1,10);    
      }
if(valName_idx == 1) {
      Display_Values(valName_idx,antirecoil_end[loadout_profile_flag]);
      antirecoil_end[loadout_profile_flag] = Edit_Values(antirecoil_end[loadout_profile_flag],0,99,1,10);
      }
if(valName_idx == 2) {
      Display_Values(valName_idx,antirecoil_time[loadout_profile_flag]);
      antirecoil_time[loadout_profile_flag] = Edit_Values(antirecoil_time[loadout_profile_flag],0,99,1,10);
      }
if(valName_idx == 3) { 
      Display_Values(valName_idx,antirecoil_horizontal[loadout_profile_flag]);
      antirecoil_horizontal[loadout_profile_flag] = Edit_Values(antirecoil_horizontal[loadout_profile_flag] ,-99 , 99 , 1 , 10); 
      }

if(valName_idx == 4) {
      Display_Values(valName_idx,rate_of_fire[loadout_profile_flag]);
      rate_of_fire[loadout_profile_flag] = Edit_Values(rate_of_fire[loadout_profile_flag],0,25,1,10);
      }
if(valName_idx == 5) { 
      Display_Values(valName_idx,RADIUS);
      RADIUS = Edit_Values(RADIUS,0,99,1,10);
      }
if(valName_idx == 6) {
      Display_Values(valName_idx,STEPS);
      STEPS = Edit_Values(STEPS,0,99,1,10);
      }
if(valName_idx == 7) { 
      Display_Values(valName_idx,STEADY_AIM);
      STEADY_AIM = Edit_Values(STEADY_AIM,0,90,1,10);
      } 
if(valName_idx == 8) { 
      Display_Values(valName_idx,stickyaim_size);
      stickyaim_size = Edit_Values(stickyaim_size,0,99,1,10);
      }
if(valName_idx == 9) { 
      Display_Values(valName_idx,stickyaim_time);
      stickyaim_time = Edit_Values(stickyaim_time,0,99,1,10);
      }

if(valName_idx == 10){ 
      Display_Values(valName_idx,quickscopedelay);
      quickscopedelay = Edit_Values(quickscopedelay,0,600,1,10);
      }
   } 
}

combo KILLSWITCH {
    cls_oled(OLED_BLACK)
    set_ledx(1, 1);
    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    printf(center_x(get_char(MISC_TXT, 6), OLED_FONT_SMALL_WIDTH),5,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 6));  
    printf(center_x(get_char(MISC_TXT, 7), OLED_FONT_SMALL_WIDTH),22,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 7));  
    printf(center_x(get_char(MISC_TXT, 8), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 8));
    wait(2000)
    call(RUMBLE_ON);
    wait(130);
    call(RUMBLE_ON);
    ScreenActive(TITLE_SCREEN);
    display_title = TRUE; 
} 
combo KILLSWITCH_OFF { 
 cls_oled(OLED_BLACK); 
 rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
 printf(center_x(get_char(MISC_TXT, 20), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 20));  
 wait(2000)
 call(RUMBLE_OFF);
 wait(130)
 ScreenActive(TITLE_SCREEN); 
 display_title = TRUE; 
}
combo DRIVING_MODE { 
    cls_oled(OLED_BLACK);
    printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
    printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
    wait(3000);
    call(RUMBLE_ON);
    wait(150);
    display_title = TRUE; 
}
combo DRIVING_OFF {
    cls_oled(OLED_BLACK);
    printf(center_x(get_char(MISC_TXT, 23), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 23));
    printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
    wait(3000);
    call(RUMBLE_OFF);
    wait(150); 
    display_title = TRUE; 
    } 
combo SNIPER_MODE { 
    cls_oled(OLED_BLACK); 
    printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
    printf(center_x(get_char(MISC_TXT, 24), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 24));
    wait(3000);
    call(RUMBLE_ON);
    wait(150);
    display_title = TRUE; 
    }
    combo SNIPER_OFF { 
    cls_oled(OLED_BLACK); 
    printf(center_x(get_char(MISC_TXT, 26), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 26));
    printf(center_x(get_char(MISC_TXT, 25), OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,get_strings(MISC_TXT, 25));
    wait(3000);
    call(RUMBLE_OFF);
    wait(150);
    display_title = TRUE; 
    }
combo RUMBLE_ON {						
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
}
combo RUMBLE_OFF {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
}
combo SAVE { 
	cls_oled(0);						
	printf(center_x(get_char(MISC_TXT, 9), OLED_FONT_MEDIUM_WIDTH),25,OLED_FONT_MEDIUM,OLED_WHITE,get_strings(MISC_TXT, 9)); 
	wait(1000);
	ScreenActive(TITLE_SCREEN);
	display_title = TRUE; 
	call(RUMBLE_ON);
	wait(150);
	call(RUMBLE_ON);}	
	
combo RAPIDFIRE { 
    wait(hold_time);
    set_val(Fire, 0);
    wait(rest_time);
    }	
combo BLINK {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}
combo STICKY_AIM {
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
    wait(stickyaim_time);
    }
    combo CANCEL_SLIDE {              
    wait(23);
    set_val(Crouch, 100);
    wait(23);
    set_val(Crouch, 100);
    wait(21);
    set_val(Crouch, 0);
	wait(100);
} 
combo AUTO_PING{
    set_val(Ping,100);
	wait(20)
	set_val(Ping,0);
	wait(20)
	set_val(Ping,100);
	wait(20)
	set_val(Ping,0);
	}
combo Quick_Scope {
 set_val(Ads,100);
 wait(quickscopedelay); 
 set_val(Ads,100);
 set_val(Fire,100);
 wait(40);
 set_val(Ads,100);
 wait(40); }        
   
 combo CH {
	set_val(Sprint,0);
	wait(60);
	set_val(Sprint,100);
	wait(110);
	set_val(Sprint,0);
	wait(110);}


combo RACE {
	X_1 = random(0,127);
	wait(SAVER1);
	X_2 = random(0,127);
	wait(SAVER1);
	X_3 = random(0,127);
	wait(SAVER1);
	X_4 = random(0,127);
	wait(SAVER1); 
	X_5 = random(0,127);
	wait(SAVER1);
	X_6 = random(0,127);
	wait(SAVER1); 
	X_7 = random(0,127);
	wait(SAVER1); 
	X_8 = random(0,127);
	wait(SAVER1);
}
 combo JUMP_ON_SHOT {
    set_val(Jump,100);
    wait(100);}
    int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }
function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}
combo RN {
	RN1 = random(65,90);
	RN2 = random(60,90);
	RN3 = random(65,90);
	RN4 = random(65,90); 
	RN5 = random(65,90);
	RN6 = random(65,90);
	RN7 = random(65,90);
	RN8 = random(65,90);
	wait(SAVER);
}
function p_complete() { 

    i_cnt++;
    if(i_cnt > final_antirecoil_time * 10) 
    {
        i_cnt = final_antirecoil_time * 10;
        return 1;
    }    
    return 0;
}  

function p_val() { 

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  

function y_val() {
    v = get_val(PS4_RY);
    if(abs(v) < 10)
        v = 0;
    if(abs(v) > abs(ar_y + 5))
        return v;
    return v + ar_y;
}
combo X_VAL {
	x_ref = get_val(PS4_RX) + final_antirecoil_horizontal;
    if(x_ref > 100) x_ref = 100;
    set_val(PS4_RX, x_ref);
	}


function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function Edit_Values(value,min,max,increase_value,increase_value_more) {  
 
		if(get_val(Ads) && event_press(PS4_RIGHT)) 
		{
		   value += increase_value;
		}
	    if(get_val(Ads) && event_press(PS4_LEFT))
		{
		   value -= increase_value;
		}
		if(get_val(Ads) && event_press(PS4_UP))
		{
		   value += increase_value_more;
		}
		if(get_val(Ads) && event_press(PS4_DOWN))
		{
		   value -= increase_value_more;
		}
		if(valName_idx >= AMOUNT_OF_VAL_IN_ARRAY)
		{
		    if(value > max ) 
		       value = max;
		    if(value < min ) 
		       value = min;    
	   
	    
	    if(value + get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) < min)
	        value = min +  get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx);
	        
	    if(value + get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) > max)
	        value = max +  get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx);    
	    
        for(idx = 0;idx <= 6;idx++) {
            if(weapon_category_idx == idx) { 
                rate_of_fire[profile_idx] = max(rate_of_fire[profile_idx],inv(PROFILE_INDEX[idx]) + 1); 
        }
      }   	
    }
   return value;  
}
function get_weapon_values(weapon_type,categoryindex,weaponindex) {
    if (weapon_type == 0) return A_RIFLE[categoryindex][weaponindex];
    if (weapon_type == 1) return SMG[categoryindex][weaponindex];
    if (weapon_type == 2) return LMG[categoryindex][weaponindex]; 
    if (weapon_type == 3) return SHOTGUN[categoryindex][weaponindex];
    if (weapon_type == 4) return SNIPER[categoryindex][weaponindex]; 
    if (weapon_type == 5) return RIFLE[categoryindex][weaponindex];
    if (weapon_type == 6) return HANDGUN[categoryindex][weaponindex];
    
    return 0; 
    }    
function Display_Values(idx,value) {
   if(valName_idx == idx)
   {
      if(idx < AMOUNT_OF_VAL_IN_ARRAY)
      {
          if(idx == 2)
             number_to_string((get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) + value) * 100, find_digits((get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) + value) * 100));
             else
             number_to_string(get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) + value, find_digits(get_weapon_values(weapon_category_idx,weapon_name_idx,valName_idx) + value));	 
    	 }      
     
     else 
     number_to_string(value,find_digits(value));
    }
 }


function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}
 function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),37,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
} 
function weapon_name_limits(f_cat, f_limit) {
	if(weapon_category_idx == f_cat)
	{
		if(weapon_name_idx > f_limit)
			weapon_name_idx = 0;
		if(weapon_name_idx < 0)
			weapon_name_idx = f_limit;
	}
}
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}  
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
int X_1,Y_1,X_2,Y_2,X_3,Y_3, X_4,Y_4,X_5,Y_5,X_6,Y_6,X_7,Y_7,X_8,Y_8; 
define MISC_TXT = 0; 
define WEAPON_NAMES = 0; 
function get_loadout_chars(f_idx){
	if (LOADOUTS[f_idx + 1] != -1) 
		return LOADOUTS[f_idx + 1] - LOADOUTS[f_idx] - 1;
	return sizeof(LOADOUTS) - LOADOUTS[f_idx];		
}
function get_loadout1_chars(f_idx){
	if (LOADOUT_DISPLAY[f_idx + 1] != -1) 
		return LOADOUT_DISPLAY[f_idx + 1] - LOADOUT_DISPLAY[f_idx] + 8;
	return sizeof(LOADOUT_DISPLAY) - LOADOUT_DISPLAY[f_idx];		
}
function get_weapon_category_chars(f_idx){
	if (WEAPON_CAT_NAMES[f_idx + 1] != -1) 
		return WEAPON_CAT_NAMES[f_idx + 1] - WEAPON_CAT_NAMES[f_idx] - 1;
	return sizeof(WEAPON_CAT_NAMES) - WEAPON_CAT_NAMES[f_idx];
}

function get_chars(f_array_idx, f_idx){
   
	if(f_array_idx == WEAPON_NAMES)
	{
  		if(weapon_category_idx == 0)
  		{
	  		if(A_RIFLE_NAME[f_idx + 1] != -1) 
	  	    return A_RIFLE_NAME[f_idx + 1] - A_RIFLE_NAME[f_idx] - 1;
	  		return sizeof(A_RIFLE_NAME) - A_RIFLE_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 1)
  		{
	  		if(SMG_NAME[f_idx + 1] != -1) 
	  		return SMG_NAME[f_idx + 1] - SMG_NAME[f_idx] - 1;
	  		return sizeof(SMG_NAME) - SMG_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 2)
  		{
	  		if(LMG_NAME[f_idx + 1] != -1) 
	  		return LMG_NAME[f_idx + 1] - LMG_NAME[f_idx] - 1;
	  		return sizeof(LMG_NAME) - LMG_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 3)
  		{
	  		if(RIFLE_NAME[f_idx + 1] != -1) 
	  		return RIFLE_NAME[f_idx + 1] - RIFLE_NAME[f_idx] - 1;
	  		return sizeof(RIFLE_NAME) - RIFLE_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 4)
  		{
	  		if(SHOTGUN_NAME[f_idx + 1] != -1) 
	  		return SHOTGUN_NAME[f_idx + 1] - SHOTGUN_NAME[f_idx] - 1;
	  		return sizeof(SHOTGUN_NAME) - SHOTGUN_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 5)
  		{
	  		if(SNIPER_NAME[f_idx + 1] != -1) 
	  		return SNIPER_NAME[f_idx + 1] - SNIPER_NAME[f_idx] - 1;
	  		return sizeof(SNIPER_NAME) - SNIPER_NAME[f_idx];
	  	}
  		if(weapon_category_idx == 6)
  		{
	  		if(HANDGUN_NAME[f_idx + 1] != -1) 
	  		return HANDGUN_NAME[f_idx + 1] - HANDGUN_NAME[f_idx] - 1;
	  		return sizeof(HANDGUN_NAME) - HANDGUN_NAME[f_idx];
	  	}
  	}
  	return -1;
}
function get_string(f_array_idx, f_idx) {
	
	if(f_array_idx == WEAPON_NAMES)
	{
		if(weapon_category_idx == 0)
			return A_RIFLE_NAME[f_idx];
			
		else if(weapon_category_idx == 1)
			return SMG_NAME[f_idx];
			
		else if(weapon_category_idx == 2)
			return LMG_NAME[f_idx];
			
		else if(weapon_category_idx == 3)
			return RIFLE_NAME[f_idx];
			
		else if(weapon_category_idx == 4)
			return SHOTGUN_NAME[f_idx];
			
		else if(weapon_category_idx == 5)
			return SNIPER_NAME[f_idx];
			
		else if(weapon_category_idx == 6)
			return HANDGUN_NAME[f_idx];
	}
	return -1;
}
function get_modName_chars(f_idx){
	if (MODNAMES[f_idx + 1] != -1) 
		return MODNAMES[f_idx + 1] - MODNAMES[f_idx] - 1;
	return sizeof(MODNAMES) - MODNAMES[f_idx];		
}
function get_valName_chars(f_idx){
	if (VALNAMES[f_idx + 1] != -1) 
		return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
	return sizeof(VALNAMES) - VALNAMES[f_idx];		
}
function get_button_chars(f_idx){
	if (CONTROLLER[f_idx + 1] != -1) 
		return CONTROLLER[f_idx + 1] - CONTROLLER[f_idx] - 1;
	return sizeof(CONTROLLER) - CONTROLLER[f_idx];		
}
function get_singlebutton_chars(f_idx){
	if (SINGLEBUTTON[f_idx + 1] != -1) 
		return SINGLEBUTTON[f_idx + 1] - SINGLEBUTTON[f_idx] - 1;
	return sizeof(SINGLEBUTTON) - SINGLEBUTTON[f_idx];		
}
function get_doublebutton_chars(f_idx){
	if (FIRSTHOLDBUTTON[f_idx + 1] != -1) 
		return FIRSTHOLDBUTTON[f_idx + 1] - FIRSTHOLDBUTTON[f_idx] - 1;
	return sizeof(FIRSTHOLDBUTTON) - FIRSTHOLDBUTTON[f_idx];		
}
function get_doublepressbutton_chars(f_idx){
	if (SECONDPRESSBUTTON[f_idx + 1] != -1) 
		return SECONDPRESSBUTTON[f_idx + 1] - SECONDPRESSBUTTON[f_idx] - 1;
	return sizeof(SECONDPRESSBUTTON) - SECONDPRESSBUTTON[f_idx];		
}
function get_warzoneholdbutton_chars(f_idx){    
    if (WARZONEHOLDBUTTON[f_idx + 1] != -1) 
	    return WARZONEHOLDBUTTON[f_idx + 1] - WARZONEHOLDBUTTON[f_idx] - 1;
	    return sizeof(WARZONEHOLDBUTTON) - WARZONEHOLDBUTTON[f_idx];
	}
function get_warzonepressbutton_chars(f_idx){ 
   if (WARZONEPRESSBUTTON[f_idx + 1] != -1) 
		return WARZONEPRESSBUTTON[f_idx + 1] - WARZONEPRESSBUTTON[f_idx] - 1;
	    return sizeof(WARZONEPRESSBUTTON) - WARZONEPRESSBUTTON[f_idx];
	}
function get_char(f_array_idx1,f_idx){

  if(f_array_idx1 == MISC_TXT)
     {
        if(MISC[f_idx + 1] != -1) 
  	    return MISC[f_idx + 1] - MISC[f_idx] - 1;
  		return sizeof(MISC) - MISC[f_idx];
    }
  	return -1;
}
function get_strings(f_array_idx1,f_idx){
	if(f_array_idx1 >= 0 && f_array_idx1 <= 17)
		return MISC[f_idx];
    return -1;
}
int RN1,RN2,RN3,RN4,RN5,RN6,RN7,RN8;
const string MODNAMES[] ={
   "Progressive AR","Rapid Fire","Taylor Assist","Sticky Aim","QuickScope","HoldBreath",

   "Jump Shot","Slide Cancel","Enemy Ping","1 Button Press","2 Button Press","Warzone Profile","Controller Layout","" };

const string VALNAMES[]={
   "Vertical Start","Vertical End","Vertical Time","Horizontal","Rounds/Sec",
  	
  "Radius","Steps","Steady Aim","Sticky Size","Sticky Time","QuickScope Delay",""} 

const string MISC[]={
"MW LoadoutEdition","Loadout Edition","Cold"," P1 "," P2 "," All Profiles ","KillSwitch ON","Hold Circle/B","to turn OFF","SAVED","Sniper Mode","Activated","Deactivated","Press X to edit",
      
"KillSwitch OFF","Press Cross/A","Press Square/X","Off","ADS Only","ADS & Fire","KillSwitch OFF"," Profile Button ","Warzone","Driving Mode","Activated","Deactivated","Sniper Mode","Legacy","Progressive","Vertical", ""}
                                       
const string CONTROLLER[]={
   "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast",
   "Default Flipped","Tactical Flipped","B.Jumper Flipped","B.JumprTac Flipped","Stick&Move Flipped",""}

const string SINGLEBUTTON[]={ 
"v Select ^","Triangle","Dpad Down","Dpad UP",""}; 
const string FIRSTHOLDBUTTON[]={
"< Select >","< L2 >","< R2 >","< L1 >","< R1 >",""}; 
const string SECONDPRESSBUTTON[]={
"< Select >","Dpad Down","Dpad UP",""}; 
const string WARZONEHOLDBUTTON[]={ 
"< Select >","< L2 >","< R2 >","< L1 >","< R1 >",""}; 
const string WARZONEPRESSBUTTON[]={ 
"< Select >","Dpad Down","Dpad Up",""};
const string LOADOUTS[] = {
  "Custom Loadout 1","Custom Loadout 2", "Custom Loadout 3", "Custom Loadout 4", "Custom Loadout 5", ""};
const string LOADOUT_DISPLAY[] = {
  "L1","L2", "L3", "L4", "L5", ""};
const string WEAPON_CAT_NAMES[] = {
  "Assault R.", "SMG", "LMG", "Rifle", "ShotGun", "Sniper", "HandGun", ""};
const string A_RIFLE_NAME[] = {
"M4A1", "AK-47", "M13","FR 5.56","Oden","Kilo 141","FAL","FN Scar 17","RAM 7","GRAU 5.56","CR-56 AMAX","AN-94","Custom AR", ""}
const string SMG_NAME[] = { 
"MP5", "MP7","AUG","P90","PP19 Bizon","Uzi","Striker 45","Fennec","ISO","Custom SMG",""};
const string LMG_NAME[] = {
"PKM","SA87","M91","MG34","Holger-26","Bruen Mk9","Finn","Custom LMG",""}; 
const string RIFLE_NAME[] = {
"EBR-14","Mk2 Carbine","Kar98k","Crossbow","Sks",""};
const string SNIPER_NAME[]={
"Dragunov","HDR","AX-50","Rytec AMR",""};
const string SHOTGUN_NAME[]={
"Model 680","R9-0","725","Origin 12","VLK Rogue",""};
const string HANDGUN_NAME[]={ 
"X16","1911",".357","M19",".50GS","Renetti",""}; 
const string _ON = "On"; 
const string _OFF = "Off"; 
const string PRIMARY = "Primary"; 
const string SECONDARY = "Secondry"; 
const string WARZONE = "Warzone"; 
int modName_idx,profile_idx,display_screen,count_black;
int amount_of_profiles = 3; 
define amount_of_editable_mods = 4;
define amount_of_values = 10; 
define modName_idx_max = 12;
define mods_not_on_all_profiles = 3;
define amount_of_profiles1 = 2; 
define amount_A_RIFLE = 12;
define amount_SMG = 9;
define amount_LMG = 7;
define amount_RIFLE = 4;
define amount_SHOTGUN = 4;
define amount_SNIPER = 3;
define amount_HANDGUN = 5;
define amount_fullauto_category = 3;
define amount_weapon_category = 6;
define max_stored = 12;
int AMOUNT_OF_VAL_IN_ARRAY = 5;
int loadout_0[15], SLOT_[5], save_loadout[15];
int i;
//int i;
int mask;
int ret;
int pval_data;
int Fire;
int Ads;
int Lethal;
int Tactical;
int Jump;
int Crouch;
int Melee;
int Sprint;
int Reload;
int Swap;
int Ping;
int Buttons  = 0;
int display_title = TRUE;
int driving_mode,sniper_mode; 
int SCREENSAVER;
int final_antirecoil_start,final_antirecoil_end,final_antirecoil_time,final_antirecoil_horizontal,final_rate_of_fire;	
int slot_idx,weapon_category_idx,weapon_name_idx,highLight;
int weapon_category[3],weapon_name[3]; 
int toggle_antirecoil[3],toggle_rapidfire[3],toggle_taylorassist,toggle_batts_sticky,toggle_quickscope,toggle_holdbreath;
int antirecoil_start[15],antirecoil_end[15],antirecoil_time[15],antirecoil_horizontal[15];
int rate_of_fire[3],btn_layout,active_name,active_name1;
int singlebutton_idx,firstholdbutton_idx,secondpressbutton_idx,second_press;
int press = 0;
int hold_press = 0; 
int warzone_hold_press = 0;
int PROFILE_INDEX[6];
int idx;
int loadout_profile_flag; 
int name_width,name_font,name_y,cat_width,cat_font,warzone_press,warzone_loot_profile,warzoneholdbutton_idx,warzonepressbutton_idx;
int toggle_jump_shot; 
int RADIUS,STEADY_AIM,STEADY_VALUE;
define _CROSS = 129;
int killswitch;
int STEPS,stickyaim_size,stickyaim_time,quickscopedelay; 
define TRIANGLE = PS4_TRIANGLE,R1 = PS4_R1,L1 = PS4_L1,L2 = PS4_L2,R2 = PS4_R2,DOWN = PS4_DOWN,UP = PS4_UP;
define SSA1 = 84; define SSA2 = 65; define SSA3 = 89; define SSA4 = 76; define SSA5 = 79;define SSA6 = 82; define SSA7 = 68; define SSA8 = 82; define SSA9 = 73;define SSA10 = 70;
define SSA11 = 82;define SSA13 = 50;define SSA14 = 49;define SAVER = 5000;define SAVER1 = 10; int SSMU1 = 1;int SSMU2 = 8;int SSMU3 = 15;int SSMU4 = 22;int SSMU5 = 29;int SSMU6 = 36;
int SSMU7 = 43;int SSMU8 = 50;int SSMU9 = 57;int SSMU10 = 64;int SSMU11 = 71;int SSMU12 = 78;int SSMU13 = 85;int SSMU14 = 92;
int i_val,i_pnt,i_num,i_cnt,v,ar_y,x_ref;
int hold_time,rest_time,led_on,led_off;
int toggle_cancel_slide,enemy_ping,valName_idx;
int q;											
int double__tap[30];
init {
while(q < 30) 
{double__tap[q] = -1;       
q++;}}
//int invert;
define ACTIVE_WHEN_ADS    =  TRUE;
define ACTIVE_WHEN_FIRING =  TRUE;
define X                  =  PS4_RX;                                    
define Y                  =  PS4_RY;
define STEP_INTERVAL =  1;                            
define VM_INTERVAL   = -2; 
int time,angle,actual_X, actual_Y, actual_Magnitude, max_Magnitude;
  
const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
   80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
   6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
   -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
   -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
   -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
   -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
   9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
   82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 
const int16 A_RIFLE[][] = { 
{   34, 28, 45, -11,  0 }, 
{   38, 29, 37,  -1,  0 }, 
{   27, 24, 42, -13,  0 },
{   25,  9, 25,   0,  0 }, 
{   35, 27, 35,   0,  5 }, 
{   30, 12, 45,   4,  8 }, 
{   30, 20, 25, -20,  9 }, 
{   42, 31, 10,   0, 10 }, 
{   35, 30, 25,  13, 12 }, 
{   0,  0,  0,   0,  0 }, 
{   39, 28, 32,  -2,  0 }, 
{   0,  0,  0,   0,  0 }, 
{   0,  0,  0,   0,  0 }  
};
const int16 SMG[][] = {
{   29, 26, 36,  -6,  0 }, 
{   28, 23, 32,  -7,  0 }, 
{   32, 27, 25,  -8,  0 }, 
{   40, 25, 40, -11,  0 }, 
{   38, 19, 40,  -7,  0 }, 
{   28, 21, 15,  -7,  0 }, 
{   37, 27, 40,   2,  0 }, 
{   40, 30, 40,   2,  0 }, 
{   35, 27, 15,  -5,  0 }, 
{    0,  0,  0,   0,  0 }  
};
const int16 LMG[][] = { 
{  40, 36,  0,    0,  0 }, 
{  35, 27, 35,  -11,  0 }, 
{  36, 35, 45,    7,  0 }, 
{  38, 36, 35,   -2,  0 }, 
{  33, 26, 30,  -10,  0 }, 
{  32, 26, 80,    6,  0 }, 
{  29, 31, 66,    0,  0 }, 
{   0,  0,  0,    0,  0 }  
};
const int16 RIFLE[][] = { 
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 }  
};
const int16 SHOTGUN[][] = { 
{   0,  0, 0, 0, 0 }, 
{   0,  0, 0, 0, 0 }, 
{   0,  0, 0, 0, 0 }, 
{   0,  0, 0, 0, 0 }, 
{  0,  0, 0, 0, 0 }  
};
const int16 SNIPER[][] = {
{   0, 0, 0, 0, 0 },
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 }, 
{   0, 0, 0, 0, 0 } 
};
const int16 HANDGUN[][] = { 
{    0, 0,  0, 0, 0  }, 
{    0, 0,  0, 0, 0  }, 
{    0, 0,  0, 0, 0  },
{    0, 0,  0, 0, 0  },
{    0, 0,  0, 0, 0  },
{    0, 0,  0, 0, 0  } 
};   
function mod_limits(min_limit, max_limit) { 

	if(valName_idx > max_limit) valName_idx = min_limit;
	if(valName_idx < min_limit) valName_idx = max_limit; 		
}
function Switch_Buttons(){

       if(singlebutton_idx == 1)
       {
           press = TRIANGLE; 
       }
       if(singlebutton_idx == 2) 
       { 
           press = DOWN;
       }
       if(singlebutton_idx == 3)
       {
           press = UP;
       }
       if(firstholdbutton_idx == 1)
       {
           hold_press = L2; 
       }
       if(firstholdbutton_idx == 2)
       {
           hold_press = R2; 
       }
       if(firstholdbutton_idx == 3)
       {
           hold_press = L1;
       }
       if(firstholdbutton_idx == 4)
       {
           hold_press = R1;
       }
       if(secondpressbutton_idx == 1)
       {
           second_press = DOWN;
       }
       if(secondpressbutton_idx == 2)
       {
           second_press = UP; 
       }
        if(warzoneholdbutton_idx == 1) 
       {
          warzone_hold_press = L2; 
       }
       if(warzoneholdbutton_idx == 2) 
       {
          warzone_hold_press = R2;
       }
       if(warzoneholdbutton_idx == 3) 
       {
          warzone_hold_press = L1;
       }
       if(warzoneholdbutton_idx == 4)
       {
          warzone_hold_press = R1; 
       } 
       if(warzonepressbutton_idx == 1)
       {
          warzone_press = DOWN; 
       }
       if(warzonepressbutton_idx == 2)
       {
          warzone_press = UP; 
       } 
     
   }
function block_function() {

set_val(PS4_UP     , 0 ); 	set_val(PS4_DOWN  , 0 ); 	set_val(PS4_LEFT  , 0 );	set_val(PS4_RIGHT   , 0);
set_val(Jump   , 0 ); 	    set_val(Crouch, 0 ); 	    set_val(Reload, 0 ); 	    set_val(Swap , 0);
set_val(Tactical , 0 );     set_val(Lethal , 0 ); 	    set_val(Sprint , 0 );    	set_val(Melee  , 0);
set_val(PS4_OPTIONS, 0 ); 	set_val(PS4_SHARE , 0 );	set_val(PS4_TOUCH , 0 );	set_val(PS4_PS      , 0);
set_val(XB1_PL1    , 0 ); 	set_val(XB1_PL2   , 0 );	set_val(XB1_PR1   , 0 );	set_val(XB1_PR2     , 0);

}

 
define TITLE_SCREEN   = 0;
define WEAPON_MOD     = 1;
define MOD_MENU       = 2;
define EDIT_MENU      = 3;

define ID          = 0;      	
define TIMEOUT     = 1;        	
define LED         = 2;       	 
define PARENT      = 3;       	
define BLOCK_INPUT = 4;		    

const int8 SCREEN_DATA[][] = {

    {TITLE_SCREEN,       TRUE,		 TRUE,	          FALSE,		 FALSE},
    {WEAPON_MOD,         TRUE,		 TRUE,	           TRUE,	      TRUE},
    {MOD_MENU,           TRUE,		 TRUE,	           TRUE,	      TRUE},
    {EDIT_MENU,          TRUE,		 TRUE,	           TRUE,	      TRUE}  
};

int activeScreen,lastScreen,updateScreen;


function ScreenActive(screenID) {
    lastScreen = activeScreen;
    activeScreen = screenID;
    updateScreen = TRUE;
    
} 
//position range [0..15]
function pack_usigned(int pvar, int ret, int position, int number_of_bits)
{
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	
	pvar = pvar | (ret<<position);
	
	return pvar;
}

//position range [0..15]
function unpack_usigned(int pvar, int position, int number_of_bits)
{
	mask = 0;
	ret = 0;
	
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	
	mask = mask <<position
	ret = (pvar & mask) >> position;
	
	return ret;
}

//position range [0..1]   |  ret range = [-127..127]
function pack_int8_to_int16(int var1, int var2)
{
	ret = 0;
	
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}

	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
	
	return ret;
}


//position range [0..1]   |  ret range = [-127..127]
function unpack_int16_to_int8(int pvar, int var)
{
	ret = 0;
	
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	
	return ret;
}

function  NAME(){
		cls_oled(0);
		combo_run(RACE);
		combo_run(RN);
	if (Y_1 > 64)  
		Y_1 =  0;
	if (Y_2 > 64)  
		Y_2 =  0;
	if (Y_3 > 64)  
		Y_3 =  0;
	if (Y_4 > 64)  
		Y_4 =  0;
	if (Y_5 > 64)  
		Y_5 =  0;
	if (Y_6 > 64)  
		Y_6 =  0;
	if (Y_7 > 64)  
		Y_7 =  0;
	if (Y_8 > 64)  
		Y_8 =  0;
	if (SD1 > 105) 
		SD1 = -50;
	if (TP1 > 45)  
		TP1 =  0;
	if (TP2 < 0)   
		TP2 = 55;
		putc_oled(1,RN1);
		puts_oled(X_1,Y_1,0,1,1);
		putc_oled(1,RN2);
		puts_oled(X_2,Y_2,0,1,1);
		putc_oled(1,RN3);
		puts_oled(X_3,Y_3,0,1,1);
		putc_oled(1,RN4);
		puts_oled(X_4,Y_4,0,1,1);
		putc_oled(1,RN5);
		puts_oled(X_5,Y_5,0,1,1);
		putc_oled(1,RN6);
		puts_oled(X_6,Y_6,0,1,1);
		putc_oled(1,RN7);
		puts_oled(X_7,Y_7,0,1,1);
		putc_oled(1,RN8);
		puts_oled(X_8,Y_8,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU1 + SD1,TP1 + 2,0,1,1);
		putc_oled(1,SSA2);
		puts_oled(SSMU2 + SD1,TP2 + 4,0,1,1);
		putc_oled(1,SSA3);
		puts_oled(SSMU3 + SD1,TP1 + 6,0,1,1);
		putc_oled(1,SSA4);
		puts_oled(SSMU4 + SD1,TP2 + 8,0,1,1);
		putc_oled(1,SSA5);
		puts_oled(SSMU5 + SD1,TP1 + 10,0,1,1);
		putc_oled(1,SSA6);
		puts_oled(SSMU6 + SD1,TP2 + 12,0,1,1);
		putc_oled(1,SSA7);
		puts_oled(SSMU7 + SD1,TP1 + 14,0,1,1);
		putc_oled(1,SSA8);
		puts_oled(SSMU8 + SD1,TP2 + 16,0,1,1);
		putc_oled(1,SSA9);
		puts_oled(SSMU9 + SD1,TP1 + 18,0,1,1);
		putc_oled(1,SSA10);
		puts_oled(SSMU10 + SD1,TP2 + 20,0,1,1);
		putc_oled(1,SSA11);
		puts_oled(SSMU11 + SD1,TP1 + 22,0,1,1);
		putc_oled(1,SSA1);
		puts_oled(SSMU12 + SD1,TP2 + 24,0,1,1);
		putc_oled(1,SSA13);
		puts_oled(SSMU13 + SD1,TP1 + 26,0,1,1);
		putc_oled(1,SSA14);
		puts_oled(SSMU14 + SD1,TP2 + 28,0,1,1);
}
const uint8 BUTTONS[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 12
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 14 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 15 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }};// STICK AND MOVE SWAPPED = 16
	
function Buttons(Type) {
	
	Fire     = BUTTONS[Type][0];
	Ads      = BUTTONS[Type][1];
	Lethal   = BUTTONS[Type][2];
	Tactical = BUTTONS[Type][3];
	Jump     = BUTTONS[Type][4];
	Crouch   = BUTTONS[Type][5];
	Melee    = BUTTONS[Type][6];
	Sprint   = BUTTONS[Type][7];
	Reload   = BUTTONS[Type][8];
	Swap     = BUTTONS[Type][9];
	Ping     = BUTTONS[Type][10];
	
}

	const uint8 ASCII_NUM[] = 

  	{48,49,50,51,52,53,54,55,56,57};

	int c,c_val;
	int RT,MSC,SD1,DGT,DGR,TP1,TP2;

data(
       
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
    
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );


function Save(){ 
   combo_run(SAVE)
   
   do {
    set_pvar(SPVAR_1 + i, save_loadout[i]);
  } while(i = (i + 1) % 15);
  
  pval_data = pack_usigned(pval_data, toggle_rapidfire[0],  0, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[1],  1, 1);
  pval_data = pack_usigned(pval_data, toggle_rapidfire[2],  2, 1);
  pval_data = pack_usigned(pval_data, toggle_taylorassist,  3, 1);
  pval_data = pack_usigned(pval_data, toggle_batts_sticky,  4,1);
  pval_data = pack_usigned(pval_data, toggle_quickscope,    5,1);
  pval_data = pack_usigned(pval_data, toggle_holdbreath,    6,1);
  pval_data = pack_usigned(pval_data, toggle_cancel_slide,  7,1);
  pval_data = pack_usigned(pval_data, toggle_jump_shot,     8,1);
  set_pvar(SPVAR_16,pval_data);
  
  // AR Toggle (Legacy,Progressive)                                          AR Toggle (Legacy) (Button Layout Toggle)                                            
  pval_data = pack_int8_to_int16(toggle_antirecoil[0],toggle_antirecoil[1]); pval_data = pack_int8_to_int16(toggle_antirecoil[2],btn_layout);             
  set_pvar(SPVAR_17,pval_data);                                              set_pvar(SPVAR_18,pval_data);                                             
  
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_start[0],antirecoil_start[1]);   pval_data = pack_int8_to_int16(antirecoil_start[2],antirecoil_start[3]);  pval_data = pack_int8_to_int16(antirecoil_start[4],antirecoil_start[5]);  
  set_pvar(SPVAR_19,pval_data);                                              set_pvar(SPVAR_20,pval_data);                                             set_pvar(SPVAR_21,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_start[6],antirecoil_start[7]);   pval_data = pack_int8_to_int16(antirecoil_start[8],antirecoil_start[9]);  pval_data = pack_int8_to_int16(antirecoil_start[10],antirecoil_start[11]);  
  set_pvar(SPVAR_22,pval_data);                                              set_pvar(SPVAR_23,pval_data);                                             set_pvar(SPVAR_24,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values 
  pval_data = pack_int8_to_int16(antirecoil_start[12],antirecoil_start[13]); pval_data = pack_int8_to_int16(antirecoil_start[14],antirecoil_end[14]);  pval_data = pack_int8_to_int16(antirecoil_end[0],antirecoil_end[1]); 
  set_pvar(SPVAR_25,pval_data);                                              set_pvar(SPVAR_26,pval_data);                                             set_pvar(SPVAR_27,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_end[2],antirecoil_end[3]);       pval_data = pack_int8_to_int16(antirecoil_end[4],antirecoil_end[5]);      pval_data = pack_int8_to_int16(antirecoil_end[6],antirecoil_end[7]);
  set_pvar(SPVAR_28,pval_data);                                              set_pvar(SPVAR_29,pval_data);                                             set_pvar(SPVAR_30,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_end[8],antirecoil_end[9]);       pval_data = pack_int8_to_int16(antirecoil_end[10],antirecoil_end[11]);    pval_data = pack_int8_to_int16(antirecoil_end[12],antirecoil_end[13]);
  set_pvar(SPVAR_31,pval_data);                                              set_pvar(SPVAR_32,pval_data);                                             set_pvar(SPVAR_33,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_time[0],antirecoil_time[1]);     pval_data = pack_int8_to_int16(antirecoil_time[2],antirecoil_end[3]);     pval_data = pack_int8_to_int16(antirecoil_time[4],antirecoil_time[5]);
  set_pvar(SPVAR_34,pval_data);                                              set_pvar(SPVAR_35,pval_data);                                             set_pvar(SPVAR_36,pval_data);
  // AR Temp Values                                                          AR Temp Values                                                            AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_time[6],antirecoil_time[7]);     pval_data = pack_int8_to_int16(antirecoil_time[8],antirecoil_end[9]);     pval_data = pack_int8_to_int16(antirecoil_time[10],antirecoil_time[11]);
  set_pvar(SPVAR_37,pval_data);                                              set_pvar(SPVAR_38,pval_data);                                             set_pvar(SPVAR_39,pval_data); 
  // AR Temp Values                                                          AR Temp Values/Rate Of Fire                                               AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_time[12],antirecoil_time[13]);   pval_data = pack_int8_to_int16(antirecoil_time[14],rate_of_fire[2]);      pval_data = pack_int8_to_int16(antirecoil_horizontal[0],antirecoil_horizontal[1]);
  set_pvar(SPVAR_40,pval_data);                                              set_pvar(SPVAR_41,pval_data);                                             set_pvar(SPVAR_42,pval_data); 
  // AR Temp Values                                                                    AR Temp Values/Rate Of Fire                                                             AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_horizontal[2],antirecoil_horizontal[3]);   pval_data = pack_int8_to_int16(antirecoil_horizontal[4],antirecoil_horizontal[5]);      pval_data = pack_int8_to_int16(antirecoil_horizontal[6],antirecoil_horizontal[7]);
  set_pvar(SPVAR_43,pval_data);                                                        set_pvar(SPVAR_44,pval_data);                                                           set_pvar(SPVAR_45,pval_data); 
  // AR Temp Values                                                                    AR Temp Values/Rate Of Fire                                                             AR Temp Values
  pval_data = pack_int8_to_int16(antirecoil_horizontal[8],antirecoil_horizontal[9]);   pval_data = pack_int8_to_int16(antirecoil_horizontal[10],antirecoil_horizontal[11]);    pval_data = pack_int8_to_int16(antirecoil_horizontal[12],antirecoil_horizontal[13]);
  set_pvar(SPVAR_46,pval_data);                                                        set_pvar(SPVAR_47,pval_data);                                                           set_pvar(SPVAR_48,pval_data); 
  // AR Temp Values                                                          Rate Of Fire                                                              AA Values/Polar
                                                                             pval_data = pack_int8_to_int16(rate_of_fire[0],rate_of_fire[1]);          pval_data = pack_int8_to_int16(RADIUS,STEPS);
  set_pvar(SPVAR_49,antirecoil_horizontal[14]);                              set_pvar(SPVAR_50,pval_data);                                             set_pvar(SPVAR_51,pval_data); 
  // Batts Sticky Aim Values                                                            
  pval_data = pack_int8_to_int16(stickyaim_size,stickyaim_time);      
  set_pvar(SPVAR_53,pval_data);
  set_pvar(SPVAR_52,STEADY_AIM); 
  set_pvar(SPVAR_54, toggle_quickscope);
  set_pvar(SPVAR_55,enemy_ping); 
  
} 