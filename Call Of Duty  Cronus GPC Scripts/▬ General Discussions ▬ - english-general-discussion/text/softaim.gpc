const int picture[] = {128, 64, 0x01FF, 0xFFFF, 0xFFC0, 0x0000, 0x003F, 0xFFFF, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFF80, 0x0000, 0x0000, 0x3FFF, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFE3F, 0xFFFF, 0xFFF8, 0x03FF, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFC7F, 0xFBFF, 0xFFFF, 0x007F, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xF8FF, 0xEFFF, 0xFFFF, 0xFE1F, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xF9FF, 0xBFFF, 0xFFFF, 0xFF87, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xF3FE, 0xF7FF, 0xFFFF, 0xFFE3, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xE7FF, 0xFFFF, 0xFFFF, 0xFFF1, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xE7FF, 0x77FF, 0xFFFF, 0xEFFC, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xCFFD, 0xDFFF, 0xFFFF, 0xFBFE, 0x7FFF, 0xFF00, 0x01FF, 0xFFFF, 0xCFFB, 0x7FFF, 0x7FFF, 0xFFFE, 0x7FFF, 0xFF00, 0x01FF, 0xFFFF, 0x9FF6, 0xFFFF, 0xFFFF, 0xFEFE, 0x7FFF, 0xFF00, 0x01FF, 0xFFFF, 0x9FFD, 0xFFFF, 0xFFFF, 0xFFFE, 0x7FFF, 0xFF00, 0x01FF, 0xFFFF, 0x3FFF, 0xC007, 0xFFFF, 0xFFFF, 0x7FFF, 0xFF00, 0x01FF, 0xFFFE, 0x3FFF, 0x0001, 0xFFFF, 0xFFFF, 0x3FFF, 0xFF00, 0x01FF, 0xFFFC, 0x7FFE, 0x0078, 0xFFFC, 0x01FF, 0x9FFF, 0xFF00, 0x01FF, 0xFFF8, 0x7FFC, 0x403E, 0x3FF0, 0x00FF, 0x8FFF, 0xFF00, 0x01FF, 0xFFF0, 0x7FDC, 0x000F, 0x3FC0, 0x01FF, 0xE7FF, 0xFF00, 0x01FF, 0xFFE5, 0xFFFE, 0x7FC0, 0x3F00, 0x1FFF, 0x73FF, 0xFF00, 0x01FF, 0xFFC3, 0xC03F, 0xF9F0, 0x7F87, 0xFFFF, 0xD3FF, 0xFF00, 0x01FF, 0xFF8F, 0x870F, 0xF1FD, 0xFFCF, 0xFFFF, 0x6BFF, 0xFF00, 0x01FF, 0xFF97, 0x3FC1, 0x83FF, 0xFFCF, 0xFF81, 0xF9FF, 0xFF00, 0x01FF, 0xFFBE, 0x3DF0, 0x0FFF, 0xFFCF, 0xE610, 0xF9FF, 0xFF00, 0x01FF, 0xFF3E, 0x7CFF, 0xFFFF, 0xFFE7, 0xE07F, 0xF9FF, 0xFF00, 0x01FF, 0xFF3E, 0xF83F, 0xFFFF, 0xFFE3, 0xF07F, 0xF9FF, 0xFF00, 0x01FF, 0xFF3E, 0xF00F, 0xFFF8, 0x7FF1, 0xFFCF, 0xB9FF, 0xFF00, 0x01FF, 0xFF3E, 0xC1C3, 0xFFD0, 0xFFFC, 0x7FCF, 0xFBFF, 0xFF00, 0x01FF, 0xFF3E, 0x61F0, 0xFFF3, 0xFFFC, 0x3FC7, 0xE3FF, 0xFF00, 0x01FF, 0xFFBE, 0x78F8, 0x1FF3, 0x07F8, 0x1FC7, 0xD3FF, 0xFF00, 0x01FF, 0xFF9F, 0x7CFC, 0x03F1, 0x07F1, 0xF787, 0x67FF, 0xFF00, 0x01FF, 0xFF8B, 0xFC3E, 0xE079, 0xFF63, 0xFF03, 0xE7FF, 0xFF00, 0x01FF, 0xFFCC, 0xFE0E, 0xFC0F, 0xFF07, 0xFE03, 0xCFFF, 0xFF00, 0x01FF, 0xFFE7, 0xFE00, 0x7F80, 0xFF8F, 0xF043, 0xCFFF, 0xFF00, 0x01FF, 0xFFF1, 0xFF20, 0x3FC0, 0x03FF, 0x8043, 0xDFFF, 0xFF00, 0x01FF, 0xFFF1, 0xFF98, 0x0FCF, 0x8000, 0x0763, 0xDFFF, 0xFF00, 0x01FF, 0xFFF8, 0xFF8E, 0x01CF, 0xF381, 0xE723, 0xDFFF, 0xFF00, 0x01FF, 0xFFFC, 0x7FCE, 0x001F, 0xF3E7, 0xE703, 0xDFFF, 0xFF00, 0x01FF, 0xFFFE, 0x7FE6, 0x7007, 0xF3E7, 0xE603, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0x3FF0, 0xFC00, 0x0000, 0x0003, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0x3FF8, 0xFF00, 0x0000, 0x0003, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0x9FFC, 0xFFB0, 0x0000, 0x0003, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0x9FFE, 0x7F3F, 0x0000, 0x0003, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xCFFF, 0x1F3F, 0xC000, 0x0007, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xE7FF, 0x8F3F, 0xEFC0, 0x0007, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xE3FF, 0xE27F, 0xEFE7, 0x1927, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xF1FF, 0xF07F, 0xEFCF, 0x330F, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xF8FF, 0xFC1F, 0xCFCF, 0x331F, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFE77, 0xBF01, 0xCFCE, 0x303F, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFF1D, 0xEFF0, 0x0000, 0x00FF, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFF87, 0x7BFF, 0x8000, 0x1FFF, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFE3, 0xDF7F, 0xFFFF, 0xFFFF, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFF0, 0xFBDF, 0xFFFF, 0xFFBF, 0xDFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFC, 0x3FFB, 0xFFFF, 0xFF7F, 0xCFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0x07FF, 0xFFFF, 0xFDFB, 0xCFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xC1FF, 0xFFFF, 0xFFF7, 0xCFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xF87F, 0xFFFF, 0xFFDF, 0xCFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFE1F, 0xFFFF, 0xFFBF, 0xCFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFF87, 0xFFFF, 0xFFFF, 0x9FFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFE1, 0xFFFF, 0xFFFF, 0x1FFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFF8, 0x1FFF, 0xFFFF, 0x3FFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFFE, 0x01FF, 0xFFFC, 0x7FFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE01F, 0xFFF0, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFF00, 0x7F83, 0xFFFF, 0xFF00, 0x01FF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFF0, 0x000F, 0xFFFF, 0xFF00};

main {
	if (get_val(XB1_A)) {
		draw_picture(0, 0, 0);
	}
	else if (get_val(XB1_B)) {
		draw_picture(0, 0, 1);
	}
}
int __pictureX, __pictureX2, __pictureY, __pictureY2, __pictureBit, __pictureOffset, __pictureData;
function draw_picture(x, y, invert) {
	__pictureOffset = 2; // Reset the starting point
	__pictureBit = 16; // Reset bit flag
	for (__pictureY = 0; __pictureY < picture[1]; __pictureY++) { // Loop the Y axis
		for (__pictureX = 0; __pictureX < picture[0]; __pictureX++) { // Loop the X axis
			__pictureData = picture[__pictureOffset]
			__pictureX2 = x + __pictureX;
			__pictureY2 = y + __pictureY;
			if (__pictureX2 < 0 || __pictureX2 >= 128) {
				__pictureX2 -= 128;
			}
			if (__pictureY2 < 0 || __pictureY2 >= 64) {
				__pictureY2 -= 64;
			}
			if (test_bit(__pictureData, __pictureBit - 1)) {
				pixel_oled(__pictureX2, __pictureY2, !invert);
			}
			else {
				pixel_oled(__pictureX2, __pictureY2, invert);
			}
			__pictureBit--; // Decrement the bit flag, we're moving to the next bit
			if (!__pictureBit) { // Check if we've just handled the last bit
				__pictureBit = 16; // Reset the bit flag
				__pictureOffset++; // Move to the next value
			}
		}
	}
}