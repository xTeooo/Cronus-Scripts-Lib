// GPC Online Library
// cod_ww2__all_consoles__all_the_good_stuff_right_here_9_0.gpc

/********************************************************************************************************

  __      __  __      __________                                               
  /  \    /  \/  \    /  \_____  \                                              
  \   \/\/   /\   \/\/   //  ____/                                              
   \        /  \        //       \                                              
    \__/\  /    \__/\  / \_______ \                                             
         \/          \/          \/       

 _                       _                        _  _    |  | 
|_| |  |    _|_|_  _    (_| _  _  _|    _ _|_   _|__|_    |  | 
| | |  |     |_| |(/_   __|(_)(_)(_|   _>  |_|_| |  |     o  o 

																                                      
         
********************************************************************************************************
COD WW2 All the Good Stuff script from CronusMax_User, the creator of competitive COD scripts for experienced players and 
proud members of the biggest mod community in the world: the CronusMAX forums! 

BEST COD SCRIPT you will find anywhere... like always.
Ideal for players using TACTICAL button config. Script is a collection of mods from different sources. 
If you are any good in this game, this script will allow you to become a beast! 
Thanks to Excalibur, Xdot22, Lex Host and all the others at CronusMax.

Credits: 
Mods developed by: Excalibur, x22DOT, CronusMax_User and others 
Script idea & Set Up: CronusMax_User 

PS4 & ELITE CONTROLLER
- PS4 Users of the ELITE controller can use the VIEW/SHARE button to bring up the leader board
- To activate, search the script for "int PS4_Compatible = FALSE;" and change this to "int PS4_Compatible = TRUE;"
- you will find this somehwere around line 300 - 315

Tools & mods used: 
•	SGI tool (from Excalibur)
•	Script Manipulator (from Excalibur)
•	Aim Assist (from xDOT22)
•	Personal mods (from CronusMax_User)
•	And other COD mods (from previous CM developers)
•	Version 9.00:	Small enhancements / Final version
•	Version 8.05:	Small enhancements
•	Version 8.04:	Fixed update 8.03, I saved the WRONG version, sorry! 
					In this version resetting script or changing settings really do no longer activate the KS Easy run	
•	Version 8.03:	Added PS4 compability for ELITE controllers
•	Version 8.02:	Fixed "Resetting script no longer activate KS Easy run"	
•	Version 8.01:	Added two cancel reload options
•	Version 8.00: 	Added reload times to combine with Easy Sprint. 
					Added colour led when all rapid fire modes are switched off. 
					Grouped and re-arranged switches and toggles (advise from Excalibur)
					Made changes in the script to make it more user-friendly for users of all consoles
					Resetting script no longer activate KS Easy run
					Added ADS Midpoint (higher midpoint value makes you more accurate when you aim)
					Added Aim Assist (Xdot22) - the aim assist exploid that makes your aim more sticky
					Removed adjustable rapid fire (because you only need the fastest RF settings
					Removed Anti Recoil (because AR does not really make sense for moving target)
					Cleaned script

********************************************************************************************************

LED COLOURS: (remember to hold reload for 1 sec when you DIE to reset the script)

- BLUE				: STANDARD COLOUR / STANDARD SET UP
- YELLOW WHEN ADS	: AIM ASSIST SCRIPT IS RUNNING (= so yes, it is working!)
- SKY BLUE BLINKING	: AKIMBO_SET_UP IS ACTIVATED
- SKY BLUE			: EASY AKIMBO SCRIPT IS RUNNING (= so yes, it is working!)
- RED BLINKING		: RAPID FIRE SET UP IS ACTIVATED
- RED				: RAPID FIRE SCRIPT FOR SECONDARY GUN IS RUNNING
- GREEN BLINKING	: QUICKSCOPE SET UP IS ACTIVATED
- GREEN WHEN ADS	: AUTO BREATH SCRIPT IS RUNNING (= so yes, it is working!)
- PINK				: ALL RAPID FIRE MODES OFF
- WHITE WHEN FIRE	: ADS SENS IS ON


********************************************************************************

HOLD ADS + TAP

- UP					:	STANDARD SET UP
- DOWN					:	AKIMBO SET UP
- RIGHT					:	RAPID FIRE SET UP
- LEFT					:	ALL RAPID FIRE OFF
- VIEW/SHARE			:	RESET EPROM MEMORY TO DEFAULT VALUES
- MENU/OPTIONS			:	SAVE ADJUSTABLE SETTINGS TO EPROM

HOLD DOWN + 				

- TAP PRONE				:	EASY DROP		OFF/ON
- TAP TACTICAL			:	QUICKSCOPE		ON/OFF
- TAP FIRE				:	AUTO AIM		ON/OFF
- TAP ADS				:	ADS SENSITIVITY	ON/OFF
- HOLD ADS +200ms		:	AIM ASSIST		OFF/ON
- TAP MELEE				:	EASY MELEE		OFF/ON
- TAP SPRINT			:	EASY SPRINT		OFF/ON

OFF/ON = ON BY DEFAULT / ON/OFF = OFF BY DEFAULT

HOLD JUMP + TAP			:	ON THE FLY WITH SAVE & RESET OPTIONS

- UP 	increase		:	ADS SENS +2
- DOWN 	decrease		:	ADS SENS -2
- RIGHT	increase		:	MIDPOINT +2
- LEFT	decrease		:	MIDPOINT -2

HOLD RELOAD + TAP		:	2000 = ON BY DEFAULT

- LEFT					:	2000 (STG, most Riffles) 
- RIGHT					:	2500 (Most Shot Guns)
- DOWN 					:	1500 (Sten, most SMG`s)
- UP 					:	5000 (MG15, LMG`s)

StandardSetUp 
- primary weapon: normal fire (BLUE)
- secondary weapon: rapid fire (for pistol) (RED)
- hold reload button for 2 sec to reset (when you die) 
- The script will start with this Set Up
- Standard on
 
RapidFireSetUp 
- primary weapon: rapid fire (suitable for semi auto rifles) (RED BLINKING)
- secondary weapon: rapid fire (for hand gun)(RED)
- hold reload button for 2 sec to reset (when you die) 

AkimboSetUP
- primary weapon: normal fire (SKY BLUE BLINKING)
- secondary weapon: easy akimbo with rapid fire (SKY BLUE)
- for pistols, to fire press either LT or RT 
- hold reload button for 2 sec to reset (when you die)

Rapid Fire OFF
- will switch all rapid fire modes OFF 

AIM ASSIST
- OPTMIZED FOR CONTROLLER & SENS 6 - 12
- If you ADS it will stick better on your target (but not as sticky as with previous COD games)
- standard ON

To test Aim Assist settings:
To test settings, start a Custom Game with two controllers. Toggle ADS on the controller with Aim Assist 
and move the character without Aim Assist in front of your character to test stickiness. 

ADS SENSITIVITY 
When activated: 
- start value ADS SENS = 100% (standard value) 
- start value MIDPOINT = 50% (standard value) 
- A higher midpoint value makes it easier to be more accurate when you aim 
- to increase / decrease sensitivity during a game see above. 
- to save new values HOLD ADS + TAP MENU/OPTIONS
- to reset settings to standard values HOLD ADS + TAP VIEW/SHARE
- this mod is standard OFF

Sensitivity adjusts the sensitivity of an analogue controller entry, usually this is an axis. 
The function takes three parameters, the control to be modified, the midpoint and the sensitivity multiplier. 
Midpoint sets the midpoint value of the controller entry.  
A higher midpoint value makes it easier to be more accurate when you aim (low pressure on the analog stick) but at the same time allowing you to move more rapidly if you pressure the analog stick harder.

For more info about this: 
http://cronusmax.com/manual/controller_i_o_functions.htm
cronusmax.com/forums/showthread.php/178538-SENSITIVITY-FINE-TUNING-SCRIPT
 
EASY MELEE (to combine with TACTICAL button lay out in the game!)
- should be used in combination with AUTOSPRINT: 
- if you use AUTOSPRINT you no longer need to press LS to start sprinting, 
- instead use LS for your melee attack! 
- it takes a few games to get used to it, but once you are: you will love it!
- Standard ON
 
HAIR TRIGGERS (both ADS + FIRE)
- standard ON 
 
EASY SPRINT
- press LS forward to sprint. Reloading your gun will pauze the auto sprint for a moment, allowing you to reload
- standard ON
- To have this mod standard switched off: change [int easy_run] to FALSE;
- this EASY SPRINT will always work, so you can keep the thumbstick presssed forward NON_STOP:
  your character will automatically start sprinting after reloading and after regaining breath.  

RELOAD TIMES DURING EASY SPRINT
- tapping reload will pauze auto sprint and give you exactly enough time to reload
- to decrease or increase the reload times: 
- HOLD RELOAD + TAP:
	- LEFT: 	2000 (STG, most riffles)
	- RIGHT: 	2500 (Toggle shot gun, most other shot guns)
	- DOWN: 	1500 (Sten, most SMG`s)
	- UP: 		5000 (MG15, most LMG`s)
- Now, next time you tap reload the above times will be applied

CANCEL RELOAD
- Kill Switch for the Easy Run Kill Switch :) :) :)
- To cancel reload whilst you are moving forward, either tap ADS or FIRE quickly to cancel reload
- Now, whilst you are still moving foward you can start firing or aim + fire straight away
  
AUTO AIM 
- AUTO ADS when you fire
- Standard switch OFF
 
EASY DROP SHOT 
- if you press PRONE you will DROP (just tap or click prone button once)
- if you want to prone instead of drop: 
   - tap once on D-PAD LEFT if you want to prone normally;
   - you now have a short time frame to prone normally, because easy drop shot is switched off for 30 seconds
   - rumble after 30 seconds indicates that drop shot is active again     
- standard ON

********************************************************************************

  __      __  __      __________                                               
  /  \    /  \/  \    /  \_____  \                                              
  \   \/\/   /\   \/\/   //  ____/                                              
   \        /  \        //       \                                              
    \__/\  /    \__/\  / \_______ \                                             
         \/          \/          \/  
         
 _                       _                        _  _    |  | 
|_| |  |    _|_|_  _    (_| _  _  _|    _ _|_   _|__|_    |  | 
| | |  |     |_| |(/_   __|(_)(_)(_|   _>  |_|_| |  |     o  o 

         
********************************************************************************
/////////////////////////////////////////////////////////////////////////////////
//  AIM ASSIST				: ON BY DEFAULT / D-PAD UP + ADS TO SWITCH OFF/ON
//	OPTIMISED FOR			: CONTROLLERS & SENSITIVITY 6 - 12                                                                
//  BUTTON LAYOUT			: TACTICAL                            
//  BUMPERS / TRIGGERS		: DEFAULT                    
//  STICKS					: DEFAULT 
//  VERSION					: 9.00
/////////////////////////////////////////////////////////////////////////////////
********************************************************************************/
define FIRE_BTN           = XB1_RT; 
define ADS_BTN            = XB1_LT; 
define SPRINT_BTN         = XB1_LS; 
define MELEE_BTN          = XB1_B; 
define JUMP_BTN           = XB1_A;  
define RELOAD_BTN         = XB1_X;  
define PRONE_BTN          = XB1_RS;  
define SW_WEAPON_BTN   	  = XB1_Y;  
define TACTICAL           = XB1_LB;  
define LETHAL             = XB1_RB;
define UP                 = XB1_UP; 
define RIGHT              = XB1_RIGHT; 
define DOWN               = XB1_DOWN; 
define LEFT               = XB1_LEFT; 
define LY                 = XB1_LY;
define LX                 = XB1_LX;
define RY                 = XB1_RY;
define RX                 = XB1_RX;
define R_T   = XB1_RT; 
define L_T   = XB1_LT;                       
define R_X   = XB1_RX;                              
define R_Y   = XB1_RY;                              
define L_X   = XB1_LX;                              
define L_Y   = XB1_LY; 
define save  =  2;
define reset =	1;
define Blue       =  1;                                                           
define Red        =  2;                                                           
define Green      =  3;                                                           
define Pink       =  4;                                                           
define SkyBlue    =  5;                                                           
define Yellow     =  6;                                                           
define White      =  7;                                                           
//-------------------------------------------------------------------------------- 
data(1,                                                                            
  2,0,0,0, //1. Blue                                                               
  0,2,0,0, //2. Red                                                                
  0,0,2,0, //3. Green                                                              
  0,0,0,2, //4. Pink                                                               
  2,0,2,0, //5. SkyBlue                                                            
  0,2,2,0, //6. Yellow                                                             
  2,2,2,2  //7. White                                                              
);                                                                                 
//-------------------------------------------------------------------------------- 
int Col_ind;
int ShotMode_KS = FALSE;
int hold_time   = 35;
int rest_time   = 35;
//int hold1_time1;
//int rest1_time1;
//int RATE_OF_FIRE = 14; //Range: 1 to 25 RPS (Round/s)
int PrimaryWeapon   = TRUE;
int RF_KS   = FALSE;
int R2F_K2S	= TRUE;
// Aim Assist values below can be adjusted to find settings that match your preference
//------------------------------------START AIM ASSIST VALUES-------------------------------------------------------------------------------
int ads_assist    = TRUE; // AIM ASSIST /  OFF by default -  optimised for assault riffles and sensitivity 5 -14
int	value       =  28;                 
int value2      = -28; 
int negative_value_lt_first     = -25; 
int positive_value_lt_first     =  25;  
int positive_value_lt_second    =  25;                                   
int negative_value_rt_first     = -34; 
int positive_value_rt_first     =  34;  
int positive_value_rt_second    =  23;
int delay       = 11; 
//----------------------------------END AIM ASSIST VALUES-----------------------------------------------------------------------------------
int easy_run      = TRUE ;
int easy_run_KS;
int KS_time = 2000;
int hair_trigger    = TRUE; 
int EASYMELEE	= TRUE;  
int QuickScope = FALSE;
int akimbo_onoff = FALSE;
int Auto_aim = FALSE;
int RAPIDoff
int ADS_SENS;  	
int MIDPOINT;
int ads_sens = FALSE;
int PS4_Compatible= FALSE; //ELITE CONTROLLER ON PS4 --> CHANGE "FALSE;" TO "TRUE;"


init{                                                                                 

 	MIDPOINT = get_pvar (SPVAR_2, 0, 100, 50);
 	ADS_SENS = get_pvar (SPVAR_5, 0, 327, 100);

}
//------------------------------------------------------------------------------ 
//============================= MAIN BLOCK       =============================== 
main { // begin of main block
set_val(TRACE_1,R2F_K2S);
set_val(TRACE_2,akimbo_onoff);
set_val(TRACE_3,RF_KS);
set_val(TRACE_4,RAPIDoff);
set_val(TRACE_5,ads_sens);
set_val(TRACE_6,ads_assist);

///////////////////////////////////////////////////////////////
///   MENU SYSTEM / HOLD ADS + ///////////////////////////////
/////////////////////////////////////////////////////////////

if(get_val(ADS_BTN)){//  hold ADS button + D pad buttons
    
////////////////////////////////
// SAVE TO EPROM

	if(event_press(save)){		// XB1 START / PS4 OPTIONS
			save_pvars();
			combo_run(STANDARD_ON)
			set_val(2, 0);      
		}
////////////////////////////////
// RESET EPROM TO DEFAULT
		
 
    if(event_press(reset)){ 	// XB1 VIEW / PS4 SHARE
        MIDPOINT = 50;
        ADS_SENS = 100;
        set_pvar (SPVAR_2, MIDPOINT);
        set_pvar (SPVAR_5, ADS_SENS);
        set_val(1, 0);
    }
    
////////////////////////////////
// STANDARD SET UP

	if(event_press(UP)){// D pad UP
            RF_KS  = FALSE;
            R2F_K2S  = TRUE;
            akimbo_onoff = FALSE;
            RAPIDoff = FALSE;            
		}
////////////////////////////////
// AKIMBO SET UP

	if(event_press(DOWN)) {// D pad DOWN  
            RF_KS  = FALSE;
            R2F_K2S  = FALSE;
            akimbo_onoff = TRUE; 
          	RAPIDoff = FALSE;
		}                                      
////////////////////////////////
// RAPID FIRE SET UP

	if(event_press(RIGHT)) {// D pad RIGHT
            RF_KS  = TRUE;
            R2F_K2S  = TRUE;
            akimbo_onoff = FALSE;
            RAPIDoff = FALSE;
		}
////////////////////////////////
// RAPID FIRE OFF

	if(event_press(LEFT)) {// D pad LEFT
            RF_KS  = FALSE;
            R2F_K2S  = FALSE;
            akimbo_onoff = FALSE;
            RAPIDoff = TRUE;
		}
}
///////////////////////////////////////////////////////////////
///   MENU SYSTEM / HOLD DOWN + ///////////////////////////////
/////////////////////////////////////////////////////////////

if(get_val(DOWN)){			//  hold D pad button DOWN +
    

////////////////////////////////
// EASY DROP

	if (event_press(PRONE_BTN))  { 			// PRONE 
			ShotMode_KS = !ShotMode_KS;  
		}
		
////////////////////////////////
// QUICKSCOPE

	if (event_press(TACTICAL))  { 			// TACTICAL
			QuickScope = !QuickScope; 
		}   
///////////////////////////////
// ADS SENS
	if(event_press(ADS_BTN) 
		&& get_ptime(ADS_BTN)< 200){		// TAP ADS BUTTON
			ads_sens = !ads_sens;   
		}
///////////////////////////////
// ADS ASSIST		
		
	if(event_release(ADS_BTN) 
		&& get_ptime(ADS_BTN)> 200){		// HOLD ADS BUTTON
			ads_assist = !ads_assist;   
		}
		
////////////////////////////////
// AUTO AIM

	if(event_press(FIRE_BTN)) {				// FIRE
			Auto_aim = !Auto_aim;         	                                      
		}                                                          
			set_val(FIRE_BTN,0);
		} 
		
////////////////////////////////
// EASY MELEE

	if (event_press(MELEE_BTN))  { 			// MELEE 
			EASYMELEE = !EASYMELEE; 
		}
////////////////////////////////
// EASY SPRINT

	if (event_press(SPRINT_BTN))  { 		// SPRINT
			easy_run = !easy_run;  
		}    
		
///////////////////////////////////////////////////////////////
///   MIDPOINT / ADS SENS ON THE FLY /// HOLD JUMP_BTN + /////
/////////////////////////////////////////////////////////////

 if(get_val(JUMP_BTN)){ //  	hold JUMP button +    
 
        if(event_press(RIGHT)){                                    
            MIDPOINT = MIDPOINT + 2;		// RIGHT                  
        }                                                        
        if(event_press(LEFT)) {                                   
            MIDPOINT = MIDPOINT - 2;		// LEFT                         
        }                                                         
       set_val(RIGHT,0); set_val(LEFT,0);                         
                                                                 
        if(event_press(UP)){                                   
            ADS_SENS = ADS_SENS + 2;		// UP          
        }                                                       
        if(event_press(DOWN)){                                   
            ADS_SENS = ADS_SENS - 2;		// DOWN                 
        }    
        set_val(UP,0); set_val(DOWN,0);                       
                                                             
 }
///////////////////////////////////////////////////////////////////
//RELOAD TIMES /////////HOLD X + /////////////////RELOAD TIMES////
/////////////////////////////////////////////////////////////////  
                          
if (get_val(RELOAD_BTN)){

	if(event_press(LEFT))  {KS_time = 2000;}// LEFT : 2000       	
 	if(event_press(RIGHT)) {KS_time = 2500;}// RIGHT: 2500  
 	if(event_press(DOWN))  {KS_time = 1500;}// DOWN	: 1500  
	if(event_press(UP))    {KS_time = 5000;}// UP	: 5000 


    	
///////////////////////////////////////////////////////////////////
////////////////// KILL SWITCH EASY RUN + other KILL SWITCHES ////
/////////////////////////////////////////////////////////////////  

}else {

	if (event_press (LEFT) && !get_val (ADS_BTN)) combo_run(SwitchOFF);}
	if (event_press (ADS_BTN)) {combo_stop(STOP_SPRINT) easy_run_KS =FALSE;}
	if (event_press (FIRE_BTN)) {combo_stop(STOP_SPRINT) easy_run_KS =FALSE;}
//	if (get_val (FIRE_BTN)) {combo_stop(STOP_SPRINT) easy_run_KS =FALSE;} 
//	if (get_val (ADS_BTN)) {combo_stop(STOP_SPRINT) easy_run_KS =FALSE;} 

///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// HAIR TRIGGERS ///
/////////////////////////////////////////////////////////////////  

	if(hair_trigger) {
        if(get_val(FIRE_BTN) >= 5) set_val(FIRE_BTN,100);
        if(get_val(ADS_BTN) >= 5) set_val(ADS_BTN,100);
		}
   
   
///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////EASY DROP///////// 
/////////////////////////////////////////////////////////////////  

	if(!ShotMode_KS){                                                      
		if(get_val(PRONE_BTN)) combo_run(DROP_SHOT);                    
		}    

       
///////////////////////////////////////////////////////////////////
// QUICK SCOPE////////////////////////////////////QUICK SCOPE/////
///////////////////////////////////////////////////////////////// 
    
    if(QuickScope){                                    
 		if(get_val(ADS_BTN)) combo_run(BREATH);        
        else combo_stop(BREATH);                       
		if(event_release(ADS_BTN) && get_ptime(ADS_BTN)< 200)combo_run(QUICK_SHOT);
		}
///////////////////////////////////////////////////////////////////
// ADS SENS //////////////////////////////////// ADS SENS ////////
///////////////////////////////////////////////////////////////// 		

if(ads_sens){                               
         // ADS SENS
        if (get_val(ADS_BTN) ) {        
        sensitivity( 9, MIDPOINT, ADS_SENS);        
        sensitivity(10, MIDPOINT, ADS_SENS); 

    }//end
 }
		
///////////////////////////////////////////////////////////////////
//  AKIMBO    ////////////////////////////////////AKIMBO//////////
/////////////////////////////////////////////////////////////////  

	if(akimbo_onoff && !PrimaryWeapon) {
		if(get_val(FIRE_BTN) && !get_val(ADS_BTN)){combo_run (RAPID_AKIMBO);
		}
		if(get_val(ADS_BTN) && !get_val(FIRE_BTN)){combo_run (RAPID_AKIMBO);
		} 
	}
 
///////////////////////////////////////////////////////////////////
//  AUTO AIM   ////////////////////////////////////AUTO AIM////////
/////////////////////////////////////////////////////////////////                                    

	if (Auto_aim){
		if (get_val(FIRE_BTN)) set_val(ADS_BTN, 100)
		} 


///////////////////////////////////////////////////////////////////
//  EASY MELEE    ////////////////////////////////////EASYMELEE///
/////////////////////////////////////////////////////////////////        
                
	if (EASYMELEE)	{
		if (get_val(SPRINT_BTN)) set_val(MELEE_BTN, 100)
		}           

///////////////////////////////////////////////////////////////////
//EASY RUN  //////////////////////////////////////EASY RUN////////
/////////////////////////////////////////////////////////////////  
                        
	if(easy_run && !easy_run_KS){                               
		if(get_val(LY) < -5) combo_run(EASY_RUN); 
		}  
	if(event_release(RELOAD_BTN) && get_ptime(RELOAD_BTN)< 200){combo_run(STOP_SPRINT);  
		}
    
///////////////////////////////////////////////////////////////////
// LED COLOURS  /////////////////////////// LED COLOURS //////////
///////////////////////////////////////////////////////////////// 

     
	if(PrimaryWeapon) colourled (Blue); 
	else if (!PrimaryWeapon && R2F_K2S) colourled (Red);
	if(akimbo_onoff && !PrimaryWeapon) colourled(SkyBlue);
	if(RAPIDoff) colourled (Pink);
	if(ads_assist && get_val (ADS_BTN)) colourled(Yellow);
	if(ads_sens && get_val (FIRE_BTN)) colourled (White);
	if(RF_KS) combo_run(BLINK);
	if(akimbo_onoff) combo_run(BLINK2);
	if(QuickScope)combo_run (BLINK3);
     	 
     	 
/////////////////////////////////////////////////////////////////////
////////////////////////////////////////// SWITCH WEAPON ///////////
/////////////////////////////////////////////////////////////////// 

	if(event_press(SW_WEAPON_BTN)){                         
		PrimaryWeapon = !PrimaryWeapon;
		}
 
/////////////////////////////////////////////////////////////////////
/////////////////////////////////// RAPID FIRE 1 ///////////////////
/////////////////////////////////////////////////////////////////// 
 
	if (PrimaryWeapon && RF_KS && get_val(FIRE_BTN))combo_run (RAPID_FIRE);   
    	
    	

  
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////// RAPID FIRE 2 /////////////
////////////////////////////////////////////////////////////////////   
 
	if(!PrimaryWeapon && R2F_K2S)                     
		if(get_val(FIRE_BTN)) {                                    
		combo_run (RAPID_FIRE);
		}  
		
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////// RESET ////////////////////
////////////////////////////////////////////////////////////////////  

// reset script when you die                             
	if(get_val(RELOAD_BTN) && get_ptime(RELOAD_BTN)> 200){
		PrimaryWeapon = TRUE;                                
		}

//////////////////////////////////////////////////////////////////////
////////////////////////////////////////// PS4 Compatible ///////////
////////////////////////////////////////////////////////////////////  
    
    if(PS4_Compatible){       
	        // XBOX ELITE Paddle Left down PL2             
	        if(get_val(PS4_TOUCH)) set_val(PS4_TOUCH,0);  
                                                          
          if(get_val(PS4_SHARE)) {                        
                if(!get_val(PS4_R3)) {                      
        		          set_val(PS4_TOUCH, 100);              
        		          set_val(PS4_SHARE, 0);          
        	      }                           
                set_val(PS4_R3, 0);     
          }
          }
          
//////////////////////////////////////////////////////////////////////
////////////////////////////////////////// AIM ASSIST ///////////////
////////////////////////////////////////////////////////////////////  
                       
	if(ads_assist){
 
		if(get_val(L_T)) {                              
			combo_run(LT_C);
			}                                             
		if(get_val(L_T) && get_val(R_T)) {
			combo_stop(LT_C);
			combo_run(RT_C);
			}                                             
		if(get_val(R_X) < value2 || get_val(R_X) > value || get_val(R_Y) < value2 || get_val(R_Y) > value  
        || get_val(R_X) < value2 || get_val(R_X) > value || get_val(R_Y) < value2 || get_val(R_Y) > value){ 
			combo_stop(LT_C);
			combo_stop(RT_C);
			}
		}
}

//------------------------------------------------------------------------------
//    end of main block     
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
//    COMBO BLOCKS                                                               
//------------------------------------------------------------------------------
  combo LT_C {
       set_val(R_Y, negative_value_lt_first);          
       wait(delay)
       set_val(R_X, positive_value_lt_first); 
       set_val(R_Y, positive_value_lt_second); 
       wait(delay) 
       set_val(R_Y, positive_value_lt_second); 
       wait(delay)                  
       set_val(R_X, negative_value_lt_first);
       set_val(R_Y, positive_value_lt_second);
       wait(delay)
}
 
    combo RT_C {
       set_val(R_Y, negative_value_rt_first);              
       wait(delay)
       set_val(R_X, positive_value_rt_first);
       set_val(R_Y, positive_value_rt_second);
       wait(delay) 
       set_val(R_Y, positive_value_rt_second);
       wait(delay)                  
       set_val(R_X, negative_value_rt_first);
       set_val(R_Y, positive_value_rt_second);
       wait(delay)
}
 

combo STOP_SPRINT {     
   easy_run_KS = TRUE;  
   wait(KS_time);
   easy_run_KS = FALSE;  
}        

combo RAPID_FIRE {  
	set_val(FIRE_BTN,100);
	wait(hold_time);       
	set_val(FIRE_BTN,  0); 
	wait(rest_time);      
}  

combo BLINK {
	colourled(Red);
	wait(200);     
      	 if(PrimaryWeapon) colourled (Blue); 
     	 else if (!PrimaryWeapon && R2F_K2S) colourled (Red);
     	 if(akimbo_onoff && !PrimaryWeapon) colourled(SkyBlue);
     	 if (RAPIDoff) colourled (Pink);
     	 if(ads_assist && get_val (ADS_BTN)) colourled(Yellow);
     	 if(ads_sens && get_val (FIRE_BTN)) colourled (White);
     	 if(RF_KS) combo_run(BLINK);
     	 if(akimbo_onoff) combo_run(BLINK2);
     	 if(QuickScope)combo_run (BLINK3);     	 
     	 wait (800);    
}
     	 
combo BLINK2 {
	colourled(SkyBlue);
	wait(300);     
      	 if(PrimaryWeapon) colourled (Blue); 
     	 else if (!PrimaryWeapon && R2F_K2S) colourled (Red);
     	 if(akimbo_onoff && !PrimaryWeapon) colourled(SkyBlue);
     	 if (RAPIDoff) colourled (Pink);
     	 if(ads_assist && get_val (ADS_BTN)) colourled(Yellow);
     	 if(ads_sens && get_val (FIRE_BTN)) colourled (White);
     	 if(RF_KS) combo_run(BLINK);
     	 if(akimbo_onoff) combo_run(BLINK2);
     	 if(QuickScope)combo_run (BLINK3);
     	 wait (700);    
}
     	 
combo BLINK3{
	colourled(Green)
		wait (100)		     
      	 if(PrimaryWeapon) colourled (Blue); 
     	 else if (!PrimaryWeapon && R2F_K2S) colourled (Red);
     	 if(akimbo_onoff && !PrimaryWeapon) colourled(SkyBlue);
     	 if (RAPIDoff) colourled (Pink);
     	 if(ads_assist && get_val (ADS_BTN)) colourled(Yellow);
     	 if(ads_sens && get_val (FIRE_BTN)) colourled (White);
     	 if(RF_KS) combo_run(BLINK);
     	 if(akimbo_onoff) combo_run(BLINK2);
     	 if(QuickScope)combo_run (BLINK3);     	 
     	 wait (900)
}

combo BREATH { 

	wait(140);           
	set_val(SPRINT_BTN,100); 
	colourled(Green);
	wait(4000); 
} 

combo SwitchOFF {  
   set_rumble(RUMBLE_A,100);
   wait(200);
   reset_rumble();
   ShotMode_KS = TRUE;    
   wait(30000);   
   set_rumble(RUMBLE_A,100);
   wait(200);
   reset_rumble();
   ShotMode_KS = FALSE;
}

combo DROP_SHOT{    
	set_val(PRONE_BTN,100); 
	wait(500);  
} 
 
combo RAPID_AKIMBO {      
   set_val(FIRE_BTN,100); 
   set_val( ADS_BTN,100); 
   wait(hold_time);      
   set_val( ADS_BTN,0);   
   set_val(FIRE_BTN,0);   
   wait(rest_time);      
}

combo QUICK_SHOT {     
	set_val(ADS_BTN,   100); 
	set_val(SPRINT_BTN,100);
	set_val(FIRE_BTN,    0); 
	wait(300);             
	set_val(ADS_BTN,   100);  
	set_val(SPRINT_BTN,100);
	set_val(FIRE_BTN,  100); 
	wait(60);             
}  

combo EASY_RUN {                  
	set_val(SPRINT_BTN,100);       
	wait(30);                     
	wait(100);                   
}  

combo STANDARD_ON {
   set_rumble(RUMBLE_A,100);
   wait(200);
   reset_rumble();
   wait(200);
}	
// COLOR LED function                                  


function colourled(Colour) {          
    Col_ind=(Colour*4)- 3;            
    set_led(LED_1,dbyte(Col_ind  ));  
    set_led(LED_2,dbyte(Col_ind+ 1)); 
    set_led(LED_3,dbyte(Col_ind+ 2)); 
    set_led(LED_4,dbyte(Col_ind+ 3)); 
}// End

function save_pvars(){
set_pvar(SPVAR_2, MIDPOINT);
set_pvar(SPVAR_5, ADS_SENS);

}