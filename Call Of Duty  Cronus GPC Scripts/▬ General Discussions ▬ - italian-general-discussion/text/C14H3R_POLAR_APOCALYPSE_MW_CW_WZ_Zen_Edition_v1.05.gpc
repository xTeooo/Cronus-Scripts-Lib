/*
  ______     __    __    __  __    __   ______   _______           _______    ______   __         ______   _______            ______   _______    ______    ______    ______   __        __      __  _______    ______   ________ 
 /      \  _/  |  /  |  /  |/  |  /  | /      \ /       \         /       \  /      \ /  |       /      \ /       \          /      \ /       \  /      \  /      \  /      \ /  |      /  \    /  |/       \  /      \ /        |
/$$$$$$  |/ $$ |  $$ |  $$ |$$ |  $$ |/$$$$$$  |$$$$$$$  |        $$$$$$$  |/$$$$$$  |$$ |      /$$$$$$  |$$$$$$$  |        /$$$$$$  |$$$$$$$  |/$$$$$$  |/$$$$$$  |/$$$$$$  |$$ |      $$  \  /$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ 
$$ |  $$/ $$$$ |  $$ |__$$ |$$ |__$$ |$$ ___$$ |$$ |__$$ |        $$ |__$$ |$$ |  $$ |$$ |      $$ |__$$ |$$ |__$$ |        $$ |__$$ |$$ |__$$ |$$ |  $$ |$$ |  $$/ $$ |__$$ |$$ |       $$  \/$$/  $$ |__$$ |$$ \__$$/ $$ |__    
$$ |        $$ |  $$    $$ |$$    $$ |  /   $$< $$    $$<         $$    $$/ $$ |  $$ |$$ |      $$    $$ |$$    $$<         $$    $$ |$$    $$/ $$ |  $$ |$$ |      $$    $$ |$$ |        $$  $$/   $$    $$/ $$      \ $$    |   
$$ |   __   $$ |  $$$$$$$$ |$$$$$$$$ | _$$$$$  |$$$$$$$  |        $$$$$$$/  $$ |  $$ |$$ |      $$$$$$$$ |$$$$$$$  |        $$$$$$$$ |$$$$$$$/  $$ |  $$ |$$ |   __ $$$$$$$$ |$$ |         $$$$/    $$$$$$$/   $$$$$$  |$$$$$/    
$$ \__/  | _$$ |_       $$ |$$ |  $$ |/  \__$$ |$$ |  $$ |        $$ |      $$ \__$$ |$$ |_____ $$ |  $$ |$$ |  $$ |        $$ |  $$ |$$ |      $$ \__$$ |$$ \__/  |$$ |  $$ |$$ |_____     $$ |    $$ |      /  \__$$ |$$ |_____ 
$$    $$/ / $$   |      $$ |$$ |  $$ |$$    $$/ $$ |  $$ | ______ $$ |      $$    $$/ $$       |$$ |  $$ |$$ |  $$ | ______ $$ |  $$ |$$ |      $$    $$/ $$    $$/ $$ |  $$ |$$       |    $$ |    $$ |      $$    $$/ $$       |
 $$$$$$/  $$$$$$/       $$/ $$/   $$/  $$$$$$/  $$/   $$/ /      |$$/        $$$$$$/  $$$$$$$$/ $$/   $$/ $$/   $$/ /      |$$/   $$/ $$/        $$$$$$/   $$$$$$/  $$/   $$/ $$$$$$$$/     $$/     $$/        $$$$$$/  $$$$$$$$/ 
                                                          $$$$$$/                                                   $$$$$$/                                                                                                       
                                                                                                                                                                                                   
 __       __  ________        __  __       __  __       __        __   ______   __       __ 
/  |  _  /  |/        |      /  |/  \     /  |/  |  _  /  |      /  | /      \ /  |  _  /  |
$$ | / \ $$ |$$$$$$$$/      /$$/ $$  \   /$$ |$$ | / \ $$ |     /$$/ /$$$$$$  |$$ | / \ $$ |
$$ |/$  \$$ |    /$$/      /$$/  $$$  \ /$$$ |$$ |/$  \$$ |    /$$/  $$ |  $$/ $$ |/$  \$$ |
$$ /$$$  $$ |   /$$/      /$$/   $$$$  /$$$$ |$$ /$$$  $$ |   /$$/   $$ |      $$ /$$$  $$ |  
$$ $$/$$ $$ |  /$$/      /$$/    $$ $$ $$/$$ |$$ $$/$$ $$ |  /$$/    $$ |   __ $$ $$/$$ $$ |
$$$$/  $$$$ | /$$/____  /$$/     $$ |$$$/ $$ |$$$$/  $$$$ | /$$/     $$ \__/  |$$$$/  $$$$ |
$$$/    $$$ |/$$      |/$$/      $$ | $/  $$ |$$$/    $$$ |/$$/      $$    $$/ $$$/    $$$ |  Zen Edition v1.05 
$$/      $$/ $$$$$$$$/ $$/       $$/      $$/ $$/      $$/ $$/        $$$$$$/  $$/      $$/ 
                                                                                                                                                                                                                                   
 ________                      __                            __            __   ______     __       ______     __   
/        |                    /  |                          /  |          /  | /      \   /  |     /      \  _/  |  
$$$$$$$$/   ______   __    __ $$ |  ______    ______    ____$$ |  ______  $$/ /$$$$$$  | _$$ |_   /$$$$$$  |/ $$ |  
   $$ |    /      \ /  |  /  |$$ | /      \  /      \  /    $$ | /      \ /  |$$ |_ $$/ / $$   |  $$____$$ |$$$$ |  
   $$ |    $$$$$$  |$$ |  $$ |$$ |/$$$$$$  |/$$$$$$  |/$$$$$$$ |/$$$$$$  |$$ |$$   |    $$$$$$/    /    $$/   $$ |  
   $$ |    /    $$ |$$ |  $$ |$$ |$$ |  $$ |$$ |  $$/ $$ |  $$ |$$ |  $$/ $$ |$$$$/       $$ | __ /$$$$$$/    $$ |  
   $$ |   /$$$$$$$ |$$ \__$$ |$$ |$$ \__$$ |$$ |      $$ \__$$ |$$ |      $$ |$$ |        $$ |/  |$$ |_____  _$$ |_ 
   $$ |   $$    $$ |$$    $$ |$$ |$$    $$/ $$ |      $$    $$ |$$ |      $$ |$$ |        $$  $$/ $$       |/ $$   |   Script Author 
   $$/     $$$$$$$/  $$$$$$$ |$$/  $$$$$$/  $$/        $$$$$$$/ $$/       $$/ $$/          $$$$/  $$$$$$$$/ $$$$$$/ 
                    /  \__$$ |                                                                                      
                    $$    $$/                                                                                       
                     $$$$$$/                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
 __    __                                __                           
/  \  /  |                              /  |                          
$$  \ $$ |  ______    ______   ________ $$ |____    ______    ______  
$$$  \$$ | /      \  /      \ /        |$$      \  /      \  /      \ 
$$$$  $$ |/$$$$$$  |/$$$$$$  |$$$$$$$$/ $$$$$$$  | $$$$$$  |/$$$$$$  |    Merci pour tout le soutien que vous m'apportez ainsi qu'aux mods en vedette  
$$ $$ $$ |$$ |  $$ |$$ |  $$ |  /  $$/  $$ |  $$ | /    $$ |$$ |  $$/ 
$$ |$$$$ |$$ \__$$ |$$ \__$$ | /$$$$/__ $$ |__$$ |/$$$$$$$ |$$ |      
$$ | $$$ |$$    $$/ $$    $$/ /$$      |$$    $$/ $$    $$ |$$ |      
$$/   $$/  $$$$$$/   $$$$$$/  $$$$$$$$/ $$$$$$$/   $$$$$$$/ $$/       
                                                                      
                                                                                                                                                                                                                                                                              
 
Massive Shout Out TO the C14H3R Team For All Their Hard Work In Testing And Improvements To The General Features - Mods  - < < Great Job Team 

ThePopPop - WayneO - CROW - Ceorin - Zkultra - SilentStorm16 - SouthernCalibronia - Rumour - sac dunker - SANDYCHRI  

C14H3R_POLAR_APOCALYPSE_WZ/MW/CW.Zen Edition_v1.05

Credits = Noozbar - Batts - DoGzTheFiGhTeR - DoNotAtMe - Swizzy  - Fadexz 


*** S C R I P T  I N F O R M A T I O N ***
==========================================

If you are looking for a script with great features and BEST aim assist there is to offer... this script is the one for you... 

                                 *** T a y l o r  A s s i s t *** *** B a t t s  S t i c k y  A i m ***
                                 ===   W i t h  R u m b l e               W i t h  R u m b l e      ===
                                 ==         B o o s t                          B o o s t             ==
                                 ======================================================================

                                                   *** T a y l o r  S h a p e s ***
                                                   ================================
                              *** C i r c u l a r = = T a l l  O v a l = = W i d e  O v a l = = S p i r a l ***
                              =================================================================================

                                       *** R u m b l e  A R *** *** P r o g g r e s s i v e  A R ***
                                       =============================================================

                                         F e a t u r i n g  N o o z b a r ' s  S m a r t  S e n s 
                                         ========================================================
            
                                                 L O A D S  M O R E  F E A T U R E S. . .
                                                 ========================================
                    
                                  O L E D  M E N U  W I T H  L O A D S  O F  C U S T O M I S A T I O N S 
                                  ======================================================================
      
          C H O O S E  Y O U R  O W N  B U T T O N S  V I A  T H E  Z E N  M E N U  F O R  3 X  P R O F I L E S == Q U I C K  T O G G L E S 
          =================================================================================================================================
            
************************************************************************************************************************************************************************************
////////////////\\\\\\\\\\\\\\\\\////////////\\\\\\\\\\///////////\\\\\\\\\\\\////////////\\\\\\\\\\\\\///////\\\\\\\\\\\\\\///////////\\\\\\\\\\\\///////////\\\\\\\\\\\///////\\\\
I N S T R U C T I O N S. . . . P L E A S E   R E A D 
====================================================================================================================================================================================
These instructions below are here to help you understand how to operate the script so that you can use it fluently without issues which makes the experience much better ! ! ! 
====================================================================================================================================================================================
*** M e n u  N a v i g a t i o n ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Enter The Menu --------------------- Press L2/LT And Options -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit The Menu  --------------------- Press Circle/B          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Menu Navigation--------------------- Press Left OR Right     -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Turn Mods On OR Off ---------------- Press UP OR Down        -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Enter Drive Mode   ----------------- Hold L2 and Double Tap Right ------ Drive Mode Is A KillSwitch --------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit Drive Mode  ------------------- Press Square/X          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** Enter Edit Menu ( While Still In Mod Menu ) ***          -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mod's That Are Editable                                      -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AntiRecoil - Aim Assist - Rapid Fire - Akimbo Rf - Burst Fire - Taylor Sens - Cancel Reload - Controller Congfig - Profile Settings - Quick Toggles --------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Edit Mods    ----------------------- Press Cross/A           -----------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Change Values ---------------------- Hold L2 and Press Left Or Right To Decrease/Increase Values By 1 ------------------------------------------------------------------------------ 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Change Values ---------------------- Hold L2 and Press UP Or Down To Decrease/Increase Values By 10  -------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exit Edit Menu ( Back To Mod Menu )  Press Circle/B  -------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** A L L  A B O V E  I S  B A S I C  C O N F I G ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** M e n u  S e t t i n g s ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** C o n t r o l l e r  C o n f i g *** ---------  Press Up OR Down To Change Controller Layouts ---
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** P r o f i l e  C o n f i g ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Use Profiles  === This Is The Master Switch For Using The 3 profiles In The Script
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Default Press === Default Press Means That When You Press The Button To Switch Profiles As You Normally Would
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Default Press === When Disabled, When Changing Profiles You Quick Tap The Button To Change Profile Instead
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Profile Button == Press UP OR Down To Select The Button Of Your Choice To Change Profiles 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resync Button === This Is 2 Buttons To Choose From Hold L2 and Press Left Or Right To Choose Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Resync Button === You Use The Resync Button As Another Option For Switching Profiles Using 2 Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Warzone Profile = Choose Buttons For Changing To Warzone Profile Hold L2 and Press Left And Right 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** Q u i c k  T o g g l e s  C o n f i g ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Quick Toggles Choose Your Own Buttons For Each Quick Toggle
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hold L2 and Press Left Or Right To Choose Your Own Buttons
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Press Up and Down To Select Which Button You Wish To Change 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*** T e s t  M o d e ***
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What Is Test Mode ? ? ? 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Test Mode Is SO That You Can Edit Values For Mod's That Have Adjustable Values While IN Game 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
For Example... When Adjusting AntiRecoil, You Can Remain In Test Mode While The AR Value Is Displayed On The OLED Screen 

And While In Game You Can See The Menu On The OLED Screen While You Are Shooting Your Weapon To Find The Exact Value You Need...

Once You Have Finished Setting Up That Weapon, You Can Change Profile's In Test Mode So That You Can Do ALL Weapons/Setting Up on ALL Profiles...

Before You Exit The Test Mode Menu, You Can Press PS/XBOX To SAVE ALL Values You Adjusted Without The Need To Re-Enter Mod Menu...
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Enter Test Menu  --- Hold L2 and Press Share/Menu Button --- Exit Test Menu --- Same Buttons As You Pressed To Enter
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*/
// Display Mods In the OLED Menu \\
const string ModNames[] = { "RumbleAR","Progressive AR","Taylor Assist","Batts Sticky Aim","Rapid Fire","Akimbo Rf","Burst fire","Strafe Shot","Taylor Sens","QuickScope", "HoldBreath","Cancel Plates","Enemy Ping","Cancel Slide","BunnyHop", 
//                             0             1                 2              3                     4         5             6           7            8             9              10           11           12            13            14              
"Prone Shot","Fast Melee","Auto Run","Cancel Reload", "Akimbo Auto", "Controller Config","Profile Settings","Quick Toggles", ""};
//   15           16          17           18              19                20                  21               22           

// Display Editable Values In The OLED Menu \\
const string ValNames[]  = { "AR Strength","Horiz Strength","Vertical Start","Vertical End","Vertical Time","Horiz Start","Horiz End","Horiz Time","Radius","Steps","Min Radius","Taylor Boost","Taylor Boost Str","Taylor Boost Speed",              
//                                0               1                 2              3              4              5             6            7         8        9         10            11              12                   14           
"StickyAim Size","StickyAim Time","Batts Boost","Batts Boost Str","Rounds/Sec","Rounds/Sec","Hold Time", "Release Time","StrafeShot Time","General Sens","Ads Sens","Fire Sens","Ads & Fire Sens","QuickScope","Reload Time","Controller Layout",
//     14               15             16              17              18           19           20             21            22                23           24          25            26              27            28               29     
"Block Rumble","Default Press","Profile Button","Resync Buttons","Warzone Profile","Use Profiles","Weapon Names","Rapid Fire","Akimbo Rf","Hold Breath","Use Profiles",""} 
//    30              31              32               33               34              35             36            37           38            39            40           

// Display Misc Strings Used Throughout The Menu Including Combo's \\
const string Misc[] = { "C14H3R Polar","On","Off","Test Mode","Activated","Primary","Secondary","Press Cross/A","Hold L2 to Edit","Press Up/Down","Circular","Tall Oval","Wide Oval","Spiral","ModernWarfare",
 //                           0        1    2        3          4           5          6            7              8                9             10            11        12         13          14
"ColdWar","Choose Toggle","Rumble AR","Progressive","TaylorAssist","Batts Sticky Aim","Taylor & Batts","Rapid Fire","Akimbo RF","AllProfiles","Drive Mode","Warzone","Saved","Default Values","Restored",
// 15           16             17           18            19               20                  21             22        23            24            25         26       27           28           29
"Sprint Only","Tactical Sprint","Test One","Helix", "" } 
//    30              31
const string Weapons[]={ // Weapon Names Displayed On Title Screen \ Total 53;
"Ground Loot","Melee","Launcher","Rifle","SMG","LMG","Shotgun","Handgund","Krig 6","FFAR 1","Groza","XM4","M13","M4A1",
"FR 5.56","AK-47","FAL","Kilo 141","RAM-7","Grau 5.56","CR-56 AMAX",
"AN-94","AS VAL","FARA 83","Bullfrog","AK-74u","PPSh-41","LC10","MAC-10","MP5","MP7","AUG","FENNEC",
"Gallo","JAK-12","Origin 12","RPD","FiNN","PKM","Bruen","M16","Type 63",
"DMR 14","Crossbow","Kar98k","ZRG","Swiss K31","Tundra","AX-50","HDR","Renetti","M19","Sykov",
"Diamatti",""} ;
// Display Choosable Buttons Via Menu \\ 
const string HoldButtons[]       = { "< Select >","L2/LT","R2/RT","L1/LB","R1/RB","L3/LS","R3/RS", ""};

const string PressButtons[]      = { "Select","Triangle/Y","Dpad Down","Dpad UP","Dpad Left","Dpad Right","Cross/A","Circle/B","Square/X", ""};

const int8   HoldBtns []         = { -1,  PS4_L2      ,PS4_R2  , PS4_L1, PS4_R1  , PS4_L3   , PS4_R3 }; 

const int8   PressBtns[]         = { -1,  PS4_TRIANGLE,PS4_DOWN, PS4_UP, PS4_LEFT, PS4_RIGHT, PS4_CROSS, PS4_CIRCLE, PS4_SQUARE };

// Display All Different Controller Layouts Choosable Via The Menu \\
const string ControllerLayouts[] = { "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped",""}

// All Toggles For Mods That Can Be Used Seperately On 3 Profiles \\


int ToggleTaylorAR            [3]  ;
int ToggleProgressive         [3]  ;
int ToggleTaylorAssist        [3]  ;
int ToggleBattsAimAssist      [3]  ; 
int ToggleRapidFire           [3]  ;
int RateOfFire                [3]  ;
int ToggleAkimboRf            [3]  ;
int ToggleTaylorSens          [3]  ;
int ToggleCancelReload        [3]  ; 
int ToggleBurstFire           [3]  ; 
int ToggleStrafeShot          [3]  ; 

// Available Values That Can Be Different On 3 Profiles \\

int AkimboRoF                 [3]  ;
int TaylorStrength            [3]  ;
int HorizStrength             [3]  ; 
int TaylorRadius              [3]  ;
int TaylorAngle               [3]  ;
int TaylorRadiusMin           [3]  ;
int AimAssistSize             [3]  ;
int AimAssistTime             [3]  ;
int VerticalStart             [3]  ;
int VerticalEnd               [3]  ;
int VerticalTime              [3]  ;
int HorizontalStart           [3]  ;
int HorizontalEnd             [3]  ;
int HorizontalTime            [3]  ;
int GeneralSens               [3]  ;
int AdsSens                   [3]  ; 
int FireSens                  [3]  ; 
int AdsFireSens               [3]  ; 
int MaxReloadTime             [3]  ; 
int WeaponNamesIdx            [3]  ; 
int StrafeShotTime;
int TaylorAngleBoost; 
// These Are Variables Used That Are Dependant On My Menu Structure \\

int ModORVal                  [2]  ;
int ModOrEditMenu             [3]  ;
int DisplayModsNToggles       [3]  ;

// These Are Additional Mods With Ediable Values That Don't Need To Be Edited \\

int TaylorFineTune           = 30  ;
int ProneSpeed               = 80  ; 

// Defined Values For Specific Features In The Script \\

define AmountOfValues        = 40  ;
define AmountOfEditableMods  = 10  ;
define TotalNumberOfProfiles = 3   ;

// All Variables Used In My Script \\

int TaylorSens,HoldTime,RestTime,LedOn,LedOff; 

int ToggleBlockRumble,ToggleCancelSlide,ToggleBunnyHop,ToggleEnemyPing,ToggleAutoRun; 

int ToggleCancelPlates,RunCancelPlatesTimer,ActivateCancelPlates;

int RX,RY,angle,CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,AntirecoilStrength,PolarStrength,Angle;

int DriveMode,ScreenSaver,BlankScreen,SelectedProfileIdx,ProfileIdx,WarzoneLootProfile;

int SmartSens_side,SmartSens;

int FirstShotBeforeReload,ReloadInProgress;

int BurstFireHold,BurstFireRelease; 

int StickyStrength,ReloadTime;

int ToggleQuickScope;

int QuickScopeDelay;

int ToggleFastMelee; 


int PolarBoost;
int StickyBoost; 
int ToggleBattsBoost; 
int TogglePopAkimbo;
int ToggleRumbleBoost;
int ToggleHoldBreath;
int ToggleProneShot;
int ToggleJumpShot;
int AimAssistVal;

int ToggleHairTriggers = TRUE; 
int i_val;
int i_pnt;
int i_num;
int i_cnt;
int ar_y; 
int i_val_h,i_pnt_h, i_num_h,i_cnt_h,ar_x;

int    DisplayTitle       = TRUE;
define False              = FALSE;
define True               = TRUE; 

define ActivateButtonCount = 6;
int ActivateHoldButton[ActivateButtonCount];
int ActivatePressButton[ActivateButtonCount];
int ActivateHoldBtnIdx[ActivateButtonCount];
int ActivatePressBtnIdx[ActivateButtonCount];
int ActivateIndividualButton = 0;
int ActivateIndividualBtnIdx,ToggleMasterProfileSwitch;
int QuickToggleActive,ToggleWidth,ToggleWidth1,ToggleFont,ToggleFont1,TogglePosition;
int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping,Buttons,ToggleDefaultBtn;

const int8 DamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};  

init { 
// Load Default Values \\
         Load(); 
      
} 
main { 

	ActivateAllButtons();
	Buttons(Buttons);

	if(get_ival(Ads))                                             // Enter Mod Menu OR Enable DriveMode (KillSwitch) OR Enter Test Mode (Configure Recoil/AimAssist On The Fly) === \\
	{ 
		if(event_press(PS4_OPTIONS))                                // Enter Mod Menu \\ 
		{ 
		    ModOrEditMenu[0]       = TRUE; 
		    ModOrEditMenu[1]       = FALSE;
		    ModOrEditMenu[2]       = FALSE; 
		    DisplayModsNToggles[0] = TRUE;
		    DisplayModsNToggles[1] = TRUE;
		    ModORVal[0]            = 0; 
		    DisplayTitle           = FALSE; 
		    combo_run(RumbleOn); 
		    
		    if(!ModOrEditMenu[0]) 
		    	DisplayTitle = TRUE;
		    
	    }
	    if(event_press(PS4_SHARE) && !ModOrEditMenu[1])                                  // Activate DriveMode \\
	    {
	    	ModOrEditMenu[2] =! ModOrEditMenu[2];
	        ModOrEditMenu[0]       =  FALSE; 
	        ModORVal[1]            = 0; 
	        DisplayTitle           =  FALSE; 
	        DisplayModsNToggles[0] =  TRUE;
	        combo_run(RumbleOn); 
	        
	        if(!ModOrEditMenu[2]) 
	           DisplayTitle = TRUE;
	           Save(); 
	          
	    }
	    if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2])  // Enter Test Mode \\
	    {
	        DriveMode = TRUE; 
	        combo_run(DriveMode);
	        
	    }
	    set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); // Block These Button Presses When Entering The 3 x Menu's (Prevent's Interuption IN GAME )    
    }   // End of First Block ( Entering the different Menu's ) \\ 
    
    // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Mod Menu & Change Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\
    
    if(!DisplayTitle)                           // If NOT On Display Title \\
    { 
   		if(ModOrEditMenu[0])        // Enter Mod Menu - Menu Navigation - Toggle Activation \\
     	{ 
            ModORVal[0]                       = ModORValNavi(ModORVal[0],0, 22); // Min & Max OF Mods (Mod Menu) 
            ToggleTaylorAR      [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  0,ToggleTaylorAR      [ProfileIdx],0,1);  // RumbleAR                                       \\
            ToggleProgressive   [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  1,ToggleProgressive   [ProfileIdx],0,1);  // Progressive                                    \\
            ToggleTaylorAssist  [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  2,ToggleTaylorAssist  [ProfileIdx],0,5);  // Taylor Assist                                  \\
            ToggleBattsAimAssist[ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  3,ToggleBattsAimAssist[ProfileIdx],0,1);  // BattsStickyAim                                 \\
            ToggleRapidFire     [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  4,ToggleRapidFire     [ProfileIdx],0,1);  // Rapid Fire                                     \\
            ToggleAkimboRf      [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  5,ToggleAkimboRf      [ProfileIdx],0,1);  // Akimbo Rapid Fire                              \\
            ToggleBurstFire     [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  6,ToggleBurstFire     [ProfileIdx],0,1);  // BurstFire                                      \\
            ToggleStrafeShot    [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  7,ToggleStrafeShot    [ProfileIdx],0,1);  // StrafeShot                                     \\
            ToggleTaylorSens    [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  8,ToggleTaylorSens    [ProfileIdx],0,1);  // Taylor Sens                                    \\
            ToggleQuickScope                  = ToggleSwitch(ModORVal[0] ==  9,ToggleQuickScope                ,0,1);  // RumbleAR - Progressive                         \\
            ToggleHoldBreath                  = ToggleSwitch(ModORVal[0] == 10,ToggleHoldBreath                ,0,1);  // HoldBreath                                     \\
            ToggleCancelPlates                = ToggleSwitch(ModORVal[0] == 11,ToggleCancelPlates              ,0,1);  // Cancel Plates                                  \\
            ToggleEnemyPing                   = ToggleSwitch(ModORVal[0] == 12,ToggleEnemyPing                 ,0,1);  // Enemy Ping                                     \\
            ToggleCancelSlide                 = ToggleSwitch(ModORVal[0] == 13,ToggleCancelSlide               ,0,2);  // Cancel Slide - Modern Warfare - Cold War       \\ 
            ToggleBunnyHop                    = ToggleSwitch(ModORVal[0] == 14,ToggleBunnyHop                  ,0,1);  // Bunny Hop                                      \\
            ToggleProneShot                   = ToggleSwitch(ModORVal[0] == 15,ToggleProneShot                 ,0,1);  // Prone Shot                                     \\
            ToggleFastMelee                   = ToggleSwitch(ModORVal[0] == 16,ToggleFastMelee                 ,0,1);  // Jump Shot                                      \\
            ToggleAutoRun                     = ToggleSwitch(ModORVal[0] == 17,ToggleAutoRun                   ,0,1);  // Auto Run                                       \\
            ToggleCancelReload  [ProfileIdx]  = ToggleSwitch(ModORVal[0] == 18,ToggleCancelReload  [ProfileIdx],0,1);  // Cancel Reload                                  \\
            TogglePopAkimbo                   = ToggleSwitch(ModORVal[0] == 19,TogglePopAkimbo                 ,0,1);  // PopPop Akimbo Full Auto                        \\
          
            
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Menu To Make Changes ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\   
    	} 
    	if(ModOrEditMenu[1])  // Enter Edit Menu - Value Change Activation - Navigate Different Types Of Values \\
	    { 
            ModORVal[1]                       = ModORValNavi(ModORVal[1],0  ,41);
            
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Values Via Menu & Enable/Disable Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\           
    
            TaylorStrength   [ProfileIdx]     = EditableVals(ModORVal[1]    , 0,TaylorStrength   [ProfileIdx] ,-99, 99 , 1 , 10); 
            HorizStrength    [ProfileIdx]     = EditableVals(ModORVal[1]    , 1,HorizStrength    [ProfileIdx] ,-99, 99 , 1 , 10); 
            VerticalStart    [ProfileIdx]     = EditableVals(ModORVal[1]    , 2,VerticalStart    [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalEnd      [ProfileIdx]     = EditableVals(ModORVal[1]    , 3,VerticalEnd      [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalTime     [ProfileIdx]     = EditableVals(ModORVal[1]    , 4,VerticalTime     [ProfileIdx] ,  0, 99 , 1 , 10);
            HorizontalStart  [ProfileIdx]     = EditableVals(ModORVal[1]    , 5,HorizontalStart  [ProfileIdx] ,-99, 99 , 1 , 10);
            HorizontalEnd    [ProfileIdx]     = EditableVals(ModORVal[1]    , 6,HorizontalEnd    [ProfileIdx] ,-99, 99 , 1 , 10);
            HorizontalTime   [ProfileIdx]     = EditableVals(ModORVal[1]    , 7,HorizontalTime   [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadius     [ProfileIdx]     = EditableVals(ModORVal[1]    , 8,TaylorRadius     [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorAngle      [ProfileIdx]     = EditableVals(ModORVal[1]    , 9,TaylorAngle      [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadiusMin  [ProfileIdx]     = EditableVals(ModORVal[1]    ,10,TaylorRadiusMin  [ProfileIdx] ,  0, 20 , 1 , 10); 
            ToggleRumbleBoost                 = EditToggle  (ModORVal[1] ==  11,ToggleRumbleBoost             ,  0,  1         );
            PolarBoost                        = EditableVals(ModORVal[1]    ,12,PolarBoost                    ,  0, 40 , 1 , 10);
            TaylorAngleBoost                  = EditableVals(ModORVal[1]    ,13,TaylorAngleBoost              ,  0, 40 , 1 , 10);
            AimAssistSize    [ProfileIdx]     = EditableVals(ModORVal[1]    ,14,AimAssistSize    [ProfileIdx] ,  0, 99 , 1 , 10);
            AimAssistTime    [ProfileIdx]     = EditableVals(ModORVal[1]    ,15,AimAssistTime    [ProfileIdx] ,  0, 99 , 1 , 10);
            ToggleBattsBoost                  = EditToggle  (ModORVal[1] ==  16,ToggleBattsBoost              ,  0,  1         );
            StickyBoost                       = EditableVals(ModORVal[1]    ,17,StickyBoost                   ,  0, 40 , 1 , 10);
            RateOfFire       [ProfileIdx]     = EditableVals(ModORVal[1]    ,18,RateOfFire       [ProfileIdx] ,  0, 25 , 1 , 10);
            AkimboRoF        [ProfileIdx]     = EditableVals(ModORVal[1]    ,19,AkimboRoF        [ProfileIdx] ,  0, 25 , 1 , 10);
            BurstFireHold         			  = EditableVals(ModORVal[1]    ,20,BurstFireHold    			  ,  0,990 , 1 , 10);
            BurstFireRelease                  = EditableVals(ModORVal[1]    ,21,BurstFireRelease              ,  0,990 , 1 , 10);
            StrafeShotTime                    = EditableVals(ModORVal[1]    ,22,StrafeShotTime                , 0,9990 ,10 ,100);
            GeneralSens      [ProfileIdx]     = EditableVals(ModORVal[1]    ,23,GeneralSens      [ProfileIdx] ,  0,327 , 1 , 10);
            AdsSens          [ProfileIdx]     = EditableVals(ModORVal[1]    ,24,AdsSens          [ProfileIdx] ,  0,327 , 1 , 10);
            FireSens         [ProfileIdx]     = EditableVals(ModORVal[1]    ,25,FireSens         [ProfileIdx] ,  0,327 , 1 , 10);
            AdsFireSens      [ProfileIdx]     = EditableVals(ModORVal[1]    ,26,AdsFireSens      [ProfileIdx] ,  0,327 , 1 , 10);
            QuickScopeDelay                   = EditableVals(ModORVal[1]    ,27,QuickScopeDelay               ,  0,600 , 1 , 10);
            MaxReloadTime    [ProfileIdx]     = EditableVals(ModORVal[1]    ,28,MaxReloadTime    [ProfileIdx] , 0,9000 ,10 ,100);
            Buttons                           = EditToggle  (ModORVal[1] ==  29,Buttons                       ,  0, 21);
            ToggleBlockRumble                 = EditToggle  (ModORVal[1] ==  30,ToggleBlockRumble             ,  0,  1);
            ToggleDefaultBtn                  = EditToggle  (ModORVal[1] ==  31,ToggleDefaultBtn              ,  0,  1);
            ActivateIndividualBtnIdx          = EditToggle  (ModORVal[1] ==  32,ActivateIndividualBtnIdx      ,  0,  8);
            ButtonActivation(0,ModORVal[1],33); 
            ButtonActivation(1,ModORVal[1],34); 
            ToggleMasterProfileSwitch         = EditToggle  (ModORVal[1] ==  35,ToggleMasterProfileSwitch     ,  0,  1);
            WeaponNamesIdx[ProfileIdx]        = EditToggle  (ModORVal[1] ==  36,WeaponNamesIdx[ProfileIdx]    ,  0, 53);
            ButtonActivation(2,ModORVal[1],37); 
            ButtonActivation(3,ModORVal[1],38); 
            ButtonActivation(4,ModORVal[1],39); 
            ButtonActivation(5,ModORVal[1],40); 
            
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Value Limits For Mods With Adjustable Values ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\       
        
            if(ModORVal[0] ==   0) ModORVal[1] = cycle(ModORVal[1],0,1);
            if(ModORVal[0] ==   1) ModORVal[1] = cycle(ModORVal[1],2,7);
            if(ModORVal[0] ==   2) ModORVal[1] = cycle(ModORVal[1],8,13);
            if(ModORVal[0] ==   3) ModORVal[1] = cycle(ModORVal[1],14,17);
            if(ModORVal[0] ==   4) ModORVal[1] = cycle(ModORVal[1],18,18);
            if(ModORVal[0] ==   5) ModORVal[1] = cycle(ModORVal[1],19,19);
            if(ModORVal[0] ==   6) ModORVal[1] = cycle(ModORVal[1],20,21);
            
            if(ModORVal[0] ==   7) ModORVal[1] = cycle(ModORVal[1],22,22);
            if(ModORVal[0] ==   8) ModORVal[1] = cycle(ModORVal[1],23,26); 
            if(ModORVal[0] ==   9) ModORVal[1] = cycle(ModORVal[1],27,27);
            if(ModORVal[0] ==  18) ModORVal[1] = cycle(ModORVal[1],28,28);
            if(ModORVal[0] ==  20) ModORVal[1] = cycle(ModORVal[1],29,30);
            if(ModORVal[0] ==  21) ModORVal[1] = cycle(ModORVal[1],31,36);
            if(ModORVal[0] ==  22) ModORVal[1] = cycle(ModORVal[1],37,40);
                     
        }
        if(ModOrEditMenu[2])
        {
        	ModORVal[1]                       = ModORValNavi(ModORVal[1],0  ,28);
            
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Values Via Menu & Enable/Disable Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\\           
    
            TaylorStrength   [ProfileIdx]     = EditableVals(ModORVal[1]    , 0,TaylorStrength   [ProfileIdx] ,-99, 99 , 1 , 10); 
            HorizStrength    [ProfileIdx]     = EditableVals(ModORVal[1]    , 1,HorizStrength    [ProfileIdx] ,-99, 99 , 1 , 10); 
            VerticalStart    [ProfileIdx]     = EditableVals(ModORVal[1]    , 2,VerticalStart    [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalEnd      [ProfileIdx]     = EditableVals(ModORVal[1]    , 3,VerticalEnd      [ProfileIdx] ,-99, 99 , 1 , 10);
            VerticalTime     [ProfileIdx]     = EditableVals(ModORVal[1]    , 4,VerticalTime     [ProfileIdx] ,  0, 99 , 1 , 10);
            HorizontalStart  [ProfileIdx]     = EditableVals(ModORVal[1]    , 5,HorizontalStart  [ProfileIdx] ,-99, 99 , 1 , 10);
            HorizontalEnd    [ProfileIdx]     = EditableVals(ModORVal[1]    , 6,HorizontalEnd    [ProfileIdx] ,-99, 99 , 1 , 10);
            HorizontalTime   [ProfileIdx]     = EditableVals(ModORVal[1]    , 7,HorizontalTime   [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadius     [ProfileIdx]     = EditableVals(ModORVal[1]    , 8,TaylorRadius     [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorAngle      [ProfileIdx]     = EditableVals(ModORVal[1]    , 9,TaylorAngle      [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadiusMin  [ProfileIdx]     = EditableVals(ModORVal[1]    ,10,TaylorRadiusMin  [ProfileIdx] ,  0, 20 , 1 , 10); 
            ToggleRumbleBoost                 = EditToggle  (ModORVal[1] ==  11,ToggleRumbleBoost             ,  0,  1         );
            PolarBoost                        = EditableVals(ModORVal[1]    ,12,PolarBoost                    ,  0, 40 , 1 , 10);
            TaylorAngleBoost                  = EditableVals(ModORVal[1]    ,13,TaylorAngleBoost              ,  0, 40 , 1 , 10);
            AimAssistSize    [ProfileIdx]     = EditableVals(ModORVal[1]    ,14,AimAssistSize    [ProfileIdx] ,  0, 99 , 1 , 10);
            AimAssistTime    [ProfileIdx]     = EditableVals(ModORVal[1]    ,15,AimAssistTime    [ProfileIdx] ,  0, 99 , 1 , 10);
            ToggleBattsBoost                  = EditToggle  (ModORVal[1] ==  16,ToggleBattsBoost              ,  0,  1         );
            StickyBoost                       = EditableVals(ModORVal[1]    ,17,StickyBoost                   ,  0, 40 , 1 , 10);
            RateOfFire       [ProfileIdx]     = EditableVals(ModORVal[1]    ,18,RateOfFire       [ProfileIdx] ,  0, 25 , 1 , 10);
            AkimboRoF        [ProfileIdx]     = EditableVals(ModORVal[1]    ,19,AkimboRoF        [ProfileIdx] ,  0, 25 , 1 , 10);
            BurstFireHold         			  = EditableVals(ModORVal[1]    ,20,BurstFireHold    			  ,  0,990 , 1 , 10);
            BurstFireRelease                  = EditableVals(ModORVal[1]    ,21,BurstFireRelease              ,  0,990 , 1 , 10);
            StrafeShotTime                    = EditableVals(ModORVal[1]    ,22,StrafeShotTime                , 0,9990 ,10 ,100);
            GeneralSens      [ProfileIdx]     = EditableVals(ModORVal[1]    ,23,GeneralSens      [ProfileIdx] ,  0,327 , 1 , 10);
            AdsSens          [ProfileIdx]     = EditableVals(ModORVal[1]    ,24,AdsSens          [ProfileIdx] ,  0,327 , 1 , 10);
            FireSens         [ProfileIdx]     = EditableVals(ModORVal[1]    ,25,FireSens         [ProfileIdx] ,  0,327 , 1 , 10);
            AdsFireSens      [ProfileIdx]     = EditableVals(ModORVal[1]    ,26,AdsFireSens      [ProfileIdx] ,  0,327 , 1 , 10);
            QuickScopeDelay                   = EditableVals(ModORVal[1]    ,27,QuickScopeDelay               ,  0,600 , 1 , 10);
            MaxReloadTime    [ProfileIdx]     = EditableVals(ModORVal[1]    ,28,MaxReloadTime    [ProfileIdx] , 0,9000 ,10 ,100);
          
        } 
    }
    if(DisplayModsNToggles[0])    // Display Mods - Editable Values - Toggles - Display 3x Menu's \\
    { 
        cls_oled(OLED_BLACK);
        led(ProfileIdx);
               
   		if(ModOrEditMenu[2])
   		{
   		    printf(center_x(get_valName_chars(ModORVal[1]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ValNames[ModORVal[1]]); 
   		    
   		    if(ModORVal[1] >= 0 && ModORVal[1]  <= 10 || ModORVal[1] >= 12 && ModORVal[1] <= 15 || ModORVal[1] >= 17 && ModORVal[1] <= 28) 
        	{
        		line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
		    	line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		    	putc_oled(1, 133);
		    	puts_oled(15, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 134);
		   	    puts_oled(105,45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 132);
		    	puts_oled(5, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 131);
		    	puts_oled(115,45, OLED_FONT_SMALL, 1, 1);
            	printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,Misc[8]); // l2edit
            	
            } 
   		}
   		else if(ModOrEditMenu[1]) 
        { 	
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	printf(center_x(get_valName_chars(ModORVal[1]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ValNames[ModORVal[1]]); 
        	
             
   		    if(ModORVal[1] >= 0 && ModORVal[1]  <= 10 || ModORVal[1] >= 12 && ModORVal[1] <= 15 || ModORVal[1] >= 17 && ModORVal[1] <= 28) 
        	{
        		line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
		    	line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		    	putc_oled(1, 133);
		    	puts_oled(15, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 134);
		   	    puts_oled(105,45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 132);
		    	puts_oled(5, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 131);
		    	puts_oled(115,45, OLED_FONT_SMALL, 1, 1);
            	printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,Misc[8]); 
            } 
            if(ModORVal[1] == 11 || ModORVal[1] == 16 || ModORVal[1] >= 29 && ModORVal[1] <= 32 || ModORVal[1] == 35) 
            {
            	line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
		    	line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		    	printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,Misc[9]); //updown
            }
            if(ModORVal[1] == 36)
            {
            	if(ProfileIdx == 0) 
        			printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
           	    else if(ProfileIdx == 1) 
            		printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
            	else if(ProfileIdx == 2) 
            	    printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);  
            } 
        }
        else 
        {
            rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
            line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
		    line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
		    putc_oled(1, 133);
		    puts_oled(15, 25, OLED_FONT_SMALL, 1, 1);
		    putc_oled(1, 134);
		    puts_oled(105,25, OLED_FONT_SMALL, 1, 1);
		    putc_oled(1, 132);
		    puts_oled(5, 25, OLED_FONT_SMALL, 1, 1);
		    putc_oled(1, 131);
		    puts_oled(115,25, OLED_FONT_SMALL, 1, 1);
		    led(ProfileIdx); 
            printf(center_x(get_modName_chars(ModORVal[0]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModORVal[0]]); 
           
           
            if(ModORVal[0] >= 0 && ModORVal[0] <= 8 || ModORVal[0] == 18) 
            {
            	if(ProfileIdx == 0) 
        			printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
           	    else if(ProfileIdx == 1) 
            		printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
            	else if(ProfileIdx == 2) 
            	    printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);  
            } 
        	if(ModORVal[0] >= 20 && ModORVal[0] <= 22) 
        	{
        		printf(center_x(get_misc_chars(7), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[7]);
        	}
        	if(ModORVal[0] >= 9 && ModORVal[0] <= 17 || ModORVal[0] >= 19 && ModORVal[0] <= 22) 
        	{
        		printf(center_x(get_misc_chars(24), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[24]);  
            }
        }			
        DisplayModsNToggles[0] = FALSE; 
    } 
    if(!ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2])                      // If NOT In Either Menu's \\ 
	{
    	if(DisplayTitle)                                            // Display Title - Display Screen \\
    	{ 
       		cls_oled(OLED_BLACK);
       	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	printf(center_x(get_misc_chars(0), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[0]);
        	printf(center_x(get_misc_chars(32), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[32]);
        	printf(center_x(get_weapon_chars(WeaponNamesIdx[ProfileIdx]), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Weapons[WeaponNamesIdx[ProfileIdx]]);
        	
        	if(ProfileIdx == 0) 
        		printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
            if(ProfileIdx == 1) 
            	printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
            if(ProfileIdx == 2) 
            	printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);  
            	
        	DisplayTitle = FALSE;
            ScreenSaver  = TRUE; 
    	}
    	// Display a Blank Screen after 10 seconds ( Prevents Screen Burn on The OLED Screen ) 
    	
    	if(ScreenSaver) 
    	{
        	BlankScreen += get_rtime();
        	
    		if(BlankScreen >= 10000)
    		{
    			cls_oled(OLED_BLACK);
    			BlankScreen = 0;
    			ScreenSaver = FALSE; 
        	} 
        }
        if(DriveMode) 
        {
        	LedOn  = 150;
			LedOff = 300;
			combo_run(Blink);
        } 
        // Switch Profiles Activation \\ 
        led(ProfileIdx);
        
        if(ToggleMasterProfileSwitch) 
        {
        	if(ActivateIndividualButton) 
        	{ 
        		if(event_release(ActivateIndividualButton) && get_ptime(ActivateIndividualButton) < 150 && !ToggleDefaultBtn || ToggleDefaultBtn && ActivateIndividualButton && event_press(ActivateIndividualButton) || ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]) && event_release(ActivatePressButton[0])) 
        		{
    				SelectedProfileIdx =! SelectedProfileIdx;
    				WarzoneLootProfile = FALSE;
    
    				if(ModOrEditMenu[0]) 
    					DisplayModsNToggles[0] = TRUE; 
        			else
            			DisplayTitle = TRUE;
            	    
            	if(!WarzoneLootProfile) 
            	{
            		if(SelectedProfileIdx) 
            	   		ProfileIdx = 1;
            		else
            	   		ProfileIdx = 0; 
    			}
    			if(ActivateHoldButton[0] &&  get_ival(ActivateHoldButton[0]))
	    			set_val(ActivatePressButton[0], 0);
	    		} 
      		}
      	} 
        if(ActivateHoldButton[1]) 
        {
        	if(get_ival(ActivateHoldButton[1]) && get_ival(ActivatePressButton[1]))
            {
             	ProfileIdx = 2; 
	       	   	WarzoneLootProfile = TRUE;
	       	    
	       	    if(ModOrEditMenu[0]) 
    				DisplayModsNToggles[0] = TRUE; 
        		else
            		DisplayTitle = TRUE;
	       	}           
	       	if(ActivateHoldButton[1] &&  get_ival(ActivateHoldButton[1]))
	    		set_val(ActivatePressButton[1], 0);   
	   	}   	
    } 
    if(ToggleHairTriggers) 
	{	
		if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);
	
		if(get_ival(PS4_L2) > 10)
			set_val(PS4_L2, 100);
	} 
	if(ToggleBlockRumble) 
	{
		block_rumble();
	} 
    // When Drive Mode is Activated, This Turns EVERYTHING Off in the script, Purpose of this, is when entering a vehicle in Warzone, To Turn Drive Mode Off, Press Square( Exit Vehicle ) 
    if(DriveMode) 
    {
    	if(event_press(PS4_SQUARE))
    	{
    		DriveMode = FALSE;
    		combo_run(RumbleOff); 
        } 
    } 
    // If NOT In DriveMode ( KillSwitch )
    if(!DriveMode)           
	{ 
	
	    // Quick Toggles \\
    	 ToggleRapidFire[ProfileIdx]  = Quick_Toggle(ActivateHoldButton[2] , ActivatePressButton[2],ToggleRapidFire[ProfileIdx], 4); 
    	 ToggleAkimboRf               = Quick_Toggle(ActivateHoldButton[3] , ActivatePressButton[3],ToggleAkimboRf,              5); 
         ToggleHoldBreath             = Quick_Toggle(ActivateHoldButton[4] , ActivatePressButton[4],ToggleHoldBreath,           10);
    	 ToggleMasterProfileSwitch   = Quick_Toggle1(ActivateHoldButton[5] , ActivatePressButton[5],ToggleMasterProfileSwitch  ,35); 
    	
    	 
    	 
	    // Test Mode ( Editable Menu, this is so we can edit values for Recoil/Aim Assist while in game using L2 and R2 ) 
    	if(ModOrEditMenu[2] || !ModOrEditMenu[2]) 
		{ 
    		if(ToggleTaylorAR[ProfileIdx] == 1) 
    		{
	       		if(get_ival(Fire))
	        	{ 
		    		if(!get_rumble(RumbleToUse()))
						SmartSens(TaylorStrength[ProfileIdx], PS4_RY);
    		
			    	else
			    	{
						SmartRumble = get_rumble(RumbleToUse());
	                 				
						if(SmartRumble > 10 && SmartRumble < 90) 
						{
							AntirecoilStrength = TaylorStrength[ProfileIdx] + SmartRumble / 4;
							SmartRumble = 0; 
						}
					   
						SmartSens(AntirecoilStrength,PS4_RY);  // SinAngle < Aim Assist 
						SmartSens(HorizStrength[ProfileIdx],PS4_RX);  // CosAngle < Aim Assist 
					}
					SmartRumble         = 0;  // Reset Rumble 
    	    		AntirecoilStrength  = 0;  // Reset Antirecoil Strength 
				}	
			}
		    if(ToggleProgressive[ProfileIdx] == 1)  
			{
			// Vertical
    			// Adding or subtracting
				if(VerticalStart[ProfileIdx] < VerticalEnd[ProfileIdx])
					i_val = 1;
				else
					i_val = -1;
    			// Iteration point for progression 
    			 
			    i_pnt = (VerticalTime[ProfileIdx] * 10) / (abs(VerticalStart[ProfileIdx] - VerticalEnd[ProfileIdx])); 

			// Horizontal
    			// Adding or subtracting
				if(HorizontalStart[ProfileIdx] < HorizontalEnd[ProfileIdx])
					i_val_h = 1;
				else
					i_val_h = -1;
    		// Iteration point for progression 
    			i_pnt_h = (HorizontalTime[ProfileIdx] * 10) / (abs(HorizontalStart[ProfileIdx] - HorizontalEnd[ProfileIdx]));
    				
			// Reset counters/pointers
				if(!get_ival(Fire))  
				{
					// Vertical
					ar_y = VerticalStart[ProfileIdx];
					i_cnt = 0;
					i_num = 0;
					// Horizontal
					ar_x = HorizontalStart[ProfileIdx];
					i_cnt_h = 0;
					i_num_h = 0;
				}
			// If Fire button is held
    			if(get_ival(Fire)) 
    			{
			        // Vertical
        			if(!p_complete())  
    	   				ar_y = p_val();
    				else
           			    ar_y = VerticalEnd[ProfileIdx];
		
	          		// Horizontal
       			 	if(!p_complete_x())
    	            	ar_x = p_val_x();
    	         	else
                    	ar_x = HorizontalEnd[ProfileIdx];
         
    	    // Set RY to SmartSens AntiRecoil value
				    SmartSens(ar_y, PS4_RY);   
    		// Set RX to SmartSens AntiRecoil value
					SmartSens(ar_x, PS4_RX);
    			}
	        }
	        if(ToggleTaylorAssist[ProfileIdx]) 
			{
				RX = get_val(PS4_RX);                                
    			RY = get_val(PS4_RY);                              
  				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
  				MaxMagnitude = (ActualMagnitude < 100);             
		                    
				angle += TaylorAngle[ProfileIdx] + Angle;                                    
				angle = angle % 360;  
				CosAngle = DamPolar[(angle + 270) % 360];  
				SinAngle = DamPolar[angle % 360];
    
   		   		if(ToggleRumbleBoost)
    			{
    				if(get_ival(Fire))
    				{
    					SmartRumble = get_rumble(RumbleToUse());
    					Angle = TaylorAngleBoost;
    		
    				if(SmartRumble > 10 && SmartRumble < 90)  
    				{
    					PolarStrength  = (TaylorRadius[ProfileIdx] + PolarBoost + TaylorAngleBoost + SmartRumble / 4); 
    					SmartRumble    = 0;
    				}
    				set_val(TRACE_3,PolarStrength); 
    			} 
    		}
    		if(get_ival(Ads) || get_ival(Fire))         
    		{
        		if(ActualMagnitude < TaylorRadius[ProfileIdx])           
        		{
           			SinAngle -= RY;                                                              
					CosAngle -= RX;
	    		}
	   			else 
	   			{     
					SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
					CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
				}                                                  
				if(!get_rumble(RumbleToUse()))
    				GetShapes(TaylorRadius[ProfileIdx]); 
    			else 
    				GetShapes(PolarStrength); 
				}
				PolarStrength = 0; 
    			SmartRumble   = 0;  
			} 
			if(ToggleBattsAimAssist[ProfileIdx] == 1) 
			{
				if(get_val(Ads) || get_ival(Fire))
				{
    				AimAssistVal = AimAssistSize[ProfileIdx]; 
					combo_run(StickyAim) 
    		    } 
    		    if(ToggleBattsAimAssist[ProfileIdx] == 1 && ToggleBattsBoost && get_ival(Fire)) 
   			    { 
    				SmartRumble = get_rumble(RumbleToUse());
    		
        			if(SmartRumble) 
    				{
    					StickyStrength  = (AimAssistSize[ProfileIdx] + StickyBoost + SmartRumble / 4); 
    					SmartRumble    = 0;
    				}
    				AimAssistVal = StickyStrength; 
    				combo_run(StickyAim);
    			}
    			SmartRumble = 0;
            	StickyStrength = 0;		
    		} 
	    	if(ToggleRapidFire[ProfileIdx]  == 1) 
	    	{ 
	    	 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
   		     	RestTime = HoldTime -get_rtime();
    	     	if(RestTime < 0) RestTime = 0;
			    
			 	if(get_val(Fire))
			    	    
			 		combo_run(RAPIDFIRE);
			 	else
			    	combo_stop(RAPIDFIRE);
			    		
			    LedOn  = 150;
			    LedOff = 300;
			    combo_run(BLINK);
			}
			if(ToggleAkimboRf[ProfileIdx]   == 1) 
            { 	
                if(get_val(Fire))
                    combo_run(ARF);
                else 
                    combo_stop(ARF);
                    
                LedOn  = 150;
			    LedOff = 300;
			    combo_run(BLINK);               
            }
            if(ToggleBurstFire[ProfileIdx]  == 1)
            {
             // Hold and Release
		        HoldTime = BurstFireHold;
		    	RestTime = BurstFireRelease;
			
             // Run combo
                if(get_val(Fire))	
    		    	combo_run(BurstFire);
    	        else
    	            combo_stop(BurstFire);

		        LedOn  = 200;
    	        LedOff = 1000;
    	        combo_run(BLINK);
            }
            if(ToggleStrafeShot[ProfileIdx] == 1) 
	        {
	       		if(get_val(Fire))
		        	combo_run(StrafeShot);
	   			else
		   			combo_stop(StrafeShot);
			}
            if(ToggleTaylorSens[ProfileIdx] == 1) 
            {
            	ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));
                        
                if(!get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
               		TaylorSens = GeneralSens[ProfileIdx];
                }
                else if(get_val(Ads) && !get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    TaylorSens = AdsSens[ProfileIdx];
                }  
                else if(!get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune) 
                { 
                    TaylorSens = FireSens[ProfileIdx];   
                }
                else if(get_val(Ads) && get_val(Fire) && ActualMagnitude <= TaylorFineTune)
                { 
                    TaylorSens = AdsFireSens[ProfileIdx];
                }
                sensitivity(PS4_RY,NOT_USE,TaylorSens);
                sensitivity(PS4_RX,NOT_USE,TaylorSens);
            } 
			if(ToggleHoldBreath) 
            {
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}       
			if(ToggleCancelPlates)
        	{
        		if(get_ival(Swap) && get_ptime(Swap) >= 400)
           			ActivateCancelPlates = TRUE;

        		if(ActivateCancelPlates)
        		{
           	    	RunCancelPlatesTimer += get_rtime();
            
            	if(RunCancelPlatesTimer  >= 3000) 
            	{
               		RunCancelPlatesTimer  = 0;
                	ActivateCancelPlates  = FALSE;
            	}
            	if(event_press(Ads) || event_press(Fire))
                	combo_run(Cancel_Plates);
            	}
            }
			if(ToggleEnemyPing) 
        	{
        		if(get_val(Fire))
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing); 
	     
        	}
        	if(ToggleCancelSlide == 1)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(event_release(Crouch))
						combo_run(CancelSlideMW)
						
					if(combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
				}
			}
			if(ToggleCancelSlide == 2)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(event_release(Crouch))
						combo_run(CancelSlideCW)
						
					if(combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(ToggleBunnyHop)
            {
                if(get_ival(Jump) && get_ptime(Jump) > 200) 
                	combo_run(Bunnyhop); 
            } 
            if(ToggleProneShot)   
			{
				if(get_val(Fire) && get_ptime(Fire) > ProneSpeed)
					set_val(Crouch,100);
			}
			if(ToggleJumpShot)
			{
				if(get_val(Fire))
					combo_run(JumpShot);
			}
			if(ToggleAutoRun) 
            {    
                if(get_ival(PS4_LY) <-90 && !get_ival(Ads) && !get_ival(Fire) && !get_val(Crouch))
                	combo_run(TacSprint);
             
                if(get_val(Reload) && get_ptime(Reload) > 500 && !get_ival(Ads) && !get_ival(Fire))  
                    combo_run(Cancel);    
            } 
            if(ToggleCancelReload[ProfileIdx] == 1)
			{
				if(event_press(Fire))
					FirstShotBeforeReload = TRUE; 
					
				if(event_press(Reload) && FirstShotBeforeReload)
				{
					ReloadInProgress = TRUE;
					FirstShotBeforeReload = FALSE;
				}
				if(get_val(Reload) && get_ptime(Reload) >= 250)
				{
					ReloadInProgress = FALSE;
					combo_stop(CancelReload);
				}
				if(ReloadInProgress)
					ReloadTime += get_rtime();
				else 
				    ReloadTime = 0;

				if(ReloadTime > MaxReloadTime[ProfileIdx])
					ReloadInProgress = FALSE;

				if(ReloadTime > 0 && ReloadTime <= MaxReloadTime[ProfileIdx] && event_press(Fire))
					combo_run(CancelReload);
			}
			if(TogglePopAkimbo) 
			{
				if(get_ival(Fire))
					set_val(Ads,100); 
		    } 
		    if(ToggleQuickScope)
			{
				if(event_press(Ads) && get_ptime(Ads) < 140)
				combo_run(Quick_Scope);
			}
			if(ToggleFastMelee)
			{
				if(get_val(Melee))
				combo_run(FastMelee);

				if(get_val(Ads) && event_press(Melee) < 500)
				combo_stop(FastMelee);
			}
      	 }
      } 
  }
int Position;   
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition1 = True;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = False;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition2 = True;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = False;
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 1)                    
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;   
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 2)        
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * TaylorRadiusMin[ProfileIdx]) )/100; 
	}
	if(ToggleTaylorAssist[ProfileIdx] == 3)                     
	{ 
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
        RY = (get_val(PS4_RY))  + ( (SinAngle * TaylorRadiusMin[ProfileIdx]) )/100;
       
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 4)                  
	{
        RY = (get_val(PS4_RY))  + ( (SinAngle * InnerSpiral) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * OuterSpiral) )/100;  
	}
    if(ToggleTaylorAssist[ProfileIdx] == 5)
	{
		if(Position == 0 || Position == 1)
    	{  
		    RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;
		}
	    if(Position == 2 || Position == 3)
		{  
		    RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
		}
			Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
    } 
    set_val(PS4_RX,RX);
	set_val(PS4_RY,RY);
}	    
combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(120);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(80);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo Quick_Scope {
set_val(Ads,100);
wait(QuickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}         
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo Bunnyhop{
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
set_val(Jump, 100);
wait(30);
set_val(Jump, 0);
wait(30);
}
combo JumpShot {
set_val(Jump,100);
wait(100);
}
combo TacSprint {
wait(20);
set_val(Sprint,100);
wait(40);
set_val(Sprint,0);
wait(40);
}
combo CancelReload {
set_val(Swap,100);
wait(20);
wait(20)
set_val(Swap,100);
wait(20);
ReloadInProgress = FALSE; }
combo StrafeShot{ 
set_val(PS4_LX, 100);
wait(StrafeShotTime);
wait(50);
set_val(PS4_LX, -100);
wait(StrafeShotTime);
wait(20);
}
combo BurstFire { 
wait(HoldTime);
call(RAPIDFIRE);
call(RAPIDFIRE);
call(RAPIDFIRE);
call(RAPIDFIRE);
}
combo DriveMode { 
cls_oled(0); 
printf(center_x(get_misc_chars(25), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[25]);
printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[4]);
wait(1500);
DisplayTitle = TRUE;
} 
combo Saved { 
cls_oled(0); 
printf(center_x(get_misc_chars(27), OLED_FONT_MEDIUM_WIDTH),20,OLED_FONT_MEDIUM,OLED_WHITE,Misc[27]);
wait(2000);
DisplayTitle = TRUE; 
} 
combo QuickToggles{ 
wait(1500) 
DisplayTitle   = TRUE; 
reset_leds(); 
}   
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(2000); 
}
combo Cancel_Plates { 
set_val(Melee,100);
wait(20);
ActivateCancelPlates = FALSE;
RunCancelPlatesTimer = 0; 
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo StickyAim { // Batts Sticky with SmartSens
SmartSens1(PS4_RY,AimAssistVal); 
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RX,AimAssistVal);
SmartSens1(PS4_LX,AimAssistVal);
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RY,inv(AimAssistVal)); 
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RX,inv(AimAssistVal));
SmartSens1(PS4_LX,inv(AimAssistVal));
wait(AimAssistTime[ProfileIdx]);
}

combo ARF {
set_val(Fire,100);
set_val(Ads,100);
wait(40);
set_val(Fire,0);
set_val(Ads,0);
wait(AkimboRoF[ProfileIdx]);
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
combo Cancel {
set_val(Sprint,0);
wait(MaxReloadTime[ProfileIdx]);
}
function p_complete() { 
    i_cnt++;
    if (i_cnt > VerticalTime[ProfileIdx] * 10) {
    	//--avoid stack overflow
        i_cnt = VerticalTime[ProfileIdx] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val() {
    i_num++;
    if(i_num == i_pnt) {
        //--reset counter
    	i_num = 0;
    	//--adjust ar_y 
    	ar_y += i_val ;
    }
    return ar_y;
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > HorizontalTime[ProfileIdx] * 10) {
    	//--avoid stack overflow
        i_cnt_h = HorizontalTime[ProfileIdx] * 10;
        //--progression complete
        return 1;
    }
    //--progression not complete
    return 0;
}
function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) {
        //--reset counter
    	i_num_h = 0;
    	//--adjust ar_x 
    	ar_x += i_val_h;
    }
    return ar_x;
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	

function SmartSens(f_val, f_axis) { 

	if(f_val < 0)
		SmartSens_side = -1; // Left / Up for inverted ar
	else 
		SmartSens_side = 1; // Right / Down for standard ar

	if(SmartSens_side == -1) // if AntiRecoil_ has a negative value (Left or Up) 
	{
	    if(get_ival(f_axis) > 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + abs(f_val))) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100);
	
	// Set SmartSens AntiRecoil
		if(get_ival(f_axis) >= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens);
	}
	
	else // if(SmartSens_side == 1) so if AntiRecoil_ has a positive value (Right or Down)
	{
	    if(get_ival(f_axis) < 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + inv(f_val))) / 100);
	    
	// Set SmartSens AntiRecoil
	    if(get_ival(f_axis) <= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens)
	}
}
function SmartSens1(f_axis, f_val) { 

	if(f_val < 0)
		SmartSens_side = -1; // Left / Up 
	else 
		SmartSens_side = 1; // Right / Down 

	if(SmartSens_side == -1) // if f_val has a negative value (Left side or Up) 
	{
	    if(get_ival(f_axis) > 0) // if stick input has a positive value (Right side or Down)
	    	SmartSens = ((get_ival(f_axis) * (100 - f_val)) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if stick input has a negative value (Left side or Up)
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100);
	}
	
	if(SmartSens_side == 1) // if f_val has a positive value (Right side or Down)
	{
	    if(get_ival(f_axis) < 0) // if stick input has a negative value (Left side or Up)
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if stick input has a positive value (Right side or Down)
	    	SmartSens = ((get_ival(f_axis) * (100 - f_val)) / 100);
	}
// Set SmartSens on the axis
	if(SmartSens_side == -1 && get_ival(f_axis) >= f_val + SmartSens || SmartSens_side == 1 && get_ival(f_axis) <= f_val + SmartSens)
	    set_val(f_axis, clamp(f_val + SmartSens, -100, 100));
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) >= get_rumble(RUMBLE_B)) 
        return RUMBLE_A;
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
        return RUMBLE_B;
        
    return 0;
}			   
function EditableVals(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax ,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(Ads))  
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            } 
            BlockButtons();
        }
        if(f_idx == 4 || f_idx == 7)
            number_to_string(ValueIndex * 100, find_digits(ValueIndex * 100) );
        else
            number_to_string(ValueIndex,find_digits(ValueIndex)); 
    }
    return ValueIndex;                
 } 
function ModORValNavi(f_modorval,f_min,f_max) { 

	if(!get_val(Ads))
	{
		if(event_press(PS4_RIGHT))  
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayModsNToggles[0] = TRUE;   
   		}     
		if(event_press(PS4_LEFT)) 
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayModsNToggles[0] = TRUE;
		} 
        BlockButtons(); 
	}
	if(f_modorval < AmountOfEditableMods || f_modorval == 18 || f_modorval >= 20 && f_modorval <= 22) 
	{
		if(event_press(PS4_CROSS)) 
    	{ 
        	ModORVal[1]  = AmountOfValues + 1;
        	ModOrEditMenu[1]       = TRUE;
        	ModOrEditMenu[0]       = FALSE;
        	DisplayModsNToggles[0] = TRUE;
    	}
    }
    if(ModOrEditMenu[0]) 
    {
    	if(event_press(PS4_CIRCLE)) 
    	{    
    	    
        	DisplayTitle = TRUE;
        	ModOrEditMenu[1]       = FALSE; 
       		ModOrEditMenu[0]       = FALSE;
        	DisplayModsNToggles[0] = FALSE; 
        	combo_run(RumbleOff); 
    	    Save();
    	    combo_run(Saved);
    	     
    	} 	
    }
    if(ModOrEditMenu[1]) 
    {
    	if(event_press(PS4_CIRCLE)) 
    	{       
        	
        	ModOrEditMenu[1]       = FALSE; 
       		ModOrEditMenu[0]       = TRUE;
        	DisplayModsNToggles[0] = TRUE;   	
    	}
    } 
    if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 2);
        DisplayModsNToggles[0] = TRUE;   	
    }
    BlockButtons();
return f_modorval; 
}
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOff); 
    	} 
    	if(ModORVal[0] == 2) 
    	{
    	    if(f_val == 0) 
    	    	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
    	    else if(f_val == 1)
           	    printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);
           	else if(f_val== 2)
           	    printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
           	else if(f_val== 3)
           	    printf(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);	
           	else if(f_val== 4)
           	    printf(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
           	else if(f_val== 5)
           	    printf(center_x(get_misc_chars(33), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[33]);
        } 
        else if(ModORVal[0] == 13)
        {
        	if(f_val == 0)  
    			printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
           	else if(f_val == 1)
           	    printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
           	else if(f_val == 2)
           	    printf(center_x(get_misc_chars(15), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[15]);
        }
        else
        {
           	if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
        } 
    }
    return f_val;
}
function EditToggle(f_name,f_val,f_min,f_max) { 
	
    if(f_name) 
    {
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOn);     
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOff); 
    	}
        if(ModORVal[1] == 32)
        {
        	printf(center_x(get_PressButton_chars(ActivateIndividualBtnIdx), OLED_FONT_MEDIUM_WIDTH),40,OLED_FONT_MEDIUM,OLED_WHITE,PressButtons[ActivateIndividualBtnIdx]);
        }
        else if(ModORVal[1] == 29) 
        {
        	printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
        }
        else if(ModORVal[1] == 36) 
        {
        	printf(center_x(get_weapon_chars(WeaponNamesIdx[ProfileIdx]), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Weapons[WeaponNamesIdx[ProfileIdx]]);
        }
        else
        {
           	if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
        } 
    	
    }
    return f_val;
  }
function Quick_Toggle(f_hold, f_press, f_val, f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			ModORVal[0] = f_idx; 
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn); 
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff); 
			}
			DisplayQuickToggles();
			combo_run(QuickToggles);
			if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
    	} 
	    set_val(f_press, 0)
   } 
   return f_val;
}
function Quick_Toggle1(f_hold, f_press, f_val, f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			ModORVal[1] = f_idx; 
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn); 
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff); 
			}
			DisplayQuickToggles1();
			combo_run(QuickToggles);
			if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
    	} 
	    set_val(f_press, 0)
   } 
   return f_val;
}
function DisplayQuickToggles() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
    line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
	printf(center_x(get_modName_chars(ModORVal[0]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModORVal[0]]); 
	        
    if(ProfileIdx == 0) 
        printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
    else if(ProfileIdx == 1) 
        printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
    else if(WarzoneLootProfile) 
        printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);
     
} 
function DisplayQuickToggles1() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
    line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
	printf(center_x(get_valName_chars(ModORVal[1]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ValNames[ModORVal[1]]); 
    printf(center_x(get_misc_chars(24), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[24]);            
} 
function ButtonActivation(i,f_name,f_idx){

	if(f_name == f_idx) 
 	{ 
 		if(event_press(PS4_UP) || event_press(PS4_DOWN))
     	{
			 QuickToggleActive =! QuickToggleActive;
			 DisplayModsNToggles[0] = TRUE;
     	}
     	if(!QuickToggleActive)
     	{
		 	 ToggleWidth    = OLED_FONT_SMALL_WIDTH;
		 	 ToggleFont     = OLED_FONT_SMALL;
		 	 TogglePosition = 50;
		 	 ToggleWidth1   = OLED_FONT_MEDIUM_WIDTH;
		 	 ToggleFont1    = OLED_FONT_MEDIUM;
		}
	 	else
	    {
		     ToggleWidth    = OLED_FONT_MEDIUM_WIDTH;
		     ToggleFont     = OLED_FONT_MEDIUM;
		     TogglePosition = 43;
		     ToggleWidth1   = OLED_FONT_SMALL_WIDTH;
		     ToggleFont1    = OLED_FONT_SMALL;
	    } 
	   
	    if(get_ival(Ads))
	    {
        	if(event_press(PS4_RIGHT)) 
         	{
             	if(!QuickToggleActive) 
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] + 1, 0 , 6 ); 
             	else 
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] + 1, 0 , 8 ); 
             		DisplayModsNToggles[0] = TRUE;
         	}  
            if(event_press(PS4_LEFT)) 
            {
             	if(!QuickToggleActive)
             		ActivateHoldBtnIdx[i]= cycle(ActivateHoldBtnIdx[i] - 1, 0 , 6 ); 
             	else
             		ActivatePressBtnIdx[i]= cycle(ActivatePressBtnIdx[i] - 1, 0 , 8 ); 
             		DisplayModsNToggles[0] = TRUE;
            }
        }
        printf(center_x(get_HoldButton_chars(ActivateHoldBtnIdx[i])  ,ToggleWidth1),30,ToggleFont1,OLED_WHITE,HoldButtons[ActivateHoldBtnIdx[i]]);
        printf(center_x(get_PressButton_chars(ActivatePressBtnIdx[i]),ToggleWidth),TogglePosition,ToggleFont,OLED_WHITE,PressButtons[ActivatePressBtnIdx[i]]); 
     }
 } 
function ActivateAllButtons(){
    
    for (i = 0; i < ActivateButtonCount; i++) 
    {
        ActivateHoldButton[i]          = HoldBtns[clamp(ActivateHoldBtnIdx[i], 0, sizeof(HoldBtns))];
        ActivatePressButton[i]         = PressBtns[clamp(ActivatePressBtnIdx[i],0, sizeof(PressBtns))];
        ActivateIndividualButton       = PressBtns[clamp(ActivateIndividualBtnIdx, 0, sizeof(PressBtns))]; 
    }
    return;
    
} 
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_HoldButton_chars(f_idx){
	if (HoldButtons[f_idx + 1] != -1) 
		return HoldButtons[f_idx + 1] - HoldButtons[f_idx] - 1;
	return sizeof(HoldButtons) - HoldButtons[f_idx];		
}
function get_PressButton_chars(f_idx){
	if (PressButtons[f_idx + 1] != -1) 
		return PressButtons[f_idx + 1] - PressButtons[f_idx] - 1;
	return sizeof(PressButtons) - PressButtons[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function get_weapon_chars(f_idx){
	if (Weapons[f_idx + 1] != -1) 
		return Weapons[f_idx + 1] - Weapons[f_idx] - 1;
	return sizeof(Weapons) - Weapons[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),39,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}
function Load() {

	pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
	ToggleRapidFire  [0]      = unpack_usigned(pval_data, 0, 1);
	ToggleRapidFire  [1]      = unpack_usigned(pval_data, 1, 1);
	ToggleRapidFire  [2]      = unpack_usigned(pval_data, 2, 1);
	ToggleAkimboRf   [0]      = unpack_usigned(pval_data, 3, 1);
	ToggleAkimboRf   [1]      = unpack_usigned(pval_data, 4, 1);
	ToggleAkimboRf   [2]      = unpack_usigned(pval_data, 5, 1);
	ToggleTaylorSens [0]      = unpack_usigned(pval_data, 6, 1);
	ToggleTaylorSens [1]      = unpack_usigned(pval_data, 7, 1);
	ToggleTaylorSens [2]      = unpack_usigned(pval_data, 8, 1);
	ToggleHoldBreath          = unpack_usigned(pval_data, 9, 1);
	ToggleProneShot           = unpack_usigned(pval_data,10, 1);
    ToggleJumpShot            = unpack_usigned(pval_data,11, 1);
   
  
    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    ToggleTaylorAR         [0]= unpack_usigned(pval_data, 0, 1);
    ToggleTaylorAR         [1]= unpack_usigned(pval_data, 1, 1);
    ToggleTaylorAR         [2]= unpack_usigned(pval_data, 2, 1);
    ToggleProgressive      [0]= unpack_usigned(pval_data, 3, 1);
    ToggleProgressive      [1]= unpack_usigned(pval_data, 4, 1);
    ToggleProgressive      [2]= unpack_usigned(pval_data, 5, 1);
    ToggleBattsAimAssist   [0]= unpack_usigned(pval_data, 6, 1);
    ToggleBattsAimAssist   [1]= unpack_usigned(pval_data, 7, 1);
    ToggleBattsAimAssist   [2]= unpack_usigned(pval_data, 8, 1);
    ToggleRumbleBoost         = unpack_usigned(pval_data, 9, 1);
    ToggleBattsBoost          = unpack_usigned(pval_data,10, 1);
    ToggleAutoRun             = unpack_usigned(pval_data,11, 1);
    
    pval_data = get_pvar(SPVAR_3, 1, 32767, 0);
    TogglePopAkimbo           = unpack_usigned(pval_data, 0, 1);
    ToggleBlockRumble         = unpack_usigned(pval_data, 1, 1); 
    ToggleBunnyHop            = unpack_usigned(pval_data, 2, 1); 
    ToggleEnemyPing           = unpack_usigned(pval_data, 3, 1);
    ToggleCancelPlates        = unpack_usigned(pval_data, 4, 1); 
    ToggleMasterProfileSwitch = unpack_usigned(pval_data, 5, 1);
    ToggleDefaultBtn          = unpack_usigned(pval_data, 6, 1);
    ToggleCancelReload[0]     = unpack_usigned(pval_data, 7, 1);
    ToggleCancelReload[1]     = unpack_usigned(pval_data, 8, 1);
    ToggleCancelReload[2]     = unpack_usigned(pval_data, 9, 1);
    ToggleBurstFire[0]        = unpack_usigned(pval_data,10, 1);
    ToggleBurstFire[1]        = unpack_usigned(pval_data,11, 1);
    ToggleBurstFire[2]        = unpack_usigned(pval_data,12, 1);
   
    pval_data = get_pvar(SPVAR_4, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleTaylorAssist  [0]     = unpack_int16_to_int8(pval_data, 0);
	ToggleTaylorAssist  [1]     = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_5, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleTaylorAssist  [2]     = unpack_int16_to_int8(pval_data, 0);
	ToggleCancelSlide           = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_6, -32767, 32767, 0);
	TaylorStrength  [0]       = unpack_int16_to_int8(pval_data, 0);
	TaylorStrength  [1]       = unpack_int16_to_int8(pval_data, 1);

	TaylorStrength  [2]       = get_pvar(SPVAR_7,-99,99,0);       

    pval_data = get_pvar(SPVAR_8, 1, 32767, pack_int8_to_int16(15,15));
	TaylorRadius    [1]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadius    [2]       = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_9, 1, 32767, pack_int8_to_int16(15,15));
	TaylorAngle     [0]       = unpack_int16_to_int8(pval_data, 0);
	TaylorAngle     [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_10, 1, 32767, pack_int8_to_int16(15,5));
	TaylorAngle     [2]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadiusMin [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_11, 1, 32767, pack_int8_to_int16(15,15));
	AimAssistSize   [0]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistSize   [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_12, 1, 32767, pack_int8_to_int16(15,10));
	AimAssistSize   [2]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistTime   [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_13, 1, 32767, pack_int8_to_int16(10,10));
	AimAssistTime   [1]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistTime   [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_14, 1, 32767, pack_int8_to_int16(10,10));
	PolarBoost               = unpack_int16_to_int8(pval_data, 0);
	StickyBoost              = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_15, -32767, 32767, 0);
	VerticalStart   [0]       = unpack_int16_to_int8(pval_data, 0);
	VerticalStart   [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_16, -32767, 32767, 0);
	VerticalStart   [2]       = unpack_int16_to_int8(pval_data, 0);
	VerticalEnd     [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_17, -32767, 32767, 0);
	VerticalEnd     [1]       = unpack_int16_to_int8(pval_data, 0);
	VerticalEnd     [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_18, 1, 32767, 0);
	VerticalTime    [0]       = unpack_int16_to_int8(pval_data, 0);
	VerticalTime    [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_19, 1, 32767, 0);
	VerticalTime    [2]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalTime  [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_20,-32767, 32767, 0);
	HorizontalStart [0]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalStart [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_21,-32767, 32767, 0);
	HorizontalStart [2]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalEnd   [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_22,-32767, 32767, 0);
	HorizontalEnd   [1]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalEnd   [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_23, 1, 32767, 0);
	HorizontalTime    [1]       = unpack_int16_to_int8(pval_data, 0);
	HorizontalTime    [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_24, 1, 32767, pack_int8_to_int16(1,1));
	RateOfFire        [0]       = unpack_int16_to_int8(pval_data, 0);
	RateOfFire        [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_25, 1, 32767, pack_int8_to_int16(1,1));
	RateOfFire        [2]       = unpack_int16_to_int8(pval_data, 0);
	AkimboRoF         [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_26, 1, 32767, pack_int8_to_int16(1,1));
	AkimboRoF         [1]       = unpack_int16_to_int8(pval_data, 0);
	AkimboRoF         [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_27, 1, 32767, pack_int8_to_int16(0,0));
	Buttons                     = unpack_int16_to_int8(pval_data, 0);
	ActivateIndividualBtnIdx    = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_28, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [0]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[0]      = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_29, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [1]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[1]      = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_30, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [2]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[2]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_31, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [3]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[3]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_32, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [4]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[4]      = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_33, 1, 32767, pack_int8_to_int16(0, 0));
	ActivateHoldBtnIdx [5]      = unpack_int16_to_int8(pval_data, 0);
	ActivatePressBtnIdx[5]      = unpack_int16_to_int8(pval_data, 1);

	GeneralSens[0]              = get_pvar(SPVAR_34,   1, 327,  100); 
	GeneralSens[1]              = get_pvar(SPVAR_35,   1, 327,  100); 
	GeneralSens[2]              = get_pvar(SPVAR_36,   1, 327,  100); 
	AdsSens[0]                  = get_pvar(SPVAR_37,   1, 327,  100); 
	AdsSens[1]                  = get_pvar(SPVAR_38,   1, 327,  100);
	AdsSens[2]                  = get_pvar(SPVAR_39,   1, 327,  100); 
    FireSens[0]                 = get_pvar(SPVAR_40,   1, 327,  100); 
    FireSens[1]                 = get_pvar(SPVAR_41,   1, 327,  100); 
    FireSens[2]                 = get_pvar(SPVAR_42,   1, 327,  100); 
	AdsFireSens[0]              = get_pvar(SPVAR_43,   1, 327,  100); 
	AdsFireSens[1]              = get_pvar(SPVAR_44,   1, 327,  100); 
	AdsFireSens[2]              = get_pvar(SPVAR_45,   1, 327,  100); 
	
	BurstFireHold               = get_pvar(SPVAR_46,   1,   999,  150); 
   	BurstFireRelease            = get_pvar(SPVAR_47,   1,   999,  150); 
   	MaxReloadTime[0]            = get_pvar(SPVAR_48,   1,  9000, 2000);
   	MaxReloadTime[1]            = get_pvar(SPVAR_49,   1,  9000, 2000);
   	MaxReloadTime[2]            = get_pvar(SPVAR_50,   1,  9000, 2000);
   	
   	pval_data = get_pvar(SPVAR_51, -32767, 32767, 0);
	HorizStrength [0]           = unpack_int16_to_int8(pval_data, 0);
	HorizStrength [1]           = unpack_int16_to_int8(pval_data, 1);
    HorizStrength [2]           = get_pvar(SPVAR_52, -99,  99, 0); 
    WeaponNamesIdx[0]           = get_pvar(SPVAR_53,   0,  53, 0);
    WeaponNamesIdx[1]           = get_pvar(SPVAR_54,   0,  53, 0);
    WeaponNamesIdx[2]           = get_pvar(SPVAR_55,   0,  53, 0);
    QuickScopeDelay             = get_pvar(SPVAR_56,  50, 600, 350);
     
    pval_data = get_pvar(SPVAR_57, 1, 32767, 0);
    ToggleQuickScope            = unpack_usigned(pval_data, 0, 1);
    ToggleFastMelee             = unpack_usigned(pval_data, 1, 1);
    ToggleStrafeShot[0]         = unpack_usigned(pval_data, 2, 1);
    ToggleStrafeShot[1]         = unpack_usigned(pval_data, 3, 1);
    ToggleStrafeShot[2]         = unpack_usigned(pval_data, 4, 1);
    
    
    pval_data = get_pvar(SPVAR_58, 1, 32767, pack_int8_to_int16(5,5));
	TaylorRadiusMin [1]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadiusMin [2]       = unpack_int16_to_int8(pval_data, 1);
	
	StrafeShotTime            = get_pvar(SPVAR_59, 1, 999, 500);
	TaylorRadius    [0]       = get_pvar(SPVAR_60, 1,  99,  15);
	TaylorAngleBoost          = get_pvar(SPVAR_61, 1,  40,  5); 
		
}
function Save(){ 

  pval_data = pack_usigned(pval_data, ToggleRapidFire        [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [0]   ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [1]   ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [2]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorSens       [0]   ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorSens       [1]   ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorSens       [2]   ,8, 1);
  pval_data = pack_usigned(pval_data, ToggleHoldBreath             ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleProneShot             ,10, 1);
  pval_data = pack_usigned(pval_data, ToggleJumpShot              ,11, 1);
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleProgressive      [0]   ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleProgressive      [1]   ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleProgressive      [2]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAimAssist   [0]   ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAimAssist   [1]   ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAimAssist   [2]   ,8, 1);
  pval_data = pack_usigned(pval_data, ToggleRumbleBoost            ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsBoost            ,10, 1);
  pval_data = pack_usigned(pval_data, ToggleAutoRun               ,11, 1);
  set_pvar(SPVAR_2,pval_data);
 
  pval_data = pack_usigned(pval_data, TogglePopAkimbo             , 0, 1);
  pval_data = pack_usigned(pval_data, ToggleBlockRumble            ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleBunnyHop               ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleEnemyPing              ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleCancelPlates           ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleMasterProfileSwitch   , 5, 1);
  pval_data = pack_usigned(pval_data, ToggleDefaultBtn            , 6, 1);
  pval_data = pack_usigned(pval_data, ToggleCancelReload     [0]   ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleCancelReload     [1]   ,8, 1);
  pval_data = pack_usigned(pval_data, ToggleCancelReload     [2]   ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleBurstFire        [0]  ,10, 1);
  pval_data = pack_usigned(pval_data, ToggleBurstFire        [1]  ,11, 1);
  pval_data = pack_usigned(pval_data, ToggleBurstFire        [2]  ,12, 1);
  set_pvar(SPVAR_3,pval_data);
                                                                              
  pval_data = pack_int8_to_int16(ToggleTaylorAssist[0],ToggleTaylorAssist[1]);    
  set_pvar(SPVAR_4,pval_data);  
                                                          
  pval_data = pack_int8_to_int16(ToggleTaylorAssist[2],ToggleCancelSlide);     
  set_pvar(SPVAR_5,pval_data);
                                                         
  pval_data = pack_int8_to_int16(TaylorStrength[0],TaylorStrength[1]);     
  set_pvar(SPVAR_6,pval_data);  
                                                      
  set_pvar(SPVAR_7,TaylorStrength[2]);
  
  pval_data = pack_int8_to_int16(TaylorRadius[1],TaylorRadius[2]);     
  set_pvar(SPVAR_8,pval_data);
                                                       
  pval_data = pack_int8_to_int16(TaylorAngle[0],TaylorAngle[1]);     
  set_pvar(SPVAR_9,pval_data);
                                                      
  pval_data = pack_int8_to_int16(TaylorAngle[2],TaylorRadiusMin[0]);     
  set_pvar(SPVAR_10,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistSize[0],AimAssistSize[1]);     
  set_pvar(SPVAR_11,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistSize[2],AimAssistTime[0]);     
  set_pvar(SPVAR_12,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistTime[1],AimAssistTime[2]);     
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_int8_to_int16(PolarBoost,StickyBoost);     
  set_pvar(SPVAR_14,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalStart[0],VerticalStart[1]);     
  set_pvar(SPVAR_15,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalStart[2],VerticalEnd[0]);     
  set_pvar(SPVAR_16,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalEnd[1],VerticalEnd[2]);     
  set_pvar(SPVAR_17,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalTime[0],VerticalTime[1]);     
  set_pvar(SPVAR_18,pval_data);
  
  pval_data = pack_int8_to_int16(VerticalTime[2],HorizontalTime[0]);     
  set_pvar(SPVAR_19,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalStart[0],HorizontalStart[1]);     
  set_pvar(SPVAR_20,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalStart[2],HorizontalEnd[0]);     
  set_pvar(SPVAR_21,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalEnd[1],HorizontalEnd[2]);     
  set_pvar(SPVAR_22,pval_data);
  
  pval_data = pack_int8_to_int16(HorizontalTime[1],HorizontalTime[2]);     
  set_pvar(SPVAR_23,pval_data);
  
  pval_data = pack_int8_to_int16(RateOfFire[0],RateOfFire[1]);     
  set_pvar(SPVAR_24,pval_data);
  
  pval_data = pack_int8_to_int16(RateOfFire[2],AkimboRoF[0]);     
  set_pvar(SPVAR_25,pval_data);
  
  pval_data = pack_int8_to_int16(AkimboRoF[1],AkimboRoF[2]);     
  set_pvar(SPVAR_26,pval_data);
  
  pval_data = pack_int8_to_int16(Buttons,ActivateIndividualBtnIdx);     
  set_pvar(SPVAR_27,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[0],ActivatePressBtnIdx [0]);     
  set_pvar(SPVAR_28,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[1],ActivatePressBtnIdx [1]);     
  set_pvar(SPVAR_29,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[2],ActivatePressBtnIdx [2]);     
  set_pvar(SPVAR_30,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[3],ActivatePressBtnIdx [3]);     
  set_pvar(SPVAR_31,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[4],ActivatePressBtnIdx [4]);     
  set_pvar(SPVAR_32,pval_data);
  
  pval_data = pack_int8_to_int16(ActivateHoldBtnIdx[5],ActivatePressBtnIdx [5]);     
  set_pvar(SPVAR_33,pval_data);
  
  set_pvar(SPVAR_34,GeneralSens[0]       );   
  set_pvar(SPVAR_35,GeneralSens[1]       ); 
  set_pvar(SPVAR_36,GeneralSens[2]       ); 
  set_pvar(SPVAR_37,AdsSens[0]           ); 
  set_pvar(SPVAR_38,AdsSens[1]           ); 
  set_pvar(SPVAR_39,AdsSens[2]           ); 
  set_pvar(SPVAR_40,FireSens[0]          ); 
  set_pvar(SPVAR_41,FireSens[1]          );
  set_pvar(SPVAR_42,FireSens[2]          ); 
  set_pvar(SPVAR_43,AdsFireSens[0]       ); 
  set_pvar(SPVAR_44,AdsFireSens[1]       );
  set_pvar(SPVAR_45,AdsFireSens[2]       ); 
  set_pvar(SPVAR_46,BurstFireHold       );   
  set_pvar(SPVAR_47,BurstFireRelease    );  
  set_pvar(SPVAR_48,MaxReloadTime[0]    );
  set_pvar(SPVAR_49,MaxReloadTime[1]    );
  set_pvar(SPVAR_50,MaxReloadTime[2]    );
  
  pval_data = pack_int8_to_int16(HorizStrength[0],HorizStrength[1]);    
  set_pvar(SPVAR_51,pval_data);
  
  
  set_pvar(SPVAR_52,HorizStrength[2]    );
  set_pvar(SPVAR_53,WeaponNamesIdx[0]   ); 
  set_pvar(SPVAR_54,WeaponNamesIdx[1]   );
  set_pvar(SPVAR_55,WeaponNamesIdx[2]   );
  set_pvar(SPVAR_56,QuickScopeDelay     ); 
  
  pval_data = pack_usigned(pval_data, ToggleQuickScope               ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleFastMelee                ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleStrafeShot[0]            ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleStrafeShot[1]            ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleStrafeShot[2]            ,4, 1);
  set_pvar(SPVAR_57,pval_data);
  
  pval_data = pack_int8_to_int16(TaylorRadiusMin[1],TaylorRadiusMin[2]);     
  set_pvar(SPVAR_58,pval_data);
  
  set_pvar(SPVAR_59,StrafeShotTime);
  set_pvar(SPVAR_60,TaylorRadius[0]); 
  set_pvar(SPVAR_61,TaylorAngleBoost); 
  
  
} 
int mask;
int ret;
int pval_data;







