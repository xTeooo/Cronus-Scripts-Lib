/* 
 /$$      /$$                 /$$                                     /$$      /$$                      /$$$$$$                                    /$$$$$$$                            /$$$$$$  /$$              
| $$$    /$$$                | $$                                    | $$  /$ | $$                     /$$__  $$                                  | $$__  $$                          /$$__  $$|__/              
| $$$$  /$$$$  /$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$  /$$$$$$$       | $$ /$$$| $$  /$$$$$$   /$$$$$$ | $$  \__//$$$$$$   /$$$$$$   /$$$$$$       | $$  \ $$ /$$$$$$   /$$$$$$       | $$  \ $$ /$$ /$$$$$$/$$$$ 
| $$ $$/$$ $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$| $$__  $$      | $$/$$ $$ $$ |____  $$ /$$__  $$| $$$$   |____  $$ /$$__  $$ /$$__  $$      | $$$$$$$//$$__  $$ /$$__  $$      | $$$$$$$$| $$| $$_  $$_  $$
| $$  $$$| $$| $$  \ $$| $$  | $$| $$$$$$$$| $$  \__/| $$  \ $$      | $$$$_  $$$$  /$$$$$$$| $$  \__/| $$_/    /$$$$$$$| $$  \__/| $$$$$$$$      | $$____/| $$  \__/| $$  \ $$      | $$__  $$| $$| $$ \ $$ \ $$
| $$\  $ | $$| $$  | $$| $$  | $$| $$_____/| $$      | $$  | $$      | $$$/ \  $$$ /$$__  $$| $$      | $$     /$$__  $$| $$      | $$_____/      | $$     | $$      | $$  | $$      | $$  | $$| $$| $$ | $$ | $$
| $$ \/  | $$|  $$$$$$/|  $$$$$$$|  $$$$$$$| $$      | $$  | $$      | $$/   \  $$|  $$$$$$$| $$      | $$    |  $$$$$$$| $$      |  $$$$$$$      | $$     | $$      |  $$$$$$/      | $$  | $$| $$| $$ | $$ | $$
|__/     |__/ \______/  \_______/ \_______/|__/      |__/  |__/      |__/     \__/ \_______/|__/      |__/     \_______/|__/       \_______/      |__/     |__/       \______/       |__/  |__/|__/|__/ |__/ |__/
                                                                                                                                                                                                                 
                                                                                                                                                                                                               
                                                                                                                                                                                                                 

 /$$   /$$                               /$$                          
| $$$ | $$                              | $$                          
| $$$$| $$  /$$$$$$   /$$$$$$  /$$$$$$$$| $$$$$$$   /$$$$$$   /$$$$$$ 
| $$ $$ $$ /$$__  $$ /$$__  $$|____ /$$/| $$__  $$ |____  $$ /$$__  $$              GRAND MERCI À NOOZBAR POUR LA FABRICATION DE CE MODÈLE SCRIPT ET MERCI DE VOTRE SOUTIEN
| $$  $$$$| $$  \ $$| $$  \ $$   /$$$$/ | $$  \ $$  /$$$$$$$| $$  \__/
| $$\  $$$| $$  | $$| $$  | $$  /$$__/  | $$  | $$ /$$__  $$| $$                               VOUS AVEZ M'AIDÉ À APPRENDRE TELLEMENT DÉJÀ ET J'APPRÉCIE BEAUCOUP           
| $$ \  $$|  $$$$$$/|  $$$$$$/ /$$$$$$$$| $$$$$$$/|  $$$$$$$| $$    Script Owner   
|__/  \__/ \______/  \______/ |________/|_______/  \_______/|__/      
                                                                          
            

  $$$$$$$$                  /$$                           /$$           /$$  /$$$$$$   /$$      /$$$$$$    /$$        
|__  $$__/                 | $$                          | $$          |__/ /$$__  $$ | $$     /$$__  $$ /$$$$        
   | $$  /$$$$$$  /$$   /$$| $$  /$$$$$$   /$$$$$$   /$$$$$$$  /$$$$$$  /$$| $$  \__//$$$$$$  |__/  \ $$|_  $$        
   | $$ |____  $$| $$  | $$| $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$| $$| $$$$   |_  $$_/    /$$$$$$/  | $$        
   | $$  /$$$$$$$| $$  | $$| $$| $$  \ $$| $$  \__/| $$  | $$| $$  \__/| $$| $$_/     | $$     /$$____/   | $$        
   | $$ /$$__  $$| $$  | $$| $$| $$  | $$| $$      | $$  | $$| $$      | $$| $$       | $$ /$$| $$        | $$        
   | $$|  $$$$$$$|  $$$$$$$| $$|  $$$$$$/| $$      |  $$$$$$$| $$      | $$| $$       |  $$$$/| $$$$$$$$ /$$$$$$   Compiler/Editer     
   |__/ \_______/ \____  $$|__/ \______/ |__/       \_______/|__/      |__/|__/        \___/  |________/|______/      
                  /$$  | $$                                                                                           
                 |  $$$$$$/                                                                                           
                  \______/                                                                                                      	                               

            36936936936936936				8888888b.            .d8888b.       88888888888 888               8888888888 d8b  .d8888b.  888  88888888888       8888888b. 
            369369369369369369				888  "Y88b          d88P  Y88b          888     888               888        Y8P d88P  Y88b 888      888           888   Y88b
           36936936936936933693				888    888          888    888          888     888               888            888    888 888      888           888    888
		  3693693693693693693693			888    888  .d88b.  888        88888888 888     88888b.   .d88b.  8888888    888 888        88888b.  888   .d88b.  888   d88P
         369369369369369369369369			888    888 d88""88b 888  88888    d88P  888     888 "88b d8P  Y8b 888        888 888  88888 888 "88b 888  d8P  Y8b 8888888P"
         3693693693693693693693699			888    888 888  888 888    888   d88P   888     888  888 88888888 888        888 888    888 888  888 888  88888888 888 T88b
        3693693693693693693693699369		888    888 888  888 888    888  d88     888     888  888 888""""  888        888 888    888 888  888 888  888""""  888  T88b
       36936939693693693693693693693693		8888888P"   "Y88P"   "Y8888P88 88888888 888     888  888  "Y8888  888        888  "Y8888P88 888  888 888   "Y8888  888   T88b
     3693693693693693693693693693693636936	 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
   36936936936936936936936936936   369369369  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
  36936   369336936369369369369        36936   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
 36936   36936 369369336936936					\||||||||||||||||||||||||||||||  TRIPLE AIM - POLAR - DOGZ ASSIST - PROGRESSION ASSIST ||||||||||||||||||||||||||||||
36933   36936  36936   3693636					 \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
693    36936  36936     369363					  \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/	
      36936  36936      369369					   \|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||/
     36936   36936       36936
     36936   36936        36936
     36936   36936        36936
      369    36936          369
		   	  369	

============================================================================================================================                                          
                               PLEASE READ BELOW  HOW TO CHANGE YOUR BUTTONS FOR SWITCH PROFILE  
 
                  TO ENABLE PROFILE BUTTONS CHANGE TO TRUE //// TO DISABLE PROFILE BUTTONS CHANGE TO FALSE
                  
    TO CHANGE THE BUTTONS, REPLACE THEM WITH WHAT YOU WOULD LIKE FOR EXAMPLE = PS4_CIRCLE; << REMEMBER TO PUT A SEMICOLON
    
============================================================================================================================
/*==========================================================================================================================
|===========================================================================================================================   
| Enable Or Disable If you want to use only 1 button to switch profile 1 or 2 |*/  define one_button_press = FALSE;     /* |
============================================================================================================================
| Enable or Disable If you want to use 2 buttons to switch profiles 1 or 2    |*/  define two_button_press = TRUE;      /* |
============================================================================================================================
==== SWITCH PROFILE BUTTONS ================================================================================================
OPTION 1 = 1 BUTTON PRESS FOR SWITCH PROFILE */  define profile_switch_button1 = PS4_TRIANGLE;                            /*
OPEN ZEN MENU TO ENABLE THIS 1 BUTTON TO CHANGE PROFILE!!!! IF YOU WANT TO CHANGE WHICH BUTTON TO PRESS REPLACE PS4_TRIANGLE
/*==========================================================================================================================
============================================================================================================================
OPTION 2 = 2 BUTTON PRESS FOR SWITCH PROFILE */  define profile_switch_button2 = PS4_L2; // ================================
/*========================================== */  define profile_switch_button3 = PS4_DOWN;                                /*
OPEN ZEN MENU TO ENABLE THIS BUTTON TO CHANGE PROFILE!! IF YOU WANT TO CHANGE THE BUTTONS REPLACE THE ABOVE!!! 
/*==========================================================================================================================
 
                             PLEASE READ THE INSTRUCTIONS BELOW ON HOW TO ACTIVATE MODS   
============================================================================================================================
==== Enter Mod Menu                                         ===== Hold L2/LT and tap OPTIONS/MENU  
==== When in Mod Menu, if you choose activate flipped triggers == Hold L1/LB and tap OPTIONS/MENU To Exit and Re-Enter   ===
============================================================================================================================
==== To edit any mods in the modMenu                        ===== Press CROSS/A to EDIT                                  ===
============================================================================================================================
==== Navigate between every mod and toggles on the ZEN Menu ===== Tap LEFT or RIGHT on the D-PAD                         ===
============================================================================================================================
==== Enable or Disable the diplayed mod                     ===== Tap UP for ON == Tap DOWN for OFF                      ===
============================================================================================================================
==== Switch Loadouts In Mod Menu                            ===== Tap Y/Triangle                                         ===
============================================================================================================================
==== Switch Loadouts In Game                                ===== USER DEFINED BUTTONS                                   ===
============================================================================================================================
==== Edit availble Mods                                     ===== Press CROSS/A OR Press CIRCLE/B to Exit Mod            ===
============================================================================================================================
==== Edit Values In available Mods                          ===== Hold L2/LT & Tap RIGHT to increase + 1                 ===
                                                            =====              Tap LEFT to decrease  - 1                 ===
                                                            =====              Tap UP   to increase  + 10                ===
                                                            =====              Tap DOWN to decrease  - 10                ===
============================================================================================================================ 
==== Navigate between values available in the editable mods ===== Tap LEFT Or RIGHT                                      ===
============================================================================================================================
==== To SAVE all mods that have been edited & enabled       ===== Press XBOX/PS Button == Screen Will diplay "SAVED"     ===
============================================================================================================================
==== To exit Mod Menu once you have saved it                ===== Hold L2/LT and Tap OPTIONS/MENU                        ===
============================================================================================================================
==== Kill Switch (Disable Everything)                       ===== Hold LT/L2 & Double Tap SHARE/VIEW                     ===
============================================================================================================================
*/
const int8 polar_LUT[] = {  /// DoNotAtMe Steady Aim ARRAY
  -100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100
};
// Text to display
   const string TITLE               = "Taylordrift";
   const string MW                  = "Modern Warfare";
   const string WARZONE             = "Pro Aim 4.4 " 
   const string PRESS_A_TO_CONTINUE = "Press A to Edit";
   const string OFF                 = "OFF"; 
   const string ON                  = "ON"; 
   const string SAVE                = "SAVED";
   const string PROFILE_1           = " Primary ": 
   const string PROFILE_2           = " Secondary ": 
   const string FLIPPED             = "Flipped";
   const string MODNAMES[] ={
   "Legacy AR", "Progressive AR","Rapid Fire","DoGz Triple","Taylor Assist","Sticky Aim","QuickScope","HoldBreath",
//       0              1             2             3               4              5            6           7	
   "Drop/Slide Mods","Enemy Ping","Easy Plates","Flipped Triggers","Controller Layout","Inverted Y","" };
//       8                 9            10              11                  12              13
   const string VALNAMES[]={
   "AR Vertical","AR Horiz","Vertical Start","Vertical End","Vertical Time","Horizontal Start","Horizontal End","Horizontal Time","Rounds/Sec","DoGz Polar",
//       0             1             2               3              4                 5                 6                7               8          9	
   "DoGz Assist","DoGz Progression","Radius","Steps","Steady Aim","Sticky Size","Sticky Time","QuickScope Delay",""} 
//      10               11             12       13        14          15             16               17  
   const string VALNAMES2[]={
   "Radius","Angle","Boost","Shake","Input","Release","DoGz High Value","DoGz Low Value","Release","Positive Value","Negative Value","Wait","Release",""}
//     0        1       2       3       4        5             6                7             8             9              10           11      12
   const string CONTROLLER_LAYOUT[]={
   "Default","Tactical","Lefty","N0M4D/Charlie","N0M4D/Charlie Tac","N0M4D/Charlie Left","Bumper Jumper","Bumper Jumper Tac","1-Hand Gunslinger","Stick & Move","Brawler","Beast",""}
//     0         1         2           3                 4                 5                   6                  7                  8                 9          10        11
   const string MISCMODS[]={
   "Off","CancelSlide","Prone Shot","Drop Shot","Bunny Hop","Slide Dropshot","Slide Shot","Jump On Shot","Fast Melee",""} 
//             0             1          2           3            4              5              6              7
   const string ENEMYPING[]={ 
   "Off","ADS Only Ping","ADS & Fire Ping",""} 
//             0                1
// Index to find Mod Name string - switchable in game with left/right in ModMenu 
   int modName_idx;
// modName # of the last Mod Name string - Used for cycle modName_idx
   define LAST_MODNAME_STRING = 13; 
// # of the last modName_idx that has a value that can be edited
   define LAST_EDITABLE_STRING = 6;   
// Index to find Val Name String - Switchable in game with left/right in ModEdit   
   int valName_idx;
// The total amount of valName strings available in ModEdit
   define AMOUNT_OF_VALNAME_IDX = 17;
// Index to find valName2 string for modEdit 2 
   int valName2_idx; 
// The total amount of valName2 strings avaialble in modEdit2
   define AMOUNT_OF_VALNAME2_IDX = 12;  
// Editable values available for 2 profiles
   int antirecoil_vertical[2]; 
   int antirecoil_horizontal[2];
   int antirecoil_start[2]; 
   int antirecoil_end[2];
   int antirecoil_time[2];
   int antirecoilH_start[2]; 
   int antirecoilH_end[2];
   int antirecoilH_time[2];
   int rate_of_fire[2];
// Variable used to define which profile to select
   int profile_idx; 
// Multi toggles for 2 profiles
   int toggle_legacyar[2];  
   int toggle_antirecoilh[2] 
   int toggle_rapidfire[2];  
   int toggle_holdbreath[2]; 
   int toggle_quickscope[2];
   int polar_aim[2]; 
   int misc_mods[2]; 	
// Amount of profiles - Used for switch profiles cycle
	define AMOUNT_OF_PROFILES = 2;  
// Amount of multi toggle - Used for display profiles
	define AMOUNT_OF_MULTI_TOGGLE = 10;		
// Anti-Recoil Variables
    int i_val;                                                        
	int i_pnt;                                                        
	int i_num;                                                        
	int i_cnt;                                                        
	int v,ar_y;
	int invert; // -1 for inverted, 1 for standard
	// Horizontal
    int i_val_h;
    int i_pnt_h;
    int i_num_h;
    int i_cnt_h;
    int v_x,ar_x;                                                                                                                                                                                
 // EnemyPing & Easy Plates // Credit to who done these codes :) 
    int enemy_ping;
    int easy_plate;
    int Prone_Speed = 80; //Prone On Shot - How long before you prone
	int DS_Speed = 60; //Drop Shot
//  Sticky Aim (Batts) 
    int sticky_aim;
    int stickyaim_size;
    int stickyaim_time;
//  Button Layout
    int btn_layout; 
    int layout_y;
// Toggles
    int swap_on;
    int inverted_on; 
// DoNotAtMe -- Steady Aim (Modified By Taylordrift21)
    int STEADY_AIM;
    int STEADY_VALUE; 
// DoGzTheFigherz Triple Aim
    define PRX		  = POLAR_RX;
    define PRY		  = POLAR_RY;
    define RS         = POLAR_RS;
    define VIB_A      = RUMBLE_A;
    define X          = PS4_RX;                                    
    define Y          = PS4_RY;
    int DoGz_AIM_ASSIST;   
    int PROGRESSION_ASSIST;
    int POLAR_ASSIST;  
 //PROGRESSION ASSIST SETTINGS
    define AAMIN  = -6;// MINIMUM VALUE  
    define AAMAX  =  6;// MAXIMUM VALUE  
    define AAVAL  =  6;// STEPS   
    define AAWMIN =  1;// MIN WAIT   
    define AAWMAX =  2;// MAXIMUM WAIT   
    define AAWVAL =  1;// STEPS
// DON'T TOUCH THESE BELOW
    int D_AS;
    int AS = AAMIN;  
    int AW = AAWMIN;
    int PROG;
    int AAS = 1;   
    int AAD = 1;
//POLAR ASSIST SETTINGS
    int RADIUS;
    int ANGLE;
    int POLAR_BOOST;
    int POLAR_SHAKE;
    int A_B_S;
    int POLAR_RELEASE;
    int POLAR_RADIUS,POLAR_ANGLE,SPEED;
//DoGz ASSIST VALUES
    int DoGz_ASSIST_RELEASE;
    define VMCR   =  0;// DEFAULT VM SPEED
    int D__AS;  
    int D__AS1    =  4; // INVERT DIRECTION VALUE
    int D___AS;
    int D_AS1; 
//POLAR CONDITIONS
    define ACTIVE_WHEN_ADS    =  TRUE;// POLAR ASSSIT PRESSING AIM
    define ACTIVE_WHEN_FIRING =  TRUE;// POLAR ASSSIT ACTIVE BY ONLY PRESSING FIRE OR AIM & FIRE                    
    define POLAR_BOOST_FIRE   =  TRUE;   
    define POLAR_SHAKE_FIRE   =  TRUE;
    int VM                    =  TRUE;// VM SPEED CONTROL ( CHANGES PATTERN AND SPEED )   
    int POSI          =   0;    
    int NEGI          =   0;        
    int WA            =   0;          
    int PROG_RELEASE  =   15;   
// DoNotAtMe Polar Aim
   int RADIUS2; 
   int STEPS;          
   define STEP_INTERVAL =  1;                            
   define VM_INTERVAL   = -2; 
   int time;                                             
   int angle;                      
   int actual_X, actual_Y, actual_Magnitude, max_Magnitude;
  
   const int8 Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
   80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
   6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
   -60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
   -96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
   -96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
   -59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
   9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
   82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; 

// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
	
// Variables for function number_to_string() 
	int i;
	int c,c_val;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

data(
//    Blue      Pink    SkyBlue    Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//   Yellow    White      Red       OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );     
     
// Refresh OLED
	int display_title = TRUE;
	int display_new; 
	int display_black;
    
// ModMenu / ModEdit / KillSwitch
	int ModMenu;	
	int ModEdit;
	int ModEdit2; 
	int KillSwitch;
	int quickscopedelay;

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

// Anti Recoil values                                                 
	int AntirecoilVertical; 
	int AntirecoilHorizontal;
	//int invert; // -1 for inverted, 1 for standard

// RapidFire
	int hold_time;                                                    
	int rest_time;
	int led_on;
	int led_off;
// Counter
	int count_black; // for screen saver
// Profiles
	int profile_1or2; // Profile 1 and 2
// Double tap 
    int q;											
    int double__tap[30];
    init {
    while(q < 30) 
    {double__tap[q] = -1;       
    q++;}}
	
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
 
init{
STEADY_AIM = (360 / STEADY_AIM) / 2;
// Profile 1
	// Toggles 
	// Values
	toggle_legacyar[0]       = get_pvar(SPVAR_1, 0, 1, 0 );     antirecoil_vertical[0]   = get_pvar(SPVAR_8, -99, 99, 0);
	toggle_antirecoilh[0]    = get_pvar(SPVAR_2, 0, 1, 0 );     antirecoil_horizontal[0] = get_pvar(SPVAR_9, -99, 99, 0);
    toggle_rapidfire[0]      = get_pvar(SPVAR_3, 0, 1, 0 );     antirecoil_start[0]      = get_pvar(SPVAR_10,  -99, 99, 0);         
    polar_aim[0]             = get_pvar(SPVAR_4, 0, 1, 0);      antirecoil_end[0]        = get_pvar(SPVAR_11,  -99, 99, 0);         
    misc_mods[0]             = get_pvar(SPVAR_5, 0, 8, 0);      antirecoil_time[0]       = get_pvar(SPVAR_12,  -99, 99, 0);
    toggle_holdbreath[0]     = get_pvar(SPVAR_6, 0, 1, 0);      antirecoilH_start[0]     = get_pvar(SPVAR_13,  -99, 99, 0);
	toggle_quickscope[0]     = get_pvar(SPVAR_7, 0, 1, 0);      antirecoilH_end[0]       = get_pvar(SPVAR_14, -99, 99, 0);
	                                                            antirecoilH_time[0]      = get_pvar(SPVAR_15, -99, 99, 0);	
	                                                            rate_of_fire[0]          = get_pvar(SPVAR_16,  1, 25, 1);
// Profile 2 ===================================================================================================================
	// Toggles                                                  // Values
    toggle_legacyar[1]       = get_pvar(SPVAR_17, 0, 1, 0 );    antirecoil_vertical[1]   = get_pvar(SPVAR_24, -99, 99, 0);
	toggle_antirecoilh[1]    = get_pvar(SPVAR_18, 0, 1, 0 );    antirecoil_horizontal[1] = get_pvar(SPVAR_25, -99, 99, 0);
    toggle_rapidfire[1]      = get_pvar(SPVAR_19, 0, 1, 0 );    antirecoil_start[1]      = get_pvar(SPVAR_26,  -99, 99, 0);         
	polar_aim[1]             = get_pvar(SPVAR_20, 0, 1, 0 );    antirecoil_end[1]        = get_pvar(SPVAR_27,  -99, 99, 0);         
    misc_mods[1]             = get_pvar(SPVAR_21, 0, 8, 0 );    antirecoil_time[1]       = get_pvar(SPVAR_28,  -99, 99, 0);
    toggle_holdbreath[1]     = get_pvar(SPVAR_22, 0, 1, 0 );    antirecoilH_start[1]     = get_pvar(SPVAR_29,  -99, 99, 0);
	toggle_quickscope[1]     = get_pvar(SPVAR_23, 0, 1, 0 );    antirecoilH_end[1]       = get_pvar(SPVAR_30, -99, 99, 0);
	                                                            antirecoilH_time[1]      = get_pvar(SPVAR_31, -99, 99, 0);	
	                                                            rate_of_fire[1]          = get_pvar(SPVAR_32,  1, 25, 1);
//===============================================================================================================================	                                                           
// Misc                                                          
    POLAR_ASSIST        = get_pvar(SPVAR_33, 0, 1, 0    );      STEPS                    = get_pvar(SPVAR_50,  1, 99, 15 );
    DoGz_AIM_ASSIST     = get_pvar(SPVAR_34, 0, 1, 0    );      RADIUS2                  = get_pvar(SPVAR_51,  1, 99, 20 );                                                           
    PROGRESSION_ASSIST  = get_pvar(SPVAR_35, 0, 1, 0    );      stickyaim_size           = get_pvar(SPVAR_52,  1, 50, 20 );
    RADIUS              = get_pvar(SPVAR_36, 1, 100, 8  );      stickyaim_time           = get_pvar(SPVAR_53,  1, 99, 20 );
    ANGLE               = get_pvar(SPVAR_37, 1, 50, 20  );      quickscopedelay          = get_pvar(SPVAR_54,  50,600,350);
    POLAR_BOOST         = get_pvar(SPVAR_38, 1, 30, 5   );      btn_layout               = get_pvar(SPVAR_55,  0, 11, 0 ); 
    POLAR_SHAKE         = get_pvar(SPVAR_39, 1, 50, 20  );      STEADY_AIM               = get_pvar(SPVAR_56,  1, 90, 25); 
    A_B_S               = get_pvar(SPVAR_40, 1, 5, 2    );
    POLAR_RELEASE       = get_pvar(SPVAR_41, 1, 50, 15  ); 
    D___AS              = get_pvar(SPVAR_42, -35, 35, 5 ); 
    D_AS1               = get_pvar(SPVAR_43, -35, 35, -5): 
    DoGz_ASSIST_RELEASE = get_pvar(SPVAR_44, 1, 100, 50 ); 
    sticky_aim          = get_pvar(SPVAR_45, 0, 1, 0    ); 
    enemy_ping          = get_pvar(SPVAR_46, 0, 2, 0    );
    easy_plate          = get_pvar(SPVAR_47, 0, 1, 0    );
    swap_on             = get_pvar(SPVAR_48, 0, 1, 0    );
    inverted_on         = get_pvar(SPVAR_49, 0, 1, 0    );
    
   
}

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                                     MAIN SECTION                                                      |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
main {
// Debug - Device Monitor
	set_val(TRACE_3,   D___AS); 
	set_val(TRACE_4, D_AS1); 
	//set_val(TRACE_3, profile_idx);
	//set_val(TRACE_4, valName2_idx);
	//set_val(TRACE_5, RADIUS);
	//set_val(TRACE_6, DG_AS);
	buttons_layout();
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Crossover
    if(get_controller() != PIO_PS4) // If XBOX controller:
    {
        if(get_console() == PIO_PS4) // If PS4 console:
        {
            swap(PS4_SHARE,PS4_TOUCH); // View = TouchPad
        
                if(get_val(PS4_R3) && event_press(PS4_TOUCH)) //  RS + View = ScreenShot
                {
                    set_val(PS4_SHARE,100);
                    set_val(PS4_TOUCH,0);
                    set_val(PS4_R3,0);
                }
        }
	}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                     DISPLAY TITLE                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

// Display Script Title    
    if(display_title)
    {
    	cls_oled(0);	// clear OLED screen
    	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	count_black = 0;// reset screen saver counter
    	
    	if(KillSwitch)
    	{
    		printf(center_x(sizeof(OFF) - 1, OLED_FONT_LARGE_WIDTH),8,OLED_FONT_LARGE,OLED_WHITE,OFF[0]);	// display OFF centered in X 
			                                     // display Battery
		}
    	else
    	{
    	   printf(center_x(sizeof(TITLE) - 1, OLED_FONT_SMALL_WIDTH),10,OLED_FONT_SMALL,OLED_WHITE,TITLE[0]);
   
           printf(center_x(sizeof(MW) - 1, OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,MW[0]);

           printf(center_x(sizeof(WARZONE) - 1, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,WARZONE[0]);
          
    	// Display profile name
    		if(profile_idx == 0)
    	       printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]);
    		if(profile_idx == 1)
    		   printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]);
    		  
    	
    		display_black = TRUE;	// screen saver
    		display_title = FALSE;
    	}
    }

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
// Screen saver (OLED off)
    if(display_black && !ModMenu && !KillSwitch)
    {
    	count_black += get_rtime();
    	if(count_black >= 5000)
    	{
    		cls_oled(0);
    		count_black = 0;
    		display_black = FALSE;
    	}
    }

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                      KILL SWITCH                                                      |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 
  
	if(get_val(AIM_BTN))
	{
	// Kill Switch	
		if(event_release(PS4_SHARE))
		{
			KillSwitch = !KillSwitch;
			
			if(KillSwitch)        
				combo_run(RUMBLE_OFF);	// rumble and LED blink
			else
				combo_run(RUMBLE_ON);	// rumble and LED blink
			
    		//display_black = FALSE;
			display_title = TRUE;
		}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                       MOD MENU                                                        |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

	// toggle ModMenu ON/OFF
		if(event_release(PS4_OPTIONS) && !KillSwitch)
		{
			ModMenu = !ModMenu;
			
			if(!ModMenu)
			{
				ModEdit = FALSE; 		// close ModEdit too
				ModEdit2 = FALSE; //save ();				// save function
				//combo_run(EXIT_SAVE);	// rumble, blink and display SAVED then display TITLE
				combo_run(RUMBLE_OFF);  // rumble and LED blink
				display_title = TRUE;   // display Title
			}
			
			if(ModMenu)
			{
				modName_idx = 0;        // start to the first adjustable value
				combo_run(RUMBLE_ON);	// rumble and LED blink
				display_new = TRUE;		// display mod name, profile, ON/OFF and value
			}
		}
		set_val(PS4_SHARE, 0);		    // block
		set_val(PS4_OPTIONS, 0);		// block
	} // L2 end

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
if(!KillSwitch)
{
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
if(ModMenu)
	{
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            MOD EDIT                                               |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 


		if(modName_idx <= LAST_EDITABLE_STRING)	// if ANTIRECOIL 
		{		   
			if(event_press(PS4_CROSS) && !ModEdit && !ModEdit2) // Turn ModEdit2 ONif(ModEdit &&
			{
				
				valName_idx = AMOUNT_OF_VALNAME_IDX + 1; // I don't verify if it's true
				ModEdit = TRUE; // you are in mod edit 2
				combo_run(RUMBLE_ON);
				display_new = TRUE;
			}
			
			if(event_press(PS4_CIRCLE) && ModEdit && !ModEdit2) // Turn ModEdit2 OFF
			{
				ModEdit = FALSE; // you leave mod edit2 and return mod edit
				combo_run(RUMBLE_OFF);
				display_new = TRUE;
			}
		}
        /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                          EDIT VALUES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
       if(ModEdit) 
       { 
       
       		if(valName_idx>=9 && valName_idx<=11)  // // if ver 5.3 or ver 7.0 is displayed
       		//if(modName_idx == 1)
        	{
         		if(event_press(PS4_CROSS) && !ModEdit2) // Turn ModEdit2 ON
				{
					valName2_idx = AMOUNT_OF_VALNAME2_IDX + 1; 
					ModEdit2 = TRUE; // you are in mod edit 2
					combo_run(RUMBLE_ON);
					display_new = TRUE;
				}
			
				if(event_press(PS4_CIRCLE) && ModEdit2) // Turn ModEdit2 OFF
				{
					ModEdit2 = FALSE; // you leave mod edit2 and return mod edit
					combo_run(RUMBLE_OFF);
					display_new = TRUE;
				}
			}

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                          EDIT VALUES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
            
	// ModEdit ON
		if(ModEdit2)
		{
			if(get_val(AIM_BTN))
				{ 
					
					 RADIUS               = edit_val(valName2_idx,0 , RADIUS                  , 0 , 99 , 1 , 10   );       // valName2_idx 0
					 ANGLE                = edit_val(valName2_idx,1 , ANGLE                   , 0 , 99 , 1 , 10   );     // valName2_idx 1
					 POLAR_BOOST          = edit_val(valName2_idx,2 , POLAR_BOOST             , 30  ,30,  1 , 10   );       // valName2_ idx 2
					 POLAR_SHAKE          = edit_val(valName2_idx,3 , POLAR_SHAKE             , 0 , 50 , 1 , 10   );       // valName2_ idx 2
					 A_B_S                = edit_val(valName2_idx,4 , A_B_S                   , 0 , 5 , 1 , 10   );       // valName2_ idx 2
					 POLAR_RELEASE        = edit_val(valName2_idx,5, POLAR_RELEASE          , 0 , 50 , 1 , 10   );       // valName2_ idx 2
					 D___AS               = edit_val(valName2_idx,6 , D___AS                  , 35 , 35 , 1 , 10   );       // valName2_ idx 2
					 D_AS1                = edit_val(valName2_idx,7 , D_AS1                   , 35 , 35 , 1 , 10   );       // valName2_ idx 2
					 DoGz_ASSIST_RELEASE  =	edit_val(valName2_idx,8, DoGz_ASSIST_RELEASE     , 0  , 100, 1 , 10 ); 
					 POSI               = edit_val(valName2_idx,9, POSI                    , 30 , 30 , 1 , 10 ); 
					 NEGI               = edit_val(valName2_idx,10, NEGI                    , 30 , 30 , 1 , 10 ); 
					 WA                 = edit_val(valName2_idx,11, WA                      , 2  , 100, 1 , 10 ); 
				     PROG_RELEASE       = edit_val(valName2_idx,12, PROG_RELEASE            , 8  , 90 , 1 , 10 ); 
					 
					 
					 
				} 
				else
				{
				     
				
	     			if(event_press(PS4_RIGHT))
					{
						valName2_idx += 1;
						display_new = TRUE; // Display value name and value
					}
					
					if(event_press(PS4_LEFT))
					{
						valName2_idx -= 1;
						display_new = TRUE;
					}	
				
	         		if(valName_idx == 9)vals_available1( 0, 5);     // valName = 6 == press CROSS/A to enter ModEdit2 = 2 valName2_idx to edit
		    		if(valName_idx == 10)vals_available1(6, 8); 
		    		if(valName_idx == 11)vals_available1(9, 12); // valName = 7 == press CROSS/A to enter ModEdit2 = 1 valName2_idx to edit
			       
				}
    		} // mod edit 2 end
			else // if not modedit 2
			{
		
			if(get_val(AIM_BTN)) // Edit value: hold L2 + UP (+1) or DOWN (-1) or RIGHT (+10) or LEFT (-10)
			{
			// Mods that can have different values depending the active Profile
			
    		  //val_I_want_to_edit[profile] = edit_val( corresponding valName_idx , val_I_want_to_edit[profile], abs(range min) , range max ); 	
			    antirecoil_vertical[profile_idx]   = edit_val(valName_idx, 0 , antirecoil_vertical[profile_idx]  , 0  ,   99 , 1 , 10   ); // the first 0 define valName_idx so in this case, AR Start
				antirecoil_horizontal[profile_idx] = edit_val(valName_idx, 1 , antirecoil_horizontal[profile_idx], 99 ,   99 , 1 , 10   );
				antirecoil_start[profile_idx]      = edit_val(valName_idx, 2 , antirecoil_start[profile_idx]     , 0 , 99 , 1 , 10   ); // the first 0 define valName_idx so in this case, AR Start
				antirecoil_end[profile_idx]        = edit_val(valName_idx, 3 , antirecoil_end[profile_idx]       , 0 , 99 , 1 , 10   ); // the 2 last numbers are range min and range max
				antirecoil_time[profile_idx]       = edit_val(valName_idx, 4 , antirecoil_time[profile_idx]      , 0 , 99 , 1 , 10   ); // only ar_t display value x100 (real time in ms) - so 99 display 9,900 so 9.9 seconds 
			    antirecoilH_start[profile_idx]     = edit_val(valName_idx, 5 , antirecoilH_start[profile_idx]    ,99 , 99 , 1 , 10   ); 
				antirecoilH_end[profile_idx]       = edit_val(valName_idx, 6 , antirecoilH_end[profile_idx]      ,99 , 99 , 1 , 10   ); 
				antirecoilH_time[profile_idx]      = edit_val(valName_idx, 7 , antirecoilH_time[profile_idx]     , 0 , 99 , 1 , 10   );
			    rate_of_fire[profile_idx]          = edit_val(valName_idx, 8 , rate_of_fire[profile_idx]         ,  1 ,   25 , 1 , 10   );
			    RADIUS2                            = edit_val(valName_idx, 12 , RADIUS2                , 0 , 99   , 1  , 10   );
                STEPS                              = edit_val(valName_idx, 13 , STEPS                 , 0 , 99   , 1  , 10   ); 
                STEADY_AIM                         = edit_val(valName_idx, 14 , STEADY_AIM             , 0  , 90 , 1 , 10   ); 
			    stickyaim_size                     = edit_val(valName_idx, 15 , stickyaim_size        , 0 , 50   , 1  , 10   );
                stickyaim_time                     = edit_val(valName_idx, 16 , stickyaim_time        , 0 , 990  , 1  , 10   );
                quickscopedelay                    = edit_val(valName_idx, 17 , quickscopedelay      , 0 , 600  , 1  , 10   ); 
			}

            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        VALUES AVAILABLE                                           |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

			else // NOT L2 (if not editing value)
			{
			// Navigate value name
				if(event_press(PS4_RIGHT))
				{
					valName_idx += 1;
					display_new = TRUE; // Display value name and value
				}
				if(event_press(PS4_LEFT))
				{
					valName_idx -= 1;
					display_new = TRUE;
				}
				    POLAR_ASSIST                   = toggle(valName_idx, 9 , POLAR_ASSIST       );
					DoGz_AIM_ASSIST                = toggle(valName_idx, 10, DoGz_AIM_ASSIST    );
                    PROGRESSION_ASSIST             = toggle(valName_idx, 11, PROGRESSION_ASSIST ); 
                    
                   
			// Adjustable values available for each of the mods (exemple: Anti-Recoil have 4 values per profile: 0 = antirecoil_start[<active profile>], 1 = antirecoil_end[], 2 = at_t, 3 = at_h  
			 // if(modName_idx == 0) <so if I display Anti-Recoil>  vals_available( 0 , 3  ); <vals_available are valName_idx 0, 1, 2 or 3>
				if(modName_idx == 0) vals_available( 0, 1  );// Anti-Recoil		
				if(modName_idx == 1) vals_available( 2, 7  );// Noozbar/Batts Progressive Antirecoil            				
				if(modName_idx == 2) vals_available( 8, 8  );// Rapid Fire			
				if(modName_idx == 3) vals_available( 9, 11 ); 
				if(modName_idx == 4) vals_available(12, 14 ); 
				if(modName_idx == 5) vals_available(15, 16 );
				if(modName_idx == 6) vals_available(17, 17 ); 
				
				
			
			} // NOT SQUARE (if not editing value) end
		} // ModEdit end
    } 
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                            TOGGLES                                                |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/

		else // if NOT ModEdit BUT if ModMenu
		{
		// Navigate mods name
			if(event_press(PS4_RIGHT))
			{
				modName_idx += 1;
				display_new = TRUE;
			}
			if(event_press(PS4_LEFT))
			{
				modName_idx -= 1;
				display_new = TRUE;
			}
			
		// Cycle mods name
			if(modName_idx > LAST_MODNAME_STRING) // max column for displaying mod name  
				modName_idx = 0;
			if(modName_idx < 0)
				modName_idx = LAST_MODNAME_STRING;
				
		// Switch profiles	
			if(event_press(PS4_TRIANGLE))
			{
				profile_idx += 1;
				display_new = TRUE;
			}
		// Cycle profiles	
			if(profile_idx > (AMOUNT_OF_PROFILES - 1))
				profile_idx = 0;
			
		// Toggles (UP to turn ON, DOWN to turn OFF)
    		// Mods that can have different ON/OFF status depending the active Profile
    		
		  //toggle_I_want_to_edit[profile]  = toggle( corresponding modName_idx, toggle_I_want_to_edit[profile] );
			toggle_legacyar  [profile_idx] = toggle(modName_idx, 0, toggle_legacyar[profile_idx]   );
			toggle_antirecoilh[profile_idx]= toggle(modName_idx, 1, toggle_antirecoilh[profile_idx]); 
			toggle_rapidfire[profile_idx]  = toggle(modName_idx, 2, toggle_rapidfire[profile_idx]  );
			polar_aim[profile_idx]         = toggle(modName_idx, 4, polar_aim[profile_idx]         );
			sticky_aim                     = toggle(modName_idx, 5, sticky_aim                     ); 
            toggle_quickscope[profile_idx] = toggle(modName_idx, 6, toggle_quickscope[profile_idx] ); 
            toggle_holdbreath[profile_idx] = toggle(modName_idx, 7, toggle_holdbreath[profile_idx] ); 
            misc_mods[profile_idx]         = toggle(modName_idx, 8, misc_mods[profile_idx]         );
            enemy_ping                     = toggle(modName_idx, 9, enemy_ping                     );
            easy_plate                     = toggle(modName_idx, 10, easy_plate                    );
            
		  //toggle_I_want_to_edit = toggle( corresponding modName_idx, toggle_I_want_to_edit );
			
			swap_on     = toggle(modName_idx, 11, swap_on      );
			btn_layout  = toggle(modName_idx, 12, btn_layout   );
			inverted_on = toggle(modName_idx, 13, inverted_on  );
		} // if NOT ModEdit BUT if ModMenu end
		
	// If ModMenu AND ModEdit
		if(event_press(PS4_PS))
			save ();
			
		//block_btn (); // block ALL btn (exept L2_R2_RX_RY_LX_LY to test antirecoil, rapidfire and burstfire against a wall without leaving ModEdit and ModMenu)
		block_all_inputs();
		
	} // ModMenu ON end


							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                              NOT MOD MENU AND NOT MOD EDIT                                             |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — */	 
	if(!ModMenu)
	{
		
            /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
            |                                        SPEED TOGGLES                                              |
            ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
	// Speed Toggles
	
	    //toggle_I_want_to_edit[profile]  = speed_toggle( hold BTN1, hold BTN2 300ms   , toggle_I_want_to_edit[profile] , corresponding modName_idx );
		  toggle_rapidfire[profile_idx]  = speed_toggle( PS4_L2, PS4_UP   , toggle_rapidfire[profile_idx] , 2 );
		//toggle_burstfire[profile_idx]  = speed_toggle( PS4_L2, PS4_DOWN , toggle_burstfire[profile_idx] , 2 );
		//toggle_aimassist[profile_idx]  = speed_toggle( PS4_L2, PS4_RIGHT, toggle_aimassist[profile_idx] , 3 );
		//toggle_strafeShot[profile_idx] = speed_toggle( PS4_L2, PS4_LEFT , toggle_strafeShot[profile_idx], 4 );
		// We can add as many speed toogle as we need

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
	
	// Hair Trigger
   	deadzone(PS4_L2,PS4_R2,99,99);
    

	POLAR_RADIUS = RADIUS;
	POLAR_ANGLE  = ANGLE;
	
if (PROGRESSION_ASSIST && get_val(AIM_BTN) >= 80) {
if (!combo_running(AAS)) {
	AS = PROGRESSION(AS,AAMIN + NEGI,AAMAX + POSI,AAVAL,AAS,1);
    AW = PROGRESSION(AW,AAWMIN,AAWMAX,AAWVAL,AAD,2);
    combo_run(AAS);
    	}
if (abs(get_val(PS4_RY))> PROG_RELEASE || abs(get_val(PS4_RX)) > PROG_RELEASE) {
	combo_stop(AAS);
	}
}
if (POLAR_ASSIST && get_val(AIM_BTN) && abs(get_ival(PS4_RX)) <= POLAR_RELEASE && abs(get_ival(PS4_RY)) <= POLAR_RELEASE) {
if (POLAR_BOOST_FIRE && get_val(FIRE_BTN)) {
	POLAR_RADIUS = POLAR_RADIUS + POLAR_BOOST;
	}
	else {
	POLAR_RADIUS = POLAR_RADIUS;
	}
if (POLAR_SHAKE_FIRE && get_val(FIRE_BTN)) {
	POLAR_ANGLE = POLAR_ANGLE + POLAR_SHAKE;
	}
	else {
	POLAR_ANGLE = POLAR_ANGLE;
	}    
    set_polar(POLAR_RS,SPEED = (SPEED + POLAR_ANGLE) % 360,abs(get_ival(POLAR_RX)) / A_B_S + POLAR_RADIUS * 328);
}

if (DoGz_AIM_ASSIST && abs(get_val(PS4_RX)) < DoGz_ASSIST_RELEASE && abs(get_val(PS4_RY)) < DoGz_ASSIST_RELEASE) {
if (get_val(AIM_BTN) > 80) {
	D_AS = TRUE;
	AIM();
}
if (event_release(AIM_BTN) || event_release(FIRE_BTN)){
	D_AS = FALSE;
	vm_tctrl(VMCR); 
	}
}
 	  if(polar_aim[profile_idx] == 1){
    
      vm_tctrl(VM_INTERVAL); 
                         
      actual_X = get_val(X);   
      actual_Y = get_val(Y);           
      actual_Magnitude = isqrt(pow(actual_X, 2) + pow(actual_Y, 2));  
      max_Magnitude = (actual_Magnitude < 100);                      
                                                                  
      if(!(time++ % STEP_INTERVAL)){                                  
	         angle += STEPS;                                                 
      }                                                               
      angle = angle % 360;                                            
      sin_angle = Polar_Array[angle % 360];                           
      cos_angle = Polar_Array[(angle + 270) % 360];                  
      cos_angle = (cos_angle * RADIUS2) / 100;                         
      sin_angle = (sin_angle * RADIUS2) / 100;                          
                                                                         
      if((ACTIVE_WHEN_ADS && get_val(AIM_BTN)) || (ACTIVE_WHEN_FIRING && get_val(AIM_BTN))){ 
           if(actual_Magnitude <= RADIUS2){                                                      
                sin_angle -= actual_Y;                                                              
                cos_angle -= actual_X;                                                                 
           }else {                                                                                       
                sin_angle = (sin_angle * (200 - ((abs(actual_Y) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
                cos_angle = (cos_angle * (200 - ((abs(actual_X) + actual_Magnitude) / 10) * 10) / 200) * max_Magnitude; 
           }                                                  
           set_val(X, calculate(actual_X + cos_angle, -100, 100));
           set_val(Y, calculate(actual_Y + sin_angle, -100, 100)); 
     }
     else if (!get_ival(AIM_BTN) && !get_ival(FIRE_BTN)) {
    			vm_tctrl(0); 
  	 }
  				if (isqrt(abs(get_ival(PS4_RX)) * abs(get_ival(PS4_RX)) + abs(get_ival(PS4_RY)) * abs(get_ival(PS4_RY)))> 10 ) 
  				{
  					STEADY_VALUE = f_atan2(get_val(POLAR_RY)/256,get_val(POLAR_RX)/256);
					if (get_val(POLAR_RY) > 0) 
  						STEADY_VALUE =  f_map(0,STEADY_AIM,0,180,(STEADY_VALUE * STEADY_AIM) / 180);
   					else
   						STEADY_VALUE = f_map(0,STEADY_AIM,180,360,(((STEADY_VALUE - 180) * STEADY_AIM) / 180));

  					f_set_polar(POLAR_RS,STEADY_VALUE,isqrt((get_val(PS4_RX) * get_val(PS4_RX)) + (get_val(PS4_RY) * get_val(PS4_RY))),FALSE);
				}
			
			 }
	     
    if(sticky_aim)
    {
    if(get_val(FIRE_BTN))
    combo_run(STICKY_AIM);
    else 
    combo_stop(STICKY_AIM); 
    } 
 	 
    if(toggle_quickscope[profile_idx] == 1)
    {
      if(event_release(AIM_BTN) && get_ptime(AIM_BTN) < 140)
          combo_run(Quick_Scope);
    }
    
    if(toggle_holdbreath[profile_idx] == 1)
   {
          if(get_val(AIM_BTN))
               set_val(PS4_L3,100);
                      
          if(get_val(PS4_LY) <-90 && get_val(AIM_BTN) && get_ptime(AIM_BTN) > 200)
              combo_stop(CH);       
                    
          if(event_press(AIM_BTN)) 
              combo_run(CH);
  
          if(get_val(AIM_BTN) && get_lval(PS4_L3)) 
              set_val(PS4_L3,0);       
   }
    
    if(easy_plate)
    {
	if(get_val(PS4_TRIANGLE)&&get_ptime(PS4_TRIANGLE)>350)
		  combo_run(easy_plate);
		    
	if(get_val(AIM_BTN)>10 || get_val(FIRE_BTN)>10 || get_val(RELOAD_BTN))
		  combo_stop(easy_plate);	
    }
    
    MISC_MODS (); 
    
    ENEMY_PING (); 
  
	if(inverted_on) // (7)
			invert = -1;
		else
			invert = 1;
			
			
  	/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  	|                                                     SWITCH PROFILE                                                    |
  	◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
      //if(get_ptime(PS4_TRIANGLE)>600&&event_release(PS4_TRIANGLE))
      	if(one_button_press)
			{
				if(event_release(profile_switch_button1)&& get_ptime(profile_switch_button1)<150)
        		{
        	    	profile_1or2=!profile_1or2;
     
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	}
     
    	 	if(two_button_press)
           	{
           		if(get_lval(profile_switch_button2) && (event_press(profile_switch_button3)))
        		{
        	    	profile_1or2=!profile_1or2;
        	    
        			if(ModMenu)
    					display_new = TRUE;
    				else
    					display_title = TRUE;
    			}
        	}
    		if(get_val(PS4_L3))
    			set_val(PS4_TRIANGLE, 0);
     
   
        // If Profile 2
        	if(profile_1or2)
        		profile_idx = 1;
     
        // If Profile 1
        	else	
        		profile_idx = 0;

    // 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
    	} // ModMenu OFF end

							/*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
							|                                   FEATURES THAT WORK EVERYTIME (MOD MENU/EDIT OR NOT)                                 |
							◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	 

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    ANTI RECOIL (0)                                                    |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/
// If Anti-Recoil is enable for the active profile
	if(toggle_antirecoilh[profile_idx] == 1)
	{
	// Antirecoil by Batts	
		// Vertical
    	if( antirecoil_start[profile_idx] < antirecoil_end[profile_idx])
    	    i_val = 1; 
    	else
    	    i_val = -1;
        
    	i_pnt = (antirecoil_time[profile_idx] * 10) / (abs(antirecoil_start[profile_idx] - antirecoil_end[profile_idx])); 
    	
    	// Horizontal		
    	if(antirecoilH_start[profile_idx] < antirecoilH_end[profile_idx])
    	    i_val_h = 1; 
    	else
    	    i_val_h = -1;
        
    	i_pnt_h = (antirecoilH_time[profile_idx] * 10) / (abs(antirecoilH_start[profile_idx] - antirecoilH_end[profile_idx])); 
    	
    	if(!get_val(FIRE_BTN)) 
   		{
   			// Vertical
   			ar_y = antirecoil_start[profile_idx];
   			i_cnt = 0;
   			i_num = 0;
   			
   			// Horizontal
   			ar_x = antirecoilH_start[profile_idx];
   			i_cnt_h = 0;
   			i_num_h = 0;
   		}   
    	
    	 if(get_val(AIM_BTN) && get_val(FIRE_BTN))
    	{
   		    // Vertical
   		    if(!p_complete())  
   		        ar_y = p_val();
   		    else
   		        ar_y = antirecoil_end[profile_idx];
            
			if(y_val() < 100)
    	   		set_val(PS4_RY,y_val()); 
    	   		
    	   	// Horizontal	
   		    if(!p_complete_x())  
   		        ar_x = p_val_x();
   		    else
   		        ar_x = antirecoilH_end[profile_idx];
            
			if(x_val() < 100)
    	   		set_val(PS4_RX,x_val()); 
   		}		
	}
// If Anti-Recoil is enable for the active profile
	if(toggle_legacyar[profile_idx] == 1)
	{
		if(get_val(FIRE_BTN))
			combo_run(ANTIRECOIL);
		  else
			combo_stop(ANTIRECOIL);
	}

  /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    RAPID FIRE (1)                                                     |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/  
  
// If RapidFire is enable for the active profile
	if(toggle_rapidfire[profile_idx] == 1)
	{
	// Rate of Fire Calculation
    	hold_time = 500 / rate_of_fire[profile_idx]; 
   		rest_time = hold_time - 20;
    	if(rest_time < 0) rest_time = 0;
    
    // Run combo
    	if(get_val(FIRE_BTN))
    		combo_run(RAPIDFIRE);
    	else
    		combo_stop(RAPIDFIRE);
    		
    	led_on = 150;
    	led_off = 300;
    	combo_run(BLINK);
	}
  
  
  
 /*— ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌
  |                                                    REFRESH DISPLAY                                                    |
  ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ — ◌ —*/	
	if(display_new) 
	{
	// Clear OLED screen	
		cls_oled(0);
		rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    	line_oled(0, 26, OLED_WIDTH - 1, 26, 1, OLED_WHITE);
    	count_black = 0;// reset screen saver counter
		if(ModEdit2)
		{
            printf(center_x(get_valName2_chars(valName2_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES2[valName2_idx]);  
        //  Display the editable values for each of the valName2 for modEdit2 
	    	display_edit(valName2_idx,0  , RADIUS              );
	    	display_edit(valName2_idx,1  , ANGLE               );
	    	display_edit(valName2_idx,2  , POLAR_BOOST         );
	    	display_edit(valName2_idx,3  , POLAR_SHAKE         );
	    	display_edit(valName2_idx,4  , A_B_S               );
	    	display_edit(valName2_idx,5  , POLAR_RELEASE       );
	        display_edit(valName2_idx,6  , D___AS              );
	    	display_edit(valName2_idx,7  , D_AS1               );	
	    	display_edit(valName2_idx,8  , DoGz_ASSIST_RELEASE );
	    	display_edit(valName2_idx,9  , POSI                );
	    	display_edit(valName2_idx,10 , NEGI                );
	    	display_edit(valName2_idx,11 , WA                  );
	    	display_edit(valName2_idx,12 , PROG_RELEASE        );
	    	
		}
		else if(ModEdit) 
		{  
    		printf(center_x(get_valName_chars(valName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,VALNAMES[valName_idx]);
        //  Display the adjustable values for each of the valNames
			display_edit(valName_idx, 0 , antirecoil_vertical[profile_idx]   );
			display_edit(valName_idx, 1 , antirecoil_horizontal[profile_idx] );
			display_edit(valName_idx, 2 , antirecoil_start[profile_idx]      );
            display_edit(valName_idx, 3 , antirecoil_end[profile_idx]        );
            display_edit(valName_idx, 4 , antirecoil_time[profile_idx]       );
            display_edit(valName_idx, 5 , antirecoilH_start[profile_idx]     );
            display_edit(valName_idx, 6 , antirecoilH_end[profile_idx]       );
            display_edit(valName_idx, 7 , antirecoilH_time[profile_idx]      );
            display_edit(valName_idx, 8 , rate_of_fire[profile_idx]          );
            display_mod (valName_idx, 9 , POLAR_ASSIST                       );
			display_mod (valName_idx,10 , DoGz_AIM_ASSIST                    );
			display_mod (valName_idx,11 , PROGRESSION_ASSIST                 );
            display_edit(valName_idx,12 , RADIUS2                            );
            display_edit(valName_idx,13 , STEPS                              );
            display_edit(valName_idx,14 , STEADY_AIM                         );
            display_edit(valName_idx,15 , stickyaim_size                     );
            display_edit(valName_idx,16 , stickyaim_time                     );
			display_edit(valName_idx,17 , quickscopedelay                    );	
		}
		else
		{
		//  Display the modNames for modMenu
		    printf(center_x(get_modName_chars(modName_idx), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,MODNAMES[modName_idx]);
		//  Display the modNames with the toggle in modMenu  
			display_mod (modName_idx, 0  ,toggle_legacyar    [profile_idx]    );
			display_mod (modName_idx, 1  ,toggle_antirecoilh [profile_idx]    );
            display_mod (modName_idx, 2  ,toggle_rapidfire   [profile_idx]    );
            display_mod2(modName_idx, 3                                       );  
            display_mod (modName_idx, 4  ,polar_aim          [profile_idx]    );
            display_mod (modName_idx, 5  ,sticky_aim                          ); 
            display_mod (modName_idx, 6  ,toggle_quickscope  [profile_idx]    );
            display_mod (modName_idx, 7  ,toggle_holdbreath  [profile_idx]    );
            display_mod1(modName_idx, 8  ,misc_mods          [profile_idx]    ); 
            display_mod1(modName_idx, 9  ,enemy_ping                          ); 
            display_mod (modName_idx, 10 ,easy_plate                          );
            display_mod (modName_idx, 11 ,swap_on                             );
			display_mod1(modName_idx, 12 ,btn_layout                          ); 
		    display_mod (modName_idx, 13 ,inverted_on                         );	 
                
		}
		
	// Display Profile only on mods that may have a different value depending on the Profile
		if(modName_idx < AMOUNT_OF_MULTI_TOGGLE)  // idx from 0 to 4 are mods that can have different values depending the active Profile
		{
			if(profile_idx == 0) // profile_idx = profile_idx = Profile
    			printf(center_x(sizeof(PROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_1[0]); // print Profile 1	
    		else if(profile_idx == 1)
    			printf(center_x(sizeof(PROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,PROFILE_2[0]); // print Profile 2
    			
		}
		/*
		else // Mods that work on every profiles print the 3 lines (disable this if you prefer display the text Profile X
    	{
    		line_oled(0, 26, 39, 26, 5, 1);
    		line_oled(44, 26, 83, 26, 5, 1);
    		line_oled(88, 26, 127, 26, 5, 1);
    	}
    	*/
		display_black = TRUE;
        display_new = FALSE;
    } // display_new end
    
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 
} // NOT KillSwitch end

	led(profile_idx);

} // main end

combo AAS{
	set_val(PS4_RY, 1 * - AS);
	wait(AW);
	set_val(PS4_RX, 1 * - AS);
	wait(AW);
	set_val(PS4_RY,AS);
	wait(AW);
	set_val(PS4_RX,AS);
	wait(AW);
}

combo STICKY_AIM {
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size));
    wait(stickyaim_time);
    set_val(PS4_RY,xy_val(PS4_RY, stickyaim_size * -1));
    wait(stickyaim_time);
    set_val(PS4_RX,xy_val(PS4_RX, stickyaim_size * -1));
    set_val(PS4_LX,xy_val(PS4_LX, stickyaim_size * -1));
    wait(stickyaim_time);
    }   
combo CANCEL_SLIDE {              
    set_val(CROUCH_BTN, 100);          
    wait(120);                         
    set_val(CROUCH_BTN, 0);            
    wait(60);                          
    set_val(CROUCH_BTN, 100);          
    wait(50);                          
    set_val(CROUCH_BTN, 100);          
    set_val(JUMP_BTN, 100);           
    wait(60);                          
    set_val(CROUCH_BTN, 0);            
    set_val(JUMP_BTN, 100);          
    wait(10);                        
    set_val(JUMP_BTN, 0);         
} 
combo DS {
    set_val(CROUCH_BTN,100);
    wait(40);
    set_val(CROUCH_BTN,0);
    wait(DS_Speed);}
combo BUNNYHOP
{
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
    set_val(JUMP_BTN, 100);
    wait(30);
    set_val(JUMP_BTN, 0);
    wait(30);
}
 combo Quick_Scope {
 set_val(AIM_BTN,100);
 wait(quickscopedelay); 
 set_val(AIM_BTN,100);
 set_val(FIRE_BTN,100);
 wait(40);
 set_val(AIM_BTN,100);
 wait(40); }        
   
 combo CH {
	set_val(PS4_L3,0);
	wait(60);
	set_val(PS4_L3,100);
	wait(110);
	set_val(PS4_L3,0);
	wait(110);}   
combo auto_ping
	{set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	wait(20)
	set_val(PS4_UP,100);
	wait(20)
	set_val(PS4_UP,0);
	}
combo easy_plate
	{set_val(PS4_TRIANGLE,100);
	wait(6000)}//time triangle is held for adjust higher or lower 500 if you only get 2 plates or cant switch weapons after replating
	
combo SLIDE_DROPSHOT {
 	set_val(CROUCH_BTN, 100);
	wait(1300);
	set_val(CROUCH_BTN, 0);
	wait(2000);//1610
	set_val(CROUCH_BTN, 100);
	wait(1000);
	set_val(CROUCH_BTN, 0);
	
 }
combo SLIDE_SHOT {
    set_val(CROUCH_BTN,100);
    wait(380);
    wait(50);
if (toggle_rapidfire[profile_idx] == 1){ 
    combo_run(RAPIDFIRE);
}
else
    set_val(FIRE_BTN,100);
    wait(1000);
   
} 
 combo JUMPSHOT {
    set_val(JUMP_BTN,100);
    wait(100);}


combo RUMBLE_ON {						// 2 high rumbles + green blink 2 times
	set_ledx(2, 2);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
	wait(100);
	set_rumble(RUMBLE_B, 50);
	wait(150);
	reset_rumble();
}
combo FAST_MELEE {
    set_val(MELEE_BTN, 100);
    wait(35);
    set_val(MELEE_BTN, 0);
    wait(30);  
 
}
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo RUMBLE_OFF {						// 1 high rumble + red blink 1 time
	set_ledx(1, 1);
	set_rumble(RUMBLE_A, 50);
	wait(300);
	reset_rumble();
	wait(400);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

combo SAVE { 
	cls_oled(0);						// clear OLED screen 
	printf(center_x(sizeof(SAVE) - 1,OLED_FONT_LARGE_WIDTH),center_y(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,SAVE[0]); 	// display SAVED... centered in X Y 
	wait(10)
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times								
	wait(150);
	call(RUMBLE_ON);					// 2 high rumbles + green blink 2 times	
	wait(1000);
	display_new = TRUE;				   // display mods
}
combo RAPIDFIRE { 
    wait(hold_time);
    set_val(PS4_R2, 0);
    wait(rest_time);
    }	
    combo BLINK {
	led(profile_idx);
    wait(led_on);
    led(7);
    wait(led_off);
}
 combo ANTIRECOIL {
// Vertical
    AntirecoilVertical = get_val(PS4_RY) + (antirecoil_vertical[profile_idx]);  
    if(AntirecoilVertical > 100) AntirecoilVertical = 100;
    if(abs(get_val(PS4_RY)) < abs(antirecoil_vertical[profile_idx]) + 5)
    set_val(PS4_RY, (AntirecoilVertical * invert));
// Horizontal
    AntirecoilHorizontal = get_val(PS4_RX) +  (antirecoil_horizontal[profile_idx]);
    if(AntirecoilHorizontal > 100) AntirecoilHorizontal = 100;
    if(abs(get_val(PS4_RX)) < abs(antirecoil_horizontal[profile_idx]) + 5)
    set_val(PS4_RX, AntirecoilHorizontal);
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜
int angle_Out;
function f_atan2(y, x) {
  if (x >= 0 && y > 0) angle_Out = -90;
  else if (x  < 0 && y >= 0) angle_Out = 90;
  else if (x <= 0 && y < 0) angle_Out = -270;
  else angle_Out = 270;
  
  x = abs(x);
  y = abs(y);
  
  if (x < y) angle_Out += (x * 45 / y);
  else if (x > y) angle_Out += 90 - (y * 45 / x);
  else angle_Out += 45;
  
  angle_Out = abs(angle_Out % 360);
  
  return (angle_Out);
}
function f_map(inMin, inMax, outMin, outMax, x) {
  return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
//------------------------------------------------------------------------------
int cos_angle, sin_angle;
function f_set_polar(stick, angle, radius, OFFSET) {
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  
  sin_angle = polar_LUT[angle];
  cos_angle = polar_LUT[(angle + 90) % 360];
  
  if (OFFSET){
    f_offset(7 + stick, (cos_angle * radius) / 100);
    f_offset(8 + stick, (sin_angle * radius) / 100);
  } else {
    set_val(7 + stick, f_clamp((cos_angle * radius) / 100, -100, 100));
    set_val(8 + stick, f_clamp((sin_angle * radius) / 100, -100, 100));
  }
  return;
}
//------------------------------------------------------------------------------
function f_offset(axis, offset_val) {
  set_val(axis, f_clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
  return;
}
function f_min(a,b) { if(a<=b) return a; return b; }
function f_max(a,b) { if(a>=b) return a; return b; }
function f_clamp(v, lo, hi) { return f_min(hi, f_max(v, lo)); }
function AIM() {
	if (D_AS) {
	if (D_AS && VM) {
		vm_tctrl(-2);
	}
		D__AS ++;
	if (D__AS >= D___AS)  D__AS = D__AS1;
		D__AS1 --;
	if (D__AS1 <= D_AS1)  D__AS1 = D__AS;
		D__AS ++;
	if (get_val(AIM_BTN)) {	
		set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		set_val(PS4_RY,get_val(PS4_RY) + D__AS);
	}
	if (get_val(FIRE_BTN)) {	
		set_val(PS4_RX,get_val(PS4_RX) + D__AS);
		set_val(PS4_RY,get_val(PS4_RY) + D__AS);
		}
	}
	else
	vm_tctrl(0); 
} 


function PROGRESSION(VALUE,MIN,MAX,INCREMENT,FLOW,ID) {
if (FLOW) {
    VALUE += INCREMENT;
if (VALUE <= MAX)  
    return VALUE;
if (VALUE > MAX) {
        PROG[ID] = 0;
    return VALUE - INCREMENT;}
	}
else {
    VALUE -= INCREMENT;    
if (VALUE >= MIN)  
    return VALUE;
if (VALUE < MIN) {
   	PROG[ID] = 1;
    return VALUE + INCREMENT;
    	}
	} 
   		 return FALSE;    
}

function calculate(int v, int lo, int hi) { 
  if(v < lo) return lo;               
  if(v > hi) return hi;        
  return v;     
}     
function xy_val(f_axis,f_val) {
    if(abs(get_val(f_axis)) < stickyaim_size + 1) 
        return f_val;
    return get_val(f_axis); 
}
function p_complete() { // Antirecoil

    i_cnt++;
    if(i_cnt > antirecoil_time[profile_idx] * 10) 
    {
        i_cnt = antirecoil_time[profile_idx] * 10;
        return 1;
    }    
    return 0;
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_val() { // Antirecoil

    i_num++;
    if(i_num == i_pnt) 
    {
        i_num = 0;
        ar_y += i_val;
    }
    return ar_y;
}  

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function y_val() { // Antirecoil

    v = get_val(10);
    
    if(abs(v) < 10)
        v = 0;
        
    if(abs(v) > ar_y + 5)
        return v;
        
    return v + (ar_y * invert);           
}
function p_complete_x() { 
    i_cnt_h++;
    if (i_cnt_h > antirecoilH_time[profile_idx] * 10) 
    {
        i_cnt_h = antirecoilH_time[profile_idx] * 10 ;
        return 1;
    }
    return 0;
}   

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function p_val_x() {
    i_num_h++;
    if(i_num_h == i_pnt_h) 
    {
    	i_num_h = 0;
    	ar_x += i_val_h;
    }
    return ar_x;
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function x_val() {
	v_x = get_val(PS4_RX);
	if(abs(v_x) < 10)
		v_x = 0;
	if(abs(v_x) > abs(ar_x + 5))
		return v_x;
	return v_x + ar_x;   	    
}

function double_click(button) {        
    if (double__tap[button] >= 0) {                    
        double__tap[button] += get_rtime(); 
        if (double__tap[button] > 450)
            double__tap[button] = -1;                                                                                       
    }           
    if (event_release(button) && get_ptime(button) <= 200) { 
        if (double__tap[button] < 0) {                    
            double__tap[button] = 0;                        
        } else {             
            double__tap[button] = -1;                       
            return 1;                                   
        }                                                     
    }                                                  
    return 0;
    }
function vals_available1(f_min, f_max) { // Define adjustable values available for each of the mods

	if(valName2_idx < f_min)
		valName2_idx = f_max;
	if(valName2_idx > f_max)
		valName2_idx = f_min;	
}
function vals_available(f_min, f_max) { // Define adjustable values available for each of the mods

	if(valName_idx < f_min)
		valName_idx = f_max;
	if(valName_idx > f_max)
		valName_idx = f_min;		
}
function get_modName_chars(f_idx){
	if (MODNAMES[f_idx + 1] != -1) 
		return MODNAMES[f_idx + 1] - MODNAMES[f_idx] - 1;
	return sizeof(MODNAMES) - MODNAMES[f_idx];		
}
function get_valName_chars(f_idx){
	if (VALNAMES[f_idx + 1] != -1) 
		return VALNAMES[f_idx + 1] - VALNAMES[f_idx] - 1;
	return sizeof(VALNAMES) - VALNAMES[f_idx];		
}
function get_valName2_chars(f_idx){
	if (VALNAMES2[f_idx + 1] != -1) 
		return VALNAMES2[f_idx + 1] - VALNAMES2[f_idx] - 1;
	return sizeof(VALNAMES2) - VALNAMES2[f_idx];		
}
function get_controller_chars(f_idx){
	if (CONTROLLER_LAYOUT[f_idx + 1] != -1) 
		return CONTROLLER_LAYOUT[f_idx + 1] - CONTROLLER_LAYOUT[f_idx] - 1;
	return sizeof(CONTROLLER_LAYOUT) - CONTROLLER_LAYOUT[f_idx];		
}
function get_miscmods_chars(f_idx){
	if (MISCMODS[f_idx + 1] != -1) 
		return MISCMODS[f_idx + 1] - MISCMODS[f_idx] - 1;
	return sizeof(MISCMODS) - MISCMODS[f_idx];		
}
function get_enemyping_chars(f_idx){
	if (ENEMYPING[f_idx + 1] != -1) 
		return ENEMYPING[f_idx + 1] - ENEMYPING[f_idx] - 1;
	return sizeof(ENEMYPING) - ENEMYPING[f_idx];		
}
function edit_val(f_name,f_idx, f_val, f_min, f_max, f_inc1, f_inc2) {  // antirecoil_start[profile_idx] = edit_val( 0 , antirecoil_start[profile_idx], 99  , 99  )
					
	if(f_name == f_idx)
	{
    // +1 or -1															 // We can add function variable for increase/decrease to define if we increase/decrease by 1, 10, 100 ...
    	f_val    = value_change( f_val ,PS4_LEFT , inv(f_inc1), f_min, f_max ); // inv(f_inc1)
    	f_val    = value_change( f_val ,PS4_RIGHT, f_inc1     , f_min, f_max ); // f_inc1
   	 // +10 or -10
   	   	f_val    = value_change( f_val ,PS4_DOWN , inv(f_inc2), f_min, f_max ); // inv(f_inc2)
       	f_val    = value_change( f_val ,PS4_UP   , f_inc2     , f_min, f_max ); // f_inc2

	// We can also add (f_ref)
	// Value for your features  // antirecoil_start_final = VALUES[profile_idx][val_col_idx] +  antirecoil_start[profile_idx] ;
        //f_ref = VALUES[profile_idx][val_col_idx] + f_val ;	
	}
	// Block Rate of Fire to 1 minimum (if 0 combo goes crazy lol)
	if(rate_of_fire[profile_idx] < 0)
		rate_of_fire[profile_idx] = 0;

	//return f_ref;

	return f_val;
}
function toggle(f_name,f_idx, f_val) { // toggle_antirecoil[profile_idx] = toggle(1, PS4_UP, toggle_antirecoil[profile_idx]);
	if(event_press(PS4_UP))
	{
		if(f_name == f_idx)
		{
			if(f_idx == 8) 
			{
			   f_val += 1;
			// Limits
				if(f_val > 8)
					f_val = 0;
				if(f_val < 0)
					f_val = 8;
			}
			
	    else if(f_idx == 9) 
	    { 
	      f_val += 1;
			// Limits
				if(f_val > 2)
					f_val = 0;
				if(f_val < 0)
					f_val = 2;
		}
		else if(f_idx == 12) 
			{
			// Increase
				f_val += 1;
			// Limits
				if(f_val > 11)
					f_val = 0;
				if(f_val < 0)
					f_val = 11;
			}
		 else
			f_val = 1;
			combo_run(RUMBLE_ON);
		}
		
		display_new = TRUE; 
	
	}
			
	if(event_press(PS4_DOWN))
	{
		if(f_name == f_idx)
		{
		 if(f_idx == 8)
		 {
		     // Decrease
				f_val -= 1;
			// Limits
				if(f_val > 8)
					f_val = 0;
				if(f_val < 0)
					f_val = 8;
					
	    }
	    
	    else if(f_idx == 9)
	    {
	     	f_val -= 1;
			// Limits
				if(f_val > 2)
					f_val = 0;
				if(f_val < 0)
					f_val = 2;
		}
		else if(f_idx == 12) 
			{
			// Decrease
				f_val -= 1;
			// Limits
				if(f_val > 11)
					f_val = 0;
				if(f_val < 0)
					f_val = 11;
			}
		else
			f_val = 0;
			combo_run(RUMBLE_OFF);
		}		
		display_new = TRUE;
	    
	}
	return f_val;
	
}
function display_edit(f_name,f_idx,f_val) { // display_edit(0, center_x(sizeof(ANTIRECOIL_START) - 1, OLED_FONT_MEDIUM_WIDTH) , ANTIRECOIL_START[0], antirecoil_start[profile_idx]);

    	if(f_name == f_idx)
    	{
    	// Display AntiRecoil Time value x 100 so 1,000 (displayed) = 1 second - script value is 10
    		if(valName_idx == 4 || valName_idx == 7) 
    			number_to_string(f_val * 100, find_digits(f_val * 100) );
    	
    	// Display editable values that are not in the array (burstfire_hold for exemple)
    		else
    			number_to_string(f_val, find_digits(f_val));
    	}
}

function display_mod(f_name,f_idx,f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, MEDIUM) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
  if(f_name == f_idx)
  {
               
    		// Display ON OFF
    			if(f_toggle == 1)
    				printf(center_x(sizeof(ON) - 1, OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    			else if(f_toggle == 0)
    				printf(center_x(sizeof(OFF) - 1,OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
    				
    			
    	}
  }

function display_mod2(f_name,f_idx) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, MEDIUM) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(f_name == f_idx)
    	{
    			printf(center_x(sizeof(PRESS_A_TO_CONTINUE) - 1, OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,PRESS_A_TO_CONTINUE[0]);	
    	}
}

function display_mod1(f_name,f_idx, f_toggle) { // display_mod(1, center_x(sizeof(ANTIRECOIL) - 1, MEDIUM) , ANTIRECOIL[0], toggle_antirecoil[profile_idx]);
    	if(f_name == f_idx)
    	{
        	if(f_idx == 8)
        	{ 
        	        printf(center_x(get_miscmods_chars(misc_mods), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,MISCMODS[misc_mods]); 
        	        
            }
        	else if(f_idx == 9) 
        	{ 
        	       printf(center_x(get_enemyping_chars(enemy_ping), OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,OLED_WHITE,ENEMYPING[enemy_ping]);
        	       	
		    }
		    else if(f_idx == 12) 
		    {
		          
		        if(swap_on)
		        {
		        	printf(center_x(sizeof(FLIPPED) - 1,OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL, OLED_WHITE,FLIPPED[0]);
		        	layout_y = 37;
		        }
		        else
		        	layout_y = 42;
		        	
		            printf(center_x(get_controller_chars(btn_layout), OLED_FONT_SMALL_WIDTH),layout_y,OLED_FONT_SMALL,OLED_WHITE,CONTROLLER_LAYOUT[btn_layout]);	
		        	
        	}
        	else
        	{
    			       
    		// Display ON OFF
    			if(f_toggle == 1)
    				printf(center_x(sizeof(ON) + 10, OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL,OLED_WHITE,ON[0]);
    			else
    				printf(center_x(sizeof(OFF) - 13,OLED_FONT_SMALL_WIDTH),37,OLED_FONT_SMALL, OLED_WHITE, OFF[0]);
    			    
    	        }	
    	    } 	
        } 
    
    	
function MISC_MODS() {
  
    if(misc_mods == 1) // Cancel Slide
	{
	     
	     if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
    	{
		      if(event_release (CROUCH_BTN))
		         combo_run(CANCEL_SLIDE)                                            
	    }                                                                                         
	} 	
	else if(misc_mods == 2)  // Prone Shot 
	{ 
	    if(get_val(FIRE_BTN) && get_ptime(FIRE_BTN) > Prone_Speed)  
             set_val(CROUCH_BTN,100);    
    }
    else if(misc_mods == 3)  // Drop Shot
    {
        if(get_val(FIRE_BTN))
             combo_run(DS);
    }  
   else if(misc_mods == 4) // Bunny Hop
    {
        if (get_ival(JUMP_BTN) && get_ptime(JUMP_BTN) > 200) {
             combo_run(BUNNYHOP); 
    }                  
   else if(misc_mods == 5)
    { 
        if((get_val(PS4_LY) < -60) || (get_val(PS4_LY) > 60) || (get_val(PS4_LX) < -60) || (get_val(PS4_LX) > 60))
				{   
	             	if(event_release(CROUCH_BTN))
	                 	 combo_run(SLIDE_DROPSHOT);           
		   		}                                                   
	}  
   else if(misc_mods == 6)  
    {
        if(abs(get_val(PS4_LY)) > 65 || abs(get_val(PS4_LX)) > 65)
	    {
					if(event_release(CROUCH_BTN))
		            	combo_run(SLIDE_SHOT); 
	    } 
	} 
	else if(misc_mods == 7)
	{
	    if(get_val(FIRE_BTN))
	        combo_run(JUMPSHOT);
    } 
    else if(misc_mods == 8) 
    {
        if(get_val(MELEE_BTN)) 
			combo_run(FAST_MELEE);
		else
			combo_stop(FAST_MELEE);
        }
    }
  }
function ENEMY_PING(){

if(enemy_ping == 1)
{
    if(get_ival(AIM_BTN)&&double_click(PS4_UP))
	      combo_run(auto_ping);        
      
    }
else if(enemy_ping == 2)
{
    if(get_ival(AIM_BTN)&&double_click(PS4_UP) || (event_press(FIRE_BTN)))
	      combo_run(auto_ping);        
    }
}
function speed_toggle(f_hold, f_press, f_val, f_string) {  // toggle_aimassist[profile_idx] = speed_toggle(PS4_R3, PS4_UP, toggle_aimassist[profile_idx], #cons_string for this toggle);
	
	if(get_val(f_hold))
	{
		if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 30))  // Hold second button 300ms or more	if(get_val(f_press) && get_ptime(f_press) == (get_rtime() * 30))  // Hold second button 300ms or more
		{
			modName_idx = f_string;
			
			if(f_val == 0)
			{
	
			f_val = 1;
			combo_run(RUMBLE_ON);
			}
			else
			{
			f_val = 0;
			combo_run(RUMBLE_OFF);
			
			
			}
			display_new = TRUE;
		} 
	set_val(f_press, 0)
	}
		
	return f_val;
}
function value_change(f_val,f_btn,f_inc, f_rng_min, f_rng_max) { 

    if(press_hold(f_btn)) 
    {
        f_val += f_inc;
      
    // Substract    
        if(f_val < inv(f_rng_min)) 
        	f_val = inv(f_rng_min); 
   	// Add   
       	if(f_val > f_rng_max) 
        	f_val = f_rng_max;

        display_new = TRUE;
    }
    return f_val; 
} 
function number_to_string(f_val,f_digits) {
/***********************************************************
 *  number_to_string(value to convert, # of digits in value)
 *
 *  Display Up to Max 16-bit Signed Integer (-32,768 to 32,767)
 *   
 *      Convert digits to ASCII
 *      Add ASCII character to print buffer
 *      Print string centered X & Y on OLED
 *  
***********************************************************/
    i = 1;  c_val = 10000;
    
	if(f_val < 0) //--neg numbers
	{          
         putc_oled(i,45);    //--add leading "-"
         i += 1;
         f_val = abs(f_val);
	} 
	
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[f_val / c_val]);
            f_val = f_val % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   //--add ","
                i += 1;
            }
        }
        c_val /= 10;
    } 
    puts_oled(center_x(i - 1,OLED_FONT_SMALL_WIDTH),42,OLED_FONT_SMALL,i - 1,OLED_WHITE); // adjustable value centered in X
}  
// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function find_digits(f_num) {
//  find_digits(value)  
//	    return Number of Digits in Value Passed  

    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}     

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_x(f_chars,f_font) {
//  center_x(number of chars,font size);  
//	    return X for Centering String Horizontally

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function center_y(f_size) {
//  center_y(font size);  
//	    return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
} 

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function press_hold(f_btn) { 
//  return TRUE - event_press()   
//			    - every 250ms when button is held

	return event_press(f_btn) || get_val(f_btn) && get_ptime(f_btn) > 250 
	       && get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function led(f_color) {
   for(i = 0; i <= 3; i++) 
   {
     set_led(i,duint8((f_color * 4) + i));
   }
}

// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 



// 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 〜 

function save () {
	combo_run(SAVE);
// Profile 1
	// Toggles                                       // Values
	set_pvar(SPVAR_1,toggle_legacyar[0]);           set_pvar(SPVAR_8,antirecoil_vertical[0]); 
	set_pvar(SPVAR_2,toggle_antirecoilh[0]);        set_pvar(SPVAR_9,antirecoil_horizontal[0]);
    set_pvar(SPVAR_3,toggle_rapidfire[0]);          set_pvar(SPVAR_10 ,antirecoil_start[0]     );         
	set_pvar(SPVAR_4,polar_aim[0]);                 set_pvar(SPVAR_11 ,antirecoil_end[0]       );        
	set_pvar(SPVAR_5,misc_mods[0]);                 set_pvar(SPVAR_12 ,antirecoil_time[0]      );  
	set_pvar(SPVAR_6,toggle_holdbreath[0]);         set_pvar(SPVAR_13 ,antirecoilH_start[0]);
	set_pvar(SPVAR_7,toggle_quickscope[0]);         set_pvar(SPVAR_14 ,antirecoilH_end[0]);
	                                                set_pvar(SPVAR_15 ,antirecoilH_time[0]);
                                                    set_pvar(SPVAR_16,rate_of_fire[0]);
	                                               
// Profile 2
	// Toggles                                       // Values
	set_pvar(SPVAR_17,toggle_legacyar[1]);          set_pvar(SPVAR_24,antirecoil_vertical[1]); 
	set_pvar(SPVAR_18,toggle_antirecoilh[1]);       set_pvar(SPVAR_25,antirecoil_horizontal[1]);
    set_pvar(SPVAR_19,toggle_rapidfire[1]);         set_pvar(SPVAR_26 ,antirecoil_start[1]     );         
	set_pvar(SPVAR_20,polar_aim[1]);                set_pvar(SPVAR_27 ,antirecoil_end[1]       );        
	set_pvar(SPVAR_21,misc_mods[1]);                set_pvar(SPVAR_28 ,antirecoil_time[1]      );  
	set_pvar(SPVAR_22,toggle_holdbreath[1]);        set_pvar(SPVAR_29 ,antirecoilH_start[1]);
	set_pvar(SPVAR_23,toggle_quickscope[1]);        set_pvar(SPVAR_30 ,antirecoilH_end[1]);
	                                                set_pvar(SPVAR_31 ,antirecoilH_time[1]);
                                                    set_pvar(SPVAR_32,rate_of_fire[1]);	

	                                                 
                                                   
    set_pvar(SPVAR_33,POLAR_ASSIST);                set_pvar(SPVAR_50,STEPS);
    set_pvar(SPVAR_34,DoGz_AIM_ASSIST);             set_pvar(SPVAR_51,RADIUS2);
    set_pvar(SPVAR_35,PROGRESSION_ASSIST);          set_pvar(SPVAR_52,stickyaim_size); 
    set_pvar(SPVAR_36,RADIUS);                      set_pvar(SPVAR_53,stickyaim_time);
    set_pvar(SPVAR_37,ANGLE);                       set_pvar(SPVAR_54,quickscopedelay);
    set_pvar(SPVAR_38,POLAR_BOOST);                 set_pvar(SPVAR_55,btn_layout);  
    set_pvar(SPVAR_39,POLAR_SHAKE);                 set_pvar(SPVAR_56,STEADY_AIM); 
    set_pvar(SPVAR_40,A_B_S); 
    set_pvar(SPVAR_41,POLAR_RELEASE);
    set_pvar(SPVAR_42,D___AS);
    set_pvar(SPVAR_43,D_AS1);
    set_pvar(SPVAR_44,DoGz_ASSIST_RELEASE);
    set_pvar(SPVAR_45,sticky_aim);
    set_pvar(SPVAR_46,enemy_ping);
    set_pvar(SPVAR_47,easy_plate);
    set_pvar(SPVAR_48,swap_on);
    set_pvar(SPVAR_49,inverted_on);

 	
}
int JUMP_BTN, CROUCH_BTN, RELOAD_BTN, SWITCH_BTN, TACTICAL_BTN,LETHAL_BTN,AIM_BTN,FIRE_BTN,SPRINT_BTN, MELEE_BTN;
function buttons_layout() {
	if (btn_layout == 0) // Default
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  
								       
	}
	else if (btn_layout == 1) // Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1;
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
							       	   CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  					       	   
	}
	else if (btn_layout == 2) // Lefty
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   MELEE_BTN     = PS4_L3;
									   SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  							   
	}
	else if (btn_layout == 3) // N0M4D/Charlie
	{
		JUMP_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;   
		CROUCH_BTN   = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN   = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN   = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									  SPRINT_BTN    = PS4_L3;
								      MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						      
	}
	else if (btn_layout == 4) // N0M4D/Charlie Tactical
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		MELEE_BTN     = PS4_CIRCLE;    AIM_BTN       = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    LETHAL_BTN    = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 5) // N0M4D/Charlie Lefty
	{
		JUMP_BTN      = PS4_CROSS;     AIM_BTN       = PS4_L1; 
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    FIRE_BTN      = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   MELEE_BTN     = PS4_L3;
								       SPRINT_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 6) // Bumper Jumper
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 7) // Bumper Jumper Tactical
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1; 
		MELEE_BTN     = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       CROUCH_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 8) // One-Hand-Gunslinger
	{
		JUMP_BTN      = PS4_CROSS;     FIRE_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    TACTICAL_BTN  = PS4_R1; 
	    RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  LETHAL_BTN    = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       MELEE_BTN     = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 9) // Stick and Move
	{
		MELEE_BTN     = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    LETHAL_BTN    = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       JUMP_BTN      = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 10) // Brawler
	{
		JUMP_BTN      = PS4_CROSS;     TACTICAL_BTN  = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
	else if (btn_layout == 11) // Beast
	{
		TACTICAL_BTN  = PS4_CROSS;     JUMP_BTN      = PS4_L1;    
		CROUCH_BTN    = PS4_CIRCLE;    MELEE_BTN     = PS4_R1; 
		RELOAD_BTN    = PS4_SQUARE;    AIM_BTN       = PS4_L2;
		SWITCH_BTN    = PS4_TRIANGLE;  FIRE_BTN      = PS4_R2;
									   SPRINT_BTN    = PS4_L3;
								       LETHAL_BTN    = PS4_R3;
		if(swap_on)
		{
		  swap(PS4_L1, PS4_L2);
		  swap(PS4_R1, PS4_R2);
		}  						       
	}
}