/*
  ______     __    __    __  __    __   ______   _______          ______    ______   __    __   ______   _______     __     ______  
 /      \  _/  |  /  |  /  |/  |  /  | /      \ /       \        /      \  /      \ /  \  /  | /      \ /       \  _/  |   /      \ 
/$$$$$$  |/ $$ |  $$ |  $$ |$$ |  $$ |/$$$$$$  |$$$$$$$  |      /$$$$$$  |/$$$$$$  |$$  \ $$ |/$$$$$$  |$$$$$$$  |/ $$ |  /$$$$$$  |
$$ |  $$/ $$$$ |  $$ |__$$ |$$ |__$$ |$$ ___$$ |$$ |__$$ |      $$ | _$$/ $$ ___$$ |$$$  \$$ |$$ ___$$ |$$ |__$$ |$$$$ |  $$ |  $$/ 
$$ |        $$ |  $$    $$ |$$    $$ |  /   $$< $$    $$<       $$ |/    |  /   $$< $$$$  $$ |  /   $$< $$    $$<   $$ |  $$ |      
$$ |   __   $$ |  $$$$$$$$ |$$$$$$$$ | _$$$$$  |$$$$$$$  |      $$ |$$$$ | _$$$$$  |$$ $$ $$ | _$$$$$  |$$$$$$$  |  $$ |  $$ |   __ 
$$ \__/  | _$$ |_       $$ |$$ |  $$ |/  \__$$ |$$ |  $$ |      $$ \__$$ |/  \__$$ |$$ |$$$$ |/  \__$$ |$$ |  $$ | _$$ |_ $$ \__/  |  v1.02
$$    $$/ / $$   |      $$ |$$ |  $$ |$$    $$/ $$ |  $$ |      $$    $$/ $$    $$/ $$ | $$$ |$$    $$/ $$ |  $$ |/ $$   |$$    $$/ 
 $$$$$$/  $$$$$$/       $$/ $$/   $$/  $$$$$$/  $$/   $$/        $$$$$$/   $$$$$$/  $$/   $$/  $$$$$$/  $$/   $$/ $$$$$$/  $$$$$$/  
                                                                                                                                    
                                                                                                                                    
                                                                         
 __       __                  __                                __       __                       ______                                       __   ______             __        __  __       __                     
/  \     /  |                /  |                              /  |  _  /  |                     /      \                                     /  | /      \           /  |      /  |/  |  _  /  |                    
$$  \   /$$ |  ______    ____$$ |  ______    ______   _______  $$ | / \ $$ |  ______    ______  /$$$$$$  |  ______    ______    ______       /$$/ /$$$$$$  |  ______  $$ |  ____$$ |$$ | / \ $$ |  ______    ______  
$$$  \ /$$$ | /      \  /    $$ | /      \  /      \ /       \ $$ |/$  \$$ | /      \  /      \ $$ |_ $$/  /      \  /      \  /      \     /$$/  $$ |  $$/  /      \ $$ | /    $$ |$$ |/$  \$$ | /      \  /      \ 
$$$$  /$$$$ |/$$$$$$  |/$$$$$$$ |/$$$$$$  |/$$$$$$  |$$$$$$$  |$$ /$$$  $$ | $$$$$$  |/$$$$$$  |$$   |     $$$$$$  |/$$$$$$  |/$$$$$$  |   /$$/   $$ |      /$$$$$$  |$$ |/$$$$$$$ |$$ /$$$  $$ | $$$$$$  |/$$$$$$  |
$$ $$ $$/$$ |$$ |  $$ |$$ |  $$ |$$    $$ |$$ |  $$/ $$ |  $$ |$$ $$/$$ $$ | /    $$ |$$ |  $$/ $$$$/      /    $$ |$$ |  $$/ $$    $$ |  /$$/    $$ |   __ $$ |  $$ |$$ |$$ |  $$ |$$ $$/$$ $$ | /    $$ |$$ |  $$/ 
$$ |$$$/ $$ |$$ \__$$ |$$ \__$$ |$$$$$$$$/ $$ |      $$ |  $$ |$$$$/  $$$$ |/$$$$$$$ |$$ |      $$ |      /$$$$$$$ |$$ |      $$$$$$$$/  /$$/     $$ \__/  |$$ \__$$ |$$ |$$ \__$$ |$$$$/  $$$$ |/$$$$$$$ |$$ |      
$$ | $/  $$ |$$    $$/ $$    $$ |$$       |$$ |      $$ |  $$ |$$$/    $$$ |$$    $$ |$$ |      $$ |      $$    $$ |$$ |      $$       |/$$/      $$    $$/ $$    $$/ $$ |$$    $$ |$$$/    $$$ |$$    $$ |$$ |      
$$/      $$/  $$$$$$/   $$$$$$$/  $$$$$$$/ $$/       $$/   $$/ $$/      $$/  $$$$$$$/ $$/       $$/        $$$$$$$/ $$/        $$$$$$$/ $$/        $$$$$$/   $$$$$$/  $$/  $$$$$$$/ $$/      $$/  $$$$$$$/ $$/       
                                                                                                                                                                                                                     

 ________                      __                            __            __   ______     __       ______     __   
/        |                    /  |                          /  |          /  | /      \   /  |     /      \  _/  |  
$$$$$$$$/   ______   __    __ $$ |  ______    ______    ____$$ |  ______  $$/ /$$$$$$  | _$$ |_   /$$$$$$  |/ $$ |  
   $$ |    /      \ /  |  /  |$$ | /      \  /      \  /    $$ | /      \ /  |$$ |_ $$/ / $$   |  $$____$$ |$$$$ |  
   $$ |    $$$$$$  |$$ |  $$ |$$ |/$$$$$$  |/$$$$$$  |/$$$$$$$ |/$$$$$$  |$$ |$$   |    $$$$$$/    /    $$/   $$ |  
   $$ |    /    $$ |$$ |  $$ |$$ |$$ |  $$ |$$ |  $$/ $$ |  $$ |$$ |  $$/ $$ |$$$$/       $$ | __ /$$$$$$/    $$ |  
   $$ |   /$$$$$$$ |$$ \__$$ |$$ |$$ \__$$ |$$ |      $$ \__$$ |$$ |      $$ |$$ |        $$ |/  |$$ |_____  _$$ |_ 
   $$ |   $$    $$ |$$    $$ |$$ |$$    $$/ $$ |      $$    $$ |$$ |      $$ |$$ |        $$  $$/ $$       |/ $$   |   Script Author 
   $$/     $$$$$$$/  $$$$$$$ |$$/  $$$$$$/  $$/        $$$$$$$/ $$/       $$/ $$/          $$$$/  $$$$$$$$/ $$$$$$/ 
                    /  \__$$ |                                                                                      
                    $$    $$/                                                                                       
                     $$$$$$/                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
 __    __                                __                           
/  \  /  |                              /  |                          
$$  \ $$ |  ______    ______   ________ $$ |____    ______    ______  
$$$  \$$ | /      \  /      \ /        |$$      \  /      \  /      \ 
$$$$  $$ |/$$$$$$  |/$$$$$$  |$$$$$$$$/ $$$$$$$  | $$$$$$  |/$$$$$$  |    Merci pour tout le soutien que vous m'apportez ainsi qu'aux mods en vedette  
$$ $$ $$ |$$ |  $$ |$$ |  $$ |  /  $$/  $$ |  $$ | /    $$ |$$ |  $$/ 
$$ |$$$$ |$$ \__$$ |$$ \__$$ | /$$$$/__ $$ |__$$ |/$$$$$$$ |$$ |      
$$ | $$$ |$$    $$/ $$    $$/ /$$      |$$    $$/ $$    $$ |$$ |      
$$/   $$/  $$$$$$/   $$$$$$/  $$$$$$$$/ $$$$$$$/   $$$$$$$/ $$/       
                                                                      
                                                                                                                                                                                                                                                                              
 
Massive Shout Out TO the C14H3R Team For All Their Hard Work In Testing And Improvements To The General Features - Mods  - < < Great Job Team 

ThePopPop - WayneO - CROW - Ceorin - Zkultra - SilentStorm16 - SouthernCalibronia - Rumour - sac dunker - SANDYCHRI

C14H3R_G3NER1C_WZ/MW/CW_Basic Zen Edition_v1.02

Credits = Noozbar - Batts - DoGzTheFiGhTeR - DoNotAtMe - Swizzy  - Fadexz 

************************************************************************************************************************************************************************************
////////////////\\\\\\\\\\\\\\\\\////////////\\\\\\\\\\///////////\\\\\\\\\\\\////////////\\\\\\\\\\\\\///////\\\\\\\\\\\\\\///////////\\\\\\\\\\\\///////////\\\\\\\\\\\///////\\\\
I N S T R U C T I O N S. . . . P L E A S E   R E A D 
====================================================================================================================================================================================
These instructions below are here to help you understand how to operate the script so that you can use it fluently without issues which makes the experience much better ! ! ! 
====================================================================================================================================================================================
*** M e n u  N a v i g a t i o n ***
====================================
Enter Mod Menu        = Hold L2 and Press OPTIONS 
Exit  Mod Menu        = Press Circle/B 
Enter EditMenu        = Press Cross/A   
Adjust Values         = Hold L2 and Press Left/Right/Up/Down 
Exit EditMenu         = Press Circle/B 
Enable/Disable Mods   = Press UP/Down 
=============================================================================================================
*** P r o f i l e  B u t t o n s  C o n f i g u r a t i o n ***
===============================================================
Select the buttons you wish to use for Profiles... 
*/ 
int    DefaultPress   = FALSE;        /* If you want to press the profile button Normally, Enable this. Otherwise you quickly Tap Profile Button to change Profiles */
define ProfileButton  = PS4_TRIANGLE; /* This is the Button you use to change from Primary & Secondary Profile*/
define ResyncButton   = PS4_L3;       /* This is the Button You HOLD and Press The Profile Button To Re-Sync The Profiles without interuption IN GAME.
=====================================================================================================================================================================
*** W a r z o n e  P r o f i l e  C o n f i g u r a t i o n ***
===============================================================
Select the Buttons you Wish to Use To Activate Warzone Profile... 
*/
define WarzoneHoldButton  = PS4_L2; 
define WarzonePressButton = PS4_DOWN;  
/*
=====================================================================================================================================================================
*** Q u i c k  T o g g l e s  C o n f i g u r a t i o n ***
===========================================================
Choose The Buttons If you want to change From Default for the Quick Toggles...

Rapid Fire Quick Toggle */

define HoldButtonOne  = PS4_L2; 
define PressButtonOne = PS4_LEFT;   /* Hold this button for 300ms 

Akimbo Rapid Fire Quick Toggle */

define HoldButtonTwo  = PS4_L2; 
define PressButtonTwo = PS4_UP;     /* Hold This button for 300ms

HoldBreath Quick Toggle */

define HoldButtonThree  = PS4_L2; 
define PressButtonThree = PS4_RIGHT /* Hold This Button for 300ms

======================================================================================================================================================================
*/
// Display Mods In the OLED Menu \\
const string ModNames[] = { "Rumble AR","Taylor Assist","Batts Stick Aim","Rapid Fire","Akimbo Rf","QuickScope","HoldBreath","Cancel Plates","Enemy Ping","Cancel Slide" ,"Fast Melee",
//                               0            1                 2               3            4           5            6             7            8             9              10                                  
"Controller Layout","Block Rumble","HairTriggers",""};
//      11                12             13                          

// Display Editable Values In The OLED Menu \\
const string ValNames[]  = { "AR Strength","Horiz Strength","Radius","Steps","Min Radius","Taylor Boost","Taylor Boost Str","Taylor Boost Speed","StickyAim Size","StickyAim Time","Batts Boost","Batts Boost Str",              
//                                0               1            2        3         4              5                6                 7                   8                9              10              11                
"Rounds/Sec","Rounds/Sec","QuickScope Delay",""} 
//   12          13            14                                                                
         
// Display Misc Strings Used Throughout The Menu Including Combo's \\
const string Misc[] = { "C14H3R Polar","On","Off","Helix","Activated","Primary","Secondary","Press Cross/A","Hold L2 to Edit"," Press Up/Down ","Circular","Tall Oval","Wide Oval","Spiral","ModernWarfare",
 //                           0        1    2        3          4           5          6            7              8                9             10            11        12         13          14
"ColdWar","Choose Toggle","Rumble AR","Progressive","TaylorAssist","Batts Sticky Aim","Taylor & Batts","Rapid Fire","Akimbo RF","AllProfiles","Drive Mode","Warzone","Saved","Default Values","Restored",
// 15           16             17           18            19               20                  21             22        23            24            25         26       27           28           29
"Sprint Only","Tactical Sprint","Apocalypse v1.02","G3N3R1C Edition", "" } 
//    30              31
// Display All Different Controller Layouts Choosable Via The Menu \\
const string ControllerLayouts[] = { "Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move", 
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped",""}

// All Toggles For Mods That Can Be Used Seperately On 3 Profiles \\

int ToggleTaylorAR            [3]  ;
int ToggleTaylorAssist        [3]  ;
int ToggleBattsAssist         [3]  ; 
int ToggleRapidFire           [3]  ;
int ToggleAkimboRf            [3]  ;
int ToggleQuickScope          [3]  ; 
int ToggleHoldBreath          [3]  ;

// Available Values That Can Be Different On 3 Profiles \\

int TaylorStrength            [3]  ;
int HorizStrength             [3]  ; 
int TaylorRadius              [3]  ;
int TaylorAngle               [3]  ;
int TaylorRadiusMin           [3]  ;
int PolarBoost                [3]  ;
int TaylorAngleBoost          [3]  ; 
int ToggleRumbleBoost         [3]  ;
int AimAssistSize             [3]  ;
int AimAssistTime             [3]  ;
int ToggleBattsBoost          [3]  ; 
int StickyBoost               [3]  ; 
int RateOfFire                [3]  ;
int AkimboRoF                 [3]  ; 
int QuickScopeDelay;
// These Are Variables Used That Are Dependant On My Menu Structure \\

int ModORVal                  [2]  ;
int ModOrEditMenu             [2]  ;
int DisplayModsNToggles       [1]  ;

// Defined Values For Specific Features In The Script \\

define AmountOfValues        = 16  ;
define AmountOfEditableMods  = 6   ;
define TotalNumberOfProfiles = 3   ;

// All Variables Used In My Script \\

int HoldTime,RestTime,LedOn,LedOff; 

int ToggleCancelSlide,ToggleEnemyPing,ToggleFastMelee; 

int ToggleCancelPlates,RunCancelPlatesTimer,ActivateCancelPlates;

int RX,RY,angle,CosAngle,SinAngle,SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral,ActualMagnitude,MaxMagnitude,SmartRumble,AntirecoilStrength,PolarStrength,Angle;

int DriveMode,ScreenSaver,BlankScreen,SelectedProfileIdx,ProfileIdx,WarzoneLootProfile;

int SmartSens_side,SmartSens,ToggleBlockRumble;

int StickyStrength,AimAssistVal;

int ToggleHairTriggers; 
int ProfilesActive = TRUE;         /* Leave this TRUE if you want to USE the Profiles (Primary - Secondary) */

int    DisplayTitle       = TRUE;
define False              = FALSE;
define True               = TRUE; 


int Ads,Fire,Lethal,Tactical,Jump,Crouch,Melee,Sprint,Reload,Swap,Ping,Buttons;

const int8 DamPolar[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,    
80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7, 
6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,  
-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95, 
-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,   
-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61, 
-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,
9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,
82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};  

init { 
// Load Default Values \\
         Load();     
} 
main { 

	Buttons(Buttons);

	if(get_val(Ads))                                             // Enter Mod Menu OR Enable DriveMode (KillSwitch) OR Enter Test Mode (Configure Recoil/AimAssist On The Fly) === \\
	{ 
		if(event_press(PS4_OPTIONS))                                // Enter Mod Menu \\ 
		{ 
		    ModOrEditMenu[0]       = TRUE; 
		    ModOrEditMenu[1]       = FALSE;
		    DisplayModsNToggles[0] = TRUE;
		    ModORVal[0]            = 0; 
		    DisplayTitle           = FALSE; 
		    combo_run(RumbleOn); 
		    
		    if(!ModOrEditMenu[0]) 
		    	DisplayTitle = TRUE;
		    
	    }
	    if(event_press(PS4_RIGHT) && get_brtime(PS4_RIGHT) <= 200 && !ModOrEditMenu[0] && !ModOrEditMenu[1] && !ModOrEditMenu[2])  // Enter Test Mode \\
	    {
	        DriveMode = TRUE; 
	        combo_run(DriveMode);
	        
	    }
	    set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); // Block These Button Presses When Entering The 3 x Menu's (Prevent's Interuption IN GAME )    
    }   // End of First Block ( Entering the different Menu's ) \\ 
    
    // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Mod Menu & Change Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\
    
    if(!DisplayTitle)                           // If NOT On Display Title \\
    { 
   		if(ModOrEditMenu[0])        // Enter Mod Menu - Menu Navigation - Toggle Activation \\
     	{ 
            ModORVal[0]                       = ModORValNavi(ModORVal[0],0, 13); // Min & Max OF Mods (Mod Menu) 
            ToggleTaylorAR      [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  0,ToggleTaylorAR      [ProfileIdx],0,1);  // RumbleAR - Progressive                         \\
            ToggleTaylorAssist  [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  1,ToggleTaylorAssist  [ProfileIdx],0,5);  // TaylorAssist - BattsStickyAim - Taylor & Batts \\
            ToggleBattsAssist   [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  2,ToggleBattsAssist   [ProfileIdx],0,1);  // TaylorAssist - BattsStickyAim - Taylor & Batts \\
            ToggleRapidFire     [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  3,ToggleRapidFire     [ProfileIdx],0,1);  // Rapid Fire                                     \\
            ToggleAkimboRf      [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  4,ToggleAkimboRf      [ProfileIdx],0,1);  // Akimbo Rapid Fire                              \\
            ToggleQuickScope    [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  5,ToggleQuickScope    [ProfileIdx],0,1);  // QuickScope                                     \\  
            ToggleHoldBreath    [ProfileIdx]  = ToggleSwitch(ModORVal[0] ==  6,ToggleHoldBreath    [ProfileIdx],0,1);  // HoldBreath                                     \\
            ToggleCancelPlates                = ToggleSwitch(ModORVal[0] ==  7,ToggleCancelPlates              ,0,1);  // Cancel Plates                                  \\
            ToggleEnemyPing                   = ToggleSwitch(ModORVal[0] ==  8,ToggleEnemyPing                 ,0,1);  // Enemy Ping                                     \\
            ToggleCancelSlide                 = ToggleSwitch(ModORVal[0] ==  9,ToggleCancelSlide               ,0,2);  // Cancel Slide - Modern Warfare - Cold War       \\ 
            ToggleFastMelee                   = ToggleSwitch(ModORVal[0] == 10,ToggleFastMelee                 ,0,1);  // Fast Melee                                     \\ 
            Buttons                           = ToggleSwitch(ModORVal[0] == 11,Buttons                        ,0,21);
            ToggleBlockRumble                 = ToggleSwitch(ModORVal[0] == 12,ToggleBlockRumble              ,0, 1);
            ToggleHairTriggers                = ToggleSwitch(ModORVal[0] == 13,ToggleHairTriggers             ,0, 1);
            
         
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Menu To Make Changes ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\   
    	} 
    	if(ModOrEditMenu[1])  // Enter Edit Menu - Value Change Activation - Navigate Different Types Of Values \\
	    { 
            ModORVal[1]                       = ModORValNavi(ModORVal[1],0  ,15);
            
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  Edit Values Via Menu & Enable/Disable Toggles ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\           
    
            TaylorStrength   [ProfileIdx]     = EditableVals(ModORVal[1]    , 0,TaylorStrength   [ProfileIdx] ,-99, 99 , 1 , 10); 
            HorizStrength    [ProfileIdx]     = EditableVals(ModORVal[1]    , 1,HorizStrength    [ProfileIdx] ,-99, 99 , 1 , 10); 
            TaylorRadius     [ProfileIdx]     = EditableVals(ModORVal[1]    , 2,TaylorRadius     [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorAngle      [ProfileIdx]     = EditableVals(ModORVal[1]    , 3,TaylorAngle      [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorRadiusMin  [ProfileIdx]     = EditableVals(ModORVal[1]    , 4,TaylorRadiusMin  [ProfileIdx] ,  0, 20 , 1 , 10); 
            ToggleRumbleBoost[ProfileIdx]     = ToggleSwitch1(ModORVal[1] ==  5,ToggleRumbleBoost[ProfileIdx] ,  0,  1         );
            PolarBoost       [ProfileIdx]     = EditableVals(ModORVal[1]    , 6,PolarBoost       [ProfileIdx] ,  0, 99 , 1 , 10);
            TaylorAngleBoost [ProfileIdx]     = EditableVals(ModORVal[1]    , 7,TaylorAngleBoost [ProfileIdx] ,  0, 99 , 1 , 10);
            AimAssistSize    [ProfileIdx]     = EditableVals(ModORVal[1]    , 8,AimAssistSize    [ProfileIdx] ,  0, 99 , 1 , 10);
            AimAssistTime    [ProfileIdx]     = EditableVals(ModORVal[1]    , 9,AimAssistTime    [ProfileIdx] ,  0, 90 ,10 , 10);
            ToggleBattsBoost [ProfileIdx]     = ToggleSwitch1(ModORVal[1] == 10,ToggleBattsBoost [ProfileIdx] ,  0,  1         );
            StickyBoost      [ProfileIdx]     = EditableVals(ModORVal[1]    ,11,StickyBoost      [ProfileIdx] ,  0, 99 , 1 , 10);
            RateOfFire       [ProfileIdx]     = EditableVals(ModORVal[1]    ,12,RateOfFire       [ProfileIdx] ,  0, 25 , 1 , 10);
            AkimboRoF        [ProfileIdx]     = EditableVals(ModORVal[1]    ,13,AkimboRoF        [ProfileIdx] ,  0, 25 , 1 , 10);
            QuickScopeDelay                   = EditableVals(ModORVal[1]    ,14,QuickScopeDelay               ,  0,600 , 1 , 10);
      
   
   // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ Value Limits For Mods With Adjustable Values ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ \\       
        
            if(ModORVal[0] ==   0) ModORVal[1] = cycle(ModORVal[1],0,1);
            if(ModORVal[0] ==   1) ModORVal[1] = cycle(ModORVal[1],2,7);
            if(ModORVal[0] ==   2) ModORVal[1] = cycle(ModORVal[1],8,11);
            if(ModORVal[0] ==   3) ModORVal[1] = cycle(ModORVal[1],12,12);
            if(ModORVal[0] ==   4) ModORVal[1] = cycle(ModORVal[1],13,13);
            if(ModORVal[0] ==   5) ModORVal[1] = cycle(ModORVal[1],14,14);
          
                       
        }
    }
    if(DisplayModsNToggles[0])    // Display Mods - Editable Values - Toggles - Display 3x Menu's \\
    { 
        cls_oled(OLED_BLACK);
        led(ProfileIdx);
               
   		if(ModOrEditMenu[1]) 
        { 	
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	printf(center_x(get_valName_chars(ModORVal[1]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ValNames[ModORVal[1]]); 
        	
            if(ModORVal[1] >= 0 && ModORVal[1]  <= 4 || ModORVal[1] >= 6 && ModORVal[1] <= 9 || ModORVal[1] >= 11 && ModORVal[1] <= 14) 
        	{
        		line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
		    	line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		    	putc_oled(1, 133);
		    	puts_oled(15, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 134);
		   	    puts_oled(105,45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 132);
		    	puts_oled(5, 45, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 131);
		    	puts_oled(115,45, OLED_FONT_SMALL, 1, 1);
            	printf(center_x(get_misc_chars(8), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,Misc[8]); //L2 to Edit
            } 
            if(ModORVal[1] == 5 || ModORVal[1] == 10) 
            {
            	line_oled(0, 35, OLED_WIDTH - 1, 35, 1, OLED_WHITE);
		    	line_oled(0, 18, OLED_WIDTH - 1, 18, 1, OLED_WHITE);
		    	printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),23,OLED_FONT_SMALL,OLED_WHITE,Misc[9]); //updown
            }
        }
        else 
        {
        	led(ProfileIdx);
        	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
            printf(center_x(get_modName_chars(ModORVal[0]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModORVal[0]]);
            
        	if(ModORVal[0] >= 0 && ModORVal[0]  <= 13) 
        	{
            	line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
		    	line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
		    	putc_oled(1, 133);
		    	puts_oled(15, 25, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 134);
		    	puts_oled(105,25, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 132);
		    	puts_oled(5, 25, OLED_FONT_SMALL, 1, 1);
		    	putc_oled(1, 131);
		    	puts_oled(115,25, OLED_FONT_SMALL, 1, 1);
		    	
            } 
            if(ModORVal[0] >= 0 && ModORVal[0] <= 6) 
            {
            	if(ProfileIdx == 0) 
        			printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
           	    else if(ProfileIdx == 1) 
            		printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]); 
            	else if(ProfileIdx == 2) 
            	    printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);  
            } 
        	if(ModORVal[0] >= 7 && ModORVal[0] <= 11) 
        	{
        		printf(center_x(get_misc_chars(24), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[24]);  
            }
            if(ModORVal[0] == 12 || ModORVal[0] == 13) 
            {
            	printf(center_x(get_misc_chars(9), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[9]);  
            } 
        }			
        DisplayModsNToggles[0] = FALSE; 
    } 
    if(!ModOrEditMenu[0] && !ModOrEditMenu[1])                      // If NOT In Either Menu's \\ 
	{
    	if(DisplayTitle)                                            // Display Title - Display Screen \\
    	{ 
       		cls_oled(OLED_BLACK);
       	    rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
        	printf(center_x(get_misc_chars(0), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,Misc[0]);
        	printf(center_x(get_misc_chars(32), OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_WHITE,Misc[32]);
        	printf(center_x(get_misc_chars(33), OLED_FONT_SMALL_WIDTH),35,OLED_FONT_SMALL,OLED_WHITE,Misc[33]);
        	
        	if(ProfileIdx == 0) 
        		printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
            if(ProfileIdx == 1) 
            	printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
            if(WarzoneLootProfile) 
            	printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),50,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);  
            	
        	DisplayTitle = FALSE;
            ScreenSaver  = TRUE; 
    	}
    	// Display a Blank Screen after 10 seconds ( Prevents Screen Burn on The OLED Screen ) 
    	
    	if(ScreenSaver) 
    	{
        	BlankScreen += get_rtime();
        	
    		if(BlankScreen >= 10000)
    		{
    			cls_oled(OLED_BLACK);
    			BlankScreen = 0;
    			ScreenSaver = FALSE; 
        	} 
        }
        if(DriveMode) 
        {
        	LedOn  = 150;
			LedOff = 300;
			combo_run(Blink);
        } 
        // Switch Profiles Activation \\ 
        led(ProfileIdx);
        
        if(ProfilesActive) 
        {
        	if(event_release(ProfileButton) && get_ptime(ProfileButton) < 150 && !DefaultPress || DefaultPress && event_press(ProfileButton) || get_val(ResyncButton) && event_release(ProfileButton) && !DefaultPress || DefaultPress && get_val(ResyncButton) && event_press(ProfileButton))
        	{
    			SelectedProfileIdx =! SelectedProfileIdx;
    			WarzoneLootProfile = FALSE;
    		
    			if(ModOrEditMenu[0]) 
    				DisplayModsNToggles[0] = TRUE; 
        		else
            		DisplayTitle = TRUE;
            
        		if(!WarzoneLootProfile) 
        		{
            		if(SelectedProfileIdx) 
            			ProfileIdx = 1;
            		else
           				ProfileIdx = 0; 
	   			}
	   		} 
	   		if(get_val(ResyncButton))
	    		set_val(ProfileButton, 0);	
      	} 
        if(get_ival(WarzoneHoldButton) && get_ival(WarzonePressButton))
        {
             ProfileIdx = 2; 
	       	 WarzoneLootProfile = TRUE;
	       	    
	       	 if(ModOrEditMenu[0]) 
    			DisplayModsNToggles[0] = TRUE; 
        	 else
            	DisplayTitle = TRUE;
	    }           
	    if(get_ival(WarzoneHoldButton))
	    	set_val(WarzonePressButton, 0);    	  	
    } 
    // When Drive Mode is Activated, This Turns EVERYTHING Off in the script, Purpose of this, is when entering a vehicle in Warzone, To Turn Drive Mode Off, Press Square( Exit Vehicle ) 
    if(DriveMode) 
    {
    	if(event_press(PS4_SQUARE))
    	{
    		DriveMode = FALSE;
    		combo_run(RumbleOff); 
        } 
    }
    if(ToggleHairTriggers) 
	{	
		if(get_ival(PS4_R2) > 10) 
			set_val(PS4_R2, 100);
	
		if(get_ival(PS4_L2) > 10)
			set_val(PS4_L2, 100);
	}
	if(ToggleBlockRumble) 
	{
		block_rumble();
	} 
    // If NOT In DriveMode ( KillSwitch )
    if(!DriveMode)           
	{ 
		ToggleRapidFire [ProfileIdx]    = Quick_Toggle( HoldButtonOne,PressButtonOne    ,ToggleRapidFire  [ProfileIdx],3);
		ToggleAkimboRf  [ProfileIdx]    = Quick_Toggle( HoldButtonTwo,PressButtonTwo    ,ToggleAkimboRf   [ProfileIdx],4);
		ToggleHoldBreath[ProfileIdx]    = Quick_Toggle( HoldButtonThree,PressButtonThree,ToggleHoldBreath [ProfileIdx],6);
      	
    		if(ToggleTaylorAR[ProfileIdx] == 1) 
    		{
	       		if(get_ival(Fire))
	        	{ 
					SmartRumble = get_rumble(RumbleToUse());
                 				
					if(SmartRumble > 10 && SmartRumble < 90) 
					{
						AntirecoilStrength = TaylorStrength[ProfileIdx] + SmartRumble / 4;
						SmartRumble = 0; 
					}
				    if(AntirecoilStrength < 10) 
					{
		    			SmartSens(TaylorStrength[ProfileIdx], PS4_RY);
		    			SmartSens(HorizStrength[ProfileIdx],PS4_RX); 
					}
					else
					{ 	
						SmartSens(AntirecoilStrength,PS4_RY);  // SinAngle < Aim Assist 
						SmartSens(HorizStrength[ProfileIdx],PS4_RX);  // CosAngle < Aim Assist 
				    }
			    SmartRumble         = 0;  // Reset Rumble 
    	    	AntirecoilStrength  = 0;  // Reset Antirecoil Strength 
				}
			}
			if(ToggleTaylorAssist[ProfileIdx]) 
			{     
				RX = get_val(PS4_RX);                                
    			RY = get_val(PS4_RY); 
  				ActualMagnitude = isqrt(pow(RX, 2) + pow(RY, 2));   
  				MaxMagnitude = (ActualMagnitude < 100);             
			
				                       
				angle += TaylorAngle[ProfileIdx] + Angle;                                    
				angle = angle % 360;  
				CosAngle = DamPolar[(angle + 270) % 360];  
				SinAngle = DamPolar[angle % 360];
    
   		   		if(ToggleRumbleBoost[ProfileIdx] == 1)
    			{
    				if(get_ival(Fire))
    				{
    					SmartRumble = get_rumble(RumbleToUse());
    					Angle = TaylorAngleBoost[ProfileIdx];
    		
    				if(SmartRumble > 10 && SmartRumble < 90)  
    				{
    					PolarStrength  = (TaylorRadius[ProfileIdx] + PolarBoost[ProfileIdx] + TaylorAngleBoost[ProfileIdx] + SmartRumble / 4); 
    					SmartRumble    = 0;
    				}
    				set_val(TRACE_3,PolarStrength); 
    			} 
    		}
    		if(get_ival(Ads) || get_ival(Fire))         
    		{
        		if(ActualMagnitude < TaylorRadius[ProfileIdx])           
        		{
           			SinAngle -= RY;                                                              
					CosAngle -= RX;
	    		}
	   			else 
	   			{     
					SinAngle = (SinAngle * (200 - ((abs(RY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;  
					CosAngle = (CosAngle * (200 - ((abs(RX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude;   
				}                                                  
				if(!get_rumble(RumbleToUse()))
    				GetShapes(TaylorRadius[ProfileIdx]); 
    			else 
    				GetShapes(PolarStrength); 
				}
				PolarStrength = 0; 
    			SmartRumble   = 0;  
			} 
			if(ToggleBattsAssist[ProfileIdx] == 1) 
			{
				if(get_val(Ads) || get_ival(Fire))
				{
    				AimAssistVal = AimAssistSize[ProfileIdx]; 
					combo_run(StickyAim) 
    		    } 
    		    if(ToggleBattsAssist[ProfileIdx] == 1 && ToggleBattsBoost[ProfileIdx] && get_ival(Fire)) 
   			    { 
    				SmartRumble = get_rumble(RumbleToUse());
    		
        			if(SmartRumble) 
    				{
    					StickyStrength  = (AimAssistSize[ProfileIdx] + StickyBoost[ProfileIdx] + SmartRumble / 4); 
    					SmartRumble    = 0;
    				}
    				AimAssistVal = StickyStrength; 
    				combo_run(StickyAim);
    			}
    			SmartRumble = 0;
            	StickyStrength = 0;		
    		} 
	    	if(ToggleRapidFire[ProfileIdx]  == 1) 
	    	{ 
	    	 	HoldTime = 500 / RateOfFire[ProfileIdx]; 
   		     	RestTime = HoldTime -get_rtime();
    	     	if(RestTime < 0) RestTime = 0;
			    
			 	if(get_val(Fire))
			    	    
			 		combo_run(RAPIDFIRE);
			 	else
			    	combo_stop(RAPIDFIRE);
			    		
			    LedOn  = 150;
			    LedOff = 300;
			    combo_run(BLINK);
			}
			if(ToggleAkimboRf[ProfileIdx]   == 1) 
            { 	
                if(get_val(Fire))
                    combo_run(ARF);
                else 
                    combo_stop(ARF);
                    
                LedOn  = 150;
			    LedOff = 300;
			    combo_run(BLINK);               
            }
            if(ToggleQuickScope)
			{
				if(event_press(Ads) && get_ptime(Ads) < 140)
				combo_run(Quick_Scope);
			}
			if(ToggleHoldBreath[ProfileIdx] == 1) 
            {
	       		if(get_val(Ads))
		    		set_val(Sprint, 100);
	                      
	   			if(get_val(PS4_LY) <-90 && get_val(Ads) && get_ptime(Ads) > 200)
	       			combo_stop(HoldBreath);       
	                    
	   			if(event_press(Ads)) 
	       			combo_run(HoldBreath);
	  
	   			if(get_val(Ads) && get_lval(Sprint)) 
	       			set_val(Sprint, 0);  
			}       
			if(ToggleCancelPlates)
        	{
        		if(get_ival(Swap) && get_ptime(Swap) >= 400)
           			ActivateCancelPlates = TRUE;

        		if(ActivateCancelPlates)
        		{
           	    	RunCancelPlatesTimer += get_rtime();
            
            	if(RunCancelPlatesTimer  >= 3000) 
            	{
               		RunCancelPlatesTimer  = 0;
                	ActivateCancelPlates  = FALSE;
            	}
            	if(event_press(Ads) || event_press(Fire))
                	combo_run(Cancel_Plates);
            	}
            }
			if(ToggleEnemyPing) 
        	{
        		if(get_val(Fire))
	         		combo_run(EnemyPing); 
	     		else
	         		combo_stop(EnemyPing); 
	     
        	}
        	if(ToggleCancelSlide == 1)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(event_release(Crouch))
						combo_run(CancelSlideMW)
						
					if(combo_running(CancelSlideMW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideMW)
				}
			}
			if(ToggleCancelSlide == 2)
			{
				if((get_val(PS4_LY) < -80) || (get_val(PS4_LY) > 80) || (get_val(PS4_LX) < -80) || (get_val(PS4_LX) > 80))
				{
					if(event_release(Crouch))
						combo_run(CancelSlideCW)
						
					if(combo_running(CancelSlideCW) && (get_val(Ads) && event_release(Crouch)))
	                    combo_stop(CancelSlideCW)
				}
			}
			if(ToggleFastMelee)
			{
				if(get_val(Melee))
				combo_run(FastMelee);

				if(get_val(Ads) && event_press(Melee) < 500)
				combo_stop(FastMelee);
			}
      	 } 
      }
int Position;   
function GetShapes(f_var) {     
   
    if(!SpiralPosition1)                                
	{
		InnerSpiral -= 1;
		if(InnerSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition1 = True;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = False;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < TaylorRadiusMin[ProfileIdx])
			SpiralPosition2 = True;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = False;
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 1)                    
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 2)        
	{ 
        RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * TaylorRadiusMin[ProfileIdx]) )/100; 
	}
	if(ToggleTaylorAssist[ProfileIdx] == 3)                     
	{ 
        RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;  
        RY = (get_val(PS4_RY))  + ( (SinAngle * TaylorRadiusMin[ProfileIdx]) )/100;
       
	} 
	if(ToggleTaylorAssist[ProfileIdx] == 4)                  
	{
        RY = (get_val(PS4_RY))  + ( (SinAngle * InnerSpiral) )/100;
        RX = (get_val(PS4_RX))  + ( (CosAngle * OuterSpiral) )/100;  
	}
    if(ToggleTaylorAssist[ProfileIdx] == 5)
	{
		if(Position == 0 || Position == 1)
    	{  
		    RX = (get_val(PS4_RX))  + ( (CosAngle * f_var) )/100;
		}
	    if(Position == 2 || Position == 3)
		{  
		    RY = (get_val(PS4_RY))  + ( (SinAngle * f_var) )/100;
		}
			Position++;		
			
		if(Position == 4)
		{
			Position = 0;
		}
    } 
    set_val(PS4_RX,RX);
	set_val(PS4_RY,RY);
}	    

combo CancelSlideMW {              
set_val(Crouch, 100);          
wait(120);                         
set_val(Crouch, 0);            
wait(60);                          
set_val(Crouch, 100);          
wait(50);                          
set_val(Crouch, 100);          
set_val(Jump, 100);           
wait(60);                          
set_val(Crouch, 0);            
set_val(Jump, 100);          
wait(10);                        
set_val(Jump, 0);
} 
combo CancelSlideCW {
set_val(Crouch, 100);
wait(80);
set_val(Crouch, 0);
wait(20);
set_val(Sprint, 0);
set_val(Crouch, 100);
set_val(Sprint, 100);
wait(20);
set_val(Crouch, 0);
set_val(Sprint, 0);
wait(20);
}
combo Quick_Scope {
set_val(Ads,100);
wait(QuickScopeDelay); 
set_val(Ads,100);
set_val(Fire,100);
wait(40);
set_val(Ads,100);
wait(40); 
}  
combo ARF {
set_val(Fire,100);
set_val(Ads,100);
wait(40);
set_val(Fire,0);
set_val(Ads,0);
wait(AkimboRoF[ProfileIdx]);
}
combo FastMelee {
set_val(Melee, 100);
wait(35);
set_val(Melee, 0);
wait(30);  
}
combo DriveMode { 
cls_oled(0); 
printf(center_x(get_misc_chars(25), OLED_FONT_SMALL_WIDTH),15,OLED_FONT_SMALL,OLED_WHITE,Misc[25]);
printf(center_x(get_misc_chars(4), OLED_FONT_SMALL_WIDTH),30,OLED_FONT_SMALL,OLED_WHITE,Misc[4]);
wait(1500);
DisplayTitle = TRUE;
} 
combo Saved { 
cls_oled(0); 
printf(center_x(get_misc_chars(27), OLED_FONT_MEDIUM_WIDTH),20,OLED_FONT_MEDIUM,OLED_WHITE,Misc[27]);
wait(2000);
DisplayTitle = TRUE; 
} 

combo QuickToggles{ 
wait(1500) 
DisplayTitle   = TRUE; 
reset_leds(); 
}   
combo RAPIDFIRE { 
wait(HoldTime);
set_val(Fire, 0);
wait(RestTime);
}		     
combo BLINK {
led(ProfileIdx);
wait(LedOn);
led(7);
wait(LedOff);
} 
combo Blink{
led(6);
wait(LedOn);
led(7);
wait(LedOff);
}
combo EnemyPing {
set_val(Ping,100);
wait(20)
set_val(Ping,0);
wait(20)
set_val(Ping,100);
wait(20)
set_val(Ping,0); 
wait(2000); 
}
combo Cancel_Plates { 
set_val(Melee,100);
wait(20);
ActivateCancelPlates = FALSE;
RunCancelPlatesTimer = 0; 
}
combo HoldBreath {
set_val(Sprint,0);
wait(60);
set_val(Sprint,100);
wait(110);
set_val(Sprint,0);
wait(110);
}
combo StickyAim { // Batts Sticky with SmartSens
SmartSens1(PS4_RY,AimAssistVal); 
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RX,AimAssistVal);
SmartSens1(PS4_LX,AimAssistVal);
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RY,inv(AimAssistVal)); 
wait(AimAssistTime[ProfileIdx]);
SmartSens1(PS4_RX,inv(AimAssistVal));
SmartSens1(PS4_LX,inv(AimAssistVal));
wait(AimAssistTime[ProfileIdx]);
}
combo RumbleOn {
set_ledx(2, 2);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
wait(100);
set_rumble(RUMBLE_B, 50);
wait(150);
reset_rumble();
reset_leds();
led(ProfileIdx);
}
combo RumbleOff {						
set_ledx(1, 1);
set_rumble(RUMBLE_A, 50);
wait(300);
reset_rumble();
wait(400);
reset_leds();
led(ProfileIdx);
}
function led(f_color){
for(i = 0; i <= 3; i++) 
{
 set_led(i,duint8((f_color * 4) + i));
 }
}	

function SmartSens(f_val, f_axis) { 

	if(f_val < 0)
		SmartSens_side = -1; // Left / Up for inverted ar
	else 
		SmartSens_side = 1; // Right / Down for standard ar

	if(SmartSens_side == -1) // if AntiRecoil_ has a negative value (Left or Up) 
	{
	    if(get_ival(f_axis) > 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + abs(f_val))) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100);
	
	// Set SmartSens AntiRecoil
		if(get_ival(f_axis) >= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens);
	}
	
	else // if(SmartSens_side == 1) so if AntiRecoil_ has a positive value (Right or Down)
	{
	    if(get_ival(f_axis) < 0) // if Right stick input has a negative value
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if Right stick input has a positive value
	    	SmartSens = ((get_ival(f_axis) * (100 + inv(f_val))) / 100);
	    
	// Set SmartSens AntiRecoil
	    if(get_ival(f_axis) <= f_val + SmartSens)
	    	set_val(f_axis, f_val + SmartSens)
	}
}
function SmartSens1(f_axis, f_val) { 

	if(f_val < 0)
		SmartSens_side = -1; // Left / Up 
	else 
		SmartSens_side = 1; // Right / Down 

	if(SmartSens_side == -1) // if f_val has a negative value (Left side or Up) 
	{
	    if(get_ival(f_axis) > 0) // if stick input has a positive value (Right side or Down)
	    	SmartSens = ((get_ival(f_axis) * (100 - f_val)) / 100); 
	    
	    else if(get_ival(f_axis) <= 0) // if stick input has a negative value (Left side or Up)
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100);
	}
	
	if(SmartSens_side == 1) // if f_val has a positive value (Right side or Down)
	{
	    if(get_ival(f_axis) < 0) // if stick input has a negative value (Left side or Up)
	    	SmartSens = ((get_ival(f_axis) * (100 + f_val)) / 100); 
	    	
	    else if(get_ival(f_axis) >= 0) // if stick input has a positive value (Right side or Down)
	    	SmartSens = ((get_ival(f_axis) * (100 - f_val)) / 100);
	}
// Set SmartSens on the axis
	if(SmartSens_side == -1 && get_ival(f_axis) >= f_val + SmartSens || SmartSens_side == 1 && get_ival(f_axis) <= f_val + SmartSens)
	    set_val(f_axis, clamp(f_val + SmartSens, -100, 100));
}
function RumbleToUse() {
    if(get_rumble(RUMBLE_A) >= get_rumble(RUMBLE_B)) 
        return RUMBLE_A;
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B)) 
        return RUMBLE_B;
        
    return 0;
}			   
function EditableVals(f_idx,f_num,ValueIndex,ValueIndexMin,ValueIndexMax ,ValueIndexMinVal,ValueIndexMaxVal) {  
    if(f_num == f_idx) 
    { 
        if(get_ival(Ads))  
        {
            if(event_press(PS4_RIGHT)) 
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_LEFT))  
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMinVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_UP))
            {
                ValueIndex = cycle(ValueIndex + ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            }
            if(event_press(PS4_DOWN))
            {
                ValueIndex = cycle(ValueIndex - ValueIndexMaxVal, ValueIndexMin,ValueIndexMax); 
                DisplayModsNToggles[0] = TRUE; 
            } 
            BlockButtons();
        }
        number_to_string(ValueIndex,find_digits(ValueIndex)); 
    }
    return ValueIndex;                
 } 
function ModORValNavi(f_modorval,f_min,f_max) { 

	if(!get_val(Ads))
	{
		if(event_press(PS4_RIGHT))  
		{     
	        f_modorval = cycle(f_modorval + 1, f_min , f_max  );
	        DisplayModsNToggles[0] = TRUE;   
   		}     
		if(event_press(PS4_LEFT)) 
		{  
	        f_modorval = cycle(f_modorval - 1, f_min , f_max  );
	        DisplayModsNToggles[0] = TRUE;
		} 
        BlockButtons(); 
	}
	if(f_modorval < AmountOfEditableMods || f_modorval == 15) 
	{
		if(event_press(PS4_CROSS)) 
    	{ 
        	ModORVal[1]  = AmountOfValues + 1;
        	ModOrEditMenu[1]       = TRUE;
        	ModOrEditMenu[0]       = FALSE;
        	DisplayModsNToggles[0] = TRUE;
    	}
    }
    if(ModOrEditMenu[0]) 
    {
    	if(event_press(PS4_CIRCLE)) 
    	{    
    	    
        	DisplayTitle = TRUE;
        	ModOrEditMenu[1]       = FALSE; 
       		ModOrEditMenu[0]       = FALSE;
        	DisplayModsNToggles[0] = FALSE; 
        	combo_run(RumbleOff); 
    	    Save();
    	    combo_run(Saved); 
    	} 	
    }
    if(ModOrEditMenu[1]) 
    {
    	if(event_press(PS4_CIRCLE)) 
    	{       
        	
        	ModOrEditMenu[1]       = FALSE; 
       		ModOrEditMenu[0]       = TRUE;
        	DisplayModsNToggles[0] = TRUE;   	
    	}
    } 
    if(event_press(PS4_TRIANGLE)) 
    { 
        ProfileIdx = cycle(ProfileIdx + 1, 0, 2);
        DisplayModsNToggles[0] = TRUE;   	
    }
 
    BlockButtons();
return f_modorval; 
}
function cycle(f_val, f_lo, f_hi) {
	if(f_val > f_hi) return f_lo;
	if(f_val < f_lo) return f_hi;
	return f_val;
}
function ToggleSwitch(f_name,f_val,f_min,f_max) { 
    if(f_name) 
    {
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOff); 
    	}
    	if(ModORVal[0] == 1) 
    	{
    	    if(f_val == 0)  
    			printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
    	    else if(f_val == 1)
           	    printf(center_x(get_misc_chars(10), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[10]);
           	else if(f_val== 2)
           	    printf(center_x(get_misc_chars(11), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[11]);
           	else if(f_val== 3)
           	    printf(center_x(get_misc_chars(12), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[12]);	
           	else if(f_val== 4)
           	    printf(center_x(get_misc_chars(13), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[13]);
           	else if(f_val== 5)
           	    printf(center_x(get_misc_chars(3), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[3]);
        }
        else if(ModORVal[0] == 9)
        {
        	if(f_val == 0)  
    			printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]);
           	else if(f_val == 1)
           	    printf(center_x(get_misc_chars(14), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[14]);
           	else if(f_val == 2)
           	    printf(center_x(get_misc_chars(15), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[15]);
        }
        else if(ModORVal[0] == 11) 
        {
        	printf(center_x(get_ControllerBtn_chars(Buttons), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,ControllerLayouts[Buttons]);
        }
       
        else
        {
           	if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
        } 
    }
    return f_val;
}
function ToggleSwitch1(f_name,f_val,f_min,f_max) { 
    if(f_name) 
    {
		if(event_press(PS4_UP))
   		{
            f_val = cycle(f_val ++, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOn); 
        }
   	 	if(event_press(PS4_DOWN))
   		{
            f_val = cycle(f_val --, f_min, f_max);
            DisplayModsNToggles[0] = TRUE;
            combo_run(RumbleOff); 
    	}
    	
           	if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
    }
    return f_val;
}
function Quick_Toggle(f_hold, f_press, f_val, f_idx) {  
	if (f_hold == 0 || f_press == 0) return f_val;
	
	if(get_ival(f_hold))
	{
		if(get_ival(f_press) && get_ptime(f_press) == (get_rtime() * 30))
		{
			ModORVal[0] = f_idx; 
			
			if(f_val == 0)
			{
				f_val = 1;
				combo_run(RumbleOn); 
			}
			else
			{
				f_val = 0;
				combo_run(RumbleOff); 
			}
			DisplayQuickToggles();
			combo_run(QuickToggles);
			if(f_val == 1)  
    			printf(center_x(get_misc_chars(1), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[1]); 
           	else if(f_val== 0)
            	printf(center_x(get_misc_chars(2), OLED_FONT_SMALL_WIDTH),48,OLED_FONT_SMALL,OLED_WHITE,Misc[2]); 
    	} 
	    set_val(f_press, 0)
   } 
   return f_val;
}
function DisplayQuickToggles() { 
	ScreenSaver = FALSE;
	cls_oled(OLED_BLACK); 
	rect_oled(0, 0, OLED_WIDTH, OLED_HEIGHT, OLED_BLACK, OLED_WHITE);
    line_oled(0, 38, OLED_WIDTH - 1, 38, 1, OLED_WHITE);
    line_oled(0, 20, OLED_WIDTH - 1, 20, 1, OLED_WHITE);
	printf(center_x(get_modName_chars(ModORVal[0]), OLED_FONT_SMALL_WIDTH),7,OLED_FONT_SMALL,OLED_WHITE,ModNames[ModORVal[0]]); 
	        
    if(ProfileIdx == 0) 
        printf(center_x(get_misc_chars(5), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[5]);
    else if(ProfileIdx == 1) 
        printf(center_x(get_misc_chars(6), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[6]);
    else if(WarzoneLootProfile) 
        printf(center_x(get_misc_chars(26), OLED_FONT_SMALL_WIDTH),25,OLED_FONT_SMALL,OLED_WHITE,Misc[26]);
     
} 
function get_modName_chars(f_idx){
	if (ModNames[f_idx + 1] != -1) 
		return ModNames[f_idx + 1] - ModNames[f_idx] - 1;
	return sizeof(ModNames) - ModNames[f_idx];		
}
function get_valName_chars(f_idx){
	if (ValNames[f_idx + 1] != -1) 
		return ValNames[f_idx + 1] - ValNames[f_idx] - 1;
	return sizeof(ValNames) - ValNames[f_idx];		
}
function get_misc_chars(f_idx){
	if (Misc[f_idx + 1] != -1) 
		return Misc[f_idx + 1] - Misc[f_idx] - 1;
	return sizeof(Misc) - Misc[f_idx];		
}
function get_ControllerBtn_chars(f_idx){
	if (ControllerLayouts[f_idx + 1] != -1) 
		return ControllerLayouts[f_idx + 1] - ControllerLayouts[f_idx] - 1;
	return sizeof(ControllerLayouts) - ControllerLayouts[f_idx];		
}
function center_x(f_chars,f_font) {

    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
} 
function number_to_string(value,f_digits){

    i = 1;  c_val = 10000;
    
	if(value < 0) 
	{          
         putc_oled(i,45);    
         i += 1;
         value = abs(value);
	} 
	for(c = 5; c >= 1; c--) 
	{
	    if(f_digits >= c) 
	    {
            putc_oled(i,ASCII_NUM[value / c_val]);
            value = value % c_val;
            i +=  1; 
            if(c == 4) 
            {
                putc_oled(i,44);   
                i += 1;
            }
        }
        c_val /= 10;
    }   
    puts_oled(center_x(i - 1,OLED_FONT_LARGE_WIDTH),39,OLED_FONT_LARGE,i - 1,OLED_WHITE); 
}  
function find_digits(f_num) {
    f_num = abs(f_num);
    if(f_num / 10000 > 0) return 5;
    if(f_num /  1000 > 0) return 4;
    if(f_num /   100 > 0) return 3;
    if(f_num /    10 > 0) return 2;
                          return 1;
}
// Constant bytes - Convert numbers array - ASCII_NUM[column number]
	const uint8 ASCII_NUM[] = 
//	  0  1  2  3  4  5  6  7  8  9  (column numbers)
  	{48,49,50,51,52,53,54,55,56,57};
// Variables for function number_to_string()\\ 
	int i;
	int c,c_val;
	// Led's For Zen Eyes \\
data(
//  0 Blue    1 Pink   2 SkyBlue  3 Green         
    1,0,0,0,  0,0,0,1,  1,0,1,0,  0,0,1,0,
//  4 Yellow  5 White   6 Red      7 OFF         
    0,1,1,0,  1,1,1,0,  0,1,0,0,  0,0,0,0 );
const uint8 Layouts[][] = {            
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping 	
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6 
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17 
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT }}; // BUMPER PING TACTICAL = 19		
function Buttons(Type) {
	
	Fire     = Layouts[Type][0];
	Ads      = Layouts[Type][1];
	Lethal   = Layouts[Type][2];
	Tactical = Layouts[Type][3];
	Jump     = Layouts[Type][4];
	Crouch   = Layouts[Type][5];
	Melee    = Layouts[Type][6];
	Sprint   = Layouts[Type][7];
	Reload   = Layouts[Type][8];
	Swap     = Layouts[Type][9];
	Ping     = Layouts[Type][10];
	
} 
function BlockButtons() { 
set_val(Jump,0);        set_val(Crouch,0);    set_val(Tactical,0);  set_val(Lethal,0);   set_val(Reload,0);       set_val(Ping,0);      set_val(Swap,0);  
set_val(PS4_OPTIONS,0); set_val(PS4_SHARE,0); set_val(PS4_RIGHT,0); set_val(PS4_LEFT,0); set_val(PS4_TRIANGLE,0); set_val(PS4_CROSS,0); set_val(PS4_CIRCLE,0); 
set_val(PS4_SQUARE,0);  set_val(PS4_UP,0);    set_val(PS4_DOWN,0); 
} 
function pack_usigned(int pvar, int ret, int position, int number_of_bits){ 
	for(i = position; i< (number_of_bits + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret<<position);
return pvar;
}
function unpack_usigned(int pvar, int position, int number_of_bits){
	mask = 0;
	ret = 0;
	for(i = 0; i< number_of_bits ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask <<position
	ret = (pvar & mask) >> position
return ret;
}
function pack_int8_to_int16(int var1, int var2){

	ret = 0;
	if(var1 < 0)
  	{
   		var1 = abs(var1) | 0x80;
  	}
	ret = (abs(var2)<<8)|var1;
	
	if(var2<0)
		ret *= -1;
return ret;
}
function unpack_int16_to_int8(int pvar, int var){
	ret = 0;
	if(var == 0)
	{	 
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = ( abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar>>8;

	    if(pvar<0)
	    {
			ret += 1;
		}
	}
	return ret;
}
function Load() {

	pval_data = get_pvar(SPVAR_1, 1, 32767, 0);
	ToggleTaylorAR     [0]      = unpack_usigned(pval_data, 0, 1);
	ToggleTaylorAR     [1]      = unpack_usigned(pval_data, 1, 1);
	ToggleTaylorAR     [2]      = unpack_usigned(pval_data, 2, 1);
	ToggleBattsAssist  [0]      = unpack_usigned(pval_data, 3, 1);
	ToggleBattsAssist  [1]      = unpack_usigned(pval_data, 4, 1);
	ToggleBattsAssist  [2]      = unpack_usigned(pval_data, 5, 1);
	ToggleRapidFire    [0]      = unpack_usigned(pval_data, 6, 1);
	ToggleRapidFire    [1]      = unpack_usigned(pval_data, 7, 1);
	ToggleRapidFire    [2]      = unpack_usigned(pval_data, 8, 1);
	ToggleAkimboRf     [0]      = unpack_usigned(pval_data, 9, 1);
	ToggleAkimboRf     [1]      = unpack_usigned(pval_data,10, 1);
	ToggleAkimboRf     [2]      = unpack_usigned(pval_data,11, 1);

    pval_data = get_pvar(SPVAR_2, 1, 32767, 0);
    ToggleQuickScope   [0]      = unpack_usigned(pval_data, 0, 1);
    ToggleQuickScope   [1]      = unpack_usigned(pval_data, 1, 1);
    ToggleQuickScope   [2]      = unpack_usigned(pval_data, 2, 1);
    ToggleHoldBreath   [0]      = unpack_usigned(pval_data, 3, 1);
    ToggleHoldBreath   [1]      = unpack_usigned(pval_data, 4, 1);
    ToggleHoldBreath   [2]      = unpack_usigned(pval_data, 5, 1);
    ToggleCancelPlates          = unpack_usigned(pval_data, 6, 1); 
    ToggleEnemyPing             = unpack_usigned(pval_data, 7, 1);
   
    pval_data = get_pvar(SPVAR_3, 1, 32767, 0);
    ToggleRumbleBoost[0]      = unpack_usigned(pval_data, 0, 1);
    ToggleRumbleBoost[1]      = unpack_usigned(pval_data, 1, 1);
    ToggleRumbleBoost[2]      = unpack_usigned(pval_data, 2, 1);
    ToggleBattsBoost[0]       = unpack_usigned(pval_data, 3, 1);
    ToggleBattsBoost[1]       = unpack_usigned(pval_data, 4, 1);
    ToggleBattsBoost[2]       = unpack_usigned(pval_data, 5, 1);
    ToggleFastMelee           = unpack_usigned(pval_data, 6, 1);
    ToggleBlockRumble         = unpack_usigned(pval_data, 7, 1);
    ToggleHairTriggers        = unpack_usigned(pval_data, 8, 1);
    
    
    
    pval_data = get_pvar(SPVAR_4, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleTaylorAssist [0]     = unpack_int16_to_int8(pval_data, 0);
	ToggleTaylorAssist [1]     = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_5, 1, 32767, pack_int8_to_int16(0, 0));
	ToggleTaylorAssist [2]     = unpack_int16_to_int8(pval_data, 0);
	ToggleCancelSlide         = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_6, -32767, 32767, pack_int8_to_int16(0, 0));
	TaylorStrength  [0]       = unpack_int16_to_int8(pval_data, 0);
	TaylorStrength  [1]       = unpack_int16_to_int8(pval_data, 1);
	
	TaylorStrength  [2]       = get_pvar(SPVAR_7,-99,99,0);
	
    pval_data = get_pvar(SPVAR_8, 1, 32767, pack_int8_to_int16(15,15));
	TaylorRadius    [1]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadius    [2]       = unpack_int16_to_int8(pval_data, 1);
	
    pval_data = get_pvar(SPVAR_9, 1, 32767, pack_int8_to_int16(15,15));
	TaylorAngle     [0]       = unpack_int16_to_int8(pval_data, 0);
	TaylorAngle     [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_10, 1, 32767, pack_int8_to_int16(15,5));
	TaylorAngle     [2]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadiusMin [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_11, 1, 32767, pack_int8_to_int16(15,15));
	AimAssistSize   [0]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistSize   [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_12, 1, 32767, pack_int8_to_int16(15,20));
	AimAssistSize   [2]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistTime   [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_13, 1, 32767, pack_int8_to_int16(20,20));
	AimAssistTime   [1]       = unpack_int16_to_int8(pval_data, 0);
	AimAssistTime   [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_14, 1, 32767, pack_int8_to_int16(5,5));
	TaylorRadiusMin [1]       = unpack_int16_to_int8(pval_data, 0);
	TaylorRadiusMin [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_15, 1, 32767, pack_int8_to_int16(5,5));
	PolarBoost      [0]       = unpack_int16_to_int8(pval_data, 0);
	PolarBoost      [1]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_16, 1, 32767, pack_int8_to_int16(15,1));
	PolarBoost      [2]       = unpack_int16_to_int8(pval_data, 0);
	RateOfFire      [0]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_17, 1, 32767, pack_int8_to_int16(1,1));
	RateOfFire        [1]       = unpack_int16_to_int8(pval_data, 0);
	RateOfFire        [2]       = unpack_int16_to_int8(pval_data, 1);
	
	pval_data = get_pvar(SPVAR_18, 1, 32767, pack_int8_to_int16(1,1));
	AkimboRoF         [0]       = unpack_int16_to_int8(pval_data, 0);
	AkimboRoF         [1]       = unpack_int16_to_int8(pval_data, 1);

	Buttons                     = get_pvar(SPVAR_19, 0,  21, 0); 
	
	pval_data = get_pvar(SPVAR_20, 1, 32767, pack_int8_to_int16(10,10));
	StickyBoost [0]      = unpack_int16_to_int8(pval_data, 0);
	StickyBoost [1]      = unpack_int16_to_int8(pval_data, 1);
	StickyBoost [2]      = get_pvar(SPVAR_21,   1,    40,   10); 
	
   	pval_data = get_pvar(SPVAR_22, -32767, 32767, pack_int8_to_int16(0,0));
	HorizStrength [0]      = unpack_int16_to_int8(pval_data, 0);
	HorizStrength [1]      = unpack_int16_to_int8(pval_data, 1);
	
    HorizStrength [2]      = get_pvar(SPVAR_23, -99,  99, 0); 
    AkimboRoF     [2]      = get_pvar(SPVAR_24,   1,  25, 1);  
    QuickScopeDelay        = get_pvar(SPVAR_25,  50, 600, 350);
    TaylorRadius    [0]    = get_pvar(SPVAR_26,   1,  99, 15); 
    
    pval_data = get_pvar(SPVAR_27, 1, 32767, pack_int8_to_int16(5,5));
	TaylorAngleBoost [0]   = unpack_int16_to_int8(pval_data, 0);
    TaylorAngleBoost [1]   = unpack_int16_to_int8(pval_data, 1);
    TaylorAngleBoost [2]   = get_pvar(SPVAR_28, 1, 99, 5); 
    
    	
}
function Save(){ 

 
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleTaylorAR         [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAssist      [0]   ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAssist      [1]   ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsAssist      [2]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [0]   ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [1]  , 7, 1);
  pval_data = pack_usigned(pval_data, ToggleRapidFire        [2]  , 8, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [0]   ,9, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [1]  ,10, 1);
  pval_data = pack_usigned(pval_data, ToggleAkimboRf         [2]  ,11, 1);
  set_pvar(SPVAR_1,pval_data);
  
  pval_data = pack_usigned(pval_data, ToggleQuickScope       [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleQuickScope       [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleQuickScope       [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleHoldBreath       [0]   ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleHoldBreath       [1]   ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleHoldBreath       [2]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleCancelPlates          , 6, 1);
  pval_data = pack_usigned(pval_data, ToggleEnemyPing             , 7, 1);
  set_pvar(SPVAR_2,pval_data);
  
  pval_data = pack_usigned(pval_data, ToggleRumbleBoost      [0]   ,0, 1);
  pval_data = pack_usigned(pval_data, ToggleRumbleBoost      [1]   ,1, 1);
  pval_data = pack_usigned(pval_data, ToggleRumbleBoost      [2]   ,2, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsBoost       [0]   ,3, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsBoost       [1]   ,4, 1);
  pval_data = pack_usigned(pval_data, ToggleBattsBoost       [2]   ,5, 1);
  pval_data = pack_usigned(pval_data, ToggleFastMelee              ,6, 1);
  pval_data = pack_usigned(pval_data, ToggleBlockRumble            ,7, 1);
  pval_data = pack_usigned(pval_data, ToggleHairTriggers           ,8, 1);
  
  set_pvar(SPVAR_3,pval_data);
                                                                                                                                    
  pval_data = pack_int8_to_int16(ToggleTaylorAssist[0],ToggleTaylorAssist[1]);     
  set_pvar(SPVAR_4,pval_data);
                                                          
  pval_data = pack_int8_to_int16(ToggleTaylorAssist[2],ToggleCancelSlide);     
  set_pvar(SPVAR_5,pval_data);
                                                        
  pval_data = pack_int8_to_int16(TaylorStrength[0],TaylorStrength[1]);     
  set_pvar(SPVAR_6,pval_data);  
                                                        
  set_pvar(SPVAR_7,TaylorStrength[0]);
  
  pval_data = pack_int8_to_int16(TaylorRadius[1],TaylorRadius[2]);     
  set_pvar(SPVAR_8,pval_data);
                                                       
  pval_data = pack_int8_to_int16(TaylorAngle[0],TaylorAngle[1]);     
  set_pvar(SPVAR_9,pval_data);
                                                      
  pval_data = pack_int8_to_int16(TaylorAngle[2],TaylorRadiusMin[0]);     
  set_pvar(SPVAR_10,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistSize[0],AimAssistSize[1]);     
  set_pvar(SPVAR_11,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistSize[2],AimAssistTime[0]);     
  set_pvar(SPVAR_12,pval_data);
  
  pval_data = pack_int8_to_int16(AimAssistTime[1],AimAssistTime[2]);     
  set_pvar(SPVAR_13,pval_data);
  
  pval_data = pack_int8_to_int16(TaylorRadiusMin[1],TaylorRadiusMin[2]);     
  set_pvar(SPVAR_14,pval_data);
  
  pval_data = pack_int8_to_int16(PolarBoost[0],PolarBoost[1]);     
  set_pvar(SPVAR_15,pval_data);
  
  pval_data = pack_int8_to_int16(PolarBoost[2],RateOfFire[0]);     
  set_pvar(SPVAR_16,pval_data);
  
  pval_data = pack_int8_to_int16(RateOfFire[1],RateOfFire[2]);     
  set_pvar(SPVAR_17,pval_data);
  
  pval_data = pack_int8_to_int16(AkimboRoF[0],AkimboRoF[1]);     
  set_pvar(SPVAR_18,pval_data);
 
  set_pvar(SPVAR_19,Buttons);
  pval_data = pack_int8_to_int16(StickyBoost[0],StickyBoost[1]);    
  set_pvar(SPVAR_20,pval_data); 
  
  set_pvar(SPVAR_21,StickyBoost[2] ); 

  pval_data = pack_int8_to_int16(HorizStrength[0],HorizStrength[1]);    
  set_pvar(SPVAR_22,pval_data);
  
  set_pvar(SPVAR_23,HorizStrength[2]);
  set_pvar(SPVAR_24,AkimboRoF[2]);
  set_pvar(SPVAR_25,QuickScopeDelay);
  set_pvar(SPVAR_26,TaylorRadius[0]);
  
  pval_data = pack_int8_to_int16(TaylorAngleBoost[0],TaylorAngleBoost[1]);    
  set_pvar(SPVAR_27,pval_data);
  
  set_pvar(SPVAR_28,TaylorAngleBoost[2]); 
  
 
} 
int mask;
int ret;
int pval_data;







