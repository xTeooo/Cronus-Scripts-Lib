/*
 /$$   /$$                 /$$                              
| $$  | $$                | $$                              
| $$  | $$ /$$   /$$  /$$$$$$$  /$$$$$$   /$$$$$$   /$$$$$$$
| $$$$$$$$| $$  | $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$_____/
| $$__  $$| $$  | $$| $$  | $$| $$  \__/| $$  \ $$|  $$$$$$ 
| $$  | $$| $$  | $$| $$  | $$| $$      | $$  | $$ \____  $$
| $$  | $$|  $$$$$$$|  $$$$$$$| $$      |  $$$$$$/ /$$$$$$$/
|__/  |__/ \____  $$ \_______/|__/       \______/ |_______/ 
           /$$  | $$                                        
          |  $$$$$$/                                        
           \______/      
*/

// Official Script of Dhruvski from A.I.M Scripts 

//  Exponential only script 

// contact me on discord username: dhruvski#0246

// To find more quality scripts like this join the discord server below â†“â†“â†“â†“

// https://discord.gg/axpQ5vgtQH

// ðŸ…¼ðŸ…°ðŸ†ƒðŸ…²ðŸ…· ðŸ…¸ðŸ…½ ðŸ…¶ðŸ…°ðŸ…¼ðŸ…´ ðŸ…±ðŸ†„ðŸ†ƒðŸ†ƒðŸ…¾ðŸ…½ðŸ†‚
// ðŸ…²ðŸ…¾ðŸ…¼ðŸ…±ðŸ…°ðŸ†ƒ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´

define ADS = PS4_L2; //in-game ADS BUTTON
define FIRE = PS4_R2; //in-game FIRE BUTTON
define NEXT_WEAPON = PS4_R1; //in-game NEXT_WEAPON BUTTON
define PREV_WEAPON = PS4_L1; //in-game PREV_WEAPON BUTTON
define PICKAXE = PS4_RIGHT; //in-game PICKAXE BUTTON
define JUMP = PS4_CROSS; //in-game JUMP BUTTON
define CROUCH = PS4_R3; //in-game CROUCH BUTTON
define INTERACT = PS4_SQUARE; //in-game INTERACT BUTTON
define MAPVIEW_B = PS4_DOWN; //in-game MAP BUTTON

// ðŸ…±ðŸ†„ðŸ…¸ðŸ…»ðŸ…³ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´
define BUILD = PS4_TRIANGLE; //in-game BUILD BUTTON
define STAIRS = PS4_L2; //in-game STAIRS BUTTON
define WALL = PS4_R2; //in-game WALL BUTTON
define FLOOR = PS4_R1; //in-game FLOOR BUTTON
define ROOF = PS4_L1; //in-game ROOF BUTTON

// ðŸ…´ðŸ…³ðŸ…¸ðŸ†ƒ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´
define EDIT = PS4_CIRCLE; //in-game EDIT BUTTON
define SELECT = PS4_R2; //in-game SELECT BUTTON
define CONFIRM = PS4_R1; //in-game CONFIRM BUTTON
define RESET = PS4_L2; //in-game RESET BUTTON
define On = TRUE;
define Off = FALSE;

// DON"T TOUCH AT ALL
define UP = PS4_UP;
define DOWN = PS4_DOWN;
define LEFT = PS4_LEFT;
define RIGHT = PS4_RIGHT;

define OPTIONS = PS4_OPTIONS;
define TOUCHPAD = PS4_TOUCH;
define SHARE = PS4_SHARE;

define AIM_X = PS4_RX;
define AIM_Y = PS4_RY;
define LX = PS4_LX;
define LY = PS4_LY;
define PS = POLAR_RS;

/*
           _____ __  __             _____ _____ _____  _____ _______    __  ________   _______   ____   __  
     /\   |_   _|  \/  |     /\    / ____/ ____|_   _|/ ____|__   __|  / / |  ____\ \ / /  __ \ / __ \  \ \ 
    /  \    | | | \  / |    /  \  | (___| (___   | | | (___    | |    | |  | |__   \ V /| |__) | |  | |  | |
   / /\ \   | | | |\/| |   / /\ \  \___ \\___ \  | |  \___ \   | |    | |  |  __|   > < |  ___/| |  | |  | |
  / ____ \ _| |_| |  | |  / ____ \ ____) |___) |_| |_ ____) |  | |    | |  | |____ / . \| |    | |__| |  | |
 /_/    \_\_____|_|  |_| /_/    \_\_____/_____/|_____|_____/   |_|    | |  |______/_/ \_\_|     \____/   | |
                                                                       \_\                              /_/
                                                                       
*/
// Batts STICKY AA //
define BattsStickyAA = TRUE;
define BattsAAHip = TRUE;
define BattStickyPower = 9; // ingame ads or deadzone
define BattStickyWait = 9; // ingame ads or deadzone

// IPWNU4KICKS AA //
int DynamicPolarAim = TRUE; // expo only
define PolarProgHip = TRUE; // expo only
int DynamicRadRX = 6; //Right Stick Deadzone
int DynamicRadRY = 12; // Right Stick Deadzone
int DynamicAngle = 30;
int PolarProgRel = 20;

// DhruvMultiACE
int DHruVskiACE = TRUE;
define DhRuvsKii = 1; // 0 = USE_LINEAR_SHAPE --> scaning x axis according to mvt direction angle

// Dhruvski Drago Expo AA
int AimAssist_EXPO = TRUE;
int AimAssist_Strength = 35; // Power/Strength of Aim Assist ( i think higher more sticky/shake )


// AIM ASSIST EXPLOIT EXPONENTIAL
int Aim_Exploit_Expo  = TRUE;// [(On) or (Off)] = {Aim Assist Exponential Toggle On/Off By Default}
int Strength_Expo     = 35; // AIM ASSIST STRENGTH EXPONENTIAL
int Wait_Expo         = 9;  // AIM ASSIST WAIT EXPONNTIAL


//REWONDZ[PRO] Values/Times
int AimAssistExploit = TRUE; // expo only          
int AimAssistExploit2 = TRUE; // expo only
int TargetTrackerExploit = TRUE; // expo only
int DAimAssist_Strength = 35; //increase more aim assist
int tt_aim_speed = 95; // keep as is

// Triple Sticky
define Triple_Sticky    =   TRUE;
//--ADS Value
	int ADS_Size            =  	  16; // rightstick deadzone 
	int ADS_Wait_Value      =     40;

//--ADS + FIRE Value
	int ADS_FIRE_Size       =     22; // rightstick deadzone 
	int ADS_FIRE_Wait_Value =     30;

//--HIPFIRE Value
	int HIPFIRE_Size        =     26;
	int HIPFIRE_Wait_Value  =     20;

// NOT's Sticky AIM
define sticky_aim_assist = TRUE;
define _v                =   10; // right stick deadzone

// AIM Correction
define aim_sens_corrections = 1;   
int in_game_menu_sens       = 12;  // PICK 3 HIGHER THEN YOUR REGULAR SENSITIVITY! IF IT FEELS WEIRD DESCREASE BY 1 !!!!

// RAPID FIRE (ONLY CAN HAVE 1 ON)
// OPTION 1:
int RapidFire       =  Off;
int RapidFireHold = 30;
int RapidFireWait = 30;
define RapidFireHip = Off;

// OPTION 2:
int SmartRapidFire  = On;
int SmartFireHold = 40;
int SmartFireWait = 350;
define SmartFireHip = On;

// Athena's AntiRecoil
int AntiRecoil = 23; // reccomended values 23-26


//HEAD SHOT ASSIST 2.0
int HEADSHOT = TRUE;
define HeadShotStrength = 10;  // right stickdeadzone
define HeadShotHoldTime = 1300;

// NIKO AIM // (ONLY CAN 1 ON BATTS OR THIS)
define SS_Nikolai_Aim = TRUE;
define AimAssistWaitTime = 10; // rightstick deadzone
define AimAssistStrength = 10; // rightstick deadzone


// Checkers AA
int CheckersAA			=  11; // +1 of ingame deadzone FOR EXAMPLE my ingame deadzone is 10 so 10+1=11 so put 11 here
int NegativeCheckersAA	= -11; // +1 of ingame deadzone FOR EXAMPLE my ingame deadzone is 10 so 10+1=11 so put 11 here
int CheckersAADelay					=  17; 
int CheckersAARelease					=  12;

// NightmareXVII's AA
int AALinearExpo			=  10; // right stick deadzone
int NegativeAALinearExpo	= -10; // right stick deadzone
int Delay					=  8; 
int Release					=  11;	// -> This should always be +1 more than Aim Assist values

// Legacy Aim Assist
int LegacyAssist = TRUE; // Legacy Aim Assist
int LegacyAxisY = 10; // Power Y Axis Legacy Aim Assist (DEADZONE FOR RIGHT STICK)
int LegacyAxisX = 10; // Power X Axis Legacy Aim Assist (DEADZONE FOR RIGHT STICK)
int LegacyTime = 8; // Time Legacy Aim Assist 
int LegacyRelease = 18; // Release Limit Legacy Aim Assist 
int LegacyHip = On; // Hip Fire The Reducer Aim Assist 	[(On) or (Off)] = {Operates on [Ads Alone (Off)] Or [Ads or Fire Alone (On)]}


/*
 _______ _________          _______  _______    _______  _______  ______   _______ 
(  ___  )\__   __/|\     /|(  ____ \(  ____ )  (       )(  ___  )(  __  \ (  ____ \
| (   ) |   ) (   | )   ( || (    \/| (    )|  | () () || (   ) || (  \  )| (    \/
| |   | |   | |   | (___) || (__    | (____)|  | || || || |   | || |   ) || (_____ 
| |   | |   | |   |  ___  ||  __)   |     __)  | |(_)| || |   | || |   | |(_____  )
| |   | |   | |   | (   ) || (      | (\ (     | |   | || |   | || |   ) |      ) |
| (___) |   | |   | )   ( || (____/\| ) \ \__  | )   ( || (___) || (__/  )/\____) |
(_______)   )_(   |/     \|(_______/|/   \__/  |/     \|(_______)(______/ \_______)
                                                                                   
*/
//Deadzone optimizer
int DEADZONE = TRUE;
define DZ_L = 10; // put in your left stick deadzone
define invDZ_L = -10; // put in your left stick deadzone

define DZ_R = 10; // put in your right stick deadzone
define invDZ_R = -10; // put in your right stick deadzone

// FIRE ASSIST EXPLOIT
int Assist_Fire_Exploit = FALSE; // [(On) or (Off)] = {Fire Assist Exploit Toggle On/Off By Default}
int Fire_Assist_Strength = 120; // FIRE ASSIST STRENGTH

// AIM ABUSES ADAPTIVE
int AdaptiveAbuse  = On; // AIM ABUSES ADAPTATIVE
int AdaptiveHold   = 80; // HOLD ABUSES
int AdaptiveWait   = 20; // WAIT ABUSES
int AdaptiAAHip    = On; // [(On) or (Off)] = Operate on Fire Only [If FALSE It Will Only Run On ADS & FIRE]

//DhruvTrackerV3
define DhruvTrackerV3 = TRUE;
int Dhruvski7 = FALSE;
int CRYptoACE8 = FALSE;
int CheckersNoTChess4 = FALSE;
int SEWEYY27 = FALSE;
int DHRUVBOT5 = 10; // right stick deadzone
int LIGMA28 = 10;   // right stick deadzone
int LIGMA18 = 10;   // right stick deadzone
int LIGMA20 = 13;
int LIGMA22 = 19;
int LIGMA19 = -10;  // right stick deadzone
int LIGMA21 = -13;
int LIGMA6 = 7;
int MONKEY23 = 21;


// 100% ACCURACY EXPLOIT (1 BUTTON)
int Accuracy_Exploit   = On;  // [(On) or (Off)] = {Accuracy 100% 1 Button Toggle On/Off By Default} [!!define StopAC = PS4_ ; //YOU MUST DEFINE THE BUTTON WHICH YOU WILL HAVE TO HOLD SO YOU CAN HEAL YOURSELF.]
int Spam_Accuracy      = 100; // VALUE OF HOW LONG WE WANT YOU TO HOLD THE AIM BUTTON WHEN WE SHOOT.
int HoldButtonStop     = PS4_R3; // YOU MUST DEFINE THE BUTTON ON WHICH YOU WANT TO HOLD SO YOU CAN HEAL YOURSELF

// Pickup Marco //
int PickUpMacro = FALSE;

// Dhruvski Instant Triggers // (Reccomended for Comp Players/Non-Sniper Players) only can use one trigger mod!!!
int INSTANT_TRIGGERS = FALSE;

// noctwrnyA's HAIR TRIGGERS //
//USE THIS IF YOU USE SNIPERS//
int HAIR_TRIGGERS = TRUE;

/*
                                                                                     
 _____ ____  _____ _____  _ _____ _____ _____ __    ____     _____ _____ ____  _____ 
|   __|    \|     |_   _|/ | __  |  |  |     |  |  |    \   |     |     |    \|   __|
|   __|  |  |-   -| | | / /| __ -|  |  |-   -|  |__|  |  |  | | | |  |  |  |  |__   |
|_____|____/|_____| |_||_/ |_____|_____|_____|_____|____/   |_|_|_|_____|____/|_____|
                                                                                     

*/

// Instant Edit + Reset 
define InstaEditReset = TRUE; // [ON / OFF] Normal Instant Edit/Reset
define EditHold = FALSE; // [ON / OFF] SET On WHEN USING EDIT HOLD TIME TO EDIT ( MATCH TO IN GAME SETUP ) [Off = INSTANT PRESS]
define EditHoldTime = 100; // Time If Using Hold to Edit In game [Setting To Be Matched To In Game Time]

// Fast Reset (One Button)
define InstaFastReset = TRUE; // Fast Reset [ON / OFF]
define FastReset = PS4_L2; // FAST RESET BUTTON 

// Quick Edit Assist
define QuickEditAssist = FALSE; // [ON / OFF] Edit Assist
define EditDelay = 20; // Edit Assist Hold Delay On Select
define EditAssist = PS4_RIGHT; // EDIT ASSIST + FAST RESET EDIT BUTTON (Edit In Game [ NO HOLD TIME!!! ])

//Build Tracker
int BuildTracker = TRUE;
int BuildSyncTime = 4000;

/*
    )            )     (        *       ) (     (     
 ( /(   *   ) ( /(     )\ )   (  `   ( /( )\ )  )\ )  
 )\())` )  /( )\())(  (()/(   )\))(  )\()|()/( (()/(  
((_)\  ( )(_)|(_)\ )\  /(_)) ((_)()\((_)\ /(_)) /(_)) 
  ((_)(_(_()) _((_|(_)(_))   (_()((_) ((_|_))_ (_))   
 / _ \|_   _|| || | __| _ \  |  \/  |/ _ \|   \/ __|  
| (_) | | |  | __ | _||   /  | |\/| | (_) | |) \__ \  
 \___/  |_|  |_||_|___|_|_\  |_|  |_|\___/|___/|___/  
                                                      
*/

//Button Delay Remover
int InputLagFix = TRUE:

//Block Rumble
int BlockRumble = TRUE;

// Playstation On PC/Xbox
define PlayStationOnXbox = FALSE; // [ON / OFF] DS4/5 On PC/Xbox [Touchpad Button Fix]

// Hair Triggers
define HairTriggers = TRUE; // Instant Triggers [100%]

// ISHOWSPEED VARIABLES !!!!!!! DONT TOUCH AT ALL OF YOUR GONNA GET BARKED ON
// VARIABLES // (DONT TOUCH AT ALL!!!!!)
int PX_Out, PY_Out, PAngle_Out, PolAngle, PX[2], PY[2], SnapShot_hold, SnapShot_rest;
int StandardDropShot;
int DropShot;
int Anti_Recoil;
int Droppy_Shotty;
int DropShotSpeed;
int Head;
int Axis;
int WaitStrength, AimStrength;
int a, b; //c;
int c;
define w = 80;
int Aim_Val, Wait_Val;
int X_Magnitude;
int Y_Magnitude;
int Sinus;
int Cosinus;
int RX_Polar;
int RY_Polar;
int _Angle;
int _Polar_Process_Done;
int _Increment;
int X_JOY_OFFSET = 1;
int Y_JOY_OFFSET = 1;
int MAX_MAGNITUDE = 10;
int Radius__;
int Angle_Increment;
int PolarRadius;
int PolarAngle;
int PolarRBoost;
int PolarABoost;
int Edit1, Edit2, EditT, BuildTrack, BuildCount;
int EditSensitivity = Off;
int Shunt;
int AxisT, AAT;
int _RX, _RY;
int EditAst, EDIThold;
int ads_grenade_sens, ads_fire_sens, Sens;
int AdaptAbuse;
main {
if (InputLagFix) {
_NoInputLag();
}
  _DEADZONE();
  vm_tctrl(-9);

  if (PlayStationOnXbox && get_console() == PIO_XB360 && get_controller() == PIO_PS4) {

    swap(PS4_TOUCH, PS4_SHARE);
  }
  if (HAIR_TRIGGERS) {
    //noctwrnyA's HAIR TRIGGERS
    //LEFT TRIGGER
    if (abs(get_ival(ADS)) > 10) {
      set_val(ADS, 40);
    }
    if (abs(get_ival(ADS)) > 60) {
      set_val(ADS, 100);
    }
    //RIGHT TRIGGER
    if (abs(get_ival(FIRE)) > 10) {
      set_val(FIRE, 40);
    }
    if (abs(get_ival(FIRE)) > 60) {
      set_val(FIRE, 100);
    }
  }
  if (PickUpMacro && get_val(INTERACT)) {
    combo_run(PickupSpam);
  }

  if (EditAssist) {

    if (get_ival(EDIT) && get_ptime(EDIT) > 10) {

      EditAssist();
      EditAst = On;
    }

    if (event_release(EDIT)) {

      EDIThold = 0;
      EditAst = Off;
    }

  }
 if (InstaFastReset && !get_ival(ADS) && event_press(FastReset)) { 
       
       if (EditSensitivity) {    
/////////////////////////////////
        }  
        
        	Shunt = FastReset;
        	combo_run(FastReset);
    }
    if (InstaEditReset) {
        if (EditHold && get_ival(EDIT) && get_ptime(EDIT) > EditHoldTime || !EditHold && event_press(EDIT)) {
                Edit1 = On;
                Edit2 = On;
                BuildTrack = On;
        
        }

        if (Edit2) {
            if (event_release(SELECT)) {  
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
    		}

        }
    }
     if (Edit1 || Edit2) {

            if (event_press(RESET)) {  
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off; 
            }

                if (event_press(PICKAXE) || event_press(BUILD) || event_press(ADS)) {
                    Edit1 = Off;
                    Edit2 = Off;
                    BuildTrack = Off;
                }
    }
  
	if (BuildTracker) {
        
        if (event_press(BUILD)) {
            BuildTrack = !BuildTrack;
            
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(PICKAXE) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(ROOF) || get_ival(FLOOR) || get_ival(STAIRS) || get_ival(WALL)) 
                    BuildCount = Off;
        }
    }
    if(!BuildTracker) {
    if(aim_sens_corrections) {
    ads_grenade_sens=100-(in_game_menu_sens); ads_fire_sens=96-(in_game_menu_sens); 
    if (get_val (PS4_L2)) {
    if(get_val(PS4_R2) && get_val(PS4_L2)) {
    Sens = ads_fire_sens; }
    if(!get_val(PS4_R2) && !get_val(PS4_L2) || get_val (PS4_R2) &&!get_val(PS4_L2)) {
    Sens = 100; //--sens and hip fire sens
    }   
    if(!get_val(PS4_R2) && get_val(PS4_L2)) {
    Sens = ads_grenade_sens; }
    if(Sens > 100) Sens = 100;  
    sensitivity(PS4_RX, NOT_USE, Sens);
    sensitivity(PS4_RY, NOT_USE, Sens); }
    }
    if (sticky_aim_assist) {
   if(get_val(PS4_L2)) combo_run(STICKY_AIM);
        else combo_stop(STICKY_AIM);}
    combo_run(AS);
   if(Triple_Sticky) {
		if(get_ival(ADS) && !get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = ADS_Size;
		Wait_Val = ADS_Wait_Value;
	} else if(get_ival(ADS) && get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = ADS_FIRE_Size;
		Wait_Val = ADS_FIRE_Wait_Value;
	} else if(!get_ival(ADS) && get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = HIPFIRE_Size;
		Wait_Val = HIPFIRE_Wait_Value;
	} else {
	combo_stop(Sticky_AA);
		}
	}
	if (AdaptiveAbuse) {

         if ((get_ival(ADS) >= 90) || (get_ival(FIRE) && AdaptiAAHip)) {
                   
             AdaptAbuse =  AdaptiveHold * 5 - 
             isqrt((abs(get_ival(XB1_RX))) * (abs(get_ival(XB1_RX))) + (abs(get_ival(XB1_RY))) * (abs(get_ival(XB1_RY))) * 5);
             combo_run(AdaptiveAbuse);}
                    
               else {
                       
                combo_stop(AdaptiveAbuse);
    }
}
    if (HEADSHOT) {

      _RY = inv(HeadShotStrength);

      if (get_ival(FIRE) && get_ptime(FIRE) < HeadShotHoldTime) {

        Set_Val(AIM_Y, _RY);
      }
    }
    if ((RapidFire && RapidFireHip && get_ival(ADS) && get_ival(FIRE)) || (RapidFire && !RapidFireHip && get_ival(FIRE))) {
            combo_run(RapidFire);
        }    
            else {
                combo_stop(RapidFire);
            }

        if ((SmartRapidFire && SmartFireHip && get_ival(ADS) && get_ival(FIRE)) || (SmartRapidFire && !SmartFireHip && get_ival(FIRE))) {
            combo_run(SmartFire);
        }    
            else {
                combo_stop(SmartFire);
            }
            if (Aim_Exploit_Expo) {

        if (get_ival(ADS)) {

            combo_run(Aim_Expo);

        } else {

            combo_stop(Aim_Expo);
        
    }
}
if (Accuracy_Exploit) {

        if (event_press(FIRE) && !get_ival(HoldButtonStop)) {

            combo_run(Accuracy100);
    }
}
    if (LegacyAssist) {

      if (get_ival(ADS) || (LegacyHip && get_ival(FIRE))) {

        if (Axis <= LegacyRelease) {

          combo_run(LegacyAssist);

        } else {

          combo_stop(LegacyAssist);
        }
      }
    }
    if (BattsStickyAA) {
      if (get_ival(ADS) || (BattsAAHip && get_ival(FIRE))) {
        combo_run(BattsStickyAssist);
      } else {
        combo_stop(BattsStickyAssist);
      }
    }
    if (SS_Nikolai_Aim) {
      if (get_ival(ADS) || get_ival(FIRE)) {
        combo_run(cNikoAim);
      }

      if (event_release(ADS) || event_release(FIRE)) {
        combo_stop(cNikoAim)
      }
    }
    if (DynamicPolarAim) {

      if ((get_ival(ADS)) || (get_ival(FIRE) && PolarProgHip)) {

        if (abs(get_ival(AIM_X)) <= PolarProgRel && abs(get_ival(AIM_Y)) <= PolarProgRel) {

          PolAngle = (PolAngle + DynamicAngle) % 360;
          SetPolar(POLAR_RS, PolAngle, DynamicRadRX, DynamicRadRY);
        }
      }
    }
    if (AimAssist_EXPO) {

      if (get_val(ADS) > 95) {
        combo_run(AimExpo);
      }

      if (abs(get_val(9)) > 19 || abs(get_val(10)) > 19)
        combo_stop(AimExpo);
    }
    if (TargetTrackerExploit) {
      if (get_val(ADS) && get_val(FIRE)) {
        sensitivity(AIM_X, 0, tt_aim_speed);
        sensitivity(AIM_Y, 0, tt_aim_speed);
      }
    }
    if (AimAssistExploit) {
      if (get_val(ADS) > 95) {
        combo_run(Auto_Aim);
      }
      if (abs(get_val(9)) > 9 || abs(get_val(9)) > 9)
        combo_stop(Auto_Aim);
    }
    if (PickUpMacro && get_val(INTERACT)) {
      combo_run(PickupSpam);
    }
    if (RapidFire)
      if (get_val(ADS) && get_val(FIRE)) {
        combo_run(rapidFire);
      }
    else {
      combo_stop(rapidFire);
    }
    if (AntiRecoil) {
      if (get_val(ADS) && get_val(FIRE)) {
        combo_run(AntiRecoil);
      }
      if (abs(get_val(AIM_Y)) > 36 || abs(get_val(AIM_X)) > 36) {
        combo_stop(AntiRecoil);
      }
    }
  }
  if (Shunt) {

    if (event_release(Shunt)) {
      Shunt = Off;
    } else {
      set_val(Shunt, Off);
    }
  }
}

/*
            )     *              )   (     
   (   ( /(   (  `      (   ( /(   )\ )  
   )\  )\())  )\))(   ( )\  )\()) (()/(  
 (((_)((_)\  ((_)()\  )((_)((_)\   /(_)) 
 )\___  ((_) (_()((_)((_)_   ((_) (_))   
((/ __|/ _ \ |  \/  | | _ ) / _ \ / __|  
 | (__| (_) || |\/| | | _ \| (_) |\__ \  
  \___|\___/ |_|  |_| |___/ \___/ |___/  
                                         
 */
 combo Accuracy100 {

    set_val(ADS,100);
    wait(Spam_Accuracy);
}
//------------------------------------------------------------------------------
 combo RapidFire {

    set_val(FIRE,100);
    wait(RapidFireHold);
    set_val(FIRE,0);
    wait(RapidFireWait);
}
//------------------------------------------------------------------------------
combo SmartFire {

    set_val(FIRE,100);
    wait(SmartFireHold);
    set_val(FIRE,0);
    wait(SmartFireWait);
}
//------------------------------------------------------------------------------
combo Aim_Expo {

    set_val(AIM_Y,AxisRelease(AIM_Y,Strength_Expo));
    wait(Wait_Expo);
    set_val(AIM_X,AxisRelease(AIM_X,Strength_Expo));
    set_val(LX,AxisRelease(LX,Strength_Expo));
    wait(Wait_Expo);
    set_val(AIM_Y,AxisRelease(AIM_Y,Strength_Expo));
    wait(Wait_Expo);
    set_val(AIM_X,AxisRelease(AIM_X,inv(Strength_Expo)));
    wait(Wait_Expo);
    set_val(AIM_X,AxisRelease(AIM_X,inv(Strength_Expo)));
    set_val(LX,AxisRelease(LX,inv(Strength_Expo)));
    wait(Wait_Expo);
    }
//------------------------------------------------------------------------------    
 combo Sticky_AA {
	set_val(AIM_Y,  XY_Val (AIM_Y,  Aim_Val));
	wait(Wait_Val);
	set_val(AIM_X,  XY_Val (AIM_X,  Aim_Val));
	wait(Wait_Val);
	set_val(AIM_Y,  XY_Val (AIM_Y,  Aim_Val  * -1));
	wait(Wait_Val);
	set_val(AIM_X,  XY_Val (AIM_X,  Aim_Val  * -1));
	wait(Wait_Val);
}
//------------------------------------------------------------------------------
combo AdaptiveAbuse {

    set_val(ADS,100);
    wait(AdaptAbuse);
    set_val(ADS,0);
    wait(AdaptiveWait);
}
//------------------------------------------------------------------------------		
combo FireAssist {

  set_val(LX, -100);
  wait(Fire_Assist_Strength);
  set_val(LX, 100);
  wait(Fire_Assist_Strength);
}
//------------------------------------------------------------------------------
combo AS { 
	set_val(AIM_Y,	AxisRelease(AIM_Y,	CheckersAA));
	wait(CheckersAADelay);
	set_val(AIM_X,	AxisRelease(AIM_X,	CheckersAA));
	wait(CheckersAADelay);
	set_val(AIM_Y,	AxisRelease(AIM_Y,	NegativeCheckersAA));
	wait(CheckersAADelay);
	set_val(AIM_X,	AxisRelease(AIM_X,	NegativeCheckersAA));
	wait(CheckersAADelay);
}
//------------------------------------------------------------------------------
combo Confirm {

  set_val(CONFIRM, 100);
  wait(50);
  set_val(CONFIRM, 0);
  wait(100);
}
//------------------------------------------------------------------------------
combo FastReset {

  set_val(EditAssist, 100);
  wait(50)
  set_val(RESET, 100);
  wait(50);
  combo_run(Confirm);
}
//------------------------------------------------------------------------------
combo InstantReset {

  wait(10)
  combo_run(Confirm);
}
//------------------------------------------------------------------------------
combo LegacyAssist {

  set_val(AIM_Y, inv(LegacyAxisY));
  wait(LegacyTime);
  set_val(AIM_X, LegacyAxisX);
  wait(LegacyTime);
  set_val(AIM_Y, LegacyAxisY);
  wait(LegacyTime);
  set_val(AIM_X, inv(LegacyAxisX));
  wait(LegacyTime);
}
//------------------------------------------------------------------------------
combo STICKY_AIM {
	set_val(PS4_RY,xy_val(PS4_RY, _v));
	wait(10);
	set_val(PS4_RX,xy_val(PS4_RX, _v));
	set_val(PS4_LX,xy_val(PS4_LX, _v));
	wait(10);
	set_val(PS4_RY,xy_val(PS4_RY, _v * -1));
	wait(10);
	set_val(PS4_RX,xy_val(PS4_RX, _v * -1));
	set_val(PS4_LX,xy_val(PS4_LX, _v * -1));
	wait(10);
}
//------------------------------------------------------------------------------
combo Auto_Aim {
  set_val(10, (AimAssist_Strength));
  wait(10)
  set_val(9, (AimAssist_Strength));
  wait(10)
  set_val(10, AimAssist_Strength * -1);
  wait(10)
  set_val(9, AimAssist_Strength * -1);
  wait(10)
}
//------------------------------------------------------------------------------
combo BattsStickyAssist {
  set_val(AIM_Y, AxisRelease(AIM_Y, BattStickyPower));
  wait(BattStickyWait);
  set_val(AIM_X, AxisRelease(AIM_X, BattStickyPower));
  set_val(XB1_LX, AxisRelease(XB1_LX, BattStickyPower));
  wait(BattStickyWait);
  set_val(AIM_Y, AxisRelease(AIM_Y, inv(BattStickyPower)));
  wait(BattStickyWait);
  set_val(AIM_X, AxisRelease(AIM_X, inv(BattStickyPower)));
  set_val(XB1_LX, AxisRelease(XB1_LX, inv(BattStickyPower)));
  wait(BattStickyWait);
}
//------------------------------------------------------------------------------
combo HeadAssist {

  set_val(AIM_Y, inv(Head) + get_val(AIM_Y));
}
//------------------------------------------------------------------------------
combo DropShot {

  set_val(CROUCH, 100);
  wait(50);
  set_val(CROUCH, 0);
  wait(20);
  wait(150);
}
//------------------------------------------------------------------------------
combo AimExpo {

  set_val(10, (AimAssist_Strength));
  wait(10)
  set_val(9, (AimAssist_Strength));
  wait(10)
  set_val(10, AimAssist_Strength * -1);
  wait(10)
  set_val(9, AimAssist_Strength * -1);
  wait(10)
}
//------------------------------------------------------------------------------
combo SnapShot {
  set_val(ADS, 100);
  wait(SnapShot_hold);
  set_val(ADS, 0);
  wait(SnapShot_rest);
}
//------------------------------------------------------------------------------
combo PickupSpam {
  set_val(INTERACT, 100);
  wait(80);
  set_val(INTERACT, 0);
}
//------------------------------------------------------------------------------
combo rapidFire {
  set_val(XB1_RT, 100);
  wait(40);
  set_val(XB1_RT, 0);
  wait(40);
}
//------------------------------------------------------------------------------
combo AntiRecoil {
  if (get_val(FIRE)) {
    Anti_Recoil = get_val(10) + AntiRecoil;
    if (Anti_Recoil > 100) Anti_Recoil = 100;
    set_val(10, Anti_Recoil);
  }
}
//------------------------------------------------------------------------------
combo cNikoAim {
  WaitStrength = random(AimAssistWaitTime / 2, AimAssistWaitTime);
  AimStrength = random(inv(AimAssistStrength), AimAssistStrength);

  Set_Val(AIM_Y, AimStrength);
  wait(WaitStrength);
  Set_Val(AIM_X, AimStrength);
  wait(WaitStrength);
  Set_Val(AIM_Y, inv(AimStrength));
  wait(WaitStrength);
  Set_Val(AIM_X, inv(AimStrength));
  wait(WaitStrength);
}

// FUNCTIONS!!!
function XY_Val(f_Axis, f_Val) {
    if(abs(get_val(f_Axis)) < 25)
		return f_Val;
			return get_ival(f_Axis);
}
function Set_Polar(Angle) {
  if (Angle <= 90) {
    Cosinus = (Lookup_Table[90 - Angle]);
    Sinus = (Lookup_Table[Angle]);
  } else if (Angle <= 180) {
    Cosinus = (-Lookup_Table[Angle - 90]);
    Sinus = (Lookup_Table[180 - Angle]);
  } else if (Angle <= 270) {
    Cosinus = (-Lookup_Table[270 - Angle]);
    Sinus = (-Lookup_Table[Angle - 180]);
  } else if (Angle <= 360) {
    Cosinus = (Lookup_Table[Angle - 270]);
    Sinus = (-Lookup_Table[360 - Angle]);
  }
  RX_Polar = (get_lval(AIM_X)) - X_JOY_OFFSET + ((Cosinus * Radius__)) / 100;

  if (RX_Polar > 100) {
    RX_Polar = 100;
  } else if (RX_Polar < -100) {
    RX_Polar = -100;
  }
  if (DhRuvsKii) {
    RY_Polar = (get_lval(AIM_Y)) - Y_JOY_OFFSET + ((Sinus * Radius__)) / 100;

    if (RY_Polar > 100) {
      RY_Polar = 100;
    } else if (RY_Polar < -100) {
      RY_Polar = -100;

    }
  }
  if (DhRuvsKii) {
    set_val(AIM_X, RX_Polar);
    set_val(AIM_Y, RY_Polar);
  } else {
    set_val(AIM_X, RX_Polar);
  }
}
//------------------------------------------------------------------------------
function EditAssist() {

  EditT += get_rtime();

  if (get_ival(EditAssist)) {

    if (EditT >= EditDelay)

      Press(SELECT);
  }
}
//------------------------------------------------------------------------------
function Press(Button) {

  if (get_ival(Button))

    return;

  set_val(Button, 100);
}
//------------------------------------------------------------------------------
function AxisRelease(AxisXY, AxisVal) {

  if (abs(get_ival(AxisXY)) <= BattStickyPower)

    return AxisVal;

  return get_ival(AxisXY);
}
//------------------------------------------------------------------------------
function DoGzTimeZ() {

  AAT += get_rtime();

  if (!AxisT)

    set_Ival(AIM_Y, AAT * Power / 10);

  if (AxisT == 1)

    set_Ival(AIM_X, AAT * Power / 10);

  if (AxisT == 2)

    set_Ival(AIM_Y, inv(AAT * Power / 10));

  if (AxisT == 3) {

    set_Ival(AIM_X, inv(AAT * Power / 10));

    if (AAT > 50) {

      AAT = 0;
      AxisT = 0;
    }

  } else if (AAT > 50) {

    AAT = 0;
    AxisT += 1;
  }
}
//------------------------------------------------------------------------------
function Set_Val(Input, OutPut) {
  set_val(Input, clamp(OutPut * (100 - abs(get_val(Input))) / 100 + get_val(Input), -100, 100));
  return;
}
//------------------------------------------------------------------------------
function SetPolarVal(Axis, Offset_Val) {

  return clamp(Offset_Val * (100 - abs(get_ival(Axis))) / 100 + get_ival(Axis), -100, 100);
}
//------------------------------------------------------------------------------
function Sin(AngleO) {

  return (Cos(AngleO - 90));
}
//------------------------------------------------------------------------------
function Cos(AngleO) {

  if (AngleO < 0)
    AngleO = (AngleO % 360) + 360;

  AngleO = (AngleO % 360);
  PX_Out = 100;
  PY_Out = 100;
  PAngle_Out = AngleO % 45;

  if (AngleO < 45) {
    PY_Out = (100 * PAngle_Out) / 45;
  } else if (AngleO < 90) {
    PX_Out = (100 * (45 - PAngle_Out)) / 45;
  } else if (AngleO < 135) {
    PX_Out = (-100 * PAngle_Out) / 45;
  } else if (AngleO < 180) {
    PY_Out = (100 * (45 - PAngle_Out)) / 45;
    PX_Out = -100;
  } else if (AngleO < 225) {
    PY_Out = (100 * PAngle_Out) / 45;
    PX_Out = -100;
  } else if (AngleO < 270) {
    PX_Out = (-100 * (45 - PAngle_Out)) / 45;
    PY_Out = -100;
  } else if (AngleO < 315) {
    PX_Out = (100 * PAngle_Out) / 45;
    PY_Out = -100;
  } else {
    PY_Out = (100 * (45 - PAngle_Out)) / 45;
  }

  PAngle_Out = abs(PY_Out);

  if (abs(PX_Out) > PAngle_Out) PAngle_Out = abs(PX_Out);
  return (PX_Out * PAngle_Out / isqrt((pow(PX_Out, 2) + pow(PY_Out, 2))));
}
//------------------------------------------------------------------------------
function SetPolarValue(Stick, AngleO, RadiusO) {

  set_val(7 + Stick, (Cos(AngleO) * RadiusO) / 100);
  set_val(8 + Stick, (Sin(AngleO) * RadiusO) / 100);
  return;
}
//------------------------------------------------------------------------------
function SetPolar(Stick, AngleO, Width, Height) {

  SetPolarValue(Stick, AngleO, Width);
  PX[Stick / 4] = get_val(Stick + 7);
  SetPolarValue(Stick, AngleO, Height);
  PY[Stick / 4] = get_val(Stick + 8);
  set_val(Stick + 7, SetPolarVal(Stick + 7, PX[Stick / 4]));
  set_val(Stick + 8, SetPolarVal(Stick + 8, PY[Stick / 4]));
}
//------------------------------------------------------------------------------
function xy_val(f_axis, f_val) {

  if (abs(get_val(f_axis)) < Release)

    return f_val;
  return get_val(f_axis);
}
//------------------------------------------------------------------------------
function _DEADZONE() {
  if (abs(get_val(LY)) < DZ_L && abs(get_val(LX)) < DZ_L || abs(get_val(LY)) < invDZ_L && abs(get_val(LX)) < invDZ_L) {
    set_val(LY, 0);
    set_val(LX, 0);
  }
  if (abs(get_val(AIM_Y)) < DZ_R && abs(get_val(AIM_X)) < DZ_R || abs(get_val(AIM_Y)) < invDZ_R && abs(get_val(AIM_X)) < invDZ_R) {
    set_val(AIM_Y, 0);
    set_val(AIM_X, 0);
  }
}
//------------------------------------------------------------------------------
function PolarFlow(PFB, PSV, PFV, PV, PF, PID) {
  if (PF) {
    PFB += PV;
    if (PFB <= PFV)
      return PFB;
    if (PFB > PFV) {
      PVID[PID] = 0;
      return PFB - PV;
    }
  } else {
    PFB -= PV;
    if (PFB >= PSV)
      return PFB;
    if (PFB < PSV) {
      PVID[PID] = 1;
      return PFB + PV;
    }
  } {
    return FALSE;
  }

}
//------------------------------------------------------------------------------
function active(mode) {

  if (mode == 0) {

    if (get_ival(ADS) && get_ival(FIRE)) {

      return On;
    }
  }

  if (mode == 1) {

    if (get_ival(FIRE)) {

      return On;
    }
  }

  if (mode == 2) {

    if (!get_ival(ADS) && get_ival(FIRE)) {

      return On;
    }
  }

  return Off;
}

//------------------------------------------------------------------------------
function set_Val(Input, Output) {

  set_val(Input, clamp(Output * (100 - abs(get_ival(Input))) / 100 + get_ival(Input), -100, 100));
  return;
}
//------------------------------------------------------------------------------
function set_Ival(Input, Output) {

  set_val(Input, clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input), -100, 100));

  return;
}
//------------------------------------------------------------------------------
const int16 Lookup_Table[] = {
  0,
  1,
  3,
  5,
  6,
  8,
  10,
  12,
  13,
  15,
  17,
  19,
  20,
  22,
  24,
  25,
  27,
  29,
  30,
  32,
  34,
  35,
  37,
  39,
  40,
  42,
  43,
  45,
  46,
  48,
  50,
  51,
  52,
  54,
  55,
  57,
  58,
  60,
  61,
  62,
  64,
  65,
  66,
  68,
  69,
  70,
  71,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  89,
  90,
  91,
  92,
  92,
  93,
  93,
  94,
  95,
  95,
  96,
  96,
  97,
  97,
  98,
  98,
  98,
  98,
  99,
  99,
  99,
  99,
  99,
  99,
  99,
  99,
  100
};
function _NoInputLag() {

   if(get_ival(PS4_UP)){set_val(PS4_UP, 100)}//DPAD
   if(get_ival(PS4_DOWN)){set_val(PS4_DOWN, 100)}//DPAD
   if(get_ival(PS4_LEFT)){set_val(PS4_LEFT, 100)}//DPAD
   if(get_ival(PS4_RIGHT)){set_val(PS4_RIGHT, 100)}//DPAD
   
   if(get_ival(PS4_SQUARE)){set_val(PS4_SQUARE, 100)}//BUTTONS
   if(get_ival(PS4_TRIANGLE)){set_val(PS4_TRIANGLE, 100)}//BUTTONS
   if(get_ival(PS4_CIRCLE)){set_val(PS4_CIRCLE, 100)}//BUTTONS
   if(get_ival(PS4_CROSS)){set_val(PS4_CROSS, 100)}//BUTTONS
   
   if(get_ival(PS4_L1)){set_val(PS4_L1, 100)}//BUMPERS
   if(get_ival(PS4_R1)){set_val(PS4_R1, 100)}//BUMPERS
   
   //if(get_ival(PS4_L2)){set_val(PS4_L2, 100)}//TRIGGERS      **I GUESS WE DONT NEED IT ON TRIGGERS**
   //if(get_ival(PS4_R2)){set_val(PS4_R2, 100)}//TRIGGERS    *JUST IN CASE U DONT WANT/NEED HAIRTRIGGERS*
   
   if(get_ival(PS4_L3)){set_val(PS4_L3, 100)}//STICK CLICK
   if(get_ival(PS4_R3)){set_val(PS4_R3, 100)}//STICK CLICK
   
   if(!get_ival(ADS)){
   if(get_ival(PS4_SHARE)){set_val(PS4_SHARE, 100)}//MISCELLANEOUS
   if(get_ival(PS4_TOUCH)){set_val(PS4_TOUCH, 100)}//MISCELLANEOUS
   if(get_ival(PS4_OPTIONS)){set_val(PS4_OPTIONS, 100)}//MISCELLANEOUS
   }
   if(!get_ival(TOUCHPAD)){
   		if(get_ival(PS4_PS)){set_val(PS4_PS, 100)}//MISCELLANEOUS
   }
   else {
		   if(event_release(PS4_UP)){set_val(PS4_UP, 0)}//DPAD
		   if(event_release(PS4_DOWN)){set_val(PS4_DOWN, 0)}//DPAD
		   if(event_release(PS4_LEFT)){set_val(PS4_LEFT, 0)}//DPAD
		   if(event_release(PS4_RIGHT)){set_val(PS4_RIGHT, 0)}//DPAD
		   
		   if(event_release(PS4_SQUARE)){set_val(PS4_SQUARE, 0)}//BUTTONS
		   if(event_release(PS4_TRIANGLE)){set_val(PS4_TRIANGLE, 0)}//BUTTONS
		   if(event_release(PS4_CIRCLE)){set_val(PS4_CIRCLE, 0)}//BUTTONS
		   if(event_release(PS4_CROSS)){set_val(PS4_CROSS, 0)}//BUTTONS
		   
		   if(event_release(PS4_L1)){set_val(PS4_L1, 0)}//BUMPERS
		   if(event_release(PS4_R1)){set_val(PS4_R1, 0)}//BUMPERS
		   if(event_release(PS4_L2)){set_val(PS4_L2, 0)}//TRIGGERS     **BUT WE NEED THE RELEASE**
		   if(event_release(PS4_R2)){set_val(PS4_R2, 0)}//TRIGGERS      *SO IT CAN GO TO 0 QUICK*
		   
		   if(event_release(PS4_L3)){set_val(PS4_L3, 0)}//STICK CLICK
		   if(event_release(PS4_R3)){set_val(PS4_R3, 0)}//STICK CLICK
		   
		   
		   if(event_release(PS4_SHARE)){set_val(PS4_SHARE, 0)}//MISCELLANEOUS
		   if(event_release(PS4_TOUCH)){set_val(PS4_TOUCH, 0)}//MISCELLANEOUS
		   if(event_release(PS4_OPTIONS)){set_val(PS4_OPTIONS, 0)}//MISCELLANEOUS
		   if(event_release(PS4_PS)){set_val(PS4_PS, 0)}//MISCELLANEOUS
		   }
		   
} ú¹ˆ¾†·ƒ´‚´†¿‰½‹³