/*

 /$$$$$$$                                                            
| $$__  $$                                                           
| $$  \ $$ /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$$ /$$   /$$  /$$$$$$$
| $$$$$$$//$$__  $$ /$$__  $$ |____  $$ /$$_____/| $$  | $$ /$$_____/
| $$____/| $$$$$$$$| $$  \ $$  /$$$$$$$|  $$$$$$ | $$  | $$|  $$$$$$ 
| $$     | $$_____/| $$  | $$ /$$__  $$ \____  $$| $$  | $$ \____  $$
| $$     |  $$$$$$$|  $$$$$$$|  $$$$$$$ /$$$$$$$/|  $$$$$$/ /$$$$$$$/
|__/      \_______/ \____  $$ \_______/|_______/  \______/ |_______/ 
                    /$$  \ $$                                        
                   |  $$$$$$/                                        
                    \______/        
*/
// Official Script of Dhruvski from A.I.M Scripts 

// Linear only script 

// contact me on discord username: dhruvski#0246

// To find more quality scripts like this join the discord server below â†“â†“â†“â†“

// https://discord.gg/axpQ5vgtQH


// Credits to noctwrnyA,Niko,Dogz,Exploit, and many more for helping with the script

// ðŸ…¼ðŸ…°ðŸ†ƒðŸ…²ðŸ…· ðŸ…¸ðŸ…½ ðŸ…¶ðŸ…°ðŸ…¼ðŸ…´ ðŸ…±ðŸ†„ðŸ†ƒðŸ†ƒðŸ…¾ðŸ…½ðŸ†‚                                             PS4 COMMANDS
// ðŸ…²ðŸ…¾ðŸ…¼ðŸ…±ðŸ…°ðŸ†ƒ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´
define ADS     		= XB1_LT;		//in-game ADS BUTTON                       //PS4_L2
define FIRE     	= XB1_RT;		//in-game FIRE BUTTON                      //PS4_R2
define NEXT_WEAPON 	= XB1_RB;		//in-game NEXT_WEAPON BUTTON               //PS4_R1
define PREV_WEAPON 	= XB1_LB;		//in-game PREV_WEAPON BUTTON               //PS4_L1
define PICKAXE 		= XB1_RIGHT;    //in-game PICKAXE BUTTON                   //PS4_RIGHT
define JUMP     	= XB1_A;	   //in-game JUMP BUTTON                       //PS4_CROSS
define CROUCH   	= XB1_RS;		//in-game CROUCH BUTTON                    //PS4_R3
define INTERACT 	= XB1_X;	    //in-game INTERACT BUTTON                  //PS4_SQUARE
define MAPVIEW_B	= XB1_DOWN;    //in-game MAP BUTTON                        //PS4_DOWN
define INVENTORY    = XB1_UP;      // in-game INVENTORY BUTTON                 //PS4_UP

// ðŸ…±ðŸ†„ðŸ…¸ðŸ…»ðŸ…³ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´
define BUILD     	= XB1_Y;	//in-game SWITCH BUTTON                       //PS4_TRIANGLE
define STAIRS  		= XB1_LT;		//in-game STAIRS BUTTON                   //PS4_L2
define WALL    	 	= XB1_RT;		//in-game WALL BUTTON                     //PS4_R2           
define FLOOR  		= XB1_RB;		//in-game FLOOR BUTTON                    //PS4_R1
define ROOF   		= XB1_LB;		//in-game ROOF BUTTON                     //PS4_L1
define TRAP         = XB1_X;   //in-game TRAP BUTTON                          //PS4_SQUARE
// ðŸ…´ðŸ…³ðŸ…¸ðŸ†ƒ ðŸ…¼ðŸ…¾ðŸ…³ðŸ…´
define EDIT 		= XB1_B;	//in-game EDIT BUTTON                         //PS4_CIRCLE
define SELECT 		= XB1_RT; 		//in-game SELECT BUTTON                   //PS4_R2
define CONFIRM 		= XB1_RB;	//in-game CONFIRM BUTTON                      //PS4_R1
define RESET 		= XB1_LT;	//in-game RESET BUTTON                        //PS4_L2
define On  = TRUE;
define Off = FALSE;

// ðŸ…¼ðŸ…¾ðŸ†…ðŸ…´ðŸ…¼ðŸ…´ðŸ…½ðŸ†ƒ & ðŸ…°ðŸ…¸ðŸ…¼ ðŸ†‚ðŸ†ƒðŸ…¸ðŸ…²ðŸ…ºðŸ†‚

define AimY     = XB1_RY;  // Vertical Aim Axis In Game                      //PS4_RY
define AimX     = XB1_RX;  // Horizontal Aim Axis In Game                    //PS4_RX
define Strafe   = XB1_LX;  // Horizontal Walk Axis In Game                   //PS4_LX
define Walk     = XB1_LY;  // Vertical Walk Axis In Game                     //PS4_LY

// dont touch
define TOUCHPAD = PS4_TOUCH;

// IGNORE THIS !!!
define PS       = POLAR_RS;// Polar Stick In Use [LS/RS]



int deadzone = 10;// right stick deadzone




// DUSTEEEEEEEEE AA //
define DUSTE   =   TRUE; // keep this true dont touch at all 
define PXS     =   3276;  				    	
define PXSE    =    200;				    
define PVSI    =     200;    				
define PVS     =      0;
define PYS     =   -200;				
define PYSE    =    200;		    	
int    PPFX    =    PXS;
int    PPFY    =    PYS;				  	  
int    PVID;
int    PFD     =      1;		    
int    PPFD    =      1;
int    RX;
int    RY;

// BrUcE TiMeD AiM AsSiSt (LEAVE THIS ALONE)
int DoGzTimeZ = TRUE;     
int Power = 1;           
int AATime = 2000;        
int AATimed = TRUE;        
int AimAssistHip = TRUE;    


// NIKO AIM // 
define SS_Nikolai_Aim = TRUE; 
define AimAssistWaitTime = 10;// right stick deadzone  
define AimAssistStrength = 10;// right stick deadzone 

//DhruvShapes
int DHruVskiACE           = TRUE; // [LEAVE THIS ALONE]
define DhRuvsKii  = 0; //  

// Batt's Sticky Aim Assist
int BattsStickyAim = On; 
int BattStickyPower = 10; // right stick deadzone
int BattStickyTime = 10;  // right stick deadzone
int BattsAAHip = On;      

// NOT's Sticky AIM
define sticky_aim_assist = TRUE;
define _v                =   10; // right stick deadzone

// AIM Correction
define aim_sens_corrections = 1;   
int in_game_menu_sens       = 12;  // PICK 3 HIGHER THEN YOUR REGULAR SENSITIVITY! IF IT FEELS WEIRD DESCREASE BY 1 !!!!

//Aim Assist Stick Linear - Umbrella V2  (LEAVE THIS ALONE) 
define AimStickLinear  = TRUE; 
define Ads_Assist      = TRUE;  
define Fire_Assist     = TRUE; 
define RADIUS          = 7;    
define STEPS           = 30;   
define STEP_INTERVAL   = 1;    

// AIM ASSIST EXPLOIT LINEAR V4  (LEAVE THIS ALONE)
int Aim_Exploit_Linear  = TRUE; 
int Strength_Linear     = 170;// {INCREASE THE VALUE FOR THIS FOR MORE AA}
int Wait_Linear         = 100;
int AimBoost            = FALSE; 
int ExploitRadiusBoost  = 6;  
int ExploitAngleBoost   = 10;
int AimAAHip            = On; 

// Progression Head Shot Assist
define HeadAssist    = TRUE; 
define HeadHipAssist = TRUE; 

define HeadStep = 1;  // HeadMax /  10 = HEADSTEP  *FOR EXAMPLE 10/10 = 1  *HEADSTEP =1
define HeadMax  = 10; // Right Stick Deadzone                               


// RAPID FIRE (ONLY CAN HAVE 1 ON)
// OPTION 1:
int RapidFire       =  Off;
int RapidFireHold = 30;
int RapidFireWait = 30;
define RapidFireHip = Off;

// OPTION 2:
int SmartRapidFire  = On;
int SmartFireHold = 40;
int SmartFireWait = 350;
define SmartFireHip = On;


//HEAD SHOT ASSIST 2.0
int HEADSHOT = TRUE;
define HeadShotStrength = 10;  // right stickdeadzone
define HeadShotHoldTime = 1300;

// Triple Sticky
define Triple_Sticky    =   TRUE;
//--ADS Value
	int ADS_Size            =  	  10; // rightstick deadzone
	int ADS_Wait_Value      =     40;

//--ADS + FIRE Value
	int ADS_FIRE_Size       =     10; // rightstick deadzone
	int ADS_FIRE_Wait_Value =     30;

//--HIPFIRE Value
	int HIPFIRE_Size        =     26;
	int HIPFIRE_Wait_Value  =     20;


// DoGz Polar Version XIII [Real Zen Polar {STAGE 1 of 2}] (LEAVE THIS ALONE UNLESS YOU HAVE VALUES FOR THIS)
int DoGzZenPolar = On;        
int PolarOrientation = On;    
int PolarCoil = On;           
int ZenPolarRadius = 3;     
int ZenPolarAngle = 11;       
int RotateCounter = 150; 	  
int Increment = 2;            
int ZenPolarChangeSpeed = 10 
int ZenPolarRelease = 12; 	   
// DAM POLAR/DoGz Reducer {STAGE 2 of 2}
int DoGzReleasMode = DoGzDamPolar; 
// DamPolar
int DamAdsRadius = 3;		  
int DamAdsAngle = 11;         
int DamFireRadius =	3;		 
int DamFireAngle = 30;        
// DoGzReducer                
int ReducerPower = 3;		  
int ReducerTime = 10;		  

//DhruvTrackerV3
define DhruvTrackerV3 = TRUE;
int Dhruvski7 = FALSE;
int CRYptoACE8 = FALSE;
int CheckersNoTChess4 = FALSE;
int SEWEYY27 = FALSE;
int DHRUVBOT5 = 10; // right stick deadzone
int LIGMA28 = 10;   // right stick deadzone
int LIGMA18 = 10;   // right stick deadzone
int LIGMA20 = 13;
int LIGMA22 = 19;
int LIGMA19 = -10;  // right stick deadzone
int LIGMA21 = -13;
int LIGMA6 = 7;
int MONKEY23 = 21;


// NightmareXVII's AA
int AALinearExpo			=  10; // right stick deadzone
int NegativeAALinearExpo	= -10; // right stick deadzone
int Delay					=  8; 
int Release					=  11;	// -> This should always be +1 more than Aim Assist values

// Instant Edit + Reset 
define InstaEditReset = FALSE; 	
define EditHold       = FALSE; 	
define EditHoldTime   = 100;  	

//Build Tracker
int BuildTracker  =  TRUE; 
int BuildSyncTime = 4000; 

// Playstation On PC/Xbox
define PlayStationOnXbox = TRUE; 

// Hair Triggers
define HairTriggers = TRUE; 

// Fast Reset
int InstaFastReset  =  TRUE;
define FastReset = XB1_LT;

//Deadzone optimizer
int DEADZONE	= FALSE; // ONLY TURN THIS ON IF YOU HAVE DRIFT
define DZ_L 	= 10; //left stick deadzone
define invDZ_L 	= -10;//left stick deadzone

define DZ_R 	= 10;//right stick deadzone
define invDZ_R 	= -10;//right stick deadzone

// DONT TOUCH AT ALL

int Edit1,Edit2,EditT,Shunt,BuildTrack,BuildCount;
int power,Ypower,Xpower,CountPower,AxisXY;int AxisT,AAT;
int display_title = TRUE;int goCOMBAT;int WaitStrength, AimStrength;
int display_black;int EditAst, EDIThold; int Head;int TimeValue,OutPut,
RumValue,RecoilTimer,BoostAR,AxisCY,AxisLY;int actual_X, actual_Y, 
actual_Magnitude, max_Magnitude,time,angle, cos_angle, sin_angle;int _RX,_RY;
define StandardAHip =  On;int ExploAngle,ExploCos,ExploSin,ExploX,ExploY,
ActualMagnitude,MaxMagnitude,RadiusExploit,AngleExploit,AdaptAbuse;
int _Polar_Process_Done;int _Increment;int X_JOY_OFFSET  		  =    1;
int Y_JOY_OFFSET  		  =    1;int MAX_MAGNITUDE 		  =   10;int Radius__; 
int Angle_Increment;int PolarRadius;int PolarAngle;int PolarRBoost;
int PolarABoost;int RX_Polar;int RY_Polar;int _Angle;int X_Magnitude;int Y_Magnitude;
int Sinus;int Cosinus;int Aim_Val, Wait_Val;int SnapShot_hold; int SnapShot_rest;
int interval_t,angle2;int x_stick, y_stick;int ads_grenade_sens, ads_fire_sens, Sens;
define DoGzDamPolar = 0,DoGzReducer = 1;int Rotation,Count,Counter,Inverter,Axis,
Angle,Cos,Sin,DamRadius,DamAngle;define PolarValue = 327;

//Main
main {
vm_tctrl(-9);
block_rumble();
_NoInputLag();
 if (DEADZONE){
 _DEADZONE();
 }
	if (PlayStationOnXbox && get_console() == PIO_XB360 && get_controller() == PIO_PS4) { 
	
		swap(PS4_TOUCH,PS4_SHARE);
	}
	if (HairTriggers) { 
   		
   		deadzone(PS4_L2,PS4_R2,100,100);
   	}
    	
  if (InstaFastReset && !get_ival(ADS) && event_press(FastReset)) { 
       
      
        
        	Shunt = FastReset;
        	combo_run(FastReset);
    }

    if (InstaEditReset) {
        if (EditHold && get_ival(EDIT) && get_ptime(EDIT) > EditHoldTime || !EditHold && event_press(EDIT)) {
                Edit1 = On;
                Edit2 = On;
                BuildTrack = On;
        
        }

        if (Edit2) {
            if (event_release(SELECT)) {  
                Edit1 = Off;
                Edit2 = Off;
                BuildTrack = Off;
    		}

        }
    }

    if (Edit1 || Edit2) {

            if (event_press(RESET)) {  
                combo_run (InstantReset);
                Edit1 = Off;
                Edit2 = Off; 
            }

                if (event_press(PICKAXE) || event_press(BUILD) || event_press(ADS)) {
                    Edit1 = Off;
                    Edit2 = Off;
                    BuildTrack = Off;
                }
    }
    
	if (BuildTracker) {
        
        if (event_press(BUILD)) {
            BuildTrack = !BuildTrack;
            
        }
    
        if (BuildTrack) {
            BuildCount += get_rtime();
            
            if (event_press(PICKAXE) || BuildCount == BuildSyncTime) {
                BuildTrack = Off;
                BuildCount = Off;
            }
            
                if (get_ival(ROOF) || get_ival(FLOOR) || get_ival(STAIRS) || get_ival(WALL)) 
                    BuildCount = Off;
        }
    }
    if(!BuildTracker) {
    combo_run(AS);
    
    if (BattsStickyAim) {
            
                if (get_ival(ADS) || (BattsAAHip && get_ival(FIRE))) {
                
                    combo_run(BattsStickyAssist);
                
                } else {
                
                    combo_stop(BattsStickyAssist); 
                }
            }
    if(Triple_Sticky) {
		if(get_ival(ADS) || get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = ADS_Size;
		Wait_Val = ADS_Wait_Value;
	} else if(get_ival(ADS) || get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = ADS_FIRE_Size;
		Wait_Val = ADS_FIRE_Wait_Value;
	} else if(!get_ival(ADS) || get_ival(FIRE)) {
	combo_run(Sticky_AA);
		Aim_Val  = HIPFIRE_Size;
		Wait_Val = HIPFIRE_Wait_Value;
	} else {
	combo_stop(Sticky_AA);
		}
	}
	if (sticky_aim_assist) {
   if(get_val(PS4_L2)) combo_run(STICKY_AIM);
        else combo_stop(STICKY_AIM);}
    if(DHruVskiACE)
  {
		if(abs(get_val(AimX)) <= DZ_R)
			set_val(AimX, 0); 
		if(abs(get_val(AimY)) <= DZ_R)
			set_val(AimY, 0);

	if(get_ival(ADS) || get_ival(FIRE))
	{
		if(_Polar_Process_Done == TRUE)
		{
			_Polar_Process_Done = FALSE;
					       	
			if(get_lval(AimX) <= get_val(AimX))
			{
				_Angle = 360;  	// add right boost mvt
				_Increment = FALSE;
			}
			else
			{
				_Angle = 180;  // add lest boost mvt  
				_Increment = TRUE;
			}
		}
		
		X_Magnitude = isqrt(pow((get_lval(AimX) - get_val(AimX)), 2));
		
		if(DhRuvsKii )
		{
    		Y_Magnitude = isqrt(pow((get_lval(AimY) - get_val(AimY)), 2));
    	}
		
		if((X_Magnitude <= MAX_MAGNITUDE) && (Y_Magnitude <= MAX_MAGNITUDE))
		{
			Set_Polar(_Angle);
		                
			if(_Increment == TRUE)
			{
				_Angle+= Angle_Increment; 
		        	
				if(_Angle >= 360)
				{
					_Angle -= 360;
				}
	        		
					if((_Angle <= 180 + (Angle_Increment / 2)) && (_Angle > (180 - (Angle_Increment + (Angle_Increment / 2)))))
					{
						_Polar_Process_Done = TRUE;
					}
				}
				else
				{
					_Angle-= Angle_Increment;
		        	
					if( (_Angle <= 0))
					{
						_Polar_Process_Done = TRUE;
					}
				}
			}
			else
			{
				_Polar_Process_Done = TRUE;		
			}
		}
		else
		{
			_Angle = 360;
			_Increment = FALSE;
			_Polar_Process_Done = TRUE;
		}
	}
	if(aim_sens_corrections) {
    ads_grenade_sens=100-(in_game_menu_sens); ads_fire_sens=96-(in_game_menu_sens); 
    if (get_val (PS4_L2)) {
    if(get_val(PS4_R2) && get_val(PS4_L2)) {
    Sens = ads_fire_sens; }
    if(!get_val(PS4_R2) && !get_val(PS4_L2) || get_val (PS4_R2) &&!get_val(PS4_L2)) {
    Sens = 100; //--sens and hip fire sens
    }   
    if(!get_val(PS4_R2) && get_val(PS4_L2)) {
    Sens = ads_grenade_sens; }
    if(Sens > 100) Sens = 100;  
    sensitivity(PS4_RX, NOT_USE, Sens);
    sensitivity(PS4_RY, NOT_USE, Sens); }
    }
     if (DoGzTimeZ) {
	        	
	        	if (AATimed) {
	        	
	        		if (get_ival(ADS) && get_ptime(ADS) <= AATime || AimAssistHip && get_ival(FIRE) && get_ptime(FIRE) <= AATime) {
	            	
	            		DoGzTimeZ();
	            	}
	            	
	            } else if (get_ival(ADS)|| AimAssistHip && get_ival(FIRE)) {
	            	
	            		DoGzTimeZ();
	            }
	            
	            if (!get_ival(ADS) && !get_ival(FIRE)) {
	            
	            	AAT = 0;
	            	AxisT = 0;
	            }
	        }        
if (SS_Nikolai_Aim)
		{
			if(get_ival(ADS) || get_ival(FIRE))
			{
				combo_run(cNikoAim);
			}

			if(event_release(ADS) || event_release(FIRE))
			{
				combo_stop(cNikoAim)
			}
		}
		 if (Aim_Exploit_Linear) {

        if (get_ival(ADS)) {

            combo_run(Aim_Linear);
    }
}
  if (Aim_Exploit_Linear) {
    
        if (get_ival(ADS) || (AimAAHip && get_ival(FIRE))) {
        
            ExploX = get_ival(PS4_LX);   
            ExploY = get_ival(PS4_LY);           
            ActualMagnitude = isqrt(pow(ExploX,2) + pow(ExploY,2));  
            MaxMagnitude = (ActualMagnitude < 100);                      
        
            if (AimBoost && get_ival(FIRE)) {
                    
                RadiusExploit = Strength_Linear + ExploitRadiusBoost;
                AngleExploit = ExploitAngleBoost;
                
            } else {
                    
                RadiusExploit = Strength_Linear;
                AngleExploit = 0;
            }
            
            ExploAngle += Wait_Linear + AngleExploit;                                                 
            ExploAngle = ExploAngle % 360;                                            
            ExploSin = ExploitPolar[ExploAngle % 360];                           
            ExploCos = ExploitPolar[(ExploAngle + 270) % 360];                  
            ExploCos = (ExploCos * RadiusExploit) / 100;                         
            ExploSin = (ExploSin * RadiusExploit) / 100;                          
        
            if (ActualMagnitude <= 10) {                                                      
                
                ExploSin -= ExploY;                                                              
                ExploCos -= ExploX;                                                                 
            
            } else {                                                                                       
                    
                ExploSin = (ExploSin * (200 - ((abs(ExploY) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
                ExploCos = (ExploCos * (200 - ((abs(ExploX) + ActualMagnitude) / 10) * 10) / 200) * MaxMagnitude; 
            }                                                  
            
            set_val(PS4_LX,clamp(ExploX + ExploCos, -100,100));
            set_val(PS4_LY,clamp(ExploY + ExploSin, -100,100)); 
    }
}
 if (CheckersNoTChess4) {
    if (get_val(PS4_L2)) {
      combo_run(LIGMA37);
    }
    if ((get_val(PS4_RX)) > DHRUVBOT5 || (get_val(PS4_RX)) < DHRUVBOT5 * (-1)) {
      combo_stop(LIGMA37);
    }
  }
  if (Dhruvski7) {
    if (get_val(PS4_L2)) {
      combo_run(LIGMA40);
    }
    if (CRYptoACE8) {
      if (get_val(PS4_R2)) combo_run(LIGMA41);
    }
  }
if (DhruvTrackerV3) {
    SEWEYY27 = !SEWEYY27;
    Dhruvski7 = !Dhruvski7;
    CRYptoACE8 = !CRYptoACE8;
    CheckersNoTChess4 = !CheckersNoTChess4;
  }
  if (SEWEYY27) {
    if (get_val(PS4_L2) > 95) {
      combo_run(LIGMA46);
    }
    if (abs(get_val(PS4_RX)) > 21 || abs(get_val(PS4_RY)) > 21) combo_stop(LIGMA46);
}   
    if (HeadAssist) {
	        
	        if (get_ival(ADS) && get_ival(FIRE) || HeadHipAssist && get_ival(FIRE)) {
	        
	        	if (abs(get_ival(PS4_RY)) < HeadMax) { 
	        		
	        		Head += HeadStep;
	        		combo_run(HeadAssist);
	        	}	
	        }
	        
	        if (!get_ival(FIRE)) Head = 0;
	        	
	        if (Head >= HeadMax) combo_stop(HeadAssist);
	    }
	    if(HEADSHOT){
	   
		_RY = inv(HeadShotStrength);

		if(get_ival(FIRE) && get_ptime(FIRE) < HeadShotHoldTime){
			
			Set_Val(AimY, _RY);	
			}
	}
	if ((RapidFire && RapidFireHip && get_ival(ADS) && get_ival(FIRE)) || (RapidFire && !RapidFireHip && get_ival(FIRE))) {
            combo_run(RapidFire);
        }    
            else {
                combo_stop(RapidFire);
            }

        if ((SmartRapidFire && SmartFireHip && get_ival(ADS) && get_ival(FIRE)) || (SmartRapidFire && !SmartFireHip && get_ival(FIRE))) {
            combo_run(SmartFire);
        }    
            else {
                combo_stop(SmartFire);
            }
      if (DoGzZenPolar) {
		    
		        if ((get_ival(ADS) || get_ival(FIRE)) && Axis < ZenPolarRelease) {
	            
	                if (PolarOrientation) {
	                
	                    if (Count < RotateCounter) {
	                    	
	                    	Rotation += ZenPolarAngle;
	                    
	                    	if (Rotation > 359) { 
	                    		
	                    		Rotation = 0;
	                    	}
	                    	Count++;
	                    }
	                    
	                    if (Count >= RotateCounter) {
	                    
	                    	Rotation -= ZenPolarAngle;
	                    
	                    	if (Rotation < 0) { 
	                    
	                    		Rotation = 359;
	                    	}	
	                    	Count++;
	                    }
	                    
	                    if (Count == RotateCounter * 2) { 
	                    
	                    	Count = 0;
	                    }	
	                } else {
	                
	                		Rotation += ZenPolarAngle;
	                
	                	if (Rotation > 359) { 
	                		
	                		Rotation = 0;
	                	}
	                }
	                	    
	                set_polar(PS,Rotation,(Axis * PolarValue / 3) + (ZenPolarRadius * PolarValue) + Counter);
	                
	                if (PolarCoil) {
	                
	                	if (Inverter) {
	                		
	                		Counter += ZenPolarChangeSpeed;
	                	
	                	} else {
	                	
	                		Counter -= ZenPolarChangeSpeed;
                        }
                        
	                	if (Counter > Increment * PolarValue) {
	                		
	                		Inverter = !Inverter;
	                	}
	                
	                	if (Counter < inv(Increment) * PolarValue) {
	                		
	                		Inverter = !Inverter;
	                	}
	                }
		        }
		    
		        if ((get_ival(ADS) || get_ival(FIRE)) && Axis >= ZenPolarRelease) {
                    
                    if (DoGzReleasMode == DoGzDamPolar) {    
		            	
		            	if (get_ival(FIRE)) {
                            
                     		DamRadius = DamFireRadius;
                        	DamAngle  = DamFireAngle;
                    	
                    	} else {
                                
                     		DamRadius = DamAdsRadius;
                        	DamAngle  = DamAdsAngle;
                        }
		            	
		            	Angle += DamAngle;
                    	Angle = Angle % 360;
                    	Sin = DamPolarArray[Angle % 360];
                    	Cos = DamPolarArray[(Angle + 270) % 360];
                    	Cos = (Cos * DamRadius) / 100;
                    	Sin = (Sin * DamRadius) / 100;
		            
                    	Set_Val(AimX,Cos);
                    	Set_Val(AimY,Sin); 
    	            
    	            } else if (DoGzReleasMode == DoGzReducer) {
    	        
    	        		combo_run(DoGzReducer);
    	        	}	
		        } else {
		        	
		        	combo_stop(DoGzReducer);
		        }
		    }
    
	    if (DUSTE) {
            RX = PS4_RX;
			RY = PS4_RY;
			RX =   PPFX;
			RY =   PPFY;
    	if(get_val(PS4_L2) > 80){
    	if(abs(get_val(XB1_RX) < deadzone)) 
    	if(abs(get_val(XB1_RY) < deadzone)) 
    	if(abs(get_val(XB1_RX) > deadzone)) 
    	if(abs(get_val(XB1_RY) > deadzone)){
   			PPFX = PolarFlow(PPFX,PXS,PXSE,PVSI,PFD,1);
        	PPFY = PolarFlow(PPFY,PYS,PYSE,PVS,PPFD,2);
       	    set_polar(POLAR_RS,30,PPFX);
    		set_polar(POLAR_RS,30,PPFY);}
}
}
}
     if (Shunt) {
        
        if (event_release(Shunt)) {
            Shunt = Off;
        }
            else {
            set_val (Shunt,Off);
         }
     }
   }
 
//Combos
combo STICKY_AIM {
	set_val(PS4_RY,xy_val(PS4_RY, _v));
	wait(10);
	set_val(PS4_RX,xy_val(PS4_RX, _v));
	set_val(PS4_LX,xy_val(PS4_LX, _v));
	wait(10);
	set_val(PS4_RY,xy_val(PS4_RY, _v * -1));
	wait(10);
	set_val(PS4_RX,xy_val(PS4_RX, _v * -1));
	set_val(PS4_LX,xy_val(PS4_LX, _v * -1));
	wait(10);
}
combo Sticky_AA {
	set_val(AimY,  XY_Val (AimY,  Aim_Val));
	wait(Wait_Val);
	set_val(AimX,  XY_Val (AimX,  Aim_Val));
	wait(Wait_Val);
	set_val(AimY,  XY_Val (AimY,  Aim_Val  * -1));
	wait(Wait_Val);
	set_val(AimX,  XY_Val (AimX,  Aim_Val  * -1));
	wait(Wait_Val);
}
combo LIGMA46 {
  set_val(PS4_RY, LIGMA28 * -1);
  wait(10) set_val(PS4_RX, LIGMA28);
  wait(10) set_val(PS4_RY, LIGMA28);
  wait(10) set_val(PS4_RX, LIGMA28 * -1);
  wait(10)
}
combo LIGMA40 {
  set_val(PS4_RY, a_f(PS4_RY, LIGMA18));
  wait(LIGMA22) set_val(PS4_RX, a_f(PS4_RX, LIGMA18));
  wait(LIGMA22) set_val(PS4_RY, a_f(PS4_RY, LIGMA19));
  wait(LIGMA22) set_val(PS4_RX, a_f(PS4_RX, LIGMA19));
  wait(LIGMA22)
}
combo LIGMA41 {
  set_val(PS4_RY, a_f(PS4_RY, LIGMA20));
  wait(LIGMA22) set_val(PS4_RX, a_f(PS4_RX, LIGMA20));
  wait(LIGMA22) set_val(PS4_RY, a_f(PS4_RY, LIGMA21));
  wait(LIGMA22) set_val(PS4_RX, a_f(PS4_RX, LIGMA21));
  wait(LIGMA22)
}
combo LIGMA37 {
  wait(4) set_val(PS4_RX, DHRUVBOT5);
  wait(LIGMA6);
  set_val(PS4_RX, DHRUVBOT5 * (-1));
  wait(LIGMA6);
}
combo DoGzReducer {

	set_Ival(AimX,ReducerPower);
	set_Ival(AimY,ReducerPower);
	wait(ReducerTime);
	set_Ival(AimX,inv(ReducerPower));
	set_Ival(AimY,inv(ReducerPower));
	wait(ReducerTime);
}
combo RapidFire {

    set_val(FIRE,100);
    wait(RapidFireHold);
    set_val(FIRE,0);
    wait(RapidFireWait);
}
combo SmartFire {

    set_val(FIRE,100);
    wait(SmartFireHold);
    set_val(FIRE,0);
    wait(SmartFireWait);
}
combo AS { 
	set_val(AimY,	AxisRelease(AimY,	AALinearExpo));
	wait(Delay);
	set_val(AimX,	AxisRelease(AimX,	AALinearExpo));
	wait(Delay);
	set_val(AimY,	AxisRelease(AimY,	NegativeAALinearExpo));
	wait(Delay);
	set_val(AimX,	AxisRelease(AimX,	NegativeAALinearExpo));
	wait(Delay);
}
combo BattsStickyAssist {
   
   set_val(AimY,AxisRelease(AimY,BattStickyPower));
   wait(BattStickyTime);
   set_val(AimX,AxisRelease(AimX,BattStickyPower));
   set_val(Strafe,AxisRelease(Strafe,BattStickyPower));
   wait(BattStickyTime);
   set_val(AimY,AxisRelease(AimY,inv(BattStickyPower)));
   wait(BattStickyTime);
   set_val(AimX,AxisRelease(AimX,inv(BattStickyPower)));
   set_val(Strafe,AxisRelease(Strafe,inv(BattStickyPower)));
   wait(BattStickyTime);
}
combo cNikoAim {
	WaitStrength	= random(AimAssistWaitTime / 2 , AimAssistWaitTime);
	AimStrength		= random(inv(AimAssistStrength), AimAssistStrength);

	Set_Val(AimY,	AimStrength);
	wait(WaitStrength);
	Set_Val(AimX,	AimStrength);
	wait(WaitStrength);
	Set_Val(AimY,	inv(AimStrength));
	wait(WaitStrength);
	Set_Val(AimX,	inv(AimStrength));
	wait(WaitStrength);
}
combo HeadAssist{

	set_val(AimY,inv(Head) + get_val(AimY));
}
combo Aim_Linear {

    set_val(Strafe,inv(Strength_Linear));
    wait(Wait_Linear);
    set_val(Strafe,Strength_Linear);
    wait(Wait_Linear);
}
combo Confirm {

    set_val(CONFIRM,100);
    wait(50);
    set_val(CONFIRM,0);
    wait(100);
}
combo FastReset {

 
    wait(50)
    set_val(RESET,100);        
    wait(50);
    combo_run(Confirm);
}

combo InstantReset {

    wait(20)
    combo_run(Confirm);
}

//Functions

function Set_polar(stick, angle, radius){
x_stick = deadzone + stick; 
y_stick = deadzone + stick;
if(angle < 0) angle = 360 + (angle % 360);
angle = (angle + 90) % 360;
radius = clamp(radius, 0, 100);
sin_angle = Polar_Array[angle];
cos_angle = Polar_Array[(angle + 90) % 360];
offset(x_stick, inv(radius * cos_angle / 100));
offset(y_stick, inv(radius * sin_angle / 100));
return;}

function Shake() { 
angle2 = (angle2 + SPEED) % 360;
Set_polar(2,angle2, aaValue);
} 

function xy_val(f_axis,f_val) {
if(abs(get_val(f_axis)) < (_v + 1))  
return f_val;    
return get_val(f_axis);
}

function offset(int axis, int offset_val) {
set_val(axis, clamp(offset_val * (100 - abs(get_val(axis))) / 100 + get_val(axis), -100, 100));
return}

function XY_Val(f_Axis, f_Val) {
    if(abs(get_val(f_Axis)) < 25)
		return f_Val;
			return get_ival(f_Axis);
}

function a_f(p, m) {
  if (abs(get_val(p)) < MONKEY23) return m;
  return get_val(p);
}
function AxisRelease(Stick, Value) {
	if(abs(get_val(Stick)) < Release)
		return Value;
	return get_val(Stick);
}
function Set_Polar(Angle) {   
    if(Angle <= 90)
    {        
        Cosinus = (Lookup_Table[90 - Angle]);
        Sinus = (Lookup_Table[Angle]);
    }
    else if (Angle <= 180)
    {
        Cosinus = (-Lookup_Table[Angle - 90]);
        Sinus = (Lookup_Table[180 - Angle]);
    }
    else if (Angle <= 270)
    {
        Cosinus = (-Lookup_Table[270 - Angle]);
        Sinus = (-Lookup_Table[Angle - 180]);
    }
    else if (Angle <= 360)
    {
        Cosinus = (Lookup_Table[Angle - 270]);
        Sinus   = (-Lookup_Table[360 - Angle]);
    }
	RX_Polar = (get_lval(AimX)) - X_JOY_OFFSET + ( (Cosinus * Radius__) )/100;
	    
	if( RX_Polar > 100)
	{
	   RX_Polar = 100;
	}    
	else if( RX_Polar < -100)
	{
	   RX_Polar = -100;
	}
	if(DhRuvsKii )
	{
		RY_Polar = (get_lval(AimY)) - Y_JOY_OFFSET + ( (Sinus   * Radius__) )/100;
	 	
	    if( RY_Polar > 100)
	    {
	        RY_Polar = 100;
	    }    
	    else if( RY_Polar < -100)
	    {
	        RY_Polar = -100;
	   
	   	}
	}
    if(DhRuvsKii )
    {
    	set_val(AimX, RX_Polar);
    	set_val(AimY, RY_Polar);
    }
    else
    {
    	set_val(AimX, RX_Polar);
    } 
    }
function DoGzTimeZ() {

	AAT += get_rtime();
	
	if (!AxisT) 
		
		set_Ival(AimY,AAT * Power / 10);
		
	if (AxisT == 1)  
		
		set_Ival(AimX,AAT * Power / 10);
	
	if (AxisT == 2)  
		
		set_Ival(AimY,inv(AAT * Power / 10));

	if (AxisT == 3) {
		
		set_Ival(AimX,inv(AAT * Power / 10));
	
		if (AAT > 50) {
		
			AAT = 0;
			AxisT = 0;
		}
	
	} else if (AAT > 50) {
		
		AAT = 0;
		AxisT += 1;
	}
}
function PolarFlow(PFB,PSV,PFV,PV,PF,PID) {
    	if(PF) {
       		PFB += PV;
    	if(PFB <= PFV)  
    	return PFB;
    	if(PFB > PFV) {
        	PVID[PID] = 0;
    	return PFB - PV;}
}
		else{
        	PFB -= PV;    
    	if(PFB >= PSV)  
    	return PFB;
    	if(PFB < PSV) {
    		PVID[PID] = 1; 
        return PFB + PV;}
} 
       {return FALSE;
}
   		
 	   
}
function EditAssist () {

    EditT += get_rtime();
        
        if (get_ival(EditAssist)) {
            
            if (EditT >= EditDelay)
                  
           		Press(SELECT);
        }
}

function Press (Button) {

    if (get_ival(Button))
        
   		return;
            
            set_val(Button,100);
}
function Set_Val(Input,Output) {
	
	set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
	
	return;
}

function set_Ival(Input,Output) {

      set_val(Input,clamp(Output * (100 - abs(get_val(Input))) / 100 + get_val(Input),-100,100));
        
      return; 
}

function _DEADZONE (){                               
   if(abs(get_val(Walk)) < DZ_L && abs(get_val(Strafe)) < DZ_L || abs(get_val(Walk)) < invDZ_L && abs(get_val(Strafe)) < invDZ_L){        
        set_val(Walk, 0);                                                
        set_val(Strafe, 0);                                                
}                                
    if(abs(get_val(AimY)) < DZ_R && abs(get_val(AimX)) < DZ_R || abs(get_val(AimY)) < invDZ_R && abs(get_val(AimX)) < invDZ_R){         
        set_val(AimY,0);                                                 
        set_val(AimX,0);                                                
}
}
function _NoInputLag() {

   if(get_ival(PS4_UP)){set_val(PS4_UP, 100)}//DPAD
   if(get_ival(PS4_DOWN)){set_val(PS4_DOWN, 100)}//DPAD
   if(get_ival(PS4_LEFT)){set_val(PS4_LEFT, 100)}//DPAD
   if(get_ival(PS4_RIGHT)){set_val(PS4_RIGHT, 100)}//DPAD
   if(get_ival(PS4_SQUARE)){set_val(PS4_SQUARE, 100)}//BUTTONS
   if(get_ival(PS4_TRIANGLE)){set_val(PS4_TRIANGLE, 100)}//BUTTONS
   if(get_ival(PS4_CIRCLE)){set_val(PS4_CIRCLE, 100)}//BUTTONS
   if(get_ival(PS4_CROSS)){set_val(PS4_CROSS, 100)}//BUTTONS
   if(get_ival(PS4_L1)){set_val(PS4_L1, 100)}//BUMPERS
   if(get_ival(PS4_R1)){set_val(PS4_R1, 100)}//BUMPERS
   //if(get_ival(PS4_L2)){set_val(PS4_L2, 100)}//TRIGGERS      **I GUESS WE DONT NEED IT ON TRIGGERS**
   //if(get_ival(PS4_R2)){set_val(PS4_R2, 100)}//TRIGGERS    *JUST IN CASE U DONT WANT/NEED HAIRTRIGGERS*
   if(get_ival(PS4_L3)){set_val(PS4_L3, 100)}//STICK CLICK
   if(get_ival(PS4_R3)){set_val(PS4_R3, 100)}//STICK CLICK
   if(!get_ival(ADS)){
   if(get_ival(PS4_SHARE)){set_val(PS4_SHARE, 100)}//MISCELLANEOUS
   if(get_ival(PS4_TOUCH)){set_val(PS4_TOUCH, 100)}//MISCELLANEOUS
   if(get_ival(PS4_OPTIONS)){set_val(PS4_OPTIONS, 100)}//MISCELLANEOUS
   }
   if(!get_ival(TOUCHPAD)){
   if(get_ival(PS4_PS)){set_val(PS4_PS, 100)}//MISCELLANEOUS
   }
   else {
   if(event_release(PS4_UP)){set_val(PS4_UP, 0)}//DPAD
   if(event_release(PS4_DOWN)){set_val(PS4_DOWN, 0)}//DPAD
   if(event_release(PS4_LEFT)){set_val(PS4_LEFT, 0)}//DPAD
   if(event_release(PS4_RIGHT)){set_val(PS4_RIGHT, 0)}//DPAD
   if(event_release(PS4_SQUARE)){set_val(PS4_SQUARE, 0)}//BUTTONS
   if(event_release(PS4_TRIANGLE)){set_val(PS4_TRIANGLE, 0)}//BUTTONS
   if(event_release(PS4_CIRCLE)){set_val(PS4_CIRCLE, 0)}//BUTTONS
   if(event_release(PS4_CROSS)){set_val(PS4_CROSS, 0)}//BUTTONS
   if(event_release(PS4_L1)){set_val(PS4_L1, 0)}//BUMPERS
   if(event_release(PS4_R1)){set_val(PS4_R1, 0)}//BUMPERS
   if(event_release(PS4_L2)){set_val(PS4_L2, 0)}//TRIGGERS     **BUT WE NEED THE RELEASE**
   if(event_release(PS4_R2)){set_val(PS4_R2, 0)}//TRIGGERS      *SO IT CAN GO TO 0 QUICK*
   if(event_release(PS4_L3)){set_val(PS4_L3, 0)}//STICK CLICK
   if(event_release(PS4_R3)){set_val(PS4_R3, 0)}//STICK CLICK
   if(event_release(PS4_SHARE)){set_val(PS4_SHARE, 0)}//MISCELLANEOUS
   if(event_release(PS4_TOUCH)){set_val(PS4_TOUCH, 0)}//MISCELLANEOUS
   if(event_release(PS4_OPTIONS)){set_val(PS4_OPTIONS, 0)}//MISCELLANEOUS
   if(event_release(PS4_PS)){set_val(PS4_PS, 0)}//MISCELLANEOUS
		   }		   
}
const int16 Lookup_Table[]  = { 0, 1, 3, 5, 6, 8, 10, 12, 13, 15, 17, 19, 20, 22, 24, 25, 27, 29, 30, 32, 34, 35, 37, 39, 40, 42, 43, 45, 46, 48, 50, 51, 52, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 89, 90, 91, 92, 92, 93, 93, 94, 95, 95, 96, 96, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 100 };
const int8 ExploitPolar[]= {
    100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,
    71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,
    -8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,
    -65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,
    -97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,
    -94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,
    -56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,
    11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,
    81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100
};
const int8 DamPolarArray[]= { 100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100};
const char Polar_Array[]={100,100,100,100,100,100,100,100,99,99,99,99,98,98,97,97,97,96,95,95,94,94,93,92,92,91,90,89,89,88,87,86,85,84,83,82,81,80,79,78,77,75,74,73,72,71,70,69,67,66,65,63,62,61,59,58,56,55,53,52,50,49,47,46,44,43,41,40,38,36,35,33,31,30,28,26,25,23,21,20,18,16,14,13,11,9,7,6,4,2,0,-1,-3,-5,-7,-8,-10,-12,-13,-15,-17,-19,-20,-22,-24,-25,-27,-29,-30,-32,-34,-35,-37,-39,-40,-42,-43,-45,-46,-48,-50,-51,-53,-54,-55,-57,-58,-60,-61,-62,-64,-65,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-89,-90,-91,-92,-92,-93,-93,-94,-95,-95,-96,-96,-97,-97,-97,-98,-98,-99,-99,-99,-99,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-99,-99,-99,-98,-98,-98,-97,-97,-96,-96,-95,-94,-94,-93,-93,-92,-91,-90,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76,-75,-74,-72,-71,-70,-69,-67,-66,-65,-63,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-38,-36,-35,-33,-31,-30,-28,-26,-25,-23,-21,-20,-18,-16,-14,-13,-11,-9,-7,-6,-4,-2,0,2,4,6,7,9,11,13,14,16,18,20,21,23,25,26,28,30,31,33,35,36,38,40,41,43,44,46,47,49,51,52,54,55,56,58,59,61,62,63,65,66,67,69,70,70,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,89,90,91,92,92,93,94,94,95,95,96,97,97,97,98,98,99,99,99,99,100,100,100,100,100,100,100}; ú¹ˆ¾†·ƒ´‚´†¿‰½‹³